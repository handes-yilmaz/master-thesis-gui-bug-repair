[
  {
    "bug_id": "SEC_XSS_01",
    "title": "XSS Vulnerability in Dynamic Content Rendering",
    "description": "User-generated content is rendered using dangerouslySetInnerHTML without proper sanitization, allowing malicious scripts to execute in the browser context.",
    "expected_solution": "Implement proper input sanitization, use DOMPurify library, add CSP headers",
    "bug_category": "security",
    "severity": "critical",
    "difficulty": "high",
    "ui_context": "User comment system with rich text display",
    "code_snippet": "\nfunction CommentDisplay({ comment }) {\n    // VULNERABLE: Direct HTML injection\n    return (\n        <div \n            dangerouslySetInnerHTML={{ __html: comment.content }}\n            className=\"comment-content\"\n        />\n    );\n}\n\n// Vulnerable usage\n<CommentDisplay comment={{ content: '<script>alert(\"XSS\")</script>' }} />\n",
    "security_implications": [
      "XSS",
      "data theft",
      "session hijacking",
      "malware injection"
    ],
    "performance_impact": null,
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "immediate"
  },
  {
    "bug_id": "SEC_CSRF_02",
    "title": "CSRF Token Missing in State-Changing Operations",
    "description": "API endpoints that modify user data or application state lack CSRF protection, allowing malicious sites to perform unauthorized actions on behalf of authenticated users.",
    "expected_solution": "Implement CSRF tokens, validate Origin/Referer headers, use SameSite cookies",
    "bug_category": "security",
    "severity": "high",
    "difficulty": "medium",
    "ui_context": "User profile update form and payment processing",
    "code_snippet": "\n// VULNERABLE: No CSRF protection\nasync function updateProfile(userData) {\n    const response = await fetch('/api/profile/update', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${getToken()}` // Missing CSRF token\n        },\n        body: JSON.stringify(userData)\n    });\n    return response.json();\n}\n",
    "security_implications": [
      "CSRF",
      "unauthorized data modification",
      "account takeover"
    ],
    "performance_impact": null,
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "high"
  },
  {
    "bug_id": "SEC_AUTH_03",
    "title": "Authentication Bypass via Client-Side Validation",
    "description": "Critical authentication checks are performed only on the client side, allowing users to bypass security by manipulating browser developer tools or network requests.",
    "expected_solution": "Implement server-side authentication, validate all requests, use secure session management",
    "bug_category": "security",
    "severity": "critical",
    "difficulty": "medium",
    "ui_context": "Admin panel access control",
    "code_snippet": "\n// VULNERABLE: Client-side only validation\nfunction AdminPanel() {\n    const [isAdmin, setIsAdmin] = useState(false);\n    \n    useEffect(() => {\n        // VULNERABLE: Can be manipulated in browser\n        const userRole = localStorage.getItem('userRole');\n        setIsAdmin(userRole === 'admin');\n    }, []);\n    \n    if (!isAdmin) {\n        return <div>Access Denied</div>;\n    }\n    \n    return <AdminDashboard />;\n}\n",
    "security_implications": [
      "authentication bypass",
      "privilege escalation",
      "data breach"
    ],
    "performance_impact": null,
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "immediate"
  },
  {
    "bug_id": "PERF_MEMORY_04",
    "title": "Memory Leak in Event Listeners",
    "description": "Event listeners are added to DOM elements but never removed, causing memory leaks that degrade performance over time, especially in single-page applications.",
    "expected_solution": "Properly cleanup event listeners, use AbortController, implement component unmounting",
    "bug_category": "performance",
    "severity": "medium",
    "difficulty": "medium",
    "ui_context": "Dynamic list with click handlers",
    "code_snippet": "\nfunction DynamicList({ items }) {\n    useEffect(() => {\n        const handleClick = (e) => {\n            console.log('Item clicked:', e.target.dataset.id);\n        };\n        \n        // VULNERABLE: Event listeners never cleaned up\n        document.addEventListener('click', handleClick);\n        \n        // Missing cleanup function\n        // return () => document.removeEventListener('click', handleClick);\n    }, [items]);\n    \n    return (\n        <div>\n            {items.map(item => (\n                <div key={item.id} data-id={item.id}>\n                    {item.name}\n                </div>\n            ))}\n        </div>\n    );\n}\n",
    "security_implications": null,
    "performance_impact": "Memory usage grows linearly with component instances, eventual browser crash",
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "high"
  },
  {
    "bug_id": "PERF_RENDER_05",
    "title": "Render Blocking CSS and JavaScript",
    "description": "Critical CSS and JavaScript files are loaded synchronously, blocking the initial page render and significantly increasing First Contentful Paint (FCP) time.",
    "expected_solution": "Implement critical CSS inlining, defer non-critical JS, use resource hints",
    "bug_category": "performance",
    "severity": "medium",
    "difficulty": "low",
    "ui_context": "Main application bundle loading",
    "code_snippet": "\n<!-- VULNERABLE: Render blocking resources -->\n<head>\n    <!-- Blocking CSS -->\n    <link rel=\"stylesheet\" href=\"/styles/main.css\" />\n    \n    <!-- Blocking JavaScript -->\n    <script src=\"/js/app.js\"></script>\n    \n    <!-- No resource hints or optimization -->\n</head>\n",
    "security_implications": null,
    "performance_impact": "FCP increased by 2-3 seconds, poor Core Web Vitals scores",
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "medium"
  },
  {
    "bug_id": "PERF_BUNDLE_06",
    "title": "Excessive Bundle Size with Unused Dependencies",
    "description": "JavaScript bundle includes large libraries and dependencies that are not actually used in the application, significantly increasing download and parse time.",
    "expected_solution": "Implement tree shaking, code splitting, analyze and remove unused dependencies",
    "bug_category": "performance",
    "severity": "medium",
    "difficulty": "low",
    "ui_context": "Production build with large bundle size",
    "code_snippet": "\n// VULNERABLE: Importing entire libraries\nimport * as lodash from 'lodash';  // Imports entire library\nimport { Button } from '@mui/material';  // Imports entire Material-UI\n\n// Better approach:\n// import { debounce } from 'lodash/debounce';\n// import Button from '@mui/material/Button';\n",
    "security_implications": null,
    "performance_impact": "Bundle size 2-3x larger than necessary, slower page loads",
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "medium"
  },
  {
    "bug_id": "BROWSER_FLEXBOX_07",
    "title": "Flexbox Layout Inconsistencies Across Browsers",
    "description": "Flexbox layouts render differently in Safari, Firefox, and Chrome due to varying implementations of flexbox standards, causing visual misalignment.",
    "expected_solution": "Add vendor prefixes, use flexbox fallbacks, implement browser-specific CSS",
    "bug_category": "cross_browser",
    "severity": "medium",
    "difficulty": "medium",
    "ui_context": "Responsive grid layout system",
    "code_snippet": "\n.grid-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n\n.grid-item {\n    flex: 1 1 300px;\n    /* Missing vendor prefixes and fallbacks */\n}\n\n/* Safari-specific issues with flex-basis */\n@supports (-webkit-appearance: none) {\n    .grid-item {\n        flex-basis: 300px;\n        min-width: 300px;\n    }\n}\n",
    "security_implications": null,
    "performance_impact": null,
    "browser_specific": [
      "Safari",
      "Firefox",
      "Edge"
    ],
    "mobile_affected": true,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "medium"
  },
  {
    "bug_id": "BROWSER_ES6_08",
    "title": "ES6+ Features Not Supported in Older Browsers",
    "description": "Modern JavaScript features like arrow functions, destructuring, and async/await are used without proper transpilation, causing syntax errors in older browsers.",
    "expected_solution": "Configure Babel transpilation, add polyfills, implement feature detection",
    "bug_category": "cross_browser",
    "severity": "high",
    "difficulty": "low",
    "ui_context": "Modern React application with ES6+ syntax",
    "code_snippet": "\n// VULNERABLE: ES6+ features without transpilation\nconst UserProfile = ({ user }) => {\n    const { name, email, preferences = {} } = user;  // Destructuring\n    \n    const handleSubmit = async (formData) => {  // Async/await\n        try {\n            const response = await api.updateProfile(formData);\n            return response.data;\n        } catch (error) {\n            console.error('Update failed:', error);\n        }\n    };\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            <input defaultValue={name} />\n            <input defaultValue={email} />\n        </form>\n    );\n};\n",
    "security_implications": null,
    "performance_impact": null,
    "browser_specific": [
      "IE11",
      "Safari < 10",
      "Chrome < 50"
    ],
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "high"
  },
  {
    "bug_id": "BROWSER_CSS_09",
    "title": "CSS Grid and Custom Properties Browser Support Issues",
    "description": "CSS Grid layouts and CSS custom properties (variables) are not supported in older browsers, causing complete layout failures and missing styles.",
    "expected_solution": "Implement CSS Grid fallbacks, use PostCSS autoprefixer, add feature queries",
    "bug_category": "cross_browser",
    "severity": "medium",
    "difficulty": "medium",
    "ui_context": "Modern CSS Grid-based dashboard layout",
    "code_snippet": "\n:root {\n    --primary-color: #007bff;\n    --secondary-color: #6c757d;\n    --grid-gap: 20px;\n}\n\n.dashboard-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: var(--grid-gap);\n    /* Missing fallback for older browsers */\n}\n\n/* Should include fallback */\n.dashboard-grid {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n@supports (display: grid) {\n    .dashboard-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n        gap: var(--grid-gap);\n    }\n}\n",
    "security_implications": null,
    "performance_impact": null,
    "browser_specific": [
      "IE11",
      "Safari < 10.1",
      "Chrome < 57"
    ],
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "medium"
  },
  {
    "bug_id": "MOBILE_TOUCH_10",
    "title": "Touch Event Handling Issues on Mobile Devices",
    "description": "Touch events are not properly handled on mobile devices, causing tap delays, double-tap zoom issues, and poor touch responsiveness.",
    "expected_solution": "Implement proper touch event handling, add viewport meta tags, use touch-action CSS",
    "bug_category": "mobile",
    "severity": "medium",
    "difficulty": "medium",
    "ui_context": "Interactive buttons and form elements",
    "code_snippet": "\n// VULNERABLE: Missing touch event handling\nfunction TouchButton({ onClick, children }) {\n    return (\n        <button \n            onClick={onClick}\n            className=\"touch-button\"\n            // Missing touch event handlers\n        >\n            {children}\n        </button>\n    );\n}\n\n/* Missing touch-specific CSS */\n.touch-button {\n    /* Should include: */\n    /* touch-action: manipulation; */\n    /* -webkit-tap-highlight-color: transparent; */\n}\n",
    "security_implications": null,
    "performance_impact": null,
    "browser_specific": null,
    "mobile_affected": true,
    "accessibility_impact": "Poor touch experience for mobile users",
    "testing_scenarios": null,
    "fix_priority": "medium"
  },
  {
    "bug_id": "MOBILE_VIEWPORT_11",
    "title": "Viewport and Scaling Issues on Mobile Devices",
    "description": "Mobile viewport is not properly configured, causing content to be too small, horizontal scrolling, or improper scaling across different device sizes.",
    "expected_solution": "Add proper viewport meta tags, implement responsive design, test on various devices",
    "bug_category": "mobile",
    "severity": "high",
    "difficulty": "low",
    "ui_context": "Responsive web application",
    "code_snippet": "\n<!-- VULNERABLE: Missing or incorrect viewport configuration -->\n<head>\n    <!-- Missing viewport meta tag -->\n    <!-- <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> -->\n    \n    <!-- Or incorrect configuration -->\n    <!-- <meta name=\"viewport\" content=\"width=1024\"> -->\n</head>\n\n/* Missing mobile-first CSS approach */\n.container {\n    width: 1200px;  /* Fixed width causes horizontal scroll on mobile */\n    margin: 0 auto;\n}\n",
    "security_implications": null,
    "performance_impact": null,
    "browser_specific": [
      "Mobile Safari",
      "Chrome Mobile",
      "Samsung Internet"
    ],
    "mobile_affected": true,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "high"
  },
  {
    "bug_id": "REALTIME_WEBSOCKET_12",
    "title": "WebSocket Connection State Management Issues",
    "description": "WebSocket connections are not properly managed, causing connection drops, reconnection failures, and data synchronization issues in real-time applications.",
    "expected_solution": "Implement connection state management, automatic reconnection, heartbeat monitoring",
    "bug_category": "real_time",
    "severity": "high",
    "difficulty": "high",
    "ui_context": "Real-time chat or collaboration application",
    "code_snippet": "\n// VULNERABLE: Poor WebSocket connection management\nclass WebSocketManager {\n    constructor(url) {\n        this.ws = new WebSocket(url);\n        this.ws.onopen = () => console.log('Connected');\n        this.ws.onclose = () => console.log('Disconnected');\n        // Missing reconnection logic, error handling, state management\n    }\n    \n    send(data) {\n        if (this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(data);\n        }\n        // No error handling or retry logic\n    }\n}\n",
    "security_implications": null,
    "performance_impact": "Frequent disconnections, poor user experience, data loss",
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "high"
  },
  {
    "bug_id": "REALTIME_STATE_13",
    "title": "Real-Time State Synchronization Conflicts",
    "description": "Multiple users editing the same content simultaneously cause state conflicts, data corruption, and inconsistent user experiences.",
    "expected_solution": "Implement operational transformation, conflict resolution, optimistic updates with rollback",
    "bug_category": "real_time",
    "severity": "high",
    "difficulty": "high",
    "ui_context": "Collaborative document editor",
    "code_snippet": "\n// VULNERABLE: No conflict resolution\nfunction DocumentEditor({ documentId }) {\n    const [content, setContent] = useState('');\n    \n    const handleChange = (newContent) => {\n        setContent(newContent);\n        \n        // VULNERABLE: Direct update without conflict checking\n        socket.emit('document:update', {\n            id: documentId,\n            content: newContent,\n            timestamp: Date.now()\n            // Missing: version, user ID, conflict resolution\n        });\n    };\n    \n    // No handling of concurrent updates from other users\n}\n",
    "security_implications": null,
    "performance_impact": "Data corruption, poor collaboration experience",
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "high"
  },
  {
    "bug_id": "PWA_SERVICE_WORKER_14",
    "title": "Service Worker Caching Strategy Issues",
    "description": "Service worker caching strategies are not properly implemented, causing offline functionality failures, stale content, and poor performance.",
    "expected_solution": "Implement proper caching strategies, version management, cache cleanup",
    "bug_category": "pwa",
    "severity": "medium",
    "difficulty": "high",
    "ui_context": "Progressive Web Application with offline support",
    "code_snippet": "\n// VULNERABLE: Poor caching strategy\nself.addEventListener('fetch', (event) => {\n    event.respondWith(\n        caches.match(event.request)\n            .then(response => {\n                // VULNERABLE: Always return cached version if available\n                return response || fetch(event.request);\n                // Missing: cache-first strategy, version management, cache cleanup\n            })\n    );\n});\n\n// Missing: cache versioning, cleanup, offline fallback\n",
    "security_implications": null,
    "performance_impact": "Stale content, poor offline experience, storage bloat",
    "browser_specific": null,
    "mobile_affected": false,
    "accessibility_impact": null,
    "testing_scenarios": null,
    "fix_priority": "medium"
  },
  {
    "bug_id": "PWA_INSTALL_15",
    "title": "PWA Installation and Update Flow Issues",
    "description": "Progressive Web App installation prompts don't work properly, updates are not handled correctly, and users cannot access the app offline.",
    "expected_solution": "Implement proper install prompts, update notifications, offline functionality",
    "bug_category": "pwa",
    "severity": "medium",
    "difficulty": "medium",
    "ui_context": "PWA installation and update system",
    "code_snippet": "\n// VULNERABLE: Missing PWA installation handling\nlet deferredPrompt;\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n    // VULNERABLE: Prompt not stored or handled\n    console.log('Install prompt available');\n    // Missing: store prompt, show install button, handle user choice\n});\n\n// Missing: update notification, offline detection, install button\n",
    "security_implications": null,
    "performance_impact": null,
    "browser_specific": null,
    "mobile_affected": true,
    "accessibility_impact": "Poor PWA experience for mobile users",
    "testing_scenarios": null,
    "fix_priority": "medium"
  }
]