{
    "1/1": "To address the issue described in the bug report, we need to focus on the behavior of the markdown parser when handling nested code blocks or raw HTML. The problem is that the \"format on save\" feature in Prettier is adding extra indentation each time the file is saved, which is not the expected behavior.\n\n### Bug Scenario Analysis\nThe bug scenario images and the description in the bug report indicate that the indentation of nested code blocks or raw HTML is increasing with each save operation. This suggests that the parser or formatter is not correctly handling the indentation levels for these elements.\n\n### Bug Root Cause\nThe root cause likely lies in how the parser processes and transforms the markdown AST (Abstract Syntax Tree). Specifically, the handling of whitespace and indentation in the transformation functions might be causing the issue. The `transformInlineCode`, `restoreUnescapedCharacter`, `mergeContinuousTexts`, and `splitText` functions are potential areas where the indentation logic could be flawed.\n\n### Bug Location and Fix\nThe `splitText` function is responsible for splitting text into sentences and handling whitespace. It is likely that this function is not correctly preserving the indentation for nested code blocks or raw HTML. We need to ensure that the indentation is preserved correctly during the parsing and transformation process.\n\n### Patch Generation\nWe will modify the `splitText` function to correctly handle indentation for nested code blocks or raw HTML. The goal is to ensure that the indentation is preserved and not increased with each save operation.\n\n```javascript\n### src/language-markdown/parser-markdown.js\n<<<<<<< SEARCH\nfunction splitText() {\n  return ast =>\n    map(ast, (node, index, parentNode) => {\n      if (node.type !== \"text\") {\n        return node;\n      }\n\n      let value = node.value;\n\n      if (parentNode.type === \"paragraph\") {\n        if (index === 0) {\n          value = value.trimLeft();\n        }\n        if (index === parentNode.children.length - 1) {\n          value = value.trimRight();\n        }\n      }\n\n      return {\n        type: \"sentence\",\n        position: node.position,\n        children: util.splitText(value)\n      };\n    });\n}\n=======\nfunction splitText() {\n  return ast =>\n    map(ast, (node, index, parentNode) => {\n      if (node.type !== \"text\") {\n        return node;\n      }\n\n      let value = node.value;\n\n      if (parentNode.type === \"paragraph\") {\n        if (index === 0) {\n          value = value.trimLeft();\n        }\n        if (index === parentNode.children.length - 1) {\n          value = value.trimRight();\n        }\n      }\n\n      // Preserve indentation for nested code blocks or raw HTML\n      if (parentNode.type === \"html\" || parentNode.type === \"code\") {\n        value = node.value;\n      }\n\n      return {\n        type: \"sentence\",\n        position: node.position,\n        children: util.splitText(value)\n      };\n    });\n}\n>>>>>>> REPLACE\n```\n\n### Explanation\n- The patch modifies the `splitText` function to check if the parent node is of type `html` or `code`. If so, it preserves the original value of the node, which includes the indentation.\n- This change ensures that the indentation for nested code blocks or raw HTML is not altered during the parsing and transformation process, thus preventing the issue of increasing indentation on each save."
}