{
    "1/1": {
        "src/language-markdown/printer-markdown.js": [
            {
                "SEARCH": [
                    "function printTable(path, options, print) {",
                    "const node = path.getValue();",
                    "const contents = []; // { [rowIndex: number]: { [columnIndex: number]: string } }",
                    "",
                    "path.map(rowPath => {",
                    "const rowContents = [];",
                    "",
                    "rowPath.map(cellPath => {",
                    "rowContents.push(",
                    "printDocToString(cellPath.call(print), options).formatted",
                    ");",
                    "}, \"children\");",
                    "",
                    "contents.push(rowContents);",
                    "}, \"children\");",
                    "",
                    "const columnMaxWidths = contents.reduce(",
                    "(currentWidths, rowContents) =>",
                    "currentWidths.map((width, columnIndex) =>",
                    "Math.max(width, privateUtil.getStringWidth(rowContents[columnIndex]))",
                    "),",
                    "contents[0].map(() => 3) // minimum width = 3 (---, :--, :-:, --:)",
                    ");",
                    "",
                    "return join(hardline, [",
                    "printRow(contents[0]),",
                    "printSeparator(),",
                    "join(hardline, contents.slice(1).map(printRow))",
                    "]);",
                    "",
                    "function printSeparator() {",
                    "return concat([",
                    "\"| \",",
                    "join(",
                    "\" | \",",
                    "columnMaxWidths.map((width, index) => {",
                    "switch (node.align[index]) {",
                    "case \"left\":",
                    "return \":\" + \"-\".repeat(width - 1);",
                    "case \"right\":",
                    "return \"-\".repeat(width - 1) + \":\";",
                    "case \"center\":",
                    "return \":\" + \"-\".repeat(width - 2) + \":\";",
                    "default:",
                    "return \"-\".repeat(width);",
                    "}",
                    "})",
                    "),",
                    "\" |\"",
                    "]);",
                    "}"
                ],
                "REPLACE": [
                    "function printTable(path, options, print) {",
                    "  const node = path.getValue();",
                    "  const contents = []; // { [rowIndex: number]: { [columnIndex: number]: string } }",
                    "",
                    "  path.map(rowPath => {",
                    "    const rowContents = [];",
                    "",
                    "    rowPath.map(cellPath => {",
                    "      rowContents.push(",
                    "        printDocToString(cellPath.call(print), options).formatted",
                    "      );",
                    "    }, \"children\");",
                    "",
                    "    contents.push(rowContents);",
                    "  }, \"children\");",
                    "",
                    "  const columnMaxWidths = contents.reduce(",
                    "    (currentWidths, rowContents) =>",
                    "      currentWidths.map((width, columnIndex) =>",
                    "        Math.max(width, privateUtil.getStringWidth(rowContents[columnIndex]))",
                    "      ),",
                    "    contents[0].map(() => 3) // minimum width = 3 (---, :--, :-:, --:)",
                    "  );",
                    "",
                    "  // Check if any row exceeds the maximum allowed length",
                    "  const maxLineLength = 80; // Define a maximum line length",
                    "  const shouldUseSimpleSeparator = contents.some(rowContents =>",
                    "    rowContents.join(\" | \").length > maxLineLength",
                    "  );",
                    "",
                    "  return join(hardline, [",
                    "    printRow(contents[0]),",
                    "    shouldUseSimpleSeparator ? \"| :---: | :---: | :---: |\" : printSeparator(),",
                    "    join(hardline, contents.slice(1).map(printRow))",
                    "  ]);",
                    "",
                    "  function printSeparator() {",
                    "    return concat([",
                    "      \"| \",",
                    "      join(",
                    "        \" | \",",
                    "        columnMaxWidths.map((width, index) => {",
                    "          switch (node.align[index]) {",
                    "            case \"left\":",
                    "              return \":\" + \"-\".repeat(width - 1);",
                    "            case \"right\":",
                    "              return \"-\".repeat(width - 1) + \":\";",
                    "            case \"center\":",
                    "              return \":\" + \"-\".repeat(width - 2) + \":\";",
                    "            default:",
                    "              return \"-\".repeat(width);",
                    "          }",
                    "        })",
                    "      ),",
                    "      \" |\"",
                    "    ]);",
                    "  }"
                ]
            }
        ]
    }
}