{
    "1": {
        "bug_file": "src/language-js/print/jsx.js",
        "compressed": "YES",
        "line_numbers": 770,
        "compressed_line_numbers": 143,
        "compressed_bug_file_content": "\n\n// JSX expands children from the inside-out, instead of the outside-in.\n// This is both to break children before attributes,\n// and to ensure that when children break, their parents do as well.\n//\n// Any element that is written without any newlines and fits on a single line\n// is left that way.\n// Not only that, any user-written-line containing multiple JSX siblings\n// should also be kept on one line if possible,\n// so each user-written-line is wrapped in its own group.\n//\n// Elements that contain newlines or don't fit on a single line (recursively)\n// are fully-split, using hardline and shouldBreak: true.\n//\n// To support that case properly, all leading and trailing spaces\n// are stripped from the list of children, and replaced with a single hardline.\n\n\n  // Convert `{\" \"}` to text nodes containing a space.\n  // This makes it easy to turn them into `jsxWhitespace` which\n  // can then print as either a space or `{\" \"}` when breaking.\n\n\n  // Record any breaks. Should never go from true to false, only false to true.\n\n\n  // We can end up we multiple whitespace elements with empty string\n  // content between them.\n  // We need to remove empty whitespace and softlines before JSX whitespace\n  // to get the correct output.\n\n\n  // Trim trailing lines (or empty strings)\n\n\n  // Trim leading lines (or empty strings)\n\n\n  // Tweak how we format children if outputting this element over multiple lines.\n  // Also detect whether we will force this element to output over multiple lines.\n\n\n    // There are a number of situations where we need to ensure we display\n    // whitespace as `{\" \"}` when outputting this element over multiple lines.\n\n\n          // Solitary whitespace\n\n\n        // Leading whitespace\n\n\n        // Trailing whitespace\n\n\n        // Whitespace after line break\n\n\n  // If there is text we use `fill` to fit as much onto each line as possible.\n  // When there is no text (just tags and expressions) we use `group`\n  // to output each on a separate line.\n\n\n// JSX Children are strange, mostly for two reasons:\n// 1. JSX reads newlines into string values, instead of skipping them like JS\n// 2. up to one whitespace between elements within a line is significant,\n//    but not between lines.\n//\n// Leading, trailing, and lone whitespace all need to\n// turn themselves into the rather ugly `{' '}` when breaking.\n//\n// We print JSX using the `fill` doc primitive.\n// This requires that we give it an array of alternating\n// content and whitespace elements.\n// To ensure this we add dummy `\"\"` content elements as needed.\n\n\n      // Contains a non-whitespace character\n\n\n        // Starts with whitespace\n\n\n        // Ends with whitespace\n\n\n        // This was whitespace only without a new line.\n\n\n        // Keep (up to one) blank line between tags/expressions/text.\n        // Note: We don't keep blank lines between text elements.\n\n\n  /* istanbul ignore next */\n\n\n      // Unescape all quotes so we get an accurate preferred quote\n\n\n  // Don't break self-closing elements with no attributes and no comments\n\n\n  // don't break up opening elements with a single long text attribute\n\n\n    // We should break for the following cases:\n    // <div\n    //   // comment\n    //   attr=\"value\"\n    // >\n    // <div\n    //   attr=\"value\"\n    //   // comment\n    // >\n\n\n    // Simple tags (no attributes and no comment in tag name) should be\n    // kept unbroken regardless of `jsxBracketSameLine`\n\n\n      // We should print the bracket in a new line for the following cases:\n      // <div\n      //   // comment\n      // >\n      // <div\n      //   attr // comment\n      // >\n\n\n  // We should print the opening element expanded if any prop value is a\n  // string literal with newlines\n\n\n// `JSXSpreadAttribute` and `JSXSpreadChild`\n\n\n      // Same as `printJsxSpreadAttribute`\n\n\n      /* istanbul ignore next */\n\n\n"
    }
}