{
    "1": {
        "bug_file": "src/config-provider/index.jsx",
        "compressed": "NO",
        "line_numbers": 254,
        "compressed_line_numbers": 254,
        "compressed_bug_file_content": "import { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport getContextProps from './get-context-props';\nimport {\n    config,\n    initLocales,\n    setLanguage,\n    setLocale,\n    setDirection,\n    getLocale,\n    getLanguage,\n    getDirection,\n} from './config';\nimport Consumer from './consumer';\nimport ErrorBoundary from './error-boundary';\nimport Cache from './cache';\nimport datejs from '../util/date';\n\nconst childContextCache = new Cache();\n\nconst setMomentLocale = locale => {\n    let moment;\n    try {\n        moment = require('moment');\n    } catch (e) {\n        // ignore\n    }\n\n    if (moment && locale) {\n        moment.locale(locale.momentLocale);\n    }\n};\n\nconst setDateLocale = locale => {\n    if (locale) {\n        datejs.locale(locale.dateLocale || locale.momentLocale);\n    }\n};\n\n/**\n * ConfigProvider\n * @propsExtends false\n */\nclass ConfigProvider extends Component {\n    static propTypes = {\n        /**\n         * 样式类名的品牌前缀\n         */\n        prefix: PropTypes.string,\n        /**\n         * 国际化文案对象，属性为组件的 displayName\n         */\n        locale: PropTypes.object,\n        /**\n         * 组件 API 的默认配置\n         */\n        defaultPropsConfig: PropTypes.object,\n        /**\n         * 是否开启错误捕捉 errorBoundary\n         * 如需自定义参数，请传入对象 对象接受参数列表如下：\n         *\n         * fallbackUI `Function(error?: {}, errorInfo?: {}) => Element` 捕获错误后的展示\n         * afterCatch `Function(error?: {}, errorInfo?: {})` 捕获错误后的行为, 比如埋点上传\n         */\n        errorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n        /**\n         * 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用\n         */\n        pure: PropTypes.bool,\n        /**\n         * 是否在开发模式下显示组件属性被废弃的 warning 提示\n         */\n        warning: PropTypes.bool,\n        /**\n         * 是否开启 rtl 模式\n         */\n        rtl: PropTypes.bool,\n        /**\n         * 设备类型，针对不同的设备类型组件做出对应的响应式变化\n         */\n        device: PropTypes.oneOf(['tablet', 'desktop', 'phone']),\n        /**\n         * 组件树\n         */\n        children: PropTypes.any,\n        /**\n         * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数\n         */\n        popupContainer: PropTypes.any,\n    };\n\n    static defaultProps = {\n        warning: true,\n        errorBoundary: false,\n    };\n\n    static contextTypes = {\n        nextPrefix: PropTypes.string,\n        nextLocale: PropTypes.object,\n        nextDefaultPropsConfig: PropTypes.object,\n        nextPure: PropTypes.bool,\n        nextRtl: PropTypes.bool,\n        nextWarning: PropTypes.bool,\n        nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),\n        nextPopupContainer: PropTypes.any,\n        nextErrorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    };\n\n    static childContextTypes = {\n        nextPrefix: PropTypes.string,\n        nextLocale: PropTypes.object,\n        nextDefaultPropsConfig: PropTypes.object,\n        nextPure: PropTypes.bool,\n        nextRtl: PropTypes.bool,\n        nextWarning: PropTypes.bool,\n        nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),\n        nextPopupContainer: PropTypes.any,\n        nextErrorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    };\n\n    /**\n     * 传入组件，生成受 ConfigProvider 控制的 HOC 组件\n     * @param {Component} Component 组件类\n     * @param {Object} options 可选项\n     * @returns {Component} HOC\n     */\n    static config = (Component, options) => {\n        return config(Component, options);\n    };\n\n    /**\n     * 传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件\n     * @param {Object} props 组件的 props\n     * @param {String} displayName 组件的 displayName\n     * @returns {Object} 新的 context props\n     */\n    static getContextProps = (props, displayName) => {\n        return getContextProps(props, childContextCache.root() || {}, displayName);\n    };\n\n    static initLocales = initLocales;\n    static setLanguage = setLanguage;\n    static setLocale = setLocale;\n    static setDirection = setDirection;\n    static getLanguage = getLanguage;\n    static getLocale = getLocale;\n    static getDirection = getDirection;\n    static Consumer = Consumer;\n    static ErrorBoundary = ErrorBoundary;\n\n    static getContext = () => {\n        const {\n            nextPrefix,\n            nextLocale,\n            nextDefaultPropsConfig,\n            nextPure,\n            nextRtl,\n            nextWarning,\n            nextDevice,\n            nextPopupContainer,\n            nextErrorBoundary,\n        } = childContextCache.root() || {};\n\n        return {\n            prefix: nextPrefix,\n            locale: nextLocale,\n            defaultPropsConfig: nextDefaultPropsConfig,\n            pure: nextPure,\n            rtl: nextRtl,\n            warning: nextWarning,\n            device: nextDevice,\n            popupContainer: nextPopupContainer,\n            errorBoundary: nextErrorBoundary,\n        };\n    };\n\n    constructor(...args) {\n        super(...args);\n        childContextCache.add(this, Object.assign({}, childContextCache.get(this, {}), this.getChildContext()));\n\n        setMomentLocale(this.props.locale);\n        setDateLocale(this.props.locale);\n\n        this.state = {\n            locale: this.props.locale,\n        };\n    }\n\n    getChildContext() {\n        const {\n            prefix,\n            locale,\n            defaultPropsConfig,\n            pure,\n            warning,\n            rtl,\n            device,\n            popupContainer,\n            errorBoundary,\n        } = this.props;\n\n        const {\n            nextPrefix,\n            nextDefaultPropsConfig,\n            nextLocale,\n            nextPure,\n            nextRtl,\n            nextWarning,\n            nextDevice,\n            nextPopupContainer,\n            nextErrorBoundary,\n        } = this.context;\n\n        return {\n            nextPrefix: prefix || nextPrefix,\n            nextDefaultPropsConfig: defaultPropsConfig || nextDefaultPropsConfig,\n            nextLocale: locale || nextLocale,\n            nextPure: typeof pure === 'boolean' ? pure : nextPure,\n            nextRtl: typeof rtl === 'boolean' ? rtl : nextRtl,\n            nextWarning: typeof warning === 'boolean' ? warning : nextWarning,\n            nextDevice: device || nextDevice,\n            nextPopupContainer: popupContainer || nextPopupContainer,\n            nextErrorBoundary: errorBoundary || nextErrorBoundary,\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.locale !== prevState.locale) {\n            setMomentLocale(nextProps.locale);\n            setDateLocale(nextProps.locale);\n\n            return {\n                locale: nextProps.locale,\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate() {\n        childContextCache.add(this, Object.assign({}, childContextCache.get(this, {}), this.getChildContext()));\n    }\n\n    componentWillUnmount() {\n        childContextCache.remove(this);\n    }\n\n    render() {\n        return Children.only(this.props.children);\n    }\n}\n\nexport default polyfill(ConfigProvider);"
    },
    "2": {
        "bug_file": "src/config-provider/cache.js",
        "compressed": "NO",
        "line_numbers": 49,
        "compressed_line_numbers": 49,
        "compressed_bug_file_content": "class Cache {\n    constructor() {\n        this._root = null;\n        this._store = new Map();\n    }\n\n    empty() {\n        return this._store.size === 0;\n    }\n\n    has(key) {\n        return this._store.has(key);\n    }\n\n    get(key, defaultValue) {\n        const res = this.has(key) ? this._store.get(key) : this.root();\n        return typeof res === 'undefined' || res === null ? defaultValue : res;\n    }\n\n    add(key, value) {\n        if (this.empty()) {\n            this._root = key;\n        }\n        this._store.set(key, value);\n    }\n\n    update(key, value) {\n        if (this.has(key)) {\n            this._store.set(key, value);\n        }\n    }\n\n    remove(key) {\n        this._store.delete(key);\n\n        if (key === this._root) {\n            const maps = this._store.keys();\n            // 如果当前销毁的实例刚好是root，那么从map中取下一个加入的节点当作root\n            const nextkey = maps.next().value;\n            this._root = nextkey;\n        }\n    }\n\n    root() {\n        return this._store.get(this._root);\n    }\n}\n\nexport default Cache;"
    },
    "3": {
        "bug_file": "src/config-provider/config.jsx",
        "compressed": "NO",
        "line_numbers": 224,
        "compressed_line_numbers": 224,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport { obj, log } from '../util';\nimport getContextProps from './get-context-props';\nimport ErrorBoundary from './error-boundary';\n\nconst { shallowEqual } = obj;\n\nfunction getDisplayName(Component) {\n    return Component.displayName || Component.name || 'Component';\n}\n\nlet globalLocales;\nlet currentGlobalLanguage = 'zh-cn';\nlet currentGlobalLocale = {};\nlet currentGlobalRtl;\n\nexport function initLocales(locales) {\n    globalLocales = locales;\n\n    if (locales) {\n        currentGlobalLocale = locales[currentGlobalLanguage];\n\n        if (typeof currentGlobalRtl !== 'boolean') {\n            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;\n        }\n    }\n}\n\nexport function setLanguage(language) {\n    if (globalLocales) {\n        currentGlobalLanguage = language;\n        currentGlobalLocale = globalLocales[language];\n\n        if (typeof currentGlobalRtl !== 'boolean') {\n            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;\n        }\n    }\n}\n\nexport function setLocale(locale) {\n    currentGlobalLocale = {\n        ...(globalLocales ? globalLocales[currentGlobalLanguage] : {}),\n        ...locale,\n    };\n\n    if (typeof currentGlobalRtl !== 'boolean') {\n        currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;\n    }\n}\n\nexport function setDirection(dir) {\n    currentGlobalRtl = dir === 'rtl';\n}\n\nexport function getLocale() {\n    return currentGlobalLocale;\n}\n\nexport function getLanguage() {\n    return currentGlobalLanguage;\n}\n\nexport function getDirection() {\n    return currentGlobalRtl;\n}\n\nexport function config(Component, options = {}) {\n    // 非 forwardRef 创建的 class component\n    if (obj.isClassComponent(Component) && Component.prototype.shouldComponentUpdate === undefined) {\n        // class component: 通过定义 shouldComponentUpdate 改写成 pure component, 有refs\n        Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n            if (this.props.pure) {\n                return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n            }\n\n            return true;\n        };\n    }\n\n    class ConfigedComponent extends React.Component {\n        static propTypes = {\n            ...(Component.propTypes || {}),\n            prefix: PropTypes.string,\n            locale: PropTypes.object,\n            defaultPropsConfig: PropTypes.object,\n            pure: PropTypes.bool,\n            rtl: PropTypes.bool,\n            device: PropTypes.oneOf(['tablet', 'desktop', 'phone']),\n            popupContainer: PropTypes.any,\n            errorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n        };\n        static contextTypes = {\n            ...(Component.contextTypes || {}),\n            nextPrefix: PropTypes.string,\n            nextLocale: PropTypes.object,\n            nextDefaultPropsConfig: PropTypes.object,\n            nextPure: PropTypes.bool,\n            nextRtl: PropTypes.bool,\n            nextWarning: PropTypes.bool,\n            nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),\n            nextPopupContainer: PropTypes.any,\n            nextErrorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n        };\n\n        constructor(props, context) {\n            super(props, context);\n\n            this._getInstance = this._getInstance.bind(this);\n            this._deprecated = this._deprecated.bind(this);\n        }\n\n        _getInstance(ref) {\n            this._instance = ref;\n\n            if (this._instance && options.exportNames) {\n                options.exportNames.forEach(name => {\n                    const field = this._instance[name];\n                    if (typeof field === 'function') {\n                        this[name] = field.bind(this._instance);\n                    } else {\n                        this[name] = field;\n                    }\n                });\n            }\n        }\n\n        _deprecated(...args) {\n            if (this.context.nextWarning !== false) {\n                log.deprecated(...args);\n            }\n        }\n\n        getInstance() {\n            return this._instance;\n        }\n\n        render() {\n            const {\n                prefix,\n                locale,\n                defaultPropsConfig,\n                pure,\n                rtl,\n                device,\n                popupContainer,\n                errorBoundary,\n                ...others\n            } = this.props;\n            const {\n                nextPrefix,\n                nextLocale = {},\n                nextDefaultPropsConfig = {},\n                nextPure,\n                nextRtl,\n                nextDevice,\n                nextPopupContainer,\n                nextErrorBoundary,\n            } = this.context;\n\n            const displayName = options.componentName || getDisplayName(Component);\n            const contextProps = getContextProps(\n                {\n                    prefix,\n                    locale,\n                    defaultPropsConfig,\n                    pure,\n                    device,\n                    popupContainer,\n                    rtl,\n                    errorBoundary,\n                },\n                {\n                    nextPrefix,\n                    nextLocale: { ...currentGlobalLocale, ...nextLocale },\n                    nextDefaultPropsConfig,\n                    nextPure,\n                    nextDevice,\n                    nextPopupContainer,\n                    nextRtl: typeof nextRtl === 'boolean' ? nextRtl : currentGlobalRtl === true ? true : undefined,\n                    nextErrorBoundary,\n                },\n                displayName\n            );\n\n            // errorBoundary is only for <ErrorBoundary>\n            const newContextProps = ['prefix', 'locale', 'pure', 'rtl', 'device', 'popupContainer'].reduce(\n                (ret, name) => {\n                    if (typeof contextProps[name] !== 'undefined') {\n                        ret[name] = contextProps[name];\n                    }\n                    return ret;\n                },\n                {}\n            );\n\n            if ('pure' in newContextProps && newContextProps.pure) {\n                log.warning('pure of ConfigProvider is deprecated, use Function Component or React.PureComponent');\n            }\n\n            const newOthers = options.transform ? options.transform(others, this._deprecated) : others;\n\n            const content = (\n                <Component\n                    {...contextProps.defaultPropsConfig[displayName]}\n                    {...newOthers}\n                    {...newContextProps}\n                    ref={obj.isClassComponent(Component) ? this._getInstance : null}\n                />\n            );\n\n            const { open, ...othersBoundary } = contextProps.errorBoundary;\n\n            return open ? <ErrorBoundary {...othersBoundary}>{content}</ErrorBoundary> : content;\n        }\n    }\n\n    ConfigedComponent.displayName = `Config(${getDisplayName(Component)})`;\n\n    hoistNonReactStatic(ConfigedComponent, Component);\n\n    return ConfigedComponent;\n}"
    }
}