{
    "1": {
        "bug_file": "src/table/util.js",
        "compressed": "NO",
        "line_numbers": 119,
        "compressed_line_numbers": 119,
        "compressed_bug_file_content": "import classnames from 'classnames';\n\nconst blackList = [\n    'defaultProps',\n    'propTypes',\n    'contextTypes',\n    'childContextTypes',\n    'displayName',\n    'getDerivedStateFromProps',\n];\n\nexport const statics = (Target, Component) => {\n    Object.keys(Component).forEach(property => {\n        if (blackList.indexOf(property) === -1) {\n            Target[property] = Component[property];\n        }\n    });\n};\n\nexport const fetchDataByPath = (object, path) => {\n    if (!object || !path) {\n        return false;\n    }\n    path = path.toString();\n    const field = path.split('.');\n    let val, key;\n    if (field.length) {\n        key = field[0];\n        // lists[1].name\n        if (key.indexOf('[') >= 0) {\n            key = key.match(/(.*)\\[(.*)\\]/);\n            if (key) {\n                val = object[key[1]][key[2]];\n            }\n        } else {\n            val = object[field[0]];\n        }\n        if (val) {\n            for (let colIndex = 1; colIndex < field.length; colIndex++) {\n                val = val[field[colIndex]];\n                if (typeof val === 'undefined') {\n                    break;\n                }\n            }\n        }\n    }\n    return val;\n};\n\n/**\n * @param {Array} lockChildren\n * @param {String} dir 'left', 'right'\n */\nexport const setStickyStyle = (\n    lockChildren,\n    flatenChildren,\n    dir,\n    offsetArr = [],\n    prefix\n) => {\n    const len = flatenChildren.length;\n\n    flatenChildren.forEach((col, index) => {\n        const isLeftLast = dir === 'left' && index === len - 1;\n        const isRightFirst = dir === 'right' && index === 0;\n        const style = {\n            position: 'sticky',\n        };\n        const offset = offsetArr[index];\n\n        if (offset > -1) {\n            style[dir] = offset;\n        }\n\n        col.className = classnames(col.className, {\n            [`${prefix}table-fix-${dir}`]: true,\n            [`${prefix}table-fix-left-last`]: isLeftLast,\n            [`${prefix}table-fix-right-first`]: isRightFirst,\n        });\n        col.style = { ...col.style, ...style };\n        col.cellStyle = style;\n    });\n\n    const setOffset = (col, index, dir) => {\n        const style = {\n            position: 'sticky',\n        };\n        const offset = offsetArr[index];\n\n        if (offset > -1) {\n            style[dir] = offset;\n        }\n\n        col.className = classnames(col.className, {\n            [`${prefix}table-fix-${dir}`]: true,\n            [`${prefix}table-fix-left-last`]: dir === 'left',\n            [`${prefix}table-fix-right-first`]: dir === 'right',\n        });\n        col.style = { ...col.style, ...style };\n        col.cellStyle = style;\n    };\n\n    // for multiple header\n    // const flatenlen = offsetArr.length;\n    const loop = (arr, i) => {\n        dir === 'right' && arr.reverse();\n        arr.forEach((child, j) => {\n            const p = dir === 'right' ? i - j : i + j;\n            if (child.children) {\n                // 合并单元格的节点\n                loop(child.children, p);\n                setOffset(child, p, dir);\n            }\n        });\n        dir === 'right' && arr.reverse();\n    };\n\n    loop(lockChildren, dir === 'left' ? 0 : len - 1);\n};"
    },
    "2": {
        "bug_file": "src/table/column.jsx",
        "compressed": "NO",
        "line_numbers": 105,
        "compressed_line_numbers": 105,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Table.Column\n * @order 0\n **/\nexport default class Column extends React.Component {\n    static propTypes = {\n        /**\n         * 指定列对应的字段，支持`a.b`形式的快速取值\n         */\n        dataIndex: PropTypes.string,\n        /**\n         * 行渲染的逻辑\n         * value, rowIndex, record, context四个属性只可读不可被更改\n         * Function(value, index, record) => Element\n         */\n        cell: PropTypes.oneOfType([\n            PropTypes.element,\n            PropTypes.node,\n            PropTypes.func,\n        ]),\n        /**\n         * 表头显示的内容\n         */\n        title: PropTypes.oneOfType([\n            PropTypes.element,\n            PropTypes.node,\n            PropTypes.func,\n        ]),\n        /**\n         * 写到 header 单元格上的title属性\n         */\n        htmlTitle: PropTypes.string,\n        /**\n         * 是否支持排序\n         */\n        sortable: PropTypes.bool,\n        /**\n         * 列宽，注意在锁列的情况下一定需要配置宽度\n         */\n        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        /**\n         * 单元格的对齐方式\n         */\n        align: PropTypes.oneOf(['left', 'center', 'right']),\n        /**\n         * 单元格标题的对齐方式, 不配置默认读取align值\n         */\n        alignHeader: PropTypes.oneOf(['left', 'center', 'right']),\n        /**\n         * 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`\n         */\n        filters: PropTypes.arrayOf(\n            PropTypes.shape({\n                label: PropTypes.string,\n                value: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n            })\n        ),\n        /**\n         * 过滤的模式是单选还是多选\n         */\n        filterMode: PropTypes.oneOf(['single', 'multiple']),\n        /**\n         * filter 模式下传递给 Menu 菜单的属性， 默认继承 `Menu` 组件的API\n         * @property {Boolean} subMenuSelectable 默认为`false` subMenu是否可选择\n         * @property {Boolean} isSelectIconRight 默认为`false` 是否将选中图标居右。注意：SubMenu 上的选中图标一直居左，不受此API控制\n         */\n        filterMenuProps: PropTypes.object,\n        filterProps: PropTypes.object,\n        /**\n         * 是否支持锁列,可选值为`left`,`right`, `true`\n         */\n        lock: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n        /**\n         * 是否支持列宽调整, 当该值设为true，table的布局方式会修改为fixed.\n         */\n        resizable: PropTypes.bool,\n        /**\n         * header cell 横跨的格数，设置为0表示不出现此 th\n         */\n        colSpan: PropTypes.number,\n    };\n\n    static contextTypes = {\n        parent: PropTypes.any,\n    };\n\n    static defaultProps = {\n        cell: value => value,\n        filterMode: 'multiple',\n        filterMenuProps: {\n            subMenuSelectable: false,\n        },\n        filterProps: {},\n        resizable: false,\n    };\n\n    static _typeMark = 'column';\n\n    render() {\n        return null;\n    }\n}"
    }
}