{
    "1": {
        "bug_file": "src/table/util.js",
        "compressed": "NO",
        "line_numbers": 119,
        "compressed_line_numbers": 119,
        "compressed_bug_file_content": "import classnames from 'classnames';\n\nconst blackList = [\n    'defaultProps',\n    'propTypes',\n    'contextTypes',\n    'childContextTypes',\n    'displayName',\n    'getDerivedStateFromProps',\n];\n\nexport const statics = (Target, Component) => {\n    Object.keys(Component).forEach(property => {\n        if (blackList.indexOf(property) === -1) {\n            Target[property] = Component[property];\n        }\n    });\n};\n\nexport const fetchDataByPath = (object, path) => {\n    if (!object || !path) {\n        return false;\n    }\n    path = path.toString();\n    const field = path.split('.');\n    let val, key;\n    if (field.length) {\n        key = field[0];\n        // lists[1].name\n        if (key.indexOf('[') >= 0) {\n            key = key.match(/(.*)\\[(.*)\\]/);\n            if (key) {\n                val = object[key[1]][key[2]];\n            }\n        } else {\n            val = object[field[0]];\n        }\n        if (val) {\n            for (let colIndex = 1; colIndex < field.length; colIndex++) {\n                val = val[field[colIndex]];\n                if (typeof val === 'undefined') {\n                    break;\n                }\n            }\n        }\n    }\n    return val;\n};\n\n/**\n * @param {Array} lockChildren\n * @param {String} dir 'left', 'right'\n */\nexport const setStickyStyle = (\n    lockChildren,\n    flatenChildren,\n    dir,\n    offsetArr = [],\n    prefix\n) => {\n    const len = flatenChildren.length;\n\n    flatenChildren.forEach((col, index) => {\n        const isLeftLast = dir === 'left' && index === len - 1;\n        const isRightFirst = dir === 'right' && index === 0;\n        const style = {\n            position: 'sticky',\n        };\n        const offset = offsetArr[index];\n\n        if (offset > -1) {\n            style[dir] = offset;\n        }\n\n        col.className = classnames(col.className, {\n            [`${prefix}table-fix-${dir}`]: true,\n            [`${prefix}table-fix-left-last`]: isLeftLast,\n            [`${prefix}table-fix-right-first`]: isRightFirst,\n        });\n        col.style = { ...col.style, ...style };\n        col.cellStyle = style;\n    });\n\n    const setOffset = (col, index, dir) => {\n        const style = {\n            position: 'sticky',\n        };\n        const offset = offsetArr[index];\n\n        if (offset > -1) {\n            style[dir] = offset;\n        }\n\n        col.className = classnames(col.className, {\n            [`${prefix}table-fix-${dir}`]: true,\n            [`${prefix}table-fix-left-last`]: dir === 'left',\n            [`${prefix}table-fix-right-first`]: dir === 'right',\n        });\n        col.style = { ...col.style, ...style };\n        col.cellStyle = style;\n    };\n\n    // for multiple header\n    // const flatenlen = offsetArr.length;\n    const loop = (arr, i) => {\n        dir === 'right' && arr.reverse();\n        arr.forEach((child, j) => {\n            const p = dir === 'right' ? i - j : i + j;\n            if (child.children) {\n                // 合并单元格的节点\n                loop(child.children, p);\n                setOffset(child, p, dir);\n            }\n        });\n        dir === 'right' && arr.reverse();\n    };\n\n    loop(lockChildren, dir === 'left' ? 0 : len - 1);\n};"
    },
    "2": {
        "bug_file": "src/table/index.jsx",
        "compressed": "NO",
        "line_numbers": 122,
        "compressed_line_numbers": 122,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Base from './base';\nimport tree from './tree';\nimport fixed from './fixed';\nimport selection from './selection';\nimport expanded from './expanded';\nimport virtual from './virtual';\nimport lock from './lock';\nimport stickyLock from './new-lock';\nimport list from './list';\nimport sticky from './sticky';\nimport ListHeader from './list-header';\nimport ListFooter from './list-footer';\nimport { env } from '../util';\n\nconst { ieVersion } = env;\n\nconst ORDER_LIST = [fixed, lock, selection, expanded, tree, virtual, list, sticky];\nconst Table = ORDER_LIST.reduce((ret, current) => {\n    ret = current(ret);\n    return ret;\n}, Base);\n\nlock._typeMark = 'lock';\nexpanded._typeMark = 'expanded';\n\nconst StickyLockTable = ORDER_LIST.reduce((ret, current) => {\n    const newLock = !ieVersion;\n    if (current._typeMark === 'lock') {\n        ret = newLock ? stickyLock(ret) : lock(ret);\n    } else if (current._typeMark === 'expanded') {\n        ret = newLock ? expanded(ret, true) : expanded(ret);\n    } else {\n        ret = current(ret);\n    }\n    return ret;\n}, Base);\n\nTable.Base = Base;\nTable.fixed = fixed;\nTable.lock = lock;\nTable.selection = selection;\nTable.expanded = expanded;\nTable.tree = tree;\nTable.virtual = virtual;\nTable.list = list;\nTable.sticky = sticky;\n\nTable.GroupHeader = ListHeader;\nTable.GroupFooter = ListFooter;\n\nTable.StickyLock = StickyLockTable;\n\nexport default ConfigProvider.config(Table, {\n    componentName: 'Table',\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('expandedRowKeys' in props) {\n            deprecated('expandedRowKeys', 'openRowKeys', 'Table');\n\n            const { expandedRowKeys, ...others } = props;\n            props = { openRowKeys: expandedRowKeys, ...others };\n        }\n        if ('onExpandedChange' in props) {\n            deprecated('onExpandedChange', 'onRowOpen', 'Table');\n\n            const { onExpandedChange, ...others } = props;\n            props = { onRowOpen: onExpandedChange, ...others };\n        }\n        if ('isLoading' in props) {\n            deprecated('isLoading', 'loading', 'Table');\n\n            const { isLoading, ...others } = props;\n            props = { loading: isLoading, ...others };\n        }\n        if ('indentSize' in props) {\n            deprecated('indentSize', 'indent', 'Table');\n\n            const { indentSize, ...others } = props;\n            props = { indent: indentSize, ...others };\n        }\n        if ('optimization' in props) {\n            deprecated('optimization', 'pure', 'Table');\n\n            const { optimization, ...others } = props;\n            props = { pure: optimization, ...others };\n        }\n\n        if ('getRowClassName' in props) {\n            deprecated('getRowClassName', 'getRowProps', 'Table');\n\n            const { getRowClassName, getRowProps, ...others } = props;\n            if (getRowClassName) {\n                const newGetRowProps = (...args) => {\n                    return {\n                        className: getRowClassName(...args),\n                        ...(getRowProps ? getRowProps(...args) : {}),\n                    };\n                };\n\n                props = { getRowProps: newGetRowProps, ...others };\n            } else {\n                props = { getRowProps, ...others };\n            }\n        }\n\n        if ('getRowProps' in props) {\n            deprecated('getRowProps', 'rowProps', 'Table in 1.15.0');\n\n            const { getRowProps, ...others } = props;\n            props = { rowProps: getRowProps, ...others };\n        }\n\n        if ('getCellProps' in props) {\n            deprecated('getCellProps', 'cellProps', 'Table in 1.15.0');\n\n            const { getCellProps, ...others } = props;\n            props = { cellProps: getCellProps, ...others };\n        }\n\n        return props;\n    },\n});"
    },
    "3": {
        "bug_file": "src/table/column.jsx",
        "compressed": "NO",
        "line_numbers": 105,
        "compressed_line_numbers": 105,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Table.Column\n * @order 0\n **/\nexport default class Column extends React.Component {\n    static propTypes = {\n        /**\n         * 指定列对应的字段，支持`a.b`形式的快速取值\n         */\n        dataIndex: PropTypes.string,\n        /**\n         * 行渲染的逻辑\n         * value, rowIndex, record, context四个属性只可读不可被更改\n         * Function(value, index, record) => Element\n         */\n        cell: PropTypes.oneOfType([\n            PropTypes.element,\n            PropTypes.node,\n            PropTypes.func,\n        ]),\n        /**\n         * 表头显示的内容\n         */\n        title: PropTypes.oneOfType([\n            PropTypes.element,\n            PropTypes.node,\n            PropTypes.func,\n        ]),\n        /**\n         * 写到 header 单元格上的title属性\n         */\n        htmlTitle: PropTypes.string,\n        /**\n         * 是否支持排序\n         */\n        sortable: PropTypes.bool,\n        /**\n         * 列宽，注意在锁列的情况下一定需要配置宽度\n         */\n        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        /**\n         * 单元格的对齐方式\n         */\n        align: PropTypes.oneOf(['left', 'center', 'right']),\n        /**\n         * 单元格标题的对齐方式, 不配置默认读取align值\n         */\n        alignHeader: PropTypes.oneOf(['left', 'center', 'right']),\n        /**\n         * 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`\n         */\n        filters: PropTypes.arrayOf(\n            PropTypes.shape({\n                label: PropTypes.string,\n                value: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n            })\n        ),\n        /**\n         * 过滤的模式是单选还是多选\n         */\n        filterMode: PropTypes.oneOf(['single', 'multiple']),\n        /**\n         * filter 模式下传递给 Menu 菜单的属性， 默认继承 `Menu` 组件的API\n         * @property {Boolean} subMenuSelectable 默认为`false` subMenu是否可选择\n         * @property {Boolean} isSelectIconRight 默认为`false` 是否将选中图标居右。注意：SubMenu 上的选中图标一直居左，不受此API控制\n         */\n        filterMenuProps: PropTypes.object,\n        filterProps: PropTypes.object,\n        /**\n         * 是否支持锁列,可选值为`left`,`right`, `true`\n         */\n        lock: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n        /**\n         * 是否支持列宽调整, 当该值设为true，table的布局方式会修改为fixed.\n         */\n        resizable: PropTypes.bool,\n        /**\n         * header cell 横跨的格数，设置为0表示不出现此 th\n         */\n        colSpan: PropTypes.number,\n    };\n\n    static contextTypes = {\n        parent: PropTypes.any,\n    };\n\n    static defaultProps = {\n        cell: value => value,\n        filterMode: 'multiple',\n        filterMenuProps: {\n            subMenuSelectable: false,\n        },\n        filterProps: {},\n        resizable: false,\n    };\n\n    static _typeMark = 'column';\n\n    render() {\n        return null;\n    }\n}"
    },
    "4": {
        "bug_file": "src/table/base/body.jsx",
        "compressed": "NO",
        "line_numbers": 196,
        "compressed_line_numbers": 196,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport RowComponent from './row';\nimport CellComponent from './cell';\n\nconst noop = () => {};\n\nexport default class Body extends React.Component {\n    static propTypes = {\n        loading: PropTypes.bool,\n        emptyContent: PropTypes.any,\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        components: PropTypes.object,\n        getCellProps: PropTypes.func,\n        cellRef: PropTypes.func,\n        primaryKey: PropTypes.string,\n        getRowProps: PropTypes.func,\n        rowRef: PropTypes.func,\n        dataSource: PropTypes.array,\n        children: PropTypes.any,\n        className: PropTypes.string,\n        component: PropTypes.string,\n        colGroup: PropTypes.object,\n        columns: PropTypes.array,\n        onRowClick: PropTypes.func,\n        onRowMouseEnter: PropTypes.func,\n        onRowMouseLeave: PropTypes.func,\n        onBodyMouseOver: PropTypes.func,\n        onBodyMouseOut: PropTypes.func,\n        locale: PropTypes.object,\n        crossline: PropTypes.bool,\n        tableWidth: PropTypes.number,\n    };\n    static defaultProps = {\n        loading: false,\n        prefix: 'next-',\n        components: {},\n        getCellProps: noop,\n        cellRef: noop,\n        primaryKey: 'id',\n        getRowProps: noop,\n        rowRef: noop,\n        dataSource: [],\n        component: 'tbody',\n        columns: [],\n    };\n\n    getRowRef = (i, row) => {\n        this.props.rowRef(i, row);\n    };\n\n    onRowClick = (record, index, e) => {\n        this.props.onRowClick(record, index, e);\n    };\n\n    onRowMouseEnter = (record, index, e) => {\n        this.props.onRowMouseEnter(record, index, e);\n    };\n\n    onRowMouseLeave = (record, index, e) => {\n        this.props.onRowMouseLeave(record, index, e);\n    };\n\n    onBodyMouseOver = e => {\n        this.props.onBodyMouseOver(e);\n    };\n\n    onBodyMouseOut = e => {\n        this.props.onBodyMouseOut(e);\n    };\n\n    render() {\n        /*eslint-disable no-unused-vars */\n        const {\n            prefix,\n            className,\n            children,\n            component: Tag,\n            colGroup,\n            loading,\n            emptyContent,\n            components,\n            getCellProps,\n            primaryKey,\n            getRowProps,\n            dataSource,\n            cellRef,\n            columns,\n            rowRef,\n            onRowClick,\n            onRowMouseEnter,\n            onRowMouseLeave,\n            onBodyMouseOver,\n            onBodyMouseOut,\n            locale,\n            pure,\n            expandedIndexSimulate,\n            tableOuterWidth,\n            rtl,\n            crossline,\n            tableWidth,\n            ...others\n        } = this.props;\n\n        const { Row = RowComponent, Cell = CellComponent } = components;\n        const empty = loading ? (\n            <span>&nbsp;</span>\n        ) : (\n            emptyContent || locale.empty\n        );\n        let rows = (\n            <tr>\n                <td colSpan={columns.length}>\n                    <div className={`${prefix}table-empty`}>{empty}</div>\n                </td>\n            </tr>\n        );\n        if (Tag === 'div') {\n            rows = (\n                <table role=\"table\">\n                    <tbody>{rows}</tbody>\n                </table>\n            );\n        }\n        if (dataSource.length) {\n            rows = dataSource.map((record, index) => {\n                let rowProps = {};\n                // record may be a string\n                const rowIndex =\n                    typeof record === 'object' && '__rowIndex' in record\n                        ? record.__rowIndex\n                        : index;\n\n                if (expandedIndexSimulate) {\n                    rowProps = record.__expanded\n                        ? {}\n                        : getRowProps(record, index / 2);\n                } else {\n                    rowProps = getRowProps(record, rowIndex);\n                }\n\n                rowProps = rowProps || {};\n\n                const rowClass = rowProps.className;\n                const className = classnames({\n                    first: index === 0,\n                    last: index === dataSource.length - 1,\n                    [rowClass]: rowClass,\n                });\n                const expanded = record.__expanded ? 'expanded' : '';\n                return (\n                    <Row\n                        key={`${record[primaryKey] ||\n                            (record[primaryKey] === 0\n                                ? 0\n                                : rowIndex)}${expanded}`}\n                        {...rowProps}\n                        ref={this.getRowRef.bind(this, rowIndex)}\n                        colGroup={colGroup}\n                        rtl={rtl}\n                        columns={columns}\n                        primaryKey={primaryKey}\n                        record={record}\n                        rowIndex={rowIndex}\n                        __rowIndex={rowIndex}\n                        prefix={prefix}\n                        pure={pure}\n                        cellRef={cellRef}\n                        getCellProps={getCellProps}\n                        className={className}\n                        Cell={Cell}\n                        onClick={this.onRowClick}\n                        locale={locale}\n                        tableOuterWidth={tableOuterWidth}\n                        onMouseEnter={this.onRowMouseEnter}\n                        onMouseLeave={this.onRowMouseLeave}\n                    />\n                );\n            });\n        }\n        const event = crossline\n            ? {\n                  onMouseOver: this.onBodyMouseOver,\n                  onMouseOut: this.onBodyMouseOut,\n              }\n            : {};\n        return (\n            <Tag className={className} {...others} {...event}>\n                {rows}\n                {children}\n            </Tag>\n        );\n    }\n}"
    },
    "5": {
        "bug_file": "src/table/base/cell.jsx",
        "compressed": "NO",
        "line_numbers": 135,
        "compressed_line_numbers": 135,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { obj } from '../../util';\n\nexport default class Cell extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        primaryKey: PropTypes.string,\n        className: PropTypes.string,\n        record: PropTypes.any,\n        value: PropTypes.any,\n        isIconLeft: PropTypes.bool,\n        colIndex: PropTypes.number,\n        rowIndex: PropTypes.number,\n        // 经过锁列调整后的列索引，lock right的列会从非0开始\n        __colIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        title: PropTypes.any,\n        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        context: PropTypes.any,\n        cell: PropTypes.oneOfType([\n            PropTypes.element,\n            PropTypes.node,\n            PropTypes.func,\n        ]),\n        align: PropTypes.oneOf(['left', 'center', 'right']),\n        component: PropTypes.oneOf(['td', 'th', 'div']),\n        children: PropTypes.any,\n        style: PropTypes.object,\n        innerStyle: PropTypes.object,\n        filterMode: PropTypes.oneOf(['single', 'multiple']),\n        filterMenuProps: PropTypes.object,\n        filterProps: PropTypes.object,\n        filters: PropTypes.array,\n        sortable: PropTypes.bool,\n        lock: PropTypes.any,\n        type: PropTypes.oneOf(['header', 'body']),\n        resizable: PropTypes.bool,\n        __normalized: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        component: 'td',\n        type: 'body',\n        isIconLeft: false,\n        cell: value => value,\n        prefix: 'next-',\n    };\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.pure) {\n            const isEqual = obj.shallowEqual(this.props, nextProps);\n            return !isEqual;\n        }\n        return true;\n    }\n\n    render() {\n        /* eslint-disable no-unused-vars */\n        const {\n            prefix,\n            className,\n            cell,\n            value,\n            resizable,\n            colIndex,\n            rowIndex,\n            __colIndex,\n            record,\n            context,\n            align,\n            style = {},\n            component: Tag,\n            children,\n            title,\n            width,\n            innerStyle,\n            primaryKey,\n            __normalized,\n            filterMode,\n            filterMenuProps,\n            filterProps,\n            filters,\n            sortable,\n            lock,\n            pure,\n            locale,\n            expandedIndexSimulate,\n            rtl,\n            isIconLeft,\n            type,\n            htmlTitle,\n            ...others\n        } = this.props;\n        const tagStyle = { ...style };\n        const cellProps = { value, index: rowIndex, record, context };\n        let content = cell;\n        if (React.isValidElement(content)) {\n            content = React.cloneElement(content, cellProps);\n        } else if (typeof content === 'function') {\n            content = content(value, rowIndex, record, context);\n        }\n        if (align) {\n            tagStyle.textAlign = align;\n            if (rtl) {\n                tagStyle.textAlign =\n                    align === 'left'\n                        ? 'right'\n                        : align === 'right'\n                        ? 'left'\n                        : align;\n            }\n        }\n        const cls = classnames({\n            [`${prefix}table-cell`]: true,\n            [className]: className,\n        });\n\n        return (\n            <Tag {...others} className={cls} style={tagStyle} role=\"gridcell\">\n                <div\n                    className={`${prefix}table-cell-wrapper`}\n                    style={innerStyle}\n                    title={htmlTitle}\n                    data-next-table-col={__colIndex}\n                    data-next-table-row={rowIndex}\n                >\n                    {isIconLeft ? children : content}\n                    {isIconLeft ? content : children}\n                </div>\n            </Tag>\n        );\n    }\n}"
    }
}