{
    "1": {
        "bug_file": "src/select/select.jsx",
        "compressed": "YES",
        "line_numbers": 1081,
        "compressed_line_numbers": 357,
        "compressed_bug_file_content": "/* eslint-disable valid-jsdoc */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { func, obj, KEYCODE, env } from '../util';\nimport Tag from '../tag';\nimport Input from '../input';\nimport Icon from '../icon';\nimport Base from './base';\nimport { isNull, getValueDataSource, valueToSelectKey } from './util';\n\n\n/**\n * 无障碍化注意事项:\n * 1. Select 无搜索情况下，不应该让 Input 可focus，此时外层wrap必须可focus，并且需要相应focus事件让外边框发生变化\n */\n\n// 自定义弹层：1. 不需要关心Menu的点击事件 2. 不需要关心dataSource变化\n\n/**\n * Select\n */\n\n\n        /**\n         * 选择器模式\n         */\n\n        /**\n         * 当前值，用于受控模式\n         */\n\n        /**\n         * 初始的默认值\n         */\n\n        /**\n         * Select发生改变时触发的回调\n         * @param {*} value 选中的值\n         * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'tag'\n         * @param {*} item 选中的值的对象数据 (useDetailValue=false有效)\n         */\n\n        /**\n         * 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)\n         */\n\n\n        /**\n         * 是否有边框\n         */\n\n        /**\n         * 是否有下拉箭头\n         */\n\n        /**\n         * 展开后是否能搜索（tag 模式下固定为true）\n         */\n\n        /**\n         * 当搜索框值变化时回调\n         * @param {String} value 数据\n         */\n\n        /**\n         * 当搜索框值被清空时候的回调\n         * @param {String} actionType 触发的方式, 'select'(选择清空), 'popupClose'(弹窗关闭清空)\n         */\n\n        /**\n         * 多选模式下是否有全选功能\n         */\n\n        /**\n         * 填充到选择框里的值的 key\b\b\n         */\n\n        /**\n         * onChange 返回的 value 使用 dataSource 的对象\n         */\n\n        /**\n         * dataSource 变化的时是否保留已选的内容\n         */\n\n        /**\n         * 渲染 Select 展现内容的方法\n         * @param {Object} item 渲染节点的item\n         * @return {ReactNode} 展现内容\n         * @default item => item.label \\|\\| item.value\n         */\n\n        /**\n         * 渲染 MenuItem 内容的方法\n         * @param {Object} item 渲染节点的item\n         * @param {String} searchValue 搜索关键字（如果开启搜索）\n         * @return {ReactNode} item node\n         */\n\n        /**\n         * 弹层内容为空的文案\n         */\n\n\n        /**\n         * 受控搜索值，一般不需要设置\n         * @type {[type]}\n         */\n\n        /**\n         * tag最多显示的字符数\n         * @type {[type]}\n         */\n\n        /**\n         * 最多显示多少个 tag\n         * @type {[type]}\n         */\n\n        /**\n         * 选择后是否立即隐藏菜单 (mode=multiple/tag 模式生效)\n         */\n\n        /**\n         * tag 删除回调\n         * @param {object} item 渲染节点的item\n         */\n\n        /**\n         * 焦点事件\n         */\n\n        /**\n         * 是否自动高亮第一个选项\n         */\n        // highlightFirstItem: PropTypes.bool,\n        /**\n         * 失去焦点事件\n         */\n\n\n        // highlightFirstItem: true,\n\n\n        // @extend Base state\n\n            // search keyword\n\n\n        // because dataSource maybe updated while select a item, so we should cache choosen value's item\n\n\n        // 根据value和计算后的dataSource，更新value对应的详细数据valueDataSource\n\n\n            // 远程数据有更新，并且还有搜索框\n\n\n            //has defaultValue and value not changed and dataSource changed\n\n\n    // ie9 下 table-cell 布局不支持宽度超出隐藏\n\n\n            //\n\n\n        // 随着输入自动伸展\n\n\n    /**\n     * Menu.Item onSelect\n     * @private\n     * @param  {Array<string>} keys\n     * @\n     */\n\n\n            // 单选\n\n\n            // 正常多选\n\n\n    /**\n     * 单选模式\n     */\n\n\n        // get data only from dataStore while cacheValue=false\n\n\n        // 清空搜索\n\n\n    /**\n     * 多选模式 multiple/tag\n     */\n\n\n        // cache those value maybe not exists in dataSource\n\n\n        // 清空搜索\n\n            // 因为 SearchValue 被 clear 后会重新渲染 Menu，所以在 Overlay 检测 safeNode 的时候 e.target 可能会找不到导致弹窗关闭\n\n\n        // multiple mode\n        // is current state select all or not\n\n\n    /**\n     * Handle search input change event\n     * @param {Event} e change Event\n     */\n\n\n        // inputing should trigger popup open\n\n\n    // 搜索框 keyDown 事件\n\n\n                    // 在多选并且有搜索的情况下，删除最后一个 tag\n\n\n                    // 单选、非展开、并且可清除的情况，允许按删除键清除\n\n\n            // unselect\n\n\n            // select\n\n\n    // 回车 选择高亮的 item\n\n\n            // input tag by itself\n\n\n        // 没有高亮选项 或者 没有可选菜单\n\n\n            // 阻止事件冒泡到最外层，让Popup 监听到触发弹层关闭\n\n\n    /**\n     * Handle Tag close event\n     * @param  {Object} item\n     * @return {Boolean} false  return false to prevent auto close\n     * ----\n     * It MUST be multiple mode, needn't additional judgement\n     */\n\n\n            // filter out current item, and then call handleMenuSelect\n\n\n        // prevent tag close\n\n\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Handle BACKSPACE key event\n     * @param {Event} e keyDown event\n     * ---\n     * It MUST be multiple mode\n     */\n\n\n        // 手动调用 handleMenuSelect 时直接传入原生的 value，可以减少 toString 的操作\n\n\n    /**\n     * Handle SelectAll span click event\n     * @param {Event} e click event\n     */\n\n\n        // 直接传 values，减少 toString 操作\n\n\n        // 关闭的时候清空搜索值\n\n\n    /**\n     * 如果用户是自定义的弹层，则直接以 value 为准，不再校验 dataSource\n     * @param {object} props\n     */\n\n\n        // get detail value\n\n\n            // 0 => '0'\n\n\n    /**\n     * 1. fix flash while click <label/>\n     * 2. fix onBlur while has clear\n     * @returns\n     */\n\n        // ignore click on input to choose text\n\n\n        // because of can not close Popup by click Input while hasSearch.\n        // so when Popup open and hasSearch, we should close Popup intentionally\n\n\n    /**\n     * render arrow\n     * @param {object} props\n     * @param {function} [clickHandler]\n     */\n\n\n        // do not use this.hasClear() here, to make sure clear btn always exists, can not influenced by apis like `disabled` `readOnly`\n\n\n    /**\n     * 选择器\n     * @override\n     * @param {object} props\n     */\n\n\n        // compatible with selectPlaceHolder. TODO: removed in 2.0 version\n\n\n        // 弹窗展开时将当前的值作为 placeholder，这个功能的前提是 valueNode 必须是一个字符串\n\n\n        // 下拉箭头\n\n\n    /**\n     * 渲染弹层的 header 内容\n     * @override\n     * @param {object} props\n     */\n\n\n        // 多选模式下才有全选\n\n\n        // remove style={{'lineHeight': 'unset'}} in next Y\n        // remove style={{'display': 'none'}} in next Y\n\n\n        // forbid to close Popup by click Input while hasSearch\n\n\nexport default Select;\n"
    },
    "2": {
        "bug_file": "src/select/util.js",
        "compressed": "NO",
        "line_numbers": 363,
        "compressed_line_numbers": 363,
        "compressed_bug_file_content": "import { Children } from 'react';\n\n/**\n * util module\n */\n\n/**\n * 是否是单选模式\n * @param {string} mode\n * @return {boolean} is single mode\n */\nexport function isSingle(mode) {\n    return !mode || mode === 'single' || mode === 'combobox';\n}\n\n/**\n * 在 Select 中，认为 null 和 undefined 都是空值\n * @param {*} n any object\n * @return {boolean}\n */\nexport function isNull(n) {\n    return n === null || n === undefined;\n}\n\n/**\n * 将字符串中的正则表达式关键字符添加转义\n * @param {string} str\n * @return {string}\n */\nexport function escapeForReg(str) {\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n/**\n * filter by key\n * @param {string} key filter key\n * @param {object} item item object\n * @return {boolean} it's filtered\n */\nexport function filter(key, item) {\n    const _key = escapeForReg(`${key}`);\n    const regExp = new RegExp(`(${_key})`, 'ig');\n\n    return regExp.test(`${item.value}`) || regExp.test(`${item.label}`);\n}\n\n/**\n * loop map\n * @param {Array} dataSource\n * @param {function} callback\n * @return {Array}\n * ----\n * @callback ~loopCallback\n * @param {object} option\n */\nexport function loopMap(dataSource, callback) {\n    const result = [];\n    dataSource.forEach(option => {\n        if (option.children) {\n            const children = loopMap(option.children, callback);\n            children.length &&\n                result.push({\n                    ...option,\n                    children,\n                });\n        } else {\n            // eslint-disable-next-line callback-return\n            const tmp = callback(option);\n            tmp && result.push(tmp);\n        }\n    });\n\n    return result;\n}\n\n/**\n * Parse dataSource from MenuItem\n * @static\n * @param {Array<Element>} children\n * @param {number} [deep=0] recursion deep level\n */\nexport function parseDataSourceFromChildren(children, deep = 0) {\n    const source = [];\n\n    Children.forEach(children, (child, index) => {\n        if (!child) {\n            return;\n        }\n        const { type, props: childProps } = child;\n        const item2 = { deep };\n\n        let isOption = false;\n        let isOptionGroup = false;\n\n        if (\n            (typeof type === 'function' &&\n                type._typeMark === 'next_select_option') ||\n            type === 'option'\n        ) {\n            isOption = true;\n        }\n        if (\n            (typeof type === 'function' &&\n                type._typeMark === 'next_select_option_group') ||\n            type === 'optgroup'\n        ) {\n            isOptionGroup = true;\n        }\n\n        if (!isOption && !isOptionGroup) {\n            return;\n        }\n\n        if (isOption) {\n            // option\n            // If children is a string, it can be used as value\n            const isStrChild = typeof childProps.children === 'string';\n            // value > key > string children > index\n            item2.value =\n                'value' in childProps\n                    ? childProps.value\n                    : 'key' in childProps\n                    ? childProps.key\n                    : isStrChild\n                    ? childProps.children\n                    : `${index}`;\n\n            item2.label =\n                childProps.label || childProps.children || `${item2.value}`;\n            item2.title = childProps.title;\n            childProps.disabled === true && (item2.disabled = true);\n            // You can put your extra data here, and use it in `itemRender` or `labelRender`\n            Object.assign(item2, childProps['data-extra'] || {});\n        } else if (isOptionGroup && deep < 1) {\n            // option group\n            item2.label = childProps.label || 'Group';\n            // parse children nodes\n            item2.children = parseDataSourceFromChildren(\n                childProps.children,\n                deep + 1\n            );\n        }\n\n        source.push(item2);\n    });\n\n    return source;\n}\n\n/**\n * Normalize dataSource\n * @static\n * @param {Array} dataSource\n * @param {number} [deep=0] recursion deep level\n * ----\n * value priority: value > 'index'\n * label priority: label > 'value' > 'index'\n * disabled: disabled === true\n */\nexport function normalizeDataSource(dataSource, deep = 0) {\n    const source = [];\n\n    dataSource.forEach((item, index) => {\n        // enable array of basic type\n        if (/string|boolean|number/.test(typeof item)) {\n            item = { label: `${item}`, value: item };\n        }\n\n        // filter off addon item\n        if (item.__isAddon) {\n            return;\n        }\n\n        const item2 = { deep };\n        // deep < 1: only 2 level allowed\n        if (Array.isArray(item.children) && deep < 1) {\n            // handle group\n            item2.label = item.label || item.value || `Group ${index}`;\n            // parse children\n            item2.children = normalizeDataSource(item.children, deep + 1);\n        } else {\n            const { value, label, title, disabled, ...others } = item;\n            item2.value = !isNull(value) ? value : `${index}`;\n            item2.label = label || `${item2.value}`;\n            item2.title = title;\n            disabled === true && (item2.disabled = true);\n\n            Object.assign(item2, others);\n        }\n\n        source.push(item2);\n    });\n\n    return source;\n}\n\n/**\n * Get flatten dataSource\n * @static\n * @param  {Array} dataSource structured dataSource\n * @return {Array}\n */\nexport function flattingDataSource(dataSource) {\n    const source = [];\n\n    dataSource.forEach(item => {\n        if (Array.isArray(item.children)) {\n            source.push(...flattingDataSource(item.children));\n        } else {\n            source.push(item);\n        }\n    });\n\n    return source;\n}\n\nexport function filterDataSource(dataSource, key, filter, addonKey) {\n    if (!Array.isArray(dataSource)) {\n        return [];\n    }\n    if (typeof key === 'undefined' || key === null) {\n        return [].concat(dataSource);\n    }\n\n    let addKey = true;\n    const menuDataSource = loopMap(dataSource, option => {\n        if (key === `${option.value}`) {\n            addKey = false;\n        }\n        return filter(key, option) && !option.__isAddon && option;\n    });\n\n    // if key not in menuDataSource, add key to dataSource\n    if (addonKey && key && addKey) {\n        menuDataSource.unshift({\n            value: key,\n            label: key,\n            title: key,\n            __isAddon: true,\n        });\n    }\n\n    return menuDataSource;\n}\n\nfunction getKeyItemByValue(value, valueMap) {\n    let item;\n\n    if (typeof value === 'object' && value.hasOwnProperty('value')) {\n        item = value;\n    } else {\n        item = valueMap[`${value}`] || {\n            value,\n            label: value,\n        };\n    }\n\n    return item;\n}\n\n/**\n * compute valueDataSource by new value\n * @param {Array/String} value 数据\n * @param {Object} mapValueDS   上个value的缓存数据 value => {value,label} 的映射关系表\n * @param {*} mapMenuDS  通过 dataSource 建立 value => {value,label} 的映射关系表\n * @returns {Object} value: [value]; valueDS: [{value,label}]; mapValueDS: {value: {value,label}}\n */\nexport function getValueDataSource(value, mapValueDS, mapMenuDS) {\n    if (isNull(value)) {\n        return {};\n    }\n\n    const newValue = [];\n    const newValueDS = [];\n    const newMapValueDS = {};\n    const _newMapDS = Object.assign({}, mapValueDS, mapMenuDS);\n\n    if (Array.isArray(value)) {\n        value.forEach(v => {\n            const item = getKeyItemByValue(v, _newMapDS);\n\n            newValueDS.push(item);\n            newMapValueDS[`${item.value}`] = item;\n            newValue.push(item.value);\n        });\n\n        return {\n            value: newValue, // [value]\n            valueDS: newValueDS, // [{value,label}]\n            mapValueDS: newMapValueDS, // {value: {value,label}}\n        };\n    } else {\n        const item = getKeyItemByValue(value, _newMapDS);\n\n        return {\n            value: item.value,\n            valueDS: item,\n            mapValueDS: {\n                [`${item.value}`]: item,\n            },\n        };\n    }\n}\n\n/**\n * Get flatten dataSource\n * @static\n * @param  {any} value structured dataSource\n * @return {String}\n */\nexport function valueToSelectKey(value) {\n    let val;\n    if (typeof value === 'object' && value.hasOwnProperty('value')) {\n        val = value.value;\n    } else {\n        val = value;\n    }\n    return `${val}`;\n}\n\n/**\n * UP Down 改进双向链表方法\n */\n// function DoubleLinkList(element){\n//     this.prev = null;\n//     this.next = null;\n//     this.element = element;\n// }\n//\n// export function mapDoubleLinkList(dataSource){\n//\n//     const mapDS = {};\n//     let doubleLink = null;\n//\n//     let head = null;\n//     let tail = null;\n//\n//     function  append(element) {\n//         if (!doubleLink) {\n//             doubleLink = new DoubleLinkList(element);\n//             head = doubleLink;\n//             tail = doubleLink;\n//             return doubleLink;\n//         }\n//\n//         const node = new DoubleLinkList(element);\n//         tail.next = node;\n//         node.prev = tail;\n//         tail = node;\n//\n//         return tail;\n//     }\n//\n//     dataSource.forEach((item => {\n//         if (item.disabled) {\n//             return;\n//         }\n//         mapDS[`${item.value}`] = append(item);\n//     }));\n//\n//     return mapDS;\n// }\n//"
    },
    "3": {
        "bug_file": "src/select/base.jsx",
        "compressed": "YES",
        "line_numbers": 609,
        "compressed_line_numbers": 213,
        "compressed_bug_file_content": "import React, { Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { func, dom, events } from '../util';\nimport Menu from '../menu';\nimport Overlay from '../overlay';\nimport zhCN from '../locale/zh-cn';\nimport DataStore from './data-store';\nimport VirtualList from '../virtual-list';\nimport { isSingle, filter, isNull, valueToSelectKey } from './util';\n\n\nexport default class Base extends React.Component {\n\n\n        /**\n         * 选择器尺寸\n         */\n\n        // 当前值，用于受控模式\n\n        // 初始化的默认值\n\n        /**\n         * 没有值的时候的占位符\n         */\n\n        /**\n         * 下拉菜单是否与选择器对齐\n         */\n\n        /**\n         * 自定义内联 label\n         */\n\n        /**\n         * 是否有清除按钮（单选模式有效）\n         */\n\n        /**\n         * 校验状态\n         */\n\n        /**\n         * 是否只读，只读模式下可以展开弹层但不能选\n         */\n\n        /**\n         * 是否禁用选择器\n         */\n\n        /**\n         * 当前弹层是否显示\n         */\n\n        /**\n         * 弹层初始化是否显示\n         */\n\n        /**\n         * 弹层显示或隐藏时触发的回调\n         * @param {Boolean} visible 弹层是否显示\n         */\n\n        /**\n         * 弹层挂载的容器节点\n         */\n\n        /**\n         * 弹层的 className\n         */\n\n        /**\n         * 弹层的内联样式\n         */\n\n        /**\n         * 添加到弹层上的属性\n         */\n\n        /**\n         * 自定义弹层的内容\n         */\n\n        /**\n         * 是否使用本地过滤，在数据源为远程的时候需要关闭此项\n         */\n\n        /**\n         * 本地过滤方法，返回一个 Boolean 值确定是否保留\n         */\n\n        /**\n         * 键盘上下键切换菜单高亮选项的回调\n         */\n\n        /**\n         * 是否开启虚拟滚动模式\n         */\n\n        // 自定义类名\n\n\n            // current highlight key\n\n\n        // overlay 还没有完成 mount，所以需要滞后同步宽度\n\n\n    /**\n     * Calculate and set width of popup menu\n     * @protected\n     */\n\n\n                // overy 的 node 节点可能没有挂载完成，所以这里需要异步\n\n\n    /**\n     * Get structured dataSource, for cache\n     * @protected\n     * @param  {Object} [props=this.props]\n     * @return {Array}\n     */\n\n\n        // children is higher priority then dataSource\n\n\n    /**\n     * Set popup visible\n     * @protected\n     * @param {boolean} visible\n     * @param {string} type trigger type\n     */\n\n\n        // 设置高亮 item key\n\n\n        // 非受控模式清空内部数据\n\n\n    /**\n     * Handle Menu body click\n     * @param {Event} e click event\n     */\n\n\n    /**\n     * Toggle highlight MenuItem\n     * @private\n     * @param {number} dir -1: up, 1: down\n     */\n\n\n        // When there is no enabled item\n\n\n        // find previous highlight index\n\n\n        // toggle highlight index\n\n\n        // get highlight key\n\n\n    // scroll into focus item\n\n\n                // I don't care...\n\n\n    /**\n     * render popup menu header\n     * @abstract\n     */\n\n\n    /**\n     * render popup children\n     * @protected\n     * @param {object} props\n     */\n\n\n    /**\n     * render menu item\n     * @protected\n     * @param {Array} dataSource\n     */\n\n\n        // If it has.\n\n\n            // In AutoComplete, value is the searchKey\n\n\n    /**\n     * 点击 arrow 或 label 的时候焦点切到 input 中\n     * @override\n     */\n\n\n            // Put `popupProps` into here for covering above props.\n\n            //beforeOpen node not mount, afterOpen too slow.\n            // from display:none to block, we may need to recompute width\n\n\n"
    },
    "4": {
        "bug_file": "src/select/data-store.js",
        "compressed": "NO",
        "line_numbers": 96,
        "compressed_line_numbers": 96,
        "compressed_bug_file_content": "import {\n    filter,\n    parseDataSourceFromChildren,\n    normalizeDataSource,\n    flattingDataSource,\n    filterDataSource,\n} from './util';\n\n/**\n * manage dataSource for menu list\n */\nclass DataStore {\n    constructor(options) {\n        this.options = {\n            filter,\n            key: undefined,\n            addonKey: false,\n            filterLocal: true,\n            ...options,\n        };\n\n        // origin data\n        this.dataSource = [];\n        // current data for menu display\n        this.menuDataSource = [];\n        // key=>value map for menuDataSource\n        this.mapDataSource = {};\n        // current data can be select (not disabled) on menu\n        this.enabledDataSource = [];\n    }\n\n    setOptions(options) {\n        Object.assign(this.options, options);\n    }\n\n    updateByDS(dataSource, isChildren = false) {\n        this.dataSource = isChildren\n            ? parseDataSourceFromChildren(dataSource)\n            : normalizeDataSource(dataSource);\n        return this.updateAll();\n    }\n\n    updateByKey(key) {\n        if (key === this.options.key) {\n            return this.getMenuDS();\n        }\n\n        this.options.key = key;\n        return this.updateAll();\n    }\n\n    getOriginDS() {\n        return this.dataSource;\n    }\n\n    getMenuDS() {\n        return this.menuDataSource;\n    }\n\n    getFlattenDS() {\n        return this.flattenDataSource;\n    }\n\n    getEnableDS() {\n        return this.enabledDataSource;\n    }\n\n    getMapDS() {\n        return this.mapDataSource;\n    }\n\n    updateAll() {\n        const { key, filter, filterLocal } = this.options;\n        this.menuDataSource = filterDataSource(\n            this.dataSource,\n            filterLocal ? key : '',\n            filter,\n            this.options.addonKey\n        );\n\n        this.flattenDataSource = flattingDataSource(this.menuDataSource);\n\n        this.mapDataSource = {};\n        this.flattenDataSource.forEach(item => {\n            this.mapDataSource[`${item.value}`] = item;\n        });\n\n        this.enabledDataSource = this.flattenDataSource.filter(\n            item => !item.disabled\n        );\n\n        return this.menuDataSource;\n    }\n}\n\nexport default DataStore;"
    }
}