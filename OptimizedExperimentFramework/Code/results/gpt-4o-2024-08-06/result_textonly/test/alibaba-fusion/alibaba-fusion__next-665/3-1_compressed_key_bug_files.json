{
    "1": {
        "bug_file": "src/table/base/header.jsx",
        "compressed": "NO",
        "line_numbers": 179,
        "compressed_line_numbers": 179,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport FilterComponent from './filter';\nimport SortComponent from './sort';\nimport CellComponent from './cell';\nimport ResizeComponent from './resize';\n\nconst noop = () => {};\nexport default class Header extends React.Component {\n    static propTypes = {\n        children: PropTypes.any,\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        className: PropTypes.string,\n        component: PropTypes.string,\n        columns: PropTypes.array,\n        colGroup: PropTypes.object,\n        headerCellRef: PropTypes.func,\n        locale: PropTypes.object,\n        filterParams: PropTypes.object,\n        onFilter: PropTypes.func,\n        components: PropTypes.object,\n        sort: PropTypes.object,\n        onSort: PropTypes.func,\n        onResizeChange: PropTypes.func,\n    };\n    static defaultProps = {\n        component: 'thead',\n        columns: [],\n        headerCellRef: noop,\n        onFilter: noop,\n        components: {},\n        onSort: noop,\n        onResizeChange: noop,\n    };\n\n    getCellRef = (i, j, cell) => {\n        this.props.headerCellRef(i, j, cell);\n    };\n\n    onSort = (dataIndex, order, sort) => {\n        this.props.onSort(dataIndex, order, sort);\n    };\n\n    render() {\n        /*eslint-disable no-unused-vars */\n        const {\n            prefix,\n            className,\n            children,\n            component: Tag,\n            colGroup,\n            columns,\n            locale,\n            filterParams,\n            onFilter,\n            components,\n            affixRef,\n            headerCellRef,\n            onSort,\n            sort,\n            onResizeChange,\n            pure,\n            rtl,\n            ...others\n        } = this.props;\n\n        const {\n            Cell = CellComponent,\n            Filter = FilterComponent,\n            Sort = SortComponent,\n            Resize = ResizeComponent,\n        } = components;\n        const rowSpan = columns.length;\n\n        const header = columns.map((cols, index) => {\n            const col = cols.map((col, j) => {\n                /* eslint-disable no-unused-vars, prefer-const */\n                let {\n                    title,\n                    colSpan,\n                    sortable,\n                    resizable,\n                    dataIndex,\n                    filters,\n                    filterMode,\n                    width,\n                    align,\n                    alignHeader,\n                    className,\n                    __normalized,\n                    lock,\n                    ...others\n                } = col;\n\n                className = classnames({\n                    [`${prefix}table-header-node`]: true,\n                    [`${prefix}table-header-resizable`]: resizable,\n                    [className]: className,\n                });\n                let attrs = {},\n                    sortElement,\n                    filterElement,\n                    resizeElement;\n                if (col.children && col.children.length) {\n                    attrs.colSpan = colSpan;\n                } else {\n                    if (sortable) {\n                        sortElement = (\n                            <Sort\n                                prefix={prefix}\n                                dataIndex={dataIndex}\n                                onSort={this.onSort}\n                                sort={sort}\n                                rtl={rtl}\n                                locale={locale}\n                            />\n                        );\n                    }\n                    if (resizable) {\n                        resizeElement = (\n                            <Resize\n                                prefix={prefix}\n                                rtl={rtl}\n                                dataIndex={dataIndex}\n                                onChange={onResizeChange}\n                            />\n                        );\n                    }\n\n                    if (filters) {\n                        filterElement = filters.length ? (\n                            <Filter\n                                dataIndex={dataIndex}\n                                filters={filters}\n                                prefix={prefix}\n                                locale={locale}\n                                rtl={rtl}\n                                filterParams={filterParams}\n                                filterMode={filterMode}\n                                onFilter={onFilter}\n                            />\n                        ) : null;\n                    }\n                    attrs.rowSpan = rowSpan - index;\n                }\n                return (\n                    <Cell\n                        {...others}\n                        {...attrs}\n                        key={j}\n                        prefix={prefix}\n                        pure={pure}\n                        rtl={rtl}\n                        cell={title}\n                        component=\"th\"\n                        align={alignHeader ? alignHeader : align}\n                        className={className}\n                        ref={this.getCellRef.bind(this, index, j)}\n                        type=\"header\"\n                    >\n                        {sortElement}\n                        {filterElement}\n                        {resizeElement}\n                    </Cell>\n                );\n            });\n            return <tr key={index}>{col}</tr>;\n        });\n\n        return (\n            <Tag className={className} {...others}>\n                {header}\n                {children}\n            </Tag>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/table/base/cell.jsx",
        "compressed": "NO",
        "line_numbers": 120,
        "compressed_line_numbers": 120,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { obj } from '../../util';\n\nexport default class Cell extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        primaryKey: PropTypes.string,\n        className: PropTypes.string,\n        record: PropTypes.any,\n        value: PropTypes.any,\n        colIndex: PropTypes.number,\n        rowIndex: PropTypes.number,\n        title: PropTypes.any,\n        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        context: PropTypes.any,\n        cell: PropTypes.oneOfType([\n            PropTypes.element,\n            PropTypes.node,\n            PropTypes.func,\n        ]),\n        align: PropTypes.oneOf(['left', 'center', 'right']),\n        component: PropTypes.oneOf(['td', 'th', 'div']),\n        children: PropTypes.any,\n        style: PropTypes.object,\n        innerStyle: PropTypes.object,\n        filterMode: PropTypes.oneOf(['single', 'multiple']),\n        filters: PropTypes.array,\n        sortable: PropTypes.bool,\n        lock: PropTypes.any,\n        type: PropTypes.oneOf(['header', 'body']),\n        resizable: PropTypes.bool,\n        __normalized: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        component: 'td',\n        type: 'body',\n        cell: value => value,\n        prefix: 'next-',\n    };\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.pure) {\n            const isEqual = obj.shallowEqual(this.props, nextProps);\n            return !isEqual;\n        }\n        return true;\n    }\n\n    render() {\n        /* eslint-disable no-unused-vars */\n        const {\n            prefix,\n            className,\n            cell,\n            value,\n            resizable,\n            colIndex,\n            rowIndex,\n            record,\n            context,\n            align,\n            style = {},\n            component: Tag,\n            children,\n            title,\n            width,\n            innerStyle,\n            primaryKey,\n            __normalized,\n            filterMode,\n            filters,\n            sortable,\n            lock,\n            pure,\n            locale,\n            expandedIndexSimulate,\n            rtl,\n            ...others\n        } = this.props;\n        const tagStyle = { ...style };\n        const cellProps = { value, index: rowIndex, record, context };\n        let content = cell;\n        if (React.isValidElement(content)) {\n            content = React.cloneElement(content, cellProps);\n        } else if (typeof content === 'function') {\n            content = content(value, rowIndex, record, context);\n        }\n        if (align) {\n            tagStyle.textAlign = align;\n            if (rtl) {\n                tagStyle.textAlign =\n                    align === 'left'\n                        ? 'right'\n                        : align === 'right'\n                        ? 'left'\n                        : align;\n            }\n        }\n        const cls = classnames({\n            [`${prefix}table-cell`]: true,\n            [className]: className,\n        });\n\n        return (\n            <Tag {...others} className={cls} style={tagStyle} role=\"gridcell\">\n                <div\n                    className={`${prefix}table-cell-wrapper`}\n                    style={innerStyle}\n                >\n                    {content}\n                    {children}\n                </div>\n            </Tag>\n        );\n    }\n}"
    }
}