{
    "1/1": {
        "src/overlay/position.jsx": [
            {
                "SEARCH": [
                    "setPosition() {",
                    "const {",
                    "align,",
                    "offset,",
                    "beforePosition,",
                    "onPosition,",
                    "needAdjust,",
                    "rtl,",
                    "} = this.props;",
                    "",
                    "beforePosition();",
                    "",
                    "const contentNode = this.getContentNode();",
                    "const targetNode = this.getTargetNode();",
                    "if (contentNode && targetNode) {",
                    "const resultAlign = place({",
                    "pinElement: contentNode,",
                    "baseElement: targetNode,",
                    "align,",
                    "offset,",
                    "needAdjust,",
                    "isRtl: rtl,",
                    "});",
                    "const top = getStyle(contentNode, 'top');",
                    "const left = getStyle(contentNode, 'left');",
                    "",
                    "onPosition(",
                    "{",
                    "align: resultAlign.split(' '),",
                    "top,",
                    "left,",
                    "},",
                    "contentNode",
                    ");",
                    "}",
                    "}"
                ],
                "REPLACE": [
                    "    setPosition() {",
                    "        const {",
                    "            align,",
                    "            offset,",
                    "            beforePosition,",
                    "            onPosition,",
                    "            needAdjust,",
                    "            rtl,",
                    "        } = this.props;",
                    "",
                    "        beforePosition();",
                    "",
                    "        const contentNode = this.getContentNode();",
                    "        const targetNode = this.getTargetNode();",
                    "        if (contentNode && targetNode) {",
                    "            const resultAlign = place({",
                    "                pinElement: contentNode,",
                    "                baseElement: targetNode,",
                    "                align,",
                    "                offset,",
                    "                needAdjust,",
                    "                isRtl: rtl,",
                    "            });",
                    "            const top = getStyle(contentNode, 'top');",
                    "            const left = getStyle(contentNode, 'left');",
                    "",
                    "            // Adjust position based on scroll",
                    "            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;",
                    "            const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;",
                    "",
                    "            onPosition(",
                    "                {",
                    "                    align: resultAlign.split(' '),",
                    "                    top: top + scrollTop,",
                    "                    left: left + scrollLeft,",
                    "                },",
                    "                contentNode",
                    "            );",
                    "        }",
                    "    }"
                ]
            }
        ],
        "src/number-picker/number-picker.jsx": [
            {
                "SEARCH": [
                    "let innerAfter = null,",
                    "innerAfterClassName = null,",
                    "addonBefore = null,",
                    "addonAfter = null;",
                    "if (type === 'normal') {",
                    "innerAfter = [",
                    "<Button",
                    "{...upBtnProps}",
                    "onMouseDown={this.handleMouseDown}",
                    "disabled={disabled}",
                    "className={`${upBtnProps.className || ''} ${",
                    "upDisabled ? 'disabled' : ''",
                    "}`}",
                    "onClick={this.up.bind(this, upDisabled)}",
                    "key=\"0\"",
                    ">",
                    "<Icon size=\"xxs\" type=\"arrow-up\" />",
                    "</Button>,",
                    "<Button",
                    "{...downBtnProps}",
                    "onMouseDown={this.handleMouseDown}",
                    "disabled={disabled}",
                    "className={`${downBtnProps.className || ''} ${",
                    "downDisabled ? 'disabled' : ''",
                    "}`}",
                    "onClick={this.down.bind(this, downDisabled)}",
                    "key=\"1\"",
                    ">",
                    "<Icon size=\"xxs\" type=\"arrow-down\" />",
                    "</Button>,",
                    "];",
                    "innerAfterClassName = `${prefixCls}-handler`;",
                    "} else {",
                    "addonBefore = (",
                    "<Button",
                    "{...downBtnProps}",
                    "size={size}",
                    "disabled={disabled}",
                    "className={`${downBtnProps.className || ''} ${",
                    "downDisabled ? 'disabled' : ''",
                    "}`}",
                    "onClick={this.down.bind(this, downDisabled)}",
                    ">",
                    "<Icon type=\"minus\" size=\"xs\" />",
                    "</Button>",
                    ");",
                    "addonAfter = (",
                    "<Button",
                    "{...upBtnProps}",
                    "size={size}",
                    "disabled={disabled}",
                    "className={`${upBtnProps.className || ''} ${",
                    "upDisabled ? 'disabled' : ''",
                    "}`}",
                    "onClick={this.up.bind(this, upDisabled)}",
                    ">",
                    "<Icon type=\"add\" size=\"xs\" />",
                    "</Button>",
                    ");",
                    "}"
                ],
                "REPLACE": [
                    "        let innerBefore = null,",
                    "            innerAfter = null,",
                    "            innerAfterClassName = null,",
                    "            addonBefore = null,",
                    "            addonAfter = null;",
                    "        if (type === 'normal') {",
                    "            innerBefore = (",
                    "                <Button",
                    "                    {...downBtnProps}",
                    "                    onMouseDown={this.handleMouseDown}",
                    "                    disabled={disabled}",
                    "                    className={`${downBtnProps.className || ''} ${",
                    "                        downDisabled ? 'disabled' : ''",
                    "                    }`}",
                    "                    onClick={this.down.bind(this, downDisabled)}",
                    "                    key=\"0\"",
                    "                >",
                    "                    <Icon size=\"xxs\" type=\"arrow-down\" />",
                    "                </Button>",
                    "            );",
                    "            innerAfter = (",
                    "                <Button",
                    "                    {...upBtnProps}",
                    "                    onMouseDown={this.handleMouseDown}",
                    "                    disabled={disabled}",
                    "                    className={`${upBtnProps.className || ''} ${",
                    "                        upDisabled ? 'disabled' : ''",
                    "                    }`}",
                    "                    onClick={this.up.bind(this, upDisabled)}",
                    "                    key=\"1\"",
                    "                >",
                    "                    <Icon size=\"xxs\" type=\"arrow-up\" />",
                    "                </Button>",
                    "            );",
                    "            innerAfterClassName = `${prefixCls}-handler`;",
                    "        } else {",
                    "            addonBefore = (",
                    "                <Button",
                    "                    {...downBtnProps}",
                    "                    size={size}",
                    "                    disabled={disabled}",
                    "                    className={`${downBtnProps.className || ''} ${",
                    "                        downDisabled ? 'disabled' : ''",
                    "                    }`}",
                    "                    onClick={this.down.bind(this, downDisabled)}",
                    "                >",
                    "                    <Icon type=\"minus\" size=\"xs\" />",
                    "                </Button>",
                    "            );",
                    "            addonAfter = (",
                    "                <Button",
                    "                    {...upBtnProps}",
                    "                    size={size}",
                    "                    disabled={disabled}",
                    "                    className={`${upBtnProps.className || ''} ${",
                    "                        upDisabled ? 'disabled' : ''",
                    "                    }`}",
                    "                    onClick={this.up.bind(this, upDisabled)}",
                    "                >",
                    "                    <Icon type=\"add\" size=\"xs\" />",
                    "                </Button>",
                    "            );",
                    "        }"
                ]
            }
        ]
    }
}