{
    "1": {
        "bug_file": "src/cascader-select/cascader-select.jsx",
        "compressed": "YES",
        "line_numbers": 978,
        "compressed_line_numbers": 244,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport classNames from 'classnames';\nimport Select from '../select';\nimport Cascader from '../cascader';\nimport Menu from '../menu';\nimport { func, obj, dom, KEYCODE } from '../util';\n\n\n/**\n * CascaderSelect\n */\n\n\n        /**\n         * 选择框大小\n         */\n\n        /**\n         * 选择框占位符\n         */\n\n        /**\n         * 是否禁用\n         */\n\n        /**\n         * 是否有下拉箭头\n         */\n\n        /**\n         * 是否有边框\n         */\n\n        /**\n         * 是否有清除按钮\n         */\n\n        /**\n         * 自定义内联 label\n         */\n\n        /**\n         * 是否只读，只读模式下可以展开弹层但不能选\n         */\n\n        /**\n         * 数据源，结构可参考下方说明\n         */\n\n        /**\n         * （非受控）默认值\n         */\n\n        /**\n         * （受控）当前值\n         */\n\n        /**\n         * 选中值改变时触发的回调函数\n         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n         * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.selectedPath 单选时选中的数据的路径\n         * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n         * @param {Object} extra.currentData 多选时当前操作的数据\n         * @param {Array} extra.checkedData 多选时所有被选中的数据\n         * @param {Array} extra.indeterminateData 多选时半选的数据\n         */\n\n        /**\n         * 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置\n         */\n\n        /**\n         * （受控）当前展开值\n         */\n\n        /**\n         * 展开触发的方式\n         */\n\n\n        /**\n         * 是否开启虚拟滚动\n         */\n\n        /**\n         * 是否多选\n         */\n\n        /**\n         * 是否选中即发生改变, 该属性仅在单选模式下有效\n         */\n\n        /**\n         * 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效\n         */\n\n        /**\n         * 父子节点是否选中不关联\n         */\n\n        /**\n         * 每列列表样式对象\n         */\n\n        /**\n         * 每列列表类名\n         */\n\n        /**\n         * 选择框单选时展示结果的自定义渲染函数\n         * @param {Array} label 选中路径的文本数组\n         * @return {ReactNode} 渲染在选择框中的内容\n         * @default 单选时：labelPath => labelPath.join(' / ')；多选时：labelPath => labelPath[labelPath.length - 1]\n         */\n\n        /**\n         * 渲染 item 内容的方法\n         * @param {Object} item 渲染节点的item\n         * @return {ReactNode} item node\n         */\n\n        /**\n         * 是否显示搜索框\n         */\n\n        /**\n         * 自定义搜索函数\n         * @param {String} searchValue 搜索的关键字\n         * @param {Array} path 节点路径\n         * @return {Boolean} 是否匹配\n         * @default 根据路径所有节点的文本值模糊匹配\n         */\n\n        /**\n         * 当搜索框值变化时回调\n         * @param {String} value 数据\n         * @version 1.23\n         */\n\n        /**\n         * 搜索结果自定义渲染函数\n         * @param {String} searchValue 搜索的关键字\n         * @param {Array} path 匹配到的节点路径\n         * @return {ReactNode} 渲染的内容\n         * @default 按照节点文本 a / b / c 的模式渲染\n         */\n\n        /**\n         * 搜索结果列表是否和选择框等宽\n         */\n\n        /**\n         * 无数据时显示内容\n         */\n\n        /**\n         * 异步加载数据函数\n         * @param {Object} data 当前点击异步加载的数据\n         */\n\n        /**\n         * 自定义下拉框头部\n         */\n\n        /**\n         * 自定义下拉框底部\n         */\n\n        /**\n         * 初始下拉框是否显示\n         */\n\n        /**\n         * 当前下拉框是否显示\n         */\n\n        /**\n         * 下拉框显示或关闭时触发事件的回调函数\n         * @param {Boolean} visible 是否显示\n         * @param {String} type 触发显示关闭的操作类型, fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发\n         */\n\n        /**\n         * 下拉框自定义样式对象\n         */\n\n        /**\n         * 下拉框样式自定义类名\n         */\n\n        /**\n         * 下拉框挂载的容器节点\n         */\n\n        /**\n         * 透传到 Popup 的属性对象\n         */\n\n        /**\n         * 是否跟随滚动\n         */\n\n        /**\n         * 是否为预览态\n         */\n\n        /**\n         * 预览态模式下渲染的内容\n         * @param {Array<data>} value 选择值 { label: , value:}\n         */\n\n        /**\n         * 是否是不可变数据\n         * @version 1.23\n         */\n\n\n        // 缓存选中值数据\n\n\n            // 这里需要延迟下，showSearch 的情况下通过手动设置 menuProps={{focusable: true}} 回车 focus 会有延迟\n\n\n    /**\n     * 刷新值数据缓存，删除无效值\n     * @param {Arrary | String} curValue 当前值\n     */\n\n\n            // onChange 中的 data 参数也应该保留不存在的 value 的数据\n            // 在 dataSource 异步加载的情况下，会出现value重复的现象，需要去重\n\n\n            // 更新缓存\n\n\n        // 单选时点击清空按钮\n\n\nexport default polyfill(CascaderSelect);\n"
    },
    "2": {
        "bug_file": "src/overlay/popup-v2.jsx",
        "compressed": "NO",
        "line_numbers": 183,
        "compressed_line_numbers": 183,
        "compressed_bug_file_content": "/* istanbul ignore file */\nimport React, { useState, useRef, useEffect, cloneElement } from 'react';\nimport classNames from 'classnames';\nimport Overlay from '@alifd/overlay';\n\nimport Animate from '../animate';\n\nimport { log } from '../util';\n\nconst Popup = props => {\n    if (!useState || !useRef || !useEffect) {\n        log.warning('need react version > 16.8.0');\n        return null;\n    }\n\n    const {\n        prefix = 'next-',\n        animation: panimation = { in: 'expandInDown', out: 'expandOutUp' },\n        defaultVisible,\n        onVisibleChange = () => {},\n        trigger,\n        triggerType = 'hover',\n        overlay,\n        onPosition,\n        children,\n        className,\n        style,\n        wrapperClassName,\n        triggerClickKeycode,\n        align,\n\n        beforeOpen,\n        onOpen,\n        afterOpen,\n        beforeClose,\n        onClose,\n        afterClose,\n\n        ...others\n    } = props;\n\n    const [visible, setVisible] = useState(defaultVisible);\n    const [animation, setAnimation] = useState(panimation);\n    const [isAnimationEnd, markAnimationEnd] = useState(true);\n    const overlayRef = useRef(null);\n\n    useEffect(() => {\n        if ('visible' in props) {\n            setVisible(props.visible);\n        }\n    }, [props.visible]);\n\n    useEffect(() => {\n        if ('animation' in props && animation !== panimation) {\n            setAnimation(panimation);\n        }\n    }, [panimation]);\n\n    const handleVisibleChange = (visible, ...args) => {\n        if (!('visible' in props)) {\n            setVisible(visible);\n        }\n\n        onVisibleChange(visible, ...args);\n    };\n\n    const triggerNode = overlay ? children : trigger;\n    let overlayNode = overlay ? overlay : children;\n\n    const handleEnter = () => {\n        markAnimationEnd(false);\n        typeof beforeOpen === 'function' && beforeOpen(overlayRef.current);\n    };\n    const handleEntering = () => {\n        typeof onOpen === 'function' && onOpen(overlayRef.current);\n    };\n    const handleEntered = () => {\n        typeof afterOpen === 'function' && afterOpen(overlayRef.current);\n    };\n    const handleExit = () => {\n        typeof beforeClose === 'function' && beforeClose(overlayRef.current);\n    };\n    const handleExiting = () => {\n        typeof onClose === 'function' && onClose(overlayRef.current);\n    };\n    const handleExited = () => {\n        markAnimationEnd(true);\n        typeof afterClose === 'function' && afterClose(overlayRef.current);\n    };\n\n    overlayNode = (\n        <Animate.OverlayAnimate\n            visible={visible}\n            animation={animation}\n            timeout={200}\n            onEnter={handleEnter}\n            onEntering={handleEntering}\n            onEntered={handleEntered}\n            onExit={handleExit}\n            onExiting={handleExiting}\n            onExited={handleExited}\n            style={style}\n        >\n            {overlayNode ? (\n                cloneElement(overlayNode, {\n                    className: classNames([\n                        `${prefix}overlay-inner`,\n                        className,\n                        overlayNode && overlayNode.props && overlayNode.props.className,\n                    ]),\n                })\n            ) : (\n                <span />\n            )}\n        </Animate.OverlayAnimate>\n    );\n\n    const handlePosition = result => {\n        // 兼容 1.x, 2.x 可去除这段逻辑\n        Object.assign(result, { align: result.config.points });\n\n        const placement = result.config.placement;\n        if (placement && typeof placement === 'string') {\n            if (animation.in === 'expandInDown' && animation.out === 'expandOutUp' && placement.match(/t/)) {\n                setAnimation({\n                    in: 'expandInUp',\n                    out: 'expandOutDown',\n                });\n            } else if (animation.in === 'expandInUp' && animation.out === 'expandOutDown' && placement.match(/b/)) {\n                setAnimation({\n                    in: 'expandInDown',\n                    out: 'expandOutUp',\n                });\n            }\n        }\n\n        typeof onPosition === 'function' && onPosition(result);\n    };\n\n    const wraperCls = classNames({\n        [`${prefix}overlay-wrapper v2`]: true,\n        [wrapperClassName]: wrapperClassName,\n        opened: visible,\n    });\n\n    // 兼容\n    const v1Props = {};\n    if (align) {\n        v1Props.points = align.split(' ');\n    }\n\n    const maskRender = node => (\n        <Animate.OverlayAnimate\n            visible={visible}\n            animation={animation ? { in: 'fadeIn', out: 'fadeOut' } : false}\n            timeout={200}\n            unmountOnExit\n        >\n            {node}\n        </Animate.OverlayAnimate>\n    );\n\n    return (\n        <Overlay.Popup\n            {...others}\n            {...v1Props}\n            wrapperClassName={wraperCls}\n            overlay={overlayNode}\n            visible={visible}\n            isAnimationEnd={isAnimationEnd}\n            triggerType={triggerType}\n            onVisibleChange={handleVisibleChange}\n            onPosition={handlePosition}\n            triggerClickKeyCode={triggerClickKeycode}\n            maskRender={maskRender}\n            ref={overlayRef}\n        >\n            {triggerNode}\n        </Overlay.Popup>\n    );\n};\n\nexport default Popup;"
    },
    "3": {
        "bug_file": "src/overlay/index.jsx",
        "compressed": "NO",
        "line_numbers": 91,
        "compressed_line_numbers": 91,
        "compressed_bug_file_content": "import React from 'react';\nimport ConfigProvider from '../config-provider';\n\nimport Overlay1 from './overlay';\nimport Overlay2 from './overlay-v2';\n\nimport Gateway from './gateway';\nimport Position from './position';\n\nimport Popup1 from './popup';\nimport Popup2 from './popup-v2';\nimport { log } from '../util';\n\nclass Overlay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.overlayRef = null;\n        this.saveRef = this.saveRef.bind(this);\n    }\n    saveRef(ref) {\n        this.overlayRef = ref;\n    }\n    /**\n     * 兼容 1.x API, will be removed in 2.1.0\n     */\n    getContent() {\n        if (this.overlayRef) {\n            return this.overlayRef.getContent();\n        }\n        return null;\n    }\n    /**\n     * 兼容 1.x API, will be removed in 2.1.0\n     */\n    getContentNode() {\n        if (this.overlayRef) {\n            return this.overlayRef.getContentNode();\n        }\n        return null;\n    }\n    render() {\n        const { v2, ...others } = this.props;\n        if (v2) {\n            if ('needAdjust' in others) {\n                log.deprecated('needAdjust', 'autoAdjust', 'Overlay v2');\n                others.autoAdjust = others.needAdjust;\n                delete others.needAdjust;\n            }\n            return <Overlay2 {...others} />;\n        } else {\n            return <Overlay1 {...others} ref={this.saveRef} />;\n        }\n    }\n}\n// eslint-disable-next-line\nclass Popup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.overlay = null;\n        this.saveRef = this.saveRef.bind(this);\n    }\n    saveRef(ref) {\n        if (ref) {\n            this.overlay = ref.overlay;\n        }\n    }\n    render() {\n        const { v2, ...others } = this.props;\n        if (v2) {\n            if ('needAdjust' in others) {\n                log.deprecated('needAdjust', 'needAdjust', 'Popup v2');\n                others.autoAdjust = others.needAdjust;\n                delete others.needAdjust;\n            }\n\n            return <Popup2 {...others} />;\n        } else {\n            return <Popup1 {...others} ref={this.saveRef} />;\n        }\n    }\n}\n\nOverlay.Gateway = Gateway;\nOverlay.Position = Position;\nOverlay.Popup = ConfigProvider.config(Popup, {\n    exportNames: ['overlay'],\n});\n\nexport default ConfigProvider.config(Overlay, {\n    exportNames: ['getContent', 'getContentNode'],\n});"
    }
}