{
    "1": {
        "bug_file": "src/date-picker2/panels/time-panel.jsx",
        "compressed": "NO",
        "line_numbers": 91,
        "compressed_line_numbers": 91,
        "compressed_bug_file_content": "import React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport * as PT from 'prop-types';\nimport TimePickerPanel from '../../time-picker2/panel';\nimport SharedPT from '../prop-types';\nimport { func } from '../../util';\n\nconst DECADE_TIME_FORMAT = 'HH:mm:ss';\n\nclass TimePanel extends React.PureComponent {\n    static propTypes = {\n        rtl: PT.bool,\n        prefix: PT.string,\n        locale: PT.object,\n        value: SharedPT.date,\n        timePanelProps: PT.object,\n        defaultValue: SharedPT.value,\n        onSelect: PT.func,\n    };\n\n    formater = v => {\n        const { timePanelProps = {} } = this.props;\n        const { showHour, showMinute, showSecond } = this.getShow();\n\n        let fmt;\n        if ('format' in timePanelProps) {\n            fmt = timePanelProps.format;\n        } else {\n            const fmtArr = [];\n\n            showHour && fmtArr.push('HH');\n            showMinute && fmtArr.push('mm');\n            showSecond && fmtArr.push('ss');\n\n            fmt = fmtArr.join(':');\n        }\n\n        return typeof fmt === 'function' ? fmt(v) : v.format(fmt);\n    };\n\n    getShow = () => {\n        const { timePanelProps: props = {} } = this.props;\n\n        const fmt = props.format || DECADE_TIME_FORMAT;\n\n        let showHour;\n        let showMinute;\n        let showSecond;\n\n        if (typeof fmt === 'string') {\n            showHour = fmt.indexOf('H') > -1;\n            showSecond = fmt.indexOf('s') > -1;\n            showMinute = fmt.indexOf('m') > -1;\n        }\n\n        return {\n            showHour: 'showHour' in props ? props.showHour : showHour,\n            showMinute: 'showMinute' in props ? props.showMinute : showMinute,\n            showSecond: 'showSecond' in props ? props.showSecond : showSecond,\n        };\n    };\n\n    onSelect = v => {\n        func.invoke(this.props, 'onSelect', [v]);\n    };\n\n    render() {\n        const { prefix, rtl, locale, timePanelProps = {}, value } = this.props;\n        const { showHour, showMinute, showSecond } = this.getShow();\n\n        return (\n            <div dir={rtl ? 'rtl' : undefined} className={`${prefix}date-time-picker-wrapper ${prefix}calendar2-panel`}>\n                <div className={`${prefix}calendar2-header`}>\n                    <div className={`${prefix}calendar2-header-text-field`}>{value ? this.formater(value) : null}</div>\n                </div>\n                <TimePickerPanel\n                    prefix={prefix}\n                    locale={locale}\n                    onSelect={this.onSelect}\n                    showHour={showHour}\n                    showSecond={showSecond}\n                    showMinute={showMinute}\n                    {...timePanelProps}\n                    value={value}\n                />\n            </div>\n        );\n    }\n}\n\nexport default polyfill(TimePanel);"
    },
    "2": {
        "bug_file": "src/date-picker2/util.js",
        "compressed": "NO",
        "line_numbers": 21,
        "compressed_line_numbers": 21,
        "compressed_bug_file_content": "import { DATE_INPUT_TYPE } from './constant';\n\nexport function setTime(targetVal, sourceVal) {\n    if (sourceVal && targetVal) {\n        return targetVal\n            .hour(sourceVal.hour())\n            .minute(sourceVal.minute())\n            .second(sourceVal.second())\n            .millisecond(sourceVal.millisecond());\n    }\n    return targetVal;\n}\n\nexport function switchInputType(inputType) {\n    const { BEGIN, END } = DATE_INPUT_TYPE;\n    return inputType === BEGIN ? END : BEGIN;\n}\n\nexport function mode2unit(mode) {\n    return mode === 'date' ? 'day' : mode;\n}"
    },
    "3": {
        "bug_file": "src/date-picker2/index.jsx",
        "compressed": "NO",
        "line_numbers": 79,
        "compressed_line_numbers": 79,
        "compressed_bug_file_content": "import React from 'react';\nimport ConfigProvider from '../config-provider';\nimport Picker from './picker';\nimport { DATE_PICKER_MODE } from './constant';\n\nconst { DATE, WEEK, MONTH, QUARTER, YEAR } = DATE_PICKER_MODE;\nconst MODE2FORMAT = {\n    [DATE]: 'YYYY-MM-DD',\n    [WEEK]: 'YYYY-wo',\n    [MONTH]: 'YYYY-MM',\n    [QUARTER]: 'YYYY-[Q]Q',\n    [YEAR]: 'YYYY',\n};\n\n/* istanbul ignore next */\nconst transform = (props, deprecated) => {\n    const { footerRender, onVisibleMonthChange, defaultVisibleMonth, ranges, ...newProps } = props;\n    const mode = props.mode || DATE;\n\n    if ('footerRender' in props) {\n        deprecated('footerRender', 'extraFooterRender', 'DatePicker');\n        newProps.extraFooterRender = footerRender;\n    }\n\n    if (onVisibleMonthChange) {\n        deprecated('onVisibleMonthChange', 'onPanelChange', 'DatePicker');\n        newProps.onPanelChange = onVisibleMonthChange;\n    }\n\n    if (defaultVisibleMonth) {\n        deprecated('defaultVisibleMonth', 'defaultPanelValue', 'DatePicker');\n        newProps.defaultPanelValue = onVisibleMonthChange;\n    }\n\n    if ('ranges' in props) {\n        deprecated('ranges', 'preset: PT.oneOfType([PT.array, PT.object])', 'DatePicker');\n        newProps.preset = ranges;\n    }\n\n    if ([WEEK, MONTH, QUARTER, YEAR].includes(mode)) {\n        delete newProps.showTime;\n    } else if (typeof props.showTime === 'object') {\n        deprecated('showTime: object', 'showTime && timePanelProps', 'DatePicker');\n        newProps.timePanelProps = props.showTime;\n        newProps.showTime = true;\n    }\n\n    if (!newProps.format) {\n        newProps.format = MODE2FORMAT[mode] + (newProps.showTime ? ' HH:mm:ss' : '');\n    }\n\n    return newProps;\n};\n\nconst ConfigPicker = ConfigProvider.config(Picker, {\n    componentName: 'DatePicker2',\n    transform,\n});\nconst generatePicker = mode => React.forwardRef((props, ref) => <ConfigPicker ref={ref} {...props} mode={mode} />);\n\nconst DatePicker2 = generatePicker();\nDatePicker2.displayName = 'DatePicker2';\n\nDatePicker2.MonthPicker = generatePicker(MONTH);\nDatePicker2.MonthPicker.displayName = 'MonthPicker2';\n\nDatePicker2.YearPicker = generatePicker(YEAR);\nDatePicker2.YearPicker.displayName = 'YearPicker2';\n\nDatePicker2.WeekPicker = generatePicker(WEEK);\nDatePicker2.WeekPicker.displayName = 'WeekPicker2';\n\nDatePicker2.QuarterPicker = generatePicker(QUARTER);\nDatePicker2.QuarterPicker.displayName = 'QuarterPicker2';\n\nDatePicker2.RangePicker = React.forwardRef((props, ref) => <ConfigPicker ref={ref} {...props} type=\"range\" />);\nDatePicker2.RangePicker.displayName = 'RangePicker2';\n\nexport default DatePicker2;"
    },
    "4": {
        "bug_file": "src/date-picker2/constant.js",
        "compressed": "NO",
        "line_numbers": 17,
        "compressed_line_numbers": 17,
        "compressed_bug_file_content": "export const DATE_PICKER_TYPE = {\n    DATE: 'date',\n    RANGE: 'range',\n};\n\nexport const DATE_INPUT_TYPE = {\n    BEGIN: 0,\n    END: 1,\n};\n\nexport const DATE_PICKER_MODE = {\n    DATE: 'date',\n    MONTH: 'month',\n    WEEK: 'week',\n    QUARTER: 'quarter',\n    YEAR: 'year',\n};"
    }
}