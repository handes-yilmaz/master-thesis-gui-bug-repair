{
    "1": {
        "bug_file": "src/dialog/dialog.jsx",
        "compressed": "NO",
        "line_numbers": 435,
        "compressed_line_numbers": 435,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Overlay from '../overlay';\nimport zhCN from '../locale/zh-cn';\nimport { focus, obj, func, events, dom, env } from '../util';\nimport Inner from './inner';\n\nconst noop = () => {};\nconst { limitTabRange } = focus;\nconst { bindCtx } = func;\nconst { pickOthers } = obj;\nconst { getStyle, setStyle } = dom;\n\n// [fix issue #1609](https://github.com/alibaba-fusion/next/issues/1609)\n// https://stackoverflow.com/questions/19717907/getcomputedstyle-reporting-different-heights-between-chrome-safari-firefox-and-i\nfunction _getSize(dom, name) {\n    const boxSizing = getStyle(dom, 'boxSizing');\n\n    if (env.ieVersion && ['width', 'height'].indexOf(name) !== -1 && boxSizing === 'border-box') {\n        return parseFloat(dom.getBoundingClientRect()[name].toFixed(1));\n    } else {\n        return getStyle(dom, name);\n    }\n}\n\n/**\n * Dialog\n */\nexport default class Dialog extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        rtl: PropTypes.bool,\n        className: PropTypes.string,\n        /**\n         * 是否显示\n         */\n        visible: PropTypes.bool,\n        /**\n         * 标题\n         */\n        title: PropTypes.node,\n        /**\n         * 内容\n         */\n        children: PropTypes.node,\n        /**\n         * 底部内容，设置为 false，则不进行显示\n         * @default [<Button type=\"primary\">确定</Button>, <Button>取消</Button>]\n         */\n        footer: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n        /**\n         * 底部按钮的对齐方式\n         */\n        footerAlign: PropTypes.oneOf(['left', 'center', 'right']),\n        /**\n         * 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：\n         * ['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）\n         * ['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）\n         * ['ok']（只存在确认按钮）\n         * ['cancel']（只存在取消按钮）\n         */\n        footerActions: PropTypes.array,\n        /**\n         * 在点击确定按钮时触发的回调函数\n         * @param {Object} event 点击事件对象\n         */\n        onOk: PropTypes.func,\n        /**\n         * 在点击取消按钮时触发的回调函数\n         * @param {Object} event 点击事件对象\n         */\n        onCancel: PropTypes.func,\n        /**\n         * 应用于确定按钮的属性对象\n         */\n        okProps: PropTypes.object,\n        /**\n         * 应用于取消按钮的属性对象\n         */\n        cancelProps: PropTypes.object,\n        /**\n         * [废弃]同closeMode, 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：\n         * **close** 表示点击关闭按钮可以关闭对话框\n         * **mask** 表示点击遮罩区域可以关闭对话框\n         * **esc** 表示按下 esc 键可以关闭对话框\n         * 如 'close' 或 'close,esc,mask'\n         * 如果设置为 true，则以上关闭方式全部生效\n         * 如果设置为 false，则以上关闭方式全部失效\n         */\n        closeable: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n        /**\n         * [推荐]1.21.x 支持控制对话框关闭的方式，值可以为字符串或者数组，其中字符串、数组均为以下值的枚举：\n         * **close** 表示点击关闭按钮可以关闭对话框\n         * **mask** 表示点击遮罩区域可以关闭对话框\n         * **esc** 表示按下 esc 键可以关闭对话框\n         * 如 'close' 或 ['close','esc','mask'], []\n         * @version 1.21\n         */\n        closeMode: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.oneOf(['close', 'mask', 'esc'])),\n            PropTypes.oneOf(['close', 'mask', 'esc']),\n        ]),\n        /**\n         * 隐藏时是否保留子节点，不销毁 （低版本通过 overlayProps 实现）\n         * @version 1.23\n         */\n        cache: PropTypes.bool,\n        /**\n         * 对话框关闭时触发的回调函数\n         * @param {String} trigger 关闭触发行为的描述字符串\n         * @param {Object} event 关闭时事件对象\n         */\n        onClose: PropTypes.func,\n        /**\n         * 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发\n         */\n        afterClose: PropTypes.func,\n        /**\n         * 是否显示遮罩\n         */\n        hasMask: PropTypes.bool,\n        /**\n         * 显示隐藏时动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画。 请参考 Animate 组件的文档获取可用的动画名\n         * @default { in: 'expandInDown', out: 'expandOutUp' }\n         */\n        animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        /**\n         * 对话框弹出时是否自动获得焦点\n         */\n        autoFocus: PropTypes.bool,\n        /**\n         * 对话框对齐方式, 具体见Overlay文档\n         */\n        align: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n        /**\n         * 当对话框高度超过浏览器视口高度时，是否显示所有内容而不是出现滚动条以保证对话框完整显示在浏览器视口内，该属性仅在对话框垂直水平居中时生效，即 align 被设置为 'cc cc' 时\n         */\n        isFullScreen: PropTypes.bool,\n        /**\n         * 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式\n         */\n        shouldUpdatePosition: PropTypes.bool,\n        /**\n         * 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效\n         */\n        minMargin: PropTypes.number,\n        /**\n         * 透传到弹层组件的属性对象\n         */\n        overlayProps: PropTypes.object,\n        /**\n         * 自定义国际化文案对象\n         * @property {String} ok 确认按钮文案\n         * @property {String} cancel 取消按钮文案\n         */\n        locale: PropTypes.object,\n        /**\n         * 对话框的高度样式属性\n         */\n        height: PropTypes.string,\n        // Do not remove this, it's for <ConfigProvider popupContainer={} />\n        // see https://github.com/alibaba-fusion/next/issues/1508\n        popupContainer: PropTypes.any,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        pure: false,\n        visible: false,\n        footerAlign: 'right',\n        footerActions: ['ok', 'cancel'],\n        onOk: noop,\n        onCancel: noop,\n        cache: false,\n        okProps: {},\n        cancelProps: {},\n        closeable: 'esc,close',\n        onClose: noop,\n        afterClose: noop,\n        hasMask: true,\n        animation: {\n            in: 'fadeInUp',\n            out: 'fadeOutUp',\n        },\n        autoFocus: false,\n        align: 'cc cc',\n        isFullScreen: false,\n        shouldUpdatePosition: false,\n        minMargin: 40,\n        overlayProps: {},\n        locale: zhCN.Dialog,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n        bindCtx(this, ['onKeyDown', 'beforePosition', 'adjustPosition', 'getOverlayRef']);\n    }\n\n    componentDidMount() {\n        events.on(document, 'keydown', this.onKeyDown);\n        if (!this.useCSSToPosition()) {\n            this.adjustPosition();\n        }\n    }\n\n    componentWillUnmount() {\n        events.off(document, 'keydown', this.onKeyDown);\n    }\n\n    useCSSToPosition() {\n        const { align, isFullScreen } = this.props;\n        return align === 'cc cc' && isFullScreen;\n    }\n\n    onKeyDown(e) {\n        const node = this.getInnerNode();\n        if (node) {\n            limitTabRange(node, e);\n        }\n    }\n\n    beforePosition() {\n        if (this.props.visible && this.overlay) {\n            const inner = this.getInner();\n            if (inner) {\n                const node = this.getInnerNode();\n                if (this._lastDialogHeight !== _getSize(node, 'height')) {\n                    this.revertSize(inner.bodyNode);\n                }\n            }\n        }\n    }\n\n    adjustPosition() {\n        if (this.props.visible && this.overlay) {\n            const inner = this.getInner();\n            if (inner) {\n                const node = this.getInnerNode();\n\n                let top = getStyle(node, 'top');\n                const minMargin = this.props.minMargin;\n                if (top < minMargin) {\n                    top = minMargin;\n                    setStyle(node, 'top', `${minMargin}px`);\n                }\n\n                const height = _getSize(node, 'height');\n                const viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n\n                if (\n                    viewportHeight < height + top * 2 - 1 || // 分辨率和精确度的原因 高度计算的时候 可能会有1px内的偏差\n                    this.props.height\n                ) {\n                    this.adjustSize(inner, node, Math.min(height, viewportHeight - top * 2));\n                } else {\n                    this.revertSize(inner.bodyNode);\n                }\n\n                this._lastDialogHeight = height;\n            }\n        }\n    }\n\n    adjustSize(inner, node, expectHeight) {\n        const { headerNode, bodyNode, footerNode } = inner;\n        const [headerHeight, footerHeight] = [headerNode, footerNode].map(node =>\n            node ? _getSize(node, 'height') : 0\n        );\n        const padding = ['padding-top', 'padding-bottom'].reduce((sum, attr) => sum + getStyle(node, attr), 0);\n\n        let maxBodyHeight = expectHeight - headerHeight - footerHeight - padding;\n\n        if (maxBodyHeight < 0) {\n            maxBodyHeight = 1;\n        }\n\n        if (bodyNode) {\n            this.dialogBodyStyleMaxHeight = bodyNode.style.maxHeight;\n            this.dialogBodyStyleOverflowY = bodyNode.style.overflowY;\n\n            setStyle(bodyNode, {\n                'max-height': `${maxBodyHeight}px`,\n                'overflow-y': 'auto',\n            });\n        }\n    }\n\n    revertSize(bodyNode) {\n        setStyle(bodyNode, {\n            'max-height': this.dialogBodyStyleMaxHeight,\n            'overflow-y': this.dialogBodyStyleOverflowY,\n        });\n    }\n\n    mapcloseableToConfig(closeable) {\n        return ['esc', 'close', 'mask'].reduce((ret, option) => {\n            const key = option.charAt(0).toUpperCase() + option.substr(1);\n            const value = typeof closeable === 'boolean' ? closeable : closeable.split(',').indexOf(option) > -1;\n\n            if (option === 'esc' || option === 'mask') {\n                ret[`canCloseBy${key}`] = value;\n            } else {\n                ret[`canCloseBy${key}Click`] = value;\n            }\n\n            return ret;\n        }, {});\n    }\n\n    getOverlayRef(ref) {\n        this.overlay = ref;\n    }\n\n    getInner() {\n        return this.overlay.getInstance().getContent();\n    }\n\n    getInnerNode() {\n        return this.overlay.getInstance().getContentNode();\n    }\n\n    renderInner(closeable) {\n        const {\n            prefix,\n            className,\n            title,\n            children,\n            footer,\n            footerAlign,\n            footerActions,\n            onOk,\n            onCancel,\n            okProps,\n            cancelProps,\n            onClose,\n            locale,\n            visible,\n            rtl,\n            height,\n        } = this.props;\n        const others = pickOthers(Object.keys(Dialog.propTypes), this.props);\n\n        return (\n            <Inner\n                prefix={prefix}\n                className={className}\n                title={title}\n                footer={footer}\n                footerAlign={footerAlign}\n                footerActions={footerActions}\n                onOk={visible ? onOk : noop}\n                onCancel={visible ? onCancel : noop}\n                okProps={okProps}\n                cancelProps={cancelProps}\n                locale={locale}\n                closeable={closeable}\n                rtl={rtl}\n                onClose={onClose.bind(this, 'closeClick')}\n                height={height}\n                {...others}\n            >\n                {children}\n            </Inner>\n        );\n    }\n\n    render() {\n        const {\n            prefix,\n            visible,\n            hasMask,\n            animation,\n            autoFocus,\n            closeable,\n            closeMode,\n            onClose,\n            afterClose,\n            shouldUpdatePosition,\n            align,\n            popupContainer,\n            cache,\n            overlayProps,\n            rtl,\n        } = this.props;\n\n        const useCSS = this.useCSSToPosition();\n        const newCloseable =\n            'closeMode' in this.props ? (Array.isArray(closeMode) ? closeMode.join(',') : closeMode) : closeable;\n        const { canCloseByCloseClick, ...closeConfig } = this.mapcloseableToConfig(newCloseable);\n        const newOverlayProps = {\n            disableScroll: true,\n            container: popupContainer,\n            cache,\n            ...overlayProps,\n            prefix,\n            visible,\n            animation,\n            hasMask,\n            autoFocus,\n            afterClose,\n            ...closeConfig,\n            canCloseByOutSideClick: false,\n            align: useCSS ? false : align,\n            onRequestClose: onClose,\n            needAdjust: false,\n            ref: this.getOverlayRef,\n            rtl,\n            maskClass: useCSS ? `${prefix}dialog-container` : '',\n            isChildrenInMask: useCSS && hasMask,\n        };\n        if (!useCSS) {\n            newOverlayProps.beforePosition = this.beforePosition;\n            newOverlayProps.onPosition = this.adjustPosition;\n            newOverlayProps.shouldUpdatePosition = shouldUpdatePosition;\n        }\n\n        const inner = this.renderInner(canCloseByCloseClick);\n\n        // useCSS && hasMask : isFullScreen 并且 有mask的模式下，为了解决 next-overlay-backdrop 覆盖mask，使得点击mask关闭页面的功能不生效的问题，需要开启 Overlay 的 isChildrenInMask 功能，并且把 next-dialog-container 放到 next-overlay-backdrop上\n        // useCSS && !hasMask : isFullScreen 并且 没有mask的情况下，需要关闭 isChildrenInMask 功能，以防止children不渲染\n        // 其他模式下维持 mask 与 children 同级的关系\n        return (\n            <Overlay {...newOverlayProps}>\n                {useCSS && !hasMask ? (\n                    <div className={`${prefix}dialog-container`} dir={rtl ? 'rtl' : undefined}>\n                        {inner}\n                    </div>\n                ) : (\n                    inner\n                )}\n            </Overlay>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/dialog/index.jsx",
        "compressed": "NO",
        "line_numbers": 72,
        "compressed_line_numbers": 72,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport { log } from '../util';\nimport Dialog from './dialog';\nimport Inner from './inner';\nimport { show, alert, confirm, withContext } from './show';\n\nDialog.Inner = Inner;\nDialog.show = config => {\n    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');\n    if (warning !== false) {\n        config = processProps(config, log.deprecated);\n    }\n    return show(config);\n};\nDialog.alert = config => {\n    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');\n    if (warning !== false) {\n        config = processProps(config, log.deprecated);\n    }\n    return alert(config);\n};\nDialog.confirm = config => {\n    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');\n    if (warning !== false) {\n        config = processProps(config, log.deprecated);\n    }\n    return confirm(config);\n};\nDialog.withContext = withContext;\n\n/* istanbul ignore next */\nfunction processProps(props, deprecated) {\n    if ('closable' in props) {\n        deprecated('closable', 'closeable', 'Dialog');\n        const { closable, ...others } = props;\n        props = { closeable: closable, ...others };\n    }\n\n    const overlayPropNames = [\n        'target',\n        'offset',\n        'beforeOpen',\n        'onOpen',\n        'afterOpen',\n        'beforePosition',\n        'onPosition',\n        'cache',\n        'safeNode',\n        'wrapperClassName',\n        'container',\n    ];\n    overlayPropNames.forEach(name => {\n        if (name in props) {\n            deprecated(name, `overlayProps.${name}`, 'Dialog');\n            const { overlayProps, ...others } = props;\n            const newOverlayProps = {\n                [name]: props[name],\n                ...(overlayProps || {}),\n            };\n            delete others[name];\n            props = { overlayProps: newOverlayProps, ...others };\n        }\n    });\n\n    return props;\n}\n\nexport default ConfigProvider.config(Dialog, {\n    transform: (props, deprecated) => {\n        return processProps(props, deprecated);\n    },\n});"
    },
    "3": {
        "bug_file": "src/dialog/inner.jsx",
        "compressed": "NO",
        "line_numbers": 212,
        "compressed_line_numbers": 212,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from '../button';\nimport Icon from '../icon';\nimport zhCN from '../locale/zh-cn';\nimport { func, obj, guid } from '../util';\n\nconst { makeChain } = func;\nconst { pickOthers } = obj;\nconst noop = () => {};\n\nexport default class Inner extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        className: PropTypes.string,\n        title: PropTypes.node,\n        children: PropTypes.node,\n        footer: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n        footerAlign: PropTypes.oneOf(['left', 'center', 'right']),\n        footerActions: PropTypes.array,\n        onOk: PropTypes.func,\n        onCancel: PropTypes.func,\n        okProps: PropTypes.object,\n        cancelProps: PropTypes.object,\n        closeable: PropTypes.bool,\n        onClose: PropTypes.func,\n        locale: PropTypes.object,\n        role: PropTypes.string,\n        rtl: PropTypes.bool,\n        // set value for a fixed height dialog. Passing a value will absolutely position the footer to the bottom.\n        height: PropTypes.string,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        footerAlign: 'right',\n        footerActions: ['ok', 'cancel'],\n        onOk: noop,\n        onCancel: noop,\n        okProps: {},\n        cancelProps: {},\n        closeable: true,\n        onClose: noop,\n        locale: zhCN.Dialog,\n        role: 'dialog',\n    };\n\n    getNode(name, ref) {\n        this[name] = ref;\n    }\n\n    renderHeader() {\n        const { prefix, title } = this.props;\n        if (title) {\n            this.titleId = guid('dialog-title-');\n            return (\n                <div\n                    className={`${prefix}dialog-header`}\n                    id={this.titleId}\n                    ref={this.getNode.bind(this, 'headerNode')}\n                    role=\"heading\"\n                    aria-level=\"1\"\n                >\n                    {title}\n                </div>\n            );\n        }\n        return null;\n    }\n\n    renderBody() {\n        const { prefix, children } = this.props;\n        if (children) {\n            return (\n                <div\n                    className={`${prefix}dialog-body`}\n                    ref={this.getNode.bind(this, 'bodyNode')}\n                >\n                    {children}\n                </div>\n            );\n        }\n        return null;\n    }\n\n    renderFooter() {\n        const {\n            prefix,\n            footer,\n            footerAlign,\n            footerActions,\n            locale,\n            height,\n        } = this.props;\n\n        if (footer === false) {\n            return null;\n        }\n\n        const newClassName = cx({\n            [`${prefix}dialog-footer`]: true,\n            [`${prefix}align-${footerAlign}`]: true,\n            [`${prefix}dialog-footer-fixed-height`]: !!height,\n        });\n        const footerContent =\n            footer === true || !footer\n                ? footerActions.map(action => {\n                      const btnProps = this.props[`${action}Props`];\n                      const newBtnProps = {\n                          ...btnProps,\n                          prefix,\n                          className: cx(\n                              `${prefix}dialog-btn`,\n                              btnProps.className\n                          ),\n                          onClick: makeChain(\n                              this.props[\n                                  `on${action[0].toUpperCase() +\n                                      action.slice(1)}`\n                              ],\n                              btnProps.onClick\n                          ),\n                          children: btnProps.children || locale[action],\n                      };\n                      if (action === 'ok') {\n                          newBtnProps.type = 'primary';\n                      }\n\n                      return <Button key={action} {...newBtnProps} />;\n                  })\n                : footer;\n\n        return (\n            <div\n                className={newClassName}\n                ref={this.getNode.bind(this, 'footerNode')}\n            >\n                {footerContent}\n            </div>\n        );\n    }\n\n    renderCloseLink() {\n        const { prefix, closeable, onClose, locale } = this.props;\n\n        if (closeable) {\n            return (\n                <a\n                    role=\"button\"\n                    aria-label={locale.close}\n                    className={`${prefix}dialog-close`}\n                    onClick={onClose}\n                >\n                    <Icon\n                        className={`${prefix}dialog-close-icon`}\n                        type=\"close\"\n                    />\n                </a>\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const {\n            prefix,\n            className,\n            closeable,\n            title,\n            role,\n            rtl,\n            height,\n        } = this.props;\n        const others = pickOthers(Object.keys(Inner.propTypes), this.props);\n        const newClassName = cx({\n            [`${prefix}dialog`]: true,\n            [`${prefix}closeable`]: closeable,\n            [className]: !!className,\n        });\n\n        const header = this.renderHeader();\n        const body = this.renderBody();\n        const footer = this.renderFooter();\n        const closeLink = this.renderCloseLink();\n\n        const ariaProps = {\n            role,\n            'aria-modal': 'true',\n        };\n        if (title) {\n            ariaProps['aria-labelledby'] = this.titleId;\n        }\n\n        others.style = Object.assign({}, others.style, { height });\n\n        return (\n            <div\n                {...ariaProps}\n                className={newClassName}\n                {...others}\n                dir={rtl ? 'rtl' : undefined}\n            >\n                {header}\n                {body}\n                {footer}\n                {closeLink}\n            </div>\n        );\n    }\n}"
    },
    "4": {
        "bug_file": "src/dialog/main.scss",
        "compressed": "NO",
        "line_numbers": 133,
        "compressed_line_numbers": 133,
        "compressed_bug_file_content": "@import \"../core/index-noreset.scss\";\n@import \"scss/variable\";\n@import \"./rtl.scss\";\n\n#{$dialog-prefix} {\n    @include box-sizing;\n    position: fixed;\n    z-index: 1001;\n    background: $dialog-bg;\n    border: $dialog-border-width $dialog-border-style $dialog-border-color;\n    border-radius: $dialog-corner;\n    box-shadow: $dialog-shadow;\n    text-align: left;\n    overflow: hidden;\n    max-width: 90%;\n\n    &-header {\n        padding: $dialog-title-padding-top $dialog-title-padding-left-right $dialog-title-padding-bottom $dialog-title-padding-left-right;\n        border-bottom: $dialog-title-border-width $line-solid $dialog-title-border-color;\n        font-size: $dialog-title-font-size;\n        font-weight: $dialog-title-font-weight;\n        background: $dialog-title-bg-color;\n        color: $dialog-title-color;\n    }\n\n    &-body {\n        padding: $dialog-content-padding-top $dialog-content-padding-left-right $dialog-content-padding-bottom $dialog-content-padding-left-right;\n        font-size: $dialog-content-font-size;\n        color: $dialog-content-color;\n    }\n\n    /* 让用户自己设置 */\n    /* &.#{$css-prefix}closeable &-header, */\n    /* &.#{$css-prefix}closeable &-body, { */\n    /*     padding-right: $dialog-part-padding-right-closeable; */\n    /* } */\n\n    &-footer {\n        padding: $dialog-footer-padding-top $dialog-footer-padding-left-right $dialog-footer-padding-bottom $dialog-footer-padding-left-right;\n        border-top: $dialog-footer-border-width $line-solid $dialog-footer-border-color;\n        background: $dialog-footer-bg-color;\n\n        &.#{$css-prefix}align-left {\n            text-align: left;\n        }\n\n        &.#{$css-prefix}align-center {\n            text-align: center;\n        }\n\n        &.#{$css-prefix}align-right {\n            text-align: right;\n        }\n    }\n\n    &-footer-fixed-height {\n        position: absolute;\n        width: 100%;\n        bottom: 0;\n    }\n\n    &-btn + &-btn {\n        margin-left: $dialog-footer-button-spacing;\n    }\n\n    &-close {\n        position: absolute;\n        top: $dialog-close-top;\n        right: $dialog-close-right;\n        width: $dialog-close-width;\n        height: $dialog-close-width;\n        color: $dialog-close-color;\n        cursor: pointer;\n\n        &:link,\n        &:visited {\n            height: $dialog-close-width;\n            color: $dialog-close-color;\n        }\n\n        &:hover {\n            background: $dialog-close-bg-hovered;\n            color: $dialog-close-color-hovered;\n        }\n\n        & &-icon.#{$css-prefix}icon {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            @include icon-square-size(\n                $size: $dialog-close-size,\n                $marginTop: calc(0px - #{$dialog-close-size} / 2),\n                $marginLeft: calc(0px - #{$dialog-close-size} / 2)\n            );\n        }\n    }\n\n    &-container {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        z-index: 1001;\n        padding: $s-10;\n        overflow: auto;\n        text-align: center;\n        box-sizing: border-box;\n\n        &:before {\n            display: inline-block;\n            vertical-align: middle;\n            width: 0;\n            height: 100%;\n            content: '';\n        }\n\n        #{$dialog-prefix} {\n            display: inline-block;\n            position: relative;\n            vertical-align: middle;\n        }\n    }\n\n    &-quick #{$dialog-prefix}-body {\n        padding: $dialog-message-content-padding-top $dialog-message-content-padding-left-right $dialog-message-content-padding-bottom $dialog-message-content-padding-left-right;\n    }\n\n    & &-message.#{$css-prefix}message {\n        min-width: calc(#{$s-25} * 3);\n        padding: 0;\n    }\n}"
    }
}