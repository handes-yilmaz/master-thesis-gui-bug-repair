{
    "src/search/Search.jsx": [
        "import React, { isValidElement } from 'react';",
        "import PropTypes from 'prop-types';",
        "import classNames from 'classnames';",
        "import { polyfill } from 'react-lifecycles-compat';",
        "",
        "import Input from '../input';",
        "import Select from '../select';",
        "import Button from '../button';",
        "import Icon from '../icon';",
        "import { obj, func, KEYCODE } from '../util';",
        "import zhCN from '../locale/zh-cn';",
        "",
        "const Group = Input.Group;",
        "const AutoComplete = Select.AutoComplete;",
        "",
        "/**",
        " * Search",
        " * @description 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api",
        " */",
        "class Search extends React.Component {",
        "    static propTypes = {",
        "        /**",
        "         * 样式前缀",
        "         */",
        "        prefix: PropTypes.string,",
        "        /**",
        "         * 形状",
        "         */",
        "        shape: PropTypes.oneOf(['normal', 'simple']),",
        "        /**",
        "         * 类型 shape=normal: primary/secondary; shape=simple: normal/dark;",
        "         */",
        "        type: PropTypes.oneOf(['primary', 'secondary', 'normal', 'dark']),",
        "        /**",
        "         * 大小",
        "         * @enumdesc '大', '小'",
        "         */",
        "        size: PropTypes.oneOf(['large', 'medium']),",
        "        /**",
        "         * 搜索框默认值",
        "         */",
        "        defaultValue: PropTypes.string,",
        "        /**",
        "         * 搜索框数值",
        "         */",
        "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
        "        /**",
        "         * 输入关键字时的回掉",
        "         * @param {Object} value 输入值",
        "         */",
        "        onChange: PropTypes.func,",
        "        /**",
        "         * 点击搜索按钮触发的回调",
        "         * @param {String} value 输入值",
        "         * @param {String} filterValue 选项值",
        "         */",
        "        onSearch: PropTypes.func,",
        "        /**",
        "         * 选择器默认值",
        "         */",
        "        defaultFilterValue: PropTypes.string,",
        "        /**",
        "         * 选择器",
        "         */",
        "        filter: PropTypes.array,",
        "        /**",
        "         * 选择器值",
        "         */",
        "        filterValue: PropTypes.string,",
        "        /**",
        "         * 选择器发生变化时回调",
        "         * @param {Object} filter value",
        "         */",
        "        onFilterChange: PropTypes.func,",
        "        /**",
        "         * 搜索框下拉联想列表",
        "         */",
        "        dataSource: PropTypes.array,",
        "        /**",
        "         * 默认提示",
        "         */",
        "        placeholder: PropTypes.string,",
        "        /**",
        "         * button 的内容",
        "         */",
        "        searchText: PropTypes.node,",
        "        /**",
        "         * 自定义样式",
        "         */",
        "        style: PropTypes.object,",
        "        /**",
        "         * 样式名称",
        "         */",
        "        className: PropTypes.string,",
        "        /**",
        "         * 选择器的props",
        "         */",
        "        filterProps: PropTypes.object,",
        "        /**",
        "         * 按钮的额外属性",
        "         */",
        "        buttonProps: PropTypes.object,",
        "        /**",
        "         * 自定义渲染的的下拉框",
        "         */",
        "        popupContent: PropTypes.node,",
        "        /**",
        "         * 是否跟随滚动",
        "         */",
        "        followTrigger: PropTypes.bool,",
        "        /**",
        "         * 自定义渲染的的下拉框",
        "         */",
        "        visible: PropTypes.bool,",
        "        /**",
        "         * 是否显示清除按钮",
        "         */",
        "        hasClear: PropTypes.bool,",
        "        /**",
        "         * 是否显示搜索按钮",
        "         */",
        "        hasIcon: PropTypes.bool,",
        "        /**",
        "         * 是否禁用",
        "         */",
        "        disabled: PropTypes.bool,",
        "        locale: PropTypes.object,",
        "        rtl: PropTypes.bool,",
        "        /**",
        "         * 可配置的icons，包括 search 等",
        "         */",
        "        icons: PropTypes.object,",
        "    };",
        "",
        "    static defaultProps = {",
        "        prefix: 'next-',",
        "        shape: 'normal',",
        "        type: 'normal',",
        "        size: 'medium',",
        "        hasIcon: true,",
        "        filter: [],",
        "        locale: zhCN.Search,",
        "        buttonProps: {},",
        "        onChange: func.noop,",
        "        onSearch: func.noop,",
        "        onFilterChange: func.noop,",
        "        hasClear: false,",
        "        disabled: false,",
        "        icons: {},",
        "    };",
        "",
        "    constructor(props) {",
        "        super(props);",
        "",
        "        const value = 'value' in props ? props.value : props.defaultValue;",
        "        const filterValue =",
        "            'filterValue' in props",
        "                ? props.filterValue",
        "                : props.defaultFilterValue;",
        "",
        "        this.state = {",
        "            value: typeof value === 'undefined' ? '' : value,",
        "            filterValue,",
        "        };",
        "    }",
        "",
        "    static getDerivedStateFromProps(nextProps, prevState) {",
        "        const nextState = {};",
        "        if ('value' in nextProps && nextProps.value !== prevState.value) {",
        "            const value = nextProps.value;",
        "            nextState.value =",
        "                value === undefined || value === null ? '' : nextProps.value;",
        "        }",
        "",
        "        if (",
        "            'filterValue' in nextProps &&",
        "            nextProps.filterValue !== prevState.filterValue",
        "        ) {",
        "            const filterValue = nextProps.filterValue;",
        "            nextState.filterValue =",
        "                filterValue === undefined ? '' : filterValue;",
        "        }",
        "",
        "        if (Object.keys(nextState).length > 0) {",
        "            return nextState;",
        "        }",
        "",
        "        return null;",
        "    }",
        "",
        "    onChange = (value, ...argv) => {",
        "        if (!('value' in this.props)) {",
        "            this.setState({ value });",
        "        }",
        "",
        "        this.props.onChange(value, ...argv);",
        "    };",
        "",
        "    onSearch = () => {",
        "        if (this.props.disabled) {",
        "            return;",
        "        }",
        "        this.props.onSearch(this.state.value, this.state.filterValue);",
        "    };",
        "",
        "    onFilterChange = filterValue => {",
        "        if (!('filterValue' in this.props)) {",
        "            this.setState({ filterValue });",
        "        }",
        "",
        "        this.props.onFilterChange(filterValue);",
        "    };",
        "",
        "    onKeyDown = e => {",
        "        if (this.props.disabled) {",
        "            return;",
        "        }",
        "        if (e.keyCode !== KEYCODE.ENTER) {",
        "            return;",
        "        }",
        "        this.onSearch();",
        "    };",
        "    render() {",
        "        const {",
        "            shape,",
        "            filter,",
        "            hasIcon,",
        "            disabled,",
        "            placeholder,",
        "            type,",
        "            className,",
        "            style,",
        "            size,",
        "            prefix,",
        "            searchText,",
        "            dataSource,",
        "            filterProps,",
        "            buttonProps,",
        "            popupContent,",
        "            followTrigger,",
        "            hasClear,",
        "            visible,",
        "            locale,",
        "            rtl,",
        "            icons,",
        "            ...others",
        "        } = this.props;",
        "",
        "        const cls = classNames({",
        "            [`${prefix}search`]: true,",
        "            [`${prefix}search-${shape}`]: true,",
        "            [`${prefix}${type}`]: type,",
        "            [`${prefix}${size}`]: size,",
        "            [className]: !!className,",
        "        });",
        "",
        "        let searchIcon = null,",
        "            filterSelect = null,",
        "            searchBtn = null,",
        "            iconsSearch = icons.search;",
        "",
        "        if (!isValidElement(icons.search) && icons.search) {",
        "            iconsSearch = <span>{icons.search}</span>;",
        "        }",
        "",
        "        if (shape === 'simple') {",
        "            const cls = classNames({",
        "                [`${prefix}search-icon`]: true,",
        "                [buttonProps.className]: !!buttonProps.className,",
        "                [`${prefix}search-symbol-icon`]: !iconsSearch,",
        "            });",
        "            hasIcon &&",
        "                (searchIcon = React.cloneElement(",
        "                    iconsSearch || <Icon type=\"search\" />,",
        "                    {",
        "                        role: 'button',",
        "                        'aria-disabled': disabled,",
        "                        'aria-label': locale.buttonText,",
        "                        ...buttonProps,",
        "                        className: cls,",
        "                        onClick: this.onSearch,",
        "                        onKeyDown: this.onKeyDown,",
        "                    }",
        "                ));",
        "        } else {",
        "            const cls = classNames({",
        "                [`${prefix}search-btn`]: true,",
        "                [buttonProps.className]: !!buttonProps.className,",
        "            });",
        "            searchBtn = (",
        "                <Button",
        "                    tabIndex=\"0\"",
        "                    aria-disabled={disabled}",
        "                    aria-label={locale.buttonText}",
        "                    className={cls}",
        "                    disabled={disabled}",
        "                    {...buttonProps}",
        "                    onClick={this.onSearch}",
        "                    onKeyDown={this.onKeyDown}",
        "                >",
        "                    {hasIcon",
        "                        ? iconsSearch || (",
        "                              <Icon",
        "                                  type=\"search\"",
        "                                  className={`${prefix}search-symbol-icon`}",
        "                              />",
        "                          )",
        "                        : null}",
        "                    {searchText ? (",
        "                        <span className={`${prefix}search-btn-text`}>",
        "                            {searchText}",
        "                        </span>",
        "                    ) : null}",
        "                </Button>",
        "            );",
        "        }",
        "",
        "        if (filter.length > 0) {",
        "            filterSelect = (",
        "                <Select",
        "                    {...filterProps}",
        "                    followTrigger={followTrigger}",
        "                    hasBorder={false}",
        "                    dataSource={filter}",
        "                    size={size}",
        "                    disabled={disabled}",
        "                    value={this.state.filterValue}",
        "                    onChange={this.onFilterChange}",
        "                />",
        "            );",
        "        }",
        "",
        "        const othersAttributes = obj.pickOthers(Search.propTypes, others);",
        "        if (visible !== undefined) {",
        "            // 受控属性 visible 不能直接写在组件上",
        "            othersAttributes.visible = Boolean(visible);",
        "        }",
        "        const dataAttr = obj.pickAttrsWith(others, 'data-');",
        "",
        "        const left = (",
        "            <Group",
        "                addonBefore={filterSelect}",
        "                className={`${prefix}search-left`}",
        "                addonBeforeClassName={`${prefix}search-left-addon`}",
        "            >",
        "                <AutoComplete",
        "                    aria-label={locale.buttonText}",
        "                    {...othersAttributes}",
        "                    followTrigger={followTrigger}",
        "                    role=\"searchbox\"",
        "                    hasClear={hasClear}",
        "                    className={`${prefix}search-input`}",
        "                    size={size}",
        "                    placeholder={placeholder}",
        "                    dataSource={dataSource}",
        "                    innerAfter={searchIcon}",
        "                    onPressEnter={this.onSearch}",
        "                    value={this.state.value}",
        "                    onChange={this.onChange}",
        "                    popupContent={popupContent}",
        "                    disabled={disabled}",
        "                />",
        "            </Group>",
        "        );",
        "",
        "        return (",
        "            <span",
        "                className={cls}",
        "                style={style}",
        "                {...dataAttr}",
        "                dir={rtl ? 'rtl' : undefined}",
        "            >",
        "                {searchBtn ? (",
        "                    <Group addonAfter={searchBtn}>{left}</Group>",
        "                ) : (",
        "                    left",
        "                )}",
        "            </span>",
        "        );",
        "    }",
        "}",
        "",
        "export default polyfill(Search);"
    ],
    "src/select/auto-complete.jsx": [
        "import React from 'react';",
        "import ReactDOM from 'react-dom';",
        "import PropTypes from 'prop-types';",
        "import classNames from 'classnames';",
        "import { polyfill } from 'react-lifecycles-compat';",
        "",
        "import { func, obj, KEYCODE } from '../util';",
        "import Input from '../input';",
        "import Base from './base';",
        "",
        "const { bindCtx, noop } = func;",
        "",
        "/**",
        " * Select.AutoComplete",
        " */",
        "class AutoComplete extends Base {",
        "    static propTypes = {",
        "        ...Base.propTypes,",
        "        /**",
        "         * 当前值，用于受控模式",
        "         */",
        "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
        "        /**",
        "         * 初始化的默认值",
        "         */",
        "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
        "        /**",
        "         * Select发生改变时触发的回调",
        "         * @param {*} value 选中的值",
        "         * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'change'",
        "         * @param {*} item 选中的值的对象数据",
        "         */",
        "        onChange: PropTypes.func,",
        "        /**",
        "         * 传入的数据源，可以动态渲染子项",
        "         */",
        "        dataSource: PropTypes.arrayOf(",
        "            PropTypes.oneOfType([",
        "                PropTypes.shape({",
        "                    value: PropTypes.string,",
        "                    label: PropTypes.any,",
        "                    disabled: PropTypes.bool,",
        "                    children: PropTypes.array,",
        "                }),",
        "                PropTypes.string,",
        "            ])",
        "        ),",
        "        /**",
        "         * 填充到选择框里的值的 key\b\b，默认是 value",
        "         */",
        "        fillProps: PropTypes.string,",
        "        /**",
        "         * 渲染 MenuItem 内容的方法",
        "         * @param {Object} item 渲染节点的 item",
        "         * @return {ReactNode} item node",
        "         */",
        "        itemRender: PropTypes.func,",
        "        // input keydown",
        "        onKeyDown: PropTypes.func,",
        "        // 是否将当前高亮的选项作为 placeholder",
        "        highlightHolder: PropTypes.bool,",
        "        style: PropTypes.object,",
        "    };",
        "",
        "    static defaultProps = {",
        "        ...Base.defaultProps,",
        "        onKeyDown: noop,",
        "        fillProps: 'value',",
        "    };",
        "",
        "    constructor(props) {",
        "        super(props);",
        "",
        "        this.isAutoComplete = true;",
        "        this.isInputing = false;",
        "",
        "        this.dataStore.setOptions({ key: this.state.value });",
        "        Object.assign(this.state, {",
        "            dataSource: this.setDataSource(props),",
        "        });",
        "",
        "        bindCtx(this, [",
        "            'handleTriggerKeyDown',",
        "            'handleMenuSelect',",
        "            'handleItemClick',",
        "        ]);",
        "    }",
        "",
        "    static getDerivedStateFromProps(nextProps, prevState) {",
        "        const state = {};",
        "",
        "        if ('value' in nextProps && nextProps.value !== prevState.value) {",
        "            Object.assign(state, {",
        "                value: nextProps.value,",
        "            });",
        "        }",
        "",
        "        if ('visible' in nextProps && nextProps.visible !== prevState.visible) {",
        "            Object.assign(state, {",
        "                visible: nextProps.visible,",
        "            });",
        "        }",
        "",
        "        if (Object.keys(state).length) {",
        "            return state;",
        "        }",
        "",
        "        return null;",
        "    }",
        "",
        "    componentDidUpdate(prevProps, prevState) {",
        "        const props = this.props;",
        "",
        "        if ('value' in props) {",
        "            this.dataStore.setOptions({ key: props.value });",
        "        }",
        "",
        "        if (props.filter !== prevProps.filter) {",
        "            this.dataStore.setOptions({",
        "                filter: props.filter,",
        "            });",
        "        }",
        "        if (props.filterLocal !== prevProps.filterLocal) {",
        "            this.dataStore.setOptions({",
        "                filterLocal: props.filterLocal,",
        "            });",
        "        }",
        "",
        "        if (",
        "            prevProps.children !== props.children ||",
        "            prevProps.dataSource !== props.dataSource",
        "        ) {",
        "            /* eslint-disable react/no-did-update-set-state */",
        "            this.setState({",
        "                dataSource: this.setDataSource(props),",
        "            });",
        "",
        "            // remote dataSource and focused",
        "            // 因为autoComplete没有下拉数据不展示，搜索并且有数据了需要自动展示下拉",
        "            if (!props.filterLocal && this.isInputing) {",
        "                this.shouldControlPopup(props, 'update');",
        "            }",
        "            if (!props.filterLocal && !props.popupContent) {",
        "                this.setFirstHightLightKeyForMenu();",
        "            }",
        "        }",
        "    }",
        "",
        "    shouldControlPopup(props = this.props, type) {",
        "        const hasPopup =",
        "            props.popupContent || this.dataStore.getMenuDS().length;",
        "        if (hasPopup) {",
        "            this.setVisible(true, type);",
        "        } else {",
        "            this.setVisible(false, type);",
        "        }",
        "    }",
        "",
        "    handleMenuSelect(keys) {",
        "        const key = keys[0];",
        "",
        "        const mapDS = this.dataStore.getMapDS();",
        "",
        "        if (key in mapDS) {",
        "            const item = mapDS[key];",
        "            this.handleSelectEvent(key, item, 'itemClick');",
        "        }",
        "    }",
        "",
        "    handleItemClick() {",
        "        this.setVisible(false, 'itemClick');",
        "    }",
        "",
        "    handleSelectEvent(key, item, triggerType) {",
        "        const value = (item && item[this.props.fillProps]) || key;",
        "",
        "        if (triggerType === 'itemClick' || triggerType === 'enter') {",
        "            // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理",
        "            this.setVisible(false, triggerType);",
        "        }",
        "",
        "        this.handleChange(value, triggerType, item);",
        "    }",
        "",
        "    handleChange = (value, proxy, item) => {",
        "        const { disabled, readOnly, filterLocal } = this.props;",
        "",
        "        if (disabled || readOnly) {",
        "            return false;",
        "        }",
        "",
        "        const actionType = typeof proxy === 'string' ? proxy : 'change';",
        "",
        "        this.isInputing = actionType === 'change';",
        "",
        "        if (filterLocal) {",
        "            this.setState({",
        "                dataSource: this.dataStore.updateByKey(value),",
        "            });",
        "",
        "            this.shouldControlPopup(this.props, actionType);",
        "            this.setFirstHightLightKeyForMenu();",
        "        }",
        "",
        "        // 非受控模式清空内部数据",
        "        if (!('value' in this.props)) {",
        "            this.setState({",
        "                value: value,",
        "            });",
        "        }",
        "",
        "        this.props.onChange(value, actionType, item);",
        "",
        "        if (actionType === 'itemClick' || actionType === 'enter') {",
        "            // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理",
        "            this.setVisible(false, actionType);",
        "        }",
        "    };",
        "",
        "    handleVisibleChange(visible, type) {",
        "        if (",
        "            !('visible' in this.props) &&",
        "            visible &&",
        "            !this.props.popupContent &&",
        "            !this.dataStore.getMenuDS().length",
        "        ) {",
        "            return;",
        "        }",
        "",
        "        this.setVisible(visible, type);",
        "    }",
        "",
        "    beforeClose() {",
        "        this.isInputing = false;",
        "    }",
        "",
        "    /**",
        "     * Handle trigger keydown event",
        "     * @param {Event} e",
        "     */",
        "    handleTriggerKeyDown(e) {",
        "        const { popupContent, onToggleHighlightItem, onKeyDown } = this.props;",
        "        if (popupContent) {",
        "            e.stopPropagation(); //stopPropagation can make use onChange triggerd while typing space('') in Input",
        "            return onKeyDown(e);",
        "        }",
        "",
        "        switch (e.keyCode) {",
        "            case KEYCODE.UP:",
        "                e.preventDefault();",
        "                onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');",
        "                break;",
        "            case KEYCODE.DOWN:",
        "                e.preventDefault();",
        "                onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');",
        "                break;",
        "            case KEYCODE.ENTER:",
        "                e.preventDefault();",
        "                this.chooseHighlightItem(e);",
        "                break;",
        "            case KEYCODE.SPACE:",
        "                // stopPropagation can make use onChange triggerd while typing space('') in Input",
        "                e.stopPropagation();",
        "                break;",
        "            case KEYCODE.ESC:",
        "                e.preventDefault();",
        "                this.state.visible && this.setVisible(false, 'esc');",
        "                break;",
        "            default:",
        "                break;",
        "        }",
        "",
        "        onKeyDown(e);",
        "    }",
        "",
        "    // 回车 选择高亮的 item",
        "    chooseHighlightItem() {",
        "        if (!this.state.visible) {",
        "            return false;",
        "        }",
        "",
        "        const { highlightKey } = this.state;",
        "        const highlightItem = this.dataStore.getEnableDS().find(item => {",
        "            return highlightKey === `${item.value}`;",
        "        });",
        "",
        "        if (highlightItem) {",
        "            this.handleSelectEvent(highlightKey, highlightItem, 'enter');",
        "        }",
        "    }",
        "",
        "    hasClear() {",
        "        const { hasClear, readOnly, disabled } = this.props;",
        "        const { value } = this.state;",
        "",
        "        return value && hasClear && !readOnly && !disabled;",
        "    }",
        "",
        "    /**",
        "     * 选择器",
        "     * @override",
        "     * @param {object} props",
        "     */",
        "    renderSelect(props = this.props) {",
        "        const {",
        "            placeholder,",
        "            size,",
        "            prefix,",
        "            className,",
        "            style,",
        "            label,",
        "            readOnly,",
        "            disabled,",
        "            highlightHolder,",
        "            locale,",
        "            hasClear,",
        "            state,",
        "            rtl,",
        "        } = props;",
        "        const others = obj.pickOthers(AutoComplete.propTypes, props);",
        "        const othersData = obj.pickAttrsWith(others, 'data-');",
        "",
        "        const value = this.state.value;",
        "        const visible = this.state.visible;",
        "",
        "        // // 下拉箭头",
        "        // const arrowNode = this.renderArrowNode(props, () => {",
        "        //     this.focusInput();",
        "        //     this.setVisible(!this.state.visible);",
        "        // });",
        "",
        "        // trigger className",
        "        const triggerClazz = classNames(",
        "            [",
        "                `${prefix}select`,",
        "                `${prefix}select-auto-complete`,",
        "                `${prefix}size-${size}`,",
        "                className,",
        "            ],",
        "            {",
        "                [`${prefix}active`]: visible,",
        "                [`${prefix}disabled`]: disabled,",
        "            }",
        "        );",
        "",
        "        // highlightKey into placeholder",
        "        // compatible with selectPlaceHolder. TODO: removed in 2.0 version",
        "        let _placeholder =",
        "            placeholder ||",
        "            locale.autoCompletePlaceholder ||",
        "            locale.autoCompletePlaceHolder;",
        "        if (highlightHolder && visible) {",
        "            _placeholder = this.state.highlightKey || _placeholder;",
        "        }",
        "",
        "        // Input props",
        "        const _inputProps = {",
        "            ...obj.pickOthers(othersData, others),",
        "            state: state,",
        "            ref: this.saveInputRef,",
        "            hasClear: hasClear,",
        "            value,",
        "            size,",
        "            disabled,",
        "            readOnly,",
        "            placeholder: _placeholder,",
        "            label,",
        "            // extra: arrowNode,",
        "            onChange: this.handleChange,",
        "            onKeyDown: this.handleTriggerKeyDown,",
        "        };",
        "",
        "        return (",
        "            <span",
        "                {...othersData}",
        "                className={triggerClazz}",
        "                style={style}",
        "                dir={rtl ? 'rtl' : undefined}",
        "                ref={this.saveSelectRef}",
        "                onClick={this.focusInput}",
        "            >",
        "                <Input",
        "                    role=\"combobox\"",
        "                    aria-autocomplete=\"list\"",
        "                    aria-disabled={disabled}",
        "                    aria-expanded={this.state.visible}",
        "                    {..._inputProps}",
        "                />",
        "                <span className={`${prefix}sr-only`} aria-live=\"polite\">",
        "                    {this.state.srReader}",
        "                </span>",
        "            </span>",
        "        );",
        "    }",
        "",
        "    render() {",
        "        if (this.hasClear()) {",
        "            // clear 按钮点击后，会在 dom 结构中被删除掉，需要将其额外设置为安全节点，防止触发弹层的显示或隐藏",
        "            const safeNode = this.props.popupProps.safeNode || [];",
        "            const safeNodes = Array.isArray(safeNode) ? safeNode : [safeNode];",
        "            safeNodes.push(() => this.clearNode);",
        "            this.props.popupProps.safeNode = safeNodes;",
        "        }",
        "",
        "        return super.render(",
        "            Object.assign({}, this.props, { canCloseByTrigger: false })",
        "        );",
        "    }",
        "}",
        "",
        "export default polyfill(AutoComplete);"
    ]
}