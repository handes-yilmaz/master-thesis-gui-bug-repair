{
    "1": {
        "bug_file": "src/cascader/cascader.jsx",
        "compressed": "YES",
        "line_numbers": 889,
        "compressed_line_numbers": 123,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Menu from '../menu';\nimport { func, obj, dom } from '../util';\nimport CascaderMenu from './menu';\nimport CascaderMenuItem from './item';\nimport {\n\n\n/**\n * Cascader\n */\nexport default class Cascader extends Component {\n\n\n        /**\n         * 数据源，结构可参考下方说明\n         */\n\n        /**\n         * （非受控）默认值\n         */\n\n\n        /**\n         * （受控）当前值\n         */\n\n\n        /**\n         * 选中值改变时触发的回调函数\n         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n         * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.selectedPath 单选时选中的数据的路径\n         * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n         * @param {Object} extra.currentData 多选时当前操作的数据\n         * @param {Array} extra.checkedData 多选时所有被选中的数据\n         * @param {Array} extra.indeterminateData 多选时半选的数据\n         */\n\n\n        /**\n         * （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置\n         */\n\n        /**\n         * （受控）当前展开值\n         */\n\n        /**\n         * 展开触发的方式\n         */\n\n        /**\n         * 展开时触发的回调函数\n         * @param {Array} expandedValue 各列展开值的数组\n         */\n\n        /**\n         * 是否开启虚拟滚动\n         */\n\n        /**\n         * 是否多选\n         */\n\n        /**\n         * 单选时是否只能选中叶子节点\n         */\n\n        /**\n         * 多选时是否只能选中叶子节点\n         */\n\n        /**\n         * 父子节点是否选中不关联\n         */\n\n        /**\n         * 每列列表样式对象\n         */\n\n        /**\n         * 每列列表类名\n         */\n\n        /**\n         * 每列列表项渲染函数\n         * @param {Object} data 数据\n         * @return {ReactNode} 列表项内容\n         */\n\n        /**\n         * 异步加载数据函数\n         * @param {Object} data 当前点击异步加载的数据\n         * @param {Object} source 当前点击数据，source是原始对象\n         */\n\n\n        // TODO loadData\n\n\n    /*eslint-disable max-statements*/\n\n\n    /*eslint-enable*/\n\n\n    /*eslint-disable max-statements*/\n\n\n                        // eslint-disable-next-line max-depth\n\n                            // eslint-disable-next-line max-depth\n\n\n                            // eslint-disable-next-line max-depth\n\n                                // eslint-disable-next-line max-depth\n\n\n"
    },
    "2": {
        "bug_file": "src/cascader/index.jsx",
        "compressed": "NO",
        "line_numbers": 26,
        "compressed_line_numbers": 26,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Cascader from './cascader';\n\nexport default ConfigProvider.config(Cascader, {\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('expandTrigger' in props) {\n            deprecated('expandTrigger', 'expandTriggerType', 'Cascader');\n            const { expandTrigger, ...others } = props;\n            props = { expandTriggerType: expandTrigger, ...others };\n        }\n\n        if ('showItemCount' in props) {\n            deprecated(\n                'showItemCount',\n                'listStyle | listClassName',\n                'Cascader'\n            );\n        }\n        if ('labelWidth' in props) {\n            deprecated('labelWidth', 'listStyle | listClassName', 'Cascader');\n        }\n\n        return props;\n    },\n    exportNames: ['setFocusValue'],\n});"
    },
    "3": {
        "bug_file": "src/cascader/utils.js",
        "compressed": "NO",
        "line_numbers": 215,
        "compressed_line_numbers": 215,
        "compressed_bug_file_content": "/* eslint-disable valid-jsdoc */\nexport function normalizeToArray(values) {\n    if (values !== undefined && values !== null) {\n        if (Array.isArray(values)) {\n            return [...values];\n        }\n\n        return [values];\n    }\n\n    return [];\n}\n\n/**\n * 判断子节点是否是选中状态，如果 checkable={false} 则向下递归，\n * @param {Node} child\n * @param {Array} checkedValues\n */\nexport function isNodeChecked(node, checkedValues) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(c => isNodeChecked(c, checkedValues))\n        );\n    }\n    return checkedValues.indexOf(node.value) > -1;\n}\n\n/**\n * 遍历所有可用的子节点\n * @param {Node}\n * @param {Function} callback\n */\nexport function forEachEnableNode(node, callback = () => {}) {\n    if (node.disabled || node.checkboxDisabled) return;\n    // eslint-disable-next-line callback-return\n    callback(node);\n    if (node.children && node.children.length > 0) {\n        node.children.forEach(child => forEachEnableNode(child, callback));\n    }\n}\n/**\n * 判断节点是否禁用checked\n * @param {Node} node\n * @returns {Boolean}\n */\nexport function isNodeDisabledChecked(node) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        );\n    }\n\n    return false;\n}\n\n/**\n * 递归获取一个 checkable = {true} 的父节点，当 checkable={false} 时继续往上查找\n * @param {Node} node\n * @param {Map} _p2n\n * @return {Node}\n */\nexport function getCheckableParentNode(node, _p2n) {\n    let parentPos = node.pos.split(['-']);\n    if (parentPos.length === 2) return node;\n    parentPos.splice(parentPos.length - 1, 1);\n    parentPos = parentPos.join('-');\n    const parentNode = _p2n[parentPos];\n    if (parentNode.disabled || parentNode.checkboxDisabled) return false;\n    /* istanbul ignore next */\n    if (parentNode.checkable === false) {\n        return getCheckableParentNode(parentNode, _p2n);\n    }\n\n    return parentNode;\n}\n/**\n * 过滤子节点\n * @param {Array} values\n * @param {Object} _v2n\n */\nexport function filterChildValue(values, _v2n, _p2n) {\n    const newValues = [];\n    values.forEach(value => {\n        const node = getCheckableParentNode(_v2n[value], _p2n);\n        if (\n            !node ||\n            node.checkable === false ||\n            node === _v2n[value] ||\n            values.indexOf(node.value) === -1\n        ) {\n            newValues.push(value);\n        }\n    });\n    return newValues;\n}\n\nexport function filterParentValue(values, _v2n) {\n    const newValues = [];\n\n    for (let i = 0; i < values.length; i++) {\n        const node = _v2n[values[i]];\n        if (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        ) {\n            newValues.push(values[i]);\n        }\n    }\n\n    return newValues;\n}\n\nexport function isDescendantOrSelf(currentPos, targetPos) {\n    if (!currentPos || !targetPos) {\n        return false;\n    }\n\n    const currentNums = currentPos.split('-');\n    const targetNums = targetPos.split('-');\n\n    return (\n        currentNums.length <= targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\nexport function isSiblingOrSelf(currentPos, targetPos) {\n    const currentNums = currentPos.split('-').slice(0, -1);\n    const targetNums = targetPos.split('-').slice(0, -1);\n\n    return (\n        currentNums.length === targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\n// eslint-disable-next-line max-statements\nexport function getAllCheckedValues(checkedValues, _v2n, _p2n) {\n    checkedValues = normalizeToArray(checkedValues);\n    const filteredValues = checkedValues.filter(value => !!_v2n[value]);\n    const flatValues = [\n        ...filterChildValue(filteredValues, _v2n, _p2n),\n        ...filteredValues.filter(\n            value => _v2n[value].disabled || _v2n[value].checkboxDisabled\n        ),\n    ];\n    const removeValue = child => {\n        if (child.disabled || child.checkboxDisabled) return;\n        if (\n            child.checkable === false &&\n            child.children &&\n            child.children.length > 0\n        ) {\n            return child.children.forEach(removeValue);\n        }\n        flatValues.splice(flatValues.indexOf(child.value), 1);\n    };\n\n    const addParentValue = (i, parent) => flatValues.splice(i, 0, parent.value);\n\n    const values = [...flatValues];\n    for (let i = 0; i < values.length; i++) {\n        const pos = _v2n[values[i]].pos;\n        const nums = pos.split('-');\n        if (nums.length === 2) {\n            break;\n        }\n        for (let j = nums.length - 2; j > 0; j--) {\n            const parentPos = nums.slice(0, j + 1).join('-');\n            const parent = _p2n[parentPos];\n            if (\n                parent.checkable === false ||\n                parent.disabled ||\n                parent.checkboxDisabled\n            )\n                continue;\n            const parentChecked = parent.children.every(child =>\n                isNodeChecked(child, flatValues)\n            );\n            if (parentChecked) {\n                parent.children.forEach(removeValue);\n                addParentValue(i, parent);\n            } else {\n                break;\n            }\n        }\n    }\n\n    const newValues = [];\n    flatValues.forEach(value => {\n        if (_v2n[value].disabled || _v2n[value].checkboxDisabled) {\n            newValues.push(value);\n            return;\n        }\n        forEachEnableNode(_v2n[value], node => {\n            if (node.checkable === false) return;\n            newValues.push(node.value);\n        });\n    });\n\n    return newValues;\n}"
    },
    "4": {
        "bug_file": "src/cascader/menu.jsx",
        "compressed": "NO",
        "line_numbers": 111,
        "compressed_line_numbers": 111,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport Menu from '../menu';\nimport VirtualList from '../virtual-list';\n\nexport default class CascaderMenu extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        className: PropTypes.string,\n        useVirtual: PropTypes.bool,\n        children: PropTypes.node,\n    };\n\n    componentDidMount() {\n        this.scrollToSelectedItem();\n    }\n\n    scrollToSelectedItem() {\n        const { prefix, useVirtual, children } = this.props;\n        if (!children || children.length === 0) {\n            return;\n        }\n        const selectedIndex = children.findIndex(\n            item =>\n                !!item.props.checked ||\n                !!item.props.selected ||\n                !!item.props.expanded\n        );\n\n        if (selectedIndex === -1) {\n            return;\n        }\n\n        if (useVirtual) {\n            const instance = this.refs.virtual.getInstance();\n            setTimeout(() => instance.scrollTo(selectedIndex), 0);\n        } else {\n            const itemSelector = `.${prefix}menu-item`;\n            const menu = findDOMNode(this.refs.menu);\n            const targetItem = menu.querySelectorAll(itemSelector)[\n                selectedIndex\n            ];\n            if (targetItem) {\n                menu.scrollTop =\n                    targetItem.offsetTop -\n                    Math.floor(\n                        (menu.clientHeight / targetItem.clientHeight - 1) / 2\n                    ) *\n                        targetItem.clientHeight;\n            }\n        }\n    }\n\n    renderMenu(items, ref, props) {\n        return (\n            <Menu ref={ref} role=\"listbox\" {...props}>\n                {items.map(node => {\n                    if (\n                        React.isValidElement(node) &&\n                        node.type.menuChildType === 'item'\n                    ) {\n                        return React.cloneElement(node, {\n                            menu: this,\n                        });\n                    }\n\n                    return node;\n                })}\n            </Menu>\n        );\n    }\n\n    render() {\n        const {\n            prefix,\n            useVirtual,\n            className,\n            style,\n            children,\n            ...others\n        } = this.props;\n        const menuProps = {\n            labelToggleChecked: false,\n            className: `${prefix}cascader-menu`,\n            ...others,\n        };\n        return (\n            <div\n                ref=\"menu\"\n                className={`${prefix}cascader-menu-wrapper ${\n                    className ? className : ''\n                }`}\n                style={style}\n            >\n                {useVirtual ? (\n                    <VirtualList\n                        ref=\"virtual\"\n                        itemsRenderer={(items, ref) =>\n                            this.renderMenu(items, ref, menuProps)\n                        }\n                    >\n                        {children}\n                    </VirtualList>\n                ) : (\n                    this.renderMenu(children, undefined, menuProps)\n                )}\n            </div>\n        );\n    }\n}"
    },
    "5": {
        "bug_file": "src/tree/view/tree.jsx",
        "compressed": "YES",
        "line_numbers": 1133,
        "compressed_line_numbers": 239,
        "compressed_bug_file_content": "/* eslint-disable max-depth */\nimport React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { func, dom, obj, KEYCODE } from '../../util';\nimport TreeNode from './tree-node';\nimport {\n\n\n/**\n * Tree\n */\nexport default class Tree extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 数据源，该属性优先级高于 children\n         */\n\n        /**\n         * 是否显示树的线\n         */\n\n        /**\n         * 是否支持选中节点\n         */\n\n        /**\n         * （用于受控）当前选中节点 key 的数组\n         */\n\n        /**\n         * （用于非受控）默认选中节点 key 的数组\n         */\n\n        /**\n         * 选中或取消选中节点时触发的回调函数\n         * @param {Array} selectedKeys 选中节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.selectedNodes 选中节点的数组\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.selected 当前操作是否是选中\n         */\n\n        /**\n         * 是否支持多选\n         */\n\n        /**\n         * 是否支持勾选节点的复选框\n         */\n\n        /**\n         * （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象\n         */\n\n\n        /**\n         * （用于非受控）默认勾选复选框节点 key 的数组\n         */\n\n        /**\n         * 勾选节点复选框是否完全受控（父子节点选中状态不再关联）\n         */\n\n        /**\n         * 定义选中时回填的方式\n         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点\n         */\n\n        /**\n         * 勾选或取消勾选复选框时触发的回调函数\n         * @param {Array} checkedKeys 勾选复选框节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.checkedNodes 勾选复选框节点的数组\n         * @param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组\n         * @param {Array} extra.indeterminateKeys 半选复选框节点 key 的数组\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.checked 当前操作是否是勾选\n         */\n\n        /**\n         * （用于受控）当前展开的节点 key 的数组\n         */\n\n        /**\n         * （用于非受控）默认展开的节点 key 的数组\n         */\n\n        /**\n         * 是否默认展开所有节点\n         */\n\n        /**\n         * 是否自动展开父节点，建议受控时设置为false\n         */\n\n        /**\n         * 展开或收起节点时触发的回调函数\n         * @param {Array} expandedKeys 展开的节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.expanded 当前操作是否是展开\n         */\n\n        /**\n         * 是否支持编辑节点内容\n         */\n\n        /**\n         * 编辑节点内容完成时触发的回调函数\n         * @param {String} key 编辑节点的 key\n         * @param {String} label 编辑节点完成时节点的文本\n         * @param {Object} node 当前编辑的节点\n         */\n\n        /**\n         * 是否支持拖拽节点\n         */\n\n        /**\n         * 开始拖拽节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 拖拽的节点\n         */\n\n        /**\n         * 拖拽节点进入目标节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         * @param {Array} info.expandedKeys 当前展开的节点key的数组\n         */\n\n        /**\n         * 拖拽节点在目标节点上移动的时候触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点离开目标节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点拖拽结束时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点放入目标节点内或前后触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         * @param {Object} info.dragNode 拖拽的节点\n         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组\n         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后\n         */\n\n        /**\n         * 节点是否可被作为拖拽的目标节点\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.node 目标节点\n         * @param {Object} info.dragNode 拖拽的节点\n         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组\n         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后\n         * @return {Boolean} 是否可以被当作目标节点\n         */\n\n        /**\n         * 异步加载数据的函数\n         * @param {Object} node 被点击展开的节点\n         */\n\n        /**\n         * 按需筛选高亮节点\n         * @param {Object} node 待筛选的节点\n         * @return {Boolean} 是否被筛选中\n         */\n\n        /**\n         * 右键点击节点时触发的回调函数\n         * @param {Object} info 信息对象\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 点击的节点\n         */\n\n        /**\n         * 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)\n         */\n\n        /**\n         * 设置节点是否占满一行\n         */\n\n        /**\n         * 是否开启展开收起动画\n         */\n\n        /**\n         * 当前获得焦点的子菜单或菜单项 key 值\n         */\n\n        /**\n         * 渲染子节点\n         * @param {Array<ReactNode>} nodes 所有的子节点\n         * @return {ReactNode} 返回节点\n         */\n\n\n    /* istanbul ignore next */\n\n\n    /*eslint-disable max-statements*/\n\n\n    // eslint-disable-next-line max-statements\n\n\n                        // eslint-disable-next-line max-depth\n\n\n                        // eslint-disable-next-line max-depth\n\n\n    /*eslint-enable*/\n\n\n"
    },
    "6": {
        "bug_file": "src/tree/view/util.js",
        "compressed": "NO",
        "line_numbers": 217,
        "compressed_line_numbers": 217,
        "compressed_bug_file_content": "/* eslint-disable valid-jsdoc */\nexport function normalizeToArray(keys) {\n    if (keys !== undefined && keys !== null) {\n        if (Array.isArray(keys)) {\n            return [...keys];\n        }\n\n        return [keys];\n    }\n\n    return [];\n}\n\n/**\n * 判断子节点是否是选中状态，如果 checkable={false} 则向下递归，\n * @param {Node} child\n * @param {Array} checkedKeys\n */\nexport function isNodeChecked(node, checkedKeys) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(c => isNodeChecked(c, checkedKeys))\n        );\n    }\n    return checkedKeys.indexOf(node.key) > -1;\n}\n\n/**\n * 遍历所有可用的子节点\n * @param {Node}\n * @param {Function} callback\n */\nexport function forEachEnableNode(node, callback = () => {}) {\n    if (node.disabled || node.checkboxDisabled) return;\n    // eslint-disable-next-line callback-return\n    callback(node);\n    if (node.children && node.children.length > 0) {\n        node.children.forEach(child => forEachEnableNode(child, callback));\n    }\n}\n/**\n * 判断节点是否禁用checked\n * @param {Node} node\n * @returns {Boolean}\n */\nexport function isNodeDisabledChecked(node) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        );\n    }\n\n    return false;\n}\n\n/**\n * 递归获取一个 checkable = {true} 的父节点，当 checkable={false} 时继续往上查找\n * @param {Node} node\n * @param {Map} _p2n\n * @return {Node}\n */\nexport function getCheckableParentNode(node, _p2n) {\n    let parentPos = node.pos.split(['-']);\n    if (parentPos.length === 2) return node;\n    parentPos.splice(parentPos.length - 1, 1);\n    parentPos = parentPos.join('-');\n    const parentNode = _p2n[parentPos];\n    if (parentNode.disabled || parentNode.checkboxDisabled) return false;\n    /* istanbul ignore next */\n    if (parentNode.checkable === false) {\n        return getCheckableParentNode(parentNode, _p2n);\n    }\n\n    return parentNode;\n}\n/**\n * 过滤子节点\n * @param {Array} keys\n * @param {Object} _k2n\n */\nexport function filterChildKey(keys, _k2n, _p2n) {\n    const newKeys = [];\n    keys.forEach(key => {\n        const node = getCheckableParentNode(_k2n[key], _p2n);\n        if (\n            !node ||\n            node.checkable === false ||\n            node === _k2n[key] ||\n            keys.indexOf(node.key) === -1\n        ) {\n            newKeys.push(key);\n        }\n    });\n    return newKeys;\n}\n\nexport function filterParentKey(keys, _k2n) {\n    const newKeys = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        const node = _k2n[keys[i]];\n        if (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        ) {\n            newKeys.push(keys[i]);\n        }\n    }\n\n    return newKeys;\n}\n\nexport function isDescendantOrSelf(currentPos, targetPos) {\n    if (!currentPos || !targetPos) {\n        return false;\n    }\n\n    const currentNums = currentPos.split('-');\n    const targetNums = targetPos.split('-');\n\n    return (\n        currentNums.length <= targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\nexport function isSiblingOrSelf(currentPos, targetPos) {\n    const currentNums = currentPos.split('-').slice(0, -1);\n    const targetNums = targetPos.split('-').slice(0, -1);\n\n    return (\n        currentNums.length === targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\n// eslint-disable-next-line max-statements\nexport function getAllCheckedKeys(checkedKeys, _k2n, _p2n) {\n    checkedKeys = normalizeToArray(checkedKeys);\n    const filteredKeys = checkedKeys.filter(key => !!_k2n[key]);\n    const flatKeys = [\n        ...filterChildKey(filteredKeys, _k2n, _p2n).filter(\n            key => !(_k2n[key].disabled || _k2n[key].checkboxDisabled)\n        ),\n        ...filteredKeys.filter(\n            key => _k2n[key].disabled || _k2n[key].checkboxDisabled\n        ),\n    ];\n    const removeKey = child => {\n        if (child.disabled || child.checkboxDisabled) return;\n        if (\n            child.checkable === false &&\n            child.children &&\n            child.children.length > 0\n        ) {\n            return child.children.forEach(removeKey);\n        }\n        flatKeys.splice(flatKeys.indexOf(child.key), 1);\n    };\n\n    const addParentKey = (i, parent) => flatKeys.splice(i, 0, parent.key);\n\n    const keys = [...flatKeys];\n    for (let i = 0; i < keys.length; i++) {\n        const pos = _k2n[keys[i]].pos;\n        const nums = pos.split('-');\n        if (nums.length === 2) {\n            break;\n        }\n        for (let j = nums.length - 2; j > 0; j--) {\n            const parentPos = nums.slice(0, j + 1).join('-');\n            const parent = _p2n[parentPos];\n            if (\n                parent.checkable === false ||\n                parent.disabled ||\n                parent.checkboxDisabled\n            )\n                continue;\n            const parentChecked = parent.children.every(child =>\n                isNodeChecked(child, flatKeys)\n            );\n            if (parentChecked) {\n                parent.children.forEach(removeKey);\n                addParentKey(i, parent);\n            } else {\n                break;\n            }\n        }\n    }\n\n    const newKeys = [];\n    flatKeys.forEach(key => {\n        if (_k2n[key].disabled || _k2n[key].checkboxDisabled) {\n            newKeys.push(key);\n            return;\n        }\n        forEachEnableNode(_k2n[key], node => {\n            if (node.checkable === false) return;\n            newKeys.push(node.key);\n        });\n    });\n\n    return newKeys;\n}"
    },
    "7": {
        "bug_file": "src/cascader/item.jsx",
        "compressed": "NO",
        "line_numbers": 174,
        "compressed_line_numbers": 174,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Menu from '../menu';\nimport Icon from '../icon';\nimport { func, obj, KEYCODE } from '../util';\n\nconst { bindCtx } = func;\nconst { pickOthers } = obj;\n\nexport default class CascaderMenuItem extends Component {\n    static menuChildType = 'item';\n\n    static propTypes = {\n        prefix: PropTypes.string,\n        className: PropTypes.string,\n        disabled: PropTypes.bool,\n        selected: PropTypes.bool,\n        onSelect: PropTypes.func,\n        expanded: PropTypes.bool,\n        canExpand: PropTypes.bool,\n        menu: PropTypes.any,\n        expandTriggerType: PropTypes.oneOf(['click', 'hover']),\n        onExpand: PropTypes.func,\n        onFold: PropTypes.func,\n        checkable: PropTypes.bool,\n        checked: PropTypes.bool,\n        indeterminate: PropTypes.bool,\n        checkboxDisabled: PropTypes.bool,\n        onCheck: PropTypes.func,\n        children: PropTypes.node,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: false,\n        };\n\n        bindCtx(this, [\n            'handleExpand',\n            'handleClick',\n            'handleMouseEnter',\n            'handleKeyDown',\n            'removeLoading',\n        ]);\n    }\n\n    addLoading() {\n        this.setState({\n            loading: true,\n        });\n    }\n\n    removeLoading() {\n        this.setState({\n            loading: false,\n        });\n    }\n\n    setLoadingIfNeed(p) {\n        if (p && typeof p.then === 'function') {\n            this.addLoading();\n            p.then(this.removeLoading).catch(this.removeLoading);\n        }\n    }\n\n    handleExpand(focusedFirstChild) {\n        this.setLoadingIfNeed(this.props.onExpand(focusedFirstChild));\n    }\n\n    handleClick() {\n        this.handleExpand(false);\n    }\n\n    handleMouseEnter() {\n        this.handleExpand(false);\n    }\n\n    handleKeyDown(e) {\n        if (!this.props.disabled) {\n            if (e.keyCode === KEYCODE.RIGHT || e.keyCode === KEYCODE.ENTER) {\n                if (this.props.canExpand) {\n                    this.handleExpand(true);\n                }\n            } else if (\n                e.keyCode === KEYCODE.LEFT ||\n                e.keyCode === KEYCODE.ESC\n            ) {\n                this.props.onFold();\n            } else if (e.keyCode === KEYCODE.SPACE) {\n                this.handleExpand(false);\n            }\n        }\n    }\n\n    render() {\n        const {\n            prefix,\n            className,\n            menu,\n            disabled,\n            selected,\n            onSelect,\n            expanded,\n            canExpand,\n            expandTriggerType,\n            checkable,\n            checked,\n            indeterminate,\n            checkboxDisabled,\n            onCheck,\n            children,\n        } = this.props;\n        const others = pickOthers(\n            Object.keys(CascaderMenuItem.propTypes),\n            this.props\n        );\n        const { loading } = this.state;\n\n        const itemProps = {\n            className: cx({\n                [`${prefix}cascader-menu-item`]: true,\n                [`${prefix}expanded`]: expanded,\n                [className]: !!className,\n            }),\n            disabled,\n            menu,\n            onKeyDown: this.handleKeyDown,\n            role: 'option',\n            ...others,\n        };\n        if (!disabled) {\n            if (expandTriggerType === 'hover') {\n                itemProps.onMouseEnter = this.handleMouseEnter;\n            } else {\n                itemProps.onClick = this.handleClick;\n            }\n        }\n\n        let Item;\n        if (checkable) {\n            Item = Menu.CheckboxItem;\n            itemProps.checked = checked;\n            itemProps.indeterminate = indeterminate;\n            itemProps.checkboxDisabled = checkboxDisabled;\n            itemProps.onChange = onCheck;\n        } else {\n            Item = Menu.Item;\n            itemProps.selected = selected;\n            itemProps.onSelect = onSelect;\n        }\n\n        return (\n            <Item {...itemProps}>\n                {children}\n                {canExpand ? (\n                    loading ? (\n                        <Icon\n                            className={`${prefix}cascader-menu-icon-right ${prefix}cascader-menu-icon-loading`}\n                            type=\"loading\"\n                        />\n                    ) : (\n                        <Icon\n                            className={`${prefix}cascader-menu-icon-right ${prefix}cascader-menu-icon-expand`}\n                            type=\"arrow-right\"\n                        />\n                    )\n                ) : null}\n            </Item>\n        );\n    }\n}"
    },
    "8": {
        "bug_file": "src/tree/view/tree-node.jsx",
        "compressed": "YES",
        "line_numbers": 595,
        "compressed_line_numbers": 60,
        "compressed_bug_file_content": "import React, { Component, Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from '../../icon';\nimport Checkbox from '../../checkbox';\nimport Animate from '../../animate';\nimport { func, obj, KEYCODE } from '../../util';\nimport TreeNodeInput from './tree-node-input';\n\n\n/**\n * Tree.Node\n */\nexport default class TreeNode extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 节点文本内容\n         */\n\n        /**\n         * 单独设置是否支持选中，覆盖 Tree 的 selectable\n         */\n\n        /**\n         * 单独设置是否出现复选框，覆盖 Tree 的 checkable\n         */\n\n        /**\n         * 单独设置是否支持编辑，覆盖 Tree 的 editable\n         */\n\n        /**\n         * 单独设置是否支持拖拽，覆盖 Tree 的 draggable\n         */\n\n        /**\n         * 是否禁止节点响应\n         */\n\n        /**\n         * 是否禁止勾选节点复选框\n         */\n\n        /**\n         * 是否是叶子节点，设置loadData时生效\n         */\n\n\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n\n\n        // remove aria keys\n\n\n"
    }
}