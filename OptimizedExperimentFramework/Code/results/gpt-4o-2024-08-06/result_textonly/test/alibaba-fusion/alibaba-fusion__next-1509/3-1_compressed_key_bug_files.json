{
    "1": {
        "bug_file": "src/dialog/dialog.jsx",
        "compressed": "NO",
        "line_numbers": 408,
        "compressed_line_numbers": 408,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Overlay from '../overlay';\nimport zhCN from '../locale/zh-cn';\nimport { focus, obj, func, events, dom } from '../util';\nimport Inner from './inner';\n\nconst noop = () => {};\nconst { limitTabRange } = focus;\nconst { bindCtx } = func;\nconst { pickOthers } = obj;\nconst { getStyle, setStyle } = dom;\n\n/**\n * Dialog\n */\nexport default class Dialog extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        rtl: PropTypes.bool,\n        className: PropTypes.string,\n        /**\n         * 是否显示\n         */\n        visible: PropTypes.bool,\n        /**\n         * 标题\n         */\n        title: PropTypes.node,\n        /**\n         * 内容\n         */\n        children: PropTypes.node,\n        /**\n         * 底部内容，设置为 false，则不进行显示\n         * @default [<Button type=\"primary\">确定</Button>, <Button>取消</Button>]\n         */\n        footer: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n        /**\n         * 底部按钮的对齐方式\n         */\n        footerAlign: PropTypes.oneOf(['left', 'center', 'right']),\n        /**\n         * 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：\n         * ['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）\n         * ['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）\n         * ['ok']（只存在确认按钮）\n         * ['cancel']（只存在取消按钮）\n         */\n        footerActions: PropTypes.array,\n        /**\n         * 在点击确定按钮时触发的回调函数\n         * @param {Object} event 点击事件对象\n         */\n        onOk: PropTypes.func,\n        /**\n         * 在点击取消按钮时触发的回调函数\n         * @param {Object} event 点击事件对象\n         */\n        onCancel: PropTypes.func,\n        /**\n         * 应用于确定按钮的属性对象\n         */\n        okProps: PropTypes.object,\n        /**\n         * 应用于取消按钮的属性对象\n         */\n        cancelProps: PropTypes.object,\n        /**\n         * 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：\n         * **close** 表示点击关闭按钮可以关闭对话框\n         * **mask** 表示点击遮罩区域可以关闭对话框\n         * **esc** 表示按下 esc 键可以关闭对话框\n         * 如 'close' 或 'close,esc,mask'\n         * 如果设置为 true，则以上关闭方式全部生效\n         * 如果设置为 false，则以上关闭方式全部失效\n         */\n        closeable: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n        /**\n         * 对话框关闭时触发的回调函数\n         * @param {String} trigger 关闭触发行为的描述字符串\n         * @param {Object} event 关闭时事件对象\n         */\n        onClose: PropTypes.func,\n        /**\n         * 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发\n         */\n        afterClose: PropTypes.func,\n        /**\n         * 是否显示遮罩\n         */\n        hasMask: PropTypes.bool,\n        /**\n         * 显示隐藏时动画的播放方式\n         * @property {String} in 进场动画\n         * @property {String} out 出场动画\n         */\n        animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n        /**\n         * 对话框弹出时是否自动获得焦点\n         */\n        autoFocus: PropTypes.bool,\n        /**\n         * 对话框对齐方式, 具体见Overlay文档\n         */\n        align: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n        /**\n         * 当对话框高度超过浏览器视口高度时，是否显示所有内容而不是出现滚动条以保证对话框完整显示在浏览器视口内，该属性仅在对话框垂直水平居中时生效，即 align 被设置为 'cc cc' 时\n         */\n        isFullScreen: PropTypes.bool,\n        /**\n         * 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式\n         */\n        shouldUpdatePosition: PropTypes.bool,\n        /**\n         * 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效\n         */\n        minMargin: PropTypes.number,\n        /**\n         * 透传到弹层组件的属性对象\n         */\n        overlayProps: PropTypes.object,\n        /**\n         * 自定义国际化文案对象\n         * @property {String} ok 确认按钮文案\n         * @property {String} cancel 取消按钮文案\n         */\n        locale: PropTypes.object,\n        /**\n         * 对话框的高度样式属性\n         */\n        height: PropTypes.string,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        pure: false,\n        visible: false,\n        footerAlign: 'right',\n        footerActions: ['ok', 'cancel'],\n        onOk: noop,\n        onCancel: noop,\n        okProps: {},\n        cancelProps: {},\n        closeable: 'esc,close',\n        onClose: noop,\n        afterClose: noop,\n        hasMask: true,\n        animation: {\n            in: 'fadeInDown',\n            out: 'fadeOutUp',\n        },\n        autoFocus: false,\n        align: 'cc cc',\n        isFullScreen: false,\n        shouldUpdatePosition: false,\n        minMargin: 40,\n        overlayProps: {},\n        locale: zhCN.Dialog,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n        bindCtx(this, [\n            'onKeyDown',\n            'beforePosition',\n            'adjustPosition',\n            'getOverlayRef',\n        ]);\n    }\n\n    componentDidMount() {\n        events.on(document, 'keydown', this.onKeyDown);\n        if (!this.useCSSToPosition()) {\n            this.adjustPosition();\n        }\n    }\n\n    componentWillUnmount() {\n        events.off(document, 'keydown', this.onKeyDown);\n    }\n\n    useCSSToPosition() {\n        const { align, isFullScreen } = this.props;\n        return align === 'cc cc' && isFullScreen;\n    }\n\n    onKeyDown(e) {\n        const node = this.getInnerNode();\n        if (node) {\n            limitTabRange(node, e);\n        }\n    }\n\n    beforePosition() {\n        if (this.props.visible && this.overlay) {\n            const inner = this.getInner();\n            if (inner) {\n                const node = this.getInnerNode();\n                if (this._lastDialogHeight !== getStyle(node, 'height')) {\n                    this.revertSize(inner.bodyNode);\n                }\n            }\n        }\n    }\n\n    adjustPosition() {\n        if (this.props.visible && this.overlay) {\n            const inner = this.getInner();\n            if (inner) {\n                const node = this.getInnerNode();\n\n                let top = getStyle(node, 'top');\n                const minMargin = this.props.minMargin;\n                if (top < minMargin) {\n                    top = minMargin;\n                    setStyle(node, 'top', `${minMargin}px`);\n                }\n\n                const height = getStyle(node, 'height');\n                const viewportHeight =\n                    window.innerHeight || document.documentElement.clientHeight;\n                if (viewportHeight < height + top * 2) {\n                    const expectHeight = viewportHeight - top * 2;\n                    this.adjustSize(inner, node, expectHeight);\n                } else {\n                    this.revertSize(inner.bodyNode);\n                }\n\n                this._lastDialogHeight = height;\n            }\n        }\n    }\n\n    adjustSize(inner, node, expectHeight) {\n        const { headerNode, bodyNode, footerNode } = inner;\n\n        const headerHeight = headerNode ? getStyle(headerNode, 'height') : 0;\n        const footerHeight = footerNode ? getStyle(footerNode, 'height') : 0;\n        const padding =\n            getStyle(node, 'padding-top') + getStyle(node, 'padding-bottom');\n        let maxBodyHeight =\n            expectHeight - headerHeight - footerHeight - padding;\n        if (maxBodyHeight < 0) {\n            maxBodyHeight = 1;\n        }\n\n        if (bodyNode) {\n            this.dialogBodyStyleMaxHeight = bodyNode.style.maxHeight;\n            this.dialogBodyStyleOverflowY = bodyNode.style.overflowY;\n\n            setStyle(bodyNode, {\n                'max-height': `${maxBodyHeight}px`,\n                'overflow-y': 'auto',\n            });\n        }\n    }\n\n    revertSize(bodyNode) {\n        setStyle(bodyNode, {\n            'max-height': this.dialogBodyStyleMaxHeight,\n            'overflow-y': this.dialogBodyStyleOverflowY,\n        });\n    }\n\n    mapcloseableToConfig(closeable) {\n        return ['esc', 'close', 'mask'].reduce((ret, option) => {\n            const key = option.charAt(0).toUpperCase() + option.substr(1);\n            const value =\n                typeof closeable === 'boolean'\n                    ? closeable\n                    : closeable.split(',').indexOf(option) > -1;\n\n            if (option === 'esc' || option === 'mask') {\n                ret[`canCloseBy${key}`] = value;\n            } else {\n                ret[`canCloseBy${key}Click`] = value;\n            }\n\n            return ret;\n        }, {});\n    }\n\n    getOverlayRef(ref) {\n        this.overlay = ref;\n    }\n\n    getInner() {\n        return this.overlay.getInstance().getContent();\n    }\n\n    getInnerNode() {\n        return this.overlay.getInstance().getContentNode();\n    }\n\n    renderInner(closeable) {\n        const {\n            prefix,\n            className,\n            title,\n            children,\n            footer,\n            footerAlign,\n            footerActions,\n            onOk,\n            onCancel,\n            okProps,\n            cancelProps,\n            onClose,\n            locale,\n            visible,\n            rtl,\n            height,\n        } = this.props;\n        const others = pickOthers(Object.keys(Dialog.propTypes), this.props);\n\n        return (\n            <Inner\n                prefix={prefix}\n                className={className}\n                title={title}\n                footer={footer}\n                footerAlign={footerAlign}\n                footerActions={footerActions}\n                onOk={visible ? onOk : noop}\n                onCancel={visible ? onCancel : noop}\n                okProps={okProps}\n                cancelProps={cancelProps}\n                locale={locale}\n                closeable={closeable}\n                rtl={rtl}\n                onClose={onClose.bind(this, 'closeClick')}\n                height={height}\n                {...others}\n            >\n                {children}\n            </Inner>\n        );\n    }\n\n    render() {\n        const {\n            prefix,\n            visible,\n            hasMask,\n            animation,\n            autoFocus,\n            closeable,\n            onClose,\n            afterClose,\n            shouldUpdatePosition,\n            align,\n            overlayProps,\n            rtl,\n        } = this.props;\n\n        const useCSS = this.useCSSToPosition();\n        const {\n            canCloseByCloseClick,\n            ...closeConfig\n        } = this.mapcloseableToConfig(closeable);\n        const newOverlayProps = {\n            disableScroll: true,\n            ...overlayProps,\n            prefix,\n            visible,\n            animation,\n            hasMask,\n            autoFocus,\n            afterClose,\n            ...closeConfig,\n            canCloseByOutSideClick: false,\n            align: useCSS ? false : align,\n            onRequestClose: onClose,\n            needAdjust: false,\n            ref: this.getOverlayRef,\n            rtl,\n            maskClass: useCSS ? `${prefix}dialog-container` : '',\n            isChildrenInMask: useCSS && hasMask,\n        };\n        if (!useCSS) {\n            newOverlayProps.beforePosition = this.beforePosition;\n            newOverlayProps.onPosition = this.adjustPosition;\n            newOverlayProps.shouldUpdatePosition = shouldUpdatePosition;\n        }\n\n        const inner = this.renderInner(canCloseByCloseClick);\n\n        // useCSS && hasMask : isFullScreen 并且 有mask的模式下，为了解决 next-overlay-backdrop 覆盖mask，使得点击mask关闭页面的功能不生效的问题，需要开启 Overlay 的 isChildrenInMask 功能，并且把 next-dialog-container 放到 next-overlay-backdrop上\n        // useCSS && !hasMask : isFullScreen 并且 没有mask的情况下，需要关闭 isChildrenInMask 功能，以防止children不渲染\n        // 其他模式下维持 mask 与 children 同级的关系\n        return (\n            <Overlay {...newOverlayProps}>\n                {useCSS && !hasMask ? (\n                    <div\n                        className={`${prefix}dialog-container`}\n                        dir={rtl ? 'rtl' : undefined}\n                    >\n                        {inner}\n                    </div>\n                ) : (\n                    inner\n                )}\n            </Overlay>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/dialog/index.jsx",
        "compressed": "NO",
        "line_numbers": 71,
        "compressed_line_numbers": 71,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport { log } from '../util';\nimport Dialog from './dialog';\nimport Inner from './inner';\nimport { show, alert, confirm } from './show';\n\nDialog.Inner = Inner;\nDialog.show = config => {\n    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');\n    if (warning !== false) {\n        config = processProps(config, log.deprecated);\n    }\n    return show(config);\n};\nDialog.alert = config => {\n    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');\n    if (warning !== false) {\n        config = processProps(config, log.deprecated);\n    }\n    return alert(config);\n};\nDialog.confirm = config => {\n    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');\n    if (warning !== false) {\n        config = processProps(config, log.deprecated);\n    }\n    return confirm(config);\n};\n\n/* istanbul ignore next */\nfunction processProps(props, deprecated) {\n    if ('closable' in props) {\n        deprecated('closable', 'closeable', 'Dialog');\n        const { closable, ...others } = props;\n        props = { closeable: closable, ...others };\n    }\n\n    const overlayPropNames = [\n        'target',\n        'offset',\n        'beforeOpen',\n        'onOpen',\n        'afterOpen',\n        'beforePosition',\n        'onPosition',\n        'cache',\n        'safeNode',\n        'wrapperClassName',\n        'container',\n    ];\n    overlayPropNames.forEach(name => {\n        if (name in props) {\n            deprecated(name, `overlayProps.${name}`, 'Dialog');\n            const { overlayProps, ...others } = props;\n            const newOverlayProps = {\n                [name]: props[name],\n                ...(overlayProps || {}),\n            };\n            delete others[name];\n            props = { overlayProps: newOverlayProps, ...others };\n        }\n    });\n\n    return props;\n}\n\nexport default ConfigProvider.config(Dialog, {\n    transform: (props, deprecated) => {\n        return processProps(props, deprecated);\n    },\n});"
    },
    "3": {
        "bug_file": "src/config-provider/config.jsx",
        "compressed": "NO",
        "line_numbers": 260,
        "compressed_line_numbers": 260,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport { obj, log } from '../util';\nimport getContextProps from './get-context-props';\nimport ErrorBoundary from './error-boundary';\n\nconst { shallowEqual } = obj;\n\nfunction getDisplayName(Component) {\n    return Component.displayName || Component.name || 'Component';\n}\n\nlet globalLocales;\nlet currentGlobalLanguage = 'zh-cn';\nlet currentGlobalLocale = {};\nlet currentGlobalRtl;\n\nexport function initLocales(locales) {\n    globalLocales = locales;\n\n    if (locales) {\n        currentGlobalLocale = locales[currentGlobalLanguage];\n\n        if (typeof currentGlobalRtl !== 'boolean') {\n            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;\n        }\n    }\n}\n\nexport function setLanguage(language) {\n    if (globalLocales) {\n        currentGlobalLanguage = language;\n        currentGlobalLocale = globalLocales[language];\n\n        if (typeof currentGlobalRtl !== 'boolean') {\n            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;\n        }\n    }\n}\n\nexport function setLocale(locale) {\n    currentGlobalLocale = {\n        ...(globalLocales ? globalLocales[currentGlobalLanguage] : {}),\n        ...locale,\n    };\n\n    if (typeof currentGlobalRtl !== 'boolean') {\n        currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;\n    }\n}\n\nexport function setDirection(dir) {\n    currentGlobalRtl = dir === 'rtl';\n}\n\nexport function getLocale() {\n    return currentGlobalLocale;\n}\n\nexport function getLanguage() {\n    return currentGlobalLanguage;\n}\n\nexport function getDirection() {\n    return currentGlobalRtl;\n}\n\nexport function config(Component, options = {}) {\n    // 非 forwardRef 创建的 class component\n    if (\n        obj.isClassComponent(Component) &&\n        Component.prototype.shouldComponentUpdate === undefined\n    ) {\n        // class component: 通过定义 shouldComponentUpdate 改写成 pure component, 有refs\n        Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(\n            nextProps,\n            nextState\n        ) {\n            if (this.props.pure) {\n                return (\n                    !shallowEqual(this.props, nextProps) ||\n                    !shallowEqual(this.state, nextState)\n                );\n            }\n\n            return true;\n        };\n    }\n\n    class ConfigedComponent extends React.Component {\n        static propTypes = {\n            ...(Component.propTypes || {}),\n            prefix: PropTypes.string,\n            locale: PropTypes.object,\n            pure: PropTypes.bool,\n            rtl: PropTypes.bool,\n            device: PropTypes.oneOf(['tablet', 'desktop', 'phone']),\n            popupContainer: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.func,\n            ]),\n            errorBoundary: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.object,\n            ]),\n        };\n        static contextTypes = {\n            ...(Component.contextTypes || {}),\n            nextPrefix: PropTypes.string,\n            nextLocale: PropTypes.object,\n            nextPure: PropTypes.bool,\n            nextRtl: PropTypes.bool,\n            nextWarning: PropTypes.bool,\n            nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),\n            nextPopupContainer: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.func,\n            ]),\n            nextErrorBoundary: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.object,\n            ]),\n        };\n\n        constructor(props, context) {\n            super(props, context);\n\n            this._getInstance = this._getInstance.bind(this);\n            this._deprecated = this._deprecated.bind(this);\n        }\n\n        _getInstance(ref) {\n            this._instance = ref;\n\n            if (this._instance && options.exportNames) {\n                options.exportNames.forEach(name => {\n                    const field = this._instance[name];\n                    if (typeof field === 'function') {\n                        this[name] = field.bind(this._instance);\n                    } else {\n                        this[name] = field;\n                    }\n                });\n            }\n        }\n\n        _deprecated(...args) {\n            if (this.context.nextWarning !== false) {\n                log.deprecated(...args);\n            }\n        }\n\n        getInstance() {\n            return this._instance;\n        }\n\n        render() {\n            const {\n                prefix,\n                locale,\n                pure,\n                rtl,\n                device,\n                popupContainer,\n                errorBoundary,\n                ...others\n            } = this.props;\n            const {\n                nextPrefix,\n                nextLocale = {},\n                nextPure,\n                nextRtl,\n                nextDevice,\n                nextPopupContainer,\n                nextErrorBoundary,\n            } = this.context;\n\n            const displayName =\n                options.componentName || getDisplayName(Component);\n            const contextProps = getContextProps(\n                {\n                    prefix,\n                    locale,\n                    pure,\n                    device,\n                    popupContainer,\n                    rtl,\n                    errorBoundary,\n                },\n                {\n                    nextPrefix,\n                    nextLocale: { ...currentGlobalLocale, ...nextLocale },\n                    nextPure,\n                    nextDevice,\n                    nextPopupContainer,\n                    nextRtl:\n                        typeof nextRtl === 'boolean'\n                            ? nextRtl\n                            : currentGlobalRtl === true\n                            ? true\n                            : undefined,\n                    nextErrorBoundary,\n                },\n                displayName\n            );\n\n            // errorBoundary is only for <ErrorBoundary>\n            const newContextProps = [\n                'prefix',\n                'locale',\n                'pure',\n                'rtl',\n                'device',\n                'popupContainer',\n            ].reduce((ret, name) => {\n                if (typeof contextProps[name] !== 'undefined') {\n                    ret[name] = contextProps[name];\n                }\n                return ret;\n            }, {});\n\n            if ('pure' in newContextProps && newContextProps.pure) {\n                log.warning(\n                    'pure of ConfigProvider is deprecated, use Function Component or React.PureComponent'\n                );\n            }\n\n            const newOthers = options.transform\n                ? options.transform(others, this._deprecated)\n                : others;\n\n            const content = (\n                <Component\n                    {...newOthers}\n                    {...newContextProps}\n                    ref={\n                        obj.isClassComponent(Component)\n                            ? this._getInstance\n                            : null\n                    }\n                />\n            );\n\n            const { open, ...othersBoundary } = contextProps.errorBoundary;\n\n            return open ? (\n                <ErrorBoundary {...othersBoundary}>{content}</ErrorBoundary>\n            ) : (\n                content\n            );\n        }\n    }\n\n    ConfigedComponent.displayName = `Config(${getDisplayName(Component)})`;\n\n    hoistNonReactStatic(ConfigedComponent, Component);\n\n    return ConfigedComponent;\n}"
    }
}