{
    "1": {
        "bug_file": "src/tree-select/tree-select.jsx",
        "compressed": "YES",
        "line_numbers": 850,
        "compressed_line_numbers": 186,
        "compressed_bug_file_content": "import React, {\n\n\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Select from '../select';\nimport Tree from '../tree';\nimport {\n\n\nimport { func, obj, KEYCODE } from '../util';\n\n\n/**\n * TreeSelect\n */\nexport default class TreeSelect extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 选择框大小\n         */\n\n        /**\n         * 选择框占位符\n         */\n\n        /**\n         * 是否禁用\n         */\n\n        /**\n         * 是否有下拉箭头\n         */\n\n        /**\n         * 是否有边框\n         */\n\n        /**\n         * 是否有清空按钮\n         */\n\n        /**\n         * 自定义内联 label\n         */\n\n        /**\n         * 是否只读，只读模式下可以展开弹层但不能选择\n         */\n\n        /**\n         * 下拉框是否与选择器对齐\n         */\n\n        /**\n         * 数据源，该属性优先级高于 children\n         */\n\n        /**\n         * （受控）当前值\n         */\n\n\n        /**\n         * （非受控）默认值\n         */\n\n\n        /**\n         * 选中值改变时触发的回调函数\n         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n         * @param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n         */\n\n        /**\n         * 是否显示搜索框\n         */\n\n        /**\n         * 在搜索框中输入时触发的回调函数\n         * @param {String} keyword 输入的关键字\n         */\n\n\n        /**\n         * 无数据时显示内容\n         */\n\n        /**\n         * 是否支持多选\n         */\n\n        /**\n         * 下拉框中的树是否支持勾选节点的复选框\n         */\n\n        /**\n         * 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）\n         */\n\n        /**\n         * 定义选中时回填的方式\n         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点\n         */\n\n        /**\n         * 下拉框中的树是否默认展开所有节点\n         */\n\n        /**\n         * 下拉框中的树默认展开节点key的数组\n         */\n\n        /**\n         * 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](https://fusion.design/component/tree)\n         * @param {ReactElement} node 被点击展开的节点\n         */\n\n        /**\n         * 透传到 Tree 的属性对象\n         */\n\n        /**\n         * 初始下拉框是否显示\n         */\n\n        /**\n         * 当前下拉框是否显示\n         */\n\n        /**\n         * 下拉框显示或关闭时触发事件的回调函数\n         * @param {Boolean} visible 是否显示\n         * @param {String} type 触发显示关闭的操作类型\n         */\n\n        /**\n         * 下拉框自定义样式对象\n         */\n\n        /**\n         * 下拉框样式自定义类名\n         */\n\n        /**\n         * 下拉框挂载的容器节点\n         */\n\n        /**\n         * 透传到 Popup 的属性对象\n         */\n\n        /**\n         * 是否跟随滚动\n         */\n\n        /**\n         * 是否为预览态\n         */\n\n        /**\n         * 预览态模式下渲染的内容\n         * @param {Array<data>} value 选择值 { label: , value:}\n         */\n\n\n        // 单选时点击清空按钮\n\n\n    /*eslint-disable max-statements*/\n\n\n            // eslint-disable-next-line\n\n\n                // eslint-disable-next-line\n\n\n    /*eslint-enable*/\n\n\n"
    },
    "2": {
        "bug_file": "src/tree-select/index.jsx",
        "compressed": "NO",
        "line_numbers": 20,
        "compressed_line_numbers": 20,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport TreeSelect from './tree-select';\n\nexport default ConfigProvider.config(TreeSelect, {\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('shape' in props) {\n            deprecated('shape', 'hasBorder', 'TreeSelect');\n            const { shape, ...others } = props;\n            props = { hasBorder: shape !== 'arrow-only', ...others };\n        }\n\n        if ('container' in props) {\n            deprecated('container', 'popupContainer', 'TreeSelect');\n            const { container, ...others } = props;\n            props = { popupContainer: container, ...others };\n        }\n\n        return props;\n    },\n});"
    },
    "3": {
        "bug_file": "src/tree/view/tree.jsx",
        "compressed": "YES",
        "line_numbers": 1132,
        "compressed_line_numbers": 246,
        "compressed_bug_file_content": "/* eslint-disable max-depth */\nimport React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { func, dom, obj, KEYCODE } from '../../util';\nimport TreeNode from './tree-node';\nimport {\n\n\n/**\n * Tree\n */\nexport default class Tree extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 数据源，该属性优先级高于 children\n         */\n\n        /**\n         * 是否显示树的线\n         */\n\n        /**\n         * 是否支持选中节点\n         */\n\n        /**\n         * （用于受控）当前选中节点 key 的数组\n         */\n\n        /**\n         * （用于非受控）默认选中节点 key 的数组\n         */\n\n        /**\n         * 选中或取消选中节点时触发的回调函数\n         * @param {Array} selectedKeys 选中节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.selectedNodes 选中节点的数组\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.selected 当前操作是否是选中\n         */\n\n        /**\n         * 是否支持多选\n         */\n\n        /**\n         * 是否支持勾选节点的复选框\n         */\n\n        /**\n         * （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象\n         */\n\n\n        /**\n         * （用于非受控）默认勾选复选框节点 key 的数组\n         */\n\n        /**\n         * 勾选节点复选框是否完全受控（父子节点选中状态不再关联）\n         */\n\n        /**\n         * 定义选中时回填的方式\n         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点\n         */\n\n        /**\n         * 勾选或取消勾选复选框时触发的回调函数\n         * @param {Array} checkedKeys 勾选复选框节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.checkedNodes 勾选复选框节点的数组\n         * @param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组\n         * @param {Array} extra.indeterminateKeys 半选复选框节点 key 的数组\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.checked 当前操作是否是勾选\n         */\n\n        /**\n         * （用于受控）当前展开的节点 key 的数组\n         */\n\n        /**\n         * （用于非受控）默认展开的节点 key 的数组\n         */\n\n        /**\n         * 是否默认展开所有节点\n         */\n\n        /**\n         * 是否自动展开父节点，建议受控时设置为false\n         */\n\n        /**\n         * 展开或收起节点时触发的回调函数\n         * @param {Array} expandedKeys 展开的节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.expanded 当前操作是否是展开\n         */\n\n        /**\n         * 是否支持编辑节点内容\n         */\n\n        /**\n         * 编辑节点内容完成时触发的回调函数\n         * @param {String} key 编辑节点的 key\n         * @param {String} label 编辑节点完成时节点的文本\n         * @param {Object} node 当前编辑的节点\n         */\n\n        /**\n         * 是否支持拖拽节点\n         */\n\n        /**\n         * 开始拖拽节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 拖拽的节点\n         */\n\n        /**\n         * 拖拽节点进入目标节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         * @param {Array} info.expandedKeys 当前展开的节点key的数组\n         */\n\n        /**\n         * 拖拽节点在目标节点上移动的时候触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点离开目标节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点拖拽结束时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点放入目标节点内或前后触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         * @param {Object} info.dragNode 拖拽的节点\n         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组\n         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后\n         */\n\n        /**\n         * 节点是否可被作为拖拽的目标节点\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.node 目标节点\n         * @param {Object} info.dragNode 拖拽的节点\n         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组\n         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后\n         * @return {Boolean} 是否可以被当作目标节点\n         */\n\n        /**\n         * 异步加载数据的函数\n         * @param {Object} node 被点击展开的节点\n         */\n\n        /**\n         * 按需筛选高亮节点\n         * @param {Object} node 待筛选的节点\n         * @return {Boolean} 是否被筛选中\n         */\n\n        /**\n         * 右键点击节点时触发的回调函数\n         * @param {Object} info 信息对象\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 点击的节点\n         */\n\n        /**\n         * 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)\n         */\n\n        /**\n         * 设置节点是否占满一行\n         */\n\n        /**\n         * 是否开启展开收起动画\n         */\n\n        /**\n         * 当前获得焦点的子菜单或菜单项 key 值\n         */\n\n        /**\n         * 渲染子节点\n         * @param {Array<ReactNode>} nodes 所有的子节点\n         * @return {ReactNode} 返回节点\n         */\n\n\n    /* istanbul ignore next */\n\n\n    /*eslint-disable max-statements*/\n\n\n    // eslint-disable-next-line max-statements\n\n\n        // ps.forEach(p => {\n        //     if (this._p2n[p].checkable !== false && !this._p2n[p].disabled && isDescendantOrSelf(pos, p)) {\n        //         this.processKey(checkedKeys, this._p2n[p].key, check);\n        //     }\n        // });\n\n\n                        // eslint-disable-next-line max-depth\n\n\n                        // eslint-disable-next-line max-depth\n\n\n    /*eslint-enable*/\n\n\n"
    },
    "4": {
        "bug_file": "src/tree/view/tree-node.jsx",
        "compressed": "YES",
        "line_numbers": 595,
        "compressed_line_numbers": 60,
        "compressed_bug_file_content": "import React, { Component, Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from '../../icon';\nimport Checkbox from '../../checkbox';\nimport Animate from '../../animate';\nimport { func, obj, KEYCODE } from '../../util';\nimport TreeNodeInput from './tree-node-input';\n\n\n/**\n * Tree.Node\n */\nexport default class TreeNode extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 节点文本内容\n         */\n\n        /**\n         * 单独设置是否支持选中，覆盖 Tree 的 selectable\n         */\n\n        /**\n         * 单独设置是否出现复选框，覆盖 Tree 的 checkable\n         */\n\n        /**\n         * 单独设置是否支持编辑，覆盖 Tree 的 editable\n         */\n\n        /**\n         * 单独设置是否支持拖拽，覆盖 Tree 的 draggable\n         */\n\n        /**\n         * 是否禁止节点响应\n         */\n\n        /**\n         * 是否禁止勾选节点复选框\n         */\n\n        /**\n         * 是否是叶子节点，设置loadData时生效\n         */\n\n\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n\n\n        // remove aria keys\n\n\n"
    }
}