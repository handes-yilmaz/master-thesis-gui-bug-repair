{
    "1/1": {
        "src/tree-select/tree-select.jsx": [
            {
                "SEARCH": [
                    "updateCache(props) {",
                    "this._k2n = {};",
                    "this._p2n = {};",
                    "this._v2n = {};",
                    "",
                    "if ('dataSource' in props) {",
                    "const loop = (data, prefix = '0') =>",
                    "data.map((item, index) => {",
                    "const { value, children } = item;",
                    "const pos = `${prefix}-${index}`;",
                    "const key = item.key || pos;",
                    "const newItem = { ...item, key, pos };",
                    "if (children && children.length) {",
                    "newItem.children = loop(children, pos);",
                    "}",
                    "",
                    "this._k2n[key] = this._p2n[pos] = this._v2n[",
                    "value",
                    "] = newItem;",
                    "return newItem;",
                    "});",
                    "loop(props.dataSource);",
                    "} else if ('children' in props) {",
                    "const loop = (children, prefix = '0') =>",
                    "Children.map(children, (node, index) => {",
                    "if (!React.isValidElement(node)) {",
                    "return;",
                    "}",
                    "",
                    "const { value, children } = node.props;",
                    "const pos = `${prefix}-${index}`;",
                    "const key = node.key || pos;",
                    "const newItem = { ...node.props, key, pos };",
                    "if (children && Children.count(children)) {",
                    "newItem.children = loop(children, pos);",
                    "}",
                    "",
                    "this._k2n[key] = this._p2n[pos] = this._v2n[",
                    "value",
                    "] = newItem;",
                    "return newItem;",
                    "});",
                    "loop(props.children);",
                    "}",
                    "}"
                ],
                "REPLACE": [
                    "updateCache(props) {",
                    "    this._k2n = {};",
                    "    this._p2n = {};",
                    "    this._v2n = {};",
                    "",
                    "    const generateUniqueKey = (item, pos) => {",
                    "        return item.key || `${pos}-${item.value}`;",
                    "    };",
                    "",
                    "    if ('dataSource' in props) {",
                    "        const loop = (data, prefix = '0') =>",
                    "            data.map((item, index) => {",
                    "                const { value, children } = item;",
                    "                const pos = `${prefix}-${index}`;",
                    "                const key = generateUniqueKey(item, pos);",
                    "                const newItem = { ...item, key, pos };",
                    "                if (children && children.length) {",
                    "                    newItem.children = loop(children, pos);",
                    "                }",
                    "",
                    "                this._k2n[key] = this._p2n[pos] = this._v2n[",
                    "                    value",
                    "                ] = newItem;",
                    "                return newItem;",
                    "            });",
                    "        loop(props.dataSource);",
                    "    } else if ('children' in props) {",
                    "        const loop = (children, prefix = '0') =>",
                    "            Children.map(children, (node, index) => {",
                    "                if (!React.isValidElement(node)) {",
                    "                    return;",
                    "                }",
                    "",
                    "                const { value, children } = node.props;",
                    "                const pos = `${prefix}-${index}`;",
                    "                const key = generateUniqueKey(node.props, pos);",
                    "                const newItem = { ...node.props, key, pos };",
                    "                if (children && Children.count(children)) {",
                    "                    newItem.children = loop(children, pos);",
                    "                }",
                    "",
                    "                this._k2n[key] = this._p2n[pos] = this._v2n[",
                    "                    value",
                    "                ] = newItem;",
                    "                return newItem;",
                    "            });",
                    "        loop(props.children);",
                    "    }",
                    "}"
                ]
            }
        ]
    }
}