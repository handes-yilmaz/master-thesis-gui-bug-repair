{
    "1": {
        "bug_file": "src/upload/index.jsx",
        "compressed": "NO",
        "line_numbers": 132,
        "compressed_line_numbers": 132,
        "compressed_bug_file_content": "import React from 'react';\nimport ConfigProvider from '../config-provider';\nimport { log } from '../util';\nimport { errorCode } from './util';\nimport transform from './transform';\nimport Upload from './upload';\nimport List from './list';\nimport Card from './card';\nimport Dragger from './dragger';\nimport Selecter from './runtime/selecter';\nimport Uploader from './runtime/uploader';\n\nUpload.Card = ConfigProvider.config(Card, { componentName: 'Upload' });\nUpload.Dragger = ConfigProvider.config(Dragger, { componentName: 'Upload' });\nUpload.Selecter = Selecter;\nUpload.Uploader = Uploader;\nUpload.ErrorCode = errorCode;\n\n// compatible with 0.x version\nUpload.ImageUpload = ConfigProvider.config(Card, {\n    componentName: 'Upload',\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        deprecated('Upload.ImageUpload', 'Upload.Card', 'Upload');\n        const newprops = transform(props, () => {});\n        if (newprops.locale && newprops.locale.image) {\n            newprops.locale.card = newprops.locale.image;\n        }\n\n        return newprops;\n    },\n});\n\n// compatible with 0.x version\nUpload.DragUpload = ConfigProvider.config(Dragger, {\n    componentName: 'Upload',\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        deprecated('Upload.DragUpload', 'Upload.Dragger', 'Upload');\n        const newprops = transform(props, () => {});\n        if (!newprops.listType) {\n            newprops.listType = 'card';\n        }\n\n        return newprops;\n    },\n});\n\n// compatible with 0.x version\n/* istanbul ignore next */\nUpload.Core = class Core extends React.Component {\n    constructor(props) {\n        super(props);\n        // eslint-disable-next-line\n        const {\n            action,\n            name,\n            method,\n            beforeUpload,\n            onProgress,\n            onError,\n            withCredentials,\n            headers,\n            data,\n            onSuccess,\n        } = this.props;\n\n        this.uploader = new Uploader({\n            action,\n            name,\n            method,\n            beforeUpload,\n            onProgress,\n            onError,\n            withCredentials,\n            headers,\n            data,\n            onSuccess,\n        });\n    }\n\n    abort() {\n        this.uploader.abort();\n    }\n\n    handleSelect = files => {\n        this.uploader.startUpload(files);\n    };\n\n    render() {\n        log.deprecated(\n            'Upload.Core',\n            'Upload.Selecter and Upload.Uploader',\n            'Upload'\n        );\n\n        // eslint-disable-next-line\n        const {\n            action,\n            name,\n            method,\n            beforeUpload,\n            onProgress,\n            onError,\n            withCredentials,\n            headers,\n            data,\n            onSuccess,\n            ...others\n        } = this.props;\n\n        const props = others;\n\n        return (\n            <Selecter\n                {...transform(props, () => {})}\n                onSelect={this.handleSelect}\n            />\n        );\n    }\n};\n\nUpload.List = List;\n\n// compatible with 0.x version\n/* istanbul ignore next */\nUpload.CropUpload = function() {\n    log.deprecated('Upload.CropUpload', '@alife/bc-next-crop-upload', 'Upload');\n    return null;\n};\n\nexport default ConfigProvider.config(Upload, {\n    transform,\n});"
    },
    "2": {
        "bug_file": "src/upload/list.jsx",
        "compressed": "NO",
        "line_numbers": 489,
        "compressed_line_numbers": 489,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ConfigProvider from '../config-provider';\nimport Progress from '../progress';\nimport Icon from '../icon';\nimport Button from '../button';\nimport { func, obj, KEYCODE } from '../util';\nimport zhCN from '../locale/zh-cn.js';\nimport { previewFile } from './util';\nimport transform from './transform';\nimport Item from '../menu/view/item';\n\nclass List extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        /**\n         * 多语言\n         */\n        locale: PropTypes.object,\n        /**\n         * 文件列表，数据格式请参考 文件对象\n         */\n        listType: PropTypes.oneOf(['text', 'image', 'card']),\n        /**\n         * 文件列表\n         */\n        value: PropTypes.array,\n        closable: PropTypes.bool,\n        /**\n         * 删除文件回调(支持Promise)\n         */\n        onRemove: PropTypes.func,\n        /**\n         * 取消上传回调(支持Promise)\n         */\n        onCancel: PropTypes.func,\n        /**\n         * 头像加载出错回调\n         */\n        onImageError: PropTypes.func,\n        /**\n         * listType=card时点击图片回调\n         */\n        onPreview: PropTypes.func,\n        /**\n         * 自定义额外渲染\n         */\n        extraRender: PropTypes.func,\n        /**\n         * 自定义操作渲染\n         */\n        actionRender: PropTypes.func,\n        itemRender: PropTypes.func,\n        /**\n         * 透传给Progress props\n         */\n        progressProps: PropTypes.object,\n        children: PropTypes.node,\n        uploader: PropTypes.any,\n        /**\n         * 可选参数，是否本地预览\n         */\n        useDataURL: PropTypes.bool,\n        rtl: PropTypes.bool,\n        isPreview: PropTypes.bool,\n        fileNameRender: PropTypes.func,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        listType: 'text',\n        value: [],\n        locale: zhCN.Upload,\n        closable: false,\n        onRemove: func.noop,\n        onCancel: func.noop,\n        extraRender: func.noop,\n        actionRender: func.noop,\n        onImageError: func.noop,\n        onPreview: func.noop,\n        progressProps: {},\n        fileNameRender: file => file.name,\n    };\n\n    componentDidUpdate() {\n        const { listType, useDataURL, value } = this.props;\n        if (listType !== 'image' && listType !== 'card') {\n            return;\n        }\n\n        useDataURL &&\n            value.forEach(file => {\n                if (\n                    typeof document === 'undefined' ||\n                    typeof window === 'undefined' ||\n                    !window.FileReader ||\n                    !window.File ||\n                    !(file.originFileObj instanceof File) ||\n                    file.imgURL !== undefined\n                ) {\n                    return;\n                }\n                file.imgURL = '';\n                previewFile(file.originFileObj, previewDataUrl => {\n                    file.imgURL = previewDataUrl;\n                    this.forceUpdate();\n                });\n            });\n    }\n\n    handleClose = file => {\n        const { onRemove, uploader } = this.props;\n\n        const remove = onRemove(file);\n\n        func.promiseCall(remove, () => {\n            uploader && uploader.removeFile(file);\n        });\n    };\n\n    handleCancel = file => {\n        const { onCancel, uploader } = this.props;\n        const cancel = onCancel(file);\n\n        func.promiseCall(cancel, () => {\n            uploader && uploader.abort(file);\n        });\n    };\n\n    onImageError = (file, obj) => {\n        obj.onerror = null;\n        this.props.onImageError(obj, file);\n    };\n\n    onPreview = (file, e) => {\n        this.props.onPreview(file, e);\n    };\n\n    getInfo(file) {\n        const prefixCls = `${this.props.prefix}upload`;\n        const downloadURL = file.downloadURL || file.url;\n        const imgURL = file.imgURL || file.url;\n        const size = this.sizeCaculator(file.size);\n        const itemCls = classNames({\n            [`${prefixCls}-list-item`]: true,\n            [`${prefixCls}-list-item-${file.state}`]: file.state,\n            [`${prefixCls}-list-item-error-with-msg`]: file.state === 'error' && file.errorMsg,\n        });\n        const alt = file.name || file.alt;\n        return { prefixCls, downloadURL, imgURL, size, itemCls, alt };\n    }\n    // transfer size from number to xx K/ XxxM / xxG\n    sizeCaculator(size) {\n        let fileSize = parseFloat(size, 10);\n        // fileSize为浮点数 用 < 0.000001 替代 === 0\n        if (isNaN(fileSize) || fileSize < 0.0000001) {\n            return 0;\n        }\n        const SIZE_SUFFIX = ['B', 'K', 'M', 'G', 'T', 'P'];\n        let suffixIndex = 0;\n\n        // 在Mac上实验发现 取1024造成显示的大小和实际大小不一致\n        // 因为单位制不同 见 https://superuser.com/questions/938234/size-of-files-in-windows-os-its-kb-or-kb\n        const BIT_NUMBER_SYSTEM = 1024;\n        while (fileSize >= BIT_NUMBER_SYSTEM && suffixIndex < SIZE_SUFFIX.length) {\n            suffixIndex++;\n            fileSize /= BIT_NUMBER_SYSTEM;\n        }\n\n        const suffix = SIZE_SUFFIX[suffixIndex];\n        fileSize = fileSize.toFixed(2);\n\n        return `${fileSize}${suffix}`;\n    }\n    getTextList(file) {\n        const { locale, extraRender, actionRender, progressProps, rtl, fileNameRender } = this.props;\n\n        const { prefixCls, downloadURL, size, itemCls } = this.getInfo(file);\n        const onClick = () => (file.state === 'uploading' ? this.handleCancel(file) : this.handleClose(file));\n        const onKeyDown = e => {\n            if (e.keyCode === KEYCODE.ENTER) {\n                onClick();\n            }\n        };\n        return (\n            <div className={itemCls} key={file.uid || file.name}>\n                <div className={`${prefixCls}-list-item-name-wrap`}>\n                    <a\n                        href={downloadURL}\n                        target=\"_blank\"\n                        style={{ pointerEvents: downloadURL ? '' : 'none' }}\n                        className={`${prefixCls}-list-item-name`}\n                    >\n                        <span>{fileNameRender(file)}</span>\n                        {!!size && (\n                            <span className={`${prefixCls}-list-item-size`} dir={rtl ? 'rtl' : undefined}>\n                                ({size})\n                            </span>\n                        )}\n                        <span className={`${prefixCls}-extra`}>{extraRender(file)}</span>\n                    </a>\n                </div>\n                {file.state === 'uploading' ? (\n                    <div className={`${prefixCls}-list-item-progress`}>\n                        <Progress\n                            size=\"medium\"\n                            percent={file.percent}\n                            textRender={func.noop}\n                            rtl={rtl}\n                            {...progressProps}\n                        />\n                    </div>\n                ) : null}\n                {file.state === 'error' && file.errorMsg ? (\n                    <div className={`${prefixCls}-list-item-error-msg`}>{file.errorMsg}</div>\n                ) : null}\n                <span className={`${prefixCls}-list-item-op`}>\n                    {actionRender(file)}\n                    {this.props.closable ? (\n                        <Icon\n                            type=\"close\"\n                            size=\"large\"\n                            role=\"button\"\n                            aria-label={locale.upload.delete}\n                            tabIndex=\"0\"\n                            onClick={onClick}\n                            onKeyDown={onKeyDown}\n                        />\n                    ) : null}\n                </span>\n            </div>\n        );\n    }\n\n    getImageList(file) {\n        const { extraRender, actionRender, progressProps, rtl, fileNameRender } = this.props;\n\n        const { prefixCls, downloadURL, imgURL, size, itemCls, alt } = this.getInfo(file);\n\n        let img = null;\n\n        const onClick = () => (file.state === 'uploading' ? this.handleCancel(file) : this.handleClose(file));\n        const onKeyDown = e => {\n            if (e.keyCode === KEYCODE.ENTER) {\n                onClick();\n            }\n        };\n\n        if (file.state === 'uploading' || (file.state === 'selected' && !imgURL)) {\n            img = <Icon type=\"picture\" />;\n        } else if (file.state === 'error') {\n            img = <Icon type=\"cry\" />;\n        } else {\n            img = (\n                <img\n                    src={imgURL}\n                    onError={this.onImageError.bind(this, file)}\n                    tabIndex=\"0\"\n                    alt={alt}\n                    onClick={this.onPreview.bind(this, file)}\n                />\n            );\n        }\n\n        return (\n            <div className={itemCls} key={file.uid || file.name}>\n                <div className={`${prefixCls}-list-item-thumbnail`}>{img}</div>\n                <span className={`${prefixCls}-list-item-op`}>\n                    {actionRender(file)}\n                    {this.props.closable ? (\n                        <Icon\n                            type=\"close\"\n                            size=\"large\"\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            onClick={onClick}\n                            onKeyDown={onKeyDown}\n                        />\n                    ) : null}\n                </span>\n                <a\n                    href={downloadURL}\n                    target=\"_blank\"\n                    style={{ pointerEvents: downloadURL ? '' : 'none' }}\n                    className={`${prefixCls}-list-item-name`}\n                >\n                    <span>{fileNameRender(file)}</span>\n                    {!!size && (\n                        <span className={`${prefixCls}-list-item-size`} dir={rtl ? 'rtl' : undefined}>\n                            ({size})\n                        </span>\n                    )}\n                    <span className={`${prefixCls}-extra`}>{extraRender(file)}</span>\n                </a>\n                {file.state === 'uploading' ? (\n                    <div className={`${prefixCls}-list-item-progress`}>\n                        <Progress size=\"medium\" percent={file.percent} textRender={func.noop} {...progressProps} />\n                    </div>\n                ) : null}\n                {file.state === 'error' && file.errorMsg ? (\n                    <div className={`${prefixCls}-list-item-error-msg`}>{file.errorMsg}</div>\n                ) : null}\n            </div>\n        );\n    }\n\n    getPictureCardList(file, isPreview) {\n        const { locale, progressProps, fileNameRender, itemRender } = this.props;\n\n        const { prefixCls, downloadURL, imgURL, itemCls, alt } = this.getInfo(file);\n        const state = isPreview ? '' : file.state;\n\n        let img = null;\n\n        if (state === 'uploading' || (state === 'selected' && !imgURL)) {\n            img = (\n                <div className={`${prefixCls}-list-item-handler`}>\n                    <Icon type=\"picture\" />\n                    <Button text onClick={() => this.handleCancel(file)}>\n                        {locale.card.cancel}\n                    </Button>\n                </div>\n            );\n        } else if (state === 'error') {\n            img = (\n                <div className={`${prefixCls}-list-item-handler`}>\n                    <Icon type=\"cry\" />\n                </div>\n            );\n        } else {\n            img = (\n                <img\n                    src={imgURL}\n                    tabIndex=\"0\"\n                    alt={alt}\n                    onError={this.onImageError.bind(this, file)}\n                    onClick={this.onPreview.bind(this, file)}\n                />\n            );\n        }\n\n        const onClose = () => this.handleClose(file);\n        const onKeyDownClose = e => {\n            if (e.keyCode === KEYCODE.ENTER) {\n                onClose();\n            }\n        };\n\n        let item = null;\n        if (state === 'uploading') {\n            item = [\n                <div className={`${prefixCls}-list-item-thumbnail`} key=\"img\">\n                    {img}\n                </div>,\n                <div className={`${prefixCls}-list-item-progress`} key=\"progress\">\n                    <Progress size=\"medium\" percent={file.percent} textRender={func.noop} {...progressProps} />\n                </div>,\n            ];\n        } else {\n            /* eslint-disable no-lonely-if */\n            if (typeof itemRender === 'function') {\n                item = itemRender(file);\n            } else {\n                item = [\n                    <div className={`${prefixCls}-list-item-thumbnail`} key=\"img\">\n                        {img}\n                    </div>,\n                    <span\n                        key=\"tool\"\n                        className={`${prefixCls}-tool ${!this.props.closable ? `${prefixCls}-noclose` : ''}`}\n                    >\n                        <a\n                            href={downloadURL}\n                            target=\"_blank\"\n                            tabIndex={downloadURL ? '0' : '-1'}\n                            className={`${prefixCls}-tool-download-link`}\n                            style={{\n                                pointerEvents: downloadURL ? '' : 'none',\n                            }}\n                        >\n                            <Icon\n                                type={downloadURL ? 'download' : ''}\n                                aria-label={locale.card.download}\n                                className={`${prefixCls}-tool-download-icon`}\n                            />\n                        </a>\n\n                        {this.props.closable && !isPreview ? (\n                            <span className={`${prefixCls}-tool-close`}>\n                                <Icon\n                                    type=\"ashbin\"\n                                    aria-label={locale.card.delete}\n                                    tabIndex=\"0\"\n                                    role=\"button\"\n                                    onClick={onClose}\n                                    onKeyDown={onKeyDownClose}\n                                />\n                            </span>\n                        ) : null}\n                    </span>,\n                ];\n            }\n        }\n\n        return (\n            <div className={itemCls} key={file.uid || file.name}>\n                <div className={`${prefixCls}-list-item-wrapper`}>{item}</div>\n\n                <span className={`${prefixCls}-list-item-name`}>{fileNameRender(file)}</span>\n            </div>\n        );\n    }\n\n    render() {\n        const { listType, children, prefix, rtl, className, isPreview } = this.props;\n        const prefixCls = `${prefix}upload`;\n\n        let list = [];\n        if (isPreview) {\n            const previewCls = classNames({\n                [`${prefix}form-preview`]: true,\n                [className]: !!className,\n            });\n            list = this.props.value.map(file => {\n                if (!file) {\n                    return null;\n                }\n\n                const { downloadURL, imgURL, name } = file;\n                if (listType === 'text') {\n                    return (\n                        <div className={previewCls}>\n                            <a href={downloadURL} target=\"_blank\">\n                                {name}\n                            </a>\n                        </div>\n                    );\n                } else if (listType === 'image' || listType === 'card') {\n                    return this.getPictureCardList(file, true);\n                }\n                return null;\n            });\n        } else {\n            list = this.props.value.map(file => {\n                if (!file) {\n                    return null;\n                }\n\n                if (listType === 'text') {\n                    return this.getTextList(file);\n                } else if (listType === 'image') {\n                    return this.getImageList(file);\n                } else if (listType === 'card') {\n                    return this.getPictureCardList(file);\n                }\n                return null;\n            });\n        }\n\n        if (rtl && listType === 'card' && Array.isArray(list)) {\n            list = list.reverse();\n        }\n        const _listType = isPreview && listType === 'image' ? 'card' : this.props.listType;\n        const listclassNames = classNames(\n            {\n                [`${prefixCls}-list`]: true,\n                [`${prefixCls}-list-${_listType}`]: true,\n            },\n            className\n        );\n\n        const others = obj.pickAttrsWith(this.props, 'data-');\n        return (\n            <div {...others} className={listclassNames} dir={rtl ? 'rtl' : undefined}>\n                {rtl ? children : list}\n                {rtl ? list : children}\n            </div>\n        );\n    }\n}\n\n// Wrap <List> with <ConfigProvider> to avoid context missing if it is\n// referenced by other internal modules.\n// https://github.com/alibaba-fusion/next/blob/build/1.13.9/src/upload/upload.jsx#L521\nexport default ConfigProvider.config(List, {\n    componentName: 'Upload',\n    transform,\n});"
    },
    "3": {
        "bug_file": "src/upload/upload.jsx",
        "compressed": "YES",
        "line_numbers": 602,
        "compressed_line_numbers": 237,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport { func, obj } from '../util';\nimport Icon from '../icon';\nimport Base from './base';\nimport Uploader from './runtime/index';\nimport html5Uploader from './runtime/html5-uploader';\nimport List from './list';\nimport { fileToObject, getFileItem, errorCode } from './util';\n\n\n/**\n * Upload\n */\n\n\n        /**\n         * 样式前缀\n         */\n\n        /**\n         * 上传的地址\n         */\n\n        /**\n         * 文件列表\n         */\n\n        /**\n         * 默认文件列表\n         */\n\n        /**\n         * 上传按钮形状\n         */\n\n        /**\n         * 上传列表的样式\n         * @enumdesc 文字, 图文, 卡片\n         */\n\n\n        /**\n         * 文件名字段\n         */\n\n        /**\n         * 上传额外传参\n         */\n\n        /**\n         * 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)\n         * @param {Object} response 返回\n         * @param {File} file 文件对象\n         */\n\n        /**\n         * 最大文件上传个数\n         */\n\n        /**\n         * 设置上传超时,单位ms\n         */\n\n        /**\n         * 可选参数，是否支持拖拽上传，`ie10+` 支持。\n         */\n\n\n        /**\n         * 可选参数，是否本地预览\n         */\n\n        /**\n         * 可选参数，是否禁用上传功能\n         */\n\n        /**\n         * 选择文件回调\n         */\n\n        /**\n         * 上传中\n         */\n\n        /**\n         * 上传文件改变时的状态\n         * @param {Object} info 文件事件对象\n         */\n\n        /**\n         * 可选参数，上传成功回调函数，参数为请求下响应信息以及文件\n         * @param {Object} file 文件\n         * @param {Array<Object>} value 值\n         */\n\n        /**\n         * 可选参数, 用于校验文件,afterSelect仅在 autoUpload=false 的时候生效,autoUpload=true时,可以使用beforeUpload完全可以替代该功能.\n         * @param {Object} file\n         * @returns {Boolean} 返回false会阻止上传,其他则表示正常\n         */\n\n        /**\n         * 移除文件回调函数\n         * @param {Object} file 文件\n         * @returns {Boolean|Promise} 返回 false、Promise.resolve(false)、 Promise.reject() 将阻止文件删除\n         */\n\n        /**\n         * 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件\n         * @param {Object} file 出错的文件\n         * @param {Array} value 当前值\n         */\n\n        /**\n         * 可选参数, 详见 [beforeUpload](#beforeUpload)\n         * @param {Object} file 所有文件\n         * @param {Object} options 参数\n         * @returns {Boolean|Object|Promise} 返回值作用见demo\n         */\n\n        /**\n         * 放文件\n         */\n\n        /**\n         * 自定义class\n         */\n\n        /**\n         * 自定义内联样式\n         */\n\n        /**\n         * 子元素\n         */\n\n        /**\n         * 自动上传\n         */\n\n        /**\n         * 自定义上传方法\n         * @param {Object} option\n         * @return {Object} object with abort method\n         */\n\n        /**\n         * 透传给Progress props\n         */\n\n\n        /**\n         * 是否为预览态\n         */\n\n        /**\n         * 预览态模式下渲染的内容\n         * @param {number} value 评分值\n         */\n\n        /**\n         * 文件对象的 key name\n         * @version 1.21\n         */\n\n        /**\n         * list 的自定义文件名渲染\n         * @param {Object} file 文件\n         * @return {Node} react node\n         */\n\n        /**\n         * 操作区域额外渲染\n         * @param {Object} file 文件\n         * @return {Node} react node\n         */\n\n\n        // 上传中不允许做受控修改\n\n\n        // 总数\n\n        // 差额\n\n\n            // 差额不足 则不上传\n\n\n        // 默认全量上传\n\n\n            // 全量上传总数会超过limit 但是 还有差额\n\n\n        /* eslint-disable-next */\n\n\n            // 丢弃的文件\n\n\n    /**\n     * 对外暴露API, 添加文件\n     * @param files\n     */\n\n\n        // NOTE: drag上传，当鼠标松开的时候回执行 onDrop，但此时onChange还没出发所以 value=[], 必须提前标识上传中\n\n\n    /**\n     * 对外暴露api，控制文件上传\n     */\n\n\n    /**\n     * 删除文件\n     * @param {File} file\n     * @return {void}\n     */\n\n\n    /**\n     * 取消上传\n     * @param {File} file\n     * @return {void}\n     */\n\n\n        // disabled 状态下把 remove函数替换成禁止 remove的函数\n\n\nexport default polyfill(Upload);\n"
    },
    "4": {
        "bug_file": "src/upload/util.js",
        "compressed": "NO",
        "line_numbers": 54,
        "compressed_line_numbers": 54,
        "compressed_bug_file_content": "let now = +new Date();\n\n/**\n * 生成唯一的id\n * @return {String} uid\n */\nexport function uid() {\n    return (now++).toString(36);\n}\n\nexport function fileToObject(file) {\n    if (!file.uid) {\n        file.uid = uid();\n    }\n\n    return {\n        lastModified: file.lastModified,\n        lastModifiedDate: file.lastModifiedDate,\n        name: file.filename || file.name,\n        size: file.size,\n        type: file.type,\n        uid: file.uid,\n        error: file.error,\n        percent: 0,\n        originFileObj: file,\n    };\n}\n\nexport function getFileItem(file, fileList) {\n    const matchKey = file.uid !== undefined ? 'uid' : 'name';\n    return fileList.filter(item => item[matchKey] === file[matchKey])[0];\n}\n\nexport function removeFileItem(file, fileList) {\n    const matchKey = file.uid !== undefined ? 'uid' : 'name';\n    const removed = fileList.filter(item => item[matchKey] !== file[matchKey]);\n    if (removed.length === fileList.length) {\n        return null;\n    }\n    return removed;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\nexport function previewFile(file, callback) {\n    const reader = new FileReader();\n    reader.onloadend = () => callback(reader.result);\n    reader.readAsDataURL(file);\n}\n\nexport const errorCode = {\n    EXCEED_LIMIT: 'EXCEED_LIMIT',\n    BEFOREUPLOAD_REJECT: 'BEFOREUPLOAD_REJECT',\n    RESPONSE_FAIL: 'RESPONSE_FAIL',\n};"
    }
}