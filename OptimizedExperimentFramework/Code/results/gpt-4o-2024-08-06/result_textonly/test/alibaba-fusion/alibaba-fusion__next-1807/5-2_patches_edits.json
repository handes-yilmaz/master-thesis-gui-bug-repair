{
    "1/1": {
        "src/menu/view/item.jsx": [
            {
                "SEARCH": [
                    "render() {",
                    "const {",
                    "inlineLevel,",
                    "root,",
                    "replaceClassName,",
                    "groupIndent,",
                    "component,",
                    "disabled,",
                    "className,",
                    "children,",
                    "needIndent,",
                    "parentMode,",
                    "_key,",
                    "} = this.props;",
                    "const others = pickOthers(Object.keys(Item.propTypes), this.props);",
                    "",
                    "const {",
                    "prefix,",
                    "focusable,",
                    "inlineIndent,",
                    "itemClassName,",
                    "rtl,",
                    "} = root.props;",
                    "const focused = this.getFocused();",
                    "",
                    "const newClassName = replaceClassName",
                    "? className",
                    ": cx({",
                    "[`${prefix}menu-item`]: true,",
                    "[`${prefix}disabled`]: disabled,",
                    "[`${prefix}focused`]: !focusable && focused,",
                    "[itemClassName]: !!itemClassName,",
                    "[className]: !!className,",
                    "});",
                    "if (disabled) {",
                    "others['aria-disabled'] = true;",
                    "others['aria-hidden'] = true;",
                    "}",
                    "",
                    "others.tabIndex = root.state.tabbableKey === _key ? '0' : '-1';",
                    "",
                    "if (",
                    "parentMode === 'inline' &&",
                    "inlineLevel > 1 &&",
                    "inlineIndent > 0 &&",
                    "needIndent",
                    ") {",
                    "const paddingProp = rtl ? 'paddingRight' : 'paddingLeft';",
                    "others.style = {",
                    "...(others.style || {}),",
                    "[paddingProp]: `${inlineLevel * inlineIndent -",
                    "(groupIndent || 0) * 0.4 * inlineIndent}px`,",
                    "};",
                    "}",
                    "const TagName = component;",
                    "",
                    "let role = 'menuitem';",
                    "if ('selectMode' in root.props) {",
                    "role = 'option';",
                    "}",
                    "",
                    "return (",
                    "<TagName",
                    "role={role}",
                    "title={this.getTitle(children)}",
                    "{...others}",
                    "className={newClassName}",
                    "onClick={this.handleClick}",
                    "onKeyDown={this.handleKeyDown}",
                    ">",
                    "<div className={`${prefix}menu-item-inner`}>{children}</div>",
                    "</TagName>",
                    ");",
                    "}"
                ],
                "REPLACE": [
                    "    render() {",
                    "        const {",
                    "            inlineLevel,",
                    "            root,",
                    "            replaceClassName,",
                    "            groupIndent,",
                    "            component,",
                    "            disabled,",
                    "            className,",
                    "            children,",
                    "            needIndent,",
                    "            parentMode,",
                    "            _key,",
                    "        } = this.props;",
                    "        const others = pickOthers(Object.keys(Item.propTypes), this.props);",
                    "",
                    "        const {",
                    "            prefix,",
                    "            focusable,",
                    "            inlineIndent,",
                    "            itemClassName,",
                    "            rtl,",
                    "        } = root.props;",
                    "        const focused = this.getFocused();",
                    "",
                    "        const newClassName = replaceClassName",
                    "            ? className",
                    "            : cx({",
                    "                  [`${prefix}menu-item`]: true,",
                    "                  [`${prefix}disabled`]: disabled,",
                    "                  [`${prefix}focused`]: !focusable && focused,",
                    "                  [itemClassName]: !!itemClassName,",
                    "                  [className]: !!className,",
                    "              });",
                    "        if (disabled) {",
                    "            others['aria-disabled'] = true;",
                    "            others['aria-hidden'] = true;",
                    "        }",
                    "",
                    "        others.tabIndex = root.state.tabbableKey === _key ? '0' : '-1';",
                    "",
                    "        if (",
                    "            parentMode === 'inline' &&",
                    "            inlineLevel > 1 &&",
                    "            inlineIndent > 0 &&",
                    "            needIndent",
                    "        ) {",
                    "            const paddingProp = rtl ? 'paddingRight' : 'paddingLeft';",
                    "            others.style = {",
                    "                ...(others.style || {}),",
                    "                [paddingProp]: `${inlineLevel * inlineIndent -",
                    "                    (groupIndent || 0) * 0.4 * inlineIndent}px`,",
                    "            };",
                    "        }",
                    "        const TagName = component;",
                    "",
                    "        let role = 'menuitem';",
                    "        if ('selectMode' in root.props) {",
                    "            role = 'option';",
                    "        }",
                    "",
                    "        const title = typeof children === 'string' ? this.getTitle(children) : undefined;",
                    "",
                    "        return (",
                    "            <TagName",
                    "                role={role}",
                    "                title={title}",
                    "                {...others}",
                    "                className={newClassName}",
                    "                onClick={this.handleClick}",
                    "                onKeyDown={this.handleKeyDown}",
                    "            >",
                    "                <div className={`${prefix}menu-item-inner`}>{children}</div>",
                    "            </TagName>",
                    "        );",
                    "    }"
                ]
            }
        ]
    }
}