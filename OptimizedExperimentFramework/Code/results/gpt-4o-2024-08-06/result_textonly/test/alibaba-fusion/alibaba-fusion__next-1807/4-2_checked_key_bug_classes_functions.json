{
    "bug_classes": {
        "1": {
            "class_name": "Item (not found) ",
            "file_path": "src/menu/view/item.jsx",
            "class_details": [
                {
                    "name": "Item",
                    "start_line": 1,
                    "end_line": 229
                }
            ],
            "class_code": [
                "import React, { Component, Children, isValidElement } from 'react';",
                "import { findDOMNode } from 'react-dom';",
                "import PropTypes from 'prop-types';",
                "import cx from 'classnames';",
                "import { func, obj, KEYCODE } from '../../util';",
                "",
                "const { bindCtx } = func;",
                "const { pickOthers } = obj;",
                "",
                "export default class Item extends Component {",
                "    static propTypes = {",
                "        _key: PropTypes.string,",
                "        level: PropTypes.number,",
                "        inlineLevel: PropTypes.number,",
                "        groupIndent: PropTypes.number,",
                "        root: PropTypes.object,",
                "        menu: PropTypes.any,",
                "        parent: PropTypes.object,",
                "        parentMode: PropTypes.oneOf(['inline', 'popup']),",
                "        type: PropTypes.oneOf(['submenu', 'item']),",
                "        component: PropTypes.string,",
                "        disabled: PropTypes.bool,",
                "        className: PropTypes.string,",
                "        onClick: PropTypes.func,",
                "        onKeyDown: PropTypes.func,",
                "        needIndent: PropTypes.bool,",
                "        replaceClassName: PropTypes.bool,",
                "    };",
                "",
                "    static defaultProps = {",
                "        component: 'li',",
                "        groupIndent: 0,",
                "        replaceClassName: false,",
                "        needIndent: true,",
                "    };",
                "",
                "    constructor(props) {",
                "        super(props);",
                "",
                "        bindCtx(this, ['handleClick', 'handleKeyDown']);",
                "    }",
                "",
                "    componentDidMount() {",
                "        this.itemNode = findDOMNode(this);",
                "",
                "        const { parentMode, root, menu } = this.props;",
                "        if (menu) {",
                "            this.menuNode = findDOMNode(menu);",
                "        } else if (parentMode === 'popup') {",
                "            this.menuNode = this.itemNode.parentNode;",
                "        } else {",
                "            this.menuNode = findDOMNode(root);",
                "            const { prefix, header, footer } = root.props;",
                "            if (header || footer) {",
                "                this.menuNode = this.menuNode.querySelector(",
                "                    `.${prefix}menu-content`",
                "                );",
                "            }",
                "        }",
                "",
                "        this.setFocus();",
                "    }",
                "",
                "    componentDidUpdate() {",
                "        this.setFocus();",
                "    }",
                "",
                "    focusable() {",
                "        const { root, type, disabled } = this.props;",
                "        const { focusable } = root.props;",
                "        return focusable && (type === 'submenu' || !disabled);",
                "    }",
                "",
                "    getFocused() {",
                "        const { _key, root } = this.props;",
                "        const { focusedKey } = root.state;",
                "        return focusedKey === _key;",
                "    }",
                "",
                "    setFocus() {",
                "        const focused = this.getFocused();",
                "        if (focused) {",
                "            if (this.focusable()) {",
                "                this.itemNode.focus({ preventScroll: true });",
                "            }",
                "            if (",
                "                this.menuNode &&",
                "                this.menuNode.scrollHeight > this.menuNode.clientHeight",
                "            ) {",
                "                const scrollBottom =",
                "                    this.menuNode.clientHeight + this.menuNode.scrollTop;",
                "                const itemBottom =",
                "                    this.itemNode.offsetTop + this.itemNode.offsetHeight;",
                "                if (itemBottom > scrollBottom) {",
                "                    this.menuNode.scrollTop =",
                "                        itemBottom - this.menuNode.clientHeight;",
                "                } else if (this.itemNode.offsetTop < this.menuNode.scrollTop) {",
                "                    this.menuNode.scrollTop = this.itemNode.offsetTop;",
                "                }",
                "            }",
                "        }",
                "    }",
                "",
                "    handleClick(e) {",
                "        e.stopPropagation();",
                "",
                "        const { _key, root, disabled } = this.props;",
                "",
                "        if (!disabled) {",
                "            root.handleItemClick(_key, this, e);",
                "",
                "            this.props.onClick && this.props.onClick(e);",
                "        } else {",
                "            e.preventDefault();",
                "        }",
                "    }",
                "",
                "    handleKeyDown(e) {",
                "        const { _key, root, type } = this.props;",
                "",
                "        if (this.focusable()) {",
                "            root.handleItemKeyDown(_key, type, this, e);",
                "",
                "            switch (e.keyCode) {",
                "                case KEYCODE.ENTER: {",
                "                    if (!(type === 'submenu')) {",
                "                        this.handleClick(e);",
                "                    }",
                "                    break;",
                "                }",
                "            }",
                "        }",
                "",
                "        this.props.onKeyDown && this.props.onKeyDown(e);",
                "    }",
                "",
                "    getTitle(children) {",
                "        let labelString = '';",
                "",
                "        const loop = children => {",
                "            Children.forEach(children, child => {",
                "                if (isValidElement(child) && child.props.children) {",
                "                    loop(child.props.children);",
                "                } else if (typeof child === 'string') {",
                "                    labelString += child;",
                "                }",
                "            });",
                "        };",
                "",
                "        loop(children);",
                "",
                "        return labelString;",
                "    }",
                "",
                "    render() {",
                "        const {",
                "            inlineLevel,",
                "            root,",
                "            replaceClassName,",
                "            groupIndent,",
                "            component,",
                "            disabled,",
                "            className,",
                "            children,",
                "            needIndent,",
                "            parentMode,",
                "            _key,",
                "        } = this.props;",
                "        const others = pickOthers(Object.keys(Item.propTypes), this.props);",
                "",
                "        const {",
                "            prefix,",
                "            focusable,",
                "            inlineIndent,",
                "            itemClassName,",
                "            rtl,",
                "        } = root.props;",
                "        const focused = this.getFocused();",
                "",
                "        const newClassName = replaceClassName",
                "            ? className",
                "            : cx({",
                "                  [`${prefix}menu-item`]: true,",
                "                  [`${prefix}disabled`]: disabled,",
                "                  [`${prefix}focused`]: !focusable && focused,",
                "                  [itemClassName]: !!itemClassName,",
                "                  [className]: !!className,",
                "              });",
                "        if (disabled) {",
                "            others['aria-disabled'] = true;",
                "            others['aria-hidden'] = true;",
                "        }",
                "",
                "        others.tabIndex = root.state.tabbableKey === _key ? '0' : '-1';",
                "",
                "        if (",
                "            parentMode === 'inline' &&",
                "            inlineLevel > 1 &&",
                "            inlineIndent > 0 &&",
                "            needIndent",
                "        ) {",
                "            const paddingProp = rtl ? 'paddingRight' : 'paddingLeft';",
                "            others.style = {",
                "                ...(others.style || {}),",
                "                [paddingProp]: `${inlineLevel * inlineIndent -",
                "                    (groupIndent || 0) * 0.4 * inlineIndent}px`,",
                "            };",
                "        }",
                "        const TagName = component;",
                "",
                "        let role = 'menuitem';",
                "        if ('selectMode' in root.props) {",
                "            role = 'option';",
                "        }",
                "",
                "        return (",
                "            <TagName",
                "                role={role}",
                "                title={this.getTitle(children)}",
                "                {...others}",
                "                className={newClassName}",
                "                onClick={this.handleClick}",
                "                onKeyDown={this.handleKeyDown}",
                "            >",
                "                <div className={`${prefix}menu-item-inner`}>{children}</div>",
                "            </TagName>",
                "        );",
                "    }",
                "}"
            ]
        },
        "2": {
            "class_name": "  (not found) ",
            "file_path": "src/config-provider/config.jsx",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 254
                }
            ],
            "class_code": [
                "import React from 'react';",
                "import PropTypes from 'prop-types';",
                "import hoistNonReactStatic from 'hoist-non-react-statics';",
                "import { obj, log } from '../util';",
                "import getContextProps from './get-context-props';",
                "import ErrorBoundary from './error-boundary';",
                "",
                "const { shallowEqual } = obj;",
                "",
                "function getDisplayName(Component) {",
                "    return Component.displayName || Component.name || 'Component';",
                "}",
                "",
                "let globalLocales;",
                "let currentGlobalLanguage = 'zh-cn';",
                "let currentGlobalLocale = {};",
                "let currentGlobalRtl;",
                "",
                "export function initLocales(locales) {",
                "    globalLocales = locales;",
                "",
                "    if (locales) {",
                "        currentGlobalLocale = locales[currentGlobalLanguage];",
                "",
                "        if (typeof currentGlobalRtl !== 'boolean') {",
                "            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;",
                "        }",
                "    }",
                "}",
                "",
                "export function setLanguage(language) {",
                "    if (globalLocales) {",
                "        currentGlobalLanguage = language;",
                "        currentGlobalLocale = globalLocales[language];",
                "",
                "        if (typeof currentGlobalRtl !== 'boolean') {",
                "            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;",
                "        }",
                "    }",
                "}",
                "",
                "export function setLocale(locale) {",
                "    currentGlobalLocale = {",
                "        ...(globalLocales ? globalLocales[currentGlobalLanguage] : {}),",
                "        ...locale,",
                "    };",
                "",
                "    if (typeof currentGlobalRtl !== 'boolean') {",
                "        currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;",
                "    }",
                "}",
                "",
                "export function setDirection(dir) {",
                "    currentGlobalRtl = dir === 'rtl';",
                "}",
                "",
                "export function getLocale() {",
                "    return currentGlobalLocale;",
                "}",
                "",
                "export function getLanguage() {",
                "    return currentGlobalLanguage;",
                "}",
                "",
                "export function getDirection() {",
                "    return currentGlobalRtl;",
                "}",
                "",
                "export function config(Component, options = {}) {",
                "    // 非 forwardRef 创建的 class component",
                "    if (",
                "        obj.isClassComponent(Component) &&",
                "        Component.prototype.shouldComponentUpdate === undefined",
                "    ) {",
                "        // class component: 通过定义 shouldComponentUpdate 改写成 pure component, 有refs",
                "        Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(",
                "            nextProps,",
                "            nextState",
                "        ) {",
                "            if (this.props.pure) {",
                "                return (",
                "                    !shallowEqual(this.props, nextProps) ||",
                "                    !shallowEqual(this.state, nextState)",
                "                );",
                "            }",
                "",
                "            return true;",
                "        };",
                "    }",
                "",
                "    class ConfigedComponent extends React.Component {",
                "        static propTypes = {",
                "            ...(Component.propTypes || {}),",
                "            prefix: PropTypes.string,",
                "            locale: PropTypes.object,",
                "            pure: PropTypes.bool,",
                "            rtl: PropTypes.bool,",
                "            device: PropTypes.oneOf(['tablet', 'desktop', 'phone']),",
                "            popupContainer: PropTypes.any,",
                "            errorBoundary: PropTypes.oneOfType([",
                "                PropTypes.bool,",
                "                PropTypes.object,",
                "            ]),",
                "        };",
                "        static contextTypes = {",
                "            ...(Component.contextTypes || {}),",
                "            nextPrefix: PropTypes.string,",
                "            nextLocale: PropTypes.object,",
                "            nextPure: PropTypes.bool,",
                "            nextRtl: PropTypes.bool,",
                "            nextWarning: PropTypes.bool,",
                "            nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),",
                "            nextPopupContainer: PropTypes.any,",
                "            nextErrorBoundary: PropTypes.oneOfType([",
                "                PropTypes.bool,",
                "                PropTypes.object,",
                "            ]),",
                "        };",
                "",
                "        constructor(props, context) {",
                "            super(props, context);",
                "",
                "            this._getInstance = this._getInstance.bind(this);",
                "            this._deprecated = this._deprecated.bind(this);",
                "        }",
                "",
                "        _getInstance(ref) {",
                "            this._instance = ref;",
                "",
                "            if (this._instance && options.exportNames) {",
                "                options.exportNames.forEach(name => {",
                "                    const field = this._instance[name];",
                "                    if (typeof field === 'function') {",
                "                        this[name] = field.bind(this._instance);",
                "                    } else {",
                "                        this[name] = field;",
                "                    }",
                "                });",
                "            }",
                "        }",
                "",
                "        _deprecated(...args) {",
                "            if (this.context.nextWarning !== false) {",
                "                log.deprecated(...args);",
                "            }",
                "        }",
                "",
                "        getInstance() {",
                "            return this._instance;",
                "        }",
                "",
                "        render() {",
                "            const {",
                "                prefix,",
                "                locale,",
                "                pure,",
                "                rtl,",
                "                device,",
                "                popupContainer,",
                "                errorBoundary,",
                "                ...others",
                "            } = this.props;",
                "            const {",
                "                nextPrefix,",
                "                nextLocale = {},",
                "                nextPure,",
                "                nextRtl,",
                "                nextDevice,",
                "                nextPopupContainer,",
                "                nextErrorBoundary,",
                "            } = this.context;",
                "",
                "            const displayName =",
                "                options.componentName || getDisplayName(Component);",
                "            const contextProps = getContextProps(",
                "                {",
                "                    prefix,",
                "                    locale,",
                "                    pure,",
                "                    device,",
                "                    popupContainer,",
                "                    rtl,",
                "                    errorBoundary,",
                "                },",
                "                {",
                "                    nextPrefix,",
                "                    nextLocale: { ...currentGlobalLocale, ...nextLocale },",
                "                    nextPure,",
                "                    nextDevice,",
                "                    nextPopupContainer,",
                "                    nextRtl:",
                "                        typeof nextRtl === 'boolean'",
                "                            ? nextRtl",
                "                            : currentGlobalRtl === true",
                "                            ? true",
                "                            : undefined,",
                "                    nextErrorBoundary,",
                "                },",
                "                displayName",
                "            );",
                "",
                "            // errorBoundary is only for <ErrorBoundary>",
                "            const newContextProps = [",
                "                'prefix',",
                "                'locale',",
                "                'pure',",
                "                'rtl',",
                "                'device',",
                "                'popupContainer',",
                "            ].reduce((ret, name) => {",
                "                if (typeof contextProps[name] !== 'undefined') {",
                "                    ret[name] = contextProps[name];",
                "                }",
                "                return ret;",
                "            }, {});",
                "",
                "            if ('pure' in newContextProps && newContextProps.pure) {",
                "                log.warning(",
                "                    'pure of ConfigProvider is deprecated, use Function Component or React.PureComponent'",
                "                );",
                "            }",
                "",
                "            const newOthers = options.transform",
                "                ? options.transform(others, this._deprecated)",
                "                : others;",
                "",
                "            const content = (",
                "                <Component",
                "                    {...newOthers}",
                "                    {...newContextProps}",
                "                    ref={",
                "                        obj.isClassComponent(Component)",
                "                            ? this._getInstance",
                "                            : null",
                "                    }",
                "                />",
                "            );",
                "",
                "            const { open, ...othersBoundary } = contextProps.errorBoundary;",
                "",
                "            return open ? (",
                "                <ErrorBoundary {...othersBoundary}>{content}</ErrorBoundary>",
                "            ) : (",
                "                content",
                "            );",
                "        }",
                "    }",
                "",
                "    ConfigedComponent.displayName = `Config(${getDisplayName(Component)})`;",
                "",
                "    hoistNonReactStatic(ConfigedComponent, Component);",
                "",
                "    return ConfigedComponent;",
                "}"
            ]
        }
    },
    "bug_functions": {}
}