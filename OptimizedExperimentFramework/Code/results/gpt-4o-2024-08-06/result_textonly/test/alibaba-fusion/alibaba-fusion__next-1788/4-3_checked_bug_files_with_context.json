{
    "src/input/textarea.jsx": [
        "import React from 'react';",
        "import ReactDOM from 'react-dom';",
        "import PropTypes from 'prop-types';",
        "import classNames from 'classnames';",
        "import { obj, env } from '../util';",
        "import Base from './base';",
        "",
        "function onNextFrame(cb) {",
        "    if (window.requestAnimationFrame) {",
        "        return window.requestAnimationFrame(cb);",
        "    }",
        "    return window.setTimeout(cb, 1);",
        "}",
        "",
        "function clearNextFrameAction(nextFrameId) {",
        "    if (window.cancelAnimationFrame) {",
        "        window.cancelAnimationFrame(nextFrameId);",
        "    } else {",
        "        window.clearTimeout(nextFrameId);",
        "    }",
        "}",
        "",
        "// safari in mac",
        "const isMacSafari =",
        "    typeof navigator !== 'undefined' && navigator && navigator.userAgent",
        "        ? navigator.userAgent.match(/^((?!chrome|android|windows).)*safari/i)",
        "        : false;",
        "",
        "const hiddenStyle = {",
        "    visibility: 'hidden',",
        "    position: 'absolute',",
        "    zIndex: '-1000',",
        "    top: '-1000px',",
        "    overflowY: 'hidden',",
        "    left: 0,",
        "    right: 0,",
        "};",
        "",
        "/**",
        " * Input.TextArea",
        " * @order 2",
        " */",
        "export default class TextArea extends Base {",
        "    static propTypes = {",
        "        ...Base.propTypes,",
        "        /**",
        "         * 是否有边框",
        "         */",
        "        hasBorder: PropTypes.bool,",
        "        /**",
        "         * 状态",
        "         * @enumdesc 错误",
        "         */",
        "        state: PropTypes.oneOf(['error', 'warning']),",
        "        /**",
        "         * 自动高度 true / {minRows: 2, maxRows: 4}",
        "         */",
        "        autoHeight: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),",
        "        /**",
        "         * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)",
        "         */",
        "        rows: PropTypes.number,",
        "        /**",
        "         * 是否为预览态",
        "         */",
        "        isPreview: PropTypes.bool,",
        "        /**",
        "         * 预览态模式下渲染的内容",
        "         * @param {number} value 评分值",
        "         */",
        "        renderPreview: PropTypes.func,",
        "    };",
        "",
        "    static defaultProps = {",
        "        ...Base.defaultProps,",
        "        hasBorder: true,",
        "        isPreview: false,",
        "        rows: 4,",
        "        autoHeight: false,",
        "    };",
        "",
        "    constructor(props) {",
        "        super(props);",
        "",
        "        let value;",
        "        if ('value' in props) {",
        "            value = props.value;",
        "        } else {",
        "            value = props.defaultValue;",
        "        }",
        "",
        "        this.state = {",
        "            value: typeof value === 'undefined' ? '' : value,",
        "        };",
        "    }",
        "",
        "    componentDidMount() {",
        "        const autoHeight = this.props.autoHeight;",
        "        if (autoHeight) {",
        "            if (typeof autoHeight === 'object') {",
        "                /* eslint-disable react/no-did-mount-set-state */",
        "                this.setState(",
        "                    this._getMinMaxHeight(autoHeight, this.state.value)",
        "                );",
        "            } else {",
        "                this.setState({",
        "                    height: this._getHeight(this.state.value),",
        "                    overflowY: 'hidden',",
        "                });",
        "            }",
        "        }",
        "    }",
        "",
        "    componentDidUpdate(prevProps) {",
        "        if (this.props.autoHeight && this.props.value !== prevProps.value) {",
        "            this._resizeTextArea(this.props.value);",
        "        }",
        "    }",
        "",
        "    _getMinMaxHeight({ minRows, maxRows }, value) {",
        "        const node = ReactDOM.findDOMNode(this.helpRef);",
        "        node.setAttribute('rows', minRows);",
        "        const minHeight = node.clientHeight;",
        "",
        "        node.setAttribute('rows', maxRows);",
        "        const maxHeight = node.clientHeight;",
        "",
        "        node.setAttribute('rows', '1');",
        "        const height = this._getHeight(value);",
        "",
        "        return {",
        "            minHeight,",
        "            maxHeight,",
        "            height,",
        "            overflowY: height <= maxHeight ? 'hidden' : undefined,",
        "        };",
        "    }",
        "",
        "    _getHeight(value) {",
        "        const node = ReactDOM.findDOMNode(this.helpRef);",
        "        node.value = value;",
        "",
        "        return node.scrollHeight;",
        "    }",
        "",
        "    _resizeTextArea = value => {",
        "        if (this.nextFrameActionId) {",
        "            clearNextFrameAction(this.nextFrameActionId);",
        "        }",
        "        this.nextFrameActionId = onNextFrame(() => {",
        "            const height = this._getHeight(value);",
        "            const maxHeight = this.state.maxHeight",
        "                ? this.state.maxHeight",
        "                : Infinity;",
        "",
        "            this.setState({",
        "                height: this._getHeight(value),",
        "                overflowY: height <= maxHeight ? 'hidden' : undefined,",
        "            });",
        "        });",
        "    };",
        "",
        "    ieHack(value) {",
        "        // Fix: textarea dit not support maxLength in ie9",
        "        /* istanbul ignore if */",
        "        if (env.ieVersion === 9 && this.props.maxLength) {",
        "            const maxLength = parseInt(this.props.maxLength);",
        "            const len = this.getValueLength(value, true);",
        "            if (len > maxLength && this.props.cutString) {",
        "                value = value.replace(/\\n/g, '\\n\\n');",
        "                value = value.substr(0, maxLength);",
        "                value = value.replace(/\\n\\n/g, '\\n');",
        "            }",
        "        }",
        "",
        "        this.props.autoHeight && this._resizeTextArea(value);",
        "",
        "        return value;",
        "    }",
        "",
        "    /**",
        "     * value.length !== maxLength  in ie/safari(mac) while value has `Enter`",
        "     * about maxLength compute: `Enter` was considered to be one char(\\n) in chrome , but two chars(\\r\\n) in ie/safari(mac).",
        "     * so while value has `Enter`, we should let display length + 1",
        "     */",
        "    getValueLength(value) {",
        "        const { maxLength, cutString } = this.props;",
        "",
        "        const nv = `${value}`;",
        "        let strLen = this.props.getValueLength(nv);",
        "        if (typeof strLen !== 'number') {",
        "            strLen = nv.length;",
        "        }",
        "",
        "        /* istanbul ignore if */",
        "        if (env.ieVersion || isMacSafari) {",
        "            strLen = strLen + nv.split('\\n').length - 1;",
        "            if (strLen > maxLength && cutString) {",
        "                strLen = maxLength;",
        "            }",
        "        }",
        "",
        "        return strLen;",
        "    }",
        "",
        "    saveTextAreaRef(textArea) {",
        "        this.inputRef = textArea;",
        "    }",
        "",
        "    saveHelpRef(ref) {",
        "        this.helpRef = ref;",
        "    }",
        "",
        "    render() {",
        "        const {",
        "            rows,",
        "            style,",
        "            className,",
        "            autoHeight,",
        "            isPreview,",
        "            renderPreview,",
        "            prefix,",
        "            rtl,",
        "            hasBorder,",
        "        } = this.props;",
        "",
        "        const cls = classNames(this.getClass(), {",
        "            [`${prefix}input-textarea`]: true,",
        "            [`${prefix}noborder`]: !hasBorder,",
        "            [className]: !!className,",
        "        });",
        "",
        "        const props = this.getProps();",
        "        // custom data attributes are assigned to the top parent node",
        "        // data-类自定义数据属性分配到顶层node节点",
        "        const dataProps = obj.pickAttrsWith(this.props, 'data-');",
        "        // Custom props are transparently transmitted to the core input node by default",
        "        // 自定义属性默认透传到核心node节点：input",
        "        const others = obj.pickOthers(",
        "            Object.assign({}, dataProps, TextArea.propTypes),",
        "            this.props",
        "        );",
        "",
        "        const textareStyle = {",
        "            ...props.style,",
        "            height: this.state.height,",
        "            minHeight: this.state.minHeight,",
        "            maxHeight: this.state.maxHeight,",
        "            overflowY: this.state.overflowY,",
        "        };",
        "",
        "        const previewCls = classNames({",
        "            [`${prefix}input-textarea`]: true,",
        "            [`${prefix}form-preview`]: true,",
        "            [className]: !!className,",
        "        });",
        "",
        "        const wrapStyle = autoHeight",
        "            ? { ...style, position: 'relative' }",
        "            : style;",
        "",
        "        if (isPreview) {",
        "            const { value } = props;",
        "            if ('renderPreview' in this.props) {",
        "                return (",
        "                    <div {...others} className={previewCls}>",
        "                        {renderPreview(value, this.props)}",
        "                    </div>",
        "                );",
        "            }",
        "            return (",
        "                <div {...others} className={previewCls}>",
        "                    {value.split('\\n').map((data, i) => (",
        "                        <p key={`p-${i}`}>{data}</p>",
        "                    ))}",
        "                </div>",
        "            );",
        "        }",
        "",
        "        return (",
        "            <span",
        "                className={cls}",
        "                style={wrapStyle}",
        "                dir={rtl ? 'rtl' : undefined}",
        "                {...dataProps}",
        "            >",
        "                <textarea",
        "                    {...others}",
        "                    {...props}",
        "                    data-real",
        "                    rows={rows}",
        "                    style={textareStyle}",
        "                    ref={this.saveRef.bind(this)}",
        "                    onKeyDown={this.onKeyDown.bind(this)}",
        "                />",
        "                {autoHeight ? (",
        "                    <textarea",
        "                        data-fake",
        "                        ref={this.saveHelpRef.bind(this)}",
        "                        style={{ ...props.style, ...hiddenStyle }}",
        "                        rows=\"1\"",
        "                    />",
        "                ) : null}",
        "                {this.renderControl()}",
        "            </span>",
        "        );",
        "    }",
        "}"
    ],
    "types/input/index.d.ts": [
        "/// <reference types=\"react\" />",
        "",
        "import * as React from 'react';",
        "import CommonProps from '../util';",
        "",
        "interface HTMLAttributesWeak extends React.InputHTMLAttributes<HTMLElement> {",
        "    defaultValue?: any;",
        "    onChange?: any;",
        "    onKeyDown?: any;",
        "    size?: any;",
        "}",
        "",
        "export interface TextAreaProps extends HTMLAttributesWeak, CommonProps {",
        "    /**",
        "     * 当前值",
        "     */",
        "    value?: string | number;",
        "",
        "    /**",
        "     * 初始化值",
        "     */",
        "    defaultValue?: string | number;",
        "",
        "    /**",
        "     * 发生改变的时候触发的回调",
        "     */",
        "    onChange?: (value: string, e: React.ChangeEvent<HTMLTextAreaElement>) => void;",
        "",
        "    /**",
        "     * 键盘按下的时候触发的回调",
        "     */",
        "    onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>, opts: {}) => void;",
        "",
        "    /**",
        "     * 禁用状态",
        "     */",
        "    disabled?: boolean;",
        "",
        "    /**",
        "     * 最大长度",
        "     */",
        "    maxLength?: number;",
        "",
        "    /**",
        "     * 是否展现最大长度样式",
        "     */",
        "    hasLimitHint?: boolean;",
        "",
        "    /**",
        "     * 当设置了maxLength时，是否截断超出字符串",
        "     */",
        "    cutString?: boolean;",
        "",
        "    /**",
        "     * 只读",
        "     */",
        "    readOnly?: boolean;",
        "",
        "    /**",
        "     * onChange返回会自动去除头尾空字符",
        "     */",
        "    trim?: boolean;",
        "",
        "    /**",
        "     * 输入提示",
        "     */",
        "    placeholder?: string;",
        "",
        "    /**",
        "     * 获取焦点时候触发的回调",
        "     */",
        "    onFocus?: () => void;",
        "",
        "    /**",
        "     * 失去焦点时候触发的回调",
        "     */",
        "    onBlur?: () => void;",
        "",
        "    /**",
        "     * 自定义字符串计算长度方式",
        "     */",
        "    getValueLength?: (value: string) => number;",
        "",
        "    /**",
        "     * 自定义class",
        "     */",
        "    className?: string;",
        "",
        "    /**",
        "     * 自定义内联样式",
        "     */",
        "    style?: React.CSSProperties;",
        "",
        "    /**",
        "     * 原生type",
        "     */",
        "    htmlType?: string;",
        "",
        "    /**",
        "     * name",
        "     */",
        "    name?: string;",
        "",
        "    /**",
        "     * 状态",
        "     */",
        "    state?: 'error' | 'warning';",
        "",
        "    /**",
        "     * 是否有边框",
        "     */",
        "    hasBorder?: boolean;",
        "",
        "    /**",
        "     * 自动高度 true / {minRows: 2, maxRows: 4}",
        "     */",
        "    autoHeight?: boolean | {};",
        "",
        "    /**",
        "     * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)",
        "     */",
        "    rows?: number;",
        "}",
        "",
        "export class TextArea extends React.Component<TextAreaProps, any> {}",
        "",
        "export interface GroupProps extends React.HTMLAttributes<HTMLElement>, CommonProps {",
        "    /**",
        "     * 样式前缀",
        "     */",
        "    prefix?: string;",
        "",
        "    /**",
        "     * 输入框前附加内容",
        "     */",
        "    addonBefore?: React.ReactNode;",
        "",
        "    /**",
        "     * 输入框前附加内容css",
        "     */",
        "    addonBeforeClassName?: string;",
        "",
        "    /**",
        "     * 输入框后附加内容",
        "     */",
        "    addonAfter?: React.ReactNode;",
        "",
        "    /**",
        "     * 输入框后额外css",
        "     */",
        "    addonAfterClassName?: string;",
        "",
        "    /**",
        "     * rtl",
        "     */",
        "    rtl?: boolean;",
        "}",
        "",
        "export class Group extends React.Component<GroupProps, any> {}",
        "",
        "export interface InputProps extends HTMLAttributesWeak, CommonProps {",
        "    /**",
        "     * 当前值",
        "     */",
        "    value?: string | number;",
        "",
        "    /**",
        "     * 初始化值",
        "     */",
        "    defaultValue?: string | number;",
        "",
        "    /**",
        "     * 发生改变的时候触发的回调",
        "     */",
        "    onChange?: (value: string, e: React.ChangeEvent<HTMLInputElement>) => void;",
        "",
        "    /**",
        "     * 键盘按下的时候触发的回调",
        "     */",
        "    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>, opts: {}) => void;",
        "",
        "    /**",
        "     * 禁用状态",
        "     */",
        "    disabled?: boolean;",
        "",
        "    /**",
        "     * 最大长度",
        "     */",
        "    maxLength?: number;",
        "",
        "    /**",
        "     * 是否展现最大长度样式",
        "     */",
        "    hasLimitHint?: boolean;",
        "",
        "    /**",
        "     * 当设置了maxLength时，是否截断超出字符串",
        "     */",
        "    cutString?: boolean;",
        "",
        "    /**",
        "     * 只读",
        "     */",
        "    readOnly?: boolean;",
        "",
        "    /**",
        "     * onChange返回会自动去除头尾空字符",
        "     */",
        "    trim?: boolean;",
        "",
        "    /**",
        "     * 输入提示",
        "     */",
        "    placeholder?: string;",
        "",
        "    /**",
        "     * 获取焦点时候触发的回调",
        "     */",
        "    onFocus?: () => void;",
        "",
        "    /**",
        "     * 失去焦点时候触发的回调",
        "     */",
        "    onBlur?: () => void;",
        "",
        "    /**",
        "     * 自定义字符串计算长度方式",
        "     */",
        "    getValueLength?: (value: string) => number;",
        "",
        "    /**",
        "     * 自定义class",
        "     */",
        "    className?: string;",
        "",
        "    /**",
        "     * 自定义内联样式",
        "     */",
        "    style?: React.CSSProperties;",
        "",
        "    /**",
        "     * 原生type",
        "     */",
        "    htmlType?: string;",
        "",
        "    /**",
        "     * name",
        "     */",
        "    name?: string;",
        "",
        "    /**",
        "     * 状态",
        "     */",
        "    state?: 'error' | 'loading' | 'success' | 'warning';",
        "",
        "    /**",
        "     * label",
        "     */",
        "    label?: React.ReactNode;",
        "",
        "    /**",
        "     * 是否出现clear按钮",
        "     */",
        "    hasClear?: boolean;",
        "",
        "    /**",
        "     * 是否有边框",
        "     */",
        "    hasBorder?: boolean;",
        "",
        "    /**",
        "     * 尺寸",
        "     */",
        "    size?: 'small' | 'medium' | 'large';",
        "",
        "    /**",
        "     * 按下回车的回调",
        "     */",
        "    onPressEnter?: () => void;",
        "",
        "    /**",
        "     * 水印 (Icon的type类型，和hasClear占用一个地方)",
        "     */",
        "    hint?: string;",
        "",
        "    /**",
        "     * 文字前附加内容",
        "     */",
        "    innerBefore?: React.ReactNode;",
        "",
        "    /**",
        "     * 文字后附加内容",
        "     */",
        "    innerAfter?: React.ReactNode;",
        "",
        "    /**",
        "     * 输入框前附加内容",
        "     */",
        "    addonBefore?: React.ReactNode;",
        "",
        "    /**",
        "     * 输入框后附加内容",
        "     */",
        "    addonAfter?: React.ReactNode;",
        "",
        "    /**",
        "     * 输入框前附加文字",
        "     */",
        "    addonTextBefore?: React.ReactNode;",
        "",
        "    /**",
        "     * 输入框后附加文字",
        "     */",
        "    addonTextAfter?: React.ReactNode;",
        "",
        "    /**",
        "     * (原生input支持)",
        "     */",
        "    autoComplete?: string;",
        "",
        "    /**",
        "     * 自动聚焦(原生input支持)",
        "     */",
        "    autoFocus?: boolean;",
        "}",
        "export interface PasswordProps extends InputProps {",
        "    /**",
        "     * 是否展示切换按钮",
        "     */",
        "    showToggle?: boolean;",
        "}",
        "export class Password extends React.Component<PasswordProps, any> {}",
        "",
        "export default class Input extends React.Component<InputProps, any> {",
        "    static TextArea: typeof TextArea;",
        "    static Group: typeof Group;",
        "    static Password: typeof Password;",
        "}",
        ""
    ]
}