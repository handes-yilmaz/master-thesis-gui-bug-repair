{
    ".commitlintrc": {},
    ".editorconfig": {},
    ".eslintignore": {},
    ".eslintrc": {},
    ".fusion": {},
    ".gitignore": {},
    ".travis.yml": {},
    "CHANGELOG.md": {
        "classes": "",
        "functions": "",
        "text": [
            "# Change Log ",
            "",
            "<a name=\"1.11.3\"></a>",
            "## [1.11.3](https://github.com/alibaba-fusion/next/compare/1.11.2...1.11.3) (2018-12-13)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Balloon:** ltr when set rtl on it own ([8cc4a8a](https://github.com/alibaba-fusion/next/commit/8cc4a8a))",
            "* **ConfigProvider:** remove warning when not using rtl ([f59dd15](https://github.com/alibaba-fusion/next/commit/f59dd15))",
            "* **Form:** css hack only in ie9 ([f5e77bc](https://github.com/alibaba-fusion/next/commit/f5e77bc))",
            "* **Input:** loading and hint not cannot occur at the same time ([cf97c99](https://github.com/alibaba-fusion/next/commit/cf97c99))",
            "* **Input:** padding reversed when select arrow translate 180 ([d5e9573](https://github.com/alibaba-fusion/next/commit/d5e9573))",
            "* **Menu:** keyboard not blur ([dda5a16](https://github.com/alibaba-fusion/next/commit/dda5a16))",
            "* **Slider:** dots' trigger area changed from <button> to parent <li> ([346f684](https://github.com/alibaba-fusion/next/commit/346f684))",
            "* **Step:** rtl style bugfix ([cadfec8](https://github.com/alibaba-fusion/next/commit/cadfec8))",
            "* **Table:** Avoid display error when browser scale ([b07b680](https://github.com/alibaba-fusion/next/commit/b07b680))",
            "* **Table:** lock columns cant align with whole table when affixed ([f1531c3](https://github.com/alibaba-fusion/next/commit/f1531c3))",
            "* **Timeline:** timeline-item cannot set className ([23754a3](https://github.com/alibaba-fusion/next/commit/23754a3))",
            "* **Upload:** forbid deleting file when upload is disabled ([e0936e5](https://github.com/alibaba-fusion/next/commit/e0936e5))",
            "* **Upload:** no space between upload and file list ([181517c](https://github.com/alibaba-fusion/next/commit/181517c))",
            "",
            "",
            "",
            "",
            "<a name=\"1.11.2\"></a>",
            "## [1.11.2](https://github.com/alibaba-fusion/next/compare/1.11.1...1.11.2) (2018-12-06)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Overlay:** fix postion caculate error ([d38a78f](https://github.com/alibaba-fusion/next/commit/d38a78f))",
            "",
            "",
            "",
            "",
            "<a name=\"1.11.1\"></a>",
            "## [1.11.1](https://github.com/alibaba-fusion/next/compare/1.11.0...1.11.1) (2018-12-06)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* scss ([ac04e9d](https://github.com/alibaba-fusion/next/commit/ac04e9d))",
            "",
            "",
            "",
            "",
            "<a name=\"1.11.0\"></a>",
            "# [1.11.0](https://github.com/alibaba-fusion/next/compare/1.10.3...1.11.0) (2018-12-05)",
            "",
            "",
            "### Features",
            "",
            "* **Select/Input/Message:** rtl supported in Select/Input/Message ([3bb15c8](https://github.com/alibaba-fusion/next/commit/3bb15c8))",
            "* **Affix:** implement affix by {position: absolute} ([da3e3ec](https://github.com/alibaba-fusion/next/commit/da3e3ec))",
            "* **Balloon:** support rtl ([64522d1](https://github.com/alibaba-fusion/next/commit/64522d1))",
            "* **Button:** support rtl ([d863787](https://github.com/alibaba-fusion/next/commit/d863787))",
            "* **Calendar:** support rtl ([d1c1e44](https://github.com/alibaba-fusion/next/commit/d1c1e44))",
            "* **ConfigProvider:** config-provider support rtl ([e91591a](https://github.com/alibaba-fusion/next/commit/e91591a))",
            "* **ConfigProvider:** support set global rtl ([622dda4](https://github.com/alibaba-fusion/next/commit/622dda4))",
            "* **DatePicker:** support rtl ([2d140fb](https://github.com/alibaba-fusion/next/commit/2d140fb))",
            "* **Dialog:** add rtl support ([bd3a66e](https://github.com/alibaba-fusion/next/commit/bd3a66e))",
            "* **Icon:** support rtl ([027fa40](https://github.com/alibaba-fusion/next/commit/027fa40)) ([fc5c02b](https://github.com/alibaba-fusion/next/commit/fc5c02b))",
            "* **Menu:** support rtl ([5241d7b](https://github.com/alibaba-fusion/next/commit/5241d7b))",
            "* **Nav:** support rtl ([923593a](https://github.com/alibaba-fusion/next/commit/923593a))",
            "* **Overlay:** add rtl prop for overlay ([6d77142](https://github.com/alibaba-fusion/next/commit/6d77142)) ([e5630de](https://github.com/alibaba-fusion/next/commit/e5630de))",
            "* **Pagination:** support rtl ([d34959c](https://github.com/alibaba-fusion/next/commit/d34959c))",
            "* **Progress:** add color & backgroundColor props ([1e9cd94](https://github.com/alibaba-fusion/next/commit/1e9cd94))",
            "* **Progress:** add rtl support ([cbe6747](https://github.com/alibaba-fusion/next/commit/cbe6747))",
            "* **Radio:** support rtl ([6a906a9](https://github.com/alibaba-fusion/next/commit/6a906a9))",
            "* **Search:** add rtl to search ([931729a](https://github.com/alibaba-fusion/next/commit/931729a))",
            "* **Slider:** support rtl ([c7416ab](https://github.com/alibaba-fusion/next/commit/c7416ab))",
            "* **Step:** support rtl ([a0645a0](https://github.com/alibaba-fusion/next/commit/a0645a0))",
            "* **Timeline:** support rtl ([0f3860b](https://github.com/alibaba-fusion/next/commit/0f3860b))",
            "* **TimePicker:** support rtl ([310155a](https://github.com/alibaba-fusion/next/commit/310155a))",
            "",
            "",
            "<a name=\"1.10.3\"></a>",
            "## [1.10.3](https://github.com/alibaba-fusion/next/compare/1.10.2...1.10.3) (2018-12-05)",
            "",
            "",
            "",
            "",
            "<a name=\"1.10.2\"></a>",
            "## [1.10.2](https://github.com/alibaba-fusion/next/compare/1.10.1...1.10.2) (2018-12-04)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **CascaderSelect:** split of null bug ([1afac48](https://github.com/alibaba-fusion/next/commit/1afac48))",
            "* **Table:** maxBodyHeight both accept Number and String ([552f747](https://github.com/alibaba-fusion/next/commit/552f747))",
            "* **Table:** pass affixProps to affix ([0540cba](https://github.com/alibaba-fusion/next/commit/0540cba))",
            "* **Tree:** selectable=false cursor:default ([66bc721](https://github.com/alibaba-fusion/next/commit/66bc721))",
            "",
            "",
            "",
            "",
            "<a name=\"1.10.1\"></a>",
            "## [1.10.1](https://github.com/alibaba-fusion/next/compare/1.10.0...1.10.1) (2018-11-29)",
            "",
            "",
            "",
            "",
            "<a name=\"1.10.0\"></a>",
            "# [1.10.0](https://github.com/alibaba-fusion/next/compare/1.9.21...1.10.0) (2018-11-28)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Search:** medium search will overflow box when height = s-7 ([14dfbb0](https://github.com/alibaba-fusion/next/commit/14dfbb0))",
            "* **Search:** pass visible into Autocomplete ([9fae8fe](https://github.com/alibaba-fusion/next/commit/9fae8fe))",
            "",
            "",
            "### Features",
            "",
            "* **Cascader:** add useVirtual prop, open virtual scroller ([769e156](https://github.com/alibaba-fusion/next/commit/769e156))",
            "* **CascaderSelect:**  add useVirtual prop ([a2b724d](https://github.com/alibaba-fusion/next/commit/a2b724d))",
            "* **Form:** Item support function children ([c3ced42](https://github.com/alibaba-fusion/next/commit/c3ced42))",
            "* **Search:** divide $search-normal-corner into medium & large variable ([3903b5e](https://github.com/alibaba-fusion/next/commit/3903b5e))",
            "* **Select:** add item from dataSource to onChange(v,e, item) ([ff0405f](https://github.com/alibaba-fusion/next/commit/ff0405f))",
            "* **Select:** support virtuallist in simple case ([b982efe](https://github.com/alibaba-fusion/next/commit/b982efe))",
            "* **Tag:** add selectable tag theme demos ([dfdd536](https://github.com/alibaba-fusion/next/commit/dfdd536))",
            "* **Transfer:** Support for disabling panel operations ([40f6743](https://github.com/alibaba-fusion/next/commit/40f6743))",
            "* **VirtualList:** add API jumpIndex ([2d137e2](https://github.com/alibaba-fusion/next/commit/2d137e2))",
            "* **VirtualList:** add new component ([29b78f5](https://github.com/alibaba-fusion/next/commit/29b78f5))",
            "* **VirtualList:** consider as items of the same height by default ([c9576ec](https://github.com/alibaba-fusion/next/commit/c9576ec))",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.21\"></a>",
            "## [1.9.21](https://github.com/alibaba-fusion/next/compare/1.9.20...1.9.21) (2018-11-27)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Input:** bug of value=0 with htmlType=number ([0805a38](https://github.com/alibaba-fusion/next/commit/0805a38))",
            "* **Message:** When there are multiple Message, the first can't close ([d3004f4](https://github.com/alibaba-fusion/next/commit/d3004f4))",
            "* **Search:** left border-raduis not 0 ([8713611](https://github.com/alibaba-fusion/next/commit/8713611))",
            "* **Select:** bug of autoWidth ([829f53b](https://github.com/alibaba-fusion/next/commit/829f53b))",
            "* **Select:** bug of autoWidth ([b80e4bb](https://github.com/alibaba-fusion/next/commit/b80e4bb))",
            "* **Select:** bug of onEnter ([17e13cd](https://github.com/alibaba-fusion/next/commit/17e13cd))",
            "* **Select:** double onKeyDown ([4b2e1b3](https://github.com/alibaba-fusion/next/commit/4b2e1b3))",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.20\"></a>",
            "## [1.9.20](https://github.com/alibaba-fusion/next/compare/1.9.19...1.9.20) (2018-11-21)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **ConfigProvider:** Isolate multiple context data ([ca4bbd4](https://github.com/alibaba-fusion/next/commit/ca4bbd4)), closes [#43](https://github.com/alibaba-fusion/next/issues/43)",
            "* **ConfigProvider:** Update cache in expection ([a6c6151](https://github.com/alibaba-fusion/next/commit/a6c6151))",
            "* **Rating:** Enhance robustness ([6e40724](https://github.com/alibaba-fusion/next/commit/6e40724))",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.19\"></a>",
            "## [1.9.19](https://github.com/alibaba-fusion/next/compare/1.9.18...1.9.19) (2018-11-16)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Affix:** update postion in didmount ([1438cdf](https://github.com/alibaba-fusion/next/commit/1438cdf))",
            "* **Checkbox:** Change label type from string to any reanderable ([858083e](https://github.com/alibaba-fusion/next/commit/858083e))",
            "* **DatePicker:** add onChange params type ([5c753f1](https://github.com/alibaba-fusion/next/commit/5c753f1))",
            "* **DatePicker:** disabledHours no use in time end panel ([31e1256](https://github.com/alibaba-fusion/next/commit/31e1256))",
            "* **Range:** Scale tips become hollow on browser zoom ([1ed7f49](https://github.com/alibaba-fusion/next/commit/1ed7f49))",
            "* **Tab:** maxCall exceeded when parent using flex display ([c916d21](https://github.com/alibaba-fusion/next/commit/c916d21))",
            "* **Table:** style chaos when head sticky ([e952632](https://github.com/alibaba-fusion/next/commit/e952632))",
            "* **TreeSelect:**  'key' undefined error without treeCheckable prop ([ca4afe5](https://github.com/alibaba-fusion/next/commit/ca4afe5))",
            "",
            "",
            "### Features",
            "",
            "* **Cascader:** loadData add argument source data ([2ca6a99](https://github.com/alibaba-fusion/next/commit/2ca6a99))",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.18\"></a>",
            "## [1.9.18](https://github.com/alibaba-fusion/next/compare/1.9.17...1.9.18) (2018-11-14)",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.17\"></a>",
            "## [1.9.17](https://github.com/alibaba-fusion/next/compare/1.9.16...1.9.17) (2018-11-13)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Breadcrumb:** fix use Link Tag no style ([503c945](https://github.com/alibaba-fusion/next/commit/503c945))",
            "* **Calendar:** week words error ([674de83](https://github.com/alibaba-fusion/next/commit/674de83))",
            "* **Range:** Prevent right-button dragging ([24b6769](https://github.com/alibaba-fusion/next/commit/24b6769))",
            "* **Tab:** Make bg-color configurable ([c353b1c](https://github.com/alibaba-fusion/next/commit/c353b1c))",
            "* **Upload:** Upload Card no i18n ([27e76b4](https://github.com/alibaba-fusion/next/commit/27e76b4))",
            "* **Calendar:** add api to format cell's label ([7a87917](https://github.com/alibaba-fusion/next/commit/7a87917))",
            "",
            "<a name=\"1.9.16\"></a>",
            "## [1.9.16](https://github.com/alibaba-fusion/next/compare/1.9.15...1.9.16) (2018-11-09)",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.15\"></a>",
            "## [1.9.15](https://github.com/alibaba-fusion/next/compare/1.9.14...1.9.15) (2018-11-02)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Select:** bug of cacheValue=false ([6fce5d8](https://github.com/alibaba-fusion/next/commit/6fce5d8))",
            "* **Select:** bug of cacheValue=false ([bb2acdf](https://github.com/alibaba-fusion/next/commit/bb2acdf))",
            "* **Tab:** content panel collapsed in vertical mode ([9974a22](https://github.com/alibaba-fusion/next/commit/9974a22))",
            "* **Table:** error when lock without header ([9081865](https://github.com/alibaba-fusion/next/commit/9081865))",
            "* **Tree:** error when set expendedKeys/selectedKeys not in dataSource ([cd35aa0](https://github.com/alibaba-fusion/next/commit/cd35aa0))",
            "* **TreeSelect:** error when set value with keys aren't in dataSource ([dc8d9e8](https://github.com/alibaba-fusion/next/commit/dc8d9e8))",
            "* **TreeSelect:** show all tree while searchValue clear ([c04b3d3](https://github.com/alibaba-fusion/next/commit/c04b3d3))",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.14\"></a>",
            "## [1.9.14](https://github.com/alibaba-fusion/next/compare/1.9.13...1.9.14) (2018-10-29)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Locale:** use OK instead of Ok ([9782c6d](https://github.com/alibaba-fusion/next/commit/9782c6d))",
            "* **Search:** add type for search-simple-dark-bg-opacity ([57891de](https://github.com/alibaba-fusion/next/commit/57891de))",
            "* **Select:** minWidth of popupContent ([f6a4883](https://github.com/alibaba-fusion/next/commit/f6a4883))",
            "* **Upload:** error fileList not show ([87195d2](https://github.com/alibaba-fusion/next/commit/87195d2))",
            "* **Search:** add hover color variables ([385ab2d](https://github.com/alibaba-fusion/next/commit/385ab2d))",
            "* **Search:** remove search button box-shadow ([3713040](https://github.com/alibaba-fusion/next/commit/3713040))",
            "* **Search:** use hover-color in main scss ([14aea57](https://github.com/alibaba-fusion/next/commit/14aea57))",
            "",
            "",
            "<a name=\"1.9.13\"></a>",
            "## [1.9.13](https://github.com/alibaba-fusion/next/compare/1.9.12...1.9.13) (2018-10-28)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **TimePicker:** cann't config bg of input ([e5cae7b](https://github.com/alibaba-fusion/next/commit/e5cae7b))",
            "",
            "",
            "",
            "",
            "<a name=\"1.9.12\"></a>",
            "## [1.9.12](https://github.com/alibaba-fusion/next/compare/1.9.11...1.9.12) (2018-10-24)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Balloon:** in theme platform & range ([dd78f6d](https://github.com/alibaba-fusion/next/commit/dd78f6d))",
            "* **scripts:** unify eslint config ([39ced54](https://github.com/alibaba-fusion/next/commit/39ced54))",
            "* **Upload:** add style to reset <a> ([b2b78f5](https://github.com/alibaba-fusion/next/commit/b2b78f5))",
            "",
            "",
            "<a name=\"1.9.11\"></a>",
            "## [1.9.11](https://github.com/alibaba-fusion/next/compare/1.9.10...1.9.11) (2018-10-19)",
            "",
            "<a name=\"1.9.10\"></a>",
            "## [1.9.10](https://github.com/alibaba-fusion/next/compare/1.9.9...1.9.10) (2018-10-19)",
            "",
            "<a name=\"1.9.9\"></a>",
            "## [1.9.9](https://github.com/alibaba-fusion/next/compare/1.9.8...1.9.9) (2018-10-18)",
            "",
            "### Bug Fixes",
            "",
            "* **Input:** input border-radius with one addonText ([b5051cf](https://github.com/alibaba-fusion/next/commit/b5051cf))",
            "* **MenuButton:** remove box-shadow ([6a976ca](https://github.com/alibaba-fusion/next/commit/6a976ca))",
            "* **NumverPicker:** remove box-shadow ([2c3e29f](https://github.com/alibaba-fusion/next/commit/2c3e29f))",
            "",
            "<a name=\"1.9.8\"></a>",
            "## [1.9.8](https://github.com/alibaba-fusion/next/compare/1.9.7...1.9.8) (2018-10-18)",
            "",
            "",
            "<a name=\"1.9.7\"></a>",
            "## [1.9.7](https://github.com/alibaba-fusion/next/compare/1.9.5...1.9.7) (2018-10-17)",
            "",
            "### Bug Fixes",
            "* **Nav:** primary/secondary active border ([4c2c211](https://github.com/alibaba-fusion/next/commit/4c2c211))",
            "* **Menu:** Group.Item cant pass custom className ([eaf25707](https://github.com/alibaba-fusion/next/commit/eaf25707))",
            "",
            "<a name=\"1.9.5\"></a>",
            "## [1.9.5](https://github.com/alibaba-fusion/next/compare/1.9.4...1.9.5) (2018-10-16)",
            "",
            "### Bug Fixes",
            "",
            "* **Util:** Resolve env.isProduction in correct ([190ae61](https://github.com/alibaba-fusion/next/commit/190ae61))",
            "* **Util:** Undefined return statement ([2dcf9d3](https://github.com/alibaba-fusion/next/commit/2dcf9d3))",
            "",
            "",
            "<a name=\"1.9.4\"></a>",
            "## [1.9.4](https://github.com/alibaba-fusion/next/compare/1.9.3...1.9.4) (2018-10-16)",
            "",
            "<a name=\"1.9.3\"></a>",
            "## [1.9.3](https://github.com/alibaba-fusion/next/compare/1.9.2...1.9.3) (2018-10-16)",
            "",
            "",
            "<a name=\"1.9.2\"></a>",
            "## [1.9.2](https://github.com/alibaba-fusion/next/compare/1.9.1...1.9.2) (2018-10-15)",
            "",
            "### Bug Fixes",
            "* **Core:** wrong path ([a94b7d0](https://github.com/alibaba-fusion/next/commit/a94b7d0))",
            "",
            "<a name=\"1.9.1\"></a>",
            "## [1.9.1](https://github.com/alibaba-fusion/next/compare/1.9.0...1.9.1) (2018-10-15)",
            "",
            "### Bug Fixes",
            "* **Progress:** progress number bug ([8fc476d](https://github.com/alibaba-fusion/next/commit/8fc476d))",
            "### Features",
            "* **Next:** add dingtalk qrcode to readme ([da35dfe](https://github.com/alibaba-fusion/next/commit/da35dfe))"
        ]
    },
    "LATESTLOG.md": {
        "classes": "",
        "functions": "",
        "text": [
            "# Latest Log ",
            "",
            "## [1.11.3](https://github.com/alibaba-fusion/next/compare/1.11.2...1.11.3) (2018-12-13)",
            "",
            "",
            "### Bug Fixes",
            "",
            "* **Balloon:** ltr when set rtl on it own ([8cc4a8a](https://github.com/alibaba-fusion/next/commit/8cc4a8a))",
            "* **ConfigProvider:** remove warning when not using rtl ([f59dd15](https://github.com/alibaba-fusion/next/commit/f59dd15))",
            "* **Form:** css hack only in ie9 ([f5e77bc](https://github.com/alibaba-fusion/next/commit/f5e77bc))",
            "* **Input:** loading and hint not cannot occur at the same time ([cf97c99](https://github.com/alibaba-fusion/next/commit/cf97c99))",
            "* **Input:** padding reversed when select arrow translate 180 ([d5e9573](https://github.com/alibaba-fusion/next/commit/d5e9573))",
            "* **Menu:** keyboard not blur ([dda5a16](https://github.com/alibaba-fusion/next/commit/dda5a16))",
            "* **Slider:** dots' trigger area changed from <button> to parent <li> ([346f684](https://github.com/alibaba-fusion/next/commit/346f684))",
            "* **Step:** rtl style bugfix ([cadfec8](https://github.com/alibaba-fusion/next/commit/cadfec8))",
            "* **Table:** Avoid display error when browser scale ([b07b680](https://github.com/alibaba-fusion/next/commit/b07b680))",
            "* **Table:** lock columns cant align with whole table when affixed ([f1531c3](https://github.com/alibaba-fusion/next/commit/f1531c3))",
            "* **Timeline:** timeline-item cannot set className ([23754a3](https://github.com/alibaba-fusion/next/commit/23754a3))",
            "* **Upload:** forbid deleting file when upload is disabled ([e0936e5](https://github.com/alibaba-fusion/next/commit/e0936e5))",
            "* **Upload:** no space between upload and file list ([181517c](https://github.com/alibaba-fusion/next/commit/181517c))",
            "",
            ""
        ]
    },
    "LICENSE": {},
    "README.md": {
        "classes": "",
        "functions": "",
        "text": [
            "# Next Components",
            "",
            "`@alifd/next` is a configurable component library for PC in Fusion Design. It is based on React and supports all modern browsers and IE9+.",
            "",
            "[中文 README](./README.zh-cn.md)",
            "",
            "[![npm package](https://img.shields.io/npm/v/@alifd/next.svg?style=flat-square)](https://www.npmjs.org/package/@alifd/next)",
            "[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)",
            "[![Build Status](https://travis-ci.com/alibaba-fusion/next.svg?token=KAYresHL1UPaaLzUYyx6&branch=master)](https://travis-ci.com/alibaba-fusion/next)",
            "[![codecov](https://codecov.io/gh/alibaba-fusion/next/branch/master/graph/badge.svg?token=FSufKVDhmT)](https://codecov.io/gh/alibaba-fusion/next)",
            "",
            "-   [Quick Start](./site/en-us/quick-start.md)",
            "-   [Use with Theme Package](./site/en-us/theme.md)",
            "-   [Internationalization](./site/en-us/i18n.md)",
            "-   [Deploy Font File](./site/en-us/font-deploy.md)",
            "-   [Contributing](./site/en-us/contributing.md)",
            "",
            "## Join Group",
            "",
            "Use [Dingtalk App](https://www.dingtalk.com/en) scan the Qrcode to join in _Dingtalk Group_ :",
            "",
            "<img alt=\"Join the chat at dingtalk\" src=\"https://img.alicdn.com/tfs/TB1iH9unxnaK1RjSZFtXXbC2VXa-1125-1485.jpg\" width=\"300\">"
        ]
    },
    "README.zh-cn.md": {
        "classes": "",
        "functions": "",
        "text": [
            "# Next Components",
            "",
            "`@alifd/next` 是 Fusion Design 中的面向 PC 端可配置组件库，基于 React 实现，支持所有现代浏览器和 IE9+。",
            "",
            "[English README](./README.md)",
            "",
            "[![npm package](https://img.shields.io/npm/v/@alifd/next.svg?style=flat-square)](https://www.npmjs.org/package/@alifd/next)",
            "[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)",
            "[![Build Status](https://travis-ci.com/alibaba-fusion/next.svg?token=KAYresHL1UPaaLzUYyx6&branch=master)](https://travis-ci.com/alibaba-fusion/next)",
            "[![codecov](https://codecov.io/gh/alibaba-fusion/next/branch/master/graph/badge.svg?token=FSufKVDhmT)](https://codecov.io/gh/alibaba-fusion/next)",
            "",
            "-   [快速开始](./site/zh-cn/quick-start.md)",
            "-   [使用主题包](./site/zh-cn/theme.md)",
            "-   [国际化](./site/zh-cn/i18n.md)",
            "-   [字体文件私有化部署](./site/zh-cn/font-deploy.md)",
            "-   [贡献代码](./site/zh-cn/contributing.md)",
            "",
            "## 加入社区",
            "",
            "扫码*钉钉群* 加入即刻交流与反馈：",
            "",
            "<img alt=\"Join the chat at dingtalk\" src=\"https://img.alicdn.com/tfs/TB1iH9unxnaK1RjSZFtXXbC2VXa-1125-1485.jpg\" width=\"300\">"
        ]
    },
    "index-noreset.scss": {
        "classes": "",
        "functions": "",
        "text": [
            "@import \"lib/affix/index.scss\";",
            "@import \"lib/animate/index.scss\";",
            "@import \"lib/badge/index.scss\";",
            "@import \"lib/balloon/index.scss\";",
            "@import \"lib/breadcrumb/index.scss\";",
            "@import \"lib/button/index.scss\";",
            "@import \"lib/calendar/index.scss\";",
            "@import \"lib/card/index.scss\";",
            "@import \"lib/cascader/index.scss\";",
            "@import \"lib/cascader-select/index.scss\";",
            "@import \"lib/checkbox/index.scss\";",
            "@import \"lib/collapse/index.scss\";",
            "@import \"lib/config-provider/index.scss\";",
            "@import \"lib/date-picker/index.scss\";",
            "@import \"lib/dialog/index.scss\";",
            "@import \"lib/dropdown/index.scss\";",
            "@import \"lib/field/index.scss\";",
            "@import \"lib/form/index.scss\";",
            "@import \"lib/grid/index.scss\";",
            "@import \"lib/icon/index.scss\";",
            "@import \"lib/input/index.scss\";",
            "@import \"lib/loading/index.scss\";",
            "@import \"lib/menu/index.scss\";",
            "@import \"lib/menu-button/index.scss\";",
            "@import \"lib/message/index.scss\";",
            "@import \"lib/nav/index.scss\";",
            "@import \"lib/number-picker/index.scss\";",
            "@import \"lib/overlay/index.scss\";",
            "@import \"lib/pagination/index.scss\";",
            "@import \"lib/paragraph/index.scss\";",
            "@import \"lib/progress/index.scss\";",
            "@import \"lib/radio/index.scss\";",
            "@import \"lib/range/index.scss\";",
            "@import \"lib/rating/index.scss\";",
            "@import \"lib/search/index.scss\";",
            "@import \"lib/select/index.scss\";",
            "@import \"lib/slider/index.scss\";",
            "@import \"lib/split-button/index.scss\";",
            "@import \"lib/step/index.scss\";",
            "@import \"lib/switch/index.scss\";",
            "@import \"lib/tab/index.scss\";",
            "@import \"lib/table/index.scss\";",
            "@import \"lib/tag/index.scss\";",
            "@import \"lib/time-picker/index.scss\";",
            "@import \"lib/timeline/index.scss\";",
            "@import \"lib/transfer/index.scss\";",
            "@import \"lib/tree/index.scss\";",
            "@import \"lib/tree-select/index.scss\";",
            "@import \"lib/upload/index.scss\";",
            "@import \"lib/virtual-list/index.scss\";"
        ]
    },
    "index-with-locales.js": {
        "classes": [],
        "functions": [],
        "text": [
            "var next = require('./index');",
            "",
            "next.locales = {};",
            "next.locales['en-us'] = require('./lib/locale/en-us.js');",
            "next.locales['ja-ja'] = require('./lib/locale/ja-jp.js');",
            "next.locales['zh-cn'] = require('./lib/locale/zh-cn.js');",
            "next.locales['zh-tw'] = require('./lib/locale/zh-tw.js');",
            "",
            "module.exports = next;"
        ]
    },
    "index.js": {
        "classes": [],
        "functions": [],
        "text": [
            "var next = require('./lib/index.js');",
            "",
            "next.version = '1.11.3';",
            "",
            "module.exports = next;"
        ]
    },
    "index.scss": {
        "classes": "",
        "functions": "",
        "text": [
            "@import \"./reset.scss\";",
            "@import \"./index-noreset.scss\";"
        ]
    },
    "package.json": {},
    "reset.scss": {
        "classes": "",
        "functions": "",
        "text": [
            "@import \"lib/core/reset.scss\";"
        ]
    },
    "variables.scss": {
        "classes": "",
        "functions": "",
        "text": [
            "@import \"lib/core/util/_mixin.scss\";",
            "@import \"lib/core/util/_function.scss\";",
            "@import \"lib/core/style/_global.scss\";",
            "@import \"lib/core/style/_size.scss\";",
            "@import \"lib/core/style/_color.scss\";",
            "@import \"lib/core/style/_corner.scss\";",
            "@import \"lib/core/style/_font.scss\";",
            "@import \"lib/core/style/_line.scss\";",
            "@import \"lib/core/style/_shadow.scss\";",
            "@import \"lib/core/style/_icon.scss\";",
            "@import \"lib/core/utility/_form-element.scss\";",
            "@import \"lib/core/utility/_mask.scss\";",
            "@import \"lib/core/utility/_popup.scss\";",
            "@import \"lib/animate/scss/variable.scss\";",
            "@import \"lib/badge/scss/variable.scss\";",
            "@import \"lib/balloon/scss/variable.scss\";",
            "@import \"lib/breadcrumb/scss/variable.scss\";",
            "@import \"lib/button/scss/variable.scss\";",
            "@import \"lib/calendar/scss/variable.scss\";",
            "@import \"lib/card/scss/variable.scss\";",
            "@import \"lib/cascader/scss/variable.scss\";",
            "@import \"lib/cascader-select/scss/variable.scss\";",
            "@import \"lib/checkbox/scss/variable.scss\";",
            "@import \"lib/collapse/scss/variable.scss\";",
            "@import \"lib/date-picker/scss/variable.scss\";",
            "@import \"lib/dialog/scss/variable.scss\";",
            "@import \"lib/form/scss/variable.scss\";",
            "@import \"lib/grid/scss/variable.scss\";",
            "@import \"lib/input/scss/variable.scss\";",
            "@import \"lib/loading/scss/variable.scss\";",
            "@import \"lib/menu/scss/variable.scss\";",
            "@import \"lib/menu-button/scss/variable.scss\";",
            "@import \"lib/message/scss/variable.scss\";",
            "@import \"lib/nav/scss/variable.scss\";",
            "@import \"lib/number-picker/scss/variable.scss\";",
            "@import \"lib/pagination/scss/variable.scss\";",
            "@import \"lib/paragraph/scss/variable.scss\";",
            "@import \"lib/progress/scss/variable.scss\";",
            "@import \"lib/radio/scss/variable.scss\";",
            "@import \"lib/range/scss/variable.scss\";",
            "@import \"lib/rating/scss/variable.scss\";",
            "@import \"lib/search/scss/variable.scss\";",
            "@import \"lib/select/scss/variable.scss\";",
            "@import \"lib/slider/scss/variable.scss\";",
            "@import \"lib/split-button/scss/variable.scss\";",
            "@import \"lib/step/scss/variable.scss\";",
            "@import \"lib/switch/scss/variable.scss\";",
            "@import \"lib/tab/scss/variable.scss\";",
            "@import \"lib/table/scss/variable.scss\";",
            "@import \"lib/tag/scss/variable.scss\";",
            "@import \"lib/time-picker/scss/variable.scss\";",
            "@import \"lib/timeline/scss/variable.scss\";",
            "@import \"lib/transfer/scss/variable.scss\";",
            "@import \"lib/tree/scss/variable.scss\";",
            "@import \"lib/tree-select/scss/variable.scss\";",
            "@import \"lib/upload/scss/variable.scss\";",
            "@import \"lib/virtual-list/scss/variable.scss\";"
        ]
    },
    "site": {
        "en-us": {
            "contributing.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# Contributing",
                    "",
                    "This guide will show you how to contribute code to `@alifd/next`. Please take a few minutes to read before creating an issue or pull request.",
                    "",
                    "## Open Development",
                    "",
                    "All development work takes place on Github, and whether it's a core team member or an external contributor, the pull request will go through the same review process.",
                    "",
                    "## Branch Organization",
                    "",
                    "* Bug fix, please pull request to master.",
                    "* A new branch like feature/1.10.0 is opened every month, and new feature should be pull request to the branch.",
                    "",
                    "## Create Issue",
                    "",
                    "We use [GitHub Issues] (https://github.com/alibaba-fusion/next/issues) to track bugs and features. When creating an issue, please select Bug report or Feature request [https://github.com/alibaba-fusion/next/issues/new/choose] template and fill in the necessary information to help us quickly locate and resolve the problem.",
                    "",
                    "Also, before you report a bug or submit a feature, make sure you have already searched for an existing issue.",
                    "",
                    "## Pull Request",
                    "",
                    "We will focus on all pull requests, review and merge your code, and may ask you to make some changes or tell you why we can't accept such changes.",
                    "",
                    "Before you send a Pull Request, please make sure you follow the steps below:",
                    "",
                    "1. Make changes based on the **correct branch** described above.",
                    "",
                    "2. Run `npm install` in the project root directory to install all development dependencies.",
                    "",
                    "3. If you want to update the code of the Button component, run `npm run dev -- button` in the project root directory, it will automatically launch the browser for you and open the demo page.",
                    "",
                    "4. If you fix a bug or add a new feature, be sure to write the test case. You can start all the components test case by running `npm run test` in the root directory, and you can also use `npm run test -- button` to run the test case for the specified component during development.",
                    "",
                    "5. Make sure that the code you've modified passes the eslint and stylelint checks, and we'll automate the lint on the code files you've added to the git cache during the precommit phase.",
                    "",
                    "6. Make sure your git commit message format meets our requirements: `<type>(<scope>): <subject>`, `type` is required, optional values include: build|",
                    "Chore|ci|docs|feat|fix|perf|refactor|revert|style|test|temp; `scope` is required, fill in the specific modified component name, such as `feat(Menu)`, if it is a bulk modification or other changes, you can write as `*`, such as `chore(*)`; `subject` is required, please use English, start with lowercase, if you close the issue, you should write such as `fix(Menu): resolve xxx issue, close #12 `, we will check the submission information in the git commit message phase.",
                    "",
                    "7. If a pull request has multiple commits, rebase the multiple commit record to one commit record.",
                    "",
                    "## Development Workflow",
                    "After you clone the `@alifd/next` and install the dependencies with `npm install`, you can also run the following commands:",
                    "",
                    "* `npm run dev -- component` start the debug page of the specified component",
                    "",
                    "* `npm run test -- component` start the test case of the specified component",
                    "",
                    "* `npm run api -- component` update the Chinese API documentation for the specified component automatically based on the code and comments",
                    "",
                    "* `npm run test` start test case of all components",
                    "",
                    "* `npm run build` compile es2015+ code to es5 and generate lib and es directories",
                    "",
                    "* `npm run pack` package the file and generate the dist directory"
                ]
            },
            "font-deploy.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# Deploy font file",
                    "",
                    "In `@alifd/next`, the icon font file is from at.alicdn.com, and the robot font file is from i.alicdn.com. If users of your site cannot access the above cdn assets or you want to deploy these font assets to the internal network. The following options can be taken:",
                    "",
                    "## Icon Font file",
                    "replace the variable that represents the path to the icon font file:",
                    "",
                    "1. use the index.scss of the theme package directly",
                    "",
                    "    at the application's scss entry, inject the $icon-font-path variable before importing the index.scss of the theme package:",
                    "",
                    "    ``` scss",
                    "    $icon-font-path: \"//g.alicdn.com/icon-font-path\";",
                    "    @import \"~@alifd/theme-xxx/index.scss\";",
                    "    ```",
                    "",
                    "2. modular import js/scss",
                    "",
                    "    use @alifd/next-theme-loader(with webpack 2+ as an example):",
                    "",
                    "    ``` js",
                    "    {",
                    "      test: /\\.scss$/,",
                    "      use: ExtractTextPlugin.extract({",
                    "        use: [",
                    "          'css-loader',",
                    "          'fast-sass-loader',",
                    "          {",
                    "            loader: '@alifd/next-theme-loader',",
                    "            options: {",
                    "              theme: '@alifd/theme-xxx',",
                    "              modifyVars: {",
                    "                '$icon-font-path': '\"//g.alicdn.com/icon-font-path\"'",
                    "              }",
                    "            }",
                    "          }",
                    "        ]",
                    "      })",
                    "    }",
                    "    ```",
                    "",
                    "Upload the font file to the static resource server or cdn, such as",
                    "",
                    "//g.alicdn.com/icon-font-path, which should have the following 4 files:",
                    "",
                    "```",
                    "icon-font.eot",
                    "icon-font.woff",
                    "icon-font.ttf",
                    "icon-font.svg",
                    "```",
                    "",
                    "**Note:** the icon font file address can be found in the variables.scss of the theme package:",
                    "",
                    "![](https://img.alicdn.com/tfs/TB1u.I8qtknBKNjSZKPXXX6OFXa-620-329.png)",
                    "",
                    "Another thing to note is that each time you add or replace an icon, after re-publishing the theme package, the icon variables will be updated and the icon font file will need to be re-uploaded to your own static resource server.",
                    "",
                    "",
                    "## Robot Font File",
                    "replace the variable that represents the path to the roboto font file:",
                    "",
                    "1. use the index.scss of the theme package directly",
                    "",
                    "    at the application's scss entry, inject the $font-custom-path variable before importing the index.scss of the theme package:",
                    "",
                    "    ``` scss",
                    "    // Note, finally end with /",
                    "    $font-custom-path: \"//g.alicdn.com/font-path/\";",
                    "    @improt \"~@alifd/theme-xxx/index.scss\";",
                    "    ```",
                    "",
                    "2. modular import js/scss",
                    "",
                    "    use @alifd/next-theme-webpack-plugin:",
                    "",
                    "    ``` js",
                    "    new ThemePlugin({",
                    "      theme: '@alifd/theme-xxx',",
                    "      modifyVars: {",
                    "        // Note, finally end with /",
                    "        '$font-custom-path': '\"//g.alicdn.com/font-path/\"'",
                    "      }",
                    "    })",
                    "    ```",
                    "",
                    "Upload the font file to the static resource server or cdn, such as",
                    "",
                    "//g.alicdn.com/font-path, which should have the following 20 files:",
                    "",
                    "```",
                    "roboto-thin.eot",
                    "roboto-thin.woff",
                    "roboto-thin.woff2",
                    "roboto-thin.ttf",
                    "roboto-light.eot",
                    "roboto-light.woff",
                    "roboto-light.woff2",
                    "roboto-light.ttf",
                    "roboto-regular.eot",
                    "roboto-regular.woff",
                    "roboto-regular.woff2",
                    "roboto-regular.ttf",
                    "roboto-medium.eot",
                    "roboto-medium.woff",
                    "roboto-medium.woff2",
                    "roboto-medium.ttf",
                    "roboto-bold.eot",
                    "roboto-bold.woff",
                    "roboto-bold.woff2",
                    "roboto-bold.ttf",
                    "```",
                    "",
                    "The above 20 font files are packaged: [robot-font.zip](https://files.alicdn.com/tpsservice/31b61ac0c41fac383a1bffd154674347.zip)"
                ]
            },
            "i18n.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# Internationalization",
                    "",
                    "`@alifd/next` The current default language is Chinese. If you need to use other languages, you can see to the following guide:",
                    "",
                    "## ConfigProvider",
                    "",
                    "Currently support Simplified Chinese, Traditional Chinese, English and Japanese:",
                    "",
                    "``` js",
                    "import { ConfigProvider, DatePicker } from '@alifd/next';",
                    "import enUS from '@alifd/next/lib/locale/en-us';",
                    "// import zhCN from '@alifd/next/lib/locale/zh-cn';",
                    "// import zhTW from '@alifd/next/lib/locale/zh-tw';",
                    "// import jaJP from '@alifd/next/lib/locale/ja-jp';",
                    "",
                    "// If the application directly import the next-with-locales.js file on cdn",
                    "// Need to import language file as follows:",
                    "// const { ConfigProvider, DatePicker, locales } = window.Next;",
                    "// const enUS = locales['en-us'];",
                    "",
                    "",
                    "class App extends React.Component {",
                    "    render() {",
                    "        return (",
                    "            <ConfigProvider locale={enUS}>",
                    "                <DatePicker />",
                    "            </ConfigProvider>",
                    "        );",
                    "    }",
                    "}",
                    "```",
                    "",
                    "## Moment",
                    "",
                    "`@alifd/next` use [moment](https://github.com/moment/moment) library to implement date-time related component, and it has internationalization-related capabilities. We use it as peerDependencies, so users need to import the cdn file moment-with-locales.js or install locally in your application. For the latter, because of importing the locale file, there is such code in moment: `require('./locale/' + name)`, if it is built with webpack, it will be packaged into all locale files, increasing the size of the file after packing. At present, there are two main solutions of the community:",
                    "",
                    "",
                    "``` js",
                    "const webpack = require('webpack');",
                    "",
                    "module.exports = {",
                    "  // ...",
                    "  plugins: [",
                    "    // package the specified language file",
                    "    new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /zh-cn|ja/)",
                    "    // only the language files that have been referenced are packaged, and the application needs to be added as follows: `import 'moment/locale/zh-cn';`",
                    "    // new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)",
                    "  ]",
                    "};",
                    "```"
                ]
            },
            "index.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# Index",
                    "",
                    "---",
                    "",
                    "- [Quick Start](quick-start.md)",
                    "- [Use with Theme Package](theme.md)",
                    "- [Internationalization](i18n.md)",
                    "- [Deploy Font File](font-deploy.md)",
                    "- [Contributing](contributing.md)"
                ]
            },
            "quick-start.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# Quick Start",
                    "",
                    "`@alifd/next` is a configurable component library for PC in Fusion Design. It is based on React and supports all modern browsers and IE9+.",
                    "",
                    "## Install",
                    "",
                    "### 1.Use NPM ( Recommend )",
                    "",
                    "```",
                    "npm install @alifd/next --save",
                    "```",
                    "",
                    "### 2.Import in Browser",
                    "",
                    "Use the script and link tags in the browser to directly import the file and use the global variable Next. We provide files such as next.js/next.min.js and next.css/next.min.css in the `@alifd/next/dist` directory in the npm package, or via [unpkg](https:/ /unpkg.com/@alifd/next/dist/) Download it.",
                    "",
                    "``` html",
                    "<link rel=\"stylesheet\" href=\"https://unpkg.com/@alifd/next/dist/next.css\">",
                    "",
                    "<script src=\"https://unpkg.com/@alifd/next/dist/next.js\"></script>",
                    "",
                    "// The above ways import latest @alifd/next, we recommend you specify version.",
                    "<script src=\"https://unpkg.com/@alifd/next@1.8.6/dist/next.min.js\"></script>",
                    "",
                    "// Or import as your own static resource",
                    "<script src=\"../build/public/@alifd/next.js\"></script>",
                    "```",
                    "",
                    "## Dependencies",
                    "",
                    "* `@alifd/next` is based on `react@16` development and is currently not compatible with versions below `react@16`. react/react-dom is used as peerDependencies, which requires the user to manually install or import it.",
                    "* `@alifd/next` use [moment](https://github.com/moment/moment) library to implement date-time related component. moment is also used as peerDependencies, which requires the user to manually install or import it.",
                    "",
                    "## Import",
                    "",
                    "### Import All",
                    "",
                    "",
                    "``` js",
                    "import '@alifd/next/dist/next.css';",
                    "// import '@alifd/next/index.scss';",
                    "",
                    "import { Button, Input } from '@alifd/next';",
                    "```",
                    "",
                    "### Import module with plugin",
                    "",
                    "",
                    "#### 1. Import module manually",
                    "",
                    "``` js",
                    "import Button from '@alifd/next/lib/button';",
                    "import '@alifd/next/lib/button/style';",
                    "```",
                    "",
                    "#### 2. Use with [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) ( Recommend )",
                    "",
                    "``` js",
                    "// webpack babel loader option or .babelrc",
                    "{",
                    "  // ...",
                    "  plugins: [",
                    "    ['babel-plugin-import', {",
                    "      libraryName: '@alifd/next',",
                    "      style: true",
                    "    }]",
                    "  ]",
                    "}",
                    "```",
                    "",
                    "It will transform code as below",
                    "",
                    "``` js",
                    "import { Button } from '@alifd/next';",
                    "```",
                    "",
                    "to",
                    "",
                    "``` js",
                    "import Button from '@alifd/next/lib/button';",
                    "import '@alifd/next/lib/button/style';",
                    "```",
                    "",
                    "",
                    "## Release Schedule",
                    "",
                    "Follow [Semantic Versioning 2.0.0](https://semver.org/) Semantic Version Strategy.",
                    "",
                    "Patch Version: Every Monday release of a bugfix version(anytime for urgent bugfix).",
                    "",
                    "Minor Version: Monthly release of a backward compatible version with new features.",
                    "",
                    "Major version: contains some break changes, usually one to two years release of a version."
                ]
            },
            "theme.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# Use with Theme Package",
                    "",
                    "If the default theme style does not meet your visual needs, you can configure a custom theme style package with the powerful style configuration capabilities provided by Fusion Design. It is essentially a scss variable package, maintained by an npm package, below The documentation uses the `@alifd/theme-xxx` example to illustrate the use of the theme package.",
                    "",
                    "## Install",
                    "",
                    "```",
                    "npm install @alifd/theme-xxx --save",
                    "```",
                    "",
                    "## Import",
                    "",
                    "### Import All",
                    "",
                    "``` js",
                    "import '@alifd/theme-xxx/index.scss';",
                    "// import '@alifd/theme-xxx/dist/next.css';",
                    "",
                    "import { Button, Input } from '@alifd/next';",
                    "```",
                    "",
                    "**Note:** If you are using a pre-compiled css file in the theme package, after upgrading the dependent next package, please upgrade the theme package to the corresponding component package version to prevent potential problems caused by js/css mismatch.",
                    "",
                    "### Import Modular",
                    "Except as mentioned in the Quick Start section [babel-plugin-import] (https://github.com/ant-design/babel-plugin-import), you also need to use [@alifd/next-theme-loader]( Https://github.com/alibaba-fusion/next-theme-loader) and [@alifd/next-theme-webpack-plugin](https://github.com/alibaba-fusion/next-theme-webpack- Plugin), refer to the following webpack configuration:",
                    "",
                    "``` js",
                    "const path = require('path');",
                    "const webpack = require('webpack');",
                    "const ThemePlugin = require('@alifd/next-theme-webpack-plugin');",
                    "const ExtractTextPlugin = require('extract-text-webpack-plugin');",
                    "",
                    "module.exports = {",
                    "  entry: {",
                    "    index: './src/index.jsx'",
                    "  },",
                    "  output: {",
                    "    path: path.join(__dirname, 'build'),",
                    "    filename: '[name].js'",
                    "  },",
                    "  resolve: {",
                    "    extensions: ['.js', '.jsx']",
                    "  },",
                    "  devtool: 'inline-source-map',",
                    "  module: {",
                    "    rules: [{",
                    "      test: /\\.jsx?$/,",
                    "      use: {",
                    "        loader: 'babel-loader',",
                    "        options: {",
                    "          presets: [",
                    "            'env',",
                    "            'react',",
                    "            'stage-0'",
                    "          ],",
                    "          plugins: [",
                    "            'add-module-exports',",
                    "            'transform-decorators-legacy',",
                    "            ['babel-plugin-import', { style: true }]",
                    "          ]",
                    "        }",
                    "      },",
                    "      exclude: /node_modules/",
                    "    }, {",
                    "      test: /\\.css$/,",
                    "      use: ExtractTextPlugin.extract({",
                    "        use: 'css-loader'",
                    "      })",
                    "    }, {",
                    "      test: /\\.scss$/,",
                    "      use: ExtractTextPlugin.extract({",
                    "        use: [",
                    "          'css-loader',",
                    "          'fast-sass-loader',",
                    "          {",
                    "            // add @alifd/next-theme-loader to inject the scss variable of the custom theme package",
                    "            loader: '@alifd/next-theme-loader',",
                    "            options: {",
                    "              theme: '@alifd/theme-xxx'",
                    "            }",
                    "          }",
                    "        ]",
                    "      })",
                    "    }]",
                    "  },",
                    "  plugins: [",
                    "    // add @alifd/next-theme-webpack-plugin to inject normalize css and custom icon css",
                    "    new ThemePlugin({ theme: '@alifd/theme-xxx' }),",
                    "    new ExtractTextPlugin('[name].css')",
                    "  ]",
                    "};",
                    "```"
                ]
            }
        },
        "zh-cn": {
            "contributing.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# 贡献代码",
                    "",
                    "这篇指南会指导你如何为 `@alifd/next` 贡献代码，请你在提 issue 或者 pull request 前花几分钟来阅读下。",
                    "",
                    "## 透明的开发",
                    "",
                    "所有的开发工作都发生在 Github 上，不论是核心团队成员还是外部的贡献者，pull request 后都会走相同的 review 流程。",
                    "",
                    "## 分支管理",
                    "",
                    "* 日常 bug 修复，向 master 提交 pull request",
                    "* 每月新开一个如 feature/1.10.0 分支，新增功能向该分支提交 pull request",
                    "",
                    "## 创建 Issue",
                    "",
                    "我们使用 [GitHub Issues](https://github.com/alibaba-fusion/next/issues) 来做 bug 和 feature 的追踪。在提交 Issue 时请选择 Bug report 或 Feature request [对应的模版](https://github.com/alibaba-fusion/next/issues/new/choose)，填入必要信息，以帮助我们快速定位以及解决问题。",
                    "",
                    "另外，在你报告一个 bug 或提交一个 feature 之前，请先确保已经搜索过已有的 issue。",
                    "",
                    "## Pull Request",
                    "",
                    "我们会关注所有的 pull request，review 以及合并你的代码，也有可能要求你做一些修改或者告诉你我们为什么不能接受这样的修改。",
                    "",
                    "在你发送 Pull Request 之前，请确认你是按照下面的步骤来做的：",
                    "",
                    "1. 基于上文所述**正确的分支**做修改",
                    "",
                    "2. 在项目根目录执行 `npm install`，安装所有开发依赖",
                    "",
                    "3. 如果你想修改 Button 组件的代码，在项目根目录执行 `npm run dev -- button`，会自动为你启动浏览器并打开 demo 页面",
                    "",
                    "4. 如果你修复了一个 bug 或者新增了一个功能，请确保写了相应的测试，可以通过在根目录执行 `npm run test` 来启动所有组件的测试，在开发过程中可以用 `npm run test -- button` 来运行指定组件的测试。",
                    "",
                    "5. 请确保你修改的代码通过了 eslint 和 stylelint 检查，我们会在 precommit 阶段中对你加入到 git 缓存区的代码文件自动执行 lint。",
                    "",
                    "6. 请确保你的 git 提交信息格式符合我们的以下要求：格式为 `<type>(<scope>): <subject>`，`type` 必填，可选值包括: build|",
                    "chore|ci|docs|feat|fix|perf|refactor|revert|style|test|temp；`scope` 必填，填写具体修改的组件名，如 `feat(Menu)`，如进行批量修改或其他改动，可写为 `*`，如 `chore(*)`；`subject` 必填，使用英文，小写开头，如若关闭 issue，可写为，如 `fix(Menu): resolve xxx issue, close #12`，我们会在 commit message 阶段对提交信息进行检查",
                    "",
                    "7. 如果一次 pull request 涉及到多次提交，请对提交记录进行 rebase 操作，缩减为一条提交记录",
                    "",
                    "## 开发流程",
                    "在你 clone 了 `@alifd/next` 的代码仓库并且使用 `npm install` 安装完依赖后，你还可以运行下面几个常用的命令：",
                    "",
                    "* `npm run dev -- component` 启动指定组件的调试页面",
                    "",
                    "* `npm run test -- component` 启动指定组件的测试",
                    "",
                    "* `npm run api -- component` 根据代码和注释，自动更新指定组件的中文 API 文档",
                    "",
                    "* `npm run test` 启动所有组件的测试",
                    "",
                    "* `npm run build` 编译 es2015+ 代码生成 lib 和 es 目录",
                    "",
                    "* `npm run pack` 打包文件，生成 dist 目录"
                ]
            },
            "font-deploy.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# 字体文件私有化部署",
                    "",
                    "`@alifd/next` 组件库默认引用的图标字体文件来自 at.alicdn.com，robot 字体文件来自 i.alicdn.com，如果你站点的用户无法访问上述 cdn 或者想将这些字体资源部署到内部网络，可以采取以下的方案：",
                    "",
                    "## 图标字体文件",
                    "替换表示图标字体文件路径的变量：",
                    "",
                    "1. 直接使用主题包的 index.scss 文件",
                    "",
                    "    在应用的 scss 入口处，引用主题包 index.scss 文件前，注入 $icon-font-path 变量：",
                    "",
                    "    ``` scss",
                    "    $icon-font-path: \"//g.alicdn.com/icon-font-path\";",
                    "    @import \"~@alifd/theme-xxx/index.scss\";",
                    "    ```",
                    "",
                    "2. 按需加载组件的 js/scss",
                    "",
                    "    使用 @alifd/next-theme-loader，进行以下配置(以 webpack 2+ 为例)：",
                    "",
                    "    ``` js",
                    "    {",
                    "      test: /\\.scss$/,",
                    "      use: ExtractTextPlugin.extract({",
                    "        use: [",
                    "          'css-loader',",
                    "          'fast-sass-loader',",
                    "          {",
                    "            loader: '@alifd/next-theme-loader',",
                    "            options: {",
                    "              theme: '@alifd/theme-xxx',",
                    "              modifyVars: {",
                    "                '$icon-font-path': '\"//g.alicdn.com/icon-font-path\"'",
                    "              }",
                    "            }",
                    "          }",
                    "        ]",
                    "      })",
                    "    }",
                    "    ```",
                    "",
                    "上传字体文件到静态资源服务器或者 cdn 上，如",
                    "",
                    "//g.alicdn.com/icon-font-path，其下应有以下4个文件：",
                    "",
                    "```",
                    "icon-font.eot",
                    "icon-font.woff",
                    "icon-font.ttf",
                    "icon-font.svg",
                    "```",
                    "",
                    "**Note:** 图标字体文件地址可以在主题包里的 variables.scss 文件中获取：",
                    "",
                    "![](https://img.alicdn.com/tfs/TB1u.I8qtknBKNjSZKPXXX6OFXa-620-329.png)",
                    "",
                    "另外需要注意的是每次添加或替换图标，重新发布主题包后，该变量都会被更新，需要重新上传到自己的静态资源服务器。",
                    "",
                    "## robot 字体文件",
                    "替换表示 roboto 字体文件路径的变量：",
                    "",
                    "1. 直接使用主题包的 index.scss 文件",
                    "",
                    "    在应用的 scss 入口处，引用主题包 index.scss 文件前，注入 $font-custom-path 变量：",
                    "",
                    "    ``` scss",
                    "    // 注意，最后以 / 结束",
                    "    $font-custom-path: \"//g.alicdn.com/font-path/\";",
                    "    @improt \"~@alifd/theme-xxx/index.scss\";",
                    "    ```",
                    "",
                    "2. 按需加载组件的 js/scss",
                    "",
                    "    使用 @alifd/next-theme-webpack-plugin 进行如下配置：",
                    "",
                    "    ``` js",
                    "    new ThemePlugin({",
                    "      theme: '@alifd/theme-xxx',",
                    "      modifyVars: {",
                    "        // 注意，最后以 / 结束",
                    "        '$font-custom-path': '\"//g.alicdn.com/font-path/\"'",
                    "      }",
                    "    })",
                    "    ```",
                    "",
                    "上传字体文件到静态资源服务器或者 cdn 上，如",
                    "",
                    "//g.alicdn.com/font-path/ 其下应有以下20个文件：",
                    "",
                    "```",
                    "roboto-thin.eot",
                    "roboto-thin.woff",
                    "roboto-thin.woff2",
                    "roboto-thin.ttf",
                    "roboto-light.eot",
                    "roboto-light.woff",
                    "roboto-light.woff2",
                    "roboto-light.ttf",
                    "roboto-regular.eot",
                    "roboto-regular.woff",
                    "roboto-regular.woff2",
                    "roboto-regular.ttf",
                    "roboto-medium.eot",
                    "roboto-medium.woff",
                    "roboto-medium.woff2",
                    "roboto-medium.ttf",
                    "roboto-bold.eot",
                    "roboto-bold.woff",
                    "roboto-bold.woff2",
                    "roboto-bold.ttf",
                    "```",
                    "",
                    "以上20个字体文件打包下载地址：[robot-font.zip](https://files.alicdn.com/tpsservice/31b61ac0c41fac383a1bffd154674347.zip)"
                ]
            },
            "i18n.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# 国际化",
                    "",
                    "`@alifd/next` 目前的默认文案是中文，如果需要使用其他语言，可以参考下面的方案：",
                    "## 组件国际化",
                    "组件内置文案国际化能力由 ConfigProvider提供,目前支持以下语言:",
                    "",
                    "| 语言名称  | 文件名 |",
                    "| --------  | -------- |",
                    "| 简体中文     | zh-cn     |",
                    "| 繁体中文     | zh-tw     |",
                    "| 美式英语     | en-us    |",
                    "| 日文     | ja-jp     |",
                    "",
                    "### 指定多语言文案",
                    "",
                    "目前 Fusion 内置的 locale 库支持中英繁日四种语言，覆盖各组件的简单词汇，例如：确定、取消、展开、收起、下一页等， 简单词汇映射表可参考 https://unpkg.com/@alifd/next/lib/locale/",
                    "",
                    "可通过两种方式设置多语言文案，两种方式接收的对象格式略有不同:",
                    "1. 设置组件自身 locale 属性",
                    "```jsx",
                    "const localeDatePicker = {",
                    "    key1: value1,",
                    "    key2: value2",
                    "}",
                    "<DatePicker locale={localeDatePicker}>",
                    "",
                    "```",
                    "2. ConfigProvider 的 locale 属性 (推荐)",
                    "```jsx",
                    "cosnt localeObj = {",
                    "    component1: {",
                    "        key1: value1,",
                    "        key2: value2",
                    "    },",
                    "    component2: {",
                    "        key1: value1,",
                    "        key2: value2",
                    "    }",
                    "}",
                    "",
                    "<ConfigProvider locale={localeObj}>",
                    "",
                    "```",
                    "",
                    "优先级顺序为: 组件自身 locale > 最近 ConfigProvider 的 locale > 更远父级 ConfigProvider 的 locale",
                    "",
                    "```jsx",
                    "import { ConfigProvider, DatePicker } from '@alifd/next';",
                    "",
                    "const localeDatePicker = {",
                    "  placeholder: 'localeDatePicker placeholder'",
                    "};",
                    "",
                    "const localeGlobal = {",
                    "  DatePicker: {",
                    "    placeholder: 'localeGlobal placeholder'",
                    "  }",
                    "};",
                    "",
                    "class App extends React.Component {",
                    "    render() {",
                    "        return (",
                    "            <div>",
                    "                <ConfigProvider locale={localeGlobal}>",
                    "                    <DatePicker /> will be 'localeGlobal placeholder'",
                    "                </ConfigProvider>",
                    "                <br />",
                    "                <br />",
                    "                <ConfigProvider locale={localeGlobal}>",
                    "                    <DatePicker locale={localeDatePicker} /> will be 'localeDatePicker placeholder'",
                    "                </ConfigProvider>",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "```",
                    "",
                    "",
                    "根据引入组件库方式的不同(CDN直接引用、作为依赖引用)，使用语言包的方式略有差异，具体见如下代码：",
                    "",
                    "",
                    "```js",
                    "import { ConfigProvider, DatePicker } from '@alifd/next';",
                    "import enUS from '@alifd/next/lib/locale/en-us';",
                    "// import zhCN from '@alifd/next/lib/locale/zh-cn';",
                    "// import zhTW from '@alifd/next/lib/locale/zh-tw';",
                    "// import jaJP from '@alifd/next/lib/locale/ja-jp';",
                    "",
                    "// 如果应用中直接引入的是 cdn 上的 next-with-locales.js 文件",
                    "// 需要按照下面的方式引入国际化文案文件",
                    "// const { ConfigProvider, DatePicker, locales } = window.Next;",
                    "// const enUS = locales['en-us'];",
                    "",
                    "",
                    "class App extends React.Component {",
                    "    render() {",
                    "        return (",
                    "            <ConfigProvider locale={enUS}>",
                    "                <DatePicker />",
                    "            </ConfigProvider>",
                    "        );",
                    "    }",
                    "}",
                    "```",
                    "",
                    "如果内置的 locale 库不满足你的需求(比如想支持法语、德语、西班牙语)，你也可以参考 https://unpkg.com/@alifd/next/lib/locale/ 来自定义语言包。**欢迎大家提交PR,增加语种**",
                    "",
                    "```js",
                    "{",
                    "    DatePicker: {",
                    "        datePlaceholder: 'Select date',",
                    "        monthPlaceholder: 'Select month',",
                    "        yearPlaceholder: 'Select year',",
                    "        rangeStartPlaceholder: 'Start date',",
                    "        rangeEndPlaceholder: 'End date',",
                    "        ok: 'OK',",
                    "        clear: 'Clear'",
                    "    },",
                    "    Dialog: {",
                    "        // ...",
                    "    },",
                    "    // ...",
                    "}",
                    "```",
                    "",
                    "",
                    "## 日期国际化",
                    "",
                    "`@alifd/next` 在处理日期时间相关组件逻辑时，使用了 [moment](https://github.com/moment/moment) 库，自带国际化相关能力，我们将其作为 peerDependencies，所以用户需要自己在应用中引入 moment 的 cdn 文件 moment-with-locales.js 或者本地安装 moment 打包进自己的应用。",
                    "对于后者，由于 moment 在引入 locale 文件时存在这样的代码：`require('./locale/' + name)`，如果用 webpack 构建，会打包进所有的 locale 文件，增加构建后文件的体积，目前社区比较主流的解决方案有以下两种：",
                    "",
                    "``` js",
                    "const webpack = require('webpack');",
                    "",
                    "module.exports = {",
                    "  // ...",
                    "  plugins: [",
                    "    // 打包指定需要的语言文件",
                    "    new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /zh-cn|ja/)",
                    "    // 只打包有过引用的语言文件，应用中需要添加如：`import 'moment/locale/zh-cn';`",
                    "    // new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)",
                    "  ]",
                    "};",
                    "```",
                    "",
                    "## 内容国际化",
                    "除了组件本身和日期,还有货币,文案等内容需要国际化。这部分内容的国际化内容比较麻烦,React生态圈做的好一点的方案有Yahoo的[react-intl](https://github.com/yahoo/react-intl)、[react-intl-universal](https://github.com/alibaba/react-intl-universal)、[react-i18next](https://github.com/i18next/react-i18next)。使用起来都不容易。",
                    "",
                    "以下推荐以下几篇文章:",
                    "[5分钟前端国际化 - 蚂蚁金服·数据体验技术团队](https://juejin.im/post/59eed7df518825469c747c14)",
                    "[前端国际化](https://github.com/sundway/blog/issues/9)",
                    "[react-intl 实现 React 国际化多语言](https://juejin.im/post/59f96d7ef265da430f316997)"
                ]
            },
            "index.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# 索引文件",
                    "",
                    "---",
                    "",
                    "- [快速开始](quick-start.md)",
                    "- [使用主题包](theme.md)",
                    "- [国际化](i18n.md)",
                    "- [字体文件私有化部署](font-deploy.md)",
                    "- [贡献代码](contributing.md)"
                ]
            },
            "quick-start.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# 快速开始",
                    "",
                    "`@alifd/next` 是 Fusion Design 中的面向 PC 端可配置组件库，基于  React 实现，支持所有现代浏览器和 IE9+。",
                    "",
                    "## 安装",
                    "",
                    "### 1.使用 npm 安装(推荐)",
                    "",
                    "```",
                    "npm install @alifd/next --save",
                    "```",
                    "",
                    "### 2.浏览器直接引用",
                    "",
                    "在浏览器中使用 script 和 link 标签直接引入文件，并使用全局变量 Next。我们在 npm 包中提供了 `@alifd/next/dist` 目录下的 next.js/next.min.js 和 next.css/next.min.css 等文件，也可以通过 [unpkg](https://unpkg.com/@alifd/next/dist/) 进行下载。",
                    "",
                    "``` html",
                    "<link rel=\"stylesheet\" href=\"https://unpkg.com/@alifd/next/dist/next.css\">",
                    "",
                    "<script src=\"https://unpkg.com/@alifd/next/dist/next.js\"></script>",
                    "",
                    "// 以上引入都是引入的最新版本 @alifd/next ，但我们推荐引入固定版本的next组件，以保证代码稳定",
                    "<script src=\"https://unpkg.com/@alifd/next@1.8.6/dist/next.min.js\"></script>",
                    "",
                    "// 或作为自己的静态资源引入",
                    "<script src=\"../build/public/@alifd/next.js\"></script>",
                    "```",
                    "",
                    "## 依赖",
                    "",
                    "* `@alifd/next` 基于 `react@16` 开发，目前并不兼容 `react@16` 以下的版本，且将 react/react-dom 作为 peerDependencies，需要用户手动提前安装或引入。",
                    "* `@alifd/next` 在处理日期时间相关组件逻辑时，使用了 [moment](https://github.com/moment/moment) 库，且将 moment 作为 peerDependencies，需要用户手动提前安装或引入。",
                    "",
                    "## 引入",
                    "",
                    "### 全量引入",
                    "",
                    "",
                    "``` js",
                    "import '@alifd/next/dist/next.css';",
                    "// import '@alifd/next/index.scss';",
                    "",
                    "import { Button, Input } from '@alifd/next';",
                    "```",
                    "",
                    "### 按需引入",
                    "",
                    "",
                    "#### 1.手动引入",
                    "",
                    "``` js",
                    "import Button from '@alifd/next/lib/button';",
                    "import '@alifd/next/lib/button/style';",
                    "```",
                    "",
                    "#### 2.使用 [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) (推荐)",
                    "",
                    "但大多数人更习惯的写法如下：",
                    "",
                    "``` js",
                    "import { Button } from '@alifd/next';",
                    "```",
                    "",
                    "通过 [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 插件，可以将上述代码转化为类似下面的代码：",
                    "",
                    "``` js",
                    "import Button from '@alifd/next/lib/button';",
                    "import '@alifd/next/lib/button/style';",
                    "```",
                    "",
                    "babel配置：",
                    "``` js",
                    "// webpack babel loader option or .babelrc",
                    "{",
                    "  // ...",
                    "  plugins: [",
                    "    ['babel-plugin-import', {",
                    "      libraryName: '@alifd/next',",
                    "      style: true",
                    "    }]",
                    "  ]",
                    "}",
                    "```",
                    "",
                    "",
                    "",
                    "## 发布周期",
                    "",
                    "遵循 [Semantic Versioning 2.0.0](https://semver.org/) 语义化版本管理策略：",
                    "",
                    "z 位：每周一会进行日常 bug 修复版本的更新，紧急问题不受此限制，可以随时发布",
                    "",
                    "y 位：每月发布一个带有新特性的向下兼容的版本",
                    "",
                    "x 位：包含有 break change 变更的大版本，一般周期一到两年"
                ]
            },
            "theme.md": {
                "classes": "",
                "functions": "",
                "text": [
                    "# 使用主题包",
                    "",
                    "如果默认的组件主题样式无法满足你的视觉需求，那么你可以通过 Fusion Design 提供的强大的样式配置能力配置自定义的主题样式包。该主题包(包名例如取 `@alifd/theme-xxx` )可以在平台上导出发布至npm，它的本质是一个 scss 变量包，配合`@alifd/next`共同使用。",
                    "",
                    "## 安装",
                    "",
                    "```",
                    "npm install @alifd/theme-xxx --save",
                    "```",
                    "",
                    "## 引入",
                    "",
                    "### 全量引入",
                    "",
                    "``` js",
                    "import '@alifd/theme-xxx/index.scss';",
                    "",
                    "",
                    "import { Button, Input } from '@alifd/next';",
                    "```",
                    "",
                    "**Note:** 如果你使用的是主题包中预编译生成的 css 文件，请保证 “项目依赖的next组件版本” 与 “主题包依赖的next组件版本” 一致，以防止 js/css 因版本不匹配导致的潜在问题",
                    "",
                    "### 按需引入",
                    "除使用在《快速开始》一节中提到的 [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 外，还需搭配 [@alifd/next-theme-loader](https://github.com/alibaba-fusion/next-theme-loader) 和 [@alifd/next-theme-webpack-plugin](https://github.com/alibaba-fusion/next-theme-webpack-plugin)，可参考如下 webpack 配置：",
                    "",
                    "``` js",
                    "const path = require('path');",
                    "const webpack = require('webpack');",
                    "const ThemePlugin = require('@alifd/next-theme-webpack-plugin');",
                    "const ExtractTextPlugin = require('extract-text-webpack-plugin');",
                    "",
                    "module.exports = {",
                    "  entry: {",
                    "    index: './src/index.jsx'",
                    "  },",
                    "  output: {",
                    "    path: path.join(__dirname, 'build'),",
                    "    filename: '[name].js'",
                    "  },",
                    "  resolve: {",
                    "    extensions: ['.js', '.jsx']",
                    "  },",
                    "  devtool: 'inline-source-map',",
                    "  module: {",
                    "    rules: [{",
                    "      test: /\\.jsx?$/,",
                    "      use: {",
                    "        loader: 'babel-loader',",
                    "        options: {",
                    "          presets: [",
                    "            'env',",
                    "            'react',",
                    "            'stage-0'",
                    "          ],",
                    "          plugins: [",
                    "            'add-module-exports',",
                    "            'transform-decorators-legacy',",
                    "            ['babel-plugin-import', { style: true }]",
                    "          ]",
                    "        }",
                    "      },",
                    "      exclude: /node_modules/",
                    "    }, {",
                    "      test: /\\.css$/,",
                    "      use: ExtractTextPlugin.extract({",
                    "        use: 'css-loader'",
                    "      })",
                    "    }, {",
                    "      test: /\\.scss$/,",
                    "      use: ExtractTextPlugin.extract({",
                    "        use: [",
                    "          'css-loader',",
                    "          'fast-sass-loader',",
                    "          {",
                    "            // 添加 @alifd/next-theme-loader，引入自定义主题样式对应的 scss 变量",
                    "            loader: '@alifd/next-theme-loader',",
                    "            options: {",
                    "              theme: '@alifd/theme-xxx'",
                    "            }",
                    "          }",
                    "        ]",
                    "      })",
                    "    }]",
                    "  },",
                    "  plugins: [",
                    "    // 添加 @alifd/next-theme-webpack-plugin，引入 normalize 样式以及自定义 icon 定义",
                    "    new ThemePlugin({ theme: '@alifd/theme-xxx' }),",
                    "    new ExtractTextPlugin('[name].css')",
                    "  ]",
                    "};",
                    "```"
                ]
            }
        }
    },
    "src": {
        ".editorconfig": {},
        ".eslintrc": {},
        ".stylelintrc": {},
        "index.js": {
            "classes": [],
            "functions": [],
            "text": [
                "export { default as Affix } from './affix';",
                "export { default as Animate } from './animate';",
                "export { default as Badge } from './badge';",
                "export { default as Balloon } from './balloon';",
                "export { default as Breadcrumb } from './breadcrumb';",
                "export { default as Button } from './button';",
                "export { default as Calendar } from './calendar';",
                "export { default as Card } from './card';",
                "export { default as Cascader } from './cascader';",
                "export { default as CascaderSelect } from './cascader-select';",
                "export { default as Checkbox } from './checkbox';",
                "export { default as Collapse } from './collapse';",
                "export { default as ConfigProvider } from './config-provider';",
                "export { default as DatePicker } from './date-picker';",
                "export { default as Dialog } from './dialog';",
                "export { default as Dropdown } from './dropdown';",
                "export { default as Field } from './field';",
                "export { default as Form } from './form';",
                "export { default as Grid } from './grid';",
                "export { default as Icon } from './icon';",
                "export { default as Input } from './input';",
                "export { default as Loading } from './loading';",
                "export { default as Menu } from './menu';",
                "export { default as MenuButton } from './menu-button';",
                "export { default as Message } from './message';",
                "export { default as Nav } from './nav';",
                "export { default as NumberPicker } from './number-picker';",
                "export { default as Overlay } from './overlay';",
                "export { default as Pagination } from './pagination';",
                "export { default as Paragraph } from './paragraph';",
                "export { default as Progress } from './progress';",
                "export { default as Radio } from './radio';",
                "export { default as Range } from './range';",
                "export { default as Rating } from './rating';",
                "export { default as Search } from './search';",
                "export { default as Select } from './select';",
                "export { default as Slider } from './slider';",
                "export { default as SplitButton } from './split-button';",
                "export { default as Step } from './step';",
                "export { default as Switch } from './switch';",
                "export { default as Tab } from './tab';",
                "export { default as Table } from './table';",
                "export { default as Tag } from './tag';",
                "export { default as TimePicker } from './time-picker';",
                "export { default as Timeline } from './timeline';",
                "export { default as Transfer } from './transfer';",
                "export { default as Tree } from './tree';",
                "export { default as TreeSelect } from './tree-select';",
                "export { default as Upload } from './upload';",
                "export { default as VirtualList } from './virtual-list';"
            ]
        },
        "affix": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import { findDOMNode } from 'react-dom';",
                    "import classnames from 'classnames';",
                    "import { obj, events, func } from '../util';",
                    "import ConfigProvider from '../config-provider';",
                    "import { getScroll, getRect, getNodeHeight } from './util';",
                    "",
                    "/** Affix */",
                    "class Affix extends React.Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 设置 Affix 需要监听滚动事件的容器元素",
                    "         * @return {ReactElement} 目标容器元素的实例",
                    "         */",
                    "        container: PropTypes.func,",
                    "        /**",
                    "         * 距离窗口顶部达到指定偏移量后触发",
                    "         */",
                    "        offsetTop: PropTypes.number,",
                    "        /**",
                    "         * 距离窗口底部达到制定偏移量后触发",
                    "         */",
                    "        offsetBottom: PropTypes.number,",
                    "        /**",
                    "         * 当元素的样式发生固钉样式变化时触发的回调函数",
                    "         * @param {Boolean} 元素是否被固钉",
                    "         */",
                    "        onAffix: PropTypes.func,",
                    "        /**",
                    "         * 是否启用绝对布局实现 affix",
                    "         * @param {Boolean} 是否启用绝对布局",
                    "         */",
                    "        useAbsolute: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        children: PropTypes.any,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        container: () => window,",
                    "        onAffix: func.noop,",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        this.state = {",
                    "            style: null,",
                    "            containerStyle: null,",
                    "        };",
                    "        this.affixMode = this._getAffixMode(props);",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        const { container } = this.props;",
                    "        this._updateNodePosition();",
                    "        // wait for parent rendered",
                    "        this.timeout = setTimeout(() => {",
                    "            this._setEventHandlerForContainer(container);",
                    "        });",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        if (this.timeout) {",
                    "            clearTimeout(this.timeout);",
                    "            this.timeout = null;",
                    "        }",
                    "        const { container } = this.props;",
                    "        this._removeEventHandlerForContainer(container);",
                    "    }",
                    "",
                    "    _setEventHandlerForContainer(getContainer) {",
                    "        const container = getContainer();",
                    "        if (!container) {",
                    "            return;",
                    "        }",
                    "        events.on(container, 'scroll', this._updateNodePosition, false);",
                    "        events.on(container, 'resize', this._updateNodePosition, false);",
                    "    }",
                    "",
                    "    _removeEventHandlerForContainer(getContainer) {",
                    "        const container = getContainer();",
                    "        if (container) {",
                    "            events.off(container, 'scroll', this._updateNodePosition);",
                    "            events.off(container, 'resize', this._updateNodePosition);",
                    "        }",
                    "    }",
                    "",
                    "    updatePosition = () => {",
                    "        this._updateNodePosition();",
                    "    }",
                    "",
                    "    _updateNodePosition = () => {",
                    "        const { container, useAbsolute } = this.props;",
                    "        const affixContainer = container();",
                    "",
                    "        if (!affixContainer) {",
                    "            return false;",
                    "        }",
                    "        const containerScrollTop = getScroll(affixContainer, true);    // 容器在垂直位置上的滚动 offset",
                    "        const affixOffset = this._getOffset(this.affixNode, affixContainer); // 目标节点当前相对于容器的 offset",
                    "        const containerHeight = getNodeHeight(affixContainer);         // 容器的高度",
                    "        const affixHeight = this.affixNode.offsetHeight;",
                    "        const containerRect = getRect(affixContainer);",
                    "",
                    "        const affixChildHeight = this.affixChildNode.offsetHeight;",
                    "",
                    "        const affixMode = this.affixMode;",
                    "        const affixStyle = {",
                    "            width: affixOffset.width,",
                    "        };",
                    "        const containerStyle = {",
                    "            width: affixOffset.width,",
                    "            height: affixChildHeight,",
                    "        };",
                    "",
                    "        if (affixMode.top && containerScrollTop > affixOffset.top - affixMode.offset) {",
                    "            // affix top",
                    "            if (useAbsolute) {",
                    "                affixStyle.position = 'absolute';",
                    "                affixStyle.top = containerScrollTop - (affixOffset.top - affixMode.offset);",
                    "                containerStyle.position = 'relative';",
                    "            } else {",
                    "                affixStyle.position = 'fixed';",
                    "                affixStyle.top = affixMode.offset + containerRect.top;",
                    "            }",
                    "            this._setAffixStyle(affixStyle, true);",
                    "            this._setContainerStyle(containerStyle);",
                    "        } else if (affixMode.bottom && containerScrollTop < affixOffset.top + affixHeight + affixMode.offset - containerHeight) {",
                    "            // affix bottom",
                    "            affixStyle.height = affixHeight;",
                    "            if (useAbsolute) {",
                    "                affixStyle.position = 'absolute';",
                    "                affixStyle.top = containerScrollTop - (affixOffset.top + affixHeight + affixMode.offset - containerHeight);",
                    "                containerStyle.position = 'relative';",
                    "            } else {",
                    "                affixStyle.position = 'fixed';",
                    "                affixStyle.bottom = affixMode.offset;",
                    "            }",
                    "            this._setAffixStyle(affixStyle, true);",
                    "            this._setContainerStyle(containerStyle);",
                    "        } else {",
                    "            this._setAffixStyle(null);",
                    "            this._setContainerStyle(null);",
                    "        }",
                    "    };",
                    "",
                    "    _getAffixMode() {",
                    "        const { offsetTop, offsetBottom } = this.props;",
                    "        const affixMode = {",
                    "            top: false,",
                    "            bottom: false,",
                    "            offset: 0,",
                    "        };",
                    "",
                    "        if (typeof offsetTop !== 'number' && typeof offsetBottom !== 'number') {",
                    "            // set default",
                    "            affixMode.top = true;",
                    "        } else if (typeof offsetTop === 'number') {",
                    "            affixMode.top = true;",
                    "            affixMode.offset = offsetTop;",
                    "        } else if (typeof offsetBottom === 'number') {",
                    "            affixMode.bottom = true;",
                    "            affixMode.offset = offsetBottom;",
                    "        }",
                    "",
                    "        return affixMode;",
                    "    }",
                    "",
                    "    _setAffixStyle(affixStyle, affixed = false) {",
                    "        if (obj.shallowEqual(affixStyle, this.state.style)) {",
                    "            return;",
                    "        }",
                    "",
                    "        this.setState({",
                    "            style: affixStyle,",
                    "        });",
                    "",
                    "        const { onAffix } = this.props;",
                    "",
                    "        if (affixed) {",
                    "            onAffix(true);",
                    "        } else if (!affixStyle) {",
                    "            onAffix(false);",
                    "        }",
                    "    }",
                    "",
                    "    _setContainerStyle(containerStyle) {",
                    "        if (obj.shallowEqual(containerStyle, this.state.containerStyle)) {",
                    "            return;",
                    "        }",
                    "        this.setState({ containerStyle });",
                    "    }",
                    "",
                    "    _getOffset(affixNode, affixContainer) {",
                    "        const affixRect = affixNode.getBoundingClientRect();  // affix 元素 相对浏览器窗口的位置",
                    "        const containerRect = getRect(affixContainer); // affix 容器 相对浏览器窗口的位置",
                    "        const containerScrollTop = getScroll(affixContainer, true);",
                    "        const containerScrollLeft = getScroll(affixContainer, false);",
                    "",
                    "        return {",
                    "            top: affixRect.top - containerRect.top + containerScrollTop,",
                    "            left: affixRect.left - containerRect.left + containerScrollLeft,",
                    "            width: affixRect.width,",
                    "            height: affixRect.height,",
                    "        };",
                    "    }",
                    "",
                    "    _affixNodeRefHandler = (ref) => {",
                    "        this.affixNode = findDOMNode(ref);",
                    "    }",
                    "",
                    "    _affixChildNodeRefHandler = (ref) => {",
                    "        this.affixChildNode = findDOMNode(ref);",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, className, style, children } = this.props;",
                    "        const state = this.state;",
                    "        const classNames = classnames({",
                    "            [`${prefix}affix`]: state.style,",
                    "            [`${prefix}affix-top`]: !state.style && this.affixMode.top,",
                    "            [`${prefix}affix-bottom`]: !state.style && this.affixMode.bottom,",
                    "            [className]: className,",
                    "        });",
                    "        const combinedStyle = { ...state.containerStyle, ...style };",
                    "",
                    "        return (",
                    "            <div ref={this._affixNodeRefHandler} style={combinedStyle}>",
                    "                <div ref={this._affixChildNodeRefHandler} className={classNames} style={state.style}>",
                    "                    {children}",
                    "                </div>",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Affix);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "/* stylelint-disable-next-line */"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "util.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "export function getScroll(node, isVertical) {",
                    "    if (typeof window === 'undefined') {",
                    "        return 0;",
                    "    }",
                    "    const windowProp = isVertical ? 'pageYOffset' : 'pageXOffset';",
                    "    const elementProp = isVertical ? 'scrollTop' : 'scrollLeft';",
                    "    return node === window ? node[windowProp] : node[elementProp];",
                    "}",
                    "",
                    "export function getRect(node) {",
                    "    return node !== window ? node.getBoundingClientRect() : { top: 0, left: 0, bottom: 0 };",
                    "}",
                    "",
                    "export function getNodeHeight(node) {",
                    "    if (!node) {",
                    "        return 0;",
                    "    }",
                    "    if (node === window) {",
                    "        return window.innerHeight;",
                    "    }",
                    "    return node.clientHeight;",
                    "}"
                ]
            }
        },
        "animate": {
            ".stylelintrc": {},
            "animate.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, Children } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import { TransitionGroup } from 'react-transition-group';",
                    "import AnimateChild from './child';",
                    "",
                    "const noop = () => {};",
                    "const FirstChild = props => {",
                    "    const childrenArray = React.Children.toArray(props.children);",
                    "    return childrenArray[0] || null;",
                    "};",
                    "",
                    "/**",
                    " * Animate",
                    " */",
                    "class Animate extends Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 动画 className",
                    "         */",
                    "        animation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),",
                    "        /**",
                    "         * 子元素第一次挂载时是否执行动画",
                    "         */",
                    "        animationAppear: PropTypes.bool,",
                    "        /**",
                    "         * 包裹子元素的标签",
                    "         */",
                    "        component: PropTypes.any,",
                    "        /**",
                    "         * 是否只有单个子元素，如果有多个子元素，请设置为 false",
                    "         */",
                    "        singleMode: PropTypes.bool,",
                    "        /**",
                    "         * 子元素",
                    "         */",
                    "        children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),",
                    "        /**",
                    "         * 执行第一次挂载动画前触发的回调函数",
                    "         */",
                    "        beforeAppear: PropTypes.func,",
                    "        /**",
                    "         * 执行第一次挂载动画，添加 xxx-appear-active 类名后触发的回调函数",
                    "         *  @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        onAppear: PropTypes.func,",
                    "        /**",
                    "         * 执行完第一次挂载动画后触发的函数",
                    "         * @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        afterAppear: PropTypes.func,",
                    "        /**",
                    "         * 执行进场动画前触发的回调函数",
                    "         * @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        beforeEnter: PropTypes.func,",
                    "        /**",
                    "         * 执行进场动画，添加 xxx-enter-active 类名后触发的回调函数",
                    "         * @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        onEnter: PropTypes.func,",
                    "        /**",
                    "         * 执行完进场动画后触发的回调函数",
                    "         * @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        afterEnter: PropTypes.func,",
                    "        /**",
                    "         * 执行离场动画前触发的回调函数",
                    "         * @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        beforeLeave: PropTypes.func,",
                    "        /**",
                    "         * 执行离场动画，添加 xxx-leave-active 类名后触发的回调函数",
                    "         * @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        onLeave: PropTypes.func,",
                    "        /**",
                    "         * 执行完离场动画后触发的回调函数",
                    "         * @param {HTMLElement} node \b执行动画的 dom 元素",
                    "         */",
                    "        afterLeave: PropTypes.func",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        animationAppear: true,",
                    "        component: 'div',",
                    "        singleMode: true,",
                    "        beforeAppear: noop,",
                    "        onAppear: noop,",
                    "        afterAppear: noop,",
                    "        beforeEnter: noop,",
                    "        onEnter: noop,",
                    "        afterEnter: noop,",
                    "        beforeLeave: noop,",
                    "        onLeave: noop,",
                    "        afterLeave: noop",
                    "    };",
                    "",
                    "    normalizeNames(names) {",
                    "        if (typeof names === 'string') {",
                    "            return {",
                    "                appear: `${names}-appear`,",
                    "                appearActive: `${names}-appear-active`,",
                    "                enter: `${names}-enter`,",
                    "                enterActive: `${names}-enter-active`,",
                    "                leave: `${names}-leave`,",
                    "                leaveActive: `${names}-leave-active`",
                    "            };",
                    "        }",
                    "        if (typeof names === 'object') {",
                    "            return {",
                    "                appear: names.appear,",
                    "                appearActive: `${names.appear}-active`,",
                    "                enter: `${names.enter}`,",
                    "                enterActive: `${names.enter}-active`,",
                    "                leave: `${names.leave}`,",
                    "                leaveActive: `${names.leave}-active`,",
                    "            };",
                    "        }",
                    "    }",
                    "",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const { animation, children, animationAppear, singleMode, component,",
                    "            beforeAppear, onAppear, afterAppear,",
                    "            beforeEnter, onEnter, afterEnter,",
                    "            beforeLeave, onLeave, afterLeave,",
                    "            ...others",
                    "        } = this.props;",
                    "        /* eslint-enable no-unused-vars */",
                    "",
                    "        const animateChildren = Children.map(children, child => {",
                    "            return (",
                    "                <AnimateChild key={child.key}",
                    "                    names={this.normalizeNames(animation)}",
                    "                    onAppear={beforeAppear}",
                    "                    onAppearing={onAppear}",
                    "                    onAppeared={afterAppear}",
                    "                    onEnter={beforeEnter}",
                    "                    onEntering={onEnter}",
                    "                    onEntered={afterEnter}",
                    "                    onExit={beforeLeave}",
                    "                    onExiting={onLeave}",
                    "                    onExited={afterLeave}>",
                    "                    {child}",
                    "                </AnimateChild>",
                    "            );",
                    "        });",
                    "",
                    "        return (",
                    "            <TransitionGroup appear={animationAppear} component={singleMode ? FirstChild : component} {...others}>",
                    "                {animateChildren}",
                    "            </TransitionGroup>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Animate;"
                ]
            },
            "child.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import { Transition } from 'react-transition-group';",
                    "import { func, support, events, dom, guid } from '../util';",
                    "",
                    "const noop = () => {};",
                    "const { on, off } = events;",
                    "const { addClass, removeClass } = dom;",
                    "const prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];",
                    "",
                    "function getStyleProperty(node, name) {",
                    "    const style = window.getComputedStyle(node);",
                    "    let ret = '';",
                    "    for (let i = 0; i < prefixes.length; i++) {",
                    "        ret = style.getPropertyValue(prefixes[i] + name);",
                    "        if (ret) {",
                    "            break;",
                    "        }",
                    "    }",
                    "    return ret;",
                    "}",
                    "",
                    "export default class AnimateChild extends Component {",
                    "    static propTypes = {",
                    "        names: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),",
                    "        onAppear: PropTypes.func,",
                    "        onAppearing: PropTypes.func,",
                    "        onAppeared: PropTypes.func,",
                    "        onEnter: PropTypes.func,",
                    "        onEntering: PropTypes.func,",
                    "        onEntered: PropTypes.func,",
                    "        onExit: PropTypes.func,",
                    "        onExiting: PropTypes.func,",
                    "        onExited: PropTypes.func",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        onAppear: noop,",
                    "        onAppearing: noop,",
                    "        onAppeared: noop,",
                    "        onEnter: noop,",
                    "        onEntering: noop,",
                    "        onEntered: noop,",
                    "        onExit: noop,",
                    "        onExiting: noop,",
                    "        onExited: noop",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "        func.bindCtx(this, [",
                    "            'handleEnter', 'handleEntering', 'handleEntered',",
                    "            'handleExit', 'handleExiting', 'handleExited',",
                    "            'addEndListener'",
                    "        ]);",
                    "        this.endListeners = {",
                    "            transitionend: [],",
                    "            animationend: []",
                    "        };",
                    "        this.timeoutMap = {};",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        Object.keys(this.endListeners).forEach(eventName => {",
                    "            this.endListeners[eventName].forEach(listener => {",
                    "                off(this.node, eventName, listener);",
                    "            });",
                    "        });",
                    "        this.endListeners = {",
                    "            transitionend: [],",
                    "            animationend: []",
                    "        };",
                    "    }",
                    "",
                    "    generateEndListener(node, done, eventName, id) {",
                    "        const _this = this;",
                    "        return function endListener(e) {",
                    "",
                    "            if (e && e.target === node) {",
                    "                if (_this.timeoutMap[id]) {",
                    "                    clearTimeout(_this.timeoutMap[id]);",
                    "                    delete _this.timeoutMap[id];",
                    "                }",
                    "",
                    "                done();",
                    "                off(node, eventName, endListener);",
                    "                const listeners = _this.endListeners[eventName];",
                    "                const index = listeners.indexOf(endListener);",
                    "                index > -1 && listeners.splice(index, 1);",
                    "            }",
                    "        };",
                    "    }",
                    "",
                    "    addEndListener(node, done) {",
                    "        if (support.transition || support.animation) {",
                    "            const id = guid();",
                    "",
                    "            this.node = node;",
                    "            if (support.transition) {",
                    "                const transitionEndListener = this.generateEndListener(node, done, 'transitionend', id);",
                    "                on(node, 'transitionend', transitionEndListener);",
                    "                this.endListeners.transitionend.push(transitionEndListener);",
                    "            }",
                    "            if (support.animation) {",
                    "                const animationEndListener = this.generateEndListener(node, done, 'animationend', id);",
                    "                on(node, 'animationend', animationEndListener);",
                    "                this.endListeners.animationend.push(animationEndListener);",
                    "            }",
                    "",
                    "            setTimeout(() => {",
                    "                const transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;",
                    "                const transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;",
                    "                const animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;",
                    "                const animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;",
                    "                const time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);",
                    "                if (time) {",
                    "                    this.timeoutMap[id] = setTimeout(() => {",
                    "                        done();",
                    "                    }, time * 1000 + 200);",
                    "                }",
                    "            }, 15);",
                    "",
                    "        } else {",
                    "            done();",
                    "        }",
                    "    }",
                    "",
                    "    removeEndtListener() {",
                    "        this.transitionOff && this.transitionOff();",
                    "        this.animationOff && this.animationOff();",
                    "    }",
                    "",
                    "    removeClassNames(node, names) {",
                    "        Object.keys(names).forEach(key => {",
                    "            removeClass(node, names[key]);",
                    "        });",
                    "    }",
                    "",
                    "    handleEnter(node, isAppearing) {",
                    "        const { names } = this.props;",
                    "        if (names) {",
                    "            this.removeClassNames(node, names);",
                    "            const className = isAppearing ? 'appear' : 'enter';",
                    "            addClass(node, names[className]);",
                    "        }",
                    "",
                    "        const hook = isAppearing ? this.props.onAppear : this.props.onEnter;",
                    "        hook(node);",
                    "    }",
                    "",
                    "    handleEntering(node, isAppearing) {",
                    "        setTimeout(() => {",
                    "            const { names } = this.props;",
                    "            if (names) {",
                    "                const className = isAppearing ? 'appearActive' : 'enterActive';",
                    "                addClass(node, names[className]);",
                    "            }",
                    "",
                    "            const hook = isAppearing ? this.props.onAppearing : this.props.onEntering;",
                    "            hook(node);",
                    "        }, 10);",
                    "    }",
                    "",
                    "    handleEntered(node, isAppearing) {",
                    "        const { names } = this.props;",
                    "        if (names) {",
                    "            const classNames = isAppearing ?",
                    "                [names.appear, names.appearActive] :",
                    "                [names.enter, names.enterActive];",
                    "            classNames.forEach(className => {",
                    "                removeClass(node, className);",
                    "            });",
                    "        }",
                    "",
                    "        const hook = isAppearing ? this.props.onAppeared : this.props.onEntered;",
                    "        hook(node);",
                    "    }",
                    "",
                    "    handleExit(node) {",
                    "        const { names } = this.props;",
                    "        if (names) {",
                    "            this.removeClassNames(node, names);",
                    "            addClass(node, names.leave);",
                    "        }",
                    "",
                    "        this.props.onExit(node);",
                    "    }",
                    "",
                    "    handleExiting(node) {",
                    "        setTimeout(() => {",
                    "            const { names } = this.props;",
                    "            if (names) {",
                    "                addClass(node, names.leaveActive);",
                    "            }",
                    "            this.props.onExiting(node);",
                    "        }, 10);",
                    "    }",
                    "",
                    "    handleExited(node) {",
                    "        const { names } = this.props;",
                    "        if (names) {",
                    "            [names.leave, names.leaveActive].forEach(className => {",
                    "                removeClass(node, className);",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onExited(node);",
                    "    }",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const { names,",
                    "            onAppear, onAppeared, onAppearing,",
                    "            onEnter, onEntering, onEntered,",
                    "            onExit, onExiting, onExited,",
                    "            ...others",
                    "        } = this.props;",
                    "        /* eslint-enable no-unused-vars */",
                    "",
                    "        return (",
                    "            <Transition {...others}",
                    "                onEnter={this.handleEnter}",
                    "                onEntering={this.handleEntering}",
                    "                onEntered={this.handleEntered}",
                    "                onExit={this.handleExit}",
                    "                onExiting={this.handleExiting}",
                    "                onExited={this.handleExited}",
                    "                addEndListener={this.addEndListener} />",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "expand.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import { func, dom } from '../util';",
                    "import Animate from './animate';",
                    "",
                    "const noop = () => {};",
                    "const { getStyle } = dom;",
                    "",
                    "export default class Expand extends Component {",
                    "    static propTypes = {",
                    "        animation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),",
                    "        beforeEnter: PropTypes.func,",
                    "        onEnter: PropTypes.func,",
                    "        afterEnter: PropTypes.func,",
                    "        beforeLeave: PropTypes.func,",
                    "        onLeave: PropTypes.func,",
                    "        afterLeave: PropTypes.func",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        beforeEnter: noop,",
                    "        onEnter: noop,",
                    "        afterEnter: noop,",
                    "        beforeLeave: noop,",
                    "        onLeave: noop,",
                    "        afterLeave: noop",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "        func.bindCtx(this, [",
                    "            'beforeEnter', 'onEnter', 'afterEnter',",
                    "            'beforeLeave', 'onLeave', 'afterLeave'",
                    "        ]);",
                    "    }",
                    "",
                    "    beforeEnter(node) {",
                    "        if (this.leaving) {",
                    "            this.afterLeave(node);",
                    "        }",
                    "",
                    "        this.cacheCurrentStyle(node);",
                    "        this.cacheComputedStyle(node);",
                    "        this.setCurrentStyleToZero(node);",
                    "",
                    "        this.props.beforeEnter(node);",
                    "    }",
                    "",
                    "    onEnter(node) {",
                    "        this.setCurrentStyleToComputedStyle(node);",
                    "",
                    "        this.props.onEnter(node);",
                    "    }",
                    "",
                    "    afterEnter(node) {",
                    "        this.restoreCurrentStyle(node);",
                    "",
                    "        this.props.afterEnter(node);",
                    "    }",
                    "",
                    "    beforeLeave(node) {",
                    "        this.leaving = true;",
                    "",
                    "        this.cacheCurrentStyle(node);",
                    "        this.cacheComputedStyle(node);",
                    "        this.setCurrentStyleToComputedStyle(node);",
                    "",
                    "        this.props.beforeLeave(node);",
                    "    }",
                    "",
                    "    onLeave(node) {",
                    "        this.setCurrentStyleToZero(node);",
                    "",
                    "        this.props.onLeave(node);",
                    "    }",
                    "",
                    "    afterLeave(node) {",
                    "        this.leaving = false;",
                    "",
                    "        this.restoreCurrentStyle(node);",
                    "",
                    "        this.props.afterLeave(node);",
                    "    }",
                    "",
                    "    cacheCurrentStyle(node) {",
                    "        this.styleBorderTopWidth = node.style.borderTopWidth;",
                    "        this.stylePaddingTop = node.style.paddingTop;",
                    "        this.styleHeight = node.style.height;",
                    "        this.stylePaddingBottom = node.style.paddingBottom;",
                    "        this.styleBorderBottomWidth = node.style.borderBottomWidth;",
                    "    }",
                    "",
                    "    cacheComputedStyle(node) {",
                    "        this.borderTopWidth = getStyle(node, 'borderTopWidth');",
                    "        this.paddingTop = getStyle(node, 'paddingTop');",
                    "        this.height = node.offsetHeight;",
                    "        this.paddingBottom = getStyle(node, 'paddingBottom');",
                    "        this.borderBottomWidth = getStyle(node, 'borderBottomWidth');",
                    "    }",
                    "",
                    "    setCurrentStyleToZero(node) {",
                    "        node.style.borderTopWidth = '0px';",
                    "        node.style.paddingTop = '0px';",
                    "        node.style.height = '0px';",
                    "        node.style.paddingBottom = '0px';",
                    "        node.style.borderBottomWidth = '0px';",
                    "    }",
                    "",
                    "    setCurrentStyleToComputedStyle(node) {",
                    "        node.style.borderTopWidth = `${this.borderTopWidth}px`;",
                    "        node.style.paddingTop = `${this.paddingTop}px`;",
                    "        node.style.height = `${this.height}px`;",
                    "        node.style.paddingBottom = `${this.paddingBottom}px`;",
                    "        node.style.borderBottomWidth = `${this.borderBottomWidth}px`;",
                    "    }",
                    "",
                    "    restoreCurrentStyle(node) {",
                    "        node.style.borderTopWidth = this.styleBorderTopWidth;",
                    "        node.style.paddingTop = this.stylePaddingTop;",
                    "        node.style.height = this.styleHeight;",
                    "        node.style.paddingBottom = this.stylePaddingBottom;",
                    "        node.style.borderBottomWidth = this.styleBorderBottomWidth;",
                    "    }",
                    "",
                    "    render() {",
                    "        const { animation, ...others } = this.props;",
                    "        const newAnimation = animation || 'expand';",
                    "",
                    "        return (",
                    "            <Animate {...others}",
                    "                animation={newAnimation}",
                    "                beforeEnter={this.beforeEnter}",
                    "                onEnter={this.onEnter}",
                    "                afterEnter={this.afterEnter}",
                    "                beforeLeave={this.beforeLeave}",
                    "                onLeave={this.onLeave}",
                    "                afterLeave={this.afterLeave} />",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Animate from './animate';",
                    "import Expand from './expand';",
                    "",
                    "Animate.Expand = Expand;",
                    "",
                    "export default Animate;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/_fading-entrances/_fadeIn.scss\";",
                    "@import \"scss/_fading-entrances/_fadeInDown.scss\";",
                    "@import \"scss/_fading-entrances/_fadeInLeft.scss\";",
                    "@import \"scss/_fading-entrances/_fadeInRight.scss\";",
                    "@import \"scss/_fading-entrances/_fadeInUp.scss\";",
                    "@import \"scss/_fading-exits/_fadeOut.scss\";",
                    "@import \"scss/_fading-exits/_fadeOutDown.scss\";",
                    "@import \"scss/_fading-exits/_fadeOutLeft.scss\";",
                    "@import \"scss/_fading-exits/_fadeOutRight.scss\";",
                    "@import \"scss/_fading-exits/_fadeOutUp.scss\";",
                    "@import \"scss/_zooming-entrances/_zoomIn.scss\";",
                    "@import \"scss/_zooming-exits/_zoomOut.scss\";",
                    "@import \"scss/_expand-entrances/_expandInDown.scss\";",
                    "@import \"scss/_expand-entrances/_expandInUp.scss\";",
                    "@import \"scss/_expand-entrances/_withFade.scss\";",
                    "@import \"scss/_expand-exits/_expandOutUp.scss\";",
                    "@import \"scss/_expand-exits/_expandOutDown.scss\";",
                    "@import \"scss/_expand-exits/_withFade.scss\";",
                    "@import \"scss/_attention-seekers/_pulse.scss\";",
                    "",
                    ".fadeIn {",
                    "    @include fadeIn();",
                    "}",
                    "",
                    ".fadeInDown {",
                    "    @include fadeInDown();",
                    "}",
                    "",
                    ".fadeInLeft {",
                    "    @include fadeInLeft();",
                    "}",
                    "",
                    ".fadeInRight {",
                    "    @include fadeInRight();",
                    "}",
                    "",
                    ".fadeInUp {",
                    "    @include fadeInUp();",
                    "}",
                    "",
                    ".fadeOut {",
                    "    @include fadeOut();",
                    "}",
                    "",
                    ".fadeOutDown {",
                    "    @include fadeOutDown();",
                    "}",
                    "",
                    ".fadeOutLeft {",
                    "    @include fadeOutLeft();",
                    "}",
                    "",
                    ".fadeOutRight {",
                    "    @include fadeOutRight();",
                    "}",
                    "",
                    ".fadeOutUp {",
                    "    @include fadeOutUp();",
                    "}",
                    "",
                    ".zoomIn {",
                    "    @include zoomIn();",
                    "}",
                    "",
                    ".zoomOut {",
                    "    @include zoomOut();",
                    "}",
                    "",
                    ".expandInDown {",
                    "    @include expandInDown();",
                    "}",
                    "",
                    ".expandOutUp {",
                    "    @include expandOutUp();",
                    "}",
                    "",
                    ".expandInUp {",
                    "    @include expandInUp();",
                    "}",
                    "",
                    ".expandOutDown {",
                    "    @include expandOutDown();",
                    "}",
                    "",
                    ".pulse {",
                    "    @include pulse();",
                    "}",
                    "",
                    ".expand-enter {",
                    "    overflow: hidden;",
                    "}",
                    "",
                    ".expand-enter-active {",
                    "    transition: all .3s ease-out;",
                    "    & > * {",
                    "        @include expandInWithFade();",
                    "    }",
                    "}",
                    "",
                    ".expand-leave {",
                    "    overflow: hidden;",
                    "}",
                    "",
                    ".expand-leave-active {",
                    "    transition: all .2s ease-out;",
                    "    & > * {",
                    "        @include expandOutWithFade();",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// animate mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin count($count: 1) {",
                        "    -webkit-animation-iteration-count: $count;",
                        "    -moz-animation-iteration-count: $count;",
                        "    -ms-animation-iteration-count: $count;",
                        "    -o-animation-iteration-count: $count;",
                        "    animation-iteration-count: $count;",
                        "}",
                        "",
                        "@mixin duration($duration: 1s) {",
                        "    -webkit-animation-duration: $duration;",
                        "    -moz-animation-duration: $duration;",
                        "    -ms-animation-duration: $duration;",
                        "    -o-animation-duration: $duration;",
                        "    animation-duration: $duration;",
                        "}",
                        "",
                        "@mixin delay($delay: .2s) {",
                        "    -webkit-animation-delay: $delay;",
                        "    -moz-animation-delay: $delay;",
                        "    -ms-animation-delay: $delay;",
                        "    -o-animation-delay: $delay;",
                        "    animation-delay: $delay;",
                        "}",
                        "",
                        "@mixin function($function: ease) {",
                        "    -webkit-animation-timing-function: $function;",
                        "    -moz-animation-timing-function: $function;",
                        "    -ms-animation-timing-function: $function;",
                        "    -o-animation-timing-function: $function;",
                        "    animation-timing-function: $function;",
                        "}",
                        "",
                        "@mixin fill-mode($fill: both) {",
                        "    -webkit-animation-fill-mode: $fill;",
                        "    -moz-animation-fill-mode: $fill;",
                        "    -ms-animation-fill-mode: $fill;",
                        "    -o-animation-fill-mode: $fill;",
                        "    animation-fill-mode: $fill;",
                        "}",
                        "",
                        "@mixin visibility($visibility: hidden) {",
                        "    -webkit-backface-visibility: $visibility;",
                        "    -moz-backface-visibility: $visibility;",
                        "    -ms-backface-visibility: $visibility;",
                        "    -o-backface-visibility: $visibility;",
                        "    backface-visibility: $visibility;",
                        "}",
                        "",
                        "@mixin transform($property) {",
                        "    -webkit-transform: $property;",
                        "    -moz-transform: $property;",
                        "    -ms-transform: $property;",
                        "    -o-transform: $property;",
                        "    transform: $property;",
                        "}",
                        "",
                        "@mixin transform-origin($transform-origin: center center) {",
                        "    -webkit-transform-origin: $transform-origin;",
                        "    -moz-transform-origin: $transform-origin;",
                        "    -ms-transform-origin: $transform-origin;",
                        "    -o-transform-origin: $transform-origin;",
                        "    transform-origin: $transform-origin;",
                        "}",
                        "",
                        "@mixin transform-style($transform-style: flat) {",
                        "    -webkit-transform-style: $transform-style;",
                        "    -moz-transform-style: $transform-style;",
                        "    -o-transform-style: $transform-style;",
                        "    transform-style: $transform-style;",
                        "}",
                        "",
                        "@mixin animation-name($animation-name) {",
                        "    -webkit-animation-name: $animation-name;",
                        "    -moz-animation-name: $animation-name;",
                        "    -ms-animation-name: $animation-name;",
                        "    -o-animation-name: $animation-name;",
                        "    animation-name: $animation-name;",
                        "}",
                        "",
                        "@mixin keyframes($animation-name) {",
                        "    @-webkit-keyframes #{$animation-name} {",
                        "        @content;",
                        "    }",
                        "",
                        "    @-moz-keyframes #{$animation-name} {",
                        "        @content;",
                        "    }",
                        "",
                        "    @-ms-keyframes #{$animation-name} {",
                        "        @content;",
                        "    }",
                        "",
                        "    @-o-keyframes #{$animation-name} {",
                        "        @content;",
                        "    }",
                        "",
                        "    @keyframes #{$animation-name} {",
                        "        @content;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// animate variables",
                        "// --------------------------------------------------",
                        "",
                        "$countDefault: 1 !default;",
                        "",
                        "$durationSmallDefault: .2s !default;",
                        "$durationDefault: .3s !default;",
                        "$durationBigDefault: .35s !default;",
                        "",
                        "$delayDefault: 0s !default;",
                        "$functionDefault: cubic-bezier(.23, 1, .32, 1) !default;",
                        "$fillDefault: both;",
                        "$visibilityDefault: hidden !default;",
                        "",
                        "$ease-in-quint: cubic-bezier(.755, .05, .855, .06);",
                        "$ease-out-quint: cubic-bezier(.23, 1, .32, 1);",
                        "$ease-in-out-quint: cubic-bezier(.86, 0, .07, 1);"
                    ]
                },
                "_attention-seekers": {
                    "_buttonClick.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(buttonClick) {",
                            "    50% {",
                            "        @include transform(scale3d(.95, .95, .95));",
                            "    }",
                            "}",
                            "@mixin buttonClick($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(buttonClick);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_press.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(press) {",
                            "    50% {",
                            "        @include transform(scale3d(.7, .7, .7));",
                            "    }",
                            "}",
                            "@mixin press($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(press);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_pulse.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(pulse) {",
                            "    from {",
                            "        @include transform(scale(1));",
                            "    }",
                            "    20% {",
                            "        @include transform(scale(1.2));",
                            "    }",
                            "    to {",
                            "        @include transform(scale(1));",
                            "    }",
                            "}",
                            "",
                            "@mixin pulse($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(pulse);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_shake.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(shake) {",
                            "    from,",
                            "    to {",
                            "        -webkit-transform: translate3d(0, 0, 0);",
                            "        transform: translate3d(0, 0, 0);",
                            "    }",
                            "    10%,",
                            "    30%,",
                            "    50%,",
                            "    70%,",
                            "    90% {",
                            "        -webkit-transform: translate3d(-10px, 0, 0);",
                            "        transform: translate3d(-10px, 0, 0);",
                            "    }",
                            "    20%,",
                            "    40%,",
                            "    60%,",
                            "    80% {",
                            "        -webkit-transform: translate3d(10px, 0, 0);",
                            "        transform: translate3d(10px, 0, 0);",
                            "    }",
                            "}",
                            "",
                            "@mixin shake($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(shake);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_unpress.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(unpress) {",
                            "    50% {",
                            "        @include transform(scale3d(.7, .7, .7));",
                            "    }",
                            "}",
                            "@mixin unpress($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(unpress);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "attention-seekers.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF FADING EXITS",
                            "",
                            "@import \"_pulse\";",
                            "@import \"_shake\";",
                            "@import \"_press\";",
                            "@import \"_unpress\";",
                            "@import \"_buttonClick\";"
                        ]
                    }
                },
                "_bounce-entrances": {
                    "_bounceIn.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(bounceIn) {",
                            "    from,",
                            "    20%,",
                            "    40%,",
                            "    60%,",
                            "    80%,",
                            "    to {",
                            "        -webkit-animation-timing-function: cubic-bezier(.215, .610, .355, 1.000);",
                            "        animation-timing-function: cubic-bezier(.215, .610, .355, 1.000);",
                            "    }",
                            "    0% {",
                            "        opacity: 0;",
                            "        -webkit-transform: scale3d(.3, .3, .3);",
                            "        transform: scale3d(.3, .3, .3);",
                            "    }",
                            "    20% {",
                            "        -webkit-transform: scale3d(1.1, 1.1, 1.1);",
                            "        transform: scale3d(1.1, 1.1, 1.1);",
                            "    }",
                            "    40% {",
                            "        -webkit-transform: scale3d(.9, .9, .9);",
                            "        transform: scale3d(.9, .9, .9);",
                            "    }",
                            "    60% {",
                            "        opacity: 1;",
                            "        -webkit-transform: scale3d(1.03, 1.03, 1.03);",
                            "        transform: scale3d(1.03, 1.03, 1.03);",
                            "    }",
                            "    80% {",
                            "        -webkit-transform: scale3d(.97, .97, .97);",
                            "        transform: scale3d(.97, .97, .97);",
                            "    }",
                            "    to {",
                            "        opacity: 1;",
                            "        -webkit-transform: scale3d(1, 1, 1);",
                            "        transform: scale3d(1, 1, 1);",
                            "    }",
                            "}",
                            "",
                            "@mixin bounceIn($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(bounceIn);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "bounce-entrances.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF FADING ENTRANCES",
                            "",
                            "@import \"_bounceIn\";"
                        ]
                    }
                },
                "_bounce-exits": {
                    "_bounceOut.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(bounceOut) {",
                            "    20% {",
                            "        -webkit-transform: scale3d(.9, .9, .9);",
                            "        transform: scale3d(.9, .9, .9);",
                            "    }",
                            "    50%,",
                            "    55% {",
                            "        opacity: 1;",
                            "        -webkit-transform: scale3d(1.1, 1.1, 1.1);",
                            "        transform: scale3d(1.1, 1.1, 1.1);",
                            "    }",
                            "    to {",
                            "        opacity: 0;",
                            "        -webkit-transform: scale3d(.3, .3, .3);",
                            "        transform: scale3d(.3, .3, .3);",
                            "    }",
                            "}",
                            "",
                            "@mixin bounceOut($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(bounceOut);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "bounce-exits.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF FADING EXITS",
                            "",
                            "@import \"_bounceOut\";"
                        ]
                    }
                },
                "_expand-entrances": {
                    "_expandInDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(expandInDown) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(scaleY(.6));",
                            "        @include transform-origin(left top 0);",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(scaleY(1));",
                            "        @include transform-origin(left top 0);",
                            "    }",
                            "}",
                            "",
                            "@mixin expandInDown($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(expandInDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_expandInUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(expandInUp) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(scaleY(.6));",
                            "        @include transform-origin(left bottom 0);",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(scaleY(1));",
                            "        @include transform-origin(left bottom 0);",
                            "    }",
                            "}",
                            "",
                            "@mixin expandInUp($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(expandInUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_withFade.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(expandInWithFade) {",
                            "    0% {",
                            "        opacity: 0;",
                            "    }",
                            "    40% {",
                            "        opacity: .1;",
                            "    }",
                            "    50% {",
                            "        opacity: .9;",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "    }",
                            "}",
                            "",
                            "@mixin expandInWithFade($count: $countDefault, $duration: .2s, $delay: $delayDefault, $function: $functionDefault, $fill: 'forwards', $visibility: $visibilityDefault) {",
                            "    @include animation-name(expandInWithFade);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    }
                },
                "_expand-exits": {
                    "_expandOutDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(expandOutDown) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(scaleY(1));",
                            "        @include transform-origin(left bottom 0);",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(scaleY(.6));",
                            "        @include transform-origin(left bottom 0);",
                            "    }",
                            "}",
                            "",
                            "@mixin expandOutDown($count: $countDefault, $duration: .15s, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(expandOutDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_expandOutUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(expandOutUp) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(scaleY(1));",
                            "        @include transform-origin(left top 0);",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(scaleY(.6));",
                            "        @include transform-origin(left top 0);",
                            "    }",
                            "}",
                            "",
                            "@mixin expandOutUp($count: $countDefault, $duration: .15s, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(expandOutUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_withFade.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(expandOutWithFade) {",
                            "    0% {",
                            "        opacity: 1;",
                            "    }",
                            "    70% {",
                            "        opacity: 0;",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "    }",
                            "}",
                            "",
                            "@mixin expandOutWithFade($count: $countDefault, $duration: .2s, $delay: $delayDefault, $function: $functionDefault, $fill: 'forwards', $visibility: $visibilityDefault) {",
                            "    @include animation-name(expandOutWithFade);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    }
                },
                "_fading-entrances": {
                    "_fadeIn.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeIn) {",
                            "    0% {",
                            "        opacity: 0;",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeIn($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeIn);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInDown) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(-100px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInDown($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInDownBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInDownBig) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(-2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInDownBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInDownBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInLeft.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInLeft) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(-20px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInLeft($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInLeft);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInLeftBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInLeftBig) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(-2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInLeftBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInLeftBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInRight.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInRight) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(20px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInRight($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInRight);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInRightBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInRightBig) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInRightBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInRightBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInUp) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(20px));}",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInUp($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeInUpBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeInUpBig) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeInUpBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeInUpBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "fading-entrances.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF FADING ENTRANCES",
                            "",
                            "@import \"_fadeIn\";",
                            "@import \"_fadeInDown\";",
                            "@import \"_fadeInDownBig\";",
                            "@import \"_fadeInLeft\";",
                            "@import \"_fadeInLeftBig\";",
                            "@import \"_fadeInRight\";",
                            "@import \"_fadeInRightBig\";",
                            "@import \"_fadeInUp\";",
                            "@import \"_fadeInUpBig\";"
                        ]
                    }
                },
                "_fading-exits": {
                    "_fadeOut.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOut) {",
                            "    0% {",
                            "        opacity: 1;",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOut($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOut);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutDown) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(20px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutDown($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutDownBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutDownBig) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutDownBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutDownBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutLeft.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutLeft) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(-20px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutLeft($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutLeft);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutLeftBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutLeftBig) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(-2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutLeftBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutLeftBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutRight.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutRight) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(20px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutRight($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutRight);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutRightBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutRightBig) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutRightBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutRightBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutUp) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(-100px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutUp($count: $countDefault, $duration: .2s, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_fadeOutUpBig.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(fadeOutUpBig) {",
                            "    0% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(-2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin fadeOutUpBig($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(fadeOutUpBig);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "fading-exits.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF FADING EXITS",
                            "",
                            "@import \"_fadeOut\";",
                            "@import \"_fadeOutDown\";",
                            "@import \"_fadeOutDownBig\";",
                            "@import \"_fadeOutLeft\";",
                            "@import \"_fadeOutLeftBig\";",
                            "@import \"_fadeOutRight\";",
                            "@import \"_fadeOutRightBig\";",
                            "@import \"_fadeOutUp\";",
                            "@import \"_fadeOutUpBig\";"
                        ]
                    }
                },
                "_other-entrances": {
                    "_pressIn.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(pressIn) {",
                            "    100% {",
                            "        @include transform(scale(.7));",
                            "    }",
                            "}",
                            "@mixin pressIn($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(pressIn);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_pressInSmall.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(pressInSmall) {",
                            "    100% {",
                            "        @include transform(scale(.5));",
                            "    }",
                            "}",
                            "@mixin pressInSmall($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(pressInSmall);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_waterIn.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(waterIn) {",
                            "    0% {",
                            "        @include transform(translate(-45%) scaleX(2));",
                            "    }",
                            "    100% {",
                            "        @include transform(translate(0%) scaleX(1));",
                            "    }",
                            "}",
                            "@mixin waterIn($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(waterIn);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "other-entrances.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF FADING ENTRANCES",
                            "",
                            "@import \"_pressIn\";",
                            "@import \"_waterIn\";",
                            "@import \"_pressInSmall\";"
                        ]
                    }
                },
                "_other-exits": {
                    "_pressOut.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(pressOut) {",
                            "    0% {",
                            "        @include transform(scale3d(.7, .7, .7));",
                            "    }",
                            "}",
                            "@mixin pressOut($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(pressOut);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_pressOutSmall.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(pressOutSmall) {",
                            "    0% {",
                            "        @include transform(scale(.5));",
                            "    }",
                            "}",
                            "@mixin pressOutSmall($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(pressOutSmall);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_waterOut.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(waterOut) {",
                            "    0% {",
                            "        @include transform(translate(-45%) scaleX(2));",
                            "    }",
                            "    100% {",
                            "        @include transform(translate(0%) scaleX(1));",
                            "    }",
                            "}",
                            "@mixin waterOut($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(waterOut);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "other-exits.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF PRESS EXITS",
                            "",
                            "@import \"_pressOut\";",
                            "@import \"_waterOut\";",
                            "@import \"_pressOutSmall\";"
                        ]
                    }
                },
                "_sliding-entrances": {
                    "_slideInDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideInDown) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(-2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideInDown($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideInDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_slideInLeft.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideInLeft) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(-2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideInLeft($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideInLeft);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_slideInRight.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideInRight) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateX(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideInRight($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideInRight);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_slideInUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideInUp) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(2000px));",
                            "    }",
                            "    100% {",
                            "        opacity: 1;",
                            "        @include transform(translateY(0));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideInUp($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideInUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "sliding-entrances.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF SLIDING ENTRANCES",
                            "",
                            "@import \"_slideInDown\";",
                            "@import \"_slideInLeft\";",
                            "@import \"_slideInRight\";",
                            "@import \"_slideInUp\";"
                        ]
                    }
                },
                "_sliding-exits": {
                    "_slideOutDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideOutDown) {",
                            "    0% {",
                            "        @include transform(translateY(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideOutDown($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideOutDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_slideOutLeft.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideOutLeft) {",
                            "    0% {",
                            "        @include transform(translateX(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(-2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideOutLeft($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideOutLeft);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_slideOutRight.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideOutRight) {",
                            "    0% {",
                            "        @include transform(translateX(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateX(2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideOutRight($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideOutRight);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_slideOutUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(slideOutUp) {",
                            "    0% {",
                            "        @include transform(translateY(0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(translateY(-2000px));",
                            "    }",
                            "}",
                            "",
                            "@mixin slideOutUp($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(slideOutUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "sliding-exits.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF SLIDING EXITS",
                            "",
                            "@import \"_slideOutDown\";",
                            "@import \"_slideOutLeft\";",
                            "@import \"_slideOutRight\";",
                            "@import \"_slideOutUp\";"
                        ]
                    }
                },
                "_zooming-entrances": {
                    "_zoomIn.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomIn) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.3, .3, .3));",
                            "    }",
                            "    50% {",
                            "        opacity: 1;",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomIn($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomIn);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomInDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomInDown) {",
                            "    0% {",
                            "        animation-timing-function: cubic-bezier(.550, .055, .675, .190);",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.1, .1, .1) translate3d(0, -1000px, 0));",
                            "    }",
                            "    60% {",
                            "        animation-timing-function: cubic-bezier(.175, .885, .320, 1);",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(0, 60px, 0));",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomInDown($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomInDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomInLeft.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomInLeft) {",
                            "    0% {",
                            "        animation-timing-function: cubic-bezier(.550, .055, .675, .190);",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.1, .1, .1) translate3d(-1000px, 0, 0));",
                            "    }",
                            "    60% {",
                            "        animation-timing-function: cubic-bezier(.175, .885, .320, 1);",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(10px, 0, 0));",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomInLeft($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomInLeft);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomInPulse.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomInPulse) {",
                            "    from {",
                            "        -webkit-transform: scale3d(1, 1, 1);",
                            "        transform: scale3d(1, 1, 1);",
                            "    }",
                            "    50% {",
                            "        -webkit-transform: scale3d(1.8, 1.8, 1.8);",
                            "        transform: scale3d(1.8, 1.8, 1.8);",
                            "    }",
                            "    to {",
                            "        -webkit-transform: scale3d(1.4, 1.4, 1.4);",
                            "        transform: scale3d(1.4, 1.4, 1.4);",
                            "    }",
                            "}",
                            "// 用在icon放大再缩小效果",
                            "@mixin zoomInPulse($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomInPulse);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomInQuick.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomInQuick) {",
                            "    0% {",
                            "        opacity: 0;",
                            "        @include transform(scale(.8));",
                            "    }",
                            "    to {",
                            "        @include transform(scale(1));",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomInQuick($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomInQuick);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomInRight.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomInRight) {",
                            "    0% {",
                            "        animation-timing-function: cubic-bezier(.550, .055, .675, .190);",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.1, .1, .1) translate3d(1000px, 0, 0));",
                            "    }",
                            "    60% {",
                            "        animation-timing-function: cubic-bezier(.175, .885, .320, 1);",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(-10px, 0, 0));",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomInRight($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomInRight);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomInUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomInUp) {",
                            "    0% {",
                            "        animation-timing-function: cubic-bezier(.550, .055, .675, .190);",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.1, .1, .1) translate3d(0, 1000px, 0));",
                            "    }",
                            "    60% {",
                            "        animation-timing-function: cubic-bezier(.175, .885, .320, 1);",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(0, -60px, 0));",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomInUp($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-out-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomInUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "zooming-entrances.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF ZOOMING ENTRANCES",
                            "",
                            "@import \"_zoomIn\";",
                            "@import \"_zoomInPulse\";",
                            "@import \"_zoomInQuick\";",
                            "@import \"_zoomInDown\";",
                            "@import \"_zoomInLeft\";",
                            "@import \"_zoomInRight\";",
                            "@import \"_zoomInUp\";"
                        ]
                    }
                },
                "_zooming-exits": {
                    "_zoomOut.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomOut) {",
                            "    0% {",
                            "        opacity: 1;",
                            "    }",
                            "    50% {",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.3, .3, .3));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomOut($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomOut);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomOutDown.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomOutDown) {",
                            "    40% {",
                            "        animation-timing-function: cubic-bezier(.550, .055, .675, .190);",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(0, -60px, 0));",
                            "    }",
                            "    100% {",
                            "        animation-timing-function: cubic-bezier(.175, .885, .320, 1);",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.1, .1, .1) translate3d(0, 2000px, 0));",
                            "        @include transform-origin(center bottom);",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomOutDown($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomOutDown);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomOutLeft.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomOutLeft) {",
                            "    40% {",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(42px, 0, 0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(scale(.1) translate3d(-2000px, 0, 0));",
                            "        @include transform-origin(left center);",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomOutLeft($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomOutLeft);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomOutPulse.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomOutPulse) {",
                            "    from {",
                            "        -webkit-transform: scale3d(1.4, 1.4, 1.4);",
                            "        transform: scale3d(1.4, 1.4, 1.4);",
                            "    }",
                            "    to {",
                            "        -webkit-transform: scale3d(1, 1, 1);",
                            "        transform: scale3d(1, 1, 1);",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomOutPulse($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $functionDefault, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomOutPulse);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomOutQuick.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomOutQuick) {",
                            "    0% {",
                            "        @include transform(scale(1));",
                            "    }",
                            "    to {",
                            "        opacity: 0;",
                            "        @include transform(scale(.8));",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomOutQuick($count: $countDefault, $duration: $durationSmallDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomOutQuick);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomOutRight.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomOutRight) {",
                            "    40% {",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(-42px, 0, 0));",
                            "    }",
                            "    100% {",
                            "        opacity: 0;",
                            "        @include transform(scale(.1) translate3d(2000px, 0, 0));",
                            "        @include transform-origin(right center);",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomOutRight($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomOutRight);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "_zoomOutUp.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "@include keyframes(zoomOutUp) {",
                            "    40% {",
                            "        animation-timing-function: cubic-bezier(.550, .055, .675, .190);",
                            "        opacity: 1;",
                            "        @include transform(scale3d(.475, .475, .475) translate3d(0, 60px, 0));",
                            "    }",
                            "    100% {",
                            "        animation-timing-function: cubic-bezier(.175, .885, .320, 1);",
                            "        opacity: 0;",
                            "        @include transform(scale3d(.1, .1, .1) translate3d(0, -2000px, 0));",
                            "        @include transform-origin(center bottom);",
                            "    }",
                            "}",
                            "",
                            "@mixin zoomOutUp($count: $countDefault, $duration: $durationDefault, $delay: $delayDefault, $function: $ease-in-quint, $fill: $fillDefault, $visibility: $visibilityDefault) {",
                            "    @include animation-name(zoomOutUp);",
                            "    @include count($count);",
                            "    @include duration($duration);",
                            "    @include delay($delay);",
                            "    @include function($function);",
                            "    @include fill-mode($fill);",
                            "    @include visibility($visibility);",
                            "}"
                        ]
                    },
                    "zooming-exits.scss": {
                        "classes": "",
                        "functions": "",
                        "text": [
                            "// INDEX OF ZOOMING EXITS",
                            "",
                            "@import \"_zoomOut\";",
                            "@import \"_zoomOutPulse\";",
                            "@import \"_zoomOutQuick\";",
                            "@import \"_zoomOutDown\";",
                            "@import \"_zoomOutLeft\";",
                            "@import \"_zoomOutRight\";",
                            "@import \"_zoomOutUp\";"
                        ]
                    }
                }
            }
        },
        "badge": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import {obj} from '../util';",
                    "import Sup from './sup';",
                    "",
                    "/**",
                    " * Badge",
                    " */",
                    "class Badge extends Component {",
                    "    static propTypes = {",
                    "        // 样式类名的品牌前缀",
                    "        prefix: PropTypes.string,",
                    "        // 自定义类名",
                    "        className: PropTypes.string,",
                    "        // 自定义内联样式",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 徽章依托的内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏",
                    "         */",
                    "        count: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "        /**",
                    "         * 自定义节点内容",
                    "         */",
                    "        content: PropTypes.node,",
                    "        /**",
                    "         * 展示的封顶的数字",
                    "         */",
                    "        overflowCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "        /**",
                    "         * 不展示数字，只展示一个小红点",
                    "         */",
                    "        dot: PropTypes.bool",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        count: 0,",
                    "        overflowCount: 99,",
                    "        dot: false",
                    "    };",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix, dot, className, children, content, style,",
                    "            count: originCount,",
                    "            overflowCount: originOverflowCount",
                    "        } = this.props;",
                    "        const count = parseInt(originCount, 10);",
                    "        const overflowCount = parseInt(originOverflowCount, 10);",
                    "        const others = obj.pickOthers(Badge.propTypes, this.props);",
                    "",
                    "        // 如果是数字，则添加默认的 title",
                    "        if (count) {",
                    "            others.title = others.title || `${count}`;",
                    "        }",
                    "",
                    "        const classes = classNames(`${prefix}badge`, {",
                    "            [`${prefix}badge-not-a-wrapper`]: !children,",
                    "        }, className);",
                    "",
                    "        return (",
                    "            <span className={classes} {...others}>",
                    "                {children}",
                    "                <Sup {...({prefix, content, count, overflowCount, dot, style})} />",
                    "            </span>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Badge);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/function\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/placeholder\";",
                    "@import \"scss/variable\";",
                    "",
                    ".#{$css-prefix} {",
                    "    &badge {",
                    "        @include box-sizing;",
                    "        /* @include global-font; */",
                    "",
                    "        @include badge-bounding();",
                    "",
                    "        .#{$css-prefix}badge-count {",
                    "            @include badge-state(",
                    "                $color: $badge-color,",
                    "                $bgColor: $badge-color-bg,",
                    "                $borderRadius: $badge-size-count-border-radius",
                    "            );",
                    "            @include badge-size(",
                    "                $width: $badge-size-count-width,",
                    "                $minWidth: $badge-size-dot-min-width,",
                    "                $height: $badge-size-count-height,",
                    "                $padding: $badge-size-count-padding,",
                    "                $fontSize: $badge-size-count-font,",
                    "                $lineHeight: $badge-size-count-lineheight",
                    "            );",
                    "            top: -.5em;",
                    "        }",
                    "",
                    "        .#{$css-prefix}badge-dot {",
                    "            @include badge-state(",
                    "                $color: $badge-dot-color,",
                    "                $bgColor: $badge-dot-color-bg,",
                    "                $borderRadius: $badge-size-dot-border-radius",
                    "            );",
                    "            @include badge-size(",
                    "                $width: $badge-size-dot-width,",
                    "                $minWidth: $badge-size-dot-min-width,",
                    "                $height: $badge-size-dot-height,",
                    "                $padding: $badge-size-dot-padding,",
                    "                $fontSize: 1px,",
                    "                $lineHeight: 1",
                    "            );",
                    "            top: -.5em;",
                    "        }",
                    "",
                    "        .#{$css-prefix}badge-custom {",
                    "            line-height: 1.166667;",
                    "            white-space: nowrap;",
                    "            font-size: $font-size-caption;",
                    "            padding-left: $badge-size-custom-padding-lr;",
                    "            padding-right: $badge-size-custom-padding-lr;",
                    "            border-radius: $badge-size-custom-border-radius;",
                    "            transform: translateX(-50%);",
                    "",
                    "            > * {",
                    "                line-height: 1;",
                    "            }",
                    "",
                    "            > i,",
                    "            > .#{$css-prefix}icon {",
                    "                &:before {",
                    "                    font-size: inherit;",
                    "                    width: auto;",
                    "                    vertical-align: top;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}badge-scroll-number {",
                    "            position: absolute;",
                    "            top: -4px;",
                    "            z-index: 10;",
                    "            overflow: hidden;",
                    "            transform-origin: left center;",
                    "        }",
                    "",
                    "        &-scroll-number-only {",
                    "            position: relative;",
                    "            display: inline-block;",
                    "            transition: transform .3s cubic-bezier(.645, .045, .355, 1), -webkit-transform .3s cubic-bezier(.645, .045, .355, 1);",
                    "            min-width: $badge-size-dot-min-width;",
                    "",
                    "            span {",
                    "                display: block;",
                    "                height: $badge-size-count-height;",
                    "                line-height: $badge-size-count-height;",
                    "                font-size: $badge-size-count-font;",
                    "            }",
                    "        }",
                    "",
                    "        &-not-a-wrapper &-count,",
                    "        &-not-a-wrapper &-custom {",
                    "            position: relative;",
                    "            display: block;",
                    "            top: auto;",
                    "            transform: translateX(0);",
                    "        }",
                    "",
                    "        &-not-a-wrapper &-dot {",
                    "            position: relative;",
                    "            display: block;",
                    "            top: auto;",
                    "            transform: translateX(0);",
                    "        }",
                    "",
                    "        &-list-wrapper {",
                    "            margin-left: 0;",
                    "            li {",
                    "                margin-bottom: $badge-size-list-margin;",
                    "                list-style: none;",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../animate/style.js';",
                    "import './main.scss';"
                ]
            },
            "sup.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Animate from '../animate';",
                    "import {support, dom} from '../util';",
                    "",
                    "/**",
                    " * badge sup component",
                    " */",
                    "",
                    "// util::getDigitArray",
                    "const getDigitArray = num => num.toString().split('').reverse().map(i => parseInt(i, 10));",
                    "",
                    "export default class Sup extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        count: PropTypes.number,",
                    "        overflowCount: PropTypes.number,",
                    "        content: PropTypes.node,",
                    "        dot: PropTypes.bool,",
                    "        style: PropTypes.object",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        count: 0,",
                    "        overflowCount: 99,",
                    "        dot: false",
                    "    };",
                    "",
                    "    // 单排可滚动的数字列表",
                    "    static renderDigit(prefix, digit, key) {",
                    "        const children = [];",
                    "        for (let i = 0; i < 30; i++) {",
                    "            children.push(<span key={i}>{i % 10}</span>);",
                    "        }",
                    "",
                    "        return <span className={`${prefix}badge-scroll-number-only`} key={key}>{children}</span>;",
                    "    }",
                    "",
                    "    // 可滚动数字组",
                    "    static renderNumber(prefix, count) {",
                    "        return getDigitArray(count).map((digit, i) => Sup.renderDigit(prefix, digit, i)).reverse();",
                    "    }",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        // 记录最后一次显示的数字",
                    "        this.lastCount = 0;",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        this.computeStyle(true);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('count' in nextProps) {",
                    "            if (nextProps.count !== this.props.count) {",
                    "                this.lastCount = this.props.count;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    componentDidUpdate(prevProps) {",
                    "        if (prevProps.count !== this.props.count) {",
                    "            this.computeStyle(false);",
                    "",
                    "            // NOTE why called `computeStyle` again after 300ms ?",
                    "            setTimeout(() => {",
                    "                this.computeStyle(true, true);",
                    "            }, 300);",
                    "        }",
                    "    }",
                    "",
                    "    computeStyle(removeTransition, revert) {",
                    "        const {prefix, count, overflowCount} = this.props;",
                    "        const supNode = this.refs.sup;",
                    "",
                    "        if (supNode && dom.hasClass(supNode, `${prefix}badge-count`)) {",
                    "            let scrollNums = supNode.querySelectorAll(`.${prefix}badge-scroll-number-only`);",
                    "",
                    "            if (scrollNums.length) {",
                    "                const height = window.getComputedStyle(supNode).height;",
                    "",
                    "                scrollNums = [].slice.call(scrollNums, 0).reverse();",
                    "",
                    "                getDigitArray(count).forEach((digit, i) => {",
                    "                    const position = this.getPositionByDigit(digit, i, revert);",
                    "                    const transformTo = -position * parseInt(height, 10);",
                    "",
                    "                    removeTransition = removeTransition || typeof getDigitArray(this.lastCount)[i] === 'undefined' || this.lastCount > overflowCount || this.lastCount <= 0;",
                    "",
                    "                    const scrollStyle = support.animation ? {",
                    "                        transition: removeTransition ? 'none' : 'transform .3s cubic-bezier(.645, .045, .355, 1), -webkit-transform .3s cubic-bezier(.645, .045, .355, 1)',",
                    "                        WebkitTransform: `translateY(${transformTo}px)`,",
                    "                        transform: `translateY(${transformTo}px)`,",
                    "                        height,",
                    "                        lineHeight: height",
                    "                    } : {",
                    "                        top: `${transformTo}px`,",
                    "                        height,",
                    "                        lineHeight: height",
                    "                    };",
                    "",
                    "                    Object.keys(scrollStyle).forEach(key => {",
                    "                        scrollNums[i].style[key] = scrollStyle[key];",
                    "                    });",
                    "                });",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    getPositionByDigit(digit, i, revert) {",
                    "        if (revert) {",
                    "            return 10 + digit;",
                    "        }",
                    "        const lastDigit = getDigitArray(this.lastCount)[i] || 0;",
                    "",
                    "        if (this.props.count > this.lastCount) {",
                    "            return (digit >= lastDigit ? 10 : 20) + digit;",
                    "        }",
                    "",
                    "        if (digit <= lastDigit) {",
                    "            return 10 + digit;",
                    "        }",
                    "",
                    "        return digit;",
                    "    }",
                    "",
                    "    render() {",
                    "        const {prefix, count, overflowCount, dot, style, content} = this.props;",
                    "",
                    "        const supClasses = classNames(`${prefix}badge-scroll-number`, {",
                    "            [`${prefix}badge-count`]: !!count,",
                    "            [`${prefix}badge-dot`]: dot,",
                    "            [`${prefix}badge-custom`]: !!content",
                    "        });",
                    "",
                    "        let children = null;",
                    "        const show = dot || count > 0 || content;",
                    "",
                    "        if (count > 0) {",
                    "            const realCount = overflowCount > 0 && count > overflowCount ?",
                    "                `${overflowCount}+` : count;",
                    "",
                    "            children = isNaN(realCount) ? realCount : Sup.renderNumber(prefix, count);",
                    "        } else if (content) {",
                    "            children = content;",
                    "        }",
                    "",
                    "        const animation = {",
                    "            appear: 'zoomIn',",
                    "            enter: 'zoomIn',",
                    "            leave: 'zoomOut'",
                    "        };",
                    "",
                    "        const wrapper = support.animation ? <Animate animation={animation} /> : <span />;",
                    "        const element = show ? <sup ref=\"sup\" className={supClasses} style={style}>{children}</sup> : null;",
                    "",
                    "        return React.cloneElement(wrapper, {}, element);",
                    "    }",
                    "}"
                ]
            },
            "scss": {
                "function.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// badge functions",
                        "// --------------------------------------------------"
                    ]
                },
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// badge mixins",
                        "// --------------------------------------------------",
                        "@mixin badge-bounding {",
                        "    position: relative;",
                        "    display: inline-block;",
                        "    vertical-align: middle;",
                        "    line-height: 1;",
                        "}",
                        "",
                        "@mixin badge-state(",
                        "    $color,",
                        "    $bgColor,",
                        "    $borderRadius",
                        ") {",
                        "    color: $color;",
                        "    background: $bgColor;",
                        "    text-align: center;",
                        "    white-space: nowrap;",
                        "    border-radius: $borderRadius;",
                        "    a,",
                        "    a:hover {",
                        "        color: $color;",
                        "    }",
                        "}",
                        "",
                        "@mixin badge-size(",
                        "    $width,",
                        "    $minWidth,",
                        "    $height,",
                        "    $padding,",
                        "    $fontSize,",
                        "    $lineHeight",
                        ") {",
                        "    position: absolute;",
                        "    width: $width;",
                        "    height: $height;",
                        "    min-width: $minWidth;",
                        "    padding: $padding;",
                        "    font-size: $fontSize;",
                        "    line-height: $lineHeight;",
                        "    transform: translateX(-50%);",
                        "}"
                    ]
                },
                "placeholder.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// badge placeholders",
                        "// --------------------------------------------------"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// badge variables",
                        "// --------------------------------------------------",
                        "",
                        "////",
                        "/// @module badge: 徽标数",
                        "/// @tag  badge",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $badge-",
                        "/// @classPrefix {prefix}-badge",
                        "/// @order {\"size/bounding\":10,\"size/list\":11,\"size/text\":12,\"statement/normal\":10}",
                        "////",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// size",
                        "/// @namespace size/bounding",
                        "$badge-size-dot-width: $s-2 !default;",
                        "/// margin (b)",
                        "/// @namespace size/list",
                        "$badge-size-list-margin: $s-zero !default;",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$badge-size-count-config-height: $s-4 !default;",
                        "/// padding (lr)",
                        "/// @namespace size/bounding",
                        "$badge-size-count-padding-lr: $s-1 !default;",
                        "/// padding (lr)",
                        "/// @namespace size/bounding",
                        "$badge-size-custom-padding-lr: $s-1 !default;",
                        "/// size",
                        "/// @namespace size/text",
                        "$badge-size-count-font: $font-size-caption !default;",
                        "",
                        "// unconfigurable",
                        "$badge-size-count-width: auto !default;",
                        "$badge-size-count-height: $badge-size-count-config-height !default;",
                        "$badge-size-count-padding: 0 $badge-size-count-padding-lr 0 $badge-size-count-padding-lr !default;",
                        "$badge-size-count-lineheight: $badge-size-count-config-height !default;",
                        "$badge-size-dot-min-width: $badge-size-dot-width !default;",
                        "$badge-size-dot-height: $badge-size-dot-width !default;",
                        "$badge-size-dot-padding: $s-zero !default;",
                        "",
                        "// Statement",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$badge-color-bg: $color-error-3 !default;",
                        "/// corner",
                        "/// @namespace statement/normal",
                        "$badge-size-count-border-radius: $s-2 !default;",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$badge-dot-color-bg: $color-error-3 !default;",
                        "/// corner",
                        "/// @namespace statement/normal",
                        "$badge-size-dot-border-radius: $s-2 !default;",
                        "/// corner",
                        "/// @namespace statement/normal",
                        "$badge-size-custom-border-radius: $corner-1 !default;",
                        "// unconfigurable",
                        "$badge-color: $color-white !default;",
                        "$badge-dot-color: $color-white !default;"
                    ]
                }
            }
        },
        "balloon": {
            "alignMap.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "/**",
                    " * Created by xiachi on 17/1/17.",
                    " */",
                    "",
                    "const normalMap = {",
                    "    t: {",
                    "        align: 'bc tc',",
                    "        rtlAlign: 'bc tc',",
                    "        arrow: 'bottom',",
                    "        trOrigin: 'bottom',",
                    "        rtlTrOrigin: 'bottom',",
                    "        offset: [0, -12]",
                    "    },",
                    "    r: {",
                    "        align: 'cl cr',",
                    "        rtlAlign: 'cr cl',",
                    "        arrow: 'left',",
                    "        trOrigin: 'left',",
                    "        rtlTrOrigin: 'right',",
                    "        offset: [12, 0]",
                    "    },",
                    "    b: {",
                    "        align: 'tc bc',",
                    "        rtlAlign: 'tc bc',",
                    "        arrow: 'top',",
                    "        trOrigin: 'top',",
                    "        rtlTrOrigin: 'top',",
                    "        offset: [0, 12]",
                    "    },",
                    "    l: {",
                    "        align: 'cr cl',",
                    "        rtlAlign: 'cl cr',",
                    "        arrow: 'right',",
                    "        trOrigin: 'right',",
                    "        rtlTrOrigin: 'left',",
                    "        offset: [-12, 0]",
                    "    },",
                    "    tl: {",
                    "        align: 'br tc',",
                    "        rtlAlign: 'bl tc',",
                    "        arrow: 'bottom-right',",
                    "        trOrigin: 'bottom right',",
                    "        rtlTrOrigin: 'bottom left',",
                    "        offset: [20, -12]",
                    "    },",
                    "    tr: {",
                    "        align: 'bl tc',",
                    "        rtlAlign: 'br tc',",
                    "        arrow: 'bottom-left',",
                    "        trOrigin: 'bottom left',",
                    "        rtlTrOrigin: 'bottom right',",
                    "        offset: [-20, -12]",
                    "    },",
                    "    rt: {",
                    "        align: 'bl cr',",
                    "        rtlAlign: 'br cl',",
                    "        arrow: 'left-bottom',",
                    "        trOrigin: 'bottom left',",
                    "        rtlTrOrigin: 'bottom right',",
                    "        offset: [12, 20]",
                    "    },",
                    "    rb: {",
                    "        align: 'tl cr',",
                    "        rtlAlign: 'tr cl',",
                    "        arrow: 'left-top',",
                    "        trOrigin: 'top left',",
                    "        rtlTrOrigin: 'top right',",
                    "        offset: [12, -20]",
                    "    },",
                    "    bl: {",
                    "        align: 'tr bc',",
                    "        rtlAlign: 'tl bc',",
                    "        arrow: 'top-right',",
                    "        trOrigin: 'top right',",
                    "        rtlTrOrigin: 'top left',",
                    "        offset: [20, 12]",
                    "    },",
                    "    br: {",
                    "        align: 'tl bc',",
                    "        rtlAlign: 'tr bc',",
                    "        arrow: 'top-left',",
                    "        trOrigin: 'top left',",
                    "        rtlTrOrigin: 'top right',",
                    "        offset: [-20, 12]",
                    "    },",
                    "    lt: {",
                    "        align: 'br cl',",
                    "        rtlAlign: 'bl cr',",
                    "        arrow: 'right-bottom',",
                    "        trOrigin: 'bottom right',",
                    "        rtlTrOrigin: 'bottom left',",
                    "        offset: [-12, 20]",
                    "    },",
                    "    lb: {",
                    "        align: 'tr cl',",
                    "        rtlAlign: 'tl cr',",
                    "        arrow: 'right-top',",
                    "        trOrigin: 'top right',",
                    "        rtlTrOrigin: 'top left',",
                    "        offset: [-12, -20]",
                    "    }",
                    "};",
                    "const edgeMap = {",
                    "    t: {",
                    "        align: 'bc tc',",
                    "        rtlAlign: 'bc tc',",
                    "        arrow: 'bottom',",
                    "        trOrigin: 'bottom',",
                    "        rtlTrOrigin: 'bottom',",
                    "        offset: [0, -12]",
                    "    },",
                    "    r: {",
                    "        align: 'cl cr',",
                    "        rtlAlign: 'cr cl',",
                    "        arrow: 'left',",
                    "        trOrigin: 'left',",
                    "        rtlTrOrigin: 'right',",
                    "        offset: [12, 0]",
                    "    },",
                    "    b: {",
                    "        align: 'tc bc',",
                    "        rtlAlign: 'tc bc',",
                    "        arrow: 'top',",
                    "        trOrigin: 'top',",
                    "        rtlTrOrigin: 'top',",
                    "        offset: [0, 12]",
                    "    },",
                    "    l: {",
                    "        align: 'cr cl',",
                    "        rtlAlign: 'cl cr',",
                    "        arrow: 'right',",
                    "        trOrigin: 'right',",
                    "        rtlTrOrigin: 'left',",
                    "        offset: [-12, 0]",
                    "    },",
                    "    tl: {",
                    "        align: 'bl tl',",
                    "        rtlAlign: 'br tr',",
                    "        arrow: 'bottom-left',",
                    "        trOrigin: 'bottom left',",
                    "        rtlTrOrigin: 'bottom right',",
                    "        offset: [0, -12]",
                    "    },",
                    "    tr: {",
                    "        align: 'br tr',",
                    "        rtlAlign: 'bl tl',",
                    "        arrow: 'bottom-right',",
                    "        trOrigin: 'bottom right',",
                    "        rtlTrOrigin: 'bottom left',",
                    "        offset: [0, -12]",
                    "    },",
                    "    rt: {",
                    "        align: 'tl tr',",
                    "        rtlAlign: 'tr tl',",
                    "        arrow: 'left-top',",
                    "        trOrigin: 'top left',",
                    "        rtlTrOrigin: 'top right',",
                    "        offset: [12, 0]",
                    "    },",
                    "    rb: {",
                    "        align: 'bl br',",
                    "        rtlAlign: 'br bl',",
                    "        arrow: 'left-bottom',",
                    "        trOrigin: 'bottom left',",
                    "        rtlTrOrigin: 'bottom right',",
                    "        offset: [12, 0]",
                    "    },",
                    "    bl: {",
                    "        align: 'tl bl',",
                    "        rtlAlign: 'tr br',",
                    "        arrow: 'top-left',",
                    "        trOrigin: 'top left',",
                    "        rtlTrOrigin: 'top right',",
                    "        offset: [0, 12]",
                    "    },",
                    "    br: {",
                    "        align: 'tr br',",
                    "        rtlAlign: 'tl bl',",
                    "        arrow: 'top-right',",
                    "        trOrigin: 'top right',",
                    "        rtlTrOrigin: 'top left',",
                    "        offset: [0, 12]",
                    "    },",
                    "    lt: {",
                    "        align: 'tr tl',",
                    "        rtlAlign: 'tl tr',",
                    "        arrow: 'right-top',",
                    "        trOrigin: 'top right',",
                    "        rtlTrOrigin: 'top left',",
                    "        offset: [-12, 0]",
                    "    },",
                    "    lb: {",
                    "        align: 'br bl',",
                    "        rtlAlign: 'bl br',",
                    "        arrow: 'right-bottom',",
                    "        trOrigin: 'bottom right',",
                    "        rtlTrOrigin: 'bottom left',",
                    "        offset: [-12, 0]",
                    "    }",
                    "};",
                    "",
                    "export {",
                    "    normalMap,",
                    "    edgeMap",
                    "};"
                ]
            },
            "balloon.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Overlay from '../overlay';",
                    "import {func, obj, log} from '../util';",
                    "import BalloonInner from './inner';",
                    "import {normalMap, edgeMap} from './alignMap';",
                    "",
                    "const {noop} = func;",
                    "const {Popup} = Overlay;",
                    "",
                    "let alignMap = normalMap;",
                    "",
                    "/** Balloon */",
                    "export default class Balloon extends React.Component {",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string",
                    "    }",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内敛样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 浮层的内容",
                    "         */",
                    "        children: PropTypes.any,",
                    "        size: PropTypes.string,",
                    "        /**",
                    "         * 样式类型",
                    "         */",
                    "        type: PropTypes.oneOf(['normal', 'primary']),",
                    "        /**",
                    "         * 弹层当前显示的状态",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认显示的状态",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层在显示和隐藏触发的事件",
                    "         * @param {Boolean} visible 弹层是否隐藏和显示",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹出层对齐方式",
                    "         */",
                    "        alignEdge: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示关闭按钮",
                    "         */",
                    "        closable: PropTypes.bool,",
                    "        /**",
                    "         * 弹出层位置",
                    "         * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下 及其 两两组合",
                    "         */",
                    "        align: PropTypes.oneOf(['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb']),",
                    "        /**",
                    "         * 弹层相对于trigger的定位的微调",
                    "         */",
                    "        offset: PropTypes.array,",
                    "        /**",
                    "         * 触发元素",
                    "         */",
                    "        trigger: PropTypes.any,",
                    "        /**",
                    "         * 触发行为",
                    "         * 鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']",
                    "         */",
                    "        triggerType: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "",
                    "        onClick: PropTypes.func,",
                    "        /**",
                    "         * 任何visible为false时会触发的事件",
                    "         */",
                    "        onClose: PropTypes.func,",
                    "        onHover: PropTypes.func,",
                    "        /**",
                    "         * 是否进行自动位置调整",
                    "         */",
                    "        needAdjust: PropTypes.bool,",
                    "        /**",
                    "         * 弹层在触发以后的延时显示, 单位毫秒 ms",
                    "         */",
                    "        delay: PropTypes.number,",
                    "        /**",
                    "         * 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发",
                    "         */",
                    "        afterClose: PropTypes.func,",
                    "        /**",
                    "         * 强制更新定位信息",
                    "         */",
                    "        shouldUpdatePosition: PropTypes.bool,",
                    "        /**",
                    "         * 弹层出现后是否自动focus到内部第一个元素",
                    "         */",
                    "        autoFocus: PropTypes.bool,",
                    "        /**",
                    "         * 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象",
                    "         */",
                    "        safeNode: PropTypes.string,",
                    "        /**",
                    "         * 用来指定safeNode节点的id，和safeNode配合使用",
                    "         */",
                    "        safeId: PropTypes.string,",
                    "        /**",
                    "         * 配置动画的播放方式",
                    "         * @param {String} in 进场动画",
                    "         * @param {String} out 出场动画",
                    "         */",
                    "        animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),",
                    "",
                    "        /**",
                    "         * 弹层的dom节点关闭时是否删除",
                    "         */",
                    "        cache: PropTypes.bool,",
                    "        /**",
                    "         * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。",
                    "         */",
                    "        popupContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),",
                    "        container: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),",
                    "        /**",
                    "         * 弹层组件style，透传给Popup",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层组件className，透传给Popup",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层组件属性，透传给Popup",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        /**",
                    "         * 弹层id, 传入值才会支持无障碍",
                    "         */",
                    "        id: PropTypes.string",
                    "    };",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        type: 'normal',",
                    "        closable: true,",
                    "        defaultVisible: false,",
                    "        size: 'medium',",
                    "        alignEdge: false,",
                    "        align: 'b',",
                    "        offset: [0, 0],",
                    "        trigger: <span></span>,",
                    "        onClose: noop,",
                    "        afterClose: noop,",
                    "        onVisibleChange: noop,",
                    "        needAdjust: false,",
                    "        triggerType: 'hover',",
                    "        safeNode: undefined,",
                    "        safeId: null,",
                    "        autoFocus: false,",
                    "        animation: {",
                    "            in: 'zoomIn',",
                    "            out: 'zoomOut'",
                    "        },",
                    "        cache: false,",
                    "        popupStyle: {},",
                    "        popupClassName: '',",
                    "        popupProps: {}",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        this.state = {",
                    "            align: props.align,",
                    "            visible: 'visible' in props ? props.visible : props.defaultVisible",
                    "        };",
                    "        this._onClose = this._onClose.bind(this);",
                    "        this._onPosition = this._onPosition.bind(this);",
                    "        this._onVisibleChange = this._onVisibleChange.bind(this);",
                    "",
                    "        this._contentId = props.id;",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible",
                    "            });",
                    "        }",
                    "",
                    "        if ('align' in nextProps) {",
                    "            this.setState({",
                    "                align: nextProps.align",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    _onVisibleChange(visible, trigger) {",
                    "        // Not Controlled",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible: visible",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onVisibleChange(visible, trigger);",
                    "",
                    "        if (!visible) {",
                    "            this.props.onClose();",
                    "        }",
                    "    }",
                    "",
                    "    _onClose(e) {",
                    "        this._onVisibleChange(false, 'closeClick');",
                    "",
                    "        //必须加上preventDefault,否则单测IE下报错,出现full page reload 异常",
                    "        e.preventDefault();",
                    "    }",
                    "",
                    "    _onPosition(res) {",
                    "        const { rtl } = this.props;",
                    "        alignMap = this.props.alignEdge ? edgeMap : normalMap;",
                    "        const newAlign = res.align.join(' ');",
                    "        let resAlign;",
                    "",
                    "        let alignKey = 'align';",
                    "        if (rtl) {",
                    "            alignKey = 'rtlAlign';",
                    "        }",
                    "",
                    "        for (const key in alignMap) {",
                    "            if (alignMap[key][alignKey] === newAlign) {",
                    "                resAlign = key;",
                    "",
                    "                break;",
                    "            }",
                    "        }",
                    "",
                    "        resAlign = resAlign || this.state.align;",
                    "        if (resAlign !== this.state.align) {",
                    "            this.setState({",
                    "                align: resAlign",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        const { type, prefix, className, alignEdge,",
                    "            trigger, triggerType, children, closable,",
                    "            shouldUpdatePosition, delay, needAdjust,",
                    "            safeId, autoFocus, safeNode, onClick, onHover,",
                    "            animation, offset, style, container, popupContainer, cache, popupStyle, popupClassName, popupProps, rtl, ...others } = this.props;",
                    "",
                    "        if (container) {",
                    "            log.deprecated('container', 'popupContainer', 'Balloon');",
                    "        }",
                    "",
                    "        const { align } = this.state;",
                    "",
                    "        alignMap = alignEdge ? edgeMap : normalMap;",
                    "        const _prefix = this.context.prefix || prefix;",
                    "",
                    "        let trOrigin = 'trOrigin';",
                    "        if (rtl) {",
                    "            trOrigin = 'rtlTrOrigin';",
                    "        }",
                    "",
                    "        const _offset = [alignMap[align].offset[0] + offset[0], alignMap[align].offset[1] + offset[1]];",
                    "        const transformOrigin = alignMap[align][trOrigin];",
                    "        const _style = {...{transformOrigin}, ...style};",
                    "",
                    "        const content = (<BalloonInner",
                    "            {...obj.pickOthers(Object.keys(Balloon.propTypes), others)}",
                    "            id={this._contentId}",
                    "            prefix={_prefix}",
                    "            closable={closable}",
                    "            onClose={this._onClose}",
                    "            className={className}",
                    "            style={_style}",
                    "            align={align}",
                    "            type={type}",
                    "            rtl={rtl}",
                    "            alignEdge={alignEdge}",
                    "        >",
                    "            {children}",
                    "        </BalloonInner>);",
                    "",
                    "        const triggerProps = {};",
                    "        triggerProps['aria-describedby'] = this._contentId;",
                    "        triggerProps.tabIndex = '0';",
                    "",
                    "        const newTrigger = React.cloneElement(trigger, triggerProps);",
                    "",
                    "        return (",
                    "            <Popup",
                    "                {...popupProps}",
                    "                trigger={this._contentId ? newTrigger : trigger}",
                    "                cache={cache}",
                    "                safeId={safeId}",
                    "                triggerType={triggerType}",
                    "                align={alignMap[align].align}",
                    "                offset={_offset}",
                    "                visible={this.state.visible}",
                    "                onPosition={this._onPosition}",
                    "                onClick={onClick}",
                    "                onHover={onHover}",
                    "                afterClose={this.props.afterClose}",
                    "                onVisibleChange={this._onVisibleChange}",
                    "                shouldUpdatePosition={shouldUpdatePosition}",
                    "                needAdjust={needAdjust}",
                    "                animation={animation}",
                    "                delay={delay}",
                    "                autoFocus={autoFocus}",
                    "                safeNode={safeNode}",
                    "                container={popupContainer || container}",
                    "                className={popupClassName}",
                    "                style={popupStyle}",
                    "                rtl={rtl}",
                    "            >",
                    "                {content}",
                    "            </Popup>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Balloon from './balloon';",
                    "import Tooltip from './tooltip';",
                    "import Inner from './inner';",
                    "",
                    "Balloon.Tooltip = ConfigProvider.config(Tooltip, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('text' in props) {",
                    "            deprecated('text', 'children', 'Tooltip');",
                    "            const { text, ...others } = props;",
                    "            props = { children: text, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});",
                    "Balloon.Inner = Inner;",
                    "",
                    "export default ConfigProvider.config(Balloon, {",
                    "    transform: (props, deprecated) => {",
                    "        if (props.alignment) {",
                    "            deprecated('alignment', 'alignEdge', 'Balloon');",
                    "            const { alignment, ...others } = props;",
                    "            props = { alignEdge: alignment === 'edge', ...others };",
                    "        }",
                    "        if (props.onCloseClick) {",
                    "            deprecated('onCloseClick', 'onVisibleChange', 'Balloon');",
                    "            const { onCloseClick, onVisibleChange, ...others } = props;",
                    "            const newOnVisibleChange = (visible, reason) => {",
                    "                if (reason === 'closeClick') {",
                    "                    onCloseClick();",
                    "                }",
                    "                if (onVisibleChange) {",
                    "                    onVisibleChange(visible, reason);",
                    "                }",
                    "            };",
                    "            props = { onVisibleChange: newOnVisibleChange, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "inner.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import {func, obj} from '../util';",
                    "import Icon from '../icon';",
                    "import {normalMap, edgeMap} from './alignMap';",
                    "",
                    "/**",
                    " * Created by xiachi on 17/2/10.",
                    " */",
                    "",
                    "const {noop} = func;",
                    "",
                    "class BalloonInner extends React.Component {",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string",
                    "    }",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        closable: PropTypes.bool,",
                    "        children: PropTypes.any,",
                    "        className: PropTypes.string,",
                    "        alignEdge: PropTypes.bool,",
                    "        onClose: PropTypes.func,",
                    "        style: PropTypes.any,",
                    "        align: PropTypes.string,",
                    "        type: PropTypes.string,",
                    "        isTooltip: PropTypes.bool,",
                    "        pure: PropTypes.bool",
                    "    }",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        closable: true,",
                    "        onClose: noop,",
                    "        align: 'b',",
                    "        type: 'normal',",
                    "        alignEdge: false,",
                    "        pure: false",
                    "    };",
                    "",
                    "    render() {",
                    "        const {prefix, closable, className, style, isTooltip, align, type, onClose, alignEdge, children, rtl, ...others} = this.props;",
                    "",
                    "        const alignMap = alignEdge ? edgeMap : normalMap;",
                    "        let _prefix = prefix;",
                    "",
                    "        if (isTooltip) {",
                    "            _prefix = `${_prefix}balloon-tooltip`;",
                    "        } else {",
                    "            _prefix = `${_prefix}balloon`;",
                    "        }",
                    "",
                    "        const classes = classNames({",
                    "            [`${_prefix}`]: true,",
                    "            [`${_prefix}-${type}`]: type,",
                    "            [`${_prefix}-medium`]: true,",
                    "            [`${_prefix}-${alignMap[align].arrow}`]: alignMap[align],",
                    "            [`${_prefix}-closable`]: closable,",
                    "            [className]: className",
                    "        });",
                    "",
                    "        return (<div role=\"tooltip\" dir={rtl ? 'rtl' : undefined} className={classes} style={style} {...obj.pickOthers(Object.keys(BalloonInner.propTypes), others)}>",
                    "            {",
                    "                closable ?",
                    "                    <a role=\"button\" tabIndex=\"0\" href=\"javascript:void(0);\" className={`${_prefix}-close`}",
                    "                        onClick={onClose}>",
                    "                        <Icon type=\"close\" size=\"small\"/>",
                    "                    </a> : null}",
                    "            {children}",
                    "        </div>);",
                    "    }",
                    "}",
                    "",
                    "export default BalloonInner;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "",
                    ".#{$css-prefix}balloon {",
                    "    @include box-sizing;",
                    "    @include balloon-bounding($balloon-border-style);",
                    "",
                    "    word-wrap: break-word;",
                    "    z-index: 0;",
                    "",
                    "    &-primary {",
                    "        @include balloon-state(",
                    "            $balloon-primary-color,",
                    "            $balloon-primary-color-border,",
                    "            $balloon-primary-color-bg,",
                    "            $balloon-primary-shadow,",
                    "            $balloon-primary-border-width",
                    "        );",
                    "        @include balloon-close(",
                    "            $balloon-size-close-margin-top,",
                    "            $balloon-size-close-margin-right,",
                    "            $balloon-size-close,",
                    "            $balloon-primary-color-close,",
                    "            $balloon-primary-color-close-hover",
                    "        );",
                    "        @include balloon-arrow(",
                    "            $balloon-size-arrow-size,",
                    "            $balloon-size-arrow-size,",
                    "            $balloon-primary-color-border,",
                    "            $balloon-primary-color-bg,",
                    "            $balloon-primary-shadow,",
                    "            $balloon-primary-border-width,",
                    "            $balloon-size-arrow-expose-primary",
                    "        );",
                    "    }",
                    "",
                    "    &-normal {",
                    "        @include balloon-state(",
                    "            $balloon-normal-color,",
                    "            $balloon-normal-color-border,",
                    "            $balloon-normal-color-bg,",
                    "            $balloon-normal-shadow,",
                    "            $balloon-normal-border-width",
                    "        );",
                    "        @include balloon-close(",
                    "            $balloon-size-close-margin-top,",
                    "            $balloon-size-close-margin-right,",
                    "            $balloon-size-close,",
                    "            $balloon-normal-color-close,",
                    "            $balloon-normal-color-close-hover",
                    "        );",
                    "        @include balloon-arrow(",
                    "            $balloon-size-arrow-size,",
                    "            $balloon-size-arrow-size,",
                    "            $balloon-normal-color-border,",
                    "            $balloon-normal-color-bg,",
                    "            $balloon-normal-shadow,",
                    "            $balloon-normal-border-width,",
                    "            $balloon-size-arrow-expose",
                    "        );",
                    "    }",
                    "",
                    "    @include show-hidden();",
                    "",
                    "    /* size */",
                    "    &-medium {",
                    "        @include balloon-size($balloon-size-padding-top, $balloon-size-padding-right, $balloon-size-padding-top, $balloon-size-padding-right);",
                    "    }",
                    "    /* 带关闭按钮的右侧padding变大 */",
                    "    &-closable {",
                    "        @include balloon-size($balloon-size-padding-top, $balloon-size-padding-closable-right, $balloon-size-padding-top, $balloon-size-padding-right);",
                    "    }",
                    "}",
                    "",
                    ".#{$css-prefix}balloon-tooltip {",
                    "    @include box-sizing;",
                    "    @include balloon-bounding($balloon-tooltip-border-style);",
                    "",
                    "    font-size: $font-size-body-1;",
                    "    z-index: 0;",
                    "",
                    "    @include tooltip-state(",
                    "        $balloon-tooltip-color,",
                    "        $balloon-tooltip-color-border,",
                    "        $balloon-tooltip-color-bg,",
                    "        $balloon-tooltip-shadow,",
                    "        $balloon-tooltip-border-width",
                    "    );",
                    "",
                    "    @include tooltip-arrow(",
                    "        $balloon-size-arrow-size,",
                    "        $balloon-size-arrow-size,",
                    "        $balloon-tooltip-color-border,",
                    "        $balloon-tooltip-color-bg",
                    "    );",
                    "",
                    "    @include show-hidden();",
                    "",
                    "    /* size */",
                    "    &-medium {",
                    "        @include balloon-size($balloon-tooltip-size-padding-top, $balloon-tooltip-size-padding-right, $balloon-tooltip-size-padding-bottom, $balloon-tooltip-size-padding-left);",
                    "    }",
                    "}",
                    "",
                    "@import \"./rtl.scss\";"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@mixin tooltip-arrow-rtl() {",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-right:after {",
                    "        left: $balloon-size-arrow-expose;",
                    "        right: auto;",
                    "        border-top: none;",
                    "        border-right: none;",
                    "        border-left: inherit;",
                    "        border-bottom: inherit;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-left:after {",
                    "        right: $balloon-size-arrow-expose;",
                    "        left: auto;",
                    "        border-top: inherit;",
                    "        border-right: inherit;",
                    "        border-left: none;",
                    "        border-bottom: none;",
                    "    }",
                    "    &.#{$css-prefix}balloon-tooltip-left-top:after {",
                    "        right: $balloon-size-arrow-expose;",
                    "        left: auto;",
                    "        border-top: inherit;",
                    "        border-right: inherit;",
                    "        border-left: none;",
                    "        border-bottom: none;",
                    "    }",
                    "    &.#{$css-prefix}balloon-tooltip-left-bottom:after {",
                    "        right: $balloon-size-arrow-expose;",
                    "        left: auto;",
                    "        border-top: inherit;",
                    "        border-right: inherit;",
                    "        border-left: none;",
                    "        border-bottom: none;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-right-top:after {",
                    "        left: $balloon-size-arrow-expose;",
                    "        right: auto;",
                    "        border-top: none;",
                    "        border-right: none;",
                    "        border-left: inherit;",
                    "        border-bottom: inherit;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-right-bottom:after {",
                    "        left: $balloon-size-arrow-expose;",
                    "        right: auto;",
                    "        border-top: none;",
                    "        border-right: none;",
                    "        border-left: inherit;",
                    "        border-bottom: inherit;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-top-left:after {",
                    "        right: $balloon-size-arrow-margin;",
                    "        left: auto;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-top-right:after {",
                    "        left: $balloon-size-arrow-margin;",
                    "        right: auto;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-bottom-left:after {",
                    "        right: $balloon-size-arrow-margin;",
                    "        left: auto;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-tooltip-bottom-right:after {",
                    "        left: $balloon-size-arrow-margin;",
                    "        right: auto;",
                    "    }",
                    "}",
                    "",
                    "@mixin balloon-close-rtl(",
                    "    $left",
                    ") {",
                    "    .#{$css-prefix}balloon-close {",
                    "        left: $left;",
                    "        right: auto;",
                    "    }",
                    "}",
                    "",
                    "@mixin balloon-arrow-rtl(",
                    "    $arrorExpose",
                    ") {",
                    "    $shadow-top: $balloon-shadow-top;",
                    "    $shadow-right: $balloon-shadow-right;",
                    "    $shadow-bottom: $balloon-shadow-bottom;",
                    "    $shadow-left: $balloon-shadow-left;",
                    "",
                    "    &.#{$css-prefix}balloon-right:after {",
                    "        left: $arrorExpose;",
                    "        right: auto;",
                    "        border-right: none;",
                    "        border-top: none;",
                    "        border-left: inherit;",
                    "        border-bottom: inherit;",
                    "        box-shadow: $shadow-left;",
                    "    }",
                    "    &.#{$css-prefix}balloon-left:after {",
                    "        right: $arrorExpose;",
                    "        left: auto;",
                    "        border-left: none;",
                    "        border-bottom: none;",
                    "        border-right: inherit;",
                    "        border-top: inherit;",
                    "        box-shadow: $shadow-right;",
                    "    }",
                    "    &.#{$css-prefix}balloon-left-top:after {",
                    "        right: $arrorExpose;",
                    "        left: auto;",
                    "        border-left: none;",
                    "        border-bottom: none;",
                    "        border-top: inherit;",
                    "        border-right: inherit;",
                    "        box-shadow: $shadow-right;",
                    "    }",
                    "    &.#{$css-prefix}balloon-left-bottom:after {",
                    "        right: $arrorExpose;",
                    "        left: auto;",
                    "        border-left: none;",
                    "        border-bottom: none;",
                    "        border-top: inherit;",
                    "        border-right: inherit;",
                    "        box-shadow: $shadow-right;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-right-top:after {",
                    "        left: $arrorExpose;",
                    "        right: auto;",
                    "        border-right: none;",
                    "        border-top: none;",
                    "        border-bottom: inherit;",
                    "        border-left: inherit;",
                    "        box-shadow: $shadow-left;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-right-bottom:after {",
                    "        left: $arrorExpose;",
                    "        right: auto;",
                    "        border-right: none;",
                    "        border-top: none;",
                    "        border-bottom: inherit;",
                    "        border-left: inherit;",
                    "        box-shadow: $shadow-left;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-top-left:after {",
                    "        right: $balloon-size-arrow-margin;",
                    "        left: auto;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-top-right:after {",
                    "        right: auto;",
                    "        left: $balloon-size-arrow-margin;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-bottom-left:after {",
                    "        right: $balloon-size-arrow-margin;",
                    "        left: auto;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-bottom-right:after {",
                    "        left: $balloon-size-arrow-margin;",
                    "        right: auto;",
                    "    }",
                    "}",
                    "",
                    ".#{$css-prefix}balloon[dir=\"rtl\"] {",
                    "    &.#{$css-prefix}balloon-primary {",
                    "        @include balloon-close-rtl(",
                    "            $balloon-size-close-margin-right",
                    "        );",
                    "        @include balloon-arrow-rtl(",
                    "            $balloon-size-arrow-expose-primary",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}balloon-normal {",
                    "        @include balloon-close-rtl(",
                    "            $balloon-size-close-margin-right",
                    "        );",
                    "        @include balloon-arrow-rtl(",
                    "            $balloon-size-arrow-expose",
                    "        );",
                    "    }",
                    "",
                    "    /* 带关闭按钮的右侧padding变大 */",
                    "    &.#{$css-prefix}balloon-closable {",
                    "        @include balloon-size($balloon-size-padding-top, $balloon-size-padding-right, $balloon-size-padding-top, $balloon-size-padding-closable-right);",
                    "    }",
                    "}",
                    "",
                    ".#{$css-prefix}balloon-tooltip[dir=\"rtl\"] {",
                    "",
                    "    @include tooltip-arrow-rtl();",
                    "",
                    "    /* size */",
                    "    &.#{$css-prefix}balloon-tooltip-medium {",
                    "        @include balloon-size($balloon-tooltip-size-padding-top, $balloon-tooltip-size-padding-left, $balloon-tooltip-size-padding-bottom, $balloon-tooltip-size-padding-right);",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../animate/style.js';",
                    "import '../overlay/style.js';",
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "tooltip.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Overlay from '../overlay';",
                    "import BalloonInner from './inner';",
                    "import {normalMap as alignMap} from './alignMap';",
                    "",
                    "const {Popup} = Overlay;",
                    "",
                    "/** Balloon.Tooltip */",
                    "export default class Tooltip extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式类名的品牌前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * tooltip的内容",
                    "         */",
                    "        children: PropTypes.any,",
                    "        /**",
                    "         * 弹出层位置",
                    "         * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下 及其 两两组合",
                    "         */",
                    "        align: PropTypes.oneOf(['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb']),",
                    "        /**",
                    "         * 触发元素",
                    "         */",
                    "        trigger: PropTypes.any,",
                    "        /**",
                    "         * 触发行为",
                    "         * 鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']",
                    "         */",
                    "        triggerType: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * 弹层组件style，透传给Popup",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层组件className，透传给Popup",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层组件属性，透传给Popup",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        /**",
                    "         * 是否pure render",
                    "         */",
                    "        pure: PropTypes.bool,",
                    "        /**",
                    "         * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。",
                    "         */",
                    "        popupContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),",
                    "        /**",
                    "         * 弹层id, 传入值才会支持无障碍",
                    "         */",
                    "        id: PropTypes.string",
                    "    };",
                    "    static defaultProps = {",
                    "        triggerType: 'hover',",
                    "        prefix: 'next-',",
                    "        align: 'b',",
                    "        trigger: <span></span>",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        this._contentId = props.id;",
                    "    }",
                    "",
                    "    render() {",
                    "        const { className, align, style, prefix, trigger, children, popupContainer,",
                    "            popupProps, popupClassName, popupStyle, triggerType, rtl, ...others} = this.props;",
                    "",
                    "        let trOrigin = 'trOrigin';",
                    "        if (rtl) {",
                    "            others.rtl = true;",
                    "            trOrigin = 'rtlTrOrigin';",
                    "        }",
                    "",
                    "        const transformOrigin = alignMap[align][trOrigin];",
                    "        const _offset = alignMap[align].offset;",
                    "        const _style = {transformOrigin, ...style};",
                    "",
                    "        const content = (<BalloonInner",
                    "            {...others}",
                    "            id={this._contentId}",
                    "            prefix={prefix}",
                    "            closable={false}",
                    "            isTooltip",
                    "            className={className}",
                    "            style={_style}",
                    "            align={align}",
                    "            rtl={rtl}",
                    "        >",
                    "            {children}",
                    "        </BalloonInner>);",
                    "",
                    "        const triggerProps = {};",
                    "        triggerProps['aria-describedby'] = this._contentId;",
                    "        triggerProps.tabIndex = '0';",
                    "",
                    "        const newTrigger = React.cloneElement(trigger, triggerProps);",
                    "",
                    "        return (",
                    "            <Popup",
                    "                {...popupProps}",
                    "                container={popupContainer}",
                    "                trigger={this._contentId ? newTrigger : trigger}",
                    "                triggerType={triggerType}",
                    "                align={alignMap[align].align}",
                    "                offset={_offset}",
                    "                delay={0}",
                    "                className={popupClassName}",
                    "                style={popupStyle}",
                    "                rtl={rtl}",
                    "                shouldUpdatePosition",
                    "            >",
                    "                {content}",
                    "            </Popup>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// balloon mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin balloon-bounding($border-style) {",
                        "    position: absolute;",
                        "    max-width: $balloon-size-max-width;",
                        "    border-style: $border-style;",
                        "    border-radius: $balloon-corner;",
                        "}",
                        "",
                        "@mixin balloon-state(",
                        "    $contentColor,",
                        "    $colorBorder,",
                        "    $colorBg,",
                        "    $shadow,",
                        "    $widthBorder",
                        ") {",
                        "    color: $contentColor;",
                        "    border-color: $colorBorder;",
                        "    background-color: $colorBg;",
                        "    box-shadow: $shadow;",
                        "    border-width: $widthBorder;",
                        "}",
                        "",
                        "@mixin balloon-size(",
                        "    $padding-top,",
                        "    $padding-right,",
                        "    $padding-bottom,",
                        "    $padding-left",
                        ") {",
                        "    padding: $padding-top $padding-right $padding-bottom $padding-left;",
                        "}",
                        "",
                        "@mixin balloon-arrow(",
                        "    $width,",
                        "    $height,",
                        "    $colorBorder,",
                        "    $colorBg,",
                        "    $shadow,",
                        "    $widthBorder,",
                        "    $arrorExpose",
                        ") {",
                        "    $shadow-top: $balloon-shadow-top;",
                        "    $shadow-right: $balloon-shadow-right;",
                        "    $shadow-bottom: $balloon-shadow-bottom;",
                        "    $shadow-left: $balloon-shadow-left;",
                        "",
                        "    @if $shadow == $shadow-zero {",
                        "        $shadow-top: null;",
                        "        $shadow-right: null;",
                        "        $shadow-bottom: null;",
                        "        $shadow-left: null;",
                        "    }",
                        "    &:after {",
                        "        position: absolute;",
                        "        width: $height;",
                        "        height: $height;",
                        "        content: ' ';",
                        "        transform: rotate(45deg);",
                        "        box-sizing: content-box !important;",
                        "        border: $widthBorder $balloon-border-style $colorBorder;",
                        "        background-color: $colorBg;",
                        "        z-index: -1;",
                        "    }",
                        "    &.#{$css-prefix}balloon-top:after {",
                        "        top: $arrorExpose;",
                        "        left: calc(50% + #{$arrorExpose});",
                        "        border-right: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-top;",
                        "    }",
                        "    &.#{$css-prefix}balloon-right:after {",
                        "        top: calc(50% + #{$arrorExpose});",
                        "        right: $arrorExpose;",
                        "        border-left: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-right;",
                        "    }",
                        "    &.#{$css-prefix}balloon-bottom:after {",
                        "        bottom: $arrorExpose;",
                        "        left: calc(50% + #{$arrorExpose});",
                        "        border-top: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-bottom;",
                        "    }",
                        "    &.#{$css-prefix}balloon-left:after {",
                        "        top: calc(50% + #{$arrorExpose});",
                        "        left: $arrorExpose;",
                        "        border-top: none;",
                        "        border-right: none;",
                        "        box-shadow: $shadow-left;",
                        "    }",
                        "    &.#{$css-prefix}balloon-left-top:after {",
                        "        top: $balloon-size-arrow-margin;",
                        "        left: $arrorExpose;",
                        "        border-top: none;",
                        "        border-right: none;",
                        "        box-shadow: $shadow-left;",
                        "    }",
                        "    &.#{$css-prefix}balloon-left-bottom:after {",
                        "        bottom: $balloon-size-arrow-margin;",
                        "        left: $arrorExpose;",
                        "        border-top: none;",
                        "        border-right: none;",
                        "        box-shadow: $shadow-left;",
                        "    }",
                        "",
                        "    &.#{$css-prefix}balloon-right-top:after {",
                        "        top: $balloon-size-arrow-margin;",
                        "        right: $arrorExpose;",
                        "        border-bottom: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-right;",
                        "    }",
                        "",
                        "    &.#{$css-prefix}balloon-right-bottom:after {",
                        "        right: $arrorExpose;",
                        "        bottom: $balloon-size-arrow-margin;",
                        "        border-bottom: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-right;",
                        "    }",
                        "",
                        "    &.#{$css-prefix}balloon-top-left:after {",
                        "        top: $arrorExpose;",
                        "        left: $balloon-size-arrow-margin;",
                        "        border-right: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-top;",
                        "    }",
                        "",
                        "    &.#{$css-prefix}balloon-top-right:after {",
                        "        top: $arrorExpose;",
                        "        right: $balloon-size-arrow-margin;",
                        "        border-right: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-top;",
                        "    }",
                        "",
                        "    &.#{$css-prefix}balloon-bottom-left:after {",
                        "        bottom: $arrorExpose;",
                        "        left: $balloon-size-arrow-margin;",
                        "        border-top: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-bottom;",
                        "    }",
                        "",
                        "    &.#{$css-prefix}balloon-bottom-right:after {",
                        "        right: $balloon-size-arrow-margin;",
                        "        bottom: $arrorExpose;",
                        "        border-top: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-bottom;",
                        "    }",
                        "}",
                        "",
                        "@mixin balloon-close(",
                        "    $top,",
                        "    $right,",
                        "    $iconSize,",
                        "    $colorClose,",
                        "    $colorCloseHover",
                        ") {",
                        "    .#{$css-prefix}balloon-close {",
                        "        position: absolute;",
                        "        top: $top;",
                        "        right: $right;",
                        "        font-size: $iconSize;",
                        "        .#{$css-prefix}icon {",
                        "            @include icon-square-size($iconSize);",
                        "        }",
                        "        color: $colorClose;",
                        "        :hover {",
                        "            color: $colorCloseHover;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin show-hidden() {",
                        "    &.visible {",
                        "        display: block;",
                        "    }",
                        "    &.hidden {",
                        "        display: none;",
                        "    }",
                        "}",
                        "",
                        "@mixin tooltip-state(",
                        "    $contentColor,",
                        "    $colorBorder,",
                        "    $colorBg,",
                        "    $shadow,",
                        "    $widthBorder",
                        ") {",
                        "    color: $contentColor;",
                        "    border-color: $colorBorder;",
                        "    background-color: $colorBg;",
                        "    box-shadow: $shadow;",
                        "    border-width: $widthBorder;",
                        "}",
                        "",
                        "@mixin tooltip-arrow(",
                        "    $width,",
                        "    $height,",
                        "    $colorBorder,",
                        "    $colorBg",
                        ") {",
                        "",
                        "    $shadow-top: null;",
                        "    $shadow-right: null;",
                        "    $shadow-bottom: null;",
                        "    $shadow-left: null;",
                        "    &:after {",
                        "        position: absolute;",
                        "        width: $width;",
                        "        height: $height;",
                        "        content: ' ';",
                        "        transform: rotate(45deg);",
                        "        box-sizing: content-box !important;",
                        "        border: $balloon-tooltip-border-width $balloon-tooltip-border-style $colorBorder;",
                        "        background-color: $colorBg;",
                        "        z-index: -1;",
                        "    }",
                        "    &-top:after {",
                        "        top: $balloon-size-arrow-expose;",
                        "        left: calc(50% + #{$balloon-size-arrow-expose});",
                        "        border-right: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-top;",
                        "    }",
                        "    &-right:after {",
                        "        top: calc(50% + #{$balloon-size-arrow-expose});",
                        "        right: $balloon-size-arrow-expose;",
                        "        border-left: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-right;",
                        "    }",
                        "    &-bottom:after {",
                        "        bottom: $balloon-size-arrow-expose;",
                        "        left: calc(50% + #{$balloon-size-arrow-expose});",
                        "        border-top: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-bottom;",
                        "    }",
                        "    &-left:after {",
                        "        top: calc(50% + #{$balloon-size-arrow-expose});",
                        "        left: $balloon-size-arrow-expose;",
                        "        border-top: none;",
                        "        border-right: none;",
                        "        box-shadow: $shadow-left;",
                        "    }",
                        "    &-left-top:after {",
                        "        top: $balloon-size-arrow-margin;",
                        "        left: $balloon-size-arrow-expose;",
                        "        border-top: none;",
                        "        border-right: none;",
                        "        box-shadow: $shadow-left;",
                        "    }",
                        "    &-left-bottom:after {",
                        "        bottom: $balloon-size-arrow-margin;",
                        "        left: $balloon-size-arrow-expose;",
                        "        border-top: none;",
                        "        border-right: none;",
                        "        box-shadow: $shadow-left;",
                        "    }",
                        "",
                        "    &-right-top:after {",
                        "        top: $balloon-size-arrow-margin;",
                        "        right: $balloon-size-arrow-expose;",
                        "        border-bottom: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-right;",
                        "    }",
                        "",
                        "    &-right-bottom:after {",
                        "        right: $balloon-size-arrow-expose;",
                        "        bottom: $balloon-size-arrow-margin;",
                        "        border-bottom: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-right;",
                        "    }",
                        "",
                        "    &-top-left:after {",
                        "        top: $balloon-size-arrow-expose;",
                        "        left: $balloon-size-arrow-margin;",
                        "        border-right: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-top;",
                        "    }",
                        "",
                        "    &-top-right:after {",
                        "        top: $balloon-size-arrow-expose;",
                        "        right: $balloon-size-arrow-margin;",
                        "        border-right: none;",
                        "        border-bottom: none;",
                        "        box-shadow: $shadow-top;",
                        "    }",
                        "",
                        "    &-bottom-left:after {",
                        "        bottom: $balloon-size-arrow-expose;",
                        "        left: $balloon-size-arrow-margin;",
                        "        border-top: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-bottom;",
                        "    }",
                        "",
                        "    &-bottom-right:after {",
                        "        right: $balloon-size-arrow-margin;",
                        "        bottom: $balloon-size-arrow-expose;",
                        "        border-top: none;",
                        "        border-left: none;",
                        "        box-shadow: $shadow-bottom;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module balloon: 气泡",
                        "/// @tag Balloon",
                        "/// @category component",
                        "/// @family feedback",
                        "/// @varPrefix $balloon-",
                        "/// @classPrefix {prefix}-balloon",
                        "/// @order {\"size/bounding\":10,\"size/content\":11,\"size/close icon\":12,\"size/arrow\":13,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/content\":101,\"statement/normal/close icon\":102,\"statement/hover\":11,\"statement/hover/close icon\":110}",
                        "////",
                        "",
                        "",
                        "// balloon variables",
                        "// --------------------------------------------------",
                        "",
                        "// Size",
                        "/// max width",
                        "/// @type length",
                        "/// @namespace size/bounding",
                        "$balloon-size-max-width: 300px !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/content",
                        "$balloon-size-padding-top: $s-4 !default;",
                        "",
                        "/// padding (r)",
                        "/// @namespace size/content",
                        "$balloon-size-padding-right: $s-4 !default;",
                        "",
                        "/// padding (l)",
                        "/// @namespace size/content",
                        "$balloon-size-padding-closable-right: $s-10 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$balloon-normal-border-width: $line-1 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$balloon-primary-border-width: $line-1 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$balloon-tooltip-border-width: $line-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/close icon",
                        "$balloon-size-close: $icon-xs !default;",
                        "",
                        "/// margin (t)",
                        "/// @namespace size/close icon",
                        "$balloon-size-close-margin-top: $s-3 !default;",
                        "",
                        "/// margin (r)",
                        "/// @namespace size/close icon",
                        "$balloon-size-close-margin-right: $s-3 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/arrow",
                        "$balloon-size-arrow-size: $s-3 !default;",
                        "",
                        "/// margin",
                        "/// @namespace size/arrow",
                        "$balloon-size-arrow-margin: $s-3 !default;",
                        "",
                        "/// padding (t)",
                        "/// @namespace size/bounding",
                        "$balloon-tooltip-size-padding-top: $s-2 !default;",
                        "",
                        "/// padding (r)",
                        "/// @namespace size/bounding",
                        "$balloon-tooltip-size-padding-right: $s-2 !default;",
                        "",
                        "/// padding (b)",
                        "/// @namespace size/bounding",
                        "$balloon-tooltip-size-padding-bottom: $s-2 !default;",
                        "",
                        "/// padding (l)",
                        "/// @namespace size/bounding",
                        "$balloon-tooltip-size-padding-left: $s-2 !default;",
                        "",
                        "$balloon-size-padding: $balloon-size-padding-top $balloon-size-padding-right;",
                        "$balloon-size-closable-padding: $balloon-size-padding-top $balloon-size-padding-closable-right $balloon-size-padding-top $balloon-size-padding-right;",
                        "$balloon-size-arrow-expose: -$balloon-size-arrow-size / 2 - 1;",
                        "$balloon-size-arrow-expose-primary: -$balloon-size-arrow-size / 2 - $balloon-primary-border-width;",
                        "",
                        "// Common",
                        "/// border style",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-border-style: $line-solid !default;",
                        "/// corner",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-corner: $corner-1 !default;",
                        "",
                        "// Normal",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-normal-color-bg: $color-white !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-normal-color-border: $color-line1-2 !default;",
                        "",
                        "/// shadow",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-normal-shadow: $shadow-2-down !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$balloon-normal-color: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/close icon",
                        "$balloon-normal-color-close: $color-text1-2 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/close icon",
                        "$balloon-normal-color-close-hover: $color-text1-3 !default;",
                        "",
                        "// Primary",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-primary-color-bg: $color-notice-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-primary-color-border: $color-notice-3 !default;",
                        "",
                        "/// shadow",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-primary-shadow: $shadow-1-down !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$balloon-primary-color: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/close icon",
                        "$balloon-primary-color-close: $color-text1-2 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/close icon",
                        "$balloon-primary-color-close-hover: $color-text1-4 !default;",
                        "",
                        "// Tooltip",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-tooltip-color-bg: $color-fill1-2 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-tooltip-color-border: $color-line1-2 !default;",
                        "",
                        "/// border style",
                        "/// @namespace statement/normal/bounding",
                        "$balloon-tooltip-border-style: $line-solid !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$balloon-tooltip-color: $color-text1-4 !default;",
                        "",
                        "$balloon-tooltip-shadow: none;",
                        "$balloon-shadow-top: shadow-maker($shadow-sides-base, 1, rgba($shadow-color-sd1, .1), -1, -1);",
                        "$balloon-shadow-right: shadow-maker($shadow-sides-base, 1, rgba($shadow-color-sd1, .1), 1, -1);",
                        "$balloon-shadow-bottom: shadow-maker($shadow-sides-base, 1, rgba($shadow-color-sd1, .1), 1, 1);",
                        "$balloon-shadow-left: shadow-maker($shadow-sides-base, 1, rgba($shadow-color-sd1, .1), -1, 1);"
                    ]
                }
            }
        },
        "breadcrumb": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component, Children} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Icon from '../icon';",
                    "import ConfigProvider from '../config-provider';",
                    "import Item from './item';",
                    "",
                    "/**",
                    " * Breadcrumb",
                    " */",
                    "class Breadcrumb extends Component {",
                    "    static Item = Item;",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式类名的品牌前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 面包屑子节点，需传入 Breadcrumb.Item",
                    "         */",
                    "        children: (props, propName) => {",
                    "            Children.forEach(props[propName], child => {",
                    "                if (!(child && typeof child.type === 'function' && child.type._typeMark === 'breadcrumb_item')) {",
                    "                    throw new Error('Breadcrumb\\'s children must be Breadcrumb.Item!');",
                    "                }",
                    "            });",
                    "        },",
                    "        /**",
                    "         * 面包屑最多显示个数，超出部分会被隐藏",
                    "         */",
                    "        maxNode: PropTypes.number,",
                    "        /**",
                    "         * 分隔符，可以是文本或 Icon",
                    "         */",
                    "        separator: PropTypes.node,",
                    "        className: PropTypes.any",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        maxNode: 100,",
                    "        separator: <Icon type=\"arrow-right\" />",
                    "    };",
                    "",
                    "    render() {",
                    "        const {prefix, className, maxNode, children, separator, ...others} = this.props;",
                    "        const clazz = classNames(`${prefix}breadcrumb`, className);",
                    "        let items;",
                    "        const length = Children.count(children);",
                    "",
                    "        if (maxNode > 1 && length > maxNode) {",
                    "            const breakpointer = length - maxNode + 1;",
                    "            items = [];",
                    "",
                    "            Children.forEach(children, (item, i) => {",
                    "                if (i && i === breakpointer) {",
                    "                    items.push(React.cloneElement(item, {",
                    "                        separator,",
                    "                        prefix,",
                    "                        key: i,",
                    "                        activated: i === length - 1,",
                    "                        className: `${prefix}breadcrumb-text-ellipsis`",
                    "                    }, '...'));",
                    "                } else if (!i || i > breakpointer) {",
                    "                    items.push(React.cloneElement(item, {",
                    "                        separator,",
                    "                        prefix,",
                    "                        key: i,",
                    "                        activated: i === length - 1",
                    "                    }));",
                    "                }",
                    "            });",
                    "        } else {",
                    "            items = Children.map(children, (item, i) => {",
                    "                return React.cloneElement(item, {",
                    "                    separator,",
                    "                    prefix,",
                    "                    activated: i === length - 1,",
                    "                    key: i",
                    "                });",
                    "            });",
                    "        }",
                    "",
                    "        return <div className={clazz} {...others}>{items}</div>;",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Breadcrumb);"
                ]
            },
            "item.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "/**",
                    " * Breadcrumb.Item",
                    " */",
                    "class Item extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`",
                    "         */",
                    "        link: PropTypes.string,",
                    "        activated: PropTypes.bool,",
                    "        separator: PropTypes.node,",
                    "        className: PropTypes.any,",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-'",
                    "    };",
                    "",
                    "    static _typeMark = 'breadcrumb_item';",
                    "",
                    "    // stateless separator component",
                    "    static Separator({prefix, children}) {",
                    "        return <span className={`${prefix}breadcrumb-separator`}>{children}</span>;",
                    "    }",
                    "",
                    "    render() {",
                    "        const {prefix, className, children, link, activated, separator, ...others} = this.props;",
                    "        const clazz = classNames(`${prefix}breadcrumb-text`, className, {",
                    "            activated",
                    "        });",
                    "",
                    "        return (",
                    "            <div className={`${prefix}breadcrumb-item`}>",
                    "                {link ? <a href={link} className={clazz} {...others}>{children}</a> : <span className={clazz} {...others}>{children}</span>}",
                    "                {activated ? null : Item.Separator({prefix, children: separator})}",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Item);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "/* put your code here */",
                    "",
                    ".#{$css-prefix} {",
                    "    &breadcrumb {",
                    "        @include breadcrumb-bounding();",
                    "",
                    "        @include breadcrumb-size(",
                    "            $breadcrumb-height,",
                    "            $breadcrumb-text-min-width,",
                    "            $breadcrumb-size-m-font-size,",
                    "            $breadcrumb-size-ellipsis-font-size,",
                    "            $breadcrumb-size-m-icon-size,",
                    "            $breadcrumb-size-m-icon-margin",
                    "        );",
                    "",
                    "        @include breadcrumb-state(",
                    "            $breadcrumb-text-color,",
                    "            $breadcrumb-text-ellipsis-color,",
                    "            $breadcrumb-text-current-color,",
                    "            $breadcrumb-text-current-weight,",
                    "            $breadcrumb-text-keyword-color,",
                    "            $breadcrumb-icon-color,",
                    "            $breadcrumb-text-color-hover,",
                    "            $breadcrumb-text-current-color-hover,",
                    "            $breadcrumb-text-keyword-color-hover",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// breadcrumb mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin breadcrumb-bounding() {",
                        "    display: block;",
                        "",
                        "    .#{$css-prefix}breadcrumb-item {",
                        "        display: inline-block;",
                        "",
                        "        .#{$css-prefix}breadcrumb-text {",
                        "            display: inline-block;",
                        "            text-decoration: none;",
                        "            text-align: center;",
                        "            overflow: hidden;",
                        "            text-overflow: ellipsis;",
                        "            white-space: nowrap;",
                        "            transition: all .2s ease-out;",
                        "",
                        "            > b {",
                        "                font-weight: normal;",
                        "            }",
                        "        }",
                        "",
                        "        .#{$css-prefix}breadcrumb-separator {",
                        "            display: inline-block;",
                        "            vertical-align: top;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin breadcrumb-size(",
                        "    $height,",
                        "    $minWidth,",
                        "    $fontSize,",
                        "    $ellipsisFontSize,",
                        "    $separatorSize,",
                        "    $separatorMargin",
                        ") {",
                        "    height: $height;",
                        "    line-height: $height;",
                        "",
                        "    .#{$css-prefix}breadcrumb-text {",
                        "        height: $height;",
                        "        min-width: $minWidth;",
                        "        font-size: $fontSize;",
                        "        line-height: $height;",
                        "    }",
                        "",
                        "    .#{$css-prefix}breadcrumb-separator {",
                        "        height: $height;",
                        "        margin: 0 $separatorMargin;",
                        "        font-size: $separatorSize;",
                        "        line-height: $height;",
                        "",
                        "        .#{$css-prefix}icon {",
                        "            @include icon-size($separatorSize);",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}breadcrumb-text-ellipsis {",
                        "        font-size: $ellipsisFontSize;",
                        "    }",
                        "}",
                        "",
                        "@mixin breadcrumb-state(",
                        "    $textColor,",
                        "    $ellipsisTextColor,",
                        "    $currentTextColor,",
                        "    $currentTextWeight,",
                        "    $keywordTextColor,",
                        "    $iconColor,",
                        "    $textColorHover,",
                        "    $currentTextColorHover,",
                        "    $keywordTextColorHover",
                        ") {",
                        "    .#{$css-prefix}breadcrumb-text {",
                        "        color: $textColor;",
                        "        > b {",
                        "            color: $keywordTextColor;",
                        "        }",
                        "        > a {",
                        "            color: $textColor;",
                        "            text-decoration: none;",
                        "            text-align: center;",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}breadcrumb-text.activated {",
                        "        color: $currentTextColor;",
                        "        font-weight: $currentTextWeight;",
                        "        > a {",
                        "            color: $currentTextColor;",
                        "            font-weight: $currentTextWeight;",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}breadcrumb-text-ellipsis {",
                        "        color: $ellipsisTextColor;",
                        "        cursor: default;",
                        "    }",
                        "",
                        "    .#{$css-prefix}breadcrumb-separator {",
                        "        color: $iconColor;",
                        "    }",
                        "",
                        "    .#{$css-prefix}breadcrumb-text:not(.next-breadcrumb-text-ellipsis):hover > a {",
                        "        color: $textColorHover;",
                        "    }",
                        "",
                        "    a.#{$css-prefix}breadcrumb-text.activated:hover > a {",
                        "        color: $currentTextColorHover;",
                        "    }",
                        "",
                        "    a.#{$css-prefix}breadcrumb-text:not(.next-breadcrumb-text-ellipsis):hover {",
                        "        color: $textColorHover;",
                        "",
                        "        > b {",
                        "            color: $keywordTextColorHover;",
                        "        }",
                        "    }",
                        "",
                        "    a.#{$css-prefix}breadcrumb-text.activated:hover {",
                        "        color: $currentTextColorHover;",
                        "        font-weight: $currentTextWeight;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// breadcrumb variables",
                        "// --------------------------------------------------",
                        "",
                        "////",
                        "/// @module breadcrumb: 面包屑",
                        "/// @tag Breadcrumb",
                        "/// @category component",
                        "/// @family navigation",
                        "/// @varPrefix $breadcrumb-",
                        "/// @classPrefix {prefix}-breadcrumb",
                        "/// @order {\"size/item\":10,\"size/ellipsis\":11,\"size/number\":12,\"size/keyword\":13,\"size/seperator\":14,\"statement/normal\":10,\"statement/normal/item\":100,\"statement/normal/item current\":101,\"statement/normal/ellipsis\":102,\"statement/normal/number\":103,\"statement/normal/keyword\":104,\"statement/normal/seperator\":105,\"statement/hover\":11,\"statement/hover/item\":110,\"statement/hover/item current\":111,\"statement/hover/number\":112,\"statement/hover/keyword\":113}",
                        "////",
                        "",
                        "// Unconfigurable",
                        "// ----------------------------------------",
                        "",
                        "// 整体高度，不可配",
                        "$breadcrumb-height: $s-4 !default;",
                        "// text 最小宽度，不可配",
                        "$breadcrumb-text-min-width: $s-4 !default;",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace size/item",
                        "$breadcrumb-size-m-font-size: $font-size-caption !default;",
                        "",
                        "/// text",
                        "/// @namespace size/ellipsis",
                        "$breadcrumb-size-ellipsis-font-size: $font-size-caption !default;",
                        "",
                        "/// size",
                        "/// @namespace size/seperator",
                        "$breadcrumb-size-m-icon-size: $icon-xxs !default;",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/seperator",
                        "$breadcrumb-size-m-icon-margin: $s-2 !default;",
                        "",
                        "// Statement:Normal",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/item",
                        "$breadcrumb-text-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/item current",
                        "$breadcrumb-text-current-color: $color-text1-4 !default;",
                        "/// weight",
                        "/// @namespace statement/normal/item current",
                        "$breadcrumb-text-current-weight: $font-weight-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/ellipsis",
                        "$breadcrumb-text-ellipsis-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/keyword",
                        "$breadcrumb-text-keyword-color: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/seperator",
                        "$breadcrumb-icon-color: $color-line1-4 !default;",
                        "",
                        "// Statement:Hover",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/item",
                        "$breadcrumb-text-color-hover: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/item current",
                        "$breadcrumb-text-current-color-hover: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/keyword",
                        "$breadcrumb-text-keyword-color-hover: $color-brand1-6 !default;"
                    ]
                }
            }
        },
        "button": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Button from './view/button';",
                    "import ButtonGroup from './view/group';",
                    "",
                    "Button.Group = ButtonGroup;",
                    "",
                    "export default ConfigProvider.config(Button, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('shape' in props) {",
                    "            deprecated('shape', 'text | warning | ghost', 'Button');",
                    "",
                    "            const { shape, type, ...others } = props;",
                    "",
                    "            let newType = type;",
                    "            if (type === 'light' || type === 'dark' || (type === 'secondary' && shape === 'warning')) {",
                    "                newType = 'normal';",
                    "            }",
                    "",
                    "            let ghost;",
                    "            if (shape === 'ghost') {",
                    "                ghost = ({",
                    "                    primary: 'dark',",
                    "                    secondary: 'dark',",
                    "                    normal: 'light',",
                    "                    dark: 'dark',",
                    "                    light: 'light'",
                    "                })[type || Button.defaultProps.type];",
                    "            }",
                    "",
                    "            const text = shape === 'text';",
                    "            const warning = shape === 'warning';",
                    "",
                    "            props = { type: newType, ghost, text, warning, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import '../core/index-noreset';",
                    "",
                    "@import './scss/variable';",
                    "@import './scss/normalize';",
                    "@import './scss/mixin';",
                    "",
                    "#{$btn-prefix} {",
                    "    & {",
                    "        position: relative;",
                    "        display: inline-block;",
                    "        box-shadow: $btn-shadow;",
                    "        text-decoration: none;",
                    "        text-align: center;",
                    "        text-transform: none;",
                    "        white-space: nowrap;",
                    "        vertical-align: middle;",
                    "        user-select: none;",
                    "        transition: all .3s ease-out;",
                    "        cursor: pointer;",
                    "",
                    "        &:after {",
                    "            text-align: center;",
                    "            position: absolute;",
                    "            opacity: 0;",
                    "            visibility: hidden;",
                    "            transition: opacity .5s ease;",
                    "        }",
                    "",
                    "        .#{$css-prefix}icon.#{$css-prefix}xs {",
                    "            &:before {",
                    "                vertical-align: baseline;",
                    "            }",
                    "        }",
                    "",
                    "        &.hover,",
                    "        &:hover {",
                    "            box-shadow: $btn-shadow-hover;",
                    "        }",
                    "    }",
                    "",
                    "    /* 尺寸维度 */",
                    "    /* ---------------------------------------- */",
                    "    &.#{$css-prefix} {",
                    "        &small {",
                    "            @include next-button-size(",
                    "                $btn-size-s-padding,",
                    "                $btn-size-s-height,",
                    "                $btn-size-s-font,",
                    "                $btn-size-s-border-width,",
                    "                $btn-size-s-corner,",
                    "                $btn-size-s-icon-margin,",
                    "                $btn-size-s-icon-size,",
                    "                $btn-size-s-icon-split-size",
                    "            );",
                    "        }",
                    "        &medium {",
                    "            @include next-button-size(",
                    "                $btn-size-m-padding,",
                    "                $btn-size-m-height,",
                    "                $btn-size-m-font,",
                    "                $btn-size-m-border-width,",
                    "                $btn-size-m-corner,",
                    "                $btn-size-m-icon-margin,",
                    "                $btn-size-m-icon-size,",
                    "                $btn-size-m-icon-split-size",
                    "            );",
                    "        }",
                    "        &large {",
                    "            @include next-button-size(",
                    "                $btn-size-l-padding,",
                    "                $btn-size-l-height,",
                    "                $btn-size-l-font,",
                    "                $btn-size-l-border-width,",
                    "                $btn-size-l-corner,",
                    "                $btn-size-l-icon-margin,",
                    "                $btn-size-l-icon-size,",
                    "                $btn-size-l-icon-split-size",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    /* 普通按钮 */",
                    "    &#{$btn-prefix} {",
                    "        &-normal {",
                    "            border-style: $btn-pure-normal-border-style;",
                    "",
                    "            @include button-color(",
                    "                $btn-pure-normal-color,",
                    "                $btn-pure-normal-color-hover,",
                    "                $btn-pure-normal-bg,",
                    "                $btn-pure-normal-bg-hover,",
                    "                $btn-pure-normal-border-color,",
                    "                $btn-pure-normal-border-color-hover",
                    "            );",
                    "        }",
                    "",
                    "        &-primary {",
                    "            border-style: $btn-pure-primary-border-style;",
                    "",
                    "            @include button-color(",
                    "                $btn-pure-primary-color,",
                    "                $btn-pure-primary-color-hover,",
                    "                $btn-pure-primary-bg,",
                    "                $btn-pure-primary-bg-hover,",
                    "                $btn-pure-primary-border-color,",
                    "                $btn-pure-primary-border-color-hover",
                    "            );",
                    "        }",
                    "",
                    "        &-secondary {",
                    "            border-style: $btn-pure-secondary-border-style;",
                    "",
                    "            @include button-color(",
                    "                $btn-pure-secondary-color,",
                    "                $btn-pure-secondary-color-hover,",
                    "                $btn-pure-secondary-bg,",
                    "                $btn-pure-secondary-bg-hover,",
                    "                $btn-pure-secondary-border-color,",
                    "                $btn-pure-secondary-border-color-hover",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    /* 普通态禁用样式 */",
                    "    &.disabled,",
                    "    &[disabled] {",
                    "        cursor: not-allowed;",
                    "",
                    "        @include button-color(",
                    "            $btn-pure-color-disabled,",
                    "            $btn-pure-color-disabled,",
                    "            $btn-pure-bg-disabled,",
                    "            $btn-pure-bg-disabled,",
                    "            $btn-pure-border-color-disabled,",
                    "            $btn-pure-border-color-disabled",
                    "        );",
                    "    }",
                    "",
                    "    /* 警告按钮 */",
                    "    &-warning {",
                    "        border-style: $btn-warning-border-style;",
                    "",
                    "        &#{$btn-prefix}-primary {",
                    "            @include button-color(",
                    "                $btn-warning-primary-color,",
                    "                $btn-warning-primary-color-hover,",
                    "                $btn-warning-primary-bg,",
                    "                $btn-warning-primary-bg-hover,",
                    "                $btn-warning-primary-border-color,",
                    "                $btn-warning-primary-border-color-hover",
                    "            );",
                    "            &.disabled,",
                    "            &[disabled] {",
                    "                @include button-color(",
                    "                    $btn-warning-primary-color-disabled,",
                    "                    $btn-warning-primary-color-disabled,",
                    "                    $btn-warning-primary-bg-disabled,",
                    "                    $btn-warning-primary-bg-disabled,",
                    "                    $btn-warning-primary-border-color-disabled,",
                    "                    $btn-warning-primary-border-color-disabled",
                    "                );",
                    "            }",
                    "        }",
                    "",
                    "        &#{$btn-prefix}-normal {",
                    "            @include button-color(",
                    "                $btn-warning-normal-color,",
                    "                $btn-warning-normal-color-hover,",
                    "                $btn-warning-normal-bg,",
                    "                $btn-warning-normal-bg-hover,",
                    "                $btn-warning-normal-border-color,",
                    "                $btn-warning-normal-border-color-hover",
                    "            );",
                    "",
                    "            &.disabled,",
                    "            &[disabled] {",
                    "                @include button-color(",
                    "                    $btn-warning-normal-color-disabled,",
                    "                    $btn-warning-normal-color-disabled,",
                    "                    $btn-warning-normal-bg-disabled,",
                    "                    $btn-warning-normal-bg-disabled,",
                    "                    $btn-warning-normal-border-color-disabled,",
                    "                    $btn-warning-normal-border-color-disabled",
                    "                );",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    /* 文本按钮 */",
                    "    &-text {",
                    "        box-shadow: none;",
                    "        border-radius: 0;",
                    "",
                    "        &.hover,",
                    "        &:hover {",
                    "            box-shadow: none;",
                    "        }",
                    "",
                    "        &#{$btn-prefix}-primary {",
                    "            @include button-color(",
                    "                $btn-text-primary-color,",
                    "                $btn-text-primary-color-hover,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent",
                    "            );",
                    "        }",
                    "        &#{$btn-prefix}-secondary {",
                    "            @include button-color(",
                    "                $btn-text-secondary-color,",
                    "                $btn-text-secondary-color-hover,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent",
                    "            );",
                    "        }",
                    "        &#{$btn-prefix}-normal {",
                    "            @include button-color(",
                    "                $btn-text-normal-color,",
                    "                $btn-text-normal-color-hover,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}large {",
                    "            @include next-button-size(",
                    "                0,",
                    "                $btn-text-size-l-height,",
                    "                $btn-text-size-l-font,",
                    "                0,",
                    "                0,",
                    "                $btn-text-icon-l-margin,",
                    "                $btn-size-l-icon-size,",
                    "                $btn-size-l-icon-split-size",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}medium {",
                    "            @include next-button-size(",
                    "                0,",
                    "                $btn-text-size-m-height,",
                    "                $btn-text-size-m-font,",
                    "                0,",
                    "                0,",
                    "                $btn-text-icon-m-margin,",
                    "                $btn-size-m-icon-size,",
                    "                $btn-size-m-icon-split-size",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}small {",
                    "            @include next-button-size(",
                    "                0,",
                    "                $btn-text-size-s-height,",
                    "                $btn-text-size-s-font,",
                    "                0,",
                    "                0,",
                    "                $btn-text-icon-s-margin,",
                    "                $btn-size-s-icon-size,",
                    "                $btn-size-s-icon-split-size",
                    "            );",
                    "        }",
                    "        &.disabled,",
                    "        &[disabled] {",
                    "            @include button-color(",
                    "                $btn-text-disabled-color,",
                    "                $btn-text-disabled-color,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent",
                    "            );",
                    "        }",
                    "        &#{$btn-prefix}-loading {",
                    "            @include button-color(",
                    "                $btn-text-loading-color,",
                    "                $btn-text-loading-color,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent,",
                    "                transparent",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    /* loading */",
                    "    /* ---------------------------------------- */",
                    "    &-loading {",
                    "        pointer-events: none;",
                    "        &:after {",
                    "            font-family: $icon-font-family;",
                    "            content: $icon-content-loading;",
                    "            opacity: 1;",
                    "            visibility: visible;",
                    "            animation: loadingCircle 2s infinite linear;",
                    "        }",
                    "    }",
                    "",
                    "    /* 幽灵按钮 */",
                    "    &-ghost {",
                    "        box-shadow: none;",
                    "        border-style: $btn-ghost-border-style;",
                    "        &#{$btn-prefix}-dark {",
                    "            @include button-color( $btn-ghost-dark-color, $btn-ghost-dark-color-hover, $btn-ghost-dark-bg-normal, $btn-ghost-dark-bg-hover, $btn-ghost-dark-border-color, $btn-ghost-dark-border-color-hover);",
                    "            &.disabled,",
                    "            &[disabled] {",
                    "                @include button-color( $btn-ghost-dark-color-disabled, $btn-ghost-dark-color-disabled, $btn-ghost-dark-bg-disabled, $btn-ghost-dark-bg-disabled, $btn-ghost-dark-border-color-disabled, $btn-ghost-dark-border-color-disabled);",
                    "            }",
                    "        }",
                    "        &#{$btn-prefix}-light {",
                    "            @include button-color( $btn-ghost-light-color, $btn-ghost-light-color-hover, $btn-ghost-light-bg-normal, $btn-ghost-light-bg-hover, $btn-ghost-light-border-color, $btn-ghost-light-border-color-hover);",
                    "            &.disabled,",
                    "            &[disabled] {",
                    "                @include button-color( $btn-ghost-light-color-disabled, $btn-ghost-light-color-disabled, $btn-ghost-light-bg-disabled, $btn-ghost-light-bg-disabled, $btn-ghost-light-border-color-disabled, $btn-ghost-light-border-color-disabled);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    /* 组合 */",
                    "    /* ---------------------------------------- */",
                    "    &-group {",
                    "        position: relative;",
                    "        display: inline-block;",
                    "        vertical-align: middle;",
                    "",
                    "        > #{$btn-prefix} {",
                    "            position: relative;",
                    "            float: left;",
                    "            box-shadow: none;",
                    "",
                    "            &:hover,",
                    "            &:focus,",
                    "            &:active,",
                    "            &.active {",
                    "                z-index: 1;",
                    "            }",
                    "            &.disabled,",
                    "            &[disabled] {",
                    "                z-index: 0;",
                    "            }",
                    "        }",
                    "",
                    "        #{$btn-prefix}#{$btn-prefix} {",
                    "            margin: 0 0 0 -1px;",
                    "        }",
                    "",
                    "        #{$btn-prefix}:not(:first-child):not(:last-child) {",
                    "            border-radius: 0;",
                    "        }",
                    "",
                    "        > #{$btn-prefix}:first-child {",
                    "            margin: 0;",
                    "        }",
                    "",
                    "        > #{$btn-prefix}:first-child:not(:last-child) {",
                    "            border-bottom-right-radius: 0;",
                    "            border-top-right-radius: 0;",
                    "        }",
                    "",
                    "        > #{$btn-prefix}:last-child:not(:first-child) {",
                    "            border-bottom-left-radius: 0;",
                    "            border-top-left-radius: 0;",
                    "        }",
                    "",
                    "        > #{$btn-prefix}-primary:not(:first-child) {",
                    "            border-left-color: transparentize($color-white, .8);",
                    "",
                    "            &:hover {",
                    "                border-left-color: transparent;",
                    "            }",
                    "            &.disabled,",
                    "            &[disabled] {",
                    "                border-left-color: $color-line1-1;",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "@import './rtl.scss';"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@mixin next-button-size-rtl(",
                    "    $padding,",
                    "    $icon-margin,",
                    "    $icon-size,",
                    "    $corner",
                    ") {",
                    "    border-radius: $corner;",
                    "    & > #{$btn-prefix}-icon#{$btn-icon-prefix}-first {",
                    "        @include icon-size($icon-size, $icon-margin, 0);",
                    "    }",
                    "    & > #{$btn-prefix}-icon#{$btn-icon-prefix}-last {",
                    "        @include icon-size($icon-size, 0, $icon-margin);",
                    "    }",
                    "",
                    "    &#{$btn-prefix}-loading {",
                    "        padding-left: $padding;",
                    "        padding-right: $padding + $icon-size + $icon-margin;",
                    "",
                    "        &:after {",
                    "            right: $padding;",
                    "            top: 50%;",
                    "            margin-right: 0;",
                    "            margin-left: $icon-margin;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "/* 组合 */",
                    "/* ---------------------------------------- */",
                    "#{$btn-prefix}-group[dir=\"rtl\"] {",
                    "    > #{$btn-prefix} {",
                    "        float: right;",
                    "    }",
                    "",
                    "    #{$btn-prefix}#{$btn-prefix} {",
                    "        margin: 0 -1px 0 0;",
                    "    }",
                    "",
                    "    > #{$btn-prefix}:first-child:not(:last-child) {",
                    "        border-bottom-left-radius: 0;",
                    "        border-top-left-radius: 0;",
                    "    }",
                    "",
                    "    > #{$btn-prefix}:last-child:not(:first-child) {",
                    "        border-bottom-right-radius: 0;",
                    "        border-top-right-radius: 0;",
                    "    }",
                    "",
                    "    > #{$btn-prefix}-primary:not(:first-child) {",
                    "        border-right-color: transparentize($color-white, .8);",
                    "",
                    "        &:hover {",
                    "            border-right-color: transparent;",
                    "        }",
                    "        &.disabled,",
                    "        &[disabled] {",
                    "            border-right-color: $color-line1-1;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "",
                    "/* 尺寸维度 */",
                    "/* ---------------------------------------- */",
                    "#{$btn-prefix}.#{$css-prefix} {",
                    "    &small[dir=\"rtl\"] {",
                    "        @include next-button-size-rtl(",
                    "            $btn-size-s-padding,",
                    "            $btn-size-s-icon-margin,",
                    "            $btn-size-s-icon-size,",
                    "            $btn-size-s-corner",
                    "        );",
                    "    }",
                    "    &medium[dir=\"rtl\"] {",
                    "        @include next-button-size-rtl(",
                    "            $btn-size-m-padding,",
                    "            $btn-size-m-icon-margin,",
                    "            $btn-size-m-icon-size,",
                    "            $btn-size-m-corner",
                    "        );",
                    "    }",
                    "    &large[dir=\"rtl\"] {",
                    "        @include next-button-size-rtl(",
                    "            $btn-size-l-padding,",
                    "            $btn-size-l-icon-margin,",
                    "            $btn-size-l-icon-size,",
                    "            $btn-size-l-corner",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "/* 文本按钮 */",
                    "#{$btn-prefix}-text[dir=\"rtl\"] {",
                    "    &.#{$css-prefix}large {",
                    "        @include next-button-size-rtl(",
                    "            0,",
                    "            $btn-text-icon-l-margin,",
                    "            $btn-size-l-icon-size,",
                    "            0",
                    "        );",
                    "    }",
                    "    &.#{$css-prefix}medium {",
                    "        @include next-button-size-rtl(",
                    "            0,",
                    "            $btn-text-icon-m-margin,",
                    "            $btn-size-m-icon-size,",
                    "            0",
                    "        );",
                    "    }",
                    "    &.#{$css-prefix}small {",
                    "        @include next-button-size-rtl(",
                    "            0,",
                    "            $btn-text-icon-s-margin,",
                    "            $btn-size-s-icon-size,",
                    "            0",
                    "        );",
                    "    }",
                    "}",
                    ""
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin next-button-size(",
                        "    $padding,",
                        "    $height,",
                        "    $font-size,",
                        "    $border-width,",
                        "    $corner,",
                        "    $icon-margin,",
                        "    $icon-size,",
                        "    $icon-split-size",
                        ") {",
                        "    border-radius: $corner;",
                        "",
                        "    @include button-size($padding, $height, $font-size, $border-width);",
                        "",
                        "    & > #{$btn-prefix}-icon#{$btn-icon-prefix}-first {",
                        "        @include icon-size($icon-size, 0, $icon-margin);",
                        "    }",
                        "    & > #{$btn-prefix}-icon#{$btn-icon-prefix}-last {",
                        "        @include icon-size($icon-size, $icon-margin, 0);",
                        "    }",
                        "    & > #{$btn-prefix}-icon#{$btn-icon-prefix}-alone {",
                        "        @include icon-size($icon-size);",
                        "    }",
                        "",
                        "    &#{$btn-prefix}-loading {",
                        "        padding-left: $padding + $icon-size + $icon-margin;",
                        "",
                        "        &:after {",
                        "            width: $icon-size;",
                        "            height: $icon-size;",
                        "            font-size: $icon-size;",
                        "            line-height: $icon-size;",
                        "            left: $padding;",
                        "            top: 50%;",
                        "            text-align: center;",
                        "            margin-top: -$icon-size/2;",
                        "            margin-right: $icon-margin;",
                        "        }",
                        "        > #{$btn-icon-prefix} {",
                        "            display: none;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@keyframes loadingCircle {",
                        "    0% {",
                        "        transform-origin: 50% 50%;",
                        "        transform: rotate(0deg);",
                        "    }",
                        "    100% {",
                        "        transform-origin: 50% 50%;",
                        "        transform: rotate(360deg);",
                        "    }",
                        "}"
                    ]
                },
                "normalize.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$btn-prefix} {",
                        "    @include box-sizing;",
                        "",
                        "    &::-moz-focus-inner {",
                        "        border: 0;",
                        "        padding: 0;",
                        "    }",
                        "",
                        "    &,",
                        "    &:active,",
                        "    &:focus,",
                        "    &:hover {",
                        "        outline: 0;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module button: 按钮",
                        "/// @tag Button",
                        "/// @category component",
                        "/// @family general",
                        "/// @varPrefix $btn-",
                        "/// @classPrefix {prefix}-btn",
                        "/// @order {\"statement/normal\":10,\"statement/hover\":11,\"statement/disabled\":12,\"statement/loading\":13,\"size/bounding\":10,\"size/text\":11,\"size/icon\":12}",
                        "////",
                        "",
                        "$btn-prefix: '.' + $css-prefix + 'btn';",
                        "",
                        "$btn-icon-prefix: '.' + $css-prefix + 'icon';",
                        "",
                        "// Global",
                        "// ----------------------------------------",
                        "",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$btn-shadow: $shadow-zero !default;",
                        "",
                        "/// shadow",
                        "/// @namespace statement/hover",
                        "$btn-shadow-hover: $shadow-zero !default;",
                        "",
                        "// Small",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$btn-size-s-height: $s-5 !default;",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$btn-size-s-padding: $s-2 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$btn-size-s-border-width: $line-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$btn-size-s-font: $font-size-caption !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$btn-size-s-icon-size: $icon-xs !default;",
                        "",
                        "/// margin",
                        "/// @namespace size/icon",
                        "$btn-size-s-icon-margin: $s-1 !default;",
                        "",
                        "/// split icon",
                        "/// @namespace size/icon",
                        "$btn-size-s-icon-split-size: $icon-xs !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal",
                        "$btn-size-s-corner: $corner-1 !default;",
                        "",
                        "// Medium",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$btn-size-m-height: $s-7 !default;",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$btn-size-m-padding: $s-3 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$btn-size-m-border-width: $line-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$btn-size-m-font: $font-size-body-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$btn-size-m-icon-size: $icon-xs !default;",
                        "",
                        "/// margin",
                        "/// @namespace size/icon",
                        "$btn-size-m-icon-margin: $s-1 !default;",
                        "",
                        "/// split icon",
                        "/// @namespace size/icon",
                        "$btn-size-m-icon-split-size: $icon-xs !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal",
                        "$btn-size-m-corner: $corner-1 !default;",
                        "",
                        "// Large",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$btn-size-l-height: $s-10 !default;",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$btn-size-l-padding: $s-4 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$btn-size-l-border-width: $line-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$btn-size-l-font: $font-size-subhead !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$btn-size-l-icon-size: $icon-s !default;",
                        "",
                        "/// margin",
                        "/// @namespace size/icon",
                        "$btn-size-l-icon-margin: $s-1 !default;",
                        "",
                        "/// split icon",
                        "/// @namespace size/icon",
                        "$btn-size-l-icon-split-size: $icon-s !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal",
                        "$btn-size-l-corner: $corner-1 !default;",
                        "",
                        "// Pure",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled",
                        "$btn-pure-color-disabled: $color-text1-1 !default;",
                        "/// background",
                        "/// @namespace statement/disabled",
                        "$btn-pure-bg-disabled: $color-fill1-1 !default;",
                        "/// border color",
                        "/// @namespace statement/disabled",
                        "$btn-pure-border-color-disabled: $color-line1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-pure-normal-color: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-pure-normal-color-hover: $color-text1-4 !default;",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$btn-pure-normal-bg: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$btn-pure-normal-bg-hover: $color-fill1-2 !default;",
                        "/// border color",
                        "/// @namespace statement/normal",
                        "$btn-pure-normal-border-color: $color-line1-3 !default;",
                        "/// border color",
                        "/// @namespace statement/hover",
                        "$btn-pure-normal-border-color-hover: $color-line1-4 !default;",
                        "/// border style",
                        "/// @namespace statement/normal",
                        "$btn-pure-normal-border-style: $line-solid !default;",
                        "",
                        "// Secondary",
                        "// ----------------------------------------",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-pure-secondary-color: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-pure-secondary-color-hover: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$btn-pure-secondary-bg: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$btn-pure-secondary-bg-hover: $color-brand1-9 !default;",
                        "/// border color",
                        "/// @namespace statement/normal",
                        "$btn-pure-secondary-border-color: $color-brand1-6 !default;",
                        "/// border color",
                        "/// @namespace statement/hover",
                        "$btn-pure-secondary-border-color-hover: $color-brand1-9 !default;",
                        "/// border style",
                        "/// @namespace statement/normal",
                        "$btn-pure-secondary-border-style: $line-solid !default;",
                        "",
                        "// Primary",
                        "// ----------------------------------------",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-pure-primary-color: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-pure-primary-color-hover: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$btn-pure-primary-bg: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$btn-pure-primary-bg-hover: $color-brand1-9 !default;",
                        "/// border color",
                        "/// @namespace statement/normal",
                        "$btn-pure-primary-border-color: $color-transparent !default;",
                        "/// border color",
                        "/// @namespace statement/hover",
                        "$btn-pure-primary-border-color-hover: $color-transparent !default;",
                        "/// border style",
                        "/// @namespace statement/normal",
                        "$btn-pure-primary-border-style: $line-solid !default;",
                        "",
                        "// Ghost Dark",
                        "// ----------------------------------------",
                        "",
                        "/// border style",
                        "/// @namespace statement/normal",
                        "$btn-ghost-border-style: $line-solid !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-ghost-dark-color: $color-white !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal",
                        "$btn-ghost-dark-border-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-ghost-dark-color-hover: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$btn-ghost-dark-bg: $color-transparent !default;",
                        "",
                        "/// bg opacity",
                        "/// @namespace statement/normal",
                        "/// @type alpha",
                        "$btn-ghost-dark-bg-opacity: 0 !default;",
                        "$btn-ghost-dark-bg-normal: rgba($btn-ghost-dark-bg, $btn-ghost-dark-bg-opacity);",
                        "",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$btn-ghost-dark-bg-hover-rgb: $color-white !default;",
                        "",
                        "/// bg opacity",
                        "/// @namespace statement/hover",
                        "/// @type alpha",
                        "$btn-ghost-dark-bg-hover-opacity: .8 !default;",
                        "$btn-ghost-dark-bg-hover: rgba($btn-ghost-dark-bg-hover-rgb, $btn-ghost-dark-bg-hover-opacity);",
                        "",
                        "/// border",
                        "/// @namespace statement/hover",
                        "$btn-ghost-dark-border-color-hover: $color-white !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/disabled",
                        "$btn-ghost-dark-color-disabled-rgb: $color-white !default;",
                        "",
                        "/// color opacity",
                        "/// @namespace statement/disabled",
                        "/// @type alpha",
                        "$btn-ghost-dark-color-disabled-opacity: .4 !default;",
                        "$btn-ghost-dark-color-disabled: rgba($btn-ghost-dark-color-disabled-rgb, $btn-ghost-dark-color-disabled-opacity);",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled",
                        "$btn-ghost-dark-bg-disabled: $color-transparent !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled",
                        "$btn-ghost-dark-border-color-disabled-rgb: $color-white !default;",
                        "",
                        "/// border opacity",
                        "/// @namespace statement/disabled",
                        "/// @type alpha",
                        "$btn-ghost-dark-border-color-disabled-opacity: .4 !default;",
                        "$btn-ghost-dark-border-color-disabled: rgba($btn-ghost-dark-border-color-disabled-rgb, $btn-ghost-dark-border-color-disabled-opacity);",
                        "",
                        "// Ghost Light",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-ghost-light-color: $color-text1-4 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$btn-ghost-light-border-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$btn-ghost-light-bg: $color-transparent !default;",
                        "",
                        "/// bg opacity",
                        "/// @namespace statement/normal",
                        "/// @type alpha",
                        "$btn-ghost-light-bg-opacity: 0 !default;",
                        "$btn-ghost-light-bg-normal: rgba($btn-ghost-light-bg, $btn-ghost-light-bg-opacity);",
                        "",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-ghost-light-color-hover: $color-text1-2 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover",
                        "$btn-ghost-light-border-color-hover: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$btn-ghost-light-bg-hover-rgb: $color-black !default;",
                        "",
                        "/// bg opacity",
                        "/// @namespace statement/hover",
                        "/// @type alpha",
                        "$btn-ghost-light-bg-hover-opacity: .92 !default;",
                        "$btn-ghost-light-bg-hover: rgba($btn-ghost-light-bg-hover-rgb, $btn-ghost-light-bg-hover-opacity);",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled",
                        "$btn-ghost-light-color-disabled-rgb: $color-black !default;",
                        "",
                        "/// text opacity",
                        "/// @namespace statement/disabled",
                        "/// @type alpha",
                        "$btn-ghost-light-color-disabled-opacity: .1 !default;",
                        "$btn-ghost-light-color-disabled: rgba($btn-ghost-light-color-disabled-rgb, $btn-ghost-light-color-disabled-opacity);",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled",
                        "$btn-ghost-light-bg-disabled: $color-transparent !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled",
                        "$btn-ghost-light-border-color-disabled-rgb: $color-black !default;",
                        "",
                        "/// border opacity",
                        "/// @namespace statement/disabled",
                        "/// @type alpha",
                        "$btn-ghost-light-border-color-disabled-opacity: .1 !default;",
                        "$btn-ghost-light-border-color-disabled: rgba($btn-ghost-light-border-color-disabled-rgb, $btn-ghost-light-border-color-disabled-opacity);",
                        "",
                        "// Warning Primary",
                        "// ----------------------------------------",
                        "",
                        "/// border style",
                        "/// @namespace statement/normal",
                        "$btn-warning-border-style: $line-solid !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-warning-primary-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-warning-primary-color-hover: $color-white !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal",
                        "$btn-warning-primary-border-color: $color-error-3 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/hover",
                        "$btn-warning-primary-border-color-hover: $color-error-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$btn-warning-primary-bg: $color-error-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$btn-warning-primary-bg-hover: $color-error-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled",
                        "$btn-warning-primary-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled",
                        "$btn-warning-primary-border-color-disabled: $color-line1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled",
                        "$btn-warning-primary-bg-disabled: $color-fill1-1 !default;",
                        "",
                        "// Warning Normal",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-warning-normal-color: $color-error-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-warning-normal-color-hover: $color-white !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$btn-warning-normal-border-color: $color-error-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover",
                        "$btn-warning-normal-border-color-hover: $color-error-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$btn-warning-normal-bg: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$btn-warning-normal-bg-hover: $color-error-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled",
                        "$btn-warning-normal-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled",
                        "$btn-warning-normal-border-color-disabled: $color-line1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled",
                        "$btn-warning-normal-bg-disabled: $color-fill1-1 !default;",
                        "",
                        "// Text primary & disabled & loading",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-text-primary-color: $color-link-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-text-primary-color-hover: $color-brand1-9 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled",
                        "$btn-text-disabled-color: $color-text1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/loading",
                        "$btn-text-loading-color: $color-text1-4 !default;",
                        "",
                        "// Text secondary",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-text-secondary-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-text-secondary-color-hover: $color-brand1-6 !default;",
                        "",
                        "// Text normal",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$btn-text-normal-color: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$btn-text-normal-color-hover: $color-brand1-6 !default;",
                        "",
                        "// Text small",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$btn-text-size-s-height: $s-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/text",
                        "$btn-text-size-s-font: $font-size-caption !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/icon",
                        "$btn-text-icon-size-s: $icon-s !default;",
                        "",
                        "/// margin",
                        "/// @namespace size/icon",
                        "$btn-text-icon-s-margin: $s-1 !default;",
                        "",
                        "// Text medium",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$btn-text-size-m-height: $s-5 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/text",
                        "$btn-text-size-m-font: $font-size-body-1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/icon",
                        "$btn-text-icon-size-m: $icon-m !default;",
                        "",
                        "/// margin",
                        "/// @namespace size/icon",
                        "$btn-text-icon-m-margin: $s-1 !default;",
                        "",
                        "// Text large",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$btn-text-size-l-height: $s-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/text",
                        "$btn-text-size-l-font: $font-size-body-2 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/icon",
                        "$btn-text-icon-size-l: $icon-l !default;",
                        "",
                        "/// margin",
                        "/// @namespace size/icon",
                        "$btn-text-icon-l-margin: $s-1 !default;"
                    ]
                }
            },
            "view": {
                "button.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "",
                        "function mapIconSize(size) {",
                        "    return ({",
                        "        large: 'small',",
                        "        medium: 'xs',",
                        "        small: 'xs',",
                        "    })[size];",
                        "}",
                        "",
                        "/** Button */",
                        "export default class Button extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        rtl: PropTypes.bool,",
                        "        /**",
                        "         * 按钮的类型",
                        "         */",
                        "        type: PropTypes.oneOf(['primary', 'secondary', 'normal']),",
                        "        /**",
                        "         * 按钮的尺寸",
                        "         */",
                        "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                        "        /**",
                        "         * 按钮中 Icon 的尺寸，用于替代 Icon 的默认大小",
                        "         */",
                        "        iconSize: PropTypes.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl']),",
                        "        /**",
                        "         * 当 component = 'button' 时，设置 button 标签的 type 值",
                        "         */",
                        "        htmlType: PropTypes.oneOf(['submit', 'reset', 'button']),",
                        "        /**",
                        "         * 设置标签类型",
                        "         */",
                        "        component: PropTypes.oneOf(['button', 'a']),",
                        "        /**",
                        "         * 设置按钮的载入状态",
                        "         */",
                        "        loading: PropTypes.bool,",
                        "        /**",
                        "         * 是否为幽灵按钮",
                        "         */",
                        "        ghost: PropTypes.oneOf([true, false, 'light', 'dark']),",
                        "        /**",
                        "         * 是否为文本按钮",
                        "         */",
                        "        text: PropTypes.bool,",
                        "        /**",
                        "         * 是否为警告按钮",
                        "         */",
                        "        warning: PropTypes.bool,",
                        "        /**",
                        "         * 是否禁用",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 点击按钮的回调",
                        "         * @param {Object} e Event Object",
                        "         */",
                        "        onClick: PropTypes.func,",
                        "        className: PropTypes.string,",
                        "        onMouseUp: PropTypes.func,",
                        "        children: PropTypes.node",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        type: 'normal',",
                        "        size: 'medium',",
                        "        htmlType: 'button',",
                        "        component: 'button',",
                        "        loading: false,",
                        "        ghost: false,",
                        "        text: false,",
                        "        warning: false,",
                        "        disabled: false,",
                        "        onClick: () => {}",
                        "    };",
                        "",
                        "    onMouseUp = (e) => {",
                        "        this.button.blur();",
                        "",
                        "        if (this.props.onMouseUp) {",
                        "            this.props.onMouseUp(e);",
                        "        }",
                        "    };",
                        "",
                        "    buttonRefHandler = (button) => {",
                        "        this.button = button;",
                        "    };",
                        "",
                        "    render() {",
                        "        const { prefix, className, type, size, htmlType, loading, text, warning, ghost, component, iconSize, children, rtl, ...others } = this.props;",
                        "        const ghostType = ['light', 'dark'].indexOf(ghost) >= 0 ? ghost : 'dark';",
                        "",
                        "        const btnCls = classNames({",
                        "            [`${prefix}btn`]: true,",
                        "            [`${prefix}${size}`]: size,",
                        "            [`${prefix}btn-${type}`]: type && !ghost,",
                        "            [`${prefix}btn-text`]: text,",
                        "            [`${prefix}btn-warning`]: warning,",
                        "            [`${prefix}btn-loading`]: loading,",
                        "            [`${prefix}btn-ghost`]: ghost,",
                        "            [`${prefix}btn-${ghostType}`]: ghost,",
                        "            [className]: className",
                        "        });",
                        "",
                        "        const count = Children.count(children);",
                        "        const clonedChildren = Children.map(children, (child, index) => {",
                        "            if (child && typeof child.type === 'function' && child.type._typeMark === 'icon') {",
                        "                const iconCls = classNames({",
                        "                    [`${prefix}btn-icon`]: !iconSize, // 如果用户没有传 iconSize，则使用该样式标记 icon 为 button 预设尺寸",
                        "                    [`${prefix}icon-first`]: count > 1 && index === 0,",
                        "                    [`${prefix}icon-last`]: count > 1 && index === count - 1,",
                        "                    [`${prefix}icon-alone`]: count === 1,",
                        "                    [child.props.className]: !!child.props.className",
                        "                });",
                        "                return React.cloneElement(child, {",
                        "                    className: iconCls,",
                        "                    size: iconSize || mapIconSize(size)",
                        "                });",
                        "            }",
                        "",
                        "            return child;",
                        "        });",
                        "",
                        "        const TagName = component;",
                        "        const tagAttrs = {",
                        "            ...others,",
                        "            type: htmlType,",
                        "            className: btnCls",
                        "        };",
                        "",
                        "        if (TagName === 'a') {",
                        "            delete tagAttrs.type;",
                        "",
                        "            if (tagAttrs.disabled) {",
                        "                delete tagAttrs.onClick; // a 标签的 onClick 浏览器默认不会禁用",
                        "                tagAttrs.href && delete tagAttrs.href; // a 标签在禁用状态下无跳转",
                        "            }",
                        "        }",
                        "",
                        "        return (",
                        "            <TagName {...tagAttrs} dir={rtl ? 'rtl' : undefined} onMouseUp={this.onMouseUp} ref={this.buttonRefHandler} role=\"button\">",
                        "                {clonedChildren}",
                        "            </TagName>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "group.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import ConfigProvider from '../../config-provider';",
                        "",
                        "/**",
                        " * Button.Group",
                        " */",
                        "class ButtonGroup extends Component {",
                        "    static propTypes = {",
                        "        rtl: PropTypes.bool,",
                        "        prefix: PropTypes.string,",
                        "        /**",
                        "         * 统一设置 Button 组件的按钮大小",
                        "         */",
                        "        size: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        children: PropTypes.node",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        size: 'medium',",
                        "    };",
                        "",
                        "    render() {",
                        "        const { prefix, className, size, children, rtl, ...others } = this.props;",
                        "",
                        "        const groupCls = classNames({",
                        "            [`${prefix}btn-group`]: true,",
                        "            [className]: className",
                        "        });",
                        "",
                        "        const cloneChildren = Children.map(children, (child) => {",
                        "            if (child) {",
                        "                return React.cloneElement(child, {",
                        "                    size: size",
                        "                });",
                        "            }",
                        "        });",
                        "",
                        "        if (rtl) {",
                        "            others.dir = 'rtl';",
                        "        }",
                        "",
                        "        return (",
                        "            <div {...others} className={groupCls}>",
                        "                {cloneChildren}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default ConfigProvider.config(ButtonGroup);"
                    ]
                }
            }
        },
        "calendar": {
            ".eslintrc": {},
            "calendar.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import moment from 'moment';",
                    "import classnames from 'classnames';",
                    "import locale from '../locale/zh-cn';",
                    "import { func, obj } from '../util';",
                    "import CardHeader from './head/card-header';",
                    "import DatePanelHeader from './head/date-panel-header';",
                    "import MonthPanelHeader from './head/month-panel-header';",
                    "import YearPanelHeader from './head/year-panel-header';",
                    "import DateTable from './table/date-table';",
                    "import MonthTable from './table/month-table';",
                    "import YearTable from './table/year-table';",
                    "import { checkMomentObj, formatDateValue, getVisibleMonth, isSameYearMonth, CALENDAR_MODES, CALENDAR_MODE_DATE, CALENDAR_MODE_MONTH, CALENDAR_MODE_YEAR } from './utils';",
                    "",
                    "/** Calendar */",
                    "class Calendar extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 默认选中的日期（moment 对象）",
                    "         */",
                    "        defaultValue: checkMomentObj,",
                    "        /**",
                    "         * 选中的日期值 (moment 对象)",
                    "         */",
                    "        value: checkMomentObj,",
                    "        // 面板模式",
                    "        mode: PropTypes.oneOf(CALENDAR_MODES),",
                    "        // 面板可变化的模式列表，仅初始化时接收一次",
                    "        modes: PropTypes.array,",
                    "        // 日期值的格式（用于日期title显示的格式）",
                    "        format: PropTypes.string,",
                    "        /**",
                    "         * 是否展示非本月的日期",
                    "         */",
                    "        showOtherMonth: PropTypes.bool,",
                    "        /**",
                    "         * 默认展示的月份",
                    "         */",
                    "        defaultVisibleMonth: PropTypes.func,",
                    "        /**",
                    "         * 展现形态",
                    "         */",
                    "        shape: PropTypes.oneOf(['card', 'fullscreen', 'panel']),",
                    "        /**",
                    "         * 选择日期单元格时的回调",
                    "         * @param {Object} value 对应的日期值 (moment 对象)",
                    "         */",
                    "        onSelect: PropTypes.func,",
                    "        /**",
                    "         * 展现的月份变化时的回调",
                    "         * @param {Object} value 显示的月份 (moment 对象)",
                    "         * @param {String} reason 触发月份改变原因",
                    "         */",
                    "        onVisibleMonthChange: PropTypes.func,",
                    "        /**",
                    "         * 自定义样式类",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义日期渲染函数",
                    "         * @param {Object} value 日期值（moment对象）",
                    "         * @returns {ReactNode}",
                    "         */",
                    "        dateCellRender: PropTypes.func,",
                    "        /**",
                    "         * 自定义月份渲染函数",
                    "         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象",
                    "         * @returns {ReactNode}",
                    "         */",
                    "        monthCellRender: PropTypes.func,",
                    "        /**",
                    "         * 不可选择的日期",
                    "         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象",
                    "         * @returns {Boolean}",
                    "         */",
                    "        disabledDate: PropTypes.func,",
                    "        /**",
                    "         * 国际化配置",
                    "         */",
                    "        locale: PropTypes.object",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "        shape: 'fullscreen',",
                    "        modes: CALENDAR_MODES,",
                    "        format: 'YYYY-MM-DD',",
                    "        onSelect: func.noop,",
                    "        onVisibleMonthChange: func.noop,",
                    "        dateCellRender: (value) => value.date(),",
                    "        locale: locale.Calendar,",
                    "        showOtherMonth: true,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        const value = formatDateValue(props.value || props.defaultValue);",
                    "        const visibleMonth = getVisibleMonth(props.defaultVisibleMonth, value);",
                    "",
                    "        this.MODES = props.modes;",
                    "        this.today = moment();",
                    "        this.state = {",
                    "            value,",
                    "            mode: props.mode || this.MODES[0],",
                    "            visibleMonth,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            const value = formatDateValue(nextProps.value);",
                    "            this.setState({",
                    "                value,",
                    "            });",
                    "",
                    "            if (value) {",
                    "                this.setState({",
                    "                    visibleMonth: value,",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        if (nextProps.mode && this.MODES.indexOf(nextProps.mode) > -1) {",
                    "            this.setState({",
                    "                mode: nextProps.mode",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onSelectCell = (date, nextMode) => {",
                    "        this.changeVisibleMonth(date, 'cellClick');",
                    "",
                    "        // 当用户所在的面板为初始化面板时，则选择动作为触发 onSelect 回调",
                    "        if (this.state.mode === this.MODES[0]) {",
                    "            this.props.onSelect(date);",
                    "        }",
                    "        this.changeMode(nextMode);",
                    "    }",
                    "",
                    "    changeMode = (nextMode) => {",
                    "        if (nextMode && this.MODES.indexOf(nextMode) > -1 && nextMode !== this.state.mode) {",
                    "            this.setState({ mode: nextMode });",
                    "        }",
                    "    }",
                    "",
                    "    changeVisibleMonth = (date, reason) => {",
                    "        if (!isSameYearMonth(date, this.state.visibleMonth)) {",
                    "            this.setState({ visibleMonth: date });",
                    "            this.props.onVisibleMonthChange(date, reason);",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * 根据日期偏移量设置当前展示的月份",
                    "     * @param {Number} offset 日期偏移的数量",
                    "     * @param {String} type 日期偏移的类型 days, months, years",
                    "     */",
                    "    changeVisibleMonthByOffset(offset, type) {",
                    "        const cloneValue = this.state.visibleMonth.clone();",
                    "        cloneValue.add(offset, type);",
                    "        this.changeVisibleMonth(cloneValue, 'buttonClick');",
                    "    }",
                    "",
                    "    goPrevDecade = () => {",
                    "        this.changeVisibleMonthByOffset(-10, 'years');",
                    "    }",
                    "",
                    "    goNextDecade = () => {",
                    "        this.changeVisibleMonthByOffset(10, 'years');",
                    "    }",
                    "",
                    "    goPrevYear = () => {",
                    "        this.changeVisibleMonthByOffset(-1, 'years');",
                    "    }",
                    "",
                    "    goNextYear = () => {",
                    "        this.changeVisibleMonthByOffset(1, 'years');",
                    "    }",
                    "",
                    "    goPrevMonth = () => {",
                    "        this.changeVisibleMonthByOffset(-1, 'months');",
                    "    }",
                    "",
                    "    goNextMonth = () => {",
                    "        this.changeVisibleMonthByOffset(1, 'months');",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, rtl, className, shape, showOtherMonth, format, locale, dateCellRender, monthCellRender, disabledDate, ...others } = this.props;",
                    "        const state = this.state;",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}calendar`]: true,",
                    "            [`${prefix}calendar-${shape}`]: shape,",
                    "        }, className);",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const visibleMonth = state.visibleMonth;",
                    "",
                    "        // reset moment locale",
                    "        if (locale.momentLocale) {",
                    "            state.value && state.value.locale(locale.momentLocale);",
                    "            visibleMonth.locale(locale.momentLocale);",
                    "        }",
                    "",
                    "        const localeData = visibleMonth.localeData();",
                    "",
                    "        const headerProps = {",
                    "            prefix,",
                    "            value: state.value,",
                    "            mode: state.mode,",
                    "            locale,",
                    "            rtl,",
                    "            visibleMonth,",
                    "            momentLocale: localeData,",
                    "            changeMode: this.changeMode,",
                    "            changeVisibleMonth: this.changeVisibleMonth,",
                    "            goNextDecade: this.goNextDecade,",
                    "            goNextYear: this.goNextYear,",
                    "            goNextMonth: this.goNextMonth,",
                    "            goPrevDecade: this.goPrevDecade,",
                    "            goPrevYear: this.goPrevYear,",
                    "            goPrevMonth: this.goPrevMonth,",
                    "        };",
                    "",
                    "        const tableProps = {",
                    "            prefix,",
                    "            visibleMonth,",
                    "            showOtherMonth,",
                    "            value: state.value,",
                    "            mode: state.mode,",
                    "            locale,",
                    "            dateCellRender,",
                    "            monthCellRender,",
                    "            disabledDate,",
                    "            momentLocale: localeData,",
                    "            today: this.today,",
                    "            goPrevDecade: this.goPrevDecade,",
                    "            goNextDecade: this.goNextDecade,",
                    "        };",
                    "",
                    "        const tables = {",
                    "            [CALENDAR_MODE_DATE]: <DateTable format={format} {...tableProps} onSelectDate={this.onSelectCell} />,",
                    "            [CALENDAR_MODE_MONTH]: <MonthTable {...tableProps} onSelectMonth={this.onSelectCell} />,",
                    "            [CALENDAR_MODE_YEAR]: <YearTable {...tableProps} rtl={rtl} onSelectYear={this.onSelectCell} />,",
                    "        };",
                    "",
                    "        const panelHeaders = {",
                    "            [CALENDAR_MODE_DATE]: <DatePanelHeader {...headerProps} />,",
                    "            [CALENDAR_MODE_MONTH]: <MonthPanelHeader {...headerProps} />,",
                    "            [CALENDAR_MODE_YEAR]: <YearPanelHeader {...headerProps} />,",
                    "        };",
                    "",
                    "        return (",
                    "            <div {...obj.pickOthers(Calendar.propTypes, others)} className={classNames}>",
                    "                {",
                    "                    shape === 'panel' ? panelHeaders[state.mode] : <CardHeader {...headerProps} />",
                    "                }",
                    "                {tables[state.mode]}",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Calendar;"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import { preFormatDateValue } from './utils';",
                    "import Calendar from './calendar';",
                    "",
                    "/* istanbul ignore next */",
                    "const transform = (props, deprecated) => {",
                    "    const { type, onChange, base, disabledMonth, disabledYear, ...others } = props;",
                    "    const newProps = others;",
                    "",
                    "    if ('type' in props) {",
                    "        deprecated('type', 'shape', 'Calendar');",
                    "",
                    "        newProps.shape = type;",
                    "",
                    "        if ('shape' in props) {",
                    "            newProps.shape = props.shape;",
                    "        }",
                    "    }",
                    "",
                    "    if ('base' in props) {",
                    "        deprecated('base', 'defaultVisibleMonth', 'Calendar');",
                    "",
                    "        let newDefaultVisibleMonth = () => {",
                    "            preFormatDateValue(base, 'YYYY-MM-DD');",
                    "        };",
                    "",
                    "        if ('defaultVisibleMonth' in props) {",
                    "            newDefaultVisibleMonth = props.defaultVisibleMonth;",
                    "        }",
                    "",
                    "        newProps.defaultVisibleMonth = newDefaultVisibleMonth;",
                    "    }",
                    "",
                    "    if ('onChange' in props && typeof onChange === 'function') {",
                    "        deprecated('onChange', 'onSelect', 'Calendar');",
                    "",
                    "        const newOnSelect = (date) => {",
                    "            onChange({mode: others.mode, value: date});",
                    "",
                    "            if ('onSelect' in props) {",
                    "                props.onSelect(date);",
                    "            }",
                    "        };",
                    "",
                    "        newProps.onSelect = newOnSelect;",
                    "    }",
                    "",
                    "    if ('disabledMonth' in props && typeof disabledMonth === 'function') {",
                    "        deprecated('disabledMonth', 'disabledDate', 'Calendar');",
                    "    }",
                    "",
                    "    if ('disabledYear' in props && typeof disabledYear === 'function') {",
                    "        deprecated('disabledYear', 'disabledDate', 'Calendar');",
                    "    }",
                    "",
                    "    if ('yearCellRender' in props) {",
                    "        deprecated('yearCellRender', 'monthCellRender/dateCellRender', 'Calendar');",
                    "    }",
                    "",
                    "    if ('language' in props) {",
                    "        deprecated('language', 'moment.locale', 'Calendar');",
                    "    }",
                    "",
                    "    return newProps;",
                    "};",
                    "",
                    "export default ConfigProvider.config(Calendar, {",
                    "    transform",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import '../core/index-noreset';",
                    "",
                    "@import \"scss/variable\";",
                    "@import \"scss/normalize\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/animation\";",
                    "",
                    "@import \"scss/header\";",
                    "@import \"scss/table\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$calendar-prefix} {",
                    "    &-table {",
                    "        width: 100%;",
                    "        table-layout: fixed;",
                    "    }",
                    "",
                    "    /* range calendar */",
                    "    /* --------------- */",
                    "    &-range {",
                    "        #{$calendar-prefix}-body {",
                    "            &-left, &-right {",
                    "                float: left;",
                    "                width: 50%;",
                    "            }",
                    "",
                    "            &-left {",
                    "                padding-right: $s-2;",
                    "            }",
                    "",
                    "            &-right {",
                    "                padding-left: $s-2;",
                    "            }",
                    "",
                    "            @include clearfix;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "range-calendar.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import moment from 'moment';",
                    "import ConfigProvider from '../config-provider';",
                    "import locale from '../locale/zh-cn';",
                    "import { obj, func } from '../util';",
                    "import RangePanelHeader from './head/range-panel-header';",
                    "import MonthPanelHeader from './head/month-panel-header';",
                    "import YearPanelHeader from './head/year-panel-header';",
                    "import DateTable from './table/date-table';",
                    "import MonthTable from './table/month-table';",
                    "import YearTable from './table/year-table';",
                    "import { checkMomentObj, formatDateValue, getVisibleMonth, isSameYearMonth, CALENDAR_MODES, CALENDAR_MODE_DATE, CALENDAR_MODE_MONTH, CALENDAR_MODE_YEAR } from './utils';",
                    "",
                    "class RangeCalendar extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 默认的开始日期",
                    "         */",
                    "        defaultStartValue: checkMomentObj,",
                    "        /**",
                    "         * 默认的结束日期",
                    "         */",
                    "        defaultEndValue: checkMomentObj,",
                    "        /**",
                    "         * 开始日期（moment 对象）",
                    "         */",
                    "        startValue: checkMomentObj,",
                    "        /**",
                    "         * 结束日期（moment 对象）",
                    "         */",
                    "        endValue: checkMomentObj,",
                    "        // 面板模式",
                    "        mode: PropTypes.oneOf(CALENDAR_MODES),",
                    "        // 日期值的格式（用于日期title显示的格式）",
                    "        format: PropTypes.string,",
                    "        /**",
                    "         * 是否显示非本月的日期",
                    "         */",
                    "        showOtherMonth: PropTypes.bool,",
                    "        /**",
                    "         * 模板展示的月份（起始月份）",
                    "         */",
                    "        defaultVisibleMonth: PropTypes.func,",
                    "        /**",
                    "         * 展现的月份变化时的回调",
                    "         * @param {Object} value 显示的月份 (moment 对象)",
                    "         * @param {String} reason 触发月份改变原因",
                    "         */",
                    "        onVisibleMonthChange: PropTypes.func,",
                    "        /**",
                    "         * 不可选择的日期",
                    "         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象",
                    "         * @returns {Boolean}",
                    "         */",
                    "        disabledDate: PropTypes.func,",
                    "        /**",
                    "         * 选择日期单元格时的回调",
                    "         * @param {Object} value 对应的日期值 (moment 对象)",
                    "         */",
                    "        onSelect: PropTypes.func,",
                    "        /**",
                    "         * 自定义日期单元格渲染",
                    "         */",
                    "        dateCellRender: PropTypes.func,",
                    "        locale: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "        mode: CALENDAR_MODE_DATE,",
                    "        format: 'YYYY-MM-DD',",
                    "        dateCellRender: (value) => value.date(),",
                    "        onSelect: func.noop,",
                    "        onVisibleMonthChange: func.noop,",
                    "        locale: locale.Calendar,",
                    "        showOtherMonth: false,",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        const startValue = formatDateValue(props.startValue || props.defaultStartValue);",
                    "        const endValue = formatDateValue(props.endValue || props.defaultEndValue);",
                    "        const visibleMonth = getVisibleMonth(props.defaultVisibleMonth, startValue);",
                    "",
                    "        this.state = {",
                    "            startValue,",
                    "            endValue,",
                    "            mode: props.mode,",
                    "            startVisibleMonth: visibleMonth,",
                    "            activePanel: undefined,",
                    "        };",
                    "        this.today = moment();",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('startValue' in nextProps) {",
                    "            const startValue = formatDateValue(nextProps.startValue);",
                    "            this.setState({",
                    "                startValue,",
                    "            });",
                    "",
                    "            if (startValue) {",
                    "                this.setState({",
                    "                    startVisibleMonth: startValue,",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        if ('endValue' in nextProps) {",
                    "            const endValue = formatDateValue(nextProps.endValue);",
                    "            this.setState({",
                    "                endValue,",
                    "            });",
                    "        }",
                    "",
                    "        if ('mode' in nextProps) {",
                    "            this.setState({",
                    "                mode: nextProps.mode",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onSelectCell = (date, nextMode) => {",
                    "        this.changeVisibleMonth(date, 'cellClick');",
                    "",
                    "        if (this.state.mode === CALENDAR_MODE_DATE) {",
                    "            this.props.onSelect(date);",
                    "        }",
                    "        this.changeMode(nextMode);",
                    "    }",
                    "",
                    "    changeMode = (mode, activePanel) => {",
                    "        if (typeof mode === 'string' && mode !== this.state.mode) {",
                    "            this.setState({ mode });",
                    "        }",
                    "        if (activePanel && activePanel !== this.state.activePanel) {",
                    "            this.setState({ activePanel });",
                    "        }",
                    "    }",
                    "",
                    "    changeVisibleMonth = (date, reason) => {",
                    "        if (!isSameYearMonth(date, this.state.startVisibleMonth)) {",
                    "            this.setState({ startVisibleMonth: date });",
                    "            this.props.onVisibleMonthChange(date, reason);",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * 根据日期偏移量设置当前展示的月份",
                    "     * @param {Number} offset 日期偏移量",
                    "     * @param {String} type 日期偏移类型 days, months, years",
                    "     */",
                    "    changeVisibleMonthByOffset = (offset, type) => {",
                    "        const offsetDate = this.state.startVisibleMonth.clone().add(offset, type);",
                    "        this.changeVisibleMonth(offsetDate, 'buttonClick');",
                    "    }",
                    "",
                    "    goPrevDecade = () => {",
                    "        this.changeVisibleMonthByOffset(-10, 'years');",
                    "    }",
                    "",
                    "    goNextDecade = () => {",
                    "        this.changeVisibleMonthByOffset(10, 'years');",
                    "    }",
                    "",
                    "    goPrevYear = () => {",
                    "        this.changeVisibleMonthByOffset(-1, 'years');",
                    "    }",
                    "",
                    "    goNextYear = () => {",
                    "        this.changeVisibleMonthByOffset(1, 'years');",
                    "    }",
                    "",
                    "    goPrevMonth = () => {",
                    "        this.changeVisibleMonthByOffset(-1, 'months');",
                    "    }",
                    "",
                    "    goNextMonth = () => {",
                    "        this.changeVisibleMonthByOffset(1, 'months');",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, rtl, dateCellRender, className, format, locale, showOtherMonth, disabledDate, ...others } = this.props;",
                    "        const { startValue, endValue, mode, startVisibleMonth, activePanel } = this.state;",
                    "",
                    "        // reset moment locale",
                    "        if (locale.momentLocale) {",
                    "            startValue && startValue.locale(locale.momentLocale);",
                    "            endValue && endValue.locale(locale.momentLocale);",
                    "            startVisibleMonth.locale(locale.momentLocale);",
                    "        }",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const localeData = startVisibleMonth.localeData();",
                    "        const endVisibleMonth = startVisibleMonth.clone().add(1, 'months');",
                    "",
                    "        const headerProps = {",
                    "            prefix,",
                    "            rtl,",
                    "            mode,",
                    "            locale,",
                    "            momentLocale: localeData,",
                    "            startVisibleMonth,",
                    "            endVisibleMonth,",
                    "            changeMode: this.changeMode,",
                    "        };",
                    "",
                    "        const tableProps = {",
                    "            prefix,",
                    "            value: startValue,",
                    "            startValue,",
                    "            endValue,",
                    "            mode,",
                    "            locale,",
                    "            momentLocale: localeData,",
                    "            showOtherMonth,",
                    "            today: this.today,",
                    "            disabledDate,",
                    "            dateCellRender,",
                    "            changeMode: this.changeMode,",
                    "            changeVisibleMonth: this.changeVisibleMonth,",
                    "        };",
                    "",
                    "        const visibleMonths = {",
                    "            start: startVisibleMonth,",
                    "            end: endVisibleMonth,",
                    "        };",
                    "",
                    "        const visibleMonth = visibleMonths[activePanel];",
                    "",
                    "        let header;",
                    "        let table;",
                    "",
                    "        switch (mode) {",
                    "            case CALENDAR_MODE_DATE: {",
                    "                table = [",
                    "                    <div className={`${prefix}calendar-body-left`} key=\"left-panel\">",
                    "                        <DateTable format={format} {...tableProps} visibleMonth={startVisibleMonth} onSelectDate={this.onSelectCell} />",
                    "                    </div>,",
                    "                    <div className={`${prefix}calendar-body-right`} key=\"right-panel\">",
                    "                        <DateTable format={format} {...tableProps} visibleMonth={endVisibleMonth} onSelectDate={this.onSelectCell} />",
                    "                    </div>",
                    "                ];",
                    "                header = (<RangePanelHeader",
                    "                    {...headerProps}",
                    "                    goPrevYear={this.goPrevYear}",
                    "                    goPrevMonth={this.goPrevMonth}",
                    "                    goNextYear={this.goNextYear}",
                    "                    goNextMonth={this.goNextMonth} />);",
                    "                break;",
                    "            }",
                    "            case CALENDAR_MODE_MONTH: {",
                    "                table = <MonthTable {...tableProps} visibleMonth={visibleMonth} onSelectMonth={this.onSelectCell} />;",
                    "                header = <MonthPanelHeader {...headerProps} visibleMonth={visibleMonth} goPrevYear={this.goPrevYear} goNextYear={this.goNextYear} />;",
                    "                break;",
                    "            }",
                    "            case CALENDAR_MODE_YEAR: {",
                    "                table = (<YearTable",
                    "                    {...tableProps}",
                    "                    rtl={rtl}",
                    "                    visibleMonth={visibleMonth}",
                    "                    onSelectYear={this.onSelectCell}",
                    "                    goPrevDecade={this.goPrevDecade}",
                    "                    goNextDecade={this.goNextDecade} />);",
                    "                header = (<YearPanelHeader",
                    "                    {...headerProps}",
                    "                    visibleMonth={visibleMonth}",
                    "                    goPrevDecade={this.goPrevDecade}",
                    "                    goNextDecade={this.goNextDecade} />);",
                    "                break;",
                    "            }",
                    "        }",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}calendar`]: true,",
                    "            [`${prefix}calendar-range`]: true,",
                    "        }, className);",
                    "",
                    "        return (<div {...obj.pickOthers(RangeCalendar.propTypes, others)} className={classNames}>",
                    "            {header}",
                    "            <div className={`${prefix}calendar-body`}>{table}</div>",
                    "        </div>);",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(RangeCalendar, { componentName: 'Calendar' });"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$calendar-prefix}[dir='rtl'] {",
                    "    #{$calendar-prefix} {",
                    "        &-header {",
                    "            text-align: left;",
                    "",
                    "            #{$calendar-select-prefix} {",
                    "                margin-right: 0;",
                    "                margin-left: $s-1;",
                    "            }",
                    "",
                    "            #{$calendar-menu-prefix} {",
                    "                text-align: right;",
                    "            }",
                    "        }",
                    "        &-btn-prev-decade,",
                    "        &-btn-prev-year {",
                    "            left: auto;",
                    "            right: $calendar-btn-arrow-double-offset-lr;",
                    "        }",
                    "",
                    "        &-btn-prev-month {",
                    "            left: auto;",
                    "            right: $calendar-btn-arrow-single-offset-lr;",
                    "        }",
                    "",
                    "        &-btn-next-month {",
                    "            right: auto;",
                    "            left: $calendar-btn-arrow-single-offset-lr;",
                    "        }",
                    "",
                    "        &-btn-next-year,",
                    "        &-btn-next-decade {",
                    "            right: auto;",
                    "            left: $calendar-btn-arrow-double-offset-lr;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$calendar-prefix}-fullscreen[dir='rtl'] {",
                    "    #{$calendar-prefix} {",
                    "        &-th {",
                    "            text-align: left;",
                    "            padding-left: $calendar-fullscreen-table-head-padding-r;",
                    "            padding-right: 0;",
                    "        }",
                    "        &-date,",
                    "        &-month {",
                    "            text-align: left;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$calendar-prefix}-range[dir='rtl'] {",
                    "    #{$calendar-prefix} {",
                    "        &-body-left, &-body-right {",
                    "            float: right;",
                    "        }",
                    "",
                    "        &-body-left {",
                    "            padding-right: 0;",
                    "            padding-left: $s-2;",
                    "        }",
                    "",
                    "        &-body-right {",
                    "            padding-left: 0;",
                    "            padding-right: $s-2;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../radio/style.js';",
                    "import '../select/style.js';",
                    "import './main.scss';"
                ]
            },
            "head": {
                "card-header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import Select from '../../select';",
                        "import Radio from '../../radio';",
                        "",
                        "class CardHeader extends React.PureComponent {",
                        "",
                        "    static propTypes = {",
                        "        yearRangeOffset: PropTypes.number,",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        yearRangeOffset: 10,",
                        "    }",
                        "",
                        "    selectContainerHandler = target => {",
                        "        return target.parentNode;",
                        "    }",
                        "",
                        "    getYearSelect(year) {",
                        "        const { prefix, yearRangeOffset } = this.props;",
                        "        const startYear = year - yearRangeOffset;",
                        "        const endYear = year + yearRangeOffset;",
                        "",
                        "        const options = [];",
                        "        for (let i = startYear; i < endYear; i++) {",
                        "            options.push(<Select.Option key={i} value={i}>{i}</Select.Option>);",
                        "        }",
                        "",
                        "        return (<Select",
                        "            prefix={prefix}",
                        "            value={year}",
                        "            onChange={this.onYearChange}",
                        "            popupContainer={this.selectContainerHandler}>",
                        "            {options}",
                        "        </Select>);",
                        "    }",
                        "",
                        "    getMonthSelect(month) {",
                        "        const { prefix, momentLocale } = this.props;",
                        "        const localeMonths = momentLocale.monthsShort();",
                        "        const options = [];",
                        "        for (let i = 0; i < 12; i++) {",
                        "            options.push(<Select.Option key={i} value={i}>{localeMonths[i]}</Select.Option>);",
                        "        }",
                        "        return (<Select",
                        "            prefix={prefix}",
                        "            value={month}",
                        "            onChange={this.changeVisibleMonth}",
                        "            popupContainer={this.selectContainerHandler}>",
                        "            {options}",
                        "        </Select>);",
                        "    }",
                        "",
                        "    onYearChange= (year) => {",
                        "        const { visibleMonth, changeVisibleMonth } = this.props;",
                        "        changeVisibleMonth(visibleMonth.clone().year(year), 'yearSelect');",
                        "    }",
                        "",
                        "    changeVisibleMonth = (month) => {",
                        "        const { visibleMonth, changeVisibleMonth } = this.props;",
                        "        changeVisibleMonth(visibleMonth.clone().month(month), 'monthSelect');",
                        "    }",
                        "",
                        "    onModePanelChange = (mode) => {",
                        "        this.props.changeMode(mode);",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, mode, locale, visibleMonth } = this.props;",
                        "",
                        "        const yearSelect = this.getYearSelect(visibleMonth.year());",
                        "        const monthSelect = mode === 'month' ? null : this.getMonthSelect(visibleMonth.month());",
                        "        const panelSelect = (<Radio.Group shape=\"button\" size=\"medium\" value={mode} onChange={this.onModePanelChange}>",
                        "            <Radio value=\"date\">{locale.month}</Radio>",
                        "            <Radio value=\"month\">{locale.year}</Radio>",
                        "        </Radio.Group>);",
                        "",
                        "        return (<div className={`${prefix}calendar-header`}>",
                        "            {yearSelect}",
                        "            {monthSelect}",
                        "            {panelSelect}",
                        "        </div>);",
                        "    }",
                        "}",
                        "",
                        "export default CardHeader;"
                    ]
                },
                "date-panel-header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import Icon from '../../icon';",
                        "",
                        "class DatePanelHeader extends React.PureComponent {",
                        "",
                        "    render() {",
                        "        const { prefix, visibleMonth, momentLocale, locale, changeMode, goNextMonth, goNextYear, goPrevMonth, goPrevYear } = this.props;",
                        "",
                        "        const localedMonths = momentLocale.months();",
                        "        const monthLabel = localedMonths[visibleMonth.month()];",
                        "        const yearLable = visibleMonth.year();",
                        "        const btnCls = `${prefix}calendar-btn`;",
                        "",
                        "        return (<div className={`${prefix}calendar-panel-header`}>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.prevYear}",
                        "                className={`${btnCls} ${btnCls}-prev-year`}",
                        "                onClick={goPrevYear}>",
                        "                <Icon type=\"arrow-double-left\" />",
                        "            </button>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.prevMonth}",
                        "                className={`${btnCls} ${btnCls}-prev-month`}",
                        "                onClick={goPrevMonth}>",
                        "                <Icon type=\"arrow-left\" />",
                        "            </button>",
                        "            <div className={`${prefix}calendar-panel-header-full`}>",
                        "                <button role=\"button\" className={btnCls} title={monthLabel} onClick={() => changeMode('month', 'start')}>{monthLabel}</button>",
                        "                <button role=\"button\" className={btnCls} title={yearLable} onClick={() => changeMode('year', 'start')}>{yearLable}</button>",
                        "            </div>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.nextMonth}",
                        "                className={`${btnCls} ${btnCls}-next-month`}",
                        "                onClick={goNextMonth}>",
                        "                <Icon type=\"arrow-right\" />",
                        "            </button>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.nextYear}",
                        "                className={`${btnCls} ${btnCls}-next-year`}",
                        "                onClick={goNextYear}>",
                        "                <Icon type=\"arrow-double-right\" />",
                        "            </button>",
                        "        </div>);",
                        "    }",
                        "}",
                        "",
                        "export default DatePanelHeader;"
                    ]
                },
                "month-panel-header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import Icon from '../../icon';",
                        "",
                        "class MonthPanelHeader extends React.PureComponent {",
                        "",
                        "    render() {",
                        "        const { prefix, visibleMonth, locale, changeMode, goPrevYear, goNextYear } = this.props;",
                        "        const yearLabel = visibleMonth.year();",
                        "        const btnCls = `${prefix}calendar-btn`;",
                        "",
                        "        return (<div className={`${prefix}calendar-panel-header`}>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.prevYear}",
                        "                className={`${btnCls} ${btnCls}-prev-year`}",
                        "                onClick={goPrevYear}>",
                        "                <Icon type=\"arrow-double-left\" />",
                        "            </button>",
                        "            <div className={`${prefix}calendar-panel-header-full`}>",
                        "                <button role=\"button\" title={yearLabel} className={`${btnCls}`} onClick={() => changeMode('year')}>{yearLabel}</button>",
                        "            </div>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.nextYear}",
                        "                className={`${btnCls} ${btnCls}-next-year`}",
                        "                onClick={goNextYear}>",
                        "                <Icon type=\"arrow-double-right\" />",
                        "            </button>",
                        "        </div>);",
                        "    }",
                        "}",
                        "",
                        "export default MonthPanelHeader;"
                    ]
                },
                "range-panel-header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import Icon from '../../icon';",
                        "",
                        "class RangePanelHeader extends React.PureComponent {",
                        "",
                        "    render() {",
                        "        const { prefix, startVisibleMonth, endVisibleMonth, momentLocale, locale, changeMode, goNextMonth, goNextYear, goPrevMonth, goPrevYear } = this.props;",
                        "",
                        "        const localedMonths = momentLocale.months();",
                        "        const startMonthLabel = localedMonths[startVisibleMonth.month()];",
                        "        const endMonthLabel = localedMonths[endVisibleMonth.month()];",
                        "        const startYearLable = startVisibleMonth.year();",
                        "        const endYearLabel = endVisibleMonth.year();",
                        "        const btnCls = `${prefix}calendar-btn`;",
                        "",
                        "        return (<div className={`${prefix}calendar-panel-header`}>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.prevYear}",
                        "                className={`${btnCls} ${btnCls}-prev-year`}",
                        "                onClick={goPrevYear}>",
                        "                <Icon type=\"arrow-double-left\" />",
                        "            </button>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.prevMonth}",
                        "                className={`${btnCls} ${btnCls}-prev-month`}",
                        "                onClick={goPrevMonth}>",
                        "                <Icon type=\"arrow-left\" />",
                        "            </button>",
                        "            <div className={`${prefix}calendar-panel-header-left`}>",
                        "                <button role=\"button\" title={startMonthLabel} className={btnCls} onClick={() => changeMode('month', 'start')}>{startMonthLabel}</button>",
                        "                <button role=\"button\" title={startYearLable} className={btnCls} onClick={() => changeMode('year', 'start')}>{startYearLable}</button>",
                        "            </div>",
                        "            <div className={`${prefix}calendar-panel-header-right`}>",
                        "                <button role=\"button\" title={endMonthLabel} className={btnCls} onClick={() => changeMode('month', 'end')}>{endMonthLabel}</button>",
                        "                <button role=\"button\" title={endYearLabel} className={btnCls} onClick={() => changeMode('year', 'end')}>{endYearLabel}</button>",
                        "            </div>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.nextMonth}",
                        "                className={`${btnCls} ${btnCls}-next-month`}",
                        "                onClick={goNextMonth}>",
                        "                <Icon type=\"arrow-right\" />",
                        "            </button>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.nextYear}",
                        "                className={`${btnCls} ${btnCls}-next-year`}",
                        "                onClick={goNextYear}>",
                        "                <Icon type=\"arrow-double-right\" />",
                        "            </button>",
                        "        </div>);",
                        "    }",
                        "}",
                        "",
                        "export default RangePanelHeader;"
                    ]
                },
                "year-panel-header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import Icon from '../../icon';",
                        "",
                        "class YearPanelHeader extends React.PureComponent {",
                        "",
                        "    getDecadeLabel = (date) => {",
                        "        const year = date.year();",
                        "        const start = parseInt(year / 10, 10) * 10;",
                        "        const end = start + 9;",
                        "        return `${start}-${end}`;",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, visibleMonth, locale, goPrevDecade, goNextDecade } = this.props;",
                        "        const decadeLable = this.getDecadeLabel(visibleMonth);",
                        "        const btnCls = `${prefix}calendar-btn`;",
                        "",
                        "        return (<div className={`${prefix}calendar-panel-header`}>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.prevDecade}",
                        "                className={`${btnCls} ${btnCls}-prev-decade`}",
                        "                onClick={goPrevDecade}>",
                        "                <Icon type=\"arrow-double-left\" />",
                        "            </button>",
                        "            <div className={`${prefix}calendar-panel-header-full`}>",
                        "                <button role=\"button\" title={decadeLable} className={btnCls}>{decadeLable}</button>",
                        "            </div>",
                        "            <button",
                        "                role=\"button\"",
                        "                title={locale.nextDecade}",
                        "                className={`${btnCls} ${btnCls}-next-decade`}",
                        "                onClick={goNextDecade}>",
                        "                <Icon type=\"arrow-double-right\" />",
                        "            </button>",
                        "        </div>);",
                        "    }",
                        "}",
                        "",
                        "export default YearPanelHeader;"
                    ]
                }
            },
            "scss": {
                "animation.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@keyframes cellZoomIn {",
                        "    0% {",
                        "        transform: scale(.5);",
                        "    }",
                        "    100% {",
                        "        transform: scale(1);",
                        "    }",
                        "}",
                        "",
                        "@keyframes cellHover {",
                        "    0% {",
                        "        opacity: 0;",
                        "    }",
                        "    100% {",
                        "        opacity: 1;",
                        "    }",
                        "}",
                        "",
                        "@keyframes enterToLeft {",
                        "    0% {",
                        "        transform: translate(-40%);",
                        "        opacity: 0;",
                        "    }",
                        "    50% {",
                        "        opacity: .6;",
                        "    }",
                        "    100% {",
                        "        opacity: 1;",
                        "        transform: translate(0%);",
                        "    }",
                        "}",
                        "",
                        "@keyframes enterToRight {",
                        "    0% {",
                        "        transform: translate(40%);",
                        "        opacity: 0;",
                        "    }",
                        "    50% {",
                        "        opacity: .6;",
                        "    }",
                        "    100% {",
                        "        opacity: 1;",
                        "        transform: translate(0%);",
                        "    }",
                        "}"
                    ]
                },
                "header.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// shape",
                        "#{$calendar-prefix} {",
                        "",
                        "    // shape: fullscreen, card",
                        "    // ------------------------",
                        "    &-fullscreen, &-card {",
                        "",
                        "        #{$calendar-prefix}-header {",
                        "            text-align: right;",
                        "",
                        "            #{$calendar-select-prefix} {",
                        "                margin-right: $s-1;",
                        "                vertical-align: top;",
                        "            }",
                        "",
                        "            #{$calendar-menu-prefix} {",
                        "                text-align: left;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    // shape: fullscreen",
                        "    &-fullscreen {",
                        "        #{$calendar-prefix}-header {",
                        "            margin-bottom: $calendar-fullscreen-header-margin-bottom;",
                        "        }",
                        "    }",
                        "",
                        "    // shape: card",
                        "    &-card {",
                        "        #{$calendar-prefix}-header {",
                        "            margin-bottom: $calendar-card-header-margin-bottom;",
                        "        }",
                        "    }",
                        "",
                        "    // shape: panel",
                        "    // ------------------------",
                        "    &-panel {",
                        "",
                        "        &-header {",
                        "            position: relative;",
                        "            background: $calendar-panel-header-background;",
                        "            margin-bottom: $calendar-panel-header-margin-bottom;",
                        "            border-bottom: $calendar-panel-header-border-bottom-width solid $calendar-panel-header-border-bottom-color;",
                        "",
                        "            &-left,",
                        "            &-right,",
                        "            &-full {",
                        "                height: $calendar-panel-header-height;",
                        "                line-height: $calendar-panel-header-height;",
                        "",
                        "                #{$calendar-prefix}-btn {",
                        "                    vertical-align: top;",
                        "                    font-weight: $calendar-btn-date-font-weight;",
                        "                    margin: 0 $calendar-btn-date-margin-lr;",
                        "                    @include button-color($calendar-btn-date-color, $calendar-btn-date-color-hover);",
                        "                }",
                        "            }",
                        "",
                        "            &-left,",
                        "            &-right {",
                        "                display: inline-block;",
                        "                width: 50%;",
                        "                text-align: center;",
                        "            }",
                        "",
                        "            &-full {",
                        "                width: 100%;",
                        "                text-align: center;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    // panel components",
                        "    // ------------------------",
                        "    &-btn {",
                        "        cursor: pointer;",
                        "        padding: 0;",
                        "        margin: 0;",
                        "        border: 0;",
                        "        background: transparent;",
                        "        outline: none;",
                        "        height: 100%;",
                        "",
                        "        & > #{$calendar-icon-prefix}#{$calendar-icon-prefix} {",
                        "            @include icon-size($calendar-btn-arrow-size);",
                        "        }",
                        "    }",
                        "",
                        "    &-btn-prev-year,",
                        "    &-btn-prev-month,",
                        "    &-btn-prev-decade,",
                        "    &-btn-next-month,",
                        "    &-btn-next-year,",
                        "    &-btn-next-decade {",
                        "        position: absolute;",
                        "        top: 0;",
                        "        @include button-color($calendar-btn-arrow-color, $calendar-btn-arrow-color-hover);",
                        "    }",
                        "",
                        "    &-btn-prev-decade,",
                        "    &-btn-prev-year {",
                        "        left: $calendar-btn-arrow-double-offset-lr;",
                        "    }",
                        "",
                        "    &-btn-prev-month {",
                        "        left: $calendar-btn-arrow-single-offset-lr;",
                        "    }",
                        "",
                        "    &-btn-next-month {",
                        "        right: $calendar-btn-arrow-single-offset-lr;",
                        "    }",
                        "",
                        "    &-btn-next-year,",
                        "    &-btn-next-decade {",
                        "        right: $calendar-btn-arrow-double-offset-lr;",
                        "    }",
                        "}"
                    ]
                },
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// 状态",
                        "// ----------------------------------------",
                        "@mixin calendar-cell-state(",
                        "    $background,",
                        "    $color,",
                        "    $border-color",
                        ") {",
                        "    background: $background;",
                        "    color: $color;",
                        "    border-color: $border-color;",
                        "}",
                        "",
                        "// 卡片模式单元尺寸",
                        "// ----------------------------------------",
                        "@mixin calendar-card-cell-size(",
                        "    $width,",
                        "    $height,",
                        "    $corner: 0,",
                        "    $margin-tb: 0",
                        ") {",
                        "    width: $width;",
                        "    height: $height;",
                        "    line-height: $height - 2;",
                        "    margin: $margin-tb auto;",
                        "    border-radius: $corner;",
                        "}"
                    ]
                },
                "normalize.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$calendar-prefix} {",
                        "    @include box-sizing();",
                        "",
                        "    table {",
                        "        border-collapse: collapse;",
                        "        border-spacing: 0;",
                        "    }",
                        "",
                        "    td,",
                        "    th {",
                        "        padding: 0;",
                        "    }",
                        "}"
                    ]
                },
                "table.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$calendar-prefix}-fullscreen {",
                        "",
                        "    #{$calendar-prefix} {",
                        "        &-th {",
                        "            text-align: right;",
                        "            color: $calendar-fullscreen-table-head-color;",
                        "            font-size: $calendar-fullscreen-table-head-font-size;",
                        "            font-weight: $calendar-fullscreen-table-head-font-weight;",
                        "            padding-right: $calendar-fullscreen-table-head-padding-r;",
                        "            padding-bottom: $calendar-fullscreen-table-head-padding-b;",
                        "        }",
                        "",
                        "        &-cell {",
                        "            font-size: $calendar-fullscreen-table-cell-font-size;",
                        "",
                        "            &.#{$css-prefix}selected {",
                        "                #{$calendar-prefix}-date,",
                        "                #{$calendar-prefix}-month {",
                        "                    font-weight: $calendar-fullscreen-table-cell-select-font-weight;",
                        "",
                        "                    @include calendar-cell-state (",
                        "                        $calendar-fullscreen-table-cell-select-background,",
                        "                        $calendar-fullscreen-table-cell-select-color,",
                        "                        $calendar-fullscreen-table-cell-select-border-color",
                        "                    );",
                        "                }",
                        "            }",
                        "",
                        "            &.#{$css-prefix}disabled {",
                        "                #{$calendar-prefix}-date,",
                        "                #{$calendar-prefix}-month {",
                        "                    cursor: not-allowed;",
                        "                    @include calendar-cell-state (",
                        "                        $calendar-fullscreen-table-cell-disabled-background,",
                        "                        $calendar-fullscreen-table-cell-disabled-color,",
                        "                        $calendar-fullscreen-table-cell-disabled-border-color",
                        "                    );",
                        "                }",
                        "            }",
                        "        }",
                        "",
                        "        &-date,",
                        "        &-month {",
                        "            text-align: right;",
                        "            white-space: nowrap;",
                        "            overflow: hidden;",
                        "            text-overflow: ellipsis;",
                        "            margin: $calendar-fullscreen-table-cell-margin-tb $calendar-fullscreen-table-cell-margin-lr;",
                        "            padding: $calendar-fullscreen-table-cell-padding-tb $calendar-fullscreen-table-cell-padding-lr;",
                        "            min-height: $calendar-fullscreen-table-cell-min-height;",
                        "            border-top: $calendar-fullscreen-table-cell-boder-top-width $line-solid;",
                        "            transition: background .3s ease;",
                        "",
                        "            @include calendar-cell-state (",
                        "                $calendar-fullscreen-table-cell-normal-background,",
                        "                $calendar-fullscreen-table-cell-normal-color,",
                        "                $calendar-fullscreen-table-cell-normal-border-color",
                        "            );",
                        "",
                        "            &:hover {",
                        "                @include calendar-cell-state (",
                        "                    $calendar-fullscreen-table-cell-hover-background,",
                        "                    $calendar-fullscreen-table-cell-hover-color,",
                        "                    $calendar-fullscreen-table-cell-hover-border-color",
                        "                );",
                        "            }",
                        "        }",
                        "",
                        "        &-cell-prev-month,",
                        "        &-cell-next-month {",
                        "            #{$calendar-prefix}-date {",
                        "                @include calendar-cell-state (",
                        "                    $calendar-fullscreen-table-cell-other-background,",
                        "                    $calendar-fullscreen-table-cell-other-color,",
                        "                    $calendar-fullscreen-table-cell-other-border-color",
                        "                );",
                        "            }",
                        "        }",
                        "",
                        "        &-cell-current {",
                        "            #{$calendar-prefix}-date,",
                        "            #{$calendar-prefix}-month {",
                        "                font-weight: $calendar-fullscreen-table-cell-current-font-weight;",
                        "",
                        "                @include calendar-cell-state (",
                        "                    $calendar-fullscreen-table-cell-current-background,",
                        "                    $calendar-fullscreen-table-cell-current-color,",
                        "                    $calendar-fullscreen-table-cell-current-border-color",
                        "                );",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "#{$calendar-prefix}-card,",
                        "#{$calendar-prefix}-panel,",
                        "#{$calendar-prefix}-range {",
                        "",
                        "    #{$calendar-prefix} {",
                        "        &-th {",
                        "            text-align: center;",
                        "            color: $calendar-card-table-head-color;",
                        "            font-size: $calendar-card-table-head-font-size;",
                        "            font-weight: $calendar-card-table-head-font-weight;",
                        "        }",
                        "",
                        "        &-cell {",
                        "            text-align: center;",
                        "            font-size: $calendar-card-table-cell-font-size;",
                        "",
                        "            &.#{$css-prefix}selected {",
                        "                #{$calendar-prefix}-date,",
                        "                #{$calendar-prefix}-month,",
                        "                #{$calendar-prefix}-year {",
                        "                    animation: cellZoomIn .4s cubic-bezier(.23, 1, .32, 1);",
                        "                    font-weight: $calendar-card-table-cell-select-font-weight;",
                        "",
                        "                    @include calendar-cell-state (",
                        "                        $calendar-card-table-cell-select-background,",
                        "                        $calendar-card-table-cell-select-color,",
                        "                        $calendar-card-table-cell-select-border-color",
                        "                    );",
                        "                }",
                        "            }",
                        "",
                        "            &.#{$css-prefix}disabled {",
                        "                #{$calendar-prefix}-date,",
                        "                #{$calendar-prefix}-month,",
                        "                #{$calendar-prefix}-year {",
                        "                    cursor: not-allowed;",
                        "",
                        "                    @include calendar-cell-state (",
                        "                        $calendar-card-table-cell-disabled-background,",
                        "                        $calendar-card-table-cell-disabled-color,",
                        "                        $calendar-card-table-cell-disabled-border-color",
                        "                    );",
                        "                }",
                        "            }",
                        "",
                        "            &.#{$css-prefix}inrange {",
                        "                #{$calendar-prefix}-date {",
                        "                    @include calendar-cell-state (",
                        "                        $calendar-card-table-cell-inrange-background,",
                        "                        $calendar-card-table-cell-inrange-color,",
                        "                        $calendar-card-table-cell-inrange-border-color);",
                        "                }",
                        "            }",
                        "        }",
                        "",
                        "        &-date,",
                        "        &-month,",
                        "        &-year {",
                        "            text-align: center;",
                        "            border: $line-1 $line-solid;",
                        "",
                        "            &:hover {",
                        "                cursor: pointer;",
                        "            }",
                        "",
                        "            @include calendar-cell-state (",
                        "                $calendar-card-table-cell-normal-background,",
                        "                $calendar-card-table-cell-normal-color,",
                        "                $calendar-card-table-cell-normal-border-color",
                        "            );",
                        "",
                        "            &:hover {",
                        "                @include calendar-cell-state (",
                        "                    $calendar-card-table-cell-hover-background,",
                        "                    $calendar-card-table-cell-hover-color,",
                        "                    $calendar-card-table-cell-hover-border-color",
                        "                );",
                        "            }",
                        "        }",
                        "",
                        "        &-date {",
                        "            @include calendar-card-cell-size(",
                        "                $s-6,",
                        "                $s-6,",
                        "                $calendar-card-table-cell-date-border-radius,",
                        "                $s-1",
                        "            );",
                        "        }",
                        "",
                        "        &-month {",
                        "            @include calendar-card-cell-size(",
                        "                $s-15,",
                        "                $s-6,",
                        "                $calendar-card-table-cell-month-border-radius,",
                        "                $s-2",
                        "            );",
                        "        }",
                        "",
                        "        &-year {",
                        "            @include calendar-card-cell-size(",
                        "                $s-12,",
                        "                $s-6,",
                        "                $calendar-card-table-cell-year-border-radius,",
                        "                $s-2",
                        "            );",
                        "        }",
                        "",
                        "        &-cell-prev-month {",
                        "            #{$calendar-prefix}-date {",
                        "                @include calendar-cell-state (",
                        "                    $calendar-card-table-cell-other-background,",
                        "                    $calendar-card-table-cell-other-color,",
                        "                    $calendar-card-table-cell-other-border-color",
                        "                );",
                        "            }",
                        "        }",
                        "",
                        "        &-cell-next-month {",
                        "            #{$calendar-prefix}-date {",
                        "                @include calendar-cell-state (",
                        "                    $calendar-card-table-cell-other-background,",
                        "                    $calendar-card-table-cell-other-color,",
                        "                    $calendar-card-table-cell-other-border-color",
                        "                );",
                        "            }",
                        "        }",
                        "",
                        "        &-cell-current {",
                        "            #{$calendar-prefix}-date,",
                        "            #{$calendar-prefix}-month,",
                        "            #{$calendar-prefix}-year {",
                        "                font-weight: $calendar-card-table-cell-current-font-weight;",
                        "",
                        "                @include calendar-cell-state (",
                        "                    $calendar-card-table-cell-current-background,",
                        "                    $calendar-card-table-cell-current-color,",
                        "                    $calendar-card-table-cell-current-border-color",
                        "                );",
                        "            }",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module calendar: 日历",
                        "/// @tag Calendar",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $calendar-",
                        "/// @classPrefix {prefix}-calendar",
                        "/// @order {\"size/header\":10,\"size/table head\":11,\"size/table cell\":12,\"statement/normal\":10,\"statement/normal/table head\":100,\"statement/normal/table cell\":101,\"statement/normal/header\":102,\"statement/hover\":11,\"statement/hover/table cell\":110,\"statement/hover/header\":111,\"statement/selected\":12,\"statement/selected/table cell\":120,\"statement/current\":13,\"statement/current/table cell\":130,\"statement/other month\":14,\"statement/other month/table cell\":140,\"statement/disabled\":15,\"statement/disabled/table cell\":150,\"statement/last month\":16,\"statement/last month/table cell\":160,\"statement/in range\":17,\"statement/in range/table cell\":170}",
                        "////",
                        "",
                        "$calendar-prefix: '.' + $css-prefix + 'calendar';",
                        "",
                        "$calendar-select-prefix: '.' + $css-prefix + 'select';",
                        "",
                        "$calendar-radio-prefix: '.' + $css-prefix + 'radio';",
                        "",
                        "$calendar-icon-prefix: '.' + $css-prefix +  'icon';",
                        "",
                        "$calendar-menu-prefix: '.' + $css-prefix + 'menu';",
                        "",
                        "// 全屏模式",
                        "// ----------------------------------------",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/header",
                        "$calendar-fullscreen-header-margin-bottom: $s-2 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace size/table head",
                        "$calendar-fullscreen-table-head-font-weight: $font-weight-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/table head",
                        "$calendar-fullscreen-table-head-font-size: $font-size-subhead !default;",
                        "",
                        "/// padding (r)",
                        "/// @namespace size/table head",
                        "$calendar-fullscreen-table-head-padding-r: $s-3 !default;",
                        "",
                        "/// padding (b)",
                        "/// @namespace size/table head",
                        "$calendar-fullscreen-table-head-padding-b: $s-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/table cell",
                        "$calendar-fullscreen-table-cell-font-size: $font-size-body-2 !default;",
                        "",
                        "/// border (t)",
                        "/// @namespace size/table cell",
                        "$calendar-fullscreen-table-cell-boder-top-width: $line-2 !default;",
                        "",
                        "/// margin (t, b)",
                        "/// @namespace size/table cell",
                        "$calendar-fullscreen-table-cell-margin-tb: $s-zero !default;",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/table cell",
                        "$calendar-fullscreen-table-cell-margin-lr: $s-1 !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/table cell",
                        "$calendar-fullscreen-table-cell-padding-tb: $s-1 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/table cell",
                        "$calendar-fullscreen-table-cell-padding-lr: $s-2 !default;",
                        "",
                        "/// min height",
                        "/// @namespace size/table cell",
                        "$calendar-fullscreen-table-cell-min-height: $s-20 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/table head",
                        "$calendar-fullscreen-table-head-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/table cell",
                        "$calendar-fullscreen-table-cell-normal-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/table cell",
                        "$calendar-fullscreen-table-cell-normal-color: $color-text1-4 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/table cell",
                        "$calendar-fullscreen-table-cell-normal-border-color: $color-line1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/table cell",
                        "$calendar-fullscreen-table-cell-hover-background: $color-brand1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/table cell",
                        "$calendar-fullscreen-table-cell-hover-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/hover/table cell",
                        "$calendar-fullscreen-table-cell-hover-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-fullscreen-table-cell-select-background: $color-brand1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-fullscreen-table-cell-select-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-fullscreen-table-cell-select-border-color: $color-brand1-6 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-fullscreen-table-cell-select-font-weight: $font-weight-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/current/table cell",
                        "$calendar-fullscreen-table-cell-current-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/current/table cell",
                        "$calendar-fullscreen-table-cell-current-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/current/table cell",
                        "$calendar-fullscreen-table-cell-current-border-color: $color-brand1-6 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/current/table cell",
                        "$calendar-fullscreen-table-cell-current-font-weight: $font-weight-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/other month/table cell",
                        "$calendar-fullscreen-table-cell-other-background: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/other month/table cell",
                        "$calendar-fullscreen-table-cell-other-color: $color-text1-1 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/other month/table cell",
                        "$calendar-fullscreen-table-cell-other-border-color: $color-transparent !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/table cell",
                        "$calendar-fullscreen-table-cell-disabled-background: $color-fill1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/table cell",
                        "$calendar-fullscreen-table-cell-disabled-color: $color-text1-1 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/disabled/table cell",
                        "$calendar-fullscreen-table-cell-disabled-border-color: $color-line1-1 !default;",
                        "",
                        "// 卡片模式 cell",
                        "// ----------------------------------------",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/header",
                        "$calendar-card-header-margin-bottom: $s-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/table head",
                        "$calendar-card-table-head-font-size: $font-size-caption !default;",
                        "",
                        "/// font weight",
                        "/// @namespace size/table head",
                        "$calendar-card-table-head-font-weight: $font-weight-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/table cell",
                        "$calendar-card-table-cell-font-size: $font-size-caption !default;",
                        "",
                        "/// date corner",
                        "/// @namespace size/table cell",
                        "$calendar-card-table-cell-date-border-radius: $corner-1 !default;",
                        "",
                        "/// month corner",
                        "/// @namespace size/table cell",
                        "$calendar-card-table-cell-month-border-radius: $corner-1 !default;",
                        "",
                        "/// year corner",
                        "/// @namespace size/table cell",
                        "$calendar-card-table-cell-year-border-radius: $corner-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/table head",
                        "$calendar-card-table-head-color: $color-text1-2 !default;",
                        "",
                        "/// cell corner",
                        "/// @namespace statement/normal/table cell",
                        "$calendar-card-table-cell-corner: $corner-zero !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/table cell",
                        "$calendar-card-table-cell-normal-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/table cell",
                        "$calendar-card-table-cell-normal-color: $color-text1-3 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/table cell",
                        "$calendar-card-table-cell-normal-border-color: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/table cell",
                        "$calendar-card-table-cell-hover-background: $color-brand1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/table cell",
                        "$calendar-card-table-cell-hover-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/hover/table cell",
                        "$calendar-card-table-cell-hover-border-color: $color-brand1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-card-table-cell-select-background: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-card-table-cell-select-color: $color-white !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-card-table-cell-select-border-color: $color-brand1-6 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/selected/table cell",
                        "$calendar-card-table-cell-select-font-weight: $font-weight-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/last month/table cell",
                        "$calendar-card-table-cell-other-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/last month/table cell",
                        "$calendar-card-table-cell-other-color: $color-text1-1 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/last month/table cell",
                        "$calendar-card-table-cell-other-border-color: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/table cell",
                        "$calendar-card-table-cell-disabled-background: $color-fill1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/table cell",
                        "$calendar-card-table-cell-disabled-color: $color-text1-1 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/disabled/table cell",
                        "$calendar-card-table-cell-disabled-border-color: $color-fill1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/current/table cell",
                        "$calendar-card-table-cell-current-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/current/table cell",
                        "$calendar-card-table-cell-current-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/current/table cell",
                        "$calendar-card-table-cell-current-border-color: $color-transparent !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/current/table cell",
                        "$calendar-card-table-cell-current-font-weight: $font-weight-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/in range/table cell",
                        "$calendar-card-table-cell-inrange-background: $color-brand1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/in range/table cell",
                        "$calendar-card-table-cell-inrange-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/in range/table cell",
                        "$calendar-card-table-cell-inrange-border-color: $color-brand1-1 !default;",
                        "",
                        "// 面板模式 Panel Header",
                        "// ----------------------------------------",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/header",
                        "$calendar-panel-header-margin-bottom: $s-2 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/header",
                        "$calendar-panel-header-height: $s-8 !default;",
                        "",
                        "/// border (b)",
                        "/// @namespace size/header",
                        "$calendar-panel-header-border-bottom-width: $line-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/header",
                        "$calendar-panel-header-background: $color-brand1-6 !default;",
                        "",
                        "/// border (b)",
                        "/// @namespace statement/normal/header",
                        "$calendar-panel-header-border-bottom-color: $color-transparent !default;",
                        "",
                        "// calendar btn",
                        "// --------------------",
                        "",
                        "/// btn font weight",
                        "/// @namespace size/header",
                        "$calendar-btn-date-font-weight: $font-weight-3 !default;",
                        "",
                        "/// btn margin (lr)",
                        "/// @namespace size/header",
                        "$calendar-btn-date-margin-lr: $s-1 !default;",
                        "",
                        "/// sing arrow offset (l, r)",
                        "/// @namespace size/header",
                        "$calendar-btn-arrow-single-offset-lr: $s-7 !default;",
                        "",
                        "/// double arrow offset (l,r )",
                        "/// @namespace size/header",
                        "$calendar-btn-arrow-double-offset-lr: $s-2 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/header",
                        "$calendar-btn-arrow-size: $icon-xs !default;",
                        "",
                        "/// arrow",
                        "/// @namespace statement/normal/header",
                        "$calendar-btn-arrow-color: $color-white !default;",
                        "",
                        "/// arrow",
                        "/// @namespace statement/hover/header",
                        "$calendar-btn-arrow-color-hover: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/header",
                        "$calendar-btn-date-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/header",
                        "$calendar-btn-date-color-hover: $color-white !default;"
                    ]
                }
            },
            "table": {
                "date-table-head.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { PureComponent } from 'react';",
                        "import { DAYS_OF_WEEK } from '../utils';",
                        "",
                        "class DateTableHead extends PureComponent {",
                        "    render() {",
                        "        const { prefix, momentLocale } = this.props;",
                        "        const firstDayOfWeek = momentLocale.firstDayOfWeek();",
                        "        const weekdaysShort = momentLocale.weekdaysShort();",
                        "",
                        "        const elements = [];",
                        "        for (let i = 0; i < DAYS_OF_WEEK; i++) {",
                        "            const index = (firstDayOfWeek + i) % DAYS_OF_WEEK;",
                        "            elements.push(",
                        "                <th key={i} className={`${prefix}calendar-th`} role=\"cell\">",
                        "                    {weekdaysShort[index]}",
                        "                </th>",
                        "            );",
                        "        }",
                        "",
                        "        return (",
                        "            <thead className={`${prefix}calendar-thead`} role=\"rowgroup\">",
                        "                <tr role=\"row\">",
                        "                    {elements}",
                        "                </tr>",
                        "            </thead>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default DateTableHead;"
                    ]
                },
                "date-table.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { PureComponent } from 'react';",
                        "import classNames from 'classnames';",
                        "import DateTableHead from './date-table-head';",
                        "import { isDisabledDate, DAYS_OF_WEEK, CALENDAR_TABLE_COL_COUNT, CALENDAR_TABLE_ROW_COUNT } from '../utils';",
                        "",
                        "function isSameDay(a, b) {",
                        "    return a && b && a.isSame(b, 'day');",
                        "}",
                        "",
                        "function isRangeDate(date, startDate, endDate) {",
                        "    return date.format('L') !== startDate.format('L') &&",
                        "        date.format('L') !== endDate.format('L') &&",
                        "        date.valueOf() > startDate.valueOf() &&",
                        "        date.valueOf() < endDate.valueOf();",
                        "}",
                        "",
                        "function isLastMonthDate(date, target) {",
                        "    if (date.year() < target.year()) {",
                        "        return 1;",
                        "    }",
                        "    return date.year() === target.year() && date.month() < target.month();",
                        "}",
                        "",
                        "function isNextMonthDate(date, target) {",
                        "    if (date.year() > target.year()) {",
                        "        return 1;",
                        "    }",
                        "    return date.year() === target.year() && date.month() > target.month();",
                        "}",
                        "",
                        "class DateTable extends PureComponent {",
                        "",
                        "    render() {",
                        "        const { prefix, visibleMonth, showOtherMonth, endValue, format, today, momentLocale, dateCellRender, disabledDate, onSelectDate } = this.props;",
                        "        const startValue = this.props.startValue || this.props.value;",
                        "",
                        "        const firstDayOfMonth = visibleMonth.clone().startOf('month'); // 该月的 1 号",
                        "        const firstDayOfMonthInWeek = firstDayOfMonth.day(); // 星期几",
                        "",
                        "        const firstDayOfWeek = momentLocale.firstDayOfWeek();",
                        "",
                        "        const datesOfLastMonthCount = (firstDayOfMonthInWeek + DAYS_OF_WEEK - firstDayOfWeek) % DAYS_OF_WEEK;",
                        "",
                        "        const lastMonthDate = firstDayOfMonth.clone();",
                        "        lastMonthDate.add(0 - datesOfLastMonthCount, 'days');",
                        "",
                        "        let counter = 0;",
                        "        let currentDate;",
                        "        const dateList = [];",
                        "        for (let i = 0; i < CALENDAR_TABLE_ROW_COUNT; i++) {",
                        "            for (let j = 0; j < CALENDAR_TABLE_COL_COUNT; j++) {",
                        "                currentDate = lastMonthDate;",
                        "                if (counter) {",
                        "                    currentDate = currentDate.clone();",
                        "                    currentDate.add(counter, 'days');",
                        "                }",
                        "                dateList.push(currentDate);",
                        "                counter++;",
                        "            }",
                        "        }",
                        "",
                        "        counter = 0; // reset counter",
                        "        const monthElements = [];",
                        "        for (let i = 0; i < CALENDAR_TABLE_ROW_COUNT; i++) {",
                        "            const weekElements = [];",
                        "            for (let j = 0; j < CALENDAR_TABLE_COL_COUNT; j++) {",
                        "                currentDate = dateList[counter];",
                        "                const isLastMonth = isLastMonthDate(currentDate, visibleMonth);",
                        "                const isNextMonth = isNextMonthDate(currentDate, visibleMonth);",
                        "                const isCurrentMonth = !isLastMonth && !isNextMonth;",
                        "",
                        "                const isDisabled = isDisabledDate(currentDate, disabledDate);",
                        "                const isToday = !isDisabled && isSameDay(currentDate, today) && isCurrentMonth;",
                        "                const isSelected = !isDisabled && (isSameDay(currentDate, startValue) || isSameDay(currentDate, endValue)) && isCurrentMonth;",
                        "                const isInRange = !isDisabled && startValue && endValue && isRangeDate(currentDate, startValue, endValue) && isCurrentMonth;",
                        "",
                        "                const cellContent = !showOtherMonth && !isCurrentMonth ? null : dateCellRender(currentDate);",
                        "",
                        "                const elementCls = classNames({",
                        "                    [`${prefix}calendar-cell`]: true,",
                        "                    [`${prefix}calendar-cell-prev-month`]: isLastMonth,",
                        "                    [`${prefix}calendar-cell-next-month`]: isNextMonth,",
                        "                    [`${prefix}calendar-cell-current`]: isToday,",
                        "                    [`${prefix}inrange`]: isInRange,",
                        "                    [`${prefix}selected`]: isSelected,",
                        "                    [`${prefix}disabled`]: cellContent && isDisabled,",
                        "                });",
                        "",
                        "                weekElements.push(<td",
                        "                    key={counter}",
                        "                    title={currentDate.format(format)}",
                        "                    onClick={isDisabled ? undefined : onSelectDate.bind(null, currentDate)}",
                        "                    className={elementCls}",
                        "                    role=\"cell\"",
                        "                    aria-disabled={isDisabled ? 'true' : 'false'}",
                        "                    aria-selected={isSelected ? 'true' : 'false'}>",
                        "                    <div className={`${prefix}calendar-date`}>",
                        "                        {cellContent}",
                        "                    </div>",
                        "                </td>);",
                        "                counter++;",
                        "            }",
                        "            monthElements.push(<tr key={i} role=\"row\">{weekElements}</tr>);",
                        "        }",
                        "",
                        "        return (",
                        "            <table className={`${prefix}calendar-table`} role=\"grid\">",
                        "                <DateTableHead {...this.props} momentLocale={momentLocale} />",
                        "                <tbody className={`${prefix}calendar-tbody`} role=\"rowgroup\">",
                        "                    {monthElements}",
                        "                </tbody>",
                        "            </table>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default DateTable;"
                    ]
                },
                "month-table.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { PureComponent } from 'react';",
                        "import classnames from 'classnames';",
                        "import { isDisabledDate, MONTH_TABLE_ROW_COUNT, MONTH_TABLE_COL_COUNT } from '../utils';",
                        "",
                        "function isSameMonth(currentDate, selectedDate) {",
                        "    return selectedDate && currentDate.year() === selectedDate.year() && currentDate.month() === selectedDate.month();",
                        "}",
                        "",
                        "class MonthTable extends PureComponent {",
                        "",
                        "    onMonthCellClick(date) {",
                        "        this.props.onSelectMonth(date, 'date');",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, value, visibleMonth, disabledDate, today, momentLocale, monthCellRender } = this.props;",
                        "",
                        "        const monthLocale = momentLocale.monthsShort();",
                        "",
                        "        let counter = 0;",
                        "        const monthList = [];",
                        "        for (let i = 0; i < MONTH_TABLE_ROW_COUNT; i++) {",
                        "            const rowList = [];",
                        "            for (let j = 0; j < MONTH_TABLE_COL_COUNT; j++) {",
                        "                const monthDate = visibleMonth.clone().month(counter);",
                        "                const isDisabled = isDisabledDate(monthDate, disabledDate);",
                        "                const isSelected = isSameMonth(monthDate, value);",
                        "                const isThisMonth = isSameMonth(monthDate, today);",
                        "                const elementCls = classnames({",
                        "                    [`${prefix}calendar-cell`]: true,",
                        "                    [`${prefix}calendar-cell-current`]: isThisMonth,",
                        "                    [`${prefix}selected`]: isSelected,",
                        "                    [`${prefix}disabled`]: isDisabled,",
                        "                });",
                        "                const localedMonth = monthLocale[counter];",
                        "                const monthCellContent = monthCellRender ? monthCellRender(monthDate) : localedMonth;",
                        "                rowList.push(<td",
                        "                    key={counter}",
                        "                    title={localedMonth}",
                        "                    onClick={isDisabled ? undefined : this.onMonthCellClick.bind(this, monthDate)}",
                        "                    className={elementCls}",
                        "                    role=\"cell\"",
                        "                    aria-disabled={isDisabled ? 'true' : 'false'}",
                        "                    aria-selected={isSelected ? 'true' : 'false'}>",
                        "                    <div className={`${prefix}calendar-month`}>{monthCellContent}</div>",
                        "                </td>);",
                        "                counter++;",
                        "            }",
                        "            monthList.push(<tr key={i} role=\"row\">{rowList}</tr>);",
                        "        }",
                        "",
                        "        return (<table className={`${prefix}calendar-table`} role=\"grid\">",
                        "            <tbody className={`${prefix}calendar-tbody`} role=\"rowgroup\">",
                        "                {monthList}",
                        "            </tbody>",
                        "        </table>);",
                        "    }",
                        "}",
                        "",
                        "export default MonthTable;"
                    ]
                },
                "year-table.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import classnames from 'classnames';",
                        "import Icon from '../../icon';",
                        "import { isDisabledDate, YEAR_TABLE_COL_COUNT, YEAR_TABLE_ROW_COUNT } from '../utils';",
                        "",
                        "class YearTable extends React.PureComponent {",
                        "",
                        "    onYearCellClick (date) {",
                        "        this.props.onSelectYear(date, 'month');",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, value, today, visibleMonth, locale, disabledDate, goPrevDecade, goNextDecade } = this.props;",
                        "        const currentYear = today.year();",
                        "        const selectedYear = value ? value.year() : null;",
                        "        const visibleYear = visibleMonth.year();",
                        "        const startYear = Math.floor(visibleYear / 10) * 10;",
                        "",
                        "        const yearElements = [];",
                        "        let counter = 0;",
                        "",
                        "        const lastRowIndex = YEAR_TABLE_ROW_COUNT - 1;",
                        "        const lastColIndex = YEAR_TABLE_COL_COUNT - 1;",
                        "",
                        "        for (let i = 0; i < YEAR_TABLE_ROW_COUNT; i++) {",
                        "            const rowElements = [];",
                        "            for (let j = 0; j < YEAR_TABLE_COL_COUNT; j++) {",
                        "                let content;",
                        "                let year;",
                        "                let isDisabled = false;",
                        "                let onClick;",
                        "                let title;",
                        "",
                        "                if (i === 0 && j === 0) {",
                        "                    title = locale.prevDecade;",
                        "                    onClick = goPrevDecade;",
                        "                    content = <Icon type=\"arrow-left\" size=\"xs\" />;",
                        "                } else if (i === lastRowIndex && j === lastColIndex) {",
                        "                    title = locale.nextDecade;",
                        "                    onClick = goNextDecade;",
                        "                    content = <Icon type=\"arrow-right\" size=\"xs\" />;",
                        "                } else {",
                        "                    year = startYear + counter++;",
                        "                    content = year;",
                        "                    title = year;",
                        "                    const yearDate = visibleMonth.clone().year(year);",
                        "                    isDisabled = isDisabledDate(yearDate, disabledDate);",
                        "",
                        "                    !isDisabled && (onClick = this.onYearCellClick.bind(this, yearDate));",
                        "                }",
                        "",
                        "                const isSelected = year === selectedYear;",
                        "",
                        "                const classNames = classnames({",
                        "                    [`${prefix}calendar-cell`]: true,",
                        "                    [`${prefix}calendar-cell-current`]: year === currentYear,",
                        "                    [`${prefix}selected`]: isSelected,",
                        "                    [`${prefix}disabled`]: isDisabled,",
                        "                });",
                        "",
                        "                rowElements.push(<td key={`${i}-${j}`} className={classNames} role=\"cell\">",
                        "                    <div",
                        "                        className={`${prefix}calendar-year`}",
                        "                        onClick={onClick}",
                        "                        title={title}",
                        "                        aria-disabled={isDisabled ? 'true' : 'false'}",
                        "                        aria-selected={isSelected ? 'true' : 'false'}>",
                        "                        {content}",
                        "                    </div>",
                        "                </td>);",
                        "",
                        "            }",
                        "            yearElements.push(<tr key={i} role=\"row\">{rowElements}</tr>);",
                        "        }",
                        "        return (<table className={`${prefix}calendar-table`} role=\"grid\">",
                        "            <tbody className={`${prefix}calendar-tbody`} role=\"rowgroup\">",
                        "                {yearElements}",
                        "            </tbody>",
                        "        </table>);",
                        "    }",
                        "}",
                        "",
                        "export default YearTable;"
                    ]
                }
            },
            "utils": {
                "index.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import moment from 'moment';",
                        "",
                        "export const DAYS_OF_WEEK = 7;",
                        "",
                        "export const CALENDAR_TABLE_COL_COUNT = 7;",
                        "",
                        "export const CALENDAR_TABLE_ROW_COUNT = 6;",
                        "",
                        "export const MONTH_TABLE_ROW_COUNT = 4;",
                        "",
                        "export const MONTH_TABLE_COL_COUNT = 3;",
                        "",
                        "export const YEAR_TABLE_ROW_COUNT = 4;",
                        "",
                        "export const YEAR_TABLE_COL_COUNT = 3;",
                        "",
                        "export const CALENDAR_MODE_YEAR = 'year';",
                        "",
                        "export const CALENDAR_MODE_MONTH = 'month';",
                        "",
                        "export const CALENDAR_MODE_DATE = 'date';",
                        "",
                        "export const CALENDAR_MODES = [",
                        "    CALENDAR_MODE_DATE,",
                        "    CALENDAR_MODE_MONTH,",
                        "    CALENDAR_MODE_YEAR,",
                        "];",
                        "",
                        "export function isDisabledDate(date, fn) {",
                        "    if (typeof fn === 'function' && fn(date)) {",
                        "        return true;",
                        "    }",
                        "    return false;",
                        "}",
                        "",
                        "export function checkMomentObj(props, propName, componentName) {",
                        "    if (props[propName] && !moment.isMoment(props[propName])) {",
                        "        return new Error(`Invalid prop ${propName} supplied to ${componentName}. Required a moment object`);",
                        "    }",
                        "}",
                        "",
                        "export function formatDateValue(value, reservedValue = null) {",
                        "    if (value && moment.isMoment(value)) {",
                        "        return value;",
                        "    }",
                        "    return reservedValue;",
                        "}",
                        "",
                        "export function getVisibleMonth(defaultVisibleMonth, value) {",
                        "    let getVM = defaultVisibleMonth;",
                        "    if (typeof getVM !== 'function' || !moment.isMoment(getVM())) {",
                        "        getVM = () => {",
                        "            if (value) {",
                        "                return value;",
                        "            }",
                        "            return moment();",
                        "        };",
                        "    }",
                        "    return getVM();",
                        "}",
                        "",
                        "export function isSameYearMonth(dateA, dateB) {",
                        "    return dateA.month() === dateB.month() && dateA.year() === dateB.year();",
                        "}",
                        "",
                        "export function preFormatDateValue(value, format) {",
                        "    const val = typeof value === 'string' ? moment(value, format, false) : value;",
                        "    if (val && moment.isMoment(val) && val.isValid()) {",
                        "        return val;",
                        "    }",
                        "",
                        "    return null;",
                        "}"
                    ]
                }
            }
        },
        "card": {
            "card.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Icon from '../icon';",
                    "import Button from '../button';",
                    "import locale from '../locale/zh-cn';",
                    "import { obj } from '../util';",
                    "",
                    "const { pickOthers } = obj;",
                    "",
                    "/** Card */",
                    "export default class Card extends React.Component {",
                    "    static displayName = 'Card';",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 卡片的标题",
                    "         */",
                    "        title: PropTypes.node,",
                    "        /**",
                    "         * 卡片的副标题",
                    "         */",
                    "        subTitle: PropTypes.node,",
                    "        /**",
                    "         * 是否显示标题的项目符号",
                    "         */",
                    "        showTitleBullet: PropTypes.bool,",
                    "        /**",
                    "         * 是否展示头部的分隔线",
                    "         */",
                    "        showHeadDivider: PropTypes.bool,",
                    "        /**",
                    "         * 内容区域的固定高度",
                    "         */",
                    "        contentHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 标题区域的用户自定义内容",
                    "         */",
                    "        extra: PropTypes.node,",
                    "        className: PropTypes.string,",
                    "        children: PropTypes.node,",
                    "        locale: PropTypes.object",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        showTitleBullet: true,",
                    "        showHeadDivider: true,",
                    "        contentHeight: 120,",
                    "        locale: locale.Card,",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        this.state = {",
                    "            needMore: false,",
                    "            expand: false,",
                    "            contentHeight: 'auto',",
                    "        };",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        this._setNeedMore();",
                    "        this._setContentHeight();",
                    "    }",
                    "",
                    "    componentDidUpdate() {",
                    "        this._setContentHeight();",
                    "    }",
                    "",
                    "    handleToggle = () => {",
                    "        this.setState(prevState => {",
                    "            return {",
                    "                expand: !prevState.expand,",
                    "            };",
                    "        });",
                    "    }",
                    "",
                    "    // 是否展示 More 按钮",
                    "    _setNeedMore() {",
                    "        const { contentHeight } = this.props;",
                    "        const childrenHeight = this._getNodeChildrenHeight(this.content);",
                    "        this.setState({",
                    "            needMore: contentHeight !== 'auto' && childrenHeight > contentHeight,",
                    "        });",
                    "    }",
                    "",
                    "    // 设置 Body 的高度",
                    "    _setContentHeight() {",
                    "        if (this.state.expand) {",
                    "            const childrenHeight = this._getNodeChildrenHeight(this.content);",
                    "            this.content.style.height = `${childrenHeight}px`; // get the real height",
                    "        } else {",
                    "            this.content.style.height = `${this.props.contentHeight}px`;",
                    "        }",
                    "    }",
                    "",
                    "    _getNodeChildrenHeight(node) {",
                    "        if (!node) {",
                    "            return 0;",
                    "        }",
                    "",
                    "        const contentChildNodes = node.childNodes;",
                    "        const length = contentChildNodes.length;",
                    "",
                    "        if (!length) {",
                    "            return 0;",
                    "        }",
                    "",
                    "        const lastNode = contentChildNodes[length - 1];",
                    "",
                    "        return lastNode.offsetTop + lastNode.offsetHeight;",
                    "    }",
                    "",
                    "    _contentRefHandler = (ref) => {",
                    "        this.content = ref;",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, className, title, subTitle, extra, showTitleBullet, showHeadDivider, children, locale } = this.props;",
                    "        const { needMore, expand } = this.state;",
                    "",
                    "        const cardCls = classNames({",
                    "            [`${prefix}card`]: true,",
                    "            [`${prefix}card-show-divider`]: showHeadDivider,",
                    "            [`${prefix}card-hide-divider`]: !showHeadDivider,",
                    "        }, className);",
                    "",
                    "        const headCls = classNames({",
                    "            [`${prefix}card-head`]: true,",
                    "            [`${prefix}card-head-show-bullet`]: showTitleBullet,",
                    "        });",
                    "",
                    "        const others = pickOthers(Object.keys(Card.propTypes), this.props);",
                    "",
                    "        const headExtra = extra ? <div className={`${prefix}card-extra`}>{extra}</div> : null;",
                    "",
                    "        return (",
                    "            <div {...others} className={cardCls}>",
                    "                {",
                    "                    title ?",
                    "                        <div className={headCls}>",
                    "                            <div className={`${prefix}card-head-main`}>",
                    "                                <div className={`${prefix}card-title`}>",
                    "                                    {title}",
                    "                                    {subTitle ? <span className={`${prefix}card-subtitle`}>{subTitle}</span> : null}",
                    "                                </div>",
                    "                                {headExtra}",
                    "                            </div>",
                    "                        </div> :",
                    "                        null",
                    "                }",
                    "                <div className={`${prefix}card-body`}>",
                    "                    <div className={`${prefix}card-content`} ref={this._contentRefHandler}>",
                    "                        {children}",
                    "                    </div>",
                    "                    {",
                    "                        needMore ?",
                    "                            <div className={`${prefix}card-footer`} onClick={this.handleToggle}>",
                    "                                <Button text type=\"primary\">",
                    "                                    {expand ? locale.fold : locale.expand} <Icon type=\"arrow-down\" size=\"xs\" className={expand ? 'expand' : ''} />",
                    "                                </Button>",
                    "                            </div> :",
                    "                            null",
                    "                    }",
                    "                </div>",
                    "            </div>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Card from './card';",
                    "",
                    "export default ConfigProvider.config(Card, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('titlePrefixLine' in props) {",
                    "            deprecated('titlePrefixLine', 'showTitleBullet', 'Card');",
                    "            const { titlePrefixLine, ...others } = props;",
                    "            props = { showTitleBullet: titlePrefixLine, ...others };",
                    "        }",
                    "        if ('titleBottomLine' in props) {",
                    "            deprecated('titleBottomLine', 'showHeadDivider', 'Card');",
                    "            const { titleBottomLine, ...others } = props;",
                    "            props = { showHeadDivider: titleBottomLine, ...others };",
                    "        }",
                    "        if ('bodyHeight' in props) {",
                    "            deprecated('bodyHeight', 'contentHeight', 'Card');",
                    "            const { bodyHeight, ...others } = props;",
                    "            props = { contentHeight: bodyHeight, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/normalize\";",
                    "@import \"scss/mixin\";",
                    "",
                    "#{$card-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    & {",
                    "        min-width: $s-25;",
                    "        padding: 0 $card-padding-lr;",
                    "        border: $card-border-width $card-border-style $card-border-color;",
                    "        border-radius: $card-corner;",
                    "        box-shadow: $card-shadow;",
                    "        background: $card-background;",
                    "    }",
                    "",
                    "    &-head {",
                    "        background: $card-header-background;",
                    "",
                    "        &-show-bullet {",
                    "            #{$card-prefix}-title {",
                    "                padding-left: $card-title-padding-left;",
                    "            }",
                    "",
                    "            #{$card-prefix}-title:before {",
                    "                content: '';",
                    "                display: inline-block;",
                    "                height: $card-title-bullet-height;",
                    "                width: $card-title-bullet-width;",
                    "                background: $card-title-bullet-color;",
                    "                position: absolute;",
                    "                left: 0;",
                    "                top: calc(50% - #{$card-title-bullet-height} / 2);",
                    "            }",
                    "        }",
                    "",
                    "        &-main {",
                    "            position: relative;",
                    "            margin-top: $card-head-main-margin-top;",
                    "            margin-bottom: $card-head-main-margin-bottom;",
                    "            height: $card-head-main-height;",
                    "            line-height: $card-head-main-height;",
                    "        }",
                    "    }",
                    "",
                    "    &-title {",
                    "        display: inline-block;",
                    "        overflow: hidden;",
                    "        text-overflow: ellipsis;",
                    "        white-space: nowrap;",
                    "        max-width: 80%;",
                    "        height: 100%;",
                    "        color: $card-title-color;",
                    "        font-size: $card-title-font-size;",
                    "    }",
                    "",
                    "    &-subtitle {",
                    "        font-size: $card-sub-title-font-size;",
                    "        color: $card-sub-title-color;",
                    "        padding-left: $card-sub-title-padding-left;",
                    "    }",
                    "",
                    "    &-extra {",
                    "        position: absolute;",
                    "        right: 0;",
                    "        top: 0;",
                    "        height: 100%;",
                    "        font-size: $card-title-extra-font-size;",
                    "        color: $card-title-extra-color;",
                    "    }",
                    "",
                    "    &-body {",
                    "        padding-bottom: $card-body-padding-bottom;",
                    "    }",
                    "",
                    "    &-show-divider {",
                    "        #{$card-prefix}-head {",
                    "            border-bottom: $card-head-bottom-border-width $card-border-style $card-head-bottom-border-color;",
                    "        }",
                    "",
                    "        #{$card-prefix}-body {",
                    "            padding-top: $card-body-show-divider-padding-top;",
                    "        }",
                    "    }",
                    "",
                    "    &-hide-divider {",
                    "        #{$card-prefix}-body {",
                    "            padding-top: $card-body-hide-divider-padding-top;",
                    "        }",
                    "    }",
                    "",
                    "    &-content {",
                    "        overflow: hidden;",
                    "        transition: .3s all $ease-out;",
                    "        position: relative;",
                    "    }",
                    "",
                    "    &-footer {",
                    "        .#{$css-prefix}icon {",
                    "            transition: .3s all cubic-bezier(.645, .045, .355, 1);",
                    "",
                    "            &.expand {",
                    "                transform-origin: 50% 47%;",
                    "                transform: rotate(180deg);",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../button/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// card mixins",
                        "// --------------------------------------------------"
                    ]
                },
                "normalize.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$card-prefix} {",
                        "    *,",
                        "    *:before,",
                        "    *:after {",
                        "        box-sizing: border-box;",
                        "    }",
                        "",
                        "    &,",
                        "    &:before,",
                        "    &:after {",
                        "        box-sizing: border-box;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module card: 卡片",
                        "/// @tag Card",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $card-",
                        "/// @classPrefix {prefix}-card",
                        "/// @order {\"size/bounding\":10,\"size/divider\":11,\"size/header\":12,\"size/content\":13,\"size/footer\":14,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/header\":101,\"statement/normal/footer\":102}",
                        "////",
                        "",
                        "$card-prefix: '.' + $css-prefix + 'card';",
                        "",
                        "// animation",
                        "$ease-out: cubic-bezier(.23, 1, .32, 1);",
                        "$ease-in: cubic-bezier(.755, .05, .855, .06);",
                        "",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$card-corner: $corner-1 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$card-padding-lr: $s-4 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$card-border-width: $line-1 !default;",
                        "",
                        "/// padding (t)",
                        "/// @namespace size/divider",
                        "$card-head-padding-bottom: $s-3 !default;",
                        "",
                        "/// border width (b)",
                        "/// @namespace size/divider",
                        "$card-head-bottom-border-width: $line-1 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/header",
                        "$card-head-main-height: $s-10 !default;",
                        "",
                        "/// margin (t)",
                        "/// @namespace size/header",
                        "$card-head-main-margin-top: $s-2 !default;",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/header",
                        "$card-head-main-margin-bottom: $s-zero !default;",
                        "",
                        "/// title text",
                        "/// @namespace size/header",
                        "$card-title-font-size: $font-size-subhead !default;",
                        "",
                        "/// sub title text",
                        "/// @namespace size/header",
                        "$card-sub-title-font-size: $font-size-caption !default;",
                        "",
                        "/// extra text",
                        "/// @namespace size/header",
                        "$card-title-extra-font-size: $font-size-body-1 !default;",
                        "",
                        "/// line width",
                        "/// @namespace size/header",
                        "$card-title-bullet-width: $line-3 !default;",
                        "",
                        "/// line height",
                        "/// @namespace size/header",
                        "$card-title-bullet-height: $s-4 !default;",
                        "",
                        "/// title padding (l)",
                        "/// @namespace size/header",
                        "$card-title-padding-left: $s-2 !default;",
                        "",
                        "/// sub title padding (l)",
                        "/// @namespace size/header",
                        "$card-sub-title-padding-left: $s-2 !default;",
                        "",
                        "/// padding (t)",
                        "/// @namespace size/content",
                        "$card-body-show-divider-padding-top: $s-3 !default;",
                        "",
                        "/// padding (t)",
                        "/// @namespace size/content",
                        "$card-body-hide-divider-padding-top: $s-zero !default;",
                        "",
                        "/// padding (b)",
                        "/// @namespace size/content",
                        "$card-body-padding-bottom: $s-3 !default;",
                        "",
                        "/// more button height",
                        "/// @namespace size/footer",
                        "$card-more-btn-height: $s-4 !default;",
                        "",
                        "/// padding (t)",
                        "/// @namespace size/footer",
                        "$card-more-btn-padding-top: $s-2 !default;",
                        "",
                        "/// expand button size",
                        "/// @namespace size/footer",
                        "$card-more-btn-font-size: $font-size-body-1 !default;",
                        "",
                        "/// shadow",
                        "/// @namespace statement/normal/bounding",
                        "$card-shadow: $shadow-zero !default;",
                        "",
                        "/// border style",
                        "/// @namespace statement/normal/bounding",
                        "$card-border-style: $line-solid !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$card-border-color: $color-line1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$card-background: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/header",
                        "$card-header-background: $color-white !default;",
                        "",
                        "/// title color",
                        "/// @namespace statement/normal/header",
                        "$card-title-color: $color-text1-4 !default;",
                        "",
                        "/// sub title color",
                        "/// @namespace statement/normal/header",
                        "$card-sub-title-color: $color-text1-3 !default;",
                        "",
                        "/// extra color",
                        "/// @namespace statement/normal/header",
                        "$card-title-extra-color: $color-link-1 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/normal/header",
                        "$card-title-bullet-color: $color-brand1-6 !default;",
                        "",
                        "/// divider color",
                        "/// @namespace statement/normal/header",
                        "$card-head-bottom-border-color: $color-line1-1 !default;",
                        "",
                        "/// expand button color",
                        "/// @namespace statement/normal/footer",
                        "$card-more-btn-color: $color-link-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/footer",
                        "$card-more-btn-background: $color-white !default;"
                    ]
                }
            }
        },
        "cascader": {
            "cascader.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "import Menu from '../menu';",
                    "import { func, obj, dom } from '../util';",
                    "import CascaderMenu from './menu';",
                    "import CascaderMenuItem from './item';",
                    "",
                    "const { bindCtx } = func;",
                    "const { pickOthers } = obj;",
                    "const { addClass, removeClass, setStyle, getStyle } = dom;",
                    "",
                    "/**",
                    " * Cascader",
                    " */",
                    "export default class Cascader extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 数据源，结构可参考下方说明",
                    "         */",
                    "        dataSource: PropTypes.arrayOf(PropTypes.object),",
                    "        /**",
                    "         * （非受控）默认值",
                    "         */",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                    "        /**",
                    "         * （受控）当前值",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                    "        /**",
                    "         * 选中值改变时触发的回调函数",
                    "         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组",
                    "         * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点",
                    "         * @param {Object} extra 额外参数",
                    "         * @param {Array} extra.selectedPath 单选时选中的数据的路径",
                    "         * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中",
                    "         * @param {Object} extra.currentData 多选时当前操作的数据",
                    "         * @param {Array} extra.checkedData 多选时所有被选中的数据",
                    "         * @param {Array} extra.indeterminateData 多选时半选的数据",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置",
                    "         */",
                    "        defaultExpandedValue: PropTypes.arrayOf(PropTypes.string),",
                    "        /**",
                    "         * （受控）当前展开值",
                    "         */",
                    "        expandedValue: PropTypes.arrayOf(PropTypes.string),",
                    "        /**",
                    "         * 展开触发的方式",
                    "         */",
                    "        expandTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 展开时触发的回调函数",
                    "         * @param {Array} expandedValue 各列展开值的数组",
                    "         */",
                    "        onExpand: PropTypes.func,",
                    "        /**",
                    "         * 是否开启虚拟滚动",
                    "         */",
                    "        useVirtual: PropTypes.bool,",
                    "        /**",
                    "         * 是否多选",
                    "         */",
                    "        multiple: PropTypes.bool,",
                    "        /**",
                    "         * 单选时是否只能选中叶子节点",
                    "         */",
                    "        canOnlySelectLeaf: PropTypes.bool,",
                    "        /**",
                    "         * 多选时是否只能选中叶子节点",
                    "         */",
                    "        canOnlyCheckLeaf: PropTypes.bool,",
                    "        /**",
                    "         * 父子节点是否选中不关联",
                    "         */",
                    "        checkStrictly: PropTypes.bool,",
                    "        /**",
                    "         * 每列列表样式对象",
                    "         */",
                    "        listStyle: PropTypes.object,",
                    "        /**",
                    "         * 每列列表类名",
                    "         */",
                    "        listClassName: PropTypes.string,",
                    "        /**",
                    "         * 每列列表项渲染函数",
                    "         * @param {Object} data 数据",
                    "         * @return {ReactNode} 列表项内容",
                    "         */",
                    "        itemRender: PropTypes.func,",
                    "        /**",
                    "         * 异步加载数据函数",
                    "         * @param {Object} data 当前点击异步加载的数据",
                    "         * @param {Object} source 当前点击数据",
                    "         */",
                    "        loadData: PropTypes.func,",
                    "        searchValue: PropTypes.string,",
                    "        filteredPaths: PropTypes.array,",
                    "        filteredListStyle: PropTypes.object,",
                    "        resultRender: PropTypes.func",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        dataSource: [],",
                    "        defaultValue: null,",
                    "        canOnlySelectLeaf: false,",
                    "        canOnlyCheckLeaf: false,",
                    "        expandTriggerType: 'click',",
                    "        multiple: false,",
                    "        useVirtual: false,",
                    "        checkStrictly: false,",
                    "        itemRender: item => item.label",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        const { defaultValue, value, defaultExpandedValue, expandedValue, dataSource, multiple, checkStrictly, canOnlyCheckLeaf, loadData } = props;",
                    "",
                    "        this.updateCache(dataSource);",
                    "",
                    "        let normalizedValue = this.normalizeValue(typeof value === 'undefined' ? defaultValue : value);",
                    "        if (!loadData) {",
                    "            normalizedValue = normalizedValue.filter(v => this._v2n[v]);",
                    "        }",
                    "        // TODO loadData",
                    "        const realExpandedValue = typeof expandedValue === 'undefined' ?",
                    "            (",
                    "                typeof defaultExpandedValue === 'undefined' ? this.getExpandedValue(normalizedValue[0]) : this.normalizeValue(defaultExpandedValue)",
                    "            ) :",
                    "            this.normalizeValue(expandedValue);",
                    "        const st = {",
                    "            value: normalizedValue,",
                    "            expandedValue: realExpandedValue",
                    "        };",
                    "        if (multiple && !checkStrictly && !canOnlyCheckLeaf) {",
                    "            st.value = this.completeValue(props.dataSource, st.value);",
                    "        }",
                    "",
                    "        this.state = st;",
                    "",
                    "        this.lastExpandedValue = [...this.state.expandedValue];",
                    "",
                    "        bindCtx(this, ['handleMouseLeave', 'handleFocus', 'handleFold', 'getCascaderNode']);",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        this.setCascaderInnerWidth();",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        this.updateCache(nextProps.dataSource);",
                    "",
                    "        const state = {};",
                    "        if ('value' in nextProps) {",
                    "            state.value = this.normalizeValue(nextProps.value);",
                    "            if (!nextProps.loadData) {",
                    "                state.value = state.value.filter(v => this._v2n[v]);",
                    "            }",
                    "",
                    "            const { multiple, checkStrictly, canOnlyCheckLeaf } = nextProps;",
                    "            if (multiple && !checkStrictly && !canOnlyCheckLeaf) {",
                    "                state.value = this.completeValue(nextProps.dataSource, state.value);",
                    "            }",
                    "            if (!this.state.expandedValue.length && !('expandedValue' in nextProps)) {",
                    "                state.expandedValue = this.getExpandedValue(state.value[0]);",
                    "            }",
                    "        }",
                    "        if ('expandedValue' in nextProps) {",
                    "            state.expandedValue = this.normalizeValue(nextProps.expandedValue);",
                    "        }",
                    "        if (Object.keys(state).length) {",
                    "            this.setState(state);",
                    "        }",
                    "    }",
                    "",
                    "    componentDidUpdate() {",
                    "        this.setCascaderInnerWidth();",
                    "    }",
                    "",
                    "    getCascaderNode(ref) {",
                    "        this.cascader = ref;",
                    "        if (this.cascader) {",
                    "            this.cascaderInner = this.cascader.querySelector(`.${this.props.prefix}cascader-inner`);",
                    "        }",
                    "    }",
                    "",
                    "    setCascaderInnerWidth() {",
                    "        if (!this.cascaderInner) {",
                    "            return;",
                    "        }",
                    "        const menus = [].slice.call(this.cascaderInner.querySelectorAll(`.${this.props.prefix}cascader-menu-wrapper`));",
                    "        if (menus.length === 0) {",
                    "            return;",
                    "        }",
                    "",
                    "        const menusWidth = Math.ceil(menus.reduce((ret, menu) => {",
                    "            return ret + menu.offsetWidth;",
                    "        }, 0));",
                    "        if (getStyle(this.cascaderInner, 'width') !== menusWidth) {",
                    "            setStyle(this.cascaderInner, 'width', menusWidth);",
                    "        }",
                    "",
                    "        if (getStyle(this.cascader, 'display') === 'inline-block') {",
                    "            const hasRightBorderClass = `${this.props.prefix}has-right-border`;",
                    "            menus.forEach(menu => removeClass(menu, hasRightBorderClass));",
                    "            if (this.cascader.clientWidth > menusWidth) {",
                    "                addClass(menus[menus.length - 1], hasRightBorderClass);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    setCache(data, prefix = '0') {",
                    "        data.forEach((item, index) => {",
                    "            const { value, children } = item;",
                    "            const pos = `${prefix}-${index}`;",
                    "            this._v2n[value] = this._p2n[pos] = { ...item, pos, _source: item };",
                    "",
                    "            if (children && children.length) {",
                    "                this.setCache(children, pos);",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "    updateCache(dataSource) {",
                    "        this._v2n = {};",
                    "        this._p2n = {};",
                    "        this.setCache(dataSource);",
                    "    }",
                    "",
                    "    normalizeValue(value) {",
                    "        if (value) {",
                    "            if (Array.isArray(value)) {",
                    "                return value;",
                    "            }",
                    "",
                    "            return [value];",
                    "        }",
                    "",
                    "        return [];",
                    "    }",
                    "",
                    "    getExpandedValue(v) {",
                    "        if (!v || !this._v2n[v]) {",
                    "            return [];",
                    "        }",
                    "",
                    "        const pos = this._v2n[v].pos;",
                    "        if (pos.split('-').length === 2) {",
                    "            return [];",
                    "        }",
                    "",
                    "        const expandedMap = {};",
                    "        Object.keys(this._p2n).forEach(p => {",
                    "            if (this.isDescendantOrSelf(p, pos) && p !== pos) {",
                    "                expandedMap[this._p2n[p].value] = p;",
                    "            }",
                    "        });",
                    "",
                    "        return Object.keys(expandedMap).sort((prev, next) => {",
                    "            return expandedMap[prev].split('-').length - expandedMap[next].split('-').length;",
                    "        });",
                    "    }",
                    "",
                    "    completeValue(dataSource, value) {",
                    "        const filterValue = value.filter(v => typeof this._v2n[v] !== 'undefined');",
                    "        let flatValue = this.flatValue(filterValue);",
                    "",
                    "        const childChecked = child => flatValue.indexOf(child.value) > -1;",
                    "        const removeValue = child => flatValue.splice(flatValue.indexOf(child.value), 1);",
                    "        const addParentValue = (i, parent) => flatValue.splice(i, 0, parent.value);",
                    "        for (let i = 0; i < flatValue.length; i++) {",
                    "            const pos = this.getPos(flatValue[i]);",
                    "            const nums = pos.split('-');",
                    "            if (nums.length === 2) {",
                    "                break;",
                    "            }",
                    "            for (let j = nums.length - 2; j > 0; j--) {",
                    "                const parent = nums.slice(1, j + 1).reduce((ret, num) => ret.children[num], { children: dataSource });",
                    "                const parentChecked = parent.children.every(childChecked);",
                    "                if (parentChecked) {",
                    "                    parent.children.forEach(removeValue);",
                    "                    addParentValue(i, parent);",
                    "                } else {",
                    "                    break;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        const newValue = [];",
                    "        if (flatValue.length) {",
                    "            flatValue = flatValue.reverse();",
                    "            const ps = Object.keys(this._p2n);",
                    "            for (let i = 0; i < flatValue.length; i++) {",
                    "                const pos = this.getPos(flatValue[i]);",
                    "                for (let j = 0; j < ps.length; j++) {",
                    "                    if (this.isDescendantOrSelf(pos, ps[j])) {",
                    "                        newValue.push(this.getValue(ps[j]));",
                    "                        ps.splice(j, 1);",
                    "                        j--;",
                    "                    }",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        return newValue;",
                    "    }",
                    "",
                    "    flatValue(value) {",
                    "        const getDepth = v => this.getPos(v).split('-').length;",
                    "        const newValue = value.slice(0).sort((prev, next) => {",
                    "            return getDepth(prev) - getDepth(next);",
                    "        });",
                    "",
                    "        for (let i = 0; i < newValue.length; i++) {",
                    "            for (let j = 0; j < newValue.length; j++) {",
                    "                if (i !== j && this.isDescendantOrSelf(this.getPos(newValue[i]), this.getPos(newValue[j]))) {",
                    "                    newValue.splice(j, 1);",
                    "                    j--;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        return newValue;",
                    "    }",
                    "",
                    "    getValue(pos) {",
                    "        return this._p2n[pos] ? this._p2n[pos].value : null;",
                    "    }",
                    "",
                    "    getPos(value) {",
                    "        return this._v2n[value] ? this._v2n[value].pos : null;",
                    "    }",
                    "",
                    "    getData(value) {",
                    "        return value.map(v => this._v2n[v]);",
                    "    }",
                    "",
                    "    isDescendantOrSelf(currentPos, targetPos) {",
                    "        if (!currentPos || !targetPos) {",
                    "            return false;",
                    "        }",
                    "",
                    "        const currentNums = currentPos.split('-');",
                    "        const targetNums = targetPos.split('-');",
                    "",
                    "        return currentNums.length <= targetNums.length && currentNums.every((num, index) => {",
                    "            return num === targetNums[index];",
                    "        });",
                    "    }",
                    "",
                    "    isSiblingOrSelf(currentPos, targetPos) {",
                    "        const currentNums = currentPos.split('-').slice(0, -1);",
                    "        const targetNums = targetPos.split('-').slice(0, -1);",
                    "",
                    "        return currentNums.length === targetNums.length && currentNums.every((num, index) => {",
                    "            return num === targetNums[index];",
                    "        });",
                    "    }",
                    "",
                    "    processValue(value, v, checked) {",
                    "        const index = value.indexOf(v);",
                    "        if (checked && index === -1) {",
                    "            value.push(v);",
                    "        } else if (!checked && index > -1) {",
                    "            value.splice(index, 1);",
                    "        }",
                    "    }",
                    "",
                    "    handleSelect(v, canExpand) {",
                    "        if (!(this.props.canOnlySelectLeaf && canExpand) && this.state.value[0] !== v) {",
                    "            if (!('value' in this.props)) {",
                    "                this.setState({",
                    "                    value: [v]",
                    "                });",
                    "            }",
                    "",
                    "            if ('onChange' in this.props) {",
                    "                const data = this._v2n[v];",
                    "                const nums = data.pos.split('-');",
                    "                const selectedPath = nums.slice(1).reduce((ret, num, index) => {",
                    "                    const p = nums.slice(0, index + 2).join('-');",
                    "                    ret.push(this._p2n[p]);",
                    "                    return ret;",
                    "                }, []);",
                    "",
                    "                this.props.onChange(v, data, {",
                    "                    selectedPath",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        if (canExpand) {",
                    "            if (!this.props.canOnlySelectLeaf) {",
                    "                this.lastExpandedValue = this.state.expandedValue.slice(0, -1);",
                    "            }",
                    "        } else {",
                    "            this.lastExpandedValue = [...this.state.expandedValue];",
                    "        }",
                    "    }",
                    "",
                    "    handleCheck(v, checked) {",
                    "        const { checkStrictly, canOnlyCheckLeaf } = this.props;",
                    "        const value = [...this.state.value];",
                    "",
                    "        if (checkStrictly || canOnlyCheckLeaf) {",
                    "            this.processValue(value, v, checked);",
                    "        } else {",
                    "            const pos = this.getPos(v);",
                    "",
                    "            const ps = Object.keys(this._p2n);",
                    "            ps.forEach(p => {",
                    "                if (this.isDescendantOrSelf(pos, p)) {",
                    "                    this.processValue(value, this.getValue(p), checked);",
                    "                }",
                    "            });",
                    "",
                    "            let currentPos = pos;",
                    "            const nums = pos.split('-');",
                    "            for (let i = nums.length; i > 2; i--) {",
                    "                let parentChecked = true;",
                    "                for (let j = 0; j < ps.length; j++) {",
                    "                    const p = ps[j];",
                    "                    if (this.isSiblingOrSelf(currentPos, p)) {",
                    "                        const v = this.getValue(p);",
                    "                        if (value.indexOf(v) === -1) {",
                    "                            parentChecked = false;",
                    "                            break;",
                    "                        }",
                    "                    }",
                    "                }",
                    "                const parentPos = nums.slice(0, i - 1).join('-');",
                    "                this.processValue(value, this.getValue(parentPos), parentChecked);",
                    "",
                    "                currentPos = parentPos;",
                    "            }",
                    "        }",
                    "",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "",
                    "        if ('onChange' in this.props) {",
                    "            if (checkStrictly || canOnlyCheckLeaf) {",
                    "                const data = this.getData(value);",
                    "                this.props.onChange(value, data, {",
                    "                    checked,",
                    "                    currentData: this._v2n[v],",
                    "                    checkedData: data",
                    "                });",
                    "            } else {",
                    "                const flatValue = this.flatValue(value);",
                    "                const flatData = this.getData(flatValue);",
                    "                const checkedData = this.getData(value);",
                    "                const indeterminateValue = this.getIndeterminate(value);",
                    "                const indeterminateData = this.getData(indeterminateValue);",
                    "                this.props.onChange(flatValue, flatData, {",
                    "                    checked,",
                    "                    currentData: this._v2n[v],",
                    "                    checkedData,",
                    "                    indeterminateData",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        this.lastExpandedValue = [...this.state.expandedValue];",
                    "    }",
                    "",
                    "    handleExpand(value, level, canExpand, focusedFirstChild) {",
                    "        const { expandedValue } = this.state;",
                    "",
                    "        if (canExpand || expandedValue.length > level) {",
                    "            if (canExpand) {",
                    "                expandedValue.splice(level, expandedValue.length - level, value);",
                    "            } else {",
                    "                expandedValue.splice(level);",
                    "            }",
                    "",
                    "            const callback = () => {",
                    "                this.setExpandValue(expandedValue);",
                    "",
                    "                if (focusedFirstChild) {",
                    "                    const endExpandedValue = expandedValue[expandedValue.length - 1];",
                    "                    this.setState({",
                    "                        focusedValue: this._v2n[endExpandedValue].children[0].value",
                    "                    });",
                    "                }",
                    "            };",
                    "",
                    "            const { loadData } = this.props;",
                    "            if (canExpand && loadData) {",
                    "                const data = this._v2n[value];",
                    "                return loadData(data, data._source).then(callback);",
                    "            } else {",
                    "                callback();",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    handleMouseLeave() {",
                    "        this.setExpandValue([...this.lastExpandedValue]);",
                    "    }",
                    "",
                    "    setExpandValue(expandedValue) {",
                    "        if (!('expandedValue' in this.props)) {",
                    "            this.setState({",
                    "                expandedValue",
                    "            });",
                    "        }",
                    "",
                    "        if ('onExpand' in this.props) {",
                    "            this.props.onExpand(expandedValue);",
                    "        }",
                    "    }",
                    "",
                    "    handleFocus(focusedValue) {",
                    "        this.setState({",
                    "            focusedValue",
                    "        });",
                    "    }",
                    "",
                    "    handleFold() {",
                    "        const { expandedValue } = this.state;",
                    "        if (expandedValue.length > 0) {",
                    "            this.setExpandValue(expandedValue.slice(0, -1));",
                    "        }",
                    "",
                    "        this.setState({",
                    "            focusedValue: expandedValue[expandedValue.length - 1]",
                    "        });",
                    "    }",
                    "",
                    "    getIndeterminate(value) {",
                    "        const indeterminate = [];",
                    "",
                    "        const positions = this.flatValue(value).map(::this.getPos);",
                    "        positions.forEach(pos => {",
                    "            const nums = pos.split('-');",
                    "            for (let i = nums.length; i > 2; i--) {",
                    "                const parentPos = nums.slice(0, i - 1).join('-');",
                    "                const parentValue = this.getValue(parentPos);",
                    "                if (indeterminate.indexOf(parentValue) === -1) {",
                    "                    indeterminate.push(parentValue);",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "        return indeterminate;",
                    "    }",
                    "",
                    "    renderMenu(data, level) {",
                    "        const { prefix, multiple, useVirtual, checkStrictly, expandTriggerType, loadData,",
                    "            canOnlyCheckLeaf, listClassName, listStyle, itemRender } = this.props;",
                    "        const { value, expandedValue, focusedValue } = this.state;",
                    "",
                    "        return (",
                    "            <CascaderMenu key={level} prefix={prefix} useVirtual={useVirtual} className={listClassName} style={listStyle} focusedKey={focusedValue} onItemFocus={this.handleFocus}>",
                    "                {data.map(item => {",
                    "                    const disabled = !!item.disabled;",
                    "                    const canExpand = (!!item.children && !!item.children.length) || (!!loadData && !item.isLeaf);",
                    "                    const expanded = expandedValue[level] === item.value;",
                    "                    const props = {",
                    "                        prefix,",
                    "                        disabled,",
                    "                        canExpand,",
                    "                        expanded,",
                    "                        expandTriggerType,",
                    "                        onExpand: this.handleExpand.bind(this, item.value, level, canExpand),",
                    "                        onFold: this.handleFold",
                    "                    };",
                    "",
                    "                    if (multiple) {",
                    "                        props.checkable = !(canOnlyCheckLeaf && canExpand);",
                    "                        props.checked = value.indexOf(item.value) > -1;",
                    "                        props.indeterminate = (checkStrictly || canOnlyCheckLeaf) ? false : this.indeterminate.indexOf(item.value) > -1;",
                    "                        props.checkboxDisabled = !!item.checkboxDisabled;",
                    "                        props.onCheck = this.handleCheck.bind(this, item.value);",
                    "                    } else {",
                    "                        props.selected = value[0] === item.value;",
                    "                        props.onSelect = this.handleSelect.bind(this, item.value, canExpand);",
                    "                    }",
                    "",
                    "                    return (",
                    "                        <CascaderMenuItem key={item.value} {...props}>",
                    "                            {itemRender(item)}",
                    "                        </CascaderMenuItem>",
                    "                    );",
                    "                })}",
                    "            </CascaderMenu>",
                    "        );",
                    "    }",
                    "",
                    "    renderMenus() {",
                    "        const { dataSource } = this.props;",
                    "        const { expandedValue } = this.state;",
                    "",
                    "        const menus = [];",
                    "        let data = dataSource;",
                    "",
                    "        for (let i = 0; i <= expandedValue.length; i++) {",
                    "            if (!data) {",
                    "                break;",
                    "            }",
                    "",
                    "            menus.push(this.renderMenu(data, i));",
                    "",
                    "            let expandedItem;",
                    "            for (let j = 0; j < data.length; j++) {",
                    "                if (data[j].value === expandedValue[i]) {",
                    "                    expandedItem = data[j];",
                    "                    break;",
                    "                }",
                    "            }",
                    "            data = expandedItem ? expandedItem.children : null;",
                    "        }",
                    "",
                    "        return menus;",
                    "    }",
                    "",
                    "    renderFilteredItem(path) {",
                    "        const { prefix, resultRender, searchValue, multiple } = this.props;",
                    "        const { value } = this.state;",
                    "        const lastItem = path[path.length - 1];",
                    "",
                    "        let Item;",
                    "        const props = {",
                    "            key: lastItem.value,",
                    "            className: `${prefix}cascader-filtered-item`,",
                    "            disabled: path.some(item => item.disabled),",
                    "            children: resultRender(searchValue, path)",
                    "        };",
                    "",
                    "        if (multiple) {",
                    "            Item = Menu.CheckboxItem;",
                    "            const { checkStrictly, canOnlyCheckLeaf } = this.props;",
                    "            props.checked = value.indexOf(lastItem.value) > -1;",
                    "            props.indeterminate = !checkStrictly && !canOnlyCheckLeaf && this.indeterminate.indexOf(lastItem.value) > -1;",
                    "            props.checkboxDisabled = lastItem.checkboxDisabled;",
                    "            props.onChange = this.handleCheck.bind(this, lastItem.value);",
                    "        } else {",
                    "            Item = Menu.Item;",
                    "            props.selected = value[0] === lastItem.value;",
                    "            props.onSelect = this.handleSelect.bind(this, lastItem.value, false);",
                    "        }",
                    "",
                    "        return <Item {...props} />;",
                    "    }",
                    "",
                    "    renderFilteredList() {",
                    "        const { prefix, filteredListStyle, filteredPaths } = this.props;",
                    "        return (",
                    "            <Menu className={`${prefix}cascader-filtered-list`} style={filteredListStyle}>",
                    "                {filteredPaths.map(path => this.renderFilteredItem(path))}",
                    "            </Menu>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, className, expandTriggerType, multiple, dataSource,",
                    "            checkStrictly, canOnlyCheckLeaf, searchValue } = this.props;",
                    "        const others = pickOthers(Object.keys(Cascader.propTypes), this.props);",
                    "        const { value } = this.state;",
                    "",
                    "        const props = {",
                    "            className: cx({",
                    "                [`${prefix}cascader`]: true,",
                    "                multiple,",
                    "                [className]: !!className",
                    "            }),",
                    "            ref: 'cascader',",
                    "            ...others",
                    "        };",
                    "        if (expandTriggerType === 'hover') {",
                    "            props.onMouseLeave = this.handleMouseLeave;",
                    "        }",
                    "",
                    "        if (multiple && !checkStrictly && !canOnlyCheckLeaf) {",
                    "            this.indeterminate = this.getIndeterminate(value);",
                    "        }",
                    "",
                    "        return (",
                    "            <div {...props} ref={this.getCascaderNode}>",
                    "                {!searchValue ?",
                    "                    <div className={`${prefix}cascader-inner`}>",
                    "                        {dataSource && dataSource.length ? this.renderMenus() : null}",
                    "                    </div> :",
                    "                    this.renderFilteredList()",
                    "                }",
                    "            </div>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Cascader from './cascader';",
                    "",
                    "export default ConfigProvider.config(Cascader, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('expandTrigger' in props) {",
                    "            deprecated('expandTrigger', 'expandTriggerType', 'Cascader');",
                    "            const { expandTrigger, ...others } = props;",
                    "            props = { expandTriggerType: expandTrigger, ...others };",
                    "        }",
                    "",
                    "        if ('showItemCount' in props) {",
                    "            deprecated('showItemCount', 'listStyle | listClassName', 'Cascader');",
                    "        }",
                    "        if ('labelWidth' in props) {",
                    "            deprecated('labelWidth', 'listStyle | listClassName', 'Cascader');",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "item.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "import Menu from '../menu';",
                    "import Icon from '../icon';",
                    "import { func, obj, KEYCODE } from '../util';",
                    "",
                    "const { bindCtx } = func;",
                    "const { pickOthers } = obj;",
                    "",
                    "export default class CascaderMenuItem extends Component {",
                    "    static menuChildType = 'item';",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        className: PropTypes.string,",
                    "        disabled: PropTypes.bool,",
                    "        selected: PropTypes.bool,",
                    "        onSelect: PropTypes.func,",
                    "        expanded: PropTypes.bool,",
                    "        canExpand: PropTypes.bool,",
                    "        expandTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        onExpand: PropTypes.func,",
                    "        onFold: PropTypes.func,",
                    "        checkable: PropTypes.bool,",
                    "        checked: PropTypes.bool,",
                    "        indeterminate: PropTypes.bool,",
                    "        checkboxDisabled: PropTypes.bool,",
                    "        onCheck: PropTypes.func,",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            loading: false",
                    "        };",
                    "",
                    "        bindCtx(this, ['handleExpand', 'handleClick', 'handleMouseEnter', 'handleKeyDown', 'removeLoading']);",
                    "    }",
                    "",
                    "    addLoading() {",
                    "        this.setState({",
                    "            loading: true",
                    "        });",
                    "    }",
                    "",
                    "    removeLoading() {",
                    "        this.setState({",
                    "            loading: false",
                    "        });",
                    "    }",
                    "",
                    "    setLoadingIfNeed(p) {",
                    "        if (p && typeof p.then === 'function') {",
                    "",
                    "            this.addLoading();",
                    "            p.then(this.removeLoading).catch(this.removeLoading);",
                    "        }",
                    "    }",
                    "",
                    "    handleExpand(focusedFirstChild) {",
                    "        this.setLoadingIfNeed(this.props.onExpand(focusedFirstChild));",
                    "    }",
                    "",
                    "    handleClick() {",
                    "        this.handleExpand(false);",
                    "    }",
                    "",
                    "    handleMouseEnter() {",
                    "        this.handleExpand(false);",
                    "    }",
                    "",
                    "    handleKeyDown(e) {",
                    "        if (!this.props.disabled) {",
                    "            if (e.keyCode === KEYCODE.RIGHT || e.keyCODE === KEYCODE.ENTER) {",
                    "                if (this.props.canExpand) {",
                    "                    this.handleExpand(true);",
                    "                }",
                    "            } else if (e.keyCode === KEYCODE.LEFT || e.keyCode === KEYCODE.ESC) {",
                    "                this.props.onFold();",
                    "            } else if (e.keyCode === KEYCODE.SPACE) {",
                    "                this.handleExpand(false);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, className, disabled, selected, onSelect, expanded, canExpand, expandTriggerType,",
                    "            checkable, checked, indeterminate, checkboxDisabled, onCheck, children } = this.props;",
                    "        const others = pickOthers(Object.keys(CascaderMenuItem.propTypes), this.props);",
                    "        const { loading } = this.state;",
                    "",
                    "        const itemProps = {",
                    "            className: cx({",
                    "                [`${prefix}cascader-menu-item`]: true,",
                    "                [`${prefix}expanded`]: expanded,",
                    "                [className]: !!className",
                    "            }),",
                    "            disabled,",
                    "            onKeyDown: this.handleKeyDown,",
                    "            role: 'option',",
                    "            'aria-expanded': expanded,",
                    "            ...others",
                    "        };",
                    "        if (!disabled) {",
                    "            if (expandTriggerType === 'hover') {",
                    "                itemProps.onMouseEnter = this.handleMouseEnter;",
                    "            } else {",
                    "                itemProps.onClick = this.handleClick;",
                    "            }",
                    "        }",
                    "",
                    "        let Item;",
                    "        if (checkable) {",
                    "            Item = Menu.CheckboxItem;",
                    "            itemProps.checked = checked;",
                    "            itemProps.indeterminate = indeterminate;",
                    "            itemProps.checkboxDisabled = checkboxDisabled;",
                    "            itemProps.onChange = onCheck;",
                    "        } else {",
                    "            Item = Menu.Item;",
                    "            itemProps.selected = selected;",
                    "            itemProps.onSelect = onSelect;",
                    "        }",
                    "",
                    "        return (",
                    "            <Item {...itemProps}>",
                    "                {children}",
                    "                {canExpand ? (",
                    "                    loading ?",
                    "                        <Icon className={`${prefix}cascader-menu-icon-right ${prefix}cascader-menu-icon-loading`} type=\"loading\" /> :",
                    "                        <Icon className={`${prefix}cascader-menu-icon-right ${prefix}cascader-menu-icon-expand`} type=\"arrow-right\" />) :",
                    "                    null}",
                    "            </Item>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@import \"scss/variable\";",
                    "",
                    "$cascader-menu-border: $cascader-menu-border-width $line-solid $cascader-menu-border-color;",
                    "",
                    "#{$cascader-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    display: inline-block;",
                    "    overflow: auto;",
                    "    border: $cascader-menu-border;",
                    "    border-radius: $cascader-menu-border-radius;",
                    "",
                    "    &-inner {",
                    "        @include clearfix;",
                    "    }",
                    "    &-menu-wrapper {",
                    "        float: left;",
                    "        overflow: auto;",
                    "        width: $s-25;",
                    "        height: $s-8 * 6;",
                    "        & + & {",
                    "            border-left: $cascader-menu-border;",
                    "        }",
                    "    }",
                    "",
                    "    &-menu {",
                    "        position: relative;",
                    "        padding: 0;",
                    "        border: none;",
                    "        border-radius: 0;",
                    "        box-shadow: none;",
                    "        min-height: $s-8 * 6;",
                    "        &.#{$css-prefix}has-right-border {",
                    "            border-right: $cascader-menu-border;",
                    "        }",
                    "",
                    "        &-item.#{$css-prefix}expanded {",
                    "            color: $cascader-menu-item-expanded-color;",
                    "            background-color: $cascader-menu-item-expanded-background-color;",
                    "        }",
                    "",
                    "        &-icon-right {",
                    "            position: absolute;",
                    "            top: 0;",
                    "            right: 10px;",
                    "            color: $cascader-menu-icon-expand-color;",
                    "",
                    "            &:hover {",
                    "                color: $cascader-menu-icon-hover-expand-color;",
                    "            }",
                    "        }",
                    "",
                    "        &-icon-expand.#{$css-prefix}icon {",
                    "            @include icon-size($cascader-menu-icon-expand-size);",
                    "        }",
                    "",
                    "        &-icon-loading.#{$css-prefix}icon {",
                    "            @include icon-size($icon-xs);",
                    "        }",
                    "",
                    "        &-item.#{$css-prefix}expanded &-icon-right {",
                    "            color: $cascader-menu-icon-hover-expand-color;",
                    "        }",
                    "",
                    "        &-item.#{$css-prefix}expanded &-icon-loading {",
                    "            color: $color-brand1-6;",
                    "        }",
                    "    }",
                    "",
                    "    &-filtered-list {",
                    "        height: $s-8 * 6;",
                    "        padding: 0;",
                    "        border: none;",
                    "        border-radius: 0;",
                    "        box-shadow: none;",
                    "        overflow: auto;",
                    "",
                    "        .#{$css-prefix}menu-item-inner {",
                    "            overflow: visible;",
                    "        }",
                    "    }",
                    "",
                    "    &-filtered-item em {",
                    "        color: $color-brand1-6;",
                    "        font-style: normal;",
                    "    }",
                    "}"
                ]
            },
            "menu.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import { findDOMNode } from 'react-dom';",
                    "import Menu from '../menu';",
                    "import VirtualList from '../virtual-list';",
                    "",
                    "export default class CascaderMenu extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        className: PropTypes.string,",
                    "        useVirtual: PropTypes.bool,",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    componentDidMount() {",
                    "        this.scrollToSelectedItem();",
                    "    }",
                    "",
                    "    scrollToSelectedItem () {",
                    "        const { prefix, useVirtual, children } = this.props;",
                    "        if (!children || children.length === 0) {",
                    "            return;",
                    "        }",
                    "        const selectedIndex = children.findIndex(item => !!item.props.checked || !!item.props.selected || !!item.props.expanded);",
                    "",
                    "        if (selectedIndex === -1) {",
                    "            return;",
                    "        }",
                    "",
                    "        if (useVirtual) {",
                    "            const instance = this.refs.virtual.getInstance();",
                    "            setTimeout(() => instance.scrollTo(selectedIndex), 0);",
                    "        } else {",
                    "            const itemSelector = `.${prefix}menu-item`;",
                    "            const menu = findDOMNode(this.refs.menu);",
                    "            const targetItem = menu.querySelectorAll(itemSelector)[selectedIndex];",
                    "            if (targetItem) {",
                    "                menu.scrollTop = targetItem.offsetTop - Math.floor((menu.clientHeight / targetItem.clientHeight - 1) / 2) * targetItem.clientHeight;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    renderMenu (items, ref, props) {",
                    "        return <Menu ref={ref} role=\"listbox\" {...props}>{items}</Menu>;",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, useVirtual, className, style, children, ...others } = this.props;",
                    "        const menuProps = {",
                    "            labelToggleChecked: false,",
                    "            className: `${prefix}cascader-menu`,",
                    "            ...others",
                    "        };",
                    "        return (",
                    "            <div ref=\"menu\" className={`${prefix}cascader-menu-wrapper ${className ? className : ''}`} style={style}>",
                    "                {",
                    "                    useVirtual ?",
                    "                        <VirtualList ref=\"virtual\"",
                    "                            itemsRenderer={(items, ref) => this.renderMenu(items, ref, menuProps)}>",
                    "                            {children}",
                    "                        </VirtualList> :",
                    "                        this.renderMenu(children, undefined, menuProps)",
                    "                }",
                    "            </div>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../menu/style.js';",
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module cascader: 级联",
                        "/// @tag Cascader",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $cascader-",
                        "/// @classPrefix {prefix}-cascader",
                        "/// @order {\"size/menu\":10,\"size/icon arrow\":11,\"statement/normal\":10,\"statement/normal/menu\":100,\"statement/normal/icon arrow\":101,\"statement/expanded\":11,\"statement/expanded/icon arrow\":110,\"statement/expanded/menu item\":111}",
                        "////",
                        "",
                        "$cascader-prefix: \".#{$css-prefix}cascader\";",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// border width",
                        "/// @namespace size/menu",
                        "$cascader-menu-border-width: $line-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon arrow",
                        "$cascader-menu-icon-expand-size: $icon-xxs !default;",
                        "",
                        "// Statement:normal",
                        "// ----------------------------------------",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/menu",
                        "$cascader-menu-border-color: $color-line1-2 !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/menu",
                        "$cascader-menu-border-radius: $corner-1 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/icon arrow",
                        "$cascader-menu-icon-expand-color: $color-text1-3 !default;",
                        "",
                        "// Statement:hover",
                        "// ----------------------------------------",
                        "",
                        "/// color",
                        "/// @namespace statement/expanded/icon arrow",
                        "$cascader-menu-icon-hover-expand-color: $color-text1-4 !default;",
                        "",
                        "// Statement:expanded",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/expanded/menu item",
                        "$cascader-menu-item-expanded-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/expanded/menu item",
                        "$cascader-menu-item-expanded-background-color: $color-fill1-2 !default;"
                    ]
                }
            }
        },
        "cascader-select": {
            "cascader-select.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Select from '../select';",
                    "import Cascader from '../cascader';",
                    "import Menu from '../menu';",
                    "import { func, obj, dom } from '../util';",
                    "",
                    "const { bindCtx } = func;",
                    "const { pickOthers } = obj;",
                    "const { getStyle } = dom;",
                    "",
                    "/**",
                    " * CascaderSelect",
                    " */",
                    "export default class CascaderSelect extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 选择框大小",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 选择框占位符",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 是否有下拉箭头",
                    "         */",
                    "        hasArrow: PropTypes.bool,",
                    "        /**",
                    "         * 是否有边框",
                    "         */",
                    "        hasBorder: PropTypes.bool,",
                    "        /**",
                    "         * 是否有清除按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 自定义内联 label",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 是否只读，只读模式下可以展开弹层但不能选",
                    "         */",
                    "        readOnly: PropTypes.bool,",
                    "        /**",
                    "         * 数据源，结构可参考下方说明",
                    "         */",
                    "        dataSource: PropTypes.arrayOf(PropTypes.object),",
                    "        /**",
                    "         * （非受控）默认值",
                    "         */",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                    "        /**",
                    "         * （受控）当前值",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                    "        /**",
                    "         * 选中值改变时触发的回调函数",
                    "         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组",
                    "         * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点",
                    "         * @param {Object} extra 额外参数",
                    "         * @param {Array} extra.selectedPath 单选时选中的数据的路径",
                    "         * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中",
                    "         * @param {Object} extra.currentData 多选时当前操作的数据",
                    "         * @param {Array} extra.checkedData 多选时所有被选中的数据",
                    "         * @param {Array} extra.indeterminateData 多选时半选的数据",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置",
                    "         */",
                    "        defaultExpandedValue: PropTypes.arrayOf(PropTypes.string),",
                    "        /**",
                    "         * 展开触发的方式",
                    "         */",
                    "        expandTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        onExpand: PropTypes.func,",
                    "        /**",
                    "         * 是否开启虚拟滚动",
                    "         */",
                    "        useVirtual: PropTypes.bool,",
                    "        /**",
                    "         * 是否多选",
                    "         */",
                    "        multiple: PropTypes.bool,",
                    "        /**",
                    "         * 是否选中即发生改变, 该属性仅在单选模式下有效",
                    "         */",
                    "        changeOnSelect: PropTypes.bool,",
                    "        /**",
                    "         * 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效",
                    "         */",
                    "        canOnlyCheckLeaf: PropTypes.bool,",
                    "        /**",
                    "         * 父子节点是否选中不关联",
                    "         */",
                    "        checkStrictly: PropTypes.bool,",
                    "        /**",
                    "         * 每列列表样式对象",
                    "         */",
                    "        listStyle: PropTypes.object,",
                    "        /**",
                    "         * 每列列表类名",
                    "         */",
                    "        listClassName: PropTypes.string,",
                    "        /**",
                    "         * 选择框单选时展示结果的自定义渲染函数",
                    "         * @param {Array} label 选中路径的文本数组",
                    "         * @return {ReactNode} 渲染在选择框中的内容",
                    "         * @default 单选时：labelPath => labelPath.join(' / ')；多选时：labelPath => labelPath[labelPath.length - 1]",
                    "         */",
                    "        displayRender: PropTypes.func,",
                    "        /**",
                    "         * 是否显示搜索框",
                    "         */",
                    "        showSearch: PropTypes.bool,",
                    "        /**",
                    "         * 自定义搜索函数",
                    "         * @param {String} searchValue 搜索的关键字",
                    "         * @param {Array} path 节点路径",
                    "         * @return {Boolean} 是否匹配",
                    "         * @default 根据路径所有节点的文本值模糊匹配",
                    "         */",
                    "        filter: PropTypes.func,",
                    "        /**",
                    "         * 搜索结果自定义渲染函数",
                    "         * @param {String} searchValue 搜索的关键字",
                    "         * @param {Array} path 匹配到的节点路径",
                    "         * @return {ReactNode} 渲染的内容",
                    "         * @default 按照节点文本 a / b / c 的模式渲染",
                    "         */",
                    "        resultRender: PropTypes.func,",
                    "        /**",
                    "         * 搜索结果列表是否和选择框等宽",
                    "         */",
                    "        resultAutoWidth: PropTypes.bool,",
                    "        /**",
                    "         * 无数据时显示内容",
                    "         */",
                    "        notFoundContent: PropTypes.node,",
                    "        /**",
                    "         * 异步加载数据函数",
                    "         * @param {Object} data 当前点击异步加载的数据",
                    "         */",
                    "        loadData: PropTypes.func,",
                    "        /**",
                    "         * 自定义下拉框头部",
                    "         */",
                    "        header: PropTypes.node,",
                    "        /**",
                    "         * 自定义下拉框底部",
                    "         */",
                    "        footer: PropTypes.node,",
                    "        /**",
                    "         * 初始下拉框是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 当前下拉框是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 下拉框显示或关闭时触发事件的回调函数",
                    "         * @param {Boolean} visible 是否显示",
                    "         * @param {String} type 触发显示关闭的操作类型",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 下拉框自定义样式对象",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 下拉框样式自定义类名",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 下拉框挂载的容器节点",
                    "         */",
                    "        popupContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),",
                    "        /**",
                    "         * 透传到 Popup 的属性对象",
                    "         */",
                    "        popupProps: PropTypes.object",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        size: 'medium',",
                    "        disabled: false,",
                    "        hasArrow: true,",
                    "        hasBorder: true,",
                    "        hasClear: false,",
                    "        dataSource: [],",
                    "        defaultValue: null,",
                    "        expandTriggerType: 'click',",
                    "        onExpand: () => {},",
                    "        useVirtual: false,",
                    "        multiple: false,",
                    "        changeOnSelect: false,",
                    "        canOnlyCheckLeaf: false,",
                    "        checkStrictly: false,",
                    "        showSearch: false,",
                    "        filter: (searchValue, path) => {",
                    "            return path.some(item => item.label.indexOf(searchValue) > -1);",
                    "        },",
                    "        resultRender: (searchValue, path) => {",
                    "            const parts = [];",
                    "            path.forEach((item, i) => {",
                    "                const others = item.label.split(searchValue);",
                    "                others.forEach((other, j) => {",
                    "                    if (other) {",
                    "                        parts.push(other);",
                    "                    }",
                    "                    if (j < others.length - 1) {",
                    "                        parts.push(<em key={`${i}-${j}`}>{searchValue}</em>);",
                    "                    }",
                    "                });",
                    "                if (i < path.length - 1) {",
                    "                    parts.push(' / ');",
                    "                }",
                    "            });",
                    "            return <span>{parts}</span>;",
                    "        },",
                    "        resultAutoWidth: true,",
                    "        notFoundContent: 'Not Found',",
                    "        defaultVisible: false,",
                    "        onVisibleChange: () => {},",
                    "        popupProps: {}",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        this.state = {",
                    "            value: this.normalizeValue('value' in props ? props.value : props.defaultValue),",
                    "            searchValue: '',",
                    "            visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible",
                    "        };",
                    "",
                    "        bindCtx(this, [",
                    "            'handleVisibleChange', 'handleAfterOpen', 'handleChange', 'handleClear', 'handleRemove',",
                    "            'handleSearch', 'getPopup'",
                    "        ]);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        const st = {};",
                    "",
                    "        if ('value' in nextProps) {",
                    "            st.value = this.normalizeValue(nextProps.value);",
                    "        }",
                    "        if ('visible' in nextProps) {",
                    "            st.visible = nextProps.visible;",
                    "        }",
                    "",
                    "        if (Object.keys(st).length) {",
                    "            this.setState(st);",
                    "        }",
                    "    }",
                    "",
                    "    normalizeValue(value) {",
                    "        if (value) {",
                    "            if (Array.isArray(value)) {",
                    "                return value;",
                    "            }",
                    "",
                    "            return [value];",
                    "        }",
                    "",
                    "        return [];",
                    "    }",
                    "",
                    "    updateCache(dataSource) {",
                    "        this._v2n = {};",
                    "        this._p2n = {};",
                    "        const loop = (data, prefix = '0') => data.forEach((item, index) => {",
                    "            const { value, children } = item;",
                    "            const pos = `${prefix}-${index}`;",
                    "            this._v2n[value] = this._p2n[pos] = { ...item, pos };",
                    "",
                    "            if (children && children.length) {",
                    "                loop(children, pos);",
                    "            }",
                    "        });",
                    "",
                    "        loop(dataSource);",
                    "    }",
                    "",
                    "    flatValue(value) {",
                    "        const getDepth = v => {",
                    "            const pos = this.getPos(v);",
                    "            if (!pos) {",
                    "                return 0;",
                    "            }",
                    "            return pos.split('-').length;",
                    "        };",
                    "        const newValue = value.slice(0).sort((prev, next) => {",
                    "            return getDepth(prev) - getDepth(next);",
                    "        });",
                    "",
                    "        for (let i = 0; i < newValue.length; i++) {",
                    "            for (let j = 0; j < newValue.length; j++) {",
                    "                if (i !== j && this.isDescendantOrSelf(this.getPos(newValue[i]), this.getPos(newValue[j]))) {",
                    "                    newValue.splice(j, 1);",
                    "                    j--;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        return newValue;",
                    "    }",
                    "",
                    "    isDescendantOrSelf(currentPos, targetPos) {",
                    "        if (!currentPos || !targetPos) {",
                    "            return false;",
                    "        }",
                    "",
                    "        const currentNums = currentPos.split('-');",
                    "        const targetNums = targetPos.split('-');",
                    "",
                    "        return currentNums.length <= targetNums.length && currentNums.every((num, index) => {",
                    "            return num === targetNums[index];",
                    "        });",
                    "    }",
                    "",
                    "    getValue(pos) {",
                    "        return this._p2n[pos] ? this._p2n[pos].value : null;",
                    "    }",
                    "",
                    "    getPos(value) {",
                    "        return this._v2n[value] ? this._v2n[value].pos : null;",
                    "    }",
                    "",
                    "    getData(value) {",
                    "        return value.map(v => this._v2n[v]);",
                    "    }",
                    "",
                    "    getLabelPath(data) {",
                    "        const nums = data.pos.split('-');",
                    "        return nums.slice(1).reduce((ret, num, index) => {",
                    "            const p = nums.slice(0, index + 2).join('-');",
                    "            ret.push(this._p2n[p].label);",
                    "            return ret;",
                    "        }, []);",
                    "    }",
                    "",
                    "    getSignleData(value) {",
                    "        if (!value.length) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const data = this._v2n[value];",
                    "        if (!data) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const labelPath = this.getLabelPath(data);",
                    "        const displayRender = this.props.displayRender || (labels => labels.join(' / '));",
                    "",
                    "        return {",
                    "            ...data,",
                    "            label: displayRender(labelPath, data)",
                    "        };",
                    "    }",
                    "",
                    "    getMultipleData(value) {",
                    "        const { checkStrictly, canOnlyCheckLeaf, displayRender } = this.props;",
                    "        let data = this.getData(checkStrictly || canOnlyCheckLeaf ? value : this.flatValue(value));",
                    "        if (displayRender) {",
                    "            data = data.map(item => {",
                    "                const labelPath = this.getLabelPath(item);",
                    "",
                    "                return {",
                    "                    ...item,",
                    "                    label: displayRender(labelPath, item)",
                    "                };",
                    "            });",
                    "        }",
                    "",
                    "        return data;",
                    "    }",
                    "",
                    "    getIndeterminate(value) {",
                    "        const indeterminate = [];",
                    "",
                    "        const positions = value.map(this.getPos.bind(this));",
                    "        positions.forEach(pos => {",
                    "            const nums = pos.split('-');",
                    "            for (let i = nums.length; i > 2; i--) {",
                    "                const parentPos = nums.slice(0, i - 1).join('-');",
                    "                const parentValue = this.getValue(parentPos);",
                    "                if (indeterminate.indexOf(parentValue) === -1) {",
                    "                    indeterminate.push(parentValue);",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "        return indeterminate;",
                    "    }",
                    "",
                    "    completeValue(value) {",
                    "        const newValue = [];",
                    "",
                    "        const flatValue = this.flatValue(value).reverse();",
                    "        const ps = Object.keys(this._p2n);",
                    "        for (let i = 0; i < ps.length; i++) {",
                    "            for (let j = 0; j < flatValue.length; j++) {",
                    "                const v = flatValue[j];",
                    "                if (this.isDescendantOrSelf(this.getPos(v), ps[i])) {",
                    "                    newValue.push(this.getValue(ps[i]));",
                    "                    ps.splice(i, 1);",
                    "                    i--;",
                    "                    break;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        return newValue;",
                    "    }",
                    "",
                    "    isLeaf(data) {",
                    "        return !(data.children && data.children.length || (!!this.props.loadData && !data.isLeaf));",
                    "    }",
                    "",
                    "    handleVisibleChange(visible, type) {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onVisibleChange(visible, type);",
                    "    }",
                    "",
                    "    getPopup(ref) {",
                    "        this.popup = ref;",
                    "        if (typeof this.props.popupProps.ref === 'function') {",
                    "            this.props.popupProps.ref(ref);",
                    "        }",
                    "    }",
                    "",
                    "    handleAfterOpen() {",
                    "        if (!this.popup) {",
                    "            return;",
                    "        }",
                    "",
                    "        const { prefix, popupProps } = this.props;",
                    "        const dropDownNode = this.popup.getInstance().overlay.getInstance().getContentNode();",
                    "        const cascaderNode = dropDownNode.querySelector(`.${prefix}cascader`);",
                    "        if (cascaderNode) {",
                    "            this.cascaderHeight = getStyle(cascaderNode, 'height');",
                    "        }",
                    "",
                    "        if (typeof popupProps.afterOpen === 'function') {",
                    "            popupProps.afterOpen();",
                    "        }",
                    "    }",
                    "",
                    "    handleChange(value, data, extra) {",
                    "        const { multiple, changeOnSelect, onChange } = this.props;",
                    "        const { visible, searchValue } = this.state;",
                    "",
                    "        const st = {};",
                    "        if (!multiple && (!changeOnSelect || this.isLeaf(data) || !!searchValue)) {",
                    "            this.handleVisibleChange(!visible, 'fromCascader');",
                    "        }",
                    "        if (!('value' in this.props)) {",
                    "            st.value = value;",
                    "        }",
                    "        if (!multiple && searchValue) {",
                    "            st.searchValue = '';",
                    "        }",
                    "        if (Object.keys(st).length) {",
                    "            this.setState(st);",
                    "        }",
                    "",
                    "        if (onChange) {",
                    "            onChange(value, data, extra);",
                    "        }",
                    "    }",
                    "",
                    "    handleClear() {",
                    "        // 单选时点击清空按钮",
                    "        const { hasClear, multiple, treeCheckable } = this.props;",
                    "        if (hasClear && (!multiple || !treeCheckable)) {",
                    "            if (!('value' in this.props)) {",
                    "                this.setState({",
                    "                    value: []",
                    "                });",
                    "            }",
                    "",
                    "            this.props.onChange(null, null);",
                    "        }",
                    "    }",
                    "",
                    "    handleRemove(currentData) {",
                    "        const { value: currentValue } = currentData;",
                    "        let value;",
                    "",
                    "        const { multiple, checkStrictly, onChange } = this.props;",
                    "        if (multiple) {",
                    "            value = [...this.state.value];",
                    "            value.splice(value.indexOf(currentValue), 1);",
                    "",
                    "            if (this.props.onChange) {",
                    "                const data = this.getData(value);",
                    "                const checked = false;",
                    "",
                    "                if (checkStrictly) {",
                    "                    this.props.onChange(value, data, {",
                    "                        checked,",
                    "                        currentData,",
                    "                        checkedData: data",
                    "                    });",
                    "                } else {",
                    "                    const checkedValue = this.completeValue(value);",
                    "                    const checkedData = this.getData(checkedValue);",
                    "                    const indeterminateValue = this.getIndeterminate(value);",
                    "                    const indeterminateData = this.getData(indeterminateValue);",
                    "                    this.props.onChange(value, data, {",
                    "                        checked,",
                    "                        currentData,",
                    "                        checkedData,",
                    "                        indeterminateData",
                    "                    });",
                    "                }",
                    "            }",
                    "        } else {",
                    "            value = [];",
                    "            onChange(null, null);",
                    "        }",
                    "",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    handleSearch(searchValue) {",
                    "        this.setState({",
                    "            searchValue",
                    "        });",
                    "    }",
                    "",
                    "    getPath(pos) {",
                    "        const items = [];",
                    "",
                    "        const nums = pos.split('-');",
                    "        if (nums === 2) {",
                    "            items.push(this._p2n[pos]);",
                    "        } else {",
                    "            for (let i = 1; i < nums.length; i++) {",
                    "                const p = nums.slice(0, i + 1).join('-');",
                    "                items.push(this._p2n[p]);",
                    "            }",
                    "        }",
                    "",
                    "        return items;",
                    "    }",
                    "",
                    "    filterItems() {",
                    "        const { multiple, changeOnSelect, canOnlyCheckLeaf, filter } = this.props;",
                    "        const { searchValue } = this.state;",
                    "        let items = Object.keys(this._p2n).map(p => this._p2n[p]);",
                    "        if ((!multiple && !changeOnSelect) || (multiple && canOnlyCheckLeaf)) {",
                    "            items = items.filter(item => !item.children || !item.children.length);",
                    "        }",
                    "",
                    "        return items",
                    "            .map(item => this.getPath(item.pos))",
                    "            .filter(path => filter(searchValue, path));",
                    "    }",
                    "",
                    "    renderNotFound() {",
                    "        const { prefix, notFoundContent } = this.props;",
                    "",
                    "        return (",
                    "            <Menu className={`${prefix}cascader-select-not-found`}>",
                    "                <Menu.Item>{notFoundContent}</Menu.Item>",
                    "            </Menu>",
                    "        );",
                    "    }",
                    "",
                    "    renderCascader() {",
                    "        const { dataSource } = this.props;",
                    "        if (dataSource.length === 0) {",
                    "            return this.renderNotFound();",
                    "        }",
                    "",
                    "        const { searchValue } = this.state;",
                    "        let filteredPaths = [];",
                    "        if (searchValue) {",
                    "            filteredPaths = this.filterItems();",
                    "            if (filteredPaths.length === 0) {",
                    "                return this.renderNotFound();",
                    "            }",
                    "        }",
                    "",
                    "        const {",
                    "            multiple,",
                    "            useVirtual,",
                    "            changeOnSelect,",
                    "            checkStrictly,",
                    "            canOnlyCheckLeaf,",
                    "            defaultExpandedValue,",
                    "            expandTriggerType,",
                    "            onExpand,",
                    "            listStyle,",
                    "            listClassName,",
                    "            loadData,",
                    "            showSearch,",
                    "            resultRender,",
                    "            readOnly",
                    "        } = this.props;",
                    "        const { value } = this.state;",
                    "",
                    "        const props = {",
                    "            dataSource,",
                    "            value,",
                    "            multiple,",
                    "            useVirtual,",
                    "            canOnlySelectLeaf: !changeOnSelect,",
                    "            checkStrictly,",
                    "            canOnlyCheckLeaf,",
                    "            defaultExpandedValue,",
                    "            expandTriggerType,",
                    "            onExpand,",
                    "            listStyle,",
                    "            listClassName,",
                    "            loadData",
                    "        };",
                    "        if (!readOnly) {",
                    "            props.onChange = this.handleChange;",
                    "        }",
                    "        if (showSearch) {",
                    "            props.searchValue = searchValue;",
                    "            props.filteredPaths = filteredPaths;",
                    "            props.resultRender = resultRender;",
                    "            props.filteredListStyle = { height: this.cascaderHeight };",
                    "        }",
                    "",
                    "        return <Cascader {...props} />;",
                    "    }",
                    "",
                    "    renderPopupContent() {",
                    "        const { prefix, header, footer } = this.props;",
                    "        return (",
                    "            <div className={`${prefix}cascader-select-dropdown`}>",
                    "                {header}",
                    "                {this.renderCascader()}",
                    "                {footer}",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            size,",
                    "            hasArrow,",
                    "            hasBorder,",
                    "            hasClear,",
                    "            label,",
                    "            readOnly,",
                    "            placeholder,",
                    "            dataSource,",
                    "            disabled,",
                    "            multiple,",
                    "            className,",
                    "            showSearch,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupContainer,",
                    "            popupProps",
                    "        } = this.props;",
                    "        const {",
                    "            value,",
                    "            searchValue,",
                    "            visible",
                    "        } = this.state;",
                    "        const others = pickOthers(Object.keys(CascaderSelect.propTypes), this.props);",
                    "        const popupContent = this.renderPopupContent();",
                    "",
                    "        this.updateCache(dataSource);",
                    "",
                    "        const props = {",
                    "            prefix,",
                    "            className,",
                    "            size,",
                    "            placeholder,",
                    "            disabled,",
                    "            hasArrow,",
                    "            hasBorder,",
                    "            hasClear,",
                    "            label,",
                    "            readOnly,",
                    "            autoWidth: false,",
                    "            mode: multiple ? 'multiple' : 'single',",
                    "            value: multiple ? this.getMultipleData(value) : this.getSignleData(value),",
                    "            onChange: this.handleClear,",
                    "            onRemove: this.handleRemove,",
                    "            visible,",
                    "            onVisibleChange: this.handleVisibleChange,",
                    "            showSearch,",
                    "            searchValue,",
                    "            onSearch: this.handleSearch,",
                    "            popupContent,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupContainer,",
                    "            popupProps",
                    "        };",
                    "",
                    "        if (showSearch) {",
                    "            props.popupProps = {",
                    "                ...popupProps,",
                    "                ref: this.getPopup,",
                    "                afterOpen: this.handleAfterOpen",
                    "            };",
                    "            props.autoWidth = showSearch && !!searchValue;",
                    "        }",
                    "",
                    "        return <Select {...props} {...others} />;",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import CascaderSelect from './cascader-select';",
                    "",
                    "export default ConfigProvider.config(CascaderSelect, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('shape' in props) {",
                    "            deprecated('shape', 'hasBorder', 'CascaderSelect');",
                    "            const { shape, ...others } = props;",
                    "            props = { hasBorder: shape !== 'arrow-only', ...others };",
                    "        }",
                    "",
                    "        if ('container' in props) {",
                    "            deprecated('container', 'popupContainer', 'CascaderSelect');",
                    "            const { container, ...others } = props;",
                    "            props = { popupContainer: container, ...others };",
                    "        }",
                    "",
                    "        if ('expandTrigger' in props) {",
                    "            deprecated('expandTrigger', 'expandTriggerType', 'CascaderSelect');",
                    "            const { expandTrigger, ...others } = props;",
                    "            props = { expandTriggerType: expandTrigger, ...others };",
                    "        }",
                    "",
                    "        if ('showItemCount' in props) {",
                    "            deprecated('showItemCount', 'listStyle | listClassName', 'CascaderSelect');",
                    "        }",
                    "        if ('labelWidth' in props) {",
                    "            deprecated('labelWidth', 'listStyle | listClassName', 'CascaderSelect');",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});",
                    ""
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$cascader-select-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    &-dropdown {",
                    "        @include box-sizing;",
                    "",
                    "        border: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "        border-radius: $popup-local-corner;",
                    "        box-shadow: $popup-local-shadow;",
                    "",
                    "        .#{$css-prefix}cascader {",
                    "            display: block;",
                    "            border: none;",
                    "            box-shadow: none;",
                    "        }",
                    "    }",
                    "",
                    "    &-not-found {",
                    "        padding: 0;",
                    "        border: none;",
                    "        box-shadow: none;",
                    "        overflow: auto;",
                    "        color: $color-text1-2;",
                    "",
                    "        .#{$css-prefix}menu-item:hover {",
                    "            color: $color-text1-2;",
                    "            /* TODO */",
                    "            background: $color-white;",
                    "            cursor: default;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../select/style.js';",
                    "import '../cascader/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module cascader-select: 级联选择",
                        "/// @tag CascaderSelect",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $cascader-select-",
                        "/// @classPrefix {prefix}-cascader-select",
                        "/// @order {}",
                        "////",
                        "",
                        "// cascader-select variables",
                        "// --------------------------------------------------",
                        "",
                        "// unconfigurable",
                        "$cascader-select-prefix: \".#{$css-prefix}cascader-select\";"
                    ]
                }
            }
        },
        "checkbox": {
            "checkbox-group.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import { obj } from '../util';",
                    "import Checkbox from './checkbox';",
                    "",
                    "const { pickOthers } = obj;",
                    "",
                    "/** Checkbox.Group */",
                    "class CheckboxGroup extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内敛样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 整体禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`",
                    "         */",
                    "        dataSource: PropTypes.arrayOf(PropTypes.any),",
                    "        /**",
                    "         * 被选中的值列表",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 默认被选中的值列表",
                    "         */",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 通过子元素方式设置内部 checkbox",
                    "         */",
                    "        children: PropTypes.arrayOf(PropTypes.element),",
                    "        /**",
                    "         * 选中值改变时的事件",
                    "         * @param {Array} value 选中项列表",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "",
                    "        /**",
                    "         * 子项目的排列方式",
                    "         * - hoz: 水平排列 (default)",
                    "         * - ver: 垂直排列",
                    "         */",
                    "        itemDirection: PropTypes.oneOf([",
                    "            'hoz',",
                    "            'ver',",
                    "        ]),",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        dataSource: [],",
                    "        onChange: () => {",
                    "        },",
                    "        prefix: 'next-',",
                    "        itemDirection: 'hoz',",
                    "    }",
                    "",
                    "    static childContextTypes = {",
                    "        onChange: PropTypes.func,",
                    "        __group__: PropTypes.bool,",
                    "        selectedValue: PropTypes.array,",
                    "        disabled: PropTypes.bool",
                    "    }",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        let value = [];",
                    "        if ('value' in props) {",
                    "            value = props.value;",
                    "        } else if ('defaultValue' in props) {",
                    "            value = props.defaultValue;",
                    "        }",
                    "        if (!Array.isArray(value)) {",
                    "            if (value === null || value === undefined) {",
                    "                value = [];",
                    "            } else {",
                    "                value = [value];",
                    "            }",
                    "        }",
                    "        this.state = {",
                    "            value: [...value],",
                    "        };",
                    "",
                    "        this.onChange = this.onChange.bind(this);",
                    "    }",
                    "",
                    "    getChildContext() {",
                    "        return {",
                    "            __group__: true,",
                    "            onChange: this.onChange,",
                    "            selectedValue: this.state.value,",
                    "            disabled: this.props.disabled",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            let {value} = nextProps;",
                    "            if (!Array.isArray(value)) {",
                    "                if (value === null || value === undefined) {",
                    "                    value = [];",
                    "                } else {",
                    "                    value = [value];",
                    "                }",
                    "            }",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onChange(currentValue, e) {",
                    "        const {value} = this.state;",
                    "        const index = value.indexOf(currentValue);",
                    "        const valTemp = [...value];",
                    "",
                    "        if (index === -1) {",
                    "            valTemp.push(currentValue);",
                    "        } else {",
                    "            valTemp.splice(index, 1);",
                    "        }",
                    "",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({value: valTemp});",
                    "        }",
                    "        this.props.onChange(valTemp, e);",
                    "    }",
                    "",
                    "    render() {",
                    "        const { className, style, prefix, disabled, itemDirection } = this.props;",
                    "        const others = pickOthers(CheckboxGroup.propTypes, this.props);",
                    "",
                    "        // 如果内嵌标签跟dataSource同时存在，以内嵌标签为主",
                    "        let children;",
                    "        if (this.props.children) {",
                    "            children = this.props.children;",
                    "        } else {",
                    "            children = this.props.dataSource.map((item, index) => {",
                    "                let option = item;",
                    "                if (typeof item !== 'object') {",
                    "                    option = {",
                    "                        label: item,",
                    "                        value: item,",
                    "                        disabled",
                    "                    };",
                    "                }",
                    "                const checked = this.state.value && this.state.value.indexOf(option.value) > -1;",
                    "",
                    "                return (",
                    "                    <Checkbox key={index}",
                    "                        value={option.value}",
                    "                        checked={checked}",
                    "                        disabled={disabled || option.disabled}",
                    "                        label={option.label}",
                    "                    />",
                    "                );",
                    "            });",
                    "        }",
                    "",
                    "        const cls = classnames({",
                    "            [`${prefix}checkbox-group`]: true,",
                    "            [`${prefix}checkbox-group-${itemDirection}`]: true,",
                    "            [className]: !!className,",
                    "            disabled",
                    "        });",
                    "",
                    "        return <span {...others} className={cls} style={style}>{children}</span>;",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(CheckboxGroup);"
                ]
            },
            "checkbox.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import UIState from '../mixin-ui-state';",
                    "import ConfigProvider from '../config-provider';",
                    "import Icon from '../icon';",
                    "import { obj, func } from '../util';",
                    "",
                    "const noop = func.noop;",
                    "function isChecked(selectedValue, value) {",
                    "    return selectedValue.indexOf(value) > -1;",
                    "}",
                    "/**",
                    " * Checkbox",
                    " * @order 1",
                    " */",
                    "class Checkbox extends UIState {",
                    "    static displayName = 'Checkbox';",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * checkbox id, 挂载在input上",
                    "         */",
                    "        id: PropTypes.string,",
                    "        /**",
                    "         * 自定义内敛样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 选中状态",
                    "         */",
                    "        checked: PropTypes.bool,",
                    "        /**",
                    "         * 默认选中状态",
                    "         */",
                    "        defaultChecked: PropTypes.bool,",
                    "        /**",
                    "         * 禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 通过属性配置label，",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性",
                    "         */",
                    "        indeterminate: PropTypes.bool,",
                    "        /**",
                    "         *  Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性",
                    "         */",
                    "        defaultIndeterminate: PropTypes.bool,",
                    "        /**",
                    "         * 状态变化时触发的事件",
                    "         * @param {Boolean} checked 是否选中",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 鼠标进入enter事件",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onMouseEnter: PropTypes.func,",
                    "        /**",
                    "         * 鼠标离开Leave事件",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onMouseLeave: PropTypes.func,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        defaultChecked: false,",
                    "        defaultIndeterminate: false,",
                    "        onChange: noop,",
                    "        onMouseEnter: noop,",
                    "        onMouseLeave: noop,",
                    "        prefix: 'next-',",
                    "    }",
                    "",
                    "    static contextTypes = {",
                    "        onChange: PropTypes.func,",
                    "        __group__: PropTypes.bool,",
                    "        selectedValue: PropTypes.array,",
                    "        disabled: PropTypes.bool,",
                    "        prefix: PropTypes.string,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props);",
                    "",
                    "        let checked, indeterminate;",
                    "        if (context.__group__) {",
                    "            indeterminate = false;",
                    "            checked = isChecked(context.selectedValue, props.value);",
                    "        } else {",
                    "            if ('checked' in props) {",
                    "                checked = props.checked;",
                    "            } else {",
                    "                checked = props.defaultChecked;",
                    "            }",
                    "",
                    "            if ('indeterminate' in props) {",
                    "                indeterminate = props.indeterminate;",
                    "            } else {",
                    "                indeterminate = props.defaultIndeterminate;",
                    "            }",
                    "        }",
                    "",
                    "        this.state = {",
                    "            checked,",
                    "            indeterminate,",
                    "        };",
                    "",
                    "        this.disabled =  props.disabled || (context.__group__ && ('disabled' in context) && context.disabled);",
                    "        this.onChange = this.onChange.bind(this);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps, nextContext) {",
                    "        if (nextContext.__group__) {",
                    "            if ('selectedValue' in nextContext) {",
                    "                this.setState({",
                    "                    checked: isChecked(nextContext.selectedValue, nextProps.value)",
                    "                });",
                    "            }",
                    "            this.disabled = nextProps.disabled || (",
                    "                'disabled' in nextContext &&",
                    "                nextContext.disabled",
                    "            );",
                    "        } else {",
                    "            if ('checked' in nextProps) {",
                    "                this.setState({",
                    "                    checked: nextProps.checked",
                    "                });",
                    "            }",
                    "            if ('indeterminate' in nextProps) {",
                    "                this.setState({",
                    "                    indeterminate: nextProps.indeterminate",
                    "                });",
                    "            }",
                    "            this.disabled = nextProps.disabled;",
                    "        }",
                    "    }",
                    "    shouldComponentUpdate(nextProps, nextState, nextContext) {",
                    "        const { shallowEqual } = obj;",
                    "        return !shallowEqual(this.props, nextProps) ||",
                    "            !shallowEqual(this.state, nextState) ||",
                    "            !shallowEqual(this.context, nextContext);",
                    "    }",
                    "",
                    "    onChange(e) {",
                    "        const checked = e.target.checked;",
                    "        const value = this.props.value;",
                    "        if (this.disabled) {",
                    "            return;",
                    "        }",
                    "        if (this.context.__group__) {",
                    "            this.context.onChange(value, e);",
                    "        } else {",
                    "            if (!('checked' in this.props)) {",
                    "                this.setState({",
                    "                    checked: checked",
                    "                });",
                    "            }",
                    "",
                    "            if (!('indeterminate' in this.props)) {",
                    "                this.setState({",
                    "                    indeterminate: false",
                    "                });",
                    "            }",
                    "            this.props.onChange(checked, e);",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const { id, className, children, style, label, onMouseEnter, onMouseLeave, rtl,",
                    "            ...otherProps } = this.props;",
                    "        const checked = !!this.state.checked;",
                    "        const disabled = this.disabled;",
                    "        const indeterminate = !!this.state.indeterminate;",
                    "        const prefix = this.context.prefix || this.props.prefix;",
                    "",
                    "        const others = obj.pickOthers(Checkbox.propTypes, otherProps);",
                    "        const othersData = obj.pickAttrsWith(others, 'data-');",
                    "",
                    "",
                    "",
                    "        let childInput = (<input",
                    "            {...obj.pickOthers(Checkbox.propTypes, otherProps)}",
                    "            id={id}",
                    "            disabled={disabled}",
                    "            checked={checked}",
                    "            type=\"checkbox\"",
                    "            onChange={this.onChange}",
                    "            aria-checked={indeterminate ? 'mixed' : checked}",
                    "            className={`${prefix}checkbox-input`}",
                    "        />);",
                    "",
                    "        // disable 无状态操作",
                    "        if (!disabled) {",
                    "            childInput = this.getStateElement(childInput);",
                    "        }",
                    "        const cls = classnames({",
                    "            [`${prefix}checkbox-wrapper`]: true,",
                    "            [className]: !!className,",
                    "            checked,",
                    "            disabled,",
                    "            indeterminate,",
                    "            [this.getStateClassName()]: true",
                    "        });",
                    "        const labelCls = `${prefix}checkbox-label`;",
                    "        const type = indeterminate ? 'semi-select' : 'select';",
                    "",
                    "        return (",
                    "            <label",
                    "                {...othersData}",
                    "                className={cls}",
                    "                style={style}",
                    "                onMouseEnter={onMouseEnter}",
                    "                onMouseLeave={onMouseLeave}",
                    "            >",
                    "                <span className={`${prefix}checkbox`}>",
                    "                    <span className={`${prefix}checkbox-inner`}>",
                    "                        <Icon type={type} size=\"xs\" className={indeterminate ? 'zoomIn' : ''} />",
                    "                    </span>",
                    "                    {childInput}",
                    "                </span>",
                    "                {[label, children].map((item, i) => (item ? <span key={i} className={labelCls}>{item}</span> : null))}",
                    "            </label>);",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Checkbox);"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Checkbox from './checkbox';",
                    "import Group from './checkbox-group';",
                    "",
                    "Checkbox.Group = Group;",
                    "",
                    "export default Checkbox;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import '../core/index-noreset';",
                    "@import 'scss/variable';",
                    "",
                    "/* stylelint-disable max-nesting-depth */",
                    "",
                    "#{$checkbox-prefix}-wrapper {",
                    "    @include box-sizing;",
                    "",
                    "    #{$checkbox-prefix} {",
                    "        display: inline-block;",
                    "        position: relative;",
                    "        line-height: 1;",
                    "        vertical-align: middle;",
                    "    }",
                    "",
                    "    input[type=\"checkbox\"] {",
                    "        opacity: 0;",
                    "        position: absolute;",
                    "        top: 0;",
                    "        left: 0;",
                    "        width: $checkbox-size;",
                    "        height: $checkbox-size;",
                    "        margin: 0;",
                    "    }",
                    "",
                    "    #{$checkbox-prefix}-inner {",
                    "        display: block;",
                    "        width: $checkbox-size;",
                    "        height: $checkbox-size;",
                    "        background: $checkbox-bg-color;",
                    "        border-radius: $checkbox-border-radius;",
                    "        border: $checkbox-border-width solid $checkbox-border-color;",
                    "        transition: ease all .3s 0s;",
                    "        text-align: left; /* 防止继承父级 */",
                    "        box-shadow: $checkbox-shadow;",
                    "        /* box-sizing: content-box; */",
                    "",
                    "        > .#{$css-prefix}icon {",
                    "            transform: scale(0);",
                    "            position: absolute;",
                    "            top: 0;",
                    "            opacity: 0;",
                    "            line-height: $checkbox-size;",
                    "            transition: all .3s cubic-bezier(.78, .14, .15, .86);",
                    "            color: $checkbox-checked-circle-color;",
                    "            left: ($checkbox-size - $checkbox-circle-size) / 2;",
                    "            @if ($checkbox-circle-size == 12) {",
                    "                margin-top: 1px;",
                    "            }",
                    "            @include icon-size($checkbox-circle-size, 0);",
                    "        }",
                    "        > .#{$css-prefix}icon::before {",
                    "            vertical-align: top;",
                    "            margin-top: 0;",
                    "        }",
                    "    }",
                    "",
                    "    &.checked {",
                    "        #{$checkbox-prefix}-inner {",
                    "            border-color: $checkbox-checked-border-color;",
                    "            background-color: $checkbox-checked-bg-color;",
                    "",
                    "            &:hover,",
                    "            &.hovered {",
                    "                border-color: $checkbox-checked-border-color;",
                    "            }",
                    "            > .#{$css-prefix}icon {",
                    "                opacity: 1;",
                    "                transform: scale(1);",
                    "                @include icon-size($checkbox-circle-size, 0); /* font-size < 12px的时候进行覆盖。 */",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.indeterminate {",
                    "        #{$checkbox-prefix}-inner {",
                    "            border-color: $checkbox-checked-border-color;",
                    "            background-color: $checkbox-checked-bg-color;",
                    "",
                    "            &:hover,",
                    "            &.hovered {",
                    "                border-color: $checkbox-checked-border-color;",
                    "            }",
                    "            > .#{$css-prefix}icon {",
                    "                opacity: 1;",
                    "                transform: scale3d(1, 1, 1);",
                    "                @include icon-size($checkbox-circle-size, 0); /* font-size < 12px的时候进行覆盖。 */",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.disabled {",
                    "        input[type=\"checkbox\"] {",
                    "            cursor: not-allowed;",
                    "        }",
                    "        #{$checkbox-prefix}-inner {",
                    "            border-color: $checkbox-disabled-border-color;",
                    "            background: $checkbox-disabled-bg-color;",
                    "        }",
                    "        &.checked,",
                    "        &.indeterminate {",
                    "            #{$checkbox-prefix}-inner {",
                    "                &:hover, &.hovered {",
                    "                    border-color: $checkbox-disabled-border-color;",
                    "                }",
                    "",
                    "                > .#{$css-prefix}icon {",
                    "                    color: $checkbox-disabled-circle-color;",
                    "                    opacity: 1;",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &:not(.disabled):hover,",
                    "    &.hovered,",
                    "    &.focused {",
                    "        #{$checkbox-prefix}-inner {",
                    "            border-color: $checkbox-hovered-border-color;",
                    "            background-color: $checkbox-hovered-bg-color;",
                    "        }",
                    "    }",
                    "",
                    "    &.indeterminate:not(.disabled):hover,",
                    "    &.indeterminate:not(.disabled).hovered,",
                    "    &.indeterminate.focused,",
                    "    &.checked:not(.disabled):hover,",
                    "    &.checked:not(.disabled).hovered,",
                    "    &.checked.focused {",
                    "        #{$checkbox-prefix}-inner {",
                    "            border-color: $checkbox-checked-hovered-border-color;",
                    "            background-color: $checkbox-checked-hovered-bg-color;",
                    "",
                    "            > .#{$css-prefix}icon {",
                    "                color: $checkbox-checked-hovered-circle-color;",
                    "                opacity: 1;",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$checkbox-prefix}-group {",
                    "    #{$checkbox-prefix}-wrapper {",
                    "        margin-left: 8px;",
                    "        &:first-child {",
                    "            margin-left: 0;",
                    "        }",
                    "    }",
                    "",
                    "    &-ver {",
                    "        #{$checkbox-prefix}-wrapper {",
                    "            display: block;",
                    "            margin-left: 0;",
                    "            margin-bottom: 8px;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$checkbox-prefix}-label {",
                    "    font-size: $checkbox-font-size;",
                    "    vertical-align: middle;",
                    "    margin: 0;",
                    "    margin-left: $checkbox-margin-left;",
                    "    line-height: 1;",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../animate/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module checkbox: 复选框",
                        "/// @tag checkbox",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $checkbox-",
                        "/// @classPrefix {prefix}-checkbox",
                        "/// @order {\"size/bounding\":10,\"size/icon\":11,\"size/label\":12,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/hover\":11,\"statement/hover/bounding\":110,\"statement/checked\":12,\"statement/checked/bounding\":120,\"statement/checked/icon\":121,\"statement/disabled\":13,\"statement/disabled/bounding\":130,\"statement/disabled/icon\":131,\"statement/checked hover\":14,\"statement/checked hover/bounding\":140,\"statement/checked hover/icon\":141}",
                        "////",
                        "",
                        "@charset \"UTF-8\";",
                        "",
                        "$checkbox-prefix: '.#{$css-prefix}checkbox';",
                        "",
                        "/// size",
                        "/// @namespace size/bounding",
                        "$checkbox-size: $s-4 !default;",
                        "/// radius",
                        "/// @namespace size/bounding",
                        "$checkbox-border-radius: $corner-1 !default;",
                        "/// border-width",
                        "/// @namespace size/bounding",
                        "$checkbox-border-width: $line-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$checkbox-circle-size: $icon-xxs !default;",
                        "",
                        "/// shadow",
                        "/// @namespace size/bounding",
                        "$checkbox-shadow: $shadow-zero !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$checkbox-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$checkbox-hovered-border-color: $color-brand1-6 !default;",
                        "/// border",
                        "/// @namespace statement/checked/bounding",
                        "$checkbox-checked-border-color: $color-transparent !default;",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$checkbox-disabled-border-color: $color-line1-1 !default;",
                        "/// border",
                        "/// @namespace statement/checked hover/bounding",
                        "$checkbox-checked-hovered-border-color: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/checked/icon",
                        "$checkbox-checked-circle-color: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/disabled/icon",
                        "$checkbox-disabled-circle-color: $color-text1-1 !default;",
                        "/// text",
                        "/// @namespace statement/checked hover/icon",
                        "$checkbox-checked-hovered-circle-color: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$checkbox-bg-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/checked/bounding",
                        "$checkbox-checked-bg-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$checkbox-hovered-bg-color: $color-brand1-1 !default;",
                        "/// background",
                        "/// @namespace statement/checked hover/bounding",
                        "$checkbox-checked-hovered-bg-color: $color-brand1-9 !default;",
                        "/// background",
                        "/// @namespace statement/disabled/bounding",
                        "$checkbox-disabled-bg-color: $color-fill1-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/label",
                        "$checkbox-font-size: $font-size-body-1 !default;",
                        "/// margin(L)",
                        "/// @namespace size/label",
                        "$checkbox-margin-left: $s-1 !default;"
                    ]
                }
            }
        },
        "collapse": {
            "collapse.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import {func, obj} from '../util';",
                    "import Panel from './panel';",
                    "",
                    "/** Collapse */",
                    "class Collapse extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 组件接受行内样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 使用数据模型构建",
                    "         */",
                    "        dataSource: PropTypes.array,",
                    "        /**",
                    "         * 默认展开keys",
                    "         */",
                    "        defaultExpandedKeys: PropTypes.array,",
                    "        /**",
                    "         * 受控展开keys",
                    "         */",
                    "        expandedKeys: PropTypes.array,",
                    "        /**",
                    "         * 展开状态发升变化时候的回调",
                    "         */",
                    "        onExpand: PropTypes.func,",
                    "        /**",
                    "         * 所有禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 扩展class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 手风琴模式，一次只能打开一个",
                    "         */",
                    "        accordion: PropTypes.bool,",
                    "        children: PropTypes.node,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        accordion: false,",
                    "        prefix: 'next-',",
                    "        onExpand: func.noop,",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        let expandedKeys;",
                    "        if ('expandedKeys' in props) {",
                    "            expandedKeys = props.expandedKeys;",
                    "        } else {",
                    "            expandedKeys = props.defaultExpandedKeys;",
                    "        }",
                    "",
                    "        this.state = {",
                    "            expandedKeys: typeof expandedKeys === 'undefined' ? [] : expandedKeys",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('expandedKeys' in nextProps) {",
                    "            this.setState({",
                    "                expandedKeys: typeof nextProps.expandedKeys === 'undefined' ? [] : nextProps.expandedKeys",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onItemClick(key) {",
                    "        let expandedKeys = this.state.expandedKeys;",
                    "        if (this.props.accordion) {",
                    "            expandedKeys = expandedKeys[0] === key ? [] : [key];",
                    "        } else {",
                    "            expandedKeys = [...expandedKeys];",
                    "            const index = expandedKeys.indexOf(key);",
                    "            const isExpanded = index > -1;",
                    "            if (isExpanded) {",
                    "                expandedKeys.splice(index, 1);",
                    "            } else {",
                    "                expandedKeys.push(key);",
                    "            }",
                    "        }",
                    "        this.setExpandedKey(expandedKeys);",
                    "    }",
                    "",
                    "    getProps(item, index, key) {",
                    "        const expandedKeys = this.state.expandedKeys;",
                    "        const {title} = item;",
                    "        let disabled = this.props.disabled;",
                    "",
                    "        if (!disabled) {",
                    "            disabled = item.disabled;",
                    "        }",
                    "",
                    "        let isExpanded = false;",
                    "",
                    "",
                    "        if (this.props.accordion) {",
                    "            isExpanded = expandedKeys[0] === key;",
                    "        } else {",
                    "            isExpanded = expandedKeys.some(expandedKey => {",
                    "                if (expandedKey === null || expandedKey === undefined || key === null || key === undefined) {",
                    "                    return false;",
                    "                }",
                    "",
                    "                if (expandedKey === key || expandedKey.toString() === key.toString()) {",
                    "                    return true;",
                    "                }",
                    "                return false;",
                    "            });",
                    "        }",
                    "",
                    "        return {",
                    "            key,",
                    "            title,",
                    "            isExpanded,",
                    "            disabled,",
                    "            onClick: disabled ? null : () => {",
                    "                this.onItemClick(key);",
                    "                if ('onClick' in item) {",
                    "                    item.onClick(key);",
                    "                }",
                    "            },",
                    "        };",
                    "    }",
                    "",
                    "    getItemsByDataSource() {",
                    "        const {props} = this;",
                    "        const {dataSource} = props;",
                    "        // 是否有dataSource.item传入过key",
                    "        const hasKeys = dataSource.some(item => 'key' in item);",
                    "",
                    "        return dataSource.map((item, index) => {",
                    "            // 传入过key就用item.key 没传入则统一使用index为key",
                    "            const key = hasKeys ? item.key :  `${index}`;",
                    "            return (<Panel {...this.getProps(item, index, key)} key={key}>",
                    "                {item.content}",
                    "            </Panel>);",
                    "        });",
                    "    }",
                    "",
                    "    getItemsByChildren() {",
                    "        // 是否有child传入过key",
                    "        const allKeys = React.Children.map(this.props.children, child => child.key);",
                    "        const hasKeys = Boolean(allKeys.length);",
                    "",
                    "        return React.Children.map(this.props.children, (child, index) => {",
                    "            if (child && typeof child.type === 'function' && child.type.isNextPanel) {",
                    "                // 传入过key就用child.key 没传入则统一使用index为key",
                    "                const key = hasKeys ? child.key : `${index}`;",
                    "                return React.cloneElement(child, this.getProps(child.props, index, key));",
                    "            } else {",
                    "                return child;",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "    setExpandedKey(expandedKeys) {",
                    "        if (!('expandedKeys' in this.props)) {",
                    "            this.setState({expandedKeys});",
                    "        }",
                    "        this.props.onExpand(this.props.accordion ? expandedKeys[0] : expandedKeys);",
                    "    }",
                    "",
                    "    render() {",
                    "        const {prefix, className, style, disabled, dataSource} = this.props;",
                    "        const collapseClassName = classNames({",
                    "            [`${prefix}collapse`]: true,",
                    "            [`${prefix}collapse-disabled`]: disabled,",
                    "            [className]: Boolean(className),",
                    "        });",
                    "",
                    "        const others = obj.pickOthers(Collapse.propTypes, this.props);",
                    "        return (",
                    "            <div className={collapseClassName} style={style} {...others}>",
                    "                {dataSource ? this.getItemsByDataSource() : this.getItemsByChildren()}",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Collapse);"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Collapse from './collapse';",
                    "import Panel from './panel';",
                    "",
                    "Collapse.Panel = Panel;",
                    "",
                    "export default Collapse;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "/* put your code here */",
                    "#{$collapse-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    border: $collapse-border-width solid $collapse-border-color;",
                    "    border-radius: $collapse-border-corner;",
                    "    overflow: hidden;",
                    "    &-panel {",
                    "        &:not(:first-child) {",
                    "            border-top: $collapse-title-border-width solid $collapse-panel-border-color;",
                    "        }",
                    "    }",
                    "",
                    "    #{$collapse-prefix}-panel-icon {",
                    "        position: absolute;",
                    "        color: $collapse-icon-color;",
                    "        transition: transform .3s;",
                    "        left: $collapse-icon-margin-l;",
                    "        margin-top: -2px;",
                    "",
                    "        @include icon-size($collapse-icon-size, 0, 0, rotate(90deg));",
                    "    }",
                    "",
                    "    &-panel-title {",
                    "        position: relative;",
                    "        line-height: $collapse-title-height;",
                    "        background: $collapse-title-bg-color;",
                    "        font-size: $collapse-title-font-size;",
                    "        font-weight: $collapse-title-font-weight;",
                    "        color: $collapse-title-font-color;",
                    "        cursor: pointer;",
                    "        padding: $collapse-title-padding-tb 0 $collapse-title-padding-tb $collapse-icon-margin-r + $collapse-icon-margin-l + $collapse-icon-size;",
                    "        transition: background .2s ease;",
                    "",
                    "        &:hover {",
                    "            background: $collapse-title-hover-bg-color;",
                    "        }",
                    "    }",
                    "",
                    "    &-panel-content {",
                    "        overflow: hidden;",
                    "        height: 0;",
                    "        padding: 0 $collapse-content-padding-x;",
                    "        background: $collapse-content-bg-color;",
                    "        font-size: $collapse-content-font-size;",
                    "        color: $collapse-content-color;",
                    "        transition: all .3s cubic-bezier(.23, 1, .32, 1);",
                    "        opacity: 0;",
                    "    }",
                    "",
                    "    &-panel-expanded {",
                    "        > #{$collapse-prefix}-panel-content {",
                    "            display: block;",
                    "            padding: $collapse-content-padding-y $collapse-content-padding-x;",
                    "            height: auto;",
                    "            opacity: 1;",
                    "        }",
                    "",
                    "        #{$collapse-prefix}-panel-icon {",
                    "            @include icon-size($collapse-icon-size, 0, 0, rotate(180deg));",
                    "        }",
                    "    }",
                    "",
                    "    &-disabled {",
                    "        border-color: $collapse-disabled-border-color;",
                    "    }",
                    "",
                    "    &-panel-disabled {",
                    "        overflow: hidden;",
                    "        &:not(:first-child) {",
                    "            border-color: $collapse-disabled-border-color;",
                    "        }",
                    "",
                    "        > #{$collapse-prefix}-panel-title {",
                    "            cursor: not-allowed;",
                    "            color: $collapse-title-font-disabled-color;",
                    "            background: $collapse-title-disabled-bg-color;",
                    "        }",
                    "",
                    "        #{$collapse-prefix}-panel-icon {",
                    "            color: $collapse-title-font-disabled-color;",
                    "        }",
                    "",
                    "        &:hover {",
                    "            color: $collapse-title-font-disabled-color;",
                    "            background: $collapse-title-disabled-bg-color;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "panel.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import Icon from '../icon';",
                    "import {func} from '../util';",
                    "",
                    "/** Collapse.Panel */",
                    "class Panel extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式类名的品牌前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 子组件接受行内样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        children: PropTypes.any,",
                    "        isExpanded: PropTypes.bool,",
                    "        /**",
                    "         * 是否禁止用户操作",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 标题",
                    "         */",
                    "        title: PropTypes.node,",
                    "        /**",
                    "         * 扩展class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        onClick: PropTypes.func,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        isExpanded: false,",
                    "        onClick: func.noop,",
                    "    };",
                    "",
                    "    static isNextPanel = true; //",
                    "",
                    "    render() {",
                    "        const { title, children, className, isExpanded, disabled, style, prefix, onClick, ...others} = this.props;",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}collapse-panel`]: true,",
                    "            [`${prefix}collapse-panel-expanded`]: isExpanded,",
                    "            [`${prefix}collapse-panel-disabled`]: disabled,",
                    "            [className]: className,",
                    "        });",
                    "",
                    "        return (",
                    "            <div className={cls} style={style} {...others}>",
                    "                <div className={`${prefix}collapse-panel-title`} onClick={onClick}>",
                    "                    <Icon type=\"arrow-up\" className={`${prefix}collapse-panel-icon`} />",
                    "                    {title}",
                    "                </div>",
                    "                <div className={`${prefix}collapse-panel-content`}>",
                    "                    {children}",
                    "                </div>",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Panel);"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module collapse: 折叠面板",
                        "/// @tag Collapse",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $collapse-",
                        "/// @classPrefix {prefix}-collapse",
                        "/// @order {\"size/bounding\":10,\"size/divider\":11,\"size/title\":12,\"size/icon\":13,\"size/content\":14,\"statement/normal\":10,\"statement/normal/title\":100,\"statement/normal/icon\":101,\"statement/normal/content\":102,\"statement/divider\":11,\"statement/disabled\":12,\"statement/disabled/title\":120,\"statement/hover\":13,\"statement/hover/title\":130}",
                        "////",
                        "",
                        "$collapse-prefix: '.#{$css-prefix}collapse';",
                        "",
                        "// collapse variables",
                        "// --------------------------------------------------",
                        "",
                        "// Common",
                        "",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$collapse-border-width: $line-1 !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$collapse-border-corner: $corner-1 !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$collapse-border-color: $color-line1-2 !default;",
                        "/// border",
                        "/// @namespace statement/divider",
                        "$collapse-panel-border-color: $color-line1-2 !default;",
                        "/// border",
                        "/// @namespace statement/disabled",
                        "$collapse-disabled-border-color: $color-line1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace size/divider",
                        "$collapse-title-border-width: $line-1 !default;",
                        "/// line height",
                        "/// @namespace size/title",
                        "$collapse-title-height: $s-5 !default;",
                        "/// background",
                        "/// @namespace statement/normal/title",
                        "$collapse-title-bg-color: $color-fill1-2 !default;",
                        "/// background",
                        "/// @namespace statement/hover/title",
                        "$collapse-title-hover-bg-color: $color-fill1-3 !default;",
                        "/// background",
                        "/// @namespace statement/disabled/title",
                        "$collapse-title-disabled-bg-color: $color-fill1-2 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$collapse-title-font-color: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/disabled/title",
                        "$collapse-title-font-disabled-color: $color-text1-1 !default;",
                        "/// text",
                        "/// @namespace size/title",
                        "$collapse-title-font-size: $font-size-body-2 !default;",
                        "/// weight",
                        "/// @namespace size/title",
                        "$collapse-title-font-weight: $font-weight-2 !default;",
                        "/// padding(t,b)",
                        "/// @namespace size/title",
                        "$collapse-title-padding-tb: $s-2 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$collapse-icon-size: $icon-xxs !default;",
                        "/// color",
                        "/// @namespace statement/normal/icon",
                        "$collapse-icon-color: $color-text1-4 !default;",
                        "/// margin (r)",
                        "/// @namespace size/icon",
                        "$collapse-icon-margin-r: $s-2 !default;",
                        "/// margin (l)",
                        "/// @namespace size/icon",
                        "$collapse-icon-margin-l: $s-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/content",
                        "$collapse-content-bg-color: $color-white !default;",
                        "/// padding (l,r)",
                        "/// @namespace size/content",
                        "$collapse-content-padding-x: $s-4 !default;",
                        "/// padding (t,b)",
                        "/// @namespace size/content",
                        "$collapse-content-padding-y: $s-3 !default;",
                        "/// text",
                        "/// @namespace size/content",
                        "$collapse-content-font-size: $font-size-body-1 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$collapse-content-color: $color-text1-3 !default;"
                    ]
                }
            }
        },
        "config-provider": {
            "cache.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "class Cache {",
                    "    constructor() {",
                    "        this._root = null;",
                    "        this._store = new Map();",
                    "    }",
                    "",
                    "    empty() {",
                    "        return this._store.size === 0;",
                    "    }",
                    "",
                    "    has(key) {",
                    "        return this._store.has(key);",
                    "    }",
                    "",
                    "    get(key, defaultValue) {",
                    "        const res = this.has(key) ? this._store.get(key) : this.root();",
                    "        return (typeof res === 'undefined' || res === null) ?",
                    "            defaultValue : res;",
                    "    }",
                    "",
                    "    add(key, value) {",
                    "        if (this.empty()) {",
                    "            this._root = key;",
                    "        }",
                    "        this._store.set(key, value);",
                    "    }",
                    "",
                    "    update(key, value) {",
                    "        if (this.has(key)) {",
                    "            this._store.set(key, value);",
                    "        }",
                    "    }",
                    "",
                    "    remove(key) {",
                    "        this._store.delete(key);",
                    "    }",
                    "",
                    "    root() {",
                    "        return this._store.get(this._root);",
                    "    }",
                    "}",
                    "",
                    "export default Cache;"
                ]
            },
            "config.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import hoistNonReactStatic from 'hoist-non-react-statics';",
                    "import { obj, log } from '../util';",
                    "import getContextProps from './get-context-props';",
                    "",
                    "const { shallowEqual } = obj;",
                    "",
                    "function getDisplayName(Component) {",
                    "    return Component.displayName || Component.name || 'Component';",
                    "}",
                    "",
                    "let globalLocales;",
                    "let currentGlobalLanguage = 'zh-cn';",
                    "let currentGlobalLocale = {};",
                    "let currentGlobalRtl = false;",
                    "",
                    "export function initLocales(locales) {",
                    "    globalLocales = locales;",
                    "    currentGlobalLocale = locales[currentGlobalLanguage];",
                    "}",
                    "",
                    "export function setLanguage(language) {",
                    "    if (globalLocales) {",
                    "        currentGlobalLanguage = language;",
                    "        currentGlobalLocale = globalLocales[language];",
                    "    }",
                    "}",
                    "",
                    "export function setLocale(locale) {",
                    "    currentGlobalLocale = {",
                    "        ...(globalLocales ? globalLocales[currentGlobalLanguage] : {}),",
                    "        ...locale",
                    "    };",
                    "}",
                    "",
                    "export function setDirection(dir) {",
                    "    currentGlobalRtl = dir === 'rtl';",
                    "}",
                    "",
                    "export function getLocale() {",
                    "    return currentGlobalLocale;",
                    "}",
                    "",
                    "export function getLanguage() {",
                    "    return currentGlobalLanguage;",
                    "}",
                    "",
                    "export function getDirection() {",
                    "    return currentGlobalRtl;",
                    "}",
                    "",
                    "export function config(Component, options = {}) {",
                    "    if (Component.prototype.shouldComponentUpdate === undefined) {",
                    "        Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(",
                    "            nextProps,",
                    "            nextState",
                    "        ) {",
                    "            if (this.props.pure) {",
                    "                return (",
                    "                    !shallowEqual(this.props, nextProps) ||",
                    "                    !shallowEqual(this.state, nextState)",
                    "                );",
                    "            }",
                    "",
                    "            return true;",
                    "        };",
                    "    }",
                    "",
                    "    class ConfigedComponent extends React.Component {",
                    "        static propTypes = {",
                    "            ...(Component.propTypes || {}),",
                    "            prefix: PropTypes.string,",
                    "            locale: PropTypes.object,",
                    "            pure: PropTypes.bool,",
                    "            rtl: PropTypes.bool",
                    "        };",
                    "        static contextTypes = {",
                    "            ...(Component.contextTypes || {}),",
                    "            nextPrefix: PropTypes.string,",
                    "            nextLocale: PropTypes.object,",
                    "            nextPure: PropTypes.bool,",
                    "            nextRtl: PropTypes.bool,",
                    "            nextWarning: PropTypes.bool",
                    "        };",
                    "",
                    "        constructor(props, context) {",
                    "            super(props, context);",
                    "",
                    "            this._getInstance = this._getInstance.bind(this);",
                    "            this._deprecated = this._deprecated.bind(this);",
                    "        }",
                    "",
                    "        _getInstance(ref) {",
                    "            this._instance = ref;",
                    "",
                    "            if (this._instance && options.exportNames) {",
                    "                options.exportNames.forEach(name => {",
                    "                    const field = this._instance[name];",
                    "                    if (typeof field === 'function') {",
                    "                        this[name] = field.bind(this._instance);",
                    "                    } else {",
                    "                        this[name] = field;",
                    "                    }",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        _deprecated(...args) {",
                    "            if (this.context.nextWarning !== false) {",
                    "                log.deprecated(...args);",
                    "            }",
                    "        }",
                    "",
                    "        getInstance() {",
                    "            return this._instance;",
                    "        }",
                    "",
                    "        render() {",
                    "            const { prefix, locale, pure, rtl, ...others } = this.props;",
                    "            const {",
                    "                nextPrefix,",
                    "                nextLocale = {},",
                    "                nextPure,",
                    "                nextRtl",
                    "            } = this.context;",
                    "",
                    "            const displayName =",
                    "                options.componentName || getDisplayName(Component);",
                    "            const contextProps = getContextProps(",
                    "                { prefix, locale, pure, rtl },",
                    "                {",
                    "                    nextPrefix,",
                    "                    nextLocale: { ...currentGlobalLocale, ...nextLocale },",
                    "                    nextPure,",
                    "                    nextRtl: typeof nextRtl === 'boolean' ? nextRtl :",
                    "                        currentGlobalRtl === true ? true : undefined",
                    "                },",
                    "                displayName",
                    "            );",
                    "",
                    "            const newContextProps = ['prefix', 'locale', 'pure', 'rtl'].reduce(",
                    "                (ret, name) => {",
                    "                    if (typeof contextProps[name] !== 'undefined') {",
                    "                        ret[name] = contextProps[name];",
                    "                    }",
                    "                    return ret;",
                    "                },",
                    "                {}",
                    "            );",
                    "",
                    "            const newOthers = options.transform ?",
                    "                options.transform(others, this._deprecated) :",
                    "                others;",
                    "",
                    "            return (",
                    "                <Component",
                    "                    {...newOthers}",
                    "                    {...newContextProps}",
                    "                    ref={this._getInstance}",
                    "                />",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    ConfigedComponent.displayName = `Config(${getDisplayName(Component)})`;",
                    "",
                    "    hoistNonReactStatic(ConfigedComponent, Component);",
                    "",
                    "    return ConfigedComponent;",
                    "}"
                ]
            },
            "consumer.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import PropTypes from 'prop-types';",
                    "",
                    "/**",
                    " * Creates an object with the same values as object and keys",
                    " * generated by running each own enumerable string keyed property",
                    " * of object thru iteratee.",
                    " * @param {Object} obj",
                    " * @param {Function} fn",
                    " * @return {Object}",
                    " */",
                    "const mapKeys = (obj, fn) => {",
                    "    const result = {};",
                    "    for (const key in obj) {",
                    "        if (Object.prototype.hasOwnProperty.call(obj, key)) {",
                    "            const value = obj[key];",
                    "            const newKey = fn(key, value);",
                    "            result[newKey] = value;",
                    "        }",
                    "    }",
                    "",
                    "    return result;",
                    "};",
                    "",
                    "/**",
                    " * Replace specific key with prefix `next`",
                    " * and lowercase first character of the result.",
                    " * @param {String} key",
                    " * @return {String}",
                    " */",
                    "const replaceKey = key =>",
                    "    key.replace(/^(next)([A-Z])/, (match, p1, p2) => p2.toLowerCase());",
                    "",
                    "/**",
                    " * @param {Object} source",
                    " * @return {Object}",
                    " */",
                    "const transformContext = source => mapKeys(source, replaceKey);",
                    "",
                    "/**",
                    " * Consumer",
                    " * @param {Object} prop",
                    " * @param {Object} context",
                    " */",
                    "const Consumer = ({ children }, context) =>",
                    "    typeof children === 'function' ? children(transformContext(context)) : null;",
                    "",
                    "/**",
                    " * PropTypes",
                    " * @type {Object}",
                    " * @static",
                    " */",
                    "Consumer.propTypes = {",
                    "    // Render context as function",
                    "    // Function(context: object): ReactElement",
                    "    children: PropTypes.func",
                    "};",
                    "",
                    "/**",
                    " * ContextTypes (legacy context)",
                    " * @type {Object}",
                    " * @static",
                    " */",
                    "Consumer.contextTypes = {",
                    "    nextPrefix: PropTypes.string,",
                    "    nextLocale: PropTypes.object,",
                    "    nextPure: PropTypes.bool,",
                    "    newRtl: PropTypes.bool,",
                    "    nextWarning: PropTypes.bool",
                    "};",
                    "",
                    "export default Consumer;"
                ]
            },
            "get-context-props.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "export default function getContextProps(props, context, displayName) {",
                    "    const { prefix, locale, pure, rtl } = props;",
                    "    const { nextPrefix, nextLocale, nextPure, nextWarning, nextRtl } = context;",
                    "",
                    "    const newPrefix = prefix || nextPrefix;",
                    "",
                    "    let localeFromContext;",
                    "    if (nextLocale) {",
                    "        localeFromContext = nextLocale[displayName];",
                    "        if (localeFromContext) {",
                    "            localeFromContext.momentLocale = nextLocale.momentLocale;",
                    "        }",
                    "    }",
                    "    let newLocale;",
                    "    if (locale) {",
                    "        newLocale = { ...(localeFromContext || {}), ...locale };",
                    "    } else if (localeFromContext) {",
                    "        newLocale = localeFromContext;",
                    "    }",
                    "",
                    "    const newPure = typeof pure === 'boolean' ? pure : nextPure;",
                    "    const newRtl = typeof rtl === 'boolean' ? rtl : nextRtl;",
                    "",
                    "    return {",
                    "        prefix: newPrefix,",
                    "        locale: newLocale,",
                    "        pure: newPure,",
                    "        rtl: newRtl,",
                    "        warning: nextWarning",
                    "    };",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import { Component, Children } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import getContextProps from './get-context-props';",
                    "import {",
                    "    config,",
                    "    initLocales,",
                    "    setLanguage,",
                    "    setLocale,",
                    "    setDirection,",
                    "    getLocale,",
                    "    getLanguage,",
                    "    getDirection",
                    "} from './config';",
                    "import Consumer from './consumer';",
                    "import Cache from './cache';",
                    "",
                    "const childContextCache = new Cache();",
                    "",
                    "/**",
                    " * ConfigProvider",
                    " * @propsExtends false",
                    " */",
                    "class ConfigProvider extends Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式类名的品牌前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 国际化文案对象，属性为组件的 displayName",
                    "         */",
                    "        locale: PropTypes.object,",
                    "        /**",
                    "         * 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用",
                    "         */",
                    "        pure: PropTypes.bool,",
                    "        /**",
                    "         * 是否在开发模式下显示组件属性被废弃的 warning 提示",
                    "         */",
                    "        warning: PropTypes.bool,",
                    "        /**",
                    "         * 是否开启 rtl 模式",
                    "         */",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 组件树",
                    "         */",
                    "        children: PropTypes.element",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        warning: true",
                    "    };",
                    "",
                    "    static childContextTypes = {",
                    "        nextPrefix: PropTypes.string,",
                    "        nextLocale: PropTypes.object,",
                    "        nextPure: PropTypes.bool,",
                    "        nextRtl: PropTypes.bool,",
                    "        nextWarning: PropTypes.bool",
                    "    };",
                    "",
                    "    /**",
                    "     * 传入组件，生成受 ConfigProvider 控制的 HOC 组件",
                    "     * @param {Component} Component 组件类",
                    "     * @param {Object} options 可选项",
                    "     * @returns {Component} HOC",
                    "     */",
                    "    static config = (Component, options) => {",
                    "        return config(Component, options);",
                    "    };",
                    "",
                    "    /**",
                    "     * 传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件",
                    "     * @param {Object} props 组件的 props",
                    "     * @param {String} displayName 组件的 displayName",
                    "     * @returns {Object} 新的 context props",
                    "     */",
                    "    static getContextProps = (props, displayName) => {",
                    "        return getContextProps(props, childContextCache.root() || {}, displayName);",
                    "    };",
                    "",
                    "    static initLocales = initLocales;",
                    "    static setLanguage = setLanguage;",
                    "    static setLocale = setLocale;",
                    "    static setDirection = setDirection;",
                    "    static getLanguage = getLanguage;",
                    "    static getLocale = getLocale;",
                    "    static getDirection = getDirection;",
                    "    static Consumer = Consumer;",
                    "",
                    "    static getContext = () => {",
                    "        const { nextPrefix, nextLocale, nextPure, nextRtl, nextWarning } = childContextCache.root() || {};",
                    "",
                    "        return {",
                    "            prefix: nextPrefix,",
                    "            locale: nextLocale,",
                    "            pure: nextPure,",
                    "            rtl: nextRtl,",
                    "            warning: nextWarning",
                    "        };",
                    "    };",
                    "",
                    "    constructor(...args) {",
                    "        super(...args);",
                    "        childContextCache.add(",
                    "            this,",
                    "            Object.assign({}, childContextCache.get(this, {}), this.getChildContext())",
                    "        );",
                    "    }",
                    "",
                    "    getChildContext() {",
                    "        const { prefix, locale, pure, warning, rtl } = this.props;",
                    "",
                    "        return {",
                    "            nextPrefix: prefix,",
                    "            nextLocale: locale,",
                    "            nextPure: pure,",
                    "            nextRtl: rtl,",
                    "            nextWarning: warning",
                    "        };",
                    "    }",
                    "",
                    "    componentWillMount() {",
                    "        this.setMomentLocale(this.props.locale);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if (this.props.locale !== nextProps.locale) {",
                    "            this.setMomentLocale(nextProps.locale);",
                    "        }",
                    "    }",
                    "",
                    "    componentDidUpdate() {",
                    "        childContextCache.add(",
                    "            this,",
                    "            Object.assign({}, childContextCache.get(this, {}), this.getChildContext())",
                    "        );",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        childContextCache.remove(this);",
                    "    }",
                    "",
                    "    setMomentLocale(locale) {",
                    "        let moment;",
                    "        try {",
                    "            moment = require('moment');",
                    "        } catch (e) {",
                    "            // ignore",
                    "        }",
                    "",
                    "        if (moment && locale) {",
                    "            moment.locale(locale.momentLocale);",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        return Children.only(this.props.children);",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": []
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            }
        },
        "core": {
            "form-element.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"./index-noreset.scss\";",
                    "@import \"../input/scss/variable.scss\";",
                    "@import \"../input/scss/mixin.scss\";",
                    "",
                    ".demo-body table {",
                    "    width: 100%;",
                    "}",
                    "",
                    ".next-form-element.next-input,",
                    ".next-form-element.next-select .next-input,",
                    ".next-form-element.next-time-picker .next-input, {",
                    "    &.next-small {",
                    "        @include input-size($form-element-small-height, $input-s-padding, $form-element-small-font-size, $input-s-label-padding-left, $input-s-icon-padding-right);",
                    "        @include input-icon-size($form-element-small-icon-size);",
                    "        @include input-border-radius($form-element-small-corner);",
                    "    }",
                    "",
                    "    &.next-medium {",
                    "        @include input-size($form-element-medium-height, $input-m-padding, $form-element-medium-font-size, $input-m-label-padding-left, $input-m-icon-padding-right);",
                    "        @include input-icon-size($form-element-medium-icon-size);",
                    "        @include input-border-radius($form-element-medium-corner);",
                    "    }",
                    "",
                    "    &.next-large {",
                    "        @include input-size($form-element-large-height, $input-l-padding, $form-element-large-font-size, $input-l-label-padding-left, $input-l-icon-padding-right);",
                    "        @include input-icon-size($form-element-large-icon-size);",
                    "        @include input-border-radius($form-element-large-corner);",
                    "    }",
                    "",
                    "    // stylelint-disable-next-line",
                    "    .next-select-values input {",
                    "        padding-left: 0;",
                    "        padding-right: 0;",
                    "    }",
                    "}"
                ]
            },
            "index-noreset.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "// Mixin & Function",
                    "@import \"./util/_function.scss\";",
                    "@import \"./util/_mixin.scss\";",
                    "",
                    "// Style",
                    "@import \"./style/_global.scss\";",
                    "@import \"./style/_size.scss\";",
                    "@import \"./style/_color.scss\";",
                    "@import \"./style/_corner.scss\";",
                    "@import \"./style/_font.scss\";",
                    "@import \"./style/_line.scss\";",
                    "@import \"./style/_shadow.scss\";",
                    "",
                    "// Icon",
                    "@import \"./style/_icon.scss\";",
                    "",
                    "// Utility",
                    "@import \"./utility/_form-element.scss\";",
                    "@import \"./utility/_popup.scss\";",
                    "@import \"./utility/_mask.scss\";"
                ]
            },
            "index.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"./index-noreset.scss\";"
                ]
            },
            "mask.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"./index-noreset.scss\";",
                    "",
                    ".demo-body table {",
                    "    width: 100%;",
                    "}",
                    "",
                    "// stylelint-disable-next-line",
                    ".demo.pc .demo-group > .wrap > div.demo-item {",
                    "    display: block;",
                    "}",
                    "",
                    ".next-overlay-wrapper .next-overlay-backdrop,",
                    ".next-dialog-container {",
                    "    position: absolute;",
                    "}",
                    "",
                    "// stylelint-disable-next-line",
                    ".next-overlay-wrapper.opened .next-overlay-backdrop.next-mask {",
                    "    background: $mask-background;",
                    "    opacity: $mask-opacity;",
                    "}"
                ]
            },
            "popup.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"./index-noreset.scss\";",
                    "",
                    ".demo-body table {",
                    "    width: 100%;",
                    "}",
                    "",
                    ".next-popup.next-menu,",
                    ".next-popup.next-time-picker-body,",
                    ".next-popup .next-tree-select-dropdown {",
                    "    border: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "    border-radius: $popup-local-corner;",
                    "    box-shadow: $popup-local-shadow;",
                    "}"
                ]
            },
            "reset.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "// Mixin & Function",
                    "@import \"./util/_function.scss\";",
                    "@import \"./util/_mixin.scss\";",
                    "",
                    "// style",
                    "@import \"./style/_global.scss\";",
                    "@import \"./style/_size.scss\";",
                    "@import \"./style/_color.scss\";",
                    "@import \"./style/_corner.scss\";",
                    "@import \"./style/_font.scss\";",
                    "@import \"./style/_line.scss\";",
                    "@import \"./style/_shadow.scss\";",
                    "",
                    "// Icon",
                    "@import \"./style/_icon.scss\";",
                    "",
                    "// Utility",
                    "@import \"./utility/_form-element.scss\";",
                    "@import \"./utility/_popup.scss\";",
                    "@import \"./utility/_mask.scss\";",
                    "",
                    "// Base",
                    "@import \"./base/_normalize.scss\";",
                    "@import \"./base/_reset.scss\";",
                    "@import \"./base/_typography.scss\";"
                ]
            },
            "base": {
                "_normalize.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "/* stylelint-disable */",
                        "",
                        "/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */",
                        "",
                        "/* Document",
                        "========================================================================== */",
                        "",
                        "/**",
                        "* 1. Correct the line height in all browsers.",
                        "* 2. Prevent adjustments of font size after orientation changes in",
                        "*    IE on Windows Phone and in iOS.",
                        "*/",
                        "",
                        "html {",
                        "    line-height: 1.15; /* 1 */",
                        "    -ms-text-size-adjust: 100%; /* 2 */",
                        "    -webkit-text-size-adjust: 100%; /* 2 */",
                        "}",
                        "",
                        "/* Sections",
                        "    ========================================================================== */",
                        "",
                        "/**",
                        "* Remove the margin in all browsers (opinionated).",
                        "*/",
                        "",
                        "body {",
                        "    margin: 0;",
                        "}",
                        "",
                        "/**",
                        "* Add the correct display in IE 9-.",
                        "*/",
                        "",
                        "article,",
                        "aside,",
                        "footer,",
                        "header,",
                        "nav,",
                        "section {",
                        "    display: block;",
                        "}",
                        "",
                        "/**",
                        "* Correct the font size and margin on `h1` elements within `section` and",
                        "* `article` contexts in Chrome, Firefox, and Safari.",
                        "*/",
                        "",
                        "h1 {",
                        "    font-size: 2em;",
                        "    margin: .67em 0;",
                        "}",
                        "",
                        "/* Grouping content",
                        "    ========================================================================== */",
                        "",
                        "/**",
                        "* Add the correct display in IE 9-.",
                        "* 1. Add the correct display in IE.",
                        "*/",
                        "",
                        "figcaption,",
                        "figure,",
                        "main { /* 1 */",
                        "    display: block;",
                        "}",
                        "",
                        "/**",
                        "* Add the correct margin in IE 8.",
                        "*/",
                        "",
                        "figure {",
                        "    margin: 1em 40px;",
                        "}",
                        "",
                        "/**",
                        "* 1. Add the correct box sizing in Firefox.",
                        "* 2. Show the overflow in Edge and IE.",
                        "*/",
                        "",
                        "hr {",
                        "    box-sizing: content-box; /* 1 */",
                        "    height: 0; /* 1 */",
                        "    overflow: visible; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* 1. Correct the inheritance and scaling of font size in all browsers.",
                        "* 2. Correct the odd `em` font sizing in all browsers.",
                        "*/",
                        "",
                        "pre {",
                        "    font-family: monospace, monospace; /* 1 */",
                        "    font-size: 1em; /* 2 */",
                        "}",
                        "",
                        "/* Text-level semantics",
                        "    ========================================================================== */",
                        "",
                        "/**",
                        "* 1. Remove the gray background on active links in IE 10.",
                        "* 2. Remove gaps in links underline in iOS 8+ and Safari 8+.",
                        "*/",
                        "",
                        "a {",
                        "    background-color: transparent; /* 1 */",
                        "    -webkit-text-decoration-skip: objects; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* 1. Remove the bottom border in Chrome 57- and Firefox 39-.",
                        "* 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.",
                        "*/",
                        "",
                        "abbr[title] {",
                        "    border-bottom: none; /* 1 */",
                        "    text-decoration: underline; /* 2 */",
                        "    text-decoration: underline dotted; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* Prevent the duplicate application of `bolder` by the next rule in Safari 6.",
                        "*/",
                        "",
                        "b,",
                        "strong {",
                        "    font-weight: inherit;",
                        "}",
                        "",
                        "/**",
                        "* Add the correct font weight in Chrome, Edge, and Safari.",
                        "*/",
                        "",
                        "b,",
                        "strong {",
                        "    font-weight: bolder;",
                        "}",
                        "",
                        "/**",
                        "* 1. Correct the inheritance and scaling of font size in all browsers.",
                        "* 2. Correct the odd `em` font sizing in all browsers.",
                        "*/",
                        "",
                        "code,",
                        "kbd,",
                        "samp {",
                        "    font-family: monospace, monospace; /* 1 */",
                        "    font-size: 1em; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* Add the correct font style in Android 4.3-.",
                        "*/",
                        "",
                        "dfn {",
                        "    font-style: italic;",
                        "}",
                        "",
                        "/**",
                        "* Add the correct background and color in IE 9-.",
                        "*/",
                        "",
                        "mark {",
                        "    background-color: #FF0;",
                        "    color: #000;",
                        "}",
                        "",
                        "/**",
                        "* Add the correct font size in all browsers.",
                        "*/",
                        "",
                        "small {",
                        "    font-size: 80%;",
                        "}",
                        "",
                        "/**",
                        "* Prevent `sub` and `sup` elements from affecting the line height in",
                        "* all browsers.",
                        "*/",
                        "",
                        "sub,",
                        "sup {",
                        "    font-size: 75%;",
                        "    line-height: 0;",
                        "    position: relative;",
                        "    vertical-align: baseline;",
                        "}",
                        "",
                        "sub {",
                        "    bottom: -.25em;",
                        "}",
                        "",
                        "sup {",
                        "    top: -.5em;",
                        "}",
                        "",
                        "/* Embedded content",
                        "    ========================================================================== */",
                        "",
                        "/**",
                        "* Add the correct display in IE 9-.",
                        "*/",
                        "",
                        "audio,",
                        "video {",
                        "    display: inline-block;",
                        "}",
                        "",
                        "/**",
                        "* Add the correct display in iOS 4-7.",
                        "*/",
                        "",
                        "audio:not([controls]) {",
                        "    display: none;",
                        "    height: 0;",
                        "}",
                        "",
                        "/**",
                        "* Remove the border on images inside links in IE 10-.",
                        "*/",
                        "",
                        "img {",
                        "    border-style: none;",
                        "}",
                        "",
                        "/**",
                        "* Hide the overflow in IE.",
                        "*/",
                        "",
                        "svg:not(:root) {",
                        "    overflow: hidden;",
                        "}",
                        "",
                        "/* Forms",
                        "    ========================================================================== */",
                        "",
                        "/**",
                        "* 1. Change the font styles in all browsers (opinionated).",
                        "* 2. Remove the margin in Firefox and Safari.",
                        "*/",
                        "",
                        "button,",
                        "input,",
                        "optgroup,",
                        "select,",
                        "textarea {",
                        "    font-family: sans-serif; /* 1 */",
                        "    font-size: 100%; /* 1 */",
                        "    line-height: 1.15; /* 1 */",
                        "    margin: 0; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* Show the overflow in IE.",
                        "* 1. Show the overflow in Edge.",
                        "*/",
                        "",
                        "button,",
                        "input { /* 1 */",
                        "    overflow: visible;",
                        "}",
                        "",
                        "/**",
                        "* Remove the inheritance of text transform in Edge, Firefox, and IE.",
                        "* 1. Remove the inheritance of text transform in Firefox.",
                        "*/",
                        "",
                        "button,",
                        "select { /* 1 */",
                        "    text-transform: none;",
                        "}",
                        "",
                        "/**",
                        "* 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`",
                        "*    controls in Android 4.",
                        "* 2. Correct the inability to style clickable types in iOS and Safari.",
                        "*/",
                        "",
                        "button,",
                        "html [type=\"button\"], /* 1 */",
                        "[type=\"reset\"],",
                        "[type=\"submit\"] {",
                        "    -webkit-appearance: button; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* Remove the inner border and padding in Firefox.",
                        "*/",
                        "",
                        "button::-moz-focus-inner,",
                        "[type=\"button\"]::-moz-focus-inner,",
                        "[type=\"reset\"]::-moz-focus-inner,",
                        "[type=\"submit\"]::-moz-focus-inner {",
                        "    border-style: none;",
                        "    padding: 0;",
                        "}",
                        "",
                        "/**",
                        "* Restore the focus styles unset by the previous rule.",
                        "*/",
                        "",
                        "button:-moz-focusring,",
                        "[type=\"button\"]:-moz-focusring,",
                        "[type=\"reset\"]:-moz-focusring,",
                        "[type=\"submit\"]:-moz-focusring {",
                        "    outline: 1px dotted ButtonText;",
                        "}",
                        "",
                        "/**",
                        "* Correct the padding in Firefox.",
                        "*/",
                        "",
                        "fieldset {",
                        "    padding: .35em .75em .625em;",
                        "}",
                        "",
                        "/**",
                        "* 1. Correct the text wrapping in Edge and IE.",
                        "* 2. Correct the color inheritance from `fieldset` elements in IE.",
                        "* 3. Remove the padding so developers are not caught out when they zero out",
                        "*    `fieldset` elements in all browsers.",
                        "*/",
                        "",
                        "legend {",
                        "    box-sizing: border-box; /* 1 */",
                        "    color: inherit; /* 2 */",
                        "    display: table; /* 1 */",
                        "    max-width: 100%; /* 1 */",
                        "    padding: 0; /* 3 */",
                        "    white-space: normal; /* 1 */",
                        "}",
                        "",
                        "/**",
                        "* 1. Add the correct display in IE 9-.",
                        "* 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.",
                        "*/",
                        "",
                        "progress {",
                        "    display: inline-block; /* 1 */",
                        "    vertical-align: baseline; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* Remove the default vertical scrollbar in IE.",
                        "*/",
                        "",
                        "textarea {",
                        "    overflow: auto;",
                        "}",
                        "",
                        "/**",
                        "* 1. Add the correct box sizing in IE 10-.",
                        "* 2. Remove the padding in IE 10-.",
                        "*/",
                        "",
                        "[type=\"checkbox\"],",
                        "[type=\"radio\"] {",
                        "    box-sizing: border-box; /* 1 */",
                        "    padding: 0; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* Correct the cursor style of increment and decrement buttons in Chrome.",
                        "*/",
                        "",
                        "[type=\"number\"]::-webkit-inner-spin-button,",
                        "[type=\"number\"]::-webkit-outer-spin-button {",
                        "    height: auto;",
                        "}",
                        "",
                        "/**",
                        "* 1. Correct the odd appearance in Chrome and Safari.",
                        "* 2. Correct the outline style in Safari.",
                        "*/",
                        "",
                        "[type=\"search\"] {",
                        "    -webkit-appearance: textfield; /* 1 */",
                        "    outline-offset: -2px; /* 2 */",
                        "}",
                        "",
                        "/**",
                        "* Remove the inner padding and cancel buttons in Chrome and Safari on macOS.",
                        "*/",
                        "",
                        "[type=\"search\"]::-webkit-search-cancel-button,",
                        "[type=\"search\"]::-webkit-search-decoration {",
                        "    -webkit-appearance: none;",
                        "}",
                        "",
                        "/**",
                        "* 1. Correct the inability to style clickable types in iOS and Safari.",
                        "* 2. Change font properties to `inherit` in Safari.",
                        "*/",
                        "",
                        "::-webkit-file-upload-button {",
                        "    -webkit-appearance: button; /* 1 */",
                        "    font: inherit; /* 2 */",
                        "}",
                        "",
                        "/* Interactive",
                        "    ========================================================================== */",
                        "",
                        "/*",
                        "* Add the correct display in IE 9-.",
                        "* 1. Add the correct display in Edge, IE, and Firefox.",
                        "*/",
                        "",
                        "details, /* 1 */",
                        "menu {",
                        "    display: block;",
                        "}",
                        "",
                        "/*",
                        "* Add the correct display in all browsers.",
                        "*/",
                        "",
                        "summary {",
                        "    display: list-item;",
                        "}",
                        "",
                        "/* Scripting",
                        "    ========================================================================== */",
                        "",
                        "/**",
                        "* Add the correct display in IE 9-.",
                        "*/",
                        "",
                        "canvas {",
                        "    display: inline-block;",
                        "}",
                        "",
                        "/**",
                        "* Add the correct display in IE.",
                        "*/",
                        "",
                        "template {",
                        "    display: none;",
                        "}",
                        "",
                        "/* Hidden",
                        "    ========================================================================== */",
                        "",
                        "/**",
                        "* Add the correct display in IE 10-.",
                        "*/",
                        "",
                        "[hidden] {",
                        "    display: none;",
                        "}"
                    ]
                },
                "_reset.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "*,",
                        "*:before,",
                        "*:after {",
                        "    box-sizing: border-box;",
                        "}",
                        "",
                        "ul,",
                        "ol {",
                        "    list-style: none;",
                        "    margin: 0;",
                        "    padding: 0;",
                        "}",
                        "",
                        "li {",
                        "    margin-left: 0;",
                        "}",
                        "",
                        "hr {",
                        "    border: 0 $line-solid $color-line1-2;",
                        "    border-top-width: $line-1;",
                        "}",
                        "",
                        "a {",
                        "    text-decoration: none;",
                        "    &:link {",
                        "        color: $color-link-1;",
                        "    }",
                        "    &:visited {",
                        "        color: $color-link-2;",
                        "    }",
                        "    &:hover {",
                        "        color: $color-link-3;",
                        "    }",
                        "    &:active {",
                        "        text-decoration: underline;",
                        "        color: $color-link-3;",
                        "    }",
                        "}"
                    ]
                },
                "_typography.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@font-face {",
                        "    font-family: \"#{$font-custom-name}\";",
                        "    src: url(\"#{$font-custom-path}#{$font-name-thin}.eot\");",
                        "    src:",
                        "        url(\"#{$font-custom-path}#{$font-name-thin}.eot?#iefix\") format(\"embedded-opentype\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-thin}.woff2\") format(\"woff2\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-thin}.woff\") format(\"woff\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-thin}.ttf\") format(\"truetype\");",
                        "    font-weight: 200;",
                        "}",
                        "",
                        "@font-face {",
                        "    font-family: \"#{$font-custom-name}\";",
                        "    src: url(\"#{$font-custom-path}#{$font-name-light}.eot\");",
                        "    src:",
                        "        url(\"#{$font-custom-path}#{$font-name-light}.eot?#iefix\") format(\"embedded-opentype\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-light}.woff2\") format(\"woff2\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-light}.woff\") format(\"woff\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-light}.ttf\") format(\"truetype\");",
                        "    font-weight: 300;",
                        "}",
                        "",
                        "@font-face {",
                        "    font-family: \"#{$font-custom-name}\";",
                        "    src: url(\"#{$font-custom-path}#{$font-name-regular}.eot\");",
                        "    src:",
                        "        url(\"#{$font-custom-path}#{$font-name-regular}.eot?#iefix\") format(\"embedded-opentype\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-regular}.woff2\") format(\"woff2\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-regular}.woff\") format(\"woff\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-regular}.ttf\") format(\"truetype\");",
                        "    font-weight: 400;",
                        "}",
                        "",
                        "@font-face {",
                        "    font-family: \"#{$font-custom-name}\";",
                        "    src: url(\"#{$font-custom-path}#{$font-name-medium}.eot\");",
                        "    src:",
                        "        url(\"#{$font-custom-path}#{$font-name-medium}.eot?#iefix\") format(\"embedded-opentype\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-medium}.woff2\") format(\"woff2\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-medium}.woff\") format(\"woff\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-medium}.ttf\") format(\"truetype\");",
                        "    font-weight: 500;",
                        "}",
                        "",
                        "@font-face {",
                        "    font-family: \"#{$font-custom-name}\";",
                        "    src: url(\"#{$font-custom-path}#{$font-name-bold}.eot\");",
                        "    src:",
                        "        url(\"#{$font-custom-path}#{$font-name-bold}.eot?#iefix\") format(\"embedded-opentype\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-bold}.woff2\") format(\"woff2\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-bold}.woff\") format(\"woff\"),",
                        "        url(\"#{$font-custom-path}#{$font-name-bold}.ttf\") format(\"truetype\");",
                        "    font-weight: 700;",
                        "}",
                        "",
                        "html {",
                        "    font-size: 100%;",
                        "    // font-smooth has been removed from this specification, Works only on Mac OS X platform.",
                        "    // -webkit-font-smoothing: antialiased;",
                        "}",
                        "",
                        "body {",
                        "    font-family: $font-family-base;",
                        "    font-size: $font-size-body-1;",
                        "    line-height: $font-lineheight-base;",
                        "    color: $color-text1-4;",
                        "}",
                        "",
                        "button,",
                        "input,",
                        "optgroup,",
                        "select,",
                        "textarea {",
                        "    font-family: inherit;",
                        "}",
                        "",
                        "h1 a,",
                        "h2 a,",
                        "h3 a,",
                        "h4 a,",
                        "h5 a,",
                        "h6 a {",
                        "    font-weight: inherit;",
                        "}",
                        "",
                        "h1 {",
                        "    margin-bottom: $font-size-headline * $typo-margin-bottom;",
                        "    font-size: $font-size-headline;",
                        "    font-weight: $font-weight-medium;",
                        "    line-height: 36px;",
                        "}",
                        "",
                        "h2 {",
                        "    margin-bottom: $font-size-title * $typo-margin-bottom;",
                        "    font-size: $font-size-title;",
                        "    font-weight: $font-weight-medium;",
                        "    line-height: 30px;",
                        "}",
                        "",
                        "h3 {",
                        "    margin-bottom: $font-size-subhead * $typo-margin-bottom;",
                        "    font-size: $font-size-subhead;",
                        "    font-weight: $font-weight-2;",
                        "    line-height: 24px;",
                        "}",
                        "",
                        "h4 {",
                        "    margin-bottom: $font-size-subhead * $typo-margin-bottom;",
                        "    font-size: $font-size-subhead;",
                        "    font-weight: $font-weight-2;",
                        "    line-height: 24px;",
                        "}",
                        "",
                        "h5 {",
                        "    margin-bottom: $font-size-body-1 * $typo-margin-bottom;",
                        "    font-size: $font-size-body-2;",
                        "    font-weight: $font-weight-2;",
                        "    line-height: 24px;",
                        "}",
                        "",
                        "h6 {",
                        "    margin-bottom: $font-size-body-2 * $typo-margin-bottom;",
                        "    font-size: $font-size-body-1;",
                        "    font-weight: $font-weight-medium;",
                        "    line-height: 20px;",
                        "}",
                        "",
                        "p {",
                        "    margin-bottom: $font-size-body-1 * $typo-margin-bottom;",
                        "    font-size: $font-size-body-1;",
                        "    font-weight: $font-weight-2;",
                        "    line-height: 20px;",
                        "}",
                        "",
                        "strong {",
                        "    font-weight: 500;",
                        "}",
                        "",
                        "small {",
                        "    font-size: 75%;",
                        "}"
                    ]
                }
            },
            "style": {
                "_color.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module color: 颜色",
                        "/// @type Color",
                        "/// @category style",
                        "////",
                        "",
                        "",
                        "// ----------- 品牌主色 ----------- //",
                        "",
                        "/// brand1-1",
                        "/// @group brand",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-brand1-1: #DEE8FF !default;",
                        "/// brand1-6",
                        "/// @group brand",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-brand1-6: #5584FF !default;",
                        "/// brand1-9",
                        "/// @group brand",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-brand1-9: #3E71F7 !default;",
                        "",
                        "// ----------- 功能色 ----------- //",
                        "",
                        "// 成功",
                        "",
                        "/// success-1",
                        "/// @group function",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-success-1: #E4FDDA !default;",
                        "/// success-2",
                        "/// @group function",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-success-2: #CDF2BE !default;",
                        "/// success-3",
                        "/// @group function",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-success-3: #46BC15 !default;",
                        "/// success-4",
                        "/// @group function",
                        "/// @semantic 重",
                        "/// @export",
                        "$color-success-4: #41A716 !default;",
                        "",
                        "// 提示",
                        "",
                        "/// notice-1",
                        "/// @group function",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-notice-1: #E3F2FD !default;",
                        "/// notice-2",
                        "/// @group function",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-notice-2: #BAD9FF !default;",
                        "/// notice-3",
                        "/// @group function",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-notice-3: #4494F9 !default;",
                        "/// notice-4",
                        "/// @group function",
                        "/// @semantic 重",
                        "/// @export",
                        "$color-notice-4: #2E7DE0 !default;",
                        "",
                        "// 警告",
                        "",
                        "/// warning-1",
                        "/// @group function",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-warning-1: #FFF3E0 !default;",
                        "/// warning-2",
                        "/// @group function",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-warning-2: #FFE6BD !default;",
                        "/// warning-3",
                        "/// @group function",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-warning-3: #FF9300 !default;",
                        "/// warning-4",
                        "/// @group function",
                        "/// @semantic 重",
                        "/// @export",
                        "$color-warning-4: #EB7E10 !default;",
                        "",
                        "// 错误",
                        "",
                        "/// error-1",
                        "/// @group function",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-error-1: #FFECE4 !default;",
                        "/// error-2",
                        "/// @group function",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-error-2: #FFC8B2 !default;",
                        "/// error-3",
                        "/// @group function",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-error-3: #FF3000 !default;",
                        "/// error-4",
                        "/// @group function",
                        "/// @semantic 重",
                        "/// @export",
                        "$color-error-4: #E72B00 !default;",
                        "",
                        "// 帮助",
                        "",
                        "/// help-1",
                        "/// @group function",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-help-1: #E3FFF8 !default;",
                        "/// help-2",
                        "/// @group function",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-help-2: #C0ECE2 !default;",
                        "/// help-3",
                        "/// @group function",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-help-3: #01C1B2 !default;",
                        "/// help-4",
                        "/// @group function",
                        "/// @semantic 重",
                        "/// @export",
                        "$color-help-4: #01A79A !default;",
                        "",
                        "// 链接",
                        "",
                        "/// link-1",
                        "/// @group function",
                        "/// @semantic 默认",
                        "/// @export",
                        "$color-link-1: #5584FF !default;",
                        "/// link-2",
                        "/// @group function",
                        "/// @semantic 已访问",
                        "/// @export",
                        "$color-link-2: #5584FF !default;",
                        "/// link-3",
                        "/// @group function",
                        "/// @semantic 鼠标滑过",
                        "/// @export",
                        "$color-link-3: #3E71F7 !default;",
                        "",
                        "// 其它",
                        "",
                        "/// other-1",
                        "/// @group function",
                        "/// @export",
                        "$color-other-1: #FFEB3B !default;",
                        "",
                        "/// other-2",
                        "/// @group function",
                        "/// @export",
                        "$color-other-2: #FCCC12 !default;",
                        "",
                        "/// other-3",
                        "/// @group function",
                        "/// @export",
                        "$color-other-3: #EABB06 !default;",
                        "",
                        "// ----------- 中立色 ----------- //",
                        "",
                        "// 预设",
                        "",
                        "/// white",
                        "/// @semantic 纯白",
                        "/// @export",
                        "$color-white: #FFFFFF;",
                        "/// black",
                        "/// @semantic 纯黑",
                        "/// @export",
                        "$color-black: #000000;",
                        "/// transparent",
                        "/// @export",
                        "$color-transparent: transparent;",
                        "",
                        "// 线条",
                        "",
                        "/// line1-1",
                        "/// @group neutural",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-line1-1: #E6E7EB !default;",
                        "/// line1-2",
                        "/// @group neutural",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-line1-2: #DCDEE3 !default;",
                        "/// line1-3",
                        "/// @group neutural",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-line1-3: #C4C6CF !default;",
                        "/// line1-4",
                        "/// @group neutural",
                        "/// @semantic 重",
                        "/// @export",
                        "$color-line1-4: #A0A2AD !default;",
                        "",
                        "// 填充",
                        "",
                        "/// fill1-1",
                        "/// @group neutural",
                        "/// @semantic 浅",
                        "/// @export",
                        "$color-fill1-1: #F7F8FA !default;",
                        "/// fill1-2",
                        "/// @group neutural",
                        "/// @semantic 常规",
                        "/// @export",
                        "$color-fill1-2: #F2F3F7 !default;",
                        "/// fill1-3",
                        "/// @group neutural",
                        "/// @semantic 深",
                        "/// @export",
                        "$color-fill1-3: #EBECF0 !default;",
                        "/// fill1-4",
                        "/// @group neutural",
                        "/// @semantic 重",
                        "/// @export",
                        "$color-fill1-4: #E2E4E8 !default;",
                        "",
                        "// 文字",
                        "",
                        "/// text1-1",
                        "/// @group neutural",
                        "/// @semantic 禁用",
                        "/// @export",
                        "$color-text1-1: #CCCCCC !default;",
                        "/// text1-2",
                        "/// @group neutural",
                        "/// @semantic 水印/提示",
                        "/// @export",
                        "$color-text1-2: #999999 !default;",
                        "/// text1-3",
                        "/// @group neutural",
                        "/// @semantic 正文/标题",
                        "/// @export",
                        "$color-text1-3: #666666 !default;",
                        "/// text1-4",
                        "/// @group neutural",
                        "/// @semantic 正文/标题",
                        "/// @export",
                        "$color-text1-4: #333333 !default;",
                        "",
                        "",
                        "",
                        "// ----------- 数据色 ----------- //",
                        "",
                        "// 数据序列",
                        "",
                        "/// data1-1",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-1: #00DCCD !default;",
                        "/// data1-2",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-2: #506FED !default;",
                        "/// data1-3",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-3: #AE66FC !default;",
                        "/// data1-4",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-4: #FF445F !default;",
                        "/// data1-5",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-5: #FF934D !default;",
                        "/// data1-6",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-6: #FFD74D !default;",
                        "/// data1-7",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-7: #4DDE6D !default;",
                        "/// data1-8",
                        "/// @group data",
                        "/// @export",
                        "$color-data1-8: #18B1F7 !default;"
                    ]
                },
                "_corner.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module corner: 边角",
                        "/// @category style",
                        "////",
                        "",
                        "",
                        "// Corner 预定义圆角尺寸",
                        "// 根据 Alibaba Base DPL(BASE DPL)设计规范实现",
                        "// 圆角是用一段与角的两边相切的圆弧",
                        "// 规则: x == y, 所有方向阴影的 blur 值, 透明度, 颜色都应该相同",
                        "// 类型: Right Angle(直角), Rounded(圆角)",
                        "// -------------------------------",
                        "",
                        "/// corner-1",
                        "/// @semantic 常规圆角",
                        "/// @export",
                        "/// @type Length",
                        "$corner-1: 3px !default;",
                        "",
                        "/// corner-2",
                        "/// @semantic 大圆角",
                        "/// @export",
                        "/// @type Length",
                        "$corner-2: 6px !default;",
                        "",
                        "/// corner-3",
                        "/// @semantic 超大圆角",
                        "/// @export",
                        "/// @type Length",
                        "$corner-3: 20px !default;",
                        "",
                        "/// corner-circle",
                        "/// @semantic 圆形",
                        "/// @export",
                        "/// @unconfigurable",
                        "$corner-circle: 50% !default;",
                        "",
                        "/// corner-zero",
                        "/// @semantic 直角",
                        "/// @export",
                        "/// @unconfigurable",
                        "$corner-zero: 0 !default;",
                        "",
                        "// ----------- patch ----------- //",
                        "$corner-right-angle: $corner-zero;"
                    ]
                },
                "_font.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@import \"../util/_mixin.scss\";",
                        "",
                        "////",
                        "/// @module font: 字体",
                        "/// @type String",
                        "/// @category style",
                        "/// @export",
                        "////",
                        "",
                        "// Font & Typography",
                        "// 根据 Alibaba Base DPL(BASE DPL) 设计规范实现",
                        "// 字体主要解决的是内容可读性以及信息的层级表达，同时选择不同的字体来传达不同的设计风格的统一性和整体性，从而在阅读的舒适性上达到平衡。",
                        "// -------------------------------",
                        "",
                        "$font-custom-path: \"//i.alicdn.com/artascope-font/20160419204543/font/\" !default;",
                        "$font-custom-name: Roboto !default;",
                        "$font-name-thin: roboto-thin !default;",
                        "$font-name-light: roboto-light !default;",
                        "$font-name-regular: roboto-regular !default;",
                        "$font-name-medium: roboto-medium !default;",
                        "$font-name-bold: roboto-bold !default;",
                        "$font-name-bolder: roboto-bolder !default;",
                        "$font-lineheight-base: 1.2857142;",
                        "",
                        "$font-face-name-default: \"#{$font-custom-name}\";",
                        "$font-face-url-default: \"#{$font-custom-path}#{$font-name-thin}.eot\";",
                        "",
                        "// ------------------- font-face ------------------- //",
                        "",
                        "$font-face1-name: $font-face-name-default !default;",
                        "$font-face1-url: $font-face-url-default !default;",
                        "$font-face2-name: $font-face-name-default !default;",
                        "$font-face2-url: $font-face-url-default !default;",
                        "$font-face3-name: $font-face-name-default !default;",
                        "$font-face3-url: $font-face-url-default !default;",
                        "@include font-face-handler($font-face1-name, $font-face1-url);",
                        "@include font-face-handler($font-face2-name, $font-face2-url);",
                        "@include font-face-handler($font-face3-name, $font-face3-url);",
                        "",
                        "// ------------------- font-family ------------------- //",
                        "",
                        "/// family",
                        "/// @semantic 字体",
                        "/// @export",
                        "$font-family-base: Roboto, \"Helvetica Neue\", Helvetica, Tahoma, Arial, \"PingFang SC\", \"Microsoft YaHei\" !default;",
                        "",
                        "$font-family-en: Roboto, \"Helvetica Neue\", Helvetica, Tahoma, Arial !default;",
                        "$font-family-zh: \"Microsoft YaHei\", SimSun, Arial !default !default;",
                        "",
                        "// ------------------- font-weight ------------------- //",
                        "",
                        "/// light",
                        "/// @semantic 细体",
                        "/// @group weight",
                        "/// @export weight",
                        "$font-weight-1: lighter !default;",
                        "/// regular",
                        "/// @semantic 常规",
                        "/// @group weight",
                        "/// @export weight",
                        "$font-weight-2: normal !default;",
                        "/// bold",
                        "/// @semantic 粗体",
                        "/// @group weight",
                        "/// @export weight",
                        "$font-weight-3: bold !default;",
                        "",
                        "$font-weight-thin: 200 !default;",
                        "$font-weight-medium: 500 !default;",
                        "$font-weight-bolder: bolder !default;",
                        "",
                        "// ------------------- font-size ------------------- //",
                        "",
                        "/// display-3",
                        "/// @semantic 运营标题-大",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-display-3: 56px !default;",
                        "",
                        "/// display-2",
                        "/// @semantic 运营标题-中",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-display-2: 48px !default;",
                        "",
                        "/// display-1",
                        "/// @semantic 运营标题-小",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-display-1: 36px !default;",
                        "",
                        "/// headline",
                        "/// @semantic 标题-大",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-headline: 24px !default;",
                        "",
                        "/// title",
                        "/// @semantic 标题-中",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-title: 20px !default;",
                        "",
                        "/// subhead",
                        "/// @semantic 标题-小",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-subhead: 16px !default;",
                        "",
                        "/// body-2",
                        "/// @semantic 正文-强调",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-body-2: 14px !default;",
                        "",
                        "/// body-1",
                        "/// @semantic 正文-常规",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-body-1: 12px !default;",
                        "",
                        "/// caption",
                        "/// @semantic 水印文本",
                        "/// @group size",
                        "/// @export size",
                        "$font-size-caption: 12px !default;",
                        "",
                        "// ------------------- line-height ------------------- //",
                        "",
                        "/// lineheight-1",
                        "/// @semantic 密集",
                        "/// @group lineheight",
                        "/// @export lineheight",
                        "/// @type Number",
                        "$font-lineheight-1: 1.3 !default;",
                        "",
                        "/// lineheight-2",
                        "/// @semantic 常规",
                        "/// @group lineheight",
                        "/// @export lineheight",
                        "/// @type Number",
                        "$font-lineheight-2: 1.5 !default;",
                        "",
                        "/// lineheight-3",
                        "/// @semantic 宽松",
                        "/// @group lineheight",
                        "/// @export lineheight",
                        "/// @type Number",
                        "$font-lineheight-3: 1.7 !default;"
                    ]
                },
                "_global.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module global: 全局基础样式",
                        "/// @category style",
                        "////",
                        "",
                        "/// 全局命名空间前缀",
                        "/// @unconfigurable",
                        "$class-prefix: \".next\" !default;",
                        "$css-prefix: \"#{str-slice($class-prefix, 2)}-\" !default;",
                        "",
                        "/// language",
                        "/// @semantic 语言变量",
                        "/// @export",
                        "/// @unconfigurable",
                        "$language: \"zh-cn\" !default;",
                        "",
                        "// Typography",
                        "$typo-margin-bottom: .5;",
                        "",
                        "// Z-Indexes",
                        "// [...]",
                        "// -------------------------------",
                        "$z-pane:              89 !default;",
                        "$z-menu:              99 !default;",
                        "$z-select:            109 !default;",
                        "$z-dialog:            199 !default;",
                        "$z-balloon:           299 !default;",
                        "$z-loading-panel:     399 !default;",
                        "$z-tour-user:         499 !default;",
                        "$z-tour-new:          599 !default;",
                        "$z-dialog-login:      699 !default;",
                        "$z-msg:               999 !default;",
                        "",
                        "$prefix-for-webkit:    true !default;",
                        "$prefix-for-mozilla:   true !default;",
                        "$prefix-for-microsoft: true !default;",
                        "$prefix-for-opera:     true !default;",
                        "$prefix-for-spec:      true !default;"
                    ]
                },
                "_icon.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module icon: 图标",
                        "/// @type String",
                        "/// @category style",
                        "////",
                        "",
                        "// Icon",
                        "// 根据 Alibaba Base DPL 设计实现",
                        "",
                        "/// icon font path 字体路径",
                        "$icon-font-path: \"//at.alicdn.com/t/font_515771_emcns5054x3whfr\" !default;",
                        "",
                        "/// icon font name 自定义的icon font 名称",
                        "$icon-font-name: \"icon\" !default;",
                        "",
                        "$icon-font-family: #{to-upper-case(str-slice($css-prefix, 1, 1))}#{str-slice($css-prefix, 2, str-length($css-prefix) - 1)}Icon !default;",
                        "",
                        "$icon-prefix: #{$css-prefix}icon !default;",
                        "",
                        "// ------------------- 图标尺寸 ---------------------- //",
                        "",
                        "/// icon-xxs",
                        "/// @group size",
                        "/// @export size",
                        "$icon-xxs: $s-2 !default;",
                        "",
                        "/// icon-xs",
                        "/// @group size",
                        "/// @export size",
                        "$icon-xs: $s-3 !default;",
                        "",
                        "/// icon-s",
                        "/// @group size",
                        "/// @export size",
                        "$icon-s: $s-4 !default;",
                        "",
                        "/// icon-m",
                        "/// @group size",
                        "/// @export size",
                        "$icon-m: $s-5 !default;",
                        "",
                        "/// icon-l",
                        "/// @group size",
                        "/// @export size",
                        "$icon-l: $s-6 !default;",
                        "",
                        "/// icon-xl",
                        "/// @group size",
                        "/// @export size",
                        "$icon-xl: $s-8 !default;",
                        "",
                        "/// icon-xxl",
                        "/// @group size",
                        "/// @export size",
                        "$icon-xxl: $s-12 !default;",
                        "",
                        "/// icon-xxxl",
                        "/// @group size",
                        "/// @export size",
                        "$icon-xxxl: $s-16 !default;",
                        "",
                        "// ------------------- 图标 unicode 值 ---------------------- //",
                        "/// icon-content-smile",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-smile: \"\\e65f\" !default;",
                        "",
                        "/// icon-content-cry",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-cry: \"\\e65d\" !default;",
                        "",
                        "/// icon-content-success",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-success: \"\\e60a\" !default;",
                        "",
                        "/// icon-content-warning",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-warning: \"\\e60b\" !default;",
                        "",
                        "/// icon-content-prompt",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-prompt: \"\\e60c\" !default;",
                        "",
                        "/// icon-content-error",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-error: \"\\e60d\" !default;",
                        "",
                        "/// icon-content-help",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-help: \"\\e673\" !default;",
                        "",
                        "/// icon-content-clock",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-clock: \"\\e621\" !default;",
                        "",
                        "/// icon-content-success-filling",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-success-filling: \"\\e63a\" !default;",
                        "",
                        "/// icon-content-delete-filling",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-delete-filling: \"\\e623\" !default;",
                        "",
                        "/// icon-content-favorites-filling",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-favorites-filling: \"\\e60e\" !default;",
                        "",
                        "/// icon-content-add",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-add: \"\\e655\" !default;",
                        "",
                        "/// icon-content-minus",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-minus: \"\\e601\" !default;",
                        "",
                        "/// icon-content-arrow-up",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-arrow-up: \"\\e625\" !default;",
                        "",
                        "/// icon-content-arrow-down",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-arrow-down: \"\\e63d\" !default;",
                        "",
                        "/// icon-content-arrow-left",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-arrow-left: \"\\e61d\" !default;",
                        "",
                        "/// icon-content-arrow-right",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-arrow-right: \"\\e619\" !default;",
                        "",
                        "/// icon-content-arrow-double-left",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-arrow-double-left: \"\\e659\" !default;",
                        "",
                        "/// icon-content-arrow-double-right",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-arrow-double-right: \"\\e65e\" !default;",
                        "",
                        "/// icon-content-switch",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-switch: \"\\e6b3\" !default;",
                        "",
                        "/// icon-content-sorting",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-sorting: \"\\e634\" !default;",
                        "",
                        "/// icon-content-descending",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-descending: \"\\e61f\" !default;",
                        "",
                        "/// icon-content-ascending",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-ascending: \"\\e61e\" !default;",
                        "",
                        "/// icon-content-select",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-select: \"\\e632\" !default;",
                        "",
                        "/// icon-content-semi-select",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-semi-select: \"\\e633\" !default;",
                        "",
                        "/// icon-content-loading",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-loading: \"\\e646\" !default;",
                        "",
                        "/// icon-content-search",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-search: \"\\e656\" !default;",
                        "",
                        "/// icon-content-close",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-close: \"\\e626\" !default;",
                        "",
                        "/// icon-content-ellipsis",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-ellipsis: \"\\e654\" !default;",
                        "",
                        "/// icon-content-picture",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-picture: \"\\e631\" !default;",
                        "",
                        "/// icon-content-calendar",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-calendar: \"\\e607\" !default;",
                        "",
                        "/// icon-content-ashbin",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-ashbin: \"\\e639\" !default;",
                        "",
                        "/// icon-content-upload",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-upload: \"\\e7ee\" !default;",
                        "",
                        "/// icon-content-download",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-download: \"\\e628\" !default;",
                        "",
                        "/// icon-content-set",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-set: \"\\e683\" !default;",
                        "",
                        "/// icon-content-edit",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-edit: \"\\e63b\" !default;",
                        "",
                        "/// icon-content-refresh",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-refresh: \"\\e677\" !default;",
                        "",
                        "/// icon-content-filter",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-filter: \"\\e627\" !default;",
                        "",
                        "/// icon-content-attachment",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-attachment: \"\\e665\" !default;",
                        "",
                        "/// icon-content-account",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-account: \"\\e608\" !default;",
                        "",
                        "/// icon-content-email",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-email: \"\\e605\" !default;",
                        "",
                        "/// icon-content-atm",
                        "/// @group type",
                        "/// @export type",
                        "/// @unconfigurable",
                        "$icon-content-atm: \"\\e606\" !default;"
                    ]
                },
                "_line.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module line: 线条",
                        "/// @type String",
                        "/// @category style",
                        "////",
                        "",
                        "// Line",
                        "// 根据 Alibaba Base DPL(BASE DPL)",
                        "// 边框主要用于呈现元素内容区域，显示元素的操作区域；线主要用于管理和分隔列表和页面布局内的内容。以便让内容生成更好的视觉效果及空间感。",
                        "",
                        "// ************************** 公共变量, 供开发者和设计师引用 *********************** //",
                        "",
                        "/// line-zero",
                        "/// @semantic 无",
                        "/// @export size",
                        "/// @group size",
                        "/// @type Length",
                        "/// @unconfigurable",
                        "$line-zero: 0 !default;",
                        "",
                        "/// line-1",
                        "/// @semantic 细",
                        "/// @export size",
                        "/// @group size",
                        "/// @type Length",
                        "$line-1: 1px !default;",
                        "",
                        "/// line-2",
                        "/// @semantic 常规",
                        "/// @export size",
                        "/// @group size",
                        "/// @type Length",
                        "$line-2: 2px !default;",
                        "",
                        "/// line-3",
                        "/// @semantic 粗",
                        "/// @export size",
                        "/// @group size",
                        "/// @type Length",
                        "$line-3: 3px !default;",
                        "",
                        "/// line-solid",
                        "/// @export style",
                        "/// @group style",
                        "/// @unconfigurable",
                        "$line-solid: solid !default;",
                        "",
                        "/// line-dashed",
                        "/// @export style",
                        "/// @group style",
                        "/// @unconfigurable",
                        "$line-dashed: dashed !default;",
                        "",
                        "/// line-dotted",
                        "/// @export style",
                        "/// @group style",
                        "/// @unconfigurable",
                        "$line-dotted: dotted !default;",
                        "",
                        "// ----------- patch ----------- //",
                        "$line-0: $line-zero;"
                    ]
                },
                "_shadow.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@import \"./_color\";",
                        "@import \"../util/_function\";",
                        "",
                        "////",
                        "/// @module shadow: 阴影",
                        "/// @category style",
                        "////",
                        "",
                        "// Elevation & Shadow",
                        "// 根据 Alibaba Base DPL(BASE DPL)设计规范实现",
                        "// 在现实生活中，不同对象可以被堆积或粘贴起来，但是不能彼此交叉。对象自身塑造了自己的阴影并返回自己的光影。",
                        "// 规则: x == y, 所有方向阴影的 blur 值, 透明度, 颜色都应该相同",
                        "// -------------------------------",
                        "",
                        "// 变量: x, y, color, opacity, elevation",
                        "// 常量: base(45度), top, right, bottom, left",
                        "",
                        "// ---------------- 阴影方向 ---------------- //",
                        "",
                        "/// Sides Base",
                        "/// @type String",
                        "$shadow-sides-base: \"base\" !default;",
                        "/// Sides Up",
                        "/// @type String",
                        "$shadow-sides-up: \"up\" !default;",
                        "/// Sides Right",
                        "/// @type String",
                        "$shadow-sides-right: \"right\" !default;",
                        "/// Sides Down",
                        "/// @type String",
                        "$shadow-sides-down: \"down\" !default;",
                        "/// Sides Left",
                        "/// @type String",
                        "$shadow-sides-left: \"left\" !default;",
                        "",
                        "// ---------------- 阴影距离 ----------------- //",
                        "",
                        "/// Distance 1",
                        "/// @type Number",
                        "$shadow-distance-sd1: 1;",
                        "/// Distance 2",
                        "/// @type Number",
                        "$shadow-distance-sd2: 2;",
                        "/// Distance 3",
                        "/// @type Number",
                        "$shadow-distance-sd3: 3;",
                        "",
                        "// ---------------- 阴影透明度 ----------------- //",
                        "",
                        "/// Opacity 1",
                        "/// @type Number",
                        "$shadow-opacity-sd1: .12 !default;",
                        "/// Opacity 2",
                        "/// @type Number",
                        "$shadow-opacity-sd2: .12 !default;",
                        "/// Opacity 3",
                        "/// @type Number",
                        "$shadow-opacity-sd3: .12 !default;",
                        "",
                        "// ---------------- 阴影颜色 ----------------- //",
                        "",
                        "/// Color 1",
                        "/// @type Color",
                        "$shadow-color-sd1: $color-black !default;",
                        "",
                        "/// Color 2",
                        "/// @type Color",
                        "$shadow-color-sd2: $color-black !default;",
                        "",
                        "/// Color 3",
                        "/// @type Color",
                        "$shadow-color-sd3: $color-black !default;",
                        "",
                        "// 带透明度的颜色变量",
                        "$shadow-color-opacity-sd1: rgba($shadow-color-sd1, $shadow-opacity-sd1) !default;",
                        "$shadow-color-opacity-sd2: rgba($shadow-color-sd2, $shadow-opacity-sd2) !default;",
                        "$shadow-color-opacity-sd3: rgba($shadow-color-sd3, $shadow-opacity-sd3) !default;",
                        "",
                        "// ------------------ 阴影羽化值 ---------------- //",
                        "",
                        "/// Blur 1",
                        "/// @type Number",
                        "$shadow-blur-sd1: 3 !default;",
                        "",
                        "/// Blur 2",
                        "/// @type Number",
                        "$shadow-blur-sd2: 4 !default;",
                        "",
                        "/// Blur 3",
                        "/// @type Number",
                        "$shadow-blur-sd3: 5 !default;",
                        "",
                        "// ------------------ 阴影扩散值 ---------------- //",
                        "",
                        "/// Spread 1",
                        "/// @type Number",
                        "$shadow-spread-sd1: 0 !default;",
                        "",
                        "/// Spread 2",
                        "/// @type Number",
                        "$shadow-spread-sd2: 0 !default;",
                        "",
                        "/// Spread 3",
                        "/// @type Number",
                        "$shadow-spread-sd3: 0 !default;",
                        "",
                        "// ------------------ Shadow Values ---------------- //",
                        "",
                        "/// shadow-zero",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-zero: none;",
                        "",
                        "/// shadow-1",
                        "/// @semantic 阴影1-右下",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-1: shadow-maker($shadow-sides-base, $shadow-blur-sd1, $shadow-color-opacity-sd1, $shadow-distance-sd1, $shadow-distance-sd1, $shadow-spread-sd1);",
                        "",
                        "/// shadow-1-up",
                        "/// @semantic 阴影1-上",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-1-up: shadow-maker($shadow-sides-up, $shadow-blur-sd1, $shadow-color-opacity-sd1, $shadow-distance-sd1, $shadow-distance-sd1, $shadow-spread-sd1);",
                        "",
                        "/// shadow-1-right",
                        "/// @semantic 阴影1-右",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-1-right: shadow-maker($shadow-sides-right, $shadow-blur-sd1, $shadow-color-opacity-sd1, $shadow-distance-sd1, $shadow-distance-sd1, $shadow-spread-sd1);",
                        "",
                        "/// shadow-1-down",
                        "/// @semantic 阴影1-下",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-1-down: shadow-maker($shadow-sides-down, $shadow-blur-sd1, $shadow-color-opacity-sd1, $shadow-distance-sd1, $shadow-distance-sd1, $shadow-spread-sd1);",
                        "",
                        "/// shadow-1-left",
                        "/// @semantic 阴影1-左",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-1-left: shadow-maker($shadow-sides-left, $shadow-blur-sd1, $shadow-color-opacity-sd1, $shadow-distance-sd1, $shadow-distance-sd1, $shadow-spread-sd1);",
                        "",
                        "/// shadow-2",
                        "/// @semantic 阴影2-右下",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-2: shadow-maker($shadow-sides-base, $shadow-blur-sd2, $shadow-color-opacity-sd2, $shadow-distance-sd2, $shadow-distance-sd2, $shadow-spread-sd2);",
                        "/// shadow-2-up",
                        "/// @semantic 阴影2-上",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-2-up: shadow-maker($shadow-sides-up, $shadow-blur-sd2, $shadow-color-opacity-sd2, $shadow-distance-sd2, $shadow-distance-sd2, $shadow-spread-sd2);",
                        "/// shadow-2-right",
                        "/// @semantic 阴影2-右",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-2-right: shadow-maker($shadow-sides-right, $shadow-blur-sd2, $shadow-color-opacity-sd2, $shadow-distance-sd2, $shadow-distance-sd2, $shadow-spread-sd2);",
                        "/// shadow-2-down",
                        "/// @semantic 阴影2-下",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-2-down: shadow-maker($shadow-sides-down, $shadow-blur-sd2, $shadow-color-opacity-sd2, $shadow-distance-sd2, $shadow-distance-sd2, $shadow-spread-sd2);",
                        "/// shadow-2-left",
                        "/// @semantic 阴影2-左",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-2-left: shadow-maker($shadow-sides-left, $shadow-blur-sd2, $shadow-color-opacity-sd2, $shadow-distance-sd2, $shadow-distance-sd2, $shadow-spread-sd2);",
                        "",
                        "/// shadow-3",
                        "/// @semantic 阴影3-右下",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-3: shadow-maker($shadow-sides-base, $shadow-blur-sd3, $shadow-color-opacity-sd3, $shadow-distance-sd3, $shadow-distance-sd3, $shadow-spread-sd3);",
                        "/// shadow-3-up",
                        "/// @semantic 阴影3-上",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-3-up: shadow-maker($shadow-sides-up, $shadow-blur-sd3, $shadow-color-opacity-sd3, $shadow-distance-sd3, $shadow-distance-sd3, $shadow-spread-sd3);",
                        "/// shadow-3-right",
                        "/// @semantic 阴影3-右",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-3-right: shadow-maker($shadow-sides-right, $shadow-blur-sd3, $shadow-color-opacity-sd3, $shadow-distance-sd3, $shadow-distance-sd3, $shadow-spread-sd3);",
                        "/// shadow-3-down",
                        "/// @semantic 阴影3-下",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-3-down: shadow-maker($shadow-sides-down, $shadow-blur-sd3, $shadow-color-opacity-sd3, $shadow-distance-sd3, $shadow-distance-sd3, $shadow-spread-sd3);",
                        "/// shadow-3-left",
                        "/// @semantic 阴影3-左",
                        "/// @export",
                        "/// @unconfigurable",
                        "$shadow-3-left: shadow-maker($shadow-sides-left, $shadow-blur-sd3, $shadow-color-opacity-sd3, $shadow-distance-sd3, $shadow-distance-sd3, $shadow-spread-sd3);",
                        "",
                        "// ----------- patch ----------- //",
                        "$shadow-0: $shadow-zero;"
                    ]
                },
                "_size.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module size: 尺寸",
                        "/// @type String",
                        "/// @category style",
                        "////",
                        "",
                        "",
                        "/**",
                        " * 尺寸 基础尺寸",
                        " * 命名能在语义的前提下简单就尽量简单, 这里可以是 size-2x, space-2x, size-base ...",
                        " * 不过可以在语义的前提下做的更精简一些, 于是用了s2, s1等",
                        " * 可用变量: `$s1 - $s8`",
                        " * @example scss - 使用",
                        " *   .element {",
                        " *     padding: $s1 !default;",
                        " *   }",
                        " *",
                        " * @example css - CSS 输出",
                        " *   .element {",
                        " *     padding: 4px !default;",
                        " *   }",
                        " */",
                        "",
                        "/// size-base",
                        "/// @semantic 基础尺寸",
                        "/// @type Length",
                        "$size-base: 4px !default;",
                        "",
                        "/// s-zero",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-zero: 0;",
                        "",
                        "/// s-1",
                        "/// @unconfigurable",
                        "/// @export",
                        "$s-1: $size-base * 1;",
                        "",
                        "/// s-2",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-2: $size-base * 2;",
                        "",
                        "/// s-3",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-3: $size-base * 3;",
                        "",
                        "/// s-4",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-4: $size-base * 4;",
                        "",
                        "/// s-5",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-5: $size-base * 5;",
                        "",
                        "/// s-6",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-6: $size-base * 6;",
                        "",
                        "/// s-7",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-7: $size-base * 7;",
                        "",
                        "/// s-8",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-8: $size-base * 8;",
                        "",
                        "/// s-9",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-9: $size-base * 9;",
                        "",
                        "/// s-10",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-10: $size-base * 10;",
                        "",
                        "/// s-11",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-11: $size-base * 11;",
                        "",
                        "/// s-12",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-12: $size-base * 12;",
                        "",
                        "/// s-13",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-13: $size-base * 13;",
                        "",
                        "/// s-14",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-14: $size-base * 14;",
                        "",
                        "/// s-15",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-15: $size-base * 15;",
                        "",
                        "/// s-16",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-16: $size-base * 16;",
                        "",
                        "/// s-17",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-17: $size-base * 17;",
                        "",
                        "/// s-18",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-18: $size-base * 18;",
                        "",
                        "/// s-19",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-19: $size-base * 19;",
                        "",
                        "/// s-20",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-20: $size-base * 20;",
                        "",
                        "/// s-21",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-21: $size-base * 21;",
                        "",
                        "/// s-22",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-22: $size-base * 22;",
                        "",
                        "/// s-23",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-23: $size-base * 23;",
                        "",
                        "/// s-24",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-24: $size-base * 24;",
                        "",
                        "/// s-25",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-25: $size-base * 25;",
                        "",
                        "/// s-26",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-26: $size-base * 26;",
                        "",
                        "/// s-27",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-27: $size-base * 27;",
                        "",
                        "/// s-28",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-28: $size-base * 28;",
                        "",
                        "/// s-29",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-29: $size-base * 29;",
                        "",
                        "/// s-30",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-30: $size-base * 30;",
                        "",
                        "/// s-31",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-31: $size-base * 31;",
                        "",
                        "/// s-32",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-32: $size-base * 32;",
                        "",
                        "/// s-33",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-33: $size-base * 33;",
                        "",
                        "/// s-34",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-34: $size-base * 34;",
                        "",
                        "/// s-35",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-35: $size-base * 35;",
                        "",
                        "/// s-36",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-36: $size-base * 36;",
                        "",
                        "/// s-37",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-37: $size-base * 37;",
                        "",
                        "/// s-38",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-38: $size-base * 38;",
                        "",
                        "/// s-39",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-39: $size-base * 39;",
                        "",
                        "/// s-40",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-40: $size-base * 40;",
                        "",
                        "/// s-41",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-41: $size-base * 41;",
                        "",
                        "/// s-42",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-42: $size-base * 42;",
                        "",
                        "/// s-43",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-43: $size-base * 43;",
                        "",
                        "/// s-44",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-44: $size-base * 44;",
                        "",
                        "/// s-45",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-45: $size-base * 45;",
                        "",
                        "/// s-46",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-46: $size-base * 46;",
                        "",
                        "/// s-47",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-47: $size-base * 47;",
                        "",
                        "/// s-48",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-48: $size-base * 48;",
                        "",
                        "/// s-49",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-49: $size-base * 49;",
                        "",
                        "/// s-50",
                        "/// @export",
                        "/// @unconfigurable",
                        "$s-50: $size-base * 50;",
                        "",
                        "// ----------- patch ----------- //",
                        "$s-0: $s-zero;"
                    ]
                }
            },
            "util": {
                "_function.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @group utils",
                        "////",
                        "",
                        "// 去除数值单位的方法",
                        "//",
                        "// @param {String} $value",
                        "//   带单位的数值",
                        "//",
                        "// @example scss - SCSS 用法",
                        "//   $dimension: strip-units(10px);",
                        "//",
                        "// @example css - CSS 输出",
                        "//   $dimension: 10;",
                        "//",
                        "// @return {Number}",
                        "@function strip-units($value) {",
                        "    @return ($value / ($value * 0 + 1));",
                        "}",
                        "",
                        "// 检查一个值是否为合法的CSS长度",
                        "//",
                        "// @param {String} $value",
                        "// @return {Number}",
                        "@function is-length($value) {",
                        "    @return type-of($value) != \"null\" and (str-slice($value + \"\", 1, 4) == \"calc\" // 是calc函数来计算的长度",
                        "    or type-of(index(auto inherit initial 0, $value)) == 'number'",
                        "    or (type-of($value) == \"number\" and not(unitless($value))));",
                        "}",
                        "",
                        "// 将pixel单位转换为em单位",
                        "//",
                        "// @param {Number} $pxval",
                        "//   pixel单位下的数值",
                        "//",
                        "// @param {Number} $base",
                        "//   全局基础pixel单位下的字号",
                        "//",
                        "// @example scss - SCSS 用法",
                        "//   .element {",
                        "//     font-size: em(12, 14);",
                        "//   }",
                        "//",
                        "// @example css - CSS 输出",
                        "//   .element {",
                        "//     font-size: 0.85714em;",
                        "//   }",
                        "// @require {function} strip-units",
                        "// @require {variable} $font-size-body-1",
                        "//",
                        "// @return {String}",
                        "",
                        "@function em($pxval, $base: $font-size-body-1) {",
                        "    @if not unitless($pxval) {",
                        "        $pxval: strip-units($pxval);",
                        "    }",
                        "    @if not unitless($base) {",
                        "        $base: strip-units($base);",
                        "    }",
                        "    @return ($pxval / $base) * 1em;",
                        "}",
                        "",
                        "// 转化为四值属性的方法，该属性可以有 1 到 4 个值，如：margin, padding, position",
                        "//",
                        "// @param {List} $shorthand",
                        "//",
                        "// @example scss - SCSS 用法",
                        "//   .element {",
                        "//     margin: unpack(1em 2em);",
                        "//     padding: unpack(1em 2em 2em);",
                        "//   }",
                        "//",
                        "// @example css - CSS 输出",
                        "//   .element {",
                        "//     margin: 1em 2em 1em 2em;",
                        "//     padding: 1em 2em 2em 2em;",
                        "//   }",
                        "//",
                        "// @return {List}",
                        "@function unpack($shorthand) {",
                        "    @if length($shorthand) == 1 {",
                        "        @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);",
                        "    } @else if length($shorthand) == 2 {",
                        "        @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);",
                        "    } @else if length($shorthand) == 3 {",
                        "        @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);",
                        "    } @else {",
                        "        @return $shorthand;",
                        "    }",
                        "}",
                        "",
                        "// 圆角生成器",
                        "//",
                        "// @access private",
                        "//",
                        "// @param {String} $side [$corner-sides-base] - 需要加圆角的面",
                        "// @param {String} $radius [$corner-radius-base] - 圆角曲率",
                        "//",
                        "// @example scss - SCSS 用法",
                        "//   .element {",
                        "//     border-radius: corner-maker();",
                        "//   }",
                        "//",
                        "// @example css - CSS 输出",
                        "//   .element {",
                        "//     border-radius: 3px 3px 3px 3px;",
                        "//   }",
                        "//",
                        "// @return {List}",
                        "",
                        "@function corner-maker($side: $corner-sides-base, $radius: 3px) {",
                        "",
                        "    $tl: $radius;",
                        "    $tr: $radius;",
                        "    $br: $radius;",
                        "    $bl: $radius;",
                        "",
                        "    @if ($side ==  top) {",
                        "        $br: 0;",
                        "        $bl: 0;",
                        "    } @else if ($side == right) {",
                        "        $tl: 0;",
                        "        $bl: 0;",
                        "    } @else if ($side == down) {",
                        "        $tr: 0;",
                        "        $tl: 0;",
                        "    } @else if ($side == left) {",
                        "        $tr: 0;",
                        "        $br: 0;",
                        "    }",
                        "",
                        "    @return #{$tl} #{$tr} #{$br} #{$bl};",
                        "}",
                        "",
                        "// shadow 生成器",
                        "//",
                        "//",
                        "// @param {String} $direction [$shadow-sides-base] - 阴影方向",
                        "// @param {String} $blur [$shadow-blur-sd1] - 阴影羽化值",
                        "// @param {Color} $shadow-color [$shadow-color-opacity-sd1] - 阴影颜色",
                        "// @param {String} $shadow-x [$shadow-distance-sd1] - 阴影x方向距离",
                        "// @param {String} $shadow-y [$shadow-distance-sd1] - 阴影y方向距离",
                        "// @param {String} $shadow-spread [$shadow-spread-sd1] - 阴影扩散值",
                        "//",
                        "// @example scss - SCSS 用法",
                        "//   $shadow-1:  shadow-maker();",
                        "//",
                        "// @return {List}",
                        "",
                        "@function shadow-maker(",
                        "    $direction: $shadow-sides-base,",
                        "    $blur: $shadow-blur-sd1,",
                        "    $shadow-color: $shadow-color-opacity-sd1,",
                        "    $shadow-x: $shadow-distance-sd1,",
                        "    $shadow-y: $shadow-distance-sd1,",
                        "    $shadow-spread: $shadow-spread-sd1",
                        "",
                        ") {",
                        "",
                        "    $x: $shadow-x;",
                        "    $y: $shadow-y;",
                        "    $b: $blur;",
                        "    $c: $shadow-color;",
                        "    $s: $shadow-spread;",
                        "",
                        "    @if ($b == 0) {",
                        "        @return 0 0 0 #FFFFFF;",
                        "    }",
                        "",
                        "    @if ($direction == $shadow-sides-up) {",
                        "        $x: 0;",
                        "        $y: -$shadow-y;",
                        "    } @else if ($direction == $shadow-sides-right) {",
                        "        $y: 0;",
                        "    } @else if ($direction == $shadow-sides-down) {",
                        "        $x: 0;",
                        "    } @else if ($direction == $shadow-sides-left) {",
                        "        $x: -$shadow-x;",
                        "        $y: 0;",
                        "    }",
                        "",
                        "    @return #{$x}px #{$y}px #{$b}px #{$s}px $c;",
                        "}"
                    ]
                },
                "_mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @group utils",
                        "////",
                        "",
                        "/// 清除浮动",
                        "///",
                        "/// @example scss",
                        "///   .wrapper {",
                        "///      @include clearfix;",
                        "///   }",
                        "///",
                        "@mixin clearfix {",
                        "    &:after {",
                        "        visibility: hidden;",
                        "        display: block;",
                        "        height: 0;",
                        "        font-size: 0;",
                        "        content: '\\0020';",
                        "        clear: both;",
                        "    }",
                        "}",
                        "",
                        "",
                        "",
                        "/// 单行截取文字，添加『...』结尾",
                        "///",
                        "/// @param {Number | String} $width [100%] - 最大宽度，CSS长度，包括calc方法定义的表达式",
                        "///",
                        "/// @example scss - 使用",
                        "///   .element {",
                        "///     @include ellipsis;",
                        "///   }",
                        "///",
                        "/// @example css - 输出",
                        "///   .element {",
                        "///     display: inline-block;",
                        "///     max-width: 100%;",
                        "///     overflow: hidden;",
                        "///     text-overflow: ellipsis;",
                        "///    white-space: nowrap;",
                        "///     word-wrap: normal;",
                        "///   }",
                        "///",
                        "@mixin ellipsis($width: 100%) {",
                        "    display: inline-block;",
                        "    max-width: $width;",
                        "    overflow: hidden;",
                        "    text-overflow: ellipsis;",
                        "    white-space: nowrap;",
                        "    word-wrap: normal;",
                        "}",
                        "",
                        "/// 多行截取文字，添加『...』结尾",
                        "///",
                        "/// @param {Number | String} $line-height [1.2em] - 行高",
                        "/// @param {Number} $line-count [2] - 行数, 超出行数开始截取",
                        "/// @param {Color} $bg-color [#fff] - 文本背景色",
                        "///",
                        "/// @example scss - 使用",
                        "///   .element {",
                        "///     @include multi-line-ellipsis(1.2em, 3, #fff);",
                        "///   }",
                        "///",
                        "/// @example css - 输出",
                        "///   .element {",
                        "///     overflow: hidden;",
                        "///     position: relative;",
                        "///     line-height: 1.2em;",
                        "///     max-height: 3.6em;",
                        "///     text-align: justify;",
                        "///     padding-right: 0em;",
                        "///   }",
                        "///",
                        "///   .element:before {",
                        "///     content: '...';",
                        "///     position: absolute;",
                        "///     right: 0;",
                        "///     bottom: 0;",
                        "///     background: #fff;",
                        "///   }",
                        "///",
                        "///   .element:after {",
                        "///     content: '';",
                        "///     position: absolute;",
                        "///     right: 0;",
                        "///     width: 1em;",
                        "///     height: 1em;",
                        "///     margin-top: 0.2em;",
                        "///     background: #fff;",
                        "///   }",
                        "///",
                        "@mixin multi-line-ellipsis(",
                        "    $line-height: 1.2em,",
                        "    $line-count: 2,",
                        "    $bg-color: #fff",
                        ") {",
                        "    overflow: hidden;",
                        "    position: relative;",
                        "    line-height: $line-height;",
                        "    max-height: $line-height * $line-count;",
                        "    text-align: justify;",
                        "    padding-right: 0;",
                        "",
                        "    &:before {",
                        "        content: '...';",
                        "        position: absolute;",
                        "        right: 0;",
                        "        bottom: 0;",
                        "        background: $bg-color;",
                        "    }",
                        "",
                        "    &:after {",
                        "        content: '';",
                        "        position: absolute;",
                        "        right: 0;",
                        "        width: 1em;",
                        "        height: 1em;",
                        "        margin-top: .2em;",
                        "        background: $bg-color;",
                        "    }",
                        "}",
                        "",
                        "/// 隐藏文字",
                        "///",
                        "/// 『text-indent: -9999px』Hack 的替代版本",
                        "///",
                        "/// @link http://nicolasgallagher.com/another-css-image-replacement-technique",
                        "///",
                        "/// @example scss",
                        "///   .element {",
                        "///      @include hide-text;",
                        "///      background: url(logo.png);",
                        "///   }",
                        "///",
                        "@mixin hide-text {",
                        "    font: 0/0 a;",
                        "    text-shadow: none;",
                        "    color: transparent;",
                        "}",
                        "",
                        "/// 将元素垂直(水平)居中 (transform 版本)",
                        "///",
                        "/// @param {String} $inner-selector ['.inner'] - 直接子选择器名称",
                        "/// @param {Bool} $horizontal [true] - 是否水平居中",
                        "///",
                        "/// @example scss - 使用",
                        "///   .element {",
                        "///      @include center-tl;",
                        "///   }",
                        "///",
                        "/// @example css - 输出",
                        "///   .element {",
                        "///       position: relative;",
                        "///   }",
                        "///",
                        "///   .element > .inner {",
                        "///       position: absolute;",
                        "///       top: 50%;",
                        "///       left: 50%;",
                        "///       transform: translate(-50%, -50%);",
                        "///   }",
                        "///",
                        "@mixin center-tl(",
                        "    $inner-selector: '.inner',",
                        "    $horizontal: true",
                        ") {",
                        "",
                        "    position: relative;",
                        "",
                        "    & > #{$inner-selector} {",
                        "        position: absolute;",
                        "        top: 50%;",
                        "        $translate-val: translateY(-50%);",
                        "",
                        "        @if $horizontal {",
                        "            left: 50%;",
                        "            $translate-val: translate(-50%, -50%);",
                        "        }",
                        "",
                        "        transform: $translate-val;",
                        "    }",
                        "}",
                        "",
                        "/// 将元素垂直(水平)居中 (table 版本)",
                        "///",
                        "/// @param {String} $inner-selector ['.inner'] - 直接子选择器名称",
                        "/// @param {Bool} $horizontal [true] - 是否水平居中",
                        "///",
                        "/// @example scss - 使用",
                        "///   .element {",
                        "///     @include center-td;",
                        "///   }",
                        "///",
                        "/// @example css - 输出",
                        "///   .element {",
                        "///       text-align: center;",
                        "///       display: table;",
                        "///   }",
                        "///",
                        "///   .element > .inner {",
                        "///       display: table-cell;",
                        "///       vertical-align: middle;",
                        "///   }",
                        "///",
                        "@mixin center-td(",
                        "    $inner-selector: '.inner',",
                        "    $horizontal: true",
                        ") {",
                        "",
                        "    @if $horizontal {",
                        "        text-align: center;",
                        "    }",
                        "",
                        "    display: table;",
                        "",
                        "    & > #{$inner-selector} {",
                        "        display: table-cell;",
                        "        vertical-align: middle;",
                        "    }",
                        "}",
                        "",
                        "/// 快捷设置元素width,height的方法",
                        "///",
                        "/// @param {String | List} $size - CSS尺寸长度",
                        "///",
                        "/// @example scss - 使用",
                        "///   .element {",
                        "///     @include size(2em 4em);",
                        "///   }",
                        "///",
                        "/// @example css - 输出",
                        "///   .element {",
                        "///     width: 2em;",
                        "///     height: 4em;",
                        "///   }",
                        "///",
                        "@mixin size($size) {",
                        "",
                        "    @if length($size) == 1 {",
                        "        width: $size;",
                        "        height: $size;",
                        "    } @else if length($size) == 2 {",
                        "        width: nth($size, 1);",
                        "        height: nth($size, 2);",
                        "    }",
                        "}",
                        "",
                        "// 快捷设置元素postion的方法 (传入null参数可略过一个方位)",
                        "//",
                        "// @param {String} $position [relative]",
                        "//   CSS position属性值",
                        "//",
                        "// @param {List} $coordinates [null null null null]",
                        "//   上、右、下、左 四个边值，可以传入1 ~ 4个值",
                        "//",
                        "// @example scss - 使用",
                        "//   .element {",
                        "//     @include position(absolute, 0 null null 10px);",
                        "//   }",
                        "//",
                        "// @example css - 输出",
                        "//   .element {",
                        "//     position: absolute;",
                        "//     left: 10px;",
                        "//     top: 0;",
                        "//   }",
                        "//",
                        "// @require {function} is-length",
                        "// @require {function} unpack",
                        "@mixin position($position: relative, $coordinates: null null null null) {",
                        "",
                        "    // 如果参数是数组",
                        "    @if type-of($position) == list {",
                        "        $coordinates: $position;",
                        "        $position: relative;",
                        "    }",
                        "",
                        "    $coordinates: unpack($coordinates);",
                        "",
                        "    $offsets: (",
                        "        top: nth($coordinates, 1),",
                        "        right: nth($coordinates, 2),",
                        "        bottom: nth($coordinates, 3),",
                        "        left: nth($coordinates, 4)",
                        "    );",
                        "",
                        "    position: $position;",
                        "",
                        "    @each $offset, $value in $offsets {",
                        "",
                        "        // 如果是合法长度",
                        "        @if is-length($value) {",
                        "            #{$offset}: $value;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 三角型生成器(8种形态)",
                        "//",
                        "// @param {Number | List} $size",
                        "//   三角形尺寸",
                        "//   传入一个参数，生成等宽高三角形；传入数组且长度为2，第一个设置宽度，第二个设置高度",
                        "//",
                        "// @param {String | List} $color",
                        "//   传入一个参数，设置三角形颜色；传入数组且长度为2，第一个设置三角形颜色，第二个设置背景色",
                        "//",
                        "// @param {String} $direction",
                        "//   三角形朝向，可传参数：up | down | right | left | up-right | up-left | down-right | down-left | inset-up | inset-down | inset-left | inset-right",
                        "//",
                        "// @example scss - 使用",
                        "//   .element {",
                        "//     &:before {",
                        "//       content: \" \";",
                        "//       @include triangle(100px 200px, blue, up);",
                        "//     }",
                        "//   }",
                        "//",
                        "// @example css - 输出",
                        "//   .example:before {",
                        "//     content: \" \";",
                        "//     height: 0;",
                        "//     width: 0;",
                        "//     border-bottom: 200px solid blue;",
                        "//     border-left: 50px solid transparent;",
                        "//     border-right: 50px solid transparent;",
                        "//   }",
                        "//",
                        "@mixin triangle($size, $color, $direction) {",
                        "    $width: nth($size, 1);",
                        "    $height: nth($size, length($size));",
                        "    $foreground-color: nth($color, 1);",
                        "    $background-color: if(length($color) == 2, nth($color, 2), transparent);",
                        "    height: 0;",
                        "    width: 0;",
                        "",
                        "    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {",
                        "        $width: $width / 2;",
                        "        $height: if(length($size) > 1, $height, $height/2);",
                        "",
                        "        @if $direction == up {",
                        "            border-bottom: $height solid $foreground-color;",
                        "            border-left: $width solid $background-color;",
                        "            border-right: $width solid $background-color;",
                        "        } @else if $direction == right {",
                        "            border-bottom: $width solid $background-color;",
                        "            border-left: $height solid $foreground-color;",
                        "            border-top: $width solid $background-color;",
                        "        } @else if $direction == down {",
                        "            border-left: $width solid $background-color;",
                        "            border-right: $width solid $background-color;",
                        "            border-top: $height solid $foreground-color;",
                        "        } @else if $direction == left {",
                        "            border-bottom: $width solid $background-color;",
                        "            border-right: $height solid $foreground-color;",
                        "            border-top: $width solid $background-color;",
                        "        }",
                        "    } @else if ($direction == up-right) or ($direction == up-left) {",
                        "        border-top: $height solid $foreground-color;",
                        "",
                        "        @if $direction == up-right {",
                        "            border-left: $width solid $background-color;",
                        "        } @else if $direction == up-left {",
                        "            border-right: $width solid $background-color;",
                        "        }",
                        "    } @else if ($direction == down-right) or ($direction == down-left) {",
                        "        border-bottom: $height solid $foreground-color;",
                        "",
                        "        @if $direction == down-right {",
                        "            border-left: $width solid $background-color;",
                        "        } @else if $direction == down-left {",
                        "            border-right: $width solid $background-color;",
                        "        }",
                        "    } @else if ($direction == inset-up) {",
                        "        border-color: $background-color $background-color $foreground-color;",
                        "        border-style: solid;",
                        "        border-width: $height $width;",
                        "    } @else if ($direction == inset-down) {",
                        "        border-color: $foreground-color $background-color $background-color;",
                        "        border-style: solid;",
                        "        border-width: $height $width;",
                        "    } @else if ($direction == inset-right) {",
                        "        border-color: $background-color $background-color $background-color $foreground-color;",
                        "        border-style: solid;",
                        "        border-width: $width $height;",
                        "    } @else if ($direction == inset-left) {",
                        "        border-color: $background-color $foreground-color $background-color $background-color;",
                        "        border-style: solid;",
                        "        border-width: $width $height;",
                        "    }",
                        "}",
                        "",
                        "@mixin box-sizing {",
                        "    box-sizing: border-box;",
                        "    *,",
                        "    *:before,",
                        "    *:after {",
                        "        box-sizing: border-box;",
                        "    }",
                        "}",
                        "",
                        "@mixin icon-size($size, $marginLeft: false, $marginRight: false, $transform: false) {",
                        "    @if ($transform) {",
                        "        transform: $transform;",
                        "    }",
                        "    @if ($marginLeft) {",
                        "        margin-left: $marginLeft;",
                        "    }",
                        "    @if ($marginRight) {",
                        "        margin-right: $marginRight;",
                        "    }",
                        "",
                        "    &:before {",
                        "        width: $size;",
                        "        font-size: $size;",
                        "        line-height: inherit;",
                        "    }",
                        "",
                        "    // Chrome不支持小于12px的字体，故采用缩放的方式缩小字体",
                        "    @if ($size < 12) {",
                        "        @media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm) {",
                        "            @if ($transform) {",
                        "                transform: scale($size / $icon-s) $transform;",
                        "            } @else {",
                        "                transform: scale($size / $icon-s);",
                        "            }",
                        "            @if ($marginLeft) {",
                        "                margin-left: $marginLeft - ($icon-s - $size) / 2;",
                        "            } @else {",
                        "                margin-left: -($icon-s - $size) / 2;",
                        "            }",
                        "            @if ($marginRight) {",
                        "                margin-right: $marginRight - ($icon-s - $size) / 2;",
                        "            } @else {",
                        "                margin-right: -($icon-s - $size) / 2;",
                        "            }",
                        "",
                        "            &:before {",
                        "                width: $icon-s;",
                        "                font-size: $icon-s;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin icon-square-size($size, $marginTop: false, $marginRight: false, $marginBottom: false, $marginLeft: false, $transform: false) {",
                        "    @if ($transform) {",
                        "        transform: $transform;",
                        "    }",
                        "    @if ($marginTop) {",
                        "        margin-top: $marginTop;",
                        "    }",
                        "    @if ($marginRight) {",
                        "        margin-right: $marginRight;",
                        "    }",
                        "    @if ($marginBottom) {",
                        "        margin-bottom: $marginBottom;",
                        "    }",
                        "    @if ($marginLeft) {",
                        "        margin-left: $marginLeft;",
                        "    }",
                        "",
                        "    width: $size;",
                        "    height: $size;",
                        "    line-height: $size;",
                        "",
                        "    &:before {",
                        "        width: $size;",
                        "        height: $size;",
                        "        font-size: $size;",
                        "        line-height: $size;",
                        "    }",
                        "",
                        "    // Chrome不支持小于12px的字体，故采用缩放的方式缩小字体",
                        "    @if ($size < 12) {",
                        "        @media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm) {",
                        "            @if ($transform) {",
                        "                transform: scale($size / $icon-s) $transform;",
                        "            } @else {",
                        "                transform: scale($size / $icon-s);",
                        "            }",
                        "            @if ($marginTop) {",
                        "                margin-top: $marginTop - ($icon-s - $size) / 2;",
                        "            } @else {",
                        "                margin-top: -($icon-s - $size) / 2;",
                        "            }",
                        "            @if ($marginRight) {",
                        "                margin-right: $marginRight - ($icon-s - $size) / 2;",
                        "            } @else {",
                        "                margin-right: -($icon-s - $size) / 2;",
                        "            }",
                        "            @if ($marginBottom) {",
                        "                margin-bottom: $marginBottom - ($icon-s - $size) / 2;",
                        "            } @else {",
                        "                margin-bottom: -($icon-s - $size) / 2;",
                        "            }",
                        "            @if ($marginLeft) {",
                        "                margin-left: $marginLeft - ($icon-s - $size) / 2;",
                        "            } @else {",
                        "                margin-left: -($icon-s - $size) / 2;",
                        "            }",
                        "",
                        "            width: $icon-s;",
                        "            height: $icon-s;",
                        "            line-height: $icon-s;",
                        "",
                        "            &:before {",
                        "                width: $icon-s;",
                        "                height: $icon-s;",
                        "                font-size: $icon-s;",
                        "                line-height: $icon-s;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin font-face-handler($name, $url) {",
                        "    @if ($name != Roboto) {",
                        "        @font-face {",
                        "            font-family: \"#{$name}\";",
                        "            src: url(\"#{$url}\");",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "/// 设置 button 外观颜色",
                        "///",
                        "/// @param {String} $color 字体色",
                        "/// @param {String} $color-hover 鼠标悬浮时的字体色",
                        "/// @param {String} $bg-color 背景色",
                        "/// @param {String} $bg-color-hover 鼠标悬浮时的背景色",
                        "/// @param {String} $border-color 边框色",
                        "/// @param {String} $border-color-hover 鼠标悬浮时的边框色",
                        "@mixin button-color($color, $color-hover, $bg-color: transparent, $bg-color-hover: transparent, $border-color: transparent, $border-color-hover: transparent) {",
                        "    background-color: $bg-color;",
                        "    border-color: $border-color;",
                        "",
                        "    &,",
                        "    &:link,",
                        "    &:visited,",
                        "    &.visited {",
                        "        color: $color;",
                        "    }",
                        "",
                        "    &:focus,",
                        "    &:hover,",
                        "    &.hover,",
                        "    &:active,",
                        "    &.active {",
                        "        color: $color-hover;",
                        "        background-color: $bg-color-hover;",
                        "        border-color: $border-color-hover;",
                        "        text-decoration: none;",
                        "    }",
                        "}",
                        "",
                        "/// 设置 button 大小",
                        "///",
                        "/// @param {Number} $padding 内边距",
                        "/// @param {Number} $height 高度",
                        "/// @param {Number} $font-size 字体大小",
                        "/// @param {Number} $border-width 边框宽度",
                        "@mixin button-size($padding, $height, $font-size, $border-width) {",
                        "    padding: 0 $padding;",
                        "    height: $height;",
                        "    line-height: $height - 2 * $border-width;",
                        "    font-size: $font-size;",
                        "    border-width: $border-width;",
                        "}"
                    ]
                }
            },
            "utility": {
                "_form-element.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @group form-element",
                        "/// @module form-element: 表单通用",
                        "/// @type String",
                        "/// @tag form-element",
                        "/// @category utility",
                        "/// @family form-element",
                        "/// @varPrefix $form-element-",
                        "/// @classPrefix {prefix}-form-element",
                        "////",
                        "",
                        "/// height",
                        "/// @semantic 小号组件高度",
                        "$form-element-small-height: $s-5 !default;",
                        "",
                        "/// height",
                        "/// @semantic 中号组件高度",
                        "$form-element-medium-height: $s-7 !default;",
                        "",
                        "/// height",
                        "/// @semantic 大号组件高度",
                        "$form-element-large-height: $s-10 !default;",
                        "",
                        "/// text",
                        "/// @semantic 小号组件字体",
                        "$form-element-small-font-size: $font-size-caption !default;",
                        "",
                        "/// text",
                        "/// @semantic 中号组件字体",
                        "$form-element-medium-font-size: $font-size-body-1 !default;",
                        "",
                        "/// text",
                        "/// @semantic 大号组件字体",
                        "$form-element-large-font-size: $font-size-subhead !default;",
                        "",
                        "/// icon",
                        "/// @semantic 小号组件 icon",
                        "$form-element-small-icon-size: $icon-xs !default;",
                        "",
                        "/// icon",
                        "/// @semantic 中号组件 icon",
                        "$form-element-medium-icon-size: $icon-xs !default;",
                        "",
                        "/// icon",
                        "/// @semantic 大号组件 icon",
                        "$form-element-large-icon-size: $icon-s !default;",
                        "",
                        "/// corner",
                        "/// @semantic 小号组件圆角",
                        "$form-element-small-corner: $corner-1 !default;",
                        "",
                        "/// corner",
                        "/// @semantic 中号组件圆角",
                        "$form-element-medium-corner: $corner-1 !default;",
                        "",
                        "/// corner",
                        "/// @semantic 大号组件圆角",
                        "$form-element-large-corner: $corner-1 !default;"
                    ]
                },
                "_mask.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @group mask",
                        "/// @module mask: 遮罩通用",
                        "/// @type String",
                        "/// @tag mask",
                        "/// @category utility",
                        "/// @family mask",
                        "/// @varPrefix $mask-",
                        "/// @classPrefix {prefix}-mask",
                        "////",
                        "",
                        "",
                        "/// background",
                        "/// @semantic 背景颜色",
                        "$mask-background: $color-black !default;",
                        "",
                        "/// opacity",
                        "/// @type alpha",
                        "/// @semantic 透明度",
                        "$mask-opacity: .2 !default;"
                    ]
                },
                "_popup.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @group popup",
                        "/// @module popup: 弹层通用",
                        "/// @type String",
                        "/// @tag popup",
                        "/// @category utility",
                        "/// @family popup",
                        "/// @varPrefix $popup-",
                        "/// @classPrefix {prefix}-popup",
                        "////",
                        "",
                        "",
                        "/// border width",
                        "/// @semantic 边框宽度",
                        "$popup-local-border-width: $line-1 !default;",
                        "",
                        "/// border style",
                        "/// @semantic 边框样式",
                        "$popup-local-border-style: $line-solid !default;",
                        "",
                        "/// border color",
                        "/// @semantic 边框颜色",
                        "$popup-local-border-color: $color-line1-2 !default;",
                        "",
                        "/// corner",
                        "/// @semantic 圆角",
                        "$popup-local-corner: $corner-1 !default;",
                        "",
                        "/// shadow",
                        "/// @semantic 阴影",
                        "$popup-local-shadow: $shadow-zero !default;",
                        "",
                        "/// border width",
                        "/// @semantic 边框宽度",
                        "$popup-global-border-width: $line-zero !default;",
                        "",
                        "/// border style",
                        "/// @semantic 边框样式",
                        "$popup-global-border-style: $line-solid !default;",
                        "",
                        "/// border color",
                        "/// @semantic 边框颜色",
                        "$popup-global-border-color: $color-line1-2 !default;",
                        "",
                        "/// corner",
                        "/// @semantic 圆角",
                        "$popup-global-corner: $corner-1 !default;",
                        "",
                        "/// shadow",
                        "/// @semantic 阴影",
                        "$popup-global-shadow: $shadow-2-down !default;"
                    ]
                }
            }
        },
        "date-picker": {
            "date-picker.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import moment from 'moment';",
                    "import Overlay from '../overlay';",
                    "import Input from '../input';",
                    "import Calendar from '../calendar';",
                    "import TimePickerPanel from '../time-picker/panel';",
                    "import nextLocale from '../locale/zh-cn';",
                    "import { func, obj } from '../util';",
                    "import { PANEL, resetValueTime, checkDateValue, formatDateValue, getDateTimeFormat, extend } from './util';",
                    "import PanelFooter from './module/panel-footer';",
                    "",
                    "const { Popup } = Overlay;",
                    "",
                    "/**",
                    " * DatePicker",
                    " */",
                    "export default class DatePicker extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 输入框内置标签",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 输入框状态",
                    "         */",
                    "        state: PropTypes.oneOf(['success', 'error']),",
                    "        /**",
                    "         * 输入提示",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 默认展现的月",
                    "         * @return {MomentObject} 返回包含指定月份的 moment 对象实例",
                    "         */",
                    "        defaultVisibleMonth: PropTypes.func,",
                    "        onVisibleMonthChange: PropTypes.func,",
                    "        /**",
                    "         * 日期值（受控）moment 对象",
                    "         */",
                    "        value: checkDateValue,",
                    "        /**",
                    "         * 初始日期值，moment 对象",
                    "         */",
                    "        defaultValue: checkDateValue,",
                    "        /**",
                    "         * 日期值的格式（用于限定用户输入和展示）",
                    "         */",
                    "        format: PropTypes.string,",
                    "        /**",
                    "         * 是否使用时间控件，传入 TimePicker 的属性 { defaultValue, format, ... }",
                    "         */",
                    "        showTime: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),",
                    "        /**",
                    "         * 每次选择日期时是否重置时间（仅在 showTime 开启时有效）",
                    "         */",
                    "        resetTime: PropTypes.bool,",
                    "        /**",
                    "         * 禁用日期函数",
                    "         * @param {MomentObject} 日期值",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledDate: PropTypes.func,",
                    "        /**",
                    "         * 自定义面板页脚",
                    "         * @return {Node} 自定义的面板页脚组件",
                    "         */",
                    "        footerRender: PropTypes.func,",
                    "        /**",
                    "         * 日期值改变时的回调",
                    "         * @param {MomentObject|String} value 日期值",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 点击确认按钮时的回调",
                    "         * @return {MomentObject|String} 日期值",
                    "         */",
                    "        onOk: PropTypes.func,",
                    "        /**",
                    "         * 输入框尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示清空按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示状态",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层展示状态变化时的回调",
                    "         * @param {Boolean} visible 弹层是否显示",
                    "         * @param {String} reason 触发弹层显示和隐藏的来源",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层触发方式",
                    "         */",
                    "        popupTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 弹层对齐方式,具体含义见 OverLay文档",
                    "         */",
                    "        popupAlign: PropTypes.string,",
                    "        /**",
                    "         * 弹层容器",
                    "         * @param {Element} target 目标元素",
                    "         * @return {Element} 弹层的容器元素",
                    "         */",
                    "        popupContainer: PropTypes.func,",
                    "        /**",
                    "         * 弹层自定义样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层自定义样式类",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层其他属性",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        locale: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "        format: 'YYYY-MM-DD',",
                    "        size: 'medium',",
                    "        showTime: false,",
                    "        resetTime: false,",
                    "        disabledDate: () => false,",
                    "        footerRender: () => null,",
                    "        hasClear: true,",
                    "        popupTriggerType: 'click',",
                    "        popupAlign: 'tl tl',",
                    "        locale: nextLocale.DatePicker,",
                    "        onChange: func.noop,",
                    "        onVisibleChange: func.noop,",
                    "        onOk: func.noop,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        const dateTimeFormat = getDateTimeFormat(props.format, props.showTime);",
                    "        extend(dateTimeFormat, this);",
                    "",
                    "        const value = formatDateValue(props.value || props.defaultValue, this.dateTimeFormat);",
                    "        this.inputAsString = (typeof (props.value || props.defaultValue) === 'string'); // 判断用户输入是否是字符串",
                    "        this.state = {",
                    "            value,",
                    "            dateInputStr: '',",
                    "            timeInputStr: '',",
                    "            inputing: false, // 当前是否处于输入状态",
                    "            visible: props.visible || props.defaultVisible,",
                    "            panel: PANEL.DATE,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('showTime' in nextProps) {",
                    "            const dateTimeFormat = getDateTimeFormat(nextProps.format || this.props.format, nextProps.showTime);",
                    "            extend(dateTimeFormat, this);",
                    "        }",
                    "",
                    "        if ('value' in nextProps) {",
                    "            const value = formatDateValue(nextProps.value, this.dateTimeFormat);",
                    "            this.setState({",
                    "                value,",
                    "            });",
                    "            this.inputAsString = typeof nextProps.value === 'string';",
                    "        }",
                    "",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onValueChange = (newValue, handler = 'onChange') => {",
                    "        const ret = (this.inputAsString && newValue) ? newValue.format(this.dateTimeFormat) : newValue;",
                    "        this.props[handler](ret);",
                    "    }",
                    "",
                    "    onSelectCalendarPanel = (value) => {",
                    "        const { showTime, resetTime } = this.props;",
                    "",
                    "        const prevValue = this.state.value;",
                    "        let newValue = value;",
                    "        if (showTime) {",
                    "            if (!prevValue) {",
                    "                // 第一次选择日期值时，如果设置了默认时间，则使用该默认时间",
                    "                if (showTime.defaultValue) {",
                    "                    const defaultTimeValue = formatDateValue(showTime.defaultValue, this.timeFormat);",
                    "                    newValue = resetValueTime(value, defaultTimeValue);",
                    "                }",
                    "            } else if (!resetTime) {",
                    "                // 非第一选择日期，如果开启了 resetTime 属性，则记住之前选择的时间值",
                    "                newValue = resetValueTime(value, prevValue);",
                    "            }",
                    "        }",
                    "",
                    "        this.handleChange(newValue, prevValue, {inputing: false});",
                    "",
                    "        if (!showTime) {",
                    "            this.onVisibleChange(false, 'calendarSelect');",
                    "        }",
                    "    }",
                    "",
                    "    onSelectTimePanel = (value) => {",
                    "        this.handleChange(value, this.state.value, {inputing: false});",
                    "    }",
                    "",
                    "    clearValue = () => {",
                    "        this.setState({",
                    "            dateInputStr: '',",
                    "            timeInputStr: '',",
                    "        });",
                    "",
                    "        this.handleChange(null, this.state.value, {inputing: false});",
                    "    }",
                    "",
                    "    onDateInputChange = (inputStr, e, eventType) => {",
                    "        if (eventType === 'clear' || !inputStr) {",
                    "            e.stopPropagation();",
                    "            this.clearValue();",
                    "        } else {",
                    "            this.setState({",
                    "                dateInputStr: inputStr,",
                    "                inputing: 'date',",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onTimeInputChange = (inputStr) => {",
                    "        this.setState({",
                    "            timeInputStr: inputStr,",
                    "            inputing: 'time',",
                    "        });",
                    "    }",
                    "",
                    "    onDateInputBlur = () => {",
                    "        const { dateInputStr } = this.state;",
                    "        if (dateInputStr) {",
                    "            const { disabledDate } = this.props;",
                    "            const parsed = moment(dateInputStr, this.format, true);",
                    "",
                    "            this.setState({",
                    "                dateInputStr: '',",
                    "                inputing: false,",
                    "            });",
                    "",
                    "            if (parsed.isValid() && !disabledDate(parsed)) {",
                    "                this.handleChange(parsed, this.state.value);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    onTimeInputBlur = () => {",
                    "        const { value, timeInputStr } = this.state;",
                    "        if (timeInputStr) {",
                    "            const parsed = moment(timeInputStr, this.timeFormat, true);",
                    "",
                    "            this.setState({",
                    "                timeInputStr: '',",
                    "                inputing: false,",
                    "            });",
                    "",
                    "            if (parsed.isValid()) {",
                    "                const hour = parsed.hour();",
                    "                const minute = parsed.minute();",
                    "                const second = parsed.second();",
                    "                const newValue = value.clone().hour(hour).minute(minute).second(second);",
                    "",
                    "                this.handleChange(newValue, this.state.value);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    handleChange = (newValue, prevValue, others = {}) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value: newValue,",
                    "                ...others",
                    "            });",
                    "        }",
                    "",
                    "        const newValueOf = newValue ? newValue.valueOf() : null;",
                    "        const preValueOf = prevValue ? prevValue.valueOf() : null;",
                    "",
                    "        if (newValueOf !== preValueOf) {",
                    "            this.onValueChange(newValue);",
                    "        }",
                    "    }",
                    "",
                    "    onFoucsDateInput = () => {",
                    "        if (this.state.panel !== PANEL.DATE) {",
                    "            this.setState({",
                    "                panel: PANEL.DATE,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onFoucsTimeInput = () => {",
                    "        if (this.state.panel !== PANEL.TIME) {",
                    "            this.setState({",
                    "                panel: PANEL.TIME,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onVisibleChange = (visible, reason) => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible,",
                    "            });",
                    "        }",
                    "        this.props.onVisibleChange(visible, reason);",
                    "    }",
                    "",
                    "    changePanel = (panel) => {",
                    "        this.setState({",
                    "            panel,",
                    "        });",
                    "    }",
                    "",
                    "    onOk = () => {",
                    "        this.onVisibleChange(false, 'okBtnClick');",
                    "        this.onValueChange(this.state.value, 'onOk');",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            rtl,",
                    "            locale,",
                    "            label,",
                    "            state,",
                    "            defaultVisibleMonth,",
                    "            onVisibleMonthChange,",
                    "            showTime,",
                    "            disabledDate,",
                    "            footerRender,",
                    "            placeholder,",
                    "            size,",
                    "            disabled,",
                    "            hasClear,",
                    "            popupTriggerType,",
                    "            popupAlign,",
                    "            popupContainer,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupProps,",
                    "            className,",
                    "            ...others",
                    "        } = this.props;",
                    "",
                    "        const { visible, value, dateInputStr, timeInputStr, panel, inputing } = this.state;",
                    "",
                    "        const datePickerCls = classnames({",
                    "            [`${prefix}date-picker`]: true,",
                    "        }, className);",
                    "",
                    "        const triggerInputCls = classnames({",
                    "            [`${prefix}date-picker-input`]: true,",
                    "            [`${prefix}error`]: false,",
                    "        });",
                    "",
                    "        const panelBodyClassName = classnames({",
                    "            [`${prefix}date-picker-body`]: true,",
                    "            [`${prefix}date-picker-body-show-time`]: showTime,",
                    "        });",
                    "",
                    "        const panelDateInputCls = classnames({",
                    "            [`${prefix}date-picker-panel-input`]: true,",
                    "            [`${prefix}focus`]: panel === PANEL.DATE,",
                    "        });",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const sharedInputProps = {",
                    "            size,",
                    "            disabled,",
                    "            onChange: this.onDateInputChange,",
                    "            onBlur: this.onDateInputBlur,",
                    "            onPressEnter: this.onDateInputBlur,",
                    "        };",
                    "",
                    "        const dateInputValue = inputing === 'date' ? dateInputStr : ((value && value.format(this.format)) || '');",
                    "        let triggerInputValue = dateInputValue;",
                    "",
                    "        const dateInput = (<Input",
                    "            {...sharedInputProps}",
                    "            value={dateInputValue}",
                    "            onFocus={this.onFoucsDateInput}",
                    "            placeholder={this.format}",
                    "            className={panelDateInputCls} />);",
                    "",
                    "        const datePanel = (<Calendar",
                    "            shape=\"panel\"",
                    "            value={value}",
                    "            format={this.format}",
                    "            onSelect={this.onSelectCalendarPanel}",
                    "            defaultVisibleMonth={defaultVisibleMonth}",
                    "            onVisibleMonthChange={onVisibleMonthChange}",
                    "            disabledDate={disabledDate} />);",
                    "",
                    "        let panelFooter = footerRender();",
                    "",
                    "        let timeInput = null;",
                    "        let timePanel = null;",
                    "",
                    "        if (showTime) {",
                    "            const timeInputValue = inputing === 'time' ? timeInputStr : ((value && value.format(this.timeFormat)) || '');",
                    "            triggerInputValue = value && value.format(this.dateTimeFormat) || '';",
                    "",
                    "            const timePanelProps = typeof showTime === 'object' ? showTime : {};",
                    "",
                    "            const showSecond = this.timeFormat.indexOf('s') > -1;",
                    "",
                    "            const panelTimeInputCls = classnames({",
                    "                [`${prefix}date-picker-panel-input`]: true,",
                    "                [`${prefix}focus`]: panel === PANEL.TIME,",
                    "            });",
                    "",
                    "            timeInput = (<Input",
                    "                placeholder={this.timeFormat}",
                    "                value={timeInputValue}",
                    "                size={size}",
                    "                disabled={disabled || !value}",
                    "                onChange={this.onTimeInputChange}",
                    "                onFocus={this.onFoucsTimeInput}",
                    "                onBlur={this.onTimeInputBlur}",
                    "                onPressEnter={this.onTimeInputBlur}",
                    "                className={panelTimeInputCls} />);",
                    "",
                    "            timePanel = (<TimePickerPanel",
                    "                {...timePanelProps}",
                    "                locale={locale}",
                    "                className={`${prefix}date-picker-panel-time`}",
                    "                showSecond={showSecond}",
                    "                disabled={disabled}",
                    "                prefix={prefix}",
                    "                value={value}",
                    "                onSelect={this.onSelectTimePanel} />);",
                    "",
                    "            panelFooter = panelFooter || (<PanelFooter",
                    "                prefix={prefix}",
                    "                locale={locale}",
                    "                value={value}",
                    "                panel={panel}",
                    "                onPanelChange={this.changePanel}",
                    "                onOk={this.onOk} />);",
                    "        }",
                    "",
                    "        const panelBody = ({",
                    "            [PANEL.DATE]: datePanel,",
                    "            [PANEL.TIME]: timePanel,",
                    "        })[panel];",
                    "",
                    "        const allowClear = value && hasClear;",
                    "        const trigger = (<div className={`${prefix}date-picker-trigger`}>",
                    "            <Input",
                    "                {...sharedInputProps}",
                    "                label={label}",
                    "                state={state}",
                    "                value={triggerInputValue}",
                    "                placeholder={placeholder || (showTime ? locale.datetimePlaceholder : locale.placeholder)}",
                    "                hint=\"calendar\"",
                    "                hasClear={allowClear}",
                    "                className={triggerInputCls} />",
                    "        </div>);",
                    "        return (<div {...obj.pickOthers(DatePicker.propTypes, others)} className={datePickerCls}>",
                    "            <Popup",
                    "                {...popupProps}",
                    "                disabled={disabled}",
                    "                visible={visible}",
                    "                onVisibleChange={this.onVisibleChange}",
                    "                align={popupAlign}",
                    "                triggerType={popupTriggerType}",
                    "                container={popupContainer}",
                    "                style={popupStyle}",
                    "                className={popupClassName}",
                    "                trigger={trigger}>",
                    "                <div dir={others.dir} className={panelBodyClassName}>",
                    "                    <div className={`${prefix}date-picker-panel-header`}>",
                    "                        {dateInput}",
                    "                        {timeInput}",
                    "                    </div>",
                    "                    {panelBody}",
                    "                    {panelFooter}",
                    "                </div>",
                    "            </Popup>",
                    "        </div>);",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import DatePicker from './date-picker';",
                    "import RangePicker from './range-picker';",
                    "import MonthPicker from './month-picker';",
                    "import YearPicker from './year-picker';",
                    "",
                    "/* istanbul ignore next */",
                    "const transform = (props, deprecated) => {",
                    "    const { open, defaultOpen, onOpenChange,  ...others } = props;",
                    "    const newProps = others;",
                    "",
                    "    delete newProps.formater;",
                    "",
                    "    if ('open' in props) {",
                    "        deprecated('open', 'visible', 'DatePicker');",
                    "",
                    "        newProps.visible = open;",
                    "",
                    "        if ('visible' in props) {",
                    "            newProps.visible = props.visible;",
                    "        }",
                    "    }",
                    "",
                    "    if ('defaultOpen' in props) {",
                    "        deprecated('defaultOpen', 'defaultVisible', 'DatePicker');",
                    "",
                    "        newProps.defaultVisible = defaultOpen;",
                    "",
                    "        if ('defaultVisible' in props) {",
                    "            newProps.defaultVisible = props.defaultVisible;",
                    "        }",
                    "    }",
                    "",
                    "    if ('onOpenChange' in props && typeof onOpenChange === 'function') {",
                    "        deprecated('onOpenChange', 'onVisibleChange', 'DatePicker');",
                    "",
                    "        newProps.onVisibleChange = onOpenChange;",
                    "",
                    "        if ('onVisibleChange' in props) {",
                    "            newProps.onVisibleChange = props.onVisibleChange;",
                    "        }",
                    "    }",
                    "",
                    "    if ('formater' in props) {",
                    "        deprecated('formater', 'format showTime.format', 'DatePicker');",
                    "    }",
                    "",
                    "    if ('format' in props && typeof props.format !== 'string') {",
                    "        deprecated('format', 'format: PropTypes.string,', 'DatePicker');",
                    "    }",
                    "",
                    "    return newProps;",
                    "};",
                    "",
                    "",
                    "DatePicker.RangePicker = ConfigProvider.config(RangePicker, {",
                    "    componentName: 'DatePicker',",
                    "    transform",
                    "});",
                    "DatePicker.MonthPicker = ConfigProvider.config(MonthPicker, {",
                    "    componentName: 'DatePicker',",
                    "    transform",
                    "});",
                    "DatePicker.YearPicker = ConfigProvider.config(YearPicker, {",
                    "    componentName: 'DatePicker',",
                    "    transform",
                    "});",
                    "",
                    "export default ConfigProvider.config(DatePicker, {",
                    "    transform",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset\";",
                    "@import \"../input/scss/variable.scss\";",
                    "@import \"../input/scss/mixin.scss\";",
                    "@import \"../time-picker/scss/variable.scss\";",
                    "",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "",
                    "@import \"scss/date-picker\";",
                    "@import \"scss/range-picker\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$date-picker-prefix}, #{$range-picker-prefix}, #{$month-picker-prefix}, #{$year-picker-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    &-body {",
                    "        border: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "        border-radius: $popup-local-corner;",
                    "        box-shadow: $popup-local-shadow;",
                    "        background: $date-picker-panel-background;",
                    "    }",
                    "",
                    "    &-panel {",
                    "        &-header {",
                    "            padding: 6px;",
                    "            text-align: center;",
                    "        }",
                    "",
                    "        &-time {",
                    "            border-top: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "        }",
                    "",
                    "        &-footer {",
                    "            text-align: right;",
                    "            padding: $date-picker-panel-footer-padding-tb $date-picker-panel-footer-padding-lr;",
                    "            border-top: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "        }",
                    "",
                    "        &-footer > #{$date-picker-btn-prefix}:not(:last-child) {",
                    "            margin-right: $s-4;",
                    "        }",
                    "    }",
                    "",
                    "    .#{$css-prefix}calendar-panel-header {",
                    "        margin-left: -$popup-local-border-width;",
                    "        margin-right: -$popup-local-border-width;",
                    "    }",
                    "",
                    "    #{$date-picker-input-prefix} input {",
                    "        vertical-align: baseline;",
                    "    }",
                    "}"
                ]
            },
            "month-picker.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import moment from 'moment';",
                    "import Overlay from '../overlay';",
                    "import Input from '../input';",
                    "import Calendar from '../calendar';",
                    "import nextLocale from '../locale/zh-cn';",
                    "import { func, obj } from '../util';",
                    "import { checkDateValue, formatDateValue } from './util';",
                    "",
                    "const { Popup } = Overlay;",
                    "",
                    "/**",
                    " * DatePicker.MonthPicker",
                    " */",
                    "class MonthPicker extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 输入框内置标签",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 输入框状态",
                    "         */",
                    "        state: PropTypes.oneOf(['success', 'error']),",
                    "        /**",
                    "         * 输入提示",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 默认展现的年",
                    "         * @return {MomentObject} 返回包含指定年份的 moment 对象实例",
                    "         */",
                    "        defaultVisibleYear: PropTypes.func,",
                    "        /**",
                    "         * 日期值（受控）moment 对象",
                    "         */",
                    "        value: checkDateValue,",
                    "        /**",
                    "         * 初始日期值，moment 对象",
                    "         */",
                    "        defaultValue: checkDateValue,",
                    "        /**",
                    "         * 日期值的格式（用于限定用户输入和展示）",
                    "         */",
                    "        format: PropTypes.string,",
                    "        /**",
                    "         * 禁用日期函数",
                    "         * @param {MomentObject} 日期值",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledDate: PropTypes.func,",
                    "        /**",
                    "         * 自定义面板页脚",
                    "         * @return {Node} 自定义的面板页脚组件",
                    "         */",
                    "        footerRender: PropTypes.func,",
                    "        /**",
                    "         * 日期值改变时的回调",
                    "         * @param {MomentObject|String} value 日期值",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 输入框尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示清空按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示状态",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层展示状态变化时的回调",
                    "         * @param {Boolean} visible 弹层是否显示",
                    "         * @param {String} reason 触发弹层显示和隐藏的来源",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层触发方式",
                    "         */",
                    "        popupTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 弹层对齐方式, 具体含义见 OverLay文档",
                    "         */",
                    "        popupAlign: PropTypes.string,",
                    "        /**",
                    "         * 弹层容器",
                    "         * @param {Element} target 目标元素",
                    "         * @return {Element} 弹层的容器元素",
                    "         */",
                    "        popupContainer: PropTypes.func,",
                    "        /**",
                    "         * 弹层自定义样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层自定义样式类",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层其他属性",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        locale: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "        format: 'YYYY-MM',",
                    "        size: 'medium',",
                    "        disabledDate: () => false,",
                    "        footerRender: () => null,",
                    "        hasClear: true,",
                    "        popupTriggerType: 'click',",
                    "        popupAlign: 'tl tl',",
                    "        locale: nextLocale.DatePicker,",
                    "        onChange: func.noop,",
                    "        onVisibleChange: func.noop,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        const value = formatDateValue(props.value || props.defaultValue, props.format);",
                    "",
                    "        this.inputAsString = (typeof (props.value || props.defaultValue) === 'string'); // 判断用户输入是否是字符串",
                    "        this.state = {",
                    "            value,",
                    "            dateInputStr: '',",
                    "            inputing: false,",
                    "            visible: props.visible || props.defaultVisible,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            const value = formatDateValue(nextProps.value, nextProps.format || this.props.format);",
                    "            this.setState({",
                    "                value,",
                    "            });",
                    "            this.inputAsString = typeof nextProps.value === 'string';",
                    "        }",
                    "",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onValueChange = (newValue) => {",
                    "        const ret = (this.inputAsString && newValue) ? newValue.format(this.props.format) : newValue;",
                    "        this.props.onChange(ret);",
                    "    }",
                    "",
                    "    onSelectCalendarPanel = (value) => {",
                    "        // const { format } = this.props;",
                    "        const prevSelectedMonth = this.state.value;",
                    "        const selectedMonth = value.clone().date(1).hour(0).minute(0).second(0);",
                    "",
                    "        this.handleChange(selectedMonth, prevSelectedMonth, {inputing: false}, () => {",
                    "            this.onVisibleChange(false, 'calendarSelect');",
                    "        });",
                    "    }",
                    "",
                    "    clearValue = () => {",
                    "        this.setState({",
                    "            dateInputStr: '',",
                    "        });",
                    "",
                    "        this.handleChange(null, this.state.value);",
                    "    }",
                    "",
                    "    onDateInputChange = (inputStr, e, eventType) => {",
                    "        if (eventType === 'clear' || !inputStr) {",
                    "            e.stopPropagation();",
                    "            this.clearValue();",
                    "        } else {",
                    "            this.setState({",
                    "                dateInputStr: inputStr,",
                    "                inputing: true,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onDateInputBlur = () => {",
                    "        const { dateInputStr } = this.state;",
                    "        if (dateInputStr) {",
                    "            const { disabledDate, format } = this.props;",
                    "            const parsed = moment(dateInputStr, format, true);",
                    "",
                    "            this.setState({",
                    "                dateInputStr: '',",
                    "                inputing: false,",
                    "            });",
                    "",
                    "            if (parsed.isValid() && !disabledDate(parsed)) {",
                    "                this.handleChange(parsed, this.state.value);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    handleChange = (newValue, prevValue, others = {}, callback) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value: newValue,",
                    "                ...others",
                    "            });",
                    "        }",
                    "",
                    "        const { format } = this.props;",
                    "",
                    "        const newValueOf = newValue ? newValue.format(format)  : null;",
                    "        const preValueOf = prevValue ? prevValue.format(format) : null;",
                    "",
                    "        if (newValueOf !== preValueOf) {",
                    "            this.onValueChange(newValue);",
                    "            typeof callback === 'function' && callback();",
                    "        }",
                    "    }",
                    "",
                    "    onVisibleChange = (visible, reason) => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible,",
                    "            });",
                    "        }",
                    "        this.props.onVisibleChange(visible, reason);",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            rtl,",
                    "            locale,",
                    "            label,",
                    "            state,",
                    "            format,",
                    "            defaultVisibleYear,",
                    "            disabledDate,",
                    "            footerRender,",
                    "            placeholder,",
                    "            size,",
                    "            disabled,",
                    "            hasClear,",
                    "            popupTriggerType,",
                    "            popupAlign,",
                    "            popupContainer,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupProps,",
                    "            className,",
                    "            ...others",
                    "        } = this.props;",
                    "",
                    "        const { visible, value, dateInputStr, inputing } = this.state;",
                    "",
                    "        const monthPickerCls = classnames({",
                    "            [`${prefix}month-picker`]: true,",
                    "        }, className);",
                    "",
                    "        const triggerInputCls = classnames({",
                    "            [`${prefix}month-picker-input`]: true,",
                    "            [`${prefix}error`]: false,",
                    "        });",
                    "",
                    "        const panelBodyClassName = classnames({",
                    "            [`${prefix}month-picker-body`]: true,",
                    "        });",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const panelInputCls = `${prefix}month-picker-panel-input`;",
                    "",
                    "        const sharedInputProps = {",
                    "            size,",
                    "            disabled,",
                    "            onChange: this.onDateInputChange,",
                    "            onBlur: this.onDateInputBlur,",
                    "            onPressEnter: this.onDateInputBlur,",
                    "        };",
                    "",
                    "        const dateInputValue = inputing ? dateInputStr : ((value && value.format(format)) || '');",
                    "        const triggerInputValue = dateInputValue;",
                    "",
                    "        const dateInput = (<Input",
                    "            {...sharedInputProps}",
                    "            value={dateInputValue}",
                    "            onFocus={this.onFoucsDateInput}",
                    "            placeholder={format}",
                    "            className={panelInputCls} />);",
                    "",
                    "        const datePanel = (<Calendar",
                    "            shape=\"panel\"",
                    "            modes={['month', 'year']}",
                    "            value={value}",
                    "            onSelect={this.onSelectCalendarPanel}",
                    "            defaultVisibleMonth={defaultVisibleYear}",
                    "            disabledDate={disabledDate} />);",
                    "",
                    "        const panelBody = datePanel;",
                    "        const panelFooter = footerRender();",
                    "",
                    "        const allowClear = value && hasClear;",
                    "        const trigger = (<div className={`${prefix}month-picker-trigger`}>",
                    "            <Input",
                    "                {...sharedInputProps}",
                    "                label={label}",
                    "                state={state}",
                    "                value={triggerInputValue}",
                    "                placeholder={placeholder || locale.monthPlaceholder}",
                    "                hint=\"calendar\"",
                    "                hasClear={allowClear}",
                    "                className={triggerInputCls} />",
                    "        </div>);",
                    "        return (<div {...obj.pickOthers(MonthPicker.propTypes, others)} className={monthPickerCls}>",
                    "            <Popup",
                    "                {...popupProps}",
                    "                autoFocus",
                    "                disabled={disabled}",
                    "                visible={visible}",
                    "                onVisibleChange={this.onVisibleChange}",
                    "                align={popupAlign}",
                    "                triggerType={popupTriggerType}",
                    "                container={popupContainer}",
                    "                style={popupStyle}",
                    "                className={popupClassName}",
                    "                trigger={trigger}>",
                    "                <div className={panelBodyClassName} dir={others.dir}>",
                    "                    <div className={`${prefix}month-picker-panel-header`}>",
                    "                        {dateInput}",
                    "                    </div>",
                    "                    {panelBody}",
                    "                    {panelFooter}",
                    "                </div>",
                    "            </Popup>",
                    "        </div>);",
                    "    }",
                    "}",
                    "",
                    "export default MonthPicker;"
                ]
            },
            "range-picker.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import moment from 'moment';",
                    "import Overlay from '../overlay';",
                    "import Input from '../input';",
                    "import RangeCalendar from '../calendar/range-calendar';",
                    "import TimePickerPanel from '../time-picker/panel';",
                    "import nextLocale from '../locale/zh-cn';",
                    "import { func, obj } from '../util';",
                    "import { PANEL, resetValueTime, formatDateValue, extend, getDateTimeFormat, isFunction } from './util';",
                    "import PanelFooter from './module/panel-footer';",
                    "",
                    "const { Popup } = Overlay;",
                    "",
                    "function mapInputStateName(name) {",
                    "    return ({",
                    "        startValue: 'startDateInputStr',",
                    "        endValue: 'endDateInputStr',",
                    "        startTime: 'startTimeInputStr',",
                    "        endTime: 'endTimeInputStr',",
                    "    })[name];",
                    "}",
                    "",
                    "function mapTimeToValue(name) {",
                    "    return ({",
                    "        startTime: 'startValue',",
                    "        endTime: 'endValue',",
                    "    })[name];",
                    "}",
                    "",
                    "function getFormatValues(values, format) {",
                    "    if (!Array.isArray(values)) {",
                    "        return [null, null];",
                    "    }",
                    "    return [",
                    "        formatDateValue(values[0], format),",
                    "        formatDateValue(values[1], format),",
                    "    ];",
                    "}",
                    "",
                    "/**",
                    " * DatePicker.RangePicker",
                    "*/",
                    "export default class RangePicker extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 默认展示的起始月份",
                    "         * @return {MomentObject} 返回包含指定月份的 moment 对象实例",
                    "         */",
                    "        defaultVisibleMonth: PropTypes.func,",
                    "        onVisibleMonthChange: PropTypes.func,",
                    "        /**",
                    "         * 日期范围值数组 [moment, moment]",
                    "         */",
                    "        value: PropTypes.array,",
                    "        /**",
                    "         * 初始的日期范围值数组 [moment, moment]",
                    "         */",
                    "        defaultValue: PropTypes.array,",
                    "        /**",
                    "         * 日期格式",
                    "         */",
                    "        format: PropTypes.string,",
                    "        /**",
                    "         * 是否使用时间控件，支持传入 TimePicker 的属性",
                    "         */",
                    "        showTime: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),",
                    "        /**",
                    "         * 每次选择是否重置时间（仅在 showTime 开启时有效）",
                    "         */",
                    "        resetTime: PropTypes.bool,",
                    "        /**",
                    "         * 禁用日期函数",
                    "         * @param {MomentObject} 日期值",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledDate: PropTypes.func,",
                    "        /**",
                    "         * 自定义面板页脚",
                    "         * @return {Node} 自定义的面板页脚组件",
                    "         */",
                    "        footerRender: PropTypes.func,",
                    "        /**",
                    "         * 日期范围值改变时的回调 [ MomentObject|String, MomentObject|String ]",
                    "         * @param {Array<MomentObject|String>} value 日期值",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 点击确认按钮时的回调 返回开始时间和结束时间`[ MomentObject|String, MomentObject|String ]`",
                    "         * @return {Array} 日期范围",
                    "         */",
                    "        onOk: PropTypes.func,",
                    "        /**",
                    "         * 输入框内置标签",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 输入框状态",
                    "         */",
                    "        state: PropTypes.oneOf(['error', 'success']),",
                    "        /**",
                    "         * 输入框尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示清空按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示状态",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层展示状态变化时的回调",
                    "         * @param {Boolean} visible 弹层是否显示",
                    "         * @param {String} reason 触发弹层显示和隐藏的来源",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层触发方式",
                    "         */",
                    "        popupTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 弹层对齐方式, 具体含义见 OverLay文档",
                    "         */",
                    "        popupAlign: PropTypes.string,",
                    "        /**",
                    "         * 弹层容器",
                    "         * @param {Element} target 目标元素",
                    "         * @return {Element} 弹层的容器元素",
                    "         */",
                    "        popupContainer: PropTypes.func,",
                    "        /**",
                    "         * 弹层自定义样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层自定义样式类",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层其他属性",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        locale: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "        format: 'YYYY-MM-DD',",
                    "        size: 'medium',",
                    "        showTime: false,",
                    "        resetTime: false,",
                    "        disabledDate: () => false,",
                    "        footerRender: () => null,",
                    "        hasClear: true,",
                    "        popupTriggerType: 'click',",
                    "        popupAlign: 'tl tl',",
                    "        locale: nextLocale.DatePicker,",
                    "        onChange: func.noop,",
                    "        onOk: func.noop,",
                    "        onVisibleChange: func.noop,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        const dateTimeFormat = getDateTimeFormat(props.format, props.showTime);",
                    "        extend(dateTimeFormat, this);",
                    "",
                    "        const val = props.value || props.defaultValue;",
                    "        const values = getFormatValues(val, this.dateTimeFormat);",
                    "        this.inputAsString = val && (typeof val[0] === 'string' || typeof val[1] === 'string');",
                    "        this.state = {",
                    "            visible: props.visible || props.defaultVisible,",
                    "            startValue: values[0],",
                    "            endValue: values[1],",
                    "            startDateInputStr: '',",
                    "            endDateInputStr: '',",
                    "            activeDateInput: 'startValue',",
                    "            startTimeInputStr: '',",
                    "            endTimeInputStr: '',",
                    "            inputing: false, // 当前是否处于输入状态",
                    "            panel: PANEL.DATE,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('showTime' in nextProps) {",
                    "            const dateTimeFormat = getDateTimeFormat(nextProps.format || this.props.format, nextProps.showTime);",
                    "            extend(dateTimeFormat, this);",
                    "        }",
                    "",
                    "        if ('value' in nextProps) {",
                    "            const values = getFormatValues(nextProps.value, this.dateTimeFormat);",
                    "            this.setState({",
                    "                startValue: values[0],",
                    "                endValue: values[1],",
                    "            });",
                    "            this.inputAsString = nextProps.value && (typeof nextProps.value[0] === 'string' || typeof nextProps.value[1] === 'string');",
                    "        }",
                    "",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onValueChange(values, handler = 'onChange') {",
                    "        let ret;",
                    "        if (!values.length || !this.inputAsString) {",
                    "            ret = values;",
                    "        } else {",
                    "            ret = [",
                    "                values[0] ? values[0].format(this.dateTimeFormat) : null,",
                    "                values[1] ? values[1].format(this.dateTimeFormat) : null,",
                    "            ];",
                    "        }",
                    "        this.props[handler](ret);",
                    "    }",
                    "",
                    "    onSelectCalendarPanel = (value) => {",
                    "        const { showTime, resetTime } = this.props;",
                    "        const { activeDateInput: prevActiveDateInput, startValue: prevStartValue, endValue: prevEndValue } = this.state;",
                    "        const newState = {",
                    "            activeDateInput: prevActiveDateInput,",
                    "            inputing: false,",
                    "        };",
                    "",
                    "        let newValue = value;",
                    "        switch (prevActiveDateInput) {",
                    "            case 'startValue': {",
                    "                if (!prevEndValue || value.valueOf() <= prevEndValue.valueOf()) {",
                    "                    newState.activeDateInput = 'endValue';",
                    "                }",
                    "",
                    "                if (showTime) {",
                    "                    if (!prevStartValue) {",
                    "                        // 第一次选择，如果设置了时间默认值，则使用该默认时间",
                    "                        if (showTime.defaultValue) {",
                    "                            const defaultTimeValue = formatDateValue(showTime.defaultValue, this.timeFormat);",
                    "                            newValue = resetValueTime(value, defaultTimeValue);",
                    "                        }",
                    "                    } else if (!resetTime) {",
                    "                        // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值",
                    "                        newValue = resetValueTime(value, prevStartValue);",
                    "                    }",
                    "                }",
                    "",
                    "                newState.startValue = newValue;",
                    "",
                    "                if (prevEndValue && value.valueOf() > prevEndValue.valueOf()) {",
                    "                    newState.endValue = null;",
                    "                    newState.activeDateInput = 'endValue';",
                    "                }",
                    "                break;",
                    "            }",
                    "",
                    "            case 'endValue':",
                    "                if (!prevStartValue) {",
                    "                    newState.activeDateInput = 'startValue';",
                    "                }",
                    "",
                    "                if (showTime) {",
                    "                    if (!prevEndValue) {",
                    "                        // 第一次选择，如果设置了时间默认值，则使用该默认时间",
                    "                        if (showTime.defaultValue) {",
                    "                            const defaultTimeValue = formatDateValue(showTime.defaultValue, this.timeFormat);",
                    "                            newValue = resetValueTime(value, defaultTimeValue);",
                    "                        }",
                    "                    } else if (!resetTime) {",
                    "                        // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值",
                    "                        newValue = resetValueTime(value, prevEndValue);",
                    "                    }",
                    "                }",
                    "",
                    "                newState.endValue = newValue;",
                    "",
                    "                // 选择了一个比开始日期更小的结束日期，此时表示用户重新选择了",
                    "                if (prevStartValue && value.valueOf() < prevStartValue.valueOf()) {",
                    "                    newState.startValue = value;",
                    "                    newState.endValue = null;",
                    "                }",
                    "                break;",
                    "        }",
                    "",
                    "        const newStartValue = 'startValue' in newState ? newState.startValue : prevStartValue;",
                    "        const newEndValue = 'endValue' in newState ? newState.endValue : prevEndValue;",
                    "",
                    "        // 受控状态选择不更新值",
                    "        if ('value' in this.props) {",
                    "            delete newState.startValue;",
                    "            delete newState.endValue;",
                    "        }",
                    "",
                    "        this.setState(newState);",
                    "",
                    "        this.onValueChange([ newStartValue, newEndValue ]);",
                    "    }",
                    "",
                    "    clearRange = () => {",
                    "",
                    "        this.setState({",
                    "            startDateInputStr: '',",
                    "            endDateInputStr: '',",
                    "            startTimeInputStr: '',",
                    "            endTimeInputStr: '',",
                    "        });",
                    "",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                startValue: null,",
                    "                endValue: null,",
                    "            });",
                    "        }",
                    "",
                    "        this.onValueChange([]);",
                    "    }",
                    "",
                    "    onDateInputChange = (inputStr, e, eventType) => {",
                    "        if (eventType === 'clear' || !inputStr) {",
                    "            e.stopPropagation();",
                    "            this.clearRange();",
                    "        } else {",
                    "            const stateName = mapInputStateName(this.state.activeDateInput);",
                    "            this.setState({",
                    "                [stateName]: inputStr,",
                    "                inputing: this.state.activeDateInput,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onDateInputBlur = () => {",
                    "        const stateName = mapInputStateName(this.state.activeDateInput);",
                    "        const dateInputStr = this.state[stateName];",
                    "        if (dateInputStr) {",
                    "            const { format, disabledDate } = this.props;",
                    "            const parsed = moment(dateInputStr, format, true);",
                    "",
                    "            this.setState({",
                    "                [stateName]: '',",
                    "                inputing: false,",
                    "            });",
                    "",
                    "            if (parsed.isValid() && !disabledDate(parsed)) {",
                    "",
                    "                const valueName = this.state.activeDateInput;",
                    "                const newValue = parsed;",
                    "",
                    "                this.handleChange(valueName, newValue);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    onFocusDateInput = (type) => {",
                    "        if (type !== this.state.activeDateInput) {",
                    "            this.setState({",
                    "                activeDateInput: type,",
                    "            });",
                    "        }",
                    "        if (this.state.panel !== PANEL.DATE) {",
                    "            this.setState({",
                    "                panel: PANEL.DATE,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onFocusTimeInput = (type) => {",
                    "        if (type !== this.state.activeDateInput) {",
                    "            this.setState({",
                    "                activeDateInput: type,",
                    "            });",
                    "        }",
                    "",
                    "        if (this.state.panel !== PANEL.TIME) {",
                    "            this.setState({",
                    "                panel: PANEL.TIME,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onSelectStartTime = (value) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                startValue: value,",
                    "                inputing: false,",
                    "                activeDateInput: 'startTime',",
                    "            });",
                    "        }",
                    "        if (value.valueOf() !== this.state.startValue.valueOf()) {",
                    "            this.onValueChange([value, this.state.endValue]);",
                    "        }",
                    "    }",
                    "",
                    "    onSelectEndTime = (value) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                endValue: value,",
                    "                inputing: false,",
                    "                activeDateInput: 'endTime',",
                    "            });",
                    "        }",
                    "        if (value.valueOf() !== this.state.endValue.valueOf()) {",
                    "            this.onValueChange([this.state.startValue, value]);",
                    "        }",
                    "    }",
                    "",
                    "    onTimeInputChange = (inputStr) => {",
                    "        const stateName = mapInputStateName(this.state.activeDateInput);",
                    "        this.setState({",
                    "            [stateName]: inputStr,",
                    "            inputing: this.state.activeDateInput,",
                    "        });",
                    "    }",
                    "",
                    "    onTimeInputBlur = () => {",
                    "        const stateName = mapInputStateName(this.state.activeDateInput);",
                    "        const timeInputStr = this.state[stateName];",
                    "        if (timeInputStr) {",
                    "            const parsed = moment(timeInputStr, this.timeFormat, true);",
                    "",
                    "            this.setState({",
                    "                [stateName]: '',",
                    "                inputing: false,",
                    "            });",
                    "",
                    "            if (parsed.isValid()) {",
                    "                const hour = parsed.hour();",
                    "                const minute = parsed.minute();",
                    "                const second = parsed.second();",
                    "                const valueName = mapTimeToValue(this.state.activeDateInput);",
                    "                const newValue = this.state[valueName].clone().hour(hour).minute(minute).second(second);",
                    "",
                    "                this.handleChange(valueName, newValue);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    handleChange = (valueName, newValue) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                [valueName]: newValue,",
                    "            });",
                    "        }",
                    "",
                    "        const startValue = valueName === 'startValue' ? newValue : this.state.startValue;",
                    "        const endValue = valueName === 'endValue' ? newValue : this.state.endValue;",
                    "",
                    "        this.onValueChange([startValue, endValue]);",
                    "    }",
                    "",
                    "    onVisibleChange = (visible, reason) => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible,",
                    "            });",
                    "        }",
                    "        this.props.onVisibleChange(visible, reason);",
                    "    }",
                    "",
                    "    changePanel = (panel) => {",
                    "        this.setState({",
                    "            panel,",
                    "            activeDateInput: panel === PANEL.DATE ? 'startValue' : 'startTime',",
                    "        });",
                    "    }",
                    "",
                    "    onOk = () => {",
                    "        this.onVisibleChange(false, 'okBtnClick');",
                    "        this.onValueChange([this.state.startValue, this.state.endValue], 'onOk');",
                    "    }",
                    "",
                    "    // 如果用户没有给定时间禁用逻辑，则给默认到禁用逻辑，即如果是同一天，则时间不能是同样的",
                    "    getDisabledTime = ({ startValue, endValue }) => {",
                    "        const { disabledHours, disabledMinutes, disabledSeconds } = this.props.showTime || {};",
                    "",
                    "        let disabledTime = {};",
                    "",
                    "        if (startValue && endValue) {",
                    "            const isSameDay = startValue.format('L') === endValue.format('L');",
                    "            const newDisabledHours = isFunction(disabledHours) ?",
                    "                disabledHours : (index) => {",
                    "                    if (isSameDay && index < startValue.hour()) {",
                    "                        return true;",
                    "                    }",
                    "                };",
                    "",
                    "            const newDisabledMinutes = isFunction(disabledMinutes) ?",
                    "                disabledMinutes : (index) => {",
                    "                    if (isSameDay && startValue.hour() === endValue.hour() && index < startValue.minute()) {",
                    "                        return true;",
                    "                    }",
                    "                };",
                    "",
                    "            const newDisabledSeconds = isFunction(disabledSeconds) ?",
                    "                disabledSeconds : (index) => {",
                    "                    if (isSameDay && startValue.hour() === endValue.hour() && startValue.minute() === endValue.minute() && index <= startValue.second()) {",
                    "                        return true;",
                    "                    }",
                    "                };",
                    "            disabledTime = {",
                    "                disabledHours: newDisabledHours,",
                    "                disabledMinutes: newDisabledMinutes,",
                    "                disabledSeconds: newDisabledSeconds",
                    "            };",
                    "        }",
                    "",
                    "        return disabledTime;",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            rtl,",
                    "            defaultVisibleMonth,",
                    "            onVisibleMonthChange,",
                    "            showTime,",
                    "            disabledDate,",
                    "            footerRender,",
                    "            label,",
                    "            state: inputState,",
                    "            size,",
                    "            disabled,",
                    "            hasClear,",
                    "            popupTriggerType,",
                    "            popupAlign,",
                    "            popupContainer,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupProps,",
                    "            className,",
                    "            locale,",
                    "            ...others",
                    "        } = this.props;",
                    "",
                    "        const state = this.state;",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}range-picker`]: true,",
                    "            [`${prefix}${size}`]: size,",
                    "            [`${prefix}disabled`]: disabled,",
                    "        }, className);",
                    "",
                    "        const panelBodyClassName = classnames({",
                    "            [`${prefix}range-picker-body`]: true,",
                    "            [`${prefix}range-picker-body-show-time`]: showTime,",
                    "        });",
                    "",
                    "        const triggerCls = classnames({",
                    "            [`${prefix}range-picker-trigger`]: true,",
                    "            [`${prefix}error`]: inputState === 'error',",
                    "        });",
                    "",
                    "        const startDateInputCls = classnames({",
                    "            [`${prefix}range-picker-panel-input-start-date`]: true,",
                    "            [`${prefix}focus`]: state.activeDateInput === 'startValue',",
                    "        });",
                    "",
                    "        const endDateInputCls = classnames({",
                    "            [`${prefix}range-picker-panel-input-end-date`]: true,",
                    "            [`${prefix}focus`]: state.activeDateInput === 'endValue',",
                    "        });",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const startDateInputValue = (state.inputing === 'startValue') ?",
                    "            state.startDateInputStr : ((state.startValue && state.startValue.format(this.format)) || '');",
                    "        const endDateInputValue = (state.inputing === 'endValue') ?",
                    "            state.endDateInputStr : ((state.endValue && state.endValue.format(this.format)) || '');",
                    "",
                    "        let startTriggerValue = startDateInputValue;",
                    "        let endTriggerValue = endDateInputValue;",
                    "",
                    "        const sharedInputProps = {",
                    "            size,",
                    "            disabled,",
                    "            onChange: this.onDateInputChange,",
                    "            onBlur: this.onDateInputBlur,",
                    "            onPressEnter: this.onDateInputBlur,",
                    "        };",
                    "",
                    "        const startDateInput = (<Input",
                    "            {...sharedInputProps}",
                    "            placeholder={this.format}",
                    "            value={startDateInputValue}",
                    "            onFocus={() => this.onFocusDateInput('startValue')}",
                    "            className={startDateInputCls} />);",
                    "",
                    "        const endDateInput = (<Input",
                    "            {...sharedInputProps}",
                    "            placeholder={this.format}",
                    "            value={endDateInputValue}",
                    "            onFocus={() => this.onFocusDateInput('endValue')}",
                    "            className={endDateInputCls} />);",
                    "",
                    "        const datePanel = (<RangeCalendar",
                    "            showOtherMonth",
                    "            format={this.format}",
                    "            defaultVisibleMonth={defaultVisibleMonth}",
                    "            onVisibleMonthChange={onVisibleMonthChange}",
                    "            disabledDate={disabledDate}",
                    "            onSelect={this.onSelectCalendarPanel}",
                    "            startValue={state.startValue}",
                    "            endValue={state.endValue} />);",
                    "",
                    "        let startTimeInput = null;",
                    "        let endTimeInput = null;",
                    "        let timePanel = null;",
                    "        let panelFooter = footerRender();",
                    "",
                    "        if (showTime) {",
                    "            const startTimeInputValue = (state.inputing === 'startTime') ?",
                    "                state.startTimeInputStr : ((state.startValue && state.startValue.format(this.timeFormat)) || '');",
                    "            const endTimeInputValue = (state.inputing === 'endTime') ?",
                    "                state.endTimeInputStr : ((state.endValue && state.endValue.format(this.timeFormat)) || '');",
                    "",
                    "            startTriggerValue = state.startValue && state.startValue.format(this.dateTimeFormat) || '';",
                    "            endTriggerValue = state.endValue && state.endValue.format(this.dateTimeFormat) || '';",
                    "",
                    "            const sharedTimeInputProps = {",
                    "                size,",
                    "                placeholder: this.timeFormat,",
                    "                onFocus: this.onFocusTimeInput,",
                    "                onBlur: this.onTimeInputBlur,",
                    "                onPressEnter: this.onTimeInputBlur,",
                    "                onChange: this.onTimeInputChange,",
                    "            };",
                    "",
                    "            const startTimeInputCls = classnames({",
                    "                [`${prefix}range-picker-panel-input-start-time`]: true,",
                    "                [`${prefix}focus`]: state.activeDateInput === 'startTime',",
                    "            });",
                    "",
                    "            startTimeInput = (<Input",
                    "                {...sharedTimeInputProps}",
                    "                value={startTimeInputValue}",
                    "                disabled={disabled || !state.startValue || !state.endValue}",
                    "                onFocus={() => this.onFocusTimeInput('startTime')}",
                    "                className={startTimeInputCls}",
                    "            />);",
                    "",
                    "            const endTimeInputCls = classnames({",
                    "                [`${prefix}range-picker-panel-input-end-time`]: true,",
                    "                [`${prefix}focus`]: state.activeDateInput === 'endTime',",
                    "            });",
                    "",
                    "            endTimeInput = (<Input",
                    "                {...sharedTimeInputProps}",
                    "                value={endTimeInputValue}",
                    "                disabled={disabled || !state.endValue || !state.startValue}",
                    "                onFocus={() => this.onFocusTimeInput('endTime')}",
                    "                className={endTimeInputCls}",
                    "            />);",
                    "",
                    "            const showSecond = this.timeFormat.indexOf('s') > -1;",
                    "",
                    "            const sharedTimePickerProps = {",
                    "                ...showTime,",
                    "                prefix,",
                    "                locale,",
                    "                disabled,",
                    "                showSecond,",
                    "            };",
                    "",
                    "            const disabledTime = this.getDisabledTime(state);",
                    "",
                    "            timePanel = (<div className={`${prefix}range-picker-panel-time`}>",
                    "                <TimePickerPanel {...sharedTimePickerProps} className={`${prefix}range-picker-panel-time-start`} value={state.startValue} onSelect={this.onSelectStartTime} />",
                    "                <TimePickerPanel {...sharedTimePickerProps} {...disabledTime} className={`${prefix}range-picker-panel-time-end`} value={state.endValue} onSelect={this.onSelectEndTime} />",
                    "            </div>);",
                    "        }",
                    "",
                    "        panelFooter = panelFooter || (<PanelFooter",
                    "            prefix={prefix}",
                    "            value={state.startValue && state.endValue}",
                    "            locale={locale}",
                    "            panel={state.panel}",
                    "            onPanelChange={showTime ? this.changePanel : null}",
                    "            onOk={this.onOk}",
                    "        />);",
                    "",
                    "        const panelBody = ({",
                    "            [PANEL.DATE]: datePanel,",
                    "            [PANEL.TIME]: timePanel,",
                    "        })[state.panel];",
                    "",
                    "        const allowClear = state.startValue && state.endValue && hasClear;",
                    "        const trigger = (<div className={triggerCls}>",
                    "            <Input",
                    "                {...sharedInputProps}",
                    "                label={label}",
                    "                placeholder={locale.startPlaceholder}",
                    "                value={startTriggerValue}",
                    "                hasBorder={false}",
                    "                className={`${prefix}range-picker-trigger-input`}",
                    "                onFocus={() => this.onFocusDateInput('startValue')} />",
                    "            <span className={`${prefix}range-picker-trigger-separator`}>-</span>",
                    "            <Input",
                    "                {...sharedInputProps}",
                    "                placeholder={locale.endPlaceholder}",
                    "                value={endTriggerValue}",
                    "                hasBorder={false}",
                    "                className={`${prefix}range-picker-trigger-input`}",
                    "                onFocus={() => this.onFocusDateInput('endValue')}",
                    "                hasClear={allowClear}",
                    "                hint=\"calendar\" />",
                    "        </div>);",
                    "",
                    "        return (<div {...obj.pickOthers(RangePicker.propTypes, others)} className={classNames}>",
                    "            <Popup",
                    "                {...popupProps}",
                    "                autoFoucs",
                    "                disabled={disabled}",
                    "                visible={state.visible}",
                    "                onVisibleChange={this.onVisibleChange}",
                    "                align={popupAlign}",
                    "                triggerType={popupTriggerType}",
                    "                container={popupContainer}",
                    "                style={popupStyle}",
                    "                className={popupClassName}",
                    "                trigger={trigger}>",
                    "                <div dir={others.dir} className={panelBodyClassName}>",
                    "                    <div className={`${prefix}range-picker-panel-header`}>",
                    "                        <div className={`${prefix}range-picker-panel-input`}>",
                    "                            {startDateInput}",
                    "                            {startTimeInput}",
                    "                            <span className={`${prefix}range-picker-panel-input-separator`}>-</span>",
                    "                            {endDateInput}",
                    "                            {endTimeInput}",
                    "                        </div>",
                    "                    </div>",
                    "                    {panelBody}",
                    "                    {panelFooter}",
                    "                </div>",
                    "            </Popup>",
                    "        </div>);",
                    "    }",
                    "}"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$date-picker-prefix}-body[dir=\"rtl\"] {",
                    "    #{$date-picker-prefix}-panel-footer {",
                    "        text-align: left;",
                    "    }",
                    "    #{$date-picker-prefix}-panel-footer > #{$date-picker-btn-prefix}:not(:last-child) {",
                    "        margin-right: 0;",
                    "        margin-left: $s-4;",
                    "    }",
                    "}",
                    "",
                    "#{$date-picker-prefix}-body[dir=\"rtl\"]#{$date-picker-prefix}-body-show-time {",
                    "    #{$date-picker-prefix}-panel-input#{$date-picker-input-prefix} {",
                    "        &:first-child {",
                    "            margin-left: 2%;",
                    "            margin-right: 0;",
                    "        }",
                    "    }",
                    "    #{$time-picker-prefix}-menu {",
                    "        float: right;",
                    "        &:not(:last-child) {",
                    "            border-right: none;",
                    "            border-left: $time-picker-menu-border-width $line-solid $time-picker-menu-border-color;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "",
                    "#{$range-picker-prefix}-body[dir=\"rtl\"] {",
                    "    #{$range-picker-prefix}-panel-input {",
                    "        text-align: right;",
                    "    }",
                    "    #{$date-picker-prefix}-panel-footer {",
                    "        text-align: left;",
                    "    }",
                    "    #{$date-picker-prefix}-panel-footer > #{$date-picker-btn-prefix}:not(:last-child) {",
                    "        margin-right: 0;",
                    "        margin-left: $s-4;",
                    "    }",
                    "}",
                    "",
                    "#{$range-picker-prefix}-body[dir=\"rtl\"]#{$range-picker-prefix}-body-show-time {",
                    "    #{$range-picker-prefix}-panel {",
                    "        &-input-start-date {",
                    "            margin-right: 0;",
                    "            margin-left: $s-2;",
                    "        }",
                    "",
                    "        &-input-end-time {",
                    "            margin-left: 0;",
                    "            margin-right: $s-2;",
                    "        }",
                    "",
                    "        &-time-start, &-time-end {",
                    "            float: right;",
                    "        }",
                    "        &-time-start {",
                    "            // Extend time-picker border",
                    "            border-right: none;",
                    "            border-left: $line-1 $line-solid $date-picker-panel-time-panel-separator-color;",
                    "        }",
                    "",
                    "        &-time-end {",
                    "            // Extend time-picker border",
                    "            border-left: none;",
                    "            border-right: $line-1 $line-solid $date-picker-panel-time-panel-separator-color;",
                    "        }",
                    "    }",
                    "    #{$time-picker-prefix}-menu {",
                    "        float: right;",
                    "        &:not(:last-child) {",
                    "            border-right: none;",
                    "            border-left: $time-picker-menu-border-width $line-solid $time-picker-menu-border-color;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../input/style.js';",
                    "import '../overlay/style.js';",
                    "import '../calendar/style.js';",
                    "import '../time-picker/style.js';",
                    "import '../button/style.js';",
                    "import './main.scss';"
                ]
            },
            "year-picker.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import moment from 'moment';",
                    "import Overlay from '../overlay';",
                    "import Input from '../input';",
                    "import Calendar from '../calendar';",
                    "import nextLocale from '../locale/zh-cn';",
                    "import { func, obj } from '../util';",
                    "import { checkDateValue, formatDateValue } from './util';",
                    "",
                    "const { Popup } = Overlay;",
                    "",
                    "/**",
                    " * DatePicker.YearPicker",
                    " */",
                    "class YearPicker extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 输入框内置标签",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 输入框状态",
                    "         */",
                    "        state: PropTypes.oneOf(['success', 'error']),",
                    "        /**",
                    "         * 输入提示",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 日期值（受控）moment 对象",
                    "         */",
                    "        value: checkDateValue,",
                    "        /**",
                    "         * 初始日期值，moment 对象",
                    "         */",
                    "        defaultValue: checkDateValue,",
                    "        /**",
                    "         * 日期值的格式（用于限定用户输入和展示）",
                    "         */",
                    "        format: PropTypes.string,",
                    "        /**",
                    "         * 禁用日期函数",
                    "         * @param {MomentObject} 日期值",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledDate: PropTypes.func,",
                    "        /**",
                    "         * 自定义面板页脚",
                    "         * @return {Node} 自定义的面板页脚组件",
                    "         */",
                    "        footerRender: PropTypes.func,",
                    "        /**",
                    "         * 日期值改变时的回调",
                    "         * @param {MomentObject|String} value 日期值",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 输入框尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示清空按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示状态",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层展示状态变化时的回调",
                    "         * @param {Boolean} visible 弹层是否显示",
                    "         * @param {String} reason 触发弹层显示和隐藏的来源",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层触发方式",
                    "         */",
                    "        popupTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 弹层对齐方式, 具体含义见 OverLay文档",
                    "         */",
                    "        popupAlign: PropTypes.string,",
                    "        /**",
                    "         * 弹层容器",
                    "         * @param {Element} target 目标元素",
                    "         * @return {Element} 弹层的容器元素",
                    "         */",
                    "        popupContainer: PropTypes.func,",
                    "        /**",
                    "         * 弹层自定义样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层自定义样式类",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层其他属性",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        locale: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "        format: 'YYYY',",
                    "        size: 'medium',",
                    "        disabledDate: () => false,",
                    "        footerRender: () => null,",
                    "        hasClear: true,",
                    "        popupTriggerType: 'click',",
                    "        popupAlign: 'tl tl',",
                    "        locale: nextLocale.DatePicker,",
                    "        onChange: func.noop,",
                    "        onVisibleChange: func.noop,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        const value = formatDateValue(props.value || props.defaultValue, props.format);",
                    "",
                    "        this.inputAsString = (typeof (props.value || props.defaultValue) === 'string'); // 判断用户输入是否是字符串",
                    "        this.state = {",
                    "            value,",
                    "            dateInputStr: '',",
                    "            inputing: false,",
                    "            visible: props.visible || props.defaultVisible,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            const value = formatDateValue(nextProps.value, nextProps.format || this.props.format);",
                    "            this.setState({",
                    "                value,",
                    "            });",
                    "            this.inputAsString = typeof nextProps.value === 'string';",
                    "        }",
                    "",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onValueChange = (newValue) => {",
                    "        const ret = (this.inputAsString && newValue) ? newValue.format(this.props.format) : newValue;",
                    "        this.props.onChange(ret);",
                    "    }",
                    "",
                    "    onSelectCalendarPanel = (value) => {",
                    "        // const { format } = this.props;",
                    "        const prevSelectedMonth = this.state.value;",
                    "        const selectedMonth = value.clone().month(0).date(1).hour(0).minute(0).second(0);",
                    "",
                    "        this.handleChange(selectedMonth, prevSelectedMonth, {inputing: false}, () => {",
                    "            this.onVisibleChange(false, 'calendarSelect');",
                    "        });",
                    "    }",
                    "",
                    "    clearValue = () => {",
                    "        this.setState({",
                    "            dateInputStr: '',",
                    "        });",
                    "",
                    "        this.handleChange(null, this.state.value);",
                    "    }",
                    "",
                    "    onDateInputChange = (inputStr, e, eventType) => {",
                    "        if (eventType === 'clear' || !inputStr) {",
                    "            e.stopPropagation();",
                    "            this.clearValue();",
                    "        } else {",
                    "            this.setState({",
                    "                dateInputStr: inputStr,",
                    "                inputing: true,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onDateInputBlur = () => {",
                    "        const { dateInputStr } = this.state;",
                    "        if (dateInputStr) {",
                    "            const { disabledDate, format } = this.props;",
                    "            const parsed = moment(dateInputStr, format, true);",
                    "",
                    "            this.setState({",
                    "                dateInputStr: '',",
                    "                inputing: false,",
                    "            });",
                    "",
                    "            if (parsed.isValid() && !disabledDate(parsed)) {",
                    "                this.handleChange(parsed, this.state.value);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    handleChange = (newValue, prevValue, others = {}, callback) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value: newValue,",
                    "                ...others",
                    "            });",
                    "        }",
                    "",
                    "        const { format } = this.props;",
                    "",
                    "        const newValueOf = newValue ? newValue.format(format) : null;",
                    "        const preValueOf = prevValue ? prevValue.format(format) : null;",
                    "",
                    "        if (newValueOf !== preValueOf) {",
                    "            this.onValueChange(newValue);",
                    "            typeof callback === 'function' && callback();",
                    "        }",
                    "    }",
                    "",
                    "    onVisibleChange = (visible, reason) => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible,",
                    "            });",
                    "        }",
                    "        this.props.onVisibleChange(visible, reason);",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            rtl,",
                    "            locale,",
                    "            label,",
                    "            state,",
                    "            format,",
                    "            disabledDate,",
                    "            footerRender,",
                    "            placeholder,",
                    "            size,",
                    "            disabled,",
                    "            hasClear,",
                    "            popupTriggerType,",
                    "            popupAlign,",
                    "            popupContainer,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupProps,",
                    "            className,",
                    "            ...others",
                    "        } = this.props;",
                    "",
                    "        const { visible, value, dateInputStr, inputing } = this.state;",
                    "",
                    "        const yearPickerCls = classnames({",
                    "            [`${prefix}year-picker`]: true,",
                    "        }, className);",
                    "",
                    "        const triggerInputCls = classnames({",
                    "            [`${prefix}year-picker-input`]: true,",
                    "            [`${prefix}error`]: false,",
                    "        });",
                    "",
                    "        const panelBodyClassName = classnames({",
                    "            [`${prefix}year-picker-body`]: true,",
                    "        });",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const panelInputCls = `${prefix}year-picker-panel-input`;",
                    "",
                    "        const sharedInputProps = {",
                    "            size,",
                    "            disabled,",
                    "            onChange: this.onDateInputChange,",
                    "            onBlur: this.onDateInputBlur,",
                    "            onPressEnter: this.onDateInputBlur,",
                    "        };",
                    "",
                    "        const dateInputValue = inputing ? dateInputStr : ((value && value.format(format)) || '');",
                    "        const triggerInputValue = dateInputValue;",
                    "",
                    "        const dateInput = (<Input",
                    "            {...sharedInputProps}",
                    "            value={dateInputValue}",
                    "            onFocus={this.onFoucsDateInput}",
                    "            placeholder={format}",
                    "            className={panelInputCls} />);",
                    "",
                    "        const datePanel = (<Calendar",
                    "            shape=\"panel\"",
                    "            modes={['year']}",
                    "            value={value}",
                    "            onSelect={this.onSelectCalendarPanel}",
                    "            disabledDate={disabledDate} />);",
                    "",
                    "        const panelBody = datePanel;",
                    "        const panelFooter = footerRender();",
                    "",
                    "        const allowClear = value && hasClear;",
                    "        const trigger = (<div className={`${prefix}year-picker-trigger`}>",
                    "            <Input",
                    "                {...sharedInputProps}",
                    "                label={label}",
                    "                state={state}",
                    "                value={triggerInputValue}",
                    "                placeholder={placeholder || locale.yearPlaceholder}",
                    "                hint=\"calendar\"",
                    "                hasClear={allowClear}",
                    "                className={triggerInputCls} />",
                    "        </div>);",
                    "",
                    "        return (<div {...obj.pickOthers(YearPicker.propTypes, others)} className={yearPickerCls}>",
                    "            <Popup",
                    "                {...popupProps}",
                    "                autoFocus",
                    "                disabled={disabled}",
                    "                visible={visible}",
                    "                onVisibleChange={this.onVisibleChange}",
                    "                align={popupAlign}",
                    "                triggerType={popupTriggerType}",
                    "                container={popupContainer}",
                    "                style={popupStyle}",
                    "                className={popupClassName}",
                    "                trigger={trigger}>",
                    "                <div dir={others.dir} className={panelBodyClassName}>",
                    "                    <div className={`${prefix}year-picker-panel-header`}>",
                    "                        {dateInput}",
                    "                    </div>",
                    "                    {panelBody}",
                    "                    {panelFooter}",
                    "                </div>",
                    "            </Popup>",
                    "        </div>);",
                    "    }",
                    "}",
                    "",
                    "export default YearPicker;"
                ]
            },
            "module": {
                "panel-footer.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import Button from '../../button';",
                        "import { func } from '../../util';",
                        "import { PANEL } from '../util';",
                        "",
                        "class PanelFooter extends React.PureComponent {",
                        "",
                        "    static defaultProps = {",
                        "        // onPanelChange: func.noop,",
                        "        onOk: func.noop,",
                        "    }",
                        "",
                        "    changePanel = () => {",
                        "        const targetPanel = ({",
                        "            [PANEL.DATE]: PANEL.TIME,",
                        "            [PANEL.TIME]: PANEL.DATE,",
                        "        })[this.props.panel];",
                        "        this.props.onPanelChange(targetPanel);",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, locale, panel, value, onPanelChange, onOk } = this.props;",
                        "        const panelBtnLabel = ({",
                        "            [PANEL.DATE]: locale.selectTime,",
                        "            [PANEL.TIME]: locale.selectDate,",
                        "        })[panel];",
                        "",
                        "        const sharedBtnProps = {",
                        "            size: 'small',",
                        "            type: 'primary',",
                        "            disabled: !value,",
                        "        };",
                        "",
                        "        return (<div className={`${prefix}date-picker-panel-footer`}>",
                        "            {",
                        "                onPanelChange ?",
                        "                    <Button {...sharedBtnProps} text onClick={this.changePanel}>{panelBtnLabel}</Button> : null",
                        "            }",
                        "            <Button {...sharedBtnProps} onClick={onOk}>{locale.ok}</Button>",
                        "        </div>);",
                        "    }",
                        "}",
                        "",
                        "export default PanelFooter;"
                    ]
                }
            },
            "scss": {
                "date-picker.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "//",
                        "// date-picker 样式",
                        "//",
                        "#{$date-picker-prefix}, #{$month-picker-prefix}, #{$year-picker-prefix} {",
                        "    display: inline-block;",
                        "    width: $s-50;",
                        "",
                        "    &-input {",
                        "        width: 100%;",
                        "    }",
                        "",
                        "    &-body {",
                        "        width: $s-18 * 4;",
                        "    }",
                        "",
                        "    &-panel-input#{$date-picker-input-prefix} {",
                        "        width: 100%;",
                        "        background: $color-transparent;",
                        "    }",
                        "}",
                        "",
                        "#{$date-picker-prefix}-body#{$date-picker-prefix}-body-show-time {",
                        "    #{$date-picker-prefix}-panel-input#{$date-picker-input-prefix} {",
                        "        width: 49%;",
                        "",
                        "        &:first-child {",
                        "            margin-right: 2%;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "",
                        "%input-separator {",
                        "    cursor: default;",
                        "    display: inline-block;",
                        "    text-align: center;",
                        "    color: $color-text1-1;",
                        "    width: $date-picker-input-separator-width;",
                        "    font-size: $font-size-caption;",
                        "    vertical-align: middle;",
                        "}",
                        "",
                        "@mixin range-picker-input-corner($corner) {",
                        "    #{$range-picker-prefix} {",
                        "        &-trigger, &-panel-input {",
                        "            border-radius: $corner;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "range-picker.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "//",
                        "// date-picker 样式",
                        "//",
                        "#{$range-picker-prefix} {",
                        "",
                        "    display: inline-block;",
                        "    width: $s-28 * 3;",
                        "",
                        "    &-input {",
                        "        width: 100%;",
                        "    }",
                        "",
                        "    &-trigger {",
                        "        // Extend next-input",
                        "        border: $input-border-width solid $input-border-color;",
                        "        background-color: $input-bg-color;",
                        "",
                        "        // Extend next-input",
                        "        &:hover {",
                        "            border-color: $input-hover-border-color;",
                        "            background-color: $input-hover-bg-color;",
                        "        }",
                        "",
                        "        // Extend next-input",
                        "        &.#{$css-prefix}error {",
                        "            border-color: $input-feedback-error-border-color;",
                        "        }",
                        "",
                        "        &-separator {",
                        "            @extend %input-separator;",
                        "        }",
                        "",
                        "        &-input#{$date-picker-input-prefix} {",
                        "            height: auto;",
                        "            width: calc((100% - #{$date-picker-input-separator-width}) / 2);",
                        "        }",
                        "    }",
                        "",
                        "    &.#{$css-prefix}disabled {",
                        "        #{$range-picker-prefix}-trigger {",
                        "            cursor: not-allowed;",
                        "            @include input-disabled();",
                        "        }",
                        "    }",
                        "",
                        "    &.#{$css-prefix}large {",
                        "        @include range-picker-input-corner($form-element-large-corner);",
                        "    }",
                        "",
                        "    &.#{$css-prefix}medium {",
                        "        @include range-picker-input-corner($form-element-medium-corner);",
                        "    }",
                        "",
                        "    &.#{$css-prefix}small {",
                        "        @include range-picker-input-corner($form-element-small-corner);",
                        "    }",
                        "",
                        "    &-body {",
                        "        width: $s-30 * 5;",
                        "    }",
                        "",
                        "    &-panel {",
                        "        &-input-separator {",
                        "            @extend %input-separator;",
                        "        }",
                        "",
                        "        &-input-start-date#{$date-picker-input-prefix},",
                        "        &-input-end-date#{$date-picker-input-prefix} {",
                        "            width: calc((100% - #{$date-picker-input-separator-width}) / 2);",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "#{$range-picker-prefix}-body#{$range-picker-prefix}-body-show-time {",
                        "    #{$range-picker-prefix}-panel {",
                        "        &-input-start-date,",
                        "        &-input-end-date,",
                        "        &-input-start-time,",
                        "        &-input-end-time {",
                        "            width: calc((100% - #{$date-picker-input-separator-width} - #{$s-4}) / 4);",
                        "        }",
                        "",
                        "        &-input-start-date {",
                        "            margin-right: $s-2;",
                        "        }",
                        "",
                        "        &-input-end-time {",
                        "            margin-left: $s-2;",
                        "        }",
                        "",
                        "        // time-panel",
                        "        &-time {",
                        "            @include clearfix;",
                        "        }",
                        "",
                        "        &-time-start, &-time-end {",
                        "            width: 50%;",
                        "            float: left;",
                        "        }",
                        "",
                        "        &-time-start {",
                        "            // Extend time-picker border",
                        "            border-right: $line-1 $line-solid $date-picker-panel-time-panel-separator-color;",
                        "        }",
                        "",
                        "        &-time-end {",
                        "            // Extend time-picker border",
                        "            border-left: $line-1 $line-solid $date-picker-panel-time-panel-separator-color;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module date-picker: 日期选择",
                        "/// @tag DatePicker",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $date-picker",
                        "/// @classPrefix {prefix}-date-picker",
                        "/// @order {\"size/panel footer\":10,\"statement/normal\":10,\"statement/normal/panel\":100}",
                        "////",
                        "",
                        "",
                        "$date-picker-prefix: '.' + $css-prefix + 'date-picker';",
                        "",
                        "$range-picker-prefix: '.' + $css-prefix + 'range-picker';",
                        "",
                        "$month-picker-prefix: '.' + $css-prefix + 'month-picker';",
                        "",
                        "$year-picker-prefix: '.' + $css-prefix + 'year-picker';",
                        "",
                        "$date-picker-btn-prefix: '.' + $css-prefix + 'btn';",
                        "",
                        "$date-picker-input-prefix: '.' + $css-prefix  + 'input';",
                        "",
                        "$date-picker-time-prefix: '.' + $css-prefix  + 'time-picker';",
                        "",
                        "/// 日期输入框",
                        "// --------------------------------------------------",
                        "",
                        "$date-picker-input-separator-width: $s-4 !default;",
                        "",
                        "// 日期选择面板",
                        "// --------------------------------------------------",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/panel footer",
                        "$date-picker-panel-footer-padding-lr: $s-5 !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/panel footer",
                        "$date-picker-panel-footer-padding-tb: $s-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/panel",
                        "$date-picker-panel-background: $color-white !default;",
                        "",
                        "/// separator border",
                        "/// @namespace statement/normal/panel",
                        "$date-picker-panel-time-panel-separator-color: $color-line1-2 !default;"
                    ]
                }
            },
            "util": {
                "index.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import moment from 'moment';",
                        "",
                        "export const PANEL = {",
                        "    TIME: 'time-panel',",
                        "    DATE: 'date-panel',",
                        "};",
                        "",
                        "export const DEFAULT_TIME_FORMAT = 'HH:mm:ss';",
                        "",
                        "export function isFunction(obj) {",
                        "    return !!(obj && obj.constructor && obj.call && obj.apply);",
                        "}",
                        "",
                        "/**",
                        " * 将 source 的 time 替换为 target 的 time",
                        " * @param {Object} source 输入值",
                        " * @param {Object} target 目标值",
                        " */",
                        "export function resetValueTime(source, target) {",
                        "    if (!moment.isMoment(source) || !moment.isMoment(target)) {",
                        "        return source;",
                        "    }",
                        "    return source.clone().hour(target.hour()).minute(target.minute()).second(target.second());",
                        "}",
                        "",
                        "export function formatDateValue(value, format) {",
                        "    const val = typeof value === 'string' ? moment(value, format, false) : value;",
                        "    if (val && moment.isMoment(val) && val.isValid()) {",
                        "        return val;",
                        "    }",
                        "",
                        "    return null;",
                        "}",
                        "",
                        "export function checkDateValue(props, propName, componentName) {",
                        "    // 支持传入 moment 对象或字符串，字符串不检测是否为日期字符串",
                        "    if (props[propName] && (!moment.isMoment(props[propName])) && typeof props[propName] !== 'string') {",
                        "        return new Error(`Invalid prop ${propName} supplied to ${componentName}. Required a moment object or format date string!`);",
                        "    }",
                        "}",
                        "",
                        "export function getDateTimeFormat(format, showTime) {",
                        "    const timeFormat = showTime ? (showTime.format || DEFAULT_TIME_FORMAT) : '';",
                        "    const dateTimeFormat = timeFormat ? `${format} ${timeFormat}` : format;",
                        "    return {",
                        "        format,",
                        "        timeFormat,",
                        "        dateTimeFormat,",
                        "    };",
                        "}",
                        "",
                        "export function extend(source, target) {",
                        "    for (const key in source) {",
                        "        if (source.hasOwnProperty(key)) {",
                        "            target[key] = source[key];",
                        "        }",
                        "    }",
                        "    return target;",
                        "}"
                    ]
                }
            }
        },
        "demo-helper": {
            ".stylelintrc": {},
            "icon.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@font-face {",
                    "    /* project id 272666 */",
                    "    font-family: 'iconfont';",
                    "    src: url('//at.alicdn.com/t/font_o8u52jwbfgm8to6r.eot');",
                    "    src: url('//at.alicdn.com/t/font_o8u52jwbfgm8to6r.eot?#iefix') format('embedded-opentype'), url('//at.alicdn.com/t/font_o8u52jwbfgm8to6r.woff') format('woff'), url('//at.alicdn.com/t/font_o8u52jwbfgm8to6r.ttf') format('truetype'), url('//at.alicdn.com/t/font_o8u52jwbfgm8to6r.svg#iconfont') format('svg');",
                    "}",
                    "",
                    ".demo-icon {",
                    "    font-family: 'iconfont' !important;",
                    "    font-size: 12px;",
                    "    font-style: normal;",
                    "    -webkit-font-smoothing: antialiased;",
                    "    -moz-osx-font-smoothing: grayscale;",
                    "    cursor: pointer;",
                    "}",
                    "",
                    ".demo-icon-all:before {",
                    "    content: \"\\e662\";",
                    "}",
                    "",
                    ".demo-icon-cart:before {",
                    "    content: \"\\e618\";",
                    "}",
                    "",
                    ".demo-icon-comments:before {",
                    "    content: \"\\e605\";",
                    "}",
                    "",
                    ".demo-icon-cry:before {",
                    "    content: \"\\e61a\";",
                    "}",
                    "",
                    ".demo-icon-email:before {",
                    "    content: \"\\e663\";",
                    "}",
                    "",
                    ".demo-icon-favorite:before {",
                    "    content: \"\\e60a\";",
                    "}",
                    "",
                    ".demo-icon-folder:before {",
                    "    content: \"\\e61b\";",
                    "}",
                    "",
                    ".demo-icon-form:before {",
                    "    content: \"\\e61c\";",
                    "}",
                    "",
                    ".demo-icon-help:before {",
                    "    content: \"\\e61f\";",
                    "}",
                    "",
                    ".demo-icon-refresh:before {",
                    "    content: \"\\e621\";",
                    "}",
                    "",
                    ".demo-icon-set:before {",
                    "    content: \"\\e623\";",
                    "}",
                    "",
                    ".demo-icon-training:before {",
                    "    content: \"\\e624\";",
                    "}",
                    "",
                    ".demo-icon-account:before {",
                    "    content: \"\\e664\";",
                    "}",
                    "",
                    ".demo-icon-atm:before {",
                    "    content: \"\\e626\";",
                    "}",
                    "",
                    ".demo-icon-clock:before {",
                    "    content: \"\\e615\";",
                    "}",
                    "",
                    ".demo-icon-attachment:before {",
                    "    content: \"\\e627\";",
                    "}",
                    "",
                    ".demo-icon-3column:before {",
                    "    content: \"\\e628\";",
                    "}",
                    "",
                    ".demo-icon-4column:before {",
                    "    content: \"\\e629\";",
                    "}",
                    "",
                    ".demo-icon-discount:before {",
                    "    content: \"\\e62a\";",
                    "}",
                    "",
                    ".demo-icon-service:before {",
                    "    content: \"\\e62b\";",
                    "}",
                    "",
                    ".demo-icon-print:before {",
                    "    content: \"\\e62c\";",
                    "}",
                    "",
                    ".demo-icon-box:before {",
                    "    content: \"\\e62d\";",
                    "}",
                    "",
                    ".demo-icon-browse:before {",
                    "    content: \"\\e634\";",
                    "}",
                    "",
                    ".demo-icon-atm-away:before {",
                    "    content: \"\\e635\";",
                    "}",
                    "",
                    ".demo-icon-scanning:before {",
                    "    content: \"\\e636\";",
                    "}",
                    "",
                    ".demo-icon-compare:before {",
                    "    content: \"\\e637\";",
                    "}",
                    "",
                    ".demo-icon-filter:before {",
                    "    content: \"\\e638\";",
                    "}",
                    "",
                    ".demo-icon-pin:before {",
                    "    content: \"\\e639\";",
                    "}",
                    "",
                    ".demo-icon-history:before {",
                    "    content: \"\\e63a\";",
                    "}",
                    "",
                    ".demo-icon-similar-product:before {",
                    "    content: \"\\e63b\";",
                    "}",
                    "",
                    ".demo-icon-link:before {",
                    "    content: \"\\e63c\";",
                    "}",
                    "",
                    ".demo-icon-cut:before {",
                    "    content: \"\\e64a\";",
                    "}",
                    "",
                    ".demo-icon-table:before {",
                    "    content: \"\\e63e\";",
                    "}",
                    "",
                    ".demo-icon-nav-list:before {",
                    "    content: \"\\e63f\";",
                    "}",
                    "",
                    ".demo-icon-image-text:before {",
                    "    content: \"\\e640\";",
                    "}",
                    "",
                    ".demo-icon-text:before {",
                    "    content: \"\\e641\";",
                    "}",
                    "",
                    ".demo-icon-move:before {",
                    "    content: \"\\e642\";",
                    "}",
                    "",
                    ".demo-icon-subtract:before {",
                    "    content: \"\\e650\";",
                    "}",
                    "",
                    ".demo-icon-dollar:before {",
                    "    content: \"\\e643\";",
                    "}",
                    "",
                    ".demo-icon-office:before {",
                    "    content: \"\\e644\";",
                    "}",
                    "",
                    ".demo-icon-operation:before {",
                    "    content: \"\\e645\";",
                    "}",
                    "",
                    ".demo-icon-download:before {",
                    "    content: \"\\e646\";",
                    "}",
                    "",
                    ".demo-icon-map:before {",
                    "    content: \"\\e647\";",
                    "}",
                    "",
                    ".demo-icon-bad:before {",
                    "    content: \"\\e648\";",
                    "}",
                    "",
                    ".demo-icon-good:before {",
                    "    content: \"\\e649\";",
                    "}",
                    "",
                    ".demo-icon-skip:before {",
                    "    content: \"\\e64b\";",
                    "}",
                    "",
                    ".demo-icon-play:before {",
                    "    content: \"\\e64c\";",
                    "}",
                    "",
                    ".demo-icon-stop:before {",
                    "    content: \"\\e64d\";",
                    "}",
                    "",
                    ".demo-icon-compass:before {",
                    "    content: \"\\e64e\";",
                    "}",
                    "",
                    ".demo-icon-security:before {",
                    "    content: \"\\e64f\";",
                    "}",
                    "",
                    ".demo-icon-share:before {",
                    "    content: \"\\e651\";",
                    "}",
                    "",
                    ".demo-icon-store:before {",
                    "    content: \"\\e652\";",
                    "}",
                    "",
                    ".demo-icon-phone:before {",
                    "    content: \"\\e653\";",
                    "}",
                    "",
                    ".demo-icon-ellipsis:before {",
                    "    content: \"\\e654\";",
                    "}",
                    "",
                    ".demo-icon-email-filling:before {",
                    "    content: \"\\e665\";",
                    "}",
                    "",
                    ".demo-icon-favorites-filling:before {",
                    "    content: \"\\e666\";",
                    "}",
                    "",
                    ".demo-icon-account-filling:before {",
                    "    content: \"\\e667\";",
                    "}",
                    "",
                    ".demo-icon-credit-level:before {",
                    "    content: \"\\e65a\";",
                    "}",
                    "",
                    ".demo-icon-credit-level-filling:before {",
                    "    content: \"\\e65c\";",
                    "}",
                    "",
                    ".demo-icon-mobile-phone:before {",
                    "    content: \"\\e65d\";",
                    "}",
                    "",
                    ".demo-icon-smile:before {",
                    "    content: \"\\e668\";",
                    "}",
                    "",
                    ".demo-icon-personal-center:before {",
                    "    content: \"\\e669\";",
                    "}",
                    "",
                    ".demo-icon-arrow-up-filling:before {",
                    "    content: \"\\e601\";",
                    "}",
                    "",
                    ".demo-icon-arrow-right:before {",
                    "    content: \"\\e603\";",
                    "}",
                    "",
                    ".demo-icon-arrow-down:before {",
                    "    content: \"\\e66b\";",
                    "}",
                    "",
                    ".demo-icon-arrow-up:before {",
                    "    content: \"\\e66c\";",
                    "}",
                    "",
                    ".demo-icon-add:before {",
                    "    content: \"\\e66f\";",
                    "}",
                    "",
                    ".demo-icon-minus:before {",
                    "    content: \"\\e670\";",
                    "}",
                    "",
                    ".demo-icon-edit:before {",
                    "    content: \"\\e613\";",
                    "}",
                    "",
                    ".demo-icon-error:before {",
                    "    content: \"\\e672\";",
                    "}",
                    "",
                    ".demo-icon-select:before {",
                    "    content: \"\\e673\";",
                    "}",
                    "",
                    ".demo-icon-ashbin:before {",
                    "    content: \"\\e61e\";",
                    "}",
                    "",
                    ".demo-icon-calendar:before {",
                    "    content: \"\\e620\";",
                    "}",
                    "",
                    ".demo-icon-time:before {",
                    "    content: \"\\e622\";",
                    "}",
                    "",
                    ".demo-icon-success:before {",
                    "    content: \"\\e674\";",
                    "}",
                    "",
                    ".demo-icon-warning:before {",
                    "    content: \"\\e675\";",
                    "}",
                    "",
                    ".demo-icon-search:before {",
                    "    content: \"\\e656\";",
                    "}",
                    "",
                    ".demo-icon-display:before {",
                    "    content: \"\\e677\";",
                    "}",
                    "",
                    ".demo-icon-category:before {",
                    "    content: \"\\e658\";",
                    "}",
                    "",
                    ".demo-icon-prompt:before {",
                    "    content: \"\\e678\";",
                    "}",
                    "",
                    ".demo-icon-arrow-down-filling:before {",
                    "    content: \"\\e65b\";",
                    "}",
                    "",
                    ".demo-icon-sorting:before {",
                    "    content: \"\\e676\";",
                    "}",
                    "",
                    ".demo-icon-ascending:before {",
                    "    content: \"\\e606\";",
                    "}",
                    "",
                    ".demo-icon-descending:before {",
                    "    content: \"\\e608\";",
                    "}",
                    "",
                    ".demo-icon-success-filling:before {",
                    "    content: \"\\e679\";",
                    "}",
                    "",
                    ".demo-icon-picture:before {",
                    "    content: \"\\e60c\";",
                    "}",
                    "",
                    ".demo-icon-close:before {",
                    "    content: \"\\e67a\";",
                    "}",
                    "",
                    ".demo-icon-semi-select:before {",
                    "    content: \"\\e67b\";",
                    "}",
                    "",
                    ".demo-icon-tag-subscript:before {",
                    "    content: \"\\e614\";",
                    "}",
                    "",
                    ".demo-icon-survey:before {",
                    "    content: \"\\e65f\";",
                    "}",
                    "",
                    ".demo-icon-loading:before {",
                    "    content: \"\\e67c\";",
                    "}",
                    "",
                    ".demo-icon-arrow-double-left:before {",
                    "    content: \"\\e616\";",
                    "}",
                    "",
                    ".demo-icon-arrow-double-right:before {",
                    "    content: \"\\e661\";",
                    "}",
                    "",
                    ".demo-icon-nav-more:before {",
                    "    content: \"\\e67d\";",
                    "}",
                    "",
                    ".demo-icon-delete-filling:before {",
                    "    content: \"\\e681\";",
                    "}",
                    "",
                    ".demo-icon-arrow-left:before {",
                    "    content: \"\\e682\";",
                    "}",
                    "",
                    ".demo-icon-lights:before {",
                    "    content: \"\\e66d\";",
                    "}",
                    "",
                    ".demo-icon-expand:before {",
                    "    content: \"\\e66e\";",
                    "}",
                    "",
                    ".demo-icon-hide:before {",
                    "    content: \"\\e671\";",
                    "}",
                    "",
                    ".demo-icon-fusion-logo:before {",
                    "    content: \"\\e67f\";",
                    "}",
                    "",
                    ".demo-icon-arrow-right-filling:before {",
                    "    content: \"\\e680\";",
                    "}",
                    "",
                    ".demo-icon-arrow-left-filling:before {",
                    "    content: \"\\e683\";",
                    "}",
                    "",
                    ".demo-icon-superstar:before {",
                    "    content: \"\\e684\";",
                    "}",
                    "",
                    ".demo-icon-qr-code:before {",
                    "    content: \"\\e685\";",
                    "}",
                    "",
                    ".demo-icon-home:before {",
                    "    content: \"\\e689\";",
                    "}",
                    "",
                    ".demo-icon-electronics:before {",
                    "    content: \"\\e68a\";",
                    "}",
                    "",
                    ".demo-icon-import:before {",
                    "    content: \"\\e67e\";",
                    "}",
                    "",
                    ".demo-icon-process:before {",
                    "    content: \"\\e687\";",
                    "}",
                    "",
                    ".demo-icon-gifts:before {",
                    "    content: \"\\e688\";",
                    "}",
                    "",
                    ".demo-icon-bags:before {",
                    "    content: \"\\e68b\";",
                    "}",
                    "",
                    ".demo-icon-pointing-left:before {",
                    "    content: \"\\e68c\";",
                    "}",
                    "",
                    ".demo-icon-pointing-right:before {",
                    "    content: \"\\e68d\";",
                    "}",
                    "",
                    ".demo-icon-no-results:before {",
                    "    content: \"\\e686\";",
                    "}",
                    "",
                    ".demo-icon-auto:before {",
                    "    content: \"\\e68e\";",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import md5 from 'md5';",
                    "",
                    "const COL = '{Col}';",
                    "const LABEL = '{Label}';",
                    "const TITLE = '{Title}';",
                    "const { showType = 'none', demoItems = {} } = window.DEMO_VARIABLE || {};",
                    "const callback = [];",
                    "const COOL = {};",
                    "const FUN = {};",
                    "let demoCount = 0;",
                    "",
                    "// TODO: { functions, statements, sizes }",
                    "",
                    "function convertArrayToObject(demoFunction) {",
                    "    const objDemoFunction = {};",
                    "    if (Array.isArray(demoFunction)) {",
                    "        demoFunction.forEach(demo => {",
                    "            objDemoFunction[demo.name] = {",
                    "                label: demo.label,",
                    "                value: demo.value,",
                    "                enum: demo.enum.map(e => {",
                    "                    let label = e;",
                    "                    if (e === 'true') {",
                    "                        label = '是';",
                    "                    } else if (e === 'false') {",
                    "                        label = '否';",
                    "                    }",
                    "",
                    "                    return {",
                    "                        label: label,",
                    "                        value: e",
                    "                    };",
                    "                })",
                    "            };",
                    "        });",
                    "        return objDemoFunction;",
                    "    }",
                    "    return demoFunction;",
                    "}",
                    "",
                    "function convertObjectToArray(demoFunction) {",
                    "    const arrayDemo = [];",
                    "    Object.keys(demoFunction).forEach(name => {",
                    "        const demo = demoFunction[name];",
                    "        arrayDemo.push({",
                    "            name: name,",
                    "            label: demo.label,",
                    "            value: demo.value,",
                    "            enum: demo.enum.map(e => {",
                    "                return e.value;",
                    "            })",
                    "        });",
                    "    });",
                    "    return arrayDemo;",
                    "}",
                    "",
                    "/**",
                    " * XyzAbc -> xyz-abc",
                    " * @param {String} str 驼峰字符串",
                    " * @return {String} 输出规范化的字符串",
                    " */",
                    "function deCamelize(str) {",
                    "    const matches = str.match(/([A-Z][a-z]{2,})/g);",
                    "    if (matches === null) {",
                    "        // return str.toLowerCase();",
                    "        return str;",
                    "    }",
                    "    return matches.toString()",
                    "        .replace(',', '-')",
                    "        .toLowerCase();",
                    "}",
                    "",
                    "/**",
                    " * 格式化词组 'AbcZex XyzYxx' -> 'abc-zex xyz-yxx'",
                    " * @param {String} str 驼峰词组",
                    " * @return {String} 输出格式化的词组",
                    " */",
                    "function formatTitle(str) {",
                    "    if (!str || typeof str !== 'string') {",
                    "        return;",
                    "    }",
                    "    return str.split(' ').map(deCamelize).join(' ');",
                    "}",
                    "",
                    "class Demo extends Component {",
                    "    static displayName = 'Demo'",
                    "",
                    "    static propTypes = {",
                    "        parentDisplayName: PropTypes.string,",
                    "        defaultBackground: PropTypes.oneOf(['dark', 'light']),",
                    "        title: PropTypes.string,",
                    "        block: PropTypes.bool,",
                    "        children: PropTypes.any,",
                    "        className: PropTypes.string,",
                    "        demoIndex: PropTypes.string,",
                    "        demoItems: PropTypes.object,",
                    "        demoScope: PropTypes.object,",
                    "        demoTitle: PropTypes.string,",
                    "        showType: PropTypes.string,",
                    "        switchVisible: PropTypes.func,",
                    "        switchBackground: PropTypes.bool,",
                    "        demoFunction: PropTypes.object,",
                    "        onFunctionChange: PropTypes.func,",
                    "        style: PropTypes.object,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        defaultBackground: 'light',",
                    "        block: false,",
                    "        onFunctionChange: () => {",
                    "        }",
                    "    }",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            demoIndex: props.demoIndex || `${demoCount++}`,",
                    "            demoItems: props.demoItems || demoItems,",
                    "            showType: props.showType || showType,",
                    "            background: props.defaultBackground,",
                    "            initDate: new Date().getTime()",
                    "        };",
                    "",
                    "        if (!props.demoIndex) {",
                    "            callback.push(this.setVisible.bind(this));",
                    "        }",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('defaultBackground' in nextProps) {",
                    "            this.setState({",
                    "                background: nextProps.defaultBackground",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    setVisible(data) {",
                    "        delete data.demoIndex;",
                    "",
                    "        this.setState(data);",
                    "    }",
                    "",
                    "    switchVisible(demoIndex) {",
                    "        const demoItems = this.props.demoItems || this.state.demoItems;",
                    "",
                    "        // TIP: 清理无效数据",
                    "        Object.keys(demoItems).forEach(key => {",
                    "            if (demoItems[key].existed) {",
                    "                delete demoItems[key].existed;",
                    "            } else {",
                    "                delete demoItems[key];",
                    "            }",
                    "        });",
                    "",
                    "        if (!demoItems[demoIndex]) {",
                    "            return;",
                    "        }",
                    "",
                    "        const { hidden = false } = demoItems[demoIndex];",
                    "        const childKeys = Object.keys(demoItems).filter(key => new RegExp(`^${demoIndex.replace(/\\*/, '(\\\\*|\\\\d+)')}`).test(key));",
                    "",
                    "        // TIP: 更新当前控制器",
                    "        demoItems[demoIndex].hidden = !hidden;",
                    "        // TIP: 更新下级控制器",
                    "        childKeys.forEach(key => {",
                    "            if (key.indexOf('*') > -1) {",
                    "                demoItems[key].hidden = !hidden;",
                    "            }",
                    "        });",
                    "        // TIP: 更新 DEMO",
                    "        childKeys.forEach(key => {",
                    "            if (key.indexOf('*') < 0) {",
                    "                demoItems[key].hidden = (demoItems[key.replace(/\\d+$/, '*')] || {}).hidden || (demoItems[key.replace(/\\d+-(\\d+)$/, '*-$1')] || {}).hidden || !hidden;",
                    "            }",
                    "        });",
                    "        // TIP: 同步上级控制器",
                    "        this.syncVisible(demoIndex, demoItems);",
                    "",
                    "        sendMessage(window.compName, 'displayed', {",
                    "            demoIndex,",
                    "            demoItems",
                    "        });",
                    "    }",
                    "",
                    "    syncVisible(demoIndex, demoItems) {",
                    "        let index = demoIndex.replace(/(-(\\*|\\d+)){2}$/, '-\\\\d+-\\\\d+');",
                    "",
                    "        if (index !== demoIndex) {",
                    "            const itemKeys = Object.keys(demoItems).filter(key => new RegExp(`^${index}`).test(key) && key.indexOf('*') < 0);",
                    "            const hidden = demoItems[itemKeys[0] || demoIndex].hidden;",
                    "            let sameValue = true;",
                    "",
                    "            itemKeys.forEach(key => {",
                    "                if (!!demoItems[key].hidden !== hidden) {",
                    "                    sameValue = false;",
                    "                }",
                    "            });",
                    "",
                    "            index = demoIndex.replace(/-(\\*|\\d+)-(\\*|\\d+)$/, '-*');",
                    "",
                    "            demoItems[index].hidden = sameValue && hidden || false;",
                    "",
                    "            this.syncVisible(index, demoItems);",
                    "        }",
                    "    }",
                    "",
                    "    switchBackground() {",
                    "        const background = this.state.background === 'light' ? 'dark' : 'light';",
                    "",
                    "        this.setState({",
                    "            background: background",
                    "        });",
                    "    }",
                    "",
                    "    onFunctionChange(name, e) {",
                    "        e.stopPropagation();",
                    "",
                    "        const value = e.currentTarget.value;",
                    "        const demoFunction = convertArrayToObject(this.props.demoFunction);",
                    "",
                    "        let nextDemoFunction = {};",
                    "        Object.keys(demoFunction).forEach((funcName) => {",
                    "            const func = demoFunction[funcName];",
                    "",
                    "            if (funcName === name) {",
                    "                func.value = value;",
                    "            }",
                    "",
                    "            nextDemoFunction[funcName] = func;",
                    "        });",
                    "",
                    "        if (Array.isArray(this.props.demoFunction)) {",
                    "            nextDemoFunction = convertObjectToArray(nextDemoFunction);",
                    "        }",
                    "",
                    "        this.props.onFunctionChange(nextDemoFunction);",
                    "        return false;",
                    "    }",
                    "",
                    "    render() {",
                    "        let isDemoShape = false;",
                    "        let hasDemoLevel = false;",
                    "        let children;",
                    "",
                    "        const block = this.props.block ? 'block' : null;",
                    "        const index = this.props.demoIndex || this.state.demoIndex;",
                    "        const demoItems = this.props.demoItems || this.state.demoItems;",
                    "        const demoScope = this.props.demoScope || this;",
                    "        const demoTitle = this.props.demoTitle ? `${this.props.demoTitle} -> ${this.props.title || TITLE}` : (this.props.title || TITLE);",
                    "        const showType = this.props.showType || this.state.showType;",
                    "        const switchVisible = this.props.switchVisible || this.switchVisible;",
                    "        const { background, initDate } = this.state;",
                    "        const { className, switchBackground, style } = this.props;",
                    "        const demoFunction = convertArrayToObject(this.props.demoFunction);",
                    "",
                    "        if (this.props.children) {",
                    "            isDemoShape = this.props.parentDisplayName !== 'Demo';",
                    "",
                    "            let first;",
                    "            if (Array.isArray(this.props.children)) {",
                    "                first = this.props.children[0];",
                    "            } else {",
                    "                first = this.props.children;",
                    "            }",
                    "",
                    "            hasDemoLevel = first.type.displayName === 'Demo';",
                    "        }",
                    "",
                    "        // 注入 demoFunction 到 window.COOL",
                    "        if (isDemoShape && this.props.title && demoFunction) {",
                    "            FUN[this.props.title] = {};",
                    "            Object.keys(demoFunction).forEach((funcName) => {",
                    "                const func = demoFunction[funcName];",
                    "                func.name = funcName;",
                    "                FUN[this.props.title][funcName] = func;",
                    "            });",
                    "        }",
                    "",
                    "        let demoShapeLevel;",
                    "        if ((isDemoShape && !hasDemoLevel) || !isDemoShape) {",
                    "            demoShapeLevel = demoTitle.split(' -> ').join('_');",
                    "",
                    "            const body = React.Children.map(this.props.children, (child, i) => {",
                    "                return React.cloneElement(child, {",
                    "                    block: this.props.block,",
                    "                    demoIndex: `${index}-${i}`,",
                    "                    demoItems,",
                    "                    demoScope,",
                    "                    demoTitle,",
                    "                    demoShapeLevel,",
                    "                    showType,",
                    "                    switchVisible",
                    "                });",
                    "            });",
                    "",
                    "            children = (",
                    "                <table className={block}>",
                    "                    <tbody>",
                    "                        {body}",
                    "                    </tbody>",
                    "                </table>",
                    "            );",
                    "        } else {",
                    "            children = React.Children.map(this.props.children, (child, i) => {",
                    "                return React.cloneElement(child, {",
                    "                    parentDisplayName: 'Demo',",
                    "                    defaultBackground: background,",
                    "                    demoIndex: `${index}-${i}`,",
                    "                    demoItems,",
                    "                    demoScope,",
                    "                    demoTitle,",
                    "                    demoFunction,",
                    "                    showType,",
                    "                    switchVisible",
                    "                });",
                    "            });",
                    "        }",
                    "",
                    "        const functionSelect = [];",
                    "        if (isDemoShape && demoFunction) {",
                    "            Object.keys(demoFunction).forEach((funcName, i) => {",
                    "                const func = demoFunction[funcName];",
                    "                const tmpRadio = [];",
                    "                const name = md5(`${funcName}-${initDate}`);",
                    "",
                    "                func.enum.forEach((enumObj, j) => {",
                    "                    const checked = enumObj.value.toString() === func.value;",
                    "",
                    "                    tmpRadio.push(",
                    "                        <label key={j}>",
                    "                            <input type=\"radio\" name={name} data-func={funcName} value={enumObj.value.toString()} onChange={this.onFunctionChange.bind(this, funcName)} defaultChecked={checked} />",
                    "                            {enumObj.label.toString()}",
                    "                        </label>",
                    "                    );",
                    "                });",
                    "",
                    "                functionSelect.push(",
                    "                    <li key={i}>",
                    "                        <span title={func.label}>{func.label}:</span>",
                    "                        {tmpRadio}",
                    "                    </li>",
                    "                );",
                    "            });",
                    "        }",
                    "",
                    "        const demoIndex = `${index}-*`;",
                    "        const { hidden = false } = demoItems[demoIndex] || {};",
                    "",
                    "        if (showType === 'hidden' || !hidden) {",
                    "            if (!demoItems[demoIndex]) {",
                    "                demoItems[demoIndex] = {",
                    "                    hidden: false,",
                    "                    title: demoTitle",
                    "                };",
                    "            } else {",
                    "                demoItems[demoIndex].title = demoTitle;",
                    "            }",
                    "            demoItems[demoIndex].existed = true;",
                    "",
                    "",
                    "            const wrapCls = classNames({",
                    "                'demo pc': true,",
                    "                [`demo-${background}`]: background,",
                    "                [className]: className",
                    "            });",
                    "            const switchCls = classNames({",
                    "                'demo-switch': true,",
                    "                'demo-switch-on': background === 'dark',",
                    "                'demo-switch-off': background === 'light'",
                    "            });",
                    "",
                    "            const customProps = {};",
                    "            if (this.props.title) {",
                    "                // 注入 demo 的标题，用于按需选取",
                    "                customProps.title = formatTitle(this.props.title);",
                    "            }",
                    "",
                    "            return (",
                    "                <div className={wrapCls} style={style} {...customProps}>",
                    "                    <div className=\"demo-header\">",
                    "                        <span>{this.props.title || TITLE}</span>",
                    "                        {showType === 'hidden' && <DisplaySwitch hidden={hidden} onClick={switchVisible.bind(demoScope, demoIndex)} />}",
                    "                        {isDemoShape && switchBackground ? <div className=\"demo-switch-wrapper\">",
                    "                            <span>背景颜色</span>",
                    "                            <div className={switchCls} onClick={this.switchBackground.bind(this)}>",
                    "                                <div className=\"demo-switch-trigger\"></div>",
                    "                                <div className=\"demo-switch-children\">{background === 'light' ? '深' : '浅'}</div>",
                    "                            </div>",
                    "                        </div> : null}",
                    "                    </div>",
                    "                    {isDemoShape && demoFunction ? <ul className=\"demo-select\">{functionSelect}</ul> : null}",
                    "                    <div className=\"demo-body\">",
                    "                        {children}",
                    "                    </div>",
                    "                </div>",
                    "            );",
                    "        } else {",
                    "            return null;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "/* eslint-disable react/no-multi-comp */",
                    "class DemoGroup extends Component {",
                    "    static displayName = 'DemoGroup'",
                    "",
                    "    static propTypes = {",
                    "        label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),",
                    "        block: PropTypes.bool,",
                    "        height: PropTypes.string,",
                    "        children: PropTypes.any,",
                    "        className: PropTypes.string,",
                    "        demoIndex: PropTypes.string,",
                    "        demoItems: PropTypes.object,",
                    "        demoScope: PropTypes.object,",
                    "        demoTitle: PropTypes.string,",
                    "        demoShapeLevel: PropTypes.string,",
                    "        showType: PropTypes.string,",
                    "        switchVisible: PropTypes.func",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        block: false,",
                    "        height: ''",
                    "    }",
                    "",
                    "    render() {",
                    "        const { demoIndex: index, demoItems = {}, demoScope = this, showType, switchVisible = () => { } } = this.props;",
                    "        const demoIndex = `${index}-*`;",
                    "        const demoTitle = `${this.props.demoTitle} -> ${this.props.label || LABEL}`;",
                    "        const demoShapeLevel = this.props.demoShapeLevel;",
                    "        const { hidden = false } = demoItems[demoIndex] || {};",
                    "",
                    "        // 解析",
                    "        if (demoShapeLevel) {",
                    "            if (!COOL[demoShapeLevel]) {",
                    "                COOL[demoShapeLevel] = [];",
                    "            }",
                    "",
                    "            if (this.props.label) {",
                    "                let ret = false;",
                    "                COOL[demoShapeLevel].forEach((item, index) => {",
                    "                    if (item.name === 'statement') {",
                    "                        ret = true;",
                    "                        COOL[demoShapeLevel][index].enum.push(this.props.label);",
                    "                    }",
                    "                });",
                    "                if (!ret) {",
                    "                    COOL[demoShapeLevel].push({",
                    "                        name: 'statement',",
                    "                        enum: [this.props.label]",
                    "                    });",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        // 获得默认值",
                    "        const defaultCool = {};",
                    "        defaultCool.title = this.props.demoTitle;",
                    "        defaultCool.shape = demoShapeLevel;",
                    "        defaultCool.statement = this.props.label;",
                    "        COOL[demoShapeLevel].forEach((item) => {",
                    "            if (item.value) {",
                    "                defaultCool[item.name] = item.value;",
                    "            }",
                    "        });",
                    "",
                    "        const children = React.Children.map(this.props.children, (child, i) => {",
                    "            const { demoIndex: index, demoItems = {}, showType, block } = this.props;",
                    "            const demoIndex = `${index}-${i}`;",
                    "            const { hidden = false } = demoItems[demoIndex] || {};",
                    "            const classes = classNames({",
                    "                'demo-item': !hidden,",
                    "                'demo-item-hidden': hidden,",
                    "                block: block",
                    "            });",
                    "",
                    "            COOL[demoShapeLevel].forEach((item) => {",
                    "                if (item.name === 'size') {",
                    "                    defaultCool.size = item.enum[i];",
                    "                }",
                    "            });",
                    "",
                    "            if (showType === 'hidden' || !hidden) {",
                    "                if (!demoItems[demoIndex]) {",
                    "                    demoItems[demoIndex] = {",
                    "                        hidden: false",
                    "                    };",
                    "                }",
                    "                demoItems[demoIndex].existed = true;",
                    "",
                    "                const cloneChild = React.cloneElement(child, {",
                    "                    'data-cool': JSON.stringify(defaultCool)",
                    "                });",
                    "",
                    "                return (",
                    "                    <td className=\"wrap\" style={{ height: this.props.height || null }}>",
                    "                        <div className={classes} key={i}>",
                    "                            {cloneChild}",
                    "                        </div>",
                    "                    </td>",
                    "                );",
                    "            } else {",
                    "                return null;",
                    "            }",
                    "        });",
                    "",
                    "        if (showType === 'hidden' || !hidden) {",
                    "            if (!demoItems[demoIndex]) {",
                    "                demoItems[demoIndex] = {",
                    "                    hidden: false,",
                    "                    title: demoTitle",
                    "                };",
                    "            } else {",
                    "                demoItems[demoIndex].title = demoTitle;",
                    "            }",
                    "            demoItems[demoIndex].existed = true;",
                    "",
                    "            return (",
                    "                <tr className=\"demo-group\">",
                    "                    {this.props.label === false ? null :",
                    "                        <td className=\"label\" style={{ height: this.props.height || null }}>",
                    "                            <span>{this.props.label || LABEL}</span>",
                    "                            {showType === 'hidden' && <DisplaySwitch hidden={hidden} onClick={switchVisible.bind(demoScope, demoIndex)} />}",
                    "                        </td>}",
                    "                    {children}",
                    "                </tr>",
                    "            );",
                    "        } else {",
                    "            return null;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "class DemoHead extends Component {",
                    "    static displayName = 'DemoHead'",
                    "",
                    "    static propTypes = {",
                    "        cols: PropTypes.array,",
                    "        theme: PropTypes.object,",
                    "        demoIndex: PropTypes.string,",
                    "        demoItems: PropTypes.object,",
                    "        demoScope: PropTypes.object,",
                    "        demoTitle: PropTypes.string,",
                    "        demoShapeLevel: PropTypes.string,",
                    "        showType: PropTypes.string,",
                    "        switchVisible: PropTypes.func",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        cols: []",
                    "    }",
                    "",
                    "    render() {",
                    "        const cols = this.props.cols.map((col, i) => {",
                    "            const { demoIndex: index, demoItems = {}, demoScope = this, showType, switchVisible = () => { } } = this.props;",
                    "            const demoIndex = `${index.replace(/-\\d+$/, '-*')}-${i}`;",
                    "            const demoTitle = `${this.props.demoTitle} -> ${col || COL}`;",
                    "            const demoShapeLevel = this.props.demoShapeLevel;",
                    "            const { hidden = false } = demoItems[demoIndex] || {};",
                    "",
                    "            // 解析",
                    "            if (demoShapeLevel) {",
                    "                if (!COOL[demoShapeLevel]) {",
                    "                    COOL[demoShapeLevel] = [];",
                    "                }",
                    "",
                    "                if (col) {",
                    "                    let ret = false;",
                    "                    COOL[demoShapeLevel].forEach((item, index) => {",
                    "                        if (item.name === 'size') {",
                    "                            ret = true;",
                    "                            COOL[demoShapeLevel][index].enum.push(col);",
                    "                        }",
                    "                    });",
                    "                    if (!ret) {",
                    "                        COOL[demoShapeLevel].push({",
                    "                            name: 'size',",
                    "                            enum: [col]",
                    "                        });",
                    "                    }",
                    "                }",
                    "            }",
                    "",
                    "            if (showType === 'hidden' || !hidden) {",
                    "                if (!demoItems[demoIndex]) {",
                    "                    demoItems[demoIndex] = {",
                    "                        hidden: false,",
                    "                        title: demoTitle",
                    "                    };",
                    "                } else {",
                    "                    demoItems[demoIndex].title = demoTitle;",
                    "                }",
                    "                demoItems[demoIndex].existed = true;",
                    "",
                    "                return (",
                    "                    <td key={i}>",
                    "                        {col || COL}",
                    "                        {showType === 'hidden' && <DisplaySwitch hidden={hidden} onClick={switchVisible.bind(demoScope, demoIndex)} />}",
                    "                    </td>",
                    "                );",
                    "            } else {",
                    "                return null;",
                    "            }",
                    "        });",
                    "",
                    "        return (",
                    "            <tr className=\"demo-head\">",
                    "                <td />",
                    "                {cols}",
                    "            </tr>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "class DisplaySwitch extends Component {",
                    "    static propTypes = {",
                    "        onClick: PropTypes.func,",
                    "        hidden: PropTypes.bool",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        onClick: () => {",
                    "        }",
                    "    };",
                    "",
                    "    render() {",
                    "        const status = this.props.hidden ? 'hide' : 'browse';",
                    "",
                    "        return (",
                    "            <i className={`demo-icon demo-icon-${status}`} onClick={this.props.onClick}></i>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "if (window.addEventListener) {",
                    "    window.addEventListener('message', event => {",
                    "        const data = event.data;",
                    "        if ((event.origin !== location.origin) || !data || data.from !== 'config') {",
                    "            return;",
                    "        }",
                    "",
                    "        if (data.type === 'displayed') {",
                    "            callback.forEach(callback => {",
                    "                callback(data.body);",
                    "            });",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "function sendMessage(compName, type, body) {",
                    "    const parent = window.parent;",
                    "",
                    "    if (parent !== window) {",
                    "        parent.postMessage({",
                    "            from: 'demo',",
                    "            type: type,",
                    "            body: body,",
                    "            compName: compName",
                    "        }, '*');",
                    "    }",
                    "}",
                    "",
                    "function initDemo(compName) {",
                    "    window.compName = compName;",
                    "",
                    "    // 追加信息到页面",
                    "    const info = document.createElement('script', {",
                    "        id: 'fusion-cool'",
                    "    });",
                    "    info.innerHTML = `window.COOL = {'${compName}': ${JSON.stringify(COOL)}, 'functions': ${JSON.stringify(FUN)}}`;",
                    "    document.body.appendChild(info);",
                    "",
                    "    sendMessage(compName, 'loaded');",
                    "}",
                    "",
                    "",
                    "export { Demo, DemoHead, DemoGroup, initDemo };"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"./icon.scss\";",
                    "",
                    "$color-brand1-6: #46BC02;",
                    "",
                    "body {",
                    "    padding: 0;",
                    "    margin: 0;",
                    "    background-color: #F2F3F7;",
                    "}",
                    "",
                    "#container {",
                    "    border: 1px solid #E6E7EB;",
                    "}",
                    "",
                    ".demo-container >h2 {",
                    "    display: none;",
                    "}",
                    "",
                    ".demo.pc {",
                    "    border-radius: 3px;",
                    "    margin-bottom: 20px;",
                    "",
                    "    &:last-child {",
                    "        margin-bottom: 0;",
                    "    }",
                    "    .demo-header {",
                    "        padding: 10px 15px;",
                    "        background-color: #E6E7EB;",
                    "        font-size: 18px;",
                    "        border-top-left-radius: 3px;",
                    "        border-top-right-radius: 3px;",
                    "        color: #333;",
                    "        label {",
                    "            float: right;",
                    "            padding: 0 0 0 40px;",
                    "            color: #666;",
                    "            font-size: 12px;",
                    "            select {",
                    "                margin-left: 8px;",
                    "                height: 28px;",
                    "                border: 1px solid #666;",
                    "                border-radius: 3px;",
                    "                &:focus {",
                    "                    outline: none;",
                    "                    border: 1px solid #333;",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "    .demo-head {",
                    "        >td {",
                    "            padding: 0 10px;",
                    "            text-align: left;",
                    "            vertical-align: top;",
                    "            font-size: 12px;",
                    "            height: 30px;",
                    "            line-height: 30px;",
                    "            color: #999999;",
                    "            &:first-child {",
                    "                width: 80px;",
                    "            }",
                    "        }",
                    "    }",
                    "    .demo-group {",
                    "        >td {",
                    "            text-align: left;",
                    "            vertical-align: top;",
                    "        }",
                    "        >.label {",
                    "            width: 80px;",
                    "            padding-right: 10px;",
                    "            padding-top: 20px;",
                    "            text-align: right;",
                    "            font-size: 13px;",
                    "            color: #999;",
                    "            >span {",
                    "                display: block;",
                    "                padding-bottom: 5px;",
                    "                border-bottom: solid 1px #DCDEE3;",
                    "            }",
                    "        }",
                    "        >.wrap {",
                    "            padding: 10px 5px;",
                    "            >.demo-item {",
                    "                padding: 10px;",
                    "                border: transparent dashed 1px;",
                    "                border-radius: 3px;",
                    "                display: inline-block;",
                    "                vertical-align: top;",
                    "                cursor: pointer;",
                    "                &.block {",
                    "                    display: block;",
                    "                    >* {",
                    "                        float: none;",
                    "                    }",
                    "                }",
                    "                &.highlight {",
                    "                    border-color: $color-brand1-6;",
                    "                    border-style: dashed;",
                    "                }",
                    "                &.selected,",
                    "                &:hover {",
                    "                    border-color: $color-brand1-6;",
                    "                }",
                    "                &:after {",
                    "                    content: ' ';",
                    "                    display: block;",
                    "                    clear: left;",
                    "                }",
                    "                >* {",
                    "                    float: left;",
                    "                }",
                    "                *:disabled {",
                    "                    pointer-events: none;",
                    "                }",
                    "            }",
                    "            >.demo-item-hidden {",
                    "                padding: 10px;",
                    "                border: #E6E7EB dashed 1px;",
                    "                border-radius: 3px;",
                    "                display: inline-block;",
                    "                vertical-align: top;",
                    "                cursor: not-allowed;",
                    "                &.block {",
                    "                    display: block;",
                    "                    >* {",
                    "                        float: none;",
                    "                    }",
                    "                }",
                    "                >* {",
                    "                    float: left;",
                    "                    visibility: hidden;",
                    "                }",
                    "            }",
                    "        }",
                    "        >.demo-items {",
                    "            margin-left: 120px;",
                    "            min-height: 50px;",
                    "            padding-right: 20px;",
                    "        }",
                    "    }",
                    "    .demo-body {",
                    "        border-bottom-left-radius: 3px;",
                    "        border-bottom-right-radius: 3px;",
                    "        table {",
                    "            border-collapse: collapse;",
                    "            table-layout: fixed;",
                    "            &.block {",
                    "                width: 100%;",
                    "            }",
                    "        }",
                    "        .demo.pc {",
                    "            margin-bottom: 0;",
                    "            >.demo-header {",
                    "                padding-top: 0;",
                    "                padding-bottom: 0;",
                    "                border-radius: 0;",
                    "                background-color: inherit;",
                    "                font-size: 16px;",
                    "                height: 50px;",
                    "                line-height: 50px;",
                    "            }",
                    "            >.demo-body {",
                    "                border-radius: 0;",
                    "                padding-bottom: 10px;",
                    "            }",
                    "        }",
                    "        .demo + .demo {",
                    "            border-top: #E6E7EB solid 1px;",
                    "        }",
                    "    }",
                    "    .demo-select {",
                    "        background-color: #FFF;",
                    "        border-bottom: 1px solid #CCC;",
                    "        padding: 10px 20px;",
                    "        margin: 0;",
                    "        list-style: none;",
                    "        font-size: 12px;",
                    "        color: #666;",
                    "",
                    "        li {",
                    "            display: flex;",
                    "            margin: 6px 0;",
                    "            height: 20px;",
                    "            line-height: 20px;",
                    "            justify-content: flex-start;",
                    "            align-items: center;",
                    "        }",
                    "        span {",
                    "            display: inline-block;",
                    "            padding-right: 12px;",
                    "            width: 124px;",
                    "            font-weight: bold;",
                    "            text-align: right;",
                    "            overflow: hidden;",
                    "            white-space: nowrap;",
                    "            text-overflow: ellipsis;",
                    "        }",
                    "        label {",
                    "            margin-right: 24px;",
                    "",
                    "            input {",
                    "                margin-right: 4px;",
                    "            }",
                    "        }",
                    "    }",
                    "    .demo-switch-wrapper {",
                    "        float: right;",
                    "        display: flex;",
                    "        align-items: center;",
                    "",
                    "        span {",
                    "            display: inline-block;",
                    "            height: 20px;",
                    "            line-height: 20px;",
                    "            font-size: 12px;",
                    "            margin-right: 4px;",
                    "        }",
                    "    }",
                    "    .demo-switch {",
                    "        position: relative;",
                    "        display: inline-block;",
                    "        border: 1px solid transparent;",
                    "        width: 48px;",
                    "        height: 26px;",
                    "        border-radius: 15px;",
                    "        cursor: pointer;",
                    "",
                    "        &-children {",
                    "            font-size: 12px;",
                    "            position: absolute;",
                    "            width: 24px;",
                    "            height: 24px;",
                    "            line-height: 24px;",
                    "        }",
                    "",
                    "        &-trigger {",
                    "            border: 1px solid transparent;",
                    "            position: absolute;",
                    "            left: 22px;",
                    "            width: 24px;",
                    "            height: 24px;",
                    "            border-radius: 15px;",
                    "        }",
                    "    }",
                    "    .demo-switch-off {",
                    "        background-color: #FFF;",
                    "        border-color: #DCDEE3;",
                    "",
                    "        .demo-switch-children {",
                    "            right: -6px;",
                    "            color: #CCC;",
                    "        }",
                    "",
                    "        .demo-switch-trigger {",
                    "            left: 0;",
                    "            box-shadow: 1px 1px 3px 0 rgba(0, 0, 0, .32);",
                    "            background-color: #FFF;",
                    "            border-color: transparent;",
                    "        }",
                    "    }",
                    "    .demo-switch-on {",
                    "        background-color: #1DC11D;",
                    "",
                    "        .demo-switch-children {",
                    "            left: 8px;",
                    "            color: #FFF;",
                    "        }",
                    "",
                    "        .demo-switch-trigger {",
                    "            box-shadow: 1px 1px 3px 0 rgba(0, 0, 0, .32);",
                    "            background-color: #FFF;",
                    "            border-color: transparent;",
                    "        }",
                    "    }",
                    "    .demo-icon-browse {",
                    "        margin-left: 4px;",
                    "    }",
                    "    .demo-icon-hide {",
                    "        margin-left: 4px;",
                    "    }",
                    "}",
                    "",
                    ".demo-light {",
                    "    background-color: #FFF;",
                    "}",
                    ".demo-dark {",
                    "    background-color: #333;",
                    "",
                    "    .demo.pc {",
                    "        >.demo-header {",
                    "            color: #FFF;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            }
        },
        "dialog": {
            "dialog.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Overlay from '../overlay';",
                    "import zhCN from '../locale/zh-cn';",
                    "import { focus, obj, func, events, dom } from '../util';",
                    "import Inner from './inner';",
                    "",
                    "const noop = () => {};",
                    "const { limitTabRange } = focus;",
                    "const { bindCtx } = func;",
                    "const { pickOthers } = obj;",
                    "const { getStyle, setStyle } = dom;",
                    "",
                    "/**",
                    " * Dialog",
                    " */",
                    "export default class Dialog extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 标题",
                    "         */",
                    "        title: PropTypes.node,",
                    "        /**",
                    "         * 内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 底部内容，设置为 false，则不进行显示",
                    "         * @default [<Button type=\"primary\">确定</Button>, <Button>取消</Button>]",
                    "         */",
                    "        footer: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),",
                    "        /**",
                    "         * 底部按钮的对齐方式",
                    "         */",
                    "        footerAlign: PropTypes.oneOf(['left', 'center', 'right']),",
                    "        /**",
                    "         * 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：",
                    "         * ['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）",
                    "         * ['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）",
                    "         * ['ok']（只存在确认按钮）",
                    "         * ['cancel']（只存在取消按钮）",
                    "         */",
                    "        footerActions: PropTypes.array,",
                    "        /**",
                    "         * 在点击确定按钮时触发的回调函数",
                    "         * @param {Object} event 点击事件对象",
                    "         */",
                    "        onOk: PropTypes.func,",
                    "        /**",
                    "         * 在点击取消按钮时触发的回调函数",
                    "         * @param {Object} event 点击事件对象",
                    "         */",
                    "        onCancel: PropTypes.func,",
                    "        /**",
                    "         * 应用于确定按钮的属性对象",
                    "         */",
                    "        okProps: PropTypes.object,",
                    "        /**",
                    "         * 应用于取消按钮的属性对象",
                    "         */",
                    "        cancelProps: PropTypes.object,",
                    "        /**",
                    "         * 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：",
                    "         * **close** 表示点击关闭按钮可以关闭对话框",
                    "         * **mask** 表示点击遮罩区域可以关闭对话框",
                    "         * **esc** 表示按下 esc 键可以关闭对话框",
                    "         * 如 'close' 或 'close,esc,mask'",
                    "         * 如果设置为 true，则以上关闭方式全部生效",
                    "         * 如果设置为 false，则以上关闭方式全部失效",
                    "         */",
                    "        closeable: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),",
                    "        /**",
                    "         * 对话框关闭时触发的回调函数",
                    "         * @param {String} trigger 关闭触发行为的描述字符串",
                    "         * @param {Object} event 关闭时事件对象",
                    "         */",
                    "        onClose: PropTypes.func,",
                    "        /**",
                    "         * 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发",
                    "         */",
                    "        afterClose: PropTypes.func,",
                    "        /**",
                    "         * 是否显示遮罩",
                    "         */",
                    "        hasMask: PropTypes.bool,",
                    "        /**",
                    "         * 显示隐藏时动画的播放方式",
                    "         * @property {String} in 进场动画",
                    "         * @property {String} out 出场动画",
                    "         */",
                    "        animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),",
                    "        /**",
                    "         * 对话框弹出时是否自动获得焦点",
                    "         */",
                    "        autoFocus: PropTypes.bool,",
                    "        /**",
                    "         * 对话框对齐方式, 具体见Overlay文档",
                    "         */",
                    "        align: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),",
                    "        /**",
                    "         * 当对话框高度超过浏览器视口高度时，是否显示所有内容而不是出现滚动条以保证对话框完整显示在浏览器视口内，该属性仅在对话框垂直水平居中时生效，即 align 被设置为 'cc cc' 时",
                    "         */",
                    "        isFullScreen: PropTypes.bool,",
                    "        /**",
                    "         * 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式",
                    "         */",
                    "        shouldUpdatePosition: PropTypes.bool,",
                    "        /**",
                    "         * 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效",
                    "         */",
                    "        minMargin: PropTypes.number,",
                    "        /**",
                    "         * 透传到弹层组件的属性对象",
                    "         */",
                    "        overlayProps: PropTypes.object,",
                    "        /**",
                    "         * 自定义国际化文案对象",
                    "         * @property {String} ok 确认按钮文案",
                    "         * @property {String} cancel 取消按钮文案",
                    "         */",
                    "        locale: PropTypes.object",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        visible: false,",
                    "        footerAlign: 'right',",
                    "        footerActions: ['ok', 'cancel'],",
                    "        onOk: noop,",
                    "        onCancel: noop,",
                    "        okProps: {},",
                    "        cancelProps: {},",
                    "        closeable: 'esc,close',",
                    "        onClose: noop,",
                    "        afterClose: noop,",
                    "        hasMask: true,",
                    "        animation: {",
                    "            in: 'fadeInDown',",
                    "            out: 'fadeOutUp'",
                    "        },",
                    "        autoFocus: false,",
                    "        align: 'cc cc',",
                    "        isFullScreen: false,",
                    "        shouldUpdatePosition: false,",
                    "        minMargin: 40,",
                    "        overlayProps: {},",
                    "        locale: zhCN.Dialog",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        bindCtx(this, [",
                    "            'onKeyDown',",
                    "            'beforePosition',",
                    "            'adjustPosition',",
                    "            'getOverlayRef'",
                    "        ]);",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        events.on(document, 'keydown', this.onKeyDown);",
                    "        if (!this.useCSSToPosition()) {",
                    "            this.adjustPosition();",
                    "        }",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        events.off(document, 'keydown', this.onKeyDown);",
                    "    }",
                    "",
                    "    useCSSToPosition() {",
                    "        const { align, isFullScreen } = this.props;",
                    "        return align === 'cc cc' && isFullScreen;",
                    "    }",
                    "",
                    "    onKeyDown(e) {",
                    "        const node = this.getInnerNode();",
                    "        if (node) {",
                    "            limitTabRange(node, e);",
                    "        }",
                    "    }",
                    "",
                    "    beforePosition() {",
                    "        if (this.props.visible && this.overlay) {",
                    "            const inner = this.getInner();",
                    "            if (inner) {",
                    "                const node = this.getInnerNode();",
                    "                if (this._lastDialogHeight !== getStyle(node, 'height')) {",
                    "                    this.revertSize(inner.bodyNode);",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    adjustPosition() {",
                    "        if (this.props.visible && this.overlay) {",
                    "            const inner = this.getInner();",
                    "            if (inner) {",
                    "                const node = this.getInnerNode();",
                    "",
                    "                let top = getStyle(node, 'top');",
                    "                const minMargin = this.props.minMargin;",
                    "                if (top < minMargin) {",
                    "                    top = minMargin;",
                    "                    setStyle(node, 'top', `${minMargin}px`);",
                    "                }",
                    "",
                    "                const height = getStyle(node, 'height');",
                    "                const viewportHeight = window.innerHeight || document.documentElement.clientHeight;",
                    "                if (viewportHeight < height + top * 2) {",
                    "                    const expectHeight = viewportHeight - top * 2;",
                    "                    this.adjustSize(inner, node, expectHeight);",
                    "                } else {",
                    "                    this.revertSize(inner.bodyNode);",
                    "                }",
                    "",
                    "                this._lastDialogHeight = height;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    adjustSize(inner, node, expectHeight) {",
                    "        const { headerNode, bodyNode, footerNode } = inner;",
                    "",
                    "        const headerHeight = headerNode ? getStyle(headerNode, 'height') : 0;",
                    "        const footerHeight = footerNode ? getStyle(footerNode, 'height') : 0;",
                    "        const padding = getStyle(node, 'padding-top') + getStyle(node, 'padding-bottom');",
                    "        let maxBodyHeight = expectHeight - headerHeight - footerHeight - padding;",
                    "        if (maxBodyHeight < 0) {",
                    "            maxBodyHeight = 1;",
                    "        }",
                    "",
                    "        this.dialogBodyStyleMaxHeight = bodyNode.style.maxHeight;",
                    "        this.dialogBodyStyleOverflowY = bodyNode.style.overflowY;",
                    "",
                    "        setStyle(bodyNode, {",
                    "            'max-height': `${maxBodyHeight}px`,",
                    "            'overflow-y': 'auto'",
                    "        });",
                    "    }",
                    "",
                    "    revertSize(bodyNode) {",
                    "        setStyle(bodyNode, {",
                    "            'max-height': this.dialogBodyStyleMaxHeight,",
                    "            'overflow-y': this.dialogBodyStyleOverflowY",
                    "        });",
                    "    }",
                    "",
                    "    mapcloseableToConfig(closeable) {",
                    "        return ['esc', 'close', 'mask'].reduce((ret, option) => {",
                    "            const key = option.charAt(0).toUpperCase() + option.substr(1);",
                    "            const value = typeof closeable === 'boolean' ? closeable : closeable.split(',').indexOf(option) > -1;",
                    "",
                    "            if (option === 'esc' || option === 'mask') {",
                    "                ret[`canCloseBy${key}`] = value;",
                    "            } else {",
                    "                ret[`canCloseBy${key}Click`] = value;",
                    "            }",
                    "",
                    "            return ret;",
                    "        }, {});",
                    "    }",
                    "",
                    "    getOverlayRef(ref) {",
                    "        this.overlay = ref;",
                    "    }",
                    "",
                    "    getInner() {",
                    "        return this.overlay.getInstance().getContent();",
                    "    }",
                    "",
                    "    getInnerNode() {",
                    "        return this.overlay.getInstance().getContentNode();",
                    "    }",
                    "",
                    "    renderInner(closeable) {",
                    "        const {",
                    "            prefix, className, title,",
                    "            children, footer, footerAlign,",
                    "            footerActions, onOk, onCancel,",
                    "            okProps, cancelProps, onClose,",
                    "            locale, visible, rtl } = this.props;",
                    "        const others = pickOthers(Object.keys(Dialog.propTypes), this.props);",
                    "",
                    "        return (",
                    "            <Inner prefix={prefix}",
                    "                className={className}",
                    "                title={title}",
                    "                footer={footer}",
                    "                footerAlign={footerAlign}",
                    "                footerActions={footerActions}",
                    "                onOk={visible ? onOk : noop}",
                    "                onCancel={visible ? onCancel : noop}",
                    "                okProps={okProps}",
                    "                cancelProps={cancelProps}",
                    "                locale={locale}",
                    "                closeable={closeable}",
                    "                rtl={rtl}",
                    "                onClose={onClose.bind(this, 'closeClick')}",
                    "                {...others}>",
                    "                {children}",
                    "            </Inner>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix, visible, hasMask,",
                    "            animation, autoFocus, closeable,",
                    "            onClose, afterClose, shouldUpdatePosition,",
                    "            align, overlayProps, rtl,",
                    "        } = this.props;",
                    "",
                    "        const useCSS = this.useCSSToPosition();",
                    "        const { canCloseByCloseClick, ...closeConfig } = this.mapcloseableToConfig(closeable);",
                    "        const newOverlayProps = {",
                    "            ...overlayProps,",
                    "            prefix,",
                    "            visible,",
                    "            animation,",
                    "            hasMask,",
                    "            autoFocus,",
                    "            afterClose,",
                    "            ...closeConfig,",
                    "            canCloseByOutSideClick: false,",
                    "            align: useCSS ? false : align,",
                    "            onRequestClose: onClose,",
                    "            needAdjust: false,",
                    "            disableScroll: true,",
                    "            ref: this.getOverlayRef,",
                    "            rtl,",
                    "        };",
                    "        if (!useCSS) {",
                    "            newOverlayProps.beforePosition = this.beforePosition;",
                    "            newOverlayProps.onPosition = this.adjustPosition;",
                    "            newOverlayProps.shouldUpdatePosition = shouldUpdatePosition;",
                    "        }",
                    "",
                    "        const inner = this.renderInner(canCloseByCloseClick);",
                    "",
                    "        return (",
                    "            <Overlay {...newOverlayProps}>",
                    "                {useCSS ?",
                    "                    <div className={`${prefix}dialog-container`} dir={rtl ? 'rtl' : undefined}>",
                    "                        {inner}",
                    "                    </div> :",
                    "                    inner}",
                    "            </Overlay>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import { log } from '../util';",
                    "import Dialog from './dialog';",
                    "import Inner from './inner';",
                    "import { show, alert, confirm } from './show';",
                    "",
                    "Dialog.Inner = Inner;",
                    "Dialog.show = config => {",
                    "    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');",
                    "    if (warning !== false) {",
                    "        config = processProps(config, log.deprecated);",
                    "    }",
                    "    return show(config);",
                    "};",
                    "Dialog.alert = config => {",
                    "    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');",
                    "    if (warning !== false) {",
                    "        config = processProps(config, log.deprecated);",
                    "    }",
                    "    return alert(config);",
                    "};",
                    "Dialog.confirm = config => {",
                    "    const { warning } = ConfigProvider.getContextProps(config, 'Dialog');",
                    "    if (warning !== false) {",
                    "        config = processProps(config, log.deprecated);",
                    "    }",
                    "    return confirm(config);",
                    "};",
                    "",
                    "function processProps(props, deprecated) {",
                    "    if ('closable' in props) {",
                    "        deprecated('closable', 'closeable', 'Dialog');",
                    "        const { closable, ...others } = props;",
                    "        props = { closeable: closable, ...others };",
                    "    }",
                    "",
                    "    const overlayPropNames = ['target', 'offset', 'beforeOpen', 'onOpen', 'afterOpen', 'beforePosition', 'onPosition', 'cache', 'safeNode', 'wrapperClassName', 'container'];",
                    "    overlayPropNames.forEach(name => {",
                    "        if (name in props) {",
                    "            deprecated(name, `overlayProps.${name}`, 'Dialog');",
                    "            const { overlayProps, ...others } = props;",
                    "            const newOverlayProps = {",
                    "                [name]: props[name],",
                    "                ...(overlayProps || {})",
                    "            };",
                    "            delete others[name];",
                    "            props = { overlayProps: newOverlayProps, ...others };",
                    "        }",
                    "    });",
                    "",
                    "    return props;",
                    "}",
                    "",
                    "export default ConfigProvider.config(Dialog, {",
                    "    transform: (props, deprecated) => {",
                    "        return processProps(props, deprecated);",
                    "    }",
                    "});"
                ]
            },
            "inner.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "import Button from '../button';",
                    "import Icon from '../icon';",
                    "import zhCN from '../locale/zh-cn';",
                    "import { func, obj, guid } from '../util';",
                    "",
                    "const { makeChain } = func;",
                    "const { pickOthers } = obj;",
                    "const noop = () => {};",
                    "",
                    "export default class Inner extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        className: PropTypes.string,",
                    "        title: PropTypes.node,",
                    "        children: PropTypes.node,",
                    "        footer: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),",
                    "        footerAlign: PropTypes.oneOf(['left', 'center', 'right']),",
                    "        footerActions: PropTypes.array,",
                    "        onOk: PropTypes.func,",
                    "        onCancel: PropTypes.func,",
                    "        okProps: PropTypes.object,",
                    "        cancelProps: PropTypes.object,",
                    "        closeable: PropTypes.bool,",
                    "        onClose: PropTypes.func,",
                    "        locale: PropTypes.object,",
                    "        role: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        footerAlign: 'right',",
                    "        footerActions: ['ok', 'cancel'],",
                    "        onOk: noop,",
                    "        onCancel: noop,",
                    "        okProps: {},",
                    "        cancelProps: {},",
                    "        closeable: true,",
                    "        onClose: noop,",
                    "        locale: zhCN.Dialog,",
                    "        role: 'dialog'",
                    "    };",
                    "",
                    "    getNode(name, ref) {",
                    "        this[name] = ref;",
                    "    }",
                    "",
                    "    renderHeader() {",
                    "        const { prefix, title } = this.props;",
                    "        if (title) {",
                    "            this.titleId = guid('dialog-title-');",
                    "            return <div className={`${prefix}dialog-header`} id={this.titleId} ref={this.getNode.bind(this, 'headerNode')}>{title}</div>;",
                    "        }",
                    "        return null;",
                    "    }",
                    "",
                    "    renderBody() {",
                    "        const { prefix, children } = this.props;",
                    "        if (children) {",
                    "            return <div className={`${prefix}dialog-body`} ref={this.getNode.bind(this, 'bodyNode')}>{children}</div>;",
                    "        }",
                    "        return null;",
                    "    }",
                    "",
                    "    renderFooter() {",
                    "        const { prefix, footer, footerAlign, footerActions, locale } = this.props;",
                    "",
                    "        if (footer === false) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const newClassName = cx({",
                    "            [`${prefix}dialog-footer`]: true,",
                    "            [`${prefix}align-${footerAlign}`]: true",
                    "        });",
                    "        const footerContent = footer === true || !footer ?",
                    "            footerActions.map(action => {",
                    "                const btnProps = this.props[`${action}Props`];",
                    "                const newBtnProps = {",
                    "                    ...btnProps,",
                    "                    prefix,",
                    "                    className: cx(`${prefix}dialog-btn`, btnProps.className),",
                    "                    onClick: makeChain(this.props[`on${action[0].toUpperCase() + action.slice(1)}`], btnProps.onClick),",
                    "                    children: btnProps.children || locale[action]",
                    "                };",
                    "                if (action === 'ok') {",
                    "                    newBtnProps.type = 'primary';",
                    "                }",
                    "",
                    "                return <Button key={action} {...newBtnProps} />;",
                    "            }) : footer;",
                    "",
                    "        return (",
                    "            <div className={newClassName} ref={this.getNode.bind(this, 'footerNode')}>",
                    "                {footerContent}",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    renderCloseLink() {",
                    "        const { prefix, closeable, onClose } = this.props;",
                    "",
                    "        if (closeable) {",
                    "            return (",
                    "                <a role=\"button\" href=\"javascript:;\" className={`${prefix}dialog-close`}",
                    "                    onClick={onClose}>",
                    "                    <Icon className={`${prefix}dialog-close-icon`} type=\"close\" />",
                    "                </a>",
                    "            );",
                    "        }",
                    "",
                    "        return null;",
                    "    }",
                    "",
                    "    render() {",
                    "        const { prefix, className, closeable, title, role, rtl } = this.props;",
                    "        const others = pickOthers(Object.keys(Inner.propTypes), this.props);",
                    "        const newClassName = cx({",
                    "            [`${prefix}dialog`]: true,",
                    "            [`${prefix}closeable`]: closeable,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        const header = this.renderHeader();",
                    "        const body = this.renderBody();",
                    "        const footer = this.renderFooter();",
                    "        const closeLink = this.renderCloseLink();",
                    "",
                    "        const ariaProps = {",
                    "            role,",
                    "            'aria-modal': 'true'",
                    "        };",
                    "        if (title) {",
                    "            ariaProps['aria-labelledby'] = this.titleId;",
                    "        }",
                    "",
                    "        return (",
                    "            <div {...ariaProps} className={newClassName} {...others} dir={rtl ? 'rtl' : undefined}>",
                    "                {header}",
                    "                {body}",
                    "                {footer}",
                    "                {closeLink}",
                    "            </div>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$dialog-prefix} {",
                    "    @include box-sizing;",
                    "    position: fixed;",
                    "    z-index: 1001;",
                    "    background: $dialog-bg;",
                    "    border: $dialog-border-width $dialog-border-style $dialog-border-color;",
                    "    border-radius: $dialog-corner;",
                    "    box-shadow: $dialog-shadow;",
                    "    text-align: left;",
                    "",
                    "    &-header {",
                    "        padding: $dialog-title-padding-top $dialog-title-padding-left-right $dialog-title-padding-bottom $dialog-title-padding-left-right;",
                    "        border-bottom: $dialog-title-border-width $line-solid $dialog-title-border-color;",
                    "        font-size: $dialog-title-font-size;",
                    "        background: $dialog-title-bg-color;",
                    "        color: $dialog-title-color;",
                    "    }",
                    "",
                    "    &-body {",
                    "        padding: $dialog-content-padding-top $dialog-content-padding-left-right $dialog-content-padding-bottom $dialog-content-padding-left-right;",
                    "        font-size: $dialog-content-font-size;",
                    "        color: $dialog-content-color;",
                    "    }",
                    "",
                    "    /* 让用户自己设置 */",
                    "    /* &.#{$css-prefix}closeable &-header, */",
                    "    /* &.#{$css-prefix}closeable &-body, { */",
                    "    /*     padding-right: $dialog-part-padding-right-closeable; */",
                    "    /* } */",
                    "",
                    "    &-footer {",
                    "        padding: $dialog-footer-padding-top $dialog-footer-padding-left-right $dialog-footer-padding-bottom $dialog-footer-padding-left-right;",
                    "        border-top: $dialog-footer-border-width $line-solid $dialog-footer-border-color;",
                    "        background: $dialog-footer-bg-color;",
                    "",
                    "        &.#{$css-prefix}align-left {",
                    "            text-align: left;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}align-center {",
                    "            text-align: center;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}align-right {",
                    "            text-align: right;",
                    "        }",
                    "    }",
                    "",
                    "    &-btn + &-btn {",
                    "        margin-left: $s-1;",
                    "    }",
                    "",
                    "    &-close {",
                    "        position: absolute;",
                    "        top: $dialog-close-top;",
                    "        right: $dialog-close-right;",
                    "        width: $dialog-close-width;",
                    "        height: $dialog-close-width;",
                    "        color: $dialog-close-color;",
                    "",
                    "        &:link,",
                    "        &:visited {",
                    "            height: $dialog-close-width;",
                    "            color: $dialog-close-color;",
                    "        }",
                    "",
                    "        &:hover {",
                    "            background: $dialog-close-bg-hovered;",
                    "            color: $dialog-close-color-hovered;",
                    "        }",
                    "",
                    "        & &-icon.#{$css-prefix}icon {",
                    "            position: absolute;",
                    "            top: 50%;",
                    "            left: 50%;",
                    "            @include icon-square-size(",
                    "                $size: $dialog-close-size,",
                    "                $marginTop: -($dialog-close-size / 2),",
                    "                $marginLeft: -($dialog-close-size / 2)",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &-container {",
                    "        position: fixed;",
                    "        top: 0;",
                    "        left: 0;",
                    "        right: 0;",
                    "        bottom: 0;",
                    "        z-index: 1001;",
                    "        padding: $s-10;",
                    "        overflow: auto;",
                    "        text-align: center;",
                    "",
                    "        &:before {",
                    "            display: inline-block;",
                    "            vertical-align: middle;",
                    "            width: 0;",
                    "            height: 100%;",
                    "            content: '';",
                    "        }",
                    "",
                    "        #{$dialog-prefix} {",
                    "            display: inline-block;",
                    "            position: relative;",
                    "            vertical-align: middle;",
                    "        }",
                    "    }",
                    "",
                    "    & &-message.#{$css-prefix}message {",
                    "        min-width: $s-25 * 3;",
                    "        padding: 0;",
                    "    }",
                    "}"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$dialog-prefix}[dir=rtl] {",
                    "    text-align: right;",
                    "",
                    "    #{$dialog-prefix}-footer {",
                    "        &.#{$css-prefix}align-left {",
                    "            text-align: right;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}align-center {",
                    "            text-align: center;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}align-right {",
                    "            text-align: left;",
                    "        }",
                    "    }",
                    "",
                    "    #{$dialog-prefix}-btn + #{$dialog-prefix}-btn {",
                    "        margin-right: $s-1;",
                    "        margin-left: 0;",
                    "    }",
                    "",
                    "    #{$dialog-prefix}-close {",
                    "        left: $dialog-close-right;",
                    "        right: auto; // 重置 right 放置被覆盖",
                    "    }",
                    "}"
                ]
            },
            "show.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import ReactDOM from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import Message from '../message';",
                    "import zhCN from '../locale/zh-cn';",
                    "import dialog from './dialog';",
                    "",
                    "const Dialog = ConfigProvider.config(dialog);",
                    "",
                    "const noop = () => {};",
                    "const MESSAGE_TYPE = {",
                    "    alert: 'warning',",
                    "    confirm: 'help'",
                    "};",
                    "",
                    "class Modal extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "        type: PropTypes.string,",
                    "        title: PropTypes.node,",
                    "        content: PropTypes.node,",
                    "        messageProps: PropTypes.object,",
                    "        footerActions: PropTypes.array,",
                    "        onOk: PropTypes.func,",
                    "        onCancel: PropTypes.func,",
                    "        onClose: PropTypes.func,",
                    "        okProps: PropTypes.object,",
                    "        locale: PropTypes.object,",
                    "        needWrapper: PropTypes.bool",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        messageProps: {},",
                    "        onOk: noop,",
                    "        onCancel: noop,",
                    "        onClose: noop,",
                    "        okProps: {},",
                    "        locale: zhCN.Dialog,",
                    "        needWrapper: true",
                    "    };",
                    "",
                    "    state = {",
                    "        visible: true,",
                    "        loading: false",
                    "    };",
                    "",
                    "    close = () => {",
                    "        this.setState({",
                    "            visible: false",
                    "        });",
                    "    }",
                    "",
                    "    loading = loading => {",
                    "        this.setState({",
                    "            loading",
                    "        });",
                    "    }",
                    "",
                    "    wrapper(fn, callback) {",
                    "        return () => {",
                    "            const res = fn();",
                    "            if (res && res.then) {",
                    "                this.loading(true);",
                    "",
                    "                res.then(result => {",
                    "                    this.loading(false);",
                    "",
                    "                    if (result !== false) {",
                    "                        callback();",
                    "                    }",
                    "                }).catch(() => {",
                    "                    this.loading(false);",
                    "                });",
                    "            } else if (res !== false) {",
                    "                callback();",
                    "            }",
                    "        };",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix, type, title,",
                    "            content, messageProps, footerActions,",
                    "            onOk, onCancel, onClose,",
                    "            okProps, needWrapper, rtl,",
                    "            ...others } = this.props;",
                    "        const newTitle = needWrapper && type ? null : title;",
                    "",
                    "        const newContent = needWrapper && type ? (",
                    "            <Message",
                    "                size=\"large\"",
                    "                shape=\"addon\"",
                    "                type={MESSAGE_TYPE[type]}",
                    "                {...messageProps}",
                    "                title={title}",
                    "                rtl={rtl}",
                    "                className={cx(`${prefix}dialog-message`, messageProps.className)}>",
                    "                {content}",
                    "            </Message>",
                    "        ) : content;",
                    "",
                    "        const newFooterActions = footerActions || (",
                    "            type === 'alert' ? ['ok'] :",
                    "                type === 'confirm' ? ['ok', 'cancel'] :",
                    "                    undefined",
                    "        );",
                    "        const newOnOk = this.wrapper(onOk, this.close);",
                    "        const newOnCancel = this.wrapper(onCancel, this.close);",
                    "        const newOnClose = this.wrapper(onClose, this.close);",
                    "",
                    "        const { visible, loading } = this.state;",
                    "        okProps.loading = loading;",
                    "",
                    "",
                    "        return (",
                    "            <Dialog",
                    "                role=\"alertdialog\"",
                    "                {...others}",
                    "                visible={visible}",
                    "                title={newTitle}",
                    "                rtl={rtl}",
                    "                footerActions={newFooterActions}",
                    "                onOk={this.state.loading ? noop : newOnOk}",
                    "                onCancel={newOnCancel}",
                    "                onClose={newOnClose}",
                    "                okProps={okProps}>",
                    "                {newContent}",
                    "            </Dialog>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "const ConfigModal = ConfigProvider.config(Modal, {componentName: 'Dialog'});",
                    "",
                    "/**",
                    " * 创建对话框",
                    " * @exportName show",
                    " * @param {Object} config 配置项",
                    " * @returns {Object} \b包含有 hide 方法，可用来关闭对话框",
                    " */",
                    "export const show = (config = {}) => {",
                    "    const container = document.createElement('div');",
                    "    const unmount = () => {",
                    "        if (config.afterClose) {",
                    "            config.afterClose();",
                    "        }",
                    "        ReactDOM.unmountComponentAtNode(container);",
                    "        container.parentNode.removeChild(container);",
                    "    };",
                    "",
                    "    document.body.appendChild(container);",
                    "    const newContext = ConfigProvider.getContext();",
                    "",
                    "    let instance, myRef;",
                    "",
                    "    ReactDOM.render(",
                    "        <ConfigProvider {...newContext}>",
                    "            <ConfigModal {...config} afterClose={unmount} ref={ref => {",
                    "                myRef = ref;",
                    "            }}/>",
                    "        </ConfigProvider>",
                    "        , container, function() {",
                    "            instance = myRef;",
                    "        });",
                    "    return {",
                    "        hide: () => {",
                    "            const inc = instance && instance.getInstance();",
                    "            inc && inc.close();",
                    "        }",
                    "    };",
                    "};",
                    "",
                    "const methodFactory = type => (config = {}) => {",
                    "    config.type = type;",
                    "    return show(config);",
                    "};",
                    "",
                    "/**",
                    " * 创建警示对话框",
                    " * @exportName alert",
                    " * @param {Object} config 配置项",
                    " * @returns {Object} \b包含有 hide 方法，可用来关闭对话框",
                    " */",
                    "export const alert = methodFactory('alert');",
                    "",
                    "/**",
                    " * 创建确认对话框",
                    " * @exportName confirm",
                    " * @param {Object} config 配置项",
                    " * @returns {Object} \b包含有 hide 方法，可用来关闭对话框",
                    " */",
                    "export const confirm = methodFactory('confirm');"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../overlay/style.js';",
                    "import '../message/style.js';",
                    "import '../button/style.js';",
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module dialog: 对话框",
                        "/// @tag Dialog",
                        "/// @category component",
                        "/// @family feedback",
                        "/// @varPrefix $dialog-",
                        "/// @classPrefix {prefix}-dialog",
                        "/// @order {\"size/bounding\":10,\"size/title\":11,\"size/content\":12,\"size/footer\":13,\"size/close\":14,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/title\":101,\"statement/normal/content\":102,\"statement/normal/footer\":103,\"statement/normal/close\":104,\"statement/hover\":11,\"statement/hover/close\":110}",
                        "////",
                        "",
                        "// dialog variables",
                        "// --------------------------------------------------",
                        "",
                        "$dialog-prefix: \".#{$css-prefix}dialog\";",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$dialog-border-width: $line-1 !default;",
                        "/// text",
                        "/// @namespace size/title",
                        "$dialog-title-font-size: $font-size-subhead !default;",
                        "/// padding (t)",
                        "/// @namespace size/title",
                        "$dialog-title-padding-top: $s-3 !default;",
                        "/// padding (b)",
                        "/// @namespace size/title",
                        "$dialog-title-padding-bottom: $s-3 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/title",
                        "$dialog-title-padding-left-right: $s-5 !default;",
                        "/// divider",
                        "/// @namespace size/title",
                        "$dialog-title-border-width: $line-zero !default;",
                        "/// text",
                        "/// @namespace size/content",
                        "$dialog-content-font-size: $font-size-body-1 !default;",
                        "/// padding (t)",
                        "/// @namespace size/content",
                        "$dialog-content-padding-top: $s-5 !default;",
                        "/// padding (b)",
                        "/// @namespace size/content",
                        "$dialog-content-padding-bottom: $s-5 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/content",
                        "$dialog-content-padding-left-right: $s-5 !default;",
                        "/// divider",
                        "/// @namespace size/footer",
                        "$dialog-footer-border-width: $line-zero !default;",
                        "/// padding (t)",
                        "/// @namespace size/footer",
                        "$dialog-footer-padding-top: $s-3 !default;",
                        "/// padding (b)",
                        "/// @namespace size/footer",
                        "$dialog-footer-padding-bottom: $s-3 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/footer",
                        "$dialog-footer-padding-left-right: $s-5 !default;",
                        "/// position (t)",
                        "/// @namespace size/close",
                        "$dialog-close-top: $s-4 !default;",
                        "/// position (r)",
                        "/// @namespace size/close",
                        "$dialog-close-right: $s-4 !default;",
                        "/// size",
                        "/// @namespace size/close",
                        "$dialog-close-width: $s-4 !default;",
                        "/// icon",
                        "/// @namespace size/close",
                        "$dialog-close-size: $icon-xs !default;",
                        "",
                        "$dialog-part-padding-right-closeable: $dialog-close-width + $dialog-close-right + ($dialog-close-width - $dialog-close-size) / 2;",
                        "",
                        "// Statement:Normal",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$dialog-bg: $color-white !default;",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$dialog-border-color: $color-line1-2 !default;",
                        "/// border style",
                        "/// @namespace statement/normal/bounding",
                        "$dialog-border-style: $line-solid !default;",
                        "/// corner",
                        "/// @namespace statement/normal/bounding",
                        "$dialog-corner: $corner-1 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal/bounding",
                        "$dialog-shadow: $shadow-2-down !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$dialog-title-color: $color-text1-4 !default;",
                        "/// background",
                        "/// @namespace statement/normal/title",
                        "$dialog-title-bg-color: $color-transparent !default;",
                        "/// divider",
                        "/// @namespace statement/normal/title",
                        "$dialog-title-border-color: $color-transparent !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$dialog-content-color: $color-text1-3 !default;",
                        "/// background",
                        "/// @namespace statement/normal/footer",
                        "$dialog-footer-bg-color: $color-transparent !default;",
                        "/// divider",
                        "/// @namespace statement/normal/footer",
                        "$dialog-footer-border-color: $color-transparent !default;",
                        "/// icon",
                        "/// @namespace statement/normal/close",
                        "$dialog-close-color: $color-text1-2 !default;",
                        "",
                        "// Statement:Hover",
                        "// ----------------------------------------",
                        "",
                        "/// icon",
                        "/// @namespace statement/hover/close",
                        "$dialog-close-color-hovered: $color-text1-4 !default;",
                        "/// background",
                        "/// @namespace statement/hover/close",
                        "$dialog-close-bg-hovered: $color-transparent !default;"
                    ]
                }
            }
        },
        "dropdown": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component, Children} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Overlay from '../overlay';",
                    "import ConfigProvider from '../config-provider';",
                    "import {func} from '../util';",
                    "",
                    "const {noop, makeChain, bindCtx} = func;",
                    "const Popup = Overlay.Popup;",
                    "",
                    "/**",
                    " * Dropdown",
                    " * @description 继承 Popup 的 API，除非特别说明",
                    " */",
                    "class Dropdown extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 弹层内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 弹层当前是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示或隐藏时触发的回调函数",
                    "         * @param {Boolean} visible 弹层是否显示",
                    "         * @param {String} type 触发弹层显示或隐藏的来源",
                    "         * @param {Object} e DOM事件",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 触发弹层显示或者隐藏的元素",
                    "         */",
                    "        trigger: PropTypes.node,",
                    "        /**",
                    "         * 触发弹层显示或隐藏的操作类型",
                    "         */",
                    "        triggerType: PropTypes.oneOf(['hover', 'click', 'focus']),",
                    "        /**",
                    "         * 设置此属性，弹层无法显示或隐藏",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 弹层相对于触发元素的定位, 详见 Overlay 的定位部分",
                    "         */",
                    "        align: PropTypes.string,",
                    "        /**",
                    "         * 弹层相对于触发元素定位的微调",
                    "         */",
                    "        offset: PropTypes.array,",
                    "        /**",
                    "         * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效",
                    "         */",
                    "        delay: PropTypes.number,",
                    "        /**",
                    "         * 弹层打开时是否让其中的元素自动获取焦点",
                    "         */",
                    "        autoFocus: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示遮罩",
                    "         */",
                    "        hasMask: PropTypes.bool,",
                    "        /**",
                    "         * 隐藏时是否保留子节点",
                    "         */",
                    "        cache: PropTypes.bool,",
                    "        /**",
                    "         * 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画",
                    "         * @default { in: 'expandInDown', out: 'expandOutUp' }",
                    "         */",
                    "        animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),",
                    "    };",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        defaultVisible: false,",
                    "        onVisibleChange: noop,",
                    "        triggerType: 'hover',",
                    "        disabled: false,",
                    "        align: 'tl bl',",
                    "        offset: [0, 0],",
                    "        delay: 200,",
                    "        autoFocus: true,",
                    "        hasMask: false,",
                    "        cache: false,",
                    "        onPosition: noop",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            visible: 'visible' in props ? props.visible : (props.defaultVisible || false)",
                    "        };",
                    "",
                    "        bindCtx(this, [",
                    "            'onMenuClick',",
                    "            'onVisibleChange'",
                    "        ]);",
                    "    }",
                    "",
                    "    getVisible(props = this.props) {",
                    "        return 'visible' in props ? props.visible : this.state.visible;",
                    "    }",
                    "",
                    "    onMenuClick() {",
                    "        this.onVisibleChange(false, 'fromContent');",
                    "    }",
                    "",
                    "    onVisibleChange(visible, from) {",
                    "        this.setState({visible});",
                    "",
                    "        this.props.onVisibleChange(visible, from);",
                    "    }",
                    "",
                    "    render() {",
                    "        let child = Children.only(this.props.children);",
                    "        if (typeof child.type === 'function' && child.type.isNextMenu) {",
                    "            child = React.cloneElement(child, {",
                    "                onItemClick: makeChain(this.onMenuClick, child.props.onItemClick)",
                    "            });",
                    "        }",
                    "",
                    "        return (",
                    "            <Popup {...this.props}",
                    "                visible={this.getVisible()}",
                    "                onVisibleChange={this.onVisibleChange}",
                    "                canCloseByOutSideClick>{child}</Popup>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Dropdown);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": []
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../overlay/style.js';",
                    "import './main.scss';"
                ]
            }
        },
        "field": {
            "index.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ReactDOM from 'react-dom';",
                    "import {log, func} from '../util';",
                    "import Validate from '../validate';",
                    "",
                    "import {",
                    "    getValueFromEvent,",
                    "    getErrorStrs,",
                    "    getParams,",
                    "    setIn,",
                    "    getIn,",
                    "    mapValidateRules",
                    "} from './utils';",
                    "",
                    "const initMeta = {",
                    "    state: '',",
                    "    valueName: 'value',",
                    "    trigger: 'onChange'",
                    "};",
                    "",
                    "class Field {",
                    "    constructor(com, options = {}) {",
                    "        if (!com) {",
                    "            log.warning('`this` is missing in `Field`, you should use like `new Field(this)`');",
                    "        }",
                    "",
                    "        this.com = com;",
                    "        this.fieldsMeta = {};",
                    "        this.cachedBind = {};",
                    "        this.instance = {};",
                    "",
                    "        this.options = Object.assign({",
                    "            parseName: false,",
                    "            forceUpdate: false,",
                    "            scrollToFirstError: true,",
                    "            first: false,",
                    "            onChange: func.noop,",
                    "            autoUnmount: true,",
                    "        }, options);",
                    "",
                    "        ['init', 'getValue', 'getValues', 'setValue', 'setValues', 'getError', 'setError', 'setErrors', 'validate', 'getState', 'reset', 'resetToDefault', 'remove'].forEach((m) => {",
                    "            this[m] = this[m].bind(this);",
                    "        });",
                    "",
                    "        if (options.values) {",
                    "            this.setValues(options.values, false);",
                    "        }",
                    "    }",
                    "",
                    "    setOptions(options) {",
                    "        Object.assign(this.options, options);",
                    "    }",
                    "",
                    "    /**",
                    "     * Control Component",
                    "     * @param {String} name",
                    "     * @param {Object} fieldOption",
                    "     * @returns {Object} {value, onChange}",
                    "     */",
                    "    init(name, fieldOption = {}, rprops) {",
                    "        const {",
                    "            initValue,",
                    "            valueName = 'value',",
                    "            trigger = 'onChange',",
                    "            rules = [],",
                    "            props = {},",
                    "            getValueFromEvent = null",
                    "        } = fieldOption;",
                    "        const originalProps = Object.assign({}, props, rprops);",
                    "        const defaultValueName = `default${valueName[0].toUpperCase()}${valueName.slice(1)}`;",
                    "",
                    "        const field = this._getInitMeta(name);",
                    "        const defaultValue = typeof initValue !== 'undefined' ? initValue : originalProps[defaultValueName];",
                    "",
                    "        Object.assign(field, {",
                    "            valueName,",
                    "            initValue: defaultValue,",
                    "            disabled: 'disabled' in originalProps ? originalProps.disabled : false,",
                    "            getValueFromEvent,",
                    "            rules: Array.isArray(rules) ? rules : [rules],",
                    "            ref: originalProps.ref",
                    "        });",
                    "",
                    "        // Control Component",
                    "        if (valueName in originalProps) {",
                    "            field.value = originalProps[valueName];",
                    "        }",
                    "",
                    "        if (!('value' in field)) {",
                    "            field.value = defaultValue;",
                    "        }",
                    "",
                    "        // Component props",
                    "        const inputProps = {",
                    "            'data-meta': 'Field',",
                    "            id: name,",
                    "            ref: this._getCacheBind(name, `${name}__ref`, this._saveRef),",
                    "            [valueName]: field.value",
                    "        };",
                    "",
                    "        // trigger map",
                    "        const rulesMap = mapValidateRules(field.rules, trigger);",
                    "",
                    "        // validate hook",
                    "        for (const action in rulesMap) {",
                    "            if (action === trigger) {",
                    "                continue;",
                    "            }",
                    "",
                    "            const actionRule = rulesMap[action];",
                    "            inputProps[action] = (...args) => {",
                    "                this._validate(name, actionRule, action);",
                    "                this._callPropsEvent(action, originalProps, ...args);",
                    "                this._reRender();",
                    "            };",
                    "        }",
                    "",
                    "        // onChange hack",
                    "        inputProps[trigger] = (...args) => {",
                    "            this._callOnChange(name, rulesMap[trigger], trigger, ...args);",
                    "            this._callPropsEvent(trigger, originalProps, ...args);",
                    "            this.options.onChange(name, field.value);",
                    "            this._reRender();",
                    "        };",
                    "",
                    "        delete originalProps[defaultValueName];",
                    "",
                    "        return Object.assign({}, originalProps, inputProps);",
                    "    }",
                    "",
                    "    /**",
                    "     * event on props",
                    "     * props.onChange props.onBlur",
                    "     */",
                    "    _callPropsEvent(action, props, ...args) {",
                    "        (action in props) && typeof props[action] === 'function' && props[action](...args);",
                    "    }",
                    "",
                    "    _getInitMeta(name) {",
                    "        if (!(name in this.fieldsMeta)) {",
                    "            this.fieldsMeta[name] = Object.assign({}, initMeta);",
                    "        }",
                    "",
                    "        return this.fieldsMeta[name];",
                    "    }",
                    "",
                    "    _callOnChange(name, rule, trigger, ...others) {",
                    "        const e = others[0];",
                    "        const field = this._get(name);",
                    "",
                    "        if (!field) {",
                    "            return;",
                    "        }",
                    "",
                    "        field.value = field.getValueFromEvent ? field.getValueFromEvent.apply(this, others) : getValueFromEvent(e);",
                    "",
                    "        this._resetError(name);",
                    "        rule && this._validate(name, rule, trigger);",
                    "    }",
                    "",
                    "    /**",
                    "     * ref must always be the same function, or if not it will be triggerd every time.",
                    "     * @param {String} name name of component",
                    "     * @param {String} action key to find ref",
                    "     * @param {Function} fn saveRef",
                    "     */",
                    "    _getCacheBind(name, action, fn) {",
                    "        const cache = this.cachedBind[name] = this.cachedBind[name] || {};",
                    "        if (!cache[action]) {",
                    "            cache[action] = fn.bind(this, name);",
                    "        }",
                    "        return cache[action];",
                    "    }",
                    "",
                    "    _setCache(name, action, hander) {",
                    "        const cache = this.cachedBind[name] = this.cachedBind[name] || {};",
                    "        cache[action] = hander;",
                    "    }",
                    "",
                    "    _getCache(name, action) {",
                    "        const cache = this.cachedBind[name] || {};",
                    "        return cache[action];",
                    "    }",
                    "",
                    "    /**",
                    "     * saveRef is async function. it will be called after render",
                    "     * @param {String} name name of component",
                    "     * @param {Function} component ref",
                    "     */",
                    "    _saveRef(name, component) {",
                    "        const key = `${name}_field`;",
                    "        const autoUnmount = this.options.autoUnmount;",
                    "        if (!component && autoUnmount) {",
                    "            // component with same name(eg: type? <A name=\"n\"/>:<B name=\"n\"/>)",
                    "            // while type change to true B will render before A unmount.",
                    "            const cache = this.fieldsMeta[name];",
                    "            this._setCache(name, key, cache);",
                    "            // after destroy, delete data",
                    "            delete this.fieldsMeta[name];",
                    "            delete this.instance[name];",
                    "            return;",
                    "        }",
                    "",
                    "        // after _saveRef(name, null) and before rerender. (eg: same name but different compoent may be here)",
                    "        if (autoUnmount && !this.fieldsMeta[name]) {",
                    "            this.fieldsMeta[name] = this._getCache(name, key);",
                    "        }",
                    "",
                    "        // only one time here",
                    "        const field = this._get(name);",
                    "        if (field) {",
                    "            const ref = field.ref;",
                    "            if (ref) {",
                    "                if (typeof ref === 'string') {",
                    "                    throw new Error(`can not set string ref for ${name}`);",
                    "                }",
                    "                ref(component);",
                    "            }",
                    "",
                    "            this.instance[name] = component;",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * validate one Component",
                    "     * @param {String} name name of Component",
                    "     * @param {Array} rule",
                    "     * @param {String} trigger onChange/onBlur/onItemClick/...",
                    "     */",
                    "    _validate(name, rule, trigger) {",
                    "        const field = this._get(name);",
                    "        const value = field.value;",
                    "",
                    "        field.state = 'loading';",
                    "",
                    "        let validate = this._getCache(name, trigger);",
                    "        validate && validate.abort();",
                    "",
                    "        validate = new Validate({[name]: rule});",
                    "        this._setCache(name, trigger, validate);",
                    "",
                    "        validate.validate({",
                    "            [name]: value",
                    "        }, (errors) => {",
                    "",
                    "            if (errors && errors.length) {",
                    "                field.errors = getErrorStrs(errors);",
                    "                field.state = 'error';",
                    "            } else {",
                    "                field.errors = [];",
                    "                field.state = 'success';",
                    "            }",
                    "",
                    "            this._reRender();",
                    "        });",
                    "    }",
                    "",
                    "    getValue(name) {",
                    "        const field = this._get(name);",
                    "",
                    "        if (field && 'value' in field) {",
                    "            return field.value;",
                    "        }",
                    "",
                    "        return undefined;",
                    "    }",
                    "",
                    "    /**",
                    "     * 1. get values by names.",
                    "     * 2. ignore disabled value.",
                    "     * @param {Array} names",
                    "     */",
                    "    getValues(names) {",
                    "        const fields = names || this.getNames();",
                    "        let allValues = {};",
                    "",
                    "        fields.forEach((f) => {",
                    "            if (f.disabled) {",
                    "                return;",
                    "            }",
                    "            if (!this.options.parseName) {",
                    "                allValues[f] = this.getValue(f);",
                    "            } else {",
                    "                allValues = setIn(allValues, f, this.getValue(f));",
                    "            }",
                    "        });",
                    "        return allValues;",
                    "    }",
                    "",
                    "    setValue(name, value, reRender = true) {",
                    "        if (name in this.fieldsMeta) {",
                    "            this.fieldsMeta[name].value = value;",
                    "        } else {",
                    "            // if not exist, then new one",
                    "            this.fieldsMeta[name] = {",
                    "                value",
                    "            };",
                    "        }",
                    "        reRender && this._reRender();",
                    "    }",
                    "",
                    "    setValues(fieldsValue = {}, reRender = true) {",
                    "        if (!this.options.parseName) {",
                    "            Object.keys(fieldsValue).forEach((name) => {",
                    "                this.setValue(name, fieldsValue[name], false);",
                    "            });",
                    "        } else {",
                    "            const fields = this.getNames();",
                    "            fields.forEach((name) => {",
                    "                const value = getIn(fieldsValue, name);",
                    "                if (value !== undefined) {",
                    "                    this.setValue(name, value, false);",
                    "                }",
                    "            });",
                    "        }",
                    "        reRender && this._reRender();",
                    "    }",
                    "",
                    "    setError(name, errors) {",
                    "        const err = Array.isArray(errors) ? errors : (errors ? [errors] : []);",
                    "        if (name in this.fieldsMeta) {",
                    "            this.fieldsMeta[name].errors = err;",
                    "        } else {",
                    "            this.fieldsMeta[name] = {",
                    "                errors: err",
                    "            };",
                    "        }",
                    "",
                    "        if (this.fieldsMeta[name].errors && this.fieldsMeta[name].errors.length > 0) {",
                    "            this.fieldsMeta[name].state = 'error';",
                    "        } else {",
                    "            this.fieldsMeta[name].state = '';",
                    "        }",
                    "",
                    "        this._reRender();",
                    "    }",
                    "",
                    "    setErrors(fieldsErrors = {}) {",
                    "        Object.keys(fieldsErrors).forEach((name) => {",
                    "            this.setError(name, fieldsErrors[name]);",
                    "        });",
                    "    }",
                    "",
                    "    getError(name) {",
                    "        const field = this._get(name);",
                    "        if (field && field.errors && field.errors.length) {",
                    "            return field.errors;",
                    "        }",
                    "",
                    "        return null;",
                    "    }",
                    "",
                    "    getErrors(names) {",
                    "        const fields = names || this.getNames();",
                    "        const allErrors = {};",
                    "        fields.forEach((f) => {",
                    "            allErrors[f] = this.getError(f);",
                    "        });",
                    "        return allErrors;",
                    "    }",
                    "",
                    "    getState(name) {",
                    "        const field = this._get(name);",
                    "",
                    "        if (field && field.state) {",
                    "            return field.state;",
                    "        }",
                    "",
                    "        return '';",
                    "    }",
                    "",
                    "    /**",
                    "     * validate by trigger",
                    "     * @param {Array} ns names",
                    "     * @param {Function} cb callback after validate",
                    "     */",
                    "    validate(ns, cb) {",
                    "        const {names, callback} = getParams(ns, cb);",
                    "        const fieldNames = names || this.getNames();",
                    "",
                    "        const descriptor = {};",
                    "        const values = {};",
                    "",
                    "        let hasRule = false;",
                    "        for (let i = 0; i < fieldNames.length; i++) {",
                    "            const name = fieldNames[i];",
                    "            const field = this._get(name);",
                    "",
                    "            if (!field) {",
                    "                continue;",
                    "            }",
                    "",
                    "            if (field.rules && field.rules.length) {",
                    "                descriptor[name] = field.rules;",
                    "                values[name] = this.getValue(name);",
                    "                hasRule = true;",
                    "",
                    "                // clear error",
                    "                field.errors = [];",
                    "                field.state = '';",
                    "            }",
                    "        }",
                    "",
                    "        if (!hasRule) {",
                    "            callback && callback(null, this.getValues(fieldNames));",
                    "            return;",
                    "        }",
                    "",
                    "        const validate = new Validate(descriptor, {first: this.options.first});",
                    "",
                    "        validate.validate(values, (errors) => {",
                    "            let errorsGroup = null;",
                    "            if (errors && errors.length) {",
                    "                errorsGroup = {};",
                    "                errors.forEach((e) => {",
                    "                    const fieldName = e.field;",
                    "                    if (!errorsGroup[fieldName]) {",
                    "                        errorsGroup[fieldName] = {",
                    "                            errors: []",
                    "                        };",
                    "                    }",
                    "                    const fieldErrors = errorsGroup[fieldName].errors;",
                    "                    fieldErrors.push(e.message);",
                    "                });",
                    "            }",
                    "            if (errorsGroup) {",
                    "                // update error in every Field",
                    "                Object.keys(errorsGroup).forEach(i => {",
                    "                    const field = this._get(i);",
                    "                    field.errors = errorsGroup[i].errors;",
                    "                    field.state = 'error';",
                    "                });",
                    "            }",
                    "",
                    "            // update to success which has no error",
                    "            for (let i = 0; i < fieldNames.length; i++) {",
                    "                const name = fieldNames[i];",
                    "                const field = this._get(name);",
                    "                if (field.rules && !(errorsGroup && name in errorsGroup)) {",
                    "                    field.state = 'success';",
                    "                }",
                    "            }",
                    "",
                    "            callback && callback(errorsGroup, this.getValues(fieldNames));",
                    "            this._reRender();",
                    "",
                    "            if (errorsGroup && this.options.scrollToFirstError) {",
                    "                let firstNode;",
                    "                let firstTop;",
                    "                for (const i in errorsGroup) {",
                    "                    if (errorsGroup.hasOwnProperty(i)) {",
                    "                        const instance = this.instance[i];",
                    "                        const node = ReactDOM.findDOMNode(instance);",
                    "                        if (!node) {",
                    "                            return;",
                    "                        }",
                    "                        const top = node.offsetTop;",
                    "                        if (firstTop === undefined || firstTop > top) {",
                    "                            firstTop = top;",
                    "                            firstNode = node;",
                    "                        }",
                    "                    }",
                    "                }",
                    "",
                    "                if (firstNode) {",
                    "                    if (typeof this.options.scrollToFirstError === 'number' && window && typeof window.scrollTo === 'function') {",
                    "                        const offsetLeft = document && document.body && document.body.offsetLeft ? document.body.offsetLeft : 0;",
                    "                        window.scrollTo(offsetLeft, firstTop + this.options.scrollToFirstError);",
                    "                    } else if (firstNode.scrollIntoViewIfNeeded) {",
                    "                        firstNode.scrollIntoViewIfNeeded(true);",
                    "                    }",
                    "                }",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "    _reset(ns, backToDefault) {",
                    "        if (typeof ns === 'string') {",
                    "            ns = [ns];",
                    "        }",
                    "        let changed = false;",
                    "",
                    "        const names = ns || Object.keys(this.fieldsMeta);",
                    "        names.forEach((name) => {",
                    "            const field = this._get(name);",
                    "            this.getValue(name);",
                    "            if (field) {",
                    "                changed = true;",
                    "",
                    "                field.value = backToDefault ? field.initValue : undefined;",
                    "                field.state = '';",
                    "",
                    "                delete field.errors;",
                    "                delete field.rules;",
                    "                delete field.rulesMap;",
                    "            }",
                    "        });",
                    "",
                    "        if (changed) {",
                    "            this._reRender();",
                    "        }",
                    "    }",
                    "",
                    "    reset(ns, backToDefault = false) {",
                    "        if (ns === true) {",
                    "            log.deprecated('reset(true)', 'resetToDefault()', 'Field');",
                    "            this.resetToDefault();",
                    "        } else if (backToDefault === true) {",
                    "            log.deprecated('reset(ns,true)', 'resetToDefault(ns)', 'Field');",
                    "            this.resetToDefault(ns);",
                    "        } else {",
                    "            this._reset(ns, false);",
                    "        }",
                    "    }",
                    "",
                    "    resetToDefault(ns) {",
                    "        this._reset(ns, true);",
                    "    }",
                    "",
                    "    // deprecated. TODO: remove in 2.0 version",
                    "    isValidating(name) {",
                    "        log.deprecated('isValidating', 'getState', 'Field');",
                    "        return this.getState(name) === 'loading';",
                    "    }",
                    "",
                    "    getNames() {",
                    "        const fieldsMeta = this.fieldsMeta;",
                    "        return fieldsMeta ? Object.keys(fieldsMeta).filter(() => {",
                    "            return true;",
                    "        }) : [];",
                    "    }",
                    "",
                    "    remove(ns) {",
                    "        if (typeof ns === 'string') {",
                    "            ns = [ns];",
                    "        }",
                    "        const names = ns || Object.keys(this.fieldsMeta);",
                    "        names.forEach((name) => {",
                    "            if (name in this.fieldsMeta) {",
                    "                delete this.fieldsMeta[name];",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "    _resetError(name) {",
                    "        const field = this._get(name);",
                    "        delete field.errors; //清空错误",
                    "        field.state = '';",
                    "    }",
                    "",
                    "    //trigger rerender",
                    "    _reRender() {",
                    "        if (this.com) {",
                    "            if (!this.options.forceUpdate && this.com.setState) {",
                    "                this.com.setState({});",
                    "            } else if (this.com.forceUpdate) {",
                    "                this.com.forceUpdate(); //forceUpdate 对性能有较大的影响，成指数上升",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    _get(name) {",
                    "        return (name in this.fieldsMeta) ? this.fieldsMeta[name] : null;",
                    "    }",
                    "}",
                    "",
                    "export default Field;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "/* stylelint-disable-next-line */"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "utils.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "/**",
                    " * 从组件事件中获取数据",
                    " * @param e Event或者value",
                    " * @returns value",
                    " */",
                    "export function getValueFromEvent(e) {",
                    "    // support custom element",
                    "    if (!e || !e.target) {",
                    "        return e;",
                    "    }",
                    "    const { target } = e;",
                    "",
                    "    if (target.type === 'checkbox') {",
                    "        return target.checked;",
                    "    } else if (target.type === 'radio') {",
                    "        //兼容原生radioGroup",
                    "        if (target.value) {",
                    "            return target.value;",
                    "        } else {",
                    "            return target.checked;",
                    "        }",
                    "    }",
                    "    return target.value;",
                    "}",
                    "",
                    "export function getErrorStrs(errors) {",
                    "    if (errors) {",
                    "        return errors.map((e) => {",
                    "            if ('message' in e) {",
                    "                return e.message;",
                    "            }",
                    "            return e;",
                    "        });",
                    "    }",
                    "    return errors;",
                    "}",
                    "",
                    "export function getParams(ns, cb) {",
                    "    let names = typeof ns === 'string' ? [ns] : ns;",
                    "    let callback = cb;",
                    "    if (cb === undefined && typeof names === 'function') {",
                    "        callback = names;",
                    "        names = undefined;",
                    "    }",
                    "    return {",
                    "        names,",
                    "        callback,",
                    "    };",
                    "}",
                    "",
                    "const setInWithPath = (state, value, path, pathIndex) => {",
                    "    if (pathIndex >= path.length) {",
                    "        return value;",
                    "    }",
                    "",
                    "    const first = path[pathIndex];",
                    "    const next = setInWithPath(state && state[first], value, path, pathIndex + 1);",
                    "",
                    "    if (!state) {",
                    "        const initialized = isNaN(first) ? {} : [];",
                    "        initialized[first] = next;",
                    "        return initialized;",
                    "    }",
                    "",
                    "    if (Array.isArray(state)) {",
                    "        const copy = [].concat(state);",
                    "        copy[first] = next;",
                    "        return copy;",
                    "    }",
                    "",
                    "    return Object.assign({}, state, {",
                    "        [first]: next",
                    "    });",
                    "};",
                    "",
                    "export function setIn(state, name, value) {",
                    "    return setInWithPath(state, value, name.replace(/\\[/, '.').replace(/\\]/, '').split('.'), 0);",
                    "}",
                    "",
                    "export function getIn(state, name) {",
                    "    if (!state) {",
                    "        return state;",
                    "    }",
                    "",
                    "    const path = name.replace(/\\[/, '.').replace(/\\]/, '').split('.');",
                    "    const length = path.length;",
                    "    if (!length) {",
                    "        return undefined;",
                    "    }",
                    "",
                    "    let result = state;",
                    "    for (let i = 0; i < length && !!result; ++i) {",
                    "        result = result[path[i]];",
                    "    }",
                    "",
                    "    return result;",
                    "}",
                    "",
                    "function validateMap(rulesMap, rule, defaultTrigger) {",
                    "    const nrule = Object.assign({}, rule);",
                    "",
                    "    if (!nrule.trigger) {",
                    "        nrule.trigger = [defaultTrigger];",
                    "    }",
                    "",
                    "    if (typeof nrule.trigger === 'string') {",
                    "        nrule.trigger = [nrule.trigger];",
                    "    }",
                    "",
                    "    for (let i = 0; i < nrule.trigger.length; i++) {",
                    "        const trigger = nrule.trigger[i];",
                    "",
                    "        if (trigger in rulesMap) {",
                    "            rulesMap[trigger].push(nrule);",
                    "        } else {",
                    "            rulesMap[trigger] = [nrule];",
                    "        }",
                    "    }",
                    "",
                    "    delete nrule.trigger;",
                    "}",
                    "",
                    "/**",
                    " * 提取rule里面的trigger并且做映射",
                    " * @param  {Array} rules   规则",
                    " * @param  {String} defaultTrigger 默认触发",
                    " * @return {Object} {onChange:rule1, onBlur: rule2}",
                    " */",
                    "export function mapValidateRules(rules, defaultTrigger) {",
                    "    const rulesMap = {};",
                    "",
                    "    rules.forEach((rule) => {",
                    "        validateMap(rulesMap, rule, defaultTrigger);",
                    "    });",
                    "",
                    "    return rulesMap;",
                    "}"
                ]
            }
        },
        "form": {
            "enhance.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "function getCfgFromProps(props, type) {",
                    "    if (type in props) {",
                    "        return props[type];",
                    "    }",
                    "",
                    "    return undefined;",
                    "}",
                    "",
                    "function getRule(ruleName, props) {",
                    "    return {",
                    "        [ruleName]: props[ruleName],",
                    "        message: getCfgFromProps(props, `${ruleName}Message`),",
                    "        trigger: getCfgFromProps(props, `${ruleName}Trigger`)",
                    "    };",
                    "}",
                    "",
                    "function getValueName(props, displayName) {",
                    "    if (props.valueName) {",
                    "        return props.valueName;",
                    "    }",
                    "",
                    "    if (typeof displayName === 'string') {",
                    "        // Next Components are all wrappered by configProvider",
                    "        const componentName = displayName.replace(/Config\\(/, '').replace(')', '');",
                    "        if (['Switch', 'Checkbox', 'Radio'].indexOf(componentName) !== -1) {",
                    "            return 'checked';",
                    "        }",
                    "    }",
                    "",
                    "    return 'value';",
                    "}",
                    "",
                    "export function getRules(props) {",
                    "    const result = [];",
                    "",
                    "    // required",
                    "    if (props.required) {",
                    "        result.push(getRule('required', props));",
                    "    }",
                    "",
                    "    const maxLength = Number(props.maxLength);",
                    "    const minLength = Number(props.minLength);",
                    "    if (minLength || maxLength) {",
                    "        result.push({",
                    "            minLength,",
                    "            maxLength,",
                    "            // minLengthMessage maxLengthMessage had been deprected, please use minmaxLength. TODO: removed in 2.0",
                    "            message: getCfgFromProps(props, 'minmaxLengthMessage') || getCfgFromProps(props, 'minLengthMessage') || getCfgFromProps(props, 'maxLengthMessage'),",
                    "            trigger: getCfgFromProps(props, 'minmaxLengthTrigger') || getCfgFromProps(props, 'minLengthTrigger') || getCfgFromProps(props, 'maxLengthTrigger'),",
                    "        });",
                    "    }",
                    "",
                    "    // length",
                    "    if (props.length) {",
                    "        result.push(getRule('length', props));",
                    "    }",
                    "",
                    "    // pattern",
                    "    if (props.pattern) {",
                    "        result.push(getRule('pattern', props));",
                    "    }",
                    "",
                    "    // format",
                    "    if (['number', 'tel', 'url', 'email'].indexOf(props.format) > -1) {",
                    "        result.push(getRule('format', props));",
                    "    }",
                    "",
                    "    const max = Number(props.max);",
                    "    const min = Number(props.min);",
                    "    // max min",
                    "    if (max || min) {",
                    "        result.push({",
                    "            min,",
                    "            max,",
                    "            // minMessage maxMessage had been deprected, please use minmaxLength. TODO: removed in 2.0",
                    "            message: getCfgFromProps(props, 'minmaxMessage') || getCfgFromProps(props, 'minMessage') || getCfgFromProps(props, 'maxMessage'),",
                    "            trigger: getCfgFromProps(props, 'minmaxTrigger') || getCfgFromProps(props, 'minTrigger') || getCfgFromProps(props, 'maxTrigger'),",
                    "        });",
                    "    }",
                    "",
                    "    if (props.validator && typeof props.validator === 'function') {",
                    "        result.push({",
                    "            validator: props.validator,",
                    "            trigger: getCfgFromProps(props, 'validatorTrigger'),",
                    "        });",
                    "    }",
                    "",
                    "    return result;",
                    "}",
                    "",
                    "export function getFieldInitCfg(props, displayName) {",
                    "    return {",
                    "        valueName: getValueName(props, displayName),",
                    "        trigger: props.trigger ? props.trigger : 'onChange',",
                    "        rules: getRules(props)",
                    "    };",
                    "}"
                ]
            },
            "error.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "/**",
                    " * Form.Error",
                    " * @description 自定义错误展示",
                    " * @order 4",
                    " */",
                    "class Error extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 表单名",
                    "         */",
                    "        name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * 自定义 field (在 Form 内不需要设置)",
                    "         */",
                    "        field: PropTypes.object,",
                    "        style: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义错误渲染, 可以是 node 或者 function(errors, state)",
                    "         */",
                    "        children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),",
                    "        prefix: PropTypes.string,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "    }",
                    "",
                    "    static contextTypes = {",
                    "        _formField: PropTypes.object",
                    "    };",
                    "",
                    "    static _typeMark = 'form_error';",
                    "",
                    "    itemRender = (errors) => {",
                    "        return errors.length ? errors : null;",
                    "    }",
                    "",
                    "    render() {",
                    "        const { children, name, prefix, style, className, field: _field, ...others } = this.props;",
                    "",
                    "        if (children && typeof children !== 'function') {",
                    "            return <div className={`${prefix}form-item-help`}>{children}</div>;",
                    "        }",
                    "",
                    "        const field = this.context._formField || _field;",
                    "",
                    "        if (!field || !name) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const isSingle = typeof name === 'string';",
                    "",
                    "        const names = isSingle ? [name] : name;",
                    "        const errorArr = [];",
                    "",
                    "        if (names.length) {",
                    "            const errors = field.getErrors(names);",
                    "            Object.keys(errors).forEach(key => {",
                    "                if (errors[key]) {",
                    "                    errorArr.push(errors[key]);",
                    "                }",
                    "            });",
                    "        }",
                    "",
                    "        let result = null;",
                    "        if (typeof children === 'function') {",
                    "            result = children(errorArr, isSingle ? field.getState(name) : undefined);",
                    "        } else {",
                    "            result = this.itemRender(errorArr);",
                    "        }",
                    "",
                    "        if (!result) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}form-item-help`]: true,",
                    "            [className]: className",
                    "        });",
                    "",
                    "        return (",
                    "            <div {...others} className={cls} style={style}>{result}</div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Error);"
                ]
            },
            "form.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import {obj, func} from '../util';",
                    "import Field from '../field';",
                    "",
                    "function pickerDefined(obj) {",
                    "    const newObj = {};",
                    "    Object.keys(obj).forEach(i => {",
                    "        if (typeof obj[i] !== 'undefined') {",
                    "            newObj[i] = obj[i];",
                    "        }",
                    "    });",
                    "    return newObj;",
                    "}",
                    "",
                    "function preventDefault(e) {",
                    "    e.preventDefault();",
                    "}",
                    "",
                    "/** Form */",
                    "export default class Form extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 内联表单",
                    "         */",
                    "        inline: PropTypes.bool,",
                    "        /**",
                    "         * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。",
                    "         * @enumdesc 大, 中, 小",
                    "         */",
                    "        size: PropTypes.oneOf(['large', 'medium', 'small']),",
                    "        /**",
                    "         * 标签的位置",
                    "         * @enumdesc 上, 左, 内",
                    "         */",
                    "        labelAlign: PropTypes.oneOf(['top', 'left', 'inset']),",
                    "        /**",
                    "         * 标签的左右对齐方式",
                    "         * @enumdesc 左, 右",
                    "         */",
                    "        labelTextAlign: PropTypes.oneOf(['left', 'right']),",
                    "        /**",
                    "         * 经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项",
                    "         */",
                    "        field: PropTypes.any,",
                    "        /**",
                    "         * 保存 Form 自动生成的 field 对象",
                    "         */",
                    "        saveField: PropTypes.func,",
                    "        /**",
                    "         * 控制第一级 Item 的 labelCol",
                    "         */",
                    "        labelCol: PropTypes.object,",
                    "        /**",
                    "         * 控制第一级 Item 的 wrapperCol",
                    "         */",
                    "        wrapperCol: PropTypes.object,",
                    "        /**",
                    "         * form内有 `htmlType=\"submit\"` 的元素的时候会触发",
                    "         */",
                    "        onSubmit: PropTypes.func,",
                    "        /**",
                    "         * 子元素",
                    "         */",
                    "        children: PropTypes.any,",
                    "        /**",
                    "         * 扩展class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 表单数值",
                    "         */",
                    "        value: PropTypes.object,",
                    "        /**",
                    "         * 表单变化回调",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 设置标签类型",
                    "         */",
                    "        component: PropTypes.string,",
                    "        fieldOptions: PropTypes.object,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        onSubmit: preventDefault,",
                    "        size: 'medium',",
                    "        labelAlign: 'left',",
                    "        onChange: func.noop,",
                    "        component: 'form',",
                    "        saveField: func.noop,",
                    "    };",
                    "",
                    "    static childContextTypes = {",
                    "        _formField: PropTypes.object,",
                    "        _formSize: PropTypes.string",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "        const options = {",
                    "            ...props.fieldOptions,",
                    "            onChange: this.onChange",
                    "        };",
                    "",
                    "        if (props.field) {",
                    "            this._formField = props.field;",
                    "            const onChange = this._formField.options.onChange;",
                    "            options.onChange = func.makeChain(onChange, this.onChange);",
                    "            this._formField.setOptions && this._formField.setOptions(options);",
                    "        } else {",
                    "            if ('value' in props) {",
                    "                options.values = props.value;",
                    "            }",
                    "            this._formField = new Field(this, options);",
                    "        }",
                    "",
                    "        props.saveField(this._formField);",
                    "    }",
                    "",
                    "    getChildContext() {",
                    "        return {",
                    "            _formField: this.props.field ? this.props.field : this._formField,",
                    "            _formSize: this.props.size",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            this._formField.setValues(nextProps.value);",
                    "        }",
                    "        if ('error' in nextProps) {",
                    "            this._formField.setErrors(nextProps.error);",
                    "        }",
                    "    }",
                    "",
                    "    onChange = (name, value) => {",
                    "        this.props.onChange(this._formField.getValues(), {name, value, field: this._formField});",
                    "    };",
                    "",
                    "    render() {",
                    "        const {className, inline, size, labelAlign, labelTextAlign, onSubmit, children, labelCol, wrapperCol, style, prefix, component: Tag} = this.props;",
                    "",
                    "        const formClassName = classNames({",
                    "            [`${prefix}form`]: true,",
                    "            [`${prefix}inline`]: inline, // 内联",
                    "            [`${prefix}${size}`]: size,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        return (",
                    "            <Tag {...obj.pickOthers(Form.propTypes, this.props)}",
                    "                className={formClassName}",
                    "                style={style}",
                    "                onSubmit={onSubmit}>",
                    "                {",
                    "                    React.Children.map(children, (child) => {",
                    "                        if (child && typeof child.type === 'function' && child.type._typeMark === 'form_item') {",
                    "                            const childrenProps = {",
                    "                                labelCol: child.props.labelCol ? child.props.labelCol : labelCol,",
                    "                                wrapperCol: child.props.wrapperCol ? child.props.wrapperCol : wrapperCol,",
                    "                                labelAlign: child.props.labelAlign ? child.props.labelAlign : labelAlign,",
                    "                                labelTextAlign: child.props.labelTextAlign ? child.props.labelTextAlign : labelTextAlign,",
                    "                                size: child.props.size ? child.props.size : size,",
                    "                            };",
                    "                            return React.cloneElement(child, pickerDefined(childrenProps));",
                    "                        }",
                    "                        return child;",
                    "                    })",
                    "                }",
                    "            </Tag>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Form from './form';",
                    "import Item from './item';",
                    "import Submit from './submit';",
                    "import Reset from './reset';",
                    "import Error from './error';",
                    "",
                    "Form.Item = ConfigProvider.config(Item, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('validateStatus' in props) {",
                    "            deprecated('validateStatus', 'validateState', 'Form.Item');",
                    "",
                    "            const { validateStatus, ...others } = props;",
                    "            props = { validateState: validateStatus, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});",
                    "Form.Submit = Submit;",
                    "Form.Reset = Reset;",
                    "Form.Error = Error;",
                    "",
                    "export default ConfigProvider.config(Form, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('direction' in props) {",
                    "            deprecated('direction', 'inline', 'Form');",
                    "            const { direction, ...others } = props;",
                    "            if (direction === 'hoz') {",
                    "                props = { inline: true, ...others };",
                    "            }",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "item.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Grid from '../grid';",
                    "import { obj } from '../util';",
                    "import Error from './error';",
                    "import { getFieldInitCfg } from './enhance';",
                    "",
                    "const { Row, Col } = Grid;",
                    "",
                    "/** Form.Item",
                    " *  @description 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid",
                    " *  @order 1",
                    " */",
                    "export default class Item extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * label 标签的文本",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效",
                    "         */",
                    "        labelCol: PropTypes.object,",
                    "        /**",
                    "         * 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol",
                    "         */",
                    "        wrapperCol: PropTypes.object,",
                    "        /**",
                    "         * 自定义提示信息，如不设置，则会根据校验规则自动生成.",
                    "         */",
                    "        help: PropTypes.node,",
                    "        /**",
                    "         * 校验状态，如不设置，则会根据校验规则自动生成",
                    "         * @enumdesc , 成功, 失败, 校验中",
                    "         */",
                    "        validateState: PropTypes.oneOf(['error', 'success', 'loading']),",
                    "        /**",
                    "         * 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持",
                    "         */",
                    "        hasFeedback: PropTypes.bool, //TODO: hasFeedback => validateStatus=[error,success,loading]",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        id: PropTypes.string,",
                    "        /**",
                    "         * node 或者 function(values)",
                    "         */",
                    "        children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),",
                    "        /**",
                    "         * 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面",
                    "         */",
                    "        extra: PropTypes.node,",
                    "        /**",
                    "         * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。",
                    "         */",
                    "        size: PropTypes.oneOf(['large', 'small', 'medium']),",
                    "        /**",
                    "         * 标签的位置",
                    "         * @enumdesc 上, 左, 内",
                    "         */",
                    "        labelAlign: PropTypes.oneOf(['top', 'left', 'inset']),",
                    "        /**",
                    "         * 标签的左右对齐方式",
                    "         * @enumdesc 左, 右",
                    "         */",
                    "        labelTextAlign: PropTypes.oneOf(['left', 'right']),",
                    "        /**",
                    "         * 扩展class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * [表单校验] 不能为空",
                    "         */",
                    "        required: PropTypes.bool,",
                    "        /**",
                    "         * required 的星号是否显示",
                    "         */",
                    "        asterisk: PropTypes.bool,",
                    "        /**",
                    "         * required 自定义错误信息",
                    "         */",
                    "        requiredMessage: PropTypes.string,",
                    "        /**",
                    "         * required 自定义触发方式",
                    "         */",
                    "        requiredTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * [表单校验] 最小值",
                    "         */",
                    "        min: PropTypes.number,",
                    "        /**",
                    "         * [表单校验] 最大值",
                    "         */",
                    "        max: PropTypes.number,",
                    "        /**",
                    "         * min/max 自定义错误信息",
                    "         */",
                    "        minmaxMessage: PropTypes.string,",
                    "        /**",
                    "         * min/max 自定义触发方式",
                    "         */",
                    "        minmaxTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * [表单校验] 字符串最小长度 / 数组最小个数",
                    "         */",
                    "        minLength: PropTypes.number,",
                    "        /**",
                    "         * [表单校验] 字符串最大长度 / 数组最大个数",
                    "         */",
                    "        maxLength: PropTypes.number,",
                    "        /**",
                    "         * minLength/maxLength 自定义错误信息",
                    "         */",
                    "        minmaxLengthMessage: PropTypes.string,",
                    "        /**",
                    "         * minLength/maxLength 自定义触发方式",
                    "         */",
                    "        minmaxLengthTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * [表单校验] 字符串精确长度 / 数组精确个数",
                    "         */",
                    "        length: PropTypes.number,",
                    "        /**",
                    "         * length 自定义错误信息",
                    "         */",
                    "        lengthMessage: PropTypes.string,",
                    "        /**",
                    "         * length 自定义触发方式",
                    "         */",
                    "        lengthTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * 正则校验",
                    "         */",
                    "        pattern: PropTypes.any,",
                    "        /**",
                    "         * pattern 自定义错误信息",
                    "         */",
                    "        patternMessage: PropTypes.string,",
                    "        /**",
                    "         * pattern 自定义触发方式",
                    "         */",
                    "        patternTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * [表单校验] 四种常用的 pattern",
                    "         */",
                    "        format: PropTypes.oneOf(['number', 'email', 'url', 'tel']),",
                    "        /**",
                    "         * format 自定义错误信息",
                    "         */",
                    "        formatMessage: PropTypes.string,",
                    "        /**",
                    "         * format 自定义触发方式",
                    "         */",
                    "        formatTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * [表单校验] 自定义校验函数",
                    "         */",
                    "        validator: PropTypes.func,",
                    "        /**",
                    "         * validator 自定义触发方式",
                    "         */",
                    "        validatorTrigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        hasFeedback: false,",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        _formField: PropTypes.object,",
                    "        _formSize: PropTypes.oneOf(['large', 'small', 'medium']),",
                    "    };",
                    "",
                    "    static _typeMark = 'form_item';",
                    "",
                    "    /**",
                    "     * 从子元素里面提取表单组件",
                    "     */",
                    "    getNames() {",
                    "        const children = React.Children.toArray(this.props.children);",
                    "        return children.filter(c => {",
                    "            return c.props && ('name' in c.props || 'data-meta' in c.props);",
                    "        }).map(c => {",
                    "            return c.props.name || c.props.id;",
                    "        });",
                    "    }",
                    "",
                    "    getHelper() {",
                    "        const help = this.props.help;",
                    "        const _formField = this.context._formField;",
                    "",
                    "        return <Error name={help === undefined ? this.getNames() : undefined} field={_formField}>{help}</Error>;",
                    "    }",
                    "",
                    "    getState() {",
                    "        const { validateState } = this.props;",
                    "        if (validateState) {",
                    "            return validateState;",
                    "        }",
                    "",
                    "        if (this.context._formField) {",
                    "            const { getState } = this.context._formField;",
                    "            const names = this.getNames();",
                    "            if (!names.length) {",
                    "                return '';",
                    "            }",
                    "",
                    "            return getState(names[0]);",
                    "        }",
                    "",
                    "        return undefined;",
                    "    }",
                    "",
                    "    getSize() {",
                    "        return this.props.size || this.context._formSize;",
                    "    }",
                    "",
                    "    getItemLabel() {",
                    "        const { id, required, asterisk = required, label, labelCol, wrapperCol, prefix, labelAlign, labelTextAlign } = this.props;",
                    "",
                    "        if (!label) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const ele = (<label htmlFor={id || this.getNames()[0]} required={asterisk} key=\"label\">",
                    "            {label}",
                    "        </label>);",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}form-item-label`]: true,",
                    "            [`${prefix}left`]: labelTextAlign === 'left',",
                    "        });",
                    "",
                    "        if ((wrapperCol || labelCol) && labelAlign !== 'top') {",
                    "            return <Col {...labelCol} className={cls}>{ele}</Col>;",
                    "        }",
                    "",
                    "        return <div className={cls}>{ele}</div>;",
                    "    }",
                    "",
                    "    getItemWrapper() {",
                    "        const { hasFeedback, labelCol, wrapperCol, children, extra, labelAlign, prefix } = this.props;",
                    "",
                    "        const state = this.getState();",
                    "",
                    "        const childrenProps = { size: this.getSize() };",
                    "        if (state && (state === 'error' || hasFeedback)) {",
                    "            childrenProps.state = state;",
                    "        }",
                    "",
                    "        if (labelAlign === 'inset') {",
                    "            childrenProps.label = this.getItemLabel();",
                    "        }",
                    "",
                    "        let childrenNode = children;",
                    "        if (typeof children === 'function' && this.context._formField) {",
                    "            childrenNode = children(this.context._formField.getValues());",
                    "        }",
                    "",
                    "        const ele = React.Children.map(childrenNode, (child) => {",
                    "            if (child && typeof child.type === 'function' && child.type._typeMark !== 'form_item' && child.type._typeMark !== 'form_error') {",
                    "                let extraProps = childrenProps;",
                    "                if (this.context._formField && 'name' in child.props && !('data-meta' in child.props)) {",
                    "                    extraProps = this.context._formField.init(child.props.name, {",
                    "                        ...getFieldInitCfg(this.props, child.type.displayName),",
                    "                        props: child.props",
                    "                    }, childrenProps);",
                    "                } else {",
                    "                    extraProps = Object.assign({}, child.props, extraProps);",
                    "                }",
                    "",
                    "                return React.cloneElement(child, extraProps);",
                    "            }",
                    "",
                    "            return child;",
                    "        });",
                    "",
                    "        const help = this.getHelper();",
                    "",
                    "        if ((wrapperCol || labelCol) && labelAlign !== 'top') {",
                    "            return (",
                    "                <Col {...wrapperCol} className={`${prefix}form-item-control`} key=\"item\">",
                    "                    {ele} {help} {extra}",
                    "                </Col>",
                    "            );",
                    "        }",
                    "",
                    "        return (<div className={`${prefix}form-item-control`}>",
                    "            {ele} {help} {extra}",
                    "        </div>);",
                    "    }",
                    "",
                    "    render() {",
                    "",
                    "        const { className, labelAlign, style, prefix, wrapperCol, labelCol } = this.props;",
                    "        const state = this.getState();",
                    "        const size = this.getSize();",
                    "",
                    "        const itemClassName = classNames({",
                    "            [`${prefix}form-item`]: true,",
                    "            [`${prefix}${labelAlign}`]: labelAlign,",
                    "            [`has-${state}`]: !!state,",
                    "            [`${prefix}${size}`]: !!size,",
                    "            [`${className}`]: !!className,",
                    "        });",
                    "",
                    "        // 垂直模式并且左对齐才用到",
                    "        const Tag = (wrapperCol || labelCol) && labelAlign !== 'top' ? Row : 'div';",
                    "        const label = labelAlign === 'inset' ? null : this.getItemLabel();",
                    "",
                    "        return (",
                    "            <Tag  {...obj.pickOthers(Item.propTypes, this.props)} className={itemClassName} style={style}>",
                    "                {label}",
                    "                {this.getItemWrapper()}",
                    "            </Tag>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "$form-element-large-height:40px;",
                    "",
                    "#{$form-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    &-item {",
                    "        &.has-error {",
                    "            #{$form-prefix}-item-help {",
                    "                color: $form-error-color;",
                    "            }",
                    "        }",
                    "",
                    "        /* medium */",
                    "        margin-bottom: $form-item-m-margin-b;",
                    "        #{$form-prefix}-item-label, #{$form-prefix}-text-align, p {",
                    "            line-height: $form-element-medium-height;",
                    "        }",
                    "        #{$form-prefix}-text-align, p {",
                    "            margin: 0;",
                    "        }",
                    "",
                    "        @include form-enhance($form-element-medium-height - 4);",
                    "",
                    "        #{$form-prefix}-item-label {",
                    "            font-size: $form-element-medium-font-size;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}large {",
                    "            margin-bottom: $form-item-l-margin-b;",
                    "            #{$form-prefix}-item-label, #{$form-prefix}-text-align, p {",
                    "                line-height: $form-element-large-height;",
                    "            }",
                    "",
                    "            @include form-enhance($form-element-large-height - 1);",
                    "",
                    "            #{$form-prefix}-item-label {",
                    "                font-size: $form-element-large-font-size;",
                    "            }",
                    "        }",
                    "        &.#{$css-prefix}small {",
                    "            margin-bottom: $form-item-s-margin-b;",
                    "",
                    "            #{$form-prefix}-item-label, #{$form-prefix}-text-align, p {",
                    "                line-height: $form-element-small-height;",
                    "            }",
                    "",
                    "            @include form-enhance($form-element-small-height);",
                    "",
                    "            #{$form-prefix}-item-label {",
                    "                font-size: $form-element-small-font-size;",
                    "            }",
                    "        }",
                    "        &.#{$css-prefix}top > #{$form-prefix}-item-label {",
                    "            margin-bottom: $form-top-label-margin-b;",
                    "        }",
                    "        &.#{$css-prefix}inset #{$form-prefix}-item-label {",
                    "            padding-right: 0;",
                    "            padding-left: 0;",
                    "            line-height: inherit;",
                    "        }",
                    "    }",
                    "    &-item-control {",
                    "        #{$form-prefix}-text-align {",
                    "            margin: 0;",
                    "        }",
                    "        > .#{$css-prefix}input-group, > .#{$css-prefix}input {",
                    "            width: 100%;",
                    "        }",
                    "    }",
                    "    &-item-label {",
                    "        display: inline-block;",
                    "        vertical-align: top;",
                    "        color: $form-label-color;",
                    "        text-align: right;",
                    "        padding-right: $form-label-padding-r;",
                    "",
                    "        label[required]:before {",
                    "            margin-right: 4px;",
                    "            content: \"*\";",
                    "            color: $form-error-color;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}left {",
                    "            text-align: left;",
                    "",
                    "            > label[required]::before {",
                    "                display: none;",
                    "            }",
                    "            > label[required]::after {",
                    "                margin-left: 4px;",
                    "                content: \"*\";",
                    "                color: $form-error-color;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-item-help {",
                    "        margin-top: $form-help-margin-top;",
                    "        font-size: $form-help-font-size;",
                    "        line-height: $font-lineheight-2;",
                    "        color: $form-help-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}inline {",
                    "        #{$form-prefix}-item {",
                    "            display: inline-block;",
                    "            vertical-align: top;",
                    "",
                    "            /* label on left */",
                    "            &.#{$css-prefix}left #{$form-prefix}-item-control {",
                    "                display: inline-block;",
                    "                vertical-align: top;",
                    "                line-height: 0;",
                    "            }",
                    "",
                    "            &:not(:last-child) {",
                    "                margin-right: $form-inline-m-item-margin-r;",
                    "            }",
                    "            &.#{$css-prefix}large:not(:last-child) {",
                    "                margin-right: $form-inline-l-item-margin-r;",
                    "            }",
                    "            &.#{$css-prefix}small:not(:last-child) {",
                    "                margin-right: $form-inline-s-item-margin-r;",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "@media screen and (min-width: 0\\0) and (min-resolution: .001dpcm) {",
                    "    #{$form-prefix}-item.#{$css-prefix}left > #{$form-prefix}-item-label {",
                    "        display: table-cell;",
                    "    }",
                    "    #{$form-prefix}.#{$css-prefix}inline #{$form-prefix}-item.#{$css-prefix}left #{$form-prefix}-item-control {",
                    "        display: table-cell;",
                    "    }",
                    "}"
                ]
            },
            "reset.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Button from '../button';",
                    "import { func, obj, log } from '../util';",
                    "",
                    "/**",
                    " * Form.Reset",
                    " * @description 继承 Button API",
                    " * @order 3",
                    " */",
                    "class Reset extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 自定义重置的字段",
                    "         */",
                    "        names: PropTypes.array,",
                    "        /**",
                    "         * 点击提交后触发",
                    "         */",
                    "        onClick: PropTypes.func,",
                    "        /**",
                    "         * 返回默认值",
                    "         */",
                    "        toDefault: PropTypes.bool,",
                    "        /**",
                    "         * 自定义 field (在 Form 内不需要设置)",
                    "         */",
                    "        field: PropTypes.object,",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        onClick: func.noop",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        _formField: PropTypes.object",
                    "    };",
                    "",
                    "    handleClick = () => {",
                    "        const { names, toDefault, onClick } = this.props;",
                    "        const field = this.context._formField || this.props.field;",
                    "",
                    "        if (!field) {",
                    "            log.warning('Form.Reset should be used in `Form`');",
                    "            onClick();",
                    "            return;",
                    "        }",
                    "",
                    "        if (toDefault) {",
                    "            field.resetToDefault(names);",
                    "        } else {",
                    "            field.reset(names);",
                    "        }",
                    "",
                    "        onClick();",
                    "    };",
                    "",
                    "    render() {",
                    "        const { children } = this.props;",
                    "",
                    "        return (",
                    "            <Button {...obj.pickOthers(Reset.propTypes, this.props)} onClick={this.handleClick}>{children}</Button>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Reset;"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../grid/style.js';",
                    "import '../button/style.js';",
                    "import './main.scss';"
                ]
            },
            "submit.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Button from '../button';",
                    "import { func, obj, log } from '../util';",
                    "",
                    "/**",
                    " * Form.Submit",
                    " * @description 继承 Button API",
                    " * @order 2",
                    " */",
                    "class Submit extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 点击提交后触发",
                    "         * @param {Object} value 数据",
                    "         * @param {Object} errors 错误数据",
                    "         * @param {class} field 实例",
                    "         */",
                    "        onClick: PropTypes.func,",
                    "        /**",
                    "         * 是否校验/需要校验的 name 数组",
                    "         */",
                    "        validate: PropTypes.oneOfType([PropTypes.bool, PropTypes.array]),",
                    "        /**",
                    "         * 自定义 field (在 Form 内不需要设置)",
                    "         */",
                    "        field: PropTypes.object,",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        onClick: func.noop,",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        _formField: PropTypes.object",
                    "    };",
                    "",
                    "    handleClick = () => {",
                    "        const { onClick, validate } = this.props;",
                    "        const field = this.context._formField || this.props.field;",
                    "",
                    "        if (!field) {",
                    "            log.warning('Form.Submit should be used in `Form`');",
                    "            onClick();",
                    "            return;",
                    "        }",
                    "",
                    "        if (validate === true) {",
                    "            field.validate((errors) => {",
                    "                onClick(field.getValues(), errors, field);",
                    "            });",
                    "        } else if (Array.isArray(validate)) {",
                    "            field.validate(validate, (errors) => {",
                    "                onClick(field.getValues(), errors, field);",
                    "            });",
                    "        } else {",
                    "            onClick(field.getValues(), null, field);",
                    "        }",
                    "    };",
                    "",
                    "    render() {",
                    "        const { children } = this.props;",
                    "",
                    "        return (",
                    "            <Button {...obj.pickOthers(Submit.propTypes, this.props)} onClick={this.handleClick}>{children}</Button>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Submit;"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// form mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin form-enhance($line-height) {",
                        "    .#{$css-prefix}checkbox-wrapper, .#{$css-prefix}checkbox-group, .#{$css-prefix}radio-wrapper, .#{$css-prefix}radio-group {",
                        "        line-height: $line-height;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module form: 表单",
                        "/// @tag Form",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $form-",
                        "/// @classPrefix {prefix}-form",
                        "/// @order {\"size/bounding\":10,\"size/item\":11,\"size/label\":12,\"size/help\":13,\"size/border\":14,\"statement/help\":10,\"statement/label\":11,\"statement/normal\":12,\"statement/border\":13}",
                        "////",
                        "",
                        "@charset \"UTF-8\";",
                        "",
                        "// form variables",
                        "// --------------------------------------------------",
                        "",
                        "$form-prefix: \".#{$css-prefix}form\";",
                        "",
                        "/// label padding (r)",
                        "/// @namespace size/bounding",
                        "$form-label-padding-r: $s-3 !default;",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/item",
                        "$form-item-m-margin-b: $s-4 !default;",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/item",
                        "$form-item-l-margin-b: $s-5 !default;",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/item",
                        "$form-item-s-margin-b: $s-3 !default;",
                        "",
                        "/// margin (r)",
                        "/// @namespace size/item",
                        "$form-inline-l-item-margin-r: $s-6 !default;",
                        "",
                        "/// margin (r)",
                        "/// @namespace size/item",
                        "$form-inline-m-item-margin-r: $s-5 !default;",
                        "",
                        "/// margin (r)",
                        "/// @namespace size/item",
                        "$form-inline-s-item-margin-r: $s-4 !default;",
                        "",
                        "/// margin (t)",
                        "/// @namespace size/help",
                        "$form-help-margin-top: $s-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/help",
                        "$form-help-font-size: $font-size-caption !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/help",
                        "$form-help-color: $color-text1-2 !default;",
                        "",
                        "/// error text",
                        "/// @namespace statement/help",
                        "$form-error-color: $color-error-3 !default;",
                        "",
                        "/// margin (b)",
                        "/// @type length",
                        "/// @namespace size/label",
                        "$form-top-label-margin-b: 2px !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/label",
                        "$form-label-color: $color-text1-3 !default;"
                    ]
                }
            }
        },
        "grid": {
            "col.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "",
                    "const breakPoints = ['xxs', 'xs', 's', 'm', 'l', 'xl'];",
                    "",
                    "/**",
                    " * Grid.Col",
                    " * @order 2",
                    " */",
                    "export default class Col extends Component {",
                    "    static isNextCol = true;",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 列内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24",
                    "         */",
                    "        span: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30",
                    "         */",
                    "        fixedSpan: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * （不支持IE9浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24",
                    "         */",
                    "        offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * （不支持IE9浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30",
                    "         */",
                    "        fixedOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * （不支持IE9浏览器）多列垂直方向对齐方式，可覆盖Row的align属性",
                    "         */",
                    "        align: PropTypes.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),",
                    "        /**",
                    "         * 列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）",
                    "         */",
                    "        hidden: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * >=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
                    "         */",
                    "        xxs: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),",
                    "        /**",
                    "         * >=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
                    "         */",
                    "        xs: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),",
                    "        /**",
                    "         * >=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
                    "         */",
                    "        s: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),",
                    "        /**",
                    "         * >=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
                    "         */",
                    "        m: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),",
                    "        /**",
                    "         * >=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
                    "         */",
                    "        l: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),",
                    "        /**",
                    "         * >=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
                    "         */",
                    "        xl: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),",
                    "        /**",
                    "         * 指定以何种元素渲染该节点，默认为 'div'",
                    "         */",
                    "        component: PropTypes.string,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        component: 'div',",
                    "    };",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const {",
                    "            prefix, pure, span, offset, fixedSpan, fixedOffset, hidden, align,",
                    "            xxs, xs, s, m, l, xl, component: Tag, className, children, ...others",
                    "        } = this.props;",
                    "        /* eslint-enable no-unused-vars */",
                    "",
                    "        const pointClassObj = breakPoints.reduce((ret, point) => {",
                    "            let pointProps = {};",
                    "            if (typeof this.props[point] === 'object') {",
                    "                pointProps = this.props[point];",
                    "            } else {",
                    "                pointProps.span = this.props[point];",
                    "            }",
                    "",
                    "            ret[`${prefix}col-${point}-${pointProps.span}`] = !!pointProps.span;",
                    "            ret[`${prefix}col-${point}-offset-${pointProps.offset}`] = !!pointProps.offset;",
                    "",
                    "            return ret;",
                    "        }, {});",
                    "",
                    "        let hiddenClassObj;",
                    "        if (hidden === true) {",
                    "            hiddenClassObj = { [`${prefix}col-hidden`]: true };",
                    "        } else if (typeof hidden === 'string') {",
                    "            hiddenClassObj = { [`${prefix}col-${hidden}-hidden`]: !!hidden };",
                    "        } else if (Array.isArray(hidden)) {",
                    "            hiddenClassObj = hidden.reduce((ret, point) => {",
                    "                ret[`${prefix}col-${point}-hidden`] = !!point;",
                    "                return ret;",
                    "            }, {});",
                    "        }",
                    "",
                    "        const classes = cx({",
                    "            [`${prefix}col`]: true,",
                    "            [`${prefix}col-${span}`]: !!span,",
                    "            [`${prefix}col-fixed-${fixedSpan}`]: !!fixedSpan,",
                    "            [`${prefix}col-offset-${offset}`]: !!offset,",
                    "            [`${prefix}col-offset-fixed-${fixedOffset}`]: !!fixedOffset,",
                    "            [`${prefix}col-${align}`]: !!align,",
                    "            ...pointClassObj,",
                    "            ...hiddenClassObj,",
                    "            [className]: className",
                    "        });",
                    "",
                    "        return (",
                    "            <Tag",
                    "                role=\"gridcell\"",
                    "                className={classes}",
                    "                {...others}",
                    "            >",
                    "                {children}",
                    "            </Tag>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Row from './row';",
                    "import Col from './col';",
                    "",
                    "const Grid = {",
                    "    Row: ConfigProvider.config(Row, {",
                    "        transform: (props, deprecated) => {",
                    "            if ('type' in props) {",
                    "                deprecated('type', 'fixed | wrap | gutter', 'Row');",
                    "",
                    "                const { type, ...others } = props;",
                    "                const types = Array.isArray(type) ? type : [type];",
                    "                let fixed;",
                    "                if (types.indexOf('fixed') > -1) {",
                    "                    fixed = true;",
                    "                }",
                    "                let wrap;",
                    "                if (types.indexOf('wrap') > -1) {",
                    "                    wrap = true;",
                    "                }",
                    "                props = { fixed, wrap, ...others };",
                    "            }",
                    "",
                    "            return props;",
                    "        }",
                    "    }),",
                    "    Col: ConfigProvider.config(Col)",
                    "};",
                    "",
                    "export default Grid;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "/* Grid System */",
                    "/* 根据 Alibaba Base DPL(BASE DPL)设计规范实现 */",
                    "/* 栅格系统, 根据不同的屏幕尺寸情况，调整这些区块的排版，将页面划分为若干等宽的列，然后推荐通过等宽列来创建响应式的页面区块。另外，屏幕宽度较大的时候，区块倾向于水平分布，而屏幕宽度较小的时候，区块倾向于竖直堆叠。 */",
                    "/* ------------------------------- */",
                    "",
                    ".#{$css-prefix}row {",
                    "    @include box-sizing;",
                    "    display: flex;",
                    "",
                    "    &.#{$css-prefix}row-wrap {",
                    "        flex-wrap: wrap;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}row-fixed {",
                    "        @include breakpoint-row-width();",
                    "    }",
                    "",
                    "    &.#{$css-prefix}row-fixed-xxs {",
                    "        width: $grid-xxs;",
                    "    }",
                    "    &.#{$css-prefix}row-fixed-xs {",
                    "        width: $grid-xs;",
                    "    }",
                    "    &.#{$css-prefix}row-fixed-s {",
                    "        width: $grid-s;",
                    "    }",
                    "    &.#{$css-prefix}row-fixed-m {",
                    "        width: $grid-m;",
                    "    }",
                    "    &.#{$css-prefix}row-fixed-l {",
                    "        width: $grid-l;",
                    "    }",
                    "    &.#{$css-prefix}row-fixed-xl {",
                    "        width: $grid-xl;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}row-justify-start {",
                    "        justify-content: flex-start;",
                    "    }",
                    "    &.#{$css-prefix}row-justify-end {",
                    "        justify-content: flex-end;",
                    "    }",
                    "    &.#{$css-prefix}row-justify-center {",
                    "        justify-content: center;",
                    "    }",
                    "    &.#{$css-prefix}row-justify-space-between {",
                    "        justify-content: space-between;",
                    "    }",
                    "    &.#{$css-prefix}row-justify-space-around {",
                    "        justify-content: space-around;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}row-align-top {",
                    "        align-items: flex-start;",
                    "    }",
                    "    &.#{$css-prefix}row-align-bottom {",
                    "        align-items: flex-end;",
                    "    }",
                    "    &.#{$css-prefix}row-align-center {",
                    "        align-items: center;",
                    "    }",
                    "    &.#{$css-prefix}row-align-baseline {",
                    "        align-items: baseline;",
                    "    }",
                    "    &.#{$css-prefix}row-align-stretch {",
                    "        align-items: stretch;",
                    "    }",
                    "}",
                    "",
                    ".#{$css-prefix}col {",
                    "    flex: 1;",
                    "",
                    "    &.#{$css-prefix}col-top {",
                    "        align-self: flex-start;",
                    "    }",
                    "    &.#{$css-prefix}col-bottom {",
                    "        align-self: flex-end;",
                    "    }",
                    "    &.#{$css-prefix}col-center {",
                    "        align-self: center;",
                    "    }",
                    "}",
                    "",
                    "/* IE9 pack */",
                    "@media all and (min-width: 0\\0) and (min-resolution: .001dpcm) {",
                    "    .#{$css-prefix}row {",
                    "        display: table;",
                    "        width: 100%;",
                    "    }",
                    "",
                    "    .#{$css-prefix}col {",
                    "        display: table-cell;",
                    "        vertical-align: top;",
                    "    }",
                    "}",
                    "",
                    "@include make-columns();",
                    "@include make-5columns();",
                    "@include make-columns-fixed();",
                    "",
                    "@include make-offset();",
                    "@include make-offset-fixed();",
                    "",
                    "@include visible-hidden-all-points();",
                    "@include visible-hidden-all-points-row();"
                ]
            },
            "row.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, Children, cloneElement } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "",
                    "/**",
                    " * Grid.Row",
                    " * @order 1",
                    " */",
                    "export default class Row extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 行内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 列间隔",
                    "         */",
                    "        gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 列在行中宽度溢出后是否换行",
                    "         */",
                    "        wrap: PropTypes.bool,",
                    "        /**",
                    "         * 行在某一断点下宽度是否保持不变（默认行宽度随视口变化而变化）",
                    "         */",
                    "        fixed: PropTypes.bool,",
                    "        /**",
                    "         * 固定行的宽度为某一断点的宽度，不受视口影响而变动",
                    "         * @enumdesc 320px, 480px, 720px, 990px, 1200px, 1500px",
                    "         */",
                    "        fixedWidth: PropTypes.oneOf(['xxs', 'xs', 's', 'm', 'l', 'xl']),",
                    "        /**",
                    "         * （不支持IE9浏览器）多列垂直方向对齐方式",
                    "         * @enumdesc 顶部对齐, 居中对齐, 底部对齐, 按第一行文字基线对齐, 未设置高度或设为 auto，将占满整个容器的高度",
                    "         * @default 'stretch'",
                    "         */",
                    "        align: PropTypes.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),",
                    "        /**",
                    "         * （不支持IE9浏览器）行内具有多余空间时的布局方式",
                    "         * @enumdesc 左对齐, 居中对齐, 右对齐, 两端对齐，列之间间距相等, 每列具有相同的左右间距，行两端间距是列间距的二分之一",
                    "         * @default 'start'",
                    "         */",
                    "        justify: PropTypes.oneOf(['start', 'center', 'end', 'space-between', 'space-around']),",
                    "        /**",
                    "         * 行在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）",
                    "         */",
                    "        hidden: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * 指定以何种元素渲染该节点",
                    "         * - 默认为 'div'",
                    "         */",
                    "        component: PropTypes.string,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        fixed: false,",
                    "        gutter: 0,",
                    "        wrap: false,",
                    "        component: 'div',",
                    "    };",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const {",
                    "            prefix, pure, wrap, fixed, gutter, fixedWidth, align, justify,",
                    "            hidden, className, component: Tag, children, ...others",
                    "        } = this.props;",
                    "        /* eslint-enable no-unused-vars */",
                    "",
                    "        let hiddenClassObj;",
                    "        if (hidden === true) {",
                    "            hiddenClassObj = { [`${prefix}row-hidden`]: true };",
                    "        } else if (typeof hidden === 'string') {",
                    "            hiddenClassObj = { [`${prefix}row-${hidden}-hidden`]: !!hidden };",
                    "        } else if (Array.isArray(hidden)) {",
                    "            hiddenClassObj = hidden.reduce((ret, point) => {",
                    "                ret[`${prefix}row-${point}-hidden`] = !!point;",
                    "                return ret;",
                    "            }, {});",
                    "        }",
                    "",
                    "        const newClassName = cx({",
                    "            [`${prefix}row`]: true,",
                    "            [`${prefix}row-wrap`]: wrap,",
                    "            [`${prefix}row-fixed`]: fixed,",
                    "            [`${prefix}row-fixed-${fixedWidth}`]: !!fixedWidth,",
                    "            [`${prefix}row-justify-${justify}`]: !!justify,",
                    "            [`${prefix}row-align-${align}`]: !!align,",
                    "            ...hiddenClassObj,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        let newChildren = children;",
                    "        const gutterNumber = parseInt(gutter, 10);",
                    "        if (gutterNumber !== 0) {",
                    "            const halfGutterString = `${gutterNumber / 2}px`;",
                    "            others.style = {",
                    "                marginLeft: `-${halfGutterString}`,",
                    "                marginRight: `-${halfGutterString}`,",
                    "                ...(others.style || {})",
                    "            };",
                    "            newChildren = Children.map(children, child => {",
                    "                if (",
                    "                    child &&",
                    "                    child.type &&",
                    "                    typeof child.type === 'function' &&",
                    "                    child.type.isNextCol",
                    "                ) {",
                    "                    const newChild = cloneElement(child, {",
                    "                        style: {",
                    "                            paddingLeft: halfGutterString,",
                    "                            paddingRight: halfGutterString,",
                    "                            ...(child.style || {})",
                    "                        }",
                    "                    });",
                    "                    return newChild;",
                    "                }",
                    "",
                    "                return child;",
                    "            });",
                    "        }",
                    "",
                    "        return (",
                    "            <Tag",
                    "                role=\"row\"",
                    "                className={newClassName}",
                    "                {...others}",
                    "            >",
                    "                {newChildren}",
                    "            </Tag>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// Grid system",
                        "// --------------------------------------------------",
                        "",
                        "@mixin breakpoint($point, $type: \"min\") {",
                        "    @each $breakpoint in $breakpoints {",
                        "        $name: nth($breakpoint, 1);",
                        "        $minQuery: nth($breakpoint, 2);",
                        "        $maxQuery: nth($breakpoint, 3);",
                        "",
                        "        @if ($name == $point) {",
                        "            @if ($type == \"min\") {",
                        "                @media #{$minQuery} { @content; }",
                        "            } @else if ($type == \"max\") {",
                        "                @media #{$maxQuery} { @content; }",
                        "            } @else if ($type == \"min-max\") {",
                        "                $query: '';",
                        "                @if ($name == 'xl') {",
                        "                    $query: $minQuery;",
                        "                } @else {",
                        "                    $query: $minQuery + \"and\" + $maxQuery;",
                        "                }",
                        "                @media #{$query} { @content; }",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 固定宽度布局的行在不同断点下的宽度值",
                        "@mixin breakpoint-row-width() {",
                        "    @include breakpoint(xxs) { width: $grid-xxs; }",
                        "    @include breakpoint(xs) { width: $grid-xs; }",
                        "    @include breakpoint(s) { width: $grid-s; }",
                        "    @include breakpoint(m) { width: $grid-m; }",
                        "    @include breakpoint(l) { width: $grid-l; }",
                        "    @include breakpoint(xl) { width: $grid-xl; }",
                        "}",
                        "",
                        "// 响应式列宽",
                        "@mixin make-columns() {",
                        "    @for $i from 1 through $grid-columns {",
                        "        .#{$css-prefix}col-#{$i} {",
                        "            $width: percentage($i / $grid-columns);",
                        "            flex: 0 0 $width;",
                        "            width: $width;",
                        "            max-width: $width;",
                        "        }",
                        "    }",
                        "",
                        "    @each $breakpoint in $breakpoints {",
                        "        $name: #{nth($breakpoint, 1)};",
                        "        @include breakpoint($name) {",
                        "            @for $j from 1 through $grid-columns {",
                        "                .#{$css-prefix}col-#{$name}-#{$j} {",
                        "                    $width: percentage($j / $grid-columns);",
                        "                    flex: 0 0 $width;",
                        "                    width: $width;",
                        "                    max-width: $width;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 响应式列宽5分比",
                        "@mixin make-5columns() {",
                        "    @for $i from 1 through $grid-columns-5p {",
                        "        .#{$css-prefix}col-#{$i}p#{$grid-columns-5p} {",
                        "            $width: percentage($i / $grid-columns-5p);",
                        "            flex: 0 0 $width;",
                        "            width: $width;",
                        "            max-width: $width;",
                        "        }",
                        "    }",
                        "    @each $breakpoint in $breakpoints {",
                        "        $name: #{nth($breakpoint, 1)};",
                        "        @include breakpoint($name) {",
                        "            @for $j from 1 through $grid-columns-5p {",
                        "                .#{$css-prefix}col-#{$name}-#{$j}p#{$grid-columns-5p} {",
                        "                    $width: percentage($j / $grid-columns-5p);",
                        "                    flex: 0 0 $width;",
                        "                    width: $width;",
                        "                    max-width: $width;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 固定列宽",
                        "@mixin make-columns-fixed() {",
                        "    @for $i from 1 through $grid-columns-fixed {",
                        "        .#{$css-prefix}col-fixed-#{$i} {",
                        "            $width: $i * $grid-col-fixed-width;",
                        "            flex: 0 0 $width;",
                        "            width: $width;",
                        "            max-width: $width;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 响应列的水平位置偏移",
                        "@mixin make-offset() {",
                        "    @for $i from 1 through $grid-columns {",
                        "        .#{$css-prefix}col-offset-#{$i} {",
                        "            margin-left: percentage($i / $grid-columns);",
                        "        }",
                        "    }",
                        "    @each $breakpoint in $breakpoints {",
                        "        $name: #{nth($breakpoint, 1)};",
                        "        @include breakpoint($name) {",
                        "            @for $j from 1 through $grid-columns {",
                        "                .#{$css-prefix}col-#{$name}-offset-#{$j} {",
                        "                    margin-left: percentage($j / $grid-columns);",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 固定列的水平位置偏移",
                        "@mixin make-offset-fixed() {",
                        "    @for $i from 1 through $grid-columns-fixed {",
                        "        .#{$css-prefix}col-offset-fixed-#{$i} {",
                        "            margin-left: $i * $grid-col-fixed-width;",
                        "        }",
                        "    }",
                        "    @each $breakpoint in $breakpoints {",
                        "        $name: #{nth($breakpoint, 1)};",
                        "        @for $j from 1 through $grid-columns-fixed {",
                        "            .#{$css-prefix}col-offset-fixed-#{$name}-#{$j} {",
                        "                margin-left: $j * $grid-col-fixed-width;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 显示与隐藏",
                        "@mixin visible-hidden-all-points() {",
                        "    .#{$css-prefix}col.#{$css-prefix}col-hidden {",
                        "        display: none;",
                        "    }",
                        "",
                        "    @each $breakpoint in $breakpoints {",
                        "        $name: #{nth($breakpoint, 1)};",
                        "        @include breakpoint($name, 'min-max') {",
                        "            .#{$css-prefix}col.#{$css-prefix}col-#{$name}-hidden {",
                        "                display: none;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin visible-hidden-all-points-row() {",
                        "    .#{$css-prefix}row.#{$css-prefix}row-hidden {",
                        "        display: none;",
                        "    }",
                        "",
                        "    @each $breakpoint in $breakpoints {",
                        "        $name: #{nth($breakpoint, 1)};",
                        "        @include breakpoint($name, 'min-max') {",
                        "            .#{$css-prefix}row.#{$css-prefix}row-#{$name}-hidden {",
                        "                display: none;",
                        "            }",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// Grid System 变量",
                        "// -------------------------------",
                        "",
                        "// Media queries 断点枚举",
                        "// Two Extra small screen / phone",
                        "$grid-xxs: 320px !default;",
                        "// Extra small screen / phone",
                        "$grid-xs: 480px !default;",
                        "// Small screen / tablet",
                        "$grid-s: 720px !default;",
                        "// Medium screen / desktop",
                        "$grid-m: 990px !default;",
                        "// Large screen / desktop",
                        "$grid-l: 1200px !default;",
                        "// Extra Large screen / desktop",
                        "$grid-xl: 1500px !default;",
                        "",
                        "$grid-columns: 24 !default;",
                        "$grid-columns-5p: 5 !default;",
                        "$grid-columns-fixed: 30 !default;",
                        "$grid-col-fixed-width: $s-5 !default;",
                        "",
                        "// 断点选择器宽度计算和枚举",
                        "$breakpoints: ((",
                        "    \"xxs\",",
                        "    \"(min-width: \" + $grid-xxs + \")\",",
                        "    \"(max-width: \" + ($grid-xs - 1) + \")\"",
                        "), (",
                        "    \"xs\",",
                        "    \"(min-width: \" + $grid-xs + \")\",",
                        "    \"(max-width: \" + ($grid-s - 1) + \")\"",
                        "), (",
                        "    \"s\",",
                        "    \"(min-width: \" + $grid-s + \")\",",
                        "    \"(max-width: \" + ($grid-m - 1) + \")\"",
                        "), (",
                        "    \"m\",",
                        "    \"(min-width: \" + $grid-m + \")\",",
                        "    \"(max-width: \" + ($grid-l - 1) + \")\"",
                        "), (",
                        "    \"l\",",
                        "    \"(min-width: \" + $grid-l + \")\",",
                        "    \"(max-width: \" + ($grid-xl - 1) + \")\"",
                        "), (",
                        "    \"xl\",",
                        "    \"(min-width: \" + $grid-xl + \")\",",
                        "    \"\"",
                        "));"
                    ]
                }
            }
        },
        "icon": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "/**",
                    " * Icon",
                    " */",
                    "class Icon extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 指定显示哪种图标",
                    "         */",
                    "        type: PropTypes.string,",
                    "        /**",
                    "         * 指定图标大小",
                    "         */",
                    "        size: PropTypes.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl']),",
                    "        className: PropTypes.string,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        size: 'medium'",
                    "    };",
                    "",
                    "    static _typeMark = 'icon';",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars*/",
                    "        const { prefix, type, size, className, rtl, ...other } = this.props;",
                    "",
                    "        const classes = cx({",
                    "            [`${prefix}icon`]: true,",
                    "            [`${prefix}icon-${type}`]: !!type,",
                    "            [`${prefix}${size}`]: !!size,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        if (rtl && ['arrow-left', 'arrow-right', 'arrow-double-left', 'arrow-double-right', 'switch', 'sorting', 'descending', 'ascending'].indexOf(type) !== -1) {",
                    "            other.dir = 'rtl';",
                    "        }",
                    "",
                    "        return <i {...other} className={classes} />;",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Icon);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "@font-face {",
                    "    font-family: $icon-font-family;",
                    "    src: url('#{$icon-font-path}.eot');",
                    "    src:",
                    "        url('#{$icon-font-path}.eot?#iefix') format('embedded-opentype'),",
                    "        url('#{$icon-font-path}.woff') format('woff'),",
                    "        url('#{$icon-font-path}.ttf') format('truetype'),",
                    "        url('#{$icon-font-path}.svg#NextIcon') format('svg');",
                    "}",
                    "",
                    ".#{$icon-prefix} {",
                    "    display: inline-block;",
                    "    font-family: $icon-font-family;",
                    "    font-style: normal;",
                    "    font-weight: normal;",
                    "    text-transform: none;",
                    "    -webkit-font-smoothing: antialiased;",
                    "    -moz-osx-font-smoothing: grayscale;",
                    "",
                    "    &:before {",
                    "        display: inline-block;",
                    "        vertical-align: middle;",
                    "        text-align: center;",
                    "    }",
                    "",
                    "    &-smile:before { content: $icon-content-smile; }",
                    "    &-cry:before { content: $icon-content-cry; }",
                    "    &-success:before { content: $icon-content-success; }",
                    "    &-warning:before { content: $icon-content-warning; }",
                    "    &-prompt:before { content: $icon-content-prompt; }",
                    "    &-error:before { content: $icon-content-error; }",
                    "    &-help:before { content: $icon-content-help; }",
                    "    &-clock:before { content: $icon-content-clock; }",
                    "    &-success-filling:before { content: $icon-content-success-filling; }",
                    "    &-delete-filling:before { content: $icon-content-delete-filling; }",
                    "    &-favorites-filling:before { content: $icon-content-favorites-filling; }",
                    "    &-add:before { content: $icon-content-add; }",
                    "    &-minus:before { content: $icon-content-minus; }",
                    "    &-arrow-up:before { content: $icon-content-arrow-up; }",
                    "    &-arrow-down:before { content: $icon-content-arrow-down; }",
                    "    &-arrow-left:before { content: $icon-content-arrow-left; }",
                    "    &-arrow-right:before { content: $icon-content-arrow-right; }",
                    "    &-arrow-double-left:before { content: $icon-content-arrow-double-left; }",
                    "    &-arrow-double-right:before { content: $icon-content-arrow-double-right; }",
                    "    &-switch:before { content: $icon-content-switch; }",
                    "    &-sorting:before { content: $icon-content-sorting; }",
                    "    &-descending:before { content: $icon-content-descending; }",
                    "    &-ascending:before { content: $icon-content-ascending; }",
                    "    &-select:before { content: $icon-content-select; }",
                    "    &-semi-select:before { content: $icon-content-semi-select; }",
                    "    &-search:before { content: $icon-content-search; }",
                    "    &-close:before { content: $icon-content-close; }",
                    "    &-ellipsis:before { content: $icon-content-ellipsis; }",
                    "    &-picture:before { content: $icon-content-picture; }",
                    "    &-calendar:before { content: $icon-content-calendar; }",
                    "    &-ashbin:before { content: $icon-content-ashbin; }",
                    "    &-upload:before { content: $icon-content-upload; }",
                    "    &-download:before { content: $icon-content-download; }",
                    "    &-set:before { content: $icon-content-set; }",
                    "    &-edit:before { content: $icon-content-edit; }",
                    "    &-refresh:before { content: $icon-content-refresh; }",
                    "    &-filter:before { content: $icon-content-filter; }",
                    "    &-attachment:before { content: $icon-content-attachment; }",
                    "    &-account:before { content: $icon-content-account; }",
                    "    &-email:before { content: $icon-content-email; }",
                    "    &-atm:before { content: $icon-content-atm; }",
                    "    &-loading:before {",
                    "        content: $icon-content-loading;",
                    "        animation: loadingCircle 1s infinite linear;",
                    "    }",
                    "}",
                    "",
                    "@keyframes loadingCircle {",
                    "    0% {",
                    "        transform-origin: 50% 50%;",
                    "        transform: rotate(0deg);",
                    "    }",
                    "",
                    "    100% {",
                    "        transform-origin: 50% 50%;",
                    "        transform: rotate(360deg);",
                    "    }",
                    "}",
                    "",
                    ".#{$icon-prefix}.#{$css-prefix} {",
                    "    &xxs {",
                    "        @include icon-size($icon-xxs);",
                    "    }",
                    "",
                    "    &xs {",
                    "        @include icon-size($icon-xs);",
                    "    }",
                    "",
                    "    &small {",
                    "        @include icon-size($icon-s);",
                    "    }",
                    "",
                    "    &medium {",
                    "        @include icon-size($icon-m);",
                    "    }",
                    "",
                    "    &large {",
                    "        @include icon-size($icon-l);",
                    "    }",
                    "",
                    "    &xl {",
                    "        @include icon-size($icon-xl);",
                    "    }",
                    "",
                    "    &xxl {",
                    "        @include icon-size($icon-xxl);",
                    "    }",
                    "",
                    "    &xxxl {",
                    "        @include icon-size($icon-xxxl);",
                    "    }",
                    "}"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    ".#{$icon-prefix}[dir=\"rtl\"] {",
                    "    &::before {",
                    "        transform: rotateY(180deg);",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            }
        },
        "input": {
            "base.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import {func} from '../util';",
                    "import zhCN from '../locale/zh-cn';",
                    "",
                    "class Base extends React.Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 当前值",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 初始化值",
                    "         */",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 发生改变的时候触发的回调",
                    "         * @param {String} value 数据",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 键盘按下的时候触发的回调",
                    "         * @param {Event} e DOM事件对象",
                    "         * @param {Object} opts 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理",
                    "         */",
                    "        onKeyDown: PropTypes.func,",
                    "        /**",
                    "         * 禁用状态",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 最大长度",
                    "         */",
                    "        maxLength: PropTypes.number,",
                    "        /**",
                    "         * 是否展现最大长度样式",
                    "         */",
                    "        hasLimitHint: PropTypes.bool,",
                    "        /**",
                    "         * 当设置了maxLength时，是否截断超出字符串",
                    "         */",
                    "        cutString: PropTypes.bool,",
                    "        /**",
                    "         * 只读",
                    "         */",
                    "        readOnly: PropTypes.bool,",
                    "        /**",
                    "         * onChange返回会自动去除头尾空字符",
                    "         */",
                    "        trim: PropTypes.bool,",
                    "        /**",
                    "         * 输入提示",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 获取焦点时候触发的回调",
                    "         */",
                    "        onFocus: PropTypes.func,",
                    "        /**",
                    "         * 失去焦点时候触发的回调",
                    "         */",
                    "        onBlur: PropTypes.func,",
                    "        /**",
                    "         * 自定义字符串计算长度方式",
                    "         * @param {String} value 数据",
                    "         * @returns {Number} 自定义长度",
                    "         */",
                    "        getValueLength: PropTypes.func,",
                    "        inputStyle: PropTypes.object,",
                    "        /**",
                    "         * 自定义class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 原生type",
                    "         */",
                    "        htmlType: PropTypes.string,",
                    "        /**",
                    "         * name",
                    "         */",
                    "        name: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        state: PropTypes.oneOf(['error', 'loading', 'success']),",
                    "        locale: PropTypes.object,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        disabled: false,",
                    "        prefix: 'next-',",
                    "        maxLength: null,",
                    "        hasLimitHint: false,",
                    "        cutString: true,",
                    "        readOnly: false,",
                    "        trim: false,",
                    "        onFocus: func.noop,",
                    "        onBlur: func.noop,",
                    "        onChange: func.noop,",
                    "        onKeyDown: func.noop,",
                    "        getValueLength: func.noop,",
                    "        locale: zhCN.Input,",
                    "    };",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            this.setState({",
                    "                value: typeof nextProps.value === 'undefined' ? '' : nextProps.value",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    ieHack(value) {",
                    "        return value;",
                    "    }",
                    "",
                    "    onChange(e) {",
                    "        let value = e.target.value;",
                    "",
                    "        if (this.props.trim) {",
                    "            value = value.trim();",
                    "        }",
                    "",
                    "        value = this.ieHack(value);",
                    "",
                    "        // not controlled",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "",
                    "        // Number('') = 0",
                    "        if (value && this.props.htmlType === 'number') {",
                    "            value = Number(value);",
                    "        }",
                    "",
                    "        this.props.onChange(value, e);",
                    "    }",
                    "",
                    "    onKeyDown(e) {",
                    "        const value = e.target.value;",
                    "        const { maxLength } = this.props;",
                    "        const len = maxLength > 0 && value ? this.getValueLength(value) : 0;",
                    "        const opts = {};",
                    "",
                    "        // has enable trim and has input whitespace",
                    "        if (this.props.trim && e.keyCode === 32) {",
                    "            opts.beTrimed = true;",
                    "        }",
                    "",
                    "        // has defined maxLength and has over max length and has not input backspace and delete",
                    "        if (maxLength > 0 && (len > maxLength + 1 ||",
                    "                ((len === maxLength || len === maxLength + 1) && e.keyCode !== 8 && e.keyCode !== 46)",
                    "        )) {",
                    "            opts.overMaxLength = true;",
                    "        }",
                    "",
                    "        this.props.onKeyDown(e, opts);",
                    "    }",
                    "",
                    "    onFocus(e) {",
                    "        this.setState({",
                    "            focus: true",
                    "        });",
                    "        this.props.onFocus(e);",
                    "    }",
                    "",
                    "    onBlur(e) {",
                    "        this.setState({",
                    "            focus: false",
                    "        });",
                    "        this.props.onBlur(e);",
                    "    }",
                    "",
                    "    renderLength() {",
                    "        const { maxLength, hasLimitHint, prefix, rtl } = this.props;",
                    "        const len = maxLength > 0 && this.state.value ? this.getValueLength(this.state.value) : 0;",
                    "",
                    "        const classesLenWrap = classNames({",
                    "            [`${prefix}input-len`]: true,",
                    "            [`${prefix}error`]: len > maxLength",
                    "        });",
                    "",
                    "        const content = rtl ? `${maxLength}/${len}` : `${len}/${maxLength}`;",
                    "",
                    "        return maxLength && hasLimitHint ? <span className={classesLenWrap}>{content}</span> : null;",
                    "    }",
                    "",
                    "    renderControl() {",
                    "        const lenWrap = this.renderLength();",
                    "",
                    "        return lenWrap ? <span className={`${this.props.prefix}input-control`}>",
                    "            {lenWrap}",
                    "        </span> : null;",
                    "    }",
                    "",
                    "    getClass() {",
                    "        const { disabled, state, prefix } = this.props;",
                    "",
                    "        return classNames({",
                    "            [`${prefix}input`]: true,",
                    "            [`${prefix}disabled`]: !!disabled,",
                    "            [`${prefix}error`]: state === 'error',",
                    "            [`${prefix}focus`]: this.state.focus,",
                    "        });",
                    "    }",
                    "",
                    "    getProps() {",
                    "        const { placeholder, inputStyle, disabled, readOnly, cutString, maxLength } = this.props;",
                    "        const props = {",
                    "            style: inputStyle,",
                    "            placeholder,",
                    "            disabled,",
                    "            readOnly,",
                    "            maxLength: cutString ? maxLength : undefined,",
                    "            value: this.state.value,",
                    "            onChange: this.onChange.bind(this),",
                    "            onBlur: this.onBlur.bind(this),",
                    "            onFocus: this.onFocus.bind(this),",
                    "        };",
                    "",
                    "        // fix accessibility：auto process status of aria disabled",
                    "        if (disabled) {",
                    "            props['aria-disabled'] = disabled;",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "",
                    "    saveRef = (input) => {",
                    "        this.inputRef = input;",
                    "    };",
                    "",
                    "    getInputNode() {",
                    "        return this.inputRef;",
                    "    }",
                    "",
                    "    focus(start, end) {",
                    "        this.inputRef.focus();",
                    "        if (typeof start !== 'undefined') {",
                    "            this.inputRef.selectionStart = start;",
                    "        }",
                    "        if (typeof end !== 'undefined') {",
                    "            this.inputRef.selectionEnd = end;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "export default Base;"
                ]
            },
            "group.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "/**",
                    " * Input.Group",
                    " */",
                    "class Group extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        className: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 输入框前附加内容",
                    "         */",
                    "        addonBefore: PropTypes.node,",
                    "        /**",
                    "         * 输入框前附加内容css",
                    "         */",
                    "        addonBeforeClassName: PropTypes.string,",
                    "        /**",
                    "         * 输入框后附加内容",
                    "         */",
                    "        addonAfter: PropTypes.node,",
                    "        /**",
                    "         * 输入框后额外css",
                    "         */",
                    "        addonAfterClassName: PropTypes.string,",
                    "        /**",
                    "         * rtl",
                    "         */",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "    };",
                    "",
                    "    render() {",
                    "        const {className, style, children, prefix, addonBefore, addonAfter, addonBeforeClassName, addonAfterClassName, rtl, ...others} = this.props;",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}input-group`]: true,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        const addonCls = `${prefix}input-group-addon`;",
                    "        const beforeCls = classNames(addonCls, {",
                    "            [`${prefix}before`]: true,",
                    "            [addonBeforeClassName]: addonBeforeClassName,",
                    "        });",
                    "        const afterCls = classNames(addonCls, {",
                    "            [`${prefix}after`]: true,",
                    "            [addonAfterClassName]: addonAfterClassName,",
                    "        });",
                    "",
                    "        const before = addonBefore ? (",
                    "            <span className={beforeCls}>",
                    "                {addonBefore}",
                    "            </span>",
                    "        ) : null;",
                    "",
                    "        const after = addonAfter ? (",
                    "            <span className={afterCls}>",
                    "                {addonAfter}",
                    "            </span>",
                    "        ) : null;",
                    "",
                    "        return (",
                    "            <span {...others} dir={rtl ? 'rtl' : undefined} className={cls} style={style}>",
                    "                {before}",
                    "                {children}",
                    "                {after}",
                    "            </span>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Group);"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Input from './input';",
                    "import TextArea from './textarea';",
                    "import Group from './group';",
                    "",
                    "Input.TextArea = ConfigProvider.config(TextArea, {exportNames: ['getInputNode', 'focus']});",
                    "Input.Group = Group;",
                    "",
                    "// 用来自动生成文档的工具底层依赖的 react-docgen，无法解析生成 HOC 的方法中存在第二个参数的情况",
                    "// 所以不能在 input.jsx／textarea.jsx 中生成 HOC",
                    "export default ConfigProvider.config(Input, {",
                    "    exportNames: ['getInputNode', 'focus'],",
                    "});"
                ]
            },
            "input.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Icon from '../icon';",
                    "import {obj, func} from '../util';",
                    "import Base from './base';",
                    "import Group from './group';",
                    "",
                    "// preventDefault here can stop onBlur to keep focus state",
                    "function preventDefault(e) {",
                    "    e.preventDefault();",
                    "}",
                    "",
                    "/** Input */",
                    "export default class Input extends Base {",
                    "    static propTypes = {",
                    "        ...Base.propTypes,",
                    "        /**",
                    "         * label",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 是否出现clear按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 是否有边框",
                    "         */",
                    "        hasBorder: PropTypes.bool,",
                    "        /**",
                    "         * 状态",
                    "         * @enumdesc 错误, 校验中, 成功",
                    "         */",
                    "        state: PropTypes.oneOf(['error', 'loading', 'success']),",
                    "        /**",
                    "         * 尺寸",
                    "         * @enumdesc 小, 中, 大",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 按下回车的回调",
                    "         */",
                    "        onPressEnter: PropTypes.func,",
                    "",
                    "        onClear: PropTypes.func,",
                    "        /**",
                    "         * 原生type",
                    "         */",
                    "        htmlType: PropTypes.string,",
                    "        htmlSize: PropTypes.string,",
                    "        /**",
                    "         * 水印 (Icon的type类型，和hasClear占用一个地方)",
                    "         */",
                    "        hint: PropTypes.string,",
                    "        /**",
                    "         * 文字前附加内容",
                    "         */",
                    "        innerBefore: PropTypes.node,",
                    "        /**",
                    "         * 文字后附加内容",
                    "         */",
                    "        innerAfter: PropTypes.node,",
                    "        /**",
                    "         * 输入框前附加内容",
                    "         */",
                    "        addonBefore: PropTypes.node,",
                    "        /**",
                    "         * 输入框后附加内容",
                    "         */",
                    "        addonAfter: PropTypes.node,",
                    "        /**",
                    "         * 输入框前附加文字",
                    "         */",
                    "        addonTextBefore: PropTypes.node,",
                    "        /**",
                    "         * 输入框后附加文字",
                    "         */",
                    "        addonTextAfter: PropTypes.node,",
                    "        /**",
                    "         * (原生input支持)",
                    "         */",
                    "        autoComplete: PropTypes.string,",
                    "        /**",
                    "         * 自动聚焦(原生input支持)",
                    "         */",
                    "        autoFocus: PropTypes.bool,",
                    "        inputRender: PropTypes.func,",
                    "        extra: PropTypes.node,",
                    "        innerBeforeClassName: PropTypes.string,",
                    "        innerAfterClassName: PropTypes.string,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        ...Base.defaultProps,",
                    "        size: 'medium',",
                    "        autoComplete: 'off',",
                    "        hasBorder: true,",
                    "        onPressEnter: func.noop,",
                    "        inputRender: (el) => el,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        let value;",
                    "        if ('value' in props) {",
                    "            value = props.value;",
                    "        } else {",
                    "            value = props.defaultValue;",
                    "        }",
                    "",
                    "        this.state = {",
                    "            value: typeof value === 'undefined' ? '' : value,",
                    "        };",
                    "    }",
                    "",
                    "    // `Enter` was considered to be two chars in chrome , but one char in ie.",
                    "    // so we make all `Enter` to be two chars",
                    "    getValueLength(value) {",
                    "        const nv = `${value}`;",
                    "        let strLen = this.props.getValueLength(nv);",
                    "        if (typeof strLen !== 'number') {",
                    "            strLen = nv.length;",
                    "        }",
                    "",
                    "        return strLen;",
                    "    }",
                    "",
                    "    renderControl() {",
                    "        const {hasClear, readOnly, state, prefix, hint, extra, locale} = this.props;",
                    "",
                    "        const lenWrap = this.renderLength();",
                    "",
                    "        let stateWrap = null;",
                    "        if (state === 'success') {",
                    "            stateWrap = <Icon type=\"success-filling\"/>;",
                    "        } else if (state === 'loading') {",
                    "            stateWrap = <Icon type=\"loading\"/>;",
                    "        }",
                    "",
                    "        let clearWrap = null;",
                    "        const showClear = hasClear && !readOnly && !!(`${this.state.value}`);",
                    "",
                    "        if (hint || showClear) {",
                    "            let hintIcon = null;",
                    "            if (hint) {",
                    "                hintIcon = <Icon type={hint} className={`${prefix}input-hint`}/>;",
                    "            } else {",
                    "                hintIcon = (<Icon type=\"delete-filling\" role=\"button\" tabIndex=\"0\" className={`${prefix}input-hint`} aria-label={locale.clear}",
                    "                    onClick={this.onClear.bind(this)}",
                    "                    onMouseDown={preventDefault}",
                    "                    onKeyDown={this.handleKeyDownFromClear} />);",
                    "            }",
                    "",
                    "            clearWrap = (<span className={`${prefix}input-hint-wrap`}>",
                    "                {hasClear && hint ? <Icon type=\"delete-filling\" role=\"button\" tabIndex=\"0\" className={`${prefix}input-clear`} aria-label={locale.clear}",
                    "                    onClick={this.onClear.bind(this)}",
                    "                    onMouseDown={preventDefault}",
                    "                    onKeyDown={this.handleKeyDownFromClear} /> : null}",
                    "                {hintIcon}",
                    "            </span>);",
                    "        }",
                    "",
                    "        if (state === 'loading') {",
                    "            clearWrap = null;",
                    "        }",
                    "",
                    "        return clearWrap || lenWrap || stateWrap || extra ? <span className={`${prefix}input-control`}>",
                    "            {clearWrap}{lenWrap}{stateWrap}{extra}",
                    "        </span> : null;",
                    "    }",
                    "",
                    "    renderLabel() {",
                    "        const {label, prefix, id} = this.props;",
                    "        return label ? <label className={`${prefix}input-label`} htmlFor={id}>",
                    "            {label}",
                    "        </label> : null;",
                    "    }",
                    "",
                    "    renderInner(inner, cls) {",
                    "        return inner ? <span className={cls}>{inner}</span> : null;",
                    "    }",
                    "",
                    "    handleKeyDown = (e) => {",
                    "        if (e.keyCode === 13) {",
                    "            this.props.onPressEnter(e);",
                    "        }",
                    "",
                    "        this.onKeyDown(e);",
                    "    };",
                    "",
                    "    handleKeyDownFromClear = (e) => {",
                    "        if (e.keyCode === 13) {",
                    "            this.onClear(e);",
                    "        }",
                    "    };",
                    "",
                    "    onClear(e) {",
                    "        if (this.props.disabled) {",
                    "            return;",
                    "        }",
                    "",
                    "        // 非受控模式清空内部数据",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value: ''",
                    "            });",
                    "        }",
                    "        this.props.onChange('', e, 'clear');",
                    "        this.focus();",
                    "    }",
                    "",
                    "    render() {",
                    "        const {size, htmlType, htmlSize, autoComplete, autoFocus, disabled, style, innerBefore, innerAfter, innerBeforeClassName, innerAfterClassName, className, hasBorder, prefix, addonBefore, addonAfter, addonTextBefore, addonTextAfter, inputRender, rtl} = this.props;",
                    "",
                    "        const hasAddon = addonBefore || addonAfter || addonTextBefore || addonTextAfter;",
                    "        const cls = classNames(this.getClass(), {",
                    "            [`${prefix}${size}`]: true,",
                    "            [`${prefix}hidden`]: this.props.htmlType === 'hidden',",
                    "            [`${prefix}noborder`]: !hasBorder || this.props.htmlType === 'file',",
                    "            [`${prefix}input-group-auto-width`]: hasAddon,",
                    "            [className]: !!className && !hasAddon",
                    "        });",
                    "",
                    "        const innerCls = `${prefix}input-inner`;",
                    "        const innerBeforeCls = classNames({",
                    "            [innerCls]: true,",
                    "            [`${prefix}before`]: true,",
                    "            [innerBeforeClassName]: innerBeforeClassName",
                    "        });",
                    "        const innerAfterCls = classNames({",
                    "            [innerCls]: true,",
                    "            [`${prefix}after`]: true,",
                    "            [innerAfterClassName]: innerAfterClassName",
                    "        });",
                    "",
                    "        const props = this.getProps();",
                    "        // custom data attributes are assigned to the top parent node",
                    "        // data-类自定义数据属性分配到顶层node节点",
                    "        const dataProps = obj.pickAttrsWith(this.props, 'data-');",
                    "        // Custom props are transparently transmitted to the core input node by default",
                    "        // 自定义属性默认透传到核心node节点：input",
                    "        const others = obj.pickOthers(Object.assign({}, dataProps, Input.propTypes), this.props);",
                    "",
                    "        const inputEl = (<input",
                    "            {...others}",
                    "            {...props}",
                    "            height=\"100%\"",
                    "            type={htmlType}",
                    "            size={htmlSize}",
                    "            autoFocus={autoFocus}",
                    "            autoComplete={autoComplete}",
                    "            onKeyDown={this.handleKeyDown}",
                    "            ref={this.saveRef}",
                    "        />);",
                    "",
                    "        const inputWrap = (<span {...dataProps} dir={rtl ? 'rtl' : undefined} className={cls} style={hasAddon ? undefined : style}>",
                    "            {this.renderInner(innerBefore, innerBeforeCls)}",
                    "            {this.renderLabel()}",
                    "            {inputRender(inputEl)}",
                    "            {this.renderControl()}",
                    "            {this.renderInner(innerAfter, innerAfterCls)}",
                    "        </span>);",
                    "",
                    "        const groupCls = classNames({",
                    "            [`${prefix}input-group-text`]: true,",
                    "            [`${prefix}${size}`]: !!size,",
                    "            [`${prefix}disabled`]: disabled,",
                    "        });",
                    "",
                    "        const addonBeforeCls = classNames({",
                    "            [groupCls]: addonTextBefore,",
                    "        });",
                    "        const addonAfterCls = classNames({",
                    "            [groupCls]: addonTextAfter,",
                    "        });",
                    "",
                    "        if (hasAddon) {",
                    "            return (<Group",
                    "                {...dataProps}",
                    "                className={className}",
                    "                style={style}",
                    "                addonBefore={addonBefore || addonTextBefore}",
                    "                addonBeforeClassName={addonBeforeCls}",
                    "                addonAfter={addonAfter || addonTextAfter}",
                    "                addonAfterClassName={addonAfterCls}>",
                    "                {inputWrap}",
                    "            </Group>);",
                    "        }",
                    "",
                    "        return inputWrap;",
                    "    }",
                    "}"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import '../core/index-noreset.scss';",
                    "@import 'scss/mixin';",
                    "@import 'scss/variable';",
                    "",
                    "#{$input-prefix} {",
                    "    @include box-sizing;",
                    "    vertical-align: middle;",
                    "",
                    "    input {",
                    "        height: 100%;",
                    "",
                    "        &[type=\"reset\"],",
                    "        &[type=\"submit\"] {",
                    "            -webkit-appearance: button;",
                    "            cursor: pointer;",
                    "        }",
                    "",
                    "        &::-moz-focus-inner {",
                    "            border: 0;",
                    "            padding: 0;",
                    "        }",
                    "",
                    "        /* remove autoFill yellow background */",
                    "        &:-webkit-autofill {",
                    "            -webkit-box-shadow: 0 0 0 1000px $input-bg-color inset;",
                    "        }",
                    "    }",
                    "",
                    "    textarea {",
                    "        resize: none;",
                    "    }",
                    "",
                    "    input,",
                    "    textarea {",
                    "        width: 100%;",
                    "        border: none;",
                    "        outline: none;",
                    "        padding: 0;",
                    "        margin: 0;",
                    "        font-weight: normal;",
                    "        vertical-align: middle;",
                    "        background-color: transparent;",
                    "        color: $input-text-color;",
                    "        @include input-placeholder($input-placeholder-color);",
                    "",
                    "        &::-ms-clear {",
                    "            display: none;",
                    "        }",
                    "    }",
                    "",
                    "    display: inline-table;",
                    "    border-collapse: separate;",
                    "    font-size: 0;",
                    "    width: 200px;",
                    "    border-spacing: 0;",
                    "    transition: all .3s ease-out;",
                    "",
                    "    border: $input-border-width solid $input-border-color;",
                    "    background-color: $input-bg-color;",
                    "",
                    "    &#{$input-prefix}-textarea {",
                    "        textarea {",
                    "            color: $input-text-color;",
                    "            padding: $input-multiple-padding-tb $input-multiple-padding-lr;",
                    "            font-size: $input-multiple-font-size;",
                    "            border-radius: $input-multiple-corner;",
                    "        }",
                    "",
                    "        #{$input-prefix}-control {",
                    "            display: block;",
                    "            width: auto;",
                    "            border-radius: $input-multiple-corner;",
                    "        }",
                    "",
                    "        #{$input-prefix}-len {",
                    "            padding: 0 $input-l-icon-padding-right 4px;",
                    "            display: block;",
                    "            text-align: right;",
                    "            width: auto;",
                    "        }",
                    "        border-radius: $input-multiple-corner;",
                    "        font-size: 0;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}small {",
                    "        @include input-size($form-element-small-height, $input-s-padding, $form-element-small-font-size, $input-s-label-padding-left, $input-s-icon-padding-right);",
                    "        @include input-icon-size($form-element-small-icon-size);",
                    "        @include input-border-radius($form-element-small-corner);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        @include input-size($form-element-medium-height, $input-m-padding, $form-element-medium-font-size, $input-m-label-padding-left, $input-m-icon-padding-right);",
                    "        @include input-icon-size($form-element-medium-icon-size);",
                    "        @include input-border-radius($form-element-medium-corner);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        @include input-size($form-element-large-height, $input-l-padding, $form-element-large-font-size, $input-l-label-padding-left, $input-l-icon-padding-right);",
                    "        @include input-icon-size($form-element-large-icon-size);",
                    "        @include input-border-radius($form-element-large-corner);",
                    "    }",
                    "",
                    "    &-hint-wrap {",
                    "        color: $input-hint-color;",
                    "        position: relative;",
                    "",
                    "        #{$input-prefix}-clear {",
                    "            opacity: 0;",
                    "            z-index: 1;",
                    "            position: absolute;",
                    "        }",
                    "        #{$input-prefix}-hint {",
                    "            opacity: 1;",
                    "        }",
                    "    }",
                    "",
                    "    .#{$css-prefix}icon-delete-filling:hover {",
                    "        cursor: pointer;",
                    "        color: $input-hint-hover-color;",
                    "    }",
                    "",
                    "    @mixin clear-icon-visible {",
                    "        opacity: 1;",
                    "",
                    "        + #{$input-prefix}-hint {",
                    "            opacity: 0;",
                    "        }",
                    "    }",
                    "",
                    "    &:hover, &.#{$css-prefix}focus {",
                    "        border-color: $input-hover-border-color;",
                    "        background-color: $input-hover-bg-color;",
                    "",
                    "        #{$input-prefix}-clear {",
                    "            @include clear-icon-visible;",
                    "        }",
                    "    }",
                    "",
                    "    #{$input-prefix}-clear:focus {",
                    "        @include clear-icon-visible;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}focus {",
                    "        border-color: $input-focus-border-color;",
                    "        background-color: $input-focus-bg-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}error {",
                    "        border-color: $input-feedback-error-border-color;",
                    "",
                    "        &.#{$css-prefix}focus,",
                    "        &:hover {",
                    "            border-color: $input-feedback-error-border-color;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}hidden {",
                    "        display: none;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}noborder {",
                    "        border: none;",
                    "    }",
                    "",
                    "    &-control {",
                    "        #{$input-prefix}-len {",
                    "            font-size: $input-maxlen-font-size;",
                    "            line-height: $input-maxlen-font-size;",
                    "            color: $input-maxlen-color;",
                    "            display: table-cell;",
                    "            width: 1px;",
                    "            vertical-align: bottom;",
                    "",
                    "            &.#{$css-prefix}error {",
                    "                color: $input-maxlen-error-color;",
                    "            }",
                    "        }",
                    "",
                    "        > * {",
                    "            display: table-cell;",
                    "            width: 1%;",
                    "            top: 0;",
                    "        }",
                    "",
                    "        > *:not(:last-child) {",
                    "            padding-right: $s-1;",
                    "        }",
                    "",
                    "        .#{$css-prefix}icon {",
                    "            transition: all .3s ease-out;",
                    "            color: $input-hint-color;",
                    "        }",
                    "",
                    "        .#{$css-prefix}icon-success-filling {",
                    "            color: $input-feedback-success-color;",
                    "        }",
                    "        .#{$css-prefix}icon-loading {",
                    "            color: $input-feedback-loading-color;",
                    "        }",
                    "    }",
                    "",
                    "    &-label {",
                    "        color: $input-label-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}disabled {",
                    "        @include input-disabled();",
                    "",
                    "        input, textarea {",
                    "            @include input-placeholder($input-disabled-color);",
                    "        }",
                    "",
                    "        #{$input-prefix}-label {",
                    "            color: $input-disabled-color;",
                    "        }",
                    "        #{$input-prefix}-len {",
                    "            color: $input-disabled-color;",
                    "        }",
                    "        background-color: $input-disabled-bg-color;",
                    "",
                    "        input,",
                    "        textarea {",
                    "            @include input-disabled();",
                    "        }",
                    "",
                    "        #{$input-prefix}-hint-wrap {",
                    "            #{$input-prefix}-clear {",
                    "                opacity: 0;",
                    "            }",
                    "            #{$input-prefix}-hint {",
                    "                opacity: 1;",
                    "            }",
                    "",
                    "            color: $input-disabled-color;",
                    "",
                    "            .#{$css-prefix}icon-delete-filling:hover {",
                    "                cursor: not-allowed;",
                    "                color: $input-disabled-color;",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}icon {",
                    "            color: $input-disabled-color;",
                    "        }",
                    "    }",
                    "",
                    "    &-inner, &-control, &-label {",
                    "        display: table-cell;",
                    "        width: 1px;",
                    "        vertical-align: middle;",
                    "        line-height: 1;",
                    "        background-color: transparent;",
                    "        white-space: nowrap;",
                    "    }",
                    "",
                    "    &-group {",
                    "        @include box-sizing;",
                    "",
                    "        display: inline-table;",
                    "        border-collapse: separate;",
                    "        border-spacing: 0;",
                    "        line-height: 0;",
                    "        width: 100%;",
                    "",
                    "        &-auto-width {",
                    "            width: 100%;",
                    "            border-radius: 0 !important;",
                    "        }",
                    "",
                    "        > #{$input-prefix}:first-child {",
                    "            &.#{$css-prefix}small {",
                    "                border-top-left-radius: $form-element-small-corner !important;",
                    "                border-bottom-left-radius: $form-element-small-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                border-top-left-radius: $form-element-medium-corner !important;",
                    "                border-bottom-left-radius: $form-element-medium-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                border-top-left-radius: $form-element-large-corner !important;",
                    "                border-bottom-left-radius: $form-element-large-corner !important;",
                    "            }",
                    "        }",
                    "        > #{$input-prefix}:last-child {",
                    "            &.#{$css-prefix}small {",
                    "                border-top-right-radius: $form-element-small-corner !important;",
                    "                border-bottom-right-radius: $form-element-small-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                border-top-right-radius: $form-element-medium-corner !important;",
                    "                border-bottom-right-radius: $form-element-medium-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                border-top-right-radius: $form-element-large-corner !important;",
                    "                border-bottom-right-radius: $form-element-large-corner !important;",
                    "            }",
                    "        }",
                    "    }",
                    "    &-group-addon {",
                    "        width: 1px;",
                    "        display: table-cell;",
                    "        vertical-align: middle;",
                    "        white-space: nowrap;",
                    "",
                    "        /* stylelint-disable declaration-no-important */",
                    "        &:first-child {",
                    "            border-bottom-right-radius: 0 !important;",
                    "            border-top-right-radius: 0 !important;",
                    "            > * {",
                    "                border-bottom-right-radius: 0 !important;",
                    "                border-top-right-radius: 0 !important;",
                    "            }",
                    "        }",
                    "        &:last-child {",
                    "            border-bottom-left-radius: 0 !important;",
                    "            border-top-left-radius: 0 !important;",
                    "            > * {",
                    "                border-bottom-left-radius: 0 !important;",
                    "                border-top-left-radius: 0 !important;",
                    "            }",
                    "        }",
                    "    }",
                    "    &-group-text {",
                    "        color: $input-addon-text-color;",
                    "        background-color: $input-addon-bg-color;",
                    "        text-align: center;",
                    "        border: $input-border-width solid $input-border-color;",
                    "        padding: 0 $input-addon-padding;",
                    "",
                    "        &:first-child {",
                    "            border-right-width: 0;",
                    "        }",
                    "        &:last-child {",
                    "            border-left-width: 0;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}disabled {",
                    "            @include input-disabled();",
                    "        }",
                    "",
                    "        &.#{$css-prefix}small {",
                    "            @include input-addon-size($form-element-small-font-size);",
                    "            border-radius: $form-element-small-corner;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}medium {",
                    "            @include input-addon-size($form-element-medium-font-size);",
                    "            border-radius: $form-element-medium-corner;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}large {",
                    "            @include input-addon-size($form-element-large-font-size);",
                    "            border-radius: $form-element-large-corner;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "@import './rtl.scss';"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "#{$input-prefix}[dir=\"rtl\"] {",
                    "    &.#{$css-prefix}small {",
                    "        @include input-size-rtl($input-s-label-padding-left, $input-s-icon-padding-right);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        @include input-size-rtl($input-m-label-padding-left, $input-m-icon-padding-right);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        @include input-size-rtl($input-l-label-padding-left, $input-l-icon-padding-right);",
                    "    }",
                    "",
                    "    &#{$input-prefix}-textarea {",
                    "        #{$input-prefix}-len {",
                    "            text-align: left;",
                    "        }",
                    "    }",
                    "",
                    "    #{$input-prefix}-control {",
                    "        > *:not(:last-child) {",
                    "            padding-left: $s-1;",
                    "            padding-right: 0;",
                    "        }",
                    "    }",
                    "}",
                    "#{$input-prefix}-group[dir=\"rtl\"] {",
                    "    #{$input-prefix}-group-addon {",
                    "",
                    "        /* stylelint-disable declaration-no-important */",
                    "        &:first-child {",
                    "            border-bottom-left-radius: 0 !important;",
                    "            border-top-left-radius: 0 !important;",
                    "",
                    "            &.#{$css-prefix}small {",
                    "                border-bottom-right-radius: $form-element-small-corner !important;",
                    "                border-top-right-radius: $form-element-small-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                border-bottom-right-radius: $form-element-medium-corner !important;",
                    "                border-top-right-radius: $form-element-medium-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                border-bottom-right-radius: $form-element-large-corner !important;",
                    "                border-top-right-radius: $form-element-large-corner !important;",
                    "            }",
                    "        }",
                    "        &:last-child {",
                    "            border-bottom-right-radius: 0 !important;",
                    "            border-top-right-radius: 0 !important;",
                    "",
                    "            &.#{$css-prefix}small {",
                    "                border-bottom-left-radius: $form-element-small-corner !important;",
                    "                border-top-left-radius: $form-element-small-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                border-bottom-left-radius: $form-element-medium-corner !important;",
                    "                border-top-left-radius: $form-element-medium-corner !important;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                border-bottom-left-radius: $form-element-large-corner !important;",
                    "                border-top-left-radius: $form-element-large-corner !important;",
                    "            }",
                    "        }",
                    "    }",
                    "    #{$input-prefix}-group-text {",
                    "        &:first-child {",
                    "            border-right-width: $input-border-width;",
                    "            border-left: 0;",
                    "        }",
                    "        &:last-child {",
                    "            border-left-width: $input-border-width;",
                    "            border-right: 0;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "textarea.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import ReactDOM from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import {obj, env} from '../util';",
                    "import Base from './base';",
                    "",
                    "function onNextFrame(cb) {",
                    "    if (window.requestAnimationFrame) {",
                    "        return window.requestAnimationFrame(cb);",
                    "    }",
                    "    return window.setTimeout(cb, 1);",
                    "}",
                    "",
                    "function clearNextFrameAction(nextFrameId) {",
                    "    if (window.cancelAnimationFrame) {",
                    "        window.cancelAnimationFrame(nextFrameId);",
                    "    } else {",
                    "        window.clearTimeout(nextFrameId);",
                    "    }",
                    "}",
                    "",
                    "const hiddenStyle = {",
                    "    visibility: 'hidden',",
                    "    position: 'absolute',",
                    "    zIndex: '-1000',",
                    "    top: '-1000px',",
                    "    overflowY: 'hidden',",
                    "    left: 0,",
                    "    right: 0,",
                    "};",
                    "",
                    "/**",
                    " * Input.TextArea",
                    " * @order 2",
                    " */",
                    "export default class TextArea extends Base {",
                    "    static propTypes = {",
                    "        ...Base.propTypes,",
                    "        /**",
                    "         * 状态",
                    "         * @enumdesc 错误",
                    "         */",
                    "        state: PropTypes.oneOf(['error']),",
                    "        /**",
                    "         * 自动高度 true / {minRows: 2, maxRows: 4}",
                    "         */",
                    "        autoHeight: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),",
                    "        /**",
                    "         * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)",
                    "         */",
                    "        rows: PropTypes.number,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        ...Base.defaultProps,",
                    "        rows: 4,",
                    "        autoHeight: false",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        let value;",
                    "        if ('value' in props) {",
                    "            value = props.value;",
                    "        } else {",
                    "            value = props.defaultValue;",
                    "        }",
                    "",
                    "        this.state = {",
                    "            value: typeof value === 'undefined' ? '' : value,",
                    "        };",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        const autoHeight = this.props.autoHeight;",
                    "        if (autoHeight) {",
                    "            if (typeof autoHeight === 'object') {",
                    "                /* eslint-disable react/no-did-mount-set-state */",
                    "                this.setState(this._getMinMaxHeight(autoHeight, this.state.value));",
                    "            } else {",
                    "                this.setState({",
                    "                    height: this._getHeight(this.state.value),",
                    "                    overflowY: 'hidden',",
                    "                });",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        super.componentWillReceiveProps(nextProps);",
                    "",
                    "        if (this.props.autoHeight && this.props.value !== nextProps.value) {",
                    "            this._resizeTextArea(nextProps.value);",
                    "        }",
                    "    }",
                    "",
                    "    _getMinMaxHeight({minRows, maxRows}, value) {",
                    "        const node = ReactDOM.findDOMNode(this.helpRef);",
                    "        node.setAttribute('rows', minRows);",
                    "        const minHeight = node.clientHeight;",
                    "",
                    "        node.setAttribute('rows', maxRows);",
                    "        const maxHeight = node.clientHeight;",
                    "",
                    "        node.setAttribute('rows', '1');",
                    "        const height = this._getHeight(value);",
                    "",
                    "        return {",
                    "            minHeight,",
                    "            maxHeight,",
                    "            height,",
                    "            overflowY: height <= maxHeight ? 'hidden' : undefined,",
                    "        };",
                    "    }",
                    "",
                    "    _getHeight(value) {",
                    "        const node = ReactDOM.findDOMNode(this.helpRef);",
                    "        node.value = value;",
                    "",
                    "        return node.scrollHeight;",
                    "    }",
                    "",
                    "    _resizeTextArea = (value) => {",
                    "        if (this.nextFrameActionId) {",
                    "            clearNextFrameAction(this.nextFrameActionId);",
                    "        }",
                    "        this.nextFrameActionId = onNextFrame(() => {",
                    "            const height = this._getHeight(value);",
                    "            const maxHeight = this.state.maxHeight ? this.state.maxHeight : Infinity;",
                    "",
                    "            this.setState({",
                    "                height: this._getHeight(value),",
                    "                overflowY: height <= maxHeight ? 'hidden' : undefined,",
                    "            });",
                    "        });",
                    "    };",
                    "",
                    "    ieHack(value) {",
                    "        // Fix: textarea dit not support maxLength in ie9",
                    "        /* istanbul ignore if */",
                    "        if (env.ieVersion && this.props.maxLength && this.props.multiple) {",
                    "            const maxLength = parseInt(this.props.maxLength);",
                    "            const len = this.getValueLength(value, true);",
                    "            if (len > maxLength && this.props.cutString) {",
                    "                value = value.replace(/\\n/g, '\\n\\n');",
                    "                value = value.substr(0, maxLength);",
                    "                value = value.replace(/\\n\\n/g, '\\n');",
                    "            }",
                    "        }",
                    "",
                    "        this.props.autoHeight && this._resizeTextArea(value);",
                    "",
                    "        return value;",
                    "    }",
                    "",
                    "    // `Enter` was considered to be two chars in chrome , but one char in ie.",
                    "    // so we make all `Enter` to be two chars",
                    "    getValueLength(value) {",
                    "        const nv = `${value}`;",
                    "        let strLen = this.props.getValueLength(nv);",
                    "        if (typeof strLen !== 'number') {",
                    "            strLen = nv.length;",
                    "        }",
                    "        /* istanbul ignore if */",
                    "        if (env.ieVersion) {",
                    "            return strLen + nv.split('\\n').length - 1;",
                    "        }",
                    "        return strLen;",
                    "    }",
                    "",
                    "    saveTextAreaRef(textArea) {",
                    "        this.inputRef = textArea;",
                    "    }",
                    "",
                    "    saveHelpRef(ref) {",
                    "        this.helpRef = ref;",
                    "    }",
                    "",
                    "    render() {",
                    "        const {rows, style, className, autoHeight, prefix, rtl} = this.props;",
                    "",
                    "        const cls = classNames(this.getClass(), {",
                    "            [`${prefix}input-textarea`]: true,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        const props = this.getProps();",
                    "        // custom data attributes are assigned to the top parent node",
                    "        // data-类自定义数据属性分配到顶层node节点",
                    "        const dataProps = obj.pickAttrsWith(this.props, 'data-');",
                    "        // Custom props are transparently transmitted to the core input node by default",
                    "        // 自定义属性默认透传到核心node节点：input",
                    "        const others = obj.pickOthers(Object.assign({}, dataProps, TextArea.propTypes), this.props);",
                    "",
                    "        const textareStyle = {",
                    "            ...props.style,",
                    "            height: this.state.height,",
                    "            minHeight: this.state.minHeight,",
                    "            maxHeight: this.state.maxHeight,",
                    "            overflowY: this.state.overflowY,",
                    "        };",
                    "",
                    "        const wrapStyle = autoHeight ? {",
                    "            ...style,",
                    "            position: 'relative',",
                    "        } : style;",
                    "",
                    "        return (<span className={cls} style={wrapStyle} dir={rtl ? 'rtl' : undefined} {...dataProps}>",
                    "            <textarea",
                    "                {...others}",
                    "                {...props}",
                    "                data-real",
                    "                rows={rows}",
                    "                style={textareStyle}",
                    "                ref={this.saveRef.bind(this)}",
                    "                onKeyDown={this.onKeyDown.bind(this)}/>",
                    "            {autoHeight ? <textarea data-fake ref={this.saveHelpRef.bind(this)} style={{...props.style, ...hiddenStyle}}",
                    "                rows=\"1\"/> : null}",
                    "            {this.renderControl()}",
                    "        </span>);",
                    "    }",
                    "}"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// input",
                        "// --------------------------------------------------",
                        "",
                        "@mixin input-size(",
                        "    $height,",
                        "    $padding,",
                        "    $fontSize,",
                        "    $labelPadding,",
                        "    $iconPadding",
                        ") {",
                        "    height: $height;",
                        "    #{$input-prefix}-label {",
                        "        padding-left: $labelPadding;",
                        "        font-size: $fontSize;",
                        "    }",
                        "    #{$input-prefix}-inner {",
                        "        font-size: $fontSize;",
                        "    }",
                        "    #{$input-prefix}-control {",
                        "        padding-right: $iconPadding;",
                        "    }",
                        "    input {",
                        "        height: $height - $input-border-width*2;",
                        "        line-height: ($height - $input-border-width*2)\\0; // ie9 support",
                        "        padding: 0 $padding;",
                        "        font-size: $fontSize;",
                        "        &::placeholder {",
                        "            font-size: $fontSize;",
                        "        }",
                        "    }",
                        "",
                        "    // for select",
                        "    #{$input-prefix}-text-field {",
                        "        padding: 0 $padding;",
                        "        font-size: $fontSize;",
                        "        height: $height - $input-border-width*2;",
                        "        line-height: ($height - $input-border-width*2); // ie9 support",
                        "    }",
                        "}",
                        "",
                        "",
                        "@mixin input-size-rtl(",
                        "    $labelPadding,",
                        "    $iconPadding",
                        ") {",
                        "    #{$input-prefix}-label {",
                        "        padding-left: 0;",
                        "        padding-right: $labelPadding;",
                        "    }",
                        "    #{$input-prefix}-control {",
                        "        padding-right: 0;",
                        "        padding-left: $iconPadding;",
                        "    }",
                        "}",
                        "",
                        "@mixin input-border-radius($size) {",
                        "    border-radius: $size;",
                        "    input {",
                        "        border-radius: $size;",
                        "    }",
                        "    #{$input-prefix}-control {",
                        "        border-radius: 0 $size $size 0;",
                        "    }",
                        "}",
                        "",
                        "@mixin input-icon-size($size) {",
                        "    .#{$css-prefix}icon {",
                        "        @include icon-size($size);",
                        "    }",
                        "}",
                        "",
                        "@mixin input-addon-size(",
                        "    $fontSize",
                        ") {",
                        "    font-size: $fontSize;",
                        "}",
                        "",
                        "// Placeholder text",
                        "@mixin input-placeholder($color) {",
                        "    // Firefox",
                        "    &::-moz-placeholder {",
                        "        color: $color;",
                        "        opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526",
                        "    }",
                        "    // Internet Explorer 10+",
                        "    &:-ms-input-placeholder {",
                        "        color: $color;",
                        "    }",
                        "    // Safari and Chrome",
                        "    &::-webkit-input-placeholder {",
                        "        color: $color;",
                        "    }",
                        "}",
                        "",
                        "@mixin input-disabled() {",
                        "    color: $input-disabled-color;",
                        "    border-color: $input-disabled-border-color;",
                        "    background-color: $input-disabled-bg-color;",
                        "    cursor: not-allowed;",
                        "",
                        "    &:hover {",
                        "        border-color: $input-disabled-border-color;",
                        "        background-color: $input-disabled-bg-color;",
                        "    }",
                        "}",
                        "",
                        "@mixin input-focus-style() {",
                        "    border-color: $input-focus-border-color;",
                        "    background-color: $input-focus-bg-color;",
                        "}",
                        "",
                        "@mixin input-style() {",
                        "    border: $input-border-width solid $input-border-color;",
                        "    background-color: $input-bg-color;",
                        "    border-radius: $form-element-medium-corner;",
                        "",
                        "    &:hover {",
                        "        border-color: $input-hover-border-color;",
                        "        background-color: $input-hover-bg-color;",
                        "    }",
                        "",
                        "    &:focus {",
                        "        @include input-focus-style();",
                        "    }",
                        "}",
                        "",
                        "@mixin input-height(",
                        "    $height,",
                        "    $borderWidth",
                        ") {",
                        "    height: $height;",
                        "    input {",
                        "        height: $height - $borderWidth*2;",
                        "        line-height: ($height - $borderWidth*2)\\0; // ie9 support",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module input: 输入框",
                        "/// @tag input",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $input-",
                        "/// @classPrefix {prefix}-input",
                        "/// @order {\"statement/normal\":10,\"statement/normal/addon\":100,\"statement/normal/feedback\":101,\"statement/normal/maxlen\":102,\"statement/normal/clear\":103,\"statement/hover\":11,\"statement/hover/clear\":110,\"statement/focus\":12,\"statement/disabled\":13,\"statement/error\":14,\"size/bounding\":10,\"size/bounding/addon\":100,\"size/label\":11,\"size/maxlen\":12}",
                        "////",
                        "",
                        "$input-prefix: '.#{$css-prefix}input';",
                        "",
                        "// 公共",
                        "// --------------------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$input-text-color: $color-text1-4 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$input-border-color: $color-line1-3 !default;",
                        "",
                        "/// label",
                        "/// @namespace statement/normal",
                        "$input-label-color: $color-text1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover",
                        "$input-hover-border-color: $color-line1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$input-hover-bg-color: $color-white !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/focus",
                        "$input-focus-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/focus",
                        "$input-focus-bg-color: $color-white !default;",
                        "",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$input-border-width: $line-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$input-bg-color: $color-white !default;",
                        "",
                        "/// placeholder",
                        "/// @namespace statement/normal",
                        "$input-placeholder-color: $color-text1-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled",
                        "$input-disabled-color: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled",
                        "$input-disabled-border-color: $color-line1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled",
                        "$input-disabled-bg-color: $color-fill1-1 !default;",
                        "",
                        "// 多行",
                        "// --------------------------------------------------",
                        "",
                        "/// padding(l,r)",
                        "/// @namespace size/bounding",
                        "$input-multiple-padding-lr: $s-2 !default;",
                        "",
                        "/// padding(t,b)",
                        "/// @namespace size/bounding",
                        "$input-multiple-padding-tb: $s-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$input-multiple-font-size: $font-size-body-1 !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$input-multiple-corner: $corner-1 !default;",
                        "",
                        "// addon",
                        "// --------------------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/addon",
                        "$input-addon-bg-color: $color-fill1-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/addon",
                        "$input-addon-text-color: $color-text1-2 !default;",
                        "",
                        "/// padding(l,r)",
                        "/// @namespace size/bounding/addon",
                        "$input-addon-padding: $s-2 !default;",
                        "",
                        "// large",
                        "// --------------------------------------------------",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$input-l-padding: $s-3 !default;",
                        "",
                        "/// padding(l)",
                        "/// @namespace size/label",
                        "$input-l-label-padding-left: $s-3 !default;",
                        "",
                        "/// padding(r)",
                        "/// @namespace size/label",
                        "$input-l-icon-padding-right: $s-2 !default;",
                        "",
                        "// medium",
                        "// --------------------------------------------------",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$input-m-padding: $s-2 !default;",
                        "",
                        "/// padding(l)",
                        "/// @namespace size/label",
                        "$input-m-label-padding-left: $s-2 !default;",
                        "",
                        "/// padding(r)",
                        "/// @namespace size/label",
                        "$input-m-icon-padding-right: $s-2 !default;",
                        "",
                        "// small",
                        "// --------------------------------------------------",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$input-s-padding: $s-1 !default;",
                        "",
                        "/// padding(l)",
                        "/// @namespace size/label",
                        "$input-s-label-padding-left: $s-2 !default;",
                        "",
                        "/// padding(r)",
                        "/// @namespace size/label",
                        "$input-s-icon-padding-right: $s-1 !default;",
                        "",
                        "// feedback",
                        "// --------------------------------------------------",
                        "",
                        "/// success",
                        "/// @namespace statement/normal/feedback",
                        "$input-feedback-success-color: $color-success-3 !default;",
                        "",
                        "/// loading",
                        "/// @namespace statement/normal/feedback",
                        "$input-feedback-loading-color: $color-notice-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/error",
                        "$input-feedback-error-border-color: $color-error-3 !default;",
                        "",
                        "// maxlen",
                        "// --------------------------------------------------",
                        "",
                        "/// error",
                        "/// @namespace statement/normal/maxlen",
                        "$input-maxlen-error-color: $color-error-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/maxlen",
                        "$input-maxlen-color: $color-text1-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/maxlen",
                        "$input-maxlen-font-size: $font-size-caption !default;",
                        "",
                        "// hint",
                        "// --------------------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/clear",
                        "$input-hint-color: $color-text1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/clear",
                        "$input-hint-hover-color: $color-text1-3 !default;"
                    ]
                }
            }
        },
        "loading": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Overlay from '../overlay';",
                    "import ConfigProvider from '../config-provider';",
                    "import {obj, func} from '../util';",
                    "",
                    "/** Loading */",
                    "class Loading extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 自定义内容",
                    "         */",
                    "        tip: PropTypes.any,",
                    "        /**",
                    "         * 自定义内容位置",
                    "         * @enumdesc 出现在动画右边, 出现在动画下面",
                    "         */",
                    "        tipAlign: PropTypes.oneOf(['right', 'bottom']),",
                    "        /**",
                    "         * loading 状态, 默认 true",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 自定义class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 设置动画尺寸",
                    "         * @description 仅仅对默认动画效果起作用",
                    "         * @enumdesc 大号, 中号",
                    "         */",
                    "        size: PropTypes.oneOf(['large', 'medium']),",
                    "        /**",
                    "         * 自定义动画",
                    "         */",
                    "        indicator: PropTypes.any,",
                    "        /**",
                    "         * 动画颜色",
                    "         */",
                    "        color: PropTypes.string,",
                    "        /**",
                    "         * 全屏展示",
                    "         */",
                    "        fullScreen: PropTypes.bool,",
                    "        /**",
                    "         * 子元素",
                    "         */",
                    "        children: PropTypes.any,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        visible: true,",
                    "        onVisibleChange: func.noop,",
                    "        animate: null,",
                    "        tipAlign: 'bottom',",
                    "        size: 'large',",
                    "    };",
                    "",
                    "    render() {",
                    "        const {",
                    "            tip,",
                    "            visible,",
                    "            children,",
                    "            className,",
                    "            style,",
                    "            indicator,",
                    "            color,",
                    "            prefix,",
                    "            fullScreen,",
                    "            onVisibleChange,",
                    "            tipAlign,",
                    "            size",
                    "        } = this.props;",
                    "",
                    "        let indicatorDom = null;",
                    "        const dotCls = `${prefix}loading-dot`;",
                    "",
                    "        if (indicator) {",
                    "            indicatorDom = indicator;",
                    "        } else {",
                    "            const backgroundColor = color;",
                    "            const fusionReactorCls = classNames({",
                    "                [`${prefix}loading-fusion-reactor`]: true,",
                    "                [`${prefix}loading-medium-fusion-reactor`]: size === 'medium',",
                    "            });",
                    "            indicatorDom = (<div className={fusionReactorCls}>",
                    "                <span className={dotCls} style={{backgroundColor}}></span>",
                    "                <span className={dotCls} style={{backgroundColor}}></span>",
                    "                <span className={dotCls} style={{backgroundColor}}></span>",
                    "                <span className={dotCls} style={{backgroundColor}}></span>",
                    "            </div>);",
                    "        }",
                    "",
                    "        const loadingCls = classNames({",
                    "            [`${prefix}loading`]: true,",
                    "            [`${prefix}open`]: visible,",
                    "            [className]: className",
                    "        });",
                    "",
                    "        const tipCls = classNames({",
                    "            [`${prefix}loading-tip`]: true,",
                    "            // 默认非 right就是 bottom",
                    "            [`${prefix}loading-right-tip`]: tipAlign === 'right',",
                    "        });",
                    "",
                    "        const others = obj.pickOthers(Loading.propTypes, this.props);",
                    "",
                    "        const contentCls = classNames({",
                    "            [`${prefix}loading-component`]: visible,",
                    "            [`${prefix}loading-wrap`]: true,",
                    "        });",
                    "",
                    "        return fullScreen ?",
                    "            [",
                    "                children,",
                    "                <Overlay key=\"overlay\" hasMask align=\"cc cc\" {...others}",
                    "                    className={className}",
                    "                    style={style}",
                    "                    visible={visible}",
                    "                    onRequestClose={onVisibleChange}>",
                    "                    <div className={tipCls}>",
                    "                        <div className={`${prefix}loading-indicator`}>",
                    "                            {indicatorDom}",
                    "                        </div>",
                    "                        <div className={`${prefix}loading-tip-content`}>",
                    "                            {tip}",
                    "                        </div>",
                    "                        {/* 由于撑开问题 使用同样的两个DOM */}",
                    "                        <div className={`${prefix}loading-tip-placeholder`}>",
                    "                            {tip}",
                    "                        </div>",
                    "                    </div>",
                    "                </Overlay>",
                    "            ] : (",
                    "                <div className={loadingCls} style={style} {...others}>",
                    "                    {visible ?",
                    "                        (<div className={tipCls}>",
                    "                            <div className={`${prefix}loading-indicator`}>",
                    "                                {indicatorDom}",
                    "                            </div>",
                    "                            <div className={`${prefix}loading-tip-content`}>",
                    "                                {tip}",
                    "                            </div>",
                    "                            <div className={`${prefix}loading-tip-placeholder`}>",
                    "                                {tip}",
                    "                            </div>",
                    "                        </div>) : null",
                    "                    }",
                    "                    <div className={contentCls}>",
                    "                        {visible ? <div className={`${prefix}loading-masker`}></div> : null}",
                    "                        {children}",
                    "                    </div>",
                    "                </div>",
                    "            );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Loading);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"../animate/scss/mixin.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "/* put your code here */",
                    "",
                    "#{$loading-prefix} {",
                    "    position: relative;",
                    "    display: inline-block;",
                    "",
                    "    &.#{$css-prefix}open {",
                    "        pointer-events: none;",
                    "    }",
                    "    /* 遮罩层 */",
                    "    #{$loading-prefix}-component {",
                    "        opacity: .7;",
                    "        -webkit-filter: blur(1px);",
                    "        filter: blur(1px);",
                    "        filter: \"progid\\:DXImageTransform\\.Microsoft\\.Blur(PixelRadius\\=1, MakeShadow\\=false)\"; /* IE6~IE9 */",
                    "        position: relative;",
                    "        pointer-events: none;",
                    "    }",
                    "    /* for IE9,10 */",
                    "    &-masker {",
                    "        position: absolute;",
                    "        top: 0;",
                    "        bottom: 0;",
                    "        left: 0;",
                    "        right: 0;",
                    "        z-index: 99;",
                    "        opacity: .2;",
                    "        background: #FFF;",
                    "    }",
                    "",
                    "    &-tip {",
                    "        display: block;",
                    "        position: absolute;",
                    "        top: 50%;",
                    "        left: 50%;",
                    "        z-index: 4;",
                    "        transform: translate(-50%, -50%);",
                    "        text-align: center;",
                    "    }",
                    "",
                    "    &-tip-placeholder {",
                    "        display: none;",
                    "    }",
                    "",
                    "    /* text on the right side of */",
                    "    &-right-tip {",
                    "        #{$loading-prefix}-indicator {",
                    "            display: inline-block;",
                    "        }",
                    "        #{$loading-prefix}-tip-content {",
                    "            position: absolute;",
                    "            display: block;",
                    "            top: 50%;",
                    "            right: 0;",
                    "            transform: translate(0, -50%);",
                    "        }",
                    "        #{$loading-prefix}-tip-placeholder {",
                    "            display: inline-block;",
                    "            visibility: hidden;",
                    "            margin-left: 1em;",
                    "        }",
                    "    }",
                    "    /* 动效 */",
                    "    &-fusion-reactor {",
                    "        display: inline-block;",
                    "        width: $loading-large-size;",
                    "        height: $loading-large-size;",
                    "        position: relative;",
                    "        margin: 0;",
                    "",
                    "        @include duration($loading-fusion-vector-seconds);",
                    "        @include count(infinite);",
                    "        @include function(linear);",
                    "        @include animation-name(nextVectorRoute);",
                    "",
                    "        #{$loading-prefix}-dot {",
                    "            position: absolute;",
                    "            margin: auto;",
                    "            width: $loading-large-dot-size;",
                    "            height: $loading-large-dot-size;",
                    "            border-radius: 50%;",
                    "            background: $loading-dot-color;",
                    "",
                    "            @include function(ease-in-out);",
                    "            @include count(infinite);",
                    "            @include duration($loading-fusion-vector-dot-seconds);",
                    "",
                    "            &:nth-child(1) {",
                    "                top: 0;",
                    "                bottom: 0;",
                    "                left: 0;",
                    "                @include animation-name(nextVectorDotsX);",
                    "            }",
                    "            &:nth-child(2) {",
                    "                left: 0;",
                    "                right: 0;",
                    "                top: 0;",
                    "                opacity: .8;",
                    "                @include animation-name(nextVectorDotsY);",
                    "            }",
                    "            &:nth-child(3) {",
                    "                top: 0;",
                    "                bottom: 0;",
                    "                right: 0;",
                    "                opacity: .6;",
                    "                @include animation-name(nextVectorDotsXR);",
                    "            }",
                    "            &:nth-child(4) {",
                    "                left: 0;",
                    "                right: 0;",
                    "                bottom: 0;",
                    "                opacity: .2;",
                    "                @include animation-name( nextVectorDotsYR);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-medium-fusion-reactor {",
                    "",
                    "        width: $loading-medium-size;",
                    "        height: $loading-medium-size;",
                    "",
                    "        #{$loading-prefix}-dot {",
                    "            width: $loading-medium-dot-size;",
                    "            height: $loading-medium-dot-size;",
                    "            &:nth-child(1) {",
                    "                @include animation-name(nextVectorDotsX-medium);",
                    "            }",
                    "            &:nth-child(2) {",
                    "                @include animation-name(nextVectorDotsY-medium);",
                    "            }",
                    "            &:nth-child(3) {",
                    "                @include animation-name(nextVectorDotsXR-medium);",
                    "            }",
                    "            &:nth-child(4) {",
                    "                @include animation-name(nextVectorDotsYR-medium);",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "@include keyframes(nextVectorRoute) {",
                    "    0% {",
                    "        @include transform(rotate(0deg));",
                    "    }",
                    "    5% {",
                    "        @include transform(rotate(90deg));",
                    "    }",
                    "    25% {",
                    "        @include transform(rotate(90deg));",
                    "    }",
                    "    30% {",
                    "        @include transform(rotate(180deg));",
                    "    }",
                    "    50% {",
                    "        @include transform(rotate(180deg));",
                    "    }",
                    "    55% {",
                    "        @include transform(rotate(270deg));",
                    "    }",
                    "    75% {",
                    "        @include transform(rotate(270deg));",
                    "    }",
                    "    80% {",
                    "        @include transform(rotate(360deg));",
                    "    }",
                    "    100% {",
                    "        @include transform(rotate(360deg));",
                    "    }",
                    "}",
                    "",
                    "/* 20% 的时间在旋转 */",
                    "@include keyframes(nextVectorDotsYR) {",
                    "    @include loading-fusion(bottom, $loading-large-dot-size ,$loading-large-size / 2 - $loading-large-dot-size * 1.2 / 2, $loading-large-dot-size * 1.2);",
                    "}",
                    "",
                    "@include keyframes(nextVectorDotsY) {",
                    "    @include loading-fusion(top, $loading-large-dot-size, $loading-large-size / 2 - $loading-large-dot-size * 1.2 / 2, $loading-large-dot-size * 1.2);",
                    "}",
                    "",
                    "@include keyframes(nextVectorDotsX) {",
                    "    @include loading-fusion(left, $loading-large-dot-size, $loading-large-size / 2 - $loading-large-dot-size * 1.2 / 2, $loading-large-dot-size * 1.2);",
                    "}",
                    "",
                    "@include keyframes(nextVectorDotsXR) {",
                    "    @include loading-fusion(right, $loading-large-dot-size, $loading-large-size / 2 - $loading-large-dot-size * 1.2 / 2, $loading-large-dot-size * 1.2);",
                    "}",
                    "",
                    "@include keyframes(nextVectorDotsYR-medium) {",
                    "    @include loading-fusion(bottom, $loading-medium-dot-size ,$loading-medium-size / 2 - $loading-medium-dot-size * 1.2 / 2, $loading-medium-dot-size * 1.2);",
                    "}",
                    "",
                    "@include keyframes(nextVectorDotsY-medium) {",
                    "    @include loading-fusion(top, $loading-medium-dot-size ,$loading-medium-size / 2 - $loading-medium-dot-size * 1.2 / 2, $loading-medium-dot-size * 1.2);",
                    "}",
                    "",
                    "@include keyframes(nextVectorDotsX-medium) {",
                    "    @include loading-fusion(left, $loading-medium-dot-size ,$loading-medium-size / 2 - $loading-medium-dot-size * 1.2 / 2, $loading-medium-dot-size * 1.2);",
                    "}",
                    "",
                    "@include keyframes(nextVectorDotsXR-medium) {",
                    "    @include loading-fusion(right, $loading-medium-dot-size ,$loading-medium-size / 2 - $loading-medium-dot-size * 1.2 / 2, $loading-medium-dot-size * 1.2);",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../animate/style.js';",
                    "import '../overlay/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// loading mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin loading-fusion(",
                        "    $name: top,",
                        "    $oldsize: 10px,",
                        "    $val: 19px,",
                        "    $newsize: 12px",
                        ") {",
                        "",
                        "    25% {",
                        "        @if $name == top {",
                        "            top: 0;",
                        "        } @else if $name == left {",
                        "            left: 0;",
                        "        } @else if $name == bottom {",
                        "            bottom: 0;",
                        "        } @else if $name == right {",
                        "            right: 0;",
                        "        }",
                        "    }",
                        "    45%,",
                        "    50% {",
                        "        @if $name == top {",
                        "            top: $val;",
                        "            height: $newsize;",
                        "            width: $newsize;",
                        "        } @else if $name == left {",
                        "            left: $val;",
                        "            width: $newsize;",
                        "            height: $newsize;",
                        "        } @else if $name == bottom {",
                        "            bottom: $val;",
                        "            height: $newsize;",
                        "            width: $newsize;",
                        "        } @else if $name == right {",
                        "            right: $val;",
                        "            width: $newsize;",
                        "            height: $newsize;",
                        "        }",
                        "    }",
                        "    90% {",
                        "        @if $name == top {",
                        "            top: 0;",
                        "            height: $oldsize;",
                        "            width: $oldsize;",
                        "        } @else if $name == left {",
                        "            left: 0;",
                        "            height: $oldsize;",
                        "            width: $oldsize;",
                        "        } @else if $name == bottom {",
                        "            bottom: 0;",
                        "            height: $oldsize;",
                        "            width: $oldsize;",
                        "        } @else if $name == right {",
                        "            right: 0;",
                        "            height: $oldsize;",
                        "            width: $oldsize;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module loading: 加载",
                        "/// @tag loading",
                        "/// @category component",
                        "/// @family feedback",
                        "/// @varPrefix $loading-",
                        "/// @classPrefix {prefix}-loading",
                        "/// @order {\"size/bounding\":10,\"size/icon\":11,\"statement/normal\":10}",
                        "////",
                        "",
                        "$loading-prefix: '.#{$css-prefix}loading';",
                        "",
                        "// loading variables",
                        "// --------------------------------------------------",
                        "",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$loading-icon-size: $icon-xl !default;",
                        "/// icon",
                        "/// @namespace statement/normal",
                        "$loading-dot-color: $color-brand1-6 !default;",
                        "",
                        "$loading-fusion-vector-seconds: 5.6s;",
                        "$loading-fusion-vector-dot-seconds: 1.4s;",
                        "",
                        "/// width",
                        "/// @namespace size/bounding",
                        "$loading-large-size: $s-12 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$loading-large-dot-size: $icon-xs !default;",
                        "",
                        "/// width",
                        "/// @namespace size/bounding",
                        "$loading-medium-size: $s-8 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$loading-medium-dot-size: $icon-xxs !default;"
                    ]
                }
            }
        },
        "locale": {
            "en-us.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "export default {",
                    "    momentLocale: 'en',",
                    "    Timeline: {",
                    "        expand: 'Expand',",
                    "        fold: 'Fold',",
                    "    },",
                    "    Card: {",
                    "        expand: 'Expand',",
                    "        fold: 'Fold',",
                    "    },",
                    "    Calendar: {",
                    "        today: 'Today',",
                    "        now: 'Now',",
                    "        ok: 'OK',",
                    "        clear: 'Clear',",
                    "        month: 'Month',",
                    "        year: 'Year',",
                    "        prevYear: 'Previous Year',",
                    "        nextYear: 'Next Year',",
                    "        prevMonth: 'Previous Month',",
                    "        nextMonth: 'Next Month',",
                    "        prevDecade: 'Previous Decade',",
                    "        nextDecade: 'Next Decade',",
                    "    },",
                    "    DatePicker: {",
                    "        placeholder: 'Select Date',",
                    "        datetimePlaceholder: 'Select Date And Time',",
                    "        monthPlaceholder: 'Select Month',",
                    "        yearPlaceholder: 'Select Year',",
                    "        now: 'Now',",
                    "        selectTime: 'Select Time',",
                    "        selectDate: 'Select Date',",
                    "        ok: 'OK',",
                    "        clear: 'Clear',",
                    "        startPlaceholder: 'Start Date',",
                    "        endPlaceholder: 'End Date',",
                    "        hour: 'H',",
                    "        minute: 'M',",
                    "        second: 'S'",
                    "    },",
                    "    Dialog: {",
                    "        ok: 'OK',",
                    "        cancel: 'Cancel'",
                    "    },",
                    "    Pagination: {",
                    "        prev: 'Previous',",
                    "        next: 'Next',",
                    "        goTo: 'Go to',",
                    "        page: 'Page',",
                    "        go: 'View',",
                    "        pageSize: 'Items per page:'",
                    "    },",
                    "    Input: {",
                    "        clear: 'Clear'",
                    "    },",
                    "    Select: {",
                    "        selectPlaceholder: 'Please Select',",
                    "        autoCompletePlaceholder: 'Please Input',",
                    "        notFoundContent: 'No Options'",
                    "    },",
                    "    Table: {",
                    "        empty: 'No Data',",
                    "        ok: 'OK',",
                    "        reset: 'Reset',",
                    "        asc: 'Ascending Order',",
                    "        desc: 'Descending Order',",
                    "        expanded: 'Expanded',",
                    "        folded: 'Folded',",
                    "        filter: 'Filter',",
                    "        selectAll: 'Select All'",
                    "    },",
                    "    TimePicker: {",
                    "        placeholder: 'Select Time',",
                    "        clear: 'Clear',",
                    "        hour: 'H',",
                    "        minute: 'M',",
                    "        second: 'S'",
                    "    },",
                    "    Transfer: {",
                    "        items: 'items',",
                    "        item: 'item',",
                    "        moveAll: 'Move All',",
                    "        searchPlaceholder: 'Please Input'",
                    "    },",
                    "    Upload: {",
                    "        card: {",
                    "            cancel: 'Cancel',",
                    "            addPhoto: 'Add Picture'",
                    "        },",
                    "        drag: {",
                    "            text: 'Click or Drag the file to this area to upload',",
                    "            hint: 'Support docx, xls, PDF, rar, zip, PNG, JPG and other files upload'",
                    "        }",
                    "    },",
                    "    Search: {",
                    "        buttonText: 'Search',",
                    "    },",
                    "};"
                ]
            },
            "ja-jp.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "export default {",
                    "    momentLocale: 'ja',",
                    "    Timeline: {",
                    "        expand: '開く',",
                    "        fold: '閉じる',",
                    "    },",
                    "    Card: {",
                    "        expand: '開く',",
                    "        fold: '閉じる',",
                    "    },",
                    "    Calendar: {",
                    "        today: '本日',",
                    "        now: '現在',",
                    "        ok: '確認',",
                    "        clear: 'クリア',",
                    "        month: '月',",
                    "        year: '年',",
                    "        prevYear: '前の年',",
                    "        nextYear: '次の年',",
                    "        prevMonth: '前の月',",
                    "        nextMonth: '来月',",
                    "        prevDecade: '前の十年',",
                    "        nextDecade: '次の十年',",
                    "    },",
                    "    DatePicker: {",
                    "        placeholder: '日付けの選択',",
                    "        datetimePlaceholder: '日時を選択してください',",
                    "        monthPlaceholder: '月を選択してください',",
                    "        yearPlaceholder: '年を選択してください',",
                    "        now: '現在',",
                    "        selectTime: '時間の選択',",
                    "        selectDate: '日付けの選択',",
                    "        ok: '確認',",
                    "        clear: 'クリア',",
                    "        startPlaceholder: '開始日',",
                    "        endPlaceholder: '最終日',",
                    "        hour: '時',",
                    "        minute: '分',",
                    "        second: '秒'",
                    "    },",
                    "    Dialog: {",
                    "        ok: '確認',",
                    "        cancel: 'キャンセル'",
                    "    },",
                    "    Pagination: {",
                    "        prev: '前のページ',",
                    "        next: '次のページ',",
                    "        goTo: '第',",
                    "        page: 'ページへ',",
                    "        go: '確認',",
                    "        pageSize: 'ページサイズ：'",
                    "    },",
                    "    Input: {",
                    "        clear: 'クリア'",
                    "    },",
                    "    Select: {",
                    "        selectPlaceholder: '選択',",
                    "        autoCompletePlaceholder: '入力',",
                    "        notFoundContent: '選択肢なし'",
                    "    },",
                    "    Table: {",
                    "        empty: 'データなし',",
                    "        ok: '確認',",
                    "        reset: 'リセット',",
                    "        asc: '昇順',",
                    "        desc: '降順',",
                    "        expanded: '展開している',",
                    "        folded: '収まった',",
                    "        filter: 'フィルタ',",
                    "        selectAll: '全選'",
                    "    },",
                    "    TimePicker: {",
                    "        placeholder: '時間の選択',",
                    "        clear: 'クリア',",
                    "        hour: '時',",
                    "        minute: '分',",
                    "        second: '秒'",
                    "    },",
                    "    Transfer: {",
                    "        items: '項目',",
                    "        item: '項目',",
                    "        moveAll: '全ての移動',",
                    "        searchPlaceholder: '入力'",
                    "    },",
                    "    Upload: {",
                    "        card: {",
                    "            cancel: 'キャンセル',",
                    "            addPhoto: '画像アップロード'",
                    "        },",
                    "        drag: {",
                    "            text: '枠にドラッグしてアップロード',",
                    "            hint: 'docx, xls, PDF, rar, zip, PNG, JPG 等がサポートしています'",
                    "        }",
                    "    },",
                    "    Search: {",
                    "        buttonText: 'サーチ',",
                    "    },",
                    "};"
                ]
            },
            "zh-cn.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "export default {",
                    "    momentLocale: 'zh-cn',",
                    "    Timeline: {",
                    "        expand: '展开',",
                    "        fold: '收起',",
                    "    },",
                    "    Card: {",
                    "        expand: '展开',",
                    "        fold: '收起',",
                    "    },",
                    "    Calendar: {",
                    "        today: '今天',",
                    "        now: '此刻',",
                    "        ok: '确定',",
                    "        clear: '清除',",
                    "        month: '月',",
                    "        year: '年',",
                    "        prevYear: '上一年',",
                    "        nextYear: '下一年',",
                    "        prevMonth: '上个月',",
                    "        nextMonth: '下个月',",
                    "        prevDecade: '上十年',",
                    "        nextDecade: '后十年',",
                    "    },",
                    "    DatePicker: {",
                    "        placeholder: '请选择日期',",
                    "        datetimePlaceholder: '请选择日期和时间',",
                    "        monthPlaceholder: '请选择月',",
                    "        yearPlaceholder: '请选择年',",
                    "        now: '此刻',",
                    "        selectTime: '选择时间',",
                    "        selectDate: '选择日期',",
                    "        ok: '确定',",
                    "        clear: '清除',",
                    "        startPlaceholder: '起始日期',",
                    "        endPlaceholder: '结束日期',",
                    "        hour: '时',",
                    "        minute: '分',",
                    "        second: '秒'",
                    "    },",
                    "    Dialog: {",
                    "        ok: '确认',",
                    "        cancel: '取消'",
                    "    },",
                    "    Pagination: {",
                    "        prev: '上一页',",
                    "        next: '下一页',",
                    "        goTo: '到第',",
                    "        page: '页',",
                    "        go: '确定',",
                    "        pageSize: '每页显示：'",
                    "    },",
                    "    Input: {",
                    "        clear: '清除'",
                    "    },",
                    "    Select: {",
                    "        selectPlaceholder: '请选择',",
                    "        autoCompletePlaceholder: '请输入',",
                    "        notFoundContent: '无选项'",
                    "    },",
                    "    Table: {",
                    "        empty: '没有数据',",
                    "        ok: '确认',",
                    "        reset: '重置',",
                    "        asc: '升序',",
                    "        desc: '降序',",
                    "        expanded: '已展开',",
                    "        folded: '已折叠',",
                    "        filter: '筛选',",
                    "        selectAll: '全选'",
                    "    },",
                    "    TimePicker: {",
                    "        placeholder: '请选择时间',",
                    "        clear: '清除',",
                    "        hour: '时',",
                    "        minute: '分',",
                    "        second: '秒'",
                    "    },",
                    "    Transfer: {",
                    "        items: '项',",
                    "        item: '项',",
                    "        moveAll: '移动全部',",
                    "        searchPlaceholder: '请输入'",
                    "    },",
                    "    Upload: {",
                    "        card: {",
                    "            cancel: '取消',",
                    "            addPhoto: '上传图片'",
                    "        },",
                    "        drag: {",
                    "            text: '点击或者拖动文件到虚线框内上传',",
                    "            hint: '支持 docx, xls, PDF, rar, zip, PNG, JPG 等类型的文件'",
                    "        }",
                    "    },",
                    "    Search: {",
                    "        buttonText: '搜索',",
                    "    },",
                    "};"
                ]
            },
            "zh-tw.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "export default {",
                    "    momentLocale: 'zh-tw',",
                    "    Timeline: {",
                    "        expand: '展開',",
                    "        fold: '收起',",
                    "    },",
                    "    Card: {",
                    "        expand: '展開',",
                    "        fold: '收起',",
                    "    },",
                    "    Calendar: {",
                    "        today: '今天',",
                    "        now: '此刻',",
                    "        ok: '確定',",
                    "        clear: '清除',",
                    "        month: '月',",
                    "        year: '年',",
                    "        prevYear: '上一年',",
                    "        nextYear: '下一年',",
                    "        prevMonth: '上个月',",
                    "        nextMonth: '下个月',",
                    "        prevDecade: '上十年',",
                    "        nextDecade: '后十年',",
                    "    },",
                    "    DatePicker: {",
                    "        placeholder: '請選擇日期',",
                    "        datetimePlaceholder: '請選擇日期和時間',",
                    "        monthPlaceholder: '請選擇月',",
                    "        yearPlaceholder: '請選擇年',",
                    "        now: '此刻',",
                    "        selectTime: '選擇時間',",
                    "        selectDate: '選擇日期',",
                    "        ok: '確定',",
                    "        clear: '清除',",
                    "        startPlaceholder: '起始日期',",
                    "        endPlaceholder: '結束日期',",
                    "        hour: '時',",
                    "        minute: '分',",
                    "        second: '秒'",
                    "    },",
                    "    Dialog: {",
                    "        ok: '確認',",
                    "        cancel: '取消'",
                    "    },",
                    "    Pagination: {",
                    "        prev: '上一頁',",
                    "        next: '下一頁',",
                    "        goTo: '到第',",
                    "        page: '頁',",
                    "        go: '確定',",
                    "        pageSize: '每頁顯示：'",
                    "    },",
                    "    Input: {",
                    "        clear: '清除'",
                    "    },",
                    "    Select: {",
                    "        selectPlaceholder: '請選擇',",
                    "        autoCompletePlaceholder: '請輸入',",
                    "        notFoundContent: '無選項'",
                    "    },",
                    "    Table: {",
                    "        empty: '沒有數據',",
                    "        ok: '確認',",
                    "        reset: '重置',",
                    "        asc: '昇冪',",
                    "        desc: '降序',",
                    "        expanded: '已展開',",
                    "        folded: '已折疊',",
                    "        filter: '篩選',",
                    "        selectAll: '全選'",
                    "    },",
                    "    TimePicker: {",
                    "        placeholder: '請選擇時間',",
                    "        clear: '清除',",
                    "        hour: '時',",
                    "        minute: '分',",
                    "        second: '秒'",
                    "    },",
                    "    Transfer: {",
                    "        items: '項',",
                    "        item: '項',",
                    "        moveAll: '移動全部',",
                    "        searchPlaceholder: '請輸入'",
                    "    },",
                    "    Upload: {",
                    "        card: {",
                    "            cancel: '取消',",
                    "            addPhoto: '上傳圖片'",
                    "        },",
                    "        drag: {",
                    "            text: '點擊或者拖動文件到虛線框內上傳',",
                    "            hint: '支持 docx, xls, PDF, rar, zip, PNG, JPG 等類型的文件'",
                    "        }",
                    "    },",
                    "    Search: {",
                    "        buttonText: '檢索',",
                    "    },",
                    "};"
                ]
            }
        },
        "menu": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Menu from './view/menu';",
                    "import SubMenu from './view/sub-menu';",
                    "import SelectableItem from './view/selectable-item';",
                    "import CheckboxItem from './view/checkbox-item';",
                    "import RadioItem from './view/radio-item';",
                    "import PopupItem from './view/popup-item';",
                    "import Group from './view/group';",
                    "import Divider from './view/divider';",
                    "import create from './view/create';",
                    "",
                    "Menu.SubMenu = SubMenu;",
                    "Menu.Item = SelectableItem;",
                    "Menu.CheckboxItem = CheckboxItem;",
                    "Menu.RadioItem = RadioItem;",
                    "Menu.PopupItem = PopupItem;",
                    "Menu.Group = Group;",
                    "Menu.Divider = Divider;",
                    "Menu.create = create;",
                    "",
                    "/* istanbul ignore next */",
                    "const transform = (props, deprecated) => {",
                    "    if ('indentSize' in props) {",
                    "        deprecated('indentSize', 'inlineIndent', 'Menu');",
                    "",
                    "        const { indentSize, ...others } = props;",
                    "        props = { inlineIndent: indentSize, ...others };",
                    "    }",
                    "",
                    "    if ('onDeselect' in props) {",
                    "        deprecated('onDeselect', 'onSelect', 'Menu');",
                    "        if (props.onDeselect) {",
                    "            const { onDeselect, onSelect, ...others } = props;",
                    "            const newOnSelect = (selectedKeys, item, extra) => {",
                    "                if (!extra.select) {",
                    "                    onDeselect(extra.key);",
                    "                }",
                    "                if (onSelect) {",
                    "                    onSelect(selectedKeys, item, extra);",
                    "                }",
                    "            };",
                    "",
                    "            props = { onSelect: newOnSelect, ...others };",
                    "        }",
                    "    }",
                    "",
                    "    return props;",
                    "};",
                    "",
                    "export default ConfigProvider.config(Menu, {",
                    "    transform",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$menu-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    &:focus,",
                    "    & *:focus {",
                    "        outline: 0;",
                    "    }",
                    "",
                    "    position: relative;",
                    "    min-width: $s-25;",
                    "    padding: $menu-padding-vertical 0;",
                    "    margin: 0;",
                    "    list-style: none;",
                    "    border: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "    border-radius: $popup-local-corner;",
                    "    box-shadow: $popup-local-shadow;",
                    "    background: $menu-background;",
                    "    line-height: $menu-line-height;",
                    "    font-size: $menu-font-size;",
                    "",
                    "    &-content {",
                    "        position: relative;",
                    "        padding: 0;",
                    "        margin: 0;",
                    "        list-style: none;",
                    "    }",
                    "",
                    "    &-sub-menu {",
                    "        padding: 0;",
                    "        margin: 0;",
                    "        list-style: none;",
                    "",
                    "        &.#{$css-prefix} {",
                    "            &expand-enter {",
                    "                overflow: hidden;",
                    "            }",
                    "",
                    "            &expand-enter-active {",
                    "                transition: height .3s ease-out;",
                    "            }",
                    "",
                    "            &expand-leave {",
                    "                overflow: hidden;",
                    "            }",
                    "",
                    "            &expand-leave-active {",
                    "                transition: height .3s ease-out;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-item {",
                    "        position: relative;",
                    "        padding: 0 $menu-padding-horizontal;",
                    "        transition: background .2s ease;",
                    "        color: $menu-color;",
                    "        cursor: pointer;",
                    "",
                    "        &-helper {",
                    "            float: right;",
                    "            color: $color-text1-2;",
                    "            font-style: normal;",
                    "            font-size: $menu-font-size;",
                    "        }",
                    "",
                    "        .#{$css-prefix}checkbox,",
                    "        .#{$css-prefix}radio {",
                    "            margin-right: $menu-icon-margin;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}selected {",
                    "            @include menu-item-state(",
                    "                $menu-color-selected,",
                    "                $menu-background-selected,",
                    "                $menu-arrow-color,",
                    "                $menu-icon-selected-color",
                    "            );",
                    "        }",
                    "",
                    "        &.#{$css-prefix}disabled,",
                    "        &.#{$css-prefix}disabled #{$menu-prefix}-item-text > a {",
                    "            @include menu-item-state(",
                    "                $menu-color-disabled,",
                    "                $menu-background,",
                    "                $menu-color-disabled,",
                    "                $menu-color-disabled",
                    "            );",
                    "            cursor: not-allowed;",
                    "        }",
                    "",
                    "        &:not(.#{$css-prefix}disabled):hover,",
                    "        &:not(.#{$css-prefix}disabled).#{$css-prefix}selected:hover,",
                    "        &:not(.#{$css-prefix}disabled).#{$css-prefix}selected.#{$css-prefix}focused:hover,",
                    "        &:not(.#{$css-prefix}disabled).#{$css-prefix}selected:focus:hover,",
                    "        &:not(.#{$css-prefix}disabled).#{$css-prefix}focused,",
                    "        &:not(.#{$css-prefix}disabled):focus,",
                    "        &:not(.#{$css-prefix}disabled).#{$css-prefix}selected.#{$css-prefix}focused,",
                    "        &:not(.#{$css-prefix}disabled).#{$css-prefix}selected:focus {",
                    "            @include menu-item-state(",
                    "                $menu-color-hover,",
                    "                $menu-background-hover,",
                    "                $menu-arrow-color-hover,",
                    "                $menu-icon-selected-hover-color",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &-item-inner {",
                    "        height: $menu-line-height;",
                    "        font-size: $menu-font-size;",
                    "        overflow: hidden;",
                    "        text-overflow: ellipsis;",
                    "        white-space: nowrap;",
                    "        word-wrap: normal;",
                    "    }",
                    "",
                    "    &-item-text {",
                    "        vertical-align: middle;",
                    "",
                    "        & > a {",
                    "            display: inline-block;",
                    "            text-decoration: none;",
                    "            color: $menu-color;",
                    "            &::before {",
                    "                position: absolute;",
                    "                background-color: transparent;",
                    "                top: 0;",
                    "                left: 0;",
                    "                bottom: 0;",
                    "                right: 0;",
                    "                content: '';",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}hoz {",
                    "        padding: 0;",
                    "",
                    "        > #{$menu-prefix}-item,",
                    "        #{$menu-prefix}-content > #{$menu-prefix}-item {",
                    "            display: inline-block;",
                    "            vertical-align: top;",
                    "        }",
                    "",
                    "        #{$menu-prefix}-header,",
                    "        #{$menu-prefix}-content,",
                    "        #{$menu-prefix}-footer {",
                    "            display: inline-block;",
                    "        }",
                    "    }",
                    "",
                    "    &-hoz-right {",
                    "        float: right;",
                    "    }",
                    "",
                    "    &-group-label {",
                    "        padding: 0 $menu-padding-title-horizontal;",
                    "        color: $color-text1-2;",
                    "    }",
                    "",
                    "    &-divider {",
                    "        margin: $menu-divider-margin-ver $menu-divider-margin-hoz;",
                    "        border-bottom: $menu-divider-width $menu-divider-style $menu-divider-color;",
                    "    }",
                    "",
                    "    & &-icon-selected.#{$css-prefix}icon {",
                    "        position: absolute;",
                    "        top: 0;",
                    "        @include icon-size($menu-icon-selected-size, -($menu-padding-horizontal + $menu-icon-selected-size) / 2);",
                    "    }",
                    "",
                    "    & &-icon-arrow.#{$css-prefix}icon {",
                    "        position: absolute;",
                    "        top: 0;",
                    "        right: 10px;",
                    "        @include icon-size($menu-icon-size);",
                    "        color: $menu-arrow-color;",
                    "        transition: all ease .3s;",
                    "    }",
                    "",
                    "    & &-icon-arrow-down.#{$css-prefix}open {",
                    "        @include icon-size(",
                    "            $size: $menu-icon-size,",
                    "            $transform: rotate(180deg)",
                    "        );",
                    "    }",
                    "",
                    "    & &-icon-arrow-right.#{$css-prefix}open {",
                    "        @include icon-size(",
                    "            $size: $menu-icon-size,",
                    "            $transform: rotate(-90deg)",
                    "        );",
                    "    }",
                    "",
                    "    & &-hoz-icon-arrow.#{$css-prefix}icon {",
                    "        position: absolute;",
                    "        top: 0;",
                    "        right: 6px;",
                    "        @include icon-size($icon-xs);",
                    "        color: $menu-arrow-color;",
                    "        transition: all ease .3s;",
                    "    }",
                    "",
                    "    & &-hoz-icon-arrow.#{$css-prefix}open {",
                    "        @include icon-size(",
                    "            $size: $icon-xs,",
                    "            $transform: rotate(180deg)",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}context {",
                    "        line-height: $s-6;",
                    "",
                    "        #{$menu-prefix}-item-inner {",
                    "            height: $s-6;",
                    "        }",
                    "    }",
                    "",
                    "    /* &-popup-content.#{$css-prefix}hide { */",
                    "    /*     display: none; */",
                    "    /* } */",
                    "}"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$menu-prefix}[dir=\"rtl\"] {",
                    "    #{$menu-prefix} {",
                    "        &-item {",
                    "            &-helper {",
                    "                float: left;",
                    "            }",
                    "",
                    "            .#{$css-prefix}checkbox,",
                    "            .#{$css-prefix}radio {",
                    "                margin-left: $menu-icon-margin;",
                    "                margin-right: 0;",
                    "            }",
                    "        }",
                    "",
                    "        &-hoz-right {",
                    "            float: right;",
                    "        }",
                    "",
                    "        &-icon-arrow.#{$css-prefix}icon {",
                    "            left: 10px;",
                    "            right: auto;",
                    "        }",
                    "",
                    "        &-hoz-icon-arrow.#{$css-prefix}icon {",
                    "            left: 6px;",
                    "            right: auto;",
                    "        }",
                    "",
                    "        &-icon-selected.#{$css-prefix}icon {",
                    "            @include icon-size($menu-icon-selected-size, 0, -($menu-padding-horizontal + $menu-icon-selected-size) / 2);",
                    "        }",
                    "    }",
                    "    #{$menu-prefix}-icon-arrow.#{$css-prefix}icon {",
                    "        left: 10px;",
                    "        right: auto;",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../animate/style.js';",
                    "import '../radio/style.js';",
                    "import '../checkbox/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin menu-item-state(",
                        "    $color,",
                        "    $bgColor,",
                        "    $arrowIconColor,",
                        "    $selectedIconColor",
                        ") {",
                        "    color: $color;",
                        "    background-color: $bgColor;",
                        "",
                        "    #{$menu-prefix}-icon-arrow {",
                        "        color: $arrowIconColor;",
                        "    }",
                        "",
                        "    #{$menu-prefix}-icon-selected {",
                        "        color: $selectedIconColor;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module menu: 菜单",
                        "/// @tag Menu",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $menu-",
                        "/// @classPrefix {prefix}-menu",
                        "/// @order {\"size/bounding\":10,\"size/item\":11,\"size/sub menu\":12,\"size/group title\":13,\"size/divider\":14,\"size/selected icon\":15,\"size/arrow\":16,\"size/checkbox & radio\":17,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/text\":101,\"statement/normal/divider\":102,\"statement/normal/item\":103,\"statement/normal/arrow\":104,\"statement/selected\":11,\"statement/selected/item\":110,\"statement/selected/text\":111,\"statement/selected/selected icon\":112,\"statement/hover\":12,\"statement/hover/item\":120,\"statement/hover/text\":121,\"statement/hover/arrow\":122,\"statement/hover/selected icon\":123,\"statement/disabled\":13,\"statement/disabled/text\":130}",
                        "////",
                        "",
                        "$menu-prefix: '.#{$css-prefix}menu';",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/bounding",
                        "$menu-padding-vertical: $s-2 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$menu-padding-horizontal: $s-5 !default;",
                        "",
                        "/// item height",
                        "/// @namespace size/item",
                        "$menu-line-height: $s-8 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/item",
                        "$menu-font-size: $font-size-body-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/sub menu",
                        "$menu-submenu-title-size: $font-size-body-1 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/group title",
                        "$menu-padding-title-horizontal: $s-3 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/divider",
                        "$menu-divider-width: $line-1 !default;",
                        "",
                        "/// margin (t, b)",
                        "/// @namespace size/divider",
                        "$menu-divider-margin-ver: $s-2 !default;",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/divider",
                        "$menu-divider-margin-hoz: $s-3 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/selected icon",
                        "$menu-icon-selected-size: $icon-xs !default;",
                        "",
                        "/// size",
                        "/// @namespace size/arrow",
                        "$menu-icon-size: $icon-xxs !default;",
                        "",
                        "/// margin (r)",
                        "/// @namespace size/checkbox & radio",
                        "$menu-icon-margin: $s-1 !default;",
                        "",
                        "// Statement:Normal",
                        "// ----------------------------------------",
                        "",
                        "/// shadow",
                        "/// @namespace statement/normal/bounding",
                        "$menu-shadow: $shadow-1-down !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/text",
                        "$menu-color: $color-text1-4 !default;",
                        "",
                        "/// style",
                        "/// @namespace statement/normal/divider",
                        "$menu-divider-style: $line-solid !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/divider",
                        "$menu-divider-color: $color-line1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/item",
                        "$menu-background: $color-white !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/text",
                        "$menu-color: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/arrow",
                        "$menu-arrow-color: $color-text1-3 !default;",
                        "",
                        "// Statement:Selected",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/item",
                        "$menu-background-selected: $color-white !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/selected/text",
                        "$menu-color-selected: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/selected/selected icon",
                        "$menu-icon-selected-color: $color-brand1-6 !default;",
                        "",
                        "// Statement:Hover & Focused",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/item",
                        "$menu-background-hover: $color-fill1-2 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/text",
                        "$menu-color-hover: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/arrow",
                        "$menu-arrow-color-hover: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/selected icon",
                        "$menu-icon-selected-hover-color: $color-brand1-6 !default;",
                        "",
                        "// Statement:Disabled",
                        "// ----------------------------------------",
                        "",
                        "/// color",
                        "/// @namespace statement/disabled/text",
                        "$menu-color-disabled: $color-text1-1 !default;"
                    ]
                }
            },
            "view": {
                "checkable-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import Checkbox from '../../checkbox';",
                        "import Radio from '../../radio';",
                        "import { func, obj, KEYCODE } from '../../util';",
                        "import Item from './item';",
                        "",
                        "const noop = {};",
                        "const { bindCtx } = func;",
                        "const { pickOthers } = obj;",
                        "",
                        "export default class CheckableItem extends Component {",
                        "    static propTypes = {",
                        "        _key: PropTypes.string,",
                        "        root: PropTypes.object,",
                        "        disabled: PropTypes.bool,",
                        "        inlineIndent: PropTypes.number,",
                        "        checked: PropTypes.bool,",
                        "        indeterminate: PropTypes.bool,",
                        "        onChange: PropTypes.func,",
                        "        checkType: PropTypes.oneOf(['checkbox', 'radio']),",
                        "        checkDisabled: PropTypes.bool,",
                        "        helper: PropTypes.node,",
                        "        children: PropTypes.node,",
                        "        onKeyDown: PropTypes.func,",
                        "        onClick: PropTypes.func",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        disabled: false,",
                        "        checked: false,",
                        "        indeterminate: false,",
                        "        checkType: 'checkbox',",
                        "        checkDisabled: false,",
                        "        onChange: noop",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        bindCtx(this, ['stopPropagation', 'handleKeyDown', 'handleClick']);",
                        "    }",
                        "",
                        "    stopPropagation(e) {",
                        "        e.stopPropagation();",
                        "    }",
                        "",
                        "    handleCheck(e) {",
                        "        const { checkType, checked, onChange } = this.props;",
                        "        if (!(checkType === 'radio' && checked)) {",
                        "            onChange(!checked, e);",
                        "        }",
                        "    }",
                        "",
                        "    handleKeyDown(e) {",
                        "        if (e.keyCode === KEYCODE.SPACE && !this.props.checkDisabled) {",
                        "            this.handleCheck(e);",
                        "        }",
                        "",
                        "        this.props.onKeyDown && this.props.onKeyDown(e);",
                        "    }",
                        "",
                        "    handleClick(e) {",
                        "        this.handleCheck(e);",
                        "",
                        "        this.props.onClick && this.props.onClick(e);",
                        "    }",
                        "",
                        "    renderCheck() {",
                        "        const { root, checked, indeterminate, disabled, checkType, checkDisabled, onChange } = this.props;",
                        "        const { labelToggleChecked } = root.props;",
                        "        const Check = checkType === 'radio' ? Radio : Checkbox;",
                        "",
                        "        const checkProps = {",
                        "            tabIndex: '-1',",
                        "            checked,",
                        "            disabled: disabled || checkDisabled",
                        "        };",
                        "        if (checkType === 'checkbox') {",
                        "            checkProps.indeterminate = indeterminate;",
                        "        }",
                        "        if (!labelToggleChecked) {",
                        "            checkProps.onChange = onChange;",
                        "            checkProps.onClick = this.stopPropagation;",
                        "        }",
                        "",
                        "        return (",
                        "            <Check {...checkProps} />",
                        "        );",
                        "    }",
                        "",
                        "    render() {",
                        "        const { _key, root, checked, disabled, onClick, helper, children } = this.props;",
                        "        const { prefix, labelToggleChecked } = root.props;",
                        "        const others = pickOthers(Object.keys(CheckableItem.propTypes), this.props);",
                        "",
                        "        const newProps = {",
                        "            _key,",
                        "            root,",
                        "            disabled,",
                        "            type: 'item',",
                        "            onClick,",
                        "            onKeyDown: this.handleKeyDown,",
                        "            ...others",
                        "        };",
                        "        if (labelToggleChecked && !disabled) {",
                        "            newProps.onClick = this.handleClick;",
                        "        }",
                        "",
                        "        return (",
                        "            <Item aria-checked={checked} {...newProps}>",
                        "                {this.renderCheck()}",
                        "                <span className={`${prefix}menu-item-text`}>{children}</span>",
                        "                {helper ? <div className={`${prefix}menu-item-helper`}>{helper}</div> : null}",
                        "            </Item>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "checkbox-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import CheckableItem from './checkable-item';",
                        "",
                        "/**",
                        " * Menu.CheckboxItem",
                        " * @order 3",
                        " * @description 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑",
                        " */",
                        "export default class CheckboxItem extends Component {",
                        "    static menuChildType = 'item';",
                        "",
                        "    static propTypes = {",
                        "        /**",
                        "         * 是否选中",
                        "         */",
                        "        checked: PropTypes.bool,",
                        "        /**",
                        "         * 是否半选中",
                        "         */",
                        "        indeterminate: PropTypes.bool,",
                        "        /**",
                        "         * 是否禁用",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 选中或取消选中触发的回调函数",
                        "         * @param {Boolean} checked 是否选中",
                        "         * @param {Object} event 选中事件对象",
                        "         */",
                        "        onChange: PropTypes.func,",
                        "        /**",
                        "         * 帮助文本",
                        "         */",
                        "        helper: PropTypes.node,",
                        "        /**",
                        "         * 标签内容",
                        "         */",
                        "        children: PropTypes.node,",
                        "        checkboxDisabled: PropTypes.bool",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        checked: false,",
                        "        indeterminate: false,",
                        "        disabled: false,",
                        "        onChange: () => {},",
                        "        checkboxDisabled: false",
                        "    };",
                        "",
                        "    render() {",
                        "        const { checkboxDisabled, ...others } = this.props;",
                        "        return <CheckableItem role=\"menuitemcheckbox\" checkType=\"checkbox\" checkDisabled={checkboxDisabled} {...others} />;",
                        "    }",
                        "}"
                    ]
                },
                "create.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import { render, unmountComponentAtNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Overlay from '../../overlay';",
                        "import { func } from '../../util';",
                        "import ConfigProvider from '../../config-provider';",
                        "import menu from './menu';",
                        "",
                        "const { bindCtx } = func;",
                        "const { getContextProps } = ConfigProvider;",
                        "const Menu = ConfigProvider.config(menu);",
                        "",
                        "let menuInstance;",
                        "",
                        "class ContextMenu extends Component {",
                        "    static propTypes = {",
                        "        className: PropTypes.string,",
                        "        popupClassName: PropTypes.string,",
                        "        target: PropTypes.any,",
                        "        align: PropTypes.string,",
                        "        offset: PropTypes.array,",
                        "        overlayProps: PropTypes.object,",
                        "        afterClose: PropTypes.func,",
                        "        mode: PropTypes.oneOf(['inline', 'popup']),",
                        "        onOpen: PropTypes.func,",
                        "        onItemClick: PropTypes.func",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        align: 'tl tl',",
                        "        mode: 'popup'",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        this.state = {",
                        "            visible: true",
                        "        };",
                        "",
                        "        bindCtx(this, ['handleOverlayClose', 'handleOverlayOpen', 'handleItemClick', 'getOverlay']);",
                        "    }",
                        "",
                        "    getOverlay(ref) {",
                        "        this.overlay = ref;",
                        "    }",
                        "",
                        "    close() {",
                        "        this.setState({",
                        "            visible: false",
                        "        });",
                        "        menuInstance = null;",
                        "    }",
                        "",
                        "    handleOverlayClose(triggerType, e, ...others) {",
                        "        const clickedPopupMenu = triggerType === 'docClick' &&",
                        "            this.popupNodes.some(node => node.contains(e.target));",
                        "        if (!clickedPopupMenu) {",
                        "            this.close();",
                        "            const { overlayProps } = this.props;",
                        "            if (overlayProps && overlayProps.onRequestClose) {",
                        "                overlayProps.onRequestClose(triggerType, e, ...others);",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    handleOverlayOpen() {",
                        "        this.popupNodes = this.overlay.getInstance().getContent().getInstance().popupNodes;",
                        "        const { overlayProps } = this.props;",
                        "        if (overlayProps && overlayProps.onOpen) {",
                        "            overlayProps.onOpen();",
                        "        }",
                        "",
                        "    }",
                        "",
                        "    handleItemClick(...args) {",
                        "        this.close();",
                        "",
                        "        this.props.onItemClick && this.props.onItemClick(...args);",
                        "    }",
                        "",
                        "    render() {",
                        "        const { className, popupClassName, target, align, offset, afterClose, overlayProps = {}, ...others } = this.props;",
                        "        const contextProps = getContextProps(this.props);",
                        "        const { prefix } = contextProps;",
                        "        const { visible } = this.state;",
                        "",
                        "        const newOverlayProps = {",
                        "            ...contextProps,",
                        "            ...overlayProps,",
                        "            target, align, offset, afterClose, visible,",
                        "            onRequestClose: this.handleOverlayClose,",
                        "            onOpen: this.handleOverlayOpen,",
                        "            ref: this.getOverlay",
                        "        };",
                        "        const menuProps = {",
                        "            ...contextProps,",
                        "            triggerType: 'hover',",
                        "            ...others,",
                        "            className: cx({",
                        "                [`${prefix}context`]: true,",
                        "                [className]: !!className",
                        "            }),",
                        "            popupClassName: cx({",
                        "                [`${prefix}context`]: true,",
                        "                [popupClassName]: !!popupClassName",
                        "            }),",
                        "            onItemClick: this.handleItemClick",
                        "        };",
                        "",
                        "        newOverlayProps.rtl = false;",
                        "",
                        "        return (",
                        "            <Overlay {...newOverlayProps}>",
                        "                <Menu {...menuProps} />",
                        "            </Overlay>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "/**",
                        " * 创建上下文菜单",
                        " * @exportName create",
                        " * @param {Object} props 属性对象",
                        " */",
                        "export default function create(props) {",
                        "    if (menuInstance) {",
                        "        menuInstance.destroy();",
                        "    }",
                        "",
                        "    /* eslint-disable no-unused-vars */",
                        "    const { afterClose, ...others } = props;",
                        "    /* eslint-enable no-unused-vars */",
                        "",
                        "    const div = document.createElement('div');",
                        "    document.body.appendChild(div);",
                        "",
                        "    const closeChain = () => {",
                        "        unmountComponentAtNode(div);",
                        "        document.body.removeChild(div);",
                        "",
                        "        afterClose && afterClose();",
                        "    };",
                        "",
                        "    const newContext = ConfigProvider.getContext();",
                        "",
                        "    let menu;",
                        "    render(",
                        "        <ConfigProvider {...newContext}>",
                        "            <ContextMenu ref={ref => {",
                        "                menu = ref;",
                        "            }} afterClose={closeChain} {...others} />",
                        "        </ConfigProvider>",
                        "        , div",
                        "    );",
                        "",
                        "    menuInstance = {",
                        "        destroy: () => {",
                        "            if (menu) {",
                        "                menu.close();",
                        "            }",
                        "        }",
                        "    };",
                        "",
                        "    return menuInstance;",
                        "}"
                    ]
                },
                "divider.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "",
                        "/**",
                        " * Menu.Divider",
                        " * @order 6",
                        " */",
                        "export default class Divider extends Component {",
                        "    static menuChildType = 'divider';",
                        "",
                        "    static propTypes = {",
                        "        root: PropTypes.object,",
                        "        className: PropTypes.string,",
                        "    }",
                        "",
                        "    render() {",
                        "        const { root, className, ...others } = this.props;",
                        "        const { prefix } = root.props;",
                        "",
                        "        const newClassName = cx({",
                        "            [`${prefix}menu-divider`]: true,",
                        "            [className]: !!className",
                        "        });",
                        "",
                        "        return (",
                        "            <li role=\"separator\" className={newClassName} {...others}></li>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "group.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, cloneElement } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Item from './item';",
                        "",
                        "/**",
                        " * Menu.Group",
                        " * @order 5",
                        " */",
                        "export default class Group extends Component {",
                        "    static menuChildType = 'group';",
                        "",
                        "    static propTypes = {",
                        "        root: PropTypes.object,",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * 标签内容",
                        "         */",
                        "        label: PropTypes.node,",
                        "        /**",
                        "         * 菜单项",
                        "         */",
                        "        children: PropTypes.node,",
                        "        parentMode: PropTypes.oneOf(['inline', 'popup']),",
                        "    }",
                        "",
                        "    render() {",
                        "        const { root, className, label, children, parentMode, ...others } = this.props;",
                        "        const { prefix } = root.props;",
                        "",
                        "        const newClassName = cx({",
                        "            [`${prefix}menu-group-label`]: true,",
                        "            [className]: !!className",
                        "        });",
                        "",
                        "        const newChildren = children.map(child => {",
                        "            const { className } = child.props;",
                        "            const newChildClassName = cx({",
                        "                [`${prefix}menu-group-item`]: true,",
                        "                [className]: !!className",
                        "            });",
                        "",
                        "            return cloneElement(child, {",
                        "                parentMode,",
                        "                className: newChildClassName",
                        "            });",
                        "        });",
                        "",
                        "        return [",
                        "            <Item",
                        "                key=\"menu-group-label\"",
                        "                className={newClassName}",
                        "                replaceClassName",
                        "                root={root}",
                        "                parentMode={parentMode}",
                        "                {...others}>{label}</Item>,",
                        "            ...newChildren",
                        "        ];",
                        "    }",
                        "}"
                    ]
                },
                "item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children, isValidElement } from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import { func, obj } from '../../util';",
                        "",
                        "const { bindCtx } = func;",
                        "const { pickOthers } = obj;",
                        "",
                        "export default class Item extends Component {",
                        "    static propTypes = {",
                        "        _key: PropTypes.string,",
                        "        level: PropTypes.number,",
                        "        groupIndent: PropTypes.number,",
                        "        root: PropTypes.object,",
                        "        parent: PropTypes.object,",
                        "        parentMode: PropTypes.oneOf(['inline', 'popup']),",
                        "        type: PropTypes.oneOf(['submenu', 'item']),",
                        "        component: PropTypes.string,",
                        "        disabled: PropTypes.bool,",
                        "        className: PropTypes.string,",
                        "        onClick: PropTypes.func,",
                        "        onKeyDown: PropTypes.func,",
                        "        needIndent: PropTypes.bool,",
                        "        replaceClassName: PropTypes.bool",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        component: 'li',",
                        "        groupIndent: 0,",
                        "        replaceClassName: false,",
                        "        needIndent: true",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        bindCtx(this, ['handleClick', 'handleKeyDown']);",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.itemNode = findDOMNode(this);",
                        "",
                        "        const { parentMode, root } = this.props;",
                        "        if (parentMode === 'popup') {",
                        "            this.menuNode = this.itemNode.parentNode;",
                        "        } else {",
                        "            this.menuNode = findDOMNode(root);",
                        "            const { prefix, header, footer } = root.props;",
                        "            if (header || footer) {",
                        "                this.menuNode = this.menuNode.querySelector(`.${prefix}menu-content`);",
                        "            }",
                        "        }",
                        "",
                        "        this.setFocus();",
                        "    }",
                        "",
                        "    componentDidUpdate() {",
                        "        this.setFocus();",
                        "    }",
                        "",
                        "    focusable() {",
                        "        const { root, type, disabled } = this.props;",
                        "        const { focusable } = root.props;",
                        "        return focusable && (type === 'submenu' || !disabled);",
                        "    }",
                        "",
                        "    getFocused() {",
                        "        const { _key, root } = this.props;",
                        "        const { focusedKey } = root.state;",
                        "        return focusedKey === _key;",
                        "    }",
                        "",
                        "    setFocus() {",
                        "        const focused = this.getFocused();",
                        "        if (focused) {",
                        "            if (this.focusable()) {",
                        "                this.itemNode.focus({ preventScroll: true });",
                        "            }",
                        "            if (this.menuNode && this.menuNode.scrollHeight > this.menuNode.clientHeight) {",
                        "                const scrollBottom = this.menuNode.clientHeight + this.menuNode.scrollTop;",
                        "                const itemBottom = this.itemNode.offsetTop + this.itemNode.offsetHeight;",
                        "                if (itemBottom > scrollBottom) {",
                        "                    this.menuNode.scrollTop = itemBottom - this.menuNode.clientHeight;",
                        "                } else if (this.itemNode.offsetTop < this.menuNode.scrollTop) {",
                        "                    this.menuNode.scrollTop = this.itemNode.offsetTop;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    handleClick(e) {",
                        "        e.stopPropagation();",
                        "",
                        "        const { _key, root, disabled } = this.props;",
                        "",
                        "        if (!disabled) {",
                        "            root.handleItemClick(_key, this, e);",
                        "",
                        "            this.props.onClick && this.props.onClick(e);",
                        "        } else {",
                        "            e.preventDefault();",
                        "        }",
                        "    }",
                        "",
                        "    handleKeyDown(e) {",
                        "        const { _key, root, type } = this.props;",
                        "        if (this.focusable()) {",
                        "            root.handleItemKeyDown(_key, type, this, e);",
                        "        }",
                        "",
                        "        this.props.onKeyDown && this.props.onKeyDown(e);",
                        "    }",
                        "",
                        "    getTitle(children) {",
                        "        let labelString = '';",
                        "",
                        "        const loop = children => {",
                        "            Children.forEach(children, child => {",
                        "                if (isValidElement(child) &&  child.props.children) {",
                        "                    loop(child.props.children);",
                        "                } else if (typeof child === 'string') {",
                        "                    labelString += child;",
                        "                }",
                        "            });",
                        "        };",
                        "",
                        "        loop(children);",
                        "",
                        "        return labelString;",
                        "    }",
                        "",
                        "    render() {",
                        "        const { level, root, replaceClassName, groupIndent, component, disabled, className, children, needIndent, parentMode, _key } = this.props;",
                        "        const others = pickOthers(Object.keys(Item.propTypes), this.props);",
                        "",
                        "        const { prefix, focusable, inlineIndent, itemClassName, rtl } = root.props;",
                        "        const focused = this.getFocused();",
                        "",
                        "        const newClassName = replaceClassName ? className : cx({",
                        "            [`${prefix}menu-item`]: true,",
                        "            [`${prefix}disabled`]: disabled,",
                        "            [`${prefix}focused`]: !focusable && focused,",
                        "            [itemClassName]: !!itemClassName,",
                        "            [className]: !!className",
                        "        });",
                        "        if (disabled) {",
                        "            others['aria-disabled'] = true;",
                        "        }",
                        "",
                        "        others.tabIndex = root.tabbableKey === _key ? '0' : '-1';",
                        "",
                        "        if (parentMode === 'inline' && level > 1 && inlineIndent > 0 && needIndent) {",
                        "            others.style = {",
                        "                ...(others.style || {}),",
                        "                [rtl ? 'paddingRight' : 'paddingLeft']: `${(level * inlineIndent) - ((groupIndent || 0) * 0.4 * inlineIndent)}px`",
                        "            };",
                        "        }",
                        "        const TagName = component;",
                        "",
                        "        return (",
                        "            <TagName role=\"menuitem\"",
                        "                title={this.getTitle(children)}",
                        "                {...others}",
                        "                className={newClassName}",
                        "                onClick={this.handleClick}",
                        "                onKeyDown={this.handleKeyDown}>",
                        "                <div className={`${prefix}menu-item-inner`}>{children}</div>",
                        "            </TagName>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "menu.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children, cloneElement } from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import { func, obj, KEYCODE } from '../../util';",
                        "",
                        "const { bindCtx } = func;",
                        "const { pickOthers } = obj;",
                        "const noop = () => {};",
                        "",
                        "/**",
                        " * Menu",
                        " */",
                        "export default class Menu extends Component {",
                        "    static isNextMenu = true;",
                        "",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        pure: PropTypes.bool,",
                        "        rtl: PropTypes.bool,",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * 菜单项和子菜单",
                        "         */",
                        "        children: PropTypes.node,",
                        "        /**",
                        "         * 点击菜单项触发的回调函数",
                        "         * @param {String} key 点击的菜单项的 key 值",
                        "         * @param {Object} item 点击的菜单项对象",
                        "         * @param {Object} event 点击的事件对象",
                        "         */",
                        "        onItemClick: PropTypes.func,",
                        "        /**",
                        "         * 当前打开的子菜单的 key 值",
                        "         */",
                        "        openKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                        "        /**",
                        "         * 初始打开的子菜单的 key 值",
                        "         */",
                        "        defaultOpenKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                        "        /**",
                        "         * 初始展开所有的子菜单，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效，优先级高于 defaultOpenKeys",
                        "         */",
                        "        defaultOpenAll: PropTypes.bool,",
                        "        /**",
                        "         * 打开或关闭子菜单触发的回调函数",
                        "         * @param {String} key 打开的所有子菜单的 key 值",
                        "         * @param {Object} extra 额外参数",
                        "         * @param {String} extra.key 当前操作子菜单的 key 值",
                        "         * @param {Boolean} extra.open 是否是打开",
                        "         */",
                        "        onOpen: PropTypes.func,",
                        "        /**",
                        "         * 子菜单打开的模式",
                        "         */",
                        "        mode: PropTypes.oneOf(['inline', 'popup']),",
                        "        /**",
                        "         * 子菜单打开的触发行为",
                        "         */",
                        "        triggerType: PropTypes.oneOf(['click', 'hover']),",
                        "        /**",
                        "         * 展开内连子菜单的模式，同时可以展开一个子菜单还是多个子菜单，该属性仅在 mode 为 inline 时生效",
                        "         */",
                        "        openMode: PropTypes.oneOf(['single', 'multiple']),",
                        "        /**",
                        "         * 内连子菜单缩进距离",
                        "         */",
                        "        inlineIndent: PropTypes.number,",
                        "        inlineArrowDirection: PropTypes.oneOf(['down', 'right']),",
                        "        /**",
                        "         * 是否自动让弹层的宽度和菜单项保持一致，如果弹层的宽度比菜单项小则和菜单项保持一致，如果宽度大于菜单项则不做处理",
                        "         */",
                        "        popupAutoWidth: PropTypes.bool,",
                        "        /**",
                        "         * 弹层的对齐方式",
                        "         */",
                        "        popupAlign: PropTypes.oneOf(['follow', 'outside']),",
                        "        /**",
                        "         * 弹层自定义 props",
                        "         */",
                        "        popupProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),",
                        "        /**",
                        "         * 弹出子菜单自定义 className",
                        "         */",
                        "        popupClassName: PropTypes.string,",
                        "        /**",
                        "         * 弹出子菜单自定义 style",
                        "         */",
                        "        popupStyle: PropTypes.object,",
                        "        /**",
                        "         * 当前选中菜单项的 key 值",
                        "         */",
                        "        selectedKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                        "        /**",
                        "         * 初始选中菜单项的 key 值",
                        "         */",
                        "        defaultSelectedKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                        "        /**",
                        "         * 选中或取消选中菜单项触发的回调函数",
                        "         * @param {Array} selectedKeys 选中的所有菜单项的值",
                        "         * @param {Object} item 选中或取消选中的菜单项",
                        "         * @param {Object} extra 额外参数",
                        "         * @param {Boolean} extra.select 是否是选中",
                        "         * @param {Array} extra.key 菜单项的 key",
                        "         * @param {Object} extra.label 菜单项的文本",
                        "         * @param {Array} extra.keyPath 菜单项 key 的路径",
                        "         */",
                        "        onSelect: PropTypes.func,",
                        "        /**",
                        "         * 选中模式，单选还是多选，默认无值，不可选",
                        "         */",
                        "        selectMode: PropTypes.oneOf(['single', 'multiple']),",
                        "        /**",
                        "         * 是否只能选择第一层菜单项（不能选择子菜单中的菜单项）",
                        "         */",
                        "        shallowSelect: PropTypes.bool,",
                        "        /**",
                        "         * 是否显示选中图标，如果设置为 false 需配合配置平台设置选中时的背景色以示区分",
                        "         */",
                        "        hasSelectedIcon: PropTypes.bool,",
                        "        labelToggleChecked: PropTypes.bool,",
                        "        /**",
                        "         * 菜单第一层展示方向",
                        "         */",
                        "        direction: PropTypes.oneOf(['ver', 'hoz']),",
                        "        /**",
                        "         * 横向菜单条 item 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效",
                        "         */",
                        "        hozAlign: PropTypes.oneOf(['left', 'right']),",
                        "        /**",
                        "         * 自定义菜单头部",
                        "         */",
                        "        header: PropTypes.node,",
                        "        /**",
                        "         * 自定义菜单尾部",
                        "         */",
                        "        footer: PropTypes.node,",
                        "        /**",
                        "         * 是否自动获得焦点",
                        "         */",
                        "        autoFocus: PropTypes.bool,",
                        "        /**",
                        "         * 当前获得焦点的子菜单或菜单项 key 值",
                        "         */",
                        "        focusedKey: PropTypes.string,",
                        "        focusable: PropTypes.bool,",
                        "        onItemFocus: PropTypes.func,",
                        "        onBlur: PropTypes.func,",
                        "        onItemKeyDown: PropTypes.func,",
                        "        expandAnimation: PropTypes.bool,",
                        "        itemClassName: PropTypes.string",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        pure: false,",
                        "        defaultOpenKeys: [],",
                        "        defaultOpenAll: false,",
                        "        onOpen: noop,",
                        "        mode: 'inline',",
                        "        triggerType: 'click',",
                        "        openMode: 'multiple',",
                        "        inlineIndent: 20,",
                        "        inlineArrowDirection: 'down',",
                        "        popupAutoWidth: false,",
                        "        popupAlign: 'follow',",
                        "        popupProps: {},",
                        "        defaultSelectedKeys: [],",
                        "        onSelect: noop,",
                        "        shallowSelect: false,",
                        "        hasSelectedIcon: true,",
                        "        labelToggleChecked: true,",
                        "        direction: 'ver',",
                        "        hozAlign: 'left',",
                        "        autoFocus: false,",
                        "        focusable: true,",
                        "        onItemFocus: noop,",
                        "        onItemKeyDown: noop,",
                        "        onItemClick: noop,",
                        "        expandAnimation: true",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        const { children, selectedKeys, defaultSelectedKeys, focusedKey, focusable, autoFocus } = this.props;",
                        "",
                        "        this.newChildren = this.getNewChildren(children);",
                        "",
                        "        if (focusable) {",
                        "            this.tabbableKey = this.getFirstAvaliablelChildKey('0');",
                        "        }",
                        "        this.state = {",
                        "            openKeys: this.getInitOpenKeys(props),",
                        "            selectedKeys: this.normalizeToArray(selectedKeys || defaultSelectedKeys),",
                        "            focusedKey: 'focusedKey' in this.props ? focusedKey : (focusable && autoFocus ? this.tabbableKey : null)",
                        "        };",
                        "",
                        "        bindCtx(this, ['handleOpen', 'handleSelect', 'handleItemClick', 'handleItemKeyDown', 'onBlur']);",
                        "",
                        "        this.popupNodes = [];",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.menuNode = findDOMNode(this);",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        const state = {};",
                        "",
                        "        if ('openKeys' in nextProps) {",
                        "            state.openKeys = this.normalizeToArray(nextProps.openKeys);",
                        "        }",
                        "        if ('selectedKeys' in nextProps) {",
                        "            state.selectedKeys = this.normalizeToArray(nextProps.selectedKeys);",
                        "        }",
                        "        if ('focusedKey' in nextProps) {",
                        "            state.focusedKey = nextProps.focusedKey;",
                        "        }",
                        "",
                        "        if (Object.keys(state).length) {",
                        "            this.setState(state);",
                        "        }",
                        "    }",
                        "",
                        "    componentWillUpdate(nextProps) {",
                        "        this.newChildren = this.getNewChildren(nextProps.children);",
                        "        if (this.props.focusable) {",
                        "            if (this.tabbableKey in this.k2n) {",
                        "                if (this.state.focusedKey) {",
                        "                    this.tabbableKey = this.state.focusedKey;",
                        "                }",
                        "            } else {",
                        "                this.tabbableKey = this.getFirstAvaliablelChildKey('0');",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    onBlur(e) {",
                        "        this.setState({",
                        "            focusedKey: ''",
                        "        });",
                        "",
                        "        this.props.onBlur && this.props.onBlur(e);",
                        "    }",
                        "",
                        "    getInitOpenKeys(props) {",
                        "        let initOpenKeys;",
                        "",
                        "        const { openKeys, defaultOpenKeys, defaultOpenAll, mode, openMode } = props;",
                        "        if (openKeys) {",
                        "            initOpenKeys = openKeys;",
                        "        } else if (defaultOpenAll && mode === 'inline' && openMode === 'multiple') {",
                        "            initOpenKeys = Object.keys(this.k2n).filter(key => {",
                        "                return this.k2n[key].type === 'submenu';",
                        "            });",
                        "        } else {",
                        "            initOpenKeys = defaultOpenKeys;",
                        "        }",
                        "",
                        "        return this.normalizeToArray(initOpenKeys);",
                        "    }",
                        "",
                        "    getNewChildren(children) {",
                        "        this.k2n = {};",
                        "        this.p2n = {};",
                        "        const loop = (children, posPrefix, indexWrapper = { index: 0 }) => {",
                        "            return Children.map(children, child => {",
                        "                if (child && typeof child.type === 'function' && ('menuChildType' in child.type)) {",
                        "                    let newChild;",
                        "",
                        "                    let pos;",
                        "                    const props = { root: this };",
                        "",
                        "                    if (['item', 'submenu', 'group'].indexOf(child.type.menuChildType) > -1) {",
                        "                        pos = `${posPrefix}-${indexWrapper.index++}`;",
                        "                        const key = typeof child.key === 'string' ? child.key : pos;",
                        "                        const level = pos.split('-').length - 1;",
                        "                        this.k2n[key] = this.p2n[pos] = {",
                        "                            key,",
                        "                            pos,",
                        "                            type: child.type.menuChildType,",
                        "                            disabled: child.props.disabled,",
                        "                            label: child.props.label || child.props.children",
                        "                        };",
                        "",
                        "                        props._key = key;",
                        "                        props.level = level;",
                        "                        props.groupIndent = child.type.menuChildType === 'group' ? 1 : 0;",
                        "                    }",
                        "",
                        "                    switch (child.type.menuChildType) {",
                        "                        case 'submenu':",
                        "                            newChild = cloneElement(child, props, loop(child.props.children, pos));",
                        "                            break;",
                        "                        case 'group':",
                        "                            newChild = cloneElement(child, props, loop(child.props.children, posPrefix, indexWrapper));",
                        "                            break;",
                        "                        case 'item':",
                        "                        case 'divider':",
                        "                            newChild = cloneElement(child, props);",
                        "                            break;",
                        "                        default:",
                        "                            newChild = child;",
                        "                            break;",
                        "                    }",
                        "",
                        "                    return newChild;",
                        "                }",
                        "",
                        "                return child;",
                        "            });",
                        "        };",
                        "",
                        "        return loop(children, '0');",
                        "    }",
                        "",
                        "    normalizeToArray(items) {",
                        "        if (items) {",
                        "            if (Array.isArray(items)) {",
                        "                return items;",
                        "            }",
                        "            return [items];",
                        "        }",
                        "",
                        "        return [];",
                        "    }",
                        "",
                        "    isSibling(currentPos, targetPos) {",
                        "        const currentNums = currentPos.split('-').slice(0, -1);",
                        "        const targetNums = targetPos.split('-').slice(0, -1);",
                        "",
                        "        return currentNums.length === targetNums.length && currentNums.every((num, index) => {",
                        "            return num === targetNums[index];",
                        "        });",
                        "    }",
                        "",
                        "    isAncestor(currentPos, targetPos) {",
                        "        const currentNums = currentPos.split('-');",
                        "        const targetNums = targetPos.split('-');",
                        "",
                        "        return currentNums.length > targetNums.length && targetNums.every((num, index) => {",
                        "            return num === currentNums[index];",
                        "        });",
                        "    }",
                        "",
                        "    handleOpen(key, open, triggerType, e) {",
                        "        let newOpenKeys;",
                        "",
                        "        const { mode, openMode } = this.props;",
                        "        const { openKeys } = this.state;",
                        "        const index = openKeys.indexOf(key);",
                        "        if (open && index === -1) {",
                        "            if (mode === 'inline') {",
                        "                if (openMode === 'single') {",
                        "                    newOpenKeys = openKeys.filter(k => !this.isSibling(this.k2n[key].pos, this.k2n[k].pos));",
                        "                    newOpenKeys.push(key);",
                        "                } else {",
                        "                    newOpenKeys = openKeys.concat(key);",
                        "                }",
                        "            } else {",
                        "                newOpenKeys = openKeys.filter(k => {",
                        "                    return this.isAncestor(this.k2n[key].pos, this.k2n[k].pos);",
                        "                });",
                        "                newOpenKeys.push(key);",
                        "            }",
                        "        } else if (!open && index > -1) {",
                        "            if (mode === 'inline') {",
                        "                newOpenKeys = [",
                        "                    ...openKeys.slice(0, index),",
                        "                    ...openKeys.slice(index + 1)",
                        "                ];",
                        "            } else if (triggerType === 'docClick') {",
                        "                if (!this.popupNodes.concat(this.menuNode).some(node => node.contains(e.target))) {",
                        "                    newOpenKeys = [];",
                        "                }",
                        "            } else {",
                        "                newOpenKeys = openKeys.filter(k => {",
                        "                    return k !== key && !this.isAncestor(this.k2n[k].pos, this.k2n[key].pos);",
                        "                });",
                        "            }",
                        "        }",
                        "",
                        "        if (newOpenKeys) {",
                        "            if (!('openKeys' in this.props)) {",
                        "                this.setState({",
                        "                    openKeys: newOpenKeys",
                        "                });",
                        "            }",
                        "",
                        "            this.props.onOpen(newOpenKeys, {",
                        "                key,",
                        "                open",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    getPath(key) {",
                        "        const keyPath = [];",
                        "        const labelPath = [];",
                        "",
                        "        const pos = this.k2n[key].pos;",
                        "        const nums = pos.split('-');",
                        "        for (let i = 1; i < nums.length - 1; i++) {",
                        "            const parentNums = nums.slice(0, i + 1);",
                        "            const parentPos = parentNums.join('-');",
                        "            const parent = this.p2n[parentPos];",
                        "            keyPath.push(parent.key);",
                        "            labelPath.push(parent.label);",
                        "        }",
                        "",
                        "        return {",
                        "            keyPath,",
                        "            labelPath",
                        "        };",
                        "    }",
                        "",
                        "    handleSelect(key, select, menuItem) {",
                        "        const pos = this.k2n[key].pos;",
                        "        const level = pos.split('-').length - 1;",
                        "        if (this.props.shallowSelect && level > 1) {",
                        "            return;",
                        "        }",
                        "",
                        "        let newSelectedKeys;",
                        "",
                        "        const { selectMode } = this.props;",
                        "        const { selectedKeys } = this.state;",
                        "        const index = selectedKeys.indexOf(key);",
                        "        if (select && index === -1) {",
                        "            if (selectMode === 'single') {",
                        "                newSelectedKeys = [key];",
                        "            } else if (selectMode === 'multiple') {",
                        "                newSelectedKeys = selectedKeys.concat(key);",
                        "            }",
                        "        } else if (!select && index > -1 && selectMode === 'multiple') {",
                        "            newSelectedKeys = [",
                        "                ...selectedKeys.slice(0, index),",
                        "                ...selectedKeys.slice(index + 1)",
                        "            ];",
                        "        }",
                        "",
                        "        if (newSelectedKeys) {",
                        "            if (!('selectedKeys' in this.props)) {",
                        "                this.setState({",
                        "                    selectedKeys: newSelectedKeys",
                        "                });",
                        "            }",
                        "",
                        "            this.props.onSelect(newSelectedKeys, menuItem, {",
                        "                key,",
                        "                select,",
                        "                label: this.k2n[key].label,",
                        "                ...this.getPath(key)",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    handleItemClick(key, item, e) {",
                        "        if (this.props.focusable) {",
                        "            if (!('focusedKey' in this.props)) {",
                        "                this.setState({",
                        "                    focusedKey: key",
                        "                });",
                        "            }",
                        "",
                        "            this.props.onItemFocus(key, item, e);",
                        "        }",
                        "",
                        "        if (item.props.type === 'item') {",
                        "            if (item.props.parentMode === 'popup' && this.state.openKeys.length) {",
                        "                if (!('openKeys' in this.props)) {",
                        "                    this.setState({",
                        "                        openKeys: []",
                        "                    });",
                        "                }",
                        "",
                        "                this.props.onOpen([], {",
                        "                    key: this.state.openKeys.sort((prevKey, nextKey) => this.k2n[nextKey].pos.split('-').length - this.k2n[prevKey].pos.split('-').length)[0],",
                        "                    open: false",
                        "                });",
                        "            }",
                        "",
                        "            this.props.onItemClick(key, item, e);",
                        "        }",
                        "    }",
                        "",
                        "    isAvailablePos(refPos, targetPos) {",
                        "        const { type, disabled } = this.p2n[targetPos];",
                        "",
                        "        return this.isSibling(refPos, targetPos) &&",
                        "            (type === 'item' && !disabled || type === 'submenu');",
                        "    }",
                        "",
                        "    getAvailableKey(pos, prev) {",
                        "        const ps = Object.keys(this.p2n).filter(p => this.isAvailablePos(pos, p));",
                        "        if (ps.length > 1) {",
                        "            const index = ps.indexOf(pos);",
                        "            let targetIndex;",
                        "            if (prev) {",
                        "                targetIndex = index === 0 ? ps.length - 1 : index - 1;",
                        "            } else {",
                        "                targetIndex = index === ps.length - 1 ? 0 : index + 1;",
                        "            }",
                        "",
                        "            return this.p2n[ps[targetIndex]].key;",
                        "        }",
                        "",
                        "        return null;",
                        "    }",
                        "",
                        "    getFirstAvaliablelChildKey(parentPos) {",
                        "        const pos = Object.keys(this.p2n).find(p => this.isAvailablePos(`${parentPos}-0`, p));",
                        "        return pos ? this.p2n[pos].key : null;",
                        "    }",
                        "",
                        "    getParentKey(pos) {",
                        "        return this.p2n[pos.slice(0, pos.length - 2)].key;",
                        "    }",
                        "",
                        "    handleItemKeyDown(key, type, item, e) {",
                        "        if ([",
                        "            KEYCODE.UP, KEYCODE.DOWN, KEYCODE.RIGHT, KEYCODE.LEFT,",
                        "            KEYCODE.ENTER, KEYCODE.ESC, KEYCODE.SPACE",
                        "        ].indexOf(e.keyCode) > -1) {",
                        "            e.preventDefault();",
                        "            e.stopPropagation();",
                        "        }",
                        "",
                        "        let focusedKey = this.state.focusedKey;",
                        "",
                        "        const { direction } = this.props;",
                        "        const pos = this.k2n[key].pos;",
                        "        const level = pos.split('-').length - 1;",
                        "        switch (e.keyCode) {",
                        "            case KEYCODE.UP: {",
                        "                const avaliableKey = this.getAvailableKey(pos, true);",
                        "                if (avaliableKey) {",
                        "                    focusedKey = avaliableKey;",
                        "                }",
                        "                break;",
                        "            }",
                        "            case KEYCODE.DOWN: {",
                        "                let avaliableKey;",
                        "                if (direction === 'hoz' && level === 1 && type === 'submenu') {",
                        "                    this.handleOpen(key, true);",
                        "                    avaliableKey = this.getFirstAvaliablelChildKey(pos);",
                        "                } else {",
                        "                    avaliableKey = this.getAvailableKey(pos, false);",
                        "                }",
                        "                if (avaliableKey) {",
                        "                    focusedKey = avaliableKey;",
                        "                }",
                        "                break;",
                        "            }",
                        "            case KEYCODE.RIGHT: {",
                        "                let avaliableKey;",
                        "                if (direction === 'hoz' && level === 1) {",
                        "                    avaliableKey = this.getAvailableKey(pos, false);",
                        "                } else if (type === 'submenu') {",
                        "                    this.handleOpen(key, true);",
                        "                    avaliableKey = this.getFirstAvaliablelChildKey(pos);",
                        "                }",
                        "                if (avaliableKey) {",
                        "                    focusedKey = avaliableKey;",
                        "                }",
                        "                break;",
                        "            }",
                        "            case KEYCODE.ENTER: {",
                        "                if (type === 'submenu') {",
                        "                    this.handleOpen(key, true);",
                        "                    const avaliableKey = this.getFirstAvaliablelChildKey(pos);",
                        "                    if (avaliableKey) {",
                        "                        focusedKey = avaliableKey;",
                        "                    }",
                        "                }",
                        "                break;",
                        "            }",
                        "            case KEYCODE.LEFT: {",
                        "                if (direction === 'hoz' && level === 1) {",
                        "                    const avaliableKey = this.getAvailableKey(pos, true);",
                        "                    if (avaliableKey) {",
                        "                        focusedKey = avaliableKey;",
                        "                    }",
                        "                } else if (level > 1) {",
                        "                    const parentKey = this.getParentKey(pos);",
                        "                    this.handleOpen(parentKey, false);",
                        "                    focusedKey = parentKey;",
                        "                }",
                        "                break;",
                        "            }",
                        "            case KEYCODE.ESC:",
                        "                if (level > 1) {",
                        "                    const parentKey = this.getParentKey(pos);",
                        "                    this.handleOpen(parentKey, false);",
                        "                    focusedKey = parentKey;",
                        "                }",
                        "                break;",
                        "",
                        "            case KEYCODE.TAB:",
                        "                focusedKey = null;",
                        "                break;",
                        "            default:",
                        "                break;",
                        "        }",
                        "",
                        "        if (focusedKey !== this.state.focusedKey) {",
                        "            if (!('focusedKey' in this.props)) {",
                        "                this.setState({",
                        "                    focusedKey",
                        "                });",
                        "            }",
                        "",
                        "            this.props.onItemKeyDown(focusedKey, item, e);",
                        "            this.props.onItemFocus(focusedKey, e);",
                        "        }",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, className, direction, hozAlign, header, footer, selectMode, rtl } = this.props;",
                        "        const others = pickOthers(Object.keys(Menu.propTypes), this.props);",
                        "",
                        "        const newClassName = cx({",
                        "            [`${prefix}menu`]: true,",
                        "            [`${prefix}ver`]: direction === 'ver',",
                        "            [`${prefix}hoz`]: direction === 'hoz',",
                        "            [className]: !!className",
                        "        });",
                        "",
                        "        const role = direction === 'hoz' ? 'menubar' : 'menu';",
                        "        const headerElement = header ? <li className={`${prefix}menu-header`}>{header}</li> : null;",
                        "        const itemsElement = header || footer ?  <ul className={`${prefix}menu-content`}>{this.newChildren}</ul> : this.newChildren;",
                        "        const footerElement = footer ? <li className={`${prefix}menu-footer`}>{footer}</li> : null;",
                        "        const shouldWrapItemsAndFooter = hozAlign === 'right' && !!header;",
                        "",
                        "        if (rtl) {",
                        "            others.dir = 'rtl';",
                        "        }",
                        "",
                        "        return (",
                        "            <ul role={role} onBlur={this.onBlur} className={newClassName} onKeyDown={this.handleEnter} aria-multiselectable={selectMode === 'multiple'} {...others}>",
                        "                {headerElement}",
                        "                {shouldWrapItemsAndFooter ?",
                        "                    <div className={`${prefix}menu-hoz-right`}>",
                        "                        {itemsElement}",
                        "                        {footerElement}",
                        "                    </div> : null",
                        "                }",
                        "                {!shouldWrapItemsAndFooter ? itemsElement : null}",
                        "                {!shouldWrapItemsAndFooter ? footerElement : null}",
                        "            </ul>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "popup-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Icon from '../../icon';",
                        "import Overlay from '../../overlay';",
                        "import { func, obj, dom } from '../../util';",
                        "import Item from './item';",
                        "import SelectableItem from './selectable-item';",
                        "",
                        "const { bindCtx } = func;",
                        "const { setStyle } = dom;",
                        "const Popup = Overlay.Popup;",
                        "",
                        "/**",
                        " * Menu.PopupItem",
                        " * @order 2",
                        " */",
                        "export default class PopupItem extends Component {",
                        "    static menuChildType = 'submenu';",
                        "",
                        "    static propTypes = {",
                        "        _key: PropTypes.string,",
                        "        root: PropTypes.object,",
                        "        level: PropTypes.number,",
                        "        hasSubMenu: PropTypes.bool,",
                        "        rtl: PropTypes.bool,",
                        "        selectable: PropTypes.bool,",
                        "        /**",
                        "         * 标签内容",
                        "         */",
                        "        label: PropTypes.node,",
                        "        /**",
                        "         * 自定义弹层内容",
                        "         */",
                        "        children: PropTypes.node,",
                        "        className: PropTypes.string,",
                        "        triggerType: PropTypes.oneOf(['click', 'hover']),",
                        "        align: PropTypes.oneOf(['outside', 'follow']),",
                        "        autoWidth: PropTypes.bool",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        selectable: false",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        bindCtx(this, [ 'handleOpen', 'handlePopupOpen', 'handlePopupClose', 'getPopup']);",
                        "    }",
                        "",
                        "    getPopup(ref) {",
                        "        this.popup = ref;",
                        "    }",
                        "",
                        "    getOpen() {",
                        "        const { _key, root } = this.props;",
                        "        const { openKeys } = root.state;",
                        "",
                        "        return openKeys.indexOf(_key) > -1;",
                        "    }",
                        "",
                        "    getPopupProps() {",
                        "        let { popupProps } = this.props.root.props;",
                        "        if (typeof popupProps === 'function') {",
                        "            popupProps = popupProps(this.props);",
                        "        }",
                        "        return popupProps;",
                        "    }",
                        "",
                        "    handleOpen(open, triggerType, e) {",
                        "        const { _key, root } = this.props;",
                        "        root.handleOpen(_key, open, triggerType, e);",
                        "",
                        "        const popupProps = this.popupProps;",
                        "        popupProps.onVisibleChange && popupProps.onVisibleChange(open, triggerType, e);",
                        "    }",
                        "",
                        "    handlePopupOpen() {",
                        "        const { root, level, align, autoWidth } = this.props;",
                        "        const { popupAutoWidth: rootPopupAutoWidth, popupAlign: rootPopupAlign, direction } = root.props;",
                        "        const popupAlign = align || rootPopupAlign;",
                        "        const popupAutoWidth = 'autoWidth' in this.props ? autoWidth : rootPopupAutoWidth;",
                        "        const itemNode = findDOMNode(this);",
                        "        const menuNode = itemNode.parentNode;",
                        "        this.popupNode = this.popup.getInstance().overlay.getInstance().getContentNode();",
                        "        root.popupNodes.push(this.popupNode);",
                        "",
                        "        if (popupAutoWidth) {",
                        "            const targetNode = direction === 'hoz' && level === 1 ? itemNode : menuNode;",
                        "",
                        "            if (targetNode.offsetWidth > this.popupNode.offsetWidth) {",
                        "                setStyle(this.popupNode, 'width', `${targetNode.offsetWidth}px`);",
                        "            }",
                        "        }",
                        "        if (popupAlign === 'outside' && !(direction === 'hoz' && level === 1)) {",
                        "            setStyle(this.popupNode, 'height', `${menuNode.offsetHeight}px`);",
                        "        }",
                        "        // removeClass(this.popupNode, `${prefix}hide`);",
                        "",
                        "        const popupProps = this.popupProps;",
                        "        popupProps.onOpen && popupProps.onOpen();",
                        "    }",
                        "",
                        "    handlePopupClose() {",
                        "        const { root } = this.props;",
                        "        const popupNodes = root.popupNodes;",
                        "        const index = popupNodes.indexOf(this.popupNode);",
                        "        index > -1 && popupNodes.splice(index, 1);",
                        "",
                        "        const popupProps = this.popupProps;",
                        "        popupProps.onClose && popupProps.onClose();",
                        "    }",
                        "",
                        "    renderItem(selectable, children, others) {",
                        "        const { _key, root, level, label, className } = this.props;",
                        "        const { prefix } = root.props;",
                        "        const NewItem = selectable ? SelectableItem : Item;",
                        "        const open = this.getOpen();",
                        "",
                        "        const itemProps = {",
                        "            'aria-haspopup': true,",
                        "            'aria-expanded': open,",
                        "            _key,",
                        "            root,",
                        "            level,",
                        "            type: 'submenu'",
                        "        };",
                        "        if (open) {",
                        "            itemProps.className = cx({",
                        "                [`${prefix}opened`]: true,",
                        "                [className]: !!className",
                        "            });",
                        "        } else {",
                        "            itemProps.className = className;",
                        "        }",
                        "",
                        "        return (",
                        "            <NewItem {...itemProps} {...others}>",
                        "                <span className={`${prefix}menu-item-text`}>{label}</span>",
                        "                {children}",
                        "            </NewItem>",
                        "        );",
                        "    }",
                        "",
                        "    renderPopup(trigger, triggerType, positionProps, children) {",
                        "        const { root, level, selectable } = this.props;",
                        "        const { direction } = root.props;",
                        "        this.popupProps = this.getPopupProps();",
                        "        const open = this.getOpen();",
                        "",
                        "        if (direction === 'hoz' && level === 1 && selectable) {",
                        "            positionProps.target = () => findDOMNode(this);",
                        "        }",
                        "",
                        "        return (",
                        "            <Popup ref={this.getPopup}",
                        "                {...positionProps}",
                        "                {...this.popupProps}",
                        "                canCloseByEsc={false}",
                        "                trigger={trigger}",
                        "                triggerType={triggerType}",
                        "                visible={open}",
                        "                onVisibleChange={this.handleOpen}",
                        "                onOpen={this.handlePopupOpen}",
                        "                onClose={this.handlePopupClose}>",
                        "                {children}",
                        "            </Popup>",
                        "        );",
                        "    }",
                        "",
                        "    render() {",
                        "        const { root, level, hasSubMenu, selectable: selectableFromProps, children, triggerType, align, rtl } = this.props;",
                        "        const others = obj.pickOthers(Object.keys(PopupItem.propTypes), this.props);",
                        "        const { prefix, selectMode, direction, popupAlign: rootPopupAlign, triggerType: rootTriggerType } = root.props;",
                        "        const popupAlign = align || rootPopupAlign;",
                        "        const newTriggerType = triggerType || (hasSubMenu ? rootTriggerType : 'hover');",
                        "        const newChildren = Array.isArray(children) ? children[0] : children;",
                        "        // let newChildren = Array.isArray(children) ? children[0] : children;",
                        "        // newChildren = cloneElement(newChildren, {",
                        "        //     className: cx({",
                        "        //         [`${prefix}menu-popup-content`]: true,",
                        "        //         [newChildren.props.className]: !!newChildren.props.className,",
                        "        //         [`${prefix}hide`]: popupAutoWidth || popupAlign === 'outside'",
                        "        //     })",
                        "        // });",
                        "        const selectable = selectMode && selectableFromProps;",
                        "        const triggerIsIcon = selectable && newTriggerType === 'click';",
                        "        const open = this.getOpen();",
                        "",
                        "        const positionProps = {};",
                        "        let arrowProps;",
                        "",
                        "        if (direction === 'hoz' && level === 1) {",
                        "            positionProps.align = 'tl bl';",
                        "            positionProps.offset = [0, 0];",
                        "",
                        "            arrowProps = {",
                        "                type: 'arrow-down',",
                        "                className: cx({",
                        "                    [`${prefix}menu-hoz-icon-arrow`]: true,",
                        "                    [`${prefix}open`]: open",
                        "                }),",
                        "            };",
                        "        } else {",
                        "            if (popupAlign === 'outside') {",
                        "                positionProps.target = () => {",
                        "                    return findDOMNode(root);",
                        "                };",
                        "                positionProps.align = 'tl tr';",
                        "",
                        "                rtl ?",
                        "                    positionProps.offset = [-2, 0] :",
                        "                    positionProps.offset = [2, 0];",
                        "            } else {",
                        "                if (triggerIsIcon) {",
                        "                    positionProps.target = () => {",
                        "                        return findDOMNode(this);",
                        "                    };",
                        "                }",
                        "                positionProps.align = 'tl tr';",
                        "",
                        "                rtl ?",
                        "                    positionProps.offset = [2, -8] :",
                        "                    positionProps.offset = [-2, -8];",
                        "            }",
                        "",
                        "            arrowProps = {",
                        "                type: 'arrow-right',",
                        "                className: `${prefix}menu-icon-arrow`",
                        "            };",
                        "        }",
                        "",
                        "        const arrow = <Icon {...arrowProps} />;",
                        "        const trigger = triggerIsIcon ? arrow : this.renderItem(selectable, arrow, others);",
                        "        const popup = this.renderPopup(trigger, newTriggerType, positionProps, newChildren);",
                        "        return triggerIsIcon ? this.renderItem(selectable, popup, others) : popup;",
                        "    }",
                        "}"
                    ]
                },
                "radio-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import CheckableItem from './checkable-item';",
                        "",
                        "/**",
                        " * Menu.RadioItem",
                        " * @order 4",
                        " * @description 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑",
                        " */",
                        "export default class RadioItem extends Component {",
                        "    static menuChildType = 'item';",
                        "",
                        "    static propTypes = {",
                        "        /**",
                        "         * 是否选中",
                        "         */",
                        "        checked: PropTypes.bool,",
                        "        /**",
                        "         * 是否禁用",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 选中或取消选中触发的回调函数",
                        "         * @param {Boolean} checked 是否选中",
                        "         * @param {Object} event 选中事件对象",
                        "         */",
                        "        onChange: PropTypes.func,",
                        "        /**",
                        "         * 帮助文本",
                        "         */",
                        "        helper: PropTypes.node,",
                        "        /**",
                        "         * 标签内容",
                        "         */",
                        "        children: PropTypes.node",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        checked: false,",
                        "        disabled: false,",
                        "        onChange: () => {}",
                        "    };",
                        "",
                        "    render() {",
                        "        return <CheckableItem role=\"menuitemradio\" checkType=\"radio\" {...this.props} />;",
                        "    }",
                        "}"
                    ]
                },
                "selectable-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Icon from '../../icon';",
                        "import { func, obj, KEYCODE } from '../../util';",
                        "import Item from './item';",
                        "",
                        "const { bindCtx } = func;",
                        "const { pickOthers } = obj;",
                        "",
                        "/**",
                        " * Menu.Item",
                        " * @order 0",
                        " */",
                        "export default class SelectableItem extends Component {",
                        "    static menuChildType = 'item';",
                        "",
                        "    static propTypes = {",
                        "        _key: PropTypes.string,",
                        "        root: PropTypes.object,",
                        "        selected: PropTypes.bool,",
                        "        onSelect: PropTypes.func,",
                        "        inlineIndent: PropTypes.number,",
                        "        /**",
                        "         * 是否禁用",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 帮助文本",
                        "         */",
                        "        helper: PropTypes.node,",
                        "        /**",
                        "         * 菜单项标签内容",
                        "         */",
                        "        children: PropTypes.node,",
                        "        className: PropTypes.string,",
                        "        onKeyDown: PropTypes.func,",
                        "        onClick: PropTypes.func,",
                        "        needIndent: PropTypes.bool,",
                        "        hasSelectedIcon: PropTypes.bool",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        disabled: false,",
                        "        needIndent: true",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        bindCtx(this, ['handleKeyDown', 'handleClick']);",
                        "    }",
                        "",
                        "    getSelected() {",
                        "        const { _key, root, selected } = this.props;",
                        "        const { selectMode } = root.props;",
                        "        const { selectedKeys } = root.state;",
                        "        return selected || (!!selectMode && selectedKeys.indexOf(_key) > -1);",
                        "    }",
                        "",
                        "    handleSelect(e) {",
                        "        const { _key, root, onSelect } = this.props;",
                        "        if (onSelect) {",
                        "            onSelect(!this.getSelected(), this, e);",
                        "        } else {",
                        "            root.handleSelect(_key, !this.getSelected(), this);",
                        "        }",
                        "    }",
                        "",
                        "    handleKeyDown(e) {",
                        "        if (e.keyCode === KEYCODE.SPACE) {",
                        "            this.handleSelect(e);",
                        "        }",
                        "",
                        "        this.props.onKeyDown && this.props.onKeyDown(e);",
                        "    }",
                        "",
                        "    handleClick(e) {",
                        "        this.handleSelect(e);",
                        "",
                        "        this.props.onClick && this.props.onClick(e);",
                        "    }",
                        "",
                        "    renderSelectedIcon(selected) {",
                        "        const { root, inlineIndent, needIndent, hasSelectedIcon } = this.props;",
                        "        const { prefix, hasSelectedIcon: rootSelectedIcon } = root.props;",
                        "",
                        "        return (",
                        "            ('hasSelectedIcon' in this.props ? hasSelectedIcon : rootSelectedIcon) && selected ?",
                        "                <Icon style={needIndent && inlineIndent > 0 ? { left: `${inlineIndent}px` } : null} className={`${prefix}menu-icon-selected`} type=\"select\" /> :",
                        "                null",
                        "        );",
                        "    }",
                        "",
                        "    render() {",
                        "        const { _key, root, className, disabled, helper, children, needIndent } = this.props;",
                        "        const { prefix } = root.props;",
                        "        const others = pickOthers(Object.keys(SelectableItem.propTypes), this.props);",
                        "        const selected = this.getSelected();",
                        "",
                        "        const newProps = {",
                        "            _key,",
                        "            root,",
                        "            disabled,",
                        "            type: 'item',",
                        "            className: cx({",
                        "                [`${prefix}selected`]: selected,",
                        "                [className]: !!className",
                        "            }),",
                        "            onKeyDown: this.handleKeyDown,",
                        "            onClick: !disabled ? this.handleClick : this.props.onClick,",
                        "            needIndent,",
                        "            'aria-selected': selected,",
                        "            ...others",
                        "        };",
                        "",
                        "        return (",
                        "            <Item {...newProps}>",
                        "                {this.renderSelectedIcon(selected)}",
                        "                <span className={`${prefix}menu-item-text`}>{children}</span>",
                        "                {helper ? <div className={`${prefix}menu-item-helper`}>{helper}</div> : null}",
                        "            </Item>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "sub-menu.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children, cloneElement } from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Animate from '../../animate';",
                        "import Icon from '../../icon';",
                        "import { func, obj } from '../../util';",
                        "import Item from './item';",
                        "import SelectabelItem from './selectable-item';",
                        "import PopupItem from './popup-item';",
                        "",
                        "const { Expand } = Animate;",
                        "const { bindCtx } = func;",
                        "",
                        "/**",
                        " * Menu.SubMenu",
                        " * @order 1",
                        " */",
                        "export default class SubMenu extends Component {",
                        "    static menuChildType = 'submenu';",
                        "",
                        "    static propTypes = {",
                        "        _key: PropTypes.string,",
                        "        root: PropTypes.object,",
                        "        level: PropTypes.number,",
                        "        groupIndent: PropTypes.number,",
                        "        /**",
                        "         * 标签内容",
                        "         */",
                        "        label: PropTypes.node,",
                        "        /**",
                        "         * 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效",
                        "         */",
                        "        selectable: PropTypes.bool,",
                        "        /**",
                        "         * 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性",
                        "         * @default Menu 的 mode 属性值",
                        "         */",
                        "        mode: PropTypes.oneOf(['inline', 'popup']),",
                        "        /**",
                        "         * 菜单项或下一级子菜单",
                        "         */",
                        "        children: PropTypes.node,",
                        "        onMouseEnter: PropTypes.func,",
                        "        onMouseLeave: PropTypes.func,",
                        "        subMenuContentClassName: PropTypes.string,",
                        "        triggerType: PropTypes.oneOf(['click', 'hover']),",
                        "        align: PropTypes.oneOf(['outside', 'follow']),",
                        "        parentMode: PropTypes.oneOf(['inline', 'popup'])",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        groupIndent: 0,",
                        "        selectable: false",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        bindCtx(this, [",
                        "            'handleMouseEnter', 'handleMouseLeave', 'handleClick',",
                        "            'handleOpen', 'afterLeave'",
                        "        ]);",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.itemNode = findDOMNode(this);",
                        "    }",
                        "",
                        "    afterLeave() {",
                        "        const { focused, root } = this.props;",
                        "        const { focusable } = root.props;",
                        "        if (focusable && focused) {",
                        "            this.itemNode.focus();",
                        "        }",
                        "    }",
                        "",
                        "    getOpen() {",
                        "        const { _key, root } = this.props;",
                        "        const { openKeys } = root.state;",
                        "",
                        "        return openKeys.indexOf(_key) > -1;",
                        "    }",
                        "",
                        "    handleMouseEnter(e) {",
                        "        this.handleOpen(true);",
                        "",
                        "        this.props.onMouseEnter && this.props.onMouseEnter(e);",
                        "    }",
                        "",
                        "    handleMouseLeave(e) {",
                        "        this.handleOpen(false);",
                        "",
                        "        this.props.onMouseLeave && this.props.onMouseLeave(e);",
                        "    }",
                        "",
                        "    handleClick(e) {",
                        "        const { root, selectable } = this.props;",
                        "        const { selectMode } = root.props;",
                        "        if (selectMode && selectable) {",
                        "            e.stopPropagation();",
                        "        }",
                        "",
                        "        const open = this.getOpen();",
                        "        this.handleOpen(!open);",
                        "    }",
                        "",
                        "    handleOpen(open, triggerType, e) {",
                        "        const { _key, root } = this.props;",
                        "        root.handleOpen(_key, open, triggerType, e);",
                        "    }",
                        "",
                        "    passParentToChildren(children) {",
                        "        const { mode, root } = this.props;",
                        "",
                        "        return Children.map(children, child => {",
                        "            return cloneElement(child, {",
                        "                parent: this,",
                        "                parentMode: mode || root.props.mode",
                        "            });",
                        "        });",
                        "    }",
                        "",
                        "    renderInline() {",
                        "        const { _key, level, root, className, selectable: selectableFromProps, label, children, subMenuContentClassName, triggerType: propsTriggerType, parentMode } = this.props;",
                        "        const { prefix, selectMode, triggerType: rootTriggerType, inlineArrowDirection, expandAnimation, rtl } = root.props;",
                        "        const triggerType = propsTriggerType || rootTriggerType;",
                        "        const open = this.getOpen();",
                        "        const others = obj.pickOthers(Object.keys(SubMenu.propTypes), this.props);",
                        "",
                        "        const liProps = {",
                        "            className: cx({",
                        "                [`${prefix}menu-sub-menu-wrapper`]: true,",
                        "                [className]: !!className",
                        "            })",
                        "        };",
                        "        const itemProps = {",
                        "            'aria-expanded': open,",
                        "            _key,",
                        "            level,",
                        "            root,",
                        "            type: 'submenu',",
                        "            component: 'div',",
                        "            parentMode",
                        "        };",
                        "        const arrorProps = {",
                        "            type: inlineArrowDirection === 'right' ? 'arrow-right' : 'arrow-down',",
                        "            className: cx({",
                        "                [`${prefix}menu-icon-arrow`]: true,",
                        "                [`${prefix}menu-icon-arrow-down`]: inlineArrowDirection === 'down',",
                        "                [`${prefix}menu-icon-arrow-right`]: inlineArrowDirection === 'right',",
                        "                [`${prefix}open`]: open",
                        "            })",
                        "        };",
                        "",
                        "        const selectable = !!selectMode && selectableFromProps;",
                        "        const NewItem = selectable ? SelectabelItem : Item;",
                        "",
                        "        if (triggerType === 'hover') {",
                        "            liProps.onMouseEnter = this.handleMouseEnter;",
                        "            liProps.onMouseLeave = this.handleMouseLeave;",
                        "        } else if (selectable) {",
                        "            arrorProps.onClick = this.handleClick;",
                        "        } else {",
                        "            itemProps.onClick = this.handleClick;",
                        "        }",
                        "        if (open) {",
                        "            itemProps.className = `${prefix}opened`;",
                        "        }",
                        "",
                        "        const newSubMenuContentClassName = cx({",
                        "            [`${prefix}menu-sub-menu`]: true,",
                        "            [subMenuContentClassName]: !!subMenuContentClassName",
                        "        });",
                        "",
                        "        const subMenu = open ? (",
                        "            <ul role=\"menu\" dir={rtl ? 'rtl' : undefined} ref=\"subMenu\" className={newSubMenuContentClassName}>",
                        "                {this.passParentToChildren(children)}",
                        "            </ul>",
                        "        ) : null;",
                        "",
                        "        return (",
                        "            <li {...others} {...liProps}>",
                        "                <NewItem {...itemProps}>",
                        "                    <span className={`${prefix}menu-item-text`}>{label}</span>",
                        "                    <Icon {...arrorProps} />",
                        "                </NewItem>",
                        "                {expandAnimation ? (",
                        "                    <Expand animationAppear={false} afterLeave={this.afterLeave}>",
                        "                        {subMenu}",
                        "                    </Expand>",
                        "                ) : subMenu}",
                        "",
                        "            </li>",
                        "        );",
                        "    }",
                        "",
                        "    renderPopup() {",
                        "        const { children, subMenuContentClassName, ...others } = this.props;",
                        "        const root = this.props.root;",
                        "        const { prefix, popupClassName, popupStyle, rtl } = root.props;",
                        "",
                        "        const newClassName = cx({",
                        "            [`${prefix}menu`]: true,",
                        "            [`${prefix}ver`]: true,",
                        "            [popupClassName]: !!popupClassName,",
                        "            [subMenuContentClassName]: !!subMenuContentClassName",
                        "        });",
                        "",
                        "        others.rtl = rtl;",
                        "",
                        "        return (",
                        "            <PopupItem {...others} hasSubMenu>",
                        "                <ul role=\"menu\" dir={rtl ? 'rtl' : undefined} className={newClassName} style={popupStyle}>",
                        "                    {this.passParentToChildren(children)}",
                        "                </ul>",
                        "            </PopupItem>",
                        "        );",
                        "    }",
                        "",
                        "    render() {",
                        "        const { mode, root } = this.props;",
                        "        const newMode = mode || root.props.mode;",
                        "",
                        "        return newMode === 'popup' ?",
                        "            this.renderPopup() :",
                        "            this.renderInline();",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        "menu-button": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import Button from '../button';",
                    "import Icon from '../icon';",
                    "import Menu from '../menu';",
                    "import Overlay from '../overlay';",
                    "import { obj, func } from '../util';",
                    "",
                    "const { Popup } = Overlay;",
                    "",
                    "/**",
                    " * MenuButton",
                    " */",
                    "class MenuButton extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 按钮上的文本内容",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 弹层是否与按钮宽度相同",
                    "         */",
                    "        autoWidth: PropTypes.bool,",
                    "        /**",
                    "         * 弹层触发方式",
                    "         */",
                    "        popupTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 弹层容器",
                    "         */",
                    "        popupContainer: PropTypes.func,",
                    "        /**",
                    "         * 弹层展开状态",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否展开",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层在显示和隐藏触发的事件",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层自定义样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层自定义样式类",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层属性透传",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        /**",
                    "         * 默认激活的菜单项（用法同 Menu 非受控）",
                    "         */",
                    "        defaultSelectedKeys: PropTypes.array,",
                    "        /**",
                    "         * 激活的菜单项（用法同 Menu 受控）",
                    "         */",
                    "        selectedKeys: PropTypes.array,",
                    "        /**",
                    "         * 菜单的选择模式，同 Menu",
                    "         */",
                    "        selectMode: PropTypes.string,",
                    "        /**",
                    "         * 点击菜单项后的回调，同 Menu",
                    "         */",
                    "        onItemClick: PropTypes.func,",
                    "        /**",
                    "         * 选择菜单后的回调，同 Menu",
                    "         */",
                    "        onSelect: PropTypes.func,",
                    "        /**",
                    "         * 菜单属性透传",
                    "         */",
                    "        menuProps: PropTypes.object,",
                    "        style: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "        children: PropTypes.any,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        autoWidth: true,",
                    "        popupTriggerType: 'click',",
                    "        onVisibleChange: func.noop,",
                    "        onItemClick: func.noop,",
                    "        onSelect: func.noop,",
                    "        defaultSelectedKeys: [],",
                    "        menuProps: {},",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        this.state = {",
                    "            selectedKeys: props.selectedKeys || props.defaultSelectedKeys,",
                    "            visible: props.visible || props.defaultVisible,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible,",
                    "            });",
                    "        }",
                    "",
                    "        if ('selectedKeys' in nextProps) {",
                    "            this.setState({",
                    "                selectedKeys: nextProps.selectedKeys,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    clickMenuItem = (key, ...others) => {",
                    "        this.props.onItemClick(key, ...others);",
                    "        this.onPopupVisibleChange(false, 'menuSelect');",
                    "    }",
                    "",
                    "    selectMenu = (keys, ...others) => {",
                    "        if (!('selectedKeys' in this.props)) {",
                    "            this.setState({",
                    "                selectedKeys: keys,",
                    "            });",
                    "        }",
                    "        this.props.onSelect(keys, ...others);",
                    "    }",
                    "",
                    "    onPopupOpen = () => {",
                    "        const button = findDOMNode(this);",
                    "        if (this.props.autoWidth && button && this.menu) {",
                    "            this.menu.style.width = `${button.offsetWidth}px`;",
                    "        }",
                    "    }",
                    "",
                    "    onPopupVisibleChange = (visible, type) => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible",
                    "            });",
                    "        }",
                    "        this.props.onVisibleChange(visible, type);",
                    "    }",
                    "",
                    "    _menuRefHandler = (ref) => {",
                    "        this.menu = findDOMNode(ref);",
                    "",
                    "        const refFn = this.props.menuProps.ref;",
                    "        if (typeof refFn === 'function') {",
                    "            refFn(ref);",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            style,",
                    "            className,",
                    "            label,",
                    "            popupTriggerType,",
                    "            popupContainer,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupProps,",
                    "            selectMode,",
                    "            menuProps,",
                    "            children,",
                    "            ...others",
                    "        } = this.props;",
                    "",
                    "        const state = this.state;",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}menu-btn`]: true,",
                    "            [`${prefix}expand`]: state.visible,",
                    "            opened: state.visible,",
                    "        }, className);",
                    "",
                    "        const popupClassNames = classnames({",
                    "            [`${prefix}menu-btn-popup`]: true,",
                    "        }, popupClassName);",
                    "",
                    "        const trigger = (<Button style={style} className={classNames} {...obj.pickOthers(MenuButton.propTypes, others)}>",
                    "            {label} <Icon type=\"arrow-down\" className={`${prefix}menu-btn-arrow`} />",
                    "        </Button>);",
                    "",
                    "        return (",
                    "            <Popup",
                    "                {...popupProps}",
                    "                visible={state.visible}",
                    "                onVisibleChange={this.onPopupVisibleChange}",
                    "                trigger={trigger}",
                    "                triggerType={popupTriggerType}",
                    "                container={popupContainer}",
                    "                onOpen={this.onPopupOpen}",
                    "                style={popupStyle}",
                    "                className={popupClassNames}",
                    "            >",
                    "                <Menu",
                    "                    {...menuProps}",
                    "                    ref={this._menuRefHandler}",
                    "                    selectedKeys={state.selectedKeys}",
                    "                    selectMode={selectMode}",
                    "                    onSelect={this.selectMenu}",
                    "                    onItemClick={this.clickMenuItem}>",
                    "                    {children}",
                    "                </Menu>",
                    "            </Popup>);",
                    "    }",
                    "}",
                    "",
                    "MenuButton.Item = Menu.Item;",
                    "MenuButton.Group = Menu.Group;",
                    "MenuButton.Divider = Menu.Divider;",
                    "",
                    "export default MenuButton;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"../button/scss/variable.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$menu-btn-prefix} {",
                    "    display: inline-block;",
                    "    box-shadow: none;",
                    "",
                    "    .#{$css-prefix}icon {",
                    "        transition: transform .3s cubic-bezier(.645, .045, .355, 1);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}expand .#{$css-prefix}menu-btn-arrow {",
                    "        transform: rotate(180deg);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-normal .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-pure-text-normal-icon-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-secondary .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-pure-text-secondary-icon-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-primary .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-pure-text-primary-icon-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-text.#{$css-prefix}btn-normal .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-text-text-normal-icon-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-text.#{$css-prefix}btn-primary .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-text-text-primary-icon-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-ghost.#{$css-prefix}btn-light .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-ghost-light-icon-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-ghost.#{$css-prefix}btn-dark .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-ghost-dark-icon-color;",
                    "    }",
                    "",
                    "    &.disabled .#{$css-prefix}menu-btn-arrow,",
                    "    &[disabled] .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-disabled-icon-color;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}btn-text.disabled .#{$css-prefix}menu-btn-arrow,",
                    "    &.#{$css-prefix}btn-text[disabled] .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-disabled-icon-color;",
                    "    }",
                    "",
                    "    &[disabled].#{$css-prefix}btn-ghost.#{$css-prefix}btn-dark .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-ghost-dark-disabled-icon-color;",
                    "    }",
                    "",
                    "    &[disabled].#{$css-prefix}btn-ghost.#{$css-prefix}btn-light .#{$css-prefix}menu-btn-arrow {",
                    "        color: $menu-btn-ghost-light-disabled-icon-color;",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../button/style.js';",
                    "import '../menu/style.js';",
                    "import '../overlay/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// menu-button mixins",
                        "// --------------------------------------------------"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module menu-button: 菜单按钮",
                        "/// @tag MenuButton",
                        "/// @category component",
                        "/// @family general",
                        "/// @varPrefix $menu-btn-",
                        "/// @classPrefix {prefix}-menu-btn",
                        "////",
                        "",
                        "// menu-button variables",
                        "// --------------------------------------------------",
                        "",
                        "// prefix",
                        "$menu-btn-prefix: \".#{$css-prefix}menu-btn\";",
                        "",
                        "/// icon",
                        "/// @namespace statement/disabled",
                        "$menu-btn-disabled-icon-color: $color-text1-1 !default;",
                        "",
                        "/// ghost icon",
                        "$menu-btn-ghost-light-disabled-icon-color: $btn-ghost-light-color-disabled;",
                        "",
                        "/// ghost icon",
                        "$menu-btn-ghost-dark-disabled-icon-color: $btn-ghost-dark-color-disabled;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal",
                        "$menu-btn-pure-text-normal-icon-color: $color-text1-2 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal",
                        "$menu-btn-pure-text-primary-icon-color: $color-white !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal",
                        "$menu-btn-pure-text-secondary-icon-color: $color-brand1-6 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal",
                        "$menu-btn-text-text-normal-icon-color: $color-text1-4 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/primary",
                        "$menu-btn-text-text-primary-icon-color: $color-link-1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/light",
                        "$menu-btn-ghost-light-icon-color: $color-text1-4 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/dark",
                        "$menu-btn-ghost-dark-icon-color: $color-white !default;"
                    ]
                }
            }
        },
        "message": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Message from './message';",
                    "import toast from './toast';",
                    "",
                    "Message.show = toast.show;",
                    "Message.success = toast.success;",
                    "Message.warning = toast.warning;",
                    "Message.error = toast.error;",
                    "Message.notice = toast.notice;",
                    "Message.help = toast.help;",
                    "Message.loading = toast.loading;",
                    "Message.hide = toast.hide;",
                    "",
                    "export default ConfigProvider.config(Message, {",
                    "    componentName: 'Message'",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    ".#{$css-prefix}message {",
                    "    @include box-sizing;",
                    "    @include message-bounding();",
                    "",
                    "    .#{$css-prefix}message-wrapper {",
                    "        position: fixed;",
                    "        left: 50%;",
                    "    }",
                    "",
                    "    .#{$css-prefix}message-close {",
                    "        color: $message-close-icon-color;",
                    "        font-size: 0;",
                    "        position: absolute;",
                    "",
                    "        .#{$css-prefix}icon-close {",
                    "            @include icon-square-size($message-close-icon-size);",
                    "        }",
                    "",
                    "        &:hover {",
                    "            color: $message-hover-close-icon-color;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}message-success {",
                    "        &.#{$css-prefix}inline {",
                    "            @include message-shape(",
                    "                inline,",
                    "                $message-success-color-title-inline,",
                    "                $message-success-color-content-inline,",
                    "                $message-success-color-icon-inline,",
                    "                $message-success-color-bg-inline,",
                    "                $message-success-color-border-inline,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}addon {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-success-color-title-addon,",
                    "                $message-success-color-content-addon,",
                    "                $message-success-color-icon-addon,",
                    "                transparent,",
                    "                transparent,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}toast {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-success-color-title-toast,",
                    "                $message-success-color-content-toast,",
                    "                $message-success-color-icon-toast,",
                    "                $message-success-color-bg-toast,",
                    "                $message-success-color-border-toast,",
                    "                $message-border-radius-toast,",
                    "                $message-shadow-toast",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}message-warning {",
                    "        &.#{$css-prefix}inline {",
                    "            @include message-shape(",
                    "                inline,",
                    "                $message-warning-color-title-inline,",
                    "                $message-warning-color-content-inline,",
                    "                $message-warning-color-icon-inline,",
                    "                $message-warning-color-bg-inline,",
                    "                $message-warning-color-border-inline,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}addon {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-warning-color-title-addon,",
                    "                $message-warning-color-content-addon,",
                    "                $message-warning-color-icon-addon,",
                    "                transparent,",
                    "                transparent,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}toast {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-warning-color-title-toast,",
                    "                $message-warning-color-content-toast,",
                    "                $message-warning-color-icon-toast,",
                    "                $message-warning-color-bg-toast,",
                    "                $message-warning-color-border-toast,",
                    "                $message-border-radius-toast,",
                    "                $message-shadow-toast",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}message-error {",
                    "        &.#{$css-prefix}inline {",
                    "            @include message-shape(",
                    "                inline,",
                    "                $message-error-color-title-inline,",
                    "                $message-error-color-content-inline,",
                    "                $message-error-color-icon-inline,",
                    "                $message-error-color-bg-inline,",
                    "                $message-error-color-border-inline,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}addon {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-error-color-title-addon,",
                    "                $message-error-color-content-addon,",
                    "                $message-error-color-icon-addon,",
                    "                transparent,",
                    "                transparent,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}toast {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-error-color-title-toast,",
                    "                $message-error-color-content-toast,",
                    "                $message-error-color-icon-toast,",
                    "                $message-error-color-bg-toast,",
                    "                $message-error-color-border-toast,",
                    "                $message-border-radius-toast,",
                    "                $message-shadow-toast",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}message-notice {",
                    "        &.#{$css-prefix}inline {",
                    "            @include message-shape(",
                    "                inline,",
                    "                $message-notice-color-title-inline,",
                    "                $message-notice-color-content-inline,",
                    "                $message-notice-color-icon-inline,",
                    "                $message-notice-color-bg-inline,",
                    "                $message-notice-color-border-inline,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}addon {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-notice-color-title-addon,",
                    "                $message-notice-color-content-addon,",
                    "                $message-notice-color-icon-addon,",
                    "                transparent,",
                    "                transparent,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}toast {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-notice-color-title-toast,",
                    "                $message-notice-color-content-toast,",
                    "                $message-notice-color-icon-toast,",
                    "                $message-notice-color-bg-toast,",
                    "                $message-notice-color-border-toast,",
                    "                $message-border-radius-toast,",
                    "                $message-shadow-toast",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}message-help {",
                    "        &.#{$css-prefix}inline {",
                    "            @include message-shape(",
                    "                inline,",
                    "                $message-help-color-title-inline,",
                    "                $message-help-color-content-inline,",
                    "                $message-help-color-icon-inline,",
                    "                $message-help-color-bg-inline,",
                    "                $message-help-color-border-inline,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}addon {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-help-color-title-addon,",
                    "                $message-help-color-content-addon,",
                    "                $message-help-color-icon-addon,",
                    "                transparent,",
                    "                transparent,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}toast {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-help-color-title-toast,",
                    "                $message-help-color-content-toast,",
                    "                $message-help-color-icon-toast,",
                    "                $message-help-color-bg-toast,",
                    "                $message-help-color-border-toast,",
                    "                $message-border-radius-toast,",
                    "                $message-shadow-toast",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}message-loading {",
                    "        &.#{$css-prefix}inline {",
                    "            @include message-shape(",
                    "                inline,",
                    "                $message-loading-color-title-inline,",
                    "                $message-loading-color-content-inline,",
                    "                $message-loading-color-icon-inline,",
                    "                $message-loading-color-bg-inline,",
                    "                $message-loading-color-border-inline,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}addon {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-loading-color-title-addon,",
                    "                $message-loading-color-content-addon,",
                    "                $message-loading-color-icon-addon,",
                    "                transparent,",
                    "                transparent,",
                    "                $message-border-radius,",
                    "                none",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}toast {",
                    "            @include message-shape(",
                    "                toast,",
                    "                $message-loading-color-title-toast,",
                    "                $message-loading-color-content-toast,",
                    "                $message-loading-color-icon-toast,",
                    "                $message-loading-color-bg-toast,",
                    "                $message-loading-color-border-toast,",
                    "                $message-border-radius-toast,",
                    "                $message-shadow-toast",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        @include message-size(",
                    "            $borderWidth: $message-size-m-border-width,",
                    "            $padding: $message-size-m-padding,",
                    "            $titlePadding: $message-size-m-title-content-padding,",
                    "            $titleFontSize: $message-size-m-title-font,",
                    "            $contentPadding: $message-size-m-title-content-padding,",
                    "            $contentMarginTop: $message-size-m-content-margin-top,",
                    "            $contentFontSize: $message-size-m-content-font,",
                    "            $iconSize: $message-size-m-icon",
                    "        );",
                    "        &.#{$css-prefix}title-content {",
                    "            @include vertial-align-middle(",
                    "                $message-size-m-title-font,",
                    "                $message-size-m-icon,",
                    "                'title'",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}only-content {",
                    "            @include vertial-align-middle(",
                    "                $message-size-m-content-font,",
                    "                $message-size-m-icon,",
                    "                'content'",
                    "            );",
                    "        }",
                    "",
                    "        .#{$css-prefix}message-close {",
                    "            top: $message-size-m-close-top;",
                    "            right: $message-size-m-close-right;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        @include message-size(",
                    "            $borderWidth: $message-size-l-border-width,",
                    "            $padding: $message-size-l-padding,",
                    "            $titlePadding: $message-size-l-title-content-padding,",
                    "            $titleFontSize: $message-size-l-title-font,",
                    "            $contentPadding: $message-size-l-title-content-padding,",
                    "            $contentMarginTop: $message-size-l-content-margin-top,",
                    "            $contentFontSize: $message-size-l-content-font,",
                    "            $iconSize: $message-size-l-icon",
                    "        );",
                    "        line-height: 18px;",
                    "",
                    "        &.#{$css-prefix}title-content {",
                    "            @include vertial-align-middle(",
                    "                $message-size-l-title-font,",
                    "                $message-size-l-icon,",
                    "                'title'",
                    "            );",
                    "        }",
                    "        &.#{$css-prefix}only-content {",
                    "            @include vertial-align-middle(",
                    "                $message-size-l-content-font,",
                    "                $message-size-l-icon,",
                    "                'content'",
                    "            );",
                    "        }",
                    "",
                    "        .#{$css-prefix}message-close {",
                    "            top: $message-size-l-close-top;",
                    "            right: $message-size-l-close-right;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "@import \"./rtl.scss\";"
                ]
            },
            "message.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Icon from '../icon';",
                    "import Animate from '../animate';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "const TYPE_MAPS = {",
                    "    success: 'success',",
                    "    warning: 'warning',",
                    "    error: 'error',",
                    "    notice: 'prompt',",
                    "    help: 'help',",
                    "    loading: 'loading'",
                    "};",
                    "",
                    "const noop = () => {};",
                    "",
                    "/**",
                    " * Message",
                    " */",
                    "class Message extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 反馈类型",
                    "         */",
                    "        type: PropTypes.oneOf(['success', 'warning', 'error', 'notice', 'help', 'loading']),",
                    "        /**",
                    "         * 反馈外观",
                    "         */",
                    "        shape: PropTypes.oneOf(['inline', 'addon', 'toast']),",
                    "        /**",
                    "         * 反馈大小",
                    "         */",
                    "        size: PropTypes.oneOf(['medium', 'large']),",
                    "        /**",
                    "         * 标题",
                    "         */",
                    "        title: PropTypes.node,",
                    "        /**",
                    "         * 内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 当前是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 显示的图标类型，会覆盖内部设置的IconType",
                    "         */",
                    "        iconType: PropTypes.string,",
                    "        /**",
                    "         * 显示关闭按钮",
                    "         */",
                    "        closeable: PropTypes.bool,",
                    "        /**",
                    "         * 关闭按钮的回调",
                    "         */",
                    "        onClose: PropTypes.func,",
                    "        /**",
                    "         * 关闭之后调用的函数",
                    "         */",
                    "        afterClose: PropTypes.func,",
                    "        /**",
                    "         * 是否开启展开收起动画",
                    "         */",
                    "        animation: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        type: 'success',",
                    "        shape: 'inline',",
                    "        size: 'medium',",
                    "        defaultVisible: true,",
                    "        closeable: false,",
                    "        onClose: noop,",
                    "        afterClose: noop,",
                    "        animation: true",
                    "    };",
                    "",
                    "    state = {",
                    "        visible: typeof this.props.visible === 'undefined' ? this.props.defaultVisible : this.props.visible",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onClose = () => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible: false",
                    "            });",
                    "        }",
                    "        this.props.onClose(false);",
                    "    }",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const { prefix, pure, className, type, shape, size, title, children, defaultVisible, visible: propsVisible, iconType: icon, closeable, onClose, afterClose, animation, rtl, ...others } = this.props;",
                    "        /* eslint-enable */",
                    "        const { visible } = this.state;",
                    "        const messagePrefix = `${prefix}message`;",
                    "        const iconType = icon || TYPE_MAPS[type];",
                    "        const classes = classNames({",
                    "            [messagePrefix]: true,",
                    "            [`${prefix}message-${type}`]: type,",
                    "            [`${prefix}${shape}`]: shape,",
                    "            [`${prefix}${size}`]: size,",
                    "            [`${prefix}title-content`]: !!title,",
                    "            [`${prefix}only-content`]: !title && !!children,",
                    "            [className]: className",
                    "        });",
                    "",
                    "        const newChildren = visible ?",
                    "            (<div role=\"alert\" {...others} className={classes} dir={rtl ? 'rtl' : undefined}>",
                    "                {closeable ?",
                    "                    <a role=\"button\" href=\"javascript:;\" className={`${messagePrefix}-close`} onClick={this.onClose}>",
                    "                        <Icon type=\"close\" />",
                    "                    </a> : null}",
                    "                <Icon className={`${messagePrefix}-symbol`} type={iconType} />",
                    "                {title ? <div className={`${messagePrefix}-title`}>{title}</div> : null}",
                    "                {children ? <div className={`${messagePrefix}-content`}>{children}</div> : null}",
                    "            </div>) : null;",
                    "",
                    "        if (animation) {",
                    "            return <Animate.Expand animationAppear={false} afterLeave={afterClose}>{newChildren}</Animate.Expand>;",
                    "        }",
                    "",
                    "        return newChildren;",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Message);"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    ".#{$css-prefix}message[dir=\"rtl\"] {",
                    "    .#{$css-prefix}message-symbol {",
                    "        float: right;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        .#{$css-prefix}message-title {",
                    "            padding: 0 $message-size-m-title-content-padding-left + $message-size-m-icon 0 $message-size-m-title-content-padding-right;",
                    "        }",
                    "        .#{$css-prefix}message-close {",
                    "            left: $message-size-m-close-right;",
                    "            right: auto;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        .#{$css-prefix}message-title {",
                    "            padding: 0 $message-size-l-title-content-padding-left + $message-size-l-icon 0 $message-size-l-title-content-padding-right;",
                    "        }",
                    "        .#{$css-prefix}message-close {",
                    "            left: $message-size-l-close-right;",
                    "            right: auto;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../animate/style.js';",
                    "import '../overlay/style.js';",
                    "import './main.scss';"
                ]
            },
            "toast.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import ReactDOM from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import Overlay from '../overlay';",
                    "import ConfigProvider from '../config-provider';",
                    "import { guid } from '../util';",
                    "import Message from './message';",
                    "",
                    "const { config } = ConfigProvider;",
                    "",
                    "let instance;",
                    "const timeouts = {};",
                    "",
                    "class Mask extends React.Component {",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string",
                    "    };",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        type: PropTypes.string,",
                    "        title: PropTypes.node,",
                    "        content: PropTypes.node,",
                    "        align: PropTypes.string,",
                    "        offset: PropTypes.array,",
                    "        hasMask: PropTypes.bool,",
                    "        afterClose: PropTypes.func,",
                    "        animation: PropTypes.oneOfType([",
                    "            PropTypes.object,",
                    "            PropTypes.bool,",
                    "        ]),",
                    "        overlayProps: PropTypes.object,",
                    "        onClose: PropTypes.func,",
                    "        timeoutId: PropTypes.string",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        align: 'tc tc',",
                    "        offset: [0, 30],",
                    "        hasMask: false,",
                    "        animation: {",
                    "            in: 'pulse',",
                    "            out: 'zoomOut'",
                    "        }",
                    "    };",
                    "",
                    "    state = {",
                    "        visible: true",
                    "    };",
                    "",
                    "    componentWillUnmount() {",
                    "        const { timeoutId } = this.props;",
                    "",
                    "        if (timeoutId in timeouts) {",
                    "            const timeout = timeouts[timeoutId];",
                    "            clearTimeout(timeout);",
                    "            delete timeouts[timeoutId];",
                    "        }",
                    "    }",
                    "",
                    "    handleClose = (silent = false) => {",
                    "        this.setState({",
                    "            visible: false",
                    "        });",
                    "",
                    "        if (!silent) {",
                    "            this.props.onClose && this.props.onClose();",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const { prefix, type, title, content, align, offset, hasMask, afterClose, animation, overlayProps, timeoutId, ...others } = this.props;",
                    "        /* eslint-enable */",
                    "        const { visible } = this.state;",
                    "        return (",
                    "            <Overlay {...overlayProps} prefix={prefix} animation={animation} visible={visible} align={align} offset={offset} hasMask={hasMask} afterClose={afterClose}>",
                    "                <Message {...others} prefix={prefix} visible type={type} shape=\"toast\" title={title} className={`${prefix}message-wrapper`} onClose={this.handleClose}>",
                    "                    {content}",
                    "                </Message>",
                    "            </Overlay>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "const NewMask = config(Mask);",
                    "",
                    "const create = props => {",
                    "    /* eslint-disable no-unused-vars */",
                    "    const { duration, afterClose, ...others } = props;",
                    "    /* eslint-enable no-unused-vars */",
                    "",
                    "    const div = document.createElement('div');",
                    "    document.body.appendChild(div);",
                    "    const closeChain = function() {",
                    "        ReactDOM.unmountComponentAtNode(div);",
                    "        document.body.removeChild(div);",
                    "        afterClose && afterClose();",
                    "    };",
                    "",
                    "    const newContext = ConfigProvider.getContext();",
                    "",
                    "    let mask, myRef, destroyed = false;",
                    "    const destroy = () => {",
                    "        const inc = mask && mask.getInstance();",
                    "        inc && inc.handleClose(true);",
                    "        destroyed = true;",
                    "    };",
                    "",
                    "    ReactDOM.render(",
                    "        <ConfigProvider {...newContext}>",
                    "            <NewMask afterClose={closeChain} {...others} ref={ref => {",
                    "                myRef = ref;",
                    "            }}/>",
                    "        </ConfigProvider>",
                    "        , div, function() {",
                    "            mask = myRef;",
                    "            if (mask && destroyed) {",
                    "                destroy();",
                    "            }",
                    "        });",
                    "",
                    "    return {",
                    "        component: mask,",
                    "        destroy",
                    "    };",
                    "};",
                    "",
                    "function handleConfig(config, type) {",
                    "    let newConfig = {};",
                    "",
                    "    if (typeof config === 'string' || React.isValidElement(config)) {",
                    "        newConfig.title = config;",
                    "    } else if (isObject(config)) {",
                    "        newConfig = { ...config };",
                    "    }",
                    "    if (typeof newConfig.duration !== 'number') {",
                    "        newConfig.duration = 3000;",
                    "    }",
                    "    if (type) {",
                    "        newConfig.type = type;",
                    "    }",
                    "",
                    "    return newConfig;",
                    "}",
                    "",
                    "function isObject(obj) {",
                    "    return {}.toString.call(obj) === '[object Object]';",
                    "}",
                    "",
                    "function open(config, type) {",
                    "    close();",
                    "    config = handleConfig(config, type);",
                    "    const timeoutId = guid();",
                    "    instance = create({...config, timeoutId});",
                    "",
                    "    if (config.duration > 0) {",
                    "        const timeout = setTimeout(close, config.duration);",
                    "        timeouts[timeoutId] = timeout;",
                    "    }",
                    "}",
                    "",
                    "function close() {",
                    "    if (instance) {",
                    "        instance.destroy();",
                    "        instance = null;",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 创建提示弹层",
                    " * @exportName show",
                    " * @param {Object} props 属性对象",
                    " */",
                    "function show(config) {",
                    "    open(config);",
                    "}",
                    "",
                    "/**",
                    " * 关闭提示弹层",
                    " * @exportName hide",
                    " */",
                    "function hide() {",
                    "    close();",
                    "}",
                    "",
                    "/**",
                    " * 创建成功提示弹层",
                    " * @exportName success",
                    " * @param {Object} props 属性对象",
                    " */",
                    "function success(config) {",
                    "    open(config, 'success');",
                    "}",
                    "",
                    "/**",
                    " * 创建警告提示弹层",
                    " * @exportName warning",
                    " * @param {Object} props 属性对象",
                    " */",
                    "function warning(config) {",
                    "    open(config, 'warning');",
                    "}",
                    "",
                    "/**",
                    " * 创建错误提示弹层",
                    " * @exportName error",
                    " * @param {Object} props 属性对象",
                    " */",
                    "function error(config) {",
                    "    open(config, 'error');",
                    "}",
                    "",
                    "/**",
                    " * 创建帮助提示弹层",
                    " * @exportName help",
                    " * @param {Object} props 属性对象",
                    " */",
                    "function help(config) {",
                    "    open(config, 'help');",
                    "}",
                    "",
                    "/**",
                    " * 创建加载中提示弹层",
                    " * @exportName loading",
                    " * @param {Object} props 属性对象",
                    " */",
                    "function loading(config) {",
                    "    open(config, 'loading');",
                    "}",
                    "",
                    "/**",
                    " * 创建通知提示弹层",
                    " * @exportName notice",
                    " * @param {Object} props 属性对象",
                    " */",
                    "function notice(config) {",
                    "    open(config, 'notice');",
                    "}",
                    "",
                    "export default {",
                    "    show,",
                    "    hide,",
                    "    success,",
                    "    warning,",
                    "    error,",
                    "    help,",
                    "    loading,",
                    "    notice",
                    "};"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// message mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin message-bounding() {",
                        "    @include clearfix();",
                        "    position: relative;",
                        "    display: block;",
                        "    vertical-align: baseline;",
                        "}",
                        "",
                        "@mixin message-size(",
                        "    $borderWidth,",
                        "    $padding,",
                        "    $titlePadding,",
                        "    $titleFontSize,",
                        "    $contentPadding,",
                        "    $contentMarginTop,",
                        "    $contentFontSize,",
                        "    $iconSize",
                        ") {",
                        "    border-width: $borderWidth;",
                        "    padding: $padding;",
                        "",
                        "    .#{$css-prefix}message-symbol {",
                        "        float: left;",
                        "        @include icon-size($iconSize);",
                        "        line-height: $iconSize;",
                        "    }",
                        "    .#{$css-prefix}message-title {",
                        "        padding: $titlePadding;",
                        "        font-size: $titleFontSize;",
                        "        line-height: $titleFontSize;",
                        "    }",
                        "    .#{$css-prefix}message-content {",
                        "        margin-top: $contentMarginTop;",
                        "        padding: $contentPadding;",
                        "        font-size: $contentFontSize;",
                        "        line-height: $contentFontSize;",
                        "    }",
                        "",
                        "    .#{$css-prefix}message-symbol + .#{$css-prefix}message-content {",
                        "        margin-top: 0;",
                        "    }",
                        "}",
                        "",
                        "@mixin message-shape(",
                        "    $shape,",
                        "    $titleColor,",
                        "    $contentColor,",
                        "    $iconColor,",
                        "    $bgColor,",
                        "    $borderColor,",
                        "    $corner,",
                        "    $shadow",
                        ") {",
                        "    background-color: $bgColor;",
                        "    border-color: $borderColor;",
                        "    border-radius: $corner;",
                        "    box-shadow: $shadow;",
                        "",
                        "    .#{$css-prefix}message-title {",
                        "        color: $titleColor;",
                        "    }",
                        "    .#{$css-prefix}message-content {",
                        "        color: $contentColor;",
                        "    }",
                        "    .#{$css-prefix}message-symbol {",
                        "        color: $iconColor;",
                        "    }",
                        "",
                        "    @if ($shape == 'inline') {",
                        "        border-style: $message-border-style;",
                        "    }",
                        "",
                        "    @if ($shape == 'toast') {",
                        "        border-style: $message-border-style-toast;",
                        "    }",
                        "}",
                        "",
                        "@mixin vertial-align-middle(",
                        "    $fontSize,",
                        "    $iconSize,",
                        "    $className",
                        ") {",
                        "    @if ($fontSize > $iconSize) {",
                        "        .#{$css-prefix}message-symbol {",
                        "            line-height: $fontSize;",
                        "        }",
                        "    }",
                        "",
                        "    @if ($fontSize < $iconSize) {",
                        "        .#{$css-prefix}message-#{$className} {",
                        "            line-height: $iconSize;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// message variables",
                        "// --------------------------------------------------",
                        "",
                        "////",
                        "/// @module message: 信息反馈",
                        "/// @tag  message",
                        "/// @category component",
                        "/// @family feedback",
                        "/// @varPrefix $message-",
                        "/// @classPrefix {prefix}-message",
                        "/// @order {\"size/bounding\":10,\"size/title & content\":11,\"size/title\":12,\"size/content\":13,\"size/close\":14,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/title\":101,\"statement/normal/content\":102,\"statement/normal/close\":103,\"statement/hover\":11,\"statement/hover/close\":110}",
                        "////",
                        "",
                        "// Size:Large",
                        "// ----------------------------------------",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$message-size-l-padding: $s-4 !default;",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$message-size-l-border-width: $line-2 !default;",
                        "/// padding (l)",
                        "/// @namespace size/title & content",
                        "$message-size-l-title-content-padding-left: $s-3 !default;",
                        "/// padding (r)",
                        "/// @namespace size/title & content",
                        "$message-size-l-title-content-padding-right: $s-5 !default;",
                        "/// text",
                        "/// @namespace size/title",
                        "$message-size-l-title-font: $font-size-title !default;",
                        "/// margin (t)",
                        "/// @namespace size/content",
                        "$message-size-l-content-margin-top: $s-2 !default;",
                        "/// text",
                        "/// @namespace size/content",
                        "$message-size-l-content-font: $font-size-body-1 !default;",
                        "/// margin (t)",
                        "/// @namespace size/close",
                        "$message-size-l-close-top: $s-4 !default;",
                        "/// margin (l)",
                        "/// @namespace size/close",
                        "$message-size-l-close-right: $s-4 !default;",
                        "/// icon",
                        "/// @namespace size/content",
                        "$message-size-l-icon: $icon-l !default;",
                        "// unconfigurable",
                        "$message-size-l-title-content-padding: 0 $message-size-l-title-content-padding-right 0 $message-size-l-title-content-padding-left + $message-size-l-icon !default;",
                        "",
                        "// Size:Medium",
                        "// ----------------------------------------",
                        "",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$message-size-m-padding: $s-3 !default;",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$message-size-m-border-width: $line-1 !default;",
                        "/// padding (l)",
                        "/// @namespace size/title & content",
                        "$message-size-m-title-content-padding-left: $s-2 !default;",
                        "/// padding (r)",
                        "/// @namespace size/title & content",
                        "$message-size-m-title-content-padding-right: $s-5 !default;",
                        "/// text",
                        "/// @namespace size/title",
                        "$message-size-m-title-font: $font-size-subhead !default;",
                        "/// margin (t)",
                        "/// @namespace size/content",
                        "$message-size-m-content-margin-top: $s-2 !default;",
                        "/// text",
                        "/// @namespace size/content",
                        "$message-size-m-content-font: $font-size-body-1 !default;",
                        "/// margin (t)",
                        "/// @namespace size/close",
                        "$message-size-m-close-top: $s-3 !default;",
                        "/// margin (r)",
                        "/// @namespace size/close",
                        "$message-size-m-close-right: $s-3 !default;",
                        "/// icon",
                        "/// @namespace size/content",
                        "$message-size-m-icon: $icon-s !default;",
                        "// unconfigurable",
                        "$message-size-m-title-content-padding: 0 $message-size-m-title-content-padding-right 0 $message-size-m-title-content-padding-left + $message-size-m-icon !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/close",
                        "$message-close-icon-size: $icon-xs;",
                        "",
                        "// Statement:Common",
                        "// ----------------------------------------",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/bounding",
                        "$message-border-radius: $corner-1 !default;",
                        "/// border style",
                        "/// @namespace statement/normal/bounding",
                        "$message-border-style: $line-solid !default;",
                        "/// corner",
                        "/// @namespace statement/normal/bounding",
                        "$message-border-radius-toast: $corner-1 !default;",
                        "/// border style",
                        "/// @namespace statement/normal/bounding",
                        "$message-border-style-toast: $line-solid !default;",
                        "/// shadow",
                        "/// @namespace statement/normal/bounding",
                        "$message-shadow-toast: $shadow-2-down !default;",
                        "",
                        "// Statement:Success",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-success-color-bg-inline: $color-success-1 !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-success-color-bg-addon: $color-transparent !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-success-color-bg-toast: $color-white !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-success-color-border-inline: $color-success-1 !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-success-color-border-toast: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-success-color-title-inline: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-success-color-title-addon: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-success-color-title-toast: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-success-color-content-inline: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-success-color-content-addon: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-success-color-content-toast: $color-text1-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-success-color-icon-inline: $color-success-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-success-color-icon-addon: $color-success-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-success-color-icon-toast: $color-success-3 !default;",
                        "",
                        "// Statement:Error",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-error-color-bg-inline: $color-error-1 !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-error-color-bg-addon: $color-transparent !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-error-color-bg-toast: $color-white !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-error-color-border-inline: $color-error-1 !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-error-color-border-toast: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-error-color-title-inline: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-error-color-title-addon: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-error-color-title-toast: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-error-color-content-inline: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-error-color-content-addon: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-error-color-content-toast: $color-text1-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-error-color-icon-inline: $color-error-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-error-color-icon-addon: $color-error-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-error-color-icon-toast: $color-error-3 !default;",
                        "",
                        "// Statement:Warning",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-warning-color-bg-inline: $color-warning-1 !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-warning-color-bg-addon: $color-transparent !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-warning-color-bg-toast: $color-white !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-warning-color-border-inline: $color-warning-1 !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-warning-color-border-toast: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-warning-color-title-inline: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-warning-color-title-addon: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-warning-color-title-toast: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-warning-color-content-inline: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-warning-color-content-addon: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-warning-color-content-toast: $color-text1-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-warning-color-icon-inline: $color-warning-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-warning-color-icon-addon: $color-warning-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-warning-color-icon-toast: $color-warning-3 !default;",
                        "",
                        "// Statement:Notice",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-notice-color-bg-inline: $color-notice-1 !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-notice-color-bg-addon: $color-transparent !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-notice-color-bg-toast: $color-white !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-notice-color-border-inline: $color-notice-1 !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-notice-color-border-toast: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-notice-color-title-inline: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-notice-color-title-addon: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-notice-color-title-toast: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-notice-color-content-inline: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-notice-color-content-addon: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-notice-color-content-toast: $color-text1-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-notice-color-icon-inline: $color-notice-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-notice-color-icon-addon: $color-notice-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-notice-color-icon-toast: $color-notice-3 !default;",
                        "",
                        "// Statement:Help",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-help-color-bg-inline: $color-help-1 !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-help-color-bg-addon: $color-transparent !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-help-color-bg-toast: $color-white !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-help-color-border-inline: $color-help-1 !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-help-color-border-toast: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-help-color-title-inline: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-help-color-title-addon: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-help-color-title-toast: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-help-color-content-inline: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-help-color-content-addon: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-help-color-content-toast: $color-text1-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-help-color-icon-inline: $color-help-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-help-color-icon-addon: $color-help-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-help-color-icon-toast: $color-help-3 !default;",
                        "",
                        "// Statement:Loading",
                        "// ----------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-loading-color-bg-inline: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-loading-color-bg-addon: $color-transparent !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$message-loading-color-bg-toast: $color-white !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-loading-color-border-inline: $color-white !default;",
                        "/// border color",
                        "/// @namespace statement/normal/bounding",
                        "$message-loading-color-border-toast: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-loading-color-title-inline: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-loading-color-title-addon: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/title",
                        "$message-loading-color-title-toast: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-loading-color-content-inline: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-loading-color-content-addon: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$message-loading-color-content-toast: $color-text1-3 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-loading-color-icon-inline: $color-brand1-6 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-loading-color-icon-addon: $color-brand1-6 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/content",
                        "$message-loading-color-icon-toast: $color-brand1-6 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal/close",
                        "$message-close-icon-color: $color-text1-2 !default;",
                        "/// icon",
                        "/// @namespace statement/hover/close",
                        "$message-hover-close-icon-color: $color-text1-3 !default;"
                    ]
                }
            }
        },
        "mixin-ui-state": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import classnames from 'classnames';",
                    "import { func } from '../util';",
                    "",
                    "const { makeChain } = func;",
                    "// UIState 为一些特殊元素的状态响应提供了标准的方式，",
                    "// 尤其适合CSS无法完全定制的控件，比如checkbox，radio等。",
                    "// 若组件 disable 则自行判断是否需要绑定状态管理。",
                    "// 注意：disable 不会触发事件，请使用resetUIState还原状态",
                    "/* eslint-disable react/prop-types */",
                    "class UIState extends Component {",
                    "    constructor(props) {",
                    "        super(props);",
                    "        this.state = {};",
                    "        ['_onUIFocus', '_onUIBlur'].forEach(item => {",
                    "            this[item] = this[item].bind(this);",
                    "        });",
                    "    }",
                    "    // base 事件绑定的元素",
                    "    getStateElement(base) {",
                    "        const { onFocus, onBlur } = this.props;",
                    "        return React.cloneElement(base, {",
                    "            onFocus: makeChain(this._onUIFocus, onFocus),",
                    "            onBlur: makeChain(this._onUIBlur, onBlur)",
                    "        });",
                    "",
                    "    }",
                    "    // 获取状态classname",
                    "    getStateClassName() {",
                    "        const { focused } = this.state;",
                    "        return classnames({",
                    "            focused",
                    "        });",
                    "    }",
                    "    // 复原状态",
                    "    resetUIState() {",
                    "        this.setState({",
                    "            focused: false,",
                    "        });",
                    "    }",
                    "    _onUIFocus() {",
                    "        this.setState({",
                    "            focused: true",
                    "        });",
                    "    }",
                    "    _onUIBlur() {",
                    "        this.setState({",
                    "            focused: false",
                    "        });",
                    "    }",
                    "}",
                    "",
                    "export default UIState;"
                ]
            }
        },
        "nav": {
            "group.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Menu from '../menu';",
                    "",
                    "/**",
                    " * Nav.Group",
                    " * @description 继承自 `Menu.Group` 的能力请查看 `Menu.Group` 文档",
                    " */",
                    "class Group extends Component {",
                    "    static menuChildType = 'group';",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 标签内容",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 导航项和子导航",
                    "         */",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string,",
                    "        iconOnly: PropTypes.bool",
                    "    };",
                    "",
                    "    render() {",
                    "        const {prefix, iconOnly} = this.context;",
                    "        const {className, children, label, ...others} = this.props;",
                    "",
                    "        let newLabel = label;",
                    "        if (iconOnly) {",
                    "            // TODO: add a group icon ?",
                    "            newLabel = [",
                    "                <span key=\"icon\" className={`${prefix}nav-icon-placeholder`} />,",
                    "                <span key=\"label\">{label}</span>",
                    "            ];",
                    "        }",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}nav-group-label`]: true,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        return (",
                    "            <Menu.Group className={cls} label={newLabel} {...others}>{children}</Menu.Group>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Group;"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Menu from '../menu';",
                    "import Nav from './nav';",
                    "import Item from './item';",
                    "import Group from './group';",
                    "import SubNav from './sub-nav';",
                    "import PopupItem from './popup-item';",
                    "",
                    "Nav.Item = Item;",
                    "Nav.Group = Group;",
                    "Nav.SubNav = SubNav;",
                    "Nav.PopupItem = PopupItem;",
                    "Nav.Divider = Menu.Divider;",
                    "",
                    "export default Nav;"
                ]
            },
            "item.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Menu from '../menu';",
                    "import Icon from '../icon';",
                    "import Balloon from '../balloon';",
                    "",
                    "const { Tooltip } = Balloon;",
                    "",
                    "/**",
                    " * Nav.Item",
                    " * @description 继承自 `Menu.Item` 的能力请查看 `Menu.Item` 文档",
                    " */",
                    "class Item extends Component {",
                    "    static menuChildType = 'item';",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type=\"icon type\" />`",
                    "         */",
                    "        icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),",
                    "        /**",
                    "         * 导航内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        parentMode: PropTypes.oneOf(['inline', 'popup'])",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string,",
                    "        iconOnly: PropTypes.bool,",
                    "        hasTooltip: PropTypes.bool",
                    "    };",
                    "",
                    "    render() {",
                    "        const {prefix, iconOnly, hasTooltip} = this.context;",
                    "        const {icon, children, ...others} = this.props;",
                    "        let iconEl = typeof icon === 'string' ? <Icon className={`${prefix}nav-icon`} type={icon} /> : icon;",
                    "        if (iconOnly && !iconEl) {",
                    "            iconEl = <span className={`${prefix}nav-icon-placeholder`} />;",
                    "        }",
                    "",
                    "        const item = (",
                    "            <Menu.Item {...others}>",
                    "                {iconEl}",
                    "                {children}",
                    "            </Menu.Item>",
                    "        );",
                    "",
                    "        if (iconOnly && hasTooltip && others.parentMode !== 'popup') {",
                    "            return <Tooltip align=\"r\" trigger={item}>{children}</Tooltip>;",
                    "        }",
                    "",
                    "        return item;",
                    "    }",
                    "}",
                    "",
                    "export default Item;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$nav-prefix} {",
                    "    @include box-sizing;",
                    "    min-width: auto;",
                    "    padding: 0;",
                    "    border-radius: 0;",
                    "",
                    "    &-icon.#{$css-prefix}icon {",
                    "        @include icon-size(",
                    "            $size: $nav-icon-self-size,",
                    "            $marginRight: $nav-icon-self-margin",
                    "        );",
                    "        font-weight: inherit;",
                    "    }",
                    "",
                    "    &-icon-placeholder {",
                    "        display: inline-block;",
                    "        width: $nav-icon-self-size;",
                    "        height: $nav-icon-self-size;",
                    "    }",
                    "",
                    "    &-group-label {",
                    "        height: $nav-group-height;",
                    "        line-height: $nav-group-height;",
                    "        font-size: $nav-group-font-size;",
                    "    }",
                    "",
                    "    &-item {",
                    "        #{$menu-prefix}-item-text > span,",
                    "        #{$nav-prefix}-group-label > span {",
                    "            opacity: 1;",
                    "            transition: opacity .3s;",
                    "        }",
                    "",
                    "        a {",
                    "            text-decoration: none;",
                    "            color: inherit;",
                    "        }",
                    "",
                    "        &,",
                    "        &:hover,",
                    "        &.#{$css-prefix}focused,",
                    "        &.#{$css-prefix}selected,",
                    "        &.#{$css-prefix}opened {",
                    "            #{$menu-prefix}-hoz-icon-arrow.#{$css-prefix}icon,",
                    "            #{$menu-prefix}-icon-arrow.#{$css-prefix}icon {",
                    "                color: inherit;",
                    "                top: 2px;",
                    "                transform-origin: center 47%;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}active &-item:before {",
                    "        position: absolute;",
                    "        transition: all .4s cubic-bezier(.23, 1, .32, 1);",
                    "        content: '';",
                    "    }",
                    "",
                    "    &.#{$css-prefix}hoz {",
                    "        height: $nav-hoz-height;",
                    "",
                    "        @include nav-size(",
                    "            'hoz',",
                    "            $nav-hoz-height - $popup-local-border-width * 2,",
                    "            $nav-hoz-font-size,",
                    "            $nav-hoz-item-padding-lr,",
                    "            $nav-hoz-item-selected-active-line,",
                    "            $nav-hoz-item-margin-tb,",
                    "            $nav-hoz-item-margin-lr,",
                    "            $nav-hoz-item-corner",
                    "        );",
                    "",
                    "        #{$menu-prefix}-header {",
                    "            float: left;",
                    "            height: $nav-hoz-height - $popup-local-border-width * 2;",
                    "        }",
                    "",
                    "        #{$menu-prefix}-footer {",
                    "            float: right;",
                    "            height: $nav-hoz-height - $popup-local-border-width * 2;",
                    "        }",
                    "",
                    "        #{$nav-prefix}-item:before {",
                    "            width: 0;",
                    "            left: 50%;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}top #{$nav-prefix}-item:before {",
                    "            top: - $popup-local-border-width;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}bottom #{$nav-prefix}-item:before {",
                    "            bottom: - $popup-local-border-width;",
                    "        }",
                    "",
                    "        .#{$css-prefix}selected#{$nav-prefix}-item:before {",
                    "            width: 100%;",
                    "            left: 0;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}ver {",
                    "        transition: width .3s;",
                    "",
                    "        @include nav-size(",
                    "            'ver',",
                    "            $nav-ver-height,",
                    "            $nav-ver-font-size,",
                    "            $nav-ver-item-padding-lr,",
                    "            $nav-ver-item-selected-active-line,",
                    "            $nav-ver-item-margin-tb,",
                    "            $nav-ver-item-margin-lr,",
                    "            $nav-ver-item-corner",
                    "        );",
                    "",
                    "        > #{$menu-prefix}-item:first-child,",
                    "        > #{$menu-prefix}-sub-menu-wrapper:first-child > #{$menu-prefix}-item {",
                    "            margin-top: $nav-ver-item-margin-tb;",
                    "        }",
                    "",
                    "        > #{$menu-prefix}-item:last-child,",
                    "        > #{$menu-prefix}-sub-menu-wrapper:last-child > #{$menu-prefix}-item {",
                    "            margin-bottom: $nav-ver-item-margin-tb;",
                    "        }",
                    "",
                    "        #{$menu-prefix}-sub-menu #{$menu-prefix}-item-inner {",
                    "            height: $nav-ver-sub-nav-height;",
                    "            line-height: $nav-ver-sub-nav-height;",
                    "            font-size: $nav-ver-sub-nav-font-size;",
                    "        }",
                    "",
                    "        #{$nav-prefix}-item:before {",
                    "            height: 0;",
                    "            top: 50%;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}left #{$nav-prefix}-item:before {",
                    "            left: - $popup-local-border-width;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}right #{$nav-prefix}-item:before {",
                    "            right: - $popup-local-border-width;",
                    "        }",
                    "",
                    "        .#{$css-prefix}selected#{$nav-prefix}-item:before {",
                    "            height: 100%;",
                    "            top: 0;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}primary {",
                    "        @include nav-border-fix(",
                    "            $nav-hoz-height,",
                    "            $nav-primary-border-width",
                    "        );",
                    "        @include nav-statement(",
                    "            $nav-primary-bg-color,",
                    "            $nav-primary-border-color,",
                    "            $nav-primary-text-color,",
                    "            $nav-primary-text-style,",
                    "            $nav-primary-shadow,",
                    "            $nav-primary-item-hover-bg-color,",
                    "            $nav-primary-item-hover-text-color,",
                    "            $nav-primary-item-selected-bg-color,",
                    "            $nav-primary-item-selected-text-color,",
                    "            $nav-primary-item-selected-text-style,",
                    "            $nav-primary-item-selected-active-color,",
                    "            $nav-primary-item-opened-bg-color,",
                    "            $nav-primary-item-opened-text-color,",
                    "            $nav-primary-group-text-color,",
                    "            $nav-primary-group-text-style",
                    "        );",
                    "        @include sub-nav-statement(",
                    "            $nav-primary-sub-nav-text-color,",
                    "            $nav-primary-sub-nav-text-style,",
                    "            $nav-primary-sub-nav-bg-color,",
                    "            $nav-primary-sub-nav-hover-bg-color,",
                    "            $nav-primary-sub-nav-hover-text-color,",
                    "            $nav-primary-sub-nav-selected-bg-color,",
                    "            $nav-primary-sub-nav-selected-text-color,",
                    "            $nav-primary-sub-nav-active-color",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}secondary {",
                    "        @include nav-border-fix(",
                    "            $nav-hoz-height,",
                    "            $nav-secondary-border-width",
                    "        );",
                    "        @include nav-statement(",
                    "            $nav-secondary-bg-color,",
                    "            $nav-secondary-border-color,",
                    "            $nav-secondary-text-color,",
                    "            $nav-secondary-text-style,",
                    "            $nav-secondary-shadow,",
                    "            $nav-secondary-item-hover-bg-color,",
                    "            $nav-secondary-item-hover-text-color,",
                    "            $nav-secondary-item-selected-bg-color,",
                    "            $nav-secondary-item-selected-text-color,",
                    "            $nav-secondary-item-selected-text-style,",
                    "            $nav-secondary-item-selected-active-color,",
                    "            $nav-secondary-item-opened-bg-color,",
                    "            $nav-secondary-item-opened-text-color,",
                    "            $nav-secondary-group-text-color,",
                    "            $nav-secondary-group-text-style",
                    "        );",
                    "        @include sub-nav-statement(",
                    "            $nav-secondary-sub-nav-text-color,",
                    "            $nav-secondary-sub-nav-text-style,",
                    "            $nav-secondary-sub-nav-bg-color,",
                    "            $nav-secondary-sub-nav-hover-bg-color,",
                    "            $nav-secondary-sub-nav-hover-text-color,",
                    "            $nav-secondary-sub-nav-selected-bg-color,",
                    "            $nav-secondary-sub-nav-selected-text-color,",
                    "            $nav-secondary-sub-nav-active-color",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}normal {",
                    "        @include nav-statement(",
                    "            $nav-normal-bg-color,",
                    "            $nav-normal-border-color,",
                    "            $nav-normal-text-color,",
                    "            $nav-normal-text-style,",
                    "            $nav-normal-shadow,",
                    "            $nav-normal-item-hover-bg-color,",
                    "            $nav-normal-item-hover-text-color,",
                    "            $nav-normal-item-selected-bg-color,",
                    "            $nav-normal-item-selected-text-color,",
                    "            $nav-normal-item-selected-text-style,",
                    "            $nav-normal-item-selected-active-color,",
                    "            $nav-normal-item-opened-bg-color,",
                    "            $nav-normal-item-opened-text-color,",
                    "            $nav-normal-group-text-color,",
                    "            $nav-normal-group-text-style",
                    "        );",
                    "        @include sub-nav-statement(",
                    "            $nav-normal-sub-nav-text-color,",
                    "            $nav-normal-sub-nav-text-style,",
                    "            $nav-normal-sub-nav-bg-color,",
                    "            $nav-normal-sub-nav-hover-bg-color,",
                    "            $nav-normal-sub-nav-hover-text-color,",
                    "            $nav-normal-sub-nav-selected-bg-color,",
                    "            $nav-normal-sub-nav-selected-text-color,",
                    "            $nav-normal-sub-nav-active-color",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}line {",
                    "        &.#{$css-prefix}hoz {",
                    "            border-top-color: $nav-line-bg-color;",
                    "            border-left-color: $nav-line-bg-color;",
                    "            border-right-color: $nav-line-bg-color;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}ver {",
                    "            border-top-color: $nav-line-bg-color;",
                    "            border-left-color: $nav-line-bg-color;",
                    "            border-bottom-color: $nav-line-bg-color;",
                    "        }",
                    "",
                    "        @include nav-statement(",
                    "            $nav-line-bg-color,",
                    "            $nav-line-border-color,",
                    "            $nav-line-text-color,",
                    "            $nav-line-text-style,",
                    "            $shadow-zero,",
                    "            $nav-line-item-hover-bg-color,",
                    "            $nav-line-item-hover-text-color,",
                    "            $nav-line-item-selected-bg-color,",
                    "            $nav-line-item-selected-text-color,",
                    "            $nav-line-item-selected-text-style,",
                    "            $nav-line-item-selected-active-color,",
                    "            $nav-line-item-opened-bg-color,",
                    "            $nav-line-item-opened-text-color,",
                    "            $nav-line-group-text-color,",
                    "            $nav-line-group-text-style",
                    "        );",
                    "        @include sub-nav-statement(",
                    "            $nav-line-sub-nav-text-color,",
                    "            $nav-line-sub-nav-text-style,",
                    "            $nav-line-sub-nav-bg-color,",
                    "            $nav-line-sub-nav-hover-bg-color,",
                    "            $nav-line-sub-nav-hover-text-color,",
                    "            $nav-line-sub-nav-selected-bg-color,",
                    "            $nav-line-sub-nav-selected-text-color,",
                    "            $nav-line-sub-nav-active-color",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}icon-only {",
                    "        #{$menu-prefix}-item-inner {",
                    "            text-overflow: clip;",
                    "        }",
                    "",
                    "        #{$menu-prefix}-item-text > span,",
                    "        #{$nav-prefix}-group-label > #{$menu-prefix}-item-inner > span {",
                    "            opacity: 0;",
                    "        }",
                    "",
                    "        #{$nav-prefix}-icon.#{$css-prefix}icon {",
                    "            @include icon-size(",
                    "                $size: $nav-icon-only-font-size,",
                    "                $marginLeft: (18px - $nav-icon-only-font-size) / 2,",
                    "                $marginRight: 0",
                    "            );",
                    "        }",
                    "",
                    "        #{$nav-prefix}-icon-only-arrow.#{$css-prefix}icon {",
                    "            @include icon-size(",
                    "                $size: $nav-icon-only-font-size,",
                    "                $marginLeft: (18px - $nav-icon-only-font-size) / 2",
                    "            );",
                    "            transition: all ease .3s;",
                    "            transform-origin: center 46%;",
                    "        }",
                    "",
                    "        #{$nav-prefix}-item.#{$css-prefix}opened #{$nav-prefix}-icon-only-arrow.#{$css-prefix}icon-arrow-down {",
                    "            @include icon-size(",
                    "                $size: $nav-icon-only-font-size,",
                    "                $marginLeft: (18px - $nav-icon-only-font-size) / 2,",
                    "                $transform: rotate(180deg)",
                    "            );",
                    "        }",
                    "",
                    "        #{$nav-prefix}-item.#{$css-prefix}selected #{$nav-prefix}-icon.#{$css-prefix}icon {",
                    "            animation: pulse .3s cubic-bezier(.23, 1, .32, 1);",
                    "        }",
                    "",
                    "        #{$menu-prefix}-hoz-icon-arrow,",
                    "        #{$menu-prefix}-icon-arrow {",
                    "            display: none;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "@import \"./rtl.scss\";"
                ]
            },
            "nav.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import Menu from '../menu';",
                    "",
                    "/**",
                    " * Nav",
                    " * @description 继承自 `Menu` 的能力请查看 `Menu` 文档",
                    " */",
                    "class Nav extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 导航项和子导航",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 导航类型",
                    "         * @enumdesc 普通, 主要, 次要, 线形",
                    "         */",
                    "        type: PropTypes.oneOf(['normal', 'primary', 'secondary', 'line']),",
                    "        /**",
                    "         * 导航布局",
                    "         * @enumdesc 水平, 垂直",
                    "         */",
                    "        direction: PropTypes.oneOf(['hoz', 'ver']),",
                    "        /**",
                    "         * 横向导航条 items 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效",
                    "         */",
                    "        hozAlign: PropTypes.oneOf(['left', 'right']),",
                    "        /**",
                    "         * 设置组件选中状态的 active 边方向",
                    "         * @enumdesc 无, 上, 下, 左, 右",
                    "         * @default 当 direction 为 'hoz' 时，默认值为 'bottom'，当 direction 为 'ver' 时，默认值为 'left'",
                    "         */",
                    "        activeDirection: PropTypes.oneOf([null, 'top', 'bottom', 'left', 'right']),",
                    "        /**",
                    "         * 子导航打开的模式（水平导航只支持弹出）",
                    "         * @eumdesc 行内, 弹出",
                    "         */",
                    "        mode: PropTypes.oneOf(['inline', 'popup']),",
                    "        /**",
                    "         * 子导航打开的触发方式",
                    "         */",
                    "        triggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 内联子导航缩进距离",
                    "         */",
                    "        inlineIndent: PropTypes.number,",
                    "        /**",
                    "         * 初始展开所有的子导航，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效",
                    "         */",
                    "        defaultOpenAll: PropTypes.bool,",
                    "        /**",
                    "         * 内联子导航的展开模式，同时可以展开一个同级子导航还是多个同级子导航，该属性仅在 mode 为 inline 时生效",
                    "         * @eumdesc 一个, 多个",
                    "         */",
                    "        openMode: PropTypes.oneOf(['single', 'multiple']),",
                    "        /**",
                    "         * 当前选中导航项的 key 值",
                    "         */",
                    "        selectedKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * 初始选中导航项的 key 值",
                    "         */",
                    "        defaultSelectedKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * 选中或取消选中导航项触发的回调函数",
                    "         * @param {Array} selectedKeys 选中的所有导航项的 key",
                    "         * @param {Object} item 选中或取消选中的导航项",
                    "         * @param {Object} extra 额外参数",
                    "         * @param {Boolean} extra.select 是否是选中",
                    "         * @param {Array} extra.key 导航项的 key",
                    "         * @param {Object} extra.label 导航项的文本",
                    "         * @param {Array} extra.keyPath 导航项 key 的路径",
                    "         */",
                    "        onSelect: PropTypes.func,",
                    "        /**",
                    "         * 弹出子导航的对齐方式（水平导航只支持 follow ）",
                    "         * @eumdesc Item 顶端对齐, Nav 顶端对齐",
                    "         */",
                    "        popupAlign: PropTypes.oneOf(['follow', 'outside']),",
                    "        /**",
                    "         * 弹出子导航的自定义类名",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 是否只显示图标",
                    "         */",
                    "        iconOnly: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示右侧的箭头（仅在 iconOnly=true 时生效）",
                    "         */",
                    "        hasArrow: PropTypes.bool,",
                    "        /**",
                    "         * 是否有 ToolTips （仅在 iconOnly=true 时生效）",
                    "         */",
                    "        hasTooltip: PropTypes.bool,",
                    "        /**",
                    "         * 自定义导航头部",
                    "         */",
                    "        header: PropTypes.node,",
                    "        /**",
                    "         * 自定义导航尾部",
                    "         */",
                    "        footer: PropTypes.node,",
                    "        popupProps: PropTypes.object",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        type: 'normal',",
                    "        direction: 'ver',",
                    "        hozAlign: 'left',",
                    "        mode: 'inline',",
                    "        triggerType: 'click',",
                    "        inlineIndent: 20,",
                    "        defaultOpenAll: false,",
                    "        openMode: 'multiple',",
                    "        defaultSelectedKeys: [],",
                    "        popupAlign: 'follow',",
                    "        hasTooltip: false,",
                    "        hasArrow: true,",
                    "        popupProps: {}",
                    "    };",
                    "",
                    "    static childContextTypes = {",
                    "        prefix: PropTypes.string,",
                    "        mode: PropTypes.string,",
                    "        iconOnly: PropTypes.bool,",
                    "        hasTooltip: PropTypes.bool,",
                    "        hasArrow: PropTypes.bool",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.getMenuRef = this.getMenuRef.bind(this);",
                    "    }",
                    "",
                    "    getChildContext() {",
                    "        const {prefix, direction, mode, iconOnly, hasTooltip, hasArrow} = this.props;",
                    "",
                    "        return {",
                    "            prefix,",
                    "            mode: direction === 'hoz' ? 'popup' : mode,",
                    "            iconOnly,",
                    "            hasTooltip,",
                    "            hasArrow",
                    "        };",
                    "    }",
                    "",
                    "    getMenuRef(ref) {",
                    "        this.menu = ref;",
                    "    }",
                    "",
                    "    render() {",
                    "        // eslint-disable-next-line",
                    "        const {prefix, className, style, children, type, direction, activeDirection, mode, triggerType, inlineIndent, openMode, popupAlign, popupClassName, iconOnly, hasArrow, hasTooltip, popupProps, rtl, ...others} = this.props;",
                    "",
                    "        let realActiveDirection = activeDirection;",
                    "        if (realActiveDirection &&",
                    "            ((direction === 'hoz' && (realActiveDirection === 'left' || realActiveDirection === 'right')) ||",
                    "            (direction === 'ver' && (realActiveDirection === 'top' || realActiveDirection === 'bottom')))) {",
                    "            realActiveDirection = null;",
                    "        }",
                    "",
                    "        if (!iconOnly && realActiveDirection === undefined) {",
                    "            realActiveDirection = direction === 'hoz' ? 'bottom' : (type === 'line' ? 'right' : 'left');",
                    "        }",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}nav`]: true,",
                    "            [`${prefix}${type}`]: type,",
                    "            [`${prefix}active`]: realActiveDirection,",
                    "            [`${prefix}${realActiveDirection}`]: realActiveDirection,",
                    "            [`${prefix}icon-only`]: iconOnly,",
                    "            [`${prefix}no-arrow`]: !hasArrow,",
                    "            [className]: !!className",
                    "        });",
                    "        const newStyle = iconOnly ? { ...style, width: '60px' } : style;",
                    "",
                    "        const props = {",
                    "            prefix,",
                    "            direction,",
                    "            openMode,",
                    "            triggerType,",
                    "            mode: direction === 'hoz' ? 'popup' : mode,",
                    "            popupAlign: direction === 'hoz' ? 'follow' : popupAlign,",
                    "            inlineIndent: iconOnly ? 0 : inlineIndent,",
                    "            hasSelectedIcon: false,",
                    "            popupAutoWidth: true,",
                    "            selectMode: 'single',",
                    "            itemClassName: `${prefix}nav-item`,",
                    "            popupClassName: classNames({",
                    "                [cls.replace(`${prefix}icon-only`, '')]: mode === 'popup',",
                    "                [`${prefix}icon-only`]: iconOnly && mode === 'inline',",
                    "                [popupClassName]: !!popupClassName",
                    "            }),",
                    "            popupProps: popupItemProps => {",
                    "                return {",
                    "                    offset: direction === 'hoz' && popupItemProps.level === 1 ? [0, 2] : [-2, 0],",
                    "                    ...popupProps",
                    "                };",
                    "            }",
                    "        };",
                    "",
                    "        return (",
                    "            <Menu className={cls} style={newStyle} {...props} {...others} ref={this.getMenuRef}>",
                    "                {children}",
                    "            </Menu>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Nav);"
                ]
            },
            "popup-item.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, cloneElement } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Menu from '../menu';",
                    "import Icon from '../icon';",
                    "",
                    "/**",
                    " * Nav.PopupItem",
                    " * @description 继承自 `Menu.PopupItem` 的能力请查看 `Menu.PopupItem` 文档",
                    " */",
                    "class PopupItem extends Component {",
                    "    static menuChildType = 'submenu';",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义图标，可以使用 Icon 的 type, 也可以使用组件 `<Icon type=\"icon type\" />`",
                    "         */",
                    "        icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),",
                    "        /**",
                    "         * 标签内容",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 弹出内容",
                    "         */",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string,",
                    "        iconOnly: PropTypes.bool,",
                    "        hasArrow: PropTypes.bool",
                    "    };",
                    "",
                    "    render() {",
                    "        const {prefix, iconOnly, hasArrow} = this.context;",
                    "        const {className, icon, label, children, ...others} = this.props;",
                    "        const cls = classNames({",
                    "            [`${prefix}nav-popup-item`]: true,",
                    "            [className]: !!className",
                    "        });",
                    "        let iconEl = typeof icon === 'string' ? <Icon className={`${prefix}nav-icon`} type={icon} /> : icon;",
                    "        if (iconOnly) {",
                    "            if (hasArrow) {",
                    "                iconEl = <Icon className={`${prefix}nav-icon-only-arrow`} type=\"arrow-right\" />;",
                    "            } else if (!iconEl) {",
                    "                iconEl = <span className={`${prefix}nav-icon-placeholder`} />;",
                    "            }",
                    "        }",
                    "        const newLabel = [",
                    "            iconEl ? cloneElement(iconEl, { key: 'icon' }) : null,",
                    "            <span key=\"label\">{label}</span>",
                    "        ];",
                    "",
                    "        return (",
                    "            <Menu.PopupItem className={cls} label={newLabel} {...others}>{children}</Menu.PopupItem>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default PopupItem;"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "",
                    "@mixin nav-border-fix-rtl($border-width) {",
                    "    &.#{$css-prefix}ver {",
                    "        &.#{$css-prefix}left #{$nav-prefix}-item:before {",
                    "            right: - $border-width;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}right #{$nav-prefix}-item:before {",
                    "            left: - $border-width;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "",
                    "#{$nav-prefix}[dir=\"rtl\"] {",
                    "    #{$nav-prefix}-icon.#{$css-prefix}icon {",
                    "        @include icon-size(",
                    "            $size: $nav-icon-self-size,",
                    "            $marginRight: 0,",
                    "            $marginLeft: $nav-icon-self-margin",
                    "",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}hoz {",
                    "",
                    "        #{$menu-prefix}-header {",
                    "            float: right;",
                    "        }",
                    "",
                    "        #{$menu-prefix}-footer {",
                    "            float: left;",
                    "        }",
                    "",
                    "        #{$nav-prefix}-item:before {",
                    "            width: 0;",
                    "            left: 50%;",
                    "        }",
                    "",
                    "",
                    "        .#{$css-prefix}selected#{$nav-prefix}-item:before {",
                    "            width: 100%;",
                    "            left: auto;",
                    "            right: 0;",
                    "        }",
                    "    }",
                    "",
                    "    @include nav-border-fix-rtl(",
                    "        $popup-local-border-width",
                    "    );",
                    "",
                    "",
                    "    &.#{$css-prefix}primary {",
                    "        @include nav-border-fix-rtl(",
                    "            $nav-primary-border-width",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}secondary {",
                    "        @include nav-border-fix-rtl(",
                    "            $nav-secondary-border-width",
                    "        );",
                    "    }",
                    "",
                    "    #{$nav-prefix}.#{$css-prefix}line {",
                    "        &.#{$css-prefix}ver {",
                    "            border-top-color: $nav-line-bg-color;",
                    "            border-right-color: $nav-line-bg-color;",
                    "            border-left-color: none;",
                    "            border-bottom-color: $nav-line-bg-color;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}icon-only {",
                    "",
                    "        #{$nav-prefix}-icon.#{$css-prefix}icon,",
                    "        #{$nav-prefix}-icon-only-arrow.#{$css-prefix}icon,",
                    "        #{$nav-prefix}-item.#{$css-prefix}opened #{$nav-prefix}-icon-only-arrow.#{$css-prefix}icon-arrow-down {",
                    "            @include icon-size(",
                    "                $size: $nav-icon-only-font-size,",
                    "                $marginLeft: 0,",
                    "                $marginRight: (18px - $nav-icon-only-font-size) / 2",
                    "            );",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../animate/style.js';",
                    "import '../menu/style.js';",
                    "import '../balloon/style.js';",
                    "import './main.scss';"
                ]
            },
            "sub-nav.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, cloneElement } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Menu from '../menu';",
                    "import Icon from '../icon';",
                    "",
                    "/**",
                    " * Nav.SubNav",
                    " * @description 继承自 `Menu.SubMenu` 的能力请查看 `Menu.SubMenu` 文档",
                    " */",
                    "class SubNav extends Component {",
                    "    static menuChildType = 'submenu';",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type=\"your type\" />`",
                    "         */",
                    "        icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),",
                    "        /**",
                    "         * 标签内容",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 是否可选",
                    "         */",
                    "        selectable: PropTypes.bool,",
                    "        /**",
                    "         * 导航项和子导航",
                    "         */",
                    "        children: PropTypes.node",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        selectable: false",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string,",
                    "        mode: PropTypes.string,",
                    "        iconOnly: PropTypes.bool,",
                    "        hasArrow: PropTypes.bool",
                    "    };",
                    "",
                    "    render() {",
                    "        const {prefix, iconOnly, hasArrow, mode} = this.context;",
                    "        const {className, icon, label, children, ...others} = this.props;",
                    "        const cls = classNames({",
                    "            [`${prefix}nav-sub-nav-item`]: true,",
                    "            [className]: !!className",
                    "        });",
                    "        let iconEl = typeof icon === 'string' ? <Icon className={`${prefix}nav-icon`} type={icon} /> : icon;",
                    "        if (iconOnly) {",
                    "            if (hasArrow) {",
                    "                iconEl = <Icon className={`${prefix}nav-icon-only-arrow`} type={mode === 'popup' ? 'arrow-right' : 'arrow-down'} />;",
                    "            } else if (!iconEl) {",
                    "                iconEl = <span className={`${prefix}nav-icon-placeholder`} />;",
                    "            }",
                    "        }",
                    "        const newLabel = [",
                    "            iconEl ? cloneElement(iconEl, { key: 'icon' }) : null,",
                    "            <span key=\"label\">{label}</span>",
                    "        ];",
                    "",
                    "        return (",
                    "            <Menu.SubMenu className={cls} label={newLabel} {...others}>{children}</Menu.SubMenu>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default SubNav;"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// nav mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin nav-size(",
                        "    $direction,",
                        "    $height,",
                        "    $fontSize,",
                        "    $padding,",
                        "    $activeLineWidth,",
                        "    $marginTB,",
                        "    $marginLR,",
                        "    $itemCorner",
                        ") {",
                        "    line-height: $height;",
                        "    font-size: $fontSize;",
                        "",
                        "    #{$menu-prefix}-item {",
                        "        margin-left: $marginLR;",
                        "        margin-right: $marginLR;",
                        "        padding: 0 $padding;",
                        "        border-radius: $itemCorner;",
                        "",
                        "        &:before {",
                        "            @if $direction == 'hoz' {",
                        "                height: $activeLineWidth;",
                        "            } @else {",
                        "                width: $activeLineWidth;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    #{$menu-prefix}-item:not(:first-child),",
                        "    #{$menu-prefix}-sub-menu-wrapper:not(:first-child) > #{$menu-prefix}-item {",
                        "        margin-top: $marginTB;",
                        "    }",
                        "",
                        "    #{$menu-prefix}-item:not(:last-child),",
                        "    #{$menu-prefix}-sub-menu-wrapper:not(:last-child) > #{$menu-prefix}-item {",
                        "        margin-bottom: $marginTB;",
                        "    }",
                        "",
                        "    #{$menu-prefix}-item-inner {",
                        "        height: $height;",
                        "        font-size: $fontSize;",
                        "    }",
                        "}",
                        "",
                        "@mixin nav-border-fix($height, $border-width) {",
                        "    $real-height: $height - $border-width * 2;",
                        "",
                        "    border-width: $border-width;",
                        "    &.#{$css-prefix}hoz {",
                        "        line-height: $real-height;",
                        "",
                        "        #{$menu-prefix}-header {",
                        "            height: $real-height;",
                        "        }",
                        "",
                        "        #{$menu-prefix}-footer {",
                        "            height: $real-height;",
                        "        }",
                        "",
                        "        #{$menu-prefix}-item-inner {",
                        "            height: $real-height;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}top #{$nav-prefix}-item:before {",
                        "            top: - $border-width;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}bottom #{$nav-prefix}-item:before {",
                        "            bottom: - $border-width;",
                        "        }",
                        "    }",
                        "    &.#{$css-prefix}ver {",
                        "        &.#{$css-prefix}left #{$nav-prefix}-item:before {",
                        "            left: - $border-width;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}right #{$nav-prefix}-item:before {",
                        "            right: - $border-width;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin nav-statement(",
                        "    $bgColor,",
                        "    $borderColor,",
                        "    $textColor,",
                        "    $textWeight,",
                        "    $shadow,",
                        "    $hoverBgColor,",
                        "    $hoverColor,",
                        "    $selectedBgColor,",
                        "    $selectedColor,",
                        "    $selectedWeight,",
                        "    $activeColor,",
                        "    $openedBgColor,",
                        "    $openedColor,",
                        "    $groupColor,",
                        "    $groupWeight",
                        ") {",
                        "    background-color: $bgColor;",
                        "    border-color: $borderColor;",
                        "    color: $textColor;",
                        "    font-weight: $textWeight;",
                        "    box-shadow: $shadow;",
                        "",
                        "    #{$nav-prefix}-item#{$menu-prefix}-item {",
                        "        background-color: $bgColor;",
                        "        color: $textColor;",
                        "",
                        "        &.#{$css-prefix}focused,",
                        "        &:hover {",
                        "            background-color: $hoverBgColor;",
                        "            color: $hoverColor;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}selected {",
                        "            background-color: $selectedBgColor;",
                        "            color: $selectedColor;",
                        "            font-weight: $selectedWeight;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}opened {",
                        "            background-color: $openedBgColor;",
                        "            color: $openedColor;",
                        "        }",
                        "",
                        "        &:before {",
                        "            background-color: $activeColor;",
                        "        }",
                        "    }",
                        "",
                        "    #{$menu-prefix}-sub-menu #{$menu-prefix}-item.#{$css-prefix}opened {",
                        "        background-color: $openedBgColor;",
                        "        color: $openedColor;",
                        "    }",
                        "",
                        "    #{$nav-prefix}-group-label {",
                        "        color: $groupColor;",
                        "        font-weight: $groupWeight;",
                        "    }",
                        "}",
                        "",
                        "@mixin sub-nav-statement(",
                        "    $textColor,",
                        "    $textWeight,",
                        "    $bgColor,",
                        "    $hoverBgColor,",
                        "    $hoverColor,",
                        "    $selectedBgColor,",
                        "    $selectedColor,",
                        "    $activeColor",
                        ") {",
                        "    #{$menu-prefix}-sub-menu #{$menu-prefix}-item {",
                        "        background-color: $bgColor;",
                        "        color: $textColor;",
                        "        font-weight: $textWeight;",
                        "",
                        "        &.#{$css-prefix}focused,",
                        "        &:hover {",
                        "            background-color: $hoverBgColor;",
                        "            color: $hoverColor;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}selected {",
                        "            background-color: $selectedBgColor;",
                        "            color: $selectedColor;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module nav: 导航",
                        "/// @tag Nav",
                        "/// @category component",
                        "/// @family navigation",
                        "/// @varPrefix $nav-",
                        "/// @classPrefix {prefix}-nav",
                        "/// @order {\"size/bounding\":10,\"size/item\":11,\"size/sub nav\":12,\"size/group\":13,\"size/icon\":14,\"statement/normal\":10,\"statement/normal/sub nav\":100,\"statement/normal/group\":101,\"statement/hover\":11,\"statement/hover/sub nav\":110,\"statement/selected\":12,\"statement/selected/sub nav\":120,\"statement/open\":13}",
                        "////",
                        "",
                        "",
                        "// nav variables",
                        "// --------------------------------------------------",
                        "",
                        "$nav-prefix: '.#{$css-prefix}nav';",
                        "$menu-prefix: '.#{$css-prefix}menu';",
                        "",
                        "// Size:Hoz",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$nav-hoz-height: $s-11 !default;",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$nav-hoz-font-size: $font-size-body-1 !default;",
                        "/// margin (t, b)",
                        "/// @namespace size/item",
                        "$nav-hoz-item-margin-tb: $s-zero !default;",
                        "/// margin (l, r)",
                        "/// @namespace size/item",
                        "$nav-hoz-item-margin-lr: $s-zero !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/item",
                        "$nav-hoz-item-padding-lr: $s-5 !default;",
                        "/// corner",
                        "/// @namespace size/item",
                        "$nav-hoz-item-corner: $corner-zero !default;",
                        "/// active line width",
                        "/// @namespace size/item",
                        "$nav-hoz-item-selected-active-line: $line-2 !default;",
                        "",
                        "// Size:Ver",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$nav-ver-height: $s-10 !default;",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$nav-ver-font-size: $font-size-body-1 !default;",
                        "/// margin (t, b)",
                        "/// @namespace size/item",
                        "$nav-ver-item-margin-tb: $s-zero !default;",
                        "/// margin (l, r)",
                        "/// @namespace size/item",
                        "$nav-ver-item-margin-lr: $s-zero !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/item",
                        "$nav-ver-item-padding-lr: $s-5 !default;",
                        "/// corner",
                        "/// @namespace size/item",
                        "$nav-ver-item-corner: $corner-zero !default;",
                        "/// active line width",
                        "/// @namespace size/item",
                        "$nav-ver-item-selected-active-line: $line-2 !default;",
                        "/// height",
                        "/// @namespace size/sub nav",
                        "$nav-ver-sub-nav-height: $s-10 !default;",
                        "/// text",
                        "/// @namespace size/sub nav",
                        "$nav-ver-sub-nav-font-size: $font-size-caption !default;",
                        "/// height",
                        "/// @namespace size/group",
                        "$nav-group-height: $s-10 !default;",
                        "/// text",
                        "/// @namespace size/group",
                        "$nav-group-font-size: $font-size-subhead !default;",
                        "",
                        "// Size:Common",
                        "// ----------------------------------------",
                        "/// size",
                        "/// @namespace size/icon",
                        "$nav-icon-self-size: $icon-xs !default;",
                        "/// margin (r)",
                        "/// @namespace size/icon",
                        "$nav-icon-self-margin: $s-1 !default;",
                        "/// size",
                        "/// @namespace size/icon",
                        "$nav-icon-only-font-size: $icon-s !default;",
                        "",
                        "// Statement:Primary",
                        "// ----------------------------------------",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$nav-primary-bg-color: $color-text1-4 !default;",
                        "",
                        "/// border",
                        "/// @namespace size/normal",
                        "$nav-primary-border-width: $line-zero !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-primary-border-color: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$nav-primary-text-color: $color-white !default;",
                        "/// text style",
                        "/// @namespace statement/normal",
                        "$nav-primary-text-style: $font-weight-2 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$nav-primary-shadow: $shadow-2 !default;",
                        "/// background",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-primary-sub-nav-bg-color: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-primary-sub-nav-text-color: $color-white !default;",
                        "/// text style",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-primary-sub-nav-text-style: $font-weight-2 !default;",
                        "/// text",
                        "/// @namespace statement/normal/group",
                        "$nav-primary-group-text-color: $color-text1-2 !default;",
                        "/// text style",
                        "/// @namespace statement/normal/group",
                        "$nav-primary-group-text-style: $font-weight-2 !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$nav-primary-item-hover-bg-color: $color-black !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$nav-primary-item-hover-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-primary-sub-nav-hover-bg-color: $color-black !default;",
                        "/// text",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-primary-sub-nav-hover-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/selected",
                        "$nav-primary-item-selected-bg-color: $color-black !default;",
                        "/// text color",
                        "/// @namespace statement/selected",
                        "$nav-primary-item-selected-text-color: $color-white !default;",
                        "/// text style",
                        "/// @namespace statement/selected",
                        "$nav-primary-item-selected-text-style: $font-weight-3 !default;",
                        "/// active line color",
                        "/// @namespace statement/selected",
                        "$nav-primary-item-selected-active-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-primary-sub-nav-selected-bg-color: $color-black !default;",
                        "/// text color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-primary-sub-nav-selected-text-color: $color-white !default;",
                        "/// active line color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-primary-sub-nav-active-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/open",
                        "$nav-primary-item-opened-bg-color: $color-black !default;",
                        "/// text",
                        "/// @namespace statement/open",
                        "$nav-primary-item-opened-text-color: $color-white !default;",
                        "",
                        "// Statement:Secondary",
                        "// ----------------------------------------",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$nav-secondary-bg-color: $color-brand1-6 !default;",
                        "/// border",
                        "/// @namespace size/normal",
                        "$nav-secondary-border-width: $line-zero !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-secondary-border-color: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$nav-secondary-text-color: $color-white !default;",
                        "/// text style",
                        "/// @namespace statement/normal",
                        "$nav-secondary-text-style: $font-weight-2 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$nav-secondary-shadow: $shadow-2 !default;",
                        "/// background",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-secondary-sub-nav-bg-color: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-secondary-sub-nav-text-color: $color-white !default;",
                        "/// text style",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-secondary-sub-nav-text-style: $font-weight-2 !default;",
                        "/// text",
                        "/// @namespace statement/normal/group",
                        "$nav-secondary-group-text-color: $color-white !default;",
                        "/// text style",
                        "/// @namespace statement/normal/group",
                        "$nav-secondary-group-text-style: $font-weight-2 !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$nav-secondary-item-hover-bg-color: $color-brand1-9 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$nav-secondary-item-hover-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-secondary-sub-nav-hover-bg-color: $color-brand1-9 !default;",
                        "/// text",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-secondary-sub-nav-hover-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/selected",
                        "$nav-secondary-item-selected-bg-color: $color-brand1-9 !default;",
                        "/// text color",
                        "/// @namespace statement/selected",
                        "$nav-secondary-item-selected-text-color: $color-white !default;",
                        "/// text style",
                        "/// @namespace statement/selected",
                        "$nav-secondary-item-selected-text-style: $font-weight-3 !default;",
                        "/// active line color",
                        "/// @namespace statement/selected",
                        "$nav-secondary-item-selected-active-color: $color-brand1-9 !default;",
                        "/// background",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-secondary-sub-nav-selected-bg-color: $color-brand1-9 !default;",
                        "/// text color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-secondary-sub-nav-selected-text-color: $color-white !default;",
                        "/// active line color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-secondary-sub-nav-active-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/open",
                        "$nav-secondary-item-opened-bg-color: $color-brand1-9 !default;",
                        "/// text",
                        "/// @namespace statement/open",
                        "$nav-secondary-item-opened-text-color: $color-white !default;",
                        "",
                        "// Statement:Normal",
                        "// ----------------------------------------",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$nav-normal-bg-color: $color-white !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-normal-border-color: $color-line1-2 !default;",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$nav-normal-text-color: $color-text1-4 !default;",
                        "/// text style",
                        "/// @namespace statement/normal",
                        "$nav-normal-text-style: $font-weight-2 !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-normal-border-color: $color-line1-1 !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-normal-border-line: $line-1 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$nav-normal-shadow: $shadow-2 !default;",
                        "/// background",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-normal-sub-nav-bg-color: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-normal-sub-nav-text-color: $color-text1-4 !default;",
                        "/// text style",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-normal-sub-nav-text-style: $font-weight-2 !default;",
                        "/// text",
                        "/// @namespace statement/normal/group",
                        "$nav-normal-group-text-color: $color-text1-2 !default;",
                        "/// text style",
                        "/// @namespace statement/normal/group",
                        "$nav-normal-group-text-style: $font-weight-2 !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$nav-normal-item-hover-bg-color: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$nav-normal-item-hover-text-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-normal-sub-nav-hover-bg-color: $color-fill1-2 !default;",
                        "/// text",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-normal-sub-nav-hover-text-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/selected",
                        "$nav-normal-item-selected-bg-color: $color-fill1-2 !default;",
                        "/// text color",
                        "/// @namespace statement/selected",
                        "$nav-normal-item-selected-text-color: $color-brand1-6 !default;",
                        "/// text style",
                        "/// @namespace statement/selected",
                        "$nav-normal-item-selected-text-style: $font-weight-3 !default;",
                        "/// active line color",
                        "/// @namespace statement/selected",
                        "$nav-normal-item-selected-active-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-normal-sub-nav-selected-bg-color: $color-fill1-2 !default;",
                        "/// text color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-normal-sub-nav-selected-text-color: $color-brand1-6 !default;",
                        "/// active line color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-normal-sub-nav-active-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/open",
                        "$nav-normal-item-opened-bg-color: $color-fill1-2 !default;",
                        "/// text",
                        "/// @namespace statement/open",
                        "$nav-normal-item-opened-text-color: $color-brand1-6 !default;",
                        "",
                        "// Statement:Line",
                        "// ----------------------------------------",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$nav-line-bg-color: $color-transparent !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-line-border-color: $color-line1-2 !default;",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$nav-line-text-color: $color-text1-4 !default;",
                        "/// text style",
                        "/// @namespace statement/normal",
                        "$nav-line-text-style: $font-weight-2 !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-line-border-color: $color-line1-2 !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$nav-line-border-line: $line-1 !default;",
                        "/// background",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-line-sub-nav-bg-color: $color-transparent !default;",
                        "/// text",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-line-sub-nav-text-color: $color-text1-4 !default;",
                        "/// text style",
                        "/// @namespace statement/normal/sub nav",
                        "$nav-line-sub-nav-text-style: $font-weight-2 !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$nav-line-item-hover-bg-color: $color-transparent !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$nav-line-item-hover-text-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-line-sub-nav-hover-bg-color: $color-transparent !default;",
                        "/// text",
                        "/// @namespace statement/hover/sub nav",
                        "$nav-line-sub-nav-hover-text-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/selected",
                        "$nav-line-item-selected-bg-color: $color-transparent !default;",
                        "/// text color",
                        "/// @namespace statement/selected",
                        "$nav-line-item-selected-text-color: $color-brand1-6 !default;",
                        "/// text style",
                        "/// @namespace statement/selected",
                        "$nav-line-item-selected-text-style: $font-weight-3 !default;",
                        "/// active line color",
                        "/// @namespace statement/selected",
                        "$nav-line-item-selected-active-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-line-sub-nav-selected-bg-color: $color-transparent !default;",
                        "/// text color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-line-sub-nav-selected-text-color: $color-brand1-6 !default;",
                        "/// active line color",
                        "/// @namespace statement/selected/sub nav",
                        "$nav-line-sub-nav-active-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/open",
                        "$nav-line-item-opened-bg-color: $color-transparent !default;",
                        "/// text",
                        "/// @namespace statement/open",
                        "$nav-line-item-opened-text-color: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/normal/group",
                        "$nav-line-group-text-color: $color-text1-2 !default;",
                        "/// text style",
                        "/// @namespace statement/normal/group",
                        "$nav-line-group-text-style: $font-weight-2 !default;"
                    ]
                }
            }
        },
        "number-picker": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Icon from '../icon';",
                    "import Button from '../button';",
                    "import Input from '../input';",
                    "import ConfigProvider from '../config-provider';",
                    "import {func, obj} from '../util';",
                    "",
                    "/** NumberPicker */",
                    "class NumberPicker extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 设置类型",
                    "         * @enumdesc 普通, 内联",
                    "         */",
                    "        type: PropTypes.oneOf(['normal', 'inline']),",
                    "        /**",
                    "         * 大小",
                    "         */",
                    "        size: PropTypes.oneOf(['large', 'medium']),",
                    "        /**",
                    "         * 当前值",
                    "         */",
                    "        value: PropTypes.number,",
                    "        /**",
                    "         * 默认值",
                    "         */",
                    "        defaultValue: PropTypes.number,",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 步长",
                    "         */",
                    "        step: PropTypes.oneOfType([",
                    "            PropTypes.number,",
                    "            PropTypes.string,",
                    "        ]),",
                    "        /**",
                    "         * 保留小数点后位数",
                    "         */",
                    "        precision: PropTypes.number,",
                    "        /**",
                    "         * 用户是否可以输入",
                    "         */",
                    "        editable: PropTypes.bool,",
                    "        /**",
                    "         * 自动焦点",
                    "         */",
                    "        autoFocus: PropTypes.bool,",
                    "        /**",
                    "         * 数值被改变的事件",
                    "         * @param {Number} value 数据",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 键盘按下",
                    "         */",
                    "        onKeyDown: PropTypes.func,",
                    "        /**",
                    "         * 焦点获得",
                    "         */",
                    "        onFocus: PropTypes.func,",
                    "        /**",
                    "         * 焦点失去",
                    "         */",
                    "        onBlur: PropTypes.func,",
                    "        /**",
                    "         * 数值订正后的回调",
                    "         * @param {Object} obj {currentValue,oldValue:String}",
                    "         */",
                    "        onCorrect: PropTypes.func,",
                    "        /**",
                    "         * 最大值",
                    "         */",
                    "        max: PropTypes.number,",
                    "        /**",
                    "         * 最小值",
                    "         */",
                    "        min: PropTypes.number,",
                    "        /**",
                    "         * 自定义class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        state: PropTypes.oneOf(['error']),",
                    "",
                    "        /**",
                    "         * 格式化当前值",
                    "         * @param {Number} value",
                    "         * @return {String|Number}",
                    "         */",
                    "        format: PropTypes.func,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        max: Infinity,",
                    "        min: -Infinity,",
                    "        type: 'normal',",
                    "        size: 'medium',",
                    "        step: 1,",
                    "        style: {},",
                    "        precision: 0,",
                    "        editable: true,",
                    "        onChange: func.noop,",
                    "        onKeyDown: func.noop,",
                    "        onBlur: func.noop,",
                    "        onCorrect: func.noop,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        let value;",
                    "        if ('value' in props) {",
                    "            value = props.value;",
                    "        } else {",
                    "            value = props.defaultValue;",
                    "        }",
                    "",
                    "        this.state = {",
                    "            value: typeof value === 'undefined' ? '' : value,",
                    "            hasFocused: false,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            this.setState({",
                    "                value: nextProps.value === undefined ? '' : nextProps.value,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onChange(value, e) {",
                    "        if (this.props.editable === true) {",
                    "            value = value.trim();",
                    "            // ignore space",
                    "            if (this.state.value === value) {",
                    "                return;",
                    "            }",
                    "",
                    "            // in case of autoCorrect ('0.'=>0, '0.0'=>0) , we have these steps",
                    "            if (value) {",
                    "                // ignore when input start form '-'",
                    "                if (value === '-' || this.state.value === '-') {",
                    "                    this.setState({",
                    "                        value",
                    "                    });",
                    "                    return;",
                    "                }",
                    "                // ignore when next value = prev value.",
                    "                // ps: Number('0.')=0 ; Number('0.0')=0;",
                    "                // but take care of Number('')=0;",
                    "                if (Number(this.state.value) === Number(value)) {",
                    "                    this.setState({",
                    "                        value",
                    "                    });",
                    "                    return;",
                    "                }",
                    "                // ignore when value < min (because number is inputted one by one)",
                    "                if (!isNaN(value) && Number(value) < this.props.min) {",
                    "                    this.setState({",
                    "                        value",
                    "                    });",
                    "                    return;",
                    "                }",
                    "            }",
                    "",
                    "            this.setInputValue(value, e);",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * @param {Float} currentValue correct value",
                    "     * @param {String} oldValue input value",
                    "     */",
                    "    onCorrect(currentValue, oldValue) {",
                    "        this.props.onCorrect({",
                    "            currentValue,",
                    "            oldValue",
                    "        });",
                    "    }",
                    "",
                    "    onKeyDown(e, ...args) {",
                    "        if (e.keyCode === 38) {",
                    "            this.up(e);",
                    "        } else if (e.keyCode === 40) {",
                    "            this.down(e);",
                    "        }",
                    "        this.props.onKeyDown(e, ...args);",
                    "    }",
                    "",
                    "    onFocus(e, ...args) {",
                    "        const { onFocus } = this.props;",
                    "        this.setFocus(true);",
                    "        onFocus && onFocus(e, ...args);",
                    "    }",
                    "",
                    "    onBlur(e, ...args) {",
                    "        const value = this.getCurrentValidValue(e.target.value.trim());",
                    "        if (this.state.value !== value) {",
                    "            this.setValue(value, e);",
                    "        }",
                    "        this.setFocus(false);",
                    "        const { onBlur } = this.props;",
                    "        onBlur && onBlur(e, ...args);",
                    "    }",
                    "",
                    "    getCurrentValidValue(value) {",
                    "        let val = value;",
                    "        const props = this.props;",
                    "        if (val === '') {",
                    "            val = '';",
                    "        } else if (!isNaN(val)) {",
                    "            val = Number(val);",
                    "            if (val < props.min) {",
                    "                val = props.min;",
                    "            }",
                    "            if (val > props.max) {",
                    "                val = props.max;",
                    "            }",
                    "",
                    "            // precision=2  and input from 1.99 to 1.999, should stay with 1.99 not 2",
                    "            const strValue = `${val}`;",
                    "            const pointPos = strValue.indexOf('.');",
                    "            const cutPos = pointPos + 1 + this.getPrecision();",
                    "            if (pointPos !== -1 && strValue.length > cutPos) {",
                    "                val = Number(strValue.substr(0, cutPos));",
                    "            }",
                    "",
                    "        } else {",
                    "            val = this.state.value;",
                    "        }",
                    "",
                    "        if (`${val}` !== `${value}`) {",
                    "            this.onCorrect(val, value);",
                    "        }",
                    "",
                    "        return val;",
                    "    }",
                    "",
                    "    setValue(v, e, triggerType) {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value: v,",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onChange(isNaN(v) || v === '' ? undefined : v, {...e, triggerType});",
                    "    }",
                    "",
                    "    setInputValue(v, e) {",
                    "        const value = this.getCurrentValidValue(v);",
                    "        if (this.state.value !== value) {",
                    "            this.setValue(value, e);",
                    "        }",
                    "    }",
                    "",
                    "    setFocus(status) {",
                    "        const { format } = this.props;",
                    "        // Only trigger `setState` if `format` is settled to avoid unnecessary rendering",
                    "        if (typeof format === 'function') {",
                    "            this.setState({",
                    "                hasFocused: status,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    getPrecision() {",
                    "        const props = this.props;",
                    "        const stepString = props.step.toString();",
                    "        if (stepString.indexOf('e-') >= 0) {",
                    "            return parseInt(stepString.slice(stepString.indexOf('e-')), 10);",
                    "        }",
                    "        let precision = 0;",
                    "        if (stepString.indexOf('.') >= 0) {",
                    "            precision = stepString.length - stepString.indexOf('.') - 1;",
                    "        }",
                    "",
                    "        return Math.max(precision, this.props.precision);",
                    "    }",
                    "",
                    "    getPrecisionFactor() {",
                    "        const precision = this.getPrecision();",
                    "        return Math.pow(10, precision);",
                    "    }",
                    "",
                    "    upStep(val) {",
                    "        const {step, min} = this.props;",
                    "        const precisionFactor = this.getPrecisionFactor();",
                    "        let result;",
                    "        if (typeof val === 'number') {",
                    "            result = (precisionFactor * val + precisionFactor * step) / precisionFactor;",
                    "        } else {",
                    "            result = min === -Infinity ? step : min;",
                    "        }",
                    "        return result;",
                    "    }",
                    "",
                    "    downStep(val) {",
                    "        const {step, min} = this.props;",
                    "        const precisionFactor = this.getPrecisionFactor();",
                    "        let result;",
                    "        if (typeof val === 'number') {",
                    "            result = (precisionFactor * val - precisionFactor * step) / precisionFactor;",
                    "",
                    "            // in chrome browser: 0.3 - 0.2 = 0.09999999999, we should creact to 0.1",
                    "            const precision = this.getPrecision();",
                    "            if (precision > 0) {",
                    "                result = Number(Number(result).toFixed(precision));",
                    "            }",
                    "        } else {",
                    "            result = min === -Infinity ? -step : min;",
                    "        }",
                    "        return result;",
                    "    }",
                    "",
                    "    step(type, e) {",
                    "        if (e) {",
                    "            e.preventDefault();",
                    "        }",
                    "        const {disabled, min, max} = this.props;",
                    "        if (disabled) {",
                    "            return;",
                    "        }",
                    "        const value = this.state.value;",
                    "        if (isNaN(value)) {",
                    "            return;",
                    "        }",
                    "        const val = this[`${type}Step`](value);",
                    "        if (val > max || val < min) {",
                    "            return;",
                    "        }",
                    "        this.setValue(val, e, type);",
                    "    }",
                    "",
                    "    down(e) {",
                    "        this.step('down', e);",
                    "    }",
                    "",
                    "    up(e) {",
                    "        this.step('up', e);",
                    "    }",
                    "",
                    "    renderValue() {",
                    "        const { value, hasFocused } = this.state;",
                    "        const { format } = this.props;",
                    "        return (typeof format === 'function' && !hasFocused) ? format(value) : value;",
                    "    }",
                    "",
                    "    focus() {",
                    "        this.inputRef.getInstance().focus();",
                    "    }",
                    "",
                    "    saveInputRef(ref) {",
                    "        this.inputRef = ref;",
                    "    }",
                    "",
                    "    render() {",
                    "        const {type, prefix, disabled, style, className, size, max, min, autoFocus, editable, state} = this.props;",
                    "",
                    "        const prefixCls = `${prefix}number-picker`;",
                    "",
                    "        const cls = classNames({",
                    "            [prefixCls]: true,",
                    "            [`${prefixCls}-${this.props.type}`]: this.props.type,",
                    "            [`${prefix}${size}`]: true,",
                    "            [className]: className,",
                    "        });",
                    "",
                    "        let upDisabled = false;",
                    "        let downDisabled = false;",
                    "        const value = this.state.value;",
                    "        if (!isNaN(value)) {",
                    "            const val = Number(value);",
                    "            if (val >= max) {",
                    "                upDisabled = true;",
                    "            }",
                    "            if (val <= min) {",
                    "                downDisabled = true;",
                    "            }",
                    "        }",
                    "",
                    "        let innerAfter = null, innerAfterClassName = null, addonBefore = null, addonAfter = null;",
                    "        if (type === 'normal') {",
                    "            innerAfter = ([",
                    "                <Button disabled={disabled || upDisabled} onClick={this.up.bind(this)} key=\"0\">",
                    "                    <Icon size=\"xxs\" type=\"arrow-up\"/>",
                    "                </Button>,",
                    "                <Button disabled={disabled || downDisabled} onClick={this.down.bind(this)} key=\"1\">",
                    "                    <Icon size=\"xxs\" type=\"arrow-down\"/>",
                    "                </Button>",
                    "            ]);",
                    "            innerAfterClassName = `${prefixCls}-handler`;",
                    "        } else {",
                    "            addonBefore = (",
                    "                <Button size={size} disabled={disabled || downDisabled} onClick={this.down.bind(this)}>",
                    "                    <Icon type=\"minus\" size=\"xs\"/>",
                    "                </Button>",
                    "            );",
                    "            addonAfter = (",
                    "                <Button size={size} disabled={disabled || upDisabled} onClick={this.up.bind(this)}>",
                    "                    <Icon type=\"add\" size=\"xs\"/>",
                    "                </Button>",
                    "            );",
                    "        }",
                    "",
                    "        const others = obj.pickOthers(NumberPicker.propTypes, this.props);",
                    "        const dataAttrs = obj.pickAttrsWith(this.props, 'data-');",
                    "        return (<span className={cls} style={style} {...dataAttrs}>",
                    "            <Input",
                    "                {...others}",
                    "                state={state === 'error' ? 'error' : null}",
                    "                onBlur={this.onBlur.bind(this)}",
                    "                onFocus={this.onFocus.bind(this)}",
                    "                onKeyDown={this.onKeyDown.bind(this)}",
                    "                autoFocus={autoFocus}",
                    "                readOnly={!editable}",
                    "                value={this.renderValue()}",
                    "                disabled={disabled}",
                    "                size={size}",
                    "                onChange={this.onChange.bind(this)}",
                    "                ref={this.saveInputRef.bind(this)}",
                    "                innerAfter={innerAfter}",
                    "                innerAfterClassName={innerAfterClassName}",
                    "                addonBefore={addonBefore}",
                    "                addonAfter={addonAfter}",
                    "            />",
                    "        </span>);",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(NumberPicker);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$number-picker-prefix} {",
                    "    @include box-sizing;",
                    "    display: inline-block;",
                    "",
                    "    /* stylelint-disable declaration-no-important */",
                    "    .#{$css-prefix}btn {",
                    "        padding: 0 !important;",
                    "        line-height: 0 !important;",
                    "        box-shadow: none !important;",
                    "    }",
                    "",
                    "    &-normal {",
                    "        width: 80px;",
                    "",
                    "        .#{$css-prefix}input {",
                    "            width: 100%;",
                    "            input {",
                    "                padding-right: 2px;",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}btn {",
                    "            display: block;",
                    "",
                    "            &:hover {",
                    "                z-index: 1;",
                    "            }",
                    "            &:first-child {",
                    "                border-right: none;",
                    "                border-top: none;",
                    "                height: calc(50%);",
                    "                border-top-left-radius: 0;",
                    "                border-bottom-left-radius: 0;",
                    "                border-bottom-right-radius: 0;",
                    "            }",
                    "            &:last-child {",
                    "                border-right: none;",
                    "                border-bottom: none;",
                    "                margin-top: -1px;",
                    "                height: calc(50% + 1px);",
                    "                border-top-left-radius: 0;",
                    "                border-bottom-left-radius: 0;",
                    "                border-top-right-radius: 0;",
                    "            }",
                    "        }",
                    "        #{$number-picker-prefix}-handler {",
                    "            opacity: 0;",
                    "            transition: opacity .24s linear .1s;",
                    "            height: 100%;",
                    "        }",
                    "",
                    "        &:hover #{$number-picker-prefix}-handler {",
                    "            opacity: 1;",
                    "        }",
                    "",
                    "        .#{$css-prefix}input.#{$css-prefix}disabled #{$number-picker-prefix}-handler {",
                    "            opacity: 0;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}medium {",
                    "            .#{$css-prefix}btn {",
                    "                width: $number-picker-normal-m-button-width;",
                    "            }",
                    "            .#{$css-prefix}icon {",
                    "                @include icon-size($number-picker-normal-m-button-icon-size);",
                    "            }",
                    "        }",
                    "        &.#{$css-prefix}large {",
                    "            .#{$css-prefix}btn {",
                    "                width: $number-picker-normal-l-button-width;",
                    "            }",
                    "            .#{$css-prefix}icon {",
                    "                @include icon-size($number-picker-normal-l-button-icon-size);",
                    "            }",
                    "        }",
                    "    }",
                    "    &-inline {",
                    "        input {",
                    "            text-align: center;",
                    "        }",
                    "        &.#{$css-prefix}medium {",
                    "            width: 100px;",
                    "            .#{$css-prefix}icon {",
                    "                @include icon-size($number-picker-inline-m-button-icon-size);",
                    "            }",
                    "            .#{$css-prefix}btn:first-child {",
                    "                margin-right: $number-picker-inline-m-button-margin;",
                    "            }",
                    "            .#{$css-prefix}btn:last-child {",
                    "                margin-left: $number-picker-inline-m-button-margin;",
                    "            }",
                    "        }",
                    "        &.#{$css-prefix}large {",
                    "            width: 128px;",
                    "            .#{$css-prefix}icon {",
                    "                @include icon-size($number-picker-inline-l-button-icon-size);",
                    "            }",
                    "            .#{$css-prefix}btn:first-child {",
                    "                margin-right: $number-picker-inline-l-button-margin;",
                    "            }",
                    "            .#{$css-prefix}btn:last-child {",
                    "                margin-left: $number-picker-inline-l-button-margin;",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}btn {",
                    "            &.#{$css-prefix}medium {",
                    "                width: $form-element-medium-height;",
                    "            }",
                    "            &.#{$css-prefix}large {",
                    "                width: $form-element-large-height;",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../input/style.js';",
                    "import '../icon/style.js';",
                    "import '../button/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// number-picker mixins",
                        "// --------------------------------------------------"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module number-picker: 数字输入框",
                        "/// @tag NumberPicker",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $number-picker-",
                        "/// @classPrefix {prefix}-number-picker",
                        "/// @order {\"statement/normal\":10,\"statement/normal/input\":100,\"statement/normal/button\":101,\"statement/hover\":11,\"statement/hover/button\":110,\"statement/disabled\":12,\"statement/disabled/button\":120,\"size/bounding\":10,\"size/text\":11,\"size/input\":12,\"size/button\":13}",
                        "////",
                        "",
                        "$number-picker-prefix: '.#{$css-prefix}number-picker';",
                        "",
                        "// Normal",
                        "// --------------------------------------------------",
                        "",
                        "/// width",
                        "/// @namespace size/button",
                        "$number-picker-normal-m-button-width: $s-5 !default;",
                        "/// width",
                        "/// @namespace size/button",
                        "$number-picker-normal-l-button-width: $s-5 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/button",
                        "$number-picker-normal-m-button-icon-size: $icon-xxs !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/button",
                        "$number-picker-normal-l-button-icon-size: $icon-xxs !default;",
                        "",
                        "// inline",
                        "// --------------------------------------------------",
                        "",
                        "/// icon",
                        "/// @namespace size/button",
                        "$number-picker-inline-m-button-icon-size: $icon-xs !default;",
                        "/// margin",
                        "/// @type number",
                        "/// @namespace size/button",
                        "$number-picker-inline-m-button-margin: 2px !default;",
                        "/// icon",
                        "/// @namespace size/button",
                        "$number-picker-inline-l-button-icon-size: $icon-xs !default;",
                        "/// margin",
                        "/// @type number",
                        "/// @namespace size/button",
                        "$number-picker-inline-l-button-margin: 2px !default;"
                    ]
                }
            }
        },
        "overlay": {
            "gateway.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, Children } from 'react';",
                    "import { findDOMNode, createPortal } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import { func } from '../util';",
                    "import findNode from './utils/find-node';",
                    "",
                    "const { makeChain } = func;",
                    "",
                    "export default class Gateway extends Component {",
                    "    static propTypes = {",
                    "        children: PropTypes.node,",
                    "        container: PropTypes.any,",
                    "        target: PropTypes.any,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        container: () => document.body",
                    "    };",
                    "",
                    "    componentDidMount() {",
                    "        this.containerNode = this.getContainerNode(this.props);",
                    "        this.forceUpdate();",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        this.containerNode = this.getContainerNode(nextProps);",
                    "    }",
                    "",
                    "    getContainerNode(props) {",
                    "        const targetNode = findNode(props.target);",
                    "        return findNode(props.container, targetNode);",
                    "    }",
                    "",
                    "    getChildNode() {",
                    "        return findDOMNode(this.child);",
                    "    }",
                    "",
                    "    saveChildRef = ref => {",
                    "        this.child = ref;",
                    "    }",
                    "",
                    "    render() {",
                    "        if (!this.containerNode) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const { children } = this.props;",
                    "        let child = children ? Children.only(children) : null;",
                    "        if (!child) {",
                    "            return null;",
                    "        }",
                    "",
                    "        if (typeof child.ref === 'string') {",
                    "            throw new Error('Can not set ref by string in Gateway, use function instead.');",
                    "        }",
                    "        child = React.cloneElement(child, {",
                    "            ref: makeChain(this.saveChildRef, child.ref)",
                    "        });",
                    "",
                    "        return createPortal(child, this.containerNode);",
                    "    }",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Overlay from './overlay';",
                    "import Gateway from './gateway';",
                    "import Position from './position';",
                    "import Popup from './popup';",
                    "",
                    "Overlay.Gateway = Gateway;",
                    "Overlay.Position = Position;",
                    "Overlay.Popup = ConfigProvider.config(Popup, {",
                    "    exportNames: ['overlay']",
                    "});",
                    "",
                    "export default ConfigProvider.config(Overlay, {",
                    "    exportNames: ['getContent', 'getContentNode']",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    ".#{$css-prefix}overlay-wrapper {",
                    "    .#{$css-prefix}overlay-inner {",
                    "        z-index: 1001;",
                    "    }",
                    "",
                    "    .#{$css-prefix}overlay-backdrop {",
                    "        position: fixed;",
                    "        z-index: 1001;",
                    "        top: 0;",
                    "        left: 0;",
                    "        width: 100%;",
                    "        height: 100%;",
                    "        background: $mask-background;",
                    "        transition: opacity .3s;",
                    "        opacity: 0;",
                    "    }",
                    "",
                    "    &.opened .#{$css-prefix}overlay-backdrop {",
                    "        opacity: $mask-opacity;",
                    "    }",
                    "}"
                ]
            },
            "manager.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "const overlayManager = {",
                    "    allOverlays: [],",
                    "",
                    "    addOverlay(overlay) {",
                    "        this.removeOverlay(overlay);",
                    "        this.allOverlays.unshift(overlay);",
                    "    },",
                    "",
                    "    isCurrentOverlay(overlay) {",
                    "        return overlay && this.allOverlays[0] === overlay;",
                    "    },",
                    "",
                    "    removeOverlay(overlay) {",
                    "        const i = this.allOverlays.indexOf(overlay);",
                    "        if (i > -1) {",
                    "            this.allOverlays.splice(i, 1);",
                    "        }",
                    "    }",
                    "};",
                    "",
                    "export default overlayManager;"
                ]
            },
            "overlay.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, Children } from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import { dom, events, func, support, focus, KEYCODE, guid } from '../util';",
                    "import overlayManager from './manager';",
                    "import Gateway from './gateway';",
                    "import Position from './position';",
                    "import findNode from './utils/find-node';",
                    "",
                    "const { saveLastFocusNode, getFocusNodeList, backLastFocusNode } = focus;",
                    "const { makeChain, noop, bindCtx } = func;",
                    "",
                    "const isScrollDisplay = function(element) {",
                    "    try {",
                    "        const scrollbarStyle = window.getComputedStyle(element, '::-webkit-scrollbar');",
                    "        return !scrollbarStyle || scrollbarStyle.getPropertyValue('display') !== 'none';",
                    "    } catch (e) {",
                    "        // ignore error for firefox",
                    "    }",
                    "",
                    "    return true;",
                    "};",
                    "const hasScroll = () => {",
                    "    const doc = document.documentElement;",
                    "    return doc.scrollHeight > doc.clientHeight && dom.scrollbar().width > 0 && isScrollDisplay(document.documentElement) && isScrollDisplay(document.body);",
                    "};",
                    "const prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];",
                    "const getStyleProperty = (node, name) => {",
                    "    const style = window.getComputedStyle(node);",
                    "    let ret = '';",
                    "    for (let i = 0; i < prefixes.length; i++) {",
                    "        ret = style.getPropertyValue(prefixes[i] + name);",
                    "        if (ret) {",
                    "            break;",
                    "        }",
                    "    }",
                    "    return ret;",
                    "};",
                    "",
                    "const modals = [];",
                    "let bodyOverflowY, bodyPaddingRight;",
                    "",
                    "/**",
                    " * Overlay",
                    " * */",
                    "export default class Overlay extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 弹层内容",
                    "         */",
                    "        children: PropTypes.any,",
                    "        /**",
                    "         * 是否显示弹层",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层请求关闭时触发事件的回调函数",
                    "         * @param {String} type 弹层关闭的来源",
                    "         * @param {Object} e DOM 事件",
                    "         */",
                    "        onRequestClose: PropTypes.func,",
                    "        /**",
                    "         * 弹层定位的参照元素",
                    "         */",
                    "        target: PropTypes.any,",
                    "        /**",
                    "         * 弹层相对于参照元素的定位, 详见开发指南的[定位部分](#定位)",
                    "         */",
                    "        align: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),",
                    "        /**",
                    "         * 弹层相对于参照元素定位的微调",
                    "         */",
                    "        offset: PropTypes.array,",
                    "        /**",
                    "         * 渲染组件的容器，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点",
                    "         */",
                    "        container: PropTypes.any,",
                    "        /**",
                    "         * 是否显示遮罩",
                    "         */",
                    "        hasMask: PropTypes.bool,",
                    "        /**",
                    "         * 是否支持 esc 按键关闭弹层",
                    "         */",
                    "        canCloseByEsc: PropTypes.bool,",
                    "        /**",
                    "         * 点击弹层外的区域是否关闭弹层，不显示遮罩时生效",
                    "         */",
                    "        canCloseByOutSideClick: PropTypes.bool,",
                    "        /**",
                    "         * 点击遮罩区域是否关闭弹层，显示遮罩时生效",
                    "         */",
                    "        canCloseByMask: PropTypes.bool,",
                    "        /**",
                    "         * 弹层打开前触发事件的回调函数",
                    "         */",
                    "        beforeOpen: PropTypes.func,",
                    "        /**",
                    "         * 弹层打开时触发事件的回调函数",
                    "         */",
                    "        onOpen: PropTypes.func,",
                    "        /**",
                    "         * 弹层打开后触发事件的回调函数, 如果有动画，则在动画结束后触发",
                    "         */",
                    "        afterOpen: PropTypes.func,",
                    "        /**",
                    "         * 弹层关闭前触发事件的回调函数",
                    "         */",
                    "        beforeClose: PropTypes.func,",
                    "        /**",
                    "         * 弹层关闭时触发事件的回调函数",
                    "         */",
                    "        onClose: PropTypes.func,",
                    "        /**",
                    "         * 弹层关闭后触发事件的回调函数, 如果有动画，则在动画结束后触发",
                    "         */",
                    "        afterClose: PropTypes.func,",
                    "        /**",
                    "         * 弹层定位完成前触发的事件",
                    "         */",
                    "        beforePosition: PropTypes.func,",
                    "        /**",
                    "         * 弹层定位完成时触发的事件",
                    "         * @param {Object} config 定位的参数",
                    "         * @param {Array} config.align 对齐方式，如 ['cc', 'cc']（如果开启 needAdjust，可能和预先设置的 align 不同）",
                    "         * @param {Number} config.top 距离视口顶部距离",
                    "         * @param {Number} config.left 距离视口左侧距离",
                    "         * @param {Object} node 定位参照的容器节点",
                    "         */",
                    "        onPosition: PropTypes.func,",
                    "        /**",
                    "         * 是否在每次弹层重新渲染后强制更新定位信息，一般用于弹层内容区域大小发生变化时，仍需保持原来的定位方式",
                    "         */",
                    "        shouldUpdatePosition: PropTypes.bool,",
                    "        /**",
                    "         * 弹层打开时是否让其中的元素自动获取焦点",
                    "         */",
                    "        autoFocus: PropTypes.bool,",
                    "        /**",
                    "         * 当弹层由于页面滚动等情况不在可视区域时，是否自动调整定位以出现在可视区域",
                    "         */",
                    "        needAdjust: PropTypes.bool,",
                    "        /**",
                    "         * 是否禁用页面滚动",
                    "         */",
                    "        disableScroll: PropTypes.bool,",
                    "        /**",
                    "         * 隐藏时是否保留子节点",
                    "         */",
                    "        cache: PropTypes.bool,",
                    "        /**",
                    "         * 安全节点，当点击 document 的时候，如果包含该节点则不会关闭弹层，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点，或者以上值组成的数组",
                    "         */",
                    "        safeNode: PropTypes.any,",
                    "        /**",
                    "         * 弹层的根节点的样式类",
                    "         */",
                    "        wrapperClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层的根节点的内联样式",
                    "         */",
                    "        wrapperStyle: PropTypes.object,",
                    "        /**",
                    "         * 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画",
                    "         * @default { in: 'expandInDown', out: 'expandOutUp' }",
                    "         */",
                    "        animation: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),",
                    "        onMaskMouseEnter: PropTypes.func,",
                    "        onMaskMouseLeave: PropTypes.func",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        visible: false,",
                    "        onRequestClose: noop,",
                    "        target: Position.VIEWPORT,",
                    "        align: 'tl bl',",
                    "        offset: [0, 0],",
                    "        hasMask: false,",
                    "        canCloseByEsc: true,",
                    "        canCloseByOutSideClick: true,",
                    "        canCloseByMask: true,",
                    "        beforeOpen: noop,",
                    "        onOpen: noop,",
                    "        afterOpen: noop,",
                    "        beforeClose: noop,",
                    "        onClose: noop,",
                    "        afterClose: noop,",
                    "        beforePosition: noop,",
                    "        onPosition: noop,",
                    "        onMaskMouseEnter: noop,",
                    "        onMaskMouseLeave: noop,",
                    "        shouldUpdatePosition: false,",
                    "        autoFocus: false,",
                    "        needAdjust: true,",
                    "        disableScroll: false,",
                    "        cache: false",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            visible: props.visible,",
                    "            status: 'none',",
                    "            animation: this.getAnimation(props)",
                    "        };",
                    "",
                    "        this.lastAlign = props.align;",
                    "",
                    "        bindCtx(this, [",
                    "            'handlePosition',",
                    "            'handleAnimateEnd',",
                    "            'handleDocumentKeyDown',",
                    "            'handleDocumentClick',",
                    "            'handleMaskClick',",
                    "            'beforeOpen',",
                    "            'beforeClose'",
                    "        ]);",
                    "",
                    "        this.timeoutMap = {};",
                    "    }",
                    "",
                    "    componentWillMount() {",
                    "        if (this.props.visible) {",
                    "            this.beforeOpen();",
                    "            this.props.beforeOpen();",
                    "",
                    "            if (this.state.animation && support.animation) {",
                    "                this.enter();",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        this.componentDidUpdate({ visible: false });",
                    "        this.addDocumentEvents();",
                    "",
                    "        overlayManager.addOverlay(this);",
                    "",
                    "        if (this.state.visible) {",
                    "            this._isMounted = true;",
                    "        }",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if (!this._isMounted && nextProps.visible) {",
                    "            this._isMounted = true;",
                    "        }",
                    "",
                    "        const willOpen = !this.props.visible && nextProps.visible;",
                    "        const willClose = this.props.visible && !nextProps.visible;",
                    "        if (willOpen) {",
                    "            this.beforeOpen();",
                    "            nextProps.beforeOpen();",
                    "        } else if (willClose) {",
                    "            this.beforeClose();",
                    "            nextProps.beforeClose();",
                    "        }",
                    "",
                    "        if (nextProps.animation || nextProps.animation === false) {",
                    "            this.setState({",
                    "                animation: nextProps.animation",
                    "            });",
                    "        }",
                    "",
                    "        if (nextProps.animation !== false && support.animation) {",
                    "            if (willOpen) {",
                    "                this.enter();",
                    "            } else if (willClose) {",
                    "                this.leave();",
                    "            }",
                    "        } else {",
                    "            this.setState({",
                    "                visible: nextProps.visible",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    componentDidUpdate(prevProps) {",
                    "        const open = !prevProps.visible && this.props.visible;",
                    "        const close = prevProps.visible && !this.props.visible;",
                    "        if (this.state.animation && support.animation) {",
                    "            if (open || close) {",
                    "                this.addAnimationEvents();",
                    "            }",
                    "        } else {",
                    "            const wrapperNode = this.getWrapperNode();",
                    "            if (open) {",
                    "                setTimeout(() => {",
                    "                    this.props.onOpen();",
                    "                    this.props.afterOpen();",
                    "                    dom.addClass(wrapperNode, 'opened');",
                    "                    overlayManager.addOverlay(this);",
                    "                });",
                    "            } else if (close) {",
                    "                this.props.onClose();",
                    "                this.props.afterClose();",
                    "                dom.removeClass(wrapperNode, 'opened');",
                    "                overlayManager.removeOverlay(this);",
                    "            }",
                    "            this.setFocusNode();",
                    "        }",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        this._isDestroyed = true;",
                    "        this._isMounted = false;",
                    "        overlayManager.removeOverlay(this);",
                    "        this.removeDocumentEvents();",
                    "        if (this.focusTimeout) {",
                    "            clearTimeout(this.focusTimeout);",
                    "        }",
                    "        if (this._animation) {",
                    "            this._animation.off();",
                    "            this._animation = null;",
                    "        }",
                    "        this.beforeClose();",
                    "    }",
                    "",
                    "    getAnimation(props) {",
                    "        if (props.animation === false) {",
                    "            return false;",
                    "        }",
                    "",
                    "        if (props.animation) {",
                    "            return props.animation;",
                    "        }",
                    "",
                    "        return this.getAnimationByAlign(props.align);",
                    "    }",
                    "",
                    "    getAnimationByAlign(align) {",
                    "        switch (align[0]) {",
                    "            case 't':",
                    "                return {",
                    "                    in: 'expandInDown',",
                    "                    out: 'expandOutUp'",
                    "                };",
                    "            case 'b':",
                    "                return {",
                    "                    in: 'expandInUp',",
                    "                    out: 'expandOutDown'",
                    "                };",
                    "            default:",
                    "                return {",
                    "                    in: 'expandInDown',",
                    "                    out: 'expandOutUp'",
                    "                };",
                    "        }",
                    "    }",
                    "",
                    "    addAnimationEvents() {",
                    "        setTimeout(() => {",
                    "            const node = this.getContentNode();",
                    "            if (node) {",
                    "                const id = guid();",
                    "",
                    "                this._animation = events.on(node, support.animation.end, this.handleAnimateEnd.bind(this, id));",
                    "",
                    "                const animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;",
                    "                const animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;",
                    "                const time = animationDelay + animationDuration;",
                    "                if (time) {",
                    "                    this.timeoutMap[id] = setTimeout(() => {",
                    "                        this.handleAnimateEnd(id);",
                    "                    }, time * 1000 + 200);",
                    "                }",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "    handlePosition(config) {",
                    "        const align = config.align.join(' ');",
                    "",
                    "        if (!('animation' in this.props) && this.props.needAdjust && this.lastAlign !== align) {",
                    "            this.setState({",
                    "                animation: this.getAnimationByAlign(align)",
                    "            });",
                    "        }",
                    "",
                    "        this.lastAlign = align;",
                    "    }",
                    "",
                    "    handleAnimateEnd(id) {",
                    "        if (this.timeoutMap[id]) {",
                    "            clearTimeout(this.timeoutMap[id]);",
                    "        }",
                    "        delete this.timeoutMap[id];",
                    "",
                    "        if (this._animation) {",
                    "            this._animation.off();",
                    "            this._animation = null;",
                    "        }",
                    "",
                    "        if (!this._isMounted) {",
                    "            return;",
                    "        }",
                    "",
                    "        if (this.state.status === 'leaving') {",
                    "            this.setState({",
                    "                visible: false,",
                    "                status: 'none'",
                    "            });",
                    "",
                    "            this.onLeaved();",
                    "        } else if (this.state.status === 'entering') {",
                    "            this.setState({",
                    "                status: 'none'",
                    "            });",
                    "",
                    "            this.onEntered();",
                    "        }",
                    "    }",
                    "",
                    "    enter() {",
                    "        this.setState({",
                    "            visible: true,",
                    "            status: 'entering'",
                    "        }, () => {",
                    "            // NOTE: setState callback (second argument) now fires immediately after componentDidMount / componentDidUpdate instead of after all components have rendered.",
                    "            setTimeout(() => {",
                    "                if (!this._isDestroyed) {",
                    "                    this.onEntering();",
                    "                }",
                    "            });",
                    "        });",
                    "    }",
                    "",
                    "    leave() {",
                    "        this.setState({",
                    "            status: 'leaving'",
                    "        });",
                    "",
                    "        this.onLeaving();",
                    "    }",
                    "",
                    "    onEntering() {",
                    "        const wrapperNode = this.getWrapperNode();",
                    "        dom.addClass(wrapperNode, 'opened');",
                    "        this.props.onOpen();",
                    "    }",
                    "",
                    "    onLeaving() {",
                    "        const wrapperNode = this.getWrapperNode();",
                    "        dom.removeClass(wrapperNode, 'opened');",
                    "        this.props.onClose();",
                    "    }",
                    "",
                    "    onEntered() {",
                    "        overlayManager.addOverlay(this);",
                    "        this.setFocusNode();",
                    "        this.props.afterOpen();",
                    "    }",
                    "",
                    "    onLeaved() {",
                    "        overlayManager.removeOverlay(this);",
                    "        this.setFocusNode();",
                    "        this.props.afterClose();",
                    "    }",
                    "",
                    "    beforeOpen() {",
                    "        if (this.props.disableScroll) {",
                    "            if (modals.length === 0) {",
                    "                const style = {",
                    "                    overflowY: 'hidden'",
                    "                };",
                    "                const body = document.body;",
                    "                bodyOverflowY = body.style.overflowY;",
                    "                if (hasScroll()) {",
                    "                    bodyPaddingRight = body.style.paddingRight;",
                    "                    style.paddingRight = `${dom.getStyle(body, 'paddingRight') + dom.scrollbar().width}px`;",
                    "                }",
                    "",
                    "                dom.setStyle(body, style);",
                    "            }",
                    "            modals.push(this);",
                    "        }",
                    "    }",
                    "",
                    "    beforeClose() {",
                    "        if (this.props.disableScroll) {",
                    "            const index = modals.indexOf(this);",
                    "            if (index > -1) {",
                    "                if (modals.length === 1) {",
                    "                    const style = {",
                    "                        overflowY: bodyOverflowY",
                    "                    };",
                    "                    if (hasScroll()) {",
                    "                        style.paddingRight = bodyPaddingRight;",
                    "                    }",
                    "",
                    "                    dom.setStyle(document.body, style);",
                    "",
                    "                    bodyOverflowY = undefined;",
                    "                    bodyPaddingRight = undefined;",
                    "                }",
                    "",
                    "                modals.splice(index, 1);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    setFocusNode() {",
                    "        if (!this.props.autoFocus) {",
                    "            return;",
                    "        }",
                    "",
                    "        if (this.state.visible && !this._hasFocused) {",
                    "            saveLastFocusNode();",
                    "            // 这个时候很可能上一个弹层的关闭事件还未触发，导致焦点已经回到触发的元素",
                    "            // 这里延时处理一下，延时的时间为 document.click 捕获触发的延时时间",
                    "            this.focusTimeout = setTimeout(() => {",
                    "                const node = this.getContentNode();",
                    "                if (node) {",
                    "                    const focusNodeList = getFocusNodeList(node);",
                    "                    if (focusNodeList.length) {",
                    "                        focusNodeList[0].focus();",
                    "                    }",
                    "                    this._hasFocused = true;",
                    "                }",
                    "            }, 100);",
                    "        } else if (!this.state.visible && this._hasFocused) {",
                    "            backLastFocusNode();",
                    "            this._hasFocused = false;",
                    "        }",
                    "    }",
                    "",
                    "    getContent() {",
                    "        return this.contentRef;",
                    "    }",
                    "",
                    "    getContentNode() {",
                    "        return findDOMNode(this.contentRef);",
                    "    }",
                    "",
                    "    getWrapperNode() {",
                    "        return this.gatewayRef ? this.gatewayRef.getChildNode() : null;",
                    "    }",
                    "",
                    "    addDocumentEvents() {",
                    "        if (this.props.canCloseByEsc) {",
                    "            this._keydownEvents = events.on(document, 'keydown', this.handleDocumentKeyDown);",
                    "        }",
                    "        if (this.props.canCloseByOutSideClick) {",
                    "            this._clickEvents = events.on(document, 'click', this.handleDocumentClick);",
                    "        }",
                    "    }",
                    "",
                    "    removeDocumentEvents() {",
                    "        if (this._keydownEvents) {",
                    "            this._keydownEvents.off();",
                    "            this._keydownEvents = null;",
                    "        }",
                    "        if (this._clickEvents) {",
                    "            this._clickEvents.off();",
                    "            this._clickEvents = null;",
                    "        }",
                    "    }",
                    "",
                    "    handleDocumentKeyDown(e) {",
                    "        if (this.state.visible && e.keyCode === KEYCODE.ESC && overlayManager.isCurrentOverlay(this)) {",
                    "            this.props.onRequestClose('keyboard', e);",
                    "        }",
                    "    }",
                    "",
                    "    handleDocumentClick(e) {",
                    "        if (this.state.visible) {",
                    "            const { safeNode } = this.props;",
                    "            const safeNodes  = Array.isArray(safeNode) ? [...safeNode] : [safeNode];",
                    "            safeNodes.unshift(() => this.getWrapperNode());",
                    "",
                    "            for (let i = 0; i < safeNodes.length; i++) {",
                    "                const node = findNode(safeNodes[i], this.props);",
                    "                // HACK: 如果触发点击的节点是弹层内部的节点，并且在被点击后立即销毁，那么此时无法使用 node.contains(e.target)",
                    "                // 来判断此时点击的节点是否是弹层内部的节点，额外判断",
                    "                if (node && (node === e.target || node.contains(e.target) ||",
                    "                (e.target !== document && !document.documentElement.contains(e.target)))) {",
                    "                    return;",
                    "                }",
                    "            }",
                    "",
                    "            this.props.onRequestClose('docClick', e);",
                    "        }",
                    "    }",
                    "",
                    "    handleMaskClick(e) {",
                    "        if (this.props.canCloseByMask) {",
                    "            this.props.onRequestClose('maskClick', e);",
                    "        }",
                    "    }",
                    "",
                    "    saveContentRef = (ref) => {",
                    "        this.contentRef = ref;",
                    "    }",
                    "",
                    "    saveGatewayRef = (ref) => {",
                    "        this.gatewayRef = ref;",
                    "    }",
                    "",
                    "    // 兼容过去的用法: this.popupRef.getInstance().overlay.getInstance().getContentNode()",
                    "    getInstance() {",
                    "        return this;",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix, className, style, children: propChildren,",
                    "            target, align, offset, container, hasMask, needAdjust,",
                    "            beforePosition, onPosition, wrapperStyle, rtl,",
                    "            shouldUpdatePosition: propShouldUpdatePosition,",
                    "            cache, wrapperClassName, onMaskMouseEnter, onMaskMouseLeave",
                    "        } = this.props;",
                    "        const { visible: stateVisible, status, animation } = this.state;",
                    "",
                    "        let children = stateVisible || (cache && this._isMounted) ? propChildren : null;",
                    "        if (children) {",
                    "            const child = Children.only(children);",
                    "            const childClazz = classnames({",
                    "                [`${prefix}overlay-inner`]: true,",
                    "                [animation.in]: status === 'entering',",
                    "                [animation.out]: status === 'leaving',",
                    "                [child.props.className]: !!child.props.className,",
                    "                [className]: !!className",
                    "            });",
                    "            if (typeof child.ref === 'string') {",
                    "                throw new Error('Can not set ref by string in Overlay, use function instead.');",
                    "            }",
                    "",
                    "            children = React.cloneElement(child, {",
                    "                className: childClazz,",
                    "                style: {...child.props.style, ...style},",
                    "                ref: makeChain(this.saveContentRef, child.ref),",
                    "                'aria-hidden': !stateVisible && cache && this._isMounted",
                    "            });",
                    "",
                    "            if (align) {",
                    "                const shouldUpdatePosition = status === 'leaving' ? false : propShouldUpdatePosition;",
                    "                children = (",
                    "                    <Position {...({",
                    "                        children, target, align, offset, needAdjust,",
                    "                        beforePosition,",
                    "                        onPosition: makeChain(this.handlePosition, onPosition),",
                    "                        shouldUpdatePosition, rtl",
                    "                    })} />",
                    "                );",
                    "            }",
                    "",
                    "            const wrapperClazz = classnames([",
                    "                `${prefix}overlay-wrapper`,",
                    "                wrapperClassName",
                    "            ]);",
                    "            const newWrapperStyle = Object.assign({}, {",
                    "                display: stateVisible ? '' : 'none'",
                    "            }, wrapperStyle);",
                    "",
                    "            children = (",
                    "                <div className={wrapperClazz} style={newWrapperStyle} dir={rtl ? 'rtl' : undefined}>",
                    "                    {hasMask ?",
                    "                        <div className={`${prefix}overlay-backdrop`}",
                    "                            onClick={this.handleMaskClick}",
                    "                            onMouseEnter={onMaskMouseEnter}",
                    "                            onMouseLeave={onMaskMouseLeave}",
                    "                            dir={rtl ? 'rtl' : undefined} /> :",
                    "                        null}",
                    "                    {children}",
                    "                </div>",
                    "            );",
                    "        }",
                    "",
                    "        return <Gateway {...({container, target, children})} ref={this.saveGatewayRef} />;",
                    "    }",
                    "}"
                ]
            },
            "popup.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, Children } from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import { func, KEYCODE } from '../util';",
                    "import Overlay from './overlay';",
                    "",
                    "const { noop, makeChain, bindCtx } = func;",
                    "",
                    "/**",
                    " * Overlay.Popup",
                    " * @description 继承 Overlay 的 API，除非特别说明",
                    " * */",
                    "export default class Popup extends Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 弹层内容",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 触发弹层显示或隐藏的元素",
                    "         */",
                    "        trigger: PropTypes.element,",
                    "        /**",
                    "         * 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，'focus'，或者它们组成的数组，如 ['hover', 'focus']",
                    "         */",
                    "        triggerType: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),",
                    "        /**",
                    "         * 弹层当前是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示或隐藏时触发的回调函数",
                    "         * @param {Boolean} visible 弹层是否显示",
                    "         * @param {String} type 触发弹层显示或隐藏的来源",
                    "         * @param {Object} e DOM事件",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 设置此属性，弹层无法显示或隐藏",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效",
                    "         */",
                    "        delay: PropTypes.number,",
                    "        /**",
                    "         * 触发元素是否可以关闭弹层",
                    "         */",
                    "        canCloseByTrigger: PropTypes.bool,",
                    "        /**",
                    "         * 弹层定位的参照元素",
                    "         * @default target 属性，即触发元素",
                    "         */",
                    "        target: PropTypes.any,",
                    "        safeNode: PropTypes.any,",
                    "        /**",
                    "         * 是否跟随trigger滚动",
                    "         */",
                    "        followTrigger: PropTypes.bool,",
                    "        container: PropTypes.any,",
                    "        hasMask: PropTypes.bool,",
                    "        wrapperStyle: PropTypes.object,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        triggerType: 'hover',",
                    "        defaultVisible: false,",
                    "        onVisibleChange: noop,",
                    "        disabled: false,",
                    "        delay: 200,",
                    "        canCloseByTrigger: true,",
                    "        followTrigger: false,",
                    "        container: () => document.body,",
                    "        rtl: false,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible",
                    "        };",
                    "",
                    "        bindCtx(this, [",
                    "            'handleTriggerClick', 'handleTriggerKeyDown',",
                    "            'handleTriggerMouseEnter', 'handleTriggerMouseLeave',",
                    "            'handleTriggerFocus', 'handleTriggerBlur',",
                    "            'handleContentMouseEnter', 'handleContentMouseLeave',",
                    "            'handleContentMouseDown', 'handleRequestClose',",
                    "            'handleMaskMouseEnter', 'handleMaskMouseLeave'",
                    "        ]);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        ['_timer', '_hideTimer', '_showTimer'].forEach(time => {",
                    "            this[time] && clearTimeout(this[time]);",
                    "        });",
                    "    }",
                    "",
                    "    handleVisibleChange(visible, type, e) {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onVisibleChange(visible, type, e);",
                    "    }",
                    "",
                    "    handleTriggerClick(e) {",
                    "        if (this.state.visible && !this.props.canCloseByTrigger) {",
                    "            return;",
                    "        }",
                    "",
                    "        this.handleVisibleChange(!this.state.visible, 'fromTrigger', e);",
                    "    }",
                    "",
                    "    handleTriggerKeyDown(e) {",
                    "        if (e.keyCode === KEYCODE.SPACE || e.keyCode === KEYCODE.ENTER) {",
                    "            e.preventDefault();",
                    "            this.handleTriggerClick(e);",
                    "        }",
                    "    }",
                    "",
                    "    handleTriggerMouseEnter(e) {",
                    "        this._mouseNotFirstOnMask = false;",
                    "",
                    "        if (this._hideTimer) {",
                    "            clearTimeout(this._hideTimer);",
                    "            this._hideTimer = null;",
                    "        }",
                    "        if (this._showTimer) {",
                    "            clearTimeout(this._showTimer);",
                    "            this._showTimer = null;",
                    "        }",
                    "        if (!this.state.visible) {",
                    "            this._showTimer = setTimeout(() => {",
                    "                this.handleVisibleChange(true, 'fromTrigger', e);",
                    "            }, this.props.delay);",
                    "        }",
                    "    }",
                    "",
                    "    handleTriggerMouseLeave(e, type) {",
                    "        if (this._showTimer) {",
                    "            clearTimeout(this._showTimer);",
                    "            this._showTimer = null;",
                    "        }",
                    "        if (this.state.visible) {",
                    "            this._hideTimer = setTimeout(() => {",
                    "                this.handleVisibleChange(false, type || 'fromTrigger', e);",
                    "            }, this.props.delay);",
                    "        }",
                    "    }",
                    "",
                    "    handleTriggerFocus(e) {",
                    "        this.handleVisibleChange(true, 'fromTrigger', e);",
                    "    }",
                    "",
                    "    handleTriggerBlur(e) {",
                    "        if (!this._isForwardContent) {",
                    "            this.handleVisibleChange(false, 'fromTrigger', e);",
                    "        }",
                    "        this._isForwardContent = false;",
                    "    }",
                    "",
                    "    handleContentMouseDown() {",
                    "        this._isForwardContent = true;",
                    "    }",
                    "",
                    "    handleContentMouseEnter() {",
                    "        clearTimeout(this._hideTimer);",
                    "    }",
                    "",
                    "    handleContentMouseLeave(e) {",
                    "        this.handleTriggerMouseLeave(e, 'fromContent');",
                    "    }",
                    "",
                    "    handleMaskMouseEnter() {",
                    "        if (!this._mouseNotFirstOnMask) {",
                    "            clearTimeout(this._hideTimer);",
                    "            this._hideTimer = null;",
                    "            this._mouseNotFirstOnMask = false;",
                    "        }",
                    "    }",
                    "",
                    "    handleMaskMouseLeave() {",
                    "        this._mouseNotFirstOnMask = true;",
                    "    }",
                    "",
                    "    handleRequestClose(type, e) {",
                    "        this.handleVisibleChange(false, type, e);",
                    "    }",
                    "",
                    "    renderTrigger() {",
                    "        const { trigger, disabled } = this.props;",
                    "        const props = {",
                    "            key: 'trigger',",
                    "            'aria-haspopup': true,",
                    "            'aria-expanded': this.state.visible",
                    "        };",
                    "",
                    "        if (!disabled) {",
                    "            const { triggerType } = this.props;",
                    "            const triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];",
                    "            const { onClick, onKeyDown, onMouseEnter, onMouseLeave, onFocus, onBlur } = trigger.props;",
                    "            triggerTypes.forEach(triggerType => {",
                    "                switch (triggerType) {",
                    "                    case 'click':",
                    "                        props.onClick = makeChain(this.handleTriggerClick, onClick);",
                    "                        props.onKeyDown = makeChain(this.handleTriggerKeyDown, onKeyDown);",
                    "                        break;",
                    "                    case 'hover' :",
                    "                        props.onMouseEnter = makeChain(this.handleTriggerMouseEnter, onMouseEnter);",
                    "                        props.onMouseLeave = makeChain(this.handleTriggerMouseLeave, onMouseLeave);",
                    "                        break;",
                    "                    case 'focus':",
                    "                        props.onFocus = makeChain(this.handleTriggerFocus, onFocus);",
                    "                        props.onBlur = makeChain(this.handleTriggerBlur, onBlur);",
                    "                        break;",
                    "                    default:",
                    "                        break;",
                    "                }",
                    "            });",
                    "        }",
                    "",
                    "        return React.cloneElement(trigger, props);",
                    "    }",
                    "",
                    "    renderContent() {",
                    "        const { children, triggerType } = this.props;",
                    "        const triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];",
                    "        const content = Children.only(children);",
                    "        const { onMouseDown, onMouseEnter, onMouseLeave } = content.props;",
                    "        const props = {",
                    "            key: 'portal'",
                    "        };",
                    "",
                    "        triggerTypes.forEach(triggerType => {",
                    "            switch (triggerType) {",
                    "                case 'focus':",
                    "                    props.onMouseDown = makeChain(this.handleContentMouseDown, onMouseDown);",
                    "                    break;",
                    "                case 'hover':",
                    "                    props.onMouseEnter = makeChain(this.handleContentMouseEnter, onMouseEnter);",
                    "                    props.onMouseLeave = makeChain(this.handleContentMouseLeave, onMouseLeave);",
                    "                    break;",
                    "                default:",
                    "                    break;",
                    "            }",
                    "        });",
                    "",
                    "        return React.cloneElement(content, props);",
                    "    }",
                    "",
                    "    renderPortal() {",
                    "        const { target, safeNode, followTrigger, triggerType, hasMask, wrapperStyle, ...others } = this.props;",
                    "        let {container} = this.props;",
                    "        const findTriggerNode = () => (findDOMNode(this) || {});",
                    "        const safeNodes = Array.isArray(safeNode) ? [...safeNode] : [safeNode];",
                    "        safeNodes.unshift(findTriggerNode);",
                    "",
                    "        const newWrapperStyle = wrapperStyle || {};",
                    "",
                    "        if (followTrigger) {",
                    "            container = trigger => trigger.parentNode;",
                    "            newWrapperStyle.position = 'relative';",
                    "        }",
                    "",
                    "        if (triggerType === 'hover' && hasMask) {",
                    "            others.onMaskMouseEnter = this.handleMaskMouseEnter;",
                    "            others.onMaskMouseLeave = this.handleMaskMouseLeave;",
                    "        }",
                    "",
                    "        return (",
                    "            <Overlay {...others}",
                    "                key=\"overlay\"",
                    "                ref={overlay => (this.overlay = overlay)}",
                    "                visible={this.state.visible}",
                    "                target={target || findTriggerNode}",
                    "                container={container}",
                    "                safeNode={safeNodes}",
                    "                wrapperStyle={newWrapperStyle}",
                    "                triggerType={triggerType}",
                    "                hasMask={hasMask}",
                    "                onRequestClose={this.handleRequestClose}>",
                    "                {this.renderContent()}",
                    "            </Overlay>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        return [",
                    "            this.renderTrigger(),",
                    "            this.renderPortal()",
                    "        ];",
                    "    }",
                    "}"
                ]
            },
            "position.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import { Component, Children } from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import { func, dom, events } from '../util';",
                    "import position from './utils/position';",
                    "import findNode from './utils/find-node';",
                    "",
                    "const { noop, bindCtx } = func;",
                    "const { getStyle } = dom;",
                    "const place = position.place;",
                    "",
                    "export default class Position extends Component {",
                    "    static VIEWPORT = position.VIEWPORT;",
                    "",
                    "    static propTypes = {",
                    "        children: PropTypes.node,",
                    "        target: PropTypes.any,",
                    "        align: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),",
                    "        offset: PropTypes.array,",
                    "        beforePosition: PropTypes.func,",
                    "        onPosition: PropTypes.func,",
                    "        needAdjust: PropTypes.bool,",
                    "        needListenResize: PropTypes.bool,",
                    "        shouldUpdatePosition: PropTypes.bool,",
                    "        rtl: PropTypes.bool",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        align: 'tl bl',",
                    "        offset: [0, 0],",
                    "        beforePosition: noop,",
                    "        onPosition: noop,",
                    "        needAdjust: true,",
                    "        needListenResize: true,",
                    "        shouldUpdatePosition: false,",
                    "        rtl: false,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        bindCtx(this, ['handleResize']);",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        this.setPosition();",
                    "",
                    "        if (this.props.needListenResize) {",
                    "            events.on(window, 'resize', this.handleResize);",
                    "        }",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('align' in nextProps && nextProps.align !== this.props.align || nextProps.shouldUpdatePosition) {",
                    "            this.shouldUpdatePosition = true;",
                    "        }",
                    "    }",
                    "",
                    "    componentDidUpdate() {",
                    "        if (this.shouldUpdatePosition) {",
                    "            this.setPosition();",
                    "            this.shouldUpdatePosition = false;",
                    "        }",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        if (this.props.needListenResize) {",
                    "            events.off(window, 'resize', this.handleResize);",
                    "        }",
                    "",
                    "        clearTimeout(this.resizeTimeout);",
                    "    }",
                    "",
                    "    setPosition() {",
                    "        const { align, offset, beforePosition, onPosition, needAdjust, rtl } = this.props;",
                    "",
                    "        beforePosition();",
                    "",
                    "        const contentNode = this.getContentNode();",
                    "        const targetNode = this.getTargetNode();",
                    "        if (contentNode && targetNode) {",
                    "            const resultAlign = place({",
                    "                pinElement: contentNode,",
                    "                baseElement: targetNode,",
                    "                align,",
                    "                offset,",
                    "                needAdjust,",
                    "                isRtl: rtl,",
                    "            });",
                    "            const top = getStyle(contentNode, 'top');",
                    "            const left = getStyle(contentNode, 'left');",
                    "",
                    "            onPosition({",
                    "                align: resultAlign.split(' '),",
                    "                top,",
                    "                left",
                    "            }, contentNode);",
                    "        }",
                    "    }",
                    "",
                    "    getContentNode() {",
                    "        return findDOMNode(this);",
                    "    }",
                    "",
                    "    getTargetNode() {",
                    "        const { target } = this.props;",
                    "",
                    "        return target === position.VIEWPORT ? position.VIEWPORT : findNode(target, this.props);",
                    "    }",
                    "",
                    "    handleResize() {",
                    "        clearTimeout(this.resizeTimeout);",
                    "",
                    "        this.resizeTimeout = setTimeout(() => {",
                    "            this.setPosition();",
                    "        }, 200);",
                    "    }",
                    "",
                    "    render() {",
                    "        return Children.only(this.props.children);",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../animate/style.js';",
                    "import './main.scss';"
                ]
            },
            "utils": {
                "find-node.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import { findDOMNode } from 'react-dom';",
                        "",
                        "export default function findNode(target, param) {",
                        "    if (!target) {",
                        "        return null;",
                        "    }",
                        "",
                        "    if (typeof target === 'string') {",
                        "        return document.getElementById(target);",
                        "    }",
                        "",
                        "    if (typeof target === 'function') {",
                        "        target = target(param);",
                        "    }",
                        "",
                        "    if (!target) {",
                        "        return null;",
                        "    }",
                        "",
                        "    try {",
                        "        return findDOMNode(target);",
                        "    } catch (err) {",
                        "        return target;",
                        "    }",
                        "}"
                    ]
                },
                "position.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import {dom} from '../../util';",
                        "",
                        "const VIEWPORT = 'viewport';",
                        "",
                        "// IE8 not support pageXOffset",
                        "const getPageX = () => window.pageXOffset || document.documentElement.scrollLeft;",
                        "const getPageY = () => window.pageYOffset || document.documentElement.scrollTop;",
                        "",
                        "/**",
                        " * @private get element rect",
                        " * @param       {Element} elem",
                        " * @return      {Object}",
                        " */",
                        "function _getElementRect (elem) {",
                        "    let offsetTop = 0,",
                        "        offsetLeft = 0;",
                        "",
                        "    const offsetHeight = elem.offsetHeight;",
                        "    const offsetWidth = elem.offsetWidth;",
                        "",
                        "    do {",
                        "        if (!isNaN(elem.offsetTop)) {",
                        "            offsetTop += elem.offsetTop;",
                        "        }",
                        "        if (!isNaN(elem.offsetLeft)) {",
                        "            offsetLeft += elem.offsetLeft;",
                        "        }",
                        "    } while ((elem = elem.offsetParent) !== null);",
                        "",
                        "    return {",
                        "        top: offsetTop - (document.documentElement.scrollTop || document.body.scrollTop),",
                        "        left: offsetLeft - (document.documentElement.scrollLeft || document.body.scrollLeft),",
                        "        height: offsetHeight,",
                        "        width: offsetWidth",
                        "    };",
                        "}",
                        "",
                        "/**",
                        " * @private get viewport size",
                        " * @return {Object}",
                        " */",
                        "function _getViewportSize() {",
                        "    return {",
                        "        width: document.documentElement.clientWidth,",
                        "        height: document.documentElement.clientHeight",
                        "    };",
                        "}",
                        "export default class Position {",
                        "",
                        "    static VIEWPORT = VIEWPORT;",
                        "",
                        "    /**",
                        "     * @public static place method",
                        "     * @param  {Object}       props",
                        "     *     @param  {DOM}      props.pinElement",
                        "     *     @param  {DOM}      props.baseElement",
                        "     *     @param  {String}   props.align",
                        "     *     @param  {Number}   props.offset",
                        "     *     @param  {Boolean}  props.needAdjust",
                        "     *     @param  {Boolean}  props.isRtl",
                        "     * @return {Position}",
                        "     */",
                        "    static place = props => new Position(props).setPosition();",
                        "",
                        "",
                        "    constructor(props) {",
                        "        this.pinElement = props.pinElement;",
                        "        this.baseElement = props.baseElement;",
                        "        this.align = props.align || 'tl tl';",
                        "        this.offset = props.offset || [0, 0];",
                        "        this.needAdjust = props.needAdjust || false;",
                        "        this.isRtl = props.isRtl || false;",
                        "    }",
                        "",
                        "    setPosition() {",
                        "        const pinElement = this.pinElement;",
                        "        const baseElement = this.baseElement;",
                        "        const expectedAlign = this._getExpectedAlign();",
                        "        let isPinFixed, isBaseFixed, firstPositionResult;",
                        "        if (pinElement === VIEWPORT) {",
                        "            return;",
                        "        }",
                        "        if (dom.getStyle(pinElement, 'position') !== 'fixed') {",
                        "            dom.setStyle(pinElement, 'position', 'absolute');",
                        "            isPinFixed = false;",
                        "        } else {",
                        "            isPinFixed = true;",
                        "        }",
                        "        if (baseElement === VIEWPORT || dom.getStyle(baseElement, 'position') !== 'fixed') {",
                        "            isBaseFixed = false;",
                        "        } else {",
                        "            isBaseFixed = true;",
                        "        }",
                        "        // 根据期望的定位",
                        "        for (let i = 0; i < expectedAlign.length; i++) {",
                        "            const align = expectedAlign[i];",
                        "            const pinElementPoints = this._normalizePosition(pinElement, align.split(' ')[0], isPinFixed);",
                        "            const baseElementPoints = this._normalizePosition(baseElement, align.split(' ')[1], isPinFixed);",
                        "            const pinElementParentOffset = this._getParentOffset(pinElement);",
                        "            const baseElementOffset = (isPinFixed && isBaseFixed) ? this._getLeftTop(baseElement) : baseElementPoints.offset();",
                        "            const top = baseElementOffset.top + baseElementPoints.y - pinElementParentOffset.top - pinElementPoints.y;",
                        "            const left = baseElementOffset.left + baseElementPoints.x - pinElementParentOffset.left  - pinElementPoints.x;",
                        "            this._setPinElementPostion(pinElement, {left, top}, this.offset);",
                        "",
                        "            if (!firstPositionResult) {",
                        "                firstPositionResult = {left, top};",
                        "            }",
                        "            if (this._isInViewport(pinElement)) {",
                        "                return align;",
                        "            }",
                        "        }",
                        "",
                        "        const inViewportLeft = this._makeElementInViewport(pinElement, firstPositionResult.left, 'Left', isPinFixed);",
                        "        const inViewportTop = this._makeElementInViewport(pinElement, firstPositionResult.top, 'Top', isPinFixed);",
                        "",
                        "        this._setPinElementPostion(pinElement, {left: inViewportLeft, top: inViewportTop});",
                        "        return expectedAlign[0];",
                        "    }",
                        "",
                        "    _getParentOffset(element) {",
                        "        const parent = element.offsetParent || document.documentElement;",
                        "        let offset;",
                        "        if (parent === document.body && dom.getStyle(parent, 'position') === 'static') {",
                        "            offset = {",
                        "                top: 0,",
                        "                left: 0",
                        "            };",
                        "        } else {",
                        "            offset = this._getElementOffset(parent);",
                        "        }",
                        "",
                        "        offset.top += parseFloat(dom.getStyle(parent, 'border-top-width'), 10);",
                        "        offset.left += parseFloat(dom.getStyle(parent, 'border-left-width'), 10);",
                        "        offset.offsetParent = parent;",
                        "        return offset;",
                        "    }",
                        "",
                        "    _makeElementInViewport(pinElement, number, type, isPinFixed) {",
                        "        let result = number;",
                        "        const docElement = document.documentElement;",
                        "        const offsetParent = pinElement.offsetParent || document.documentElement;",
                        "",
                        "        if (result < 0) {",
                        "            if (isPinFixed) {",
                        "                result = 0;",
                        "            } else if (offsetParent === document.body && dom.getStyle(offsetParent, 'position') === 'static') {",
                        "                // Only when div's offsetParent is document.body, we set new position result.",
                        "                result = Math.max(docElement[`scroll${type}`], document.body[`scroll${type}`]);",
                        "            }",
                        "        }",
                        "",
                        "        return result;",
                        "    }",
                        "",
                        "    _normalizePosition(element, align, isPinFixed) {",
                        "        const points = this._normalizeElement(element, isPinFixed);",
                        "        this._normalizeXY(points, align);",
                        "",
                        "        return points;",
                        "    }",
                        "",
                        "    _normalizeXY(points, align) {",
                        "        const x = align.split('')[1];",
                        "        const y = align.split('')[0];",
                        "",
                        "        points.x = this._xyConverter(x, points, 'width');",
                        "        points.y = this._xyConverter(y, points, 'height');",
                        "",
                        "        return points;",
                        "    }",
                        "",
                        "    _xyConverter(align, points, type) {",
                        "        const res = align.replace(/t|l/gi, '0%')",
                        "            .replace(/c/gi, '50%')",
                        "            .replace(/b|r/gi, '100%')",
                        "            .replace(/(\\d+)%/gi, function(m, d) {",
                        "                return points.size()[type] * (d / 100);",
                        "            });",
                        "",
                        "        return parseFloat(res, 10) || 0;",
                        "    }",
                        "",
                        "    _getLeftTop(element) {",
                        "        return {",
                        "            left: parseFloat(dom.getStyle(element, 'left')) || 0,",
                        "            top: parseFloat(dom.getStyle(element, 'top')) || 0",
                        "        };",
                        "    }",
                        "",
                        "    _normalizeElement(element, isPinFixed) {",
                        "        const result = {",
                        "                element: element,",
                        "                x: 0,",
                        "                y: 0",
                        "            }, isViewport = (element === VIEWPORT), docElement = document.documentElement;",
                        "",
                        "        result.offset = () => {",
                        "            if (isPinFixed) {",
                        "                return {",
                        "                    left: 0,",
                        "                    top: 0",
                        "                };",
                        "            } else if (isViewport) {",
                        "                return {",
                        "                    left: getPageX(),",
                        "                    top: getPageY()",
                        "                };",
                        "            } else {",
                        "                return this._getElementOffset(element);",
                        "            }",
                        "        };",
                        "",
                        "        result.size = () => {",
                        "            if (isViewport) {",
                        "                return {",
                        "                    width: docElement.clientWidth,",
                        "                    height: docElement.clientHeight",
                        "                };",
                        "            } else {",
                        "                return {",
                        "                    width: element.offsetWidth,",
                        "                    height: element.offsetHeight",
                        "                };",
                        "            }",
                        "        };",
                        "",
                        "        return result;",
                        "    }",
                        "",
                        "    _getElementOffset(element) {",
                        "        const rect = element.getBoundingClientRect();",
                        "        const docElement = document.documentElement;",
                        "        const body = document.body;",
                        "        const docClientLeft = (docElement.clientLeft || body.clientLeft || 0);",
                        "        const docClientTop = (docElement.clientTop || body.clientTop || 0);",
                        "",
                        "        return {",
                        "            left: rect.left + (getPageX() - docClientLeft),",
                        "            top: rect.top + (getPageY() - docClientTop)",
                        "        };",
                        "    }",
                        "",
                        "    // According to the location of the overflow to calculate the desired positioning",
                        "    _getExpectedAlign() {",
                        "        const align = this.isRtl ? this._replaceAlignDir(this.align, /l|r/g, {l: 'r', r: 'l'}) : this.align;",
                        "        const expectedAlign = [align];",
                        "",
                        "        if (this.needAdjust) {",
                        "            if (/t|b/g.test(align)) {",
                        "                expectedAlign.push(this._replaceAlignDir(align, /t|b/g, {t: 'b', b: 't'}));",
                        "            }",
                        "            if (/l|r/g.test(align)) {",
                        "                expectedAlign.push(this._replaceAlignDir(align, /l|r/g, {l: 'r', r: 'l'}));",
                        "            }",
                        "            if (/c/g.test(align)) {",
                        "                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, {c: 'l'}));",
                        "                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, {c: 'r'}));",
                        "            }",
                        "            expectedAlign.push(this._replaceAlignDir(align, /l|r|t|b/g, {l: 'r', r: 'l', t: 'b', b: 't'}));",
                        "        }",
                        "        return expectedAlign;",
                        "    }",
                        "",
                        "    // Transform align order.",
                        "    _replaceAlignDir(align, regExp, map) {",
                        "        return align.replace(regExp, res => {",
                        "            return map[res];",
                        "        });",
                        "    }",
                        "",
                        "    // Detecting element is in the window， we want to adjust position later.",
                        "    _isInViewport(element) {",
                        "        const viewportSize = _getViewportSize();",
                        "        // Avoid animate problem that use offsetWidth instead of getBoundingClientRect.",
                        "        const elementRect = _getElementRect(element);",
                        "        return (elementRect.left >= 0 && elementRect.left + element.offsetWidth <= viewportSize.width &&",
                        "            elementRect.top >= 0 && elementRect.top + element.offsetHeight <= viewportSize.height);",
                        "    }",
                        "    // 在这里做RTL判断 top-left 定位转化为等效的 top-right定位",
                        "    _setPinElementPostion(pinElement, postion, offset = [0, 0]) {",
                        "        const {top, left} = postion;",
                        "        if (!this.isRtl) {",
                        "            dom.setStyle(pinElement, {",
                        "                left: `${left + offset[0]}px`,",
                        "                top: `${top + offset[1]}px`,",
                        "            });",
                        "            return;",
                        "        }",
                        "",
                        "        // transfer {left,top} equaly to {right,top}",
                        "        const pinElementParentOffset = this._getParentOffset(pinElement);",
                        "        const {width: offsetParentWidth} =  _getElementRect(pinElementParentOffset.offsetParent);",
                        "        const {width} = _getElementRect(pinElement);",
                        "        const right = offsetParentWidth - (left + width);",
                        "        dom.setStyle(pinElement, {",
                        "            left: 'auto',",
                        "            right: `${right + offset[0]}px`,",
                        "            top: `${top + offset[1]}px`,",
                        "        });",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        "pagination": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Pagination from './pagination';",
                    "",
                    "export default Pagination;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$pagination-prefix} {",
                    "    @include box-sizing;",
                    "    @include clearfix;",
                    "    font-size: 0;",
                    "",
                    "    &-total {",
                    "        display: inline-block;",
                    "        font-size: $font-size-body-2;",
                    "        margin-right: $s-4;",
                    "    }",
                    "",
                    "    &-pages {",
                    "        display: inline-block;",
                    "    }",
                    "",
                    "    &-list {",
                    "        display: inline-block;",
                    "        vertical-align: top;",
                    "    }",
                    "",
                    "    & &-item {",
                    "        display: inline-block;",
                    "",
                    "        &.#{$css-prefix}current {",
                    "            border-color: $pagination-item-current-border-color;",
                    "            background: $pagination-item-current-bg;",
                    "            color: $pagination-item-current-color;",
                    "        }",
                    "        &.#{$css-prefix}current:hover,",
                    "        &.#{$css-prefix}current:focus {",
                    "            border-color: $pagination-item-current-hover-border-color;",
                    "            background: $pagination-item-current-hover-bg;",
                    "            color: $pagination-item-current-hover-color;",
                    "        }",
                    "    }",
                    "",
                    "    &-ellipsis {",
                    "        display: inline-block;",
                    "        color: $pagination-ellipsis-color;",
                    "        vertical-align: top;",
                    "    }",
                    "",
                    "    &-display {",
                    "        display: inline-block;",
                    "        margin: 0 $s-4;",
                    "        color: $pagination-total-color;",
                    "        vertical-align: middle;",
                    "",
                    "        em {",
                    "            font-style: normal;",
                    "            color: $pagination-current-color;",
                    "        }",
                    "    }",
                    "",
                    "    &-jump {",
                    "        &-text {",
                    "            display: inline-block;",
                    "            vertical-align: middle;",
                    "            color: $pagination-jump-color;",
                    "        }",
                    "",
                    "        &-input {",
                    "            margin: 0 $pagination-input-margin;",
                    "            vertical-align: top;",
                    "        }",
                    "",
                    "        &-go {",
                    "            margin-left: $s-1;",
                    "            vertical-align: top;",
                    "        }",
                    "    }",
                    "",
                    "    &-size-selector {",
                    "        display: inline-block;",
                    "",
                    "        &-title {",
                    "            margin-right: $pagination-size-selector-title-margin-right;",
                    "            color: $pagination-size-selector-title-color;",
                    "        }",
                    "        &-filter {",
                    "            display: inline-block;",
                    "            vertical-align: middle;",
                    "        }",
                    "        &-dropdown {",
                    "            vertical-align: top;",
                    "            min-width: $s-16;",
                    "        }",
                    "        &-popup {",
                    "            min-width: $s-16;",
                    "        }",
                    "        &-btn.#{$css-prefix}btn-text {",
                    "            height: initial;",
                    "            line-height: initial;",
                    "            color: $pagination-size-selector-filter-color;",
                    "            border-radius: 0;",
                    "",
                    "            &.#{$css-prefix}current {",
                    "                color: $pagination-size-selector-filter-current-color;",
                    "            }",
                    "",
                    "            & + #{$pagination-prefix}-size-selector-btn {",
                    "                border-left: $line-1 solid $color-line1-2;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-pages + #{$pagination-prefix}-size-selector,",
                    "    &-size-selector + #{$pagination-prefix}-pages {",
                    "        margin-left: $s-10;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}hide {",
                    "        display: none;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}start {",
                    "        #{$pagination-prefix}-pages {",
                    "            float: right;",
                    "        }",
                    "        #{$pagination-prefix}-size-selector {",
                    "            float: left;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}end {",
                    "        #{$pagination-prefix}-pages {",
                    "            float: left;",
                    "        }",
                    "        #{$pagination-prefix}-size-selector {",
                    "            float: right;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}small {",
                    "        @include pagination-size(",
                    "            'ltr',",
                    "            $itemSplit: $pagination-small-item-split,",
                    "            $itemPaddingLeftRight: $s-2 - 2px,",
                    "            $ellipsisSize: $pagination-small-ellipsis-size,",
                    "            $totalFontSize: $pagination-small-total-font-size,",
                    "            $currentFontSize: $pagination-small-current-font-size,",
                    "            $otherFontSize: $pagination-small-jump-font-size,",
                    "            $pageHeihgt: $form-element-small-height,",
                    "            $numberPaddingLeftRight: $pagination-small-size-selector-number-padding,",
                    "            $inputWidth: $pagination-small-input-width",
                    "        );",
                    "",
                    "        &.#{$css-prefix}arrow-only {",
                    "            @include arrow-only-size($s-5);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}arrow-prev-only {",
                    "            @include arrow-prev-only-size($s-5);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}no-border {",
                    "            @include no-border-size($s-2);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}mini {",
                    "            @include mini-size($s-1);",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        @include pagination-size(",
                    "            'ltr',",
                    "            $itemSplit: $pagination-item-split,",
                    "            $itemPaddingLeftRight: $s-3 - 2px,",
                    "            $ellipsisSize: $pagination-ellipsis-size,",
                    "            $totalFontSize: $pagination-total-font-size,",
                    "            $currentFontSize: $pagination-current-font-size,",
                    "            $otherFontSize: $pagination-jump-font-size,",
                    "            $pageHeihgt: $form-element-medium-height,",
                    "            $numberPaddingLeftRight: $pagination-size-selector-number-padding,",
                    "            $inputWidth: $pagination-input-width",
                    "        );",
                    "",
                    "        &.#{$css-prefix}arrow-only {",
                    "            @include arrow-only-size($s-7);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}arrow-prev-only {",
                    "            @include arrow-prev-only-size($s-7);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}no-border {",
                    "            @include no-border-size($s-3);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}mini {",
                    "            @include mini-size($s-1);",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        @include pagination-size(",
                    "            'ltr',",
                    "            $itemSplit: $pagination-large-item-split,",
                    "            $itemPaddingLeftRight: $s-4 - 1px,",
                    "            $ellipsisSize: $pagination-large-ellipsis-size,",
                    "            $totalFontSize: $pagination-large-total-font-size,",
                    "            $currentFontSize: $pagination-large-current-font-size,",
                    "            $otherFontSize: $pagination-large-jump-font-size,",
                    "            $pageHeihgt: $form-element-large-height,",
                    "            $numberPaddingLeftRight: $pagination-large-size-selector-number-padding,",
                    "            $inputWidth: $pagination-large-input-width",
                    "        );",
                    "",
                    "        &.#{$css-prefix}arrow-only {",
                    "            @include arrow-only-size($s-10);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}arrow-prev-only {",
                    "            @include arrow-prev-only-size($s-10);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}no-border {",
                    "            @include no-border-size($s-4);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}mini {",
                    "            @include mini-size($s-2);",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "pagination.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import cx from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import Icon from '../icon';",
                    "import Button from '../button';",
                    "import Input from '../input';",
                    "import Select from '../select';",
                    "import { KEYCODE } from '../util';",
                    "import zhCN from '../locale/zh-cn.js';",
                    "",
                    "const { Option } = Select;",
                    "const noop = () => {};",
                    "",
                    "/**",
                    " * Pagination",
                    " */",
                    "class Pagination extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义国际化文案对象",
                    "         */",
                    "        locale: PropTypes.object,",
                    "        /**",
                    "         * 分页组件类型",
                    "         */",
                    "        type: PropTypes.oneOf(['normal', 'simple', 'mini']),",
                    "        /**",
                    "         * 前进后退按钮样式",
                    "         */",
                    "        shape: PropTypes.oneOf(['normal', 'arrow-only', 'arrow-prev-only', 'no-border']),",
                    "        /**",
                    "         * 分页组件大小",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * （受控）当前页码",
                    "         */",
                    "        current: PropTypes.number,",
                    "        /**",
                    "         * （非受控）初始页码",
                    "         */",
                    "        defaultCurrent: PropTypes.number,",
                    "        /**",
                    "         * 页码发生改变时的回调函数",
                    "         * @param {Number} current 改变后的页码数",
                    "         * @param {Object} e 点击事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 总记录数",
                    "         */",
                    "        total: PropTypes.number,",
                    "        /**",
                    "         * 总数的渲染函数",
                    "         * @param {Number} total 总数",
                    "         * @param {Array} range 当前数据在总数中的区间",
                    "         */",
                    "        totalRender: PropTypes.func,",
                    "        /**",
                    "         * 页码显示的数量，更多的使用...代替",
                    "         */",
                    "        pageShowCount: PropTypes.number,",
                    "        /**",
                    "         * 一页中的记录数",
                    "         */",
                    "        pageSize: PropTypes.number,",
                    "        /**",
                    "         * 每页显示选择器类型",
                    "         */",
                    "        pageSizeSelector: PropTypes.oneOf([false, 'filter', 'dropdown']),",
                    "        /**",
                    "         * 每页显示选择器可选值",
                    "         */",
                    "        pageSizeList: PropTypes.oneOfType([",
                    "            PropTypes.arrayOf(PropTypes.number),",
                    "            PropTypes.arrayOf(PropTypes.shape({",
                    "                label: PropTypes.string,",
                    "                value: PropTypes.number",
                    "            }))",
                    "        ]),",
                    "        /**",
                    "         * 自定义页码渲染函数，函数作用于页码button以及当前页/总页数的数字渲染",
                    "         * @param {Number} index 分页的页码，从1开始",
                    "         * @return {ReactNode} 返回渲染结果",
                    "        */",
                    "        pageNumberRender: PropTypes.func,",
                    "        /**",
                    "         * 每页显示选择器在组件中的位置",
                    "         */",
                    "        pageSizePosition: PropTypes.oneOf(['start', 'end']),",
                    "        /**",
                    "         * 存在每页显示选择器时是否使用浮动布局",
                    "         */",
                    "        useFloatLayout: PropTypes.bool,",
                    "        /**",
                    "         * 每页显示记录数量改变时的回调函数",
                    "         * @param {Number} pageSize 改变后的每页显示记录数",
                    "         */",
                    "        onPageSizeChange: PropTypes.func,",
                    "        /**",
                    "         * 当分页数为1时，是否隐藏分页器",
                    "         */",
                    "        hideOnlyOnePage: PropTypes.bool,",
                    "        /**",
                    "         * type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域",
                    "         */",
                    "        showJump: PropTypes.bool,",
                    "        /**",
                    "         * 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page}",
                    "         */",
                    "        link: PropTypes.string",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        rtl: false,",
                    "        locale: zhCN.Pagination,",
                    "        type: 'normal',",
                    "        shape: 'normal',",
                    "        size: 'medium',",
                    "        defaultCurrent: 1,",
                    "        onChange: noop,",
                    "        pageSize: 10,",
                    "        pageSizeSelector: false,",
                    "        pageSizeList: [5, 10, 20],",
                    "        pageSizePosition: 'start',",
                    "        onPageSizeChange: noop,",
                    "        useFloatLayout: false,",
                    "        total: 100,",
                    "        pageShowCount: 5,",
                    "        hideOnlyOnePage: false,",
                    "        showJump: true,",
                    "        pageNumberRender: index => index",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        const { current, defaultCurrent, total, pageSize } = props;",
                    "        this.state = {",
                    "            current: this.correctCurrent(current || defaultCurrent, total, pageSize),",
                    "            currentPageSize: pageSize",
                    "        };",
                    "        this.onJump = this.onJump.bind(this);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        const { current, total, pageSize } = nextProps;",
                    "",
                    "        const st = {};",
                    "        const newCurrent = this.correctCurrent(current || this.state.current, total, pageSize);",
                    "        if (this.state.current !== newCurrent) {",
                    "            st.current = newCurrent;",
                    "        }",
                    "        if (this.state.currentPageSize !== pageSize) {",
                    "            st.currentPageSize = pageSize;",
                    "        }",
                    "",
                    "        if (Object.keys(st).length) {",
                    "            this.setState(st);",
                    "        }",
                    "    }",
                    "",
                    "    correctCurrent(currentPage, total, currentPageSize) {",
                    "        const totalPage = this.getTotalPage(total, currentPageSize);",
                    "        return currentPage > totalPage ? totalPage : currentPage;",
                    "    }",
                    "",
                    "    getTotalPage (total, currentPageSize) {",
                    "        const totalPage = Math.ceil(total / currentPageSize);",
                    "        return totalPage <= 0 ? 1 : totalPage;",
                    "    }",
                    "",
                    "    onJump(e) {",
                    "        const { total } = this.props;",
                    "        const { current, currentPageSize } = this.state;",
                    "        const totalPage = this.getTotalPage(total, currentPageSize);",
                    "        const value = parseInt(this.inputValue, 10);",
                    "        if (typeof value === 'number' && value >= 1 && value <= totalPage && value !== current) {",
                    "            this.onPageItemClick(value, e);",
                    "        }",
                    "    }",
                    "    onPageItemClick(page, e) {",
                    "        if (!('current' in this.props)) {",
                    "            this.setState({",
                    "                current: page",
                    "            }, () => {",
                    "                this.props.onChange(page, e);",
                    "            });",
                    "        } else {",
                    "            this.props.onChange(page, e);",
                    "        }",
                    "    }",
                    "",
                    "    onInputChange(value) {",
                    "        this.inputValue = value;",
                    "    }",
                    "",
                    "    onSelectSize(pageSize) {",
                    "        const newState = {",
                    "            currentPageSize: pageSize",
                    "        };",
                    "",
                    "        const totalPage = this.getTotalPage(this.props.total, pageSize);",
                    "        if (this.state.current > totalPage) {",
                    "            newState.current = totalPage;",
                    "        }",
                    "",
                    "        this.setState(newState);",
                    "        this.props.onPageSizeChange(pageSize);",
                    "    }",
                    "",
                    "    renderPageTotal() {",
                    "        const { prefix, total, totalRender } = this.props;",
                    "        const { currentPageSize, current } = this.state;",
                    "        const range = [(current - 1) * currentPageSize + 1, current * currentPageSize];",
                    "",
                    "        return (",
                    "            <div className={`${prefix}pagination-total`}>",
                    "                {totalRender(total, range)}",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    renderPageItem(index) {",
                    "        const { prefix, size, link, pageNumberRender } = this.props;",
                    "        const { current } = this.state;",
                    "",
                    "        const isCurrent = parseInt(index, 10) === current;",
                    "        const props = {",
                    "            size,",
                    "            className: cx({",
                    "                [`${prefix}pagination-item`]: true,",
                    "                [`${prefix}current`]: isCurrent",
                    "            }),",
                    "            onClick: isCurrent ? noop : this.onPageItemClick.bind(this, index)",
                    "        };",
                    "        if (link) {",
                    "            props.component = 'a';",
                    "            props.href = link.replace('{page}', index);",
                    "        }",
                    "",
                    "        return <Button {...props} key={index}>{pageNumberRender(index)}</Button>;",
                    "    }",
                    "",
                    "    renderPageFirst(current) {",
                    "        const { prefix, size, shape, locale } = this.props;",
                    "",
                    "        const isFirst = current <= 1;",
                    "        const props = {",
                    "            disabled: isFirst,",
                    "            size,",
                    "            className: cx({",
                    "                [`${prefix}pagination-item`]: true,",
                    "                [`${prefix}prev`]: true",
                    "            }),",
                    "            onClick: this.onPageItemClick.bind(this, current - 1)",
                    "        };",
                    "",
                    "        const icon = <Icon type=\"arrow-left\" />;",
                    "",
                    "        return (",
                    "            <Button {...props}>",
                    "                {icon}",
                    "                {shape === 'arrow-only' ||",
                    "                 shape === 'arrow-prev-only' ||",
                    "                 shape === 'no-border' ?  '' : locale.prev}",
                    "            </Button>",
                    "        );",
                    "    }",
                    "",
                    "    renderPageLast(current, totalPage) {",
                    "        const { prefix, size, shape, locale } = this.props;",
                    "",
                    "        const isLast = current >= totalPage;",
                    "        const props = {",
                    "            disabled: isLast,",
                    "            size,",
                    "            className: cx({",
                    "                [`${prefix}pagination-item`]: true,",
                    "                [`${prefix}next`]: true",
                    "            }),",
                    "            onClick: this.onPageItemClick.bind(this, current + 1)",
                    "        };",
                    "",
                    "        const icon = <Icon type=\"arrow-right\" />;",
                    "",
                    "        return (",
                    "            <Button {...props}>",
                    "                {shape === 'arrow-only' ||",
                    "                 shape === 'no-border' ? '' : locale.next}",
                    "                {icon}",
                    "            </Button>",
                    "        );",
                    "    }",
                    "",
                    "    renderPageEllipsis(idx) {",
                    "        const { prefix } = this.props;",
                    "",
                    "        return <Icon className={`${prefix}pagination-ellipsis`} type=\"ellipsis\" key={`ellipsis-${idx}`} />;",
                    "    }",
                    "",
                    "    renderPageJump() {",
                    "        const { prefix, size, locale } = this.props;",
                    "",
                    "        /* eslint-disable react/jsx-key */",
                    "        return [",
                    "            <span className={`${prefix}pagination-jump-text`}>{locale.goTo}</span>,",
                    "            <Input",
                    "                className={`${prefix}pagination-jump-input`}",
                    "                type=\"text\"",
                    "                size={size}",
                    "                onChange={this.onInputChange.bind(this)}",
                    "                onKeyDown={(e) => {",
                    "                    if (e.keyCode === KEYCODE.ENTER) {",
                    "                        this.onJump(e);",
                    "                    }",
                    "                }} />,",
                    "            <span className={`${prefix}pagination-jump-text`}>{locale.page}</span>,",
                    "            <Button className={`${prefix}pagination-jump-go`} size={size} onClick={this.onJump}>{locale.go}</Button>",
                    "        ];",
                    "        /* eslint-enable react/jsx-key */",
                    "    }",
                    "",
                    "    renderPageDisplay(current, totalPage) {",
                    "        const { prefix, pageNumberRender } = this.props;",
                    "",
                    "        return (",
                    "            <span className={`${prefix}pagination-display`}>",
                    "                <em>{pageNumberRender(current)}</em>/{pageNumberRender(totalPage)}",
                    "            </span>",
                    "        );",
                    "    }",
                    "",
                    "    renderPageList(current, totalPage) {",
                    "        const { prefix, pageShowCount } = this.props;",
                    "        const pages = [];",
                    "",
                    "        if (totalPage <= pageShowCount) {",
                    "            for (let i = 1; i <= totalPage; i++) {",
                    "                pages.push(this.renderPageItem(i));",
                    "            }",
                    "        } else {",
                    "            // 除去第一页，最后一页以及当前页，剩下的页数",
                    "            const othersCount = pageShowCount - 3;",
                    "            const halfCount = parseInt(othersCount / 2, 10);",
                    "            let start, end;",
                    "",
                    "            pages.push(this.renderPageItem(1));",
                    "",
                    "            start = current - halfCount;",
                    "            end = current + halfCount;",
                    "            if (start <= 1) {",
                    "                start = 2;",
                    "                end = start + othersCount;",
                    "            }",
                    "            if (start > 2) {",
                    "                pages.push(this.renderPageEllipsis(1));",
                    "            }",
                    "            if (end >= totalPage - 1) {",
                    "                end = totalPage - 1;",
                    "                start = totalPage - 1 - othersCount;",
                    "            }",
                    "            for (let j = start; j <= end; j++) {",
                    "                pages.push(this.renderPageItem(j));",
                    "            }",
                    "            if (end < totalPage - 1) {",
                    "                pages.push(this.renderPageEllipsis(2));",
                    "            }",
                    "",
                    "            pages.push(this.renderPageItem(totalPage));",
                    "        }",
                    "",
                    "        return <div className={`${prefix}pagination-list`}>{pages}</div>;",
                    "    }",
                    "",
                    "    renderPageSizeSelector() {",
                    "        const { prefix, pageSizeSelector, locale } = this.props;",
                    "        const pageSizeSpan = <span className={`${prefix}pagination-size-selector-title`}>{locale.pageSize}</span>;",
                    "",
                    "        switch (pageSizeSelector) {",
                    "            case 'filter':",
                    "                return (",
                    "                    <div className={`${prefix}pagination-size-selector`}>",
                    "                        {pageSizeSpan}",
                    "                        {this.renderPageSizeFilter()}",
                    "                    </div>",
                    "                );",
                    "            case 'dropdown':",
                    "                return (",
                    "                    <div className={`${prefix}pagination-size-selector`}>",
                    "                        {pageSizeSpan}",
                    "                        {this.renderPageSizeDropdown()}",
                    "                    </div>",
                    "                );",
                    "            default:",
                    "                return null;",
                    "        }",
                    "    }",
                    "",
                    "    renderPageSizeFilter() {",
                    "        const { prefix, size, pageSizeList } = this.props;",
                    "        const { currentPageSize } = this.state;",
                    "",
                    "        return (",
                    "            <div className={`${prefix}pagination-size-selector-filter`}>",
                    "                {pageSizeList.map((item, index) => {",
                    "                    let label;",
                    "                    let pageSize;",
                    "                    if (item.value) {",
                    "                        // {label: '', value: 5}",
                    "                        label = item.label;",
                    "                        pageSize = item.value;",
                    "                    } else {",
                    "                        // number",
                    "                        label = pageSize = item;",
                    "                    }",
                    "                    const classes = cx({",
                    "                        [`${prefix}pagination-size-selector-btn`]: true,",
                    "                        [`${prefix}current`]: pageSize === currentPageSize",
                    "                    });",
                    "",
                    "                    return (",
                    "                        <Button key={index}",
                    "                            text",
                    "                            size={size}",
                    "                            className={classes}",
                    "                            onClick={pageSize !== currentPageSize ? this.onSelectSize.bind(this, pageSize) : null}>",
                    "                            {label}",
                    "                        </Button>",
                    "                    );",
                    "                })}",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    renderPageSizeDropdown() {",
                    "        const { prefix, size, pageSizeList } = this.props;",
                    "        const { currentPageSize } = this.state;",
                    "",
                    "        return (",
                    "            <Select className={`${prefix}pagination-size-selector-dropdown`}",
                    "                popupClassName={`${prefix}pagination-size-selector-popup`}",
                    "                autoWidth",
                    "                size={size}",
                    "                value={currentPageSize}",
                    "                onChange={this.onSelectSize.bind(this)}>",
                    "                {pageSizeList.map((item, index) => {",
                    "                    let label;",
                    "                    let pageSize;",
                    "                    if (item.value) {",
                    "                        // {label: '', value: 5}",
                    "                        label = item.label;",
                    "                        pageSize = item.value;",
                    "                    } else {",
                    "                        // number",
                    "                        label = pageSize = item;",
                    "                    }",
                    "                    return <Option key={index} value={pageSize}>{label}</Option>;",
                    "                })}",
                    "            </Select>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const {",
                    "            prefix, pure, rtl, type, size, shape, className, total, totalRender,",
                    "            pageSize, pageSizeSelector, pageSizeList, pageSizePosition, useFloatLayout, onPageSizeChange,",
                    "            hideOnlyOnePage, showJump, locale, current, defaultCurrent, pageShowCount, pageNumberRender,",
                    "            link, onChange, ...others",
                    "        } = this.props;",
                    "        /* eslint-enable */",
                    "        const { current: currentPage, currentPageSize } = this.state;",
                    "        const totalPage = this.getTotalPage(total, currentPageSize);",
                    "        const pageFirst = this.renderPageFirst(currentPage);",
                    "        const pageLast = this.renderPageLast(currentPage, totalPage);",
                    "        const sizeSelector = this.renderPageSizeSelector();",
                    "        const isStart = pageSizePosition === 'start';",
                    "",
                    "        const classes = cx({",
                    "            [`${prefix}pagination`]: true,",
                    "            [`${prefix}${size}`]: size,",
                    "            [`${prefix}${type}`]: type,",
                    "            [`${prefix}${shape}`]: shape,",
                    "            [`${prefix}start`]: !!pageSizeSelector && isStart && useFloatLayout,",
                    "            [`${prefix}end`]: !!pageSizeSelector && !isStart && useFloatLayout,",
                    "            [`${prefix}hide`]: totalPage <= 1 && hideOnlyOnePage,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const buildComponent = (...coms) => (",
                    "            <div className={classes} {...others}>",
                    "                {isStart && sizeSelector}",
                    "                {totalRender ? this.renderPageTotal() : null}",
                    "                <div className={`${prefix}pagination-pages`}>",
                    "                    {coms.map((com, index) => com && React.cloneElement(com, { key: index }))}",
                    "                </div>",
                    "                {!isStart && sizeSelector}",
                    "            </div>",
                    "        );",
                    "",
                    "        switch (type) {",
                    "            case 'mini':",
                    "                return buildComponent(pageFirst, pageLast);",
                    "            case 'simple': {",
                    "                const pageDisplay = this.renderPageDisplay(currentPage, totalPage);",
                    "                return buildComponent(pageFirst, pageDisplay, pageLast);",
                    "            }",
                    "            case 'normal': {",
                    "                const pageList = this.renderPageList(currentPage, totalPage);",
                    "                const pageDisplay = showJump && total > pageSize * pageShowCount ? this.renderPageDisplay(currentPage, totalPage) : null;",
                    "                const pageJump = showJump && total > pageSize * pageShowCount ? this.renderPageJump(currentPage, totalPage) : null;",
                    "                return buildComponent(pageFirst, pageList, pageLast, pageDisplay, ...pageJump);",
                    "            }",
                    "            default:",
                    "                return null;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Pagination);"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$pagination-prefix}[dir=\"rtl\"] {",
                    "",
                    "    #{$pagination-prefix} {",
                    "        &-total {",
                    "            margin-right: 0;",
                    "            margin-left: $s-4;",
                    "        }",
                    "",
                    "        &-jump {",
                    "            &-go {",
                    "                margin-left: 0;",
                    "                margin-right: $s-1;",
                    "            }",
                    "        }",
                    "",
                    "        &-size-selector {",
                    "",
                    "            &-title {",
                    "                margin-right: 0;",
                    "                margin-left: $pagination-size-selector-title-margin-right;",
                    "            }",
                    "",
                    "            &-btn.#{$css-prefix}btn-text {",
                    "                & + #{$pagination-prefix}-size-selector-btn {",
                    "                    border-left: none;",
                    "                    border-right: $line-1 solid $color-line1-2;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        &-pages + #{$pagination-prefix}-size-selector,",
                    "        &-size-selector + #{$pagination-prefix}-pages {",
                    "            margin-left: 0;",
                    "            margin-right: $s-10;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}start {",
                    "        #{$pagination-prefix}-pages {",
                    "            float: left;",
                    "        }",
                    "        #{$pagination-prefix}-size-selector {",
                    "            float: right;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}end {",
                    "        #{$pagination-prefix}-pages {",
                    "            float: right;",
                    "        }",
                    "        #{$pagination-prefix}-size-selector {",
                    "            float: left;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}small {",
                    "        @include pagination-size(",
                    "            'rtl',",
                    "            $itemSplit: $pagination-small-item-split,",
                    "            $itemPaddingLeftRight: $s-2 - 2px,",
                    "            $ellipsisSize: $pagination-small-ellipsis-size,",
                    "            $totalFontSize: $pagination-small-total-font-size,",
                    "            $currentFontSize: $pagination-small-current-font-size,",
                    "            $otherFontSize: $pagination-small-jump-font-size,",
                    "            $pageHeihgt: $form-element-small-height,",
                    "            $numberPaddingLeftRight: $pagination-small-size-selector-number-padding,",
                    "            $inputWidth: $pagination-small-input-width",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        @include pagination-size(",
                    "            'rtl',",
                    "            $itemSplit: $pagination-item-split,",
                    "            $itemPaddingLeftRight: $s-3 - 2px,",
                    "            $ellipsisSize: $pagination-ellipsis-size,",
                    "            $totalFontSize: $pagination-total-font-size,",
                    "            $currentFontSize: $pagination-current-font-size,",
                    "            $otherFontSize: $pagination-jump-font-size,",
                    "            $pageHeihgt: $form-element-medium-height,",
                    "            $numberPaddingLeftRight: $pagination-size-selector-number-padding,",
                    "            $inputWidth: $pagination-input-width",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        @include pagination-size(",
                    "            'rtl',",
                    "            $itemSplit: $pagination-large-item-split,",
                    "            $itemPaddingLeftRight: $s-4 - 1px,",
                    "            $ellipsisSize: $pagination-large-ellipsis-size,",
                    "            $totalFontSize: $pagination-large-total-font-size,",
                    "            $currentFontSize: $pagination-large-current-font-size,",
                    "            $otherFontSize: $pagination-large-jump-font-size,",
                    "            $pageHeihgt: $form-element-large-height,",
                    "            $numberPaddingLeftRight: $pagination-large-size-selector-number-padding,",
                    "            $inputWidth: $pagination-large-input-width",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../button/style.js';",
                    "import '../input/style.js';",
                    "import '../select/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// pagination mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin pagination-size(",
                        "    $direction,",
                        "    $itemSplit,",
                        "    $itemPaddingLeftRight,",
                        "    $ellipsisSize,",
                        "    $totalFontSize,",
                        "    $currentFontSize,",
                        "    $otherFontSize,",
                        "    $pageHeihgt,",
                        "    $numberPaddingLeftRight,",
                        "    $inputWidth",
                        ") {",
                        "    #{$pagination-prefix}-list {",
                        "        margin: 0 $itemSplit;",
                        "    }",
                        "    #{$pagination-prefix}-total {",
                        "        line-height: $pageHeihgt;",
                        "        vertical-align: middle;",
                        "    }",
                        "    #{$pagination-prefix}-item {",
                        "        padding: 0 $itemPaddingLeftRight;",
                        "",
                        "        & + #{$pagination-prefix}-item {",
                        "",
                        "            @if $direction == 'rtl' {",
                        "                margin: 0 $itemSplit 0 0;",
                        "            } @else {",
                        "                margin: 0 0 0 $itemSplit;",
                        "            }",
                        "        }",
                        "    }",
                        "    #{$pagination-prefix}-ellipsis {",
                        "        height: $pageHeihgt;",
                        "        line-height: $pageHeihgt;",
                        "        @include icon-size(",
                        "            $size: $ellipsisSize,",
                        "            $marginLeft: $pagination-ellipsis-margin,",
                        "            $marginRight: $pagination-ellipsis-margin",
                        "        );",
                        "    }",
                        "    #{$pagination-prefix}-display {",
                        "        font-size: $totalFontSize;",
                        "        em {",
                        "            font-size: $currentFontSize;",
                        "        }",
                        "    }",
                        "    #{$pagination-prefix}-jump-text {",
                        "        font-size: $otherFontSize;",
                        "    }",
                        "    #{$pagination-prefix}-jump-input {",
                        "        width: $inputWidth;",
                        "    }",
                        "    #{$pagination-prefix}-size-selector-title {",
                        "        height: $pageHeihgt;",
                        "        line-height: $pageHeihgt;",
                        "        font-size: $otherFontSize;",
                        "        vertical-align: middle;",
                        "    }",
                        "    #{$pagination-prefix}-size-selector-btn {",
                        "        padding: 0 $numberPaddingLeftRight;",
                        "    }",
                        "    #{$pagination-prefix}-item {",
                        "        &.#{$css-prefix}prev:not([disabled]) i,",
                        "        &.#{$css-prefix}next:not([disabled]) i {",
                        "            color: $pagination-arrow-color;",
                        "        }",
                        "        &:hover {",
                        "            &.#{$css-prefix}prev:not([disabled]) i,",
                        "            &.#{$css-prefix}next:not([disabled]) i {",
                        "                color: $pagination-arrow-hover-color;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin arrow-only-size(",
                        "    $prevNextWidth",
                        ") {",
                        "    #{$pagination-prefix}-item {",
                        "        &.#{$css-prefix}prev,",
                        "        &.#{$css-prefix}next {",
                        "            width: $prevNextWidth;",
                        "            padding: 0;",
                        "            .#{$css-prefix}icon {",
                        "                margin: 0 auto;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin arrow-prev-only-size(",
                        "    $prevWidth",
                        ") {",
                        "    #{$pagination-prefix}-item.#{$css-prefix}prev {",
                        "        width: $prevWidth;",
                        "        padding: 0;",
                        "        .#{$css-prefix}icon {",
                        "            margin: 0 auto;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin no-border-size(",
                        "    $displayMarginLeftRight",
                        ") {",
                        "    #{$pagination-prefix}-item {",
                        "        &.#{$css-prefix}prev,",
                        "        &.#{$css-prefix}next {",
                        "            padding: 0;",
                        "            border: none;",
                        "            background-color: transparent;",
                        "            box-shadow: none;",
                        "            .#{$css-prefix}icon {",
                        "                margin: 0;",
                        "            }",
                        "        }",
                        "",
                        "        &.#{$css-prefix}prev:not([disabled]):hover i,",
                        "        &.#{$css-prefix}next:not([disabled]):hover i {",
                        "            color: $pagination-arrow-hover-color-noboder;",
                        "        }",
                        "    }",
                        "",
                        "    #{$pagination-prefix}-display {",
                        "        margin: 0 $displayMarginLeftRight;",
                        "    }",
                        "}",
                        "",
                        "@mixin mini-size(",
                        "    $prevNextMarginLeftRight",
                        ") {",
                        "    #{$pagination-prefix}-item {",
                        "        &.#{$css-prefix}prev {",
                        "            margin-right: $prevNextMarginLeftRight;",
                        "        }",
                        "        &.#{$css-prefix}next {",
                        "            margin-left: $prevNextMarginLeftRight;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module pagination: 分页器",
                        "/// @tag Pagination",
                        "/// @category component",
                        "/// @family navigation",
                        "/// @varPrefix $pagination-",
                        "/// @classPrefix {prefix}-pagination",
                        "/// @order {\"size/item\":10,\"size/ellipsis\":11,\"size/display\":12,\"size/jump\":13,\"size/size selector\":14,\"statement/normal\":10,\"statement/normal/ellipsis\":100,\"statement/normal/display\":101,\"statement/normal/jump\":102,\"statement/normal/size selector\":103,\"statement/normal/arrow\":104,\"statement/normal/current item\":105,\"statement/hover/arrow\":110,\"statement/hover\":11,\"statement/hover/current item\":110}",
                        "////",
                        "",
                        "// pagination variables",
                        "// --------------------------------------------------",
                        "",
                        "// unconfigurable",
                        "$pagination-prefix: \".#{$css-prefix}pagination\";",
                        "",
                        "// Size:Medium",
                        "// ----------------------------------------",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/item",
                        "$pagination-item-split: $s-1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/ellipsis",
                        "$pagination-ellipsis-size: $icon-xs !default;",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/ellipsis",
                        "$pagination-ellipsis-margin: $s-2 !default;",
                        "",
                        "/// current text",
                        "/// @namespace size/display",
                        "$pagination-current-font-size: $font-size-body-1 !default;",
                        "",
                        "/// total text",
                        "/// @namespace size/display",
                        "$pagination-total-font-size: $font-size-body-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/jump",
                        "$pagination-jump-font-size: $font-size-body-1 !default;",
                        "",
                        "/// input width",
                        "/// @namespace size/jump",
                        "$pagination-input-width: $s-9 !default;",
                        "",
                        "/// input margin (l, r)",
                        "/// @namespace size/jump",
                        "$pagination-input-margin: $s-1 !default;",
                        "",
                        "/// title margin (r)",
                        "/// @namespace size/size selector",
                        "$pagination-size-selector-title-margin-right: $s-1 !default;",
                        "",
                        "/// number padding",
                        "/// @namespace size/size selector",
                        "$pagination-size-selector-number-padding: $s-3 !default;",
                        "",
                        "// Size:Large",
                        "// ----------------------------------------",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/item",
                        "$pagination-large-item-split: $s-2 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/ellipsis",
                        "$pagination-large-ellipsis-size: $icon-s !default;",
                        "",
                        "/// current text",
                        "/// @namespace size/display",
                        "$pagination-large-current-font-size: $font-size-subhead !default;",
                        "",
                        "/// total text",
                        "/// @namespace size/display",
                        "$pagination-large-total-font-size: $font-size-subhead !default;",
                        "",
                        "/// input width",
                        "/// @namespace size/jump",
                        "$pagination-large-input-width: $s-12 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/jump",
                        "$pagination-large-jump-font-size: $font-size-subhead !default;",
                        "",
                        "/// number padding",
                        "/// @namespace size/size selector",
                        "$pagination-large-size-selector-number-padding: $s-4 !default;",
                        "",
                        "// Size:Small",
                        "// ----------------------------------------",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/item",
                        "$pagination-small-item-split: $s-1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/ellipsis",
                        "$pagination-small-ellipsis-size: $icon-xs !default;",
                        "",
                        "/// current text",
                        "/// @namespace size/display",
                        "$pagination-small-current-font-size: $font-size-caption !default;",
                        "",
                        "/// total text",
                        "/// @namespace size/display",
                        "$pagination-small-total-font-size: $font-size-caption !default;",
                        "",
                        "/// input width",
                        "/// @namespace size/jump",
                        "$pagination-small-input-width: $s-7 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/jump",
                        "$pagination-small-jump-font-size: $font-size-caption !default;",
                        "",
                        "/// number padding",
                        "/// @namespace size/size selector",
                        "$pagination-small-size-selector-number-padding: $s-2 !default;",
                        "",
                        "// Statement:Normal",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/ellipsis",
                        "$pagination-ellipsis-color: $color-text1-2 !default;",
                        "",
                        "/// current text",
                        "/// @namespace statement/normal/display",
                        "$pagination-current-color: $color-brand1-6 !default;",
                        "",
                        "/// total text",
                        "/// @namespace statement/normal/display",
                        "$pagination-total-color: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/jump",
                        "$pagination-jump-color: $color-text1-2 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/normal/size selector",
                        "$pagination-size-selector-title-color: $color-text1-2 !default;",
                        "",
                        "/// filter text",
                        "/// @namespace statement/normal/size selector",
                        "$pagination-size-selector-filter-color: $color-text1-3 !default;",
                        "",
                        "/// filter current text",
                        "/// @namespace statement/normal/size selector",
                        "$pagination-size-selector-filter-current-color: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/current item",
                        "$pagination-item-current-color: $color-white !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/arrow",
                        "$pagination-arrow-hover-color: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/arrow",
                        "$pagination-arrow-hover-color-noboder: $color-brand1-6 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/arrow",
                        "$pagination-arrow-color: $color-text1-3 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/current item",
                        "$pagination-item-current-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/current item",
                        "$pagination-item-current-bg: $color-brand1-6 !default;",
                        "",
                        "// Statement:Hover",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/current item",
                        "$pagination-item-current-hover-color: $color-white !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/hover/current item",
                        "$pagination-item-current-hover-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/current item",
                        "$pagination-item-current-hover-bg: $color-brand1-6 !default;"
                    ]
                }
            }
        },
        "paragraph": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "/* eslint-disable */",
                    "",
                    "/** Paragraph */",
                    "class Paragraph extends React.Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 额外的样式名 会附加到 root dom 上",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 什么方式展示段落",
                    "         * @enumdesc 展示所有文本, 展示三行以内（非强制）",
                    "         */",
                    "        type: PropTypes.oneOf(['long', 'short']),",
                    "        /**",
                    "         * 组件大小。 ",
                    "         * @enumdesc 中号, 小号",
                    "         */",
                    "        size: PropTypes.oneOf(['medium', 'small']),",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        type: 'long',",
                    "        size: 'medium'",
                    "    };",
                    "",
                    "    render() {",
                    "        const {prefix, className, type, size, ...others} = this.props;",
                    "",
                    "        const cls = classNames(",
                    "            `${prefix}paragraph`,",
                    "            type === 'short' ? `${prefix}paragraph-short` : `${prefix}paragraph-long`,",
                    "            size === 'small' ? `${prefix}paragraph-small` : `${prefix}paragraph-medium`,",
                    "            className",
                    "        );",
                    "",
                    "        return (",
                    "            <div {...others} className={cls}>{this.props.children}</div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Paragraph);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$paragraph-prefix} {",
                    "    color: $paragraph-text-color;",
                    "",
                    "    &-short {",
                    "        line-height: $paragraph-s-line-height;",
                    "    }",
                    "",
                    "    &-long {",
                    "        line-height: $paragraph-l-line-height;",
                    "    }",
                    "",
                    "    &-small {",
                    "        font-size: $paragraph-s-font-size;",
                    "    }",
                    "",
                    "    &-medium {",
                    "        font-size: $paragraph-m-font-size;",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// paragraph mixins",
                        "// --------------------------------------------------"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module paragraph: 段落",
                        "/// @tag Paragraph",
                        "/// @category component",
                        "/// @family general",
                        "/// @varPrefix $paragraph-",
                        "/// @classPrefix {prefix}-paragraph",
                        "/// @order {\"size/text\":10,\"statement/normal\":11,\"size/text/size\":101,\"size/text/line height\":102,\"statement/normal/text\":111}",
                        "////",
                        "",
                        "// paragraph variables",
                        "// --------------------------------------------------",
                        "",
                        "// unconfigurable",
                        "$paragraph-prefix: \".#{$css-prefix}paragraph\";",
                        "",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$paragraph-text-color: \t$color-text1-4 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$paragraph-s-font-size: $font-size-body-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$paragraph-m-font-size: $font-size-body-2 !default;",
                        "",
                        "/// line height",
                        "/// @namespace size/text",
                        "$paragraph-s-line-height: $font-lineheight-2 !default;",
                        "",
                        "/// line height",
                        "/// @namespace size/text",
                        "$paragraph-l-line-height: $font-lineheight-3 !default;"
                    ]
                }
            }
        },
        "progress": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Progress from './view/progress';",
                    "",
                    "export default ConfigProvider.config(Progress, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('type' in props) {",
                    "            deprecated('type', 'progressive', 'Progress');",
                    "",
                    "            const { type, ...others } = props;",
                    "            props = { progressive: type === 'progressive', ...others };",
                    "        }",
                    "",
                    "        if ('showInfo' in props) {",
                    "            deprecated('showInfo', 'textRender', 'Progress');",
                    "",
                    "            const { showInfo, ...others } = props;",
                    "            if (showInfo) {",
                    "                props = others;",
                    "            } else {",
                    "                props = { textRender: () => false, ...others };",
                    "            }",
                    "        }",
                    "",
                    "        if ('suffix' in props) {",
                    "            deprecated('suffix', 'textRender', 'Progress');",
                    "",
                    "            const { suffix, ...others } = props;",
                    "            props = { textRender: () => suffix, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$progress-prefix}-line {",
                    "    @include box-sizing;",
                    "",
                    "    & {",
                    "        width: 100%;",
                    "        display: inline-block;",
                    "        position: relative;",
                    "",
                    "        &-container {",
                    "            display: inline-block;",
                    "            width: 100%;",
                    "            vertical-align: middle;",
                    "        }",
                    "",
                    "        &-underlay {",
                    "            position: relative;",
                    "            width: 100%;",
                    "            background-color: $progress-line-underlay-color;",
                    "        }",
                    "",
                    "        &-overlay {",
                    "            position: absolute;",
                    "            left: 0;",
                    "            top: 0;",
                    "            transition: all 1s $progress-easing;",
                    "",
                    "            &-normal {",
                    "                background-color: $progress-line-normal-color;",
                    "            }",
                    "",
                    "            &-success {",
                    "                background-color: $progress-line-success-color;",
                    "            }",
                    "",
                    "            &-error {",
                    "                background-color: $progress-line-error-color;",
                    "            }",
                    "",
                    "            &-started {",
                    "                background-color: $progress-line-started-color;",
                    "            }",
                    "",
                    "            &-middle {",
                    "                background-color: $progress-line-middle-color;",
                    "            }",
                    "",
                    "            &-finishing {",
                    "                background-color: $progress-line-finishing-color;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}small {",
                    "        @include progress-bar-size($progress-line-height-size-s, $progress-line-height-size-s, $progress-line-font-s, $progress-line-radius-s);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        @include progress-bar-size($progress-line-height-size-m, $progress-line-height-size-m, $progress-line-font-m, $progress-line-radius-m);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        @include progress-bar-size($progress-line-height-size-l, $progress-line-height-size-l, $progress-line-font-l, $progress-line-radius-l);",
                    "    }",
                    "",
                    "    &-show-info {",
                    "        #{$progress-prefix}-line-container {",
                    "            padding-right: 60px;",
                    "            margin-right: -60px;",
                    "        }",
                    "",
                    "        #{$progress-prefix}-line-text {",
                    "            width: 50px;",
                    "            text-align: left;",
                    "            margin-left: 10px;",
                    "            vertical-align: middle;",
                    "            display: inline-block;",
                    "            color: $progress-line-font-color;",
                    "        }",
                    "    }",
                    "",
                    "    &-show-border {",
                    "        #{$progress-prefix}-line-underlay {",
                    "            border: $progress-line-underlay-border-width solid $progress-line-underlay-border-color;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}small {",
                    "            @include progress-bar-size($progress-line-height-size-s + 2 * $progress-line-underlay-border-width, $progress-line-height-size-s, $progress-line-font-s, $progress-line-radius-s);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}medium {",
                    "            @include progress-bar-size($progress-line-height-size-m + 2 * $progress-line-underlay-border-width, $progress-line-height-size-m, $progress-line-font-m, $progress-line-radius-m);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}large {",
                    "            @include progress-bar-size($progress-line-height-size-l + 2 * $progress-line-underlay-border-width, $progress-line-height-size-l, $progress-line-font-l, $progress-line-radius-l);",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$progress-prefix}-circle {",
                    "    @include box-sizing();",
                    "",
                    "    & {",
                    "        position: relative;",
                    "        display: inline-block;",
                    "",
                    "        &-underlay {",
                    "            stroke-width: $progress-circle-underlay-width;",
                    "            stroke: $progress-circle-underlay-color;",
                    "        }",
                    "",
                    "        &-overlay {",
                    "            transition: all 1s $progress-easing;",
                    "            stroke-linecap: $progress-circle-corner;",
                    "            stroke-width: $progress-circle-overlay-width;",
                    "",
                    "            &-normal {",
                    "                stroke: $progress-circle-normal-color;",
                    "            }",
                    "",
                    "            &-success {",
                    "                stroke: $progress-circle-success-color;",
                    "            }",
                    "",
                    "            &-error {",
                    "                stroke: $progress-circle-error-color;",
                    "            }",
                    "",
                    "            &-started {",
                    "                stroke: $progress-circle-started-color;",
                    "            }",
                    "",
                    "            &-middle {",
                    "                stroke: $progress-circle-middle-color;",
                    "            }",
                    "",
                    "            &-finishing {",
                    "                stroke: $progress-circle-finishing-color;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}small {",
                    "        @include progress-circle-size($progress-circle-size-s, $progress-circle-font-s);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}medium {",
                    "        @include progress-circle-size($progress-circle-size-m, $progress-circle-font-m);",
                    "    }",
                    "",
                    "    &.#{$css-prefix}large {",
                    "        @include progress-circle-size($progress-circle-size-l, $progress-circle-font-l);",
                    "    }",
                    "",
                    "    &-text {",
                    "        display: block;",
                    "        position: absolute;",
                    "        width: 100%;",
                    "        top: 50%;",
                    "        left: 0;",
                    "        text-align: center;",
                    "        line-height: 1;",
                    "        -webkit-transform: translateY(-50%);",
                    "        transform: translateY(-50%);",
                    "        transition: transform .3s $progress-easing;",
                    "        color: $progress-circle-text-color;",
                    "    }",
                    "}"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$progress-prefix}-circle[dir=rtl] {",
                    "    #{$progress-prefix}-circle-container {",
                    "        transform: scaleX(-1);",
                    "    }",
                    "}",
                    "",
                    "#{$progress-prefix}-line[dir=rtl] {",
                    "    #{$progress-prefix}-line-overlay {",
                    "        left: auto;",
                    "        right: 0;",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin progress-bar-size(",
                        "    $underlay-size,",
                        "    $overlay-size,",
                        "    $font-size,",
                        "    $corner",
                        ") {",
                        "    #{$progress-prefix}-line-underlay {",
                        "        border-radius: $corner;",
                        "        height: $underlay-size;",
                        "    }",
                        "    #{$progress-prefix}-line-overlay {",
                        "        height: $overlay-size;",
                        "        border-radius: $corner;",
                        "        top: 50%;",
                        "        margin-top: -$overlay-size/2;",
                        "    }",
                        "    #{$progress-prefix}-line-text {",
                        "        font-size: $font-size;",
                        "        line-height: $underlay-size;",
                        "    }",
                        "}",
                        "",
                        "@mixin progress-circle-size(",
                        "    $size,",
                        "    $font-size",
                        ") {",
                        "    width: $size;",
                        "    height: $size;",
                        "    font-size: $font-size;",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module progress: 进度指示",
                        "/// @tag Progress",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $progress-",
                        "/// @classPrefix {prefix}-progress",
                        "/// @order {\"size/bounding\":10,\"size/text\":11,\"size/circle\":12,\"statement/normal\":10,\"statement/normal/underlay\":100,\"statement/normal/overlay\":101,\"statement/normal/text\":102,\"statement/error\":11,\"statement/error/overlay\":110,\"statement/success\":12,\"statement/success/overlay\":120,\"statement/started\":13,\"statement/started/overlay\":130,\"statement/middle\":14,\"statement/middle/overlay\":140,\"statement/finishing\":15,\"statement/finishing/overlay\":150}",
                        "////",
                        "",
                        "",
                        "$progress-prefix: '.' + $css-prefix + 'progress';",
                        "",
                        "$progress-easing: cubic-bezier(.65, .2, .35, 1);",
                        "",
                        "// 条形",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$progress-line-height-size-l: $s-3 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$progress-line-height-size-m: $s-2 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$progress-line-height-size-s: $s-1 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$progress-line-underlay-border-width: $line-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$progress-line-font-l: $font-size-body-1 !default;",
                        "/// size",
                        "/// @namespace size/text",
                        "$progress-line-font-m: $font-size-caption !default;",
                        "/// size",
                        "/// @namespace size/text",
                        "$progress-line-font-s: $font-size-caption !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/underlay",
                        "$progress-line-underlay-color: $color-fill1-3 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/underlay",
                        "$progress-line-underlay-border-color: $color-line1-2 !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/overlay",
                        "$progress-line-radius-l: $corner-3 !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/overlay",
                        "$progress-line-radius-m: $corner-3 !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/overlay",
                        "$progress-line-radius-s: $corner-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/text",
                        "$progress-line-font-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/overlay",
                        "$progress-line-normal-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/error/overlay",
                        "$progress-line-error-color: $color-error-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/success/overlay",
                        "$progress-line-success-color: $color-success-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/started/overlay",
                        "$progress-line-started-color: $color-error-3 !default;",
                        "/// background",
                        "/// @namespace statement/middle/overlay",
                        "$progress-line-middle-color: $color-warning-3 !default;",
                        "/// background",
                        "/// @namespace statement/finishing/overlay",
                        "$progress-line-finishing-color: $color-success-3 !default;",
                        "",
                        "// 圆形",
                        "// ----------------------------------------",
                        "",
                        "/// diameter",
                        "/// @namespace size/circle",
                        "$progress-circle-size-l: $s-33 !default;",
                        "",
                        "/// diameter",
                        "/// @namespace size/circle",
                        "$progress-circle-size-m: $s-29 !default;",
                        "",
                        "/// diameter",
                        "/// @namespace size/circle",
                        "$progress-circle-size-s: $s-25 !default;",
                        "",
                        "/// underlay width",
                        "/// @namespace size/circle",
                        "$progress-circle-underlay-width: $s-2 !default;",
                        "",
                        "/// overlay width",
                        "/// @namespace size/circle",
                        "$progress-circle-overlay-width: $s-2 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$progress-circle-font-l: $font-size-display-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$progress-circle-font-m: $font-size-headline !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$progress-circle-font-s: $font-size-title !default;",
                        "",
                        "/// stroke color",
                        "/// @namespace statement/normal/underlay",
                        "$progress-circle-underlay-color: $color-fill1-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/text",
                        "$progress-circle-text-color: $color-text1-4 !default;",
                        "",
                        "/// stroke corner",
                        "/// @type ['butt', 'round', 'square']",
                        "/// @namespace statement/normal/overlay",
                        "$progress-circle-corner: round !default; // butt|round|square",
                        "",
                        "/// stroke color",
                        "/// @namespace statement/normal/overlay",
                        "$progress-circle-normal-color: $color-brand1-6 !default;",
                        "",
                        "/// stroke color",
                        "/// @namespace statement/error/overlay",
                        "$progress-circle-error-color: $color-error-3 !default;",
                        "",
                        "/// stroke color",
                        "/// @namespace statement/success/overlay",
                        "$progress-circle-success-color: $color-success-3 !default;",
                        "",
                        "/// stroke color",
                        "/// @namespace statement/started/overlay",
                        "$progress-circle-started-color: $color-error-3 !default;",
                        "",
                        "/// stroke color",
                        "/// @namespace statement/middle/overlay",
                        "$progress-circle-middle-color: $color-warning-3 !default;",
                        "",
                        "/// stroke color",
                        "/// @namespace statement/finishing/overlay",
                        "$progress-circle-finishing-color: $color-success-3 !default;"
                    ]
                }
            },
            "view": {
                "progress-circle.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "",
                        "const VIEWBOX_WIDTH = 100; // width of viewBox",
                        "const HALF_VIEWBOX_WIDTH = VIEWBOX_WIDTH / 2;",
                        "const DEFAULT_STROKE_WIDTH = 8;",
                        "",
                        "const viewBox = `0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_WIDTH}`;",
                        "",
                        "export default class Circle extends Component {",
                        "    static propTypes = {",
                        "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                        "        percent: PropTypes.number,",
                        "        state: PropTypes.oneOf(['normal', 'success', 'error']),",
                        "        progressive: PropTypes.bool,",
                        "        textRender: PropTypes.func,",
                        "        prefix: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        color: PropTypes.string,",
                        "        rtl: PropTypes.bool",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        this.state = {",
                        "            underlayStrokeWidth: DEFAULT_STROKE_WIDTH,",
                        "            overlayStrokeWidth: DEFAULT_STROKE_WIDTH,",
                        "        };",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        if (this.underlay && this.overlay) {",
                        "            // eslint-disable-next-line",
                        "            this.setState({",
                        "                underlayStrokeWidth: this._getCssValue(this.underlay, 'stroke-width') || DEFAULT_STROKE_WIDTH,",
                        "                overlayStrokeWidth: this._getCssValue(this.overlay, 'stroke-width') || DEFAULT_STROKE_WIDTH",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    _getCssValue(dom, name) {",
                        "        const css = window.getComputedStyle(dom).getPropertyValue(name);",
                        "        const regExp = /(\\d*)px/g;",
                        "        const result = regExp.exec(css);",
                        "",
                        "        return Array.isArray(result) ? Number(result[1]) : 0;",
                        "    }",
                        "",
                        "    _underlayRefHandler = (ref) => {",
                        "        this.underlay = ref;",
                        "    }",
                        "",
                        "    _overlayRefHandler = (ref) => {",
                        "        this.overlay = ref;",
                        "    }",
                        "",
                        "    _computeOverlayStrokeDashOffset() {",
                        "        const { underlayStrokeWidth, overlayStrokeWidth } = this.state;",
                        "        const overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;",
                        "        const overlayLen = Math.PI * 2 * overlayRadius;",
                        "        return ((VIEWBOX_WIDTH - this.props.percent) / VIEWBOX_WIDTH * overlayLen);",
                        "    }",
                        "",
                        "    _getPath(radius) {",
                        "        return `M ${HALF_VIEWBOX_WIDTH},${HALF_VIEWBOX_WIDTH} m 0,-${radius} a ${radius},${radius} 0 1 1 0,${2 * radius} a ${radius},${radius} 0 1 1 0,-${2 * radius}`;",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, size, state, percent, className, textRender, progressive, color, rtl, ...others } = this.props;",
                        "        const { underlayStrokeWidth, overlayStrokeWidth } = this.state;",
                        "",
                        "        // underlay path",
                        "        const underlayRadius = HALF_VIEWBOX_WIDTH - underlayStrokeWidth / 2;",
                        "        const underlayPath = this._getPath(underlayRadius);",
                        "",
                        "        // overlay path (为居中，减去相对于underlay的宽度)",
                        "        const overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;",
                        "        const overlayPath = this._getPath(overlayRadius);",
                        "        const overlayLen = Math.PI * 2 * overlayRadius;",
                        "        const overlayStrokeDasharray = `${overlayLen}px ${overlayLen}px`;",
                        "        const overlayStrokeDashoffset = `${this._computeOverlayStrokeDashOffset()}px`;",
                        "",
                        "        const suffixText = textRender(percent, {rtl});",
                        "",
                        "        const wrapCls = classNames({",
                        "            [`${prefix}progress-circle`]: true,",
                        "            [`${prefix}progress-circle-show-info`]: suffixText,",
                        "            [`${prefix + size}`]: size,",
                        "            [className]: className,",
                        "        });",
                        "",
                        "        const pathCls = classNames({",
                        "            [`${prefix}progress-circle-overlay`]: true,",
                        "            [`${prefix}progress-circle-overlay-${state}`]: !color && !progressive && state,",
                        "            [`${prefix}progress-circle-overlay-started`]: !color && progressive && percent <= 30,",
                        "            [`${prefix}progress-circle-overlay-middle`]: !color && progressive && percent > 30 && percent < 80,",
                        "            [`${prefix}progress-circle-overlay-finishing`]: !color && progressive && percent >= 80,",
                        "        });",
                        "",
                        "        return (",
                        "            <div {...others} className={wrapCls} dir={rtl ? 'rtl' : undefined}>",
                        "                <svg className={`${prefix}progress-circle-container`} viewBox={viewBox}>",
                        "                    <path className={`${prefix}progress-circle-underlay`} d={underlayPath} fillOpacity=\"0\" ref={this._underlayRefHandler} />",
                        "                    <path",
                        "                        className={pathCls}",
                        "                        d={overlayPath}",
                        "                        fillOpacity=\"0\"",
                        "                        strokeDasharray={overlayStrokeDasharray}",
                        "                        strokeDashoffset={overlayStrokeDashoffset}",
                        "                        ref={this._overlayRefHandler}",
                        "                        stroke={color}",
                        "                    />",
                        "                </svg>",
                        "                {suffixText ? <div className={`${prefix}progress-circle-text`}>{suffixText}</div> : null}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "progress-line.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "",
                        "export default class Line extends React.PureComponent {",
                        "",
                        "    static propTypes = {",
                        "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                        "        percent: PropTypes.number,",
                        "        state: PropTypes.oneOf(['normal', 'success', 'error']),",
                        "        progressive: PropTypes.bool,",
                        "        hasBorder: PropTypes.bool,",
                        "        textRender: PropTypes.func,",
                        "        color: PropTypes.string,",
                        "        rtl: PropTypes.bool,",
                        "    };",
                        "",
                        "    render() {",
                        "        const {",
                        "            prefix, size, state, color,",
                        "            percent, progressive, hasBorder,",
                        "            textRender, className, rtl,",
                        "            ...others } = this.props;",
                        "",
                        "        const suffixText = textRender(percent, {rtl});",
                        "",
                        "        const wrapCls = classNames({",
                        "            [`${prefix}progress-line`]: true,",
                        "            [`${prefix}progress-line-show-info`]: suffixText,",
                        "            [`${prefix}progress-line-show-border`]: hasBorder,",
                        "            [`${prefix + size}`]: size,",
                        "            [className]: className",
                        "        });",
                        "        const lineCls = classNames({",
                        "            [`${prefix}progress-line-overlay`]: true,",
                        "            [`${prefix}progress-line-overlay-${state}`]: !color && !progressive && state,",
                        "            [`${prefix}progress-line-overlay-started`]: !color && progressive && percent <= 30,",
                        "            [`${prefix}progress-line-overlay-middle`]: !color && progressive && percent > 30 && percent < 80,",
                        "            [`${prefix}progress-line-overlay-finishing`]: !color && progressive && percent >= 80,",
                        "        });",
                        "",
                        "        const lineStyle = { width: `${percent}%`, backgroundColor: color };",
                        "",
                        "        return (",
                        "            <div {...others} className={wrapCls} dir={rtl ? 'rtl' : undefined}>",
                        "                <div className={`${prefix}progress-line-container`}>",
                        "                    <div className={`${prefix}progress-line-underlay`}>",
                        "                        <div className={lineCls} style={lineStyle}></div>",
                        "                    </div>",
                        "                </div>",
                        "                {suffixText ? <div className={`${prefix}progress-line-text`}>{suffixText}</div> : null}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "progress.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import Line from './progress-line';",
                        "import Circle from './progress-circle';",
                        "",
                        "/**",
                        " * Progress",
                        " */",
                        "export default class Progress extends Component {",
                        "",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        /**",
                        "         * 形态",
                        "         */",
                        "        shape: PropTypes.oneOf(['circle', 'line']),",
                        "        /**",
                        "         * 尺寸",
                        "         */",
                        "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                        "        /**",
                        "         * 所占百分比",
                        "         */",
                        "        percent: PropTypes.number,",
                        "        /**",
                        "         * 进度状态, 显示优先级: color > progressive > state",
                        "         */",
                        "        state: PropTypes.oneOf(['normal', 'success', 'error']),",
                        "        /**",
                        "         * 是否为色彩阶段变化模式, 显示优先级: color > progressive > state",
                        "         */",
                        "        progressive: PropTypes.bool,",
                        "        /**",
                        "         * 是否添加 Border（只适用于 Line Progress)",
                        "         */",
                        "        hasBorder: PropTypes.bool,",
                        "        /**",
                        "         * 文本渲染函数",
                        "         * @param {Number} percent 当前的进度信息",
                        "         * @param {Object} option 额外的参数",
                        "         * @property {Boolean} option.rtl 是否在rtl 模式下渲染",
                        "         * @return {ReactNode} 返回文本节点",
                        "         */",
                        "        textRender: PropTypes.func,",
                        "        /**",
                        "         * 进度条颜色, 显示优先级: color > progressive > state",
                        "         */",
                        "        color: PropTypes.string,",
                        "        /**",
                        "         * 背景色",
                        "         */",
                        "        backgroundColor: PropTypes.string,",
                        "        rtl: PropTypes.bool",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        shape: 'line',",
                        "        state: 'normal',",
                        "        size: 'medium',",
                        "        percent: 0,",
                        "        progressive: false,",
                        "        hasBorder: false,",
                        "        textRender: percent => `${Math.floor(percent)}%`,",
                        "    };",
                        "",
                        "    static contextTypes = {",
                        "        prefix: PropTypes.string",
                        "    };",
                        "",
                        "    render() {",
                        "        const { shape, hasBorder, ...others } = this.props;",
                        "        return shape === 'circle' ? <Circle {...others} /> : <Line {...others} hasBorder={hasBorder} />;",
                        "    }",
                        "}"
                    ]
                }
            }
        },
        "radio": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Radio from './radio';",
                    "import RadioGroup from './radio-group';",
                    "",
                    "Radio.Group = RadioGroup;",
                    "",
                    "export default Radio;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import '../core/index-noreset';",
                    "@import \"scss/variable\";",
                    "@import './rtl.scss';",
                    "",
                    "#{$radio-prefix}-wrapper {",
                    "    outline: 0;",
                    "    #{$radio-prefix} {",
                    "        @include box-sizing;",
                    "        display: inline-block;",
                    "        vertical-align: middle;",
                    "        position: relative;",
                    "        line-height: 1;",
                    "",
                    "        input[type=\"radio\"] {",
                    "            opacity: 0;",
                    "            position: absolute;",
                    "            vertical-align: middle;",
                    "            top: 0;",
                    "            left: 0;",
                    "            width: $radio-width;",
                    "            height: $radio-width;",
                    "            margin: 0;",
                    "        }",
                    "    }",
                    "",
                    "    #{$radio-prefix}-inner {",
                    "        /* 动画待定 */",
                    "        /* &.mouseDown { */",
                    "        /*     transform: scale3d(.7, .7, .7); */",
                    "        /*     transition: transform .2s linear; */",
                    "        /* } */",
                    "        /* &.mouseUp { */",
                    "        /*     transform: scale3d(1, 1, 1); */",
                    "        /*     transition: transform .2s linear; */",
                    "        /* } */",
                    "",
                    "        display: block;",
                    "        width: $radio-width;",
                    "        height: $radio-width;",
                    "        background: $radio-bg-color;",
                    "        border-radius: $radio-radius-size;",
                    "        border: $radio-circle-border-width solid $radio-border-color;",
                    "        transition: ease all .36s 0s;",
                    "        box-shadow: $radio-shadow;",
                    "",
                    "        &:after {",
                    "            transform: scale(0);",
                    "            position: absolute;",
                    "            border-radius: $radio-radius-size;",
                    "            top: 50%;",
                    "            margin-top: -($radio-circle-size / 2);",
                    "            left: 50%;",
                    "            margin-left: -($radio-circle-size / 2);",
                    "            background: $color-white;",
                    "            content: ' ';",
                    "            transition: all .3s cubic-bezier(.78, .14, .15, .86);",
                    "        }",
                    "    }",
                    "",
                    "    &.checked {",
                    "        #{$radio-prefix}-inner {",
                    "            border-color: $radio-checked-border-color;",
                    "            background: $radio-checked-bg-color;",
                    "            &:after {",
                    "                width: $radio-circle-size;",
                    "                height: $radio-circle-size;",
                    "                font-weight: bold;",
                    "                background: $radio-checked-circle-color;",
                    "                transform: scale(1);",
                    "            }",
                    "        }",
                    "        &:hover, &.hovered {",
                    "            #{$radio-prefix}-inner {",
                    "                border-color: $radio-checked-hovered-border-color;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.disabled {",
                    "        input[type=\"radio\"] {",
                    "            cursor: not-allowed;",
                    "        }",
                    "        #{$radio-prefix}-inner {",
                    "            border-color: $radio-disabled-border-color;",
                    "            background: $radio-disabled-bg-color;",
                    "",
                    "            &:hover, &.hovered {",
                    "                border-color: $radio-disabled-border-color;",
                    "            }",
                    "        }",
                    "        &.checked {",
                    "            #{$radio-prefix}-inner {",
                    "                &:after {",
                    "                    background: $radio-disabled-circle-color;",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &:not(.disabled):hover,",
                    "    &:not(.disabled).hovered,",
                    "    &:not(.disabled):focus,",
                    "    &:not(.disabled).focused {",
                    "        #{$radio-prefix}-inner {",
                    "            border-color: $radio-hovered-border-color;",
                    "            background-color: $radio-hovered-bg-color;",
                    "        }",
                    "    }",
                    "",
                    "    &.checked:not(.disabled):hover,",
                    "    &.checked:not(.disabled).hovered,",
                    "    &.checked:not(.disabled):focus,",
                    "    &.checked.focused {",
                    "        #{$radio-prefix}-inner {",
                    "            border-color: $radio-checked-hovered-border-color;",
                    "            background: $radio-checked-hovered-bg-color;",
                    "            &:after {",
                    "                background: $radio-checked-hovered-circle-color;",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$radio-prefix} {",
                    "    &-button {",
                    "        #{$radio-prefix} {",
                    "            width: 0;",
                    "            height: 0;",
                    "        }",
                    "",
                    "        input[type=\"radio\"] {",
                    "            width: 0;",
                    "            height: 0;",
                    "        }",
                    "",
                    "        > label {",
                    "            display: inline-block;",
                    "            box-sizing: border-box;",
                    "            position: relative;",
                    "            z-index: 1;",
                    "            margin: 0 0 0 -1px;",
                    "            border: 1px solid $radio-button-border-color;",
                    "            background-color: $radio-button-bg-color;",
                    "            transition: ease all .3s 0s;",
                    "",
                    "            #{$radio-prefix}-label {",
                    "                display: block;",
                    "                color: $radio-button-font-color;",
                    "                margin: 0;",
                    "                transition: ease all .3s 0s;",
                    "            }",
                    "",
                    "            &:hover,",
                    "            &:focus,",
                    "            &.hovered {",
                    "                z-index: 10;",
                    "                border-color: $radio-button-border-color-hovered;",
                    "                background-color: $radio-button-bg-color-hovered;",
                    "",
                    "                #{$radio-prefix}-label {",
                    "                    color: $radio-button-font-color-hovered;",
                    "                }",
                    "            }",
                    "",
                    "            &.checked {",
                    "                z-index: 10;",
                    "                border-color: $radio-button-border-color-checked;",
                    "                background-color: $radio-button-bg-color-checked;",
                    "",
                    "                #{$radio-prefix}-label {",
                    "                    color: $radio-button-font-color-checked;",
                    "                }",
                    "            }",
                    "",
                    "            &.disabled {",
                    "                z-index: 0;",
                    "                cursor: not-allowed;",
                    "                border-color: $radio-button-border-color-disabled;",
                    "                background-color: $radio-button-bg-color-disabled;",
                    "",
                    "                #{$radio-prefix}-label {",
                    "                    color: $radio-button-font-color-disabled;",
                    "                }",
                    "            }",
                    "",
                    "            &.checked.disabled {",
                    "                z-index: 0;",
                    "                border-color: $radio-button-border-color-checked-disabled;",
                    "                background-color: $radio-button-bg-color-checked-disabled;",
                    "",
                    "                #{$radio-prefix}-label {",
                    "                    color: $radio-button-font-color-checked-disabled;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        &-large {",
                    "            > label {",
                    "                padding: 0 $radio-button-padding-large;",
                    "                height: $radio-button-height-large;",
                    "                line-height: $radio-button-height-large;",
                    "                &:first-child {",
                    "                    margin-left: 0;",
                    "                    border-top-left-radius: $radio-button-corner-large;",
                    "                    border-bottom-left-radius: $radio-button-corner-large;",
                    "                }",
                    "                &:last-child {",
                    "                    border-top-right-radius: $radio-button-corner-large;",
                    "                    border-bottom-right-radius: $radio-button-corner-large;",
                    "                }",
                    "            }",
                    "",
                    "            #{$radio-prefix}-label {",
                    "                height: $radio-button-height-large - 2;",
                    "                line-height: $radio-button-height-large - 2;",
                    "                font-size: $radio-button-font-size-large;",
                    "            }",
                    "        }",
                    "",
                    "        &-medium {",
                    "            > label {",
                    "                padding: 0 $radio-button-padding-medium;",
                    "                height: $radio-button-height-medium;",
                    "                line-height: $radio-button-height-medium;",
                    "                &:first-child {",
                    "                    margin-left: 0;",
                    "                    border-top-left-radius: $radio-button-corner-medium;",
                    "                    border-bottom-left-radius: $radio-button-corner-medium;",
                    "                }",
                    "                &:last-child {",
                    "                    border-top-right-radius: $radio-button-corner-medium;",
                    "                    border-bottom-right-radius: $radio-button-corner-medium;",
                    "                }",
                    "            }",
                    "",
                    "            #{$radio-prefix}-label {",
                    "                height: $radio-button-height-medium - 2;",
                    "                line-height: $radio-button-height-medium - 2;",
                    "                font-size: $radio-button-font-size-medium;",
                    "            }",
                    "        }",
                    "",
                    "        &-small {",
                    "            > label {",
                    "                padding: 0 $radio-button-padding-small;",
                    "                height: $radio-button-height-small;",
                    "                line-height: $radio-button-height-small;",
                    "                &:first-child {",
                    "                    margin-left: 0;",
                    "                    border-top-left-radius: $radio-button-corner-small;",
                    "                    border-bottom-left-radius: $radio-button-corner-small;",
                    "                }",
                    "                &:last-child {",
                    "                    border-top-right-radius: $radio-button-corner-small;",
                    "                    border-bottom-right-radius: $radio-button-corner-small;",
                    "                }",
                    "            }",
                    "",
                    "            #{$radio-prefix}-label {",
                    "                height: $radio-button-height-small - 2;",
                    "                line-height: $radio-button-height-small - 2;",
                    "                font-size: $radio-button-font-size-small;",
                    "            }",
                    "        }",
                    "    }",
                    "    &-single-input {",
                    "        input[type=\"radio\"] {",
                    "            opacity: 0;",
                    "            position: absolute;",
                    "            top: 0;",
                    "            left: 0;",
                    "            margin: 0;",
                    "        }",
                    "    }",
                    "    &-group {",
                    "        display: inline-block;",
                    "",
                    "        #{$radio-prefix}-label {",
                    "            color: $radio-normal-font-color;",
                    "            margin-right: 16px;",
                    "        }",
                    "        &.disabled #{$radio-prefix}-label {",
                    "            color: $radio-normal-font-color-disabled;",
                    "        }",
                    "    }",
                    "    &-group-ver {",
                    "        #{$radio-prefix}-wrapper {",
                    "            display: block;",
                    "            margin-bottom: 8px;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$radio-prefix}-label {",
                    "    margin: 0;",
                    "    margin-left: $radio-font-margin-left;",
                    "    font-size: $radio-font-size;",
                    "    vertical-align: middle;",
                    "    line-height: 1;",
                    "}",
                    "",
                    "@-moz-document url-prefix() {",
                    "    #{$radio-prefix} {",
                    "        margin-top: -1px;",
                    "    }",
                    "    @supports (animation: calc(0s)) {",
                    "        /* firefox 57+ */",
                    "        #{$radio-prefix} {",
                    "            margin-top: -3px;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "radio-group.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import ConfigProvider from '../config-provider';",
                    "import { obj } from '../util';",
                    "import Radio from './radio';",
                    "",
                    "const { pickOthers } = obj;",
                    "",
                    "/**",
                    " * Radio.Group",
                    " * @order 2",
                    " */",
                    "class RadioGroup extends Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式类名的品牌前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内敛样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * radio group的选中项的值",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),",
                    "        /**",
                    "         * radio group的默认值",
                    "         */",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),",
                    "        /**",
                    "         * 选中值改变时的事件",
                    "         * @param {String/Number} value 选中项的值",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 表示radio被禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 可以设置成 button 展示形状",
                    "         * @enumdesc 按钮状",
                    "         */",
                    "        shape: PropTypes.oneOf(['button']),",
                    "        /**",
                    "         * 与 `shape` 属性配套使用，shape设为button时有效",
                    "         * @enumdesc 大, 中, 小",
                    "         */",
                    "        size: PropTypes.oneOf(['large', 'medium', 'small']),",
                    "        /**",
                    "         * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`",
                    "         */",
                    "        dataSource: PropTypes.arrayOf(PropTypes.any),",
                    "        /**",
                    "         * 通过子元素方式设置内部radio",
                    "         */",
                    "        children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]),",
                    "",
                    "        /**",
                    "         * 子项目的排列方式",
                    "         * - hoz: 水平排列 (default)",
                    "         * - ver: 垂直排列",
                    "         */",
                    "        itemDirection: PropTypes.oneOf([",
                    "            'hoz',",
                    "            'ver',",
                    "        ]),",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        dataSource: [],",
                    "        size: 'medium',",
                    "        onChange: () => {",
                    "        },",
                    "        prefix: 'next-',",
                    "        itemDirection: 'hoz',",
                    "    }",
                    "",
                    "    static childContextTypes = {",
                    "        onChange: PropTypes.func,",
                    "        __group__: PropTypes.bool,",
                    "        isButton: PropTypes.bool,",
                    "        selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),",
                    "        disabled: PropTypes.bool",
                    "    }",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "        let value = '';",
                    "        if ('value' in props) {",
                    "            value = props.value;",
                    "        } else if ('defaultValue' in props) {",
                    "            value = props.defaultValue;",
                    "        }",
                    "        this.state = {value};",
                    "        this.onChange = this.onChange.bind(this);",
                    "    }",
                    "",
                    "    getChildContext() {",
                    "        return {",
                    "            __group__: true,",
                    "            isButton: this.props.shape === 'button',",
                    "            onChange: this.onChange,",
                    "            selectedValue: this.state.value,",
                    "            disabled: this.props.disabled",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        let {value} = nextProps;",
                    "        if ('value' in nextProps) {",
                    "            if (value === undefined) {",
                    "                value = '';",
                    "            }",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onChange(currentValue, e) {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({value: currentValue});",
                    "        }",
                    "        if (currentValue !== this.state.value) {",
                    "            this.props.onChange(currentValue, e);",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        const { rtl, className, shape, size, style, prefix, itemDirection } = this.props;",
                    "        const others = pickOthers(Object.keys(RadioGroup.propTypes), this.props);",
                    "        const disabled = this.props.disabled;",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        let children;",
                    "        if (this.props.children) {",
                    "            children = this.props.children;",
                    "        } else {",
                    "            children = this.props.dataSource.map((item, index) => {",
                    "                let option = item;",
                    "                if (typeof item !== 'object') {",
                    "                    option = {",
                    "                        label: item,",
                    "                        value: item,",
                    "                        disabled",
                    "                    };",
                    "                }",
                    "                const checked = this.state.value === option.value;",
                    "                return (<Radio",
                    "                    key={index}",
                    "                    tabIndex={((index === 0 && !this.state.value) || checked) ? 0 : -1}",
                    "                    value={option.value}",
                    "                    checked={checked}",
                    "                    label={option.label}",
                    "                    disabled={disabled || option.disabled}",
                    "                />);",
                    "            });",
                    "        }",
                    "",
                    "        const isButtonShape = shape === 'button';",
                    "",
                    "        const cls = classnames({",
                    "            [`${prefix}radio-group`]: true,",
                    "            [`${prefix}radio-group-${itemDirection}`]: !isButtonShape,",
                    "            [`${prefix}radio-button`]: isButtonShape,",
                    "            [`${prefix}radio-button-${size}`]: isButtonShape,",
                    "            [className]: !!className,",
                    "            disabled",
                    "        });",
                    "",
                    "        return <div {...others} aria-disabled={disabled} role=\"radiogroup\" className={cls} style={style}>{children}</div>;",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(RadioGroup);"
                ]
            },
            "radio.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import UIState from '../mixin-ui-state';",
                    "import ConfigProvider from '../config-provider';",
                    "import { obj, func } from '../util';",
                    "",
                    "const { makeChain, noop } = func;",
                    "/**",
                    " * Radio",
                    " * @order 1",
                    " */",
                    "class Radio extends UIState {",
                    "    static displayName = 'Radio';",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 组件input的id",
                    "         */",
                    "        id: PropTypes.string,",
                    "        /**",
                    "         * 自定义内敛样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 设置radio是否选中",
                    "         */",
                    "        checked: PropTypes.bool,",
                    "        /**",
                    "         * 设置radio是否默认选中",
                    "         */",
                    "        defaultChecked: PropTypes.bool,",
                    "        /**",
                    "         * 通过属性配置label",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 状态变化时触发的事件",
                    "         * @param {Boolean} checked 是否选中",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 鼠标进入enter事件",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onMouseEnter: PropTypes.func,",
                    "        /**",
                    "         * 鼠标离开事件",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onMouseLeave: PropTypes.func,",
                    "        /**",
                    "         * radio是否被禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        onChange: noop,",
                    "        onMouseLeave: noop,",
                    "        onMouseEnter: noop,",
                    "        tabIndex: 0,",
                    "        prefix: 'next-'",
                    "    }",
                    "",
                    "    static contextTypes = {",
                    "        onChange: PropTypes.func,",
                    "        __group__: PropTypes.bool,",
                    "        isButton: PropTypes.bool,",
                    "        selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),",
                    "        disabled: PropTypes.bool,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props);",
                    "",
                    "        let checked;",
                    "        if (context.__group__) {",
                    "            checked = context.selectedValue === props.value;",
                    "        } else if ('checked' in props) {",
                    "            checked = props.checked;",
                    "        } else {",
                    "            checked = props.defaultChecked;",
                    "        }",
                    "",
                    "        this.state = { checked };",
                    "",
                    "        this.onChange = this.onChange.bind(this);",
                    "        this.disabled = props.disabled ||  (context.__group__ && ('disabled' in context) && context.disabled);",
                    "",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps, nextContext) {",
                    "        if (nextContext.__group__) {",
                    "            const { selectedValue } = nextContext;",
                    "            if ('selectedValue' in nextContext) {",
                    "                this.setState({",
                    "                    checked: selectedValue === nextProps.value,",
                    "                });",
                    "            }",
                    "        } else if ('checked' in nextProps) {",
                    "            this.setState({",
                    "                checked: nextProps.checked",
                    "            });",
                    "        }",
                    "",
                    "        this.disabled = nextProps.disabled ||  (nextContext.__group__ && ('disabled' in nextContext) && nextContext.disabled);",
                    "",
                    "        // when disabled, reset UIState",
                    "        if (this.disabled) {",
                    "            // only class has an impact, no effect on visual",
                    "            this.resetUIState();",
                    "        }",
                    "    }",
                    "",
                    "    shouldComponentUpdate(nextProps, nextState, nextContext) {",
                    "        const { shallowEqual } = obj;",
                    "        return !shallowEqual(this.props, nextProps) ||",
                    "            !shallowEqual(this.state, nextState) ||",
                    "            !shallowEqual(this.nextContext, nextContext);",
                    "    }",
                    "",
                    "    onChange(e) {",
                    "        const checked = e.target.checked;",
                    "        const value = this.props.value;",
                    "",
                    "        if (this.context.__group__) {",
                    "            this.context.onChange(value, e);",
                    "        } else if (this.state.checked !== checked) {",
                    "            if (!('checked' in this.props)) {",
                    "                this.setState({",
                    "                    checked: checked",
                    "                });",
                    "            }",
                    "            this.props.onChange(checked, e);",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const { id, className, children, style, label, onMouseEnter, onMouseLeave, tabIndex, rtl,",
                    "            ...otherProps } = this.props;",
                    "        const checked = !!this.state.checked;",
                    "        const disabled = this.disabled;",
                    "        const isButton = this.context.isButton;",
                    "        const prefix = this.context.prefix || this.props.prefix;",
                    "",
                    "        const others = obj.pickOthers(Radio.propTypes, otherProps);",
                    "        const othersData = obj.pickAttrsWith(others, 'data-');",
                    "",
                    "",
                    "        let input = (<input",
                    "            {...obj.pickOthers(othersData, others)}",
                    "            id={id}",
                    "            disabled={disabled}",
                    "            checked={checked}",
                    "            type=\"radio\"",
                    "            onChange={this.onChange}",
                    "            aria-checked={checked}",
                    "            className={`${prefix}radio-input`}",
                    "        />);",
                    "",
                    "        // disabled do not hove focus state",
                    "        if (!disabled) {",
                    "            input = this.getStateElement(input);",
                    "        }",
                    "",
                    "        const cls = classnames({",
                    "            [`${prefix}radio`]: true,",
                    "            checked,",
                    "            disabled,",
                    "            [this.getStateClassName()]: true",
                    "        });",
                    "        const clsInner = classnames({",
                    "            [`${prefix}radio-inner`]: true,",
                    "            press: checked,",
                    "            unpress: !checked",
                    "        });",
                    "        const clsWrapper = classnames({",
                    "            [`${prefix}radio-wrapper`]: true,",
                    "            [className]: !!className,",
                    "            checked,",
                    "            disabled,",
                    "            [this.getStateClassName()]: true",
                    "        });",
                    "        const childrenCls = `${prefix}radio-label`;",
                    "",
                    "        const radioComp = !isButton ?",
                    "            (<span className={cls}>",
                    "                <span className={clsInner}></span>",
                    "                {input}",
                    "            </span>) :",
                    "            (<span className={`${prefix}radio-single-input`}>",
                    "                {input}",
                    "            </span>);",
                    "",
                    "        return (",
                    "            <label",
                    "                {...othersData}",
                    "                role=\"radio\"",
                    "                dir={rtl ? 'rtl' : 'ltr'}",
                    "                style={style}",
                    "                tabIndex={tabIndex}",
                    "                aria-checked={checked}",
                    "                aria-disabled={disabled}",
                    "                className={clsWrapper}",
                    "                onMouseEnter={disabled ? onMouseEnter : makeChain(this._onUIMouseEnter, onMouseEnter)}",
                    "                onMouseLeave={disabled ? onMouseLeave : makeChain(this._onUIMouseLeave, onMouseLeave)}",
                    "            >",
                    "                {radioComp}",
                    "                {[children, label].map((d, i) => d !== undefined ?",
                    "                    <span key={i} className={childrenCls}>{d}</span> : null)}",
                    "            </label>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Radio);"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$radio-prefix}-button-large[dir='rtl'] {",
                    "    > label {",
                    "        &:first-child {",
                    "            margin-left: -1px;",
                    "            border-top-right-radius: $radio-button-corner-large;",
                    "            border-bottom-right-radius: $radio-button-corner-large;",
                    "            border-top-left-radius: 0;",
                    "            border-bottom-left-radius: 0;",
                    "        }",
                    "        &:last-child {",
                    "            margin-left: 0;",
                    "            border-top-right-radius: 0;",
                    "            border-bottom-right-radius: 0;",
                    "            border-top-left-radius: $radio-button-corner-large;",
                    "            border-bottom-left-radius: $radio-button-corner-large;",
                    "        }",
                    "    }",
                    "",
                    "    #{$radio-prefix}-label {",
                    "        height: $radio-button-height-large - 2;",
                    "        line-height: $radio-button-height-large - 2;",
                    "        font-size: $radio-button-font-size-large;",
                    "    }",
                    "}",
                    "",
                    "#{$radio-prefix}-button-medium[dir='rtl'] {",
                    "    > label {",
                    "        &:first-child {",
                    "            margin-left: -1px;",
                    "            border-top-left-radius: 0;",
                    "            border-bottom-left-radius: 0;",
                    "            border-top-right-radius: $radio-button-corner-medium;",
                    "            border-bottom-right-radius: $radio-button-corner-medium;",
                    "        }",
                    "        &:last-child {",
                    "            margin-left: 0;",
                    "            border-top-right-radius: 0;",
                    "            border-bottom-right-radius: 0;",
                    "            border-top-left-radius: $radio-button-corner-medium;",
                    "            border-bottom-left-radius: $radio-button-corner-medium;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$radio-prefix}-button-small[dir='rtl'] {",
                    "    > label {",
                    "        &:first-child {",
                    "            margin-left: -1px;",
                    "            border-top-left-radius: 0;",
                    "            border-bottom-left-radius: 0;",
                    "            border-top-right-radius: $radio-button-corner-small;",
                    "            border-bottom-right-radius: $radio-button-corner-small;",
                    "        }",
                    "        &:last-child {",
                    "            margin-left: 0;",
                    "            border-top-right-radius: 0;",
                    "            border-bottom-right-radius: 0;",
                    "            border-top-left-radius: $radio-button-corner-small;",
                    "            border-bottom-left-radius: $radio-button-corner-small;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "",
                    "#{$radio-prefix}-wrapper[dir='rtl'] {",
                    "    #{$radio-prefix}-label {",
                    "        margin-left: 0;",
                    "        margin-right: 4px;",
                    "    }",
                    "}",
                    "",
                    "",
                    "#{$radio-prefix}-group[dir='rtl'] {",
                    "    #{$radio-prefix}-label {",
                    "        margin-right: 4px;",
                    "        margin-left: 16px;",
                    "    }",
                    "}",
                    "#{$radio-prefix}-button[dir='rtl'] > label #{$radio-prefix}-label {",
                    "    margin: 0;",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../animate/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module radio: 单选框",
                        "/// @tag radio",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $radio-",
                        "/// @classPrefix {prefix}-radio",
                        "/// @order {\"size/bounding\":10,\"size/icon\":11,\"size/label\":12,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/label\":101,\"statement/hover\":11,\"statement/hover/bounding\":110,\"statement/hover/label\":111,\"statement/checked\":12,\"statement/checked/bounding\":120,\"statement/checked/icon\":121,\"statement/checked/label\":122,\"statement/disabled\":13,\"statement/disabled/bounding\":130,\"statement/disabled/icon\":131,\"statement/disabled/label\":132,\"statement/checked hover\":14,\"statement/checked hover/bounding\":140,\"statement/checked hover/icon\":141,\"statement/checked disabled\":15,\"statement/checked disabled/bounding\":150,\"statement/checked disabled/label\":151}",
                        "////",
                        "",
                        "@charset \"UTF-8\";",
                        "",
                        "// radio variables",
                        "// --------------------------------------------------",
                        "",
                        "$radio-prefix : '.#{$css-prefix}radio';",
                        "",
                        "// Radio:Size",
                        "// --------------------------------------------------",
                        "",
                        "/// width",
                        "/// @namespace size/bounding",
                        "$radio-width: $s-4 !default;",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$radio-circle-border-width: $line-1 !default;",
                        "/// text",
                        "/// @namespace size/icon",
                        "$radio-circle-size: $s-1 !default;",
                        "/// margin (l)",
                        "/// @namespace size/label",
                        "$radio-font-margin-left: $s-1 !default;",
                        "/// text",
                        "/// @namespace size/label",
                        "$radio-font-size: $font-size-body-1 !default;",
                        "",
                        "// Radio:Statement",
                        "// --------------------------------------------------",
                        "",
                        "/// shadow",
                        "/// @namespace statement/normal/bounding",
                        "$radio-shadow: $shadow-zero !default;",
                        "/// corner",
                        "/// @namespace statement/normal/bounding",
                        "$radio-radius-size: $corner-circle !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$radio-bg-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$radio-hovered-bg-color: $color-brand1-1 !default;",
                        "/// background",
                        "/// @namespace statement/checked/bounding",
                        "$radio-checked-bg-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @namespace statement/disabled/bounding",
                        "$radio-disabled-bg-color: $color-fill1-1 !default;",
                        "/// background",
                        "/// @namespace statement/checked hover/bounding",
                        "$radio-checked-hovered-bg-color: $color-brand1-9 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$radio-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$radio-hovered-border-color: $color-brand1-6 !default;",
                        "/// border",
                        "/// @namespace statement/checked/bounding",
                        "$radio-checked-border-color: $color-brand1-6 !default;",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$radio-disabled-border-color: $color-line1-1 !default;",
                        "/// border",
                        "/// @namespace statement/checked hover/bounding",
                        "$radio-checked-hovered-border-color: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/checked/icon",
                        "$radio-checked-circle-color: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/disabled/icon",
                        "$radio-disabled-circle-color: $color-text1-1 !default;",
                        "/// text",
                        "/// @namespace statement/checked hover/icon",
                        "$radio-checked-hovered-circle-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/label",
                        "$radio-normal-font-color: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/disabled/label",
                        "$radio-normal-font-color-disabled: $color-text1-1 !default;",
                        "",
                        "// RadioButton:Size",
                        "// --------------------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$radio-button-height-large: $s-10 !default;",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$radio-button-height-medium: $s-7 !default;",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$radio-button-height-small: $s-5 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$radio-button-padding-large: $s-2 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$radio-button-padding-medium: $s-2 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$radio-button-padding-small: $s-2 !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$radio-button-corner-large: $corner-1 !default;",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$radio-button-corner-medium: $corner-1 !default;",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$radio-button-corner-small: $corner-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$radio-button-font-size-large: $font-size-subhead !default;",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$radio-button-font-size-medium: $font-size-body-1 !default;",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$radio-button-font-size-small: $font-size-caption !default;",
                        "",
                        "// RadioButton:Statement",
                        "// --------------------------------------------------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$radio-button-bg-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$radio-button-bg-color-hovered: $color-fill1-2 !default;",
                        "/// background",
                        "/// @namespace statement/checked/bounding",
                        "$radio-button-bg-color-checked: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/disabled/bounding",
                        "$radio-button-bg-color-disabled: $color-fill1-1 !default;",
                        "/// background",
                        "/// @namespace statement/checked disabled/bounding",
                        "$radio-button-bg-color-checked-disabled: $color-fill1-2 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$radio-button-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$radio-button-border-color-hovered: $color-line1-4 !default;",
                        "/// border",
                        "/// @namespace statement/checked/bounding",
                        "$radio-button-border-color-checked: $color-brand1-6 !default;",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$radio-button-border-color-disabled: $color-line1-1 !default;",
                        "/// border",
                        "/// @namespace statement/checked disabled/bounding",
                        "$radio-button-border-color-checked-disabled: $color-line1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/label",
                        "$radio-button-font-color: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/hover/label",
                        "$radio-button-font-color-hovered: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/checked/label",
                        "$radio-button-font-color-checked: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/disabled/label",
                        "$radio-button-font-color-disabled: $color-text1-1 !default;",
                        "/// text",
                        "/// @namespace statement/checked disabled/label",
                        "$radio-button-font-color-checked-disabled: $color-text1-1 !default;"
                    ]
                }
            }
        },
        "range": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Range from './view/range';",
                    "",
                    "export default ConfigProvider.config(Range, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('hasTips' in props) {",
                    "            deprecated('hasTips', 'hasTip', 'Range');",
                    "",
                    "            const { hasTips, ...others } = props;",
                    "            props = { hasTip: hasTips, ...others };",
                    "        }",
                    "",
                    "        if ('tipFormatter' in props) {",
                    "            deprecated('tipFormatter', 'tipRender', 'Range');",
                    "",
                    "            const { tipFormatter, ...others } = props;",
                    "            props = { tipRender: tipFormatter, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    ".#{$css-prefix} {",
                    "    &range {",
                    "        @include box-sizing;",
                    "        @include range-bounding();",
                    "",
                    "        & {",
                    "            @include range-state(",
                    "                $range-normal-unselected-color,",
                    "                $range-normal-unselected-color-disabled,",
                    "                $range-normal-unselected-color-hover,",
                    "                $range-normal-selected-color,",
                    "                $range-normal-selected-color-disabled,",
                    "                $range-normal-selected-color-hover,",
                    "                $range-normal-slider-bg-color,",
                    "                $range-normal-slider-bg-color-disabled,",
                    "                $range-normal-slider-bg-color-hover,",
                    "                $range-normal-slider-border-color,",
                    "                $range-normal-slider-border-color-disabled,",
                    "                $range-normal-slider-border-color-hover,",
                    "                $range-normal-mark-color,",
                    "                $range-normal-mark-color-disabled,",
                    "                $range-normal-mark-color-hover,",
                    "                $range-normal-mark-selected-color,",
                    "                $range-normal-mark-selected-color-disabled,",
                    "                $range-normal-mark-selected-color-hover",
                    "            );",
                    "",
                    "            @include range-size(",
                    "                $range-size-m-track-height,",
                    "                $range-size-m-scale-height,",
                    "                $range-size-m-slider-hw,",
                    "                $range-size-m-slider-shadow,",
                    "                $range-size-m-mark-font-size,",
                    "                $range-size-m-mark-font-weight,",
                    "                $range-size-m-mark-font-lineheight",
                    "            );",
                    "",
                    "            @include range-hover(",
                    "                $range-normal-slider-bg-color,",
                    "                $range-normal-slider-bg-color-hover",
                    "            );",
                    "",
                    "            @include range-click(",
                    "                $range-normal-slider-bg-color,",
                    "                $range-normal-slider-bg-color-hover",
                    "            );",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../balloon/style.js';",
                    "import './main.scss';"
                ]
            },
            "utils.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "export function inRange(value, range, min) {",
                    "    if (!Array.isArray(range)) {",
                    "        range = [min, range];",
                    "    }",
                    "",
                    "    return value >= range[0] && value <= range[1];",
                    "}",
                    "",
                    "export function getPercent(min, max, value) {",
                    "    return (value - min) * 100 / (max - min);",
                    "}",
                    "",
                    "export function getPrecision(step) {",
                    "    let precision = 0;",
                    "    const stepString = step.toString();",
                    "    if (stepString.indexOf('.') !== -1) {",
                    "        precision = stepString.length - stepString.indexOf('.') - 1;",
                    "    }",
                    "    return precision;",
                    "}",
                    "",
                    "export function isEqual(left, right) {",
                    "    if (Array.isArray(left)) {",
                    "        return left[0] === right[0] && left[1] === right[1];",
                    "    } else {",
                    "        return left === right;",
                    "    }",
                    "}",
                    "",
                    "export function getDragging(current, preValue) {",
                    "    let dragging = 'upper';",
                    "",
                    "    if (current > preValue[1]) {",
                    "        dragging = 'upper';",
                    "    } else if (current < preValue[0]) {",
                    "        dragging = 'lower';",
                    "    } else {",
                    "        const mid = (preValue[0] + preValue[1]) / 2;",
                    "",
                    "        dragging = current < mid ? 'lower' : 'upper';",
                    "    }",
                    "",
                    "    return dragging;",
                    "}"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// range mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin range-bounding() {",
                        "    width: 100%;",
                        "    font-family: inherit;",
                        "    font-weight: normal;",
                        "    font-size: inherit;",
                        "    line-height: inherit;",
                        "    vertical-align: baseline;",
                        "    display: flex;",
                        "    flex-direction: column;",
                        "    cursor: pointer;",
                        "",
                        "    .#{$css-prefix}range-inner {",
                        "        position: relative;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-track {",
                        "        position: absolute;",
                        "        width: 100%;",
                        "        top: 50%;",
                        "        border-radius: $range-size-m-track-radius;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-selected {",
                        "        position: absolute;",
                        "        width: 0;",
                        "        top: 50%;",
                        "        left: 0;",
                        "        border-radius: $range-size-m-track-radius;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-scale {",
                        "        position: relative;",
                        "        width: 100%;",
                        "        height: $range-size-m-scale-height;",
                        "",
                        "        .#{$css-prefix}range-scale-item {",
                        "            position: absolute;",
                        "            left: 0;",
                        "            width: 2px;",
                        "            border: $range-size-m-scale-item-border-width solid;",
                        "            border-radius: $range-size-m-scale-radius;",
                        "            &:last-child {",
                        "                margin-left: -$range-size-m-scale-item-border-width * 2;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-slider {",
                        "        position: absolute;",
                        "        top: 50%;",
                        "        left: 0;",
                        "        border-radius: 50%;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-slider-inner {",
                        "        position: absolute;",
                        "        top: 50%;",
                        "        left: 50%;",
                        "        border-width: $range-size-slider-border-width;",
                        "        border-style: $range-size-slider-border-style;",
                        "        border-color: $range-normal-slider-border-color;",
                        "        border-radius: 50%;",
                        "        transition: transform .4s cubic-bezier(.23, 1, .32, 1), border-color .4s cubic-bezier(.23, 1, .32, 1);",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-slider.#{$css-prefix}range-slider-moving .#{$css-prefix}range-slider-inner {",
                        "        border: $line-2 $line-solid $range-normal-selected-color;",
                        "        box-shadow: $range-size-m-slider-shadow-moving;",
                        "        transform: scale(1.2);",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-frag.#{$css-prefix}range-active {",
                        "        .#{$css-prefix}range-slider .#{$css-prefix}range-slider-inner {",
                        "            border: $line-2 $line-solid $range-normal-selected-color;",
                        "            box-shadow: $range-size-m-slider-shadow-moving;",
                        "            transform: scale(1.2);",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-mark {",
                        "        position: relative;",
                        "        cursor: auto;",
                        "",
                        "        .#{$css-prefix}range-mark-text {",
                        "            position: absolute;",
                        "            left: 0;",
                        "            transform: translateX(-50%);",
                        "            padding-left: 2px;",
                        "            text-align: center;",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-frag {",
                        "        position: absolute;",
                        "        top: 0;",
                        "        .#{$css-prefix}range-slider {",
                        "            left: 0;",
                        "            &:nth-child(2) {",
                        "                left: 100%;",
                        "            }",
                        "        }",
                        "        .#{$css-prefix}range-selected {",
                        "            width: 100%;",
                        "        }",
                        "    }",
                        "",
                        "    &.disabled {",
                        "        cursor: not-allowed;",
                        "",
                        "        .#{$css-prefix}range-mark {",
                        "            cursor: auto;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin range-state(",
                        "    $unselectedColor,",
                        "    $unselectedColorDisabled,",
                        "    $unselectedColorHover,",
                        "    $selectedColor,",
                        "    $selectedColorDisabled,",
                        "    $selectedColorHover,",
                        "    $sliderBgColor,",
                        "    $sliderBgColorDisabled,",
                        "    $sliderBgColorHover,",
                        "    $sliderBorderColor,",
                        "    $sliderBorderColorDisabled,",
                        "    $sliderBorderColorHover,",
                        "    $markColor,",
                        "    $markColorDisabled,",
                        "    $markColorHover,",
                        "    $markColorActivated,",
                        "    $markColorActivatedDisabled,",
                        "    $markColorActivatedHover",
                        ") {",
                        "    .#{$css-prefix}range-track {",
                        "        background-color: $unselectedColor;",
                        "        &:hover {",
                        "            background-color: $unselectedColorHover;",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-selected {",
                        "        background-color: $selectedColor;",
                        "        //transition: all .4s cubic-bezier(0.23, 1, 0.32, 1);",
                        "        &:hover {",
                        "            background-color: $selectedColorHover;",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-scale {",
                        "        .#{$css-prefix}range-scale-item {",
                        "            border-color: $unselectedColor;",
                        "            background-color: $unselectedColor;",
                        "            &:hover {",
                        "                border-color: $unselectedColorHover;",
                        "            }",
                        "",
                        "            &.activated {",
                        "                border-color: $selectedColor;",
                        "                background-color: $selectedColor;",
                        "                &:hover {",
                        "                    border-color: $selectedColorHover;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-slider-inner {",
                        "        background-color: $sliderBgColor;",
                        "        border-color: $sliderBorderColor;",
                        "        &:hover {",
                        "            background-color: $sliderBgColorHover;",
                        "            box-shadow: $range-size-m-slider-shadow-hover;",
                        "            transform: scale(1.2);",
                        "        }",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-mark {",
                        "",
                        "        .#{$css-prefix}range-mark-text {",
                        "            color: $markColor;",
                        "            &:hover {",
                        "                color: $markColorHover;",
                        "            }",
                        "",
                        "            &.activated {",
                        "                color: $markColorActivated;",
                        "                &:hover {",
                        "                    color: $markColorActivatedHover;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    &.disabled {",
                        "        .#{$css-prefix}range-track {",
                        "            background-color: $unselectedColorDisabled;",
                        "        }",
                        "",
                        "        .#{$css-prefix}range-selected {",
                        "            background-color: $selectedColorDisabled;",
                        "        }",
                        "",
                        "        .#{$css-prefix}range-scale-item {",
                        "            border-color: $unselectedColorDisabled;",
                        "",
                        "            &.activated {",
                        "                border-color: $selectedColorDisabled;",
                        "            }",
                        "        }",
                        "",
                        "        .#{$css-prefix}range-slider-inner {",
                        "            background-color: $sliderBgColorDisabled;",
                        "            border-color: $sliderBorderColorDisabled;",
                        "            transform: none;",
                        "            box-shadow: none;",
                        "        }",
                        "",
                        "        .#{$css-prefix}range-mark-text {",
                        "            color: $markColorDisabled;",
                        "",
                        "            &.activated {",
                        "                color: $markColorActivatedDisabled;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin range-size(",
                        "    $trackHeight,",
                        "    $scaleHeight,",
                        "    $sliderHW,",
                        "    $sliderShadow,",
                        "    $markFontsize,",
                        "    $markFontweight,",
                        "    $markLineheight",
                        ") {",
                        "    .#{$css-prefix}range-track {",
                        "        height: $trackHeight;",
                        "        margin-top: -$trackHeight/2;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-selected {",
                        "        height: $trackHeight;",
                        "        margin-top: -$trackHeight/2;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-frag {",
                        "        margin-top: -$trackHeight/2;",
                        "        height: $sliderHW;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-slider {",
                        "        height: $sliderHW;",
                        "        width: $sliderHW;",
                        "        margin-top: -$sliderHW/2;",
                        "        margin-left: -$sliderHW/2;",
                        "        box-shadow: $sliderShadow;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-slider-inner {",
                        "        height: $sliderHW;",
                        "        width: $sliderHW;",
                        "        margin-top: -$sliderHW/2;",
                        "        margin-left: -$sliderHW/2;",
                        "    }",
                        "",
                        "    .#{$css-prefix}range-mark {",
                        "        display: block;",
                        "        .#{$css-prefix}range-mark-text {",
                        "            font-size: $markFontsize;",
                        "            font-weight: $markFontweight;",
                        "            line-height: $markLineheight;",
                        "            height: $markLineheight;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}range-mark-below {",
                        "            height: $range-size-m-mark-top;",
                        "            .#{$css-prefix}range-mark-text {",
                        "                bottom: 0;",
                        "            }",
                        "        }",
                        "",
                        "        &.#{$css-prefix}range-mark-above {",
                        "            height: $range-size-m-mark-top;",
                        "        }",
                        "    }",
                        "    .#{$css-prefix}range-scale {",
                        "        .#{$css-prefix}range-scale-item {",
                        "            height: $scaleHeight;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin range-hover (",
                        "    $sliderBgColorHover,",
                        "    $range-size-m-slider-shadow-hover",
                        ") {",
                        "    &.simulation-hover > .#{$css-prefix}range-slider-inner {",
                        "        background-color: $sliderBgColorHover;",
                        "        box-shadow: $range-size-m-slider-shadow-hover;",
                        "        transform: scale(1.2);",
                        "    }",
                        "}",
                        "",
                        "@mixin range-click (",
                        "    $sliderBgColorHover,",
                        "    $range-size-m-slider-shadow-hover",
                        ") {",
                        "    &.simulation-click > .#{$css-prefix}range-slider-inner {",
                        "        border: 2px solid $range-normal-selected-color;",
                        "        box-shadow: $range-size-m-slider-shadow-moving;",
                        "        transform: scale(1.2);",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module range: 滑块选择",
                        "/// @tag Range",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $range-",
                        "/// @classPrefix {prefix}-range",
                        "/// @order {\"size/bar\":10,\"size/scale\":11,\"size/handle\":12,\"size/mark\":13,\"statement/normal\":10,\"statement/normal/bar\":100,\"statement/normal/scale\":101,\"statement/normal/handle\":102,\"statement/normal/mark\":103,\"statement/moving\":11,\"statement/moving/handle\":110,\"statement/hover\":12,\"statement/hover/bar\":120,\"statement/hover/handle\":121,\"statement/hover/mark\":122,\"statement/disabled\":13,\"statement/disabled/bar\":130,\"statement/disabled/handle\":131,\"statement/disabled/mark\":132}",
                        "////",
                        "",
                        "// Size",
                        "",
                        "/// height",
                        "/// @size medium",
                        "/// @namespace size/bar",
                        "$range-size-m-track-height: $s-1 !default;",
                        "",
                        "/// height",
                        "/// @size medium",
                        "/// @namespace size/scale",
                        "$range-size-m-scale-height: $s-3 !default;",
                        "/// width",
                        "/// @size medium",
                        "/// @namespace size/scale",
                        "$range-size-m-scale-item-border-width: $line-1 !default;",
                        "/// height",
                        "/// @size medium",
                        "/// @namespace size/handle",
                        "$range-size-m-slider-hw: $s-4 !default;",
                        "/// border style",
                        "/// @size medium",
                        "/// @namespace size/handle",
                        "$range-size-slider-border-style: $line-solid !default;",
                        "/// border width",
                        "/// @size medium",
                        "/// @namespace size/handle",
                        "$range-size-slider-border-width: $line-1 !default;",
                        "",
                        "/// distance",
                        "/// @size medium",
                        "/// @namespace size/mark",
                        "$range-size-m-mark-top: 30px !default;",
                        "",
                        "/// size",
                        "/// @size medium",
                        "/// @namespace size/mark",
                        "$range-size-m-mark-font-size: $font-size-body-1 !default;",
                        "/// weight",
                        "/// @size medium",
                        "/// @namespace size/mark",
                        "$range-size-m-mark-font-weight: $font-weight-2 !default;",
                        "",
                        "/// line height",
                        "/// @size medium",
                        "/// @namespace size/mark",
                        "$range-size-m-mark-font-lineheight: 20px !default;",
                        "",
                        "// Normal",
                        "",
                        "/// radius",
                        "/// @level normal",
                        "/// @namespace statement/normal/bar",
                        "$range-size-m-track-radius: $corner-zero !default;",
                        "/// radius",
                        "/// @level normal",
                        "/// @namespace statement/normal/scale",
                        "$range-size-m-scale-radius: $corner-zero !default;",
                        "/// shadow",
                        "/// @level moving",
                        "/// @namespace statement/moving/handle",
                        "$range-size-m-slider-shadow-moving: $shadow-2 !default;",
                        "/// unselected",
                        "/// @level normal",
                        "/// @namespace statement/normal/bar",
                        "$range-normal-unselected-color: $color-line1-3 !default;",
                        "",
                        "/// selected",
                        "/// @level normal",
                        "/// @namespace statement/normal/bar",
                        "$range-normal-selected-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @level normal",
                        "/// @namespace statement/normal/handle",
                        "$range-normal-slider-bg-color: $color-white !default;",
                        "",
                        "/// unselected",
                        "/// @level normal",
                        "/// @namespace statement/normal/mark",
                        "$range-normal-mark-color: $color-text1-2 !default;",
                        "",
                        "/// selected",
                        "/// @level normal",
                        "/// @namespace statement/normal/mark",
                        "$range-normal-mark-selected-color: $color-text1-4 !default;",
                        "// Hover",
                        "",
                        "/// unselecter",
                        "/// @level normal",
                        "/// @namespace statement/hover/bar",
                        "$range-normal-unselected-color-hover: $color-line1-3 !default;",
                        "",
                        "/// selected",
                        "/// @level normal",
                        "/// @namespace statement/hover/bar",
                        "$range-normal-selected-color-hover: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @level normal",
                        "/// @namespace statement/hover/handle",
                        "$range-normal-slider-bg-color-hover: $color-white !default;",
                        "/// shadow",
                        "/// @level normal",
                        "/// @namespace statement/normal/handle",
                        "$range-size-m-slider-shadow: $shadow-1 !default;",
                        "",
                        "/// shadow",
                        "/// @level normal",
                        "/// @namespace statement/hover/handle",
                        "$range-size-m-slider-shadow-hover: $shadow-3 !default;",
                        "",
                        "/// unselected",
                        "/// @level normal",
                        "/// @namespace statement/hover/mark",
                        "$range-normal-mark-color-hover: $color-text1-2 !default;",
                        "",
                        "/// selected",
                        "/// @level normal",
                        "/// @namespace statement/hover/mark",
                        "$range-normal-mark-selected-color-hover: $color-text1-4 !default;",
                        "",
                        "/// border",
                        "/// @size medium",
                        "/// @namespace statement/hover/handle",
                        "$range-normal-slider-border-color-hover: $color-transparent !default;",
                        "",
                        "/// unselected",
                        "/// @level normal",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/bar",
                        "$range-normal-unselected-color-disabled: $color-line1-3 !default;",
                        "",
                        "/// selected",
                        "/// @level normal",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/bar",
                        "$range-normal-selected-color-disabled: $color-line1-4 !default;",
                        "",
                        "/// background",
                        "/// @level normal",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/handle",
                        "$range-normal-slider-bg-color-disabled: $color-line1-1 !default;",
                        "/// border",
                        "/// @size medium",
                        "/// @namespace statement/normal/handle",
                        "$range-normal-slider-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @size medium",
                        "/// @namespace statement/disabled/handle",
                        "$range-normal-slider-border-color-disabled: $color-line1-1 !default;",
                        "/// color",
                        "/// @level normal",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/mark",
                        "$range-normal-mark-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// unselected",
                        "/// @level normal",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/mark",
                        "$range-normal-mark-selected-color-disabled: $color-text1-2 !default;"
                    ]
                }
            },
            "view": {
                "fixedSlider.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import {events, func} from '../../util';",
                        "import Balloon from '../../balloon';",
                        "import { getPercent } from '../utils';",
                        "",
                        "const Tooltip = Balloon.Tooltip;",
                        "const { noop } = func;",
                        "",
                        "function _getStyle(min, max, value) {",
                        "    return {",
                        "        left: `${getPercent(min, max, value[0])}%`,",
                        "        right: `${100 - getPercent(min, max, value[1])}%`",
                        "    };",
                        "}",
                        "",
                        "function sliderFrag(props) {",
                        "    const {prefix, min, max, value, disabled, onMouseEnter, onMouseLeave, onMouseDown} = props;",
                        "",
                        "    const activeClass = !disabled && props.hasMovingClass ? `${prefix}range-active` : '';",
                        "",
                        "    return (",
                        "        <div",
                        "            className={`${prefix}range-frag ${activeClass}`}",
                        "            style={_getStyle(min, max, value)}",
                        "            onMouseEnter={onMouseEnter}",
                        "            onMouseLeave={onMouseLeave}",
                        "            onMouseDown={onMouseDown} >",
                        "",
                        "            <div className={`${prefix}range-selected`}></div>",
                        "",
                        "            <div className={`${prefix}range-slider`}>",
                        "                <div className={`${prefix}range-slider-inner`}></div>",
                        "            </div>",
                        "            <div className={`${prefix}range-slider`}>",
                        "                <div className={`${prefix}range-slider-inner`}></div>",
                        "            </div>",
                        "        </div>",
                        "    );",
                        "}",
                        "",
                        "sliderFrag.propTypes = {",
                        "    prefix: PropTypes.string,",
                        "    min: PropTypes.number,",
                        "    max: PropTypes.number,",
                        "    hasMovingClass: PropTypes.bool,",
                        "    onMouseEnter: PropTypes.func,",
                        "    onMouseLeave: PropTypes.func,",
                        "    onMouseDown: PropTypes.func,",
                        "    value: PropTypes.arrayOf(PropTypes.number),",
                        "    disabled: PropTypes.bool",
                        "};",
                        "",
                        "export default class FixedSlider extends React.Component {",
                        "    static propTypes = {",
                        "        hasTip: PropTypes.bool,",
                        "        tooltipVisible: PropTypes.bool,",
                        "        onTooltipVisibleChange: PropTypes.func,",
                        "        tooltipAnimation: PropTypes.oneOfType([",
                        "            PropTypes.bool,",
                        "            PropTypes.object",
                        "        ]),",
                        "        value: PropTypes.oneOfType([",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number)",
                        "        ]),",
                        "        tipRender: PropTypes.func,",
                        "        disabled: PropTypes.bool,",
                        "        hasMovingClass: PropTypes.bool",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        disabled: false,",
                        "        hasTip: true,",
                        "        onChange: noop,",
                        "        onProcess: noop,",
                        "        tipRender: value => value,",
                        "        reverse: false,",
                        "    }",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        this.state = {",
                        "            hasMovingClass: false,",
                        "            onTooltipVisibleChange: false,",
                        "            tooltipAnimation: true",
                        "        };",
                        "",
                        "    }",
                        "",
                        "    _onMouseEnter() {",
                        "        if (!(this.keyState === 'down')) {",
                        "            this.keyState = 'enter';",
                        "        }",
                        "        this.setState({",
                        "            hasMovingClass: true",
                        "        });",
                        "    }",
                        "",
                        "    _onMouseLeave() {",
                        "        if (this.keyState === 'enter') {",
                        "            this.setState({",
                        "                hasMovingClass: false",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    _onMouseDown() {",
                        "        this.keyState = 'down';",
                        "        this.setState({",
                        "            hasMovingClass: true",
                        "        });",
                        "        this._addDocumentEvents();",
                        "    }",
                        "",
                        "    _onMouseUp() {",
                        "        if (this.keyState === 'down') {",
                        "            this.keyState = '';",
                        "            this._removeDocumentEvents();",
                        "            this.setState({",
                        "                hasMovingClass: false",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    _addDocumentEvents() {",
                        "        this._onMouseUpListener = events.on(document, 'mouseup', this._onMouseUp.bind(this));",
                        "    }",
                        "",
                        "    _removeDocumentEvents() {",
                        "        if (this._onMouseUpListener) {",
                        "            this._onMouseUpListener.off();",
                        "            this._onMouseUpListener = null;",
                        "        }",
                        "    }",
                        "",
                        "    render() {",
                        "        const {hasTip, value, tipRender, tooltipVisible, hasMovingClass} = this.props;",
                        "",
                        "        const addedProps = {",
                        "            hasMovingClass: hasMovingClass || this.state.hasMovingClass,",
                        "            onMouseEnter: this._onMouseEnter.bind(this),",
                        "            onMouseLeave: this._onMouseLeave.bind(this),",
                        "            onMouseDown: this._onMouseDown.bind(this)",
                        "        };",
                        "",
                        "        return hasTip ?",
                        "            <Tooltip",
                        "                popupContainer={target => target.parentNode}",
                        "                popupProps={{",
                        "                    visible: tooltipVisible || hasMovingClass,",
                        "                    animation: this.state.tooltipAnimation ? { in: 'expandInUp', out: 'expandOutDown' } : false",
                        "                }}",
                        "                trigger={sliderFrag({...this.props, ...addedProps})}",
                        "                align=\"t\"",
                        "            >",
                        "                {tipRender(`${value[0]}-${value[1]}`)}",
                        "            </Tooltip> :",
                        "            sliderFrag({...this.props, ...addedProps});",
                        "    }",
                        "}"
                    ]
                },
                "mark.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import classNames from 'classnames';",
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import { inRange, getPercent } from '../utils';",
                        "",
                        "export default class Mark extends React.Component {",
                        "    static propTypes = {",
                        "        min: PropTypes.number,",
                        "        max: PropTypes.number,",
                        "        value: PropTypes.oneOfType([",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number)",
                        "        ]),",
                        "        prefix: PropTypes.string,",
                        "        marks: PropTypes.object,",
                        "        marksPosition: PropTypes.string",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        min: 0,",
                        "        max: 100,",
                        "        value: 0,",
                        "        marksPosition: ''",
                        "    }",
                        "",
                        "    _renderItems() {",
                        "        const {min, max, value, prefix, marks, } = this.props;",
                        "        const items = [];",
                        "",
                        "        Object.keys(marks).forEach((mark, i) => {",
                        "            const classes = classNames({",
                        "                [`${prefix}range-mark-text`]: true,",
                        "                activated: inRange(mark, value, min)",
                        "            });",
                        "            const left = `${getPercent(min, max, mark)}%`;",
                        "",
                        "            items.push(",
                        "                // \"key\" is for https://fb.me/react-warning-keys",
                        "                <span className={classes} style={{left: left}} key={i}>{marks[mark]}</span>",
                        "            );",
                        "        });",
                        "",
                        "        return items;",
                        "    }",
                        "",
                        "    render() {",
                        "        const {prefix, marksPosition} = this.props;",
                        "        const className = marksPosition === 'above' ? `${prefix}range-mark-above` : `${prefix}range-mark-below`;",
                        "        const classes = classNames(className, {",
                        "            [`${prefix}range-mark`]: true",
                        "        });",
                        "        const items = this._renderItems();",
                        "",
                        "        return (",
                        "            <div className={classes}>",
                        "                {items}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "range.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import classNames from 'classnames';",
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import {events, func} from '../../util';",
                        "import Balloon from '../../balloon';",
                        "import {getPercent, getPrecision, isEqual, getDragging} from '../utils';",
                        "import Scale from './scale';",
                        "import Track from './track';",
                        "import Selected from './selected';",
                        "import Mark from './mark';",
                        "import Slider from './slider';",
                        "import FixedSlider from './fixedSlider';",
                        "",
                        "const Tooltip = Balloon.Tooltip;",
                        "const {noop, bindCtx} = func;",
                        "",
                        "function _isMultiple(slider, isFixedWidth) {",
                        "    return isFixedWidth || slider === 'double';",
                        "}",
                        "",
                        "function LowerSlider(props) {",
                        "    const {hasTip, value, tipRender, slider, tooltipVisible, onTooltipVisibleChange, tooltipAnimation } = props;",
                        "",
                        "    if (_isMultiple(slider)) {",
                        "        return hasTip ? (<Tooltip",
                        "            popupContainer={target => target.parentNode}",
                        "            popupProps={{",
                        "                visible: tooltipVisible,",
                        "                onVisibleChange: onTooltipVisibleChange,",
                        "                animation: tooltipAnimation",
                        "            }}",
                        "            trigger={Slider({...props, value: value[0]})}",
                        "            align=\"t\"",
                        "        >{tipRender(`${value[0]}`)}</Tooltip>) : Slider({...props, value: value[0]});",
                        "    }",
                        "    return null;",
                        "}",
                        "",
                        "LowerSlider.propTypes = {",
                        "    hasTip: PropTypes.bool,",
                        "    tooltipVisible: PropTypes.bool,",
                        "    onTooltipVisibleChange: PropTypes.func,",
                        "    tooltipAnimation: PropTypes.oneOfType([",
                        "        PropTypes.bool,",
                        "        PropTypes.object",
                        "    ]),",
                        "    value: PropTypes.oneOfType([",
                        "        PropTypes.number,",
                        "        PropTypes.arrayOf(PropTypes.number)",
                        "    ]),",
                        "    tipRender: PropTypes.func,",
                        "    slider: PropTypes.oneOf(['single', 'double'])",
                        "};",
                        "",
                        "function UpperSlider(props) {",
                        "    const {hasTip, value, tipRender, slider, tooltipVisible, onTooltipVisibleChange, tooltipAnimation } = props;",
                        "    if (_isMultiple(slider)) {",
                        "        return hasTip ?",
                        "            <Tooltip",
                        "                popupContainer={target => target.parentNode}",
                        "                popupProps={{",
                        "                    visible: tooltipVisible,",
                        "                    onVisibleChange: onTooltipVisibleChange,",
                        "                    animation: tooltipAnimation",
                        "                }}",
                        "                trigger={Slider({...props, value: value[1]})}",
                        "                align=\"t\"",
                        "            >",
                        "                {tipRender(value[1])}",
                        "            </Tooltip> :",
                        "            Slider({...props, value: value[1]});",
                        "    }",
                        "    return hasTip ?",
                        "        <Tooltip",
                        "            popupContainer={target => target.parentNode}",
                        "            popupProps={{",
                        "                visible: tooltipVisible,",
                        "                onVisibleChange: onTooltipVisibleChange,",
                        "                animation: tooltipAnimation",
                        "            }}",
                        "            animation={{",
                        "                in: 'fadeInUp',",
                        "                out: 'fadeOutDown'",
                        "            }}",
                        "            trigger={Slider(props)}",
                        "            align=\"t\"",
                        "        >",
                        "            {tipRender(value)}",
                        "        </Tooltip> :",
                        "        Slider(props);",
                        "}",
                        "",
                        "UpperSlider.propTypes = {",
                        "    hasTip: PropTypes.bool,",
                        "    tooltipVisible: PropTypes.bool,",
                        "    onTooltipVisibleChange: PropTypes.func,",
                        "    tooltipAnimation: PropTypes.oneOfType([",
                        "        PropTypes.bool,",
                        "        PropTypes.object",
                        "    ]),",
                        "    value: PropTypes.oneOfType([",
                        "        PropTypes.number,",
                        "        PropTypes.arrayOf(PropTypes.number)",
                        "    ]),",
                        "    tipRender: PropTypes.func,",
                        "    slider: PropTypes.oneOf(['single', 'double'])",
                        "};",
                        "",
                        "function pauseEvent(e) {",
                        "    e.stopPropagation();",
                        "    e.preventDefault();",
                        "}",
                        "",
                        "/** Range */",
                        "export default class Range extends React.Component {",
                        "    static contextTypes = {",
                        "        prefix: PropTypes.string",
                        "    }",
                        "    static propTypes = {",
                        "        /**",
                        "         * 样式类名的品牌前缀",
                        "         */",
                        "        prefix: PropTypes.string,",
                        "        /**",
                        "         * 自定义类名",
                        "         */",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * 自定义内敛样式",
                        "         */",
                        "        style: PropTypes.object,",
                        "        /**",
                        "         * 滑块个数",
                        "         * @enumdesc 单个, 两个",
                        "         */",
                        "        slider: PropTypes.oneOf(['single', 'double']),",
                        "        /**",
                        "         * 最小值",
                        "         */",
                        "        min: PropTypes.number,",
                        "        /**",
                        "         * 最大值",
                        "         */",
                        "        max: PropTypes.number,",
                        "        /**",
                        "         * 步长，取值必须大于 0，并且可被 (max - min) 整除。",
                        "         */",
                        "        step: PropTypes.number,",
                        "        /**",
                        "         * 设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`",
                        "         */",
                        "        value: PropTypes.oneOfType([",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number)",
                        "        ]),",
                        "        tempValue: PropTypes.oneOfType([",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number)",
                        "        ]),",
                        "        /**",
                        "         * 设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`",
                        "         */",
                        "        defaultValue: PropTypes.oneOfType([",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number)",
                        "        ]),",
                        "        /**",
                        "         * 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）",
                        "         */",
                        "        marks: PropTypes.oneOfType([",
                        "            PropTypes.bool,",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number),",
                        "            PropTypes.object",
                        "        ]),",
                        "        /**",
                        "         * marks显示在上方('above')or下方('below')",
                        "         */",
                        "        marksPosition: PropTypes.oneOf(['above', 'below']),",
                        "        /**",
                        "         * 值为 `true` 时，滑块为禁用状态",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用",
                        "         * @param {String/number} value",
                        "         */",
                        "        onChange: PropTypes.func,",
                        "        /**",
                        "         * 滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用",
                        "         * @param {String/number} value",
                        "         */",
                        "        onProcess: PropTypes.func,",
                        "        /**",
                        "         * 是否显示 tip",
                        "         */",
                        "        hasTip: PropTypes.bool,",
                        "        /**",
                        "         * 自定义 tip 显示内容",
                        "         * @param {Number|String} value 值",
                        "         * @return {ReactNode} 显示内容",
                        "         */",
                        "        tipRender: PropTypes.func,",
                        "        id: PropTypes.string,",
                        "        /**",
                        "         * 选中态反转",
                        "         */",
                        "        reverse: PropTypes.bool,",
                        "        /**",
                        "         * 是否pure render",
                        "         */",
                        "        pure: PropTypes.bool,",
                        "        /**",
                        "         * 是否为拖动线段类型,默认slider为double, defaultValue必传且指定区间",
                        "         */",
                        "        fixedWidth: PropTypes.bool,",
                        "        /**",
                        "         * tooltip是否默认展示",
                        "         */",
                        "        tooltipVisible: PropTypes.bool",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        slider: 'single',",
                        "        min: 0,",
                        "        max: 100,",
                        "        step: 1,",
                        "        marks: false,",
                        "        disabled: false,",
                        "        fixedWidth: false,",
                        "        tooltipVisible: false,",
                        "        hasTip: true,",
                        "        onChange: noop,",
                        "        onProcess: noop,",
                        "        tipRender: value => value,",
                        "        reverse: false,",
                        "        pure: false,",
                        "        marksPosition: 'above'",
                        "    }",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "        const {min} = props;",
                        "        const initialValue = _isMultiple(props.slider) ? [min, min] : min;",
                        "        const defaultValue = ('defaultValue' in props ? props.defaultValue : initialValue);",
                        "        const value = (props.value !== undefined ? props.value : defaultValue);",
                        "",
                        "        this.state = {",
                        "            value: value,",
                        "            tempValue: value,",
                        "            hasMovingClass: false,",
                        "            lowerTooltipVisible: false,",
                        "            upperTooltipVisible: false,",
                        "            tooltipAnimation: true",
                        "        };",
                        "",
                        "        bindCtx(this, ['handleLowerTooltipVisibleChange', 'handleUpperTooltipVisibleChange']);",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        const {min} = this.props;",
                        "        const initialValue = _isMultiple(nextProps.slider) ? [min, min] : min;",
                        "        if ('value' in nextProps) {",
                        "            let value = nextProps.value;",
                        "",
                        "            if (value === undefined) { // value设置undefined,reset为初始值",
                        "                value = initialValue;",
                        "            }",
                        "            this.setState({",
                        "                value: value,",
                        "                tempValue: value",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    _marksToScales(marks) {",
                        "        let result = [];",
                        "        if (Object.prototype.toString.call(marks) === '[object Object]') {",
                        "            for (const key in marks) {",
                        "                if (Object.hasOwnProperty.call(marks, key)) {",
                        "                    result.push(parseInt(key));",
                        "                }",
                        "            }",
                        "        } else {",
                        "            result = marks;",
                        "        }",
                        "        return result;",
                        "",
                        "    }",
                        "",
                        "    _calcScales() {",
                        "        const {min, max, marks} = this.props;",
                        "        const scales = this._marksToScales(marks);",
                        "        // let scales = null;",
                        "",
                        "        if (scales !== false) {",
                        "            if (Array.isArray(scales)) {",
                        "                return scales;",
                        "            } else {",
                        "                const pace = (max - min) / scales;",
                        "                const result = [];",
                        "",
                        "                result.push(min);",
                        "                for (let i = 1; i < scales; i++) {",
                        "                    result.push(min + i * pace);",
                        "                }",
                        "                result.push(max);",
                        "                return result;",
                        "            }",
                        "        } else {",
                        "            return [];",
                        "        }",
                        "    }",
                        "",
                        "    _calcMarks() {",
                        "        const {min, max, marks} = this.props;",
                        "",
                        "        let result = {};",
                        "",
                        "        if (Array.isArray(marks)) {",
                        "            marks.forEach(m => {",
                        "                result[m] = m.toString();",
                        "            });",
                        "        } else if (typeof marks === 'number') {",
                        "            const pace = (max - min) / marks;",
                        "",
                        "            result[min] = min;",
                        "            for (let i = 1; i < marks; i++) {",
                        "                let mark = min + i * pace;",
                        "                let precision = getPrecision(mark);",
                        "                if (precision > 2) {",
                        "                    precision = 2;",
                        "                }",
                        "                mark = mark.toFixed(precision);",
                        "                result[mark] = mark;",
                        "            }",
                        "            result[max] = max;",
                        "        } else {",
                        "            result = marks;",
                        "        }",
                        "        return result;",
                        "    }",
                        "",
                        "    _onMouseDown(e) {",
                        "        if (e.button === 0) {",
                        "            this.setState({",
                        "                hasMovingClass: true",
                        "            });",
                        "            this._start(e.pageX);",
                        "            this._addDocumentEvents();",
                        "            pauseEvent(e);",
                        "        }",
                        "    }",
                        "",
                        "    _start(position) {",
                        "        const {tempValue} = this.state;",
                        "        const range = this.dom;",
                        "        const start = range.getBoundingClientRect().left;",
                        "        // used in unit test",
                        "        let width = range.clientWidth;",
                        "        if (!width) {",
                        "            if (range.style.width) {",
                        "                const index = range.style.width.indexOf('px');",
                        "                if (index !== -1) {",
                        "                    width = Number(range.style.width.slice(0, index));",
                        "                }",
                        "            }",
                        "        }",
                        "",
                        "        this._moving = {",
                        "            start,",
                        "            end: start + width,",
                        "            startValue: tempValue",
                        "        };",
                        "",
                        "        // change on start",
                        "        this._onProcess(position, true);",
                        "    }",
                        "",
                        "    _end() {",
                        "        const {startValue} = this._moving;",
                        "        const {tempValue, value} = this.state;",
                        "        this._moving = null;",
                        "        this._removeDocumentEvents();",
                        "        this.setState({",
                        "            hasMovingClass: false,",
                        "            lowerTooltipVisible: false,",
                        "            upperTooltipVisible: false,",
                        "            tooltipAnimation: true",
                        "        });",
                        "        if (!isEqual(tempValue, startValue)) {",
                        "            // Not Controlled",
                        "            if (!('value' in this.props)) {",
                        "                this.setState({",
                        "                    value: tempValue",
                        "                });",
                        "            } else {",
                        "                this.setState({",
                        "                    // tooltipVisible: false,",
                        "                    tempValue: value,",
                        "                    value: value",
                        "                });",
                        "            }",
                        "            this.props.onChange(tempValue);",
                        "        }",
                        "    }",
                        "",
                        "    _move(e) {",
                        "        this._onProcess(e.pageX);",
                        "    }",
                        "",
                        "    _onProcess(position, start) {",
                        "        const {tempValue} = this.state;",
                        "        const current = this._positionToCurrent(position);//current 为当前click的value",
                        "",
                        "        if (this.isFixedWidth) {",
                        "            if (start) {",
                        "                this.lastPosition = current;",
                        "            }",
                        "        } else if (start) {",
                        "            this.lastPosition = current;",
                        "            if (_isMultiple(this.props.slider)) {",
                        "                this._moving.dragging = getDragging(current, tempValue);",
                        "            } else {",
                        "                this._moving.dragging = 'upper';",
                        "            }",
                        "",
                        "            this.setState({",
                        "                lowerTooltipVisible: this._moving.dragging === 'lower',",
                        "                upperTooltipVisible: this._moving.dragging === 'upper',",
                        "                tooltipAnimation: false",
                        "            });",
                        "        } else if (this.oldDragging === 'lower' && this._moving.dragging === 'upper') {",
                        "            this.setState({",
                        "                upperTooltipVisible: true,",
                        "                lowerTooltipVisible: false",
                        "            });",
                        "        } else if (this.oldDragging === 'upper' && this._moving.dragging === 'lower') {",
                        "            this.setState({",
                        "                upperTooltipVisible: false,",
                        "                lowerTooltipVisible: true",
                        "            });",
                        "        }",
                        "",
                        "        this.oldDragging = this._moving.dragging;",
                        "",
                        "        const nextValue = this._currentToValue(current, tempValue, this.lastPosition, this.isFixedWidth);//计算range的新value,可能是数组,可能是单个值",
                        "        this.lastPosition = current;",
                        "",
                        "        if (!isEqual(nextValue, tempValue)) {",
                        "            this.setState({",
                        "                tempValue: nextValue",
                        "            });",
                        "            this.props.onProcess(nextValue);",
                        "        }",
                        "    }",
                        "",
                        "    _addDocumentEvents() {",
                        "        this._onMouseMoveListener = events.on(document, 'mousemove', this._move.bind(this));",
                        "        this._onMouseUpListener = events.on(document, 'mouseup', this._end.bind(this));",
                        "    }",
                        "",
                        "    _removeDocumentEvents() {",
                        "        if (this._onMouseMoveListener) {",
                        "            this._onMouseMoveListener.off();",
                        "            this._onMouseMoveListener = null;",
                        "        }",
                        "",
                        "        if (this._onMouseUpListener) {",
                        "            this._onMouseUpListener.off();",
                        "            this._onMouseUpListener = null;",
                        "        }",
                        "    }",
                        "",
                        "    // position => current (value type)",
                        "    _positionToCurrent(position) {",
                        "        const {start, end} = this._moving;",
                        "        const {step, min, max} = this.props;",
                        "",
                        "        if (position < start) {",
                        "            position = start;",
                        "        } else if (position > end) {",
                        "            position = end;",
                        "        }",
                        "        const percent = getPercent(start, end, position);",
                        "",
                        "        // reset by step",
                        "        const newValue = parseFloat((Math.round(percent / 100 * (max - min) / step) * step).toFixed(getPrecision(step)));",
                        "",
                        "        return min + newValue;",
                        "    }",
                        "",
                        "    _currentToValue(current, preValue, lastPosition, isFixedWidth) {",
                        "        const {dragging} = this._moving;",
                        "",
                        "        if (!_isMultiple(this.props.slider, isFixedWidth)) {",
                        "            return current;",
                        "        } else {",
                        "            let result;",
                        "            const {min, max} = this.props;",
                        "",
                        "            const precision = getPrecision(this.props.step);",
                        "            const diff = current - lastPosition;",
                        "            const newLeft = +(+preValue[0] + diff).toFixed(precision);",
                        "            const newRight = +(+preValue[1] + diff).toFixed(precision);",
                        "",
                        "            const newMaxLeft = +(max - preValue[1] + preValue[0]).toFixed(precision);",
                        "            const newMinRight = +(min + preValue[1] - preValue[0]).toFixed(precision);",
                        "",
                        "            if (isFixedWidth) {",
                        "                if (newLeft < min) {",
                        "                    result = [min, newMinRight];",
                        "                } else if (newRight > max) {",
                        "                    result = [newMaxLeft, max];",
                        "                } else {",
                        "                    result = [newLeft, newRight];",
                        "                }",
                        "            } else if (dragging === 'lower') {",
                        "                if (current > preValue[1]) {",
                        "                    result = [preValue[1], current];",
                        "                    this._moving.dragging = 'upper';",
                        "                } else {",
                        "                    result = [current, preValue[1]];",
                        "                }",
                        "            } else if (dragging === 'upper') {",
                        "                if (current < preValue[0]) {",
                        "                    result = [current, preValue[0]];",
                        "                    this._moving.dragging = 'lower';",
                        "                } else {",
                        "                    result = [preValue[0], current];",
                        "                }",
                        "            }",
                        "",
                        "            return result;",
                        "        }",
                        "    }",
                        "",
                        "    handleLowerTooltipVisibleChange(visible) {",
                        "        if (this.state.hasMovingClass) {",
                        "            return;",
                        "        }",
                        "        this.setState({",
                        "            lowerTooltipVisible: visible",
                        "        });",
                        "    }",
                        "",
                        "    handleUpperTooltipVisibleChange(visible) {",
                        "        if (this.state.hasMovingClass) {",
                        "            return;",
                        "        }",
                        "        this.setState({",
                        "            upperTooltipVisible: visible",
                        "        });",
                        "    }",
                        "",
                        "    render() {",
                        "",
                        "        let value = this._moving ? this.state.tempValue : this.state.value;",
                        "",
                        "        const {prefix, min, max, disabled, style, id, slider, reverse, className, marks, marksPosition, hasTip, tipRender, fixedWidth, defaultValue, tooltipVisible} = this.props;",
                        "        const classes = classNames({",
                        "            [`${prefix}range`]: true,",
                        "            disabled: disabled,",
                        "            [className]: className,",
                        "        });",
                        "",
                        "        if (Array.isArray(value)) {",
                        "            value.forEach((item, index) => {",
                        "                if (item > max) {",
                        "                    value[index] = max;",
                        "                }",
                        "            });",
                        "        } else if (value > max) {",
                        "            value = max;",
                        "        }",
                        "",
                        "        const commonProps = {",
                        "            prefix,",
                        "            min,",
                        "            max,",
                        "            value,",
                        "            reverse,",
                        "            slider,",
                        "            hasTip,",
                        "            tipRender,",
                        "            marksPosition,",
                        "            tooltipVisible,",
                        "            hasMovingClass: this.state.hasMovingClass,",
                        "            disabled",
                        "        };",
                        "",
                        "        this.isFixedWidth = fixedWidth &&",
                        "            (value ?",
                        "                Array.isArray(value) :",
                        "                defaultValue ?",
                        "                    Array.isArray(defaultValue) :",
                        "                    false",
                        "            );",
                        "",
                        "        return (",
                        "            <div ref={(dom) => {",
                        "                this.dom = dom;",
                        "            }} className={classes} id={id} onMouseDown={disabled ? noop : this._onMouseDown.bind(this)}",
                        "            style={style}>",
                        "                {",
                        "                    marks !== false && marksPosition === 'above' ?",
                        "                        <Mark {...commonProps} marks={this._calcMarks()}/> :",
                        "                        null",
                        "                }",
                        "                <div className={`${prefix}range-inner`}>",
                        "                    <Scale {...commonProps} scales={this._calcScales()}/>",
                        "                    <Track {...commonProps} />",
                        "                    {",
                        "                        this.isFixedWidth ?",
                        "                            <FixedSlider {...commonProps} /> :",
                        "                            <div>",
                        "                                <Selected {...commonProps} />",
                        "                                <LowerSlider {...commonProps}",
                        "                                    hasMovingClass={this.state.hasMovingClass && this._moving && this._moving.dragging === 'lower'}",
                        "                                    tooltipVisible={tooltipVisible || this.state.lowerTooltipVisible}",
                        "                                    onTooltipVisibleChange={this.handleLowerTooltipVisibleChange}",
                        "                                    tooltipAnimation={this.state.tooltipAnimation ? { in: 'expandInUp', out: 'expandOutDown' } : false} />",
                        "                                <UpperSlider {...commonProps}",
                        "                                    hasMovingClass={this.state.hasMovingClass && this._moving && this._moving.dragging === 'upper'}",
                        "                                    tooltipVisible={tooltipVisible || this.state.upperTooltipVisible}",
                        "                                    onTooltipVisibleChange={this.handleUpperTooltipVisibleChange}",
                        "                                    tooltipAnimation={this.state.tooltipAnimation ? { in: 'expandInUp', out: 'expandOutDown' } : false} />",
                        "                            </div>",
                        "",
                        "                    }",
                        "                </div>",
                        "                {",
                        "                    marks !== false && marksPosition === 'below' ?",
                        "                        <Mark {...commonProps} marks={this._calcMarks()}/> :",
                        "                        null",
                        "                }",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "scale.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import classNames from 'classnames';",
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import { inRange, getPercent } from '../utils';",
                        "",
                        "export default class Scale extends React.Component {",
                        "    static propTypes = {",
                        "        min: PropTypes.number,",
                        "        max: PropTypes.number,",
                        "        value: PropTypes.oneOfType([",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number)",
                        "        ]),",
                        "        prefix: PropTypes.string,",
                        "        scales: PropTypes.arrayOf(PropTypes.number)",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        min: 0,",
                        "        max: 100,",
                        "        value: 0",
                        "    }",
                        "",
                        "    _renderItems() {",
                        "        const {min, max, value, prefix, scales} = this.props;",
                        "        const items = [];",
                        "",
                        "        scales.forEach((scale, i) => {",
                        "            const classes = classNames({",
                        "                [`${prefix}range-scale-item`]: true,",
                        "                activated: inRange(scale, value, min)",
                        "            });",
                        "            const left = `${getPercent(min, max, scale)}%`;",
                        "",
                        "            items.push(",
                        "                // \"key\" is for https://fb.me/react-warning-keys",
                        "                <span className={classes} style={{left: left}} key={i}></span>",
                        "            );",
                        "        });",
                        "",
                        "        return items;",
                        "    }",
                        "",
                        "    render() {",
                        "        const {prefix} = this.props;",
                        "        const classes = classNames({",
                        "            [`${prefix}range-scale`]: true",
                        "        });",
                        "        const items = this._renderItems();",
                        "",
                        "        return (",
                        "            <div className={classes}>",
                        "                {items}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "selected.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import classNames from 'classnames';",
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import {getPercent} from '../utils';",
                        "",
                        "export default class Selected extends React.Component {",
                        "    static propTypes = {",
                        "        min: PropTypes.number,",
                        "        max: PropTypes.number,",
                        "        slider: PropTypes.string,",
                        "        value: PropTypes.oneOfType([",
                        "            PropTypes.number,",
                        "            PropTypes.arrayOf(PropTypes.number)",
                        "        ]),",
                        "        prefix: PropTypes.string,",
                        "        reverse: PropTypes.bool",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        slider: 'single',",
                        "        min: 0,",
                        "        max: 100,",
                        "        value: 0,",
                        "        reverse: false",
                        "    }",
                        "",
                        "    _getStyle() {",
                        "        const {min, max, reverse} = this.props;",
                        "        let {value} = this.props;",
                        "",
                        "        if (!Array.isArray(value)) {",
                        "            value = [min, value];",
                        "        }",
                        "        const width = (value[1] - value[0]) * 100 / (max - min);",
                        "",
                        "        let style = {",
                        "            width: `${width}%`,",
                        "            left: `${getPercent(min, max, value[0])}%`",
                        "        };",
                        "        if (reverse) {",
                        "            style = {",
                        "                width: `${100 - width}%`,",
                        "                left: `${getPercent(min, max, value[0]) + width}%`",
                        "            };",
                        "        }",
                        "        return style;",
                        "    }",
                        "",
                        "    _getStyleLeft() {",
                        "        const {min, max} = this.props;",
                        "        let {value} = this.props;",
                        "",
                        "        if (!Array.isArray(value)) {",
                        "            value = [min, value];",
                        "        }",
                        "",
                        "        const style = {",
                        "            width: `${getPercent(min, max, value[0])}%`,",
                        "            left: 0",
                        "        };",
                        "        return style;",
                        "    }",
                        "",
                        "    _getStyleRight() {",
                        "        const {min, max} = this.props;",
                        "        let {value} = this.props;",
                        "",
                        "        if (!Array.isArray(value)) {",
                        "            value = [min, value];",
                        "        }",
                        "        const width = (value[1] - value[0]) * 100 / (max - min);",
                        "",
                        "        const style = {",
                        "            width: `${100 - getPercent(min, max, value[0]) - width}%`,",
                        "            left: `${getPercent(min, max, value[0]) + width}%`",
                        "        };",
                        "        return style;",
                        "    }",
                        "",
                        "    render() {",
                        "        const {prefix, slider, reverse} = this.props;",
                        "        const classes = classNames({",
                        "            [`${prefix}range-selected`]: true",
                        "        });",
                        "        let SeletedComps = <div className={classes} style={this._getStyle()}></div>;",
                        "",
                        "        if (slider === 'double' && reverse) {",
                        "            SeletedComps = (<div>",
                        "                <div className={classes} style={this._getStyleLeft()}></div>",
                        "                <div className={classes} style={this._getStyleRight()}></div>",
                        "            </div>",
                        "            );",
                        "        }",
                        "",
                        "        return (",
                        "            SeletedComps",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "slider.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import classNames from 'classnames';",
                        "import PropTypes from 'prop-types';",
                        "import {getPercent} from '../utils';",
                        "",
                        "function _getStyle(min, max, value) {",
                        "    return {",
                        "        left: `${getPercent(min, max, value)}%`,",
                        "        zIndex: 100",
                        "    };",
                        "}",
                        "",
                        "function Slider({prefix, hasMovingClass, min, max, value}) {",
                        "",
                        "    const classes = classNames({",
                        "        [`${prefix}range-slider`]: true,",
                        "        [`${prefix}range-slider-moving`]: hasMovingClass",
                        "    });",
                        "    return (",
                        "        <div className={classes} style={_getStyle(min, max, value)}>",
                        "            <div className={`${prefix}range-slider-inner`}></div>",
                        "        </div>",
                        "    );",
                        "}",
                        "",
                        "Slider.propTypes = {",
                        "    min: PropTypes.number,",
                        "    max: PropTypes.number,",
                        "    value: PropTypes.number,",
                        "    prefix: PropTypes.string,",
                        "    hasMovingClass: PropTypes.bool",
                        "};",
                        "",
                        "Slider.defaultProps = {",
                        "    prefix: 'next-',",
                        "    min: 0,",
                        "    max: 100,",
                        "    value: 0,",
                        "    hasMovingClass: false",
                        "};",
                        "",
                        "export default Slider;"
                    ]
                },
                "track.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import classNames from 'classnames';",
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "",
                        "const Track = ({ prefix }) => {",
                        "    const classes = classNames({",
                        "        [`${prefix}range-track`]: true",
                        "    });",
                        "    return (",
                        "        <div className={classes}></div>",
                        "    );",
                        "};",
                        "",
                        "Track.propTypes = {",
                        "    prefix: PropTypes.string",
                        "};",
                        "",
                        "Track.defaultProps = {",
                        "    prefix: 'next-'",
                        "};",
                        "",
                        "export default Track;"
                    ]
                }
            }
        },
        "rating": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Rating from './rating';",
                    "",
                    "export default ConfigProvider.config(Rating, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('type' in props) {",
                    "            deprecated('type', 'showGrade', 'Rating');",
                    "",
                    "            const { type, ...others } = props;",
                    "            props = { showGrade: type === 'grade', ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "",
                    "#{$rating-prefix} {",
                    "    vertical-align: top;",
                    "",
                    "    & {",
                    "        display: inline-block;",
                    "        position: relative;",
                    "    }",
                    "",
                    "    &:after {",
                    "        visibility: hidden;",
                    "        display: block;",
                    "        height: 0;",
                    "        font-size: 0;",
                    "        content: '\\0020';",
                    "        clear: both;",
                    "    }",
                    "",
                    "    &-base {",
                    "        float: left;",
                    "        cursor: pointer;",
                    "    }",
                    "",
                    "    &-text {",
                    "        float: left;",
                    "    }",
                    "",
                    "    &-base-disabled {",
                    "        cursor: not-allowed;",
                    "    }",
                    "",
                    "    &-underlay {",
                    "        white-space: nowrap;",
                    "        overflow: hidden;",
                    "",
                    "        @include rating-state($rating-normal-underlay-color);",
                    "    }",
                    "",
                    "    &-stroke-mode &-underlay {",
                    "        #{$rating-icon-prefix} {",
                    "            color: $color-transparent;",
                    "            -webkit-text-stroke: 1px $rating-normal-overlay-color;",
                    "        }",
                    "    }",
                    "",
                    "    &-overlay {",
                    "        white-space: nowrap;",
                    "        overflow: hidden;",
                    "        position: absolute;",
                    "        width: 0;",
                    "        top: 0;",
                    "        left: 0;",
                    "",
                    "        @include rating-state($rating-normal-overlay-color);",
                    "    }",
                    "",
                    "    &-underlay,",
                    "    &-overlay {",
                    "        #{$rating-prefix}-icon {",
                    "            margin-left: $s-1;",
                    "        }",
                    "",
                    "        #{$rating-prefix}-icon:last-child {",
                    "            /* icon 放大会产生边缘溢出，这里使用 margin 为放大扩展一部分空间 */",
                    "            margin-right: $s-1;",
                    "        }",
                    "",
                    "        #{$rating-icon-prefix} {",
                    "            transition: all 50ms ease-in;",
                    "",
                    "            &.hover {",
                    "                transform: scale3d(1.1, 1.1, 1.1);",
                    "            }",
                    "",
                    "            &.clicked {",
                    "                transform: scale3d(.9, .9, .9);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-info {",
                    "        position: absolute;",
                    "        top: calc(100% + #{$s-1});",
                    "        left: 0;",
                    "        border: 1px solid $color-fill1-4;",
                    "        background: $color-white;",
                    "        padding: 4px 8px 3px;",
                    "        font-size: 12px;",
                    "        white-space: nowrap;",
                    "",
                    "        &:after {",
                    "            position: absolute;",
                    "            content: ' ';",
                    "            width: 4px;",
                    "            height: 4px;",
                    "            transform: rotate(45deg);",
                    "            border: 1px solid $color-fill1-4;",
                    "            background: $color-white;",
                    "            border-bottom-color: transparent;",
                    "            border-right-color: transparent;",
                    "            top: -3px;",
                    "            left: 4px;",
                    "        }",
                    "    }",
                    "",
                    "    &.hover {",
                    "        #{$rating-prefix}-overlay {",
                    "            @include rating-state($rating-normal-overlay-hover-color);",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "/* 状态 */",
                    "/* ======================================== */",
                    "",
                    "#{$rating-prefix}-grade-low {",
                    "    #{$rating-prefix}-overlay {",
                    "        @include rating-state($rating-grade-low-overlay-color);",
                    "    }",
                    "",
                    "    &.hover {",
                    "        #{$rating-prefix}-overlay {",
                    "            @include rating-state($rating-grade-low-overlay-color);",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$rating-prefix}-grade-high {",
                    "    #{$rating-prefix}-overlay {",
                    "        @include rating-state($rating-grade-high-overlay-color);",
                    "    }",
                    "",
                    "    &.hover {",
                    "        #{$rating-prefix}-overlay {",
                    "            @include rating-state($rating-grade-high-overlay-hover-color);",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "/* 尺寸 */",
                    "/* ======================================== */",
                    "",
                    "#{$rating-prefix}-small {",
                    "    @include rating-size($rating-small-icon-size, $rating-small-font-size, $rating-small-text-margin-left);",
                    "}",
                    "",
                    "#{$rating-prefix}-medium {",
                    "    @include rating-size($rating-medium-icon-size, $rating-medium-font-size, $rating-medium-text-margin-left);",
                    "}",
                    "",
                    "#{$rating-prefix}-large {",
                    "    @include rating-size($rating-large-icon-size, $rating-large-font-size, $rating-large-text-margin-left);",
                    "}"
                ]
            },
            "rating.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Icon from '../icon';",
                    "import {func, obj} from '../util';",
                    "",
                    "const {noop, bindCtx} = func;",
                    "",
                    "// 评分组件的大小与icon的大小映射关系",
                    "const ICON_SIZE_MAP = {",
                    "    small: 'xs',",
                    "    medium: 'small',",
                    "    large: 'medium'",
                    "};",
                    "",
                    "/** Rating */",
                    "export default class Rating extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 默认值",
                    "         */",
                    "        defaultValue: PropTypes.number,",
                    "        /**",
                    "         * 值",
                    "         */",
                    "        value: PropTypes.number,",
                    "        /**",
                    "         * 评分的总数",
                    "         */",
                    "        count: PropTypes.number,",
                    "        /**",
                    "         * 是否显示 grade",
                    "         */",
                    "        showGrade: PropTypes.bool,",
                    "        /**",
                    "         * 尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 是否允许半星评分",
                    "         */",
                    "        allowHalf: PropTypes.bool,",
                    "        /**",
                    "         * 用户点击评分时触发的回调",
                    "         * @param {String} value 评分值",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 用户hover评分时触发的回调",
                    "         * @param {String} value 评分值",
                    "         */",
                    "        onHoverChange: PropTypes.func,",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        // 实验属性: 自定义评分icon",
                    "        iconType: PropTypes.string,",
                    "        // 实验属性: 开启 `-webkit-text-stroke` 显示边框颜色，在IE中无效",
                    "        strokeMode: PropTypes.bool,",
                    "        className: PropTypes.string",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        size: 'medium',",
                    "        disabled: false,",
                    "        count: 5,",
                    "        showGrade: false,",
                    "        defaultValue: 0,",
                    "        allowHalf: false,",
                    "        iconType: 'favorites-filling',",
                    "        onChange: noop,",
                    "        onHoverChange: noop",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            value: 'value' in props ? props.value : props.defaultValue,",
                    "            hoverValue: 0,",
                    "            iconSpace: 0,",
                    "            iconSize: 0,",
                    "            clicked: false, // 标记组件是否被点击过",
                    "        };",
                    "        this.timer = null;",
                    "",
                    "        bindCtx(this, [",
                    "            'handleClick',",
                    "            'handleHover',",
                    "            'handleLeave'",
                    "        ]);",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        this.getRenderResult();",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            this.setState({",
                    "                value: nextProps.value || 0",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        this.clearTimer();",
                    "    }",
                    "",
                    "    // 清除延时",
                    "    clearTimer() {",
                    "        if (this.timer) {",
                    "            clearTimeout(this.timer);",
                    "            this.timer = null;",
                    "        }",
                    "    }",
                    "",
                    "    getRenderResult() {",
                    "        const { count } = this.props;",
                    "        const { iconSpace, iconSize } = this.state;",
                    "        const icon = this.refs['rating-icon-0'];",
                    "",
                    "        if (icon && this.underlayNode) {",
                    "            const newIconSize = icon.offsetWidth;",
                    "            const newIconSpace = (this.underlayNode.offsetWidth - count * newIconSize) / (count + 1);",
                    "",
                    "            if (newIconSize !== iconSize || newIconSpace !== iconSpace) {",
                    "                this.setState({",
                    "                    iconSpace: newIconSpace,",
                    "                    iconSize: newIconSize",
                    "                });",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    getValue(e) {",
                    "        // 如定位不准，优先纠正定位",
                    "        this.getRenderResult();",
                    "",
                    "        const { allowHalf, count } = this.props;",
                    "        const { iconSpace, iconSize } = this.state;",
                    "",
                    "        const pos = e.pageX - this.underlayNode.getBoundingClientRect().left;",
                    "        const fullNum = Math.floor(pos / (iconSpace + iconSize));",
                    "        const surplusNum = (pos - fullNum * (iconSpace + iconSize)) / iconSize;",
                    "        let value = Number(fullNum) + Number(surplusNum.toFixed(1));",
                    "",
                    "        if (value >= count) {",
                    "            value = count;",
                    "        } else if (allowHalf) {",
                    "            const floorValue = Math.floor(value);",
                    "            value = (value - 0.5) >= floorValue ? floorValue + 1 : floorValue + 0.5;",
                    "        } else {",
                    "            value = Math.floor(value) + 1;",
                    "        }",
                    "",
                    "        return value;",
                    "    }",
                    "",
                    "    handleHover(e) {",
                    "        const value = this.getValue(e);",
                    "        const { onHoverChange } = this.props;",
                    "        if (value !== this.state.hoverValue) {",
                    "",
                    "            this.clearTimer();",
                    "",
                    "            this.timer = setTimeout(() => {",
                    "                this.setState({ hoverValue: value }, () => {",
                    "                    onHoverChange(value);",
                    "                });",
                    "            }, 0);",
                    "        }",
                    "    }",
                    "",
                    "    handleLeave() {",
                    "",
                    "        this.clearTimer();",
                    "",
                    "        this.setState({",
                    "            hoverValue: 0",
                    "        });",
                    "    }",
                    "",
                    "    handleClick(e) {",
                    "        const value = this.getValue(e);",
                    "",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({ value, clicked: true });",
                    "        }",
                    "",
                    "        this.props.onChange(value);",
                    "",
                    "        setTimeout(() => {",
                    "            this.setState({ clicked: false });",
                    "        }, 100);",
                    "    }",
                    "",
                    "    currentValue(min, max, hoverValue, stateValue) {",
                    "        let value = hoverValue ? hoverValue : stateValue;",
                    "",
                    "        value = value >= max ? max : value;",
                    "        value = value <= min ? min : value;",
                    "",
                    "        return value || 0;",
                    "    }",
                    "",
                    "    getOverlayWidth() {",
                    "        const {hoverValue, iconSpace, iconSize} = this.state;",
                    "",
                    "        if (!iconSpace || !iconSize) {",
                    "            return 'auto';",
                    "        }",
                    "",
                    "        const value = this.currentValue(0, this.props.count, hoverValue, this.state.value);",
                    "",
                    "        const floorValue = Math.floor(value);",
                    "",
                    "        return iconSize * value + (floorValue + 1) * iconSpace;",
                    "    }",
                    "",
                    "    getInfoLeft() {",
                    "        const {value, hoverValue, iconSpace, iconSize} = this.state;",
                    "        const infoValue = hoverValue || value;",
                    "        const ceilValue = Math.ceil(infoValue);",
                    "",
                    "        return iconSize * (ceilValue - 1) + ceilValue * iconSpace;",
                    "    }",
                    "",
                    "    render() {",
                    "        const {prefix, className, showGrade, count, size, iconType, strokeMode, disabled} = this.props;",
                    "        const others = obj.pickOthers(Rating.propTypes, this.props);",
                    "        const {hoverValue, clicked} = this.state;",
                    "        const underlay = [], overlay = [];",
                    "",
                    "        // 获得Value",
                    "        const value = this.currentValue(0, count, hoverValue, this.state.value);",
                    "",
                    "        // icon的sizeMap",
                    "        const sizeMap = ICON_SIZE_MAP[size];",
                    "",
                    "        for (let i = 0; i < count; i++) {",
                    "            const isCurrent = Math.ceil(value - 1) === i;",
                    "            const iconCls = classNames({",
                    "                hover: hoverValue > 0 && isCurrent,",
                    "                clicked: clicked && isCurrent,",
                    "            });",
                    "            const iconNode = <Icon type={iconType} size={sizeMap} className={iconCls} />;",
                    "",
                    "            underlay.push(",
                    "                <span ref={`rating-icon-${i}`} key={`underlay-${i}`} className={`${prefix}rating-icon`}>",
                    "                    {iconNode}",
                    "                </span>",
                    "            );",
                    "            overlay.push(",
                    "                <span key={`overlay-${i}`} className={`${prefix}rating-icon`}>",
                    "                    {iconNode}",
                    "                </span>",
                    "            );",
                    "        }",
                    "",
                    "        const ratingCls = classNames([",
                    "            `${prefix}rating`,",
                    "            `${prefix}rating-${size}`",
                    "        ], {",
                    "            [`${prefix}rating-grade-low`]: value <= count * 0.4,",
                    "            [`${prefix}rating-grade-high`]: value > count * 0.4,",
                    "            [`${prefix}rating-stroke-mode`]: strokeMode,",
                    "            hover: hoverValue > 0,",
                    "        }, className);",
                    "",
                    "        const baseCls = classNames(`${prefix}rating-base`, {",
                    "            [`${prefix}rating-base-disabled`]: disabled",
                    "        });",
                    "",
                    "        const overlayStyle = {",
                    "            width: this.getOverlayWidth()",
                    "        };",
                    "        const infoStyle = {",
                    "            left: this.getInfoLeft(),",
                    "            display: hoverValue ? 'block' : 'none'",
                    "        };",
                    "",
                    "        const finalProps = disabled ? {} : {",
                    "            onClick: this.handleClick,",
                    "            onMouseOver: this.handleHover,",
                    "            onMouseMove: this.handleHover,",
                    "            onMouseLeave: this.handleLeave",
                    "        };",
                    "",
                    "        return (",
                    "            <div {...others} className={ratingCls}>",
                    "                <div className={baseCls} {...finalProps}>",
                    "                    <div className={`${prefix}rating-underlay`} ref={n => (this.underlayNode = n)}>{underlay}</div>",
                    "                    <div className={`${prefix}rating-overlay`} style={overlayStyle}>{overlay}</div>",
                    "                </div>",
                    "                {",
                    "                    showGrade ? <div className={`${prefix}rating-info`} style={infoStyle}>{value}</div> : null",
                    "                }",
                    "            </div>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin rating-state(",
                        "    $color",
                        ") {",
                        "    #{$rating-icon-prefix} {",
                        "        color: $color;",
                        "    }",
                        "}",
                        "",
                        "@mixin rating-size(",
                        "    $icon-size,",
                        "    $text-size,",
                        "    $text-margin-left",
                        ") {",
                        "    font-size: $text-size;",
                        "",
                        "    #{$rating-icon-prefix} {",
                        "        @include icon-size($icon-size);",
                        "    }",
                        "",
                        "    #{$rating-prefix}-text {",
                        "        margin-left: $text-margin-left;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module rating: 评分",
                        "/// @tag Rating",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $rating-",
                        "/// @classPrefix {prefix}-rating",
                        "/// @order {\"size/text\":10,\"size/icon\":11,\"statement/normal\":10,\"statement/normal/underlay\":100,\"statement/normal/overlay\":101,\"statement/hover\":11,\"statement/hover/underlay\":110,\"statement/hover/overlay\":111}",
                        "////",
                        "",
                        "$rating-prefix: '.' + $css-prefix + 'rating';",
                        "",
                        "$rating-icon-prefix: '.' + $css-prefix + 'icon';",
                        "",
                        "",
                        "/// margin (l)",
                        "/// @namespace size/text",
                        "$rating-small-text-margin-left: $s-2 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$rating-small-icon-size: $icon-xs !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$rating-small-font-size: $font-size-caption !default;",
                        "",
                        "/// margin (l)",
                        "/// @namespace size/text",
                        "$rating-medium-text-margin-left: $s-3 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$rating-medium-icon-size: $icon-s !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$rating-medium-font-size: $font-size-body-1 !default;",
                        "",
                        "/// margin (l)",
                        "/// @namespace size/text",
                        "$rating-large-text-margin-left: $s-4 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/icon",
                        "$rating-large-icon-size: $icon-m !default;",
                        "",
                        "/// size",
                        "/// @namespace size/text",
                        "$rating-large-font-size: $font-size-subhead !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/underlay",
                        "$rating-normal-underlay-color: $color-fill1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/overlay",
                        "$rating-normal-overlay-color: $color-brand1-6 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/underlay",
                        "$rating-normal-overlay-hover-color: $color-brand1-6 !default;",
                        "",
                        "/// low level background",
                        "/// @namespace statement/normal/overlay",
                        "$rating-grade-low-overlay-color: $color-text1-3 !default;",
                        "",
                        "/// low level background",
                        "/// @namespace statement/hover/overlay",
                        "$rating-grade-low-overlay-hover-color: $color-text1-2 !default;",
                        "",
                        "/// high level background",
                        "/// @namespace statement/normal/overlay",
                        "$rating-grade-high-overlay-color: $color-brand1-6 !default;",
                        "",
                        "/// high level background",
                        "/// @namespace statement/hover/overlay",
                        "$rating-grade-high-overlay-hover-color: $color-brand1-6 !default;"
                    ]
                }
            }
        },
        "search": {
            "Search.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Input from '../input';",
                    "import Select from '../select';",
                    "import Button from '../button';",
                    "import Icon from '../icon';",
                    "import { obj, func, KEYCODE } from '../util';",
                    "",
                    "const Group = Input.Group;",
                    "const AutoComplete = Select.AutoComplete;",
                    "",
                    "/**",
                    " * Search",
                    " * @description 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api",
                    " */",
                    "class Search extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 形状",
                    "         */",
                    "        shape: PropTypes.oneOf(['normal', 'simple']),",
                    "        /**",
                    "         * 类型 shape=normal: primary/secondary; shape=simple: normal/dark;",
                    "         */",
                    "        type: PropTypes.oneOf(['primary', 'secondary', 'normal', 'dark']),",
                    "        /**",
                    "         * 大小",
                    "         * @enumdesc '大', '小'",
                    "         */",
                    "        size: PropTypes.oneOf(['large', 'medium']),",
                    "        /**",
                    "         * 搜索框默认值",
                    "         */",
                    "        defaultValue: PropTypes.string,",
                    "        /**",
                    "         * 搜索框数值",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 输入关键字时的回掉",
                    "         * @param {Object} 输入值",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 点击搜索按钮触发的回调",
                    "         * @param {Object} 输入值",
                    "         */",
                    "        onSearch: PropTypes.func,",
                    "        /**",
                    "         * 选择器默认值",
                    "         */",
                    "        defaultFilterValue: PropTypes.string,",
                    "        /**",
                    "         * 选择器",
                    "         */",
                    "        filter: PropTypes.array,",
                    "        /**",
                    "         * 选择器值",
                    "         */",
                    "        filterValue: PropTypes.string,",
                    "        /**",
                    "         * 选择器发生变化时回调",
                    "         * @param {Object} filter value",
                    "         */",
                    "        onFilterChange: PropTypes.func,",
                    "        /**",
                    "         * 搜索框下拉联想列表",
                    "         */",
                    "        dataSource: PropTypes.array,",
                    "        /**",
                    "         * 默认提示",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * button 的内容",
                    "         */",
                    "        searchText: PropTypes.node,",
                    "        /**",
                    "         * 自定义样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 样式名称",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 选择器的props",
                    "         */",
                    "        filterProps: PropTypes.object,",
                    "        /**",
                    "         * 按钮的额外属性",
                    "         */",
                    "        buttonProps: PropTypes.object,",
                    "        /**",
                    "         * 自定义渲染的的下拉框",
                    "         */",
                    "        popupContent: PropTypes.node,",
                    "        /**",
                    "         * 自定义渲染的的下拉框",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示清除按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        locale: PropTypes.object,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        shape: 'normal',",
                    "        type: 'normal',",
                    "        size: 'medium',",
                    "        hasIcon: true,",
                    "        filter: [],",
                    "        buttonProps: {},",
                    "        onChange: func.noop,",
                    "        onSearch: func.noop,",
                    "        onFilterChange: func.noop,",
                    "        hasClear: false,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        const value = 'value' in props ? props.value : props.defaultValue;",
                    "        const filterValue = 'filterValue' in props ? props.filterValue : props.defaultFilterValue;",
                    "",
                    "        this.state = {",
                    "            value: typeof value === 'undefined' ? '' : value,",
                    "            filterValue,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        const state = {};",
                    "        if ('value' in nextProps) {",
                    "            state.value = typeof nextProps.value === 'undefined' ? '' : nextProps.value;",
                    "        }",
                    "        if ('filterValue' in nextProps) {",
                    "            state.filterValue = typeof nextProps.filterValue === 'undefined' ? '' : nextProps.filterValue;",
                    "        }",
                    "        this.setState(state);",
                    "    }",
                    "",
                    "    onChange = (value) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({ value });",
                    "        }",
                    "",
                    "        this.props.onChange(value);",
                    "    };",
                    "",
                    "    onSearch = () => {",
                    "        this.props.onSearch(this.state.value, this.state.filterValue);",
                    "    };",
                    "",
                    "    onFilterChange = (filterValue) => {",
                    "        if (!('filterValue' in this.props)) {",
                    "            this.setState({ filterValue });",
                    "        }",
                    "",
                    "        this.props.onFilterChange(filterValue);",
                    "    };",
                    "",
                    "    onKeyDown = (e) => {",
                    "        if (e.keyCode !== KEYCODE.ENTER) {",
                    "            return;",
                    "        }",
                    "        this.onSearch();",
                    "    }",
                    "    render() {",
                    "        const {",
                    "            shape, filter, hasIcon,",
                    "            placeholder, type, className,",
                    "            style, size, prefix, searchText,",
                    "            dataSource, filterProps, buttonProps,",
                    "            popupContent, hasClear, visible, rtl,",
                    "            ...others } = this.props;",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}search`]: true,",
                    "            [`${prefix}search-${shape}`]: true,",
                    "            [`${prefix}${type}`]: type,",
                    "            [`${prefix}${size}`]: size,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        let searchIcon = null, filterSelect = null, searchBtn = null;",
                    "",
                    "        if (shape === 'simple') {",
                    "            const cls = classNames({",
                    "                [`${prefix}search-icon`]: true,",
                    "                [buttonProps.className]: !!buttonProps.className",
                    "            });",
                    "            searchIcon = <Icon {...buttonProps} type=\"search\" tabIndex=\"0\" role=\"button\" className={cls} onClick={this.onSearch} onKeyDown={this.onKeyDown}/>;",
                    "        } else {",
                    "            const cls = classNames({",
                    "                [`${prefix}search-btn`]: true,",
                    "                [buttonProps.className]: !!buttonProps.className",
                    "            });",
                    "            searchBtn = (<Button  {...buttonProps} tabIndex=\"0\" className={cls} onClick={this.onSearch} onKeyDown={this.onKeyDown}>",
                    "                {hasIcon ? <Icon type=\"search\" /> : null}",
                    "                {searchText ? <span className={`${prefix}search-btn-text`}>{searchText}</span> : null}",
                    "            </Button>);",
                    "        }",
                    "",
                    "        if (filter.length > 0) {",
                    "            filterSelect = (",
                    "                <Select",
                    "                    {...filterProps}",
                    "                    hasBorder={false}",
                    "                    dataSource={filter}",
                    "                    size={size}",
                    "                    value={this.state.filterValue}",
                    "                    onChange={this.onFilterChange}",
                    "                />",
                    "            );",
                    "        }",
                    "",
                    "        const othersAttributes = obj.pickOthers(Search.propTypes, others);",
                    "        if (visible !== undefined) {",
                    "            // 受控属性 visible 不能直接写在组件上",
                    "            othersAttributes.visible = Boolean(visible);",
                    "        }",
                    "        const dataAttr = obj.pickAttrsWith(others, 'data-');",
                    "        const left = (<Group addonBefore={filterSelect}",
                    "            className={`${prefix}search-left`}",
                    "            addonBeforeClassName={`${prefix}search-left-addon`}>",
                    "            <AutoComplete",
                    "                {...othersAttributes}",
                    "                hasClear={hasClear}",
                    "                className={`${prefix}search-input`}",
                    "                size={size}",
                    "                placeholder={placeholder}",
                    "                dataSource={dataSource}",
                    "                innerAfter={searchIcon}",
                    "                onPressEnter={this.onSearch}",
                    "                value={this.state.value}",
                    "                onChange={this.onChange}",
                    "                popupContent={popupContent}",
                    "            />",
                    "        </Group>);",
                    "",
                    "        return (<span className={cls} style={style} {...dataAttr} dir={rtl ? 'rtl' : undefined}>",
                    "            {searchBtn ? <Group addonAfter={searchBtn}>{left}</Group> : left}",
                    "        </span>);",
                    "    }",
                    "}",
                    "",
                    "export default Search;"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Search from './Search';",
                    "",
                    "export default ConfigProvider.config(Search, {",
                    "    transfrom: (props, deprecated) => {",
                    "        const {onInputFocus, overlayVisible, combox, ...others} = this.props;",
                    "",
                    "        const newprops = others;",
                    "",
                    "        if (onInputFocus) {",
                    "            deprecated('onInputFocus', 'onFocus', 'Search');",
                    "            newprops.onFocus = onInputFocus;",
                    "        }",
                    "        if ('overlayVisible' in this.props) {",
                    "            deprecated('overlayVisible', 'visible', 'Search');",
                    "            newprops.visible = overlayVisible;",
                    "        }",
                    "        if (combox) {",
                    "            deprecated('combox', 'popupContent', 'Search');",
                    "            newprops.popupContent = combox;",
                    "        }",
                    "",
                    "        return newprops;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"../input/scss/mixin.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$search-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    width: 100%;",
                    "    display: inline-block;",
                    "",
                    "    .#{$css-prefix}input,",
                    "    .#{$css-prefix}select {",
                    "        border: none;",
                    "    }",
                    "",
                    "    #{$search-prefix}-left {",
                    "        border-style: solid;",
                    "        transition: all .3s ease-out;",
                    "    }",
                    "",
                    "    #{$search-prefix}-left-addon {",
                    "        .#{$css-prefix}input,",
                    "        .#{$css-prefix}select-trigger-search {",
                    "            min-height: 100%;",
                    "            border-bottom-right-radius: 0;",
                    "            border-top-right-radius: 0;",
                    "        }",
                    "",
                    "        .#{$css-prefix}select-values {",
                    "            line-height: 1;",
                    "        }",
                    "    }",
                    "",
                    "    #{$search-prefix}-left-addon + #{$search-prefix}-input .#{$css-prefix}input {",
                    "        border-bottom-left-radius: 0;",
                    "        border-top-left-radius: 0;",
                    "    }",
                    "",
                    "    #{$search-prefix}-input {",
                    "        width: 100%;",
                    "    }",
                    "",
                    "    #{$search-prefix}-btn {",
                    "        box-shadow: none;",
                    "    }",
                    "    &-normal {",
                    "        width: 600px;",
                    "",
                    "        #{$search-prefix}-left {",
                    "            // border-right: none; 该属性一旦添加 无法被 rtl.scss覆盖 故在后面用 :not选择器进行",
                    "",
                    "            border-top-left-radius: $search-normal-corner;",
                    "            border-bottom-left-radius: $search-normal-corner;",
                    "        }",
                    "",
                    "        .#{$css-prefix}input {",
                    "            border-radius: $search-normal-corner 0 0 $search-normal-corner;",
                    "        }",
                    "",
                    "        .#{$css-prefix}btn {",
                    "            border-radius: 0 $search-normal-corner $search-normal-corner 0;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}primary {",
                    "            @include search-type-color(",
                    "                $search-normal-primary-color,",
                    "                $search-normal-primary-hover-color,",
                    "                $search-normal-primary-color,",
                    "                $search-normal-primary-btn-text-color,",
                    "                $search-normal-primary-color,",
                    "                $search-normal-primary-btn-hover-bg-color,",
                    "                $search-normal-primary-btn-hover-text-color,",
                    "                $search-normal-primary-split-color",
                    "            );",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                @include search-type(",
                    "                    $search-normal-primary-l-height,",
                    "                    $search-normal-primary-l-btn-text-size,",
                    "                    $search-normal-primary-l-icon-size,",
                    "                    $search-normal-primary-border-width,",
                    "                    $search-normal-primary-btn-text-padding-left,",
                    "                    $search-normal-primary-shadow);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                @include search-type(",
                    "                    $search-normal-primary-m-height,",
                    "                    $search-normal-primary-m-btn-text-size,",
                    "                    $search-normal-primary-m-icon-size,",
                    "                    $search-normal-primary-border-width,",
                    "                    $search-normal-primary-btn-text-padding-left,",
                    "                    $search-normal-primary-shadow);",
                    "            }",
                    "",
                    "            .#{$css-prefix}input {",
                    "                border-top-left-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "                border-bottom-left-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}secondary {",
                    "            @include search-type-color(",
                    "                $search-normal-secondary-color,",
                    "                $search-normal-secondary-hover-color,",
                    "                $search-normal-secondary-btn-bg-color,",
                    "                $search-normal-secondary-btn-text-color,",
                    "                $search-normal-secondary-btn-bg-color,",
                    "                $search-normal-secondary-btn-hover-bg-color,",
                    "                $search-normal-secondary-btn-hover-text-color,",
                    "                $search-normal-secondary-split-color);",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                @include search-type(",
                    "                    $search-normal-secondary-l-height,",
                    "                    $search-normal-secondary-l-btn-text-size,",
                    "                    $search-normal-secondary-l-icon-size,",
                    "                    $search-normal-secondary-border-width,",
                    "                    $search-normal-secondary-btn-text-padding-left,",
                    "                    $search-normal-secondary-shadow);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                @include search-type(",
                    "                    $search-normal-secondary-m-height,",
                    "                    $search-normal-secondary-m-btn-text-size,",
                    "                    $search-normal-secondary-m-icon-size,",
                    "                    $search-normal-secondary-border-width,",
                    "                    $search-normal-secondary-btn-text-padding-left,",
                    "                    $search-normal-secondary-shadow);",
                    "            }",
                    "",
                    "            .#{$css-prefix}input {",
                    "                border-top-left-radius: $search-normal-corner - $search-normal-secondary-border-width;",
                    "                border-bottom-left-radius: $search-normal-corner - $search-normal-secondary-border-width;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}normal {",
                    "            @include search-type-color(",
                    "                $search-normal-normal-color,",
                    "                $search-normal-normal-hover-color,",
                    "                $search-normal-normal-btn-bg-color,",
                    "                $search-normal-normal-btn-text-color,",
                    "                $search-normal-normal-color,",
                    "                $search-normal-normal-btn-hover-bg-color,",
                    "                $search-normal-normal-btn-hover-text-color,",
                    "                $search-normal-normal-split-color);",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                @include search-type(",
                    "                    $search-normal-normal-l-height,",
                    "                    $search-normal-normal-l-btn-text-size,",
                    "                    $search-normal-normal-l-icon-size,",
                    "                    $search-normal-normal-border-width,",
                    "                    $search-normal-normal-btn-text-padding-left,",
                    "                    $search-normal-normal-shadow);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                @include search-type(",
                    "                    $search-normal-normal-m-height,",
                    "                    $search-normal-normal-m-btn-text-size,",
                    "                    $search-normal-normal-m-icon-size,",
                    "                    $search-normal-normal-border-width,",
                    "                    $search-normal-normal-btn-text-padding-left,",
                    "                    $search-normal-normal-shadow);",
                    "            }",
                    "",
                    "            .#{$css-prefix}input {",
                    "                border-top-left-radius: $search-normal-corner - $search-normal-normal-border-width;",
                    "                border-bottom-left-radius: $search-normal-corner - $search-normal-normal-border-width;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}dark {",
                    "            @include search-type-color(",
                    "                $search-normal-dark-color,",
                    "                $search-normal-dark-hover-color,",
                    "                $search-normal-dark-color,",
                    "                $search-normal-dark-btn-text-color,",
                    "                $search-normal-dark-color,",
                    "                $search-normal-dark-btn-hover-bg-color,",
                    "                $search-normal-dark-btn-hover-text-color,",
                    "                $search-normal-dark-color);",
                    "",
                    "            .#{$css-prefix}select-inner,",
                    "            input {",
                    "                color: $search-normal-dark-text-color;",
                    "            }",
                    "",
                    "            .#{$css-prefix}input {",
                    "                background: transparentize($search-normal-dark-bg-color, 1 - $search-normal-dark-bg-opacity);",
                    "            }",
                    "            .#{$css-prefix}select {",
                    "                background: transparentize($search-normal-dark-bg-color, 1 - $search-normal-dark-bg-opacity);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                @include search-type(",
                    "                    $search-normal-dark-l-height,",
                    "                    $search-normal-dark-l-btn-text-size,",
                    "                    $search-normal-dark-l-icon-size,",
                    "                    $search-normal-dark-border-width,",
                    "                    $search-normal-dark-btn-text-padding-left,",
                    "                    $search-normal-dark-shadow);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                @include search-type(",
                    "                    $search-normal-dark-m-height,",
                    "                    $search-normal-dark-m-btn-text-size,",
                    "                    $search-normal-dark-m-icon-size,",
                    "                    $search-normal-dark-border-width,",
                    "                    $search-normal-dark-btn-text-padding-left,",
                    "                    $search-normal-dark-shadow);",
                    "            }",
                    "        }",
                    "    }",
                    "    &-normal:not([dir=rtl]) {",
                    "        #{$search-prefix}-left {",
                    "            border-right: none;",
                    "        }",
                    "    }",
                    "    &-simple {",
                    "        width: 300px;",
                    "        box-shadow: $search-simple-normal-shadow;",
                    "        #{$search-prefix}-icon {",
                    "            cursor: pointer;",
                    "            transition: all .3s ease-out;",
                    "        }",
                    "",
                    "        #{$search-prefix}-left,.#{$css-prefix}input {",
                    "            border-radius: $search-simple-corner;",
                    "        }",
                    "        border-radius: $search-simple-corner;",
                    "",
                    "        &.#{$css-prefix}large {",
                    "            #{$search-prefix}-icon {",
                    "                margin-right: $search-simple-l-icon-margin-right;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}medium {",
                    "            #{$search-prefix}-icon {",
                    "                margin-right: $search-simple-m-icon-margin-right;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}normal {",
                    "            @include search-simple-color(",
                    "                $search-simple-normal-color,",
                    "                $search-simple-normal-hover-color,",
                    "                $search-simple-normal-icon-text-color,",
                    "                $search-simple-normal-icon-hover-text-color,",
                    "                $search-simple-normal-split-color);",
                    "",
                    "            #{$search-prefix}-left {",
                    "                border-width: $search-simple-normal-border-width;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                @include search-simple-type($search-simple-normal-l-icon-size);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                @include search-simple-type($search-simple-normal-m-icon-size);",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}dark {",
                    "            @include search-simple-color( $search-simple-dark-color, $search-simple-dark-hover-color, $search-simple-dark-icon-text-color, $search-simple-dark-icon-hover-text-color, $search-simple-dark-split-color );",
                    "",
                    "            .#{$css-prefix}select-inner,",
                    "            input {",
                    "                color: $search-simple-dark-text-color;",
                    "            }",
                    "            .#{$css-prefix}input {",
                    "                background: transparentize($search-simple-dark-bg-color, 1 - $search-simple-dark-bg-opacity);",
                    "            }",
                    "            .#{$css-prefix}select {",
                    "                background: transparentize($search-simple-dark-bg-color, 1 - $search-simple-dark-bg-opacity);",
                    "            }",
                    "",
                    "            #{$search-prefix}-left {",
                    "                border-width: $search-simple-dark-border-width;",
                    "            }",
                    "",
                    "            &.#{$css-prefix}large {",
                    "                @include search-simple-type($search-simple-dark-l-icon-size);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}medium {",
                    "                @include search-simple-type($search-simple-dark-m-icon-size);",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    ""
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "#{$search-prefix} {",
                    "    &-simple[dir=rtl] {",
                    "        &.#{$css-prefix}large {",
                    "            #{$search-prefix}-icon {",
                    "                margin-left: $search-simple-l-icon-margin-right;",
                    "                margin-right: 0;",
                    "            }",
                    "        }",
                    "        &.#{$css-prefix}medium {",
                    "            #{$search-prefix}-icon {",
                    "                margin-left: $search-simple-m-icon-margin-right;",
                    "                margin-right: 0;",
                    "            }",
                    "        }",
                    "        &.#{$css-prefix}normal {",
                    "            @include search-simple-color-rtl(",
                    "                $search-simple-normal-color,",
                    "                $search-simple-normal-hover-color,",
                    "                $search-simple-normal-icon-text-color,",
                    "                $search-simple-normal-icon-hover-text-color,",
                    "                $search-simple-normal-split-color);",
                    "        }",
                    "        &.#{$css-prefix}dark {",
                    "            @include search-simple-color(",
                    "                $search-simple-dark-color,",
                    "                $search-simple-dark-hover-color,",
                    "                $search-simple-dark-icon-text-color,",
                    "                $search-simple-dark-icon-hover-text-color,",
                    "                $search-simple-dark-split-color);",
                    "        }",
                    "    }",
                    "    &-normal[dir=rtl] {",
                    "        #{$search-prefix}-left {",
                    "            border-left: none;",
                    "            border-top-right-radius: $search-normal-corner;",
                    "            border-bottom-right-radius: $search-normal-corner;",
                    "            border-top-left-radius: 0;",
                    "            border-bottom-left-radius: 0;",
                    "        }",
                    "        #{$search-prefix}-btn.#{$css-prefix}btn {",
                    "            border-radius: $search-normal-corner 0 0 $search-normal-corner !important;",
                    "        }",
                    "        .#{$css-prefix}input {",
                    "            border-radius: 0 $search-normal-corner $search-normal-corner 0;",
                    "        }",
                    "        &.#{$css-prefix}primary {",
                    "            .#{$css-prefix}input {",
                    "                border-top-left-radius: 0;",
                    "                border-bottom-left-radius: 0;",
                    "                border-top-right-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "                border-bottom-right-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "            }",
                    "            @include search-type-color-rtl(",
                    "                $search-normal-primary-color,",
                    "                $search-normal-primary-hover-color,",
                    "                $search-normal-primary-color,",
                    "                $search-normal-primary-btn-text-color,",
                    "                $search-normal-primary-color,",
                    "                $search-normal-primary-btn-hover-bg-color,",
                    "                $search-normal-primary-btn-hover-text-color,",
                    "                $search-normal-primary-split-color);",
                    "        }",
                    "        &.#{$css-prefix}secondary {",
                    "            .#{$css-prefix}input {",
                    "                border-top-left-radius: 0;",
                    "                border-bottom-left-radius: 0;",
                    "                border-top-right-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "                border-bottom-right-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "            }",
                    "            @include search-type-color-rtl(",
                    "                $search-normal-secondary-color,",
                    "                $search-normal-secondary-hover-color,",
                    "                $search-normal-secondary-btn-bg-color,",
                    "                $search-normal-secondary-btn-text-color,",
                    "                $search-normal-secondary-btn-bg-color,",
                    "                $search-normal-secondary-btn-hover-bg-color,",
                    "                $search-normal-secondary-btn-hover-text-color,",
                    "                $search-normal-secondary-split-color);",
                    "        }",
                    "        &.#{$css-prefix}normal {",
                    "            .#{$css-prefix}input {",
                    "                border-top-left-radius: 0;",
                    "                border-bottom-left-radius: 0;",
                    "                border-top-right-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "                border-bottom-right-radius: $search-normal-corner - $search-normal-primary-border-width;",
                    "            }",
                    "            @include search-type-color-rtl(",
                    "                $search-normal-normal-color,",
                    "                $search-normal-normal-hover-color,",
                    "                $search-normal-normal-btn-bg-color,",
                    "                $search-normal-normal-btn-text-color,",
                    "                $search-normal-normal-color,",
                    "                $search-normal-normal-btn-hover-bg-color,",
                    "                $search-normal-normal-btn-hover-text-color,",
                    "                $search-normal-normal-split-color);",
                    "        }",
                    "        &.#{$css-prefix}dark {",
                    "            @include search-type-color-rtl(",
                    "                $search-normal-dark-color,",
                    "                $search-normal-dark-hover-color,",
                    "                $search-normal-dark-color,",
                    "                $search-normal-dark-btn-text-color,",
                    "                $search-normal-dark-color,",
                    "                $search-normal-dark-btn-hover-bg-color,",
                    "                $search-normal-dark-btn-hover-text-color,",
                    "                $search-normal-dark-color);",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../input/style.js';",
                    "import '../select/style.js';",
                    "import '../button/style.js';",
                    "import '../icon/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// search mixins",
                        "// --------------------------------------------------",
                        "@mixin search-type($height, $btn-font-size, $icon-size, $border-width, $btn-text-padding-left, $box-shadow) {",
                        "    box-shadow: $box-shadow;",
                        "",
                        "    #{$search-prefix}-left, #{$search-prefix}-btn {",
                        "        border-width: $border-width;",
                        "        height: $height;",
                        "    }",
                        "",
                        "    #{$search-prefix}-input {",
                        "        @include input-height($height - $border-width*2, 0);",
                        "        overflow-y: hidden;",
                        "    }",
                        "",
                        "    .#{$css-prefix}select {",
                        "        height: $height - $border-width*2;",
                        "    }",
                        "",
                        "    #{$search-prefix}-btn {",
                        "        font-size: $btn-font-size;",
                        "        .#{$css-prefix}icon {",
                        "            @include icon-size($icon-size);",
                        "        }",
                        "        #{$search-prefix}-btn-text {",
                        "            display: inline-block;",
                        "            padding-left: $btn-text-padding-left;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin search-type-color(",
                        "    $primary-color,",
                        "    $hover-color,",
                        "    $btn-bg-color,",
                        "    $btn-text-color,",
                        "    $btn-border-color,",
                        "    $btn-hover-bg-color,",
                        "    $btn-hover-text-color,",
                        "    $split-color",
                        ") {",
                        "    #{$search-prefix}-left {",
                        "        border-color: $primary-color;",
                        "        #{$search-prefix}-left-addon {",
                        "            border-right: 1px solid $split-color;",
                        "        }",
                        "    }",
                        "",
                        "    &:hover {",
                        "        #{$search-prefix}-left,",
                        "        .#{$css-prefix}btn {",
                        "            border-color: $hover-color;",
                        "        }",
                        "    }",
                        "",
                        "    #{$search-prefix}-btn {",
                        "        background: $btn-bg-color;",
                        "        border-color: $btn-border-color;",
                        "",
                        "        color: $btn-text-color;",
                        "        &:hover {",
                        "            background: $btn-hover-bg-color;",
                        "            border-color: $hover-color;",
                        "            color: $btn-hover-text-color;",
                        "        }",
                        "",
                        "        .#{$css-prefix}icon {",
                        "            color: $btn-text-color;",
                        "            &:hover {",
                        "                color: $btn-hover-text-color;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin search-type-color-rtl(",
                        "    $primary-color,",
                        "    $hover-color,",
                        "    $btn-bg-color,",
                        "    $btn-text-color,",
                        "    $btn-border-color,",
                        "    $btn-hover-bg-color,",
                        "    $btn-hover-text-color,",
                        "    $split-color",
                        ") {",
                        "    #{$search-prefix}-left {",
                        "        #{$search-prefix}-left-addon {",
                        "            border-left: 1px solid $split-color;",
                        "            border-right: none;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin search-simple-type($icon-size) {",
                        "    #{$search-prefix}-icon {",
                        "        @include icon-size($icon-size);",
                        "    }",
                        "}",
                        "",
                        "@mixin search-simple-color(",
                        "    $primary-color,",
                        "    $hover-color,",
                        "    $btn-text-color,",
                        "    $btn-hover-text-color,",
                        "    $split-color",
                        ") {",
                        "    #{$search-prefix}-left {",
                        "        border-color: $primary-color;",
                        "        #{$search-prefix}-left-addon {",
                        "            border-right: 1px solid $split-color;",
                        "        }",
                        "    }",
                        "",
                        "    &:hover #{$search-prefix}-left {",
                        "        border-color: $hover-color;",
                        "    }",
                        "",
                        "    #{$search-prefix}-icon {",
                        "        color: $btn-text-color;",
                        "        &:hover {",
                        "            color: $btn-hover-text-color;",
                        "        }",
                        "    }",
                        "}",
                        "@mixin search-simple-color-rtl(",
                        "    $primary-color,",
                        "    $hover-color,",
                        "    $btn-text-color,",
                        "    $btn-hover-text-color,",
                        "    $split-color",
                        ") {",
                        "    #{$search-prefix}-left {",
                        "        #{$search-prefix}-left-addon {",
                        "            border-left: 1px solid $split-color;",
                        "            border-right: none;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module search: 搜索框",
                        "/// @tag Search",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $search-",
                        "/// @classPrefix {prefix}-search",
                        "/// @order {\"size/bounding\":10,\"size/btn\":11,\"size/margin\":12,\"size/simple\":13,\"statement/normal\":10,\"statement/normal/btn\":100,\"statement/btn\":11,\"statement/hover\":12,\"statement/hover/btn\":120,\"statement/simple\":13,\"statement/icon\":14}",
                        "////",
                        "",
                        "$search-prefix: '.#{$css-prefix}search';",
                        "",
                        "// Normal",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$search-normal-corner: $corner-1 !default;",
                        "",
                        "// Primary",
                        "// ----------------------------------------",
                        "/// color",
                        "/// @namespace statement/normal",
                        "$search-normal-primary-color: $color-brand1-6 !default;",
                        "/// hover",
                        "/// @namespace statement/normal",
                        "$search-normal-primary-hover-color: $color-brand1-6 !default;",
                        "/// split",
                        "/// @namespace statement/normal",
                        "$search-normal-primary-split-color: $color-line1-1 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$search-normal-primary-shadow: $shadow-zero !default;",
                        "/// text",
                        "/// @namespace statement/btn",
                        "$search-normal-primary-btn-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$search-normal-primary-btn-hover-bg-color: $color-brand1-9 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$search-normal-primary-btn-hover-text-color: $color-white !default;",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$search-normal-primary-border-width: $line-2 !default;",
                        "/// icon-margin(r)",
                        "/// @namespace size/btn",
                        "$search-normal-primary-btn-text-padding-left: $s-zero !default;",
                        "",
                        "",
                        "// Primary Large",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-primary-l-height: $s-15 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-primary-l-icon-size: $icon-l !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-primary-l-btn-text-size: $font-size-subhead !default;",
                        "// Primary Medium",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-primary-m-height: $s-10 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-primary-m-icon-size: $icon-s !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-primary-m-btn-text-size: $font-size-subhead !default;",
                        "// Secondary",
                        "// ----------------------------------------",
                        "/// color",
                        "/// @namespace statement/normal",
                        "$search-normal-secondary-color: $color-line1-3 !default;",
                        "/// split",
                        "/// @namespace statement/normal",
                        "$search-normal-secondary-split-color: $color-line1-1 !default;",
                        "/// hover",
                        "/// @namespace statement/normal",
                        "$search-normal-secondary-hover-color: $color-brand1-6 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$search-normal-secondary-shadow: $shadow-zero !default;",
                        "/// background",
                        "/// @namespace statement/btn",
                        "$search-normal-secondary-btn-bg-color: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/btn",
                        "$search-normal-secondary-btn-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$search-normal-secondary-btn-hover-bg-color: $color-brand1-9 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$search-normal-secondary-btn-hover-text-color: $color-white !default;",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$search-normal-secondary-border-width: $line-1 !default;",
                        "/// icon-margin(r)",
                        "/// @namespace size/btn",
                        "$search-normal-secondary-btn-text-padding-left: $s-zero !default;",
                        "// Secondary Large",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-secondary-l-height: $s-15 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-secondary-l-icon-size: $icon-l !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-secondary-l-btn-text-size: $font-size-subhead !default;",
                        "// Secondary Medium",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-secondary-m-height: $s-10 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-secondary-m-icon-size: $icon-s !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-secondary-m-btn-text-size: $font-size-subhead !default;",
                        "",
                        "// Normal",
                        "// ----------------------------------------",
                        "/// color",
                        "/// @namespace statement/normal",
                        "$search-normal-normal-color: $color-line1-3 !default;",
                        "/// split",
                        "/// @namespace statement/normal",
                        "$search-normal-normal-split-color: $color-line1-1 !default;",
                        "/// hover",
                        "/// @namespace statement/normal",
                        "$search-normal-normal-hover-color: $color-line1-4 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$search-normal-normal-shadow: $shadow-zero !default;",
                        "/// background",
                        "/// @namespace statement/normal/btn",
                        "$search-normal-normal-btn-bg-color: $color-fill1-1 !default;",
                        "/// text",
                        "/// @namespace statement/normal/btn",
                        "$search-normal-normal-btn-text-color: $color-text1-3 !default;",
                        "/// background",
                        "/// @namespace statement/hover/btn",
                        "$search-normal-normal-btn-hover-bg-color: $color-fill1-3 !default;",
                        "/// text",
                        "/// @namespace statement/hover/btn",
                        "$search-normal-normal-btn-hover-text-color: $color-text1-4 !default;",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$search-normal-normal-border-width: $line-1 !default;",
                        "/// icon-margin(r)",
                        "/// @namespace size/btn",
                        "$search-normal-normal-btn-text-padding-left: $s-zero !default;",
                        "",
                        "// Normal Large",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-normal-l-height: $s-15 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-normal-l-icon-size: $icon-l !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-normal-l-btn-text-size: $font-size-subhead !default;",
                        "// Normal Medium",
                        "// ----------------------------------------",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-normal-m-height: $s-10 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-normal-m-icon-size: $icon-s !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-normal-m-btn-text-size: $font-size-subhead !default;",
                        "",
                        "// Dark",
                        "// ----------------------------------------",
                        "/// color",
                        "/// @namespace statement/normal",
                        "$search-normal-dark-color: $color-brand1-6 !default;",
                        "/// hover",
                        "/// @namespace statement/normal",
                        "$search-normal-dark-hover-color: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$search-normal-dark-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$search-normal-dark-bg-color: $color-white !default;",
                        "/// background-opacity",
                        "/// @namespace statement/normal",
                        "/// @type alpha",
                        "$search-normal-dark-bg-opacity: 0 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$search-normal-dark-shadow: $shadow-zero !default;",
                        "/// text",
                        "/// @namespace statement/btn",
                        "$search-normal-dark-btn-text-color: $color-white !default;",
                        "/// background",
                        "/// @namespace statement/hover",
                        "$search-normal-dark-btn-hover-bg-color: $color-brand1-9 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$search-normal-dark-btn-hover-text-color: $color-white !default;",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$search-normal-dark-border-width: $line-1 !default;",
                        "/// icon-margin(r)",
                        "/// @namespace size/btn",
                        "$search-normal-dark-btn-text-padding-left: $s-zero !default;",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-dark-l-height: $s-15 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-dark-l-icon-size: $icon-l !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-dark-l-btn-text-size: $font-size-subhead !default;",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$search-normal-dark-m-height: $s-10 !default;",
                        "/// icon",
                        "/// @namespace size/bounding",
                        "$search-normal-dark-m-icon-size: $icon-s !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-dark-m-btn-text-size: $font-size-subhead !default;",
                        "/// text",
                        "/// @namespace size/btn",
                        "$search-normal-dark-m-btn-text-size: $font-size-subhead !default;",
                        "",
                        "// Simple",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$search-simple-corner: $corner-1 !default;",
                        "/// right",
                        "/// @namespace size/margin",
                        "$search-simple-l-icon-margin-right: $s-3 !default;",
                        "/// right",
                        "/// @namespace size/margin",
                        "$search-simple-m-icon-margin-right: $s-2 !default;",
                        "",
                        "// Normal",
                        "// ----------------------------------------",
                        "/// color",
                        "/// @namespace statement/normal",
                        "$search-simple-normal-color: $color-line1-3 !default;",
                        "/// hover",
                        "/// @namespace statement/simple",
                        "$search-simple-normal-hover-color: $color-line1-4 !default;",
                        "/// split",
                        "/// @namespace statement/normal",
                        "$search-simple-normal-split-color: $color-line1-3 !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$search-simple-normal-shadow: $shadow-zero !default;",
                        "/// text",
                        "/// @namespace statement/icon",
                        "$search-simple-normal-icon-text-color: $color-text1-2 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$search-simple-normal-icon-hover-text-color: $color-text1-3 !default;",
                        "/// border",
                        "/// @namespace size/simple",
                        "$search-simple-normal-border-width: $line-1 !default;",
                        "/// icon",
                        "/// @namespace size/simple",
                        "$search-simple-normal-l-icon-size: $icon-m !default;",
                        "/// icon",
                        "/// @namespace size/simple",
                        "$search-simple-normal-m-icon-size: $icon-xs !default;",
                        "/// icon-margin(r)",
                        "/// @namespace size/btn",
                        "$search-simple-normal-btn-text-padding-left: $s-zero !default;",
                        "",
                        "// Dark",
                        "// ----------------------------------------",
                        "/// color",
                        "/// @namespace statement/normal",
                        "$search-simple-dark-color: $color-line1-3 !default;",
                        "/// hover",
                        "/// @namespace statement/normal",
                        "$search-simple-dark-hover-color: $color-line1-3 !default;",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$search-simple-dark-bg-color: $color-white !default;",
                        "/// background-opacity",
                        "/// @namespace statement/normal",
                        "/// @type alpha",
                        "$search-simple-dark-bg-opacity: 0 !default;",
                        "/// text",
                        "/// @namespace statement/normal",
                        "$search-simple-dark-text-color: $color-white !default;",
                        "/// shadow",
                        "/// @namespace statement/normal",
                        "$search-simple-dark-shadow: $shadow-zero !default;",
                        "/// text",
                        "/// @namespace statement/icon",
                        "$search-simple-dark-icon-text-color: $color-text1-2 !default;",
                        "/// text",
                        "/// @namespace statement/hover",
                        "$search-simple-dark-icon-hover-text-color: $color-text1-3 !default;",
                        "/// icon-margin(r)",
                        "/// @namespace size/btn",
                        "$search-simple-dark-btn-text-padding-left: $s-zero !default;",
                        "",
                        "/// split",
                        "/// @namespace statement/normal",
                        "$search-simple-dark-split-color: $color-line1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace size/simple",
                        "$search-simple-dark-border-width: $line-1 !default;",
                        "/// icon",
                        "/// @namespace size/simple",
                        "$search-simple-dark-l-icon-size: $icon-m !default;",
                        "/// icon",
                        "/// @namespace size/simple",
                        "$search-simple-dark-m-icon-size: $icon-xs !default;"
                    ]
                }
            }
        },
        "select": {
            "auto-complete.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import ReactDOM from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import { func, obj, KEYCODE } from '../util';",
                    "import Input from '../input';",
                    "import Base from './base';",
                    "",
                    "const { bindCtx, noop } = func;",
                    "",
                    "/**",
                    " * Select.AutoComplete",
                    " */",
                    "class AutoComplete extends Base {",
                    "    static propTypes = {",
                    "        ...Base.propTypes,",
                    "        /**",
                    "         * 当前值，用于受控模式",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * 初始化的默认值",
                    "         */",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                    "        /**",
                    "         * Select发生改变时触发的回调",
                    "         * @param {*} value 选中的值",
                    "         * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'change'",
                    "         * @param {*} item 选中的值的对象数据",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 传入的数据源，可以动态渲染子项",
                    "         */",
                    "        dataSource: PropTypes.arrayOf(PropTypes.oneOfType([",
                    "            PropTypes.shape({",
                    "                value: PropTypes.string,",
                    "                label: PropTypes.any,",
                    "                disabled: PropTypes.bool,",
                    "                children: PropTypes.array",
                    "            }),",
                    "            PropTypes.string",
                    "        ])),",
                    "        /**",
                    "         * 填充到选择框里的值的 key\b\b，默认是 value",
                    "         */",
                    "        fillProps: PropTypes.string,",
                    "        /**",
                    "         * 渲染 MenuItem 内容的方法",
                    "         * @param {Object} item 渲染节点的 item",
                    "         * @return {ReactNode} item node",
                    "         */",
                    "        itemRender: PropTypes.func,",
                    "        // input keydown",
                    "        onKeyDown: PropTypes.func,",
                    "        // 是否将当前高亮的选项作为 placeholder",
                    "        highlightHolder: PropTypes.bool,",
                    "        style: PropTypes.object,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        ...Base.defaultProps,",
                    "        onKeyDown: noop,",
                    "        fillProps: 'value',",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.isAutoComplete = true;",
                    "        this.isInputing = false;",
                    "",
                    "        bindCtx(this, [",
                    "            'handleTriggerKeyDown',",
                    "            'handleMenuSelect',",
                    "            'handleItemClick'",
                    "        ]);",
                    "    }",
                    "",
                    "    componentWillMount() {",
                    "        this.dataStore.setOptions({ key: this.state.value });",
                    "",
                    "        super.componentWillMount();",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            this.dataStore.setOptions({ key: nextProps.value });",
                    "        }",
                    "",
                    "        super.componentWillReceiveProps(nextProps);",
                    "",
                    "        // remote dataSource and focused",
                    "        // 因为autoComplete没有下拉数据不展示，搜索并且有数据了需要自动展示下拉",
                    "        if (!nextProps.filterLocal && this.isInputing) {",
                    "            this.shouldControlPopup(nextProps, 'update');",
                    "        }",
                    "",
                    "        if (!nextProps.filterLocal && !nextProps.popupContent) {",
                    "            this.setFirstHightLightKeyForMenu();",
                    "        }",
                    "    }",
                    "",
                    "    componentWillUpdate() {",
                    "        if (this.hasClear()) {",
                    "            const inputNode = ReactDOM.findDOMNode(this.inputRef);",
                    "            if (inputNode) {",
                    "                this.clearNode = inputNode.querySelector(`.${this.props.prefix}input-control`);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    shouldControlPopup(props = this.props, type) {",
                    "        const hasPopup = props.popupContent || this.dataStore.getMenuDS().length;",
                    "        if (hasPopup) {",
                    "            this.setVisible(true, type);",
                    "        } else {",
                    "            this.setVisible(false, type);",
                    "        }",
                    "    }",
                    "",
                    "",
                    "    handleMenuSelect(keys) {",
                    "        const key = keys[0];",
                    "        if (this.state.value === keys[0]) {",
                    "            return this.setVisible(false, 'itemClick');",
                    "        }",
                    "",
                    "        const mapDS = this.dataStore.getMapDS();",
                    "",
                    "        if (key in mapDS) {",
                    "            const item = mapDS[key];",
                    "            this.handleSelectEvent(key, item, 'itemClick');",
                    "        }",
                    "    }",
                    "",
                    "    handleItemClick() {",
                    "        this.setVisible(false, 'itemClick');",
                    "    }",
                    "",
                    "    handleSelectEvent(key, item, triggerType) {",
                    "        const value = item && item[this.props.fillProps] || key;",
                    "",
                    "        if (triggerType === 'itemClick' || triggerType === 'enter') {",
                    "            // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理",
                    "            this.setVisible(false, triggerType);",
                    "        }",
                    "",
                    "        this.handleChange(value, triggerType, item);",
                    "    }",
                    "",
                    "    handleChange = (value, proxy, item) => {",
                    "        const { disabled, readOnly, filterLocal } = this.props;",
                    "",
                    "        if (disabled || readOnly) {",
                    "            return false;",
                    "        }",
                    "",
                    "        const actionType = typeof proxy === 'string' ? proxy : 'change';",
                    "",
                    "        this.isInputing = actionType === 'change';",
                    "",
                    "        if (filterLocal) {",
                    "            this.setState({",
                    "                dataSource: this.dataStore.updateByKey(value)",
                    "            });",
                    "",
                    "            this.shouldControlPopup(this.props, actionType);",
                    "            this.setFirstHightLightKeyForMenu();",
                    "        }",
                    "",
                    "        // 非受控模式清空内部数据",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value: value",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onChange(value, actionType, item);",
                    "",
                    "        if (actionType === 'itemClick' || actionType === 'enter') {",
                    "            // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理",
                    "            this.setVisible(false, actionType);",
                    "        }",
                    "    }",
                    "",
                    "    handleVisibleChange(visible, type) {",
                    "        if (!('visible' in this.props) && visible && !this.props.popupContent && !this.dataStore.getMenuDS().length) {",
                    "            return;",
                    "        }",
                    "",
                    "        this.setVisible(visible, type);",
                    "    }",
                    "",
                    "    beforeClose() {",
                    "        this.isInputing = false;",
                    "    }",
                    "",
                    "    /**",
                    "     * Handle trigger keydown event",
                    "     * @param {Event} e",
                    "     */",
                    "    handleTriggerKeyDown(e) {",
                    "",
                    "        const { popupContent, onToggleHighlightItem, onKeyDown } = this.props;",
                    "        if (popupContent) {",
                    "            return onKeyDown(e);",
                    "        }",
                    "",
                    "        switch (e.keyCode) {",
                    "            case KEYCODE.UP:",
                    "                e.preventDefault();",
                    "                onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');",
                    "                break;",
                    "            case KEYCODE.DOWN:",
                    "                e.preventDefault();",
                    "                onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');",
                    "                break;",
                    "            case KEYCODE.ENTER:",
                    "                e.preventDefault();",
                    "                this.chooseHighlightItem(e);",
                    "                break;",
                    "            case KEYCODE.SPACE:",
                    "                // 防止 Popup 监听到 space key 触发 onVisibleChange",
                    "                e.stopPropagation();",
                    "                break;",
                    "            case KEYCODE.ESC:",
                    "                e.preventDefault();",
                    "                this.state.visible && this.setVisible(false, 'esc');",
                    "                break;",
                    "            default:",
                    "                break;",
                    "        }",
                    "",
                    "        onKeyDown(e);",
                    "    }",
                    "",
                    "    // 回车 选择高亮的 item",
                    "    chooseHighlightItem() {",
                    "        if (!this.state.visible) {",
                    "            return false;",
                    "        }",
                    "",
                    "        const { highlightKey } = this.state;",
                    "        const highlightItem = this.dataStore.getEnableDS().find(item => {",
                    "            return highlightKey === `${item.value}`;",
                    "        });",
                    "",
                    "        if (highlightItem) {",
                    "            this.handleSelectEvent(highlightKey, highlightItem, 'enter');",
                    "        }",
                    "    }",
                    "",
                    "    hasClear() {",
                    "        const { hasClear, readOnly, disabled } = this.props;",
                    "        const { value } = this.state;",
                    "",
                    "        return value && hasClear && !readOnly && !disabled;",
                    "    }",
                    "",
                    "",
                    "    /**",
                    "     * 选择器",
                    "     * @override",
                    "     * @param {object} props",
                    "     */",
                    "    renderSelect(props = this.props) {",
                    "        const { placeholder, size, prefix, className, style, label, readOnly, disabled, highlightHolder, locale, hasClear, state, rtl } = props;",
                    "        const others = obj.pickOthers(AutoComplete.propTypes, props);",
                    "        const othersData = obj.pickAttrsWith(others, 'data-');",
                    "",
                    "        const value = this.state.value;",
                    "        const visible = this.state.visible;",
                    "",
                    "        // // 下拉箭头",
                    "        // const arrowNode = this.renderArrowNode(props, () => {",
                    "        //     this.focusInput();",
                    "        //     this.setVisible(!this.state.visible);",
                    "        // });",
                    "",
                    "        // trigger className",
                    "        const triggerClazz = classNames([",
                    "            `${prefix}select`,",
                    "            `${prefix}select-auto-complete`,",
                    "            `${prefix}size-${size}`,",
                    "            className,",
                    "        ], {",
                    "            [`${prefix}active`]: visible,",
                    "            [`${prefix}disabled`]: disabled",
                    "        });",
                    "",
                    "        // highlightKey into placeholder",
                    "        // compatible with selectPlaceHolder. TODO: removed in 2.0 version",
                    "        let _placeholder = placeholder || locale.autoCompletePlaceholder || locale.autoCompletePlaceHolder;",
                    "        if (highlightHolder && visible) {",
                    "            _placeholder = this.state.highlightKey || _placeholder;",
                    "        }",
                    "",
                    "        // Input props",
                    "        const _inputProps = {",
                    "            ...obj.pickOthers(othersData, others),",
                    "            state: state,",
                    "            ref: this.saveInputRef,",
                    "            hasClear: hasClear,",
                    "            value: value || '',",
                    "            size,",
                    "            disabled,",
                    "            readOnly,",
                    "            placeholder: _placeholder,",
                    "            label,",
                    "            // extra: arrowNode,",
                    "            onChange: this.handleChange,",
                    "            onKeyDown: this.handleTriggerKeyDown",
                    "        };",
                    "",
                    "        return (",
                    "            <span {...othersData}",
                    "                className={triggerClazz}",
                    "                style={style}",
                    "                dir={rtl ? 'rtl' : undefined}",
                    "                ref={this.saveSelectRef}",
                    "                onClick={this.focusInput}>",
                    "                <Input",
                    "                    {..._inputProps}",
                    "                    role=\"combobox\"",
                    "                    aria-autocomplete=\"list\"",
                    "                    aria-disabled={disabled}",
                    "                    aria-expanded={this.state.visible} />",
                    "            </span>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        if (this.hasClear()) {",
                    "            // clear 按钮点击后，会在 dom 结构中被删除掉，需要将其额外设置为安全节点，防止触发弹层的显示或隐藏",
                    "            const safeNode = this.props.popupProps.safeNode || [];",
                    "            const safeNodes = Array.isArray(safeNode) ? safeNode : [safeNode];",
                    "            safeNodes.push(() => this.clearNode);",
                    "            this.props.popupProps.safeNode = safeNodes;",
                    "        }",
                    "",
                    "        return super.render(Object.assign({}, this.props, { canCloseByTrigger: false }));",
                    "    }",
                    "}",
                    "",
                    "export default AutoComplete;"
                ]
            },
            "base.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Children } from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import { func, dom, events } from '../util';",
                    "import Menu from '../menu';",
                    "import Overlay from '../overlay';",
                    "import zhCN from '../locale/zh-cn';",
                    "import DataStore from './data-store';",
                    "import VirtualList from '../virtual-list';",
                    "import { isSingle, filter, isNull, valueToSelectKey } from './util';",
                    "",
                    "const { Popup } = Overlay;",
                    "const { Item: MenuItem, Group: MenuGroup } = Menu;",
                    "const { noop, bindCtx, makeChain } = func;",
                    "",
                    "function preventDefault(e) {",
                    "    e.preventDefault();",
                    "}",
                    "",
                    "export default class Base extends React.Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 选择器尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        // 当前值，用于受控模式",
                    "        value: PropTypes.any, // to be override",
                    "        // 初始化的默认值",
                    "        defaultValue: PropTypes.any, // to be override",
                    "        /**",
                    "         * 没有值的时候的占位符",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 下拉菜单是否与选择器对齐",
                    "         */",
                    "        autoWidth: PropTypes.bool,",
                    "        /**",
                    "         * 自定义内联 label",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 是否有清除按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 校验状态",
                    "         */",
                    "        state: PropTypes.oneOf(['error', 'loading']),",
                    "        /**",
                    "         * 是否只读，只读模式下可以展开弹层但不能选",
                    "         */",
                    "        readOnly: PropTypes.bool,",
                    "        /**",
                    "         * 是否禁用选择器",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 当前弹层是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层初始化是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示或隐藏时触发的回调",
                    "         * @param {Boolean} visible 弹层是否显示",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层挂载的容器节点",
                    "         */",
                    "        popupContainer: PropTypes.oneOfType([",
                    "            PropTypes.string,",
                    "            PropTypes.func",
                    "        ]),",
                    "        /**",
                    "         * 弹层的 className",
                    "         */",
                    "        popupClassName: PropTypes.any,",
                    "        /**",
                    "         * 弹层的内联样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 添加到弹层上的属性",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        /**",
                    "         * 自定义弹层的内容",
                    "         */",
                    "        popupContent: PropTypes.node,",
                    "        /**",
                    "         * 是否使用本地过滤，在数据源为远程的时候需要关闭此项",
                    "         */",
                    "        filterLocal: PropTypes.bool,",
                    "        /**",
                    "         * 本地过滤方法，返回一个 Boolean 值确定是否保留",
                    "         */",
                    "        filter: PropTypes.func,",
                    "        /**",
                    "         * 键盘上下键切换菜单高亮选项的回调",
                    "         */",
                    "        onToggleHighlightItem: PropTypes.func,",
                    "        /**",
                    "         * 是否开启虚拟滚动模式",
                    "         */",
                    "        useVirtual: PropTypes.bool,",
                    "        // 自定义类名",
                    "        className: PropTypes.any,",
                    "        children: PropTypes.any,",
                    "        dataSource: PropTypes.array,",
                    "        itemRender: PropTypes.func,",
                    "        mode: PropTypes.string,",
                    "        notFoundContent: PropTypes.node,",
                    "        locale: PropTypes.object,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        size: 'medium',",
                    "        autoWidth: true,",
                    "        onChange: noop,",
                    "        onVisibleChange: noop,",
                    "        onToggleHighlightItem: noop,",
                    "        popupProps: {},",
                    "        filterLocal: true,",
                    "        filter: filter,",
                    "        itemRender: (item) => {",
                    "            return item.label || item.value;",
                    "        },",
                    "        locale: zhCN.Select,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.dataStore = new DataStore({",
                    "            filter: props.filter,",
                    "            filterLocal: props.filterLocal",
                    "        });",
                    "",
                    "        this.state = {",
                    "            value: 'value' in props ? props.value : props.defaultValue,",
                    "            visible: 'visible' in props ? props.visible : props.defaultVisible,",
                    "            dataSource: [],",
                    "            width: 100,",
                    "            // current highlight key",
                    "            highlightKey: null",
                    "        };",
                    "",
                    "        bindCtx(this, [",
                    "            'handleMenuBodyClick',",
                    "            'handleVisibleChange',",
                    "            'focusInput',",
                    "            'beforeOpen',",
                    "            'beforeClose',",
                    "            'afterClose',",
                    "            'handleResize',",
                    "        ]);",
                    "    }",
                    "",
                    "    componentWillMount() {",
                    "        this.setState({",
                    "            dataSource: this.setDataSource(this.props)",
                    "        });",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        // overlay 还没有完成 mount，所以需要滞后同步宽度",
                    "        setTimeout(() => this.syncWidth(), 0);",
                    "",
                    "        events.on(window, 'resize', this.handleResize);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            this.setState({",
                    "                value: nextProps.value",
                    "            });",
                    "        }",
                    "",
                    "        if ('visible' in nextProps) {",
                    "            // this.state.visible = nextProps.visible;",
                    "            this.setState({",
                    "                visible: nextProps.visible",
                    "            });",
                    "        }",
                    "",
                    "        this.dataStore.setOptions({",
                    "            filter: nextProps.filter,",
                    "            filterLocal: nextProps.filterLocal",
                    "        });",
                    "",
                    "        if ((nextProps.children !== this.props.children || nextProps.dataSource !== this.props.dataSource)) {",
                    "            const dataSource = this.setDataSource(nextProps);",
                    "            this.setState({",
                    "                dataSource",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    componentDidUpdate(prevProps, prevState) {",
                    "        if ((prevProps.label !== this.props.label || prevState.value !== this.state.value)) {",
                    "            this.syncWidth();",
                    "        }",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        events.off(window, 'resize', this.handleResize);",
                    "        clearTimeout(this.resizeTimeout);",
                    "    }",
                    "",
                    "    /**",
                    "     * Calculate and set width of popup menu",
                    "     * @protected",
                    "     */",
                    "    syncWidth() {",
                    "        const width = dom.getStyle(this.selectDOM, 'width');",
                    "",
                    "        if (width && (this.width !== width)) {",
                    "            this.width = width;",
                    "",
                    "            if (this.popupRef && this.props.autoWidth) {",
                    "                // overy 的 node 节点可能没有挂载完成，所以这里需要异步",
                    "                setTimeout(() => {",
                    "                    if (this.popupRef && this.popupRef.getInstance().overlay) {",
                    "                        dom.setStyle(this.popupRef.getInstance().overlay.getInstance().getContentNode(), 'width', this.width);",
                    "                    }",
                    "                }, 0);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    handleResize() {",
                    "        clearTimeout(this.resizeTimeout);",
                    "        if (this.state.visible) {",
                    "            this.resizeTimeout = setTimeout(() => {",
                    "                this.syncWidth();",
                    "            }, 200);",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * Get structured dataSource, for cache",
                    "     * @protected",
                    "     * @param  {Object} [props=this.props]",
                    "     * @return {Array}",
                    "     */",
                    "    setDataSource(props) {",
                    "        const { dataSource, children } = props;",
                    "",
                    "        // children is higher priority then dataSource",
                    "        if (Children.count(children)) {",
                    "            return this.dataStore.updateByDS(children, true);",
                    "",
                    "        } else if (Array.isArray(dataSource)) {",
                    "            return this.dataStore.updateByDS(dataSource, false);",
                    "        }",
                    "        return [];",
                    "    }",
                    "",
                    "    /**",
                    "     * Set popup visible",
                    "     * @protected",
                    "     * @param {boolean} visible",
                    "     * @param {string} type trigger type",
                    "     */",
                    "    setVisible(visible, type) {",
                    "        if (this.props.disabled || this.state.visible === visible) {",
                    "            return;",
                    "        }",
                    "",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onVisibleChange(visible, type);",
                    "    }",
                    "",
                    "    setFirstHightLightKeyForMenu() {",
                    "        // 设置高亮 item key",
                    "        if (this.dataStore.getMenuDS().length && this.dataStore.getEnableDS().length) {",
                    "            this.setState({",
                    "                highlightKey: `${this.dataStore.getEnableDS()[0].value}`",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    handleChange(value, ...args) {",
                    "        // 非受控模式清空内部数据",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value: value",
                    "            });",
                    "        }",
                    "        this.props.onChange(value, ...args);",
                    "    }",
                    "",
                    "    /**",
                    "     * Handle Menu body click",
                    "     * @param {Event} e click event",
                    "     */",
                    "    handleMenuBodyClick(e) {",
                    "        this.focusInput(e);",
                    "    }",
                    "",
                    "    /**",
                    "     * Toggle highlight MenuItem",
                    "     * @private",
                    "     * @param {number} dir -1: up, 1: down",
                    "     */",
                    "    toggleHighlightItem(dir) {",
                    "        if (!this.state.visible) {",
                    "            this.setVisible(true, 'enter');",
                    "            return;",
                    "        }",
                    "",
                    "        const maxCount = this.dataStore.getEnableDS().length;",
                    "        // When there is no enabled item",
                    "        if (!maxCount) {",
                    "            return false;",
                    "        }",
                    "",
                    "        let { highlightKey } = this.state;",
                    "        let highlightIndex = -1;",
                    "",
                    "        // find previous highlight index",
                    "        highlightKey !== null && this.dataStore.getEnableDS().some((item, index) => {",
                    "            if (`${item.value}` === highlightKey) {",
                    "                highlightIndex = index;",
                    "            }",
                    "            return highlightIndex > -1;",
                    "        });",
                    "",
                    "        // toggle highlight index",
                    "        highlightIndex += dir;",
                    "        if (highlightIndex < 0) {",
                    "            highlightIndex = maxCount - 1;",
                    "        }",
                    "        if (highlightIndex >= maxCount) {",
                    "            highlightIndex = 0;",
                    "        }",
                    "",
                    "        // get highlight key",
                    "        const highlightItem = this.dataStore.getEnableDS()[highlightIndex];",
                    "        highlightKey = highlightItem ? `${highlightItem.value}` : null;",
                    "",
                    "        this.setState({ highlightKey });",
                    "",
                    "        this.scrollMenuIntoView();",
                    "",
                    "        return highlightItem;",
                    "    }",
                    "",
                    "    // scroll into focus item",
                    "    scrollMenuIntoView() {",
                    "        const { prefix } = this.props;",
                    "",
                    "        clearTimeout(this.highlightTimer);",
                    "        this.highlightTimer = setTimeout(() => {",
                    "            try {",
                    "                const menuNode = findDOMNode(this.menuRef);",
                    "                const itemNode = menuNode.querySelector(`.${prefix}select-menu-item.${prefix}focused`);",
                    "                itemNode && itemNode.scrollIntoViewIfNeeded();",
                    "            } catch (ex) {",
                    "                // I don't care...",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "    /**",
                    "     * render popup menu header",
                    "     * @abstract",
                    "     */",
                    "    renderMenuHeader() {",
                    "        return null;",
                    "    }",
                    "",
                    "    handleSelect() {",
                    "",
                    "    }",
                    "",
                    "    /**",
                    "     * render popup children",
                    "     * @protected",
                    "     * @param {object} props",
                    "     */",
                    "    renderMenu() {",
                    "        const { prefix, mode, autoWidth, locale, notFoundContent, useVirtual } = this.props;",
                    "        const { dataSource, highlightKey } = this.state;",
                    "        const value = this.state.value;",
                    "        let selectedKeys;",
                    "",
                    "",
                    "        if (isNull(value) || value.length === 0) {",
                    "            selectedKeys = [];",
                    "        } else if (isSingle(mode)) {",
                    "            selectedKeys = [valueToSelectKey(value)];",
                    "        } else {",
                    "            selectedKeys = [].concat(value).map(n => valueToSelectKey(n));",
                    "        }",
                    "",
                    "        let children = this.renderMenuItem(dataSource);",
                    "",
                    "",
                    "        const menuClassName = classNames({",
                    "            [`${prefix}select-menu`]: true,",
                    "            [`${prefix}select-menu-empty`]: !children || !children.length",
                    "        });",
                    "",
                    "        if (!children || !children.length) {",
                    "            children = <span className={`${prefix}select-menu-empty-content`}>{notFoundContent || locale.notFoundContent}</span>;",
                    "        }",
                    "",
                    "        const menuProps = {",
                    "            children,",
                    "            style: autoWidth ? { width: this.width } : { minWidth: this.width },",
                    "            selectedKeys,",
                    "            focusedKey: highlightKey,",
                    "            focusable: false,",
                    "            selectMode: isSingle(mode) ? 'single' : 'multiple',",
                    "            onSelect: this.handleMenuSelect,",
                    "            onItemClick: this.handleItemClick,",
                    "            header: this.renderMenuHeader(),",
                    "            onClick: this.handleMenuBodyClick,",
                    "            onMouseDown: preventDefault,",
                    "            className: menuClassName",
                    "        };",
                    "",
                    "        return (",
                    "            useVirtual ?",
                    "                <div className={`${prefix}select-menu-wrapper`} style={{position: 'relative'}}>",
                    "                    <VirtualList",
                    "                        itemsRenderer={(items, ref) => {",
                    "                            return (<Menu ref={c => {",
                    "                                ref(c);",
                    "                                this.menuRef = c;",
                    "                            }} {...menuProps}>{items}</Menu>);",
                    "                        }}>",
                    "                        {children}",
                    "                    </VirtualList>",
                    "                </div> :",
                    "                <Menu {...menuProps} />",
                    "        );",
                    "    }",
                    "",
                    "    /**",
                    "     * render menu item",
                    "     * @protected",
                    "     * @param {Array} dataSource",
                    "     */",
                    "    renderMenuItem(dataSource) {",
                    "        const { prefix, itemRender } = this.props;",
                    "        // If it has.",
                    "        let searchKey;",
                    "        if (this.isAutoComplete) {",
                    "            // In AutoComplete, value is the searchKey",
                    "            searchKey = this.state.value;",
                    "        } else {",
                    "            searchKey = this.state.searchValue;",
                    "        }",
                    "",
                    "        return dataSource.map((item, index) => {",
                    "            if (!item) {",
                    "                return null;",
                    "            }",
                    "            if (Array.isArray(item.children)) {",
                    "                return (",
                    "                    <MenuGroup",
                    "                        key={index}",
                    "                        label={item.label}>{this.renderMenuItem(item.children)}",
                    "                    </MenuGroup>",
                    "                );",
                    "            } else {",
                    "                const itemProps = {",
                    "                    key: item.value,",
                    "                    className: `${prefix}select-menu-item`,",
                    "                    disabled: item.disabled",
                    "                };",
                    "                if (item.title) {",
                    "                    itemProps.title = item.title;",
                    "                }",
                    "",
                    "                return (",
                    "                    <MenuItem {...itemProps}>{itemRender(item, searchKey)}",
                    "                    </MenuItem>",
                    "                );",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "    saveSelectRef = (ref) => {",
                    "        this.selectDOM = findDOMNode(ref);",
                    "    };",
                    "",
                    "    saveInputRef = (ref) => {",
                    "        if (ref && ref.getInstance()) {",
                    "            this.inputRef = ref.getInstance();",
                    "        }",
                    "    };",
                    "",
                    "    /**",
                    "     * 点击 arrow 或 label 的时候焦点切到 input 中",
                    "     * @override",
                    "     */",
                    "    focusInput() {",
                    "        this.inputRef.focus();",
                    "    }",
                    "",
                    "    beforeOpen() {",
                    "        const { value, highlightKey } = this.state;",
                    "        if (this.props.mode === 'single' && !value && !highlightKey) {",
                    "            this.setFirstHightLightKeyForMenu();",
                    "        }",
                    "        this.syncWidth();",
                    "    }",
                    "",
                    "    beforeClose() {",
                    "",
                    "    }",
                    "",
                    "    afterClose() {",
                    "",
                    "    }",
                    "",
                    "    savePopupRef = (ref) => {",
                    "        this.popupRef = ref;",
                    "        if (this.props.popupProps && typeof this.props.popupProps.ref === 'function') {",
                    "            this.props.popupProps.ref(ref);",
                    "        }",
                    "    }",
                    "",
                    "    render(props) {",
                    "        const { prefix, mode, popupProps, popupContainer, popupClassName, popupStyle, popupContent, autoWidth, canCloseByTrigger, cache } = props;",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}select-auto-complete-menu`]: !popupContent && this.isAutoComplete,",
                    "            [`${prefix}select-${mode}-menu`]: !popupContent && !!mode",
                    "        }, popupClassName || popupProps.className);",
                    "",
                    "        const _props = {",
                    "            triggerType: 'click',",
                    "            autoFocus: false,",
                    "            cache: cache,",
                    "            // Put `popupProps` into here for covering above props.",
                    "            ...popupProps,",
                    "            //beforeOpen node not mount, afterOpen too slow.",
                    "            // from display:none to block, we may need to recompute width",
                    "            beforeOpen: makeChain(this.beforeOpen, popupProps.beforeOpen),",
                    "            beforeClose: makeChain(this.beforeClose, popupProps.beforeClose),",
                    "            afterClose: makeChain(this.afterClose, popupProps.afterClose),",
                    "            canCloseByTrigger: canCloseByTrigger,",
                    "            visible: this.state.visible,",
                    "            onVisibleChange: this.handleVisibleChange,",
                    "            shouldUpdatePosition: true,",
                    "            container: popupContainer || popupProps.container,",
                    "            className: cls,",
                    "            style: popupStyle || popupProps.style",
                    "        };",
                    "",
                    "        return (<Popup {..._props} trigger={this.renderSelect()} ref={this.savePopupRef}>",
                    "            {popupContent ?",
                    "                <div className={`${prefix}select-popup-wrap`} style={autoWidth ? { width: this.width } : {}}>",
                    "                    {popupContent}",
                    "                </div> : this.renderMenu()}",
                    "        </Popup>);",
                    "    }",
                    "}"
                ]
            },
            "data-store.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import {",
                    "    filter,",
                    "    parseDataSourceFromChildren,",
                    "    normalizeDataSource,",
                    "    flattingDataSource,",
                    "    filterDataSource,",
                    "} from './util';",
                    "",
                    "/**",
                    " * manage dataSource for menu list",
                    " */",
                    "class DataStore {",
                    "    constructor(options) {",
                    "        this.options = {",
                    "            filter,",
                    "            key: undefined,",
                    "            addonKey: false,",
                    "            filterLocal: true,",
                    "            ...options",
                    "        };",
                    "",
                    "        // origin data",
                    "        this.dataSource = [];",
                    "        // current data for menu display",
                    "        this.menuDataSource = [];",
                    "        // key=>value map for menuDataSource",
                    "        this.mapDataSource = {};",
                    "        // current data can be select (not disabled) on menu",
                    "        this.enabledDataSource = [];",
                    "    }",
                    "",
                    "    setOptions(options) {",
                    "        Object.assign(this.options, options);",
                    "    }",
                    "",
                    "    updateByDS(dataSource, isChildren = false) {",
                    "        this.dataSource = isChildren ? parseDataSourceFromChildren(dataSource) : normalizeDataSource(dataSource);",
                    "        return this.updateAll();",
                    "    }",
                    "",
                    "    updateByKey(key) {",
                    "        if (key === this.options.key) {",
                    "            return this.getMenuDS();",
                    "        }",
                    "",
                    "        this.options.key = key;",
                    "        return this.updateAll();",
                    "    }",
                    "",
                    "    getOriginDS() {",
                    "        return this.dataSource;",
                    "    }",
                    "",
                    "    getMenuDS() {",
                    "        return this.menuDataSource;",
                    "    }",
                    "",
                    "    getFlattenDS() {",
                    "        return this.flattenDataSource;",
                    "    }",
                    "",
                    "    getEnableDS() {",
                    "        return this.enabledDataSource;",
                    "    }",
                    "",
                    "    getMapDS() {",
                    "        return this.mapDataSource;",
                    "    }",
                    "",
                    "    updateAll() {",
                    "        const {key, filter, filterLocal} = this.options;",
                    "        this.menuDataSource = filterDataSource(this.dataSource, filterLocal ? key : '', filter, this.options.addonKey);",
                    "",
                    "        this.flattenDataSource = flattingDataSource(this.menuDataSource);",
                    "",
                    "        this.mapDataSource = {};",
                    "        this.flattenDataSource.forEach((item => {",
                    "            this.mapDataSource[`${item.value}`] = item;",
                    "        }));",
                    "",
                    "        this.enabledDataSource = this.flattenDataSource.filter(item => !item.disabled);",
                    "",
                    "        return this.menuDataSource;",
                    "    }",
                    "}",
                    "",
                    "export default DataStore;"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Select from './select';",
                    "import AutoComplete from './auto-complete';",
                    "import Option from './option';",
                    "import OptionGroup from './option-group';",
                    "",
                    "Select.AutoComplete = ConfigProvider.config(AutoComplete, {",
                    "    componentName: 'Select'",
                    "});",
                    "",
                    "Select.Option = Option;",
                    "Select.OptionGroup = OptionGroup;",
                    "",
                    "// compatible with 0.x version",
                    "function transform(props, deprecated) {",
                    "    const { shape, container, multiple, filterBy, overlay, safeNode, noFoundContent, ...others } = props;",
                    "",
                    "    const newprops = others;",
                    "    if (shape === 'arrow-only') {",
                    "        deprecated('shape=arrow-only', 'hasBorder=false', 'Select');",
                    "        newprops.hasBorder = false;",
                    "    }",
                    "    if (container) {",
                    "        deprecated('container', 'popupContainer', 'Select');",
                    "        newprops.popupContainer = container;",
                    "    }",
                    "    if (multiple) {",
                    "        deprecated('multiple', 'mode=multiple', 'Select');",
                    "        newprops.mode = 'multiple';",
                    "    }",
                    "    if (filterBy) {",
                    "        deprecated('filterBy', 'filter', 'Select');",
                    "        newprops.filter = filterBy;",
                    "    }",
                    "    if (overlay) {",
                    "        deprecated('overlay', 'popupContent', 'Select');",
                    "        newprops.popupContent = overlay;",
                    "        newprops.autoWidth = false;",
                    "    }",
                    "",
                    "    if (noFoundContent) {",
                    "        deprecated('noFoundContent', 'notFoundContent', 'Select');",
                    "        newprops.notFoundContent = noFoundContent;",
                    "    }",
                    "",
                    "    if (safeNode) {",
                    "        deprecated('safeNode', 'popupProps={safeNode}', 'Select');",
                    "        newprops.popupProps = {",
                    "            safeNode",
                    "        };",
                    "    }",
                    "",
                    "    return newprops;",
                    "}",
                    "",
                    "// compatible with 0.x version: Select.Combobox",
                    "Select.Combobox = ConfigProvider.config(Select, {",
                    "    transform: (props, deprecated) => {",
                    "        deprecated('Select.Combobox', '<Select showSearch={true}/>', 'Select');",
                    "",
                    "        const newprops = transform(props, deprecated);",
                    "        if (props.onInputUpdate) {",
                    "            newprops.onSearch = props.onInputUpdate;",
                    "            newprops.showSearch = true;",
                    "        }",
                    "        return newprops;",
                    "    }",
                    "});",
                    "",
                    "export default ConfigProvider.config(Select, {",
                    "    transform",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"../input/scss/variable.scss\";",
                    "@import \"../input/scss/mixin.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$select-prefix} {",
                    "    @include box-sizing;",
                    "    display: inline-block;",
                    "    font-size: 0;",
                    "    vertical-align: middle;",
                    "",
                    "    /* Select trigger */",
                    "    &-trigger {",
                    "        min-width: 100px;",
                    "        outline: 0;",
                    "        transition: all .3s ease;",
                    "",
                    "        .#{$css-prefix}input-label {",
                    "            flex: 0 0 auto;",
                    "            width: auto;",
                    "        }",
                    "",
                    "        #{$select-prefix}-values {",
                    "            display: block;",
                    "            width: 100%;",
                    "            flex: 1 1 0;",
                    "            overflow: hidden;",
                    "",
                    "            > em {",
                    "                font-style: inherit;",
                    "            }",
                    "",
                    "            input {",
                    "                padding-left: 0;",
                    "                padding-right: 0;",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}input-control {",
                    "            flex: 0 0 auto;",
                    "            width: auto;",
                    "            > * {",
                    "                display: inline-block;",
                    "                width: auto;",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}input.#{$css-prefix}disabled {",
                    "            em {",
                    "                color: $color-text1-1;",
                    "            }",
                    "            #{$select-prefix}-arrow {",
                    "                cursor: not-allowed;",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}select-clear {",
                    "            display: none;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}has-clear:hover {",
                    "            .#{$css-prefix}select-clear {",
                    "                display: inline-block;",
                    "            }",
                    "            .#{$css-prefix}select-arrow {",
                    "                display: none;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    #{$select-prefix}-inner {",
                    "        display: inline-flex;",
                    "        align-items: center;",
                    "        width: 100%;",
                    "        min-width: 100px;",
                    "",
                    "        outline: 0;",
                    "        color: $select-color;",
                    "",
                    "        #{$tag-prefix} {",
                    "            line-height: 1;",
                    "            margin-right: $select-tag-spacing-lr;",
                    "            margin-bottom: $select-tag-spacing-tb;",
                    "            padding-left: $select-tag-padding-lr;",
                    "            padding-right: $select-tag-padding-lr;",
                    "        }",
                    "    }",
                    "",
                    "    &-trigger-search {",
                    "        position: relative;",
                    "        display: inline-block;",
                    "        vertical-align: top;",
                    "        overflow: hidden;",
                    "        width: 100%;",
                    "        max-width: 100%;",
                    "",
                    "        > input, > span {",
                    "            display: block;",
                    "            font-size: inherit;",
                    "            font-family: inherit;",
                    "            letter-spacing: inherit;",
                    "            white-space: nowrap;",
                    "            overflow: hidden;",
                    "        }",
                    "",
                    "        input {",
                    "            position: absolute;",
                    "            background-color: $color-transparent;",
                    "            width: 100%;",
                    "            height: 100% !important;",
                    "            z-index: 1;",
                    "            left: 0;",
                    "            border: 0;",
                    "            outline: 0;",
                    "            margin: 0;",
                    "            padding: 0;",
                    "            cursor: inherit;",
                    "        }",
                    "",
                    "        > span {",
                    "            position: relative;",
                    "            visibility: hidden;",
                    "            white-space: pre;",
                    "            max-width: 100%; /* 在 table 布局中，100% 并没有什么x用 */",
                    "            z-index: -1;",
                    "        }",
                    "    }",
                    "",
                    "    &-single {",
                    "        &.#{$css-prefix}no-search {",
                    "            cursor: pointer;",
                    "        }",
                    "",
                    "        /* 搜索框激活时，展开后不显示值，只显示搜索框 */",
                    "        &.#{$css-prefix}has-search.#{$css-prefix}active {",
                    "            #{$select-prefix}-values > em {",
                    "                display: none;",
                    "            }",
                    "        }",
                    "",
                    "        /* 搜索框未激活，或者menu未展开，如果有值，则不显示搜索(placeholder) */",
                    "        &.#{$css-prefix}no-search,",
                    "        &.#{$css-prefix}inactive {",
                    "            #{$select-prefix}-values > em + #{$select-prefix}-trigger-search {",
                    "                width: 1px;",
                    "                opacity: 0;",
                    "                filter: alpha(opacity=0); /* for IE 9 */",
                    "            }",
                    "",
                    "            #{$select-prefix}-trigger-search input {",
                    "                color: $color-transparent;",
                    "            }",
                    "        }",
                    "",
                    "        #{$select-prefix}-values {",
                    "            display: inline-flex;",
                    "            align-items: center;",
                    "",
                    "            > em {",
                    "                vertical-align: middle;",
                    "                overflow: hidden;",
                    "                text-overflow: ellipsis;",
                    "                white-space: nowrap;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-multiple, &-tag {",
                    "        #{$select-prefix}-values {",
                    "            /* Tag 有 3px 的 margin-bottom，所以包裹 Tag 的容器要作一下处理 */",
                    "            margin-bottom: -$select-tag-spacing-tb;",
                    "            height: auto !important;",
                    "        }",
                    "",
                    "        #{$select-prefix}-trigger-search {",
                    "            margin-bottom: $select-tag-spacing-tb;",
                    "        }",
                    "",
                    "        /* 如果有值，则搜索框变为1px */",
                    "        #{$tag-prefix} + #{$select-prefix}-trigger-search {",
                    "            width: auto;",
                    "            min-width: 1px; /* 保留一个光标的宽度 */",
                    "        }",
                    "        .#{$css-prefix}input {",
                    "            height: auto;",
                    "            align-items: start;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}small {",
                    "            #{$select-prefix}-values {",
                    "                @include select-size($form-element-small-height, $select-s-lineheight);",
                    "            }",
                    "            #{$tag-prefix} {",
                    "                border: 0;",
                    "                @include select-tag-size($select-s-lineheight, -1);",
                    "",
                    "                &-body {",
                    "                    line-height: $select-s-lineheight;",
                    "                }",
                    "            }",
                    "            .#{$css-prefix}input-label, .#{$css-prefix}input-control {",
                    "                line-height: $form-element-small-height - 2;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}medium {",
                    "            #{$select-prefix}-values {",
                    "                @include select-size($form-element-medium-height, $select-m-lineheight);",
                    "            }",
                    "            #{$tag-prefix} {",
                    "                @include select-tag-size($select-m-lineheight);",
                    "            }",
                    "            .#{$css-prefix}input-label, .#{$css-prefix}input-control {",
                    "                line-height: $form-element-medium-height - 2;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}large {",
                    "            #{$select-prefix}-values {",
                    "                @include select-size($form-element-large-height, $select-l-lineheight);",
                    "            }",
                    "            #{$tag-prefix} {",
                    "                @include select-tag-size($select-l-lineheight);",
                    "            }",
                    "            .#{$css-prefix}input-label, .#{$css-prefix}input-control {",
                    "                line-height: $form-element-large-height - 2;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}no-search {",
                    "        /* 在搜索框未激活时，将 input 的 color 置为透明 */",
                    "        /* ISSUE: 在 firefox 中，readonly 的 input 仍然会显示光标 */",
                    "        #{$select-prefix}-trigger-search input {",
                    "            color: $color-transparent;",
                    "        }",
                    "    }",
                    "",
                    "    &-auto-complete {",
                    "        width: 160px;",
                    "",
                    "        .#{$css-prefix}input {",
                    "            width: 100%;",
                    "            .#{$css-prefix}input-hint-wrap {",
                    "                padding-right: 1px;",
                    "            }",
                    "            /* table-cell 下 margin 无效 */",
                    "            #{$select-prefix}-arrow {",
                    "                padding-left: 0;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}active {",
                    "        #{$select-prefix}-arrow {",
                    "            transform: rotate(180deg);",
                    "        }",
                    "    }",
                    "",
                    "    &-arrow {",
                    "        cursor: pointer;",
                    "        width: auto !important;",
                    "        text-align: center;",
                    "        transition: all .3s ease;",
                    "        /* transform-origin: center 41.8%; // icon 图像中心 */",
                    "    }",
                    "",
                    "    &-menu-wrapper {",
                    "        max-height: 260px;",
                    "        overflow: auto;",
                    "        border: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "        border-radius: $popup-local-corner;",
                    "        box-shadow: $popup-local-shadow;",
                    "        #{$select-prefix}-menu {",
                    "            max-height: none;",
                    "            border: none;",
                    "        }",
                    "    }",
                    "",
                    "    /* 弹层 */",
                    "    &-menu {",
                    "        max-height: 260px;",
                    "        overflow: auto;",
                    "",
                    "        #{$select-prefix}-menu-empty-content {",
                    "            padding-left: $s-2;",
                    "            padding-right: $s-2;",
                    "            color: $select-hint-color;",
                    "        }",
                    "",
                    "        /* autoComplete 没有选项时 menu 不显示 */",
                    "        &#{$select-prefix}-auto-complete-menu#{$select-prefix}-menu-empty {",
                    "            display: none;",
                    "        }",
                    "",
                    "        .#{$css-prefix}menu-item-text .#{$css-prefix}icon {",
                    "            vertical-align: middle;",
                    "        }",
                    "    }",
                    "",
                    "    /* 全选按钮 */",
                    "    &-all {",
                    "        display: block;",
                    "        cursor: pointer;",
                    "        line-height: $select-menu-item-height;",
                    "        padding: $s-1 $s-2;",
                    "        margin: 0 $s-3 $s-2;",
                    "        border-bottom: 1px solid $color-line1-2;",
                    "",
                    "        &:hover {",
                    "            color: $color-link-3;",
                    "        }",
                    "    }",
                    "",
                    "    &-highlight {",
                    "        color: $select-highlight-color;",
                    "        font-size: $select-highlight-font;",
                    "    }",
                    "",
                    "    /* -------------- IE polyfill -------------- */",
                    "    /* 根据最新的数据，在中国，PC 端的 IE9 份额为 2%， */",
                    "    /* 所以不应该因为 IE9 而不使用 flex，而是应该做降级 polyfill */",
                    "    /* @see http://gs.statcounter.com/ */",
                    "    /* IE10、IE11 虽然支持 flex，但还是会有各种各样奇奇怪怪的问题 */",
                    "    &-in-ie#{$select-prefix}-trigger {",
                    "        #{$select-prefix}-values {",
                    "            /* 在 table 布局中，overflow: hidden 会导致负的 margin 失效 */",
                    "            overflow: visible;",
                    "        }",
                    "",
                    "        .#{$css-prefix}input-control, .#{$css-prefix}input-label {",
                    "            width: 1px;",
                    "        }",
                    "        .#{$css-prefix}input-control > * {",
                    "            display: table-cell;",
                    "            width: 1%;",
                    "        }",
                    "        #{$select-prefix}-arrow {",
                    "            display: table-cell;",
                    "        }",
                    "        #{$select-prefix}-clear {",
                    "            display: none;",
                    "        }",
                    "",
                    "        &#{$select-prefix}-multiple,",
                    "        &#{$select-prefix}-tag {",
                    "            #{$select-prefix}-inner {",
                    "                vertical-align: top;",
                    "            }",
                    "        }",
                    "",
                    "        #{$select-prefix}-inner {",
                    "            display: inline-table;",
                    "        }",
                    "",
                    "        &#{$select-prefix}-single {",
                    "            #{$select-prefix}-values {",
                    "                display: inline-table;",
                    "            }",
                    "            .#{$css-prefix}input.#{$css-prefix}small #{$select-prefix}-values {",
                    "                line-height: $form-element-small-height;",
                    "            }",
                    "            .#{$css-prefix}input.#{$css-prefix}medium #{$select-prefix}-values {",
                    "                line-height: $form-element-medium-height;",
                    "            }",
                    "            .#{$css-prefix}input.#{$css-prefix}large #{$select-prefix}-values {",
                    "                line-height: $form-element-large-height;",
                    "            }",
                    "        }",
                    "",
                    "        #{$select-prefix}-trigger-search {",
                    "            > span {",
                    "                max-width: 100px;",
                    "            }",
                    "        }",
                    "",
                    "        &#{$select-prefix}-single {",
                    "            &#{$select-prefix}-in-ie-fixwidth #{$select-prefix}-values {",
                    "                position: relative;",
                    "                > em {",
                    "                    position: absolute;",
                    "                    display: inline-block;",
                    "                    height: 100%;",
                    "                    line-height: 1;",
                    "                    vertical-align: middle;",
                    "                    overflow: hidden;",
                    "                    left: 4px;",
                    "                    right: 0;",
                    "                    top: 30%;",
                    "                }",
                    "            }",
                    "            /* 搜索框未激活，或者menu未展开，如果有值，则不显示搜索(placeholder) */",
                    "            &.#{$css-prefix}no-search,",
                    "            &.#{$css-prefix}inactive {",
                    "                #{$select-prefix}-values > em + #{$select-prefix}-trigger-search {",
                    "                    filter: alpha(opacity=0); /* for IE 9 */",
                    "                    font-size: 0;",
                    "                }",
                    "",
                    "                #{$select-prefix}-trigger-search input {",
                    "                    color: inherit;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}no-search {",
                    "            #{$select-prefix}-trigger-search input {",
                    "                color: inherit;",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "option-group.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "",
                    "/* istanbul ignore file */",
                    "",
                    "",
                    "/**",
                    " * Select.OptionGroup",
                    " */",
                    "export default class OptionGroup extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 设置分组的文案",
                    "         */",
                    "        label: PropTypes.node,",
                    "        children: PropTypes.any",
                    "    };",
                    "",
                    "    static _typeMark = 'next_select_option_group';",
                    "",
                    "    render() {",
                    "        return this.props.children;",
                    "    }",
                    "}"
                ]
            },
            "option.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "",
                    "/* istanbul ignore file */",
                    "",
                    "",
                    "/**",
                    " * Select.Option",
                    " */",
                    "export default class Option extends React.Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 选项值",
                    "         */",
                    "        value: PropTypes.any.isRequired,",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        children: PropTypes.any",
                    "    }",
                    "",
                    "    static _typeMark = 'next_select_option';",
                    "",
                    "    render() {",
                    "        return this.props.children;",
                    "    }",
                    "}"
                ]
            },
            "select.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import { func, obj, KEYCODE, env } from '../util';",
                    "import Tag from '../tag';",
                    "import Input from '../input';",
                    "import Icon from '../icon';",
                    "import Base from './base';",
                    "import { isNull, getValueDataSource, valueToSelectKey } from './util';",
                    "",
                    "const { bindCtx, noop } = func;",
                    "const isIE9 = env.ieVersion === 9;",
                    "",
                    "",
                    "/**",
                    " * 无障碍化注意事项:",
                    " * 1. Select 无搜索情况下，不应该让 Input 可focus，此时外层wrap必须可focus，并且需要相应focus事件让外边框发生变化",
                    " */",
                    "",
                    "// 自定义弹层：1. 不需要关心Menu的点击事件 2. 不需要关心dataSource变化",
                    "",
                    "/**",
                    " * Select",
                    " */",
                    "class Select extends Base {",
                    "    static propTypes = {",
                    "        ...Base.propTypes,",
                    "        /**",
                    "         * 选择器模式",
                    "         */",
                    "        mode: PropTypes.oneOf(['single', 'multiple', 'tag']),",
                    "        /**",
                    "         * 当前值，用于受控模式",
                    "         */",
                    "        value: PropTypes.any,",
                    "        /**",
                    "         * 初始的默认值",
                    "         */",
                    "        defaultValue: PropTypes.any,",
                    "        /**",
                    "         * Select发生改变时触发的回调",
                    "         * @param {*} value 选中的值",
                    "         * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'tag'",
                    "         * @param {*} item 选中的值的对象数据 (useDetailValue=false有效)",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)",
                    "         */",
                    "        dataSource: PropTypes.arrayOf(PropTypes.oneOfType([",
                    "            PropTypes.shape({",
                    "                value: PropTypes.any,",
                    "                label: PropTypes.any,",
                    "                disabled: PropTypes.bool,",
                    "                children: PropTypes.array",
                    "            }),",
                    "            PropTypes.bool,",
                    "            PropTypes.number,",
                    "            PropTypes.string",
                    "        ])),",
                    "        /**",
                    "         * 是否有边框",
                    "         */",
                    "        hasBorder: PropTypes.bool,",
                    "        /**",
                    "         * 是否有下拉箭头",
                    "         */",
                    "        hasArrow: PropTypes.bool,",
                    "        /**",
                    "         * 展开后是否能搜索（tag 模式下固定为true）",
                    "         */",
                    "        showSearch: PropTypes.bool,",
                    "        /**",
                    "         * 当搜索框值变化时回调",
                    "         * @param {String} value 数据",
                    "         */",
                    "        onSearch: PropTypes.func,",
                    "        /**",
                    "         * 当搜索框值被清空时候的回调",
                    "         * @param {String} actionType 触发的方式, 'select'(选择清空), 'popupClose'(弹窗关闭清空)",
                    "         */",
                    "        onSearchClear: PropTypes.func,",
                    "        /**",
                    "         * 多选模式下是否有全选功能",
                    "         */",
                    "        hasSelectAll: PropTypes.oneOfType([",
                    "            PropTypes.bool,",
                    "            PropTypes.string",
                    "        ]),",
                    "        /**",
                    "         * 填充到选择框里的值的 key\b\b",
                    "         */",
                    "        fillProps: PropTypes.string,",
                    "        /**",
                    "         * onChange 返回的 value 使用 dataSource 的对象",
                    "         */",
                    "        useDetailValue: PropTypes.bool,",
                    "        /**",
                    "         * dataSource 变化的时是否保留已选的内容",
                    "         */",
                    "        cacheValue: PropTypes.bool,",
                    "        /**",
                    "         * 渲染 Select 展现内容的方法",
                    "         * @param {Object} item 渲染节点的item",
                    "         * @return {ReactNode} 展现内容",
                    "         * @default item => item.label \\|\\| item.value",
                    "         */",
                    "        valueRender: PropTypes.func,",
                    "        /**",
                    "         * 渲染 MenuItem 内容的方法",
                    "         * @param {Object} item 渲染节点的item",
                    "         * @param {String} searchValue 搜索关键字（如果开启搜索）",
                    "         * @return {ReactNode} item node",
                    "         */",
                    "        itemRender: PropTypes.func,",
                    "        /**",
                    "         * 弹层内容为空的文案",
                    "         */",
                    "        notFoundContent: PropTypes.node,",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 受控搜索值，一般不需要设置",
                    "         * @type {[type]}",
                    "         */",
                    "        searchValue: PropTypes.string,",
                    "        /**",
                    "         * 选择后是否立即隐藏菜单 (mode=multiple/tag 模式生效)",
                    "         */",
                    "        hiddenSelected: PropTypes.bool,",
                    "        /**",
                    "         * tag 删除回调",
                    "         * @param {object} item 渲染节点的item",
                    "         */",
                    "        onRemove: PropTypes.func,",
                    "        /**",
                    "         * 焦点事件",
                    "         */",
                    "        onFocus: PropTypes.func,",
                    "        /**",
                    "         * 失去焦点事件",
                    "         */",
                    "        onBlur: PropTypes.func,",
                    "        onKeyDown: PropTypes.func,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        ...Base.defaultProps,",
                    "        mode: 'single',",
                    "        showSearch: false,",
                    "        cacheValue: true,",
                    "        onSearch: noop,",
                    "        onSearchClear: noop,",
                    "        hasArrow: true,",
                    "        onRemove: noop,",
                    "        valueRender: (item) => {",
                    "            return item.label || item.value;",
                    "        },",
                    "        onKeyDown: noop,",
                    "        onFocus: noop,",
                    "        onBlur: noop,",
                    "    };",
                    "",
                    "    static displayName = 'Select';",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        // @extend Base state",
                    "        Object.assign(this.state, {",
                    "            // search keyword",
                    "            searchValue: 'searchValue' in props ? props.searchValue : '',",
                    "        });",
                    "",
                    "        // For cache choosen value",
                    "        this.valueDataSource = {",
                    "            valueDS: [],    // [{value,label}]",
                    "            mapValueDS: {}  // {value: {value,label}}",
                    "        };",
                    "",
                    "        bindCtx(this, [",
                    "            'handleMenuSelect',",
                    "            'handleItemClick',",
                    "            'handleSearch',",
                    "            'handleSearchKeyDown',",
                    "            'handleSelectAll',",
                    "        ]);",
                    "    }",
                    "",
                    "    componentWillMount() {",
                    "        this.dataStore.setOptions({",
                    "            key: this.state.searchValue,",
                    "            addonKey: this.props.mode === 'tag' // tag 模式手动输入的数据",
                    "        });",
                    "",
                    "        super.componentWillMount();",
                    "",
                    "        // 根据value和计算后的dataSource，更新value对应的详细数据valueDataSource",
                    "        if (typeof this.state.value !== 'undefined') {",
                    "            this.valueDataSource = getValueDataSource(this.state.value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());",
                    "        }",
                    "",
                    "        if (isIE9) {",
                    "            this.ie9Hack();",
                    "        }",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('searchValue' in nextProps) {",
                    "            this.dataStore.setOptions({ key: nextProps.searchValue });",
                    "            this.setState({",
                    "                searchValue: typeof nextProps.searchValue === 'undefined' ? '' : nextProps.searchValue",
                    "            });",
                    "        }",
                    "        if (this.props.mode !== nextProps.mode) {",
                    "            this.dataStore.setOptions({",
                    "                addonKey: nextProps.mode === 'tag'",
                    "            });",
                    "        }",
                    "",
                    "        super.componentWillReceiveProps(nextProps);",
                    "",
                    "        if ('value' in nextProps) {",
                    "            // 更新valueDataSource值",
                    "            this.valueDataSource = getValueDataSource(nextProps.value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());",
                    "        }",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        if (isIE9) {",
                    "            this.ie9Hack();",
                    "        }",
                    "        super.componentDidMount();",
                    "    }",
                    "",
                    "    // ie9 下 table-cell 布局不支持宽度超出隐藏",
                    "    ie9Hack() {",
                    "        try {",
                    "            const width = this.selectDOM.currentStyle.width;",
                    "            this.setState({",
                    "                fixWidth: width !== 'auto'",
                    "            });",
                    "        } catch (e) {",
                    "            //",
                    "        }",
                    "    }",
                    "",
                    "    componentDidUpdate(prevProps, prevState) {",
                    "        const props = this.props;",
                    "        // 随着输入自动伸展",
                    "        if (/tag|multiple/.test(props.mode) && prevState.searchValue !== this.state.searchValue) {",
                    "            this.syncWidth();",
                    "        } else {",
                    "            return super.componentDidUpdate(prevProps, prevState);",
                    "        }",
                    "    }",
                    "",
                    "    useDetailValue() {",
                    "        const { popupContent, useDetailValue, dataSource } = this.props;",
                    "        return useDetailValue || (popupContent && !dataSource);",
                    "    }",
                    "",
                    "    hasSearch() {",
                    "        const { showSearch, mode } = this.props;",
                    "        return showSearch || mode === 'tag';",
                    "    }",
                    "",
                    "    /**",
                    "     * Menu.Item onSelect",
                    "     * @private",
                    "     * @param  {Array<string>} keys",
                    "     */",
                    "    handleMenuSelect(keys) {",
                    "        const { mode, readOnly, disabled } = this.props;",
                    "",
                    "        if (readOnly || disabled) {",
                    "            return false;",
                    "        }",
                    "",
                    "        const isSingle = mode === 'single';",
                    "",
                    "        if (isSingle) { // 单选",
                    "            return this.handleSingleSelect(keys[0], 'itemClick');",
                    "        } else { // 正常多选",
                    "            return this.handleMultipleSelect(keys, 'itemClick');",
                    "        }",
                    "    }",
                    "",
                    "    handleItemClick() {",
                    "        this.focusInput();",
                    "    }",
                    "",
                    "    /**",
                    "     * 单选模式",
                    "     */",
                    "    handleSingleSelect(key, triggerType) {",
                    "        const { cacheValue } = this.props;",
                    "        // get data only from dataStore while cacheValue=false",
                    "        const itemObj = getValueDataSource(key, cacheValue ? this.valueDataSource.mapValueDS : {}, this.dataStore.getMapDS());",
                    "        this.valueDataSource = itemObj;",
                    "",
                    "        this.setVisible(false, triggerType);",
                    "",
                    "        if (this.useDetailValue()) {",
                    "            return this.handleChange(itemObj.valueDS, triggerType);",
                    "        } else {",
                    "            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);",
                    "        }",
                    "",
                    "        this.setState({",
                    "            highlightKey: key",
                    "        });",
                    "",
                    "        // 清空搜索",
                    "        if (!('searchValue' in this.props) && this.state.searchValue) {",
                    "            this.handleSearchClear(triggerType);",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * 多选模式 multiple/tag",
                    "     */",
                    "    handleMultipleSelect(keys, triggerType) {",
                    "        const itemObj = getValueDataSource(keys, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());",
                    "",
                    "        const { cacheValue, mode, hiddenSelected } = this.props;",
                    "",
                    "        // 非受控更新缓存map",
                    "        if (cacheValue || mode === 'tag') {",
                    "            this.valueDataSource = itemObj;",
                    "        }",
                    "",
                    "        if (hiddenSelected) {",
                    "            this.setVisible(false, triggerType);",
                    "        }",
                    "",
                    "        if (this.useDetailValue()) {",
                    "            this.handleChange(itemObj.valueDS, triggerType);",
                    "        } else {",
                    "            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);",
                    "        }",
                    "",
                    "        // 清空搜索",
                    "        if (!('searchValue' in this.props) && this.state.searchValue) {",
                    "            // 因为 SearchValue 被 clear 后会重新渲染 Menu，所以在 Overlay 检测 safeNode 的时候 e.target 可能会找不到导致弹窗关闭",
                    "            setTimeout(() => {",
                    "                this.handleSearchClear(triggerType);",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    handleSearchValue(value) {",
                    "        if (this.state.searchValue === value) {",
                    "            return;",
                    "        }",
                    "",
                    "        const { filterLocal } = this.props;",
                    "",
                    "        if (filterLocal) {",
                    "            if (!('searchValue' in this.props)) {",
                    "                this.setState({",
                    "                    searchValue: value,",
                    "                    dataSource: this.dataStore.updateByKey(value)",
                    "                });",
                    "                this.setFirstHightLightKeyForMenu();",
                    "            }",
                    "        } else if (!('searchValue' in this.props)) {",
                    "            this.setState({",
                    "                searchValue: value,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * Handle search input change event",
                    "     * @param {Event} e change Event",
                    "     */",
                    "    handleSearch(value) {",
                    "        this.handleSearchValue(value);",
                    "",
                    "        // inputing should trigger popup open",
                    "        if (!this.state.visible && value) {",
                    "            this.setVisible(true);",
                    "        }",
                    "",
                    "        this.props.onSearch(value);",
                    "    }",
                    "",
                    "    handleSearchClear(triggerType) {",
                    "        this.handleSearchValue('');",
                    "        this.props.onSearchClear(triggerType);",
                    "    }",
                    "",
                    "    // 搜索框 keyDown 事件",
                    "    handleSearchKeyDown(e) {",
                    "        const { popupContent, onKeyDown, showSearch, mode, hasClear, onToggleHighlightItem } = this.props;",
                    "",
                    "        if (popupContent) {",
                    "            return onKeyDown(e);",
                    "        }",
                    "",
                    "        const proxy = 'search';",
                    "        const hasSearch = this.hasSearch();",
                    "",
                    "        switch (e.keyCode) {",
                    "            case KEYCODE.UP:",
                    "                e.preventDefault();",
                    "                onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');",
                    "                break;",
                    "            case KEYCODE.DOWN:",
                    "                e.preventDefault();",
                    "                onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');",
                    "                break;",
                    "            case KEYCODE.ENTER:",
                    "                e.preventDefault();",
                    "                this.chooseHighlightItem(proxy, e);",
                    "                break;",
                    "            case KEYCODE.ESC:",
                    "                e.preventDefault();",
                    "                this.state.visible && this.setVisible(false, 'keyDown');",
                    "                break;",
                    "            case KEYCODE.SPACE:",
                    "                e.stopPropagation();",
                    "                !hasSearch && e.preventDefault();",
                    "                break;",
                    "            case KEYCODE.BACKSPACE:",
                    "                if ((mode === 'multiple' && showSearch) || mode === 'tag') {",
                    "                    // 在多选并且有搜索的情况下，删除最后一个 tag",
                    "                    this.handleDeleteTag(e);",
                    "                } else if (mode === 'single' && hasClear && !this.state.visible) {",
                    "                    // 单选、非展开、并且可清除的情况，允许按删除键清除",
                    "                    this.handleClear(e);",
                    "                }",
                    "                break;",
                    "            default:",
                    "                break;",
                    "        }",
                    "",
                    "        onKeyDown(e);",
                    "    }",
                    "",
                    "    // 回车 选择高亮的 item",
                    "    chooseHighlightItem(proxy, e) {",
                    "        const prevVisible = this.state.visible;",
                    "        if (!prevVisible) {",
                    "            return false;",
                    "        }",
                    "",
                    "        const { highlightKey } = this.state;",
                    "",
                    "        // 没有高亮选项 或者 没有可选菜单",
                    "        if (highlightKey === null || !this.dataStore.getMenuDS().length) {",
                    "            return;",
                    "        }",
                    "",
                    "        const { mode } = this.props;",
                    "",
                    "        if (mode === 'single') {",
                    "            this.handleSingleSelect(highlightKey, 'enter');",
                    "        } else {",
                    "            const value = this.state.value || [];",
                    "            const keys = value.map(v => {",
                    "                return valueToSelectKey(v);",
                    "            });",
                    "            const index = keys.map(v => `${v}`).indexOf(highlightKey);",
                    "            if (index > -1) { // 反选",
                    "                keys.splice(index, 1);",
                    "            } else { // 勾选",
                    "                keys.push(highlightKey);",
                    "            }",
                    "            this.handleMultipleSelect(keys, 'enter');",
                    "            // 阻止事件冒泡到最外层，让Popup 监听到触发弹层关闭",
                    "            e && e.stopPropagation();",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * Handle Tag close event",
                    "     * @param  {Object} item",
                    "     * @return {Boolean} false  return false to prevent auto close",
                    "     * ----",
                    "     * It MUST be multiple mode, needn't additional judgement",
                    "     */",
                    "    handleTagClose(item) {",
                    "",
                    "        if (this.useDetailValue()) {",
                    "            const value = this.state.value.filter(v => {",
                    "                return item.value !== v.value;",
                    "            });",
                    "",
                    "            this.handleChange(value, 'tag');",
                    "        } else {",
                    "            // filter out current item, and then call handleMenuSelect",
                    "            const value = this.state.value.filter(v => {",
                    "                return item.value !== v;",
                    "            });",
                    "",
                    "            this.handleMultipleSelect(value, 'tag');",
                    "        }",
                    "",
                    "        this.props.onRemove(item);",
                    "",
                    "        // prevent tag close",
                    "        return false;",
                    "    }",
                    "",
                    "    /**",
                    "     * Handle BACKSPACE key event",
                    "     * @param {Event} e keyDown event",
                    "     * ---",
                    "     * It MUST be multiple mode",
                    "     */",
                    "    handleDeleteTag(e) {",
                    "        const value = this.state.value;",
                    "        const searchValue = this.state.searchValue;",
                    "",
                    "        if (searchValue || !value || !value.length) {",
                    "            return false;",
                    "        }",
                    "",
                    "        e.preventDefault();",
                    "",
                    "        const nextValues = value.slice(0, value.length - 1);",
                    "        // 手动调用 handleMenuSelect 时直接传入原生的 value，可以减少 toString 的操作",
                    "",
                    "        if (this.useDetailValue()) {",
                    "            this.handleChange(nextValues, 'tag');",
                    "        } else {",
                    "            this.handleMultipleSelect(nextValues, 'tag');",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * Handle SelectAll span click event",
                    "     * @param {Event} e click event",
                    "     */",
                    "    handleSelectAll(e) {",
                    "        e && e.preventDefault();",
                    "        const nextValues = this.dataStore.getEnableDS().map(item => item.value);",
                    "        // 直接传 values，减少 toString 操作",
                    "        this.handleMultipleSelect(nextValues, 'selectAll');",
                    "    }",
                    "",
                    "    handleVisibleChange(visible, type) {",
                    "        this.setVisible(visible, type);",
                    "    }",
                    "",
                    "    afterClose() {",
                    "        // 关闭的时候清空搜索值",
                    "        if (this.hasSearch()) {",
                    "            this.handleSearchClear('popupClose');",
                    "        }",
                    "    }",
                    "",
                    "    /**",
                    "     * 如果用户是自定义的弹层，则直接以 value 为准，不再校验 dataSource",
                    "     * @param {object} props",
                    "     */",
                    "    renderValues() {",
                    "        const { mode, size, valueRender, fillProps, disabled } = this.props;",
                    "        let value = this.state.value;",
                    "",
                    "        if (isNull(value)) {",
                    "            return null;",
                    "        }",
                    "",
                    "        // get detail value",
                    "        if (!this.useDetailValue()) {",
                    "            value = this.valueDataSource.valueDS;",
                    "        }",
                    "",
                    "        if (mode === 'single') {",
                    "            if (!value) {",
                    "                return null;",
                    "            }",
                    "",
                    "            const retvalue = fillProps ? value[fillProps] : valueRender(value);",
                    "            return typeof retvalue === 'number' ? retvalue.toString() : retvalue;",
                    "",
                    "        } else if (value) {",
                    "            if (!Array.isArray(value)) {",
                    "                value = [value];",
                    "            }",
                    "            return value.map(v => {",
                    "                if (!v) {",
                    "                    return null;",
                    "                }",
                    "",
                    "                const labelNode = fillProps ? v[fillProps] : valueRender(v);",
                    "                return (",
                    "                    <Tag key={v.value}",
                    "                        disabled={disabled || v.disabled}",
                    "                        type=\"primary\"",
                    "                        size={size === 'large' ? 'medium' : 'small'}",
                    "                        animation={false}",
                    "                        onClose={this.handleTagClose.bind(this, v)}",
                    "                        closable>{labelNode}</Tag>",
                    "                );",
                    "            });",
                    "        }",
                    "",
                    "        return null;",
                    "    }",
                    "    /**",
                    "     * 1. fix flash while click <label/>",
                    "     * 2. fix onBlur while has clear",
                    "     */",
                    "    handleWrapClick = (e) => {",
                    "        e.preventDefault();",
                    "        this.focusInput();",
                    "    }",
                    "",
                    "    handleArrowClick = (e) => {",
                    "        e.preventDefault();",
                    "        this.focusInput();",
                    "        this.setVisible(!this.state.visible);",
                    "    }",
                    "",
                    "    handleClear = e => {",
                    "        e.stopPropagation();",
                    "",
                    "        this.handleChange(undefined, 'clear');",
                    "    }",
                    "",
                    "    hasClear() {",
                    "        const { hasClear, readOnly, disabled, mode, showSearch } = this.props;",
                    "        const { value, visible } = this.state;",
                    "",
                    "        return typeof value !== 'undefined' && hasClear && !readOnly && !disabled && mode === 'single' && !(showSearch && visible);",
                    "    }",
                    "",
                    "    /**",
                    "     * render arrow",
                    "     * @param {object} props",
                    "     * @param {function} [clickHandler]",
                    "     */",
                    "    renderExtraNode() {",
                    "        const { hasArrow, hasClear, prefix } = this.props;",
                    "",
                    "        const ret = [];",
                    "",
                    "        if (hasArrow) {",
                    "            ret.push(<span key=\"arrow\" onClick={this.handleArrowClick} className={`${prefix}select-arrow`}><Icon",
                    "                type=\"arrow-down\" /></span>);",
                    "        }",
                    "",
                    "        // 不能使用 this.hasClear() 方法判断，要保证 clear 按钮 dom 结构一直存在，防止其不能成为弹层的安全节点，导致弹层没有必要的显示或隐藏",
                    "        if (hasClear) {",
                    "            ret.push(<span key=\"clear\" onClick={this.handleClear} className={`${prefix}select-clear`}><Icon",
                    "                type=\"delete-filling\" /></span>);",
                    "        }",
                    "",
                    "        return ret;",
                    "    }",
                    "",
                    "    /**",
                    "     * 选择器",
                    "     * @override",
                    "     * @param {object} props",
                    "     */",
                    "    renderSelect() {",
                    "        const { prefix, showSearch, placeholder, mode, size, className, style, readOnly, disabled, hasBorder, label, locale, state, onBlur, onFocus, rtl } = this.props;",
                    "        const others = obj.pickOthers(Select.propTypes, this.props);",
                    "        const othersData = obj.pickAttrsWith(others, 'data-');",
                    "",
                    "        const visible = this.state.visible;",
                    "        const isSingle = mode === 'single';",
                    "        const hasSearch = this.hasSearch();",
                    "        const valueNodes = this.renderValues();",
                    "",
                    "        // compatible with selectPlaceHolder. TODO: removed in 2.0 version",
                    "        let _placeholder = placeholder || locale.selectPlaceholder || locale.selectPlaceHolder;",
                    "        if (valueNodes && valueNodes.length) {",
                    "            _placeholder = null;",
                    "        }",
                    "",
                    "        // 弹窗展开时将当前的值作为 placeholder，这个功能的前提是 valueNode 必须是一个字符串",
                    "        if (showSearch && visible && isSingle && typeof valueNodes === 'string') {",
                    "            _placeholder = valueNodes;",
                    "        }",
                    "",
                    "        // 下拉箭头",
                    "        const extra = this.renderExtraNode();",
                    "",
                    "        const triggerClazz = classNames([",
                    "            `${prefix}select`,",
                    "            `${prefix}select-trigger`,",
                    "            `${prefix}select-${mode}`,",
                    "            `${prefix}${size}`,",
                    "            className,",
                    "        ], {",
                    "            [`${prefix}active`]: visible,       // 用于设置 searchInput 样式",
                    "            [`${prefix}inactive`]: !visible,    // 用于设置 searchInput 样式",
                    "            [`${prefix}no-search`]: !hasSearch, // 用于判断是否将 searchInput 设置为 1px + 透明",
                    "            [`${prefix}has-search`]: hasSearch, // 用于单选时展开后判断是否隐藏值",
                    "            [`${prefix}select-in-ie`]: isIE9,",
                    "            [`${prefix}select-in-ie-fixwidth`]: this.state.fixWidth,",
                    "            [`${prefix}has-clear`]: this.hasClear()",
                    "        });",
                    "",
                    "        const valuetext = this.valueDataSource.valueDS ? this.valueDataSource.valueDS.label : '';",
                    "",
                    "        return (",
                    "            <span {...othersData}",
                    "                className={triggerClazz}",
                    "                style={style}",
                    "                dir={rtl ? 'rtl' : undefined}",
                    "                ref={this.saveSelectRef}",
                    "                onClick={this.handleWrapClick}",
                    "                onMouseDown={this.handleWrapClick}",
                    "            >",
                    "                <Input",
                    "                    aria-valuetext={valuetext}",
                    "                    {...obj.pickOthers(othersData, others)}",
                    "                    role=\"combobox\"",
                    "                    tabIndex={0}",
                    "                    aria-expanded={this.state.visible}",
                    "                    aria-disabled={disabled}",
                    "                    state={state}",
                    "                    label={label}",
                    "                    extra={extra}",
                    "                    value={this.state.searchValue}",
                    "                    size={size}",
                    "                    readOnly={!this.hasSearch() || readOnly}",
                    "                    disabled={disabled}",
                    "                    placeholder={_placeholder}",
                    "                    hasBorder={hasBorder}",
                    "                    hasClear={false}",
                    "                    htmlSize=\"1\"",
                    "                    inputRender={(inputEl) => {",
                    "                        return this.renderSearchInput(valueNodes, _placeholder, inputEl);",
                    "                    }}",
                    "                    onChange={this.handleSearch}",
                    "                    onKeyDown={this.handleSearchKeyDown}",
                    "                    onFocus={onFocus}",
                    "                    onBlur={onBlur}",
                    "                    className={`${prefix}select-inner`}",
                    "                    ref={this.saveInputRef} />",
                    "            </span>",
                    "        );",
                    "    }",
                    "",
                    "    renderSearchInput(valueNodes, placeholder, inputEl) {",
                    "        const { prefix, mode } = this.props;",
                    "        const isSingle = mode === 'single';",
                    "",
                    "        const mirrorText = this.state.searchValue;",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}select-values`]: true,",
                    "            [`${prefix}input-text-field`]: true,",
                    "        });",
                    "",
                    "        return (<span className={cls}>",
                    "            {isSingle && valueNodes ? <em>{valueNodes}</em> : valueNodes}",
                    "            <span className={`${prefix}select-trigger-search`}>",
                    "                {",
                    "                    inputEl",
                    "                }",
                    "                <span aria-hidden >{mirrorText || placeholder}&nbsp;</span>",
                    "            </span>",
                    "        </span>);",
                    "    }",
                    "",
                    "    /**",
                    "     * 渲染弹层的 header 内容",
                    "     * @override",
                    "     * @param {object} props",
                    "     */",
                    "    renderMenuHeader() {",
                    "        const { prefix, hasSelectAll, mode } = this.props;",
                    "",
                    "        const sourceCount = this.dataStore.getEnableDS().length;",
                    "        // 多选模式下才有全选",
                    "        if (!hasSelectAll || mode === 'single' || !sourceCount) {",
                    "            return null;",
                    "        }",
                    "",
                    "        const text = typeof hasSelectAll === 'boolean' ? 'Select All' : hasSelectAll;",
                    "",
                    "        return (",
                    "            <div key=\"all\" onClick={this.handleSelectAll} className={`${prefix}select-all`}>",
                    "                <span >{text}</span>",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        const { mode } = this.props;",
                    "        const props = { ...this.props };",
                    "",
                    "        // 搜索的时候不允许回车触发关闭",
                    "        if (this.hasSearch()) {",
                    "            props.canCloseByTrigger = false;",
                    "        }",
                    "        if (mode === 'single') {",
                    "            props.cache = true;",
                    "        }",
                    "        return super.render(props);",
                    "    }",
                    "}",
                    "",
                    "export default Select;"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../tag/style.js';",
                    "import '../overlay/style.js';",
                    "import '../menu/style.js';",
                    "import '../input/style.js';",
                    "import './main.scss';"
                ]
            },
            "util.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import { Children } from 'react';",
                    "",
                    "/**",
                    " * util module",
                    " */",
                    "",
                    "",
                    "/**",
                    " * 是否是单选模式",
                    " * @param {string} mode",
                    " * @return {boolean} is single mode",
                    " */",
                    "export function isSingle(mode) {",
                    "    return !mode || mode === 'single' || mode === 'combobox';",
                    "}",
                    "",
                    "/**",
                    " * 在 Select 中，认为 null 和 undefined 都是空值",
                    " * @param {*} n any object",
                    " * @return {boolean}",
                    " */",
                    "export function isNull(n) {",
                    "    return n === null || n === undefined;",
                    "}",
                    "",
                    "/**",
                    " * 将字符串中的正则表达式关键字符添加转义",
                    " * @param {string} str",
                    " * @return {string}",
                    " */",
                    "export function escapeForReg(str) {",
                    "    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');",
                    "}",
                    "",
                    "/**",
                    " * filter by key",
                    " * @param {string} key filter key",
                    " * @param {object} item item object",
                    " * @return {boolean} it's filtered",
                    " */",
                    "export function filter(key, item) {",
                    "    const _key = escapeForReg(`${key}`);",
                    "    const regExp = new RegExp(`(${_key})`, 'ig');",
                    "",
                    "    return regExp.test(`${item.value}`) || regExp.test(`${item.label}`);",
                    "}",
                    "",
                    "/**",
                    " * loop map",
                    " * @param {Array} dataSource",
                    " * @param {function} callback",
                    " * @return {Array}",
                    " * ----",
                    " * @callback ~loopCallback",
                    " * @param {object} option",
                    " */",
                    "export function loopMap(dataSource, callback) {",
                    "    const result = [];",
                    "    dataSource.forEach(option => {",
                    "        if (option.children) {",
                    "            const children = loopMap(option.children, callback);",
                    "            children.length && result.push({",
                    "                ...option, children",
                    "            });",
                    "        } else {",
                    "            const tmp = callback(option);",
                    "            tmp && result.push(tmp);",
                    "        }",
                    "    });",
                    "",
                    "    return result;",
                    "}",
                    "",
                    "/**",
                    " * Parse dataSource from MenuItem",
                    " * @static",
                    " * @param {Array<Element>} children",
                    " * @param {number} [deep=0] recursion deep level",
                    " */",
                    "export function parseDataSourceFromChildren(children, deep = 0) {",
                    "    const source = [];",
                    "",
                    "    Children.forEach(children, (child, index) => {",
                    "        const { type, props: childProps } = child;",
                    "        const item2 = { deep };",
                    "",
                    "        let isOption = false;",
                    "        let isOptionGroup = false;",
                    "",
                    "        if (typeof type === 'function' && type._typeMark === 'next_select_option' || type === 'option') {",
                    "            isOption = true;",
                    "        }",
                    "        if (typeof type === 'function' && type._typeMark === 'next_select_option_group' || type === 'optgroup') {",
                    "            isOptionGroup = true;",
                    "        }",
                    "",
                    "        if (!isOption && !isOptionGroup) {",
                    "            return;",
                    "        }",
                    "",
                    "        if (isOption) { // option",
                    "            // If children is a string, it can be used as value",
                    "            const isStrChild = typeof childProps.children === 'string';",
                    "            // value > key > string children > index",
                    "            item2.value = 'value' in childProps ?",
                    "                childProps.value : 'key' in childProps ?",
                    "                    childProps.key : isStrChild ?",
                    "                        childProps.children : `${index}`;",
                    "",
                    "            item2.label = childProps.label || childProps.children || `${item2.value}`;",
                    "            item2.title = childProps.title;",
                    "            childProps.disabled === true && (item2.disabled = true);",
                    "            // You can put your extra data here, and use it in `itemRender` or `labelRender`",
                    "            Object.assign(item2, childProps['data-extra'] || {});",
                    "        } else if (isOptionGroup && deep < 1) { // option group",
                    "            item2.label = childProps.label || 'Group';",
                    "            // parse children nodes",
                    "            item2.children = parseDataSourceFromChildren(childProps.children, deep + 1);",
                    "        }",
                    "",
                    "        source.push(item2);",
                    "    });",
                    "",
                    "    return source;",
                    "}",
                    "",
                    "",
                    "/**",
                    " * Normalize dataSource",
                    " * @static",
                    " * @param {Array} dataSource",
                    " * @param {number} [deep=0] recursion deep level",
                    " * ----",
                    " * value priority: value > 'index'",
                    " * label priority: label > 'value' > 'index'",
                    " * disabled: disabled === true",
                    " */",
                    "export function normalizeDataSource(dataSource, deep = 0) {",
                    "    const source = [];",
                    "",
                    "    dataSource.forEach((item, index) => {",
                    "        // enable array of basic type",
                    "        if (/string|boolean|number/.test(typeof item)) {",
                    "            item = { label: `${item}`, value: item };",
                    "        }",
                    "",
                    "        // filter off addon item",
                    "        if (item.__isAddon) {",
                    "            return;",
                    "        }",
                    "",
                    "        const item2 = { deep };",
                    "        // deep < 1: only 2 level allowed",
                    "        if (Array.isArray(item.children) && deep < 1) {",
                    "            // handle group",
                    "            item2.label = item.label || item.value || `Group ${index}`;",
                    "            // parse children",
                    "            item2.children = normalizeDataSource(item.children, deep + 1);",
                    "        } else {",
                    "            const { value, label, title, disabled, ...others } = item;",
                    "            item2.value = !isNull(value) ? value : `${index}`;",
                    "            item2.label = label || `${item2.value}`;",
                    "            item2.title = title;",
                    "            disabled === true && (item2.disabled = true);",
                    "",
                    "            Object.assign(item2, others);",
                    "        }",
                    "",
                    "        source.push(item2);",
                    "    });",
                    "",
                    "    return source;",
                    "}",
                    "",
                    "",
                    "/**",
                    " * Get flatten dataSource",
                    " * @static",
                    " * @param  {Array} dataSource structured dataSource",
                    " * @return {Array}",
                    " */",
                    "export function flattingDataSource(dataSource) {",
                    "    const source = [];",
                    "",
                    "    dataSource.forEach((item) => {",
                    "        if (Array.isArray(item.children)) {",
                    "            source.push(...flattingDataSource(item.children));",
                    "        } else {",
                    "            source.push(item);",
                    "        }",
                    "    });",
                    "",
                    "    return source;",
                    "}",
                    "",
                    "export function filterDataSource(dataSource, key, filter, addonKey) {",
                    "    if (!Array.isArray(dataSource)) {",
                    "        return [];",
                    "    }",
                    "    if (typeof key === 'undefined' || key === null) {",
                    "        return [].concat(dataSource);",
                    "    }",
                    "",
                    "",
                    "    let addKey = true;",
                    "    const menuDataSource = loopMap(dataSource, option => {",
                    "        if (key === `${option.value}`) {",
                    "            addKey = false;",
                    "        }",
                    "        return filter(key, option) && !option.__isAddon && option;",
                    "    });",
                    "",
                    "    // if key not in menuDataSource, add key to dataSource",
                    "    if (addonKey && key && addKey) {",
                    "        menuDataSource.unshift({",
                    "            value: key,",
                    "            label: key,",
                    "            title: key,",
                    "            __isAddon: true",
                    "        });",
                    "    }",
                    "",
                    "    return menuDataSource;",
                    "}",
                    "",
                    "function getKeyItemByValue(value, valueMap) {",
                    "    let item;",
                    "",
                    "    if (typeof value === 'object' && value.hasOwnProperty('value')) {",
                    "        item = value;",
                    "    } else {",
                    "        item = valueMap[`${value}`] || {",
                    "            value,",
                    "            label: value,",
                    "        };",
                    "    }",
                    "",
                    "    return item;",
                    "}",
                    "",
                    "/**",
                    " * @param {Array/String} value 数据",
                    " * @param {Object} mapValueDS   缓存数据 value => {value,label} 的映射关系表",
                    " * @param {*} mapMenuDS  通过 dataSource 建立 value => {value,label} 的映射关系表",
                    " * @returns {Object} value: [value]; valueDS: [{value,label}]; mapValueDS: {value: {value,label}}",
                    " */",
                    "export function getValueDataSource(value, mapValueDS, mapMenuDS) {",
                    "    if (isNull(value)) {",
                    "        return {};",
                    "    }",
                    "",
                    "    const newValue = [];",
                    "    const newValueDS = [];",
                    "    const newMapValueDS = {};",
                    "    const _newMapDS = Object.assign({}, mapValueDS, mapMenuDS);",
                    "",
                    "    if (Array.isArray(value)) {",
                    "        value.forEach((v) => {",
                    "            const item = getKeyItemByValue(v, _newMapDS);",
                    "",
                    "            newValueDS.push(item);",
                    "            newMapValueDS[`${item.value}`] = item;",
                    "            newValue.push(item.value);",
                    "        });",
                    "",
                    "        return {",
                    "            value: newValue, // [value]",
                    "            valueDS: newValueDS, // [{value,label}]",
                    "            mapValueDS: newMapValueDS // {value: {value,label}}",
                    "        };",
                    "",
                    "    } else {",
                    "",
                    "        const item = getKeyItemByValue(value, _newMapDS);",
                    "",
                    "        return {",
                    "            value: item.value,",
                    "            valueDS: item,",
                    "            mapValueDS: {",
                    "                [`${item.value}`]: item",
                    "            }",
                    "        };",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * Get flatten dataSource",
                    " * @static",
                    " * @param  {any} value structured dataSource",
                    " * @return {String}",
                    " */",
                    "export function valueToSelectKey(value) {",
                    "    let val;",
                    "    if (typeof value === 'object' && value.hasOwnProperty('value')) {",
                    "        val = value.value;",
                    "    } else {",
                    "        val = value;",
                    "    }",
                    "    return `${val}`;",
                    "}",
                    "",
                    "/**",
                    " * UP Down 改进双向链表方法",
                    " */",
                    "// function DoubleLinkList(element){",
                    "//     this.prev = null;",
                    "//     this.next = null;",
                    "//     this.element = element;",
                    "// }",
                    "//",
                    "// export function mapDoubleLinkList(dataSource){",
                    "//",
                    "//     const mapDS = {};",
                    "//     let doubleLink = null;",
                    "//",
                    "//     let head = null;",
                    "//     let tail = null;",
                    "//",
                    "//     function  append(element) {",
                    "//         if (!doubleLink) {",
                    "//             doubleLink = new DoubleLinkList(element);",
                    "//             head = doubleLink;",
                    "//             tail = doubleLink;",
                    "//             return doubleLink;",
                    "//         }",
                    "//",
                    "//         const node = new DoubleLinkList(element);",
                    "//         tail.next = node;",
                    "//         node.prev = tail;",
                    "//         tail = node;",
                    "//",
                    "//         return tail;",
                    "//     }",
                    "//",
                    "//     dataSource.forEach((item => {",
                    "//         if (item.disabled) {",
                    "//             return;",
                    "//         }",
                    "//         mapDS[`${item.value}`] = append(item);",
                    "//     }));",
                    "//",
                    "//     return mapDS;",
                    "// }",
                    "//"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// select mixins",
                        "// --------------------------------------------------",
                        "",
                        "// @global",
                        "@mixin select-size(",
                        "    $height,",
                        "    $lineHeight",
                        ") {",
                        "    $padding-tb: ($height - $lineHeight - 2px) / 2;",
                        "",
                        "    min-height: $height - 2;",
                        "    padding-top: $padding-tb;",
                        "    padding-bottom: $padding-tb;",
                        "    line-height: $lineHeight;",
                        "}",
                        "",
                        "// 16px 是 tag-body 的固定高度",
                        "@mixin select-tag-size(",
                        "    $height,",
                        "    $border: 1px",
                        ") {",
                        "    $padding-tb: ($height - $s-4 - $border * 2) / 2;",
                        "",
                        "    padding-top: $padding-tb;",
                        "    padding-bottom: $padding-tb;",
                        "    height: $height;",
                        "",
                        "    .#{$css-prefix}tag-body, .#{$css-prefix}tag-close-btn {",
                        "        line-height: $height - $padding-tb * 2;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module select: 选择器",
                        "/// @tag Select",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $select-",
                        "/// @classPrefix {prefix}-select",
                        "/// @order {\"statement/normal\":10,\"statement/normal/text\":100,\"statement/normal/hint\":101,\"statement/normal/label\":102,\"statement/normal/icon\":103,\"size/bounding\":10,\"size/text\":11}",
                        "////",
                        "",
                        "// select variables",
                        "// --------------------------------------------------",
                        "",
                        "$select-prefix: '.#{$css-prefix}select';",
                        "$tag-prefix: '.#{$css-prefix}tag';",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/text",
                        "$select-color: $color-text1-4 !default;",
                        "/// color",
                        "/// @namespace statement/normal/hint",
                        "$select-hint-color: $color-text1-2 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/highlight",
                        "$select-highlight-color: $color-brand1-6 !default;",
                        "",
                        "// font",
                        "/// size",
                        "/// @namespace size/highlight",
                        "$select-highlight-font: $font-size-body-1 !default;",
                        "",
                        "// large",
                        "",
                        "/// line-height",
                        "/// @namespace size/bounding",
                        "$select-l-lineheight: $s-6 !default;",
                        "",
                        "// medium",
                        "",
                        "/// line-height",
                        "/// @namespace size/bounding",
                        "$select-m-lineheight: $s-5 !default;",
                        "",
                        "/// line-height",
                        "/// @namespace size/bounding",
                        "$select-s-lineheight: 14px !default;",
                        "",
                        "$select-tag-spacing-lr: $s-1;",
                        "$select-tag-spacing-tb: 3px;",
                        "$select-tag-padding-lr: $s-1;",
                        "$select-menu-item-height: $s-5;"
                    ]
                }
            }
        },
        "slider": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Slider from './slider';",
                    "",
                    "export default ConfigProvider.config(Slider, {",
                    "    exportNames: ['resize'],",
                    "    transform: (props, deprecated) => {",
                    "        if ('fade' in props) {",
                    "            deprecated('fade', 'animation', 'Slider');",
                    "",
                    "            const { fade, ...others } = props;",
                    "            if (fade) {",
                    "                props = { animation: 'fade', ...others };",
                    "            } else {",
                    "                props = others;",
                    "            }",
                    "        }",
                    "        if ('arrowPos' in props) {",
                    "            if (props.arrowPos === 'inline') {",
                    "                deprecated('arrowPos=inline', 'arrowPosition=inner', 'Slider');",
                    "",
                    "                props.arrowPos = 'inner';",
                    "            } else {",
                    "                deprecated('arrowPos', 'arrowPosition', 'Slider');",
                    "            }",
                    "            const { arrowPos, ...others } = props;",
                    "            props = { arrowPosition: arrowPos, ...others };",
                    "        }",
                    "        ['arrowDirection', 'dotsDirection', 'slideDirection'].forEach(propName => {",
                    "            if (props[propName] === 'horizontal') {",
                    "                deprecated(`${propName}=horizontal`, `${propName}=hoz`, 'Slider');",
                    "",
                    "                props[propName] = 'hoz';",
                    "            } else if (props[propName] === 'vertical') {",
                    "                deprecated(`${propName}=vertical`, `${propName}=ver`, 'Slider');",
                    "",
                    "                props[propName] = 'ver';",
                    "            }",
                    "        });",
                    "        if ('initialSlide' in props) {",
                    "            deprecated('initialSlide', 'defaultActiveIndex', 'Slider');",
                    "",
                    "            const { initialSlide, ...others } = props;",
                    "            props = { defaultActiveIndex: initialSlide, ...others };",
                    "        }",
                    "        if ('slickGoTo' in props) {",
                    "            deprecated('slickGoTo', 'activeIndex', 'Slider');",
                    "",
                    "            const { slickGoTo, ...others } = props;",
                    "            props = { activeIndex: slickGoTo, ...others };",
                    "        }",
                    "        if ('afterChange' in props) {",
                    "            deprecated('afterChange', 'onChange', 'Slider');",
                    "",
                    "            const { afterChange, ...others } = props;",
                    "            props = { onChange: afterChange, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "/* Slider */",
                    "/* -------------------------------------- */",
                    "",
                    "#{$slick-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    position: relative;",
                    "    display: block;",
                    "    -webkit-touch-callout: none;",
                    "    user-select: none;",
                    "    -ms-touch-action: pan-y;",
                    "    touch-action: pan-y;",
                    "    -webkit-tap-highlight-color: transparent;",
                    "",
                    "    &-initialized {",
                    "        #{$slick-prefix}-slide {",
                    "            display: block;",
                    "        }",
                    "    }",
                    "",
                    "    &-list {",
                    "        position: relative;",
                    "        overflow: hidden;",
                    "        display: block;",
                    "        margin: 0;",
                    "        padding: 0;",
                    "        transform: translate3d(0, 0, 0);",
                    "",
                    "        &:focus {",
                    "            outline: none;",
                    "        }",
                    "",
                    "        &.dragging {",
                    "            cursor: pointer;",
                    "            cursor: hand;",
                    "        }",
                    "    }",
                    "",
                    "    &-track {",
                    "        position: relative;",
                    "        top: 0;",
                    "        left: 0;",
                    "        display: block;",
                    "        transform: translate3d(0, 0, 0);",
                    "    }",
                    "",
                    "    &-slide {",
                    "        float: left;",
                    "        height: 100%;",
                    "        min-height: 1px;",
                    "        outline: 0;",
                    "        transition: all .3s cubic-bezier(.86, 0, .07, 1);",
                    "",
                    "        #{$slick-prefix}[dir=\"rtl\"] & {",
                    "            float: right;",
                    "        }",
                    "",
                    "        img {",
                    "            display: block;",
                    "        }",
                    "    }",
                    "",
                    "    &-arrow {",
                    "        display: block;",
                    "        position: absolute;",
                    "        cursor: pointer;",
                    "        text-align: center;",
                    "        transition: .4s ease-in;",
                    "",
                    "        /* prev/next 按钮不同位置下的外观 */",
                    "        &.inner {",
                    "            @include slick-arrow-statement(",
                    "                $slick-arrow-icon-color-normal,",
                    "                $slick-arrow-icon-color-hover,",
                    "                $slick-arrow-icon-color-disabled,",
                    "                $slick-arrow-bg-color-normal,",
                    "                $slick-arrow-bg-color-hover,",
                    "                $slick-arrow-bg-color-disabled,",
                    "                $slick-arrow-bg-opacity-normal,",
                    "                $slick-arrow-bg-opacity-hover,",
                    "                $slick-arrow-bg-opacity-disabled",
                    "            );",
                    "        }",
                    "",
                    "        &.outer {",
                    "            @include slick-arrow-statement(",
                    "                $slick-arrow-icon-color-normal-outer,",
                    "                $slick-arrow-icon-color-hover-outer,",
                    "                $slick-arrow-icon-color-disabled-outer,",
                    "                $slick-arrow-bg-color-normal-outer,",
                    "                $slick-arrow-bg-color-hover-outer,",
                    "                $slick-arrow-bg-color-disabled-outer,",
                    "                $slick-arrow-bg-opacity-normal-outer,",
                    "                $slick-arrow-bg-opacity-hover-outer,",
                    "                $slick-arrow-bg-opacity-disabled-outer",
                    "            );",
                    "            border-radius: $slick-arrow-corner-radius-outer;",
                    "        }",
                    "        &.disabled {",
                    "            cursor: not-allowed;",
                    "        }",
                    "    }",
                    "",
                    "    &-dots {",
                    "        display: block;",
                    "        position: absolute;",
                    "        z-index: 100;",
                    "        margin: 0;",
                    "        padding: 0;",
                    "",
                    "        &-item {",
                    "            position: relative;",
                    "            display: inline-block;",
                    "            cursor: pointer;",
                    "",
                    "            button {",
                    "                border-width: $slick-dots-border-width;",
                    "                border-color: rgba($slick-dots-border-color-normal, $slick-dots-border-opacity-normal);",
                    "                border-style: solid;",
                    "                outline: none;",
                    "                padding: 0;",
                    "                height: $slick-dots-diameter;",
                    "                width: $slick-dots-diameter;",
                    "                border-radius: 50%;",
                    "                background: rgba($slick-dots-background-color-normal, $slick-dots-background-opacity-normal);",
                    "",
                    "                &:hover {",
                    "                    background-color: rgba($slick-dots-background-color-hover, $slick-dots-background-opacity-hover);",
                    "                    /* border-width: $slick-dots-border-width-hover; */",
                    "                    border-color: rgba($slick-dots-border-color-hover, $slick-dots-border-opacity-hover);",
                    "                }",
                    "            }",
                    "",
                    "            &.active button {",
                    "                background: rgba($slick-dots-background-color-selected, $slick-dots-background-opacity-selected);",
                    "                /* border-width: $slick-dots-border-width-selected; */",
                    "                border-color: rgba($slick-dots-border-color-selected, $slick-dots-border-opacity-selected);",
                    "                animation: zoom .3s cubic-bezier(.86, 0, .07, 1);",
                    "            }",
                    "        }",
                    "",
                    "        /* dots 位于水平位置 */",
                    "        &.hoz {",
                    "            @include slick-dots-position(",
                    "                100%,",
                    "                $slick-dots-position-bottom,",
                    "                'hoz'",
                    "            );",
                    "            text-align: center;",
                    "",
                    "            #{$slick-prefix}-dots-item {",
                    "                margin: 0 $slick-dots-margin-lr;",
                    "            }",
                    "        }",
                    "",
                    "        /* dots 位于右侧垂直位置 */",
                    "        &.ver {",
                    "            @include slick-dots-position(",
                    "                $slick-dots-diameter + 4 * 2,",
                    "                $slick-dots-position-right,",
                    "                'ver'",
                    "            );",
                    "",
                    "            display: flex;",
                    "            justify-content: center;",
                    "            flex-direction: column;",
                    "",
                    "            #{$slick-prefix}-dots-item {",
                    "                margin: $slick-dots-margin-tb 0;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    /* 水平滑动 */",
                    "    &#{$slick-prefix}-hoz {",
                    "",
                    "        &#{$slick-prefix}-outer {",
                    "            padding: 0 $slick-track-padding-lr;",
                    "        }",
                    "",
                    "        #{$slick-prefix}-arrow {",
                    "            &.medium {",
                    "                @include slick-arrow-size($slick-arrow-width-m, $slick-arrow-height-m, $slick-arrow-icon-m);",
                    "            }",
                    "",
                    "            &.medium.inner {",
                    "                @include slick-arrow-position-hoz(calc((100% - #{$slick-arrow-height-m}) / 2), 0, null, 0);",
                    "            }",
                    "",
                    "            &.medium.outer {",
                    "                @include slick-arrow-position-hoz(",
                    "                    calc((100% - #{$slick-arrow-height-m}) / 2), // top",
                    "                    -$slick-arrow-position-lr-m, // right",
                    "                    null, // bottom",
                    "                    -$slick-arrow-position-lr-m // left",
                    "                );",
                    "            }",
                    "",
                    "            &.large {",
                    "                @include slick-arrow-size($slick-arrow-width-l, $slick-arrow-height-l, $slick-arrow-icon-l);",
                    "            }",
                    "",
                    "            &.large.inner {",
                    "                @include slick-arrow-position-hoz(calc((100% - #{$slick-arrow-height-l}) / 2), 0, null, 0);",
                    "            }",
                    "",
                    "            &.large.outer {",
                    "                @include slick-arrow-position-hoz(",
                    "                    calc((100% - #{$slick-arrow-height-l}) / 2),",
                    "                    -$slick-arrow-position-lr-l,",
                    "                    null,",
                    "                    -$slick-arrow-position-lr-l",
                    "                );",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    /* 垂直滑动 */",
                    "    &#{$slick-prefix}-ver {",
                    "",
                    "        &#{$slick-prefix}-outer {",
                    "            padding: $slick-ver-track-padding-tb 0;",
                    "        }",
                    "",
                    "        #{$slick-prefix} {",
                    "            &-slide {",
                    "                display: block;",
                    "                height: auto;",
                    "                /* border: $slick-ver-slide-border-width solid transparent; */",
                    "            }",
                    "",
                    "            &-arrow {",
                    "                /* size medium */",
                    "                &.medium {",
                    "                    @include slick-arrow-size($slick-ver-arrow-width-m, $slick-ver-arrow-height-m, $slick-arrow-icon-m);",
                    "                }",
                    "",
                    "                /* size medium & position inner */",
                    "                &.medium.inner {",
                    "                    @include slick-arrow-position-ver(0, null, 0, calc((100% - #{$slick-ver-arrow-width-m}) / 2));",
                    "                }",
                    "",
                    "                /* size medium & position outer */",
                    "                &.medium.outer {",
                    "                    @include slick-arrow-position-ver(-$slick-ver-arrow-position-tb-m, null, -$slick-ver-arrow-position-tb-m, calc((100% - #{$slick-ver-arrow-width-m}) / 2));",
                    "                }",
                    "",
                    "                /* size large */",
                    "                &.large {",
                    "                    @include slick-arrow-size($slick-ver-arrow-width-l, $slick-ver-arrow-height-l, $slick-arrow-icon-l);",
                    "                }",
                    "",
                    "                /* size large & position inner */",
                    "                &.large.inner {",
                    "                    @include slick-arrow-position-ver(0, null, 0, calc((100% - #{$slick-ver-arrow-width-l}) / 2));",
                    "                }",
                    "",
                    "                /* size large & position outer */",
                    "                &.large.outer {",
                    "                    @include slick-arrow-position-ver(-$slick-ver-arrow-position-tb-l, null, -$slick-ver-arrow-position-tb-l, calc((100% - #{$slick-ver-arrow-width-l}) / 2));",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "slider.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import classNames from 'classnames';",
                    "import PropTypes from 'prop-types';",
                    "import {obj} from '../util';",
                    "import InnerSlider from './slick/inner-slider';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "/**",
                    " * Slider",
                    "*/",
                    "export default class Slider extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 自定义传入的样式",
                    "         */",
                    "        className: PropTypes.any,",
                    "        /**",
                    "         * 是否使用自适应高度",
                    "         */",
                    "        adaptiveHeight: PropTypes.bool,",
                    "        /**",
                    "         * 动效类型，默认是'slide'",
                    "         */",
                    "        animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),",
                    "        /**",
                    "         * 是否显示箭头",
                    "         */",
                    "        arrows: PropTypes.bool,",
                    "        /**",
                    "         * 导航箭头大小 可选值: 'medium', 'large'",
                    "         */",
                    "        arrowSize: PropTypes.oneOf(['medium', 'large']),",
                    "        /**",
                    "         * 导航箭头位置 可选值: 'inner', 'outer'",
                    "         */",
                    "        arrowPosition: PropTypes.oneOf(['inner', 'outer']),",
                    "        /**",
                    "         * 导航箭头的方向 可选值: 'hoz', 'ver'",
                    "         */",
                    "        arrowDirection: PropTypes.oneOf(['hoz', 'ver']),",
                    "        /**",
                    "         * 是否自动播放",
                    "         */",
                    "        autoplay: PropTypes.bool,",
                    "        /**",
                    "         * 自动播放的速度",
                    "         */",
                    "        autoplaySpeed: PropTypes.number,",
                    "        /**",
                    "         * 向后箭头",
                    "         */",
                    "        nextArrow: PropTypes.element,",
                    "        /**",
                    "         * 向前箭头",
                    "         */",
                    "        prevArrow: PropTypes.element,",
                    "        /**",
                    "         * 是否启用居中模式",
                    "         */",
                    "        centerMode: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示导航锚点",
                    "         */",
                    "        dots: PropTypes.bool,",
                    "        /**",
                    "         * 导航锚点位置",
                    "         */",
                    "        dotsDirection: PropTypes.oneOf(['hoz', 'ver']),",
                    "        dotsClass: PropTypes.string,",
                    "        /**",
                    "         * 自定义导航锚点",
                    "         */",
                    "        dotRender: PropTypes.func,",
                    "        /**",
                    "         * 是否可拖拽",
                    "         */",
                    "        draggable: PropTypes.bool,",
                    "        /**",
                    "         * 是否使用无穷循环模式",
                    "         */",
                    "        infinite: PropTypes.bool,",
                    "        /**",
                    "         * 初始被激活的轮播图",
                    "         */",
                    "        defaultActiveIndex: PropTypes.number,",
                    "        /**",
                    "         * 是否启用懒加载",
                    "         */",
                    "        lazyLoad: PropTypes.bool,",
                    "        slide: PropTypes.string,",
                    "        /**",
                    "         * 轮播方向",
                    "         */",
                    "        slideDirection: PropTypes.oneOf(['hoz', 'ver']),",
                    "        /**",
                    "         * 同时展示的图片数量",
                    "         */",
                    "        slidesToShow: PropTypes.number,",
                    "        /**",
                    "         * 同时滑动的图片数量",
                    "         */",
                    "        slidesToScroll: PropTypes.number,",
                    "        /**",
                    "         * 轮播速度",
                    "         */",
                    "        speed: PropTypes.number,",
                    "        /**",
                    "         * 跳转到指定的轮播图（受控）",
                    "         */",
                    "        activeIndex: PropTypes.number,",
                    "        /**",
                    "         * 锚点导航触发方式",
                    "         */",
                    "        triggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 轮播切换的回调函数",
                    "         * @param {Number} index 幻灯片的索引",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        children: PropTypes.any,",
                    "        /**",
                    "         * 自定义传入的class",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览",
                    "         */",
                    "        centerPadding: PropTypes.string,",
                    "        /**",
                    "         * CSS3 Animation Easing,默认‘ease’",
                    "         */",
                    "        cssEase: PropTypes.string, // used",
                    "        edgeFriction: PropTypes.number, // 非无限轮播滑动到边缘时的阻力",
                    "        /**",
                    "         * 多图轮播时，点击选中后自动居中",
                    "         */",
                    "        focusOnSelect: PropTypes.bool,",
                    "        pauseOnHover: PropTypes.bool, // 鼠标经过时停止播放",
                    "        swipe: PropTypes.bool,",
                    "        swipeToSlide: PropTypes.bool,",
                    "        touchMove: PropTypes.bool,",
                    "        touchThreshold: PropTypes.number,",
                    "        useCSS: PropTypes.bool,",
                    "        variableWidth: PropTypes.bool, // used",
                    "        waitForAnimate: PropTypes.bool,",
                    "        edgeEvent: PropTypes.any,",
                    "        swipeEvent: PropTypes.any",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        animation: 'slide',",
                    "        arrowSize: 'medium',",
                    "        arrowPosition: 'inner',",
                    "        vertical: false,",
                    "        dots: true,",
                    "        dotsDirection: 'hoz',",
                    "        arrows: true,",
                    "        arrowDirection: 'hoz',",
                    "        infinite: true,",
                    "        autoplay: false,",
                    "        autoplaySpeed: 3000,",
                    "        speed: 500,",
                    "        adaptiveHeight: false,",
                    "        centerMode: false,",
                    "        centerPadding: '50px', // Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览",
                    "        cssEase: 'ease',",
                    "        draggable: true,",
                    "        edgeFriction: 0.35,",
                    "        focusOnSelect: false,",
                    "        defaultActiveIndex: 0,",
                    "        lazyLoad: false,",
                    "        pauseOnHover: false,",
                    "        rtl: false,",
                    "        slide: 'div',",
                    "        slideDirection: 'hoz',",
                    "        slidesToShow: 1,",
                    "        slidesToScroll: 1,",
                    "        swipe: true,",
                    "        swipeToSlide: false, // Allow users to drag or swipe directly to a slide irrespective of slidesToScroll",
                    "        touchMove: true, // 移动端touch",
                    "        touchThreshold: 5,",
                    "        useCSS: true,",
                    "        variableWidth: false,",
                    "        waitForAnimate: true,",
                    "        onChange: () => {},",
                    "        edgeEvent: null,",
                    "        swipeEvent: null,",
                    "        nextArrow: null, // nextArrow, prevArrow are react components",
                    "        prevArrow: null,",
                    "        style: null,",
                    "        dotsRender: null,",
                    "        triggerType: 'click'",
                    "    };",
                    "",
                    "    resize = () => {",
                    "        // export api",
                    "        this.innerSlider.onWindowResized();",
                    "    }",
                    "",
                    "    render () {",
                    "        const {prefix, arrowPosition, slideDirection, style, className, children} = this.props;",
                    "",
                    "        const sliderProps = obj.pickOthers(['className', 'style', 'slideDirection'], this.props);",
                    "        const slideCount = React.Children.count(children);",
                    "",
                    "        if (slideCount === 0) {",
                    "            // 没有 item 时不显示 slider",
                    "            return null;",
                    "        } else if (slideCount === 1) {",
                    "            // 单个 item 时不显示箭头和控制器",
                    "            sliderProps.arrows = false;",
                    "            sliderProps.autoplay = false;",
                    "            sliderProps.draggable = false;",
                    "        }",
                    "",
                    "        const clazz = classNames([",
                    "            `${prefix}slick`,",
                    "            `${prefix}slick-${arrowPosition}`,",
                    "            `${prefix}slick-${slideDirection}`",
                    "        ], className);",
                    "",
                    "        if (slideDirection === 'ver') {",
                    "            // 向下传递时使用 vertical 属性",
                    "            sliderProps.vertical = true;",
                    "        }",
                    "",
                    "        return (",
                    "            <ConfigProvider rtl={false}>",
                    "                <div dir=\"ltr\" className={clazz} style={style} {...obj.pickOthers({...Slider.propTypes, ...InnerSlider.propTypes}, sliderProps)}>",
                    "                    <InnerSlider ref={InnerSlider => (this.innerSlider = InnerSlider)} {...sliderProps} />",
                    "                </div>",
                    "            </ConfigProvider>",
                    "        );",
                    "    }",
                    "}",
                    ""
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../animate/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// slider mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin slick-arrow-size($arrow-width, $arrow-height, $icon-size) {",
                        "    width: $arrow-width;",
                        "    height: $arrow-height;",
                        "    line-height: $arrow-height;",
                        "",
                        "    .#{$css-prefix}icon {",
                        "        @include icon-size($icon-size);",
                        "    }",
                        "}",
                        "",
                        "@mixin slick-arrow-statement(",
                        "    $icon-color,",
                        "    $icon-color-hover,",
                        "    $icon-color-disabled,",
                        "    $icon-bg-color,",
                        "    $icon-bg-color-hover,",
                        "    $icon-bg-color-disabled,",
                        "    $icon-bg-opacity,",
                        "    $icon-bg-opacity-hover,",
                        "    $icon-bg-opacity-disabled",
                        ") {",
                        "    color: $icon-color;",
                        "    background: $icon-bg-color;",
                        "    opacity: $icon-bg-opacity;",
                        "",
                        "    &:hover {",
                        "        color: $icon-color-hover;",
                        "        background: $icon-bg-color-hover;",
                        "        opacity: $icon-bg-opacity-hover;",
                        "    }",
                        "",
                        "    &.disabled {",
                        "        color: $icon-color-disabled;",
                        "        background: $icon-bg-color-disabled;",
                        "        opacity: $icon-bg-opacity-disabled;",
                        "    }",
                        "}",
                        "",
                        "@mixin slick-arrow-position-hoz($top, $right, $bottom, $left) {",
                        "    top: $top;",
                        "    bottom: $bottom;",
                        "",
                        "    &#{$slick-prefix}-prev {",
                        "        left: $left;",
                        "    }",
                        "",
                        "    &#{$slick-prefix}-next {",
                        "        right: $right;",
                        "    }",
                        "}",
                        "",
                        "@mixin slick-arrow-position-ver($top, $right, $bottom, $left) {",
                        "    right: $right;",
                        "    left: $left;",
                        "",
                        "    &#{$slick-prefix}-prev {",
                        "        top: $top;",
                        "    }",
                        "",
                        "    &#{$slick-prefix}-next {",
                        "        bottom: $bottom;",
                        "    }",
                        "}",
                        "",
                        "@mixin slick-dots-position(",
                        "    $dots-width,",
                        "    $dots-offset,",
                        "    $dots-direction: 'hoz'",
                        ") {",
                        "    width: $dots-width;",
                        "    @if $dots-direction == 'ver' {",
                        "        top: 0;",
                        "        right: $dots-offset;",
                        "        bottom: 0;",
                        "    } @else {",
                        "        bottom: $dots-offset;",
                        "        left: 0;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module slider: 跑马灯",
                        "/// @tag Slider",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $slick-",
                        "/// @classPrefix {prefix}-slick",
                        "/// @order {\"size/dots\":10,\"size/arrow\":11,\"size/track\":12,\"size/slide\":13,\"statement/normal\":10,\"statement/normal/dot\":100,\"statement/normal/arrow\":101,\"statement/hover\":11,\"statement/hover/dot\":110,\"statement/hover/arrow\":111,\"statement/selected\":12,\"statement/selected/dot\":120,\"statement/disabled\":13,\"statement/disabled/arrow\":130}",
                        "////",
                        "",
                        "// slider variables",
                        "// --------------------------------------------------",
                        "",
                        "$slick-prefix: '.' + $css-prefix + 'slick';",
                        "",
                        "// size",
                        "// ---------",
                        "",
                        "/// offset bottom",
                        "/// @namespace size/dots",
                        "$slick-dots-position-bottom: $s-3 !default;",
                        "",
                        "/// offset right",
                        "/// @namespace size/dots",
                        "$slick-dots-position-right: $s-5 !default;",
                        "",
                        "/// dot size",
                        "/// @namespace size/dots",
                        "$slick-dots-diameter: $s-2 !default;",
                        "",
                        "/// dot margin (l, r)",
                        "/// @namespace size/dots",
                        "$slick-dots-margin-lr: $s-1 !default;",
                        "",
                        "/// dot margin (t, b)",
                        "/// @namespace size/dots",
                        "$slick-dots-margin-tb: $s-zero !default;",
                        "",
                        "/// width",
                        "/// @namespace size/arrow",
                        "$slick-arrow-width-m: $s-7 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/arrow",
                        "$slick-arrow-width-l: $s-12 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/arrow",
                        "$slick-arrow-height-m: $s-14 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/arrow",
                        "$slick-arrow-height-l: $s-24 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/arrow",
                        "$slick-ver-arrow-width-m: $s-14 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/arrow",
                        "$slick-ver-arrow-width-l: $s-24 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/arrow",
                        "$slick-ver-arrow-height-m: $s-7 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/arrow",
                        "$slick-ver-arrow-height-l: $s-12 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/arrow",
                        "$slick-arrow-icon-m: $icon-m !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/arrow",
                        "$slick-arrow-icon-l: $icon-xl !default;",
                        "",
                        "/// arrow positon (l,r)",
                        "/// @namespace size/arrow",
                        "$slick-arrow-position-lr-m: $s-1 !default;",
                        "",
                        "/// arrow positon (l,r)",
                        "/// @namespace size/arrow",
                        "$slick-arrow-position-lr-l: $s-2 !default;",
                        "",
                        "/// arrow position (t,b)",
                        "/// @namespace size/arrow",
                        "$slick-ver-arrow-position-tb-m: $s-1 !default;",
                        "",
                        "/// arrow position (t,b)",
                        "/// @namespace size/arrow",
                        "$slick-ver-arrow-position-tb-l: $s-4 !default;",
                        "",
                        "/// padding (l,r)",
                        "/// @namespace size/track",
                        "$slick-track-padding-lr: $s-6 !default;",
                        "",
                        "/// padding (t,b)",
                        "/// @namespace size/track",
                        "$slick-ver-track-padding-tb: $s-6 !default;",
                        "",
                        "// statement",
                        "// ---------",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/dot",
                        "$slick-dots-background-color-normal: $color-black !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/dot",
                        "$slick-dots-background-color-hover: $color-black !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/dot",
                        "$slick-dots-background-color-selected: $color-brand1-6 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/normal/dot",
                        "$slick-dots-background-opacity-normal: .32 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/hover/dot",
                        "$slick-dots-background-opacity-hover: .32 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/selected/dot",
                        "$slick-dots-background-opacity-selected: 1 !default;",
                        "",
                        "/// border width",
                        "/// @type width",
                        "/// @namespace size/dots",
                        "$slick-dots-border-width: $line-zero !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/dot",
                        "$slick-dots-border-color-normal: $color-white !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover/dot",
                        "$slick-dots-border-color-hover: $color-white !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/selected/dot",
                        "$slick-dots-border-color-selected: $color-white !default;",
                        "",
                        "/// border opacity",
                        "/// @type alpha",
                        "/// @namespace statement/normal/dot",
                        "$slick-dots-border-opacity-normal: 1 !default;",
                        "",
                        "/// border opacity",
                        "/// @type alpha",
                        "/// @namespace statement/hover/dot",
                        "$slick-dots-border-opacity-hover: 1 !default;",
                        "",
                        "/// border opacity",
                        "/// @type alpha",
                        "/// @namespace statement/selected/dot",
                        "$slick-dots-border-opacity-selected: 1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal/arrow",
                        "$slick-arrow-icon-color-normal: $color-white !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal/arrow",
                        "$slick-arrow-icon-color-normal-outer: $color-text1-3 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/hover/arrow",
                        "$slick-arrow-icon-color-hover: $color-white !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/hover/arrow",
                        "$slick-arrow-icon-color-hover-outer: $color-text1-4 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/disabled/arrow",
                        "$slick-arrow-icon-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/disabled/arrow",
                        "$slick-arrow-icon-color-disabled-outer: $color-text1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/arrow",
                        "$slick-arrow-bg-color-normal: $color-black !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/arrow",
                        "$slick-arrow-bg-color-hover: $color-black !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/arrow",
                        "$slick-arrow-bg-color-disabled: $color-fill1-1 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/normal/arrow",
                        "$slick-arrow-bg-opacity-normal: .2 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/hover/arrow",
                        "$slick-arrow-bg-opacity-hover: .4 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/disabled/arrow",
                        "$slick-arrow-bg-opacity-disabled: .5 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/arrow",
                        "$slick-arrow-bg-color-normal-outer: $color-transparent !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/arrow",
                        "$slick-arrow-bg-color-hover-outer: $color-transparent !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/arrow",
                        "$slick-arrow-bg-color-disabled-outer: $color-transparent !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/normal/arrow",
                        "$slick-arrow-bg-opacity-normal-outer: .32 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/hover/arrow",
                        "$slick-arrow-bg-opacity-hover-outer: .32 !default;",
                        "",
                        "/// background opacity",
                        "/// @type alpha",
                        "/// @namespace statement/disabled/arrow",
                        "$slick-arrow-bg-opacity-disabled-outer: .32 !default;",
                        "",
                        "/// radius",
                        "/// @namespace size/arrow",
                        "$slick-arrow-corner-radius-outer: $s-zero !default;"
                    ]
                }
            },
            "slick": {
                "arrow.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, {Component} from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import Icon from '../../icon';",
                        "import {obj, func} from '../../util';",
                        "",
                        "/**",
                        " * slider arrow",
                        " * 左右控制箭头",
                        " */",
                        "",
                        "",
                        "const {noop} = func;",
                        "",
                        "export default class Arrow extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        rtl: PropTypes.bool,",
                        "        type: PropTypes.oneOf(['prev', 'next']).isRequired,",
                        "        centerMode: PropTypes.bool,",
                        "        currentSlide: PropTypes.number,",
                        "        infinite: PropTypes.bool,",
                        "        clickHandler: PropTypes.func,",
                        "        slideCount: PropTypes.number,",
                        "        slidesToShow: PropTypes.number,",
                        "        arrow: PropTypes.element,",
                        "        arrowSize: PropTypes.string,",
                        "        arrowPosition: PropTypes.string,",
                        "        arrowDirection: PropTypes.oneOf(['hoz', 'ver']),",
                        "        onMouseEnter: PropTypes.func,",
                        "        onMouseLeave: PropTypes.func,",
                        "        children: PropTypes.node",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        onMouseEnter: noop,",
                        "        onMouseLeave: noop",
                        "    };",
                        "",
                        "    static isDisabled(props) {",
                        "        const {infinite, type, centerMode, currentSlide, slideCount, slidesToShow} = props;",
                        "",
                        "        if (infinite) {",
                        "            return false;",
                        "        }",
                        "",
                        "        // 下一个 index 大于总数？？",
                        "        if (slideCount <= slidesToShow) {",
                        "            return true;",
                        "        }",
                        "",
                        "        // 向前箭头：当前是第 0 个",
                        "        if (type === 'prev') {",
                        "            return currentSlide <= 0;",
                        "        }",
                        "",
                        "        if (centerMode && currentSlide >= (slideCount - 1)) {",
                        "            // 向后箭头：居中模式，当前 index 大于最大 index",
                        "            return true;",
                        "        } else if (currentSlide >= (slideCount - slidesToShow)) {",
                        "            // 向后箭头：普通模式，当前 index 大于 总数 - 下一个 index ？？？",
                        "            return true;",
                        "        }",
                        "",
                        "        return false;",
                        "    }",
                        "",
                        "    static ARROW_ICON_TYPES = {",
                        "        hoz: {prev: 'arrow-left', next: 'arrow-right'},",
                        "        ver: {prev: 'arrow-up', next: 'arrow-down'}",
                        "    };",
                        "",
                        "    handleClick(options, e) {",
                        "        e && e.preventDefault();",
                        "",
                        "        // TODO hack",
                        "        if (options.message === 'prev') {",
                        "            options.message = 'previous';",
                        "        }",
                        "",
                        "        this.props.clickHandler(options, e);",
                        "    }",
                        "",
                        "    render() {",
                        "        const {",
                        "            prefix, type, arrowSize, arrowPosition, arrowDirection,",
                        "            onMouseEnter, onMouseLeave, children",
                        "        } = this.props;",
                        "",
                        "        const others = obj.pickOthers(Arrow.propTypes, this.props);",
                        "        const iconType = Arrow.ARROW_ICON_TYPES[arrowDirection][type];",
                        "        const disabled = Arrow.isDisabled(this.props);",
                        "",
                        "        const arrowClazz = classNames([",
                        "            `${prefix}slick-arrow`,",
                        "            `${prefix}slick-${type}`,",
                        "            arrowPosition,",
                        "            arrowSize,",
                        "            arrowDirection",
                        "        ], {disabled});",
                        "",
                        "        const arrowProps = {",
                        "            ...others,",
                        "            key: type,",
                        "            'data-role': 'none',",
                        "            className: arrowClazz,",
                        "            style: {display: 'block'},",
                        "            onClick: disabled ? null : this.handleClick.bind(this, {message: type}),",
                        "            onMouseEnter: disabled ? null : onMouseEnter,",
                        "            onMouseLeave: disabled ? null : onMouseLeave,",
                        "        };",
                        "",
                        "        if (children) {",
                        "            return React.cloneElement(React.Children.only(children), arrowProps);",
                        "        } else {",
                        "            return <div {...arrowProps}><Icon type={iconType} /></div>;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "dots.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import {func} from '../../util';",
                        "",
                        "/**",
                        " * slider dots",
                        " * 导航锚点",
                        " */",
                        "",
                        "",
                        "const {noop} = func;",
                        "",
                        "export default class Dots extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        currentSlide: PropTypes.number,",
                        "        changeSlide: PropTypes.func,",
                        "        dotsClass: PropTypes.string,",
                        "        slideCount: PropTypes.number,",
                        "        slidesToScroll: PropTypes.number,",
                        "        dotsDirection: PropTypes.oneOf(['hoz', 'ver']),",
                        "        dotsRender: PropTypes.func,",
                        "        triggerType: PropTypes.string",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        changeSlide: noop",
                        "    };",
                        "",
                        "    handleChangeSlide(options, e) {",
                        "        e.preventDefault();",
                        "",
                        "        this.props.changeSlide(options);",
                        "    }",
                        "",
                        "    render () {",
                        "        const {prefix, slideCount, slidesToScroll, currentSlide, dotsClass, dotsDirection, dotsRender, triggerType, rtl} = this.props;",
                        "",
                        "        const dotsClazz = classNames(`${prefix}slick-dots`, dotsDirection, dotsClass);",
                        "        const dotCount = Math.ceil(slideCount / slidesToScroll);",
                        "        const children = [];",
                        "",
                        "        for (let i = 0; i < dotCount; i++) {",
                        "            const leftBound = i * slidesToScroll;",
                        "            const rightBound = leftBound + slidesToScroll - 1;",
                        "            const itemClazz = classNames(`${prefix}slick-dots-item`, {",
                        "                active: (currentSlide >= leftBound) && (currentSlide <= rightBound)",
                        "            });",
                        "            const dotOptions = {",
                        "                message: 'dots',",
                        "                index: i,",
                        "                slidesToScroll,",
                        "                currentSlide",
                        "            };",
                        "            // 除非设置为hover，默认使用click触发",
                        "            const handleProp = {",
                        "                [(triggerType.toLowerCase() === 'hover') ? 'onMouseEnter' : 'onClick']: this.handleChangeSlide.bind(this, dotOptions)",
                        "            };",
                        "",
                        "            let docIndex = i;",
                        "            let currentSlideIndex = i;",
                        "            if (rtl) {",
                        "                docIndex = dotCount - 1 - i;",
                        "                currentSlideIndex = dotCount - 1 - currentSlide;",
                        "            }",
                        "",
                        "            children.push(",
                        "                <li key={i} className={itemClazz} {...handleProp}>",
                        "                    {",
                        "                        (dotsRender instanceof Function) ?",
                        "                            <span>",
                        "                                {dotsRender(docIndex, currentSlideIndex)}",
                        "                            </span> :",
                        "                            <button />",
                        "                    }",
                        "                </li>",
                        "            );",
                        "        }",
                        "",
                        "        return <ul className={dotsClazz}>{children}</ul>;",
                        "    }",
                        "}"
                    ]
                },
                "inner-slider.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import {events, func, obj} from '../../util';",
                        "import EventHandlersMixin from './mixins/event-handlers';",
                        "import HelpersMixin from './mixins/helpers';",
                        "import Arrow from './arrow';",
                        "import Track from './track';",
                        "import Dots from './dots';",
                        "",
                        "/**",
                        " * Slider inner",
                        " */",
                        "",
                        "",
                        "const {noop} = func;",
                        "",
                        "class InnerSlider extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),",
                        "        arrows: PropTypes.bool,",
                        "        arrowSize: PropTypes.oneOf(['medium', 'large']),",
                        "        arrowPosition: PropTypes.oneOf(['inner', 'outer']),",
                        "        arrowDirection: PropTypes.oneOf(['hoz', 'ver']),",
                        "        centerPadding: PropTypes.any,",
                        "        children: PropTypes.any,",
                        "        centerMode: PropTypes.bool,",
                        "        dots: PropTypes.bool,",
                        "        dotsDirection: PropTypes.oneOf(['hoz', 'ver']),",
                        "        dotsClass: PropTypes.string,",
                        "        focusOnSelect: PropTypes.bool,",
                        "        cssEase: PropTypes.string,",
                        "        speed: PropTypes.number,",
                        "        infinite: PropTypes.bool,",
                        "        defaultActiveIndex: PropTypes.number,",
                        "        rtl: PropTypes.bool,",
                        "        slidesToShow: PropTypes.number,",
                        "        lazyLoad: PropTypes.bool,",
                        "        activeIndex: PropTypes.number,",
                        "        slidesToScroll: PropTypes.number,",
                        "        variableWidth: PropTypes.bool,",
                        "        vertical: PropTypes.bool,",
                        "        prevArrow: PropTypes.element,",
                        "        nextArrow: PropTypes.element,",
                        "        dotsRender: PropTypes.func,",
                        "        triggerType: PropTypes.string",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        arrowDirection: 'hoz',",
                        "        triggerType: 'click',",
                        "    }",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        this.state = {",
                        "            animating: false,",
                        "            dragging: false,",
                        "            autoPlayTimer: null,",
                        "            currentDirection: 0,",
                        "            currentLeft: null,",
                        "            currentSlide: 'activeIndex' in props ? props.activeIndex : props.defaultActiveIndex,",
                        "            direction: 1,",
                        "            listWidth: null,",
                        "            listHeight: null,",
                        "            slideCount: null,",
                        "            slideWidth: null,",
                        "            slideHeight: null,",
                        "            swipeLeft: null,",
                        "            touchObject: {",
                        "                startX: 0,",
                        "                startY: 0,",
                        "                curX: 0,",
                        "                curY: 0",
                        "            },",
                        "",
                        "            lazyLoadedList: [],",
                        "",
                        "            // added for react",
                        "            initialized: false,",
                        "            edgeDragged: false,",
                        "            swiped: false, // used by swipeEvent. differentites between touch and swipe.",
                        "            trackStyle: {},",
                        "            trackWidth: 0,",
                        "        };",
                        "",
                        "        // this.filterProps = Object.assign({}, sliderPropTypes, InnerSlider.propTypes);",
                        "",
                        "        func.bindCtx(this, [",
                        "            'onWindowResized',",
                        "            'selectHandler',",
                        "            'changeSlide',",
                        "            'onInnerSliderEnter',",
                        "            'onInnerSliderLeave',",
                        "            'swipeStart',",
                        "            'swipeMove',",
                        "            'swipeEnd',",
                        "        ]);",
                        "    }",
                        "",
                        "    componentWillMount() {",
                        "        this.hasMounted = true;",
                        "",
                        "        const {lazyLoad, children, slidesToShow} = this.props;",
                        "        const {currentSlide} = this.state;",
                        "        const lazyLoadedList = [];",
                        "",
                        "        if (lazyLoad) {",
                        "            for (let i = 0, j = React.Children.count(children); i < j; i++) {",
                        "                if (i >= currentSlide && i < currentSlide + slidesToShow) {",
                        "                    lazyLoadedList.push(i);",
                        "                }",
                        "            }",
                        "",
                        "            if (this.state.lazyLoadedList.length === 0) {",
                        "                this.setState({",
                        "                    lazyLoadedList",
                        "                });",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        // TODO Hack for autoplay -- Inspect Later",
                        "        this.initialize(this.props);",
                        "        this.adaptHeight();",
                        "",
                        "        if (this.props.activeIndex) {",
                        "            this.slickGoTo(this.props.activeIndex);",
                        "        }",
                        "",
                        "        /* istanbul ignore if  */",
                        "        if (window) {",
                        "            // To support server-side rendering",
                        "            events.on(window, 'resize', this.onWindowResized);",
                        "        }",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        if (this.props.defaultActiveIndex !== nextProps.defaultActiveIndex) {",
                        "            this.setState({",
                        "                currentSlide: nextProps.defaultActiveIndex,",
                        "            });",
                        "        }",
                        "",
                        "        if (this.props.activeIndex !== nextProps.activeIndex) {",
                        "            this.slickGoTo(nextProps.activeIndex);",
                        "        } else if (this.state.currentSlide >= nextProps.children.length) {",
                        "            this.update(nextProps);",
                        "            this.changeSlide({",
                        "                message: 'index',",
                        "                index: nextProps.children.length - nextProps.slidesToShow,",
                        "                currentSlide: this.state.currentSlide,",
                        "            });",
                        "        } else {",
                        "            const others = ['children'];",
                        "            const update = !obj.shallowEqual(obj.pickOthers(others, this.props), obj.pickOthers(others, nextProps));",
                        "            if (update) {",
                        "                this.update(nextProps);",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    componentDidUpdate() {",
                        "        this.adaptHeight();",
                        "    }",
                        "",
                        "    componentWillUnmount() {",
                        "        if (this.animationEndCallback) {",
                        "            clearTimeout(this.animationEndCallback);",
                        "        }",
                        "",
                        "        events.off(window, 'resize', this.onWindowResized);",
                        "",
                        "        if (this.state.autoPlayTimer) {",
                        "            clearInterval(this.state.autoPlayTimer);",
                        "        }",
                        "    }",
                        "",
                        "    onWindowResized() {",
                        "        this.update(this.props);",
                        "        // animating state should be cleared while resizing, otherwise autoplay stops working",
                        "        this.setState({ animating: false });",
                        "        clearTimeout(this.animationEndCallback);",
                        "        delete this.animationEndCallback;",
                        "    }",
                        "",
                        "    slickGoTo(slide) {",
                        "        typeof slide === 'number' && this.changeSlide({",
                        "            message: 'index',",
                        "            index: slide,",
                        "            currentSlide: this.state.currentSlide,",
                        "        });",
                        "    }",
                        "",
                        "    onEnterArrow(msg) {",
                        "        this.arrowHoverHandler(msg);",
                        "    }",
                        "",
                        "    onLeaveArrow() {",
                        "        this.arrowHoverHandler();",
                        "    }",
                        "",
                        "    _instanceRefHandler(attr, ref) {",
                        "        this[attr] = ref;",
                        "    }",
                        "",
                        "    render() {",
                        "        const {",
                        "            prefix, animation, arrows, arrowSize, arrowPosition, arrowDirection,",
                        "            dots, dotsClass, cssEase, speed, infinite, centerMode, centerPadding,",
                        "            lazyLoad, dotsDirection, rtl, slidesToShow, slidesToScroll,",
                        "            variableWidth, vertical, focusOnSelect, children, dotsRender, triggerType",
                        "        } = this.props;",
                        "",
                        "        const {",
                        "            currentSlide, lazyLoadedList, slideCount,",
                        "            slideWidth, slideHeight, trackStyle, listHeight,",
                        "            dragging",
                        "        } = this.state;",
                        "",
                        "        // TODO 需要精简一下",
                        "        const trackProps = {",
                        "            prefix,",
                        "            animation,",
                        "            cssEase,",
                        "            speed,",
                        "            infinite,",
                        "            centerMode,",
                        "            focusOnSelect: focusOnSelect ? this.selectHandler : null,",
                        "            currentSlide,",
                        "            lazyLoad,",
                        "            lazyLoadedList,",
                        "            rtl,",
                        "            slideWidth,",
                        "            slideHeight,",
                        "            slidesToShow,",
                        "            slidesToScroll,",
                        "            slideCount,",
                        "            trackStyle,",
                        "            variableWidth,",
                        "            vertical,",
                        "            triggerType",
                        "            // clickHandler: this.changeSlide, unused",
                        "        };",
                        "",
                        "        let dotsEle;",
                        "",
                        "        if (dots === true && slideCount > slidesToShow) {",
                        "            const dotProps = {",
                        "                prefix,",
                        "                rtl,",
                        "                dotsClass,",
                        "                slideCount,",
                        "                slidesToShow,",
                        "                currentSlide,",
                        "                slidesToScroll,",
                        "                dotsDirection,",
                        "                changeSlide: this.changeSlide,",
                        "                dotsRender,",
                        "                triggerType",
                        "            };",
                        "",
                        "            dotsEle = <Dots {...dotProps} />;",
                        "        }",
                        "",
                        "        let prevArrow, nextArrow;",
                        "",
                        "        const arrowProps = {",
                        "            prefix,",
                        "            rtl,",
                        "            arrowSize,",
                        "            arrowPosition,",
                        "            arrowDirection,",
                        "            infinite,",
                        "            centerMode,",
                        "            currentSlide,",
                        "            slideCount,",
                        "            slidesToShow,",
                        "            clickHandler: this.changeSlide",
                        "        };",
                        "",
                        "        if (arrows) {",
                        "            prevArrow = (",
                        "                <Arrow {...arrowProps}",
                        "                    type=\"prev\"",
                        "                    ref={this._instanceRefHandler.bind(this, 'pArrow')}",
                        "                    onMouseEnter={animation ? this.onEnterArrow.bind(this, 'prev') : noop}",
                        "                    onMouseLeave={animation ? this.onLeaveArrow.bind(this, 'prev') : noop}",
                        "                >{this.props.prevArrow}</Arrow>",
                        "            );",
                        "",
                        "            nextArrow = (",
                        "                <Arrow {...arrowProps}",
                        "                    type=\"next\"",
                        "                    ref={this._instanceRefHandler.bind(this, 'nArrow')}",
                        "                    onMouseEnter={animation ? this.onEnterArrow.bind(this, 'next') : noop}",
                        "                    onMouseLeave={animation ? this.onLeaveArrow.bind(this, 'next') : noop}",
                        "                >{this.props.nextArrow}</Arrow>",
                        "            );",
                        "        }",
                        "",
                        "        const verticalHeightStyle = vertical ? {",
                        "            height: listHeight,",
                        "        } : null;",
                        "",
                        "        let centerPaddingStyle;",
                        "        if (centerMode) {",
                        "            centerPaddingStyle = vertical ?",
                        "                { padding: (`${centerPadding} 0px`) } :",
                        "                { padding: (`0px ${centerPadding}`) };",
                        "        }",
                        "",
                        "        return (",
                        "            <div",
                        "                className={`${prefix}slick-container ${prefix}slick-initialized`}",
                        "                onMouseEnter={this.onInnerSliderEnter}",
                        "                onMouseLeave={this.onInnerSliderLeave}",
                        "            >",
                        "                <div",
                        "                    ref={this._instanceRefHandler.bind(this, 'list')}",
                        "                    className={`${prefix}slick-list`}",
                        "                    style={{ ...verticalHeightStyle, ...centerPaddingStyle }}",
                        "                    onMouseDown={this.swipeStart}",
                        "                    onMouseUp={this.swipeEnd}",
                        "                    onTouchStart={this.swipeStart}",
                        "                    onTouchEnd={this.swipeEnd}",
                        "                    onMouseMove={dragging ? this.swipeMove : null}",
                        "                    onMouseLeave={dragging ? this.swipeEnd : null}",
                        "                    onTouchMove={dragging ? this.swipeMove : null}",
                        "                    onTouchCancel={dragging ? this.swipeEnd : null} >",
                        "                    <Track ref={this._instanceRefHandler.bind(this, 'track')} {...trackProps}>",
                        "                        {children}",
                        "                    </Track>",
                        "                </div>",
                        "                {prevArrow}",
                        "                {nextArrow}",
                        "                {dotsEle}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "// extend prototype",
                        "Object.assign(InnerSlider.prototype, HelpersMixin);",
                        "Object.assign(InnerSlider.prototype, EventHandlersMixin);",
                        "",
                        "export default InnerSlider;"
                    ]
                },
                "track.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import {dom} from '../../util';",
                        "",
                        "/**",
                        " * Slider Track",
                        " * 内容轨道",
                        " */",
                        "",
                        "",
                        "const getSlideClasses = (specProps) => {",
                        "    const prefix = specProps.prefix;",
                        "    let slickActive, slickCenter;",
                        "    let centerOffset, index;",
                        "",
                        "    if (specProps.rtl) {",
                        "        index = specProps.slideCount - 1 - specProps.activeIndex;",
                        "    } else {",
                        "        index = specProps.activeIndex;",
                        "    }",
                        "",
                        "    const slickCloned = (index < 0) || (index >= specProps.slideCount);",
                        "    if (specProps.centerMode) {",
                        "        centerOffset = Math.floor(specProps.slidesToShow / 2);",
                        "        slickCenter = (index - specProps.currentSlide) % specProps.slideCount === 0;",
                        "        if ((index > specProps.currentSlide - centerOffset - 1) && (index <= specProps.currentSlide + centerOffset)) {",
                        "            slickActive = true;",
                        "        }",
                        "    } else {",
                        "        slickActive = (specProps.currentSlide <= index) && (index < specProps.currentSlide + specProps.slidesToShow);",
                        "    }",
                        "",
                        "    return classNames(`${prefix}slick-slide`, {",
                        "        [`${prefix}slick-active`]: slickActive,",
                        "        [`${prefix}slick-center`]: slickCenter,",
                        "        [`${prefix}slick-cloned`]: slickCloned,",
                        "    });",
                        "};",
                        "",
                        "const getSlideStyle = function(specProps) {",
                        "    const style = {};",
                        "",
                        "    if (specProps.variableWidth === undefined || specProps.variableWidth === false) {",
                        "        style.width = specProps.slideWidth;",
                        "    }",
                        "",
                        "    if (specProps.animation === 'fade') {",
                        "        style.position = 'relative';",
                        "",
                        "        style.opacity = (specProps.currentSlide === specProps.activeIndex) ? 1 : 0;",
                        "        style.visibility = (specProps.currentSlide >= specProps.activeIndex) ? 'visible' : 'hidden';",
                        "        style.transition = `opacity ${specProps.speed}ms ${specProps.cssEase}`;",
                        "        style.WebkitTransition = `opacity ${specProps.speed}ms ${specProps.cssEase}`;",
                        "",
                        "        if (specProps.vertical) {",
                        "            style.top = -specProps.activeIndex * specProps.slideHeight;",
                        "        } else {",
                        "            style.left = -specProps.activeIndex * specProps.slideWidth;",
                        "        }",
                        "    }",
                        "",
                        "    return style;",
                        "};",
                        "",
                        "const getKey = (child, fallbackKey) => {",
                        "    // key could be a zero",
                        "    return (child.key === null || child.key === undefined) ? fallbackKey : child.key;",
                        "};",
                        "",
                        "const renderSlides = (specProps) => {",
                        "    let key;",
                        "    const slides = [];",
                        "    const preCloneSlides = [];",
                        "    const postCloneSlides = [];",
                        "    const count = React.Children.count(specProps.children);",
                        "    let child;",
                        "",
                        "    React.Children.forEach(specProps.children, (elem, index) => {",
                        "        const childOnClickOptions = {",
                        "            message: 'children',",
                        "            index,",
                        "            slidesToScroll: specProps.slidesToScroll,",
                        "            currentSlide: specProps.currentSlide,",
                        "        };",
                        "",
                        "        if (!specProps.lazyLoad | (specProps.lazyLoad && specProps.lazyLoadedList.indexOf(index) >= 0)) {",
                        "            child = elem;",
                        "        } else {",
                        "            child = elem.key ? <div key={elem.key} /> : <div />;",
                        "        }",
                        "        const childStyle = getSlideStyle({ ...specProps, activeIndex: index });",
                        "        const slickClasses = getSlideClasses({ activeIndex: index, ...specProps });",
                        "        let cssClasses;",
                        "",
                        "        if (child.props.className) {",
                        "            cssClasses = classNames(slickClasses, child.props.className);",
                        "        } else {",
                        "            cssClasses = slickClasses;",
                        "        }",
                        "",
                        "        const onClick = function (e) {",
                        "            // only child === elem, it will has .props.onClick;",
                        "            child.props && child.props.onClick && elem.props.onClick(e);",
                        "            if (specProps.focusOnSelect) {",
                        "                specProps.focusOnSelect(childOnClickOptions);",
                        "            }",
                        "        };",
                        "",
                        "        slides.push(React.cloneElement(child, {",
                        "            key: `original${getKey(child, index)}`,",
                        "            'data-index': index,",
                        "            className: cssClasses,",
                        "            tabIndex: '-1',",
                        "            // server-side render depend on elements of their own style",
                        "            style: !dom.hasDOM ? { outline: 'none', ...childStyle, ...child.props.style, } : { outline: 'none', ...child.props.style, ...childStyle},",
                        "            onClick,",
                        "        }));",
                        "",
                        "        // variableWidth doesn't wrap properly.",
                        "        if (specProps.infinite && specProps.animation !== 'fade') {",
                        "            const infiniteCount = specProps.variableWidth ? specProps.slidesToShow + 1 : specProps.slidesToShow;",
                        "",
                        "            if (index >= (count - infiniteCount)) {",
                        "                key = -(count - index);",
                        "                preCloneSlides.push(React.cloneElement(child, {",
                        "                    key: `precloned${getKey(child, key)}`,",
                        "                    'data-index': key,",
                        "                    className: cssClasses,",
                        "                    style: { ...child.props.style, ...childStyle },",
                        "                }));",
                        "            }",
                        "",
                        "            if (index < infiniteCount) {",
                        "                key = count + index;",
                        "                postCloneSlides.push(React.cloneElement(child, {",
                        "                    key: `postcloned${getKey(child, key)}`,",
                        "                    'data-index': key,",
                        "                    className: cssClasses,",
                        "                    style: { ...child.props.style, ...childStyle },",
                        "                }));",
                        "            }",
                        "        }",
                        "    });",
                        "    // To support server-side rendering",
                        "    if (!dom.hasDOM) {",
                        "        return slides.slice(specProps.currentSlide, specProps.currentSlide + specProps.slidesToShow);",
                        "    }",
                        "    if (specProps.rtl) {",
                        "        return preCloneSlides.concat(slides, postCloneSlides).reverse();",
                        "    } else {",
                        "        return preCloneSlides.concat(slides, postCloneSlides);",
                        "    }",
                        "};",
                        "",
                        "export default class Track extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        trackStyle: PropTypes.object,",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-'",
                        "    };",
                        "",
                        "    render () {",
                        "        const slides = renderSlides(this.props);",
                        "        return (",
                        "            <div className={`${this.props.prefix}slick-track`} style={this.props.trackStyle}>",
                        "                {slides}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "mixins": {
                    "event-handlers.js": {
                        "classes": [],
                        "functions": [],
                        "text": [
                            "import { findDOMNode } from 'react-dom';",
                            "import { getTrackCSS, getTrackLeft, getTrackAnimateCSS } from './trackHelper';",
                            "",
                            "/* istanbul ignore next */",
                            "const EventHandlers = {",
                            "",
                            "    // Event handler for previous and next",
                            "    changeSlide(options) {",
                            "        let slideOffset, targetSlide;",
                            "        const unevenOffset = (this.state.slideCount % this.props.slidesToScroll !== 0);",
                            "        const indexOffset = unevenOffset ? 0 : (this.state.slideCount - this.state.currentSlide) % this.props.slidesToScroll;",
                            "",
                            "        if (options.message === 'previous') {",
                            "            slideOffset = (indexOffset === 0) ? this.props.slidesToScroll : this.props.slidesToShow - indexOffset;",
                            "            targetSlide = this.state.currentSlide - slideOffset;",
                            "        } else if (options.message === 'next') {",
                            "            slideOffset = (indexOffset === 0) ? this.props.slidesToScroll : indexOffset;",
                            "            targetSlide = this.state.currentSlide + slideOffset;",
                            "        } else if (options.message === 'dots' || options.message === 'children') {",
                            "            // Click on dots",
                            "            targetSlide = options.index * options.slidesToScroll;",
                            "            if (targetSlide === options.currentSlide) {",
                            "                return;",
                            "            }",
                            "        } else if (options.message === 'index') {",
                            "            targetSlide = options.index;",
                            "            if (targetSlide === options.currentSlide) {",
                            "                return;",
                            "            }",
                            "        }",
                            "        this.slideHandler(targetSlide);",
                            "    },",
                            "",
                            "    // Accessiblity handler for previous and next",
                            "    keyHandler(e) {",
                            "        //Dont slide if the cursor is inside the form fields and arrow keys are pressed",
                            "        if (!e.target.tagName.match('TEXTAREA|INPUT|SELECT')) {",
                            "            if (e.keyCode === 37 && this.props.accessibility === true) {",
                            "                this.changeSlide({",
                            "                    message: this.props.rtl === true ? 'next' : 'previous'",
                            "                });",
                            "            } else if (e.keyCode === 39 && this.props.accessibility === true) {",
                            "                this.changeSlide({",
                            "                    message: this.props.rtl === true ? 'previous' : 'next'",
                            "                });",
                            "            }",
                            "        }",
                            "    },",
                            "",
                            "    // Focus on selecting a slide (click handler on track)",
                            "    selectHandler(options) {",
                            "        this.changeSlide(options);",
                            "    },",
                            "",
                            "    swipeStart(e) {",
                            "        if ((this.props.swipe === false) || ('ontouchend' in document && this.props.swipe === false)) {",
                            "            return;",
                            "        } else if (this.props.draggable === false && e.type.indexOf('mouse') !== -1) {",
                            "            return;",
                            "        }",
                            "        const posX = (e.touches !== undefined) ? e.touches[0].pageX : e.clientX;",
                            "        const posY = (e.touches !== undefined) ? e.touches[0].pageY : e.clientY;",
                            "        this.setState({",
                            "            dragging: true,",
                            "            touchObject: {",
                            "                startX: posX,",
                            "                startY: posY,",
                            "                curX: posX,",
                            "                curY: posY",
                            "            }",
                            "        });",
                            "    },",
                            "",
                            "    swipeMove(e) {",
                            "        if (!this.state.dragging) {",
                            "            return;",
                            "        }",
                            "        if (this.state.animating) {",
                            "            return;",
                            "        }",
                            "        const touchObject = this.state.touchObject;",
                            "",
                            "        const curLeft = getTrackLeft({",
                            "            slideIndex: this.state.currentSlide,",
                            "            trackRef: this.refs.track,",
                            "            ...this.props,",
                            "            ...this.state",
                            "        });",
                            "",
                            "        touchObject.curX = (e.touches) ? e.touches[0].pageX : e.clientX;",
                            "        touchObject.curY = (e.touches) ? e.touches[0].pageY : e.clientY;",
                            "        touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));",
                            "",
                            "        const positionOffset = (this.props.rtl === false ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);",
                            "",
                            "        const currentSlide = this.state.currentSlide;",
                            "        const dotCount = Math.ceil(this.state.slideCount / this.props.slidesToScroll);",
                            "        const swipeDirection = this.swipeDirection(this.state.touchObject);",
                            "        let touchSwipeLength = touchObject.swipeLength;",
                            "",
                            "        if (this.props.infinite === false) {",
                            "            if ((currentSlide === 0 && swipeDirection === 'right') || (currentSlide + 1 >= dotCount && swipeDirection === 'left')) {",
                            "                touchSwipeLength = touchObject.swipeLength * this.props.edgeFriction;",
                            "",
                            "                if (this.state.edgeDragged === false && this.props.edgeEvent) {",
                            "                    this.props.edgeEvent(swipeDirection);",
                            "                    this.setState({ edgeDragged: true });",
                            "                }",
                            "            }",
                            "        }",
                            "",
                            "        if (this.state.swiped === false && this.props.swipeEvent) {",
                            "            this.props.swipeEvent(swipeDirection);",
                            "            this.setState({ swiped: true });",
                            "        }",
                            "",
                            "        const swipeLeft = curLeft + touchSwipeLength * positionOffset;",
                            "        this.setState({",
                            "            touchObject: touchObject,",
                            "            swipeLeft: swipeLeft,",
                            "            trackStyle: getTrackCSS({ left: swipeLeft, ...this.props, ...this.state })",
                            "        });",
                            "",
                            "        if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {",
                            "            return;",
                            "        }",
                            "        if (touchObject.swipeLength > 4) {",
                            "            e.preventDefault();",
                            "        }",
                            "    },",
                            "",
                            "    getNavigableIndexes() {",
                            "        let max;",
                            "        let breakPoint = 0;",
                            "        let counter = 0;",
                            "        const indexes = [];",
                            "",
                            "        if (!this.props.infinite) {",
                            "            max = this.state.slideCount;",
                            "        } else {",
                            "            breakPoint = this.props.slidesToShow * -1;",
                            "            counter = this.props.slidesToShow * -1;",
                            "            max = this.state.slideCount * 2;",
                            "        }",
                            "",
                            "        while (breakPoint < max) {",
                            "            indexes.push(breakPoint);",
                            "            breakPoint = counter + this.props.slidesToScroll;",
                            "",
                            "            counter += this.props.slidesToScroll <= this.props.slidesToShow ?",
                            "                this.props.slidesToScroll : this.props.slidesToShow;",
                            "        }",
                            "",
                            "        return indexes;",
                            "    },",
                            "",
                            "    checkNavigable(index) {",
                            "        const navigables = this.getNavigableIndexes();",
                            "        let prevNavigable = 0;",
                            "",
                            "        if (index > navigables[navigables.length - 1]) {",
                            "            index = navigables[navigables.length - 1];",
                            "        } else {",
                            "            for (const n in navigables) {",
                            "                if (index < navigables[n]) {",
                            "                    index = prevNavigable;",
                            "                    break;",
                            "                }",
                            "",
                            "                prevNavigable = navigables[n];",
                            "            }",
                            "        }",
                            "",
                            "        return index;",
                            "    },",
                            "",
                            "    getSlideCount() {",
                            "        const centerOffset = this.props.centerMode ? this.state.slideWidth * Math.floor(this.props.slidesToShow / 2) : 0;",
                            "        if (this.props.swipeToSlide) {",
                            "            let swipedSlide;",
                            "            const slickList = findDOMNode(this.list);",
                            "",
                            "            const slides = slickList.querySelectorAll(`${this.props.prefix}slick-slide`);",
                            "",
                            "            Array.from(slides).every((slide) => {",
                            "                if (!this.props.vertical) {",
                            "                    if (slide.offsetLeft - centerOffset + (this.getWidth(slide) / 2) > this.state.swipeLeft * -1) {",
                            "                        swipedSlide = slide;",
                            "                        return false;",
                            "                    }",
                            "                } else if (slide.offsetTop + (this.getHeight(slide) / 2) > this.state.swipeLeft * -1) {",
                            "                    swipedSlide = slide;",
                            "                    return false;",
                            "                }",
                            "",
                            "                return true;",
                            "            });",
                            "            const slidesTraversed = Math.abs(swipedSlide.dataset.index - this.state.currentSlide) || 1;",
                            "            return slidesTraversed;",
                            "",
                            "        } else {",
                            "            return this.props.slidesToScroll;",
                            "        }",
                            "    },",
                            "",
                            "    swipeEnd(e) {",
                            "        if (!this.state.dragging) {",
                            "            if (this.props.swipe) {",
                            "                e.preventDefault();",
                            "            }",
                            "            return;",
                            "        }",
                            "        const touchObject = this.state.touchObject;",
                            "        let minSwipe = this.state.listWidth / this.props.touchThreshold;",
                            "        const swipeDirection = this.swipeDirection(touchObject);",
                            "",
                            "        if (this.props.verticalSwiping) {",
                            "            minSwipe = this.state.listHeight / this.props.touchThreshold;",
                            "        }",
                            "",
                            "        // reset the state of touch related state variables.",
                            "        this.setState({",
                            "            dragging: false,",
                            "            edgeDragged: false,",
                            "            swiped: false,",
                            "            swipeLeft: null,",
                            "            touchObject: {}",
                            "        });",
                            "",
                            "        if (!touchObject.swipeLength) {",
                            "            return;",
                            "        }",
                            "",
                            "        if (touchObject.swipeLength > minSwipe) {",
                            "            e.preventDefault();",
                            "",
                            "            let slideCount;",
                            "            let newSlide;",
                            "",
                            "            switch (swipeDirection) {",
                            "                case 'left':",
                            "                case 'down':",
                            "                    newSlide = this.state.currentSlide + this.getSlideCount();",
                            "                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;",
                            "                    this.setState({ currentDirection: 0 });",
                            "                    break;",
                            "                case 'right':",
                            "                case 'up':",
                            "                    newSlide = this.state.currentSlide - this.getSlideCount();",
                            "                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;",
                            "                    this.setState({ currentDirection: 1 });",
                            "                    break;",
                            "                default:",
                            "                    slideCount = this.state.currentSlide;",
                            "            }",
                            "            this.slideHandler(slideCount);",
                            "        } else {",
                            "            // Adjust the track back to it's original position.",
                            "            const currentLeft = getTrackLeft({",
                            "                slideIndex: this.state.currentSlide,",
                            "                trackRef: this.track,",
                            "                ...this.props,",
                            "                ...this.state",
                            "            });",
                            "",
                            "            this.setState({",
                            "                trackStyle: getTrackAnimateCSS({ left: currentLeft, ...this.props, ...this.state })",
                            "            });",
                            "        }",
                            "    },",
                            "",
                            "    onInnerSliderEnter() {",
                            "        if (this.props.autoplay && this.props.pauseOnHover) {",
                            "            this.pause();",
                            "        }",
                            "    },",
                            "",
                            "    onInnerSliderLeave() {",
                            "        if (this.props.autoplay && this.props.pauseOnHover) {",
                            "            this.autoPlay();",
                            "        }",
                            "    }",
                            "};",
                            "",
                            "export default EventHandlers;"
                        ]
                    },
                    "helpers.js": {
                        "classes": [],
                        "functions": [],
                        "text": [
                            "import React from 'react';",
                            "import ReactDOM from 'react-dom';",
                            "import { getTrackCSS, getTrackLeft, getTrackAnimateCSS } from './trackHelper';",
                            "",
                            "const helpers = {",
                            "",
                            "    initialize (props) {",
                            "        const slickList = ReactDOM.findDOMNode(this.list);",
                            "        const slideCount = React.Children.count(props.children);",
                            "        const listWidth = this.getWidth(slickList);",
                            "        const trackWidth = this.getWidth(ReactDOM.findDOMNode(this.track));",
                            "        let slideWidth;",
                            "",
                            "        if (!props.vertical) {",
                            "            const centerPaddingAdj = props.centerMode && (parseInt(props.centerPadding) * 2);",
                            "            slideWidth = (listWidth - centerPaddingAdj) / props.slidesToShow;",
                            "        } else {",
                            "            slideWidth = listWidth;",
                            "        }",
                            "",
                            "        const slideHeight = this.getHeight(slickList.querySelector('[data-index=\"0\"]'));",
                            "        const listHeight = slideHeight * props.slidesToShow;",
                            "",
                            "        const slidesToShow = props.slidesToShow || 1;",
                            "        const currentSlide = props.rtl ? slideCount - 1 - (slidesToShow - 1)  - props.defaultActiveIndex : props.defaultActiveIndex;",
                            "",
                            "        this.setState({",
                            "            slideCount,",
                            "            slideWidth,",
                            "            listWidth,",
                            "            trackWidth,",
                            "            currentSlide,",
                            "            slideHeight,",
                            "            listHeight,",
                            "        }, () => {",
                            "",
                            "            const targetLeft = getTrackLeft({",
                            "                slideIndex: this.state.currentSlide,",
                            "                trackRef: this.track,",
                            "                ...props,",
                            "                ...this.state",
                            "            });",
                            "            // getCSS function needs previously set state",
                            "            const trackStyle = getTrackCSS({ left: targetLeft, ...props, ...this.state });",
                            "",
                            "            this.setState({ trackStyle: trackStyle });",
                            "",
                            "            this.autoPlay(); // once we're set up, trigger the initial autoplay.",
                            "        });",
                            "    },",
                            "",
                            "    update (props) {",
                            "        this.initialize(props);",
                            "    },",
                            "",
                            "    getWidth (elem) {",
                            "        return elem.getBoundingClientRect().width || elem.offsetWidth;",
                            "    },",
                            "",
                            "    getHeight (elem) {",
                            "        return elem.getBoundingClientRect().height || elem.offsetHeight;",
                            "    },",
                            "",
                            "    adaptHeight () {",
                            "        if (this.props.adaptiveHeight) {",
                            "            const selector = `[data-index=\"${this.state.currentSlide}\"]`;",
                            "            if (this.list) {",
                            "                const slickList = ReactDOM.findDOMNode(this.list);",
                            "                const listHeight = slickList.querySelector(selector).offsetHeight;",
                            "                slickList.style.height = `${listHeight}px`;",
                            "            }",
                            "        }",
                            "    },",
                            "",
                            "    canGoNext (opts) {",
                            "        let canGo = true;",
                            "        if (!opts.infinite) {",
                            "            if (opts.centerMode) {",
                            "                if (opts.currentSlide >= (opts.slideCount - 1)) {",
                            "                    canGo = false;",
                            "                }",
                            "            } else if (opts.slideCount <= opts.slidesToShow ||",
                            "                    opts.currentSlide >= (opts.slideCount - opts.slidesToShow)) {",
                            "                // check if all slides are shown in slider",
                            "                canGo = false;",
                            "            }",
                            "        }",
                            "        return canGo;",
                            "    },",
                            "",
                            "    slideHandler (index) {",
                            "        const { rtl } = this.props;",
                            "",
                            "        // Functionality of animateSlide and postSlide is merged into this function",
                            "        let targetSlide, currentSlide;",
                            "        let callback;",
                            "",
                            "        if (this.props.waitForAnimate && this.state.animating) {",
                            "            return;",
                            "        }",
                            "",
                            "        if (this.props.animation === 'fade') {",
                            "            currentSlide = this.state.currentSlide;",
                            "",
                            "            // don't change slide if it's not infinite and current slide is the first or last slide'",
                            "            if (this.props.infinite === false && (index < 0 || index >= this.state.slideCount)) {",
                            "                return;",
                            "            }",
                            "",
                            "            //  Shifting targetSlide back into the range",
                            "            if (index < 0) {",
                            "                targetSlide = index + this.state.slideCount;",
                            "            } else if (index >= this.state.slideCount) {",
                            "                targetSlide = index - this.state.slideCount;",
                            "            } else {",
                            "                targetSlide = index;",
                            "            }",
                            "",
                            "            if (this.props.lazyLoad && this.state.lazyLoadedList.indexOf(targetSlide) < 0) {",
                            "                this.setState({",
                            "                    lazyLoadedList: this.state.lazyLoadedList.concat(targetSlide)",
                            "                });",
                            "            }",
                            "",
                            "            callback = () => {",
                            "                this.setState({",
                            "                    animating: false",
                            "                });",
                            "                this.props.onChange(targetSlide);",
                            "                delete this.animationEndCallback;",
                            "            };",
                            "",
                            "            this.setState({",
                            "                animating: true,",
                            "                currentSlide: targetSlide",
                            "            }, function() {",
                            "                this.animationEndCallback = setTimeout(callback, this.props.speed + 20);",
                            "            });",
                            "",
                            "            this.autoPlay();",
                            "            return;",
                            "        }",
                            "",
                            "        targetSlide = index;",
                            "",
                            "        if (rtl) {",
                            "            if (targetSlide < 0) {",
                            "                if (this.props.infinite === false) {",
                            "                    currentSlide = 0;",
                            "                } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {",
                            "                    if (targetSlide + this.props.slidesToScroll <= 0) {",
                            "                        currentSlide = this.state.slideCount + targetSlide;",
                            "                        targetSlide = this.state.slideCount - this.props.slidesToScroll;",
                            "                    } else {",
                            "                        currentSlide = targetSlide = 0;",
                            "                    }",
                            "                } else {",
                            "                    // this.state.slideCount % this.props.slidesToScroll",
                            "                    currentSlide =  this.state.slideCount + targetSlide;",
                            "                }",
                            "            } else if (targetSlide >= this.state.slideCount) {",
                            "                if (this.props.infinite === false) {",
                            "                    currentSlide = this.state.slideCount - this.props.slidesToShow;",
                            "                } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {",
                            "                    currentSlide = 0;",
                            "                } else {",
                            "                    currentSlide = targetSlide - this.state.slideCount;",
                            "                }",
                            "            } else {",
                            "                currentSlide = targetSlide;",
                            "            }",
                            "        } else if (targetSlide < 0) {",
                            "            if (this.props.infinite === false) {",
                            "                currentSlide = 0;",
                            "            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {",
                            "                currentSlide = this.state.slideCount - (this.state.slideCount % this.props.slidesToScroll);",
                            "            } else {",
                            "                currentSlide = this.state.slideCount + targetSlide;",
                            "            }",
                            "        } else if (targetSlide >= this.state.slideCount) {",
                            "            if (this.props.infinite === false) {",
                            "                currentSlide = this.state.slideCount - this.props.slidesToShow;",
                            "            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {",
                            "                currentSlide = 0;",
                            "            } else {",
                            "                currentSlide = targetSlide - this.state.slideCount;",
                            "            }",
                            "        } else {",
                            "            currentSlide = targetSlide;",
                            "        }",
                            "",
                            "",
                            "        let targetLeft = getTrackLeft({",
                            "            slideIndex: targetSlide,",
                            "            trackRef: this.track,",
                            "            ...this.props,",
                            "            ...this.state",
                            "        });",
                            "",
                            "        const currentLeft = getTrackLeft({",
                            "            slideIndex: currentSlide,",
                            "            trackRef: this.track,",
                            "            ...this.props,",
                            "            ...this.state",
                            "        });",
                            "",
                            "        if (this.props.infinite === false) {",
                            "            targetLeft = currentLeft;",
                            "        }",
                            "",
                            "        if (this.props.lazyLoad) {",
                            "            let loaded = true;",
                            "            const slidesToLoad = [];",
                            "",
                            "            const sliderIndex = (targetSlide < 0 ? this.state.slideCount + targetSlide : currentSlide);",
                            "",
                            "            for (let i = sliderIndex; i < sliderIndex + this.props.slidesToShow; i++) {",
                            "                let k = i;",
                            "                if (rtl) {",
                            "                    k =",
                            "                    i >= this.state.slideCount ?",
                            "                        this.state.slideCount * 2 - i - 1 :",
                            "                        this.state.slideCount - i - 1;",
                            "",
                            "                }",
                            "",
                            "                loaded = loaded && (this.state.lazyLoadedList.indexOf(k) >= 0);",
                            "                if (!loaded) {",
                            "                    slidesToLoad.push(k);",
                            "                }",
                            "            }",
                            "            if (!loaded) {",
                            "                this.setState({",
                            "                    lazyLoadedList: this.state.lazyLoadedList.concat(slidesToLoad)",
                            "                });",
                            "            }",
                            "        }",
                            "",
                            "        // Slide Transition happens here.",
                            "        // animated transition happens to target Slide and",
                            "        // non - animated transition happens to current Slide",
                            "        // If CSS transitions are false, directly go the current slide.",
                            "        /* istanbul ignore if */",
                            "        if (this.props.useCSS === false) {",
                            "            this.setState({",
                            "                currentSlide: currentSlide,",
                            "                trackStyle: getTrackCSS({ left: currentLeft, ...this.props, ...this.state })",
                            "            }, () => {",
                            "                this.props.onChange(currentSlide);",
                            "            });",
                            "",
                            "        } else {",
                            "",
                            "            const nextStateChanges = {",
                            "                animating: false,",
                            "                currentSlide: currentSlide,",
                            "                trackStyle: getTrackCSS({ left: currentLeft, ...this.props, ...this.state }),",
                            "                swipeLeft: null",
                            "            };",
                            "",
                            "            callback = () => {",
                            "                this.setState(nextStateChanges);",
                            "                this.props.onChange(currentSlide);",
                            "                delete this.animationEndCallback;",
                            "            };",
                            "",
                            "            this.setState({",
                            "                animating: true,",
                            "                currentSlide: currentSlide,",
                            "                trackStyle: getTrackAnimateCSS({ left: targetLeft, ...this.props, ...this.state }),",
                            "            }, function() {",
                            "                this.animationEndCallback = setTimeout(callback, this.props.speed + 20);",
                            "            });",
                            "",
                            "        }",
                            "",
                            "        this.autoPlay();",
                            "    },",
                            "",
                            "    // 鼠标悬浮在 arrow 上时作出动画反馈",
                            "    arrowHoverHandler(msg) {",
                            "        const offset = 30; // slide 的位置偏移量",
                            "        const targetLeft = getTrackLeft({",
                            "            slideIndex: this.state.currentSlide,",
                            "            trackRef: this.track,",
                            "            ...this.props,",
                            "            ...this.state",
                            "        });",
                            "",
                            "        let left;",
                            "        /* istanbul ignore next */",
                            "        if (msg === 'next') {",
                            "            left = targetLeft - offset;",
                            "        } else if (msg === 'prev') {",
                            "            left = targetLeft + offset;",
                            "        } else {",
                            "            left = targetLeft;",
                            "        }",
                            "",
                            "        this.setState({",
                            "            trackStyle: getTrackAnimateCSS({",
                            "                left, ...this.props, ...this.state",
                            "            }),",
                            "        });",
                            "    },",
                            "",
                            "    swipeDirection (touchObject) {",
                            "",
                            "        /* istanbul ignore next */",
                            "        let swipeAngle;",
                            "        /* istanbul ignore next */",
                            "        const xDist = touchObject.startX - touchObject.curX;",
                            "        /* istanbul ignore next */",
                            "        const yDist = touchObject.startY - touchObject.curY;",
                            "        /* istanbul ignore next */",
                            "        const r = Math.atan2(yDist, xDist);",
                            "        /* istanbul ignore next */",
                            "        swipeAngle = Math.round(r * 180 / Math.PI);",
                            "        /* istanbul ignore next */",
                            "        if (swipeAngle < 0) {",
                            "            swipeAngle = 360 - Math.abs(swipeAngle);",
                            "        }",
                            "        /* istanbul ignore next */",
                            "        if ((swipeAngle <= 45) && (swipeAngle >= 0) || (swipeAngle <= 360) && (swipeAngle >= 315)) {",
                            "            return (this.props.rtl === false ? 'left' : 'right');",
                            "        }",
                            "        /* istanbul ignore next */",
                            "        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {",
                            "            return (this.props.rtl === false ? 'right' : 'left');",
                            "        }",
                            "        /* istanbul ignore next */",
                            "        if (this.props.verticalSwiping === true) {",
                            "            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {",
                            "                return 'down';",
                            "            } else {",
                            "                return 'up';",
                            "            }",
                            "        }",
                            "",
                            "        /* istanbul ignore next */",
                            "        return 'vertical';",
                            "    },",
                            "",
                            "    play () {",
                            "        let nextIndex;",
                            "        if (!this.hasMounted) {",
                            "            /* istanbul ignore next */",
                            "            return false;",
                            "        }",
                            "        if (this.props.rtl) {",
                            "            nextIndex = this.state.currentSlide - this.props.slidesToScroll;",
                            "        } else if (this.canGoNext({ ...this.props, ...this.state })) {",
                            "            nextIndex = this.state.currentSlide + this.props.slidesToScroll;",
                            "        } else {",
                            "            return false;",
                            "        }",
                            "        this.slideHandler(nextIndex);",
                            "    },",
                            "",
                            "    autoPlay () {",
                            "        if (this.state.autoPlayTimer) {",
                            "            clearTimeout(this.state.autoPlayTimer);",
                            "        }",
                            "        if (this.props.autoplay) {",
                            "            this.setState({",
                            "                autoPlayTimer: setTimeout(this.play.bind(this), this.props.autoplaySpeed)",
                            "            });",
                            "        }",
                            "    },",
                            "",
                            "    pause () {",
                            "        /* istanbul ignore next */",
                            "        if (this.state.autoPlayTimer) {",
                            "            clearTimeout(this.state.autoPlayTimer);",
                            "            this.setState({",
                            "                autoPlayTimer: null",
                            "            });",
                            "        }",
                            "    }",
                            "};",
                            "",
                            "export default helpers;"
                        ]
                    },
                    "trackHelper.js": {
                        "classes": [],
                        "functions": [],
                        "text": [
                            "import ReactDOM from 'react-dom';",
                            "",
                            "const checkSpecKeys = (spec, keysArray) => {",
                            "    return keysArray.reduce((value, key) => {",
                            "        return value && spec.hasOwnProperty(key);",
                            "    }, true) ? null : console.error('Keys Missing', spec);/*eslint no-console:0*/",
                            "};",
                            "",
                            "export const getTrackCSS = (spec) => {",
                            "    checkSpecKeys(spec, [",
                            "        'left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth'",
                            "    ]);",
                            "",
                            "    let trackWidth;",
                            "    let trackHeight;",
                            "",
                            "    const trackChildren = (spec.slideCount + 2 * spec.slidesToShow);",
                            "",
                            "    if (!spec.vertical) {",
                            "        if (spec.variableWidth) {",
                            "            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;",
                            "        } else if (spec.centerMode) {",
                            "            trackWidth = (spec.slideCount + 2 * (spec.slidesToShow + 1)) * spec.slideWidth;",
                            "        } else {",
                            "            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;",
                            "        }",
                            "    } else {",
                            "        trackHeight = trackChildren * spec.slideHeight;",
                            "    }",
                            "",
                            "    let style = {",
                            "        opacity: 1,",
                            "    };",
                            "",
                            "    const transform = {",
                            "        WebkitTransform: !spec.vertical ? `translate3d(${spec.left}px, 0px, 0px)` : `translate3d(0px, ${spec.left}px, 0px)`,",
                            "        transform: !spec.vertical ? `translate3d(${spec.left}px, 0px, 0px)` : `translate3d(0px, ${spec.left}px, 0px)`,",
                            "        transition: '',",
                            "        WebkitTransition: '',",
                            "        msTransform: !spec.vertical ? `translateX(${spec.left}px)` : `translateY(${spec.left}px)`,",
                            "    };",
                            "",
                            "    if (trackWidth) {",
                            "        style = { ...style, width: trackWidth};",
                            "    }",
                            "",
                            "    if (trackHeight) {",
                            "        style = { ...style, height: trackHeight };",
                            "    }",
                            "",
                            "    if (spec.animation !== 'fade') {",
                            "        style = { ...style, ...transform };",
                            "    }",
                            "",
                            "    return style;",
                            "};",
                            "",
                            "export const getTrackAnimateCSS = (spec) => {",
                            "    checkSpecKeys(spec, [",
                            "        'left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth', 'speed', 'cssEase'",
                            "    ]);",
                            "",
                            "    const style = getTrackCSS(spec);",
                            "    // useCSS is true by default so it can be undefined",
                            "    style.WebkitTransition = `-webkit-transform ${spec.speed}ms ${spec.cssEase}`;",
                            "    style.transition = `transform ${spec.speed}ms ${spec.cssEase}`;",
                            "    return style;",
                            "};",
                            "",
                            "export const getTrackLeft = function(spec) {",
                            "",
                            "    checkSpecKeys(spec, [",
                            "        'slideIndex', 'trackRef', 'infinite', 'centerMode', 'slideCount', 'slidesToShow',",
                            "        'slidesToScroll', 'slideWidth', 'listWidth', 'variableWidth', 'slideHeight' ]);",
                            "",
                            "    let slideOffset = 0;",
                            "    let targetLeft;",
                            "    let targetSlide;",
                            "    let verticalOffset = 0;",
                            "",
                            "    if (spec.animation === 'fade') {",
                            "        return 0;",
                            "    }",
                            "",
                            "    if (spec.infinite) {",
                            "        if (spec.slideCount > spec.slidesToShow) {",
                            "            slideOffset = (spec.slideWidth * spec.slidesToShow) * -1;",
                            "            verticalOffset = (spec.slideHeight * spec.slidesToShow) * -1;",
                            "        }",
                            "        if (spec.slideCount % spec.slidesToScroll !== 0) {",
                            "            let condition = spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;",
                            "",
                            "            if (spec.rtl) {",
                            "                const slideIndex = spec.slideIndex >= spec.slideCount ? spec.slideCount - spec.slideIndex : spec.slideIndex;",
                            "                condition = slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;",
                            "            }",
                            "            if (condition) {",
                            "                if (spec.slideIndex > spec.slideCount) {",
                            "                    slideOffset = ((spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideWidth) * -1;",
                            "                    verticalOffset = ((spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideHeight) * -1;",
                            "                } else {",
                            "                    slideOffset = ((spec.slideCount % spec.slidesToScroll) * spec.slideWidth) * -1;",
                            "                    verticalOffset = ((spec.slideCount % spec.slidesToScroll) * spec.slideHeight) * -1;",
                            "                }",
                            "            }",
                            "        }",
                            "    } else {",
                            "        /* eslint-disable no-lonely-if */",
                            "        if (spec.slideCount % spec.slidesToScroll !== 0) {",
                            "            if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {",
                            "                const slidesToOffset = spec.slidesToShow - (spec.slideCount % spec.slidesToScroll);",
                            "                slideOffset = slidesToOffset * spec.slideWidth;",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    if (spec.centerMode) {",
                            "        if (spec.infinite) {",
                            "            slideOffset += spec.slideWidth * Math.floor(spec.slidesToShow / 2);",
                            "        } else {",
                            "            slideOffset = spec.slideWidth * Math.floor(spec.slidesToShow / 2);",
                            "        }",
                            "    }",
                            "",
                            "    if (!spec.vertical) {",
                            "        targetLeft = ((spec.slideIndex * spec.slideWidth) * -1) + slideOffset;",
                            "    } else {",
                            "        targetLeft = ((spec.slideIndex * spec.slideHeight) * -1) + verticalOffset;",
                            "    }",
                            "",
                            "    if (spec.variableWidth === true) {",
                            "        let targetSlideIndex;",
                            "        if (spec.slideCount <= spec.slidesToShow || spec.infinite === false) {",
                            "            targetSlide = ReactDOM.findDOMNode(spec.trackRef).childNodes[spec.slideIndex];",
                            "        } else {",
                            "            targetSlideIndex = (spec.slideIndex + spec.slidesToShow);",
                            "            targetSlide = ReactDOM.findDOMNode(spec.trackRef).childNodes[targetSlideIndex];",
                            "        }",
                            "        targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;",
                            "        if (spec.centerMode === true) {",
                            "            if (spec.infinite === false) {",
                            "                targetSlide = ReactDOM.findDOMNode(spec.trackRef).children[spec.slideIndex];",
                            "            } else {",
                            "                targetSlide = ReactDOM.findDOMNode(spec.trackRef).children[(spec.slideIndex + spec.slidesToShow + 1)];",
                            "            }",
                            "",
                            "            if (targetSlide) {",
                            "                targetLeft = targetSlide.offsetLeft * -1 + (spec.listWidth - targetSlide.offsetWidth) / 2;",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    return targetLeft;",
                            "};"
                        ]
                    }
                }
            }
        },
        "split-button": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import Icon from '../icon';",
                    "import Button from '../button';",
                    "import Overlay from '../overlay';",
                    "import Menu from '../menu';",
                    "import ConfigProvider from '../config-provider';",
                    "import { dom, obj, func } from '../util';",
                    "",
                    "const { Popup } = Overlay;",
                    "",
                    "/**",
                    " * SplitButton",
                    " */",
                    "class SplitButton extends React.Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 按钮的类型",
                    "         */",
                    "        type: PropTypes.oneOf(['normal', 'primary', 'secondary']),",
                    "        /**",
                    "         * 按钮组的尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 主按钮的文案",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 设置标签类型",
                    "         */",
                    "        component: PropTypes.oneOf(['button', 'a']),",
                    "        /**",
                    "         * 是否为幽灵按钮",
                    "         */",
                    "        ghost: PropTypes.oneOf(['light', 'dark', false, true]),",
                    "        /**",
                    "         * 默认激活的菜单项（用法同 Menu 非受控）",
                    "         */",
                    "        defaultSelectedKeys: PropTypes.array,",
                    "        /**",
                    "         * 激活的菜单项（用法同 Menu 受控）",
                    "         */",
                    "        selectedKeys: PropTypes.array,",
                    "        /**",
                    "         * 菜单的选择模式",
                    "         */",
                    "        selectMode: PropTypes.oneOf(['single', 'multiple']),",
                    "        /**",
                    "         * 选择菜单项时的回调，参考 Menu",
                    "         */",
                    "        onSelect: PropTypes.func,",
                    "        /**",
                    "         * 点击菜单项时的回调，参考 Menu",
                    "         */",
                    "        onItemClick: PropTypes.func,",
                    "        /**",
                    "         * 触发按钮的属性（支持 Button 的所有属性透传）",
                    "         */",
                    "        triggerProps: PropTypes.object,",
                    "        /**",
                    "         * 弹层菜单的宽度是否与按钮组一致",
                    "         */",
                    "        autoWidth: PropTypes.bool,",
                    "        /**",
                    "         * 弹层是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层显示状态变化时的回调函数",
                    "         * @param {Boolean} visible 弹层显示状态",
                    "         * @param {String} reason 触发弹层显示和隐藏的来源",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层的触发方式",
                    "         */",
                    "        popupTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 弹层对齐方式, 详情见Overlay align",
                    "         */",
                    "        popupAlign: PropTypes.string,",
                    "        /**",
                    "         * 弹层自定义样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层自定义样式类",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 透传给弹层的属性",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        /**",
                    "         * 透传给 Menu 的属性",
                    "         */",
                    "        menuProps: PropTypes.object,",
                    "        className: PropTypes.string,",
                    "        children: PropTypes.any,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        type: 'normal',",
                    "        size: 'medium',",
                    "        autoWidth: true,",
                    "        popupTriggerType: 'click',",
                    "        onVisibleChange: func.noop,",
                    "        onItemClick: func.noop,",
                    "        onSelect: func.noop,",
                    "        defaultSelectedKeys: [],",
                    "        menuProps: {},",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        this.state = {",
                    "            selectedKeys: props.selectedKeys || props.defaultSelectedKeys,",
                    "            visible: props.visible || props.defaultVisible,",
                    "        };",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        // 由于定位目标是 wrapper，如果弹层默认展开，wrapper 还未渲染，didMount 后强制再渲染一次，弹层重新定位",
                    "        if (this.state.visible) {",
                    "            this.forceUpdate();",
                    "        }",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible,",
                    "            });",
                    "        }",
                    "",
                    "        if ('selectedKeys' in nextProps) {",
                    "            this.setState({",
                    "                selectedKeys: nextProps.selectedKeys,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    selectMenuItem = (keys, ...others) => {",
                    "        if (!('selectedKeys' in this.props)) {",
                    "            this.setState({",
                    "                selectedKeys: keys,",
                    "            });",
                    "        }",
                    "        this.props.onSelect(keys, ...others);",
                    "    }",
                    "",
                    "    clickMenuItem = (key, ...others) => {",
                    "        this.props.onItemClick(key, ...others);",
                    "        this.onVisibleChange(false, 'menuSelect');",
                    "    }",
                    "",
                    "    onPopupOpen = () => {",
                    "        if (this.props.autoWidth && this.wrapper && this.menu) {",
                    "            dom.setStyle(this.menu, {",
                    "                width: this.wrapper.offsetWidth,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onVisibleChange = (visible, reason) => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible,",
                    "            });",
                    "        }",
                    "        this.props.onVisibleChange(visible, reason);",
                    "    }",
                    "",
                    "    _menuRefHandler = ref => {",
                    "        this.menu = findDOMNode(ref);",
                    "",
                    "        const refFn = this.props.menuProps.ref;",
                    "        if (typeof refFn === 'function') {",
                    "            refFn(ref);",
                    "        }",
                    "    }",
                    "",
                    "    _wrapperRefHandler = ref => {",
                    "        this.wrapper = findDOMNode(ref);",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            label,",
                    "            size,",
                    "            type,",
                    "            component,",
                    "            ghost,",
                    "            className,",
                    "            style,",
                    "            children,",
                    "            triggerProps,",
                    "            popupAlign,",
                    "            popupTriggerType,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupProps,",
                    "            selectMode,",
                    "            menuProps,",
                    "            disabled,",
                    "            ...others",
                    "        } = this.props;",
                    "",
                    "        const state = this.state;",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}split-btn`]: true,",
                    "        }, className);",
                    "",
                    "        const sharedBtnProps = {",
                    "            type,",
                    "            size,",
                    "            component,",
                    "            ghost,",
                    "            disabled,",
                    "        };",
                    "",
                    "        const triggerClassNames = classnames({",
                    "            [`${prefix}split-btn-trigger`]: true,",
                    "            [`${prefix}expand`]: state.visible,",
                    "            opened: state.visible,",
                    "        });",
                    "",
                    "        const trigger = (<Button {...triggerProps} {...sharedBtnProps} className={triggerClassNames}>",
                    "            <Icon type=\"arrow-down\" />",
                    "        </Button>);",
                    "",
                    "        return (",
                    "            <Button.Group {...obj.pickOthers(SplitButton.propTypes, others)} className={classNames} style={style} size={size} ref={this._wrapperRefHandler}>",
                    "                <Button {...sharedBtnProps}>{label}</Button>",
                    "                <Popup",
                    "                    {...popupProps}",
                    "                    visible={state.visible}",
                    "                    onVisibleChange={this.onVisibleChange}",
                    "                    trigger={trigger}",
                    "                    triggerType={popupTriggerType}",
                    "                    align={popupAlign}",
                    "                    target={() => this.wrapper}",
                    "                    style={popupStyle}",
                    "                    shouldUpdatePosition",
                    "                    className={popupClassName}",
                    "                    onOpen={this.onPopupOpen}>",
                    "                    <Menu",
                    "                        {...menuProps}",
                    "                        selectMode={selectMode}",
                    "                        selectedKeys={state.selectedKeys}",
                    "                        onSelect={this.selectMenuItem}",
                    "                        onItemClick={this.clickMenuItem}",
                    "                        ref={this._menuRefHandler}>",
                    "                        {children}",
                    "                    </Menu>",
                    "                </Popup>",
                    "            </Button.Group>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "SplitButton.Item = Menu.Item;",
                    "SplitButton.Divider = Menu.Divider;",
                    "SplitButton.Group = Menu.Group;",
                    "",
                    "export default ConfigProvider.config(SplitButton);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$split-btn-prefix} {",
                    "    display: inline-block;",
                    "    position: relative;",
                    "",
                    "    &-trigger {",
                    "        .#{$css-prefix}icon {",
                    "            transition: transform .3s cubic-bezier(.645, .045, .355, 1);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}expand .#{$css-prefix}icon {",
                    "            transform: rotate(180deg);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}btn-normal .#{$css-prefix}icon {",
                    "            color: $split-btn-trigger-normal-icon-color;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}small {",
                    "            padding-left: $s-1;",
                    "            padding-right: $s-1;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}medium {",
                    "            padding-left: $s-2;",
                    "            padding-right: $s-2;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../button/style.js';",
                    "import '../menu/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// split-button mixins",
                        "// --------------------------------------------------"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module split-button: 分隔按钮",
                        "/// @tag SplitButton",
                        "/// @category component",
                        "/// @family general",
                        "/// @varPrefix $split-btn-",
                        "/// @classPrefix {prefix}-split-btn",
                        "////",
                        "",
                        "// split-button variables",
                        "// --------------------------------------------------",
                        "",
                        "// component prefix",
                        "$split-btn-prefix: \".#{$css-prefix}split-btn\";",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal",
                        "$split-btn-trigger-normal-icon-color: $color-text1-2 !default;"
                    ]
                }
            }
        },
        "step": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Step from './view/step';",
                    "import StepItem from './view/step-item';",
                    "",
                    "Step.Item = StepItem;",
                    "",
                    "export default ConfigProvider.config(Step, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('type' in props) {",
                    "            deprecated('type', 'shape', 'Step');",
                    "",
                    "            const { type, ...others } = props;",
                    "            props = { shape: type, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@import \"scss/variable\";",
                    "@import \"scss/normalize\";",
                    "@import \"scss/mixin\";",
                    "",
                    "@import \"scss/basic\";",
                    "@import \"scss/arrow\";",
                    "@import \"scss/circle\";",
                    "@import \"scss/dot\";",
                    "",
                    "@import \"./rtl.scss\";"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "// 箭头",
                    "// ----------------------------------------",
                    "",
                    "",
                    "",
                    "@mixin step-item-state-rtl(",
                    "    $shape: 'circle',",
                    "    $background: $color-white",
                    ") {",
                    "    #{$step-prefix}-item-node-dot {",
                    "        right: 50%;",
                    "        left: auto;",
                    "    }",
                    "",
                    "    @if ($shape == 'arrow') {",
                    "        background: $background;",
                    "",
                    "        &:before {",
                    "            border: $step-arrow-item-border-width solid $background;",
                    "            border-right-color: transparent;",
                    "        }",
                    "",
                    "        &:after {",
                    "            border-right-color: $background;",
                    "            border-left-color: transparent;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "@mixin state-node-size-rtl($type: 'hor', $shape: 'circle', $node-size: $s-8) {",
                    "    @if ($type == 'hor') {",
                    "        @if ($shape == 'circle') {",
                    "            & > #{$step-prefix}-item-body {",
                    "                right: - ($step-circle-item-body-width - $node-size - $step-circle-item-node-padding * 2) / 2;",
                    "                left: auto;",
                    "            }",
                    "        }",
                    "        @if ($shape == 'dot') {",
                    "            & > #{$step-prefix}-item-body {",
                    "                right: - ($step-dot-item-body-width - $node-size - $step-dot-item-dot-padding * 2) / 2;",
                    "                left: auto;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    @if ($type == 'ver') {",
                    "        @if ($shape == 'circle') {",
                    "",
                    "            & > #{$step-prefix}-item-body {",
                    "                right: $node-size / 2;",
                    "                left: auto;",
                    "                margin-right: $step-circle-item-node-padding;",
                    "                margin-left: 0;",
                    "                & > #{$step-prefix}-item-title {",
                    "                    text-align: right;",
                    "                    @include reset-font;",
                    "                }",
                    "                & > #{$step-prefix}-item-content {",
                    "                    text-align: right;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        @if ($shape == 'dot') {",
                    "            & > #{$step-prefix}-item-body {",
                    "                right: $node-size / 2;",
                    "                left: auto;",
                    "                margin-right: $step-dot-item-dot-padding;",
                    "                margin-left: 0;",
                    "                & > #{$step-prefix}-item-title {",
                    "                    text-align: right;",
                    "                    @include reset-font;",
                    "                }",
                    "                & > #{$step-prefix}-item-content {",
                    "                    text-align: right;",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "",
                    "@mixin label-placement-rtl($node-size: $s-8) {",
                    "",
                    "    #{$step-prefix}-item-body {",
                    "        left: auto;",
                    "        right: 0;",
                    "        text-align: right;",
                    "        #{$step-prefix}-item-title {",
                    "            padding-left: $step-circle-item-node-padding;",
                    "            padding-right: 0;",
                    "        }",
                    "    }",
                    "",
                    "    #{$step-prefix}-item-tail {",
                    "        left: 0;",
                    "        right: auto;",
                    "    }",
                    "}",
                    "",
                    "",
                    "#{$step-prefix}[dir=\"rtl\"] {",
                    "    &-horizontal {",
                    "        & > #{$step-prefix}-item {",
                    "            text-align: right;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$step-prefix}-arrow[dir=\"rtl\"] {",
                    "    #{$step-prefix}-item {",
                    "        @include step-item-size(",
                    "            $step-arrow-item-height,",
                    "            auto,",
                    "            $step-arrow-item-height/8,",
                    "            $step-arrow-item-height/2",
                    "        );",
                    "",
                    "        &:before {",
                    "            right: -$step-arrow-item-border-width;",
                    "            left: auto;",
                    "            border: $step-arrow-item-border-width solid transparent;",
                    "            border-right-color: transparent;",
                    "        }",
                    "",
                    "        &:after {",
                    "            left: -$step-arrow-item-border-width * 2;",
                    "            right: auto;",
                    "            border-top: $step-arrow-item-border-width solid transparent;",
                    "            border-bottom: $step-arrow-item-border-width solid transparent;",
                    "            border-right: $step-arrow-item-border-width solid transparent;",
                    "        }",
                    "    }",
                    "",
                    "    & > #{$step-prefix}-item-wait {",
                    "        @include step-item-state-rtl(",
                    "            'arrow',",
                    "            $step-arrow-item-wait-background",
                    "        );",
                    "    }",
                    "",
                    "    & > #{$step-prefix}-item-process {",
                    "        @include step-item-state-rtl(",
                    "            'arrow',",
                    "            $step-arrow-item-process-background",
                    "        );",
                    "    }",
                    "",
                    "    & > #{$step-prefix}-item-finish {",
                    "        @include step-item-state-rtl(",
                    "            'arrow',",
                    "            $step-arrow-item-finish-background",
                    "        );",
                    "    }",
                    "",
                    "    #{$step-prefix}-item-disabled {",
                    "        @include step-item-state-rtl(",
                    "            'arrow',",
                    "            $step-arrow-item-disabled-background",
                    "        );",
                    "    }",
                    "",
                    "    #{$step-prefix}-item-first {",
                    "        margin-right: 0;",
                    "    }",
                    "",
                    "    #{$step-prefix}-item-last {",
                    "        margin-left: 0;",
                    "    }",
                    "}",
                    "",
                    "",
                    "// 圆形",
                    "// ----------------------------------------",
                    "",
                    "#{$step-prefix}-circle[dir=\"rtl\"] {",
                    "",
                    "    & > #{$step-prefix}-item-wait {",
                    "        @include step-item-state-rtl(",
                    "            'circle',",
                    "            $step-circle-item-node-wait-background",
                    "        );",
                    "    }",
                    "",
                    "    & > #{$step-prefix}-item-process {",
                    "        @include step-item-state-rtl(",
                    "            'circle',",
                    "            $step-circle-item-node-process-background",
                    "        );",
                    "    }",
                    "",
                    "    & > #{$step-prefix}-item-finish {",
                    "        @include step-item-state-rtl(",
                    "            'circle',",
                    "            $step-circle-item-node-finish-background",
                    "        );",
                    "    }",
                    "",
                    "    #{$step-prefix}-item-disabled {",
                    "        @include step-item-state-rtl(",
                    "            'circle',",
                    "            $step-circle-item-node-disabled-background",
                    "        );",
                    "    }",
                    "",
                    "",
                    "    // 圆形 水平",
                    "    // ----------------------------------------",
                    "    &#{$step-prefix}-horizontal {",
                    "",
                    "        & > #{$step-prefix}-item-wait {",
                    "            @include state-node-size-rtl('hor', 'circle');",
                    "        }",
                    "        & > #{$step-prefix}-item-process {",
                    "            @include state-node-size-rtl('hor', 'circle', $step-circle-item-node-process-size);",
                    "        }",
                    "        & > #{$step-prefix}-item-finish {",
                    "            @include state-node-size-rtl('hor', 'circle');",
                    "        }",
                    "        & > #{$step-prefix}-item-disabled {",
                    "            @include state-node-size-rtl('hor', 'circle');",
                    "        }",
                    "    }",
                    "",
                    "    &#{$step-prefix}-horizontal#{$step-prefix}-label-horizontal {",
                    "        & > #{$step-prefix}-item-wait {",
                    "            @include label-placement-rtl();",
                    "        }",
                    "        & > #{$step-prefix}-item-process {",
                    "            @include label-placement-rtl($step-circle-item-node-process-size);",
                    "        }",
                    "        & > #{$step-prefix}-item-finish {",
                    "            @include label-placement-rtl();",
                    "        }",
                    "        & > #{$step-prefix}-item-disabled {",
                    "            @include label-placement-rtl();",
                    "        }",
                    "    }",
                    "",
                    "    // 圆形 垂直",
                    "    // ----------------------------------------",
                    "    &#{$step-prefix}-vertical {",
                    "",
                    "        & > #{$step-prefix}-item-wait {",
                    "            @include state-node-size-rtl('ver', 'circle');",
                    "        }",
                    "        & > #{$step-prefix}-item-process {",
                    "            @include state-node-size-rtl('ver', 'circle', $step-circle-item-node-process-size);",
                    "        }",
                    "        & > #{$step-prefix}-item-finish {",
                    "            @include state-node-size-rtl('ver', 'circle');",
                    "        }",
                    "        & > #{$step-prefix}-item-disabled {",
                    "            @include state-node-size-rtl('ver', 'circle');",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "",
                    "// 点型",
                    "// ----------------------------------------",
                    "",
                    "",
                    "#{$step-prefix}-dot[dir=\"rtl\"] {",
                    "    & > #{$step-prefix}-item-wait {",
                    "        @include step-item-state-rtl(",
                    "            'dot',",
                    "            $step-dot-item-node-wait-background",
                    "        );",
                    "    }",
                    "",
                    "    & > #{$step-prefix}-item-process {",
                    "        @include step-item-state-rtl(",
                    "            'dot',",
                    "            $step-dot-item-node-process-background",
                    "        );",
                    "    }",
                    "",
                    "    & > #{$step-prefix}-item-finish {",
                    "        @include step-item-state-rtl(",
                    "            'dot',",
                    "            $step-dot-item-node-finish-background",
                    "        );",
                    "    }",
                    "",
                    "    #{$step-prefix}-item-disabled {",
                    "        @include step-item-state-rtl(",
                    "            'dot',",
                    "            $step-dot-item-node-disabled-background",
                    "        );",
                    "    }",
                    "",
                    "    // 点型 水平",
                    "    // ----------------------------------------",
                    "    &#{$step-prefix}-horizontal {",
                    "        & > #{$step-prefix}-item-wait {",
                    "            @include state-node-size-rtl('hor', 'dot', $s-3);",
                    "        }",
                    "        & > #{$step-prefix}-item-process {",
                    "            @include state-node-size-rtl('hor', 'dot', $step-dot-item-dot-process-size);",
                    "        }",
                    "        & > #{$step-prefix}-item-finish {",
                    "            @include state-node-size-rtl('hor', 'dot', $s-3);",
                    "        }",
                    "        & > #{$step-prefix}-item-disabled {",
                    "            @include state-node-size-rtl('hor', 'dot', $s-3);",
                    "        }",
                    "    }",
                    "",
                    "    // 点型 垂直",
                    "    // ----------------------------------------",
                    "    &#{$step-prefix}-vertical {",
                    "        padding: 0 4px 0 0;",
                    "        & > #{$step-prefix}-item-wait {",
                    "            @include state-node-size-rtl('ver', 'dot', $s-3);",
                    "        }",
                    "        & > #{$step-prefix}-item-process {",
                    "            @include state-node-size-rtl('ver', 'dot', $step-dot-item-dot-process-size);",
                    "        }",
                    "        & > #{$step-prefix}-item-finish {",
                    "            @include state-node-size-rtl('ver', 'dot', $s-3);",
                    "        }",
                    "        & > #{$step-prefix}-item-disabled {",
                    "            @include state-node-size-rtl('ver', 'dot', $s-3);",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../animate/style.js';",
                    "import '../icon/style.js';",
                    "import '../progress/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "arrow.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// 箭头",
                        "// ----------------------------------------",
                        "",
                        "#{$step-prefix}-arrow {",
                        "    display: flex;",
                        "    #{$step-prefix}-item {",
                        "        flex: 1;",
                        "        @include step-item-size(",
                        "            $step-arrow-item-height,",
                        "            auto,",
                        "            $step-arrow-item-height/2,",
                        "            $step-arrow-item-height/8",
                        "        );",
                        "",
                        "        &:before {",
                        "            content: '';",
                        "            position: absolute;",
                        "            left: -$step-arrow-item-border-width;",
                        "            top: 0;",
                        "            z-index: 1;",
                        "            border: $step-arrow-item-border-width solid transparent;",
                        "            border-left-color: transparent;",
                        "        }",
                        "",
                        "        &:after {",
                        "            content: '';",
                        "            position: absolute;",
                        "            right: -$step-arrow-item-border-width;",
                        "            top: 0;",
                        "            z-index: 1;",
                        "            border-top: $step-arrow-item-border-width solid transparent;",
                        "            border-bottom: $step-arrow-item-border-width solid transparent;",
                        "            border-left: $step-arrow-item-border-width solid transparent;",
                        "        }",
                        "",
                        "        #{$step-prefix}-item-container {",
                        "            min-width: 100px;",
                        "            height: $step-arrow-item-height;",
                        "            cursor: pointer;",
                        "",
                        "            #{$step-prefix}-item-title {",
                        "                height: $step-arrow-item-height;",
                        "                line-height: $step-arrow-item-height;",
                        "                font-weight: $step-arrow-item-title-weight;",
                        "                font-size: $step-arrow-item-title-size;",
                        "                overflow: hidden;",
                        "                text-overflow: ellipsis;",
                        "                white-space: nowrap;",
                        "                text-align: center;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-wait {",
                        "        @include step-item-state(",
                        "            'arrow',",
                        "            $step-arrow-item-wait-background,",
                        "            $step-arrow-item-title-wait-color",
                        "        );",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-process {",
                        "        @include step-item-state(",
                        "            'arrow',",
                        "            $step-arrow-item-process-background,",
                        "            $step-arrow-item-title-process-color",
                        "        );",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-finish {",
                        "        @include step-item-state(",
                        "            'arrow',",
                        "            $step-arrow-item-finish-background,",
                        "            $step-arrow-item-title-finish-color",
                        "        );",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-disabled {",
                        "        cursor: not-allowed;",
                        "",
                        "        @include step-item-state(",
                        "            'arrow',",
                        "            $step-arrow-item-disabled-background,",
                        "            $step-arrow-item-title-disabled-color",
                        "        );",
                        "",
                        "        #{$step-prefix}-item-container {",
                        "            cursor: not-allowed;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-read-only {",
                        "        cursor: default;",
                        "",
                        "        #{$step-prefix}-item-container {",
                        "            cursor: default;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-first {",
                        "        margin-left: 0;",
                        "",
                        "        &:before {",
                        "            border: $step-arrow-item-border-width solid transparent;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-last {",
                        "        margin-right: 0;",
                        "",
                        "        &:after {",
                        "            border: $step-arrow-item-border-width solid transparent;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "basic.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$step-prefix} {",
                        "    width: 100%;",
                        "    // overflow: hidden;",
                        "    position: relative;",
                        "    border: none;",
                        "",
                        "    &-item {",
                        "        // flex: 1;",
                        "        position: relative;",
                        "        vertical-align: middle;",
                        "",
                        "        &-node {",
                        "            transition: all .2s ease;",
                        "            &.clicked {",
                        "                transform: scale3d(.8, .8, .8);",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    &-horizontal {",
                        "        // display: flex;",
                        "        overflow: hidden;",
                        "        & > #{$step-prefix}-item {",
                        "            display: inline-block;",
                        "            text-align: left;",
                        "        }",
                        "    }",
                        "",
                        "    &-vertical {",
                        "        & > #{$step-prefix}-item {",
                        "            display: block;",
                        "            text-align: center;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "circle.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// 圆形",
                        "// ----------------------------------------",
                        "",
                        "#{$step-prefix}-circle {",
                        "",
                        "    #{$step-prefix}-item-container {",
                        "        display: inline-block;",
                        "        vertical-align: middle;",
                        "        position: relative;",
                        "        padding: 0 $step-circle-item-node-padding;",
                        "        #{$step-prefix}-item-progress {",
                        "            #{$step-progress-prefix}-circle-text {",
                        "                color: $step-circle-item-node-process-percent-color;",
                        "                font-size: $step-circle-item-node-font-size;",
                        "            }",
                        "",
                        "            #{$step-progress-prefix}-circle-underlay {",
                        "                stroke: $step-circle-item-node-wait-border-color;",
                        "                stroke-width: $s-1;",
                        "            }",
                        "",
                        "            #{$step-progress-prefix}-circle-overlay-normal {",
                        "                stroke: $step-circle-item-node-finish-border-color;",
                        "                stroke-width: $s-1;",
                        "            }",
                        "        }",
                        "        #{$step-prefix}-item-node-placeholder {",
                        "            display: inline-block;",
                        "        }",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-wait {",
                        "        @include step-item-state(",
                        "            'circle',",
                        "            $step-circle-item-node-wait-background,",
                        "            $step-circle-item-title-wait-color,",
                        "            $step-circle-item-node-wait-color,",
                        "            $step-circle-item-tail-wait-color,",
                        "            $step-circle-item-tail-bg-color,",
                        "            $step-circle-item-node-wait-border-color,",
                        "            $step-circle-item-title-wait-color",
                        "        );",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-process {",
                        "        @include step-item-state(",
                        "            'circle',",
                        "            $step-circle-item-node-process-background,",
                        "            $step-circle-item-title-process-color,",
                        "            $step-circle-item-node-process-color,",
                        "            $step-circle-item-tail-process-color,",
                        "            $step-circle-item-tail-bg-color,",
                        "            $step-circle-item-node-process-border-color,",
                        "            $step-circle-item-title-process-color,",
                        "            $step-circle-item-node-process-size",
                        "        );",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-finish {",
                        "        @include step-item-state(",
                        "            'circle',",
                        "            $step-circle-item-node-finish-background,",
                        "            $step-circle-item-title-finish-color,",
                        "            $step-circle-item-node-finish-color,",
                        "            $step-circle-item-tail-finish-color,",
                        "            $step-circle-item-tail-bg-color,",
                        "            $step-circle-item-node-finish-border-color,",
                        "            $step-circle-item-title-finish-color",
                        "        );",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-disabled {",
                        "        @include step-item-state(",
                        "            'circle',",
                        "            $step-circle-item-node-disabled-background,",
                        "            $step-circle-item-title-disabled-color,",
                        "            $step-circle-item-node-disabled-color,",
                        "            $step-circle-item-tail-disabled-color,",
                        "            $step-circle-item-tail-bg-color,",
                        "            $step-circle-item-node-disabled-border-color,",
                        "            $step-circle-item-title-disabled-color",
                        "        );",
                        "",
                        "        #{$step-prefix}-item-node-placeholder,",
                        "        #{$step-prefix}-item-node {",
                        "            cursor: not-allowed;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-read-only {",
                        "        #{$step-prefix}-item-node-placeholder,",
                        "        #{$step-prefix}-item-node {",
                        "            cursor: default;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-last {",
                        "        #{$step-prefix}-item-tail {",
                        "            display: none;",
                        "        }",
                        "    }",
                        "",
                        "    // 圆形 水平",
                        "    // ----------------------------------------",
                        "    &#{$step-prefix}-horizontal {",
                        "        // padding: 0 $step-circle-item-body-width / 2;",
                        "        text-align: center;",
                        "        white-space: nowrap;",
                        "        & > #{$step-prefix}-item {",
                        "            #{$step-prefix}-item-title {",
                        "                white-space: normal;",
                        "            }",
                        "            #{$step-prefix}-item-content {",
                        "                white-space: normal;",
                        "            }",
                        "        }",
                        "        & > #{$step-prefix}-item-wait {",
                        "            @include state-node-size('hor', 'circle');",
                        "        }",
                        "        & > #{$step-prefix}-item-process {",
                        "            @include state-node-size('hor', 'circle', $step-circle-item-node-process-size);",
                        "        }",
                        "        & > #{$step-prefix}-item-finish {",
                        "            @include state-node-size('hor', 'circle');",
                        "        }",
                        "        & > #{$step-prefix}-item-disabled {",
                        "            @include state-node-size('hor', 'circle');",
                        "        }",
                        "    }",
                        "",
                        "    &#{$step-prefix}-horizontal#{$step-prefix}-label-horizontal {",
                        "        & > #{$step-prefix}-item {",
                        "            vertical-align: unset;",
                        "        }",
                        "        & > #{$step-prefix}-item-wait {",
                        "            @include label-placement();",
                        "        }",
                        "        & > #{$step-prefix}-item-process {",
                        "            @include label-placement($step-circle-item-node-process-size);",
                        "        }",
                        "        & > #{$step-prefix}-item-finish {",
                        "            @include label-placement();",
                        "        }",
                        "        & > #{$step-prefix}-item-disabled {",
                        "            @include label-placement();",
                        "        }",
                        "    }",
                        "",
                        "    // 圆形 垂直",
                        "    // ----------------------------------------",
                        "    &#{$step-prefix}-vertical {",
                        "        font-size: 0;",
                        "        display: table-cell;",
                        "        vertical-align: middle;",
                        "        position: relative;",
                        "        #{$step-prefix}-item-container {",
                        "            padding: 0;",
                        "        }",
                        "        & > #{$step-prefix}-item:last-child {",
                        "            #{$step-prefix}-item-tail {",
                        "                display: block;",
                        "                visibility: hidden;",
                        "            }",
                        "        }",
                        "        & > #{$step-prefix}-item-wait {",
                        "            @include state-node-size('ver', 'circle');",
                        "        }",
                        "        & > #{$step-prefix}-item-process {",
                        "            @include state-node-size('ver', 'circle', $step-circle-item-node-process-size);",
                        "        }",
                        "        & > #{$step-prefix}-item-finish {",
                        "            @include state-node-size('ver', 'circle');",
                        "        }",
                        "        & > #{$step-prefix}-item-disabled {",
                        "            @include state-node-size('ver', 'circle');",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "dot.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// 点型",
                        "// ----------------------------------------",
                        "",
                        "#{$step-prefix}-dot {",
                        "    // padding: 4px 0 0 0;",
                        "    #{$step-prefix}-item-container {",
                        "        display: inline-block;",
                        "        vertical-align: middle;",
                        "        position: relative;",
                        "        padding: 0 $step-circle-item-node-padding;",
                        "        font-size: 0;",
                        "",
                        "        #{$step-prefix}-item-node-placeholder {",
                        "            display: inline-block;",
                        "        }",
                        "        #{$step-prefix}-item-node {",
                        "            position: relative;",
                        "            display: inline-block;",
                        "            text-align: center;",
                        "            cursor: pointer;",
                        "",
                        "            #{$step-icon-prefix} {",
                        "                @include icon-size($step-dot-item-dot-icon-size);",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-wait {",
                        "        @include step-item-state(",
                        "            'dot',",
                        "            $step-dot-item-node-wait-background,",
                        "            $step-dot-item-title-wait-color,",
                        "            $step-dot-item-node-wait-color,",
                        "            $step-dot-item-tail-wait-color,",
                        "            $step-dot-item-tail-bg-color,",
                        "            $step-dot-item-node-wait-border-color,",
                        "            $step-dot-item-title-wait-color,",
                        "            $s-3",
                        "        );",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-process {",
                        "        @include step-item-state(",
                        "            'dot',",
                        "            $step-dot-item-node-process-background,",
                        "            $step-dot-item-title-process-color,",
                        "            $step-dot-item-node-process-color,",
                        "            $step-dot-item-tail-process-color,",
                        "            $step-dot-item-tail-bg-color,",
                        "            $step-dot-item-node-process-border-color,",
                        "            $step-dot-item-title-process-color,",
                        "            $step-dot-item-dot-process-size",
                        "        );",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-finish {",
                        "        @include step-item-state(",
                        "            'dot',",
                        "            $step-dot-item-node-finish-background,",
                        "            $step-dot-item-title-finish-color,",
                        "            $step-dot-item-node-finish-color,",
                        "            $step-dot-item-tail-finish-color,",
                        "            $step-dot-item-tail-bg-color,",
                        "            $step-dot-item-node-finish-border-color,",
                        "            $step-dot-item-title-finish-color,",
                        "            $s-3",
                        "        );",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-disabled {",
                        "        @include step-item-state(",
                        "            'dot',",
                        "            $step-dot-item-node-disabled-background,",
                        "            $step-dot-item-title-disabled-color,",
                        "            $step-dot-item-node-disabled-color,",
                        "            $step-dot-item-tail-disabled-color,",
                        "            $step-dot-item-tail-bg-color,",
                        "            $step-dot-item-node-disabled-border-color,",
                        "            $step-dot-item-title-disabled-color,",
                        "            $s-3",
                        "        );",
                        "",
                        "        #{$step-prefix}-item-node-placeholder,",
                        "        #{$step-prefix}-item-node {",
                        "            cursor: not-allowed;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-read-only {",
                        "        #{$step-prefix}-item-node-placeholder,",
                        "        #{$step-prefix}-item-node {",
                        "            cursor: default;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-last {",
                        "        #{$step-prefix}-item-tail {",
                        "            display: none;",
                        "        }",
                        "    }",
                        "",
                        "    // 点型 水平",
                        "    // ----------------------------------------",
                        "    &#{$step-prefix}-horizontal {",
                        "        text-align: center;",
                        "        white-space: nowrap;",
                        "        & > #{$step-prefix}-item {",
                        "            #{$step-prefix}-item-title {",
                        "                white-space: normal;",
                        "            }",
                        "            #{$step-prefix}-item-content {",
                        "                white-space: normal;",
                        "            }",
                        "        }",
                        "        #{$step-prefix}-item-node {",
                        "            #{$step-icon-prefix} {",
                        "                vertical-align: middle;",
                        "            }",
                        "        }",
                        "        & > #{$step-prefix}-item-wait {",
                        "            @include state-node-size('hor', 'dot', $s-3);",
                        "        }",
                        "        & > #{$step-prefix}-item-process {",
                        "            @include state-node-size('hor', 'dot', $step-dot-item-dot-process-size);",
                        "        }",
                        "        & > #{$step-prefix}-item-finish {",
                        "            @include state-node-size('hor', 'dot', $s-3);",
                        "        }",
                        "        & > #{$step-prefix}-item-disabled {",
                        "            @include state-node-size('hor', 'dot', $s-3);",
                        "        }",
                        "    }",
                        "",
                        "    // 点型 垂直",
                        "    // ----------------------------------------",
                        "    &#{$step-prefix}-vertical {",
                        "        padding: 0 0 0 4px;",
                        "        font-size: 0;",
                        "        display: table-cell;",
                        "        // vertical-align: middle;",
                        "        #{$step-prefix}-item-container {",
                        "            padding: 0;",
                        "        }",
                        "        & > #{$step-prefix}-item:last-child {",
                        "            #{$step-prefix}-item-tail {",
                        "                display: block;",
                        "                visibility: hidden;",
                        "            }",
                        "        }",
                        "        position: relative;",
                        "        & > #{$step-prefix}-item-wait {",
                        "            @include state-node-size('ver', 'dot', $s-3);",
                        "        }",
                        "        & > #{$step-prefix}-item-process {",
                        "            @include state-node-size('ver', 'dot', $step-dot-item-dot-process-size);",
                        "        }",
                        "        & > #{$step-prefix}-item-finish {",
                        "            @include state-node-size('ver', 'dot', $s-3);",
                        "        }",
                        "        & > #{$step-prefix}-item-disabled {",
                        "            @include state-node-size('ver', 'dot', $s-3);",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin reset-font() {",
                        "    font-family: $font-family-base;",
                        "    font-size: $font-size-body-1;",
                        "    line-height: $font-lineheight-base;",
                        "}",
                        "",
                        "// item尺寸",
                        "// ----------------------------------------",
                        "",
                        "@mixin step-item-size(",
                        "    $height: auto,",
                        "    $width: auto,",
                        "    $margin-left: 0,",
                        "    $margin-right: 0",
                        ") {",
                        "    height: $height;",
                        "    line-height: $height;",
                        "    margin-left: $margin-left;",
                        "    margin-right: $margin-right;",
                        "}",
                        "",
                        "// item状态",
                        "// ----------------------------------------",
                        "",
                        "@mixin step-item-state(",
                        "    $shape: 'circle',",
                        "    $background: $color-white,",
                        "    $title-color: $color-black,",
                        "    $icon-color: $color-black,",
                        "    $tail-color: $color-black,",
                        "    $tail-bg-color: $color-text1-1,",
                        "    $icon-border-color: $color-black,",
                        "    $content-color: $color-black,",
                        "    $node-size: $s-8,",
                        "    $font-weight: $font-weight-2",
                        ") {",
                        "    #{$step-prefix}-item-tail {",
                        "        &-overlay {",
                        "            background: $tail-color;",
                        "        }",
                        "",
                        "        &-underlay {",
                        "            background: $tail-bg-color;",
                        "        }",
                        "    }",
                        "",
                        "    & > #{$step-prefix}-item-container {",
                        "        #{$step-prefix}-item-progress {",
                        "            width: $node-size;",
                        "            height: $node-size;",
                        "        }",
                        "",
                        "        #{$step-prefix}-item-node {",
                        "            color: $icon-color;",
                        "        }",
                        "",
                        "        #{$step-prefix}-item-node-circle {",
                        "            background: $background;",
                        "            border-color: $icon-border-color;",
                        "        }",
                        "",
                        "        #{$step-prefix}-item-node-dot {",
                        "            background: $background;",
                        "            border-color: $icon-border-color;",
                        "        }",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-title {",
                        "        color: $title-color;",
                        "        word-break: break-word;",
                        "    }",
                        "    #{$step-prefix}-item-content {",
                        "        color: $title-color;",
                        "        font-size: $step-circle-item-content-font-size;",
                        "        word-break: break-word;",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-node-placeholder {",
                        "        width: $node-size;",
                        "        height: $node-size;",
                        "        position: relative;",
                        "    }",
                        "",
                        "    #{$step-prefix}-item-node {",
                        "        position: relative;",
                        "        display: inline-block;",
                        "        text-align: center;",
                        "        cursor: pointer;",
                        "        &-circle {",
                        "            display: block;",
                        "            width: $node-size;",
                        "            height: $node-size;",
                        "            font-size: $step-circle-item-node-font-size;",
                        "            font-weight: $font-weight;",
                        "            line-height: $node-size - 2 * $step-circle-item-node-border-width;",
                        "            text-align: center;",
                        "            border: $step-circle-item-node-border-width solid;",
                        "            border-radius: $step-circle-item-node-corner;",
                        "            transition: background-color .2s ease, border-color .2s ease;",
                        "            #{$step-icon-prefix} {",
                        "                @include icon-size($step-circle-item-node-icon-size);",
                        "                animation: zoomIn .2s linear;",
                        "            }",
                        "        }",
                        "    }",
                        "    #{$step-prefix}-item-node-dot {",
                        "        position: absolute;",
                        "        top: 50%;",
                        "        margin-top: -$node-size/2;",
                        "        left: 50%;",
                        "        margin-left: -$node-size/2;",
                        "        display: block;",
                        "        width: $node-size;",
                        "        height: $node-size;",
                        "        border: $step-dot-item-dot-border-width solid;",
                        "        border-radius: $step-dot-item-dot-corner;",
                        "        transition: background-color .3s ease, border-color .3s ease;",
                        "    }",
                        "",
                        "    @if ($shape == 'arrow') {",
                        "        background: $background;",
                        "",
                        "        &:before {",
                        "            border: $step-arrow-item-border-width solid $background;",
                        "            border-left-color: transparent;",
                        "        }",
                        "",
                        "        &:after {",
                        "            border-left-color: $background;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "// 针对不同size的节点进行样式调整",
                        "",
                        "@mixin state-node-size($type: 'hor', $shape: 'circle', $node-size: $s-8) {",
                        "    @if ($type == 'hor') {",
                        "        @if ($shape == 'circle') {",
                        "            #{$step-prefix}-item-tail {",
                        "                display: inline-block;",
                        "                clear: both;",
                        "                width: calc(100% - #{$node-size + 2 * $step-circle-item-node-padding});",
                        "                vertical-align: middle;",
                        "                #{$step-prefix}-item-tail-underlay {",
                        "                    display: block;",
                        "                    height: $step-circle-item-tail-size;",
                        "                    position: relative;",
                        "                }",
                        "                #{$step-prefix}-item-tail-overlay {",
                        "                    position: absolute;",
                        "                    top: 0;",
                        "                    height: $step-circle-item-tail-size;",
                        "                    transition: all .4s ease;",
                        "                    width: 100%;",
                        "                }",
                        "            }",
                        "            & > #{$step-prefix}-item-node {",
                        "                padding: 0 $step-circle-item-node-padding;",
                        "                width: $node-size + $step-circle-item-node-padding * 2;",
                        "                height: $node-size;",
                        "            }",
                        "            & > #{$step-prefix}-item-body {",
                        "                width: $step-circle-item-body-width;",
                        "                left: - ($step-circle-item-body-width - $node-size - $step-circle-item-node-padding * 2) / 2;",
                        "                text-align: center;",
                        "                position: absolute;",
                        "                & > #{$step-prefix}-item-title {",
                        "                    font-size: $step-circle-item-title-size;",
                        "                    line-height: $step-circle-item-title-size + 4;",
                        "                    margin-top: $step-circle-item-title-margin-top;",
                        "                    font-weight: $step-circle-item-title-weight;",
                        "                }",
                        "                & > #{$step-prefix}-item-content {",
                        "                    margin-top: $step-circle-item-content-margin-top;",
                        "                }",
                        "            }",
                        "        }",
                        "        @if ($shape == 'dot') {",
                        "            #{$step-prefix}-item-tail {",
                        "                display: inline-block;",
                        "                clear: both;",
                        "                width: calc(100% - #{$node-size + 2 * $step-dot-item-dot-padding});",
                        "                vertical-align: middle;",
                        "                #{$step-prefix}-item-tail-underlay {",
                        "                    display: block;",
                        "                    height: $step-dot-item-tail-size;",
                        "                    position: relative;",
                        "                }",
                        "                #{$step-prefix}-item-tail-overlay {",
                        "                    position: absolute;",
                        "                    top: 0;",
                        "                    height: $step-dot-item-tail-size;",
                        "                    transition: all .4s ease;",
                        "                    width: 100%;",
                        "                }",
                        "            }",
                        "            & > #{$step-prefix}-item-node {",
                        "                padding: 0 $step-dot-item-dot-padding;",
                        "                width: $node-size + $step-dot-item-dot-padding * 2;",
                        "                height: $node-size;",
                        "            }",
                        "            & > #{$step-prefix}-item-body {",
                        "                width: $step-dot-item-body-width;",
                        "                left: - ($step-dot-item-body-width - $node-size - $step-dot-item-dot-padding * 2) / 2;",
                        "                text-align: center;",
                        "                position: absolute;",
                        "                & > #{$step-prefix}-item-title {",
                        "                    font-size: $step-dot-item-title-size;",
                        "                    line-height: $step-dot-item-title-size + 4;",
                        "                    margin-top: $step-dot-item-title-margin-top;",
                        "                    font-weight: $step-dot-item-title-weight;",
                        "                }",
                        "                & > #{$step-prefix}-item-content {",
                        "                    margin-top: $step-dot-item-content-margin-top;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    @if ($type == 'ver') {",
                        "        @if ($shape == 'circle') {",
                        "            #{$step-prefix}-item-tail {",
                        "                width: $step-circle-item-tail-size;",
                        "                height: 0;",
                        "                margin: $step-circle-item-node-padding auto;",
                        "                #{$step-prefix}-item-tail-underlay {",
                        "                    height: 100%;",
                        "                    width: $step-circle-vertical-item-tail-size;",
                        "                    position: relative;",
                        "                }",
                        "                #{$step-prefix}-item-tail-overlay {",
                        "                    position: absolute;",
                        "                    top: 0;",
                        "                    height: 100%;",
                        "                    width: $step-circle-vertical-item-tail-size;",
                        "                }",
                        "            }",
                        "            & > #{$step-prefix}-item-node {",
                        "                padding: $step-circle-item-node-padding 0;",
                        "                width: $node-size;",
                        "                height: $node-size+$step-circle-item-node-padding * 2;",
                        "            }",
                        "            & > #{$step-prefix}-item-body {",
                        "                position: absolute;",
                        "                top: 0;",
                        "                left: $node-size / 2;",
                        "                margin-left: $step-circle-item-node-padding;",
                        "                // margin-left: $step-circle-vertical-item-body-margin-left + $node-size;",
                        "                & > #{$step-prefix}-item-title {",
                        "                    margin-top: $step-circle-vertical-item-title-margin-top;",
                        "                    text-align: left;",
                        "                    font-weight: $step-circle-item-title-weight;",
                        "                    @include reset-font;",
                        "                }",
                        "                & > #{$step-prefix}-item-content {",
                        "                    margin-top: $step-circle-vertical-item-content-margin-top;",
                        "                    min-height: $s-2;",
                        "                    text-align: left;",
                        "                    font-size: $step-circle-item-content-font-size;",
                        "                    line-height: $step-circle-item-content-font-size + 4;",
                        "                    // color: $step-circle-item-content-color;",
                        "                }",
                        "            }",
                        "        }",
                        "",
                        "        @if ($shape == 'dot') {",
                        "            #{$step-prefix}-item-tail {",
                        "                width: $step-dot-item-tail-size;",
                        "                height: 0;",
                        "                margin: $step-dot-item-dot-padding auto;",
                        "                #{$step-prefix}-item-tail-underlay {",
                        "                    height: 100%;",
                        "                    width: $step-dot-vertical-item-tail-size;",
                        "                    position: relative;",
                        "                }",
                        "                #{$step-prefix}-item-tail-overlay {",
                        "                    position: absolute;",
                        "                    top: 0;",
                        "                    height: 100%;",
                        "                    width: $step-dot-vertical-item-tail-size;",
                        "                }",
                        "            }",
                        "            & > #{$step-prefix}-item-node {",
                        "                padding: $step-dot-item-dot-padding 0;",
                        "                width: $node-size;",
                        "                height: $node-size+$step-dot-item-dot-padding * 2;",
                        "            }",
                        "            & > #{$step-prefix}-item-body {",
                        "                position: absolute;",
                        "                top: 0;",
                        "                left: $node-size / 2;",
                        "                margin-left: $step-dot-item-dot-padding;",
                        "                & > #{$step-prefix}-item-title {",
                        "                    margin-top: $step-dot-vertical-item-title-margin-top;",
                        "                    font-weight: $step-dot-item-title-weight;",
                        "                    text-align: left;",
                        "                    @include reset-font;",
                        "                }",
                        "                & > #{$step-prefix}-item-content {",
                        "                    margin-top: $step-dot-vertical-item-content-margin-top;",
                        "                    min-height: $s-2;",
                        "                    text-align: left;",
                        "                    font-size: $step-dot-item-content-font-size;",
                        "                    line-height: $step-dot-item-content-font-size + 4;",
                        "                    // color: $step-dot-item-content-color;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin label-placement($node-size: $s-8) {",
                        "    // 横向布局支持content",
                        "    #{$step-prefix}-item:last-child {",
                        "        #{$step-prefix}-item-tail {",
                        "            display: none;",
                        "        }",
                        "    }",
                        "    #{$step-prefix}-item-body {",
                        "        position: relative;",
                        "        display: inline-block;",
                        "        top: 0;",
                        "        left: 0;",
                        "        max-width: $step-circle-item-body-width;",
                        "        overflow: hidden;",
                        "        vertical-align: top;",
                        "        text-align: left;",
                        "        #{$step-prefix}-item-title {",
                        "            display: inline-block;",
                        "            padding-right: $step-circle-item-node-padding;",
                        "            margin-top: $node-size / 2 - $step-circle-item-title-size / 2;",
                        "        }",
                        "    }",
                        "    #{$step-prefix}-item-tail {",
                        "        width: calc(100% - #{($node-size + 2 * $step-circle-item-node-padding + $step-circle-item-body-width)});",
                        "        position: absolute;",
                        "        right: 0;",
                        "        margin-top: -$step-circle-vertical-item-tail-size;",
                        "    }",
                        "}"
                    ]
                },
                "normalize.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$step-prefix} {",
                        "    *,",
                        "    *:before,",
                        "    *:after {",
                        "        box-sizing: border-box;",
                        "    }",
                        "",
                        "    &,",
                        "    &:before,",
                        "    &:after {",
                        "        box-sizing: border-box;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module step: 步骤",
                        "/// @tag Step",
                        "/// @category component",
                        "/// @family navigation",
                        "/// @varPrefix $step-",
                        "/// @classPrefix {prefix}-step",
                        "/// @order {\"size/bounding\":10,\"size/text\":11,\"size/node\":12,\"size/divider\":13,\"size/content\":14,\"size/dot\":15,\"statement/awaiting\":10,\"statement/awaiting/arrow\":100,\"statement/awaiting/divider\":101,\"statement/awaiting/content\":102,\"statement/awaiting/node\":103,\"statement/processing\":11,\"statement/processing/arrow\":110,\"statement/processing/divider\":111,\"statement/processing/content\":112,\"statement/processing/node\":113,\"statement/finished\":12,\"statement/finished/arrow\":120,\"statement/finished/divider\":121,\"statement/finished/content\":122,\"statement/finished/node\":123,\"statement/disabled\":13,\"statement/disabled/arrow\":130,\"statement/disabled/divider\":131,\"statement/disabled/content\":132,\"statement/disabled/node\":133,\"statement/normal\":14,\"statement/normal/content\":140}",
                        "////",
                        "",
                        "$step-prefix: '.' + $css-prefix + 'step';",
                        "",
                        "$step-icon-prefix: '.' + $css-prefix + 'icon';",
                        "",
                        "$step-progress-prefix: '.' + $css-prefix + 'progress';",
                        "",
                        "",
                        "// 箭头变量",
                        "// ----------------------------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$step-arrow-item-height: $s-8 !default;",
                        "$step-arrow-item-border-width: $step-arrow-item-height/2;",
                        "",
                        "/// font size",
                        "/// @namespace size/text",
                        "$step-arrow-item-title-size: $font-size-body-2 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace size/text",
                        "$step-arrow-item-title-weight: $font-weight-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/awaiting/arrow",
                        "$step-arrow-item-wait-background: $color-fill1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/awaiting/arrow",
                        "$step-arrow-item-title-wait-color: $color-text1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/processing/arrow",
                        "$step-arrow-item-process-background: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/processing/arrow",
                        "$step-arrow-item-title-process-color: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/finished/arrow",
                        "$step-arrow-item-finish-background: $color-brand1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/finished/arrow",
                        "$step-arrow-item-title-finish-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/arrow",
                        "$step-arrow-item-disabled-background: $color-fill1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/arrow",
                        "$step-arrow-item-title-disabled-color: $color-text1-1 !default;",
                        "",
                        "// 圆形变量",
                        "// ----------------------------------------",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/node",
                        "$step-circle-item-node-padding: $s-2 !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/node",
                        "$step-circle-item-node-border-width: $line-1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/node",
                        "$step-circle-item-node-icon-size: $icon-xs !default;",
                        "",
                        "/// text",
                        "/// @namespace size/node",
                        "$step-circle-item-node-font-size: $font-size-caption !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/node",
                        "$step-circle-item-node-corner: $corner-circle !default;",
                        "",
                        "/// width",
                        "/// @namespace size/divider",
                        "$step-circle-item-tail-size: $line-1 !default;",
                        "",
                        "/// title margin (t)",
                        "/// @namespace size/content",
                        "$step-circle-item-title-margin-top: $s-2 !default;",
                        "",
                        "/// body margin (t)",
                        "/// @namespace size/content",
                        "$step-circle-item-content-margin-top: $s-1 !default;",
                        "",
                        "/// content size",
                        "/// @namespace size/content",
                        "$step-circle-item-content-font-size: $font-size-caption !default;",
                        "",
                        "/// body width",
                        "/// @namespace size/content",
                        "$step-circle-item-body-width: $s-25 !default;",
                        "",
                        "/// title size",
                        "/// @namespace size/content",
                        "$step-circle-item-title-size: $font-size-body-2 !default;",
                        "/// title weight",
                        "/// @namespace size/content",
                        "$step-circle-item-title-weight: $font-weight-3 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/awaiting/node",
                        "$step-circle-item-node-wait-size: $s-8 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/processing/node",
                        "$step-circle-item-node-process-size: $s-8 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/finished/node",
                        "$step-circle-item-node-finish-size: $s-8 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/disabled/node",
                        "$step-circle-item-node-disabled-size: $s-8 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/awaiting/divider",
                        "$step-circle-item-tail-wait-color: $color-line1-3 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/processing/divider",
                        "$step-circle-item-tail-process-color: $color-line1-3 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/finished/divider",
                        "$step-circle-item-tail-finish-color: $color-brand1-6 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/disabled/divider",
                        "$step-circle-item-tail-disabled-color: $color-line1-1 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/awaiting/content",
                        "$step-circle-item-node-wait-font-weight: $font-weight-2 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/processing/content",
                        "$step-circle-item-node-process-font-weight: $font-weight-2 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/disabled/content",
                        "$step-circle-item-node-disabled-font-weight: $font-weight-2 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/finished/content",
                        "$step-circle-item-node-finish-font-weight: $font-weight-2 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/awaiting/content",
                        "$step-circle-item-title-wait-color: $color-text1-3 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/processing/content",
                        "$step-circle-item-title-process-color: $color-text1-4 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/finished/content",
                        "$step-circle-item-title-finish-color: $color-text1-3 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/disabled/content",
                        "$step-circle-item-title-disabled-color: $color-text1-1 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/awaiting/node",
                        "$step-circle-item-node-wait-border-color: $color-line1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/awaiting/node",
                        "$step-circle-item-node-wait-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/awaiting/node",
                        "$step-circle-item-node-wait-color: $color-text1-3 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/processing/node",
                        "$step-circle-item-node-process-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/processing/node",
                        "$step-circle-item-node-process-background: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/processing/node",
                        "$step-circle-item-node-process-color: $color-white !default;",
                        "",
                        "/// percent text",
                        "/// @namespace statement/processing/node",
                        "$step-circle-item-node-process-percent-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/finished/node",
                        "$step-circle-item-node-finish-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/finished/node",
                        "$step-circle-item-node-finish-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/finished/node",
                        "$step-circle-item-node-finish-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/disabled/node",
                        "$step-circle-item-node-disabled-border-color: $color-line1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/node",
                        "$step-circle-item-node-disabled-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/node",
                        "$step-circle-item-node-disabled-color: $color-text1-1 !default;",
                        "",
                        "// 圆形变量 (垂直)",
                        "// ----------------------------------------",
                        "",
                        "/// node margin (t, b)",
                        "/// @namespace size/node",
                        "$step-circle-vertical-item-node-padding: $s-2 !default;",
                        "",
                        "/// margin (l)",
                        "/// @namespace size/content",
                        "$step-circle-vertical-item-body-margin-left: $s-4 !default;",
                        "",
                        "/// title margin (t)",
                        "/// @namespace size/content",
                        "$step-circle-vertical-item-title-margin-top: $s-2 !default;",
                        "",
                        "/// body margin (t)",
                        "/// @namespace size/content",
                        "$step-circle-vertical-item-content-margin-top: $s-1 !default;",
                        "",
                        "/// body size",
                        "/// @namespace size/content",
                        "$step-circle-item-content-font-size: $font-size-caption !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$step-circle-item-content-color: $color-text1-3 !default;",
                        "",
                        "/// tail bg color",
                        "/// @namespace statement/normal/content",
                        "$step-circle-item-tail-bg-color: $color-line1-1 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/divider",
                        "$step-circle-vertical-item-tail-size: $line-1 !default;",
                        "",
                        "// 点型变量",
                        "// ----------------------------------------",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/dot",
                        "$step-dot-item-dot-padding: $s-2 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/dot",
                        "// $step-dot-item-dot-size: $s-3 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/dot",
                        "$step-dot-item-dot-icon-size: $icon-xs !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/dot",
                        "$step-dot-item-dot-border-width: $line-1 !default;",
                        "",
                        "/// body width",
                        "/// @namespace size/content",
                        "$step-dot-item-body-width: $s-25 !default;",
                        "",
                        "/// content margin (t)",
                        "/// @namespace size/content",
                        "$step-dot-item-content-margin-top: $s-1 !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/dot",
                        "$step-dot-item-dot-corner: $corner-circle !default;",
                        "",
                        "/// title size",
                        "/// @namespace size/content",
                        "$step-dot-item-title-size: $font-size-body-1 !default;",
                        "",
                        "/// title weight",
                        "/// @namespace size/content",
                        "$step-dot-item-title-weight: $font-weight-3 !default;",
                        "",
                        "/// title margin (t)",
                        "/// @namespace size/content",
                        "$step-dot-item-title-margin-top: $s-2 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/divider",
                        "$step-dot-item-tail-size: $line-1 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/awaiting/node",
                        "$step-dot-item-dot-wait-size: $s-3 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/processing/node",
                        "$step-dot-item-dot-process-size: $s-3 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/finished/node",
                        "$step-dot-item-dot-finish-size: $s-3 !default;",
                        "",
                        "/// node size",
                        "/// @namespace statement/disabled/node",
                        "$step-dot-item-dot-disabled-size: $s-3 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/awaiting/divider",
                        "$step-dot-item-tail-wait-color: $color-line1-3 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/processing/divider",
                        "$step-dot-item-tail-process-color: $color-line1-3 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/finished/divider",
                        "$step-dot-item-tail-finish-color: $color-brand1-6 !default;",
                        "",
                        "/// line color",
                        "/// @namespace statement/disabled/divider",
                        "$step-dot-item-tail-disabled-color: $color-line1-1 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/awaiting/content",
                        "$step-dot-item-title-wait-color: $color-text1-3 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/processing/content",
                        "$step-dot-item-title-process-color: $color-text1-4 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/finished/content",
                        "$step-dot-item-title-finish-color: $color-text1-3 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/disabled/content",
                        "$step-dot-item-title-disabled-color: $color-text1-1 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/awaiting/node",
                        "$step-dot-item-node-wait-border-color: $color-line1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/awaiting/node",
                        "$step-dot-item-node-wait-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/awaiting/node",
                        "$step-dot-item-node-wait-color: $color-text1-2 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/processing/node",
                        "$step-dot-item-node-process-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/processing/node",
                        "$step-dot-item-node-process-background: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/processing/node",
                        "$step-dot-item-node-process-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/finished/node",
                        "$step-dot-item-node-finish-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/finished/node",
                        "$step-dot-item-node-finish-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/finished/node",
                        "$step-dot-item-node-finish-color: $color-brand1-6 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/disabled/node",
                        "$step-dot-item-node-disabled-border-color: $color-line1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/node",
                        "$step-dot-item-node-disabled-background: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/node",
                        "$step-dot-item-node-disabled-color: $color-line1-1 !default;",
                        "",
                        "// 点型变量 (垂直)",
                        "// ----------------------------------------",
                        "",
                        "/// margin (t, b)",
                        "/// @namespace size/node",
                        "$step-dot-vertical-item-node-padding: $s-2 !default;",
                        "",
                        "/// margin (l)",
                        "/// @namespace size/content",
                        "$step-dot-vertical-item-body-margin-left: $s-4 !default;",
                        "",
                        "/// title margin (t)",
                        "/// @namespace size/content",
                        "$step-dot-vertical-item-title-margin-top: $s-zero !default;",
                        "",
                        "/// body margin (t)",
                        "/// @namespace size/content",
                        "$step-dot-vertical-item-content-margin-top: $s-2 !default;",
                        "",
                        "/// body size",
                        "/// @namespace size/content",
                        "$step-dot-item-content-font-size: $font-size-caption !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/content",
                        "$step-dot-item-content-color: $color-text1-3 !default;",
                        "",
                        "/// tail bg color",
                        "/// @namespace statement/normal/content",
                        "$step-dot-item-tail-bg-color: $color-line1-1 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/divider",
                        "$step-dot-vertical-item-tail-size: $line-1 !default;"
                    ]
                }
            },
            "view": {
                "step-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import Icon from '../../icon';",
                        "import Progress from '../../progress';",
                        "import ConfigProvider from '../../config-provider';",
                        "import { support, events, dom } from '../../util';",
                        "",
                        "/** Step.Item */",
                        "class StepItem extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        rtl: PropTypes.bool,",
                        "        /**",
                        "         * 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`",
                        "         */",
                        "        status: PropTypes.oneOf(['wait', 'process', 'finish']),",
                        "        /**",
                        "         * 标题",
                        "         */",
                        "        title: PropTypes.node,",
                        "        direction: PropTypes.oneOf(['horizontal', 'vertical']),",
                        "        labelPlacement: PropTypes.oneOf(['horizontal', 'vertical']),",
                        "        shape: PropTypes.oneOf(['circle', 'arrow', 'dot']),",
                        "        /**",
                        "         * 图标",
                        "         */",
                        "        icon: PropTypes.string,",
                        "        /**",
                        "         * 内容，用于垂直状态下的内容填充",
                        "         */",
                        "        content: PropTypes.node,",
                        "        /**",
                        "         * StepItem 的自定义渲染, 会覆盖父节点设置的itemRender",
                        "         * @param {Number} index   节点索引",
                        "         * @param {String} status  节点状态",
                        "         * @returns {Node} 节点的渲染结果",
                        "         */",
                        "        itemRender: PropTypes.func,",
                        "        /**",
                        "        * 百分比",
                        "        */",
                        "        percent: PropTypes.number,",
                        "        index: PropTypes.number,",
                        "        total: PropTypes.number,",
                        "        animation: PropTypes.bool, // 是否开启动效，由父级传入",
                        "        /**",
                        "         * 是否禁用",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        parentWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                        "        parentHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                        "        /**",
                        "         * 点击步骤时的回调",
                        "         * @param {Number} index 节点索引",
                        "         */",
                        "        onClick: PropTypes.func,",
                        "        /**",
                        "         * 自定义样式",
                        "         */",
                        "        className: PropTypes.string,",
                        "        readOnly: PropTypes.bool",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        shape: 'circle',",
                        "        index: 0,",
                        "        total: 1,",
                        "        onClick: () => { },",
                        "    }",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "        this.removeClickedCls = this.removeClickedCls.bind(this);",
                        "        this._refHandlerCreator = this._refHandlerCreator.bind(this);",
                        "        this.resize = this.resize.bind(this);",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        const { shape, direction, labelPlacement, index, total } = this.props;",
                        "        if (shape === 'arrow') {",
                        "            return;",
                        "        }",
                        "",
                        "        if (direction === 'vertical') {",
                        "            this.resize();",
                        "            this.forceUpdate(); // 解决Step嵌套的情况下，嵌套节点宽度为0的问题",
                        "            this.eventHandler = events.on(window, 'resize', this.resize); // 调整垂直Step",
                        "        } else if (direction === 'horizontal' && labelPlacement === 'horizontal' && index !== (total - 1)) { // 调整横向Content",
                        "            this.adjustTail();",
                        "        }",
                        "    }",
                        "",
                        "    componentDidUpdate() {",
                        "        const { shape, direction, labelPlacement, index, total, rtl } = this.props;",
                        "        if (shape === 'arrow') {",
                        "            return;",
                        "        }",
                        "",
                        "        if (direction === 'vertical') {",
                        "            this.resize();",
                        "        } else if (direction === 'horizontal') {",
                        "            const pos = rtl ? 'right' : 'left';",
                        "            dom.setStyle(this.body, {",
                        "                width: '',",
                        "                [pos]: ''",
                        "            });",
                        "        } else if (shape === 'circle' && labelPlacement === 'horizontal' && index !== (total - 1)) { // 调整横向Content",
                        "            this.adjustTail();",
                        "        } else if (index !== (total - 1)) {",
                        "            dom.setStyle(this.tail, {",
                        "                width: '',",
                        "                // eslint-disable-next-line",
                        "                'top': ''",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    componentWillUnmount() {",
                        "        this.eventHandler && this.eventHandler.off();",
                        "    }",
                        "",
                        "    adjustTail() {",
                        "        const width = this.container.offsetWidth + this.title.offsetWidth;",
                        "        dom.setStyle(this.tail, {",
                        "            width: `calc(100% - ${width}px)`,",
                        "            top: `${dom.getStyle(this.container, 'height') / 2}px`",
                        "        });",
                        "    }",
                        "",
                        "    resize() {",
                        "        const stepWidth = dom.getStyle(this.step, 'width');",
                        "        const { rtl } = this.props;",
                        "",
                        "        rtl ?",
                        "            this.body.style.right = `${stepWidth}px` :",
                        "            this.body.style.left = `${stepWidth}px`;",
                        "        dom.setStyle(this.body, {",
                        "            width: dom.getStyle(this.step.parentNode.parentNode, 'width') - stepWidth",
                        "        });",
                        "        dom.setStyle(this.tail, 'height', dom.getStyle(this.body, 'height') - dom.getStyle(this.container, 'height'));",
                        "    }",
                        "",
                        "    _getNode() {",
                        "        const { prefix, index, status, icon, shape, percent, itemRender } = this.props;",
                        "        let nodeElement = icon;",
                        "        if (shape === 'dot') {",
                        "            nodeElement = icon ? <Icon type={icon} /> : <div className={`${prefix}step-item-node-circle`}> </div>;",
                        "        } else if (shape === 'circle' && percent) {",
                        "            nodeElement = <Progress shape=\"circle\" percent={percent} className={`${prefix}step-item-progress`} />;",
                        "        } else if (shape === 'circle' && !!itemRender && typeof itemRender === 'function') {",
                        "            nodeElement = null; // 如果是需要自定义节点，则不处理，返回空",
                        "        } else {",
                        "            nodeElement = (",
                        "                <div className={`${prefix}step-item-node-circle`}>",
                        "                    {icon ? <Icon type={icon} /> : this._itemRender(index, status)}",
                        "                </div>",
                        "            );",
                        "        }",
                        "",
                        "        return nodeElement;",
                        "    }",
                        "    getNode(args) {",
                        "        const { prefix, itemRender, index, status, title, content } = this.props;",
                        "        const { others, stepCls, overlayCls } = args;",
                        "        const nodeElement = this._getNode();",
                        "        let finalNodeElement = (",
                        "            <div className={`${prefix}step-item-container`} ref={this._refHandlerCreator('container')}>",
                        "                <div className={`${prefix}step-item-node-placeholder`} onClick={this.onClick}>",
                        "                    <div",
                        "                        className={`${prefix}step-item-node`}",
                        "                        ref={this._refHandlerCreator('stepNode')}",
                        "                        onTransitionEnd={this.removeClickedCls}>{nodeElement}</div>",
                        "                </div>",
                        "            </div>",
                        "        );",
                        "",
                        "        if (!nodeElement) {  // 需要自定义子节点",
                        "            finalNodeElement = (",
                        "                <div className={`${prefix}step-item-container`} >",
                        "                    <div className={`${prefix}step-item-node-placeholder`} onClick={this.onClick}>",
                        "                        {itemRender(index, status, title, content)}",
                        "                    </div>",
                        "                </div>",
                        "            );",
                        "        }",
                        "",
                        "        return (",
                        "            <div {...others} style={this.getStyle()} className={stepCls} ref={this._refHandlerCreator('step')}>",
                        "                {finalNodeElement}",
                        "                <div className={`${prefix}step-item-body`} ref={this._refHandlerCreator('body')}>",
                        "                    <div className={`${prefix}step-item-title`} ref={this._refHandlerCreator('title')}>{title}</div>",
                        "                    <div className={`${prefix}step-item-content`}>{content}</div>",
                        "                </div>",
                        "                <div className={`${prefix}step-item-tail`} ref={this._refHandlerCreator('tail')}>",
                        "                    <div className={`${prefix}step-item-tail-underlay`}>",
                        "                        <div className={`${prefix}step-item-tail-overlay`} style={overlayCls}></div>",
                        "                    </div>",
                        "                </div>",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "    getStyle() {",
                        "        const { parentWidth, parentHeight, direction, total, index, shape } = this.props;",
                        "        let width = 'auto';",
                        "",
                        "        if (Number(parentWidth) && Number(parentHeight)) {",
                        "            if (!support.flex && shape === 'arrow') {",
                        "                width = Math.floor(parentWidth / total - parentHeight / 2 - parentHeight / 8);",
                        "            }",
                        "        }",
                        "        if (shape !== 'arrow' && direction === 'horizontal') {",
                        "            width = (total - 1) !== index ? `${Math.floor(100 / total)}%` : 'auto';",
                        "        }",
                        "        return {",
                        "            width: width",
                        "        };",
                        "    }",
                        "",
                        "    onClick = () => {",
                        "        const { index, disabled, readOnly, animation } = this.props;",
                        "        if (disabled || readOnly) {",
                        "            return false;",
                        "        }",
                        "",
                        "        if (animation && this.stepNode) {",
                        "            dom.hasClass(this.stepNode, 'clicked') ? dom.removeClass(this.stepNode, 'clicked') : dom.addClass(this.stepNode, 'clicked');",
                        "        }",
                        "        this.props.onClick(index);",
                        "    }",
                        "",
                        "    removeClickedCls() {",
                        "        const { animation } = this.props;",
                        "        if (animation && this.stepNode && dom.hasClass(this.stepNode, 'clicked')) {",
                        "            dom.removeClass(this.stepNode, 'clicked');",
                        "        }",
                        "    }",
                        "",
                        "    // 节点的渲染方法",
                        "    _itemRender(index, status) {",
                        "        const { itemRender } = this.props;",
                        "        if (itemRender) {",
                        "            return itemRender(index, status);",
                        "        }",
                        "        return status === 'finish' ? <Icon type=\"select\" /> : index + 1;",
                        "    }",
                        "",
                        "    _refHandlerCreator(refName) {",
                        "        const self = this;",
                        "        return function (ref) {",
                        "            self[refName] = ref;",
                        "        };",
                        "    }",
                        "",
                        "    render() {",
                        "        // eslint-disable-next-line",
                        "        const { prefix, locale, className, status, title, icon, index, total, shape, content, direction, disabled, onClick, readOnly, animation, parentHeight, itemRender, parentWidth, labelPlacement, rtl, ...others } = this.props;",
                        "",
                        "        const stepCls = classNames({",
                        "            [`${prefix}step-item`]: true,",
                        "            [`${prefix}step-item-${status}`]: status,",
                        "            [`${prefix}step-item-first`]: index === 0,",
                        "            [`${prefix}step-item-last`]: index === total - 1,",
                        "            [`${prefix}step-item-disabled`]: disabled,",
                        "            [`${prefix}step-item-read-only`]: readOnly,",
                        "            [className]: className",
                        "        });",
                        "",
                        "        const overlayCls = status === 'finish' ? { width: '100%' } : null;",
                        "        const arrowElement = (",
                        "            <div {...others} style={this.getStyle()} className={stepCls} onClick={this.onClick}>",
                        "                <div className={`${prefix}step-item-container`}>",
                        "                    <div className={`${prefix}step-item-title`}>{title}</div>",
                        "                </div>",
                        "            </div>",
                        "        );",
                        "        const otherElement = this.getNode({ others, stepCls, overlayCls });",
                        "",
                        "        return shape === 'arrow' ? arrowElement : otherElement;",
                        "    }",
                        "",
                        "}",
                        "export default ConfigProvider.config(StepItem);",
                        ""
                    ]
                },
                "step.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children } from 'react';",
                        "import ReactDOM from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import { support, events, dom } from '../../util';",
                        "",
                        "const getHeight = el => dom.getStyle(el, 'height');",
                        "const setHeight = (el, height) => dom.setStyle(el, 'height', height);",
                        "",
                        "/** Step */",
                        "export default class Step extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        rtl: PropTypes.bool,",
                        "        /**",
                        "         * 当前步骤",
                        "         */",
                        "        current: PropTypes.number,",
                        "        /**",
                        "         * 展示方向",
                        "         */",
                        "        direction: PropTypes.oneOf(['horizontal', 'vertical']),",
                        "        /**",
                        "         * 横向布局时的内容排列",
                        "         */",
                        "        labelPlacement: PropTypes.oneOf(['horizontal', 'vertical']),",
                        "        /**",
                        "         * 类型",
                        "         */",
                        "        shape: PropTypes.oneOf(['circle', 'arrow', 'dot']),",
                        "        /**",
                        "         * 是否只读模式",
                        "         */",
                        "        readOnly: PropTypes.bool,",
                        "        /**",
                        "         * 是否开启动效",
                        "         */",
                        "        animation: PropTypes.bool,",
                        "        /**",
                        "         * 自定义样式名",
                        "         */",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * StepItem 的自定义渲染",
                        "         * @param {Number} index   节点索引",
                        "         * @param {String} status  节点状态",
                        "         * @returns {Node} 节点的渲染结果",
                        "         */",
                        "        itemRender: PropTypes.func,",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        current: 0,",
                        "        direction: 'horizontal',",
                        "        labelPlacement: 'vertical',",
                        "        shape: 'circle',",
                        "        animation: true,",
                        "        itemRender: null",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        prefix: PropTypes.string",
                        "    };",
                        "",
                        "    constructor(props, context) {",
                        "        super(props, context);",
                        "        this.state = {",
                        "            parentWidth: 'auto',",
                        "            parentHeight: 'auto',",
                        "        };",
                        "        this.resize = this.resize.bind(this);",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        /* istanbul ignore if */",
                        "        if (!support.flex) {",
                        "            this.resize();",
                        "            events.on(window, 'resize', this.resize);",
                        "        }",
                        "        this.adjustHeight();",
                        "",
                        "    }",
                        "",
                        "    componentWillReceiveProps(newProps) {",
                        "        if ('current' in newProps) {",
                        "            this.setState({",
                        "                current: newProps.current",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    componentDidUpdate() {",
                        "        this.adjustHeight();",
                        "    }",
                        "",
                        "    componentWillUnmount() {",
                        "        /* istanbul ignore if */",
                        "        if (!support.flex) {",
                        "            events.off(window, 'resize', this.resize);",
                        "        }",
                        "    }",
                        "",
                        "    adjustHeight() {",
                        "        const { shape, direction, prefix, labelPlacement } = this.props;",
                        "        if (shape !== 'arrow' && direction === 'horizontal' && labelPlacement === 'vertical') {",
                        "            const step = ReactDOM.findDOMNode(this.step);",
                        "            const height = Array.prototype.slice.call(step.getElementsByClassName(`${prefix}step-item`)).reduce((ret, re) => {",
                        "                const itemHeight = getHeight(re) + getHeight(re.getElementsByClassName(`${prefix}step-item-body`)[0]);",
                        "                return Math.max(itemHeight, ret);",
                        "            }, 0);",
                        "            setHeight(step, height);",
                        "        }",
                        "    }",
                        "",
                        "    resize() {",
                        "        if (this.step) {",
                        "            this.setState({",
                        "                parentWidth: this.step.offsetWidth || 0,",
                        "                parentHeight: this.step.offsetHeight || 0,",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    _getValidChildren(children) {",
                        "        const result = [];",
                        "        React.Children.forEach(children, child => {",
                        "            if (React.isValidElement(child)) {",
                        "                result.push(child);",
                        "            }",
                        "        });",
                        "        return result;",
                        "    }",
                        "",
                        "    _stepRefHandler = ref => {",
                        "        this.step = ref;",
                        "    }",
                        "",
                        "    render() {",
                        "        // eslint-disable-next-line",
                        "        let { prefix, locale, className, current, direction, labelPlacement, shape, children, readOnly, animation, itemRender, rtl, ...others } = this.props;",
                        "        prefix = this.context.prefix || prefix;",
                        "        const { parentWidth, parentHeight } = this.state;",
                        "",
                        "        // type不同对应的direction不同",
                        "        direction = shape === 'arrow' ? 'horizontal' : direction;",
                        "",
                        "        // children去除null",
                        "        children = this._getValidChildren(children);",
                        "",
                        "        // 修改子节点属性",
                        "        const cloneChildren = Children.map(children, (child, index) => {",
                        "            const status = index < current ? 'finish' : (index === current ? 'process' : 'wait');",
                        "",
                        "            return React.cloneElement(child, {",
                        "                prefix,",
                        "                key: index,",
                        "                index,",
                        "                total: children.length,",
                        "                status: child.props.status || status,",
                        "                shape,",
                        "                direction,",
                        "                labelPlacement,",
                        "                parentWidth,",
                        "                parentHeight,",
                        "                readOnly,",
                        "                animation,",
                        "                itemRender: child.props.itemRender ? child.props.itemRender : itemRender // 优先使用Item的itemRender",
                        "            });",
                        "        });",
                        "",
                        "        const stepCls = classNames({",
                        "            [`${prefix}step`]: true,",
                        "            [`${prefix}step-${shape}`]: shape,",
                        "            [`${prefix}step-${direction}`]: direction,",
                        "            [`${prefix}step-label-${labelPlacement}`]: labelPlacement,",
                        "            [className]: className",
                        "        });",
                        "",
                        "        if (rtl) {",
                        "            others.dir = 'rtl';",
                        "        }",
                        "",
                        "        return (",
                        "            <div {...others} className={stepCls} ref={this._stepRefHandler}>",
                        "                {cloneChildren}",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "}"
                    ]
                }
            }
        },
        "switch": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import classNames from 'classnames';",
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import { KEYCODE } from '../util';",
                    "import ConfigProvider from '../config-provider';",
                    "",
                    "/** Switch*/",
                    "class Switch extends React.Component {",
                    "    static contextTypes = {",
                    "        prefix: PropTypes.string",
                    "    }",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        pure: PropTypes.bool,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内敛样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 打开时的内容",
                    "         */",
                    "        checkedChildren: PropTypes.any,",
                    "        /**",
                    "         * 关闭时的内容",
                    "         */",
                    "        unCheckedChildren: PropTypes.any,",
                    "        /**",
                    "         * 开关状态改变是触发此事件",
                    "         * @param {Boolean} checked 是否为打开状态",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 开关当前的值(针对受控组件)",
                    "         */",
                    "        checked: PropTypes.bool,",
                    "        /**",
                    "         * 开关默认值 (针对非受控组件)",
                    "         */",
                    "        defaultChecked: PropTypes.bool,",
                    "        /**",
                    "         * 表示开关被禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * switch的尺寸",
                    "         * @enumdesc 正常大小, 缩小版大小",
                    "         */",
                    "        size: PropTypes.oneOf(['medium', 'small']),",
                    "        /**",
                    "         * 鼠标点击事件",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onClick: PropTypes.func,",
                    "        /**",
                    "         * 键盘按键事件",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onKeyDown: PropTypes.func",
                    "    };",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        disabled: false,",
                    "        size: 'medium',",
                    "        onChange: () => {",
                    "        }",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        const checked = props.checked || props.defaultChecked;",
                    "        this.onChange = this.onChange.bind(this);",
                    "        this.onKeyDown = this.onKeyDown.bind(this);",
                    "        this.state = {",
                    "            checked",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('checked' in nextProps) {",
                    "            let checked = nextProps.checked;",
                    "            if (checked === undefined) {",
                    "                checked = false;",
                    "            }",
                    "            this.setState({",
                    "                checked: checked",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onChange(ev) {",
                    "        const checked = !this.state.checked;",
                    "",
                    "        if (!('checked' in this.props)) {",
                    "            this.setState({",
                    "                checked",
                    "            });",
                    "        }",
                    "        this.props.onChange(checked, ev);",
                    "        this.props.onClick && this.props.onClick(ev);",
                    "    }",
                    "",
                    "    onKeyDown(e) {",
                    "        if (e.keyCode === KEYCODE.ENTER || e.keyCode === KEYCODE.SPACE) {",
                    "            this.onChange(e);",
                    "        }",
                    "        this.props.onKeyDown && this.props.onKeyDown(e);",
                    "    }",
                    "",
                    "    render() {",
                    "        /* eslint-disable no-unused-vars */",
                    "        const {prefix, className, disabled, size, checkedChildren, unCheckedChildren, rtl, ...others } = this.props,",
                    "            status = this.state.checked ? 'on' : 'off';",
                    "        const children = this.state.checked ? checkedChildren : unCheckedChildren;",
                    "",
                    "        let _size = size;",
                    "        if (_size !== 'small' && _size !== 'medium') {",
                    "            _size = 'medium';",
                    "        }",
                    "",
                    "        const classes = classNames({",
                    "            [`${prefix}switch`]: true,",
                    "            [`${prefix}switch-${status}`]: true,",
                    "            [`${prefix}switch-${_size}`]: true,",
                    "            [className]: className",
                    "        });",
                    "        let attrs;",
                    "",
                    "        if (!disabled) {",
                    "            attrs = {",
                    "                onClick: this.onChange,",
                    "                tabIndex: 0,",
                    "                onKeyDown: this.onKeyDown,",
                    "                disabled: disabled",
                    "            };",
                    "        } else {",
                    "            attrs = {",
                    "                disabled: disabled",
                    "            };",
                    "        }",
                    "",
                    "        return (",
                    "            <div {...others} className={classes} {...attrs} aria-checked={this.state.checked}>",
                    "                <div className={`${this.props.prefix}switch-children`}>{children}</div>",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default ConfigProvider.config(Switch);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/variable\";",
                    "",
                    ".#{$css-prefix}switch {",
                    "    @include box-sizing;",
                    "    outline: none;",
                    "    text-align: left;",
                    "    transition: all .3s cubic-bezier(.78, .14, .15, .86);",
                    "    overflow: hidden;",
                    "    cursor: pointer;",
                    "",
                    "    &:after {",
                    "        content: \" \";",
                    "        transition: all .4s cubic-bezier(.78, .14, .15, .86);",
                    "        transform-origin: left center;",
                    "    }",
                    "",
                    "    &-medium {",
                    "        @include bounding($switch-size-m-width, $switch-size-m-trigger, $switch-border-width-container, $switch-border-width-trigger, $switch-size-m-radius-container, $switch-size-m-radius-trigger);",
                    "    }",
                    "",
                    "    &-small {",
                    "        @include bounding($switch-size-s-width, $switch-size-s-trigger, $switch-border-width-container, $switch-border-width-trigger, $switch-size-s-radius-container, $switch-size-s-radius-trigger);",
                    "    }",
                    "",
                    "    &-on {",
                    "        background-color: $switch-normal-on-bg-color;",
                    "        &:after {",
                    "            box-shadow: $switch-on-shadow;",
                    "            background-color: $switch-normal-on-trigger-bg-color;",
                    "            border-color: $switch-handle-on-border-color;",
                    "        }",
                    "        > .#{$css-prefix}switch-children {",
                    "            left: $switch-text-on-left + $switch-border-width-container * 2;",
                    "            color: $switch-normal-on-color-font;",
                    "        }",
                    "",
                    "        &:hover {",
                    "            background-color: $switch-hover-on-bg-color;",
                    "            &:after {",
                    "                background-color: $switch-hover-on-trigger-bg-color;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-on#{&}-small {",
                    "        > .#{$css-prefix}switch-children {",
                    "            left: $switch-size-s-text-on-left + $switch-border-width-container * 2;",
                    "        }",
                    "    }",
                    "    &-on[disabled] {",
                    "        background-color: $switch-disabled-on-bg-color;",
                    "        cursor: not-allowed;",
                    "",
                    "        &:after {",
                    "            right: 0;",
                    "            box-shadow: $switch-on-shadow;",
                    "            background-color: $switch-disabled-on-trigger-bg-color;",
                    "            border-color: $switch-handle-disabled-border-color;",
                    "        }",
                    "",
                    "        > .#{$css-prefix}switch-children {",
                    "            color: $switch-disabled-on-color-font;",
                    "        }",
                    "    }",
                    "    &-off {",
                    "        background-color: $switch-normal-off-bg-color;",
                    "        border-color: $switch-normal-off-border-color;",
                    "",
                    "        &:hover {",
                    "            background-color: $switch-hover-off-bg-color;",
                    "            border-color: $switch-hover-off-border-color;",
                    "        }",
                    "",
                    "        &:after {",
                    "            left: 0;",
                    "            transform: translateX(0);",
                    "            box-shadow: $switch-on-shadow;",
                    "            background-color: $switch-normal-off-trigger-bg-color;",
                    "            border-color: $switch-handle-off-border-color;",
                    "            &:hover {",
                    "                background-color: $switch-hover-off-trigger-bg-color;",
                    "            }",
                    "        }",
                    "        > .#{$css-prefix}switch-children {",
                    "            right: $switch-text-off-right + $switch-border-width-container * 2;",
                    "            color: $switch-normal-off-color-font;",
                    "        }",
                    "    }",
                    "    &-off[disabled] {",
                    "        background-color: $switch-disabled-off-bg-color;",
                    "        border: 1px solid transparent;",
                    "        cursor: not-allowed;",
                    "        &:after {",
                    "            box-shadow: $switch-off-shadow;",
                    "            background-color: $switch-disabled-off-trigger-bg-color;",
                    "            border-color: $switch-handle-disabled-border-color;",
                    "        }",
                    "        > .#{$css-prefix}switch-children {",
                    "            color: $switch-disabled-off-color-font;",
                    "        }",
                    "    }",
                    "    &-off#{&}-small {",
                    "        > .#{$css-prefix}switch-children {",
                    "            right: $switch-size-s-text-off-right;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// switch mixins",
                        "// --------------------------------------------------",
                        "@mixin bounding(",
                        "    $width,",
                        "    $trigger-size,",
                        "    $border-width-container,",
                        "    $border-width-trigger,",
                        "    $container-radius,",
                        "    $trigger-radius",
                        ") {",
                        "    position: relative;",
                        "    display: inline-block;",
                        "    border: $border-width-container solid transparent;",
                        "    width: $width;",
                        "    height: $trigger-size + $border-width-container * 2;",
                        "    border-radius: $container-radius;",
                        "",
                        "    &:after {",
                        "        border: $border-width-trigger solid transparent;",
                        "        position: absolute;",
                        "        // left: $width - $border-width-container * 2 - $trigger-size;",
                        "        left: 100%;",
                        "        transform: translateX(-100%);",
                        "        width: $trigger-size;",
                        "        height: $trigger-size;",
                        "        border-radius: $trigger-radius;",
                        "        box-sizing: border-box;",
                        "    }",
                        "    > .#{$css-prefix}switch-children {",
                        "        font-size: $font-size-body-1;",
                        "        position: absolute;",
                        "        // width: $trigger-size;",
                        "        height: $trigger-size;",
                        "        line-height: $trigger-size;",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module switch: 开关",
                        "/// @tag Switch",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $switch-",
                        "/// @classPrefix {prefix}-switch",
                        "/// @order {\"size/bounding\":10,\"size/handle\":11,\"size/content\":12,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/handle\":101,\"statement/normal/content\":102,\"statement/hover\":11,\"statement/hover/bounding\":110,\"statement/hover/handle\":111,\"statement/hover/content\":112,\"statement/disabled\":12,\"statement/disabled/bounding\":120,\"statement/disabled/handle\":121,\"statement/disabled/content\":122}",
                        "////",
                        "// switch variables",
                        "// --------------------------------------------------",
                        "",
                        "// Medium",
                        "// ----------------------------------------",
                        "/// width",
                        "/// @namespace size/bounding",
                        "$switch-size-m-width: $s-14 !default;",
                        "/// radius",
                        "/// @namespace size/bounding",
                        "$switch-size-m-radius-container: $corner-3 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/handle",
                        "$switch-size-m-trigger: $s-6 !default;",
                        "/// radius",
                        "/// @namespace size/handle",
                        "$switch-size-m-radius-trigger: $corner-3 !default;",
                        "",
                        "// Small",
                        "// ----------------------------------------",
                        "/// width",
                        "/// @namespace size/bounding",
                        "$switch-size-s-width: $s-11 !default;",
                        "",
                        "/// radius",
                        "/// @namespace size/bounding",
                        "$switch-size-s-radius-container: $corner-3 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/handle",
                        "$switch-size-s-trigger: $s-5 !default;",
                        "/// radius",
                        "/// @namespace size/handle",
                        "$switch-size-s-radius-trigger: $corner-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$switch-border-width-container: $line-1 !default;",
                        "",
                        "/// on(l)",
                        "/// @namespace size/content",
                        "$switch-text-on-left: $s-2 !default;",
                        "",
                        "/// on-small(l)",
                        "/// @namespace size/content",
                        "$switch-size-s-text-on-left: $s-1 !default;",
                        "",
                        "/// off(r)",
                        "/// @namespace size/content",
                        "$switch-text-off-right: $s-2 !default;",
                        "",
                        "/// off-small(r)",
                        "/// @namespace size/content",
                        "$switch-size-s-text-off-right: $s-zero !default;",
                        "",
                        "/// border",
                        "/// @namespace size/handle",
                        "$switch-border-width-trigger: $line-1 !default;",
                        "// level - on",
                        "",
                        "/// background",
                        "/// @level on",
                        "/// @namespace statement/normal/bounding",
                        "$switch-normal-on-bg-color: $color-brand1-6 !default;",
                        "/// background",
                        "/// @level on",
                        "/// @state hover",
                        "/// @namespace statement/hover/bounding",
                        "$switch-hover-on-bg-color: $color-brand1-9 !default;",
                        "/// background",
                        "/// @level on",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/bounding",
                        "$switch-disabled-on-bg-color: $color-fill1-3 !default;",
                        "",
                        "/// background",
                        "/// @level on",
                        "/// @namespace statement/normal/handle",
                        "$switch-normal-on-trigger-bg-color: $color-white !default;",
                        "/// background",
                        "/// @level on",
                        "/// @state hover",
                        "/// @namespace statement/hover/handle",
                        "$switch-hover-on-trigger-bg-color: $color-white !default;",
                        "",
                        "/// background",
                        "/// @level on",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/handle",
                        "$switch-disabled-on-trigger-bg-color: $color-fill1-1 !default;",
                        "",
                        "/// text",
                        "/// @level on",
                        "/// @namespace statement/normal/content",
                        "$switch-normal-on-color-font: $color-white !default;",
                        "",
                        "/// text",
                        "/// @level on",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/content",
                        "$switch-disabled-on-color-font: $color-text1-1 !default;",
                        "",
                        "/// border color",
                        "/// @level on",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/bounding",
                        "$switch-disabled-on-border-color: $color-line1-3 !default;",
                        "",
                        "/// border color",
                        "/// @state disabled",
                        "/// @namespace statement/normal/handle",
                        "$switch-handle-on-border-color: $color-transparent !default;",
                        "",
                        "/// shadow",
                        "/// @level on",
                        "/// @namespace statement/normal/bounding",
                        "$switch-on-shadow: $shadow-1 !default;",
                        "",
                        "// level - off",
                        "",
                        "/// background",
                        "/// @level off",
                        "/// @namespace statement/normal/bounding",
                        "$switch-normal-off-bg-color: $color-white !default;",
                        "/// background",
                        "/// @level off",
                        "/// @state hover",
                        "/// @namespace statement/hover/bounding",
                        "$switch-hover-off-bg-color: $color-fill1-2 !default;",
                        "/// background",
                        "/// @level off",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/bounding",
                        "$switch-disabled-off-bg-color: $color-fill1-1 !default;",
                        "",
                        "/// background",
                        "/// @level off",
                        "/// @namespace statement/normal/handle",
                        "$switch-normal-off-trigger-bg-color: $color-white !default;",
                        "/// background",
                        "/// @level off",
                        "/// @state hover",
                        "/// @namespace statement/hover/handle",
                        "$switch-hover-off-trigger-bg-color: $color-white !default;",
                        "/// background",
                        "/// @level off",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/handle",
                        "$switch-disabled-off-trigger-bg-color: $color-fill1-1 !default;",
                        "/// border color",
                        "/// @state disabled",
                        "/// @namespace statement/disabled/handle",
                        "$switch-handle-disabled-border-color: $color-line1-1 !default;",
                        "/// text",
                        "/// @level on",
                        "/// @namespace statement/normal/content",
                        "$switch-normal-off-color-font: $color-text1-2 !default;",
                        "",
                        "/// text",
                        "/// @level on",
                        "/// @state disabled",
                        "/// @namespace statement/hover/content",
                        "$switch-disabled-off-color-font: $color-line1-3 !default;",
                        "/// border",
                        "/// @state disabled",
                        "/// @namespace statement/normal/handle",
                        "$switch-handle-off-border-color: $color-transparent !default;",
                        "",
                        "/// border",
                        "/// @level off",
                        "/// @namespace statement/normal/bounding",
                        "$switch-normal-off-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @level off",
                        "/// @state hover",
                        "/// @namespace statement/hover/bounding",
                        "$switch-hover-off-border-color: $color-line1-3 !default;",
                        "/// shadow",
                        "/// @level off",
                        "/// @namespace statement/normal/bounding",
                        "$switch-off-shadow: $shadow-1 !default;"
                    ]
                }
            }
        },
        "tab": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Tab from './tab';",
                    "",
                    "export default ConfigProvider.config(Tab, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('type' in props) {",
                    "            deprecated('type', 'shape', 'Tab');",
                    "            const { type, ...others } = props;",
                    "            props = { shape: type, ...others };",
                    "        }",
                    "        if ('resDirection' in props) {",
                    "            const { resDirection, ...others } = props;",
                    "",
                    "            let excessMode;",
                    "            if (resDirection === 'horizontal') {",
                    "                deprecated('resDirection=horizontal', 'excessMode=slide', 'Tab');",
                    "",
                    "                excessMode = 'slide';",
                    "            } else if (resDirection === 'vertical') {",
                    "                deprecated('resDirection=vertical', 'excessMode=dropdown', 'Tab');",
                    "",
                    "                excessMode = 'dropdown';",
                    "            }",
                    "            props = { excessMode, ...others };",
                    "        }",
                    "        if ('tabBarExtraContent' in props) {",
                    "            deprecated('tabBarExtraContent', 'extra', 'Tab');",
                    "            const { tabBarExtraContent, ...others } = props;",
                    "            props = { extra: tabBarExtraContent, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/placeholder\";",
                    "",
                    "#{$tab-prefix} {",
                    "    & {",
                    "        @include box-sizing;",
                    "        width: 100%;",
                    "    }",
                    "",
                    "    &-bar {",
                    "        outline: none;",
                    "    }",
                    "",
                    "    &-nav-container {",
                    "        position: relative;",
                    "        @include clearfix;",
                    "    }",
                    "",
                    "    &-nav-wrap {",
                    "        overflow: hidden;",
                    "    }",
                    "",
                    "    &-nav-scroll {",
                    "        overflow: hidden;",
                    "        white-space: nowrap;",
                    "    }",
                    "",
                    "    &-nav {",
                    "        display: inline-block;",
                    "        position: relative;",
                    "        transition: all .4s $ease-out-quint;",
                    "",
                    "        &-enter,",
                    "        &-appear {",
                    "            animation: fadeInLeft .4s cubic-bezier(.78, .14, .15, .86);",
                    "            animation-fill-mode: both;",
                    "        }",
                    "",
                    "        &-leave {",
                    "            animation: fadeOutLeft .2s cubic-bezier(.78, .14, .15, .86);",
                    "            animation-fill-mode: both;",
                    "        }",
                    "    }",
                    "",
                    "    &-tab {",
                    "        display: inline-block;",
                    "        position: relative;",
                    "        transition: all .4s $ease-out-quint;",
                    "",
                    "        &-inner {",
                    "            position: relative;",
                    "            cursor: pointer;",
                    "            text-decoration: none;",
                    "        }",
                    "",
                    "        &:before {",
                    "            content: \"\";",
                    "            position: absolute;",
                    "            transition: all .4s $ease-out-quint;",
                    "        }",
                    "",
                    "        &.active {",
                    "            font-weight: $tab-item-font-weight-selected;",
                    "        }",
                    "",
                    "        @include tabs-tab-close-icon(",
                    "            $tab-close-icon-color,",
                    "            $tab-close-icon-color-hover,",
                    "            $tab-close-icon-color-selected,",
                    "            $tab-close-icon-color-disabled",
                    "        );",
                    "    }",
                    "",
                    "    &-tabpane {",
                    "        display: none;",
                    "",
                    "        &.active {",
                    "            display: block;",
                    "        }",
                    "    }",
                    "",
                    "    /* Nav Button */",
                    "    /* ----------------- */",
                    "    &-btn-down,",
                    "    &-btn-prev,",
                    "    &-btn-next {",
                    "        position: absolute;",
                    "        top: 0;",
                    "        cursor: pointer;",
                    "        padding: 0;",
                    "        border: 0;",
                    "        outline: none;",
                    "        height: 100%;",
                    "",
                    "        @include button-color($tab-nav-arrow-color-normal, $tab-nav-arrow-color-hover);",
                    "",
                    "        &.disabled {",
                    "            cursor: not-allowed;",
                    "            color: $tab-nav-arrow-color-disabled;",
                    "        }",
                    "    }",
                    "",
                    "    &-btn-next {",
                    "        right: $tab-nav-arrow-right-positon-right;",
                    "    }",
                    "    &-btn-prev {",
                    "        right: $tab-nav-arrow-left-positon-right;",
                    "    }",
                    "    &-btn-down {",
                    "        right: $tab-nav-arrow-down-positon-right;",
                    "    }",
                    "",
                    "    &-content {",
                    "        overflow: hidden;",
                    "    }",
                    "",
                    "    /* position: vertical */",
                    "    /* ----------------- */",
                    "    &-vertical > #{$tab-prefix}-bar {",
                    "        #{$tab-prefix}-nav {",
                    "            width: 100%;",
                    "        }",
                    "",
                    "        #{$tab-prefix}-tab {",
                    "            display: block;",
                    "        }",
                    "    }",
                    "",
                    "    /* Size */",
                    "    /* ----------------- */",
                    "    &.#{$css-prefix}medium {",
                    "        @include tabs-size(",
                    "            $tab-item-padding-tb-size-m,",
                    "            $tab-item-padding-lr-size-m,",
                    "            $tab-item-text-size-m,",
                    "            $tab-nav-tab-icon-size-m,",
                    "            $tab-nav-close-icon-size-m,",
                    "            $tab-nav-close-icon-padding-l-size-m,",
                    "            $tab-nav-scroll-padding-right-m",
                    "        );",
                    "    }",
                    "",
                    "    &.#{$css-prefix}small {",
                    "        @include tabs-size(",
                    "            $tab-item-padding-tb-size-s,",
                    "            $tab-item-padding-lr-size-s,",
                    "            $tab-item-text-size-s,",
                    "            $tab-nav-tab-icon-size-s,",
                    "            $tab-nav-close-icon-size-s,",
                    "            $tab-nav-close-icon-padding-l-size-s,",
                    "            $tab-nav-scroll-padding-right-s",
                    "        );",
                    "    }",
                    "",
                    "    /* shape: pure */",
                    "    /* ----------------- */",
                    "    &-pure > #{$tab-prefix}-bar {",
                    "        border-bottom: $tab-pure-divider-line;",
                    "        background-color: $tab-pure-bg-color;",
                    "",
                    "        #{$tab-prefix}-nav-container {",
                    "            margin-bottom: -$tab-pure-divider-line-width;",
                    "            box-shadow: $tab-pure-divider-shadow;",
                    "",
                    "            #{$tab-prefix}-tab {",
                    "                @include tabs-tab-statement(",
                    "                    $tab-pure-text-color-normal, // text color",
                    "                    $tab-pure-text-color-hover,",
                    "                    $tab-pure-text-color-selected,",
                    "                    $tab-pure-text-color-disabled,",
                    "                    transparent, // bg color",
                    "                    transparent,",
                    "                    transparent,",
                    "                    transparent",
                    "                );",
                    "",
                    "                @include tabs-tab-inkbar(",
                    "                    $tab-pure-ink-bar-width,",
                    "                    $tab-pure-ink-bar-color,",
                    "                    0%,",
                    "                    0%,",
                    "                    'bottom'",
                    "                );",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    /* Shape: wrapped */",
                    "    /* --------------------- */",
                    "    &-wrapped > #{$tab-prefix}-bar {",
                    "        background: $tab-wrapped-bar-bg-color;",
                    "",
                    "        #{$tab-prefix}-tab {",
                    "            @include tabs-tab-statement(",
                    "                $tab-wrapped-text-color,",
                    "                $tab-wrapped-text-color-hover,",
                    "                $tab-wrapped-text-color-selected,",
                    "                $tab-wrapped-text-color-disabled,",
                    "                $tab-wrapped-bg-color,",
                    "                $tab-wrapped-bg-color-hover,",
                    "                $tab-wrapped-bg-color-selected,",
                    "                $tab-wrapped-bg-color-disabled",
                    "            );",
                    "",
                    "            @include tabs-tab-close-icon(",
                    "                $tab-close-icon-color,",
                    "                $tab-close-icon-color-hover,",
                    "                $tab-close-icon-color-selected,",
                    "                $tab-close-icon-color-disabled",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &-wrapped:before, &-wrapped:after, {",
                    "        content: \"\";",
                    "        display: table;",
                    "    }",
                    "",
                    "    &-wrapped:after {",
                    "        clear: both;",
                    "    }",
                    "",
                    "    &-wrapped > #{$tab-prefix}-content {",
                    "        position: relative;",
                    "    }",
                    "",
                    "    /* Shape: wrapped(top) */",
                    "    &-wrapped#{$tab-prefix}-top > #{$tab-prefix}-bar {",
                    "        #{$tab-prefix}-tab {",
                    "            margin-right: $tab-wrapped-tab-margin-right;",
                    "            @include tabs-tab-border(",
                    "                $tab-wrapped-bar-border,",
                    "                null,",
                    "                $tab-wrapped-tab-top-border-radius,",
                    "                $tab-wrapped-border-line-color-hover,",
                    "                $tab-wrapped-border-line-color,",
                    "                $tab-wrapped-border-line-color,",
                    "                $tab-wrapped-bg-color-selected,",
                    "                $tab-wrapped-border-line-color",
                    "            );",
                    "",
                    "            @include tabs-tab-inkbar(",
                    "                $tab-wrapped-ink-bar-width,",
                    "                $tab-wrapped-ink-bar-color,",
                    "                -$tab-wrapped-border-line-width,",
                    "                $tab-wrapped-tab-corner-radius,",
                    "                'top'",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    &-wrapped#{$tab-prefix}-top > #{$tab-prefix}-content {",
                    "        top: -$tab-wrapped-content-position-top;",
                    "        border-top: $tab-wrapped-content-border;",
                    "    }",
                    "",
                    "    /* Shape: wrapped(bottom) */",
                    "    &-wrapped#{$tab-prefix}-bottom > #{$tab-prefix}-bar {",
                    "        #{$tab-prefix}-tab {",
                    "            margin-right: $tab-wrapped-tab-margin-right;",
                    "            @include tabs-tab-border( $tab-wrapped-bar-border, null, $tab-wrapped-tab-bottom-border-radius, $tab-wrapped-border-line-color-hover, $tab-wrapped-bg-color-selected, $tab-wrapped-border-line-color, $tab-wrapped-border-line-color, $tab-wrapped-border-line-color);",
                    "            @include tabs-tab-inkbar( $tab-wrapped-ink-bar-width, $tab-wrapped-ink-bar-color, -$tab-wrapped-border-line-width, $tab-wrapped-tab-corner-radius, 'bottom');",
                    "        }",
                    "    }",
                    "",
                    "    &-wrapped#{$tab-prefix}-bottom > #{$tab-prefix}-content {",
                    "        top: $tab-wrapped-content-position-top;",
                    "        border-bottom: $tab-wrapped-content-border;",
                    "    }",
                    "",
                    "    /* Shape: wrapped(left) */",
                    "    &-wrapped#{$tab-prefix}-left > #{$tab-prefix}-bar {",
                    "        float: left;",
                    "        #{$tab-prefix}-tab {",
                    "            float: none;",
                    "            margin-bottom: $tab-wrapped-tab-margin-bottom;",
                    "            @include tabs-tab-border( $tab-wrapped-bar-border, null, $tab-wrapped-tab-left-border-radius, $tab-wrapped-border-line-color-hover, $tab-wrapped-border-line-color, $tab-wrapped-bg-color-selected, $tab-wrapped-border-line-color, $tab-wrapped-border-line-color);",
                    "            @include tabs-tab-inkbar($tab-wrapped-ink-bar-width, $tab-wrapped-ink-bar-color, -$tab-wrapped-border-line-width, $tab-wrapped-tab-corner-radius, 'left');",
                    "        }",
                    "    }",
                    "",
                    "    &-wrapped#{$tab-prefix}-left > #{$tab-prefix}-content {",
                    "        right: $tab-wrapped-content-position-right;",
                    "        border-left: $tab-wrapped-content-border;",
                    "    }",
                    "",
                    "    /* Shape: wrapped(right) */",
                    "    &-wrapped#{$tab-prefix}-right > #{$tab-prefix}-bar {",
                    "        float: right;",
                    "        #{$tab-prefix}-tab {",
                    "            float: none;",
                    "            margin-bottom: $tab-wrapped-tab-margin-bottom;",
                    "            @include tabs-tab-border( $tab-wrapped-bar-border, null, $tab-wrapped-tab-right-border-radius, $tab-wrapped-border-line-color-hover, $tab-wrapped-border-line-color, $tab-wrapped-border-line-color, $tab-wrapped-border-line-color, $tab-wrapped-bg-color-selected);",
                    "            @include tabs-tab-inkbar($tab-wrapped-ink-bar-width, $tab-wrapped-ink-bar-color, -$tab-wrapped-border-line-width, $tab-wrapped-tab-corner-radius, 'right');",
                    "        }",
                    "    }",
                    "",
                    "    &-wrapped#{$tab-prefix}-right > #{$tab-prefix}-content {",
                    "        right: -$tab-wrapped-content-position-right;",
                    "        border-right: $tab-wrapped-content-border;",
                    "    }",
                    "",
                    "    &-capsule > #{$tab-prefix}-bar {",
                    "        #{$tab-prefix}-tab {",
                    "            border-top: $tab-capsule-tab-border;",
                    "            border-bottom: $tab-capsule-tab-border;",
                    "            border-left: $tab-capsule-tab-border;",
                    "",
                    "            &:first-child {",
                    "                border-radius: $tab-capsule-corner-radius 0 0 $tab-capsule-corner-radius;",
                    "            }",
                    "",
                    "            &:last-child {",
                    "                border-radius: 0 $tab-capsule-corner-radius $tab-capsule-corner-radius 0;",
                    "                border-right: $tab-capsule-tab-border;",
                    "            }",
                    "",
                    "            &.active {",
                    "                margin-right: -$tab-capsule-tab-border-line-width;",
                    "                border-color: $tab-capsule-tab-border-line-color-active;",
                    "            }",
                    "",
                    "            &.disabled {",
                    "                border-color: $tab-capsule-tab-border-line-color-disabled;",
                    "            }",
                    "",
                    "            @include tabs-tab-statement(",
                    "                $tab-capsule-text-color,",
                    "                $tab-capsule-text-color-hover,",
                    "                $tab-capsule-text-color-selected,",
                    "                $tab-capsule-text-color-disabled,",
                    "                $tab-capsule-bg-color,",
                    "                $tab-capsule-bg-color-hover,",
                    "                $tab-capsule-bg-color-selected,",
                    "                $tab-capsule-bg-color-disabled",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    /* Shape: text */",
                    "    /* ------------------- */",
                    "",
                    "    &-text > #{$tab-prefix}-bar {",
                    "",
                    "        #{$tab-prefix}-tab {",
                    "            @include tabs-tab-statement(",
                    "                $tab-text-text-color-normal,",
                    "                $tab-text-text-color-hover,",
                    "                $tab-text-text-color-selected,",
                    "                $tab-text-text-color-disabled,",
                    "                transparent, // no bg",
                    "                transparent, // no hover bg",
                    "                transparent, // no selected bg",
                    "                transparent  // no disabled bg",
                    "            );",
                    "",
                    "            &:not(:last-child):after {",
                    "                content: ' ';",
                    "                position: absolute;",
                    "                right: 0;",
                    "                top: calc(50% - #{$tab-text-item-sep-height / 2});",
                    "                width: $tab-text-item-sep-width;",
                    "                height: $tab-text-item-sep-height;",
                    "                background-color: $tab-text-item-sep-color;",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../overlay/style.js';",
                    "import '../menu/style.js';",
                    "import './main.scss';"
                ]
            },
            "tab.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import { KEYCODE, obj } from '../util';",
                    "import TabNav from './tabs/nav';",
                    "import TabContent from './tabs/content';",
                    "import TabItem from './tabs/tab-item';",
                    "import { toArray } from './tabs/utils';",
                    "",
                    "const noop = () => {};",
                    "",
                    "/** Tab */",
                    "export default class Tab extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 被激活的选项卡的 key",
                    "         */",
                    "        activeKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "        /**",
                    "         * 初始化时被激活的选项卡的 key",
                    "         */",
                    "        defaultActiveKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "        /**",
                    "         * 外观形态",
                    "         */",
                    "        shape: PropTypes.oneOf(['pure', 'wrapped', 'text', 'capsule']),",
                    "        /**",
                    "         * 是否开启动效",
                    "         */",
                    "        animation: PropTypes.bool,",
                    "        /**",
                    "         * 选项卡过多时的滑动模式",
                    "         */",
                    "        excessMode: PropTypes.oneOf(['slide', 'dropdown']),",
                    "        /**",
                    "         * 导航选项卡的位置，只适用于包裹型（wrapped）选项卡",
                    "         */",
                    "        tabPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),",
                    "        /**",
                    "         * 尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium']),",
                    "        /**",
                    "         * 激活选项卡的触发方式",
                    "         */",
                    "        triggerType: PropTypes.oneOf(['hover', 'click']),",
                    "        /**",
                    "         * 是否提前渲染好所有 TabPane 的内容",
                    "         */",
                    "        lazyLoad: PropTypes.bool,",
                    "        /**",
                    "         * 是否自动卸载未处于激活状态的选项卡",
                    "         */",
                    "        unmountInactiveTabs: PropTypes.bool,",
                    "        /**",
                    "         * 导航条的自定义样式",
                    "         */",
                    "        navStyle: PropTypes.object,",
                    "        /**",
                    "         * 导航条的自定义样式类",
                    "         */",
                    "        navClassName: PropTypes.string,",
                    "        /**",
                    "         * 内容区容器的自定义样式",
                    "         */",
                    "        contentStyle: PropTypes.object,",
                    "        /**",
                    "         * 内容区容器的自定义样式类",
                    "         */",
                    "        contentClassName: PropTypes.string,",
                    "        /**",
                    "         * 导航栏附加内容",
                    "         */",
                    "        extra: PropTypes.node,",
                    "        /**",
                    "         * 点击单个选项卡时触发的回调",
                    "         */",
                    "        onClick: PropTypes.func,",
                    "        /**",
                    "         * 选项卡发生切换时的事件回调",
                    "         * @param {String} key 改变后的 key",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 选项卡被关闭时的事件回调",
                    "         * @param {String} key   关闭的选项卡的 key",
                    "         */",
                    "        onClose: PropTypes.func,",
                    "        /**",
                    "         * 自定义选项卡模板渲染函数",
                    "         * @param {String} key 当前 Tab.Item 的 key 值",
                    "         * @param {Object} props 传给 Tab.Item 的所有属性键值对",
                    "         * @return {ReactNode} 返回自定义组件",
                    "         */",
                    "        tabRender: PropTypes.func,",
                    "        children: PropTypes.any,",
                    "        className: PropTypes.string,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        shape: 'pure',",
                    "        size: 'medium',",
                    "        animation: true,",
                    "        tabPosition: 'top',",
                    "        excessMode: 'slide',",
                    "        triggerType: 'click',",
                    "        lazyLoad: true,",
                    "        unmountInactiveTabs: false,",
                    "        onClick: noop,",
                    "        onChange: noop,",
                    "        onClose: noop,",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        this.state = {",
                    "            activeKey: this.getDefaultActiveKey(props),",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if (nextProps.activeKey && this.state.activeKey !== nextProps.activeKey) {",
                    "            this.setState({",
                    "                activeKey: nextProps.activeKey,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    getDefaultActiveKey(props) {",
                    "        let activeKey = props.activeKey || props.defaultActiveKey;",
                    "        if (!activeKey) {",
                    "            React.Children.forEach(props.children, (child, index) => {",
                    "                /* eslint-disable eqeqeq */",
                    "                if (activeKey == undefined && !child.props.disabled) {",
                    "                    activeKey = child.key || index;",
                    "                }",
                    "            });",
                    "        }",
                    "        return activeKey;",
                    "    }",
                    "",
                    "    getNextActiveKey(isNext) {",
                    "        const children = [];",
                    "        React.Children.forEach(this.props.children, child => {",
                    "            if (!child.props.disabled) {",
                    "                if (isNext) {",
                    "                    children.push(child);",
                    "                } else {",
                    "                    children.unshift(child);",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "        const length = children.length;",
                    "        let key = length && children[0].key;",
                    "        children.forEach((child, i) => {",
                    "            if (child.key === this.state.activeKey) {",
                    "                if (i === length - 1) {",
                    "                    key = children[0].key;",
                    "                } else {",
                    "                    key = children[i + 1].key;",
                    "                }",
                    "            }",
                    "        });",
                    "        return key;",
                    "",
                    "    }",
                    "",
                    "    setActiveKey(key) {",
                    "        const { activeKey } = this.state;",
                    "",
                    "        // 如果 key 没变，或者受控状态下，则跳过",
                    "        if (key === activeKey || 'activeKey' in this.props) {",
                    "            return;",
                    "        }",
                    "        this.setState({",
                    "            activeKey: key,",
                    "        });",
                    "    }",
                    "",
                    "    handleTriggerEvent = (eventType, key) => {",
                    "        const { triggerType, onClick, onChange } = this.props;",
                    "        if (triggerType === eventType) {",
                    "            onClick(key);",
                    "            this.setActiveKey(key);",
                    "            if (this.state.activeKey !== key) {",
                    "                onChange(key);",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    onNavKeyDown = (e) => {",
                    "        const keyCode = e.keyCode;",
                    "        if (keyCode >= KEYCODE.LEFT && keyCode <= KEYCODE.DOWN) {",
                    "            e.preventDefault();",
                    "        }",
                    "        let newKey;",
                    "        if (keyCode === KEYCODE.RIGHT || keyCode === KEYCODE.DOWN) {",
                    "            newKey = this.getNextActiveKey(true);",
                    "            this.handleTriggerEvent(this.props.triggerType, newKey);",
                    "        } else if (keyCode === KEYCODE.LEFT || keyCode === KEYCODE.UP) {",
                    "            newKey = this.getNextActiveKey(false);",
                    "            this.handleTriggerEvent(this.props.triggerType, newKey);",
                    "        }",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            animation,",
                    "            shape,",
                    "            size,",
                    "            extra,",
                    "            excessMode,",
                    "            tabPosition,",
                    "            tabRender,",
                    "            triggerType,",
                    "            lazyLoad,",
                    "            unmountInactiveTabs,",
                    "            popupProps,",
                    "            navStyle,",
                    "            navClassName,",
                    "            contentStyle,",
                    "            contentClassName,",
                    "            className,",
                    "            onClose,",
                    "            children,",
                    "            ...others",
                    "        } = this.props;",
                    "        const { activeKey } = this.state;",
                    "",
                    "        const tabs = toArray(children);",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}tabs`]: true,",
                    "            [`${prefix}tabs-${shape}`]: shape,",
                    "            [`${prefix}tabs-vertical`]: shape === 'wrapped' && ['left', 'right'].indexOf(tabPosition) >= 0,",
                    "            [`${prefix}tabs-${tabPosition}`]: shape === 'wrapped',",
                    "            [`${prefix + size}`]: size,",
                    "        }, className);",
                    "",
                    "        const navProps = {",
                    "            prefix,",
                    "            animation,",
                    "            activeKey,",
                    "            excessMode,",
                    "            extra,",
                    "            tabs,",
                    "            tabPosition,",
                    "            tabRender,",
                    "            triggerType,",
                    "            popupProps,",
                    "            onClose,",
                    "            onTriggerEvent: this.handleTriggerEvent,",
                    "            onKeyDown: this.onNavKeyDown,",
                    "            style: navStyle,",
                    "            className: navClassName,",
                    "        };",
                    "",
                    "        const contentProps = {",
                    "            prefix,",
                    "            activeKey,",
                    "            lazyLoad,",
                    "            unmountInactiveTabs,",
                    "            style: contentStyle,",
                    "            className: contentClassName,",
                    "        };",
                    "",
                    "        const tabChildren = [",
                    "            <TabNav key=\"tab-nav\" {...navProps} />,",
                    "            <TabContent key=\"tab-content\" {...contentProps}>{tabs}</TabContent>",
                    "        ];",
                    "",
                    "        if (tabPosition === 'bottom') {",
                    "            tabChildren.reverse();",
                    "        }",
                    "",
                    "        return (<div className={classNames} {...obj.pickOthers(Tab.propTypes, others)}>",
                    "            {tabChildren}",
                    "        </div>);",
                    "    }",
                    "}",
                    "",
                    "Tab.Item = TabItem;"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// tab mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin tabs-tab-statement(",
                        "    $tab-color,",
                        "    $tab-color-hover,",
                        "    $tab-color-active,",
                        "    $tab-color-disabled,",
                        "    $tab-bg-color,",
                        "    $tab-bg-color-hover,",
                        "    $tab-bg-color-active,",
                        "    $tab-bg-color-disabled",
                        ") {",
                        "    color: $tab-color;",
                        "    background-color: $tab-bg-color;",
                        "",
                        "    &:hover {",
                        "        cursor: pointer;",
                        "        color: $tab-color-hover;",
                        "        background-color: $tab-bg-color-hover;",
                        "        border-color: 0;",
                        "    }",
                        "",
                        "    &.active {",
                        "        z-index: 1;",
                        "        color: $tab-color-active;",
                        "        background-color: $tab-bg-color-active;",
                        "    }",
                        "",
                        "    &.disabled {",
                        "        pointer-events: none;",
                        "        cursor: default;",
                        "        color: $tab-color-disabled;",
                        "        background: $tab-bg-color-disabled;",
                        "    }",
                        "}",
                        "",
                        "@mixin tabs-tab-inkbar($inkbar-width, $inkbar-color, $position-offset, $border-radius, $position: 'bottom') {",
                        "    &:before {",
                        "        border-radius: $border-radius;",
                        "",
                        "        @if $position == 'top' {",
                        "            width: 0;",
                        "            border-top: $inkbar-width solid $inkbar-color;",
                        "            left: 50%;",
                        "            top: $position-offset;",
                        "        } @else if $position == 'bottom' {",
                        "            width: 0;",
                        "            border-bottom: $inkbar-width solid $inkbar-color;",
                        "            left: 50%;",
                        "            bottom: $position-offset;",
                        "        } @else if $position == 'left' {",
                        "            height: 0;",
                        "            border-left: $inkbar-width solid $inkbar-color;",
                        "            top: 50%;",
                        "            left: $position-offset;",
                        "        } @else if $position == 'right' {",
                        "            height: 0;",
                        "            border-right: $inkbar-width solid $inkbar-color;",
                        "            top: 50%;",
                        "            right: $position-offset;",
                        "        }",
                        "    }",
                        "",
                        "    &.active {",
                        "        &:before {",
                        "            @if $position == 'top' or $position == 'bottom' {",
                        "                @if $border-radius == 0 {",
                        "                    width: 100%;",
                        "                } @else {",
                        "                    width: calc(100% - 2 * #{$border-radius});",
                        "                }",
                        "                left: $border-radius;",
                        "            } @else {",
                        "                @if $border-radius == 0 {",
                        "                    height: 100%;",
                        "                } @else {",
                        "                    height: calc(100% - 2 * #{$border-radius});",
                        "                }",
                        "                top: $border-radius;",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin tabs-tab-close-icon(",
                        "    $icon-color,",
                        "    $icon-color-hover,",
                        "    $icon-color-active,",
                        "    $icon-color-disabled",
                        ") {",
                        "",
                        "    .#{$css-prefix}tabs-tab-close {",
                        "        color: $icon-color;",
                        "",
                        "        &:hover {",
                        "            color: $icon-color-hover;",
                        "        }",
                        "    }",
                        "",
                        "    &.active {",
                        "        .#{$css-prefix}tabs-tab-close {",
                        "            color: $icon-color-active;",
                        "        }",
                        "    }",
                        "",
                        "    &.disabled {",
                        "        .#{$css-prefix}tabs-tab-close {",
                        "            color: $icon-color-disabled;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin tabs-tab-border(",
                        "    $tab-border,",
                        "    $tab-border-active,",
                        "    $tab-border-radius,",
                        "    $tab-border-color-hover,",
                        "    $tab-border-top-color-active,",
                        "    $tab-border-right-color-active,",
                        "    $tab-border-bottom-color-active,",
                        "    $tab-border-left-color-active",
                        ") {",
                        "    border: $tab-border;",
                        "    border-radius: $tab-border-radius;",
                        "",
                        "    &:hover {",
                        "        border-color: $tab-border-color-hover;",
                        "    }",
                        "",
                        "    &.active {",
                        "        border: $tab-border-active;",
                        "        border-color: $tab-border-top-color-active $tab-border-right-color-active $tab-border-bottom-color-active $tab-border-left-color-active;",
                        "    }",
                        "}",
                        "",
                        "@mixin tabs-content-statement(",
                        "    $content-text-color,",
                        "    $content-bg-color",
                        ") {",
                        "    color: $content-text-color;",
                        "    background: $content-bg-color;",
                        "}",
                        "",
                        "@mixin tabs-size(",
                        "    $tab-padding-tb: 0,",
                        "    $tab-padding-lr: 0,",
                        "    $font-size: 0,",
                        "    $tab-icon-size: $s-4,",
                        "    $close-icon-size: $s-4,",
                        "    $close-icon-margin-left: $s-2,",
                        "    $scroll-padding-right: 0",
                        ") {",
                        "    & #{$tab-prefix}-nav-container-scrolling {",
                        "        padding-right: $scroll-padding-right;",
                        "    }",
                        "",
                        "    #{$tab-prefix}-tab-inner {",
                        "        font-size: $font-size;",
                        "        padding: $tab-padding-tb $tab-padding-lr;",
                        "",
                        "        .#{$css-prefix}icon {",
                        "            @include icon-size($tab-icon-size);",
                        "        }",
                        "",
                        "        .#{$css-prefix}tabs-tab-close {",
                        "            padding-left: $close-icon-margin-left;",
                        "            @include icon-size($close-icon-size);",
                        "        }",
                        "    }",
                        "",
                        "    & #{$tab-prefix}-btn-down,",
                        "    & #{$tab-prefix}-btn-prev,",
                        "    & #{$tab-prefix}-btn-next {",
                        "        .#{$css-prefix}icon {",
                        "            @include icon-size($tab-icon-size);",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "placeholder.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// tab placeholders",
                        "// --------------------------------------------------",
                        "",
                        "// why placeholders? please read:",
                        "// http://krasimirtsonev.com/blog/article/SASS-mixins-extends-and-placeholders-differences-use-cases",
                        "",
                        "%motion-common {",
                        "    animation-duration: .4s;",
                        "    animation-fill-mode: both;",
                        "}",
                        "",
                        "%motion-common-leave {",
                        "    animation-duration: .4s;",
                        "    animation-fill-mode: both;",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module tab: 选项卡",
                        "/// @tag Tab",
                        "/// @category component",
                        "/// @family navigation",
                        "/// @varPrefix $tab-",
                        "/// @classPrefix {prefix}-tab",
                        "/// @order {\"size/nav scroll\":10,\"size/nav\":11,\"size/tab\":12,\"size/content\":13,\"statement/normal\":10,\"statement/normal/nav\":100,\"statement/normal/tab\":101,\"statement/normal/content\":102,\"statement/hover\":11,\"statement/hover/nav\":110,\"statement/hover/tab\":111,\"statement/selected\":12,\"statement/selected/nav\":120,\"statement/selected/tab\":121,\"statement/disabled\":13,\"statement/disabled/nav\":130,\"statement/disabled/tab\":131}",
                        "////",
                        "",
                        "// tab variables",
                        "// --------------------------------------------------",
                        "",
                        "$tab-prefix: '.' + $css-prefix + 'tabs';",
                        "",
                        "// animation timing function",
                        "$ease-out-quint: cubic-bezier(.23, 1, .32, 1);",
                        "",
                        "// Size",
                        "",
                        "/// padding (r)",
                        "/// @namespace size/nav scroll",
                        "$tab-nav-scroll-padding-right-m: $s-15 !default;",
                        "",
                        "/// padding (r)",
                        "/// @namespace size/nav scroll",
                        "$tab-nav-scroll-padding-right-s: $s-14 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/tab",
                        "$tab-nav-tab-icon-size-m: $icon-s !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/tab",
                        "$tab-nav-tab-icon-size-s: $icon-xs !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/close icon",
                        "$tab-nav-close-icon-size-m: $icon-xs !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/close cion",
                        "$tab-nav-close-icon-size-s: $icon-xxs !default;",
                        "",
                        "/// padding (l)",
                        "/// @namespace size/close icon",
                        "$tab-nav-close-icon-padding-l-size-m: $s-2 !default;",
                        "",
                        "/// padding (l)",
                        "/// @namespace size/close icon",
                        "$tab-nav-close-icon-padding-l-size-s: $s-2 !default;",
                        "",
                        "/// arrow left offset (r)",
                        "/// @namespace size/nav",
                        "$tab-nav-arrow-left-positon-right: $s-8 !default;",
                        "",
                        "/// arrow right offset (r)",
                        "/// @namespace size/nav",
                        "$tab-nav-arrow-right-positon-right: $s-2 !default;",
                        "",
                        "/// arrow down offset (r)",
                        "/// @namespace size/nav",
                        "$tab-nav-arrow-down-positon-right: $s-2 !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/tab",
                        "$tab-item-padding-tb-size-m: $s-3 !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/tab",
                        "$tab-item-padding-tb-size-s: $s-2 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/tab",
                        "$tab-item-padding-lr-size-m: $s-4 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/tab",
                        "$tab-item-padding-lr-size-s: $s-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/tab",
                        "$tab-item-text-size-m: $font-size-body-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/tab",
                        "$tab-item-text-size-s: $font-size-caption !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal/close icon",
                        "$tab-close-icon-color: $color-text1-3 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/hover/close icon",
                        "$tab-close-icon-color-hover: $color-text1-4 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/selected/close icon",
                        "$tab-close-icon-color-selected: $color-brand1-6 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/disabled/close icon",
                        "$tab-close-icon-color-disabled: $color-line1-2 !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/selected/tab",
                        "$tab-item-font-weight-selected: $font-weight-2 !default;",
                        "",
                        "// Common",
                        "// ----------",
                        "",
                        "/// nav icon",
                        "/// @namespace statement/normal/nav",
                        "$tab-nav-arrow-color-normal: $color-text1-3 !default;",
                        "",
                        "/// nav icon",
                        "/// @namespace statement/hover/nav",
                        "$tab-nav-arrow-color-hover: $color-text1-4 !default;",
                        "",
                        "/// nav icon",
                        "/// @namespace statement/disabled/nav",
                        "$tab-nav-arrow-color-disabled: $color-line1-2 !default;",
                        "",
                        "// Shape: Pure",
                        "// -----------------",
                        "",
                        "// Size",
                        "",
                        "/// divider",
                        "/// @namespace size/nav",
                        "$tab-pure-divider-line-width: $line-1 !default;",
                        "",
                        "/// active line",
                        "/// @namespace size/tab",
                        "$tab-pure-ink-bar-width: $line-2 !default;",
                        "",
                        "// Statement",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tab",
                        "$tab-pure-text-color-normal: $color-text1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/tab",
                        "$tab-pure-bg-color: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tab",
                        "$tab-pure-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/tab",
                        "$tab-pure-text-color-selected: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tab",
                        "$tab-pure-text-color-disabled: $color-line1-2 !default;",
                        "",
                        "/// active line",
                        "/// @namespace statement/selected/tab",
                        "$tab-pure-ink-bar-color: $color-brand1-6 !default;",
                        "",
                        "/// divider color",
                        "/// @namespace statement/normal/nav",
                        "$tab-pure-divider-border-color: $color-line1-2 !default;",
                        "",
                        "$tab-pure-divider-border-style: $line-solid !default;",
                        "",
                        "/// divider shadow",
                        "/// @namespace statement/normal/nav",
                        "$tab-pure-divider-shadow: $shadow-zero !default;",
                        "",
                        "// unconfigurable",
                        "// divider line",
                        "$tab-pure-divider-line: $tab-pure-divider-border-style $tab-pure-divider-line-width $tab-pure-divider-border-color;",
                        "",
                        "// Shape: Wrapped",
                        "// -----------------",
                        "",
                        "/// border style",
                        "/// @namespace size/tab",
                        "$tab-wrapped-border-line-style: $line-solid !default;",
                        "",
                        "/// broder width",
                        "/// @namespace size/tab",
                        "$tab-wrapped-border-line-width: $line-1 !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/tab",
                        "$tab-wrapped-tab-corner-radius: $corner-1 !default;",
                        "",
                        "// unconfigurable",
                        "$tab-wrapped-tab-top-border-radius: $tab-wrapped-tab-corner-radius $tab-wrapped-tab-corner-radius 0 0;",
                        "",
                        "// unconfigurable",
                        "$tab-wrapped-tab-bottom-border-radius: 0 0 $tab-wrapped-tab-corner-radius $tab-wrapped-tab-corner-radius;",
                        "",
                        "// unconfigurable",
                        "$tab-wrapped-tab-left-border-radius: $tab-wrapped-tab-corner-radius 0 0 $tab-wrapped-tab-corner-radius;",
                        "",
                        "// unconfigurable",
                        "$tab-wrapped-tab-right-border-radius: 0 $tab-wrapped-tab-corner-radius $tab-wrapped-tab-corner-radius 0;",
                        "",
                        "/// margin (r)",
                        "/// @namespace size/tab",
                        "$tab-wrapped-tab-margin-right: $s-1 !default;",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/tab",
                        "$tab-wrapped-tab-margin-bottom: $s-1 !default;",
                        "",
                        "/// active line",
                        "/// @namespace size/tab",
                        "$tab-wrapped-ink-bar-width: $line-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/nav",
                        "$tab-wrapped-bar-bg-color: $color-transparent !default;",
                        "",
                        "/// active line",
                        "/// @namespace statement/selected/tab",
                        "$tab-wrapped-ink-bar-color: $color-brand1-6 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/selected/tab",
                        "$tab-wrapped-nav-item-border-color-active: $color-brand1-6 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/tab",
                        "$tab-wrapped-border-line-color: $color-line1-2 !default;",
                        "",
                        "// unconfigurable",
                        "$tab-wrapped-bar-border: $tab-wrapped-border-line-style $tab-wrapped-border-line-width $tab-wrapped-border-line-color;",
                        "",
                        "/// border width",
                        "/// @namespace size/content",
                        "$tab-wrapped-content-border-line-width: $line-1 !default;",
                        "",
                        "/// border style",
                        "/// @namespace statement/normal/content",
                        "$tab-wrapped-content-border-line-style: $line-solid !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/content",
                        "$tab-wrapped-content-border-line-color: $color-line1-2 !default;",
                        "",
                        "// content border - unconfigurable",
                        "$tab-wrapped-content-border: $tab-wrapped-content-border-line-width $tab-wrapped-content-border-line-style $tab-wrapped-border-line-color;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tab",
                        "$tab-wrapped-text-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tab",
                        "$tab-wrapped-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/tab",
                        "$tab-wrapped-bg-color: $color-fill1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/tab",
                        "$tab-wrapped-bg-color-hover: $color-fill1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover/tab",
                        "$tab-wrapped-border-line-color-hover: $color-line1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/tab",
                        "$tab-wrapped-border-line-color: $color-line1-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/tab",
                        "$tab-wrapped-text-color-selected: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tab",
                        "$tab-wrapped-text-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/tab",
                        "$tab-wrapped-bg-color-selected: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/tab",
                        "$tab-wrapped-bg-color-disabled: $color-fill1-1 !default;",
                        "",
                        "// unconfigurable",
                        "$tab-wrapped-content-position-top: $tab-wrapped-border-line-width;",
                        "",
                        "// unconfigurable",
                        "$tab-wrapped-content-position-right: $tab-wrapped-border-line-width;",
                        "",
                        "// Shape: Capsule",
                        "// -----------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tab",
                        "$tab-capsule-text-color: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tab",
                        "$tab-capsule-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/tab",
                        "$tab-capsule-text-color-selected: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tab",
                        "$tab-capsule-text-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/tab",
                        "$tab-capsule-bg-color: $color-fill1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/tab",
                        "$tab-capsule-bg-color-hover: $color-fill1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/tab",
                        "$tab-capsule-bg-color-selected: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/tab",
                        "$tab-capsule-bg-color-disabled: $color-fill1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/tab",
                        "$tab-capsule-tab-border-line-color: $color-line1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover/tab",
                        "$tab-capsule-tab-border-line-color-hover: $color-brand1-6 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/selected/tab",
                        "$tab-capsule-tab-border-line-color-active: $color-brand1-6 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled/tab",
                        "$tab-capsule-tab-border-line-color-disabled: $color-line1-1 !default;",
                        "",
                        "/// corner radius",
                        "/// @namespace size/nav",
                        "$tab-capsule-corner-radius: $corner-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace size/nav",
                        "$tab-capsule-tab-border-line-width: $line-1 !default;",
                        "",
                        "/// border style",
                        "/// @namespace statement/normal/tab",
                        "$tab-capsule-tab-border-line-style: $line-solid !default;",
                        "",
                        "// unconfigurable",
                        "$tab-capsule-tab-border: $tab-capsule-tab-border-line-width $tab-capsule-tab-border-line-style $tab-capsule-tab-border-line-color;",
                        "",
                        "// Shape: Text",
                        "// -----------------",
                        "",
                        "/// separator width",
                        "/// @namespace size/tab",
                        "$tab-text-item-sep-width: $line-1 !default;",
                        "",
                        "/// separator height",
                        "/// @namespace size/tab",
                        "$tab-text-item-sep-height: $s-2 !default;",
                        "",
                        "/// separator",
                        "/// @namespace statement/normal/tab",
                        "$tab-text-item-sep-color: $color-line1-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tab",
                        "$tab-text-text-color-normal: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tab",
                        "$tab-text-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/tab",
                        "$tab-text-text-color-selected: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tab",
                        "$tab-text-text-color-disabled: $color-text1-1 !default;"
                    ]
                }
            },
            "tabs": {
                "content.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { PureComponent } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "",
                        "class TabContent extends PureComponent {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                        "        lazyLoad: PropTypes.bool,",
                        "        children: PropTypes.any,",
                        "    };",
                        "",
                        "    render() {",
                        "        const { prefix, activeKey, lazyLoad, unmountInactiveTabs, children, className, ...others } = this.props;",
                        "        const formatChildren = [];",
                        "        React.Children.forEach(children, child => {",
                        "            /* eslint-disable eqeqeq */",
                        "            const active = (activeKey == child.key);",
                        "            formatChildren.push(React.cloneElement(child, {",
                        "                prefix,",
                        "                active,",
                        "                lazyLoad,",
                        "                unmountInactiveTabs,",
                        "            }));",
                        "        });",
                        "",
                        "        const classNames = classnames({",
                        "            [`${prefix}tabs-content`]: true,",
                        "        }, className);",
                        "",
                        "        return (",
                        "            <div {...others} className={classNames}>",
                        "                {formatChildren}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default TabContent;"
                    ]
                },
                "nav.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import Icon from '../../icon';",
                        "import Overlay from '../../overlay';",
                        "import Menu from '../../menu';",
                        "import Animate from '../../animate';",
                        "import { events } from '../../util';",
                        "import { triggerEvents, getOffsetLT, getOffsetWH, isTransformSupported } from './utils';",
                        "",
                        "const noop = () => {};",
                        "const floatRight = { float: 'right', position: 'relative', zIndex: 1 };",
                        "const { Popup } = Overlay;",
                        "",
                        "class Nav extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        animation: PropTypes.bool,",
                        "        activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),",
                        "        excessMode: PropTypes.string,",
                        "        extra: PropTypes.any,",
                        "        tabs: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),",
                        "        tabPosition: PropTypes.string,",
                        "        tabRender: PropTypes.func,",
                        "        triggerType: PropTypes.string,",
                        "        popupProps: PropTypes.object,",
                        "        onTriggerEvent: PropTypes.func,",
                        "        onKeyDown: PropTypes.func,",
                        "        onClose: PropTypes.func,",
                        "        style: PropTypes.object,",
                        "        className: PropTypes.string,",
                        "    }",
                        "",
                        "    constructor(props, context) {",
                        "        super(props, context);",
                        "        this.state = {",
                        "            next: false,",
                        "            prev: false,",
                        "            dropdownTabs: [],",
                        "        };",
                        "        this.offset = 0;",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.setSlideBtn();",
                        "        this.getDropdownItems(this.props);",
                        "",
                        "        events.on(window, 'resize', this.onWindowResized);",
                        "    }",
                        "",
                        "    componentDidUpdate() {",
                        "        const ctx = this;",
                        "",
                        "        // 此处通过延时处理，屏蔽动画带来的定位不准确问题（由于要支持ie9，因此无法使用transitionend）",
                        "        clearTimeout(ctx.scrollTimer);",
                        "        ctx.scrollTimer = setTimeout(() => {",
                        "            ctx.scrollToActiveTab();",
                        "        }, 400);",
                        "",
                        "        clearTimeout(ctx.slideTimer);",
                        "        ctx.slideTimer = setTimeout(() => {",
                        "            ctx.setSlideBtn();",
                        "        }, 200);",
                        "    }",
                        "",
                        "    componentWillUnmount() {",
                        "        events.off(window, 'resize', this.onWindowResized);",
                        "    }",
                        "",
                        "    setOffset(target, checkSlideBtn = true, setActive = true) {",
                        "        const { tabPosition } = this.props;",
                        "        const navWH = getOffsetWH(this.nav, tabPosition);",
                        "        const wrapperWH = getOffsetWH(this.wrapper);",
                        "",
                        "        target = target >= 0 ? 0 : target;",
                        "        target = target <= wrapperWH - navWH && wrapperWH - navWH < 0 ? wrapperWH - navWH : target;",
                        "",
                        "        const relativeOffset = target - this.offset;",
                        "        if (this.activeTab && this.props.excessMode === 'slide' && setActive) {",
                        "            const activeTabWH = getOffsetWH(this.activeTab);",
                        "            const activeTabOffset = getOffsetLT(this.activeTab) + relativeOffset;",
                        "            const wrapperOffset = getOffsetLT(this.wrapper);",
                        "",
                        "            if ((wrapperOffset + wrapperWH) < (activeTabOffset + activeTabWH) && activeTabOffset < (wrapperOffset + wrapperWH)) {",
                        "                target -= (activeTabOffset + activeTabWH) - (wrapperOffset + wrapperWH);",
                        "            }",
                        "        }",
                        "",
                        "        if (this.offset !== target) {",
                        "            this.offset = target;",
                        "",
                        "            let navOffset = {};",
                        "            const navStyle = this.nav.style;",
                        "",
                        "            const canTransform = isTransformSupported(navStyle);",
                        "            if (tabPosition === 'left' || tabPosition === 'right') {",
                        "                navOffset = canTransform ? {",
                        "                    value: `translate3d(0, ${target}px, 0)`,",
                        "                } : {",
                        "                    name: 'top',",
                        "                    value: `${target}px`,",
                        "                };",
                        "            } else {",
                        "                navOffset = canTransform ? {",
                        "                    value: `translate3d(${target}px, 0, 0)`,",
                        "                } : {",
                        "                    name: 'left',",
                        "                    value: `${target}px`,",
                        "                };",
                        "            }",
                        "",
                        "            if (canTransform) {",
                        "                Object.assign(navStyle, {",
                        "                    transform: navOffset.value,",
                        "                    webkitTransform: navOffset.value,",
                        "                    mozTransform: navOffset.value,",
                        "                });",
                        "            } else {",
                        "                navStyle[navOffset.name] = navOffset.value;",
                        "            }",
                        "",
                        "            if (checkSlideBtn) {",
                        "                this.setSlideBtn();",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    setSlideBtn() {",
                        "        const { tabPosition } = this.props;",
                        "",
                        "        // TEMP: 这里会受 Animate 影响，re-render 过程中 this.nav 实际上指向的是上次的 tabList 元素，建议暂时关闭 animation 解决",
                        "        const navWH = getOffsetWH(this.nav, tabPosition);",
                        "        const wrapperWH = getOffsetWH(this.wrapper, tabPosition);",
                        "        const navbarWH = getOffsetWH(this.navbar, tabPosition);",
                        "        const minOffset = wrapperWH - navWH;",
                        "",
                        "        let next;",
                        "        let prev;",
                        "        if (minOffset >= 0 || navWH <= navbarWH) {",
                        "            next = false;",
                        "            prev = false;",
                        "            this.setOffset(0);",
                        "        } else if (this.offset < 0 && this.offset <= minOffset) {",
                        "            prev = true;",
                        "            next = false;",
                        "        } else if (this.offset >= 0) {",
                        "            prev = false;",
                        "            next = true;",
                        "        } else {",
                        "            prev = true;",
                        "            next = true;",
                        "        }",
                        "",
                        "        if (next !== this.state.next || prev !== this.state.prev) {",
                        "            this.setState({",
                        "                next,",
                        "                prev,",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    getDropdownItems({ excessMode, tabs }) {",
                        "        if (excessMode !== 'dropdown') {",
                        "            return;",
                        "        }",
                        "",
                        "        const wrapperWidth = this.wrapper.offsetWidth;",
                        "        const childNodes = this.nav.childNodes;",
                        "",
                        "        let index;",
                        "        let tabsWidth = 0;",
                        "        for (index = 0; index < tabs.length; index++) {",
                        "            tabsWidth += childNodes[index].offsetWidth;",
                        "            if (tabsWidth > wrapperWidth) {",
                        "                break;",
                        "            }",
                        "        }",
                        "",
                        "        if (index > 1) {",
                        "            index = index - 1;",
                        "            this.setState({",
                        "                dropdownTabs: tabs.slice(index),",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    removeTab = (key, e) => {",
                        "        e && e.stopPropagation(); // 不再传递事件，防止触发父级事件处理器",
                        "        this.props.onClose(key);",
                        "    }",
                        "",
                        "    defaultTabTemplateRender = (key, { prefix, title, closeable }) => {",
                        "        const tail = closeable ? <Icon type=\"close\" onClick={(e) => this.removeTab(key, e)} className={`${prefix}tabs-tab-close`} /> : null;",
                        "        return <div className={`${this.props.prefix}tabs-tab-inner`}>{title}{tail}</div>;",
                        "    }",
                        "",
                        "    renderTabList(props) {",
                        "        const { prefix, tabs, activeKey, tabRender } = props;",
                        "        const tabTemplateFn = tabRender || this.defaultTabTemplateRender;",
                        "",
                        "        const rst = [];",
                        "        React.Children.forEach(tabs, (child) => {",
                        "            const { disabled, className, onClick, onMouseEnter, onMouseLeave, style } = child.props;",
                        "            /*eslint-disable eqeqeq*/",
                        "            const active = activeKey == child.key;",
                        "            const cls = classnames({",
                        "                [`${prefix}tabs-tab`]: true,",
                        "                disabled,",
                        "                active,",
                        "            }, className);",
                        "",
                        "            let events = {};",
                        "",
                        "            if (!disabled) {",
                        "                events = {",
                        "                    onClick: this.onNavItemClick.bind(this, child.key, onClick),",
                        "                    onMouseEnter: this.onNavItemMouseEnter.bind(this, child.key, onMouseEnter),",
                        "                    onMouseLeave: this.onNavItemMouseLeave.bind(this, child.key, onMouseLeave),",
                        "                };",
                        "            }",
                        "",
                        "            rst.push(",
                        "                <div",
                        "                    role=\"tab\"",
                        "                    key={child.key}",
                        "                    ref={active ? this.activeTabRefHandler : null}",
                        "                    aria-disabled={disabled ? 'true' : 'false'}",
                        "                    aria-selected={active ? 'true' : 'false'}",
                        "                    className={cls}",
                        "                    style={style}",
                        "                    {...events}>{tabTemplateFn(child.key, child.props)}",
                        "                </div>",
                        "            );",
                        "        });",
                        "        return rst;",
                        "    }",
                        "",
                        "    scrollToActiveTab = () => {",
                        "        if (!this.activeTab || this.props.excessMode !== 'slide') {",
                        "            return;",
                        "        }",
                        "",
                        "        const activeTabWH = getOffsetWH(this.activeTab);",
                        "        const wrapperWH = getOffsetWH(this.wrapper);",
                        "        const activeTabOffset = getOffsetLT(this.activeTab);",
                        "        const wrapperOffset = getOffsetLT(this.wrapper);",
                        "",
                        "        let target = this.offset;",
                        "        if (activeTabOffset >= (wrapperOffset + wrapperWH) || (activeTabOffset + activeTabWH) <= wrapperOffset) {",
                        "            return;",
                        "        }",
                        "        // if (activeTabOffset < wrapperOffset) {",
                        "        //     target += wrapperOffset - activeTabOffset;",
                        "        //     this.setOffset(target);",
                        "        // }",
                        "        if ((wrapperOffset + wrapperWH) < (activeTabOffset + activeTabWH)) {",
                        "            target -= (activeTabOffset + activeTabWH) - (wrapperOffset + wrapperWH);",
                        "            this.setOffset(target, true, false);",
                        "        }",
                        "    }",
                        "",
                        "    onPrevClick = () => {",
                        "        const wrapperWH = getOffsetWH(this.wrapper);",
                        "        this.setOffset(this.offset + wrapperWH);",
                        "    }",
                        "",
                        "    onNextClick = () => {",
                        "        const wrapperWH = getOffsetWH(this.wrapper);",
                        "        this.setOffset(this.offset - wrapperWH);",
                        "    }",
                        "",
                        "    onNavItemClick(key, callback, e) {",
                        "        this.props.onTriggerEvent(triggerEvents.CLICK, key);",
                        "        if (callback) {",
                        "            callback(key, e);",
                        "        }",
                        "    }",
                        "",
                        "    onSelectMenuItem = (keys) => {",
                        "        const { onTriggerEvent, triggerType } = this.props;",
                        "        onTriggerEvent(triggerType, keys[0]);",
                        "    }",
                        "",
                        "    onNavItemMouseEnter(key, callback, e) {",
                        "        this.props.onTriggerEvent(triggerEvents.HOVER, key);",
                        "        if (callback) {",
                        "            callback(key, e);",
                        "        }",
                        "    }",
                        "",
                        "    onNavItemMouseLeave(key, callback, e) {",
                        "        if (callback) {",
                        "            callback(key, e);",
                        "        }",
                        "    }",
                        "",
                        "    onWindowResized = () => {",
                        "        if (this.updateTimer) {",
                        "            clearTimeout(this.updateTimer);",
                        "        }",
                        "",
                        "        this.updateTimer = setTimeout(() => {",
                        "            this.setSlideBtn();",
                        "            this.getDropdownItems(this.props);",
                        "        }, 100);",
                        "    }",
                        "",
                        "    renderDropdownTabs(tabs = []) {",
                        "        if (!tabs.length) {",
                        "            return null;",
                        "        }",
                        "",
                        "        const { prefix, activeKey, triggerType, popupProps } = this.props;",
                        "        const trigger = (",
                        "            <button className={`${prefix}tabs-btn-down`}>",
                        "                <Icon type=\"arrow-down\" />",
                        "            </button>",
                        "        );",
                        "",
                        "        return (",
                        "            <Popup triggerType={triggerType} trigger={trigger} container={target => target.parentNode} {...popupProps}>",
                        "                <Menu selectedKeys={[activeKey]} onSelect={this.onSelectMenuItem} selectMode=\"single\">",
                        "                    {tabs.map(tab => {",
                        "                        const { disabled, onClick, onMouseEnter, onMouseLeave } = tab.props;",
                        "                        let events = {};",
                        "                        if (!disabled) {",
                        "                            events = {",
                        "                                onClick: this.onNavItemClick.bind(this, tab.key, onClick),",
                        "                                onMouseEnter: this.onNavItemMouseEnter.bind(this, tab.key, onMouseEnter),",
                        "                                onMouseLeave: this.onNavItemMouseLeave.bind(this, tab.key, onMouseLeave),",
                        "                            };",
                        "                        }",
                        "                        return <Menu.Item key={tab.key} {...events}>{tab.props.title}</Menu.Item>;",
                        "                    })}",
                        "                </Menu>",
                        "            </Popup>",
                        "        );",
                        "    }",
                        "",
                        "    navRefHandler = ref => {",
                        "        this.nav = findDOMNode(ref);",
                        "    }",
                        "",
                        "    wrapperRefHandler = ref => {",
                        "        this.wrapper = ref;",
                        "    }",
                        "",
                        "    navbarRefHandler = ref => {",
                        "        this.navbar = ref;",
                        "    }",
                        "",
                        "    activeTabRefHandler = ref => {",
                        "        this.activeTab = ref;",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, tabPosition, excessMode, extra, onKeyDown, animation, style, className } = this.props;",
                        "        const state = this.state;",
                        "",
                        "        let nextButton;",
                        "        let prevButton;",
                        "        let restButton;",
                        "",
                        "        const showNextPrev = state.prev || state.next;",
                        "",
                        "        if (excessMode === 'dropdown' && state.next && state.dropdownTabs.length) {",
                        "            restButton = this.renderDropdownTabs(state.dropdownTabs);",
                        "            prevButton = null;",
                        "            nextButton = null;",
                        "        } else if (showNextPrev) {",
                        "            const prevBtnCls = classnames({",
                        "                [`${prefix}tabs-btn-prev`]: 1,",
                        "                disabled: !state.prev,",
                        "            });",
                        "            const nextBtnCls = classnames({",
                        "                [`${prefix}tabs-btn-next`]: 1,",
                        "                disabled: !state.next,",
                        "            });",
                        "",
                        "            prevButton = (",
                        "                <button",
                        "                    onClick={state.prev ? this.onPrevClick : noop}",
                        "                    className={prevBtnCls}>",
                        "                    <Icon type=\"arrow-left\" />",
                        "                </button>",
                        "            );",
                        "",
                        "            nextButton = (",
                        "                <button",
                        "                    onClick={state.next ? this.onNextClick : noop}",
                        "                    className={nextBtnCls}>",
                        "                    <Icon type=\"arrow-right\" />",
                        "                </button>",
                        "            );",
                        "            restButton = null;",
                        "        } else {",
                        "            nextButton = null;",
                        "            prevButton = null;",
                        "            restButton = null;",
                        "        }",
                        "",
                        "        const containerCls = classnames({",
                        "            [`${prefix}tabs-nav-container`]: true,",
                        "            [`${prefix}tabs-nav-container-scrolling`]: showNextPrev,",
                        "        });",
                        "",
                        "        const navCls = `${prefix}tabs-nav`;",
                        "        const tabList = this.renderTabList(this.props);",
                        "",
                        "        const container = (",
                        "            <div className={containerCls} key=\"nav-container\">",
                        "                <div className={`${prefix}tabs-nav-wrap`} ref={this.wrapperRefHandler}>",
                        "                    <div className={`${prefix}tabs-nav-scroll`}>",
                        "                        {",
                        "                            animation ?",
                        "                                <Animate className={navCls} animation={navCls} singleMode={false} ref={this.navRefHandler}>{tabList}</Animate> :",
                        "                                <div className={navCls} ref={this.navRefHandler}>{tabList}</div>",
                        "                        }",
                        "                    </div>",
                        "                </div>",
                        "                {prevButton}",
                        "                {nextButton}",
                        "                {restButton}",
                        "            </div>",
                        "        );",
                        "",
                        "        const navChildren = [container];",
                        "",
                        "        if (extra) {",
                        "            const extraProps = {",
                        "                className: `${prefix}tabs-nav-extra`,",
                        "                key: 'nav-extra',",
                        "            };",
                        "            if (tabPosition === 'top' || tabPosition === 'bottom') {",
                        "                navChildren.unshift(<div {...extraProps} style={floatRight}>{extra}</div>);",
                        "            } else {",
                        "                navChildren.push(<div {...extraProps}>{extra}</div>);",
                        "            }",
                        "        }",
                        "",
                        "        const navbarCls = classnames({",
                        "            [`${prefix}tabs-bar`]: true,",
                        "        }, className);",
                        "",
                        "        return (",
                        "            <div role=\"tablist\" className={navbarCls} style={style} onKeyDown={onKeyDown} tabIndex=\"0\" ref={this.navbarRefHandler}>",
                        "                {navChildren}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default Nav;"
                    ]
                },
                "tab-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "",
                        "/** Tab.Item */",
                        "class TabItem extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        /**",
                        "         * 选项卡标题",
                        "         */",
                        "        title: PropTypes.node,",
                        "        /**",
                        "         * 单个选项卡是否可关闭",
                        "         */",
                        "        closeable: PropTypes.bool,",
                        "        active: PropTypes.bool,",
                        "        lazyLoad: PropTypes.bool,",
                        "        unmountInactiveTabs: PropTypes.bool,",
                        "        children: PropTypes.any,",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        closeable: false,",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, active, lazyLoad, unmountInactiveTabs, children } = this.props;",
                        "",
                        "        this._actived = this._actived || active;",
                        "        if (lazyLoad && !this._actived) {",
                        "            return null;",
                        "        }",
                        "",
                        "        if (unmountInactiveTabs && !active) {",
                        "            return null;",
                        "        }",
                        "",
                        "        const cls = classnames({",
                        "            [`${prefix}tabs-tabpane`]: true,",
                        "            [`${active ? 'active' : 'hidden'}`]: true,",
                        "        });",
                        "",
                        "        return (",
                        "            <div role=\"tabpanel\" aria-hidden={active ? 'false' : 'true'} className={cls}>",
                        "                {children}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default TabItem;"
                    ]
                },
                "utils.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "",
                        "export const triggerEvents = {",
                        "    CLICK: 'click',",
                        "    HOVER: 'hover',",
                        "};",
                        "",
                        "export function getOffsetWH(node, tabPosition) {",
                        "    let prop = 'offsetWidth';",
                        "    if (tabPosition === 'left' || tabPosition === 'right') {",
                        "        prop = 'offsetHeight';",
                        "    }",
                        "    return node ? node[prop] : 0;",
                        "}",
                        "",
                        "export function getOffsetLT(node, tabPosition) {",
                        "    let prop = 'left';",
                        "    if (tabPosition === 'left' || tabPosition === 'right') {",
                        "        prop = 'top';",
                        "    }",
                        "    return node.getBoundingClientRect()[prop];",
                        "}",
                        "",
                        "export function isTransformSupported(style) {",
                        "    return 'transform' in style ||",
                        "        'webkitTransform' in style ||",
                        "        'MozTransform' in style;",
                        "}",
                        "",
                        "export function toArray(children) {",
                        "    const ret = [];",
                        "    React.Children.forEach(children, (child, index) => {",
                        "        if (React.isValidElement(child)) {",
                        "            ret.push(React.cloneElement(child, {",
                        "                key: child.key || index,",
                        "            }));",
                        "        }",
                        "    });",
                        "    return ret;",
                        "}"
                    ]
                }
            }
        },
        "table": {
            "base.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import shallowElementEquals from 'shallow-element-equals';",
                    "import Loading from '../loading';",
                    "import zhCN from '../locale/zh-cn';",
                    "import { log, obj } from '../util';",
                    "import BodyComponent from './base/body';",
                    "import HeaderComponent from './base/header';",
                    "import WrapperComponent from './base/wrapper';",
                    "import RowComponent from './base/row';",
                    "import CellComponent from './base/cell';",
                    "import FilterComponent from './base/filter';",
                    "import SortComponent from './base/sort';",
                    "import Column from './column';",
                    "import ColumnGroup from './column-group';",
                    "",
                    "const Children = React.Children,",
                    "    noop = () => {};",
                    "",
                    "//<Table>",
                    "//    <Table.Column/>",
                    "//    <Table.ColumnGroup>",
                    "//      <Table.Column/>",
                    "//      <Table.Column/>",
                    "//    </Table.ColumnGroup>",
                    "//</Table>",
                    "",
                    "/** Table */",
                    "export default class Table extends React.Component {",
                    "    static Column = Column;",
                    "    static ColumnGroup = ColumnGroup;",
                    "    static Header = HeaderComponent;",
                    "    static Body = BodyComponent;",
                    "    static Wrapper = WrapperComponent;",
                    "    static Row = RowComponent;",
                    "    static Cell = CellComponent;",
                    "    static Filter = FilterComponent;",
                    "    static Sort = SortComponent;",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式类名的品牌前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 自定义类名",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 表格展示的数据源",
                    "         */",
                    "        dataSource: PropTypes.array,",
                    "        entireDataSource: PropTypes.array,",
                    "        /**",
                    "         * 点击表格每一行触发的事件",
                    "         * @param {Object} record 该行所对应的数据",
                    "         * @param {Number} index 该行所对应的序列",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onRowClick: PropTypes.func,",
                    "        /**",
                    "         * 悬浮在表格每一行的时候触发的事件",
                    "         * @param {Object} record 该行所对应的数据",
                    "         * @param {Number} index 该行所对应的序列",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onRowMouseEnter: PropTypes.func,",
                    "        /**",
                    "         * 离开表格每一行的时候触发的事件",
                    "         * @param {Object} record 该行所对应的数据",
                    "         * @param {Number} index 该行所对应的序列",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onRowMouseLeave: PropTypes.func,",
                    "        /**",
                    "         * 点击列排序触发的事件",
                    "         * @param {String} dataIndex 指定的排序的字段",
                    "         * @param {String} order 排序对应的顺序, 有`desc`和`asc`两种",
                    "         */",
                    "        onSort: PropTypes.func,",
                    "        /**",
                    "         * 点击过滤确认按钮触发的事件",
                    "         * @param {Object} filterParams 过滤的字段信息",
                    "         */",
                    "        onFilter: PropTypes.func,",
                    "        /**",
                    "         * 重设列尺寸的时候触发的事件",
                    "         * @param {String} dataIndex 指定重设的字段",
                    "         * @param {Number} value 列宽变动的数值",
                    "         */",
                    "        onResizeChange: PropTypes.func,",
                    "        /**",
                    "         * 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。",
                    "         * @param {Object} record 该行所对应的数据",
                    "         * @param {Number} index 该行所对应的序列",
                    "         * @returns {Object} 需要设置的行属性",
                    "         */",
                    "        getRowProps: PropTypes.func,",
                    "        /**",
                    "         * 设置单元格的属性，通过该属性可以进行合并单元格",
                    "         * @param {Number} rowIndex 该行所对应的序列",
                    "         * @param {Number} colIndex 该列所对应的序列",
                    "         * @param {String} dataIndex 该列所对应的字段名称",
                    "         * @param {Object} record 该行对应的记录",
                    "         * @returns {Object} 返回td元素的所支持的属性对象",
                    "         */",
                    "        getCellProps: PropTypes.func,",
                    "        /**",
                    "         * 表格是否具有边框",
                    "         */",
                    "        hasBorder: PropTypes.bool,",
                    "        /**",
                    "         * 表格是否具有头部",
                    "         */",
                    "        hasHeader: PropTypes.bool,",
                    "        /**",
                    "         * 表格是否是斑马线",
                    "         */",
                    "        isZebra: PropTypes.bool,",
                    "        /**",
                    "         * 表格是否在加载中",
                    "         */",
                    "        loading: PropTypes.bool,",
                    "        /**",
                    "         * 自定义 Loading 组件",
                    "         * @type {Function}",
                    "         */",
                    "        loadingComponent: PropTypes.func,",
                    "        /**",
                    "         * 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}",
                    "         * 示例:",
                    "         * 假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中",
                    "         * `<Table filterParams={{id: {selectedKeys: ['one']}}}/>`",
                    "         */",
                    "        filterParams: PropTypes.object,",
                    "        /**",
                    "         * 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}",
                    "         */",
                    "        sort: PropTypes.object,",
                    "        /**",
                    "         * 自定义国际化文案对象",
                    "         * @property {String} ok 过滤器中确认按钮文案",
                    "         * @property {String} reset 过滤器中重置按钮文案",
                    "         * @property {String} empty 没有数据情况下 table内的文案",
                    "         * @property {String} asc 排序升序状态下的文案",
                    "         * @property {String} desc 排序将序状态下的文案",
                    "         * @property {String} expanded 可折叠行，展开状态下的文案",
                    "         * @property {String} folded 可折叠行，折叠状态下的文案",
                    "         * @property {String} filter 过滤器文案",
                    "         * @property {String} selectAll header里全选的按钮文案",
                    "         */",
                    "        locale: PropTypes.object,",
                    "        components: PropTypes.object,",
                    "        columns: PropTypes.array,",
                    "        /**",
                    "         * 设置数据为空的时候的表格内容展现",
                    "         */",
                    "        emptyContent: PropTypes.node,",
                    "        /**",
                    "         * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中",
                    "         */",
                    "        primaryKey: PropTypes.string,",
                    "        lockType: PropTypes.oneOf(['left', 'right']),",
                    "        wrapperContent: PropTypes.any,",
                    "        refs: PropTypes.object,",
                    "        /**",
                    "         * 额外渲染行的渲染函数",
                    "         * @param {Object} record 该行所对应的数据",
                    "         * @param {Number} index 该行所对应的序列",
                    "         * @returns {Element} 渲染内容",
                    "         */",
                    "        expandedRowRender: PropTypes.func,",
                    "        /**",
                    "         * 额外渲染行的缩进",
                    "         */",
                    "        expandedRowIndent: PropTypes.array,",
                    "        /**",
                    "         * 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态",
                    "         */",
                    "        openRowKeys: PropTypes.array,",
                    "        /**",
                    "         * 是否显示点击展开额外渲染行的+号按钮",
                    "         */",
                    "        hasExpandedRowCtrl: PropTypes.bool,",
                    "        /**",
                    "         * 设置额外渲染行的属性",
                    "         */",
                    "        getExpandedColProps: PropTypes.func,",
                    "        /**",
                    "         * 在额外渲染行或者Tree展开或者收起的时候触发的事件",
                    "         * @param {Array} openRowKeys 展开的渲染行的key",
                    "         * @param {String} currentRowKey 当前点击的渲染行的key",
                    "         * @param {Boolean} expanded 当前点击是展开还是收起",
                    "         * @param {Object} currentRecord 当前点击额外渲染行的记录",
                    "         */",
                    "        onRowOpen: PropTypes.func,",
                    "        /**",
                    "         * 点击额外渲染行触发的事件",
                    "         * @param {Object} record 该行所对应的数据",
                    "         * @param {Number} index 该行所对应的序列",
                    "         * @param {Event} e DOM事件对象",
                    "         */",
                    "        onExpandedRowClick: PropTypes.func,",
                    "        /**",
                    "         * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条",
                    "         */",
                    "        fixedHeader: PropTypes.bool,",
                    "        /**",
                    "         * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条",
                    "         */",
                    "        maxBodyHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "        /**",
                    "         * 是否启用选择模式",
                    "         * @property {Function} getProps `Function(record, index)=>Object` 获取selection的默认属性",
                    "         * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。",
                    "         * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调",
                    "         * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调",
                    "         * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值",
                    "         * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`",
                    "         */",
                    "        rowSelection: PropTypes.object,",
                    "        /**",
                    "         * 表头是否是sticky",
                    "         */",
                    "        stickyHeader: PropTypes.bool,",
                    "        /**",
                    "         * 距离窗口顶部达到指定偏移量后触发",
                    "         */",
                    "        offsetTop: PropTypes.number,",
                    "        /**",
                    "         * affix组件的的属性",
                    "         */",
                    "        affixProps: PropTypes.object,",
                    "        /**",
                    "         * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效",
                    "         */",
                    "        indent: PropTypes.number,",
                    "        /**",
                    "         * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table",
                    "         */",
                    "        isTree: PropTypes.bool,",
                    "        /**",
                    "         * 是否开启虚拟滚动",
                    "         */",
                    "        useVirtual: PropTypes.bool,",
                    "        /**",
                    "         * 设置行高",
                    "         */",
                    "        rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),",
                    "        /**",
                    "         * 在内容区域滚动的时候触发的函数",
                    "         */",
                    "        onBodyScroll: PropTypes.func",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        dataSource: [],",
                    "        onRowClick: noop,",
                    "        onRowMouseEnter: noop,",
                    "        onRowMouseLeave: noop,",
                    "        onSort: noop,",
                    "        onFilter: noop,",
                    "        onResizeChange: noop,",
                    "        getRowProps: noop,",
                    "        getCellProps: noop,",
                    "        prefix: 'next-',",
                    "        hasBorder: true,",
                    "        hasHeader: true,",
                    "        isZebra: false,",
                    "        loading: false,",
                    "        primaryKey: 'id',",
                    "        components: {},",
                    "        locale: zhCN.Table",
                    "    };",
                    "",
                    "    static childContextTypes = {",
                    "        notRenderCellIndex: PropTypes.array,",
                    "        lockType: PropTypes.oneOf(['left', 'right'])",
                    "    };",
                    "",
                    "    static contextTypes = {",
                    "        getTableInstance: PropTypes.func,",
                    "        getTableInstanceForVirtual: PropTypes.func",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        const { getTableInstance, getTableInstanceForVirtual } = this.context;",
                    "        getTableInstance && getTableInstance(props.lockType, this);",
                    "        getTableInstanceForVirtual &&",
                    "            getTableInstanceForVirtual(props.lockType, this);",
                    "        this.notRenderCellIndex = [];",
                    "    }",
                    "",
                    "    state = {",
                    "        sort: this.props.sort || {}",
                    "    };",
                    "",
                    "    getChildContext() {",
                    "        return {",
                    "            notRenderCellIndex: this.notRenderCellIndex,",
                    "            lockType: this.props.lockType",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if (typeof this.props.sort !== 'undefined') {",
                    "            this.setState({",
                    "                sort: nextProps.sort",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    shouldComponentUpdate(nextProps, nextState, nextContext) {",
                    "        if (nextProps.pure) {",
                    "            const isEqual =",
                    "                shallowElementEquals(nextProps, this.props) &&",
                    "                obj.shallowEqual(nextState, this.state) &&",
                    "                obj.shallowEqual(nextContext, this.context);",
                    "            return !isEqual;",
                    "        }",
                    "",
                    "        return true;",
                    "    }",
                    "",
                    "    componentWillUpdate() {",
                    "        this.notRenderCellIndex = [];",
                    "    }",
                    "",
                    "    normalizeChildrenState(props) {",
                    "        let columns = props.columns;",
                    "        if (props.children) {",
                    "            columns = this.normalizeChildren(props);",
                    "        }",
                    "        return this.fetchInfoFromBinaryChildren(columns);",
                    "    }",
                    "",
                    "    // 将React结构化数据提取props转换成数组",
                    "    normalizeChildren(props) {",
                    "        let { columns } = props;",
                    "        const getChildren = children => {",
                    "            const ret = [];",
                    "            Children.forEach(children, child => {",
                    "                if (child) {",
                    "                    const props = { ...child.props };",
                    "",
                    "                    if (",
                    "                        !(",
                    "                            child &&",
                    "                            typeof child.type === 'function' &&",
                    "                            (child.type._typeMark === 'column' ||",
                    "                                child.type._typeMark === 'columnGroup')",
                    "                        )",
                    "                    ) {",
                    "                        log.warning(",
                    "                            'Use <Table.Column/>, <Table.ColumnGroup/> as child.'",
                    "                        );",
                    "                    }",
                    "                    ret.push(props);",
                    "                    if (child.props.children) {",
                    "                        props.children = getChildren(child.props.children);",
                    "                    }",
                    "                }",
                    "            });",
                    "            return ret;",
                    "        };",
                    "        if (props.children) {",
                    "            columns = getChildren(props.children);",
                    "        }",
                    "        return columns;",
                    "    }",
                    "",
                    "    fetchInfoFromBinaryChildren(children) {",
                    "        let hasGroupHeader = false;",
                    "        const flatChildren = [],",
                    "            groupChildren = [],",
                    "            getChildren = (propsChildren, level) => {",
                    "                groupChildren[level] = groupChildren[level] || [];",
                    "                propsChildren.forEach(child => {",
                    "                    if (child.children) {",
                    "                        hasGroupHeader = true;",
                    "                        getChildren(child.children, level + 1);",
                    "                    } else {",
                    "                        flatChildren.push(child);",
                    "                    }",
                    "                    groupChildren[level].push(child);",
                    "                });",
                    "            },",
                    "            getColSpan = (children, colSpan) => {",
                    "                colSpan = colSpan || 0;",
                    "                children.forEach(child => {",
                    "                    if (child.children) {",
                    "                        colSpan = getColSpan(child.children, colSpan);",
                    "                    } else {",
                    "                        colSpan += 1;",
                    "                    }",
                    "                });",
                    "                return colSpan;",
                    "            };",
                    "",
                    "        getChildren(children, 0);",
                    "",
                    "        groupChildren.forEach((groupChild, i) => {",
                    "            groupChild.forEach((child, j) => {",
                    "                let colSpan;",
                    "                const children = child.children;",
                    "",
                    "                if (children) {",
                    "                    colSpan = getColSpan(children);",
                    "                    child.colSpan = colSpan;",
                    "                    groupChildren[i][j] = child;",
                    "                }",
                    "            });",
                    "        });",
                    "",
                    "        return {",
                    "            flatChildren,",
                    "            groupChildren,",
                    "            hasGroupHeader",
                    "        };",
                    "    }",
                    "",
                    "    renderColGroup(flatChildren) {",
                    "        const cols = flatChildren.map((col, index) => {",
                    "            const width = col.width;",
                    "            let style = {};",
                    "            if (width) {",
                    "                style = {",
                    "                    width: width",
                    "                };",
                    "            }",
                    "",
                    "            return <col style={style} key={index} />;",
                    "        });",
                    "        return <colgroup key=\"table-colgroup\">{cols}</colgroup>;",
                    "    }",
                    "",
                    "    onSort = (dataIndex, order, sort) => {",
                    "        if (typeof this.props.sort === 'undefined') {",
                    "            this.setState(",
                    "                {",
                    "                    sort: sort",
                    "                },",
                    "                () => {",
                    "                    this.props.onSort(dataIndex, order, sort);",
                    "                }",
                    "            );",
                    "        } else {",
                    "            this.props.onSort(dataIndex, order, sort);",
                    "        }",
                    "    };",
                    "",
                    "    onFilter = filterParams => {",
                    "        this.props.onFilter(filterParams);",
                    "    };",
                    "",
                    "    onResizeChange = (dataIndex, value) => {",
                    "        this.props.onResizeChange(dataIndex, value);",
                    "    };",
                    "",
                    "    // 通过头部和扁平的结构渲染表格",
                    "    renderTable(groupChildren, flatChildren) {",
                    "        if (",
                    "            flatChildren.length ||",
                    "            (!flatChildren.length && !this.props.lockType)",
                    "        ) {",
                    "            const {",
                    "                hasHeader,",
                    "                components,",
                    "                prefix,",
                    "                wrapperContent,",
                    "                filterParams,",
                    "                locale,",
                    "                dataSource,",
                    "                emptyContent,",
                    "                loading,",
                    "                getCellProps,",
                    "                primaryKey,",
                    "                getRowProps,",
                    "                onRowClick,",
                    "                onRowMouseEnter,",
                    "                onRowMouseLeave,",
                    "                pure",
                    "            } = this.props;",
                    "            const { sort } = this.state;",
                    "            const {",
                    "                Header = HeaderComponent,",
                    "                Wrapper = WrapperComponent,",
                    "                Body = BodyComponent",
                    "            } = components;",
                    "            const colGroup = this.renderColGroup(flatChildren);",
                    "",
                    "            return (",
                    "                <Wrapper",
                    "                    colGroup={colGroup}",
                    "                    ref={this.getWrapperRef}",
                    "                    prefix={prefix}",
                    "                >",
                    "                    {hasHeader ? (",
                    "                        <Header",
                    "                            prefix={prefix}",
                    "                            pure={pure}",
                    "                            affixRef={this.getAffixRef}",
                    "                            colGroup={colGroup}",
                    "                            className={`${prefix}table-header`}",
                    "                            filterParams={filterParams}",
                    "                            columns={groupChildren}",
                    "                            locale={locale}",
                    "                            headerCellRef={this.getHeaderCellRef}",
                    "                            components={components}",
                    "                            onFilter={this.onFilter}",
                    "                            sort={sort}",
                    "                            onResizeChange={this.onResizeChange}",
                    "                            onSort={this.onSort}",
                    "                        />",
                    "                    ) : null}",
                    "                    <Body",
                    "                        prefix={prefix}",
                    "                        pure={pure}",
                    "                        colGroup={colGroup}",
                    "                        className={`${prefix}table-body`}",
                    "                        components={components}",
                    "                        loading={loading}",
                    "                        emptyContent={emptyContent}",
                    "                        getCellProps={getCellProps}",
                    "                        primaryKey={primaryKey}",
                    "                        getRowProps={getRowProps}",
                    "                        columns={flatChildren}",
                    "                        rowRef={this.getRowRef}",
                    "                        cellRef={this.getCellRef}",
                    "                        onRowClick={onRowClick}",
                    "                        onRowMouseEnter={onRowMouseEnter}",
                    "                        onRowMouseLeave={onRowMouseLeave}",
                    "                        dataSource={dataSource}",
                    "                        locale={locale}",
                    "                    />",
                    "                    {wrapperContent}",
                    "                </Wrapper>",
                    "            );",
                    "        } else {",
                    "            return null;",
                    "        }",
                    "    }",
                    "",
                    "    getWrapperRef = wrapper => {",
                    "        if (!wrapper) {",
                    "            return this.wrapper;",
                    "        }",
                    "        this.wrapper = wrapper;",
                    "    };",
                    "",
                    "    getAffixRef = (affixRef) => {",
                    "        if (!affixRef) {",
                    "            return this.affixRef;",
                    "        }",
                    "        this.affixRef = affixRef;",
                    "    };",
                    "",
                    "    getHeaderCellRef = (i, j, cell) => {",
                    "        const cellRef = `header_cell_${i}_${j}`;",
                    "        if (!cell) {",
                    "            return this[cellRef];",
                    "        }",
                    "        this[cellRef] = cell;",
                    "    };",
                    "",
                    "    getRowRef = (i, row) => {",
                    "        const rowRef = `row_${i}`;",
                    "        if (!row) {",
                    "            return this[rowRef];",
                    "        }",
                    "        this[rowRef] = row;",
                    "    };",
                    "",
                    "    getCellRef = (i, j, cell) => {",
                    "        const cellRef = `cell_${i}_${j}`;",
                    "        if (!cell) {",
                    "            return this[cellRef];",
                    "        }",
                    "        this[cellRef] = cell;",
                    "    };",
                    "",
                    "    render() {",
                    "        const ret = this.normalizeChildrenState(this.props);",
                    "        this.groupChildren = ret.groupChildren;",
                    "        this.flatChildren = ret.flatChildren;",
                    "        /* eslint-disable no-unused-vars, prefer-const */",
                    "        let table = this.renderTable(ret.groupChildren, ret.flatChildren),",
                    "            {",
                    "                className,",
                    "                hasBorder,",
                    "                isZebra,",
                    "                loading,",
                    "                hasHeader,",
                    "                prefix,",
                    "                dataSource,",
                    "                entireDataSource,",
                    "                onSort,",
                    "                onResizeChange,",
                    "                onRowClick,",
                    "                onRowMouseEnter,",
                    "                onRowMouseLeave,",
                    "                onFilter,",
                    "                getRowProps,",
                    "                getCellProps,",
                    "                primaryKey,",
                    "                components,",
                    "                wrapperContent,",
                    "                lockType,",
                    "                locale,",
                    "                refs,",
                    "                pure,",
                    "                rtl,",
                    "                emptyContent,",
                    "                filterParams,",
                    "                loadingComponent: LoadingComponent = Loading,",
                    "                ...others",
                    "            } = this.props,",
                    "            cls = classnames({",
                    "                [`${prefix}table`]: true,",
                    "                'only-bottom-border': !hasBorder,",
                    "                'no-header': !hasHeader,",
                    "                zebra: isZebra,",
                    "                [className]: className",
                    "            });",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "        const content = (",
                    "            <div className={cls} {...others}>",
                    "                {table}",
                    "            </div>",
                    "        );",
                    "        if (loading) {",
                    "            const loadingClassName = `${prefix}table-loading`;",
                    "            return (",
                    "                <LoadingComponent className={loadingClassName}>",
                    "                    {content}",
                    "                </LoadingComponent>",
                    "            );",
                    "        }",
                    "        return content;",
                    "    }",
                    "}"
                ]
            },
            "column-group.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "",
                    "/**",
                    " * Table.ColumnGroup",
                    " * @order 1",
                    " **/",
                    "export default class ColumnGroup extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 表头显示的内容",
                    "         */",
                    "        title: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),",
                    "    }",
                    "",
                    "    static childContextTypes = {",
                    "        parent: PropTypes.any",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        title: 'column-group'",
                    "    }",
                    "",
                    "    static _typeMark = 'columnGroup';",
                    "",
                    "    getChildContext() {",
                    "        return {",
                    "            parent: this",
                    "        };",
                    "    }",
                    "",
                    "    render() {",
                    "        return null;",
                    "    }",
                    "}"
                ]
            },
            "column.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "",
                    "/**",
                    " * Table.Column",
                    " * @order 0",
                    " **/",
                    "export default class Column extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 指定列对应的字段，支持`a.b`形式的快速取值",
                    "         */",
                    "        dataIndex: PropTypes.string,",
                    "        /**",
                    "         * 行渲染的逻辑",
                    "         * value, rowIndex, record, context四个属性只可读不可被更改",
                    "         * Function(value, index, record) => Element",
                    "         */",
                    "        cell: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),",
                    "        /**",
                    "         * 表头显示的内容",
                    "         * value, rowIndex, record, context四个属性只可读不可被更改",
                    "         */",
                    "        title: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),",
                    "        /**",
                    "         * 是否支持排序",
                    "         */",
                    "        sortable: PropTypes.bool,",
                    "        /**",
                    "         * 列宽，注意在锁列的情况下一定需要配置宽度",
                    "         */",
                    "        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "        /**",
                    "         * 单元格的对齐方式",
                    "         */",
                    "        align: PropTypes.oneOf(['left', 'center', 'right']),",
                    "        /**",
                    "         * 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`",
                    "         */",
                    "        filters: PropTypes.arrayOf(PropTypes.shape({",
                    "            label: PropTypes.string,",
                    "            value: PropTypes.oneOfType([PropTypes.node, PropTypes.string])",
                    "        })),",
                    "        /**",
                    "         * 过滤的模式是单选还是多选",
                    "         */",
                    "        filterMode: PropTypes.oneOf(['single', 'multiple']),",
                    "        /**",
                    "         * 是否支持锁列,可选值为`left`,`right`, `true`",
                    "         */",
                    "        lock: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),",
                    "        /**",
                    "         * 是否支持列宽调整, 当该值设为true，table的布局方式会修改为fixed.",
                    "         */",
                    "        resizable: PropTypes.bool",
                    "    }",
                    "",
                    "    static contextTypes = {",
                    "        parent: PropTypes.any",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        cell: (value) => value,",
                    "        filterMode: 'multiple',",
                    "        resizable: false",
                    "    }",
                    "",
                    "    static _typeMark = 'column';",
                    "",
                    "    render() {",
                    "        return null;",
                    "    }",
                    "}"
                ]
            },
            "expanded.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Children } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import Icon from '../icon';",
                    "import { KEYCODE } from '../util';",
                    "import RowComponent from './expanded/row';",
                    "import Col from './column';",
                    "import { statics } from './util';",
                    "",
                    "const noop = () => { };",
                    "",
                    "export default function expanded(BaseComponent) {",
                    "    /** Table */",
                    "    class ExpandedTable extends React.Component {",
                    "        static ExpandedRow = RowComponent;",
                    "        static propTypes = {",
                    "            /**",
                    "             * 额外渲染行的渲染函数",
                    "             * @param {Object} record 该行所对应的数据",
                    "             * @param {Number} index 该行所对应的序列",
                    "             * @returns {Element}",
                    "             */",
                    "            expandedRowRender: PropTypes.func,",
                    "            /**",
                    "             * 额外渲染行的缩进",
                    "             */",
                    "            expandedRowIndent: PropTypes.array,",
                    "            /**",
                    "             * 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态",
                    "             */",
                    "            openRowKeys: PropTypes.array,",
                    "            /**",
                    "             * 是否显示点击展开额外渲染行的+号按钮",
                    "             */",
                    "            hasExpandedRowCtrl: PropTypes.bool,",
                    "            /**",
                    "             * 设置额外渲染行的属性",
                    "             */",
                    "            getExpandedColProps: PropTypes.func,",
                    "            /**",
                    "             * 在额外渲染行或者Tree展开或者收起的时候触发的事件",
                    "             * @param {Array} openRowKeys 展开的渲染行的key",
                    "             * @param {String} currentRowKey 当前点击的渲染行的key",
                    "             * @param {Boolean} expanded 当前点击是展开还是收起",
                    "             * @param {Object} currentRecord 当前点击额外渲染行的记录",
                    "             */",
                    "            onRowOpen: PropTypes.func,",
                    "            /**",
                    "             * 点击额外渲染行触发的事件",
                    "             * @param {Object} record 该行所对应的数据",
                    "             * @param {Number} index 该行所对应的序列",
                    "             * @param {Event} e DOM事件对象",
                    "             */",
                    "            onExpandedRowClick: PropTypes.func,",
                    "            locale: PropTypes.object,",
                    "            ...BaseComponent.propTypes",
                    "        };",
                    "",
                    "        static defaultProps = {",
                    "            ...BaseComponent.defaultProps,",
                    "            getExpandedColProps: noop,",
                    "            onRowOpen: noop,",
                    "            hasExpandedRowCtrl: true,",
                    "            components: {},",
                    "            expandedRowIndent: [1, 0],",
                    "            prefix: 'next-'",
                    "        };",
                    "",
                    "        static childContextTypes = {",
                    "            openRowKeys: PropTypes.array,",
                    "            expandedRowRender: PropTypes.func,",
                    "            expandedRowIndent: PropTypes.array",
                    "        }",
                    "",
                    "        state = {",
                    "            openRowKeys: this.props.openRowKeys || []",
                    "        };",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                openRowKeys: this.state.openRowKeys,",
                    "                expandedRowRender: this.props.expandedRowRender,",
                    "                expandedRowIndent: this.props.expandedRowIndent",
                    "            };",
                    "        }",
                    "",
                    "        componentWillReceiveProps(nextProps) {",
                    "            if ('openRowKeys' in nextProps) {",
                    "                const { openRowKeys } = nextProps;",
                    "                this.setState({",
                    "                    openRowKeys",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        expandedKeydown = (value, record, index, e) => {",
                    "            e.preventDefault();",
                    "            e.stopPropagation();",
                    "",
                    "            if (e.keyCode === KEYCODE.ENTER) {",
                    "                this.onExpandedClick(value, record, index, e);",
                    "            }",
                    "        }",
                    "",
                    "        renderExpandedCell = (value, index, record) => {",
                    "            const { getExpandedColProps, prefix, locale } = this.props;",
                    "            const { openRowKeys } = this.state,",
                    "                { primaryKey } = this.props,",
                    "                hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1,",
                    "                switchNode = hasExpanded ?",
                    "                    <Icon type=\"minus\" size=\"xs\" /> : <Icon type=\"add\" size=\"xs\" />,",
                    "",
                    "                attrs = getExpandedColProps(record, index) || {};",
                    "            const cls = classnames({",
                    "                [`${prefix}table-expanded-ctrl`]: true,",
                    "                disabled: attrs.disabled,",
                    "                [attrs.className]: attrs.className",
                    "            });",
                    "",
                    "            if (!attrs.disabled) {",
                    "                attrs.onClick = this.onExpandedClick.bind(this, value, record, index);",
                    "            }",
                    "            return (",
                    "                <span {...attrs}",
                    "                    role=\"button\"",
                    "                    tabIndex=\"0\"",
                    "                    onKeyDown={this.expandedKeydown.bind(this, value, record, index)}",
                    "                    aria-label={hasExpanded ? locale.expanded : locale.folded}",
                    "                    aria-expanded={hasExpanded}",
                    "                    className={cls}>",
                    "                    {switchNode}",
                    "                </span>",
                    "            );",
                    "        }",
                    "",
                    "        onExpandedClick(value, record, i, e) {",
                    "            const openRowKeys = [...this.state.openRowKeys],",
                    "                { primaryKey } = this.props,",
                    "                id = record[primaryKey],",
                    "                index = openRowKeys.indexOf(id);",
                    "            if (index > -1) {",
                    "                openRowKeys.splice(index, 1);",
                    "            } else {",
                    "                openRowKeys.push(id);",
                    "            }",
                    "            if (!('openRowKeys' in this.props)) {",
                    "                this.setState({",
                    "                    openRowKeys: openRowKeys",
                    "                });",
                    "            }",
                    "            this.props.onRowOpen(openRowKeys, id, index === -1, record);",
                    "            e.stopPropagation();",
                    "        }",
                    "",
                    "        normalizeChildren(children) {",
                    "            const toArrayChildren = Children.map(children, (child, index) => React.cloneElement(child, {",
                    "                key: index",
                    "            }));",
                    "            const {prefix} = this.props;",
                    "            toArrayChildren.unshift(<Col title=\"\" key=\"expanded\" cell={this.renderExpandedCell.bind(this)} width={50} className={`${prefix}table-expanded`} __normalized/>);",
                    "            return toArrayChildren;",
                    "        }",
                    "",
                    "        normalizeDataSource(ds) {",
                    "            const ret = [];",
                    "            ds.forEach(item => {",
                    "                const itemCopy = { ...item };",
                    "                itemCopy.__expanded = true;",
                    "                ret.push(item, itemCopy);",
                    "            });",
                    "            return ret;",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable no-unused-vars, prefer-const */",
                    "            let { components, openRowKeys, expandedRowRender, hasExpandedRowCtrl, children, dataSource, getExpandedColProps, expandedRowIndent, onRowOpen, onExpandedRowClick, ...others } = this.props;",
                    "            if (expandedRowRender && !components.Row) {",
                    "                components = {...components};",
                    "                components.Row = RowComponent;",
                    "                dataSource = this.normalizeDataSource(dataSource);",
                    "            }",
                    "            if (expandedRowRender && hasExpandedRowCtrl) {",
                    "                children = this.normalizeChildren(children);",
                    "            }",
                    "",
                    "            return (<BaseComponent {...others} dataSource={dataSource}  components={components}>",
                    "                {children}",
                    "            </BaseComponent>);",
                    "        }",
                    "    }",
                    "    statics(ExpandedTable, BaseComponent);",
                    "    return ExpandedTable;",
                    "}"
                ]
            },
            "fixed.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import { dom } from '../util';",
                    "import HeaderComponent from './fixed/header';",
                    "import BodyComponent from './fixed/body';",
                    "import WrapperComponent from './fixed/wrapper';",
                    "import {statics} from './util';",
                    "",
                    "export default function fixed(BaseComponent) {",
                    "    /** Table */",
                    "    class FixedTable extends React.Component {",
                    "        static FixedHeader = HeaderComponent;",
                    "        static FixedBody = BodyComponent;",
                    "        static FixedWrapper = WrapperComponent;",
                    "        static propTypes = {",
                    "            /**",
                    "              * 是否具有表头",
                    "              */",
                    "            hasHeader: PropTypes.bool,",
                    "            /**",
                    "              * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条",
                    "              */",
                    "            fixedHeader: PropTypes.bool,",
                    "            /**",
                    "             * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条",
                    "             */",
                    "            maxBodyHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "            ...BaseComponent.propTypes",
                    "        }",
                    "",
                    "        static defaultProps = {",
                    "            ...BaseComponent.defaultProps,",
                    "            hasHeader: true,",
                    "            fixedHeader: false,",
                    "            maxBodyHeight: 200,",
                    "            components: {},",
                    "            refs: {},",
                    "            prefix: 'next-'",
                    "        }",
                    "",
                    "        static childContextTypes = {",
                    "            fixedHeader: PropTypes.bool,",
                    "            maxBodyHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "            onBodyScroll: PropTypes.func,",
                    "            getNode: PropTypes.func",
                    "        }",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                fixedHeader: this.props.fixedHeader,",
                    "                maxBodyHeight: this.props.maxBodyHeight,",
                    "                onBodyScroll: this.onBodyScroll,",
                    "                getNode: this.getNode",
                    "            };",
                    "        }",
                    "",
                    "        componentDidMount() {",
                    "            this.adjustFixedHeaderSize();",
                    "        }",
                    "",
                    "        componentDidUpdate() {",
                    "            this.adjustFixedHeaderSize();",
                    "        }",
                    "",
                    "        adjustFixedHeaderSize() {",
                    "            const { hasHeader, fixedHeader, maxBodyHeight } = this.props;",
                    "            if (hasHeader && fixedHeader && !this.props.lockType) {",
                    "                if (this.bodyNode.scrollHeight <= maxBodyHeight) {",
                    "                    dom.setStyle(this.headerNode, 'paddingRight', 0);",
                    "                } else {",
                    "                    dom.setStyle(this.headerNode, 'paddingRight', dom.scrollbar().width);",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        getNode = (type, node, lockType) => {",
                    "            lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';",
                    "            this[`${type}${lockType}Node`] = node;",
                    "            if (type === 'header' && !lockType) {",
                    "                this.innerHeaderNode = this.headerNode.querySelector('div');",
                    "            }",
                    "        }",
                    "",
                    "        onBodyScroll = () => {",
                    "            this.scrollTo(this.bodyNode.scrollLeft, this.bodyNode.scrollTop);",
                    "        }",
                    "",
                    "        scrollTo(x) {",
                    "            if (this.innerHeaderNode) {",
                    "                this.innerHeaderNode.scrollLeft = x;",
                    "            }",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable no-unused-vars, prefer-const */",
                    "            let { components, className, prefix, fixedHeader, maxBodyHeight, ...others } = this.props;",
                    "            if (fixedHeader) {",
                    "                components = {...components};",
                    "                if (!components.Header) {",
                    "                    components.Header = HeaderComponent;",
                    "                }",
                    "                if (!components.Body) {",
                    "                    components.Body = BodyComponent;",
                    "                }",
                    "                if (!components.Wrapper) {",
                    "                    components.Wrapper = WrapperComponent;",
                    "                }",
                    "                className = classnames({",
                    "                    [`${prefix}table-fixed`]: true,",
                    "                    [className]: className",
                    "                });",
                    "            }",
                    "            return (<BaseComponent  {...others} components={components} className={className} prefix={prefix} />);",
                    "        }",
                    "    }",
                    "    statics(FixedTable, BaseComponent);",
                    "    return FixedTable;",
                    "}"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import Base from './base';",
                    "import tree from './tree';",
                    "import fixed from './fixed';",
                    "import selection from './selection';",
                    "import expanded from './expanded';",
                    "import virtual from './virtual';",
                    "import lock from './lock';",
                    "import list from './list';",
                    "import sticky from './sticky';",
                    "import ListHeader from './list-header';",
                    "import ListFooter from './list-footer';",
                    "",
                    "const ORDER_LIST = [fixed, lock, selection, expanded, tree, virtual, list, sticky];",
                    "const Table = ORDER_LIST.reduce((ret, current) => {",
                    "    ret = current(ret);",
                    "    return ret;",
                    "}, Base);",
                    "Table.Base = Base;",
                    "Table.fixed = fixed;",
                    "Table.lock = lock;",
                    "Table.selection = selection;",
                    "Table.expanded = expanded;",
                    "Table.tree = tree;",
                    "Table.virtual = virtual;",
                    "Table.list = list;",
                    "Table.sticky = sticky;",
                    "",
                    "Table.GroupHeader = ListHeader;",
                    "Table.GroupFooter = ListFooter;",
                    "",
                    "export default ConfigProvider.config(Table, {",
                    "    componentName: 'Table',",
                    "    transform: (props, deprecated) => {",
                    "        if ('expandedRowKeys' in props) {",
                    "            deprecated('expandedRowKeys', 'openRowKeys', 'Table');",
                    "",
                    "            const { expandedRowKeys, ...others } = props;",
                    "            props = { openRowKeys: expandedRowKeys, ...others };",
                    "        }",
                    "        if ('onExpandedChange' in props) {",
                    "            deprecated('onExpandedChange', 'onRowOpen', 'Table');",
                    "",
                    "            const { onExpandedChange, ...others } = props;",
                    "            props = { onRowOpen: onExpandedChange, ...others };",
                    "        }",
                    "        if ('isLoading' in props) {",
                    "            deprecated('isLoading', 'loading', 'Table');",
                    "",
                    "            const { isLoading, ...others } = props;",
                    "            props = { loading: isLoading, ...others };",
                    "        }",
                    "        if ('indentSize' in props) {",
                    "            deprecated('indentSize', 'indent', 'Table');",
                    "",
                    "            const { indentSize, ...others } = props;",
                    "            props = { indent: indentSize, ...others };",
                    "        }",
                    "        if ('optimization' in props) {",
                    "            deprecated('optimization', 'pure', 'Table');",
                    "",
                    "            const { optimization, ...others } = props;",
                    "            props = { pure: optimization, ...others };",
                    "        }",
                    "        if ('getRowClassName' in props) {",
                    "            deprecated('getRowClassName', 'getRowProps', 'Table');",
                    "",
                    "            const { getRowClassName, getRowProps, ...others } = props;",
                    "            if (getRowClassName) {",
                    "                const newGetRowProps = (...args) => {",
                    "                    return {",
                    "                        className: getRowClassName(...args),",
                    "                        ...(getRowProps ? getRowProps(...args) : {})",
                    "                    };",
                    "                };",
                    "",
                    "                props = { getRowProps: newGetRowProps, ...others };",
                    "            } else {",
                    "                props = { getRowProps, ...others };",
                    "            }",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "list-footer.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "",
                    "/**",
                    " * Table.GroupFooter",
                    " * @order 3",
                    " **/",
                    "export default class ListFooter extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 行渲染的逻辑",
                    "         */",
                    "        cell: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func])",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        cell: () => ''",
                    "    };",
                    "",
                    "    static _typeMark = 'listFooter';",
                    "",
                    "    render() {",
                    "        return null;",
                    "    }",
                    "}"
                ]
            },
            "list-header.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "",
                    "/**",
                    " * Table.GroupHeader",
                    " * @order 2",
                    " **/",
                    "export default class ListHeader extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 行渲染的逻辑",
                    "         */",
                    "        cell: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),",
                    "        /**",
                    "         * 是否在Children上面渲染selection",
                    "         */",
                    "        hasChildrenSelection: PropTypes.bool,",
                    "        /**",
                    "         * 是否在GroupHeader上面渲染selection",
                    "         */",
                    "        hasSelection: PropTypes.bool,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        cell: () => '',",
                    "        hasSelection: true,",
                    "        hasChildrenSelection: false",
                    "    };",
                    "",
                    "    static _typeMark = 'listHeader';",
                    "",
                    "    render() {",
                    "        return null;",
                    "    }",
                    "}"
                ]
            },
            "list.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Children } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import ListHeader from './list-header';",
                    "import ListFooter from './list-footer';",
                    "import RowComponent from './list/row';",
                    "import BodyComponent from './list/body';",
                    "import HeaderComponent from './fixed/header';",
                    "import WrapperComponent from './fixed/wrapper';",
                    "import { statics } from './util';",
                    "",
                    "export default function list(BaseComponent) {",
                    "    class ListTable extends React.Component {",
                    "        static ListHeader = ListHeader;",
                    "        static ListFooter = ListFooter;",
                    "        static ListRow = RowComponent;",
                    "        static ListBody = BodyComponent;",
                    "        static propTypes = {",
                    "            ...BaseComponent.propTypes",
                    "        }",
                    "        static defaultProps = {",
                    "            ...BaseComponent.defaultProps",
                    "        }",
                    "",
                    "        static childContextTypes = {",
                    "            listHeader: PropTypes.any,",
                    "            listFooter: PropTypes.any,",
                    "            rowSelection: PropTypes.object",
                    "        }",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                listHeader: this.listHeader,",
                    "                listFooter: this.listFooter,",
                    "                rowSelection: this.rowSelection",
                    "            };",
                    "        }",
                    "",
                    "        normalizeDataSource(dataSource) {",
                    "            const ret = [];",
                    "            const loop = function (dataSource, level) {",
                    "                dataSource.forEach(item => {",
                    "                    item.__level = level;",
                    "                    ret.push(item);",
                    "                    if (item.children) {",
                    "                        loop(item.children, level + 1);",
                    "                    }",
                    "                });",
                    "            };",
                    "            loop(dataSource, 0);",
                    "            this.ds = ret;",
                    "            return ret;",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable prefer-const */",
                    "            let { components, children, className, prefix, ...others } = this.props;",
                    "            let isList = false, ret = [];",
                    "            Children.forEach(children, child => {",
                    "                if (child) {",
                    "                    if (typeof child.type === 'function') {",
                    "                        if (child.type._typeMark === 'listHeader') {",
                    "                            this.listHeader = child.props;",
                    "                            isList = true;",
                    "                        } else if (child.type._typeMark === 'listFooter') {",
                    "                            this.listFooter = child.props;",
                    "                        } else {",
                    "                            ret.push(child);",
                    "                        }",
                    "                    } else {",
                    "                        ret.push(child);",
                    "                    }",
                    "                }",
                    "            });",
                    "            this.rowSelection = this.props.rowSelection;",
                    "            if (isList) {",
                    "                components = { ...components };",
                    "                components.Row = components.Row || RowComponent;",
                    "                components.Body = components.Body || BodyComponent;",
                    "                components.Header = components.Header || HeaderComponent;",
                    "                components.Wrapper = components.Wrapper || WrapperComponent;",
                    "                className = classnames({",
                    "                    [`${prefix}table-group`]: true,",
                    "                    [className]: className",
                    "                });",
                    "            }",
                    "            return (<BaseComponent {...others} components={components} children={ret} className={className} prefix={prefix}/>);",
                    "        }",
                    "    }",
                    "    statics(ListTable, BaseComponent);",
                    "    return ListTable;",
                    "}"
                ]
            },
            "lock.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Children } from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import shallowElementEquals from 'shallow-element-equals';",
                    "import { dom, log, obj, events } from '../util';",
                    "import LockRow from './lock/row';",
                    "import LockBody from './lock/body';",
                    "import LockHeader from './lock/header';",
                    "import LockWrapper from './fixed/wrapper';",
                    "import { statics } from './util';",
                    "",
                    "export default function lock(BaseComponent) {",
                    "    /** Table */",
                    "    class LockTable extends React.Component {",
                    "        static LockRow = LockRow;",
                    "        static LockBody = LockBody;",
                    "        static LockHeader = LockHeader;",
                    "        static propTypes = {",
                    "            scrollToCol: PropTypes.number,",
                    "            /**",
                    "             * 指定滚动到某一行，仅在`useVirtual`的时候生效",
                    "             */",
                    "            scrollToRow: PropTypes.number,",
                    "            ...BaseComponent.propTypes",
                    "        }",
                    "",
                    "        static defaultProps = {",
                    "            ...BaseComponent.defaultProps",
                    "        }",
                    "",
                    "        static childContextTypes = {",
                    "            getTableInstance: PropTypes.func,",
                    "            getLockNode: PropTypes.func,",
                    "            onLockBodyScroll: PropTypes.func,",
                    "            onLockBodyWheel: PropTypes.func,",
                    "            onRowMouseEnter: PropTypes.func,",
                    "            onRowMouseLeave: PropTypes.func",
                    "        }",
                    "",
                    "        constructor(props, context) {",
                    "            super(props, context);",
                    "            this.lockLeftChildren = [];",
                    "            this.lockRightChildren = [];",
                    "        }",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                getTableInstance: this.getTableInstance,",
                    "                getLockNode: this.getNode,",
                    "                onLockBodyWheel: this.onLockBodyWheel,",
                    "                onLockBodyScroll: this.onLockBodyScroll,",
                    "                onRowMouseEnter: this.onRowMouseEnter,",
                    "                onRowMouseLeave: this.onRowMouseLeave",
                    "            };",
                    "        }",
                    "",
                    "        componentDidMount() {",
                    "            this.adjustSize = this.adjustSize.bind(this);",
                    "",
                    "            this.adjustSize();",
                    "            this.scroll();",
                    "",
                    "            events.on(window, 'resize', this.adjustSize);",
                    "        }",
                    "",
                    "        shouldComponentUpdate(nextProps, nextState, nextContext) {",
                    "            if (nextProps.pure) {",
                    "                const isEqual = shallowElementEquals(nextProps, this.props);",
                    "                return !(isEqual && obj.shallowEqual(nextContext, this.context));",
                    "            }",
                    "",
                    "            return true;",
                    "        }",
                    "",
                    "        componentWillUpdate() {",
                    "            this._isLock = false;",
                    "        }",
                    "",
                    "        componentDidUpdate() {",
                    "            this.adjustSize();",
                    "        }",
                    "",
                    "        componentWillUnmount() {",
                    "            events.off(window, 'resize', this.adjustSize);",
                    "        }",
                    "",
                    "        normalizeChildrenState(props) {",
                    "            let { children } = props;",
                    "            children = this.normalizeChildren(children);",
                    "            const splitChildren = this.splitFromNormalizeChildren(children);",
                    "            const { lockLeftChildren, lockRightChildren } = splitChildren;",
                    "            return {",
                    "                lockLeftChildren,",
                    "                lockRightChildren,",
                    "                children: this.mergeFromSplitLockChildren(splitChildren)",
                    "            };",
                    "        }",
                    "",
                    "        // 将React结构化数据提取props转换成数组",
                    "        normalizeChildren(children) {",
                    "            let isLock = false;",
                    "            const getChildren = (children) => {",
                    "                const ret = [];",
                    "                Children.forEach(children, child => {",
                    "                    if (child) {",
                    "                        const props = { ...child.props };",
                    "                        if ([true, 'left', 'right'].indexOf(props.lock) > -1) {",
                    "                            isLock = true;",
                    "                            if (!('width' in props)) {",
                    "                                log.warning(`Should config width for lock column named [ ${props.dataIndex} ].`);",
                    "                            }",
                    "                        }",
                    "                        ret.push(props);",
                    "                        if (child.props.children) {",
                    "                            props.children = getChildren(child.props.children);",
                    "                        }",
                    "                    }",
                    "                });",
                    "                return ret;",
                    "            };",
                    "            const ret = getChildren(children);",
                    "            ret.forEach(child => {",
                    "                // 为自定义的列特殊处理",
                    "                if (child.__normalized && isLock) {",
                    "                    child.lock = 'left';",
                    "                    delete child.__normalized;",
                    "                }",
                    "            });",
                    "            this._isLock = isLock;",
                    "            return ret;",
                    "        }",
                    "",
                    "        //从数组中分离出lock的列和正常的列",
                    "        splitFromNormalizeChildren(children) {",
                    "            const originChildren = deepCopy(children);",
                    "            const lockLeftChildren = deepCopy(children);",
                    "            const lockRightChildren = deepCopy(children);",
                    "            const loop = (lockChildren, condition) => {",
                    "                const ret = [];",
                    "                lockChildren.forEach((child) => {",
                    "                    if (child.children) {",
                    "                        const res = loop(child.children, condition);",
                    "                        if (!res.length) {",
                    "                            ret.push(child);",
                    "                        }",
                    "                    } else {",
                    "                        const order = condition(child);",
                    "                        if (!order) {",
                    "                            ret.push(child);",
                    "                        }",
                    "                    }",
                    "                });",
                    "                ret.forEach(res => {",
                    "                    const index = lockChildren.indexOf(res);",
                    "                    lockChildren.splice(index, 1);",
                    "                });",
                    "                return lockChildren;",
                    "            };",
                    "            loop(lockLeftChildren, (child) => {",
                    "                if (child.lock === true || child.lock === 'left') {",
                    "                    return 'left';",
                    "                }",
                    "            });",
                    "            loop(lockRightChildren, (child) => {",
                    "                if (child.lock === 'right') {",
                    "                    return 'right';",
                    "                }",
                    "            });",
                    "            loop(originChildren, (child) => {",
                    "                return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';",
                    "            });",
                    "            return {",
                    "                lockLeftChildren,",
                    "                lockRightChildren,",
                    "                originChildren",
                    "            };",
                    "        }",
                    "",
                    "        //将左侧的锁列树和中间的普通树及右侧的锁列树进行合并",
                    "        mergeFromSplitLockChildren(splitChildren) {",
                    "            const { lockLeftChildren, lockRightChildren } = splitChildren;",
                    "            let { originChildren } = splitChildren;",
                    "            Array.prototype.unshift.apply(originChildren, lockLeftChildren);",
                    "            originChildren = originChildren.concat(lockRightChildren);",
                    "            return originChildren;",
                    "        }",
                    "",
                    "        getTableInstance = (type, instance) => {",
                    "            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';",
                    "            this[`table${type}Inc`] = instance;",
                    "        }",
                    "",
                    "        getNode = (type, node, lockType) => {",
                    "            lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';",
                    "            this[`${type}${lockType}Node`] = node;",
                    "            if (type === 'header' && !this.innerHeaderNode && !lockType) {",
                    "                this.innerHeaderNode = this.headerNode.querySelector('div');",
                    "            }",
                    "        }",
                    "",
                    "        onRowMouseEnter = (record, index) => {",
                    "            if (this.isLock()) {",
                    "                const row = this.getRowNode(index);",
                    "                const leftRow = this.getRowNode(index, 'left');",
                    "                const rightRow = this.getRowNode(index, 'right');",
                    "                [row, leftRow, rightRow].forEach(row => {",
                    "                    row && dom.addClass(row, 'hovered');",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        onRowMouseLeave = (record, index) => {",
                    "            if (this.isLock()) {",
                    "                const row = this.getRowNode(index);",
                    "                const leftRow = this.getRowNode(index, 'left');",
                    "                const rightRow = this.getRowNode(index, 'right');",
                    "                [row, leftRow, rightRow].forEach(row => {",
                    "                    row && dom.removeClass(row, 'hovered');",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        scroll() {",
                    "            const { scrollToCol = 0, scrollToRow = 0 } = this.props;",
                    "            if (!scrollToCol && !scrollToRow) {",
                    "                return;",
                    "            }",
                    "            const colCellNode = this.getCellNode(0, scrollToCol);",
                    "            const rowCellNode = this.getCellNode(scrollToRow, 0);",
                    "            const bodyNodeOffset = this.bodyNode.getBoundingClientRect();",
                    "            if (colCellNode) {",
                    "                const cellNodeoffset = colCellNode.getBoundingClientRect();",
                    "                const scrollLeft = cellNodeoffset.left - bodyNodeOffset.left;",
                    "                this.bodyNode.scrollLeft = scrollLeft;",
                    "            }",
                    "            if (rowCellNode) {",
                    "                const cellNodeoffset = rowCellNode.getBoundingClientRect();",
                    "                const scrollTop = cellNodeoffset.top - bodyNodeOffset.top;",
                    "                this.bodyNode.scrollTop = scrollTop;",
                    "            }",
                    "        }",
                    "",
                    "        onLockBodyWheel = (e) => {",
                    "            const y = e.deltaY;",
                    "            if (this.isLock()) {",
                    "                const lockRightBody = this.bodyRightNode,",
                    "                    lockLeftBody = this.bodyLeftNode,",
                    "                    scrollNode = this.bodyNode,",
                    "                    { scrollTop, clientHeight, scrollHeight } = scrollNode;",
                    "",
                    "                if (lockLeftBody) {",
                    "                    lockLeftBody.scrollTop = y;",
                    "                }",
                    "                if (lockRightBody) {",
                    "                    lockRightBody.scrollTop = y;",
                    "                }",
                    "                scrollNode.scrollTop = scrollTop + y;",
                    "                const { scrollTop: newScrollTop } = scrollNode;",
                    "                if (newScrollTop + clientHeight < scrollHeight && newScrollTop) {",
                    "                    e.preventDefault();",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        onLockBodyScroll = () => {",
                    "            if (this.isLock()) {",
                    "                const lockRightBody = this.bodyRightNode,",
                    "                    lockLeftBody = this.bodyLeftNode,",
                    "                    lockRightTable = this.getWrapperNode('right'),",
                    "                    lockLeftTable = this.getWrapperNode('left'),",
                    "                    shadowClassName = 'shadow';",
                    "",
                    "                const x = this.bodyNode.scrollLeft, y = this.bodyNode.scrollTop;",
                    "",
                    "                if (lockLeftBody) {",
                    "                    lockLeftBody.scrollTop = y;",
                    "                }",
                    "                if (lockRightBody) {",
                    "                    lockRightBody.scrollTop = y;",
                    "                }",
                    "                if (x === 0) {",
                    "                    lockLeftTable && dom.removeClass(lockLeftTable, shadowClassName);",
                    "                    lockRightTable && dom.addClass(lockRightTable, shadowClassName);",
                    "                } else if (x === (this.bodyNode.scrollWidth - this.bodyNode.clientWidth)) {",
                    "                    lockLeftTable && dom.addClass(lockLeftTable, shadowClassName);",
                    "                    lockRightTable && dom.removeClass(lockRightTable, shadowClassName);",
                    "                } else {",
                    "                    lockLeftTable && dom.addClass(lockLeftTable, shadowClassName);",
                    "                    lockRightTable && dom.addClass(lockRightTable, shadowClassName);",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        // Table处理过后真实的lock状态",
                    "        isLock() {",
                    "            return this.lockLeftChildren.length || this.lockRightChildren.length;",
                    "        }",
                    "",
                    "        // 用户设置的lock状态",
                    "        isOriginLock() {",
                    "            return this._isLock;",
                    "        }",
                    "",
                    "        adjustSize() {",
                    "            if (!this.adjustIfTableNotNeedLock()) {",
                    "                this.adjustHeaderSize();",
                    "                this.adjustBodySize();",
                    "                this.adjustCellSize();",
                    "                this.onLockBodyScroll();",
                    "            }",
                    "        }",
                    "",
                    "        adjustIfTableNotNeedLock() {",
                    "            if (this.isOriginLock() && this.tableInc.props.dataSource.length) {",
                    "                const configWidths = this.tableInc.flatChildren.map((item, index) => {",
                    "                    const row = this.getCellNode(0, index);",
                    "                    return (row && row.clientWidth) || 0;",
                    "                }).reduce((a, b) => a + b, 0);",
                    "",
                    "                const node = findDOMNode(this);",
                    "                const width = node.clientWidth;",
                    "                const lockLeftLen = this.lockLeftChildren.length;",
                    "                const lockRightLen = this.lockRightChildren.length;",
                    "",
                    "                if (configWidths <= width && configWidths > 0) {",
                    "                    if (lockLeftLen) {",
                    "                        this._notNeedAdjustLockLeft = true;",
                    "                    }",
                    "                    if (lockRightLen) {",
                    "                        this._notNeedAdjustLockRight = true;",
                    "                    }",
                    "                    if (lockRightLen || lockLeftLen) {",
                    "                        this.forceUpdate();",
                    "                        return true;",
                    "                    }",
                    "                } else if (this._notNeedAdjustLockLeft || this._notNeedAdjustLockRight) {",
                    "                    this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;",
                    "                    this.forceUpdate();",
                    "                } else {",
                    "                    this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;",
                    "                    return false;",
                    "                }",
                    "            }",
                    "",
                    "            return false;",
                    "        }",
                    "",
                    "        adjustBodySize() {",
                    "            if (this.isLock()) {",
                    "                const body = this.bodyNode,",
                    "                    lockLeftBody = this.bodyLeftNode,",
                    "                    lockRightBody = this.bodyRightNode,",
                    "                    lockRightBodyWrapper = this.getWrapperNode('right'),",
                    "                    scrollbar = dom.scrollbar(),",
                    "                    bodyHeight = body.offsetHeight,",
                    "                    hasHozScroll = body.scrollWidth > body.clientWidth,",
                    "                    hasVerScroll = body.scrollHeight > body.clientHeight,",
                    "                    width = hasVerScroll ? scrollbar.width : 0,",
                    "                    lockBodyHeight = bodyHeight - (hasHozScroll ? scrollbar.height : 0);",
                    "",
                    "                lockLeftBody && dom.setStyle(lockLeftBody, 'max-height', lockBodyHeight);",
                    "                lockRightBody && dom.setStyle(lockRightBody, 'max-height', lockBodyHeight);",
                    "                lockRightBodyWrapper && dom.setStyle(lockRightBodyWrapper, 'right', width);",
                    "            }",
                    "        }",
                    "",
                    "        adjustHeaderSize() {",
                    "            if (this.isLock()) {",
                    "                this.tableInc.groupChildren.forEach((child, index) => {",
                    "                    const lastIndex = this.tableInc.groupChildren[index].length - 1;",
                    "                    const",
                    "                        headerRightRow = this.getHeaderCellNode(index, lastIndex),",
                    "                        headerLeftRow = this.getHeaderCellNode(index, 0),",
                    "                        headerRightLockRow = this.getHeaderCellNode(index, 0, 'right'),",
                    "                        headerLeftLockRow = this.getHeaderCellNode(index, 0, 'left');",
                    "",
                    "                    if (headerRightRow && headerRightLockRow) {",
                    "                        const maxRightRowHeight = headerRightRow.offsetHeight;",
                    "",
                    "                        dom.setStyle(headerRightLockRow, 'height', maxRightRowHeight);",
                    "",
                    "                        setTimeout(() => {",
                    "                            this.tableRightInc.affixRef && this.tableRightInc.affixRef.getInstance().updatePosition();",
                    "                        });",
                    "                    }",
                    "",
                    "                    if (headerLeftRow && headerLeftLockRow) {",
                    "                        const maxLeftRowHeight = headerLeftRow.offsetHeight;",
                    "",
                    "                        dom.setStyle(headerLeftLockRow, 'height', maxLeftRowHeight);",
                    "",
                    "                        setTimeout(() => {",
                    "                            this.tableLeftInc.affixRef && this.tableLeftInc.affixRef.getInstance().updatePosition();",
                    "                        });",
                    "                    }",
                    "",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        adjustCellSize() {",
                    "            if (this.isLock()) {",
                    "                this.tableInc.props.dataSource.forEach((item, index) => {",
                    "                    const lockLeftRow = this.getCellNode(index, 0, 'left'),",
                    "                        lockRightRow = this.getCellNode(index, 0, 'right'),",
                    "                        row = this.getFirstNormalCellNode(index),",
                    "                        rowHeight = row && parseFloat(getComputedStyle(row).height) || 0;",
                    "                    let lockLeftHeight = 0, lockRightHeight = 0;",
                    "",
                    "                    if (lockLeftRow) {",
                    "                        lockLeftHeight = lockLeftRow.offsetHeight;",
                    "                    }",
                    "                    if (lockRightRow) {",
                    "                        lockRightHeight = lockRightRow.offsetHeight;",
                    "                    }",
                    "                    if (lockLeftRow && rowHeight !== lockLeftHeight) {",
                    "                        dom.setStyle(lockLeftRow, 'height', rowHeight);",
                    "                    }",
                    "                    if (lockRightRow && rowHeight !== lockRightHeight) {",
                    "                        dom.setStyle(lockRightRow, 'height', rowHeight);",
                    "                    }",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        getWrapperNode(type) {",
                    "            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';",
                    "            return findDOMNode(this.refs[`lock${type}`]);",
                    "        }",
                    "",
                    "        getFirstNormalCellNode(index) {",
                    "            let i = 0;",
                    "            let row;",
                    "            do {",
                    "                row = this.getCellNode(index, i);",
                    "                i++;",
                    "            } while ((!row || row && row.rowSpan && row.rowSpan > 1) && this.tableInc.flatChildren.length > i);",
                    "",
                    "            return row;",
                    "        }",
                    "",
                    "        getRowNode(index, type) {",
                    "            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';",
                    "            const table = this[`table${type}Inc`];",
                    "            return findDOMNode(table.getRowRef(index));",
                    "        }",
                    "",
                    "        getHeaderCellNode(index, i, type) {",
                    "            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';",
                    "            const table = this[`table${type}Inc`];",
                    "            return findDOMNode(table.getHeaderCellRef(index, i));",
                    "        }",
                    "",
                    "        getCellNode(index, i, type) {",
                    "            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';",
                    "            const table = this[`table${type}Inc`];",
                    "            return findDOMNode(table.getCellRef(index, i));",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable no-unused-vars, prefer-const */",
                    "            let { children, prefix, components, className, ...others } = this.props;",
                    "            let { lockLeftChildren, lockRightChildren, children: normalizedChildren } = this.normalizeChildrenState(this.props);",
                    "            if (this._notNeedAdjustLockLeft) {",
                    "                lockLeftChildren = [];",
                    "            }",
                    "            if (this._notNeedAdjustLockRight) {",
                    "                lockRightChildren = [];",
                    "            }",
                    "            this.lockLeftChildren = lockLeftChildren;",
                    "            this.lockRightChildren = lockRightChildren;",
                    "",
                    "            if (this.isOriginLock()) {",
                    "                components = { ...components };",
                    "                components.Body = components.Body || LockBody;",
                    "                components.Header = components.Header || LockHeader;",
                    "                components.Wrapper = components.Wrapper || LockWrapper;",
                    "                components.Row = components.Row || LockRow;",
                    "                className = classnames({",
                    "                    [`${prefix}table-lock`]: true,",
                    "                    [className]: className",
                    "                });",
                    "                const content = [",
                    "                    <BaseComponent {...others} key=\"lock-left\" columns={lockLeftChildren} className={`${prefix}table-lock-left`} prefix={prefix} lockType=\"left\" components={components} ref=\"lockLeft\" loading={false} />,",
                    "                    <BaseComponent {...others} key=\"lock-right\" columns={lockRightChildren} className={`${prefix}table-lock-right`} prefix={prefix} lockType=\"right\" components={components} ref=\"lockRight\" loading={false} />",
                    "                ];",
                    "                return <BaseComponent {...others} columns={normalizedChildren} prefix={prefix} wrapperContent={content} components={components} className={className} />;",
                    "            }",
                    "            return (<BaseComponent {...this.props} />);",
                    "        }",
                    "    }",
                    "    statics(LockTable, BaseComponent);",
                    "    return LockTable;",
                    "}",
                    "",
                    "",
                    "function deepCopy(arr) {",
                    "    let copy = (arr) => {",
                    "        return arr.map(item => {",
                    "            const newItem = { ...item };",
                    "            if (item.children) {",
                    "                item.children = copy(item.children);",
                    "            }",
                    "            return newItem;",
                    "        });",
                    "    };",
                    "    return copy(arr);",
                    "}"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "/* put your code here */",
                    "#{$table-prefix} {",
                    "    @include box-sizing;",
                    "    position: relative;",
                    "    table {",
                    "        border-collapse: collapse;",
                    "        border-spacing: 0;",
                    "        width: 100%;",
                    "        background: $table-row-bg;",
                    "        tr:first-child td {",
                    "            border-top-width: 0;",
                    "        }",
                    "    }",
                    "    th {",
                    "        padding: 0;",
                    "        background: $table-th-bg;",
                    "        color: $table-th-color;",
                    "        text-align: left;",
                    "        #{$table-prefix}-cell-wrapper {",
                    "            padding: $table-cell-padding-top $table-cell-padding-left;",
                    "            overflow: hidden;",
                    "            text-overflow: ellipsis;",
                    "            word-break: break-all;",
                    "        }",
                    "        font-weight: $table-th-font-weight;",
                    "        border: $table-normal-border-width $table-normal-border-style $table-normal-border-color;",
                    "    }",
                    "    &-affix {",
                    "        z-index: 1;",
                    "    }",
                    "    &-header-resizable {",
                    "        position: relative;",
                    "        #{$table-prefix}-resize-handler {",
                    "            position: absolute;",
                    "            right: 0;",
                    "            top: 0;",
                    "            bottom: 0;",
                    "            width: 3px;",
                    "            background: transparent;",
                    "            cursor: ew-resize;",
                    "        }",
                    "    }",
                    "    td {",
                    "        padding: 0;",
                    "        #{$table-prefix}-cell-wrapper {",
                    "            padding: $table-cell-padding-top $table-cell-padding-left;",
                    "            overflow: hidden;",
                    "            text-overflow: ellipsis;",
                    "            word-break: break-all;",
                    "            .#{$css-prefix}icon-arrow-down.#{$css-prefix}table-tree-arrow,",
                    "            .#{$css-prefix}icon-arrow-right.#{$css-prefix}table-tree-arrow,",
                    "            #{$table-prefix}-tree-placeholder {",
                    "                margin-right: 3px;",
                    "                float: left;",
                    "            }",
                    "            .#{$css-prefix}icon-arrow-down.#{$css-prefix}table-tree-arrow,",
                    "            .#{$css-prefix}icon-arrow-right.#{$css-prefix}table-tree-arrow {",
                    "                @include icon-size($table-tree-expanded-icon-size);",
                    "            }",
                    "        }",
                    "        border: $table-normal-border-width $table-normal-border-style $table-normal-border-color;",
                    "    }",
                    "    #{$table-prefix}-expanded,",
                    "    #{$table-prefix}-selection {",
                    "        #{$table-prefix}-cell-wrapper {",
                    "            overflow: visible;",
                    "        }",
                    "    }",
                    "    &.no-header table tr:first-child td {",
                    "        border-top-width: 1px;",
                    "    }",
                    "    &.only-bottom-border {",
                    "        border-width: 0;",
                    "        th {",
                    "            border-width: 0 0 $table-normal-border-width 0;",
                    "        }",
                    "        td {",
                    "            border-width: 0 0 $table-normal-border-width 0;",
                    "        }",
                    "        #{$table-prefix}-expanded-row {",
                    "            th {",
                    "                border-width: 0 0 $table-normal-border-width 0;",
                    "            }",
                    "            td {",
                    "                border-width: 0 0 $table-normal-border-width 0;",
                    "            }",
                    "        }",
                    "    }",
                    "    &-loading {",
                    "        display: block;",
                    "    }",
                    "    &.zebra {",
                    "        tr:nth-child(odd) td {",
                    "            background: $table-td-normal;",
                    "        }",
                    "        tr:nth-child(even) td {",
                    "            background: $table-td-gray;",
                    "        }",
                    "        #{$table-prefix}-row.hovered td {",
                    "            background: $table-row-hover-bg;",
                    "            color: $table-row-hover-color;",
                    "        }",
                    "        #{$table-prefix}-row.selected td {",
                    "            background: $table-row-selected-bg;",
                    "            color: $table-row-selected-color;",
                    "        }",
                    "    }",
                    "    &-empty {",
                    "        color: $table-empty-color;",
                    "        padding: $table-empty-padding 0;",
                    "        text-align: center;",
                    "    }",
                    "    &-expanded-row {",
                    "        td {",
                    "            border-width: 0;",
                    "            &:first-child {",
                    "                border-left-width: 1px;",
                    "            }",
                    "            &:last-child {",
                    "                border-right-width: 1px;",
                    "            }",
                    "        }",
                    "        &:last-child td {",
                    "            border-bottom-width: 1px;",
                    "        }",
                    "        #{$table-prefix} .last td {",
                    "            border-bottom-width: 0;",
                    "        }",
                    "    }",
                    "    &-filter-footer {",
                    "        margin: 10px 10px 0;",
                    "        button {",
                    "            margin-right: 5px;",
                    "        }",
                    "    }",
                    "    &-row {",
                    "        transition: all ease .3s;",
                    "        background: $table-row-bg;",
                    "        color: $table-row-color;",
                    "",
                    "        &.hidden {",
                    "            display: none;",
                    "        }",
                    "        &.hovered {",
                    "            background: $table-row-hover-bg;",
                    "            color: $table-row-hover-color;",
                    "        }",
                    "        &.selected {",
                    "            background: $table-row-selected-bg;",
                    "            color: $table-row-selected-color;",
                    "        }",
                    "    }",
                    "    &-tree-placeholder {",
                    "        display: inline-block;",
                    "        width: 12px;",
                    "    }",
                    "}",
                    "",
                    ".last {",
                    "    #{$table-prefix}-expanded-row {",
                    "        td {",
                    "            border-bottom-width: 1px;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-body,",
                    "#{$table-prefix}-header {",
                    "    overflow: auto;",
                    "    font-size: $table-th-font-size;",
                    "}",
                    "",
                    "#{$table-prefix}-body {",
                    "    font-size: $table-body-font-size;",
                    "}",
                    "",
                    "#{$table-prefix}-fixed {",
                    "    border: $table-normal-border-width $table-normal-border-style $table-normal-border-color;",
                    "    table {",
                    "        table-layout: fixed;",
                    "    }",
                    "    #{$table-prefix}-header {",
                    "        background: $table-th-bg;",
                    "    }",
                    "    @include table-border(0);",
                    "    &#{$table-prefix}-group {",
                    "        @include table-border($table-normal-border-width);",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-lock {",
                    "    #{$table-prefix}-body {",
                    "        overflow-x: auto;",
                    "        overflow-y: visible;",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-group {",
                    "    border-width: 0;",
                    "    #{$table-prefix}-body {",
                    "        margin-top: $table-group-split;",
                    "        table {",
                    "            margin-bottom: $table-group-split;",
                    "            tr:first-child td {",
                    "                border-top-width: 1px;",
                    "            }",
                    "        }",
                    "    }",
                    "    #{$table-prefix}-group-header {",
                    "        td {",
                    "            background: $table-group-th-bg;",
                    "            color: $table-group-th-color;",
                    "        }",
                    "    }",
                    "    #{$table-prefix}-group-footer {",
                    "        td {",
                    "            background: $table-group-footer-bg;",
                    "            color: $table-group-footer-color;",
                    "        }",
                    "    }",
                    "    #{$table-prefix}-row.hovered,",
                    "    #{$table-prefix}-row.selected {",
                    "        background: $table-row-bg;",
                    "        color: $table-row-color;",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-lock {",
                    "    position: relative;",
                    "    table {",
                    "        table-layout: fixed;",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-header-inner {",
                    "    overflow: hidden;",
                    "}",
                    "",
                    "#{$table-prefix}-lock-left,",
                    "#{$table-prefix}-lock-right {",
                    "    position: absolute;",
                    "    left: 0;",
                    "    top: 0;",
                    "    z-index: 1;",
                    "    border: 0;",
                    "    table {",
                    "        width: auto;",
                    "    }",
                    "    #{$table-prefix}-body {",
                    "        overflow: hidden;",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-lock-right {",
                    "    right: 0;",
                    "    left: auto;",
                    "    table tr td:first-child,",
                    "    table tr th:first-child {",
                    "        border-left-width: 1px;",
                    "    }",
                    "    &.shadow {",
                    "        box-shadow: -2px 0 3px rgba(0, 0, 0, .12);",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-lock-left {",
                    "    &.shadow {",
                    "        box-shadow: 2px 0 3px rgba(0, 0, 0, .12);",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-filter {",
                    "    line-height: 1;",
                    "}",
                    "",
                    "#{$table-prefix}-sort {",
                    "    position: relative;",
                    "    width: 16px;",
                    "    height: 15px;",
                    "    display: inline-block;",
                    "    vertical-align: middle;",
                    "    line-height: 1;",
                    "    .#{$css-prefix}icon {",
                    "        position: absolute;",
                    "        left: 0;",
                    "        @include icon-size($table-sort-icon-size);",
                    "        color: $table-sort-color;",
                    "    }",
                    "    .current .#{$css-prefix}icon {",
                    "        color: $table-sort-color-current;",
                    "    }",
                    "    .#{$css-prefix}icon-ascending {",
                    "        left: 4px;",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-filter {",
                    "    margin-left: 5px;",
                    "    cursor: pointer;",
                    "    width: 20px;",
                    "    display: inline-block;",
                    "    .#{$css-prefix}icon {",
                    "        @include icon-size($table-filter-icon-size);",
                    "        color: $table-sort-color;",
                    "    }",
                    "}",
                    "",
                    "#{$table-prefix}-expanded-ctrl {",
                    "    &.disabled {",
                    "        color: $table-expanded-ctrl-disabled-color;",
                    "    }",
                    "    .#{$css-prefix}icon {",
                    "        @include icon-size($table-expanded-icon-size);",
                    "    }",
                    "}"
                ]
            },
            "selection.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Children } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Checkbox from '../checkbox';",
                    "import Radio from '../radio';",
                    "import { func, log } from '../util';",
                    "import zhCN from '../locale/zh-cn';",
                    "import SelectionRow from './selection/row';",
                    "import Col from './column';",
                    "import { statics } from './util';",
                    "",
                    "const { makeChain } = func;",
                    "",
                    "const unique = (arr, key = 'this') => {",
                    "    const temp = {}, ret = [];",
                    "    arr.forEach(item => {",
                    "        let value;",
                    "        if (key === 'this') {",
                    "            value = item;",
                    "        } else {",
                    "            value = item[key];",
                    "        }",
                    "        if (!temp[value]) {",
                    "            ret.push(item);",
                    "            temp[value] = true;",
                    "        }",
                    "    });",
                    "    return ret;",
                    "};",
                    "",
                    "export default function selection(BaseComponent) {",
                    "    /** Table */",
                    "    class SelectionTable extends React.Component {",
                    "        static SelectionRow = SelectionRow;",
                    "        static propTypes = {",
                    "            /**",
                    "            * 是否启用选择模式",
                    "            * @property {Function} getProps `Function(record, index)=>Object` 获取selection的默认属性",
                    "            * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。",
                    "            * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调",
                    "            * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调",
                    "            * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值",
                    "            * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`",
                    "            */",
                    "            rowSelection: PropTypes.object,",
                    "            primaryKey: PropTypes.string,",
                    "            dataSource: PropTypes.array,",
                    "            entireDataSource: PropTypes.array,",
                    "            ...BaseComponent.propTypes,",
                    "        }",
                    "",
                    "        static defaultProps = {",
                    "            ...BaseComponent.defaultProps,",
                    "            locale: zhCN.Table,",
                    "            primaryKey: 'id',",
                    "            prefix: 'next-'",
                    "        }",
                    "",
                    "        static contextTypes = {",
                    "            listHeader: PropTypes.any,",
                    "        }",
                    "",
                    "        static childContextTypes = {",
                    "            rowSelection: PropTypes.object,",
                    "            selectedRowKeys: PropTypes.array",
                    "        }",
                    "",
                    "        constructor(props, context) {",
                    "            super(props, context);",
                    "            this.state = {",
                    "                selectedRowKeys: props.rowSelection && 'selectedRowKeys' in props.rowSelection ? (props.rowSelection.selectedRowKeys || []) : []",
                    "            };",
                    "        }",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                rowSelection: this.props.rowSelection,",
                    "                selectedRowKeys: this.state.selectedRowKeys",
                    "            };",
                    "        }",
                    "",
                    "        componentWillReceiveProps(nextProps) {",
                    "            if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {",
                    "                const selectedRowKeys = nextProps.rowSelection.selectedRowKeys || [];",
                    "                this.setState({",
                    "                    selectedRowKeys",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        normalizeChildren(children) {",
                    "            const { prefix, rowSelection } = this.props;",
                    "            if (rowSelection) {",
                    "                children = Children.map(children, (child, index) => React.cloneElement(child, {",
                    "                    key: index",
                    "                }));",
                    "                children.unshift(<Col key=\"selection\" title={this.renderSelectionHeader.bind(this)}",
                    "                    cell={this.renderSelectionBody.bind(this)}",
                    "                    width={50}",
                    "                    className={`${prefix}table-selection`} __normalized />);",
                    "                return children;",
                    "            }",
                    "            return children;",
                    "        }",
                    "",
                    "        renderSelectionHeader = () => {",
                    "            const onChange = this.selectAllRow, attrs = {},",
                    "                { rowSelection, primaryKey, dataSource, locale } = this.props,",
                    "                { selectedRowKeys } = this.state,",
                    "                mode = rowSelection.mode ? rowSelection.mode : 'multiple';",
                    "",
                    "            let checked = !!selectedRowKeys.length;",
                    "            let indeterminate = false;",
                    "            this.flatDataSource(dataSource)",
                    "                .filter((record, index) => {",
                    "                    if (!rowSelection.getProps) {",
                    "                        return true;",
                    "                    } else {",
                    "                        return !(rowSelection.getProps(record, index) || {}).disabled;",
                    "                    }",
                    "                })",
                    "                .map(record => record[primaryKey])",
                    "                .forEach(id => {",
                    "                    if (selectedRowKeys.indexOf(id) === -1) {",
                    "                        checked = false;",
                    "                    } else {",
                    "                        indeterminate = true;",
                    "                    }",
                    "                });",
                    "            attrs.onClick = makeChain((e) => {",
                    "                e.stopPropagation();",
                    "            }, attrs.onClick);",
                    "",
                    "            if (checked) {",
                    "                indeterminate = false;",
                    "            }",
                    "            return mode === 'multiple' ? <Checkbox indeterminate={indeterminate} aria-label={locale.selectAll} checked={checked} onChange={onChange} {...attrs} /> : null;",
                    "        }",
                    "",
                    "        renderSelectionBody = (value, index, record) => {",
                    "            const { rowSelection, primaryKey } = this.props;",
                    "            const { selectedRowKeys } = this.state;",
                    "            const mode = rowSelection.mode ? rowSelection.mode : 'multiple';",
                    "            const checked = selectedRowKeys.indexOf(record[primaryKey]) > -1;",
                    "            const onChange = this.selectOneRow.bind(this, index, record);",
                    "            const attrs = rowSelection.getProps ? (rowSelection.getProps(record, index) || {}) : {};",
                    "",
                    "            attrs.onClick = makeChain((e) => {",
                    "                e.stopPropagation();",
                    "            }, attrs.onClick);",
                    "            return mode === 'multiple' ? <Checkbox checked={checked} onChange={onChange} {...attrs} /> :",
                    "                <Radio checked={checked} onChange={onChange} {...attrs} />;",
                    "        }",
                    "",
                    "        selectAllRow = (checked, e) => {",
                    "            const ret = [...this.state.selectedRowKeys],",
                    "                { rowSelection, primaryKey, dataSource, entireDataSource } = this.props,",
                    "                { selectedRowKeys } = this.state,",
                    "                getProps = rowSelection.getProps;",
                    "            let attrs = {}, records = [];",
                    "",
                    "            const source = entireDataSource ? entireDataSource : dataSource;",
                    "",
                    "            this.flatDataSource(source).forEach((record, index) => {",
                    "                const id = record[primaryKey];",
                    "                if (getProps) {",
                    "                    attrs = getProps(record, index) || {};",
                    "                }",
                    "                // 反选和全选的时候不要丢弃禁用项的选中状态",
                    "                if (checked && (!attrs.disabled || selectedRowKeys.indexOf(id) > -1)) {",
                    "                    ret.push(id);",
                    "                    records.push(record);",
                    "                } else if (attrs.disabled && selectedRowKeys.indexOf(id) > -1) {",
                    "                    ret.push(id);",
                    "                    records.push(record);",
                    "                } else {",
                    "                    const i = ret.indexOf(id);",
                    "                    i > -1 && ret.splice(i, 1);",
                    "                }",
                    "            });",
                    "",
                    "            records = unique(records, primaryKey);",
                    "            if (typeof rowSelection.onSelectAll === 'function') {",
                    "                rowSelection.onSelectAll(checked, records);",
                    "            }",
                    "            this.triggerSelection(rowSelection, unique(ret), records);",
                    "            e.stopPropagation();",
                    "        }",
                    "",
                    "        selectOneRow(index, record, checked, e) {",
                    "            let selectedRowKeys = [...this.state.selectedRowKeys], i;",
                    "            const { primaryKey, rowSelection, dataSource } = this.props,",
                    "                mode = rowSelection.mode ? rowSelection.mode : 'multiple',",
                    "                id = record[primaryKey];",
                    "            if (!id) {",
                    "                log.warning(`Can't get value from record using given ${primaryKey} as primaryKey.`);",
                    "            }",
                    "            if (mode === 'multiple') {",
                    "                if (checked) {",
                    "                    selectedRowKeys.push(id);",
                    "                } else {",
                    "                    i = selectedRowKeys.indexOf(id);",
                    "                    selectedRowKeys.splice(i, 1);",
                    "                }",
                    "            } else if (checked) {",
                    "                selectedRowKeys = [id];",
                    "            }",
                    "            const records = unique(dataSource.filter(item => selectedRowKeys.indexOf(item[primaryKey]) > -1), primaryKey);",
                    "            if (typeof rowSelection.onSelect === 'function') {",
                    "                rowSelection.onSelect(checked, record, records);",
                    "            }",
                    "",
                    "            this.triggerSelection(rowSelection, selectedRowKeys, records);",
                    "",
                    "            e.stopPropagation();",
                    "        }",
                    "        triggerSelection(rowSelection, selectedRowKeys, records) {",
                    "            if (!('selectedRowKeys' in rowSelection)) {",
                    "                this.setState({",
                    "                    selectedRowKeys",
                    "                });",
                    "            }",
                    "            if (typeof rowSelection.onChange === 'function') {",
                    "                rowSelection.onChange(selectedRowKeys, records);",
                    "            }",
                    "        }",
                    "",
                    "        flatDataSource(dataSource) {",
                    "            let ret = dataSource;",
                    "            const { listHeader } = this.context;",
                    "",
                    "            if (listHeader) {",
                    "                ret = [];",
                    "                const { hasChildrenSelection, hasSelection } = listHeader;",
                    "                dataSource.forEach(item => {",
                    "                    const children = item.children;",
                    "                    // 如果需要渲染selection才将这条记录插入到dataSource",
                    "                    // 或者没有孩子节点",
                    "                    if (hasSelection) {",
                    "                        ret.push(item);",
                    "                    }",
                    "                    if (children && hasChildrenSelection) {",
                    "                        ret = ret.concat(children);",
                    "                    }",
                    "                });",
                    "            }",
                    "            return ret;",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable prefer-const */",
                    "            let { rowSelection, components, children, ...others } = this.props;",
                    "",
                    "            if (rowSelection) {",
                    "                children = this.normalizeChildren(children);",
                    "                components = { ...components };",
                    "                components.Row = components.Row || SelectionRow;",
                    "            }",
                    "            return (<BaseComponent {...others} components={components}>",
                    "                {children}",
                    "            </BaseComponent>);",
                    "        }",
                    "    }",
                    "    statics(SelectionTable, BaseComponent);",
                    "    return SelectionTable;",
                    "}"
                ]
            },
            "sticky.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Header from './fixed/header';",
                    "import StickyHeader from './sticky/header';",
                    "import { statics } from './util';",
                    "",
                    "export default function sticky(BaseComponent) {",
                    "    /** Table */",
                    "    class StickyTable extends React.Component {",
                    "        static StickyHeader = StickyHeader;",
                    "        static propTypes = {",
                    "            /**",
                    "             * 表头是否是sticky",
                    "             */",
                    "            stickyHeader: PropTypes.bool,",
                    "            /**",
                    "             * 距离窗口顶部达到指定偏移量后触发",
                    "             */",
                    "            offsetTop: PropTypes.number,",
                    "            /**",
                    "             * affix组件的的属性",
                    "             */",
                    "            affixProps: PropTypes.object,",
                    "            components: PropTypes.object,",
                    "            ...BaseComponent.propTypes",
                    "        }",
                    "",
                    "        static defaultProps = {",
                    "            components: {},",
                    "            ...BaseComponent.defaultProps",
                    "        }",
                    "",
                    "        static childContextTypes = {",
                    "            Header: PropTypes.any,",
                    "            offsetTop: PropTypes.number,",
                    "            affixProps: PropTypes.object",
                    "        }",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                Header: (this.props.components.Header || Header),",
                    "                offsetTop: this.props.offsetTop,",
                    "                affixProps: this.props.affixProps",
                    "            };",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable no-unused-vars */",
                    "            const { stickyHeader, offsetTop, affixProps, ...others } = this.props;",
                    "            let { components, maxBodyHeight, fixedHeader } = this.props;",
                    "            if (stickyHeader) {",
                    "                components = {...components};",
                    "                components.Header = StickyHeader;",
                    "                fixedHeader = true;",
                    "                maxBodyHeight = Math.max(maxBodyHeight, 10000);",
                    "            }",
                    "            return <BaseComponent {...others} components={components} fixedHeader={fixedHeader} maxBodyHeight={maxBodyHeight}/>;",
                    "        }",
                    "    }",
                    "    statics(StickyTable, BaseComponent);",
                    "    return StickyTable;",
                    "}",
                    "",
                    ""
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../checkbox/style.js';",
                    "import '../radio/style.js';",
                    "import '../menu/style.js';",
                    "import '../button/style.js';",
                    "import '../dropdown/style.js';",
                    "import '../loading/style.js';",
                    "import './main.scss';"
                ]
            },
            "tree.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import RowComponent from './tree/row';",
                    "import CellComponent from './tree/cell';",
                    "import {statics} from './util';",
                    "",
                    "const noop = () => { };",
                    "",
                    "export default function tree(BaseComponent) {",
                    "    class TreeTable extends React.Component {",
                    "        static TreeRow = RowComponent;",
                    "        static TreeCell = CellComponent;",
                    "        static propTypes = {",
                    "            /**",
                    "             * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作",
                    "             */",
                    "            openRowKeys: PropTypes.array,",
                    "            /**",
                    "             * 点击tree展开或者关闭的时候触发的事件",
                    "             * @param {Array} openRowKeys tree模式下展开的key",
                    "             * @param {String} currentRowKey 当前点击行的key",
                    "             * @param {Boolean} opened 当前点击是展开还是收起",
                    "             * @param {Object} currentRecord 当前点击行的记录",
                    "             */",
                    "            onRowOpen: PropTypes.func,",
                    "            /**",
                    "             * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中",
                    "             */",
                    "            primaryKey: PropTypes.string,",
                    "            /**",
                    "             * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效",
                    "             */",
                    "            indent: PropTypes.number,",
                    "            /**",
                    "             * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table",
                    "             */",
                    "            isTree: PropTypes.bool,",
                    "            locale: PropTypes.object,",
                    "            ...BaseComponent.propTypes,",
                    "        }",
                    "",
                    "        static defaultProps = {",
                    "            ...BaseComponent.defaultProps,",
                    "            primaryKey: 'id',",
                    "            onRowOpen: noop,",
                    "            components: {},",
                    "            indent: 12",
                    "        }",
                    "",
                    "        static childContextTypes = {",
                    "            openTreeRowKeys: PropTypes.array,",
                    "            indent: PropTypes.number,",
                    "            treeStatus: PropTypes.array,",
                    "            onTreeNodeClick: PropTypes.func,",
                    "            isTree: PropTypes.bool",
                    "        }",
                    "",
                    "        constructor(props, context) {",
                    "            super(props, context);",
                    "            this.state = {",
                    "                openRowKeys: props.openRowKeys || []",
                    "            };",
                    "        }",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                openTreeRowKeys: this.state.openRowKeys,",
                    "                indent: this.props.indent,",
                    "                treeStatus: this.getTreeNodeStatus(this.ds),",
                    "                onTreeNodeClick: this.onTreeNodeClick,",
                    "                isTree: this.props.isTree",
                    "            };",
                    "        }",
                    "",
                    "        componentWillReceiveProps(nextProps) {",
                    "            if ('openRowKeys' in nextProps) {",
                    "                const { openRowKeys } = nextProps;",
                    "                this.setState({",
                    "                    openRowKeys",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "        normalizeDataSource(dataSource) {",
                    "            const ret = [],",
                    "                loop = function (dataSource, level) {",
                    "                    dataSource.forEach(item => {",
                    "                        item.__level = level;",
                    "                        ret.push(item);",
                    "                        if (item.children) {",
                    "                            loop(item.children, level + 1);",
                    "                        }",
                    "                    });",
                    "                };",
                    "            loop(dataSource, 0);",
                    "            this.ds = ret;",
                    "            return ret;",
                    "        }",
                    "",
                    "        getTreeNodeStatus(dataSource = []) {",
                    "            const { openRowKeys } = this.state,",
                    "                { primaryKey } = this.props,",
                    "                ret = [];",
                    "",
                    "            openRowKeys.forEach(openKey => {",
                    "                dataSource.forEach(item => {",
                    "                    if (item[primaryKey] === openKey) {",
                    "                        if (item.children) {",
                    "                            item.children.forEach(child => {",
                    "                                ret.push(child[primaryKey]);",
                    "                            });",
                    "                        }",
                    "                    }",
                    "                });",
                    "            });",
                    "            return ret;",
                    "        }",
                    "",
                    "        onTreeNodeClick = (record) => {",
                    "            const { primaryKey } = this.props,",
                    "                id = record[primaryKey],",
                    "                dataSource = this.ds,",
                    "                openRowKeys = [...this.state.openRowKeys],",
                    "                index = openRowKeys.indexOf(id),",
                    "                getChildrenKeyById = function (id) {",
                    "                    const ret = [id];",
                    "                    const loop = (data) => {",
                    "                        data.forEach(item => {",
                    "                            ret.push(item[primaryKey]);",
                    "                            if (item.children) {",
                    "                                loop(item.children);",
                    "                            }",
                    "                        });",
                    "                    };",
                    "                    dataSource.forEach(item => {",
                    "                        if (item[primaryKey] === id) {",
                    "                            if (item.children) {",
                    "                                loop(item.children);",
                    "                            }",
                    "                        }",
                    "                    });",
                    "                    return ret;",
                    "                };",
                    "",
                    "            if (index > -1) {",
                    "                // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey",
                    "                const ids = getChildrenKeyById(id);",
                    "                ids.forEach(id => {",
                    "                    const i = openRowKeys.indexOf(id);",
                    "                    if (i > -1) {",
                    "                        openRowKeys.splice(i, 1);",
                    "                    }",
                    "                });",
                    "            } else {",
                    "                openRowKeys.push(id);",
                    "            }",
                    "",
                    "            if (!('openRowKeys' in this.props)) {",
                    "                this.setState({",
                    "                    openRowKeys",
                    "                });",
                    "            }",
                    "            this.props.onRowOpen(openRowKeys, id, index === -1, record);",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable no-unused-vars, prefer-const */",
                    "            let { components, isTree, dataSource, indent, ...others } = this.props;",
                    "",
                    "            if (isTree) {",
                    "                components = {...components};",
                    "                if (!components.Row) {",
                    "                    components.Row = RowComponent;",
                    "                }",
                    "                if (!components.Cell) {",
                    "                    components.Cell = CellComponent;",
                    "                }",
                    "",
                    "                dataSource = this.normalizeDataSource(dataSource);",
                    "            }",
                    "            return (<BaseComponent {...others} dataSource={dataSource} components={components} />);",
                    "        }",
                    "    }",
                    "    statics(TreeTable, BaseComponent);",
                    "    return TreeTable;",
                    "}"
                ]
            },
            "util.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "const blackList = ['defaultProps', 'propTypes', 'contextTypes', 'childContextTypes', 'displayName'];",
                    "",
                    "export const statics = (Target, Component) => {",
                    "    Object.keys(Component).forEach(property => {",
                    "        if (blackList.indexOf(property) === -1) {",
                    "            Target[property] = Component[property];",
                    "        }",
                    "    });",
                    "};",
                    "",
                    "export const fetchDataByPath = (object, path) => {",
                    "    if (!object || !path) {",
                    "        return false;",
                    "    }",
                    "    path = path.toString();",
                    "    const field = path.split('.');",
                    "    let val, key;",
                    "    if (field.length) {",
                    "        key = field[0];",
                    "        // lists[1].name",
                    "        if (key.indexOf('[') >= 0) {",
                    "            key = key.match(/(.*)\\[(.*)\\]/);",
                    "            if (key) {",
                    "                val = object[key[1]][key[2]];",
                    "            }",
                    "        } else {",
                    "            val = object[field[0]];",
                    "        }",
                    "        if (val) {",
                    "            for (let colIndex = 1; colIndex < field.length; colIndex++) {",
                    "                val = val[field[colIndex]];",
                    "                if (typeof val === 'undefined') {",
                    "                    break;",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "    return val;",
                    "};"
                ]
            },
            "virtual.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import { findDOMNode } from 'react-dom';",
                    "import PropTypes from 'prop-types';",
                    "import { dom } from '../util';",
                    "import VirtualBody from './virtual/body';",
                    "import { statics } from './util';",
                    "",
                    "const noop = () => { };",
                    "export default function virtual(BaseComponent) {",
                    "    class VirtualTable extends React.Component {",
                    "        static VirtualBody = VirtualBody;",
                    "        static propTypes = {",
                    "            /**",
                    "             * 是否开启虚拟滚动",
                    "             */",
                    "            useVirtual: PropTypes.bool,",
                    "            /**",
                    "             * 设置行高",
                    "             */",
                    "            rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),",
                    "            maxBodyHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                    "            primaryKey: PropTypes.string,",
                    "            dataSource: PropTypes.array,",
                    "            /**",
                    "             * 在内容区域滚动的时候触发的函数",
                    "             */",
                    "            onBodyScroll: PropTypes.func,",
                    "            ...BaseComponent.propTypes,",
                    "        }",
                    "",
                    "        static defaultProps = {",
                    "            ...BaseComponent.defaultProps,",
                    "            primaryKey: 'id',",
                    "            rowHeight: noop,",
                    "            maxBodyHeight: 200,",
                    "            components: {},",
                    "            prefix: 'next-',",
                    "            onBodyScroll: noop",
                    "        }",
                    "",
                    "        static childContextTypes = {",
                    "            onVirtualScroll: PropTypes.func,",
                    "            bodyHeight: PropTypes.number,",
                    "            innerTop: PropTypes.number,",
                    "            getBodyNode: PropTypes.func,",
                    "            getTableInstanceForVirtual: PropTypes.func,",
                    "            rowSelection: PropTypes.object",
                    "        }",
                    "",
                    "        state = {",
                    "            rowHeight: this.props.rowHeight,",
                    "            scrollToRow: this.props.scrollToRow,",
                    "            height: this.props.maxBodyHeight",
                    "        }",
                    "",
                    "        getChildContext() {",
                    "            return {",
                    "                onVirtualScroll: this.onScroll,",
                    "                bodyHeight: this.computeBodyHeight(),",
                    "                innerTop: this.computeInnerTop(),",
                    "                getBodyNode: this.getBodyNode,",
                    "                getTableInstanceForVirtual: this.getTableInstance,",
                    "                rowSelection: this.rowSelection",
                    "            };",
                    "        }",
                    "",
                    "        componentWillMount() {",
                    "            const { useVirtual, dataSource } = this.props;",
                    "",
                    "            this.hasVirtualData =  useVirtual && dataSource && dataSource.length > 0;",
                    "        }",
                    "",
                    "        componentDidMount() {",
                    "",
                    "            if (this.hasVirtualData) {",
                    "                this.lastScrollTop = this.bodyNode.scrollTop;",
                    "            }",
                    "",
                    "            this.adjustScrollTop();",
                    "            this.adjustSize();",
                    "            this.reComputeSize();",
                    "        }",
                    "",
                    "        componentWillReceiveProps(nextProps) {",
                    "            const { useVirtual, dataSource } = nextProps;",
                    "",
                    "            this.hasVirtualData =  useVirtual && dataSource && dataSource.length > 0;",
                    "",
                    "            if ('maxBodyHeight' in nextProps) {",
                    "                if (this.state.height !== nextProps.maxBodyHeight) {",
                    "                    this.setState({",
                    "                        height: nextProps.maxBodyHeight",
                    "                    });",
                    "                }",
                    "            }",
                    "",
                    "            if ('scrollToRow' in nextProps) {",
                    "                this.setState({",
                    "                    scrollToRow: nextProps.scrollToRow",
                    "                });",
                    "            }",
                    "",
                    "        }",
                    "",
                    "        componentDidUpdate() {",
                    "            this.adjustScrollTop();",
                    "            this.adjustSize();",
                    "            this.reComputeSize();",
                    "        }",
                    "",
                    "        reComputeSize() {",
                    "            const { rowHeight } = this.state;",
                    "            if (typeof rowHeight === 'function' && this.hasVirtualData) {",
                    "                const row = this.getRowNode();",
                    "                const rowClientHeight = row && row.clientHeight;",
                    "                if (rowClientHeight !== this.state.rowHeight) {",
                    "                    this.setState({",
                    "                        rowHeight: rowClientHeight",
                    "                    });",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        computeBodyHeight() {",
                    "            const { rowHeight } = this.state;",
                    "            const { dataSource } = this.props;",
                    "            if (typeof rowHeight === 'function') {",
                    "                return 0;",
                    "            }",
                    "            return dataSource.length * rowHeight;",
                    "        }",
                    "",
                    "        computeInnerTop() {",
                    "            const { rowHeight } = this.state;",
                    "            if (typeof rowHeight === 'function') {",
                    "                return 0;",
                    "            }",
                    "            return (this.start * rowHeight);",
                    "        }",
                    "",
                    "        getVisibleRange(ExpectStart) {",
                    "            const { height, rowHeight } = this.state;",
                    "            let end, visibleCount = 0;",
                    "            let start = 0;",
                    "            if (typeof rowHeight === 'function') {",
                    "                // try get cell height;",
                    "                end = 2;",
                    "            } else {",
                    "                visibleCount = parseInt(height / rowHeight, 10);",
                    "",
                    "                if ('number' === typeof ExpectStart) {",
                    "                    start = ExpectStart;",
                    "                }",
                    "",
                    "                end = +start + 1 + visibleCount + 10;",
                    "            }",
                    "            this.end = end;",
                    "            this.visibleCount = visibleCount;",
                    "            return {",
                    "                start,",
                    "                end",
                    "            };",
                    "        }",
                    "",
                    "        adjustScrollTop() {",
                    "            if (this.hasVirtualData) {",
                    "                this.bodyNode.scrollTop = this.lastScrollTop || this.state.scrollToRow * this.state.rowHeight;",
                    "            }",
                    "        }",
                    "",
                    "        adjustSize() {",
                    "            if (this.hasVirtualData) {",
                    "                const body = this.bodyNode;",
                    "                const virtualScrollNode = body.querySelector('div');",
                    "                const table = virtualScrollNode.querySelector('table');",
                    "                const { clientHeight, clientWidth } = body;",
                    "                const { clientWidth: tableClientWidth } = table;",
                    "                if (clientWidth < tableClientWidth) {",
                    "                    dom.setStyle(virtualScrollNode, 'width', tableClientWidth);",
                    "                    const leftNode = this.bodyLeftNode;",
                    "                    const rightNode = this.bodyRightNode;",
                    "                    leftNode && dom.setStyle(leftNode, 'max-height', clientHeight);",
                    "                    rightNode && dom.setStyle(rightNode, 'max-height', clientHeight);",
                    "                    this.hasScrollbar = true;",
                    "                } else {",
                    "                    this.hasScrollbar = false;",
                    "                }",
                    "            }",
                    "",
                    "        }",
                    "",
                    "        onScroll = () => {",
                    "            // 避免横向滚动带来的性能问题",
                    "            const scrollTop = this.bodyNode.scrollTop;",
                    "            if (scrollTop === this.lastScrollTop) {",
                    "                return;",
                    "            }",
                    "            const start = this.computeScrollToRow(scrollTop);",
                    "            if (!('scrollToRow' in this.props)) {",
                    "                this.setState({",
                    "                    scrollToRow: start",
                    "                });",
                    "            }",
                    "            this.props.onBodyScroll(start);",
                    "            this.lastScrollTop = scrollTop;",
                    "        }",
                    "",
                    "        computeScrollToRow(offset) {",
                    "            const { rowHeight } = this.state;",
                    "            const start = parseInt(offset / rowHeight);",
                    "            this.start = start;",
                    "            return start;",
                    "        }",
                    "",
                    "        getBodyNode = (node, lockType) => {",
                    "            lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';",
                    "            this[`body${lockType}Node`] = node;",
                    "        }",
                    "",
                    "        getTableInstance = (type, instance) => {",
                    "            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';",
                    "            this[`table${type}Inc`] = instance;",
                    "        }",
                    "",
                    "        getRowNode() {",
                    "            return findDOMNode(this.tableInc.getRowRef(1));",
                    "        }",
                    "",
                    "        render() {",
                    "            /* eslint-disable no-unused-vars, prefer-const */",
                    "            let { useVirtual, components, dataSource, fixedHeader, rowHeight, scrollToRow, onBodyScroll, ...others } = this.props;",
                    "",
                    "            const entireDataSource = dataSource;",
                    "",
                    "            this.rowSelection = this.props.rowSelection;",
                    "            if (this.hasVirtualData) {",
                    "                components = { ...components };",
                    "                const { start, end } = this.getVisibleRange(this.state.scrollToRow);",
                    "                dataSource = dataSource.slice(start, end);",
                    "",
                    "                if (!components.Body) {",
                    "                    components.Body = VirtualBody;",
                    "                }",
                    "                fixedHeader = true;",
                    "            }",
                    "",
                    "            return (<BaseComponent {...others} dataSource={dataSource} entireDataSource={entireDataSource} components={components} fixedHeader={fixedHeader} />);",
                    "        }",
                    "    }",
                    "    statics(VirtualTable, BaseComponent);",
                    "    return VirtualTable;",
                    "}"
                ]
            },
            "base": {
                "body.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import RowComponent from './row';",
                        "import CellComponent from './cell';",
                        "",
                        "const noop = () => { };",
                        "",
                        "export default class Body extends React.Component {",
                        "    static propTypes = {",
                        "        loading: PropTypes.bool,",
                        "        emptyContent: PropTypes.any,",
                        "        prefix: PropTypes.string,",
                        "        pure: PropTypes.bool,",
                        "        components: PropTypes.object,",
                        "        getCellProps: PropTypes.func,",
                        "        cellRef: PropTypes.func,",
                        "        primaryKey: PropTypes.string,",
                        "        getRowProps: PropTypes.func,",
                        "        rowRef: PropTypes.func,",
                        "        dataSource: PropTypes.array,",
                        "        children: PropTypes.any,",
                        "        className: PropTypes.string,",
                        "        component: PropTypes.string,",
                        "        colGroup: PropTypes.object,",
                        "        columns: PropTypes.array,",
                        "        onRowClick: PropTypes.func,",
                        "        onRowMouseEnter: PropTypes.func,",
                        "        onRowMouseLeave: PropTypes.func,",
                        "        locale: PropTypes.object",
                        "    }",
                        "    static defaultProps = {",
                        "        loading: false,",
                        "        prefix: 'next-',",
                        "        components: {},",
                        "        getCellProps: noop,",
                        "        cellRef: noop,",
                        "        primaryKey: 'id',",
                        "        getRowProps: noop,",
                        "        rowRef: noop,",
                        "        dataSource: [],",
                        "        component: 'tbody',",
                        "        columns: []",
                        "    }",
                        "",
                        "    getRowRef = (i, row) => {",
                        "        this.props.rowRef(i, row);",
                        "    }",
                        "",
                        "    onRowClick = (record, index, e) => {",
                        "        this.props.onRowClick(record, index, e);",
                        "    }",
                        "",
                        "    onRowMouseEnter = (record, index, e) => {",
                        "        this.props.onRowMouseEnter(record, index, e);",
                        "    }",
                        "",
                        "    onRowMouseLeave = (record, index, e) => {",
                        "        this.props.onRowMouseLeave(record, index, e);",
                        "    }",
                        "",
                        "    render() {",
                        "        /*eslint-disable no-unused-vars */",
                        "        const { prefix, className, children, component: Tag, colGroup, loading, emptyContent, components, getCellProps,",
                        "            primaryKey, getRowProps, dataSource, cellRef, columns, rowRef, onRowClick, onRowMouseEnter, onRowMouseLeave, locale, pure, ...others } = this.props;",
                        "",
                        "        const { Row = RowComponent, Cell = CellComponent } = components;",
                        "        const empty = loading ? <span>&nbsp;</span> : emptyContent || locale.empty;",
                        "        let rows = (<tr>",
                        "            <td colSpan={columns.length}>",
                        "                <div className={`${prefix}table-empty`}>{empty}</div>",
                        "            </td>",
                        "        </tr>);",
                        "        if (Tag === 'div') {",
                        "            rows = (<table role=\"table\"><tbody>{rows}</tbody></table>);",
                        "        }",
                        "        if (dataSource.length) {",
                        "            rows = dataSource.map((record, index) => {",
                        "                const rowProps = getRowProps(record, index) || {};",
                        "                const rowClass = rowProps.className;",
                        "                const className = classnames({",
                        "                    first: index === 0,",
                        "                    last: index === dataSource.length - 1,",
                        "                    [rowClass]: rowClass",
                        "                });",
                        "                const expanded = record.__expanded ? 'expanded' : '';",
                        "                return (<Row key={`${record[primaryKey] || index}${expanded}`}",
                        "                    {...rowProps}",
                        "                    ref={this.getRowRef.bind(this, index)}",
                        "                    colGroup={colGroup}",
                        "                    columns={columns}",
                        "                    primaryKey={primaryKey}",
                        "                    record={record}",
                        "                    rowIndex={index}",
                        "                    prefix={prefix}",
                        "                    pure={pure}",
                        "                    cellRef={cellRef}",
                        "                    getCellProps={getCellProps}",
                        "                    className={className}",
                        "                    Cell={Cell}",
                        "                    onClick={this.onRowClick}",
                        "                    locale={locale}",
                        "                    onMouseEnter={this.onRowMouseEnter}",
                        "                    onMouseLeave={this.onRowMouseLeave}",
                        "                />);",
                        "            });",
                        "        }",
                        "        return (<Tag className={className} {...others}>",
                        "            {rows}",
                        "            {children}",
                        "        </Tag>);",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "cell.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import { obj } from '../../util';",
                        "",
                        "export default class Cell extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        pure: PropTypes.bool,",
                        "        primaryKey: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        record: PropTypes.any,",
                        "        value: PropTypes.any,",
                        "        colIndex: PropTypes.number,",
                        "        rowIndex: PropTypes.number,",
                        "        title: PropTypes.any,",
                        "        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                        "        context: PropTypes.any,",
                        "        cell: PropTypes.oneOfType([PropTypes.element, PropTypes.node, PropTypes.func]),",
                        "        align: PropTypes.oneOf(['left', 'center', 'right']),",
                        "        component: PropTypes.oneOf(['td', 'th', 'div']),",
                        "        children: PropTypes.any,",
                        "        style: PropTypes.object,",
                        "        innerStyle: PropTypes.object,",
                        "        filterMode: PropTypes.oneOf(['single', 'multiple']),",
                        "        filters: PropTypes.array,",
                        "        sortable: PropTypes.bool,",
                        "        lock: PropTypes.any,",
                        "        type: PropTypes.oneOf(['header', 'body']),",
                        "        resizable: PropTypes.bool,",
                        "        __normalized: PropTypes.bool",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        component: 'td',",
                        "        type: 'body',",
                        "        cell: (value) => value,",
                        "        prefix: 'next-'",
                        "    }",
                        "",
                        "    shouldComponentUpdate(nextProps) {",
                        "        if (nextProps.pure) {",
                        "            const isEqual = obj.shallowEqual(this.props, nextProps);",
                        "            return !isEqual;",
                        "        }",
                        "        return true;",
                        "    }",
                        "",
                        "    render() {",
                        "        /* eslint-disable no-unused-vars */",
                        "        const {prefix, className, cell, value, resizable, colIndex, rowIndex, record, context, align, style = {}, component: Tag,",
                        "            children, title, width, innerStyle, primaryKey, __normalized, filterMode, filters, sortable, lock, pure, ...others} = this.props;",
                        "        const cellProps = {value, index: rowIndex, record, context};",
                        "        let content = cell;",
                        "        if (React.isValidElement(content)) {",
                        "            content = React.cloneElement(content, cellProps);",
                        "        } else if (typeof content === 'function') {",
                        "            content = content(value, rowIndex, record, context);",
                        "        }",
                        "        if (align) {",
                        "            style.textAlign = align;",
                        "        }",
                        "        const cls = classnames({",
                        "            [`${prefix}table-cell`]: true,",
                        "            [className]: className",
                        "        });",
                        "",
                        "        return (<Tag {...others} className={cls} style={style} role=\"gridcell\">",
                        "            <div className={`${prefix}table-cell-wrapper`} style={innerStyle}>",
                        "                {content}",
                        "                {children}",
                        "            </div>",
                        "        </Tag>);",
                        "    }",
                        "}"
                    ]
                },
                "filter.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import Dropdown from '../../dropdown';",
                        "import Menu from '../../menu';",
                        "import Button from '../../button';",
                        "import Icon from '../../icon';",
                        "import { KEYCODE } from '../../util';",
                        "",
                        "// 共享状态的组件需要变成非受控组件",
                        "export default class Filter extends React.Component {",
                        "    static propTypes = {",
                        "        dataIndex: PropTypes.string,",
                        "        filters: PropTypes.array,",
                        "        filterMode: PropTypes.string,",
                        "        filterParams: PropTypes.object,",
                        "        locale: PropTypes.object,",
                        "        onFilter: PropTypes.func,",
                        "        prefix: PropTypes.string",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        onFilter: () => {}",
                        "    }",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "        const filterParams = props.filterParams || {};",
                        "        const filterConfig = filterParams[props.dataIndex] || {};",
                        "        this.state = {",
                        "            visible: filterConfig.visible || false,",
                        "            selectedKeys: filterConfig.selectedKeys || []",
                        "        };",
                        "        this._selectedKeys = [...this.state.selectedKeys];",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        if (nextProps.hasOwnProperty('filterParams') && typeof nextProps.filterParams !== 'undefined') {",
                        "            const dataIndex = nextProps.dataIndex || this.props.dataIndex;",
                        "            const filterParams = nextProps.filterParams || {};",
                        "            const filterConfig = filterParams[dataIndex] || {};",
                        "            const selectedKeys = filterConfig.selectedKeys || [];",
                        "            this.setState({",
                        "                selectedKeys",
                        "            });",
                        "            this._selectedKeys = [...selectedKeys];",
                        "        }",
                        "    }",
                        "",
                        "    filterKeydown = e => {",
                        "        e.preventDefault();",
                        "        e.stopPropagation();",
                        "",
                        "        if (e.keyCode === KEYCODE.ENTER) {",
                        "            this.setState({",
                        "                visible: !this.state.visible",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    onFilterVisible = (visible) => {",
                        "        this.setState({",
                        "            visible",
                        "        });",
                        "",
                        "        if (!visible) {",
                        "            const selectedKeys = [...this._selectedKeys];",
                        "",
                        "            this.setState({",
                        "                selectedKeys",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    onFilterSelect = (selectedKeys) => {",
                        "        this.setState({",
                        "            visible: true,",
                        "            selectedKeys",
                        "        });",
                        "    }",
                        "",
                        "    onFilterConfirm = () => {",
                        "        const selectedKeys = this.state.selectedKeys;",
                        "        const filterParams = {}, { dataIndex } = this.props;",
                        "",
                        "        filterParams[dataIndex] = {",
                        "            visible: false,",
                        "            selectedKeys: selectedKeys",
                        "        };",
                        "        this._selectedKeys = [...selectedKeys];",
                        "        this.setState({",
                        "            visible: false",
                        "        });",
                        "        // 兼容之前的格式",
                        "        this.props.onFilter(filterParams);",
                        "    }",
                        "",
                        "    onFilterClear = () => {",
                        "        const filterParams = {}, { dataIndex } = this.props;",
                        "",
                        "        filterParams[dataIndex] = {",
                        "            visible: false,",
                        "            selectedKeys: []",
                        "        };",
                        "        this._selectedKeys = [];",
                        "        this.setState({",
                        "            selectedKeys: [],",
                        "            visible: false",
                        "        });",
                        "        // 兼容之前的格式",
                        "        this.props.onFilter(filterParams);",
                        "    }",
                        "",
                        "    render() {",
                        "        const { filters, prefix, locale, filterMode } = this.props;",
                        "        const { visible, selectedKeys } = this.state;",
                        "",
                        "        function renderMenuItem(item) {",
                        "            return <Menu.Item key={item.value}>{item.label}</Menu.Item>;",
                        "        }",
                        "",
                        "        function renderSubMenu(parent, children) {",
                        "            return (",
                        "                <Menu.SubMenu label={parent.label} key={parent.value} selectable={false}>",
                        "                    {renderMenuContent(children)}",
                        "                </Menu.SubMenu>",
                        "            );",
                        "        }",
                        "",
                        "        function renderMenuContent(list) {",
                        "            return list.map(item => {",
                        "                if (item.children) {",
                        "                    return renderSubMenu(item, item.children);",
                        "                } else {",
                        "                    return renderMenuItem(item);",
                        "                }",
                        "            });",
                        "        }",
                        "",
                        "        const content = renderMenuContent(filters),",
                        "            footer = (",
                        "                <div className={`${prefix}table-filter-footer`}>",
                        "                    <Button type=\"primary\" onClick={this.onFilterConfirm}>{locale.ok}</Button>",
                        "                    <Button onClick={this.onFilterClear}>{locale.reset}</Button>",
                        "                </div>",
                        "            );",
                        "",
                        "        return (",
                        "            <Dropdown trigger={",
                        "                <span role=\"button\"",
                        "                    aria-label={locale.filter}",
                        "                    onKeyDown={this.filterKeydown}",
                        "                    tabIndex=\"0\"",
                        "                    className={`${prefix}table-filter`}>",
                        "                    <Icon type=\"filter\" size=\"small\" />",
                        "                </span>",
                        "            }",
                        "            triggerType=\"click\"",
                        "            visible={visible}",
                        "            autoFocus",
                        "            container={node => node.parentNode}",
                        "            onVisibleChange={this.onFilterVisible}>",
                        "                <Menu footer={footer}",
                        "                    selectedKeys={selectedKeys}",
                        "                    selectMode={filterMode}",
                        "                    onSelect={this.onFilterSelect}>",
                        "                    {content}",
                        "                </Menu>",
                        "            </Dropdown>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import FilterComponent from './filter';",
                        "import SortComponent from './sort';",
                        "import CellComponent from './cell';",
                        "import ResizeComponent from './resize';",
                        "",
                        "const noop = () => { };",
                        "export default class Header extends React.Component {",
                        "    static propTypes = {",
                        "        children: PropTypes.any,",
                        "        prefix: PropTypes.string,",
                        "        pure: PropTypes.bool,",
                        "        className: PropTypes.string,",
                        "        component: PropTypes.string,",
                        "        columns: PropTypes.array,",
                        "        colGroup: PropTypes.object,",
                        "        headerCellRef: PropTypes.func,",
                        "        locale: PropTypes.object,",
                        "        filterParams: PropTypes.object,",
                        "        onFilter: PropTypes.func,",
                        "        components: PropTypes.object,",
                        "        sort: PropTypes.object,",
                        "        onSort: PropTypes.func,",
                        "        onResizeChange: PropTypes.func",
                        "    }",
                        "    static defaultProps = {",
                        "        component: 'thead',",
                        "        columns: [],",
                        "        headerCellRef: noop,",
                        "        onFilter: noop,",
                        "        components: {},",
                        "        onSort: noop,",
                        "        onResizeChange: noop",
                        "    }",
                        "",
                        "    getCellRef = (i, j, cell) => {",
                        "        this.props.headerCellRef(i, j, cell);",
                        "    }",
                        "",
                        "    onSort = (dataIndex, order, sort) => {",
                        "        this.props.onSort(dataIndex, order, sort);",
                        "    }",
                        "",
                        "    render() {",
                        "        /*eslint-disable no-unused-vars */",
                        "        const { prefix, className, children, component: Tag, colGroup, columns, locale, filterParams,",
                        "            onFilter, components, affixRef, headerCellRef, onSort, sort, onResizeChange, pure, ...others",
                        "        } = this.props;",
                        "",
                        "        const { Cell = CellComponent, Filter = FilterComponent, Sort = SortComponent, Resize = ResizeComponent } = components;",
                        "        const rowSpan = columns.length;",
                        "",
                        "        const header = columns.map((cols, index) => {",
                        "            const col = cols.map((col, j) => {",
                        "                /* eslint-disable no-unused-vars, prefer-const */",
                        "                let { title, colSpan, sortable, resizable, dataIndex, filters, filterMode, width, align, className, __normalized, lock, ...others } = col;",
                        "",
                        "                className = classnames({",
                        "                    [`${prefix}table-header-node`]: true,",
                        "                    [`${prefix}table-header-resizable`]: resizable,",
                        "                    [className]: className",
                        "                });",
                        "                let attrs = {}, sortElement, filterElement, resizeElement;",
                        "                if (col.children && col.children.length) {",
                        "                    attrs.colSpan = colSpan;",
                        "                } else {",
                        "                    if (sortable) {",
                        "                        sortElement = (<Sort prefix={prefix}",
                        "                            dataIndex={dataIndex}",
                        "                            onSort={this.onSort}",
                        "                            sort={sort}",
                        "                            locale={locale}/>);",
                        "                    }",
                        "                    if (resizable) {",
                        "                        resizeElement = <Resize prefix={prefix} dataIndex={dataIndex} onChange={onResizeChange}/>;",
                        "                    }",
                        "",
                        "                    if (filters) {",
                        "                        filterElement = filters.length ?",
                        "                            (<Filter dataIndex={dataIndex}",
                        "                                filters={filters}",
                        "                                prefix={prefix}",
                        "                                locale={locale}",
                        "                                filterParams={filterParams}",
                        "                                filterMode={filterMode}",
                        "                                onFilter={onFilter} />) : null;",
                        "                    }",
                        "                    attrs.rowSpan = rowSpan - index;",
                        "                }",
                        "                return (<Cell {...others} {...attrs}",
                        "                    key={j}",
                        "                    prefix={prefix}",
                        "                    pure={pure}",
                        "                    cell={title}",
                        "                    component=\"th\"",
                        "                    align={align}",
                        "                    className={className}",
                        "                    ref={this.getCellRef.bind(this, index, j)}",
                        "                    type=\"header\">",
                        "                    {sortElement}{filterElement}{resizeElement}",
                        "                </Cell>);",
                        "            });",
                        "            return <tr key={index}>{col}</tr>;",
                        "        });",
                        "",
                        "        return (<Tag className={className} {...others}>",
                        "            {header}",
                        "            {children}",
                        "        </Tag>);",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "resize.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import T from 'prop-types';",
                        "import { events, dom } from '../../util';",
                        "",
                        "class Resize extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: T.string,",
                        "        onChange: T.func,",
                        "        dataIndex: T.string",
                        "    }",
                        "    static defaultProps = {",
                        "        onChange: () => {}",
                        "    }",
                        "    componentWillUnmount() {",
                        "        this.destory();",
                        "    }",
                        "    onMouseDown = (e) => {",
                        "        this.lastPageX = e.pageX;",
                        "        events.on(document, 'mousemove', this.onMouseMove);",
                        "        events.on(document, 'mouseup', this.onMouseUp);",
                        "        this.unSelect();",
                        "    }",
                        "    onMouseMove = (e) => {",
                        "        const pageX = e.pageX;",
                        "        const changedPageX = pageX - this.lastPageX;",
                        "        this.props.onChange(this.props.dataIndex, changedPageX);",
                        "        this.lastPageX = pageX;",
                        "    }",
                        "    onMouseUp = () => {",
                        "        this.destory();",
                        "    }",
                        "    destory() {",
                        "        events.off(document, 'mousemove', this.onMouseMove);",
                        "        events.off(document, 'mouseup', this.onMouseMove);",
                        "        this.select();",
                        "    }",
                        "    unSelect() {",
                        "        dom.setStyle(document.body, {",
                        "            userSelect: 'none',",
                        "            cursor: 'ew-resize'",
                        "        });",
                        "        document.body.setAttribute('unselectable', 'on');",
                        "    }",
                        "    select() {",
                        "        dom.setStyle(document.body, {",
                        "            userSelect: '',",
                        "            cursor: ''",
                        "        });",
                        "        document.body.removeAttribute('unselectable');",
                        "    }",
                        "    render() {",
                        "        const { prefix } = this.props;",
                        "        return <a className={`${prefix}table-resize-handler`} onMouseDown={this.onMouseDown}></a>;",
                        "    }",
                        "}",
                        "",
                        "export default Resize;"
                    ]
                },
                "row.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import { obj, dom } from '../../util';",
                        "import { fetchDataByPath } from '../util';",
                        "",
                        "const noop = () => { };",
                        "",
                        "export default class Row extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        pure: PropTypes.bool,",
                        "        primaryKey: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        columns: PropTypes.array,",
                        "        record: PropTypes.any,",
                        "        Cell: PropTypes.func,",
                        "        rowIndex: PropTypes.number,",
                        "        getCellProps: PropTypes.func,",
                        "        onClick: PropTypes.func,",
                        "        onMouseEnter: PropTypes.func,",
                        "        onMouseLeave: PropTypes.func,",
                        "        children: PropTypes.any,",
                        "        cellRef: PropTypes.func,",
                        "        colGroup: PropTypes.object,",
                        "        locale: PropTypes.object,",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        primaryKey: 'id',",
                        "        columns: [],",
                        "        record: {},",
                        "        getCellProps: noop,",
                        "        onClick: noop,",
                        "        onMouseEnter: noop,",
                        "        onMouseLeave: noop,",
                        "        cellRef: noop,",
                        "        colGroup: {}",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        notRenderCellIndex: PropTypes.array,",
                        "        lockType: PropTypes.oneOf(['left', 'right'])",
                        "    }",
                        "",
                        "    shouldComponentUpdate(nextProps) {",
                        "        if (nextProps.pure) {",
                        "            const isEqual = obj.shallowEqual(this.props, nextProps);",
                        "            return !isEqual;",
                        "        }",
                        "",
                        "        return true;",
                        "    }",
                        "",
                        "    onClick = (e) => {",
                        "        const { record, rowIndex } = this.props;",
                        "        this.props.onClick(record, rowIndex, e);",
                        "    }",
                        "",
                        "    onMouseEnter = (e) => {",
                        "        const { record, rowIndex } = this.props;",
                        "        this.onRowHover(record, rowIndex, true, e);",
                        "    }",
                        "",
                        "    onMouseLeave = (e) => {",
                        "        const { record, rowIndex } = this.props;",
                        "        this.onRowHover(record, rowIndex, false, e);",
                        "    }",
                        "",
                        "    onRowHover(record, index, isEnter, e) {",
                        "        const { onMouseEnter, onMouseLeave } = this.props,",
                        "            currentRow = findDOMNode(this);",
                        "        if (isEnter) {",
                        "            onMouseEnter(record, index, e);",
                        "            currentRow && dom.addClass(currentRow, 'hovered');",
                        "        } else {",
                        "            onMouseLeave(record, index, e);",
                        "            currentRow && dom.removeClass(currentRow, 'hovered');",
                        "        }",
                        "    }",
                        "",
                        "    renderCells(record) {",
                        "        const { Cell, columns, getCellProps, cellRef, prefix, rowIndex, primaryKey, pure, locale } = this.props;",
                        "        const { lockType } = this.context;",
                        "        return columns.map((child, colIndex) => {",
                        "            const { dataIndex, align, width, ...others } = child;",
                        "",
                        "            const value = fetchDataByPath(record, dataIndex);",
                        "            const attrs = getCellProps(rowIndex, colIndex, dataIndex, record) || {};",
                        "",
                        "            if (this.context.notRenderCellIndex) {",
                        "                const matchCellIndex = this.context.notRenderCellIndex.map(cellIndex => cellIndex.toString()).indexOf([rowIndex, colIndex].toString());",
                        "                if (matchCellIndex > -1) {",
                        "                    this.context.notRenderCellIndex.splice(matchCellIndex, 1);",
                        "                    return null;",
                        "                }",
                        "            }",
                        "            if (attrs.colSpan && attrs.colSpan > 1 || attrs.rowSpan && attrs.rowSpan > 1) {",
                        "                this._getNotRenderCellIndex(colIndex, rowIndex, attrs.colSpan || 1, attrs.rowSpan || 1);",
                        "            }",
                        "",
                        "            const className = classnames({",
                        "                first: lockType !== 'right' && colIndex === 0,",
                        "                last: lockType !== 'left' && (colIndex === columns.length - 1 || colIndex + attrs.colSpan === columns.length), // 考虑合并单元格的情况",
                        "                [child.className]: child.className",
                        "            });",
                        "",
                        "            return (<Cell key={colIndex}",
                        "                {...others}",
                        "                {...attrs}",
                        "                ref={(cell) => cellRef(rowIndex, colIndex, cell)}",
                        "                prefix={prefix}",
                        "                pure={pure}",
                        "                primaryKey={primaryKey}",
                        "                record={record}",
                        "                className={className}",
                        "                value={value}",
                        "                colIndex={colIndex}",
                        "                rowIndex={rowIndex}",
                        "                align={align}",
                        "                locale={locale}",
                        "                width={width}",
                        "            />);",
                        "        });",
                        "    }",
                        "",
                        "    _getNotRenderCellIndex(colIndex, rowIndex, colSpan, rowSpan) {",
                        "        const maxColIndex = colSpan;",
                        "        const maxRowIndex = rowSpan;",
                        "        const notRenderCellIndex = [];",
                        "        for (let i = 0; i < maxColIndex; i++) {",
                        "            for (let j = 0; j < maxRowIndex; j++) {",
                        "                notRenderCellIndex.push([rowIndex + j, colIndex + i]);",
                        "            }",
                        "        }",
                        "        [].push.apply(this.context.notRenderCellIndex, notRenderCellIndex);",
                        "    }",
                        "",
                        "    render() {",
                        "        /* eslint-disable no-unused-vars*/",
                        "        const { prefix, className, onClick, onMouseEnter, onMouseLeave, columns, Cell, getCellProps, rowIndex, record, children, primaryKey, cellRef, colGroup, pure, ...others } = this.props;",
                        "        const cls = classnames({",
                        "            [`${prefix}table-row`]: true,",
                        "            [className]: className",
                        "        });",
                        "        return (<tr className={cls} role=\"row\" {...others}",
                        "            onClick={this.onClick} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>",
                        "            {this.renderCells(record)}",
                        "            {children}",
                        "        </tr>);",
                        "    }",
                        "}"
                    ]
                },
                "sort.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import Icon from '../../icon';",
                        "import { KEYCODE } from '../../util';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class Sort extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        sort: PropTypes.object,",
                        "        onSort: PropTypes.func,",
                        "        dataIndex: PropTypes.string,",
                        "        locale: PropTypes.object",
                        "    }",
                        "    static defaultProps = {",
                        "        sort: {}",
                        "    }",
                        "    // 渲染排序",
                        "    renderSort() {",
                        "        const {prefix, sort, dataIndex, locale} = this.props,",
                        "            sortStatus = sort[dataIndex],",
                        "            map = {",
                        "                desc: 'descending',",
                        "                asc: 'ascending'",
                        "            };",
                        "",
                        "        const icons = ['asc', 'desc'].map(sortOrder => {",
                        "            return (",
                        "                <a href=\"javascript:;\"",
                        "                    key={sortOrder}",
                        "                    className={sortStatus === sortOrder ? 'current' : ''}>",
                        "                    <Icon type={map[sortOrder]} size=\"small\"/>",
                        "                </a>",
                        "            );",
                        "        });",
                        "",
                        "        return (",
                        "            <span role=\"button\"",
                        "                tabIndex=\"0\"",
                        "                aria-label={locale[sortStatus]}",
                        "                className={`${prefix}table-sort`}",
                        "                onClick={this.handleClick.bind(this)}",
                        "                onKeyDown={this.keydownHandler}>",
                        "                {icons}",
                        "            </span>",
                        "        );",
                        "    }",
                        "",
                        "    handleClick = () => {",
                        "        const {sort, dataIndex} = this.props;",
                        "        this.onSort(dataIndex, sort[dataIndex] === 'desc' ? 'asc' : 'desc');",
                        "    }",
                        "",
                        "    keydownHandler = e => {",
                        "        e.preventDefault();",
                        "        e.stopPropagation();",
                        "",
                        "        if (e.keyCode === KEYCODE.ENTER) {",
                        "            this.handleClick();",
                        "        }",
                        "    }",
                        "",
                        "    onSort = (dataIndex, order) => {",
                        "        const sort = {};",
                        "        sort[dataIndex] = order;",
                        "",
                        "        this.props.onSort(dataIndex, order, sort);",
                        "    }",
                        "",
                        "    render() {",
                        "        return this.renderSort();",
                        "    }",
                        "",
                        "}",
                        ""
                    ]
                },
                "wrapper.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class Wrapper extends Component {",
                        "    render() {",
                        "        const {colGroup, children, component: Tag} = this.props;",
                        "        return (<Tag role=\"table\">",
                        "            {colGroup}",
                        "            {children}",
                        "        </Tag>);",
                        "    }",
                        "}",
                        "",
                        "Wrapper.defaultProps = {",
                        "    component: 'table'",
                        "};",
                        "",
                        "Wrapper.propTypes = {",
                        "    children: PropTypes.any,",
                        "    prefix: PropTypes.string,",
                        "    colGroup: PropTypes.any,",
                        "    component: PropTypes.string",
                        "};",
                        ""
                    ]
                }
            },
            "expanded": {
                "row.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import { log } from '../../util';",
                        "import Row from '../lock/row';",
                        "",
                        "export default class ExpandedRow extends React.Component {",
                        "    static propTypes = {",
                        "        ...Row.propTypes",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        ...Row.defaultProps,",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        openRowKeys: PropTypes.array,",
                        "        expandedRowRender: PropTypes.func,",
                        "        expandedRowIndent: PropTypes.array,",
                        "        lockType: PropTypes.oneOf(['left', 'right'])",
                        "    }",
                        "",
                        "    renderExpandedRow(record, index, colSpan) {",
                        "        const { expandedRowRender, expandedRowIndent, openRowKeys, lockType } = this.context;",
                        "        const { columns, cellRef } = this.props;",
                        "        if (expandedRowRender) {",
                        "            const { primaryKey, prefix } = this.props,",
                        "                leftIndent = expandedRowIndent[0],",
                        "                rightIndent = expandedRowIndent[1],",
                        "                totalIndent = leftIndent + rightIndent,",
                        "                renderCols = (number) => {",
                        "                    const ret = [];",
                        "                    for (let i = 0; i < number; i++) {",
                        "                        ret.push(<td key={i} ref={(cell) => cellRef(index, i, cell)}>&nbsp;</td>);",
                        "                    }",
                        "                    return ret;",
                        "                };",
                        "            let content;",
                        "",
                        "            if (totalIndent > colSpan && !lockType) {",
                        "                log.warning('It\\'s not allowed expandedRowIndent is more than the number of columns.');",
                        "            }",
                        "            if (leftIndent < columns.length && lockType === 'left') {",
                        "                log.warning('expandedRowIndent left is less than the number of left lock columns.');",
                        "            }",
                        "            if (rightIndent < columns.length && lockType === 'right') {",
                        "                log.warning('expandedRowIndent right is less than the number of right lock columns.');",
                        "            }",
                        "            if (lockType) {",
                        "                return (",
                        "                    openRowKeys.indexOf(record[primaryKey]) > -1 ? <tr className={`${prefix}table-expanded-row`}  key={`expanded-${index}`}>",
                        "                        <td colSpan={colSpan} ref={(cell) => cellRef(index, 0, cell)}>&nbsp;</td>",
                        "                    </tr> : null",
                        "                );",
                        "            }",
                        "            content = expandedRowRender(record, index);",
                        "            if (!React.isValidElement(content)) {",
                        "                content = (",
                        "                    <div className={`${prefix}table-cell-wrapper`}>",
                        "                        {content}",
                        "                    </div>",
                        "                );",
                        "            }",
                        "            return (",
                        "                openRowKeys.indexOf(record[primaryKey]) > -1 ? <tr className={`${prefix}table-expanded-row`} key={`expanded-${record[primaryKey] || index}`}>",
                        "                    {renderCols(leftIndent)}",
                        "                    <td colSpan={colSpan - totalIndent}>",
                        "                        {content}",
                        "                    </td>",
                        "                    {renderCols(rightIndent)}",
                        "                </tr> : null",
                        "            );",
                        "        } else {",
                        "            return null;",
                        "        }",
                        "    }",
                        "",
                        "    render() {",
                        "        /* eslint-disable no-unused-vars*/",
                        "        const { record, rowIndex, columns } = this.props;",
                        "        if (record.__expanded) {",
                        "            return this.renderExpandedRow(record, rowIndex, columns.length);",
                        "        }",
                        "        return (<Row {...this.props} />);",
                        "    }",
                        "}",
                        "",
                        ""
                    ]
                }
            },
            "fixed": {
                "body.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import BodyComponent from '../base/body';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class FixedBody extends React.Component {",
                        "    static propTypes = {",
                        "        children: PropTypes.any,",
                        "        prefix: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        colGroup: PropTypes.any,",
                        "        onScroll: PropTypes.func",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        onScroll: () => {}",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        fixedHeader: PropTypes.bool,",
                        "        maxBodyHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                        "        onBodyScroll: PropTypes.func,",
                        "        getNode: PropTypes.func,",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        const { getNode } = this.context;",
                        "        getNode && getNode('body', findDOMNode(this));",
                        "    }",
                        "",
                        "    onBodyScroll = () => {",
                        "        const { onBodyScroll } = this.context;",
                        "        onBodyScroll && onBodyScroll();",
                        "        this.props.onScroll();",
                        "    }",
                        "",
                        "    render() {",
                        "        const { className, colGroup, ...others } = this.props;",
                        "        const { maxBodyHeight, fixedHeader } = this.context;",
                        "        const style = {};",
                        "        if (fixedHeader) {",
                        "            style.maxHeight = maxBodyHeight;",
                        "        }",
                        "        return (<div style={style} className={className} onScroll={this.onBodyScroll}>",
                        "            <table>",
                        "                {colGroup}",
                        "                <BodyComponent {...others} colGroup={colGroup}/>",
                        "            </table>",
                        "        </div>);",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import HeaderComponent from '../base/header';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class FixedHeader extends React.Component {",
                        "    static propTypes = {",
                        "        children: PropTypes.any,",
                        "        prefix: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        colGroup: PropTypes.any",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        getNode: PropTypes.func,",
                        "        lockType: PropTypes.oneOf(['left', 'right'])",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.context.getNode('header', findDOMNode(this));",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, className, colGroup, ...others } = this.props;",
                        "        return (<div className={className}>",
                        "            <div className={`${prefix}table-header-inner`}>",
                        "                <table>",
                        "                    {colGroup}",
                        "                    <HeaderComponent {...others} prefix={prefix}/>",
                        "                </table>",
                        "            </div>",
                        "        </div>);",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "wrapper.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class FixedWrapper extends React.Component {",
                        "    static propTypes = {",
                        "        children: PropTypes.any,",
                        "        prefix: PropTypes.string,",
                        "        colGroup: PropTypes.any,",
                        "        wrapperContent: PropTypes.any",
                        "    }",
                        "    render() {",
                        "        const { children, wrapperContent, prefix } = this.props;",
                        "        return (<div className={`${prefix}table-inner`}>",
                        "            {children}",
                        "            {wrapperContent}",
                        "        </div>);",
                        "    }",
                        "}",
                        ""
                    ]
                }
            },
            "list": {
                "body.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import BodyComponent from '../base/body';",
                        "",
                        "export default function ListBody(props) {",
                        "    return <BodyComponent component=\"div\" {...props}/>;",
                        "}"
                    ]
                },
                "row.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import { log } from '../../util';",
                        "import Row from '../base/row';",
                        "",
                        "export default class GroupListRow extends Row {",
                        "",
                        "    static contextTypes = {",
                        "        listHeader: PropTypes.any,",
                        "        listFooter: PropTypes.any,",
                        "        rowSelection: PropTypes.object,",
                        "        notRenderCellIndex: PropTypes.array,",
                        "        lockType: PropTypes.oneOf(['left', 'right'])",
                        "    }",
                        "",
                        "    render() {",
                        "        /* eslint-disable no-unused-vars*/",
                        "        const { prefix, className, onClick, onMouseEnter, onMouseLeave, columns, Cell, rowIndex, record, children, primaryKey, colGroup, cellRef, getCellProps, ...others } = this.props;",
                        "        const cls = classnames({",
                        "            [`${prefix}table-row`]: true,",
                        "            [className]: className",
                        "        });",
                        "        return (<table className={cls} role=\"row\" {...others}",
                        "            onClick={this.onClick} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>",
                        "            {colGroup}",
                        "            <tbody>",
                        "                {this.renderContent('header')}",
                        "                {this.renderChildren()}",
                        "                {this.renderContent('footer')}",
                        "            </tbody>",
                        "        </table>);",
                        "    }",
                        "",
                        "    isChildrenSelection() {",
                        "        return this.context.listHeader && this.context.listHeader.hasChildrenSelection;",
                        "    }",
                        "",
                        "    isSelection() {",
                        "        return this.context.listHeader && this.context.listHeader.hasSelection;",
                        "    }",
                        "",
                        "    renderChildren() {",
                        "        const { record, primaryKey } = this.props;",
                        "        const { children } = record;",
                        "        if (children) {",
                        "            return children.map((child, index) => {",
                        "                const cells = this.renderCells(child);",
                        "                if (this.isChildrenSelection()) {",
                        "                    if (!child[primaryKey]) {",
                        "                        log.warning('record.children should contains primaryKey when childrenSelection is true.');",
                        "                    }",
                        "                    return <tr key={child[primaryKey]}>{cells}</tr>;",
                        "                }",
                        "                if (this.context.rowSelection) {",
                        "                    cells.shift();",
                        "                    cells[0] = React.cloneElement(cells[0], {",
                        "                        colSpan: 2,",
                        "                        ...cells[0].props",
                        "                    });",
                        "                }",
                        "                return <tr key={index}>{cells}</tr>;",
                        "            });",
                        "        }",
                        "        return null;",
                        "    }",
                        "    renderContent(type) {",
                        "        const { columns, prefix, record, rowIndex } = this.props;",
                        "        const cameType = type.charAt(0).toUpperCase() + type.substr(1);",
                        "        const list = this.context[`list${cameType}`];",
                        "        let listNode;",
                        "        if (list) {",
                        "            if (React.isValidElement(list.cell)) {",
                        "                listNode = React.cloneElement(list.cell, { record, index: rowIndex });",
                        "            } else if (typeof list.cell === 'function') {",
                        "                listNode = list.cell(record, rowIndex);",
                        "            }",
                        "            if (listNode) {",
                        "                let cells = this.renderCells(record);",
                        "                if (type === 'header' && this.context.rowSelection && this.isSelection()) {",
                        "                    cells = cells.slice(0, 1);",
                        "                    cells.push(",
                        "                        <td colSpan={columns.length - 1} key=\"listNode\">",
                        "                            <div className={`${prefix}table-cell-wrapper`}>",
                        "                                {listNode}",
                        "                            </div>",
                        "                        </td>",
                        "                    );",
                        "                    listNode = (",
                        "                        <tr className={`${prefix}table-group-${type}`}>",
                        "                            {cells}",
                        "                        </tr>",
                        "                    );",
                        "                } else {",
                        "                    listNode = (<tr className={`${prefix}table-group-${type}`}>",
                        "                        <td colSpan={columns.length}>",
                        "                            <div className={`${prefix}table-cell-wrapper`}>",
                        "                                {listNode}",
                        "                            </div>",
                        "                        </td>",
                        "                    </tr>);",
                        "                }",
                        "            }",
                        "        }",
                        "        return listNode;",
                        "    }",
                        "}"
                    ]
                }
            },
            "lock": {
                "body.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import FixedBody from '../fixed/body';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class LockBody extends React.Component {",
                        "    static propTypes = {",
                        "        ...FixedBody.propTypes",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        ...FixedBody.contextTypes,",
                        "        getLockNode: PropTypes.func,",
                        "        onLockBodyScroll: PropTypes.func,",
                        "        onLockBodyWheel: PropTypes.func,",
                        "        lockType: PropTypes.oneOf(['left', 'right'])",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.context.getLockNode('body', findDOMNode(this), this.context.lockType);",
                        "    }",
                        "",
                        "    onBodyScroll = () => {",
                        "        this.context.onLockBodyScroll();",
                        "    }",
                        "",
                        "    onBodyWheel = (e) => {",
                        "        this.context.onLockBodyWheel(e);",
                        "    }",
                        "",
                        "    render() {",
                        "        return <FixedBody {...this.props} onScroll={this.onBodyScroll} onWheel={this.onBodyWheel} />;",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import FixedHeader from '../fixed/header';",
                        "",
                        "export default class LockHeader extends FixedHeader {",
                        "    static propTypes = {",
                        "        ...FixedHeader.propTypes",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        ...FixedHeader.contextTypes,",
                        "        getLockNode: PropTypes.func,",
                        "        lockType: PropTypes.oneOf(['left', 'right'])",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        const {getNode, getLockNode} = this.context;",
                        "        getNode && getNode('header', findDOMNode(this), this.context.lockType);",
                        "        getLockNode && getLockNode('header', findDOMNode(this), this.context.lockType);",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "row.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import Row from '../base/row';",
                        "",
                        "export default class LockRow extends React.Component {",
                        "    static propTypes = {",
                        "        ...Row.propTypes",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        onRowMouseEnter: PropTypes.func,",
                        "        onRowMouseLeave: PropTypes.func",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        ...Row.defaultProps",
                        "    }",
                        "",
                        "    onMouseEnter = (record, index, e) => {",
                        "        const { onRowMouseEnter } = this.context;",
                        "        const { onMouseEnter } = this.props;",
                        "        onRowMouseEnter && onRowMouseEnter(record, index, e);",
                        "        onMouseEnter(record, index, e);",
                        "    }",
                        "",
                        "    onMouseLeave = (record, index, e) => {",
                        "        const { onRowMouseLeave } = this.context;",
                        "        const { onMouseLeave } = this.props;",
                        "        onRowMouseLeave && onRowMouseLeave(record, index, e);",
                        "        onMouseLeave(record, index, e);",
                        "    }",
                        "",
                        "    render() {",
                        "        /* eslint-disable no-unused-vars*/",
                        "        return (<Row {...this.props} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave} />);",
                        "    }",
                        "}",
                        "",
                        ""
                    ]
                }
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin table-border($border-width) {",
                        "    table {",
                        "        tr td:first-child,",
                        "        tr th:first-child {",
                        "            border-left-width: $border-width;",
                        "        }",
                        "    }",
                        "    #{$table-prefix}-header {",
                        "        th {",
                        "            border-top-width: $border-width;",
                        "        }",
                        "        tr th:last-child {",
                        "            border-right-width: $border-width;",
                        "        }",
                        "    }",
                        "    #{$table-prefix}-body {",
                        "        td {",
                        "            border-top-width: $border-width;",
                        "        }",
                        "        tr:last-child td {",
                        "            border-bottom-width: $border-width;",
                        "        }",
                        "        tr td:last-child {",
                        "            border-right-width: $border-width;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module table: 表格",
                        "/// @tag Table",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $table-",
                        "/// @classPrefix {prefix}-table",
                        "/// @order {\"size/bounding\":10,\"size/head\":11,\"size/body\":12,\"size/body empty\":13,\"size/cell\":14,\"size/group list\":15,\"statement/normal\":10,\"statement/normal/bounding\":100,\"statement/normal/head\":101,\"statement/normal/group header\":102,\"statement/normal/body\":103,\"statement/normal/body empty\":104,\"statement/normal/group footer\":105,\"statement/hover\":11,\"statement/hover/body\":110,\"statement/selected\":12,\"statement/selected/body\":120,\"statement/active\":13,\"statement/active/head\":130,\"statement/disabled\":14,\"statement/disabled/body\":140}",
                        "////",
                        "",
                        "// table variables",
                        "// --------------------------------------------------",
                        "",
                        "$table-prefix: '.#{$css-prefix}table' !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/bounding",
                        "$table-normal-border-width: $line-1 !default;",
                        "/// text",
                        "/// @namespace size/head",
                        "$table-th-font-size: $font-size-body-1 !default;",
                        "/// text weight",
                        "/// @namespace size/head",
                        "$table-th-font-weight: $font-weight-2 !default;",
                        "/// sort icon",
                        "/// @namespace size/head",
                        "$table-sort-icon-size: $icon-xs !default;",
                        "/// filter icon",
                        "/// @namespace size/head",
                        "$table-filter-icon-size: $icon-xs !default;",
                        "/// text",
                        "/// @namespace size/body",
                        "$table-body-font-size: $font-size-body-1 !default;",
                        "/// padding (t, b)",
                        "/// @namespace size/body empty",
                        "$table-empty-padding: $s-8 !default;",
                        "/// expanded icon",
                        "/// @namespace size/body",
                        "$table-expanded-icon-size: $icon-xs !default;",
                        "/// tree icon",
                        "/// @namespace size/body",
                        "$table-tree-expanded-icon-size: $icon-xs !default;",
                        "/// padding (t, b)",
                        "/// @namespace size/cell",
                        "$table-cell-padding-top: $s-3 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/cell",
                        "$table-cell-padding-left: $s-4 !default;",
                        "/// margin (t, b)",
                        "/// @namespace size/group list",
                        "$table-group-split: $s-2 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$table-normal-border-color: $color-line1-2 !default;",
                        "/// border style",
                        "/// @namespace statement/normal/bounding",
                        "$table-normal-border-style: $line-solid !default;",
                        "/// background",
                        "/// @namespace statement/normal/head",
                        "$table-th-bg: $color-fill1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/head",
                        "$table-th-color: $color-text1-4 !default;",
                        "/// icon",
                        "/// @namespace statement/normal/head",
                        "$table-sort-color: $color-text1-4 !default;",
                        "/// background",
                        "/// @namespace statement/normal/group header",
                        "$table-group-th-bg: $color-fill1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/group header",
                        "$table-group-th-color: $color-text1-4 !default;",
                        "/// background",
                        "/// @namespace statement/normal/body",
                        "$table-row-bg: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/body",
                        "$table-row-color: $color-text1-4 !default;",
                        "/// zebra deep color",
                        "/// @namespace statement/normal/body",
                        "$table-td-gray: $color-fill1-1 !default;",
                        "/// zebra thin color",
                        "/// @namespace statement/normal/body",
                        "$table-td-normal: $color-white !default;",
                        "/// text",
                        "/// @namespace statement/normal/body empty",
                        "$table-empty-color: $color-line1-4 !default;",
                        "/// background",
                        "/// @namespace statement/normal/group footer",
                        "$table-group-footer-bg: $color-fill1-3 !default;",
                        "/// text",
                        "/// @namespace statement/normal/group footer",
                        "$table-group-footer-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/body",
                        "$table-row-hover-bg: $color-fill1-2 !default;",
                        "/// text",
                        "/// @namespace statement/hover/body",
                        "$table-row-hover-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/body",
                        "$table-row-selected-bg: $color-fill1-2 !default;",
                        "/// text",
                        "/// @namespace statement/selected/body",
                        "$table-row-selected-color: $color-text1-4 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/active/head",
                        "$table-sort-color-current: $color-brand1-6 !default;",
                        "",
                        "/// expanded icon",
                        "/// @namespace statement/disabled/body",
                        "$table-expanded-ctrl-disabled-color: $color-text1-2 !default;"
                    ]
                }
            },
            "selection": {
                "row.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import Row from '../expanded/row';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class SelectionRow extends React.Component {",
                        "    static propTypes = {",
                        "        ...Row.propTypes",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        ...Row.defaultProps",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        selectedRowKeys: PropTypes.array,",
                        "    }",
                        "",
                        "    render() {",
                        "        /* eslint-disable no-unused-vars*/",
                        "        const { className, record, primaryKey } = this.props;",
                        "        const { selectedRowKeys } = this.context;",
                        "        const cls = classnames({",
                        "            selected: selectedRowKeys.indexOf(record[primaryKey]) > -1,",
                        "            [className]: className",
                        "        });",
                        "        return (<Row {...this.props} className={cls} />);",
                        "    }",
                        "}",
                        "",
                        ""
                    ]
                }
            },
            "sticky": {
                "header.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import Affix from '../../affix';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function*/",
                        "export default class StickHeader extends React.Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "    }",
                        "    static contextTypes = {",
                        "        Header: PropTypes.any,",
                        "        offsetTop: PropTypes.number,",
                        "        affixProps: PropTypes.object",
                        "    }",
                        "",
                        "    getAffixRef = (ref) => {",
                        "        this.props.affixRef && this.props.affixRef(ref);",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix } = this.props;",
                        "        const { Header, offsetTop, affixProps } = this.context;",
                        "",
                        "        const newAffixProps = affixProps || {};",
                        "        const { className, ...others } = newAffixProps;",
                        "        const cls = classnames({",
                        "            [`${prefix}table-affix`]: true,",
                        "            className",
                        "        });",
                        "",
                        "        return (<Affix ref={this.getAffixRef} {...others} className={cls} offsetTop={offsetTop}>",
                        "            <Header {...this.props}/>",
                        "        </Affix>);",
                        "    }",
                        "}"
                    ]
                }
            },
            "tree": {
                "cell.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import Icon from '../../icon';",
                        "import { KEYCODE } from '../../util';",
                        "import CellComponent from '../base/cell';",
                        "",
                        "export default class TreeCell extends React.Component {",
                        "    static propTypes = {",
                        "        indent: PropTypes.number,",
                        "        locale: PropTypes.object,",
                        "        ...CellComponent.propTypes",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        ...CellComponent.defaultProps,",
                        "        component: 'td',",
                        "        indent: 20",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        openTreeRowKeys: PropTypes.array,",
                        "        indent: PropTypes.number,",
                        "        onTreeNodeClick: PropTypes.func,",
                        "        isTree: PropTypes.bool,",
                        "        rowSelection: PropTypes.object,",
                        "    }",
                        "",
                        "    onTreeNodeClick = (record, e) => {",
                        "        e.stopPropagation();",
                        "        this.context.onTreeNodeClick(record);",
                        "    }",
                        "",
                        "    expandedKeydown = (record, e) => {",
                        "        e.preventDefault();",
                        "        e.stopPropagation();",
                        "",
                        "        if (e.keyCode === KEYCODE.ENTER) {",
                        "            this.onTreeNodeClick(record, e);",
                        "        }",
                        "    }",
                        "",
                        "    render() {",
                        "        const { colIndex, record, prefix, primaryKey, locale } = this.props;",
                        "        const { openTreeRowKeys: openRowKeys, indent, isTree, rowSelection } = this.context;",
                        "        const treeArrowNodeIndex = rowSelection ? 1 : 0;",
                        "        let firstCellStyle, treeArrowNode;",
                        "        if (colIndex === treeArrowNodeIndex) {",
                        "            let treeArrowType;",
                        "            if (isTree) {",
                        "                firstCellStyle = {",
                        "                    paddingLeft: indent * (record.__level + 1)",
                        "                };",
                        "                treeArrowNode = <Icon size=\"xs\" className={`${prefix}table-tree-placeholder`} />;",
                        "                if (record.children && record.children.length) {",
                        "                    const hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1;",
                        "",
                        "                    treeArrowType = hasExpanded ? 'arrow-down' : 'arrow-right';",
                        "",
                        "                    treeArrowNode =",
                        "                        (<Icon",
                        "                            className={`${prefix}table-tree-arrow`}",
                        "                            type={treeArrowType}",
                        "                            size=\"xs\"",
                        "                            onClick={e => this.onTreeNodeClick(record, e)}",
                        "                            onKeyDown={e => this.expandedKeydown(record, e)}",
                        "                            role=\"button\"",
                        "                            tabIndex=\"0\"",
                        "                            aria-expanded={hasExpanded}",
                        "                            aria-label={hasExpanded ? locale.expanded : locale.folded}/>);",
                        "                }",
                        "            }",
                        "        }",
                        "        return (<CellComponent {...this.props} innerStyle={firstCellStyle}>",
                        "            {treeArrowNode}",
                        "        </CellComponent>);",
                        "    }",
                        "}"
                    ]
                },
                "row.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "import Row from '../selection/row';",
                        "",
                        "export default class TreeRow extends React.Component {",
                        "    static propTypes = {",
                        "        ...Row.propTypes",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        ...Row.defaultProps",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        treeStatus: PropTypes.array,",
                        "        openRowKeys: PropTypes.array",
                        "    }",
                        "",
                        "    render() {",
                        "        /* eslint-disable no-unused-vars*/",
                        "        const { className, record, primaryKey, prefix, ...others } = this.props;",
                        "        const { treeStatus, openRowKeys } = this.context;",
                        "        const cls = classnames({",
                        "            hidden: !(treeStatus.indexOf(record[primaryKey]) > -1) && record.__level !== 0,",
                        "            [`${prefix}table-row-level-${record.__level}`]: true,",
                        "            opened: openRowKeys.indexOf(record[primaryKey]) > -1,",
                        "        });",
                        "        return (<Row {...others} record={record} className={cls} primaryKey={primaryKey} prefix={prefix}/>);",
                        "    }",
                        "}",
                        "",
                        ""
                    ]
                }
            },
            "virtual": {
                "body.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import { findDOMNode }  from  'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import BodyComponent from '../base/body';",
                        "",
                        "/* eslint-disable react/prefer-stateless-function */",
                        "export default class VirtualBody extends React.Component {",
                        "    static propTypes = {",
                        "        children: PropTypes.any,",
                        "        prefix: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        colGroup: PropTypes.any",
                        "    }",
                        "",
                        "    static contextTypes = {",
                        "        maxBodyHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),",
                        "        onBodyScroll: PropTypes.func,",
                        "        onVirtualScroll: PropTypes.func,",
                        "        onLockBodyScroll: PropTypes.func,",
                        "        bodyHeight: PropTypes.number,",
                        "        innerTop: PropTypes.number,",
                        "        getNode: PropTypes.func,",
                        "        getBodyNode: PropTypes.func,",
                        "        getLockNode: PropTypes.func,",
                        "        lockType: PropTypes.oneOf(['left', 'right'])",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        const bodyNode = findDOMNode(this);",
                        "        // // for fixed",
                        "        this.context.getNode('body', bodyNode);",
                        "        // for virtual",
                        "        this.context.getBodyNode(bodyNode, this.context.lockType);",
                        "        // for lock",
                        "        this.context.getLockNode('body', bodyNode, this.context.lockType);",
                        "    }",
                        "",
                        "    tableRef = (table) => {",
                        "        this.tableNode = table;",
                        "    }",
                        "",
                        "    virtualScrollRef = (virtualScroll) => {",
                        "        this.virtualScrollNode = virtualScroll;",
                        "    }",
                        "",
                        "    onScroll = () => {",
                        "        // for fixed",
                        "        this.context.onBodyScroll();",
                        "        // for lock",
                        "        this.context.onLockBodyScroll();",
                        "        // for virtual",
                        "        this.context.onVirtualScroll();",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, className, colGroup, ...others } = this.props;",
                        "        const {maxBodyHeight, bodyHeight, innerTop} = this.context;",
                        "        return (<div style={{maxHeight: maxBodyHeight}} className={className} onScroll={this.onScroll}>",
                        "            <div style={{height: bodyHeight, overflow: 'hidden', position: 'relative'}} ref={this.virtualScrollRef}>",
                        "                <div style={{height: '100%', position: 'relative', transform: `translateY(${innerTop}px)`}}>",
                        "                    <table ref={this.tableRef}>",
                        "                        {colGroup}",
                        "                        <BodyComponent {...others} prefix={prefix}/>",
                        "                    </table>",
                        "                </div>",
                        "            </div>",
                        "        </div>);",
                        "    }",
                        "}",
                        ""
                    ]
                }
            }
        },
        "tag": {
            "closeable.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Tag from './tag';",
                    "",
                    "/**",
                    " * Tag.Closeable",
                    " */",
                    "class Closeable extends Component {",
                    "    static propTypes = {",
                    "        disabled: PropTypes.bool,",
                    "        className: PropTypes.any,",
                    "        /**",
                    "         * closeable 标签的 onClose 响应区域, tag: 标签体, tail(默认): 关闭按钮",
                    "         */",
                    "        closeArea: PropTypes.oneOf(['tag', 'tail']),",
                    "        /**",
                    "         * 点击关闭按钮时的回调",
                    "         * @param {String} from 事件来源, tag: 标签体点击, tail: 关闭按钮点击",
                    "         * @returns {Boolean} true则关闭, false阻止关闭",
                    "         */",
                    "        onClose: PropTypes.func,",
                    "        /**",
                    "         * 标签关闭后执行的回调",
                    "         */",
                    "        afterClose: PropTypes.func,",
                    "        /**",
                    "         * 点击回调",
                    "         */",
                    "        onClick: PropTypes.func,",
                    "        type: PropTypes.oneOf(['normal', 'primary']),",
                    "        /**",
                    "         * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        children: PropTypes.any,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        disabled: false,",
                    "        type: 'normal',",
                    "    };",
                    "",
                    "    render() {",
                    "        const {",
                    "            disabled, className,",
                    "            closeArea, onClose,",
                    "            afterClose, onClick,",
                    "            type, size, children,",
                    "            rtl",
                    "        } = this.props;",
                    "",
                    "        return (<Tag",
                    "            rtl={rtl}",
                    "            disabled={disabled}",
                    "            className={className}",
                    "            closeArea={closeArea}",
                    "            onClose={onClose}",
                    "            afterClose={afterClose}",
                    "            onClick={onClick}",
                    "            type={type}",
                    "            size={size}",
                    "            closable>",
                    "            {children}",
                    "        </Tag>);",
                    "    }",
                    "}",
                    "",
                    "export default Closeable;"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import { log } from '../util';",
                    "import Tag from './tag';",
                    "import Group from './tag-group';",
                    "import Selectable from './selectable';",
                    "import Closable from './closeable';",
                    "",
                    "/* istanbul ignore next */",
                    "const ConfigTag = ConfigProvider.config(Tag, {",
                    "    transfrom: (props, deprecated) => {",
                    "        const {shape, type} = props;",
                    "        if (shape === 'selectable') {",
                    "            deprecated('shape=selectable', 'Tag.Selectable', 'Tag');",
                    "        }",
                    "",
                    "        if (shape === 'deletable') {",
                    "            deprecated('shape=deletable', 'Tag.Closeable', 'Tag');",
                    "        }",
                    "",
                    "        if (shape === 'link') {",
                    "            deprecated('shape=link', '<Tag><a href=\"x\">x</a></Tag>', 'Tag');",
                    "        }",
                    "",
                    "        if (shape === 'readonly' || shape === 'interactive') {",
                    "            log.warning(`Warning: [ shape=${shape} ] is deprecated at [ Tag ]`);",
                    "        }",
                    "",
                    "        if (type === 'secondary') {",
                    "            log.warning('Warning: [ type=secondary ] is deprecated at [ Tag ]');",
                    "        }",
                    "",
                    "        ['count', 'marked', 'value', 'onChange'].forEach(key => {",
                    "            if (key in props) {",
                    "                log.warning(`Warning: [ ${key} ] is deprecated at [ Tag ]`);",
                    "            }",
                    "        });",
                    "",
                    "        if ('selected'  in props || 'defaultSelected' in props) {",
                    "            log.warning('Warning: [ selected|defaultSelected  ] is deprecated at [ Tag ], use [ checked|defaultChecked ] at [ Tag.Selectable ] instead of it');",
                    "        }",
                    "",
                    "        if ('closed' in props) {",
                    "            log.warning('Warning: [ closed  ] is deprecated at [ Tag ], use [ onClose ] at [ Tag.Closeable ] instead of it');",
                    "        }",
                    "",
                    "        if ('onSelect' in props) {",
                    "            deprecated('onSelect', '<Tag.Selectable onChange/>', 'Tag');",
                    "        }",
                    "",
                    "        if ('afterClose' in props) {",
                    "            log.warning('Warning: [ afterClose  ] is deprecated at [ Tag ], use [ afterClose ] at [ Tag.Closeable ] instead of it');",
                    "        }",
                    "",
                    "        return props;",
                    "    },",
                    "});",
                    "",
                    "",
                    "ConfigTag.Group = ConfigProvider.config(Group);",
                    "",
                    "ConfigTag.Selectable = ConfigProvider.config(Selectable);",
                    "",
                    "// 有的地方叫做 Closeable 有的地方用Closeable, 为了保持兼容 文档类出现 Closeable, Closeable可以继续用",
                    "ConfigTag.Closable = ConfigProvider.config(Closable);",
                    "ConfigTag.Closeable = ConfigTag.Closable;",
                    "",
                    "export default ConfigTag;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"./scss/animation.scss\";",
                    "@import \"./scss/mixin.scss\";",
                    "@import \"./scss/placeholder.scss\";",
                    "@import \"./scss/variable.scss\";",
                    "@import \"./rtl.scss\";",
                    "",
                    ".#{$css-prefix} {",
                    "    &tag-group {",
                    "        .#{$css-prefix}tag-medium,",
                    "        .#{$css-prefix}tag-large {",
                    "            @include tag-group-margin($tag-size-m-margin);",
                    "        }",
                    "",
                    "        .#{$css-prefix}tag-small {",
                    "            @include tag-group-margin($tag-size-s-margin);",
                    "        }",
                    "    }",
                    "",
                    "    &tag {",
                    "        @include box-sizing();",
                    "        display: inline-block;",
                    "        max-width: 100%;",
                    "        vertical-align: middle;",
                    "        border-width: $tag-border-width;",
                    "        border-radius: $tag-corner-radius;",
                    "        box-shadow: $tag-shadow;",
                    "        border-style: solid; /* 可配置??? */",
                    "        overflow: hidden;",
                    "        white-space: nowrap;",
                    "        transition: all .2s cubic-bezier(.23, 1, .32, 1);",
                    "        font-size: 0;",
                    "        outline: 0;",
                    "",
                    "        > .#{$css-prefix}tag-body {",
                    "            position: relative;",
                    "            display: inline-block;",
                    "            height: 100%;",
                    "            text-align: center;",
                    "            vertical-align: middle;",
                    "            @extend %ellipsis;",
                    "            max-width: 100%;",
                    "            user-select: none;",
                    "",
                    "            > a {",
                    "                text-decoration: none;",
                    "                color: inherit;",
                    "                &:before {",
                    "                    content: \" \";",
                    "                    @include placeholder-full;",
                    "                }",
                    "            }",
                    "",
                    "            /* 用户手动传的 icon 的大小也保持一致？ */",
                    "            .#{$css-prefix}icon {",
                    "                line-height: 1;",
                    "                vertical-align: middle;",
                    "",
                    "                &:before {",
                    "                    font-size: inherit;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-body-pointer {",
                    "            cursor: pointer;",
                    "        }",
                    "",
                    "        &[disabled], &.disabled {",
                    "            cursor: not-allowed;",
                    "            pointer-events: none;",
                    "        }",
                    "    }",
                    "",
                    "    &tag-large {",
                    "        @include tag-size(",
                    "            $tag-size-l-height,",
                    "            $tag-size-line-height,",
                    "            $tag-border-width,",
                    "            $tag-size-l-padding-lr,",
                    "            $tag-size-l-text-size,",
                    "            $tag-size-l-icon-font",
                    "        );",
                    "    }",
                    "",
                    "    &tag-medium {",
                    "        @include tag-size(",
                    "            $tag-size-m-height,",
                    "            $tag-size-line-height,",
                    "            $tag-border-width,",
                    "            $tag-size-m-padding-lr,",
                    "            $tag-size-m-text-size,",
                    "            $tag-size-m-icon-font",
                    "        );",
                    "    }",
                    "",
                    "    &tag-small {",
                    "        @include tag-size(",
                    "            $tag-size-s-height,",
                    "            $tag-size-line-height,",
                    "            $tag-border-width,",
                    "            $tag-size-s-padding-lr,",
                    "            $tag-size-s-text-size,",
                    "            $tag-size-s-icon-font",
                    "        );",
                    "    }",
                    "",
                    "    &tag-default {",
                    "        cursor: default;",
                    "",
                    "        &.#{$css-prefix}tag-level-normal {",
                    "            @extend %tag-statement-bordered;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-level-primary {",
                    "            @extend %tag-statement-fill;",
                    "        }",
                    "    }",
                    "",
                    "    &tag-closable {",
                    "        position: relative;",
                    "",
                    "        > .#{$css-prefix}tag-close-btn {",
                    "            display: inline-block;",
                    "            vertical-align: middle;",
                    "            height: 100%;",
                    "            text-align: center;",
                    "            cursor: pointer;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-level-normal {",
                    "            @extend %tag-statement-closable-bordered;",
                    "            @extend %tag-closable-normal-tick;",
                    "            &[disabled], &.disabled {",
                    "                color: $tag-text-color-disabled;",
                    "                border-color: $tag-checkable-normal-border-selected-disabled;",
                    "                background-color: $tag-fill-bg-color-disabled;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-level-primary {",
                    "            @extend %tag-statement-fill;",
                    "        }",
                    "    }",
                    "",
                    "    &tag-checkable {",
                    "        cursor: pointer;",
                    "        position: relative;",
                    "        border-radius: $tag-corner-radius;",
                    "",
                    "        &.checked {",
                    "            &:before {",
                    "                animation: fadeInRightForTag .4s $ease-in-out-circ;",
                    "            }",
                    "            &:after {",
                    "                animation: zoomIn .4s $ease-in-out-circ;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-small {",
                    "            &:not(.#{$css-prefix}tag-level-primary) {",
                    "                @include checkable-tag-tick-size(",
                    "                    $tag-size-s-tick-icon-bg-size,",
                    "                    $tag-size-s-tick-icon-size",
                    "                );",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-medium {",
                    "            &:not(.#{$css-prefix}tag-level-primary) {",
                    "                @include checkable-tag-tick-size(",
                    "                    $tag-size-m-tick-icon-bg-size,",
                    "                    $tag-size-m-tick-icon-size",
                    "                );",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-large {",
                    "            &:not(.#{$css-prefix}tag-level-primary) {",
                    "                @include checkable-tag-tick-size(",
                    "                    $tag-size-l-tick-icon-bg-size,",
                    "                    $tag-size-l-tick-icon-size",
                    "                );",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-level-normal {",
                    "            @extend %tag-selectable-normal;",
                    "",
                    "            &.checked {",
                    "                @extend %tag-statement-secondary;",
                    "                @extend %tag-checkable-normal-tick;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-level-primary {",
                    "            @extend %tag-statement-checkable-fill;",
                    "",
                    "            &.checked {",
                    "                @extend %tag-statement-checkable-primary;",
                    "            }",
                    "",
                    "            &[disabled], &.disabled {",
                    "                color: $tag-text-color-disabled; /* $tag-text-color-disabled; */",
                    "                border-color: $tag-fill-bg-color-disabled;",
                    "                background-color: $tag-fill-bg-color-disabled;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}tag-level-secondary {",
                    "            @extend %tag-statement-text;",
                    "",
                    "            &.checked {",
                    "                @extend %tag-statement-secondary;",
                    "                @extend %tag-checkable-secondary-tick;",
                    "            }",
                    "",
                    "            &[disabled], &.disabled {",
                    "                color: $tag-text-color-disabled;",
                    "                border-color: $tag-border-color-disabled;",
                    "                background-color: $tag-fill-bg-color-disabled;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    /* Animation */",
                    "    /* ----------- */",
                    "    &tag-zoom-enter,",
                    "    &tag-zoom-appear {",
                    "        animation: fadeInLeft .4s $ease-in-out-circ;",
                    "        animation-fill-mode: both;",
                    "    }",
                    "",
                    "    &tag-zoom-leave {",
                    "        animation: zoomOut .3s ease-in;",
                    "        animation-fill-mode: both;",
                    "    }",
                    "}",
                    ""
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": []
            },
            "selectable.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import {obj, func} from '../util';",
                    "import Tag from './tag';",
                    "",
                    "const {noop, bindCtx} = func;",
                    "",
                    "/**",
                    " * Tag.Selectable",
                    " */",
                    "class Selectable extends Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 标签是否被选中，受控用法",
                    "         * tag checked or not, a controlled way",
                    "         */",
                    "        checked: PropTypes.bool,",
                    "        /**",
                    "         * 标签是否默认被选中，非受控用法",
                    "         * tag checked or not by default, a uncontrolled way",
                    "         */",
                    "        defaultChecked: PropTypes.bool,",
                    "        /**",
                    "         * 选中状态变化时触发的事件",
                    "         * @param {Boolean} checked 是否选中",
                    "         * @param {Event} e Dom 事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 标签是否被禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        className: PropTypes.any,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        onChange: noop",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            checked: 'checked' in props ? props.checked : (props.defaultChecked || false)",
                    "        };",
                    "",
                    "        bindCtx(this, [",
                    "            'handleClick'",
                    "        ]);",
                    "    }",
                    "",
                    "    handleClick(e) {",
                    "        e && e.preventDefault();",
                    "        // IE9 不支持 pointer-events，还是可能会触发 click 事件",
                    "        if (this.props.disabled) {",
                    "            return false;",
                    "        }",
                    "",
                    "        this.setState(prevState => ({",
                    "            checked: !prevState.checked",
                    "        }));",
                    "",
                    "        this.props.onChange(!this.props.checked, e);",
                    "    }",
                    "",
                    "    render() {",
                    "        const attrFilterTarget = [",
                    "            'checked', 'defaultChecked', 'onChange', 'className',",
                    "            // 防止这些额外的参数影响 tag 的类型",
                    "            '_shape', 'closable'",
                    "        ];",
                    "",
                    "        const others = obj.pickOthers(attrFilterTarget, this.props);",
                    "        const isChecked = 'checked' in this.props ? this.props.checked : this.state.checked;",
                    "        const clazz = classNames(this.props.className, {",
                    "            checked: isChecked",
                    "        });",
                    "        return <Tag {...others} role=\"checkbox\" _shape=\"checkable\" aria-checked={isChecked} className={clazz} onClick={this.handleClick} />;",
                    "    }",
                    "}",
                    "",
                    "export default Selectable;"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../animate/style.js';",
                    "import './main.scss';"
                ]
            },
            "tag-group.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "",
                    "class Group extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        className: PropTypes.any,",
                    "        children: PropTypes.node,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "    };",
                    "",
                    "    render() {",
                    "",
                    "        const {className, prefix, children, rtl, ...others} = this.props;",
                    "        const clazz = classNames(`${prefix || 'next-'}tag-group`, className);",
                    "",
                    "        return <div className={clazz} dir={rtl ? 'rtl' : undefined} {...others}>{children}</div>;",
                    "    }",
                    "}",
                    "",
                    "export default Group;"
                ]
            },
            "tag.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Animate from '../animate';",
                    "import Icon from '../icon';",
                    "import { obj, func, support, KEYCODE } from '../util';",
                    "",
                    "const { noop, bindCtx } = func;",
                    "",
                    "/**",
                    " * Tag",
                    " */",
                    "class Tag extends Component {",
                    "    static propTypes = {",
                    "        /**",
                    "         * 标签类名前缀,提供给二次开发者用",
                    "         * @default next-",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 标签的类型",
                    "         */",
                    "        type: PropTypes.oneOf(['normal', 'primary']),",
                    "        /**",
                    "         * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "",
                    "        closable: PropTypes.bool,",
                    "        /**",
                    "         * 是否开启动效",
                    "         */",
                    "        animation: PropTypes.bool,",
                    "        closeArea: PropTypes.oneOf(['tag', 'tail']),",
                    "        onClose: PropTypes.func,",
                    "        afterClose: PropTypes.func,",
                    "        /**",
                    "         * 标签出现动画结束后执行的回调",
                    "         */",
                    "        afterAppear: PropTypes.func,",
                    "        className: PropTypes.any,",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 点击回调",
                    "         */",
                    "        onClick: PropTypes.func,",
                    "        _shape: PropTypes.oneOf(['default', 'closable', 'checkable']),",
                    "        disabled: PropTypes.bool,",
                    "        rtl: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        type: 'normal',",
                    "        size: 'medium',",
                    "        closeArea: 'tail',",
                    "        animation: false,",
                    "        onClose: noop,",
                    "        afterClose: noop,",
                    "        afterAppear: noop,",
                    "        onClick: noop,",
                    "        _shape: 'default',",
                    "        disabled: false,",
                    "        rtl: false,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        this.state = {",
                    "            visible: true",
                    "        };",
                    "",
                    "        bindCtx(this, [",
                    "            'handleBodyClick',",
                    "            'handleTailClick',",
                    "            'handleAnimationInit',",
                    "            'handleAnimationEnd',",
                    "            'renderTailNode'",
                    "        ]);",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        this.__destroyed = true;",
                    "    }",
                    "",
                    "    handleClose(from) {",
                    "        const { animation, onClose } = this.props;",
                    "        const hasAnimation = support.animation && animation;",
                    "",
                    "        // 先执行回调",
                    "        const result = onClose(from, this.tagNode);",
                    "",
                    "        // 如果回调函数返回 false，则阻止关闭行为",
                    "        if (result !== false && !this.__destroyed) {",
                    "            this.setState(",
                    "                {",
                    "                    visible: false",
                    "                },",
                    "                () => {",
                    "                    // 如果没有动画，则直接执行 afterClose",
                    "                    !hasAnimation && this.props.afterClose(this.tagNode);",
                    "                }",
                    "            );",
                    "        }",
                    "    }",
                    "",
                    "    // 标签体点击",
                    "    handleBodyClick(e) {",
                    "        const { closable, closeArea, onClick } = this.props;",
                    "",
                    "        if (closable && closeArea === 'tag') {",
                    "            this.handleClose('tag');",
                    "        }",
                    "",
                    "        if (typeof onClick === 'function') {",
                    "            return onClick(e);",
                    "        }",
                    "    }",
                    "",
                    "    onKeyDown = e => {",
                    "        // 针对无障碍化要求 添加键盘SPACE事件",
                    "        const { closable, closeArea, onClick, disabled } = this.props;",
                    "        if (e.keyCode !== KEYCODE.SPACE || disabled) {",
                    "            return;",
                    "        }",
                    "",
                    "        e.preventDefault();",
                    "        e.stopPropagation();",
                    "",
                    "        if (closable) {",
                    "            this.handleClose(closeArea);",
                    "        } else {",
                    "            typeof onClick === 'function' && onClick(e);",
                    "        }",
                    "",
                    "    };",
                    "",
                    "    handleTailClick(e) {",
                    "        e && e.preventDefault();",
                    "        e && e.stopPropagation();",
                    "",
                    "        this.handleClose('tail');",
                    "    }",
                    "",
                    "    handleAnimationInit(node) {",
                    "        this.props.afterAppear(node);",
                    "    }",
                    "",
                    "    handleAnimationEnd(node) {",
                    "        this.props.afterClose(node);",
                    "    }",
                    "",
                    "    renderAnimatedTag(children, animationName) {",
                    "        return (",
                    "            <Animate",
                    "                animation={animationName}",
                    "                afterAppear={this.handleAnimationInit}",
                    "                afterLeave={this.handleAnimationEnd}",
                    "            >",
                    "                {children}",
                    "            </Animate>",
                    "        );",
                    "    }",
                    "",
                    "    renderTailNode() {",
                    "        const { prefix, closable } = this.props;",
                    "",
                    "        if (!closable) {",
                    "            return null;",
                    "        }",
                    "",
                    "        return (",
                    "            <span",
                    "                className={`${prefix}tag-close-btn`}",
                    "                onClick={this.handleTailClick}",
                    "            >",
                    "                <Icon type=\"close\" />",
                    "            </span>",
                    "        );",
                    "    }",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            type,",
                    "            size,",
                    "            _shape,",
                    "            closable,",
                    "            closeArea,",
                    "            className,",
                    "            children,",
                    "            animation,",
                    "            disabled,",
                    "            rtl",
                    "        } = this.props;",
                    "        const { visible } = this.state;",
                    "        const others = obj.pickOthers(Tag.propTypes, this.props);",
                    "        const shape = closable ? 'closable' : _shape;",
                    "        const bodyClazz = classNames(",
                    "            [",
                    "                `${prefix}tag`,",
                    "                `${prefix}tag-${shape}`,",
                    "                `${prefix}tag-level-${type}`,",
                    "                `${prefix}tag-${size}`",
                    "            ],",
                    "            {",
                    "                [`${prefix}tag-closable`]: closable,",
                    "                [`${prefix}tag-body-pointer`]: closable && closeArea === 'tag'",
                    "            },",
                    "            className",
                    "        );",
                    "        // close btn",
                    "        const tailNode = this.renderTailNode();",
                    "        // tag node",
                    "        const tagNode = !visible ? null : (",
                    "            <div",
                    "                className={bodyClazz}",
                    "                onClick={this.handleBodyClick}",
                    "                onKeyDown={this.onKeyDown}",
                    "                tabIndex=\"0\"",
                    "                role=\"button\"",
                    "                aria-disabled={disabled}",
                    "                disabled={disabled}",
                    "                dir={rtl ? 'rtl' : undefined}",
                    "                ref={n => (this.tagNode = n)}",
                    "                {...others}",
                    "            >",
                    "                <span className={`${prefix}tag-body`}>{children}</span>",
                    "                {tailNode}",
                    "            </div>",
                    "        );",
                    "",
                    "        if (animation && support.animation) {",
                    "            return this.renderAnimatedTag(tagNode, `${prefix}tag-zoom`);",
                    "        }",
                    "",
                    "        // 未开启或不支持动画",
                    "        return tagNode;",
                    "    }",
                    "}",
                    "",
                    "export default Tag;"
                ]
            },
            "scss": {
                "animation.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "// tag animation",
                        "// --------------------------------------------------",
                        "",
                        "@keyframes fadeInRightForTag {",
                        "    0% {",
                        "        opacity: 0;",
                        "        transform: rotate(45deg) translateX(20px);",
                        "    }",
                        "    100% {",
                        "        opacity: 1;",
                        "        transform: rotate(45deg) translateX((0));",
                        "    }",
                        "}"
                    ]
                },
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "// tag mixins",
                        "// --------------------------------------------------",
                        "",
                        "@mixin tag-group-margin($margin) {",
                        "    margin-right: $margin;",
                        "    margin-bottom: $margin;",
                        "}",
                        "",
                        "@mixin tag-size(",
                        "    $height,",
                        "    $lineHeight,",
                        "    $borderWidth,",
                        "    $paddingLr,",
                        "    $fontSize,",
                        "    $iconSize",
                        ") {",
                        "    height: $height;",
                        "    padding: 0;",
                        "    line-height: $height - $borderWidth * 2;",
                        "    font-size: 0;",
                        "",
                        "    $_marginLeft: $height / 4 - 1px;",
                        "",
                        "    > .#{$css-prefix}tag-body {",
                        "        font-size: $fontSize;",
                        "        padding: 0 $paddingLr;",
                        "    }",
                        "",
                        "    &.#{$css-prefix}tag-closable > .#{$css-prefix}tag-body {",
                        "        padding: 0 0 0 $paddingLr;",
                        "    }",
                        "    &[dir=rtl].#{$css-prefix}tag-closable > .#{$css-prefix}tag-body {",
                        "        padding: 0 $paddingLr 0 0;",
                        "    }",
                        "",
                        "    > .#{$css-prefix}tag-close-btn {",
                        "        margin-left: $_marginLeft;",
                        "        padding-right: $paddingLr;",
                        "        .#{$css-prefix}icon {",
                        "            @include icon-size($iconSize);",
                        "        }",
                        "    }",
                        "    &[dir=rtl] > .#{$css-prefix}tag-close-btn {",
                        "        margin-right: $_marginLeft;",
                        "        margin-left: 0;",
                        "        padding-right: 0;",
                        "        padding-left: $paddingLr;",
                        "    }",
                        "}",
                        "",
                        "@mixin tag-statement(",
                        "    $textColor,",
                        "    $borderColor,",
                        "    $bgColor,",
                        "    $textColorHover,",
                        "    $borderColorHover: \"\",",
                        "    $bgColorHover: \"\",",
                        "    $tailColor: \"\",",
                        "    $tailColorHover: \"\",",
                        "    $tailColorDisabled: \"\",",
                        "    $textColorDisabled: \"\",",
                        "    $borderColorDisabled: \"\",",
                        "    $bgColorDisabled: \"\"",
                        ") {",
                        "    color: $textColor;",
                        "    border-color: $borderColor;",
                        "    background-color: $bgColor;",
                        "",
                        "    &:not(.disabled):not([disabled]):hover,",
                        "    &:not(.disabled):not([disabled]).hover,",
                        "    &:not(.disabled):not([disabled]):focus {",
                        "        color: $textColorHover;",
                        "",
                        "        @if $borderColorHover != \"\" {",
                        "            border-color: $borderColorHover;",
                        "        }",
                        "        @if $bgColorHover != \"\" {",
                        "            background-color: $bgColorHover;",
                        "        }",
                        "",
                        "        @if $tailColorHover != \"\" {",
                        "            > .#{$css-prefix}tag-close-btn {",
                        "                color: $tailColorHover;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    &[disabled],",
                        "    &.disabled {",
                        "        @if $tailColorDisabled != \"\" {",
                        "            > .#{$css-prefix}tag-close-btn {",
                        "                color: $tailColorDisabled;",
                        "            }",
                        "        }",
                        "",
                        "        @if $textColorDisabled != \"\" {",
                        "            color: $textColorDisabled;",
                        "        }",
                        "",
                        "        @if $borderColorDisabled != \"\" {",
                        "            border-color: $borderColorDisabled;",
                        "        }",
                        "",
                        "        @if $bgColorDisabled != \"\" {",
                        "            background-color: $bgColorDisabled;",
                        "        }",
                        "    }",
                        "",
                        "    > .#{$css-prefix}tag-close-btn {",
                        "        @if $tailColor != \"\" {",
                        "            color: $tailColor;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin tail-hover-animation() {",
                        "    transform: rotate(90deg);",
                        "    transform-origin: 50% 50%;",
                        "    backface-visibility: hidden;",
                        "}",
                        "",
                        "// for virtual btn",
                        "@mixin tick-bg-size($size) {",
                        "    right: -$size / 2;",
                        "    bottom: -$size / 2;",
                        "    width: $size;",
                        "    height: $size;",
                        "}",
                        "",
                        "// checkable tag tick",
                        "@mixin checkable-tag-tick-size($tick-bg-size, $tick-size) {",
                        "    &:before {",
                        "        right: -$tick-bg-size / 2;",
                        "        bottom: -$tick-bg-size / 2;",
                        "        width: $tick-bg-size;",
                        "        height: $tick-bg-size;",
                        "    }",
                        "",
                        "    &:after {",
                        "        font-size: $tick-size;",
                        "        line-height: $tick-size;",
                        "        right: 0;",
                        "        bottom: 0;",
                        "    }",
                        "}",
                        "",
                        "@mixin tag-checked-tick(",
                        "    $tick-icon,",
                        "    $tick-icon-color,",
                        "    $tick-icon-hover-color,",
                        "    $tick-icon-disabled-color,",
                        "    $tick-bg,",
                        "    $tick-bg-hover,",
                        "    $tick-bg-disabled",
                        ") {",
                        "    &:before {",
                        "        position: absolute;",
                        "        content: \"\";",
                        "        -webkit-font-smoothing: antialiased;",
                        "        background-color: $tick-bg;",
                        "        transform: rotate(45deg);",
                        "    }",
                        "",
                        "    &:after {",
                        "        position: absolute;",
                        "        font-family: NextIcon;",
                        "        -webkit-font-smoothing: antialiased;",
                        "        content: $tick-icon;",
                        "        transform: scale(.6);",
                        "        color: $tick-icon-color;",
                        "    }",
                        "",
                        "    &:not(.disabled):not([disabled]):hover,",
                        "    &:not(.disabled):not([disabled]).hover,",
                        "    &:not(.disabled):not([disabled]):focus {",
                        "        &:before {",
                        "            background-color: $tick-bg-hover;",
                        "        }",
                        "",
                        "        &:after {",
                        "            color: $tick-icon-hover-color;",
                        "        }",
                        "    }",
                        "",
                        "    &[disabled],",
                        "    &:disabled {",
                        "        &:before {",
                        "            background-color: $tick-bg-disabled;",
                        "        }",
                        "",
                        "        &:after {",
                        "            color: $tick-icon-disabled-color;",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "@mixin placeholder-full {",
                        "    position: absolute;",
                        "    display: block;",
                        "    top: 0;",
                        "    left: 0;",
                        "    right: 0;",
                        "    bottom: 0;",
                        "}"
                    ]
                },
                "placeholder.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "@import \"./mixin.scss\";",
                        "@import \"./variable.scss\";",
                        "",
                        "// tag placeholders",
                        "// --------------------------------------------------",
                        "",
                        "%ellipsis {",
                        "    overflow: hidden;",
                        "    text-overflow: ellipsis;",
                        "}",
                        "",
                        "// 标签的 5 种形态：纯文字、灰底、品牌色底、纯边框、品牌色边框",
                        "%tag-statement-text {",
                        "    @include tag-statement(",
                        "        $tag-normal-text-color,",
                        "        $color-transparent,",
                        "        $color-transparent,",
                        "        $tag-normal-text-color-hover",
                        "    );",
                        "}",
                        "",
                        "%tag-statement-fill {",
                        "    @include tag-statement(",
                        "        $tag-fill-text-color,",
                        "        $tag-fill-bg-color,",
                        "        $tag-fill-bg-color,",
                        "        $tag-fill-text-color-hover,",
                        "        $tag-fill-bg-color-hover,",
                        "        $tag-fill-bg-color-hover,",
                        "        $tag-fill-tail-color,",
                        "        $tag-fill-tail-color-hover,",
                        "        $tag-fill-tail-color-disabled,",
                        "        $tag-fill-text-color-disabled,",
                        "        $tag-fill-border-color-disabled,",
                        "        $tag-fill-bg-color-disabled",
                        "    );",
                        "}",
                        "",
                        "%tag-statement-checkable-fill {",
                        "    @include tag-statement(",
                        "        $tag-checkable-fill-text-color,",
                        "        $tag-checkable-fill-bg-color,",
                        "        $tag-checkable-fill-bg-color,",
                        "        $tag-checkable-fill-text-color-hover,",
                        "        $tag-checkable-fill-bg-color-hover,",
                        "        $tag-checkable-fill-bg-color-hover,",
                        "        $tag-checkable-fill-tail-color,",
                        "        $tag-checkable-fill-tail-color-hover,",
                        "        $tag-checkable-fill-tail-color-disabled,",
                        "        $tag-checkable-fill-text-color-disabled,",
                        "        $tag-checkable-fill-border-color-disabled,",
                        "        $tag-checkable-fill-bg-color-disabled",
                        "    );",
                        "}",
                        "",
                        "%tag-statement-primary {",
                        "    @include tag-statement(",
                        "        $tag-primary-text-color,",
                        "        $tag-primary-bg-color,",
                        "        $tag-primary-bg-color,",
                        "        $tag-primary-text-color-hover,",
                        "        $tag-primary-bg-color-hover,",
                        "        $tag-primary-bg-color-hover,",
                        "        $tag-primary-tail-color,",
                        "        $tag-primary-tail-color-hover",
                        "    );",
                        "}",
                        "",
                        "%tag-statement-checkable-primary {",
                        "    @include tag-statement(",
                        "        $tag-checkable-primary-text-color,",
                        "        $tag-checkable-primary-bg-color,",
                        "        $tag-checkable-primary-bg-color,",
                        "        $tag-checkable-primary-text-color-hover,",
                        "        $tag-checkable-primary-bg-color-hover,",
                        "        $tag-checkable-primary-bg-color-hover,",
                        "        $tag-checkable-primary-tail-color,",
                        "        $tag-checkable-primary-tail-color-hover",
                        "    );",
                        "}",
                        "",
                        "%tag-statement-bordered {",
                        "    @include tag-statement(",
                        "        $tag-bordered-text-color,",
                        "        $tag-bordered-border-color,",
                        "        $tag-bordered-bg,",
                        "        $tag-bordered-text-color-hover,",
                        "        $tag-bordered-border-color-hover,",
                        "        $tag-bordered-bg-hover,",
                        "        $tag-bordered-tail-color,",
                        "        $tag-bordered-tail-color-hover,",
                        "        $tag-bordered-tail-color-disabled,",
                        "        $tag-bordered-text-color-disabled,",
                        "        $tag-bordered-border-color-disabled,",
                        "        $tag-bordered-bg-disabled",
                        "    );",
                        "}",
                        "",
                        "// 提供一份给 closable tag 配置",
                        "%tag-statement-closable-bordered {",
                        "    @include tag-statement(",
                        "        $tag-closable-bordered-text-color, // $tag-bordered-text-color,",
                        "        $tag-closable-bordered-border-color, // $tag-bordered-border-color",
                        "        $tag-closable-bordered-bg, // $tag-bordered-bg,",
                        "        $tag-closable-bordered-text-color-hover, // $tag-bordered-text-color-hover,",
                        "        $tag-closable-bordered-border-color-hover, // $tag-bordered-border-color-hover,",
                        "        $tag-closable-bordered-bg-hover, // $tag-bordered-bg-hover,",
                        "        $tag-closable-bordered-tail-color, // $tag-bordered-tail-color,",
                        "        $tag-closable-bordered-tail-color-hover, // $tag-bordered-tail-color-hover,",
                        "        $tag-closable-bordered-tail-color-disabled, // $tag-bordered-tail-color-disabled,",
                        "        $tag-closable-bordered-text-color-disabled, // $tag-bordered-text-color-disabled,",
                        "        $tag-closable-bordered-border-color-disabled, // $tag-bordered-border-color-disabled,",
                        "        $tag-closable-bordered-bg-disabled // $tag-bordered-bg-disabled",
                        "    );",
                        "}",
                        "",
                        "%tag-statement-secondary {",
                        "    @include tag-statement(",
                        "        $tag-secondary-text-color,",
                        "        $tag-secondary-border-color,",
                        "        $tag-secondary-bg,",
                        "        $tag-secondary-text-color-hover,",
                        "        $tag-secondary-border-color-hover,",
                        "        $tag-secondary-bg-hover",
                        "    );",
                        "}",
                        "",
                        "%tag-checkable-secondary-tick {",
                        "    @include tag-checked-tick(",
                        "        $tag-checkable-icon-selected,",
                        "        $tag-checkable-secondary-icon-color-selected,",
                        "        $tag-checkable-secondary-icon-color-selected-hover,",
                        "        $tag-checkable-secondary-icon-color-selected-disabled,",
                        "        $tag-checkable-secondary-bg-selected,",
                        "        $tag-checkable-secondary-bg-selected-hover,",
                        "        $tag-checkable-secondary-bg-selected-disabled",
                        "    );",
                        "}",
                        "",
                        "%tag-selectable-normal {",
                        "    @include tag-statement(",
                        "        $tag-checkable-normal-text-color,",
                        "        $tag-checkable-normal-border-color,",
                        "        $tag-checkable-normal-bg,",
                        "        $tag-checkable-normal-text-color-hover,",
                        "        $tag-checkable-normal-border-color-hover,",
                        "        $tag-checkable-normal-bg-hover,",
                        "        '',",
                        "        '',",
                        "        '',",
                        "        $tag-checkable-normal-text-selected-disabled,",
                        "        $tag-checkable-normal-border-selected-disabled,",
                        "        $tag-checkable-normal-bg-selected-disabled",
                        "    );",
                        "}",
                        "",
                        "%tag-checkable-normal-tick {",
                        "    @include tag-checked-tick(",
                        "        $tag-checkable-icon-selected,",
                        "        $tag-checkable-normal-icon-color-selected,",
                        "        $tag-checkable-normal-icon-color-selected-hover,",
                        "        $tag-checkable-normal-icon-color-selected-disabled,",
                        "        $tag-checkable-normal-bg-selected,",
                        "        $tag-checkable-normal-bg-selected-hover,",
                        "        $tag-checkable-normal-tick-bg-selected-disabled",
                        "    );",
                        "}",
                        "",
                        "%tag-closable-normal-tick {",
                        "    @include tag-checked-tick(",
                        "        $tag-closable-normal-icon,",
                        "        $tag-closable-normal-icon-color,",
                        "        $tag-closable-normal-icon-color-hover,",
                        "        $tag-closable-normal-icon-color-disabled,",
                        "        $tag-closable-normal-bg,",
                        "        $tag-closable-normal-bg-hover,",
                        "        $tag-closable-normal-bg-disabled",
                        "    );",
                        "}",
                        ""
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module tag: 标签",
                        "/// @tag Tag",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $tag-",
                        "/// @classPrefix {prefix}-tag",
                        "/// @order {\"size/bounding\":10,\"size/content\":11,\"size/tail\":12,\"size/tick\":13,\"statement/normal\":10,\"statement/normal/content\":100,\"statement/normal/bounding\":101,\"statement/normal/tail\":102,\"statement/hover\":11,\"statement/hover/content\":110,\"statement/hover/bounding\":111,\"statement/hover/tail\":112,\"statement/disabled\":12,\"statement/disabled/content\":120,\"statement/disabled/bounding\":121,\"statement/disabled/tail\":122,\"statement/selected\":13,\"statement/selected/tick\":130,\"statement/selected-hover\":14,\"statement/selected-hover/tick\":140,\"statement/selected-disabled\":15,\"statement/selected-disabled/tick\":150}",
                        "////",
                        "",
                        "",
                        "",
                        "// Size",
                        "// -------------------",
                        "",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$tag-size-l-height: $s-10 !default;",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$tag-size-m-height: $s-7 !default;",
                        "/// height",
                        "/// @namespace size/bounding",
                        "$tag-size-s-height: $s-5 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$tag-size-l-padding-lr: $s-4 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$tag-size-m-padding-lr: $s-3 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$tag-size-s-padding-lr: $s-2 !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$tag-corner-radius: $corner-1 !default;",
                        "",
                        "/// corner",
                        "/// @namespace size/bounding",
                        "$tag-checkable-corner-radius: $corner-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace size/bounding",
                        "$tag-border-width: $line-1 !default;",
                        "",
                        "/// shadow",
                        "/// @namespace size/bounding",
                        "$tag-shadow: $shadow-zero !default;",
                        "",
                        "/// text",
                        "/// @namespace size/content",
                        "$tag-size-l-text-size: $font-size-subhead !default;",
                        "",
                        "/// text",
                        "/// @namespace size/content",
                        "$tag-size-m-text-size: $font-size-body-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/content",
                        "$tag-size-s-text-size: $font-size-caption !default;",
                        "",
                        "/// icon size",
                        "/// @namespace size/tail",
                        "$tag-size-l-icon-font: $icon-xs !default;",
                        "",
                        "/// icon size",
                        "/// @namespace size/tail",
                        "$tag-size-m-icon-font: $icon-xxs !default;",
                        "",
                        "/// icon size",
                        "/// @namespace size/tail",
                        "$tag-size-s-icon-font: $icon-xxs !default;",
                        "",
                        "/// icon size",
                        "/// @namespace size/tick",
                        "$tag-size-l-tick-icon-size: $icon-s !default;",
                        "",
                        "/// icon size",
                        "/// @namespace size/tick",
                        "$tag-size-m-tick-icon-size: $icon-xs !default;",
                        "",
                        "/// icon size",
                        "/// @namespace size/tick",
                        "$tag-size-s-tick-icon-size: $icon-xxs !default;",
                        "",
                        "/// background size",
                        "/// @namespace size/tick",
                        "$tag-size-l-tick-icon-bg-size: $s-9 !default;",
                        "",
                        "/// background size",
                        "/// @namespace size/tick",
                        "$tag-size-m-tick-icon-bg-size: $s-7 !default;",
                        "",
                        "/// background size",
                        "/// @namespace size/tick",
                        "$tag-size-s-tick-icon-bg-size: $s-5 !default;",
                        "",
                        "// Unconfigurable for size",
                        "// -------------------",
                        "",
                        "$tag-size-line-height: $s-4 !default;",
                        "$tag-size-m-margin: $s-2 !default;",
                        "$tag-size-s-margin: $s-1 !default;",
                        "",
                        "// icon - unconfigurable",
                        "$tag-checkable-icon-selected: $icon-content-select;",
                        "$tag-closable-normal-icon: $icon-content-close;",
                        "",
                        "// Animation",
                        "$ease-in-out-circ: cubic-bezier(.78, .14, .15, .86);",
                        "",
                        "// Statement",
                        "// -------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-normal-text-color: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-fill-text-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tail",
                        "$tag-closable-normal-icon-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tail",
                        "$tag-closable-normal-icon-color-hover: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tail",
                        "$tag-closable-normal-icon-color-disabled: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/tail",
                        "$tag-closable-normal-bg: $color-line1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/tail",
                        "$tag-closable-normal-bg-hover: $color-line1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/tail",
                        "$tag-closable-normal-bg-disabled: $color-line1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-closable-bordered-text-color: $color-text1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$tag-closable-bordered-border-color: $color-line1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-closable-bordered-bg: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-closable-bordered-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$tag-closable-bordered-border-color-hover: $color-line1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-closable-bordered-bg-hover: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tail",
                        "$tag-closable-bordered-tail-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tail",
                        "$tag-closable-bordered-tail-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tail",
                        "$tag-closable-bordered-tail-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-closable-bordered-border-color-disabled: $color-line1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-closable-bordered-text-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-closable-bordered-bg-disabled: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tail",
                        "$tag-fill-tail-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-fill-text-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-fill-border-color-disabled: $color-fill1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-fill-bg-color-disabled: $color-fill1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tail",
                        "$tag-fill-tail-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-primary-text-color: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-primary-bg-color: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tail",
                        "$tag-primary-tail-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-bordered-text-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tail",
                        "$tag-bordered-tail-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-secondary-text-color: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-normal-text-color-hover: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-fill-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tail",
                        "$tag-fill-tail-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-primary-text-color-hover: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tail",
                        "$tag-primary-tail-color-hover: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-bordered-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tail",
                        "$tag-bordered-tail-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tail",
                        "$tag-bordered-tail-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/text",
                        "$tag-bordered-text-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-bordered-border-color-disabled: $color-line1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/background",
                        "$tag-bordered-bg-disabled: $color-fill1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-secondary-text-color-hover: $color-brand1-9 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$tag-bordered-border-color: $color-line1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$tag-secondary-border-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/tick",
                        "$tag-checkable-normal-bg-selected: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/tick",
                        "$tag-checkable-secondary-bg-selected: $color-brand1-6 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$tag-bordered-border-color-hover: $color-line1-4 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$tag-secondary-border-color-hover: $color-brand1-9 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected-hover/tick",
                        "$tag-checkable-normal-bg-selected-hover: $color-brand1-9 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected-hover/tick",
                        "$tag-checkable-secondary-bg-selected-hover: $color-brand1-9 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-fill-bg-color: $color-fill1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-primary-background-color: $color-brand1-6 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-bordered-bg: $color-transparent !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-secondary-bg: $color-transparent !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-fill-bg-color-hover: $color-fill1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-primary-bg-color-hover: $color-brand1-9 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-bordered-bg-hover: $color-transparent !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-secondary-bg-hover: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-text-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-border-color-disabled: $color-line1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-checkable-fill-text-color: $color-text1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-checkable-fill-bg-color: $color-fill1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-checkable-fill-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-checkable-fill-bg-color-hover: $color-fill1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tail",
                        "$tag-checkable-fill-tail-color: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tail",
                        "$tag-checkable-fill-tail-color-hover: $color-text1-4 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/tail",
                        "$tag-checkable-fill-tail-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-checkable-fill-text-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-checkable-fill-border-color-disabled: $color-fill1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-checkable-fill-bg-color-disabled: $color-fill1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-checkable-normal-text-color: $color-text1-3 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$tag-checkable-normal-border-color: $color-line1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-checkable-normal-bg: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-checkable-normal-text-color-hover: $color-text1-4 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$tag-checkable-normal-border-color-hover: $color-line1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-checkable-normal-bg-hover: $color-transparent !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected-disabled/bounding",
                        "$tag-checkable-normal-text-selected-disabled: $color-text1-1 !default;",
                        "",
                        "/// border",
                        "/// @namespace statement/selected-disabled/bounding",
                        "$tag-checkable-normal-border-selected-disabled: $color-line1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected-disabled/bounding",
                        "$tag-checkable-normal-bg-selected-disabled: $color-fill1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected-disabled/bounding",
                        "$tag-checkable-normal-tick-bg-selected-disabled: $color-line1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/bounding",
                        "$tag-checkable-primary-text-color: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$tag-checkable-primary-bg-color: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/bounding",
                        "$tag-checkable-primary-text-color-hover: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$tag-checkable-primary-bg-color-hover: $color-brand1-9 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/tail",
                        "$tag-checkable-primary-tail-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/tail",
                        "$tag-checkable-primary-tail-color-hover: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected-disabled/tick",
                        "$tag-checkable-secondary-bg-selected-disabled: $color-line1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/bounding",
                        "$tag-primary-bg-color-disabled: $color-brand1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/tick",
                        "$tag-checkable-normal-icon-color-selected: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected-hover/tick",
                        "$tag-checkable-normal-icon-color-selected-hover: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected-disabled/tick",
                        "$tag-checkable-normal-icon-color-selected-disabled: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/tick",
                        "$tag-checkable-secondary-icon-color-selected: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected-hover/tick",
                        "$tag-checkable-secondary-icon-color-selected-hover: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/selected-disabled/tick",
                        "$tag-checkable-secondary-icon-color-selected-disabled: $color-white !default;"
                    ]
                }
            }
        },
        "time-picker": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import TimePicker from './time-picker';",
                    "",
                    "export default ConfigProvider.config(TimePicker, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('defaultOpen' in props) {",
                    "            deprecated('defaultOpen', 'defaultVisible', 'TimePicker');",
                    "            const { defaultOpen, ...others } = props;",
                    "            props = { defaultVisible: defaultOpen, ...others };",
                    "        }",
                    "        if ('open' in props) {",
                    "            deprecated('open', 'visible', 'TimePicker');",
                    "            const { open, ...others } = props;",
                    "            props = { visible: open, ...others };",
                    "        }",
                    "        if ('onOpenChange' in props) {",
                    "            deprecated('onOpenChange', 'onVisibleChange', 'TimePicker');",
                    "            const { onOpenChange, ...others } = props;",
                    "            props = { onVisibleChange: onOpenChange, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset\";",
                    "",
                    "@import \"scss/variable\";",
                    "@import './scss/menu.scss';",
                    "@import './scss/panel.scss';",
                    "@import './rtl.scss';",
                    "",
                    "#{$time-picker-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    display: inline-block;",
                    "    width: $s-50;",
                    "",
                    "    &-trigger .#{$css-prefix}input {",
                    "        width: 100%;",
                    "    }",
                    "",
                    "    &-body {",
                    "        overflow: hidden;",
                    "        width: $time-picker-panel-width;",
                    "        border: $popup-local-border-width $popup-local-border-style $time-picker-panel-border-color;",
                    "        border-radius: $time-picker-panel-corner;",
                    "        background: $time-picker-panel-background;",
                    "        box-shadow: $time-picker-panel-shadow;",
                    "    }",
                    "}"
                ]
            },
            "panel.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import moment from 'moment';",
                    "import locale from '../locale/zh-cn';",
                    "import { func } from '../util';",
                    "import TimeMenu from './module/time-menu';",
                    "import { checkMomentObj } from './utils';",
                    "",
                    "const { noop } = func;",
                    "",
                    "class TimePickerPanel extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 时间值（moment 对象）",
                    "         */",
                    "        value: checkMomentObj,",
                    "        /**",
                    "         * 是否显示小时",
                    "         */",
                    "        showHour: PropTypes.bool,",
                    "        /**",
                    "         * 是否显示秒",
                    "         */",
                    "        showSecond: PropTypes.bool,",
                    "        /**",
                    "         * 小时选项步长",
                    "         */",
                    "        hourStep: PropTypes.number,",
                    "        /**",
                    "         * 分钟选项步长",
                    "         */",
                    "        minuteStep: PropTypes.number,",
                    "        /**",
                    "         * 秒钟选项步长",
                    "         */",
                    "        secondStep: PropTypes.number,",
                    "        /**",
                    "         * 禁用小时函数",
                    "         * @param {Number} index 时 0 - 23",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledHours: PropTypes.func,",
                    "        /**",
                    "         * 禁用分钟函数",
                    "         * @param {Number} index 分 0 - 59",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledMinutes: PropTypes.func,",
                    "        /**",
                    "         * 禁用秒函数",
                    "         * @param {Number} index 秒 0 - 59",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledSeconds: PropTypes.func,",
                    "        /**",
                    "         * 选择某个日期值时的回调",
                    "         * @param {Object} 选中后的日期值",
                    "         */",
                    "        onSelect: PropTypes.func,",
                    "        locale: PropTypes.object,",
                    "        disabled: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        showHour: true,",
                    "        showSecond: true,",
                    "        disabledHours: noop,",
                    "        disabledMinutes: noop,",
                    "        disabledSeconds: noop,",
                    "        onSelect: noop,",
                    "        disabled: false,",
                    "        locale: locale.TimePicker,",
                    "    }",
                    "",
                    "    onSelectMenuItem = (index, type) => {",
                    "        const { value } = this.props;",
                    "        const clonedValue = value ? value.clone() : moment('00:00:00', 'HH:mm:ss', true);",
                    "        switch (type) {",
                    "            case 'hour':",
                    "                clonedValue.hour(index);",
                    "                break;",
                    "            case 'minute':",
                    "                clonedValue.minute(index);",
                    "                break;",
                    "            case 'second':",
                    "                clonedValue.second(index);",
                    "                break;",
                    "        }",
                    "        this.props.onSelect(clonedValue);",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            value,",
                    "            locale,",
                    "            className,",
                    "            disabled,",
                    "            showHour,",
                    "            showSecond,",
                    "            hourStep,",
                    "            minuteStep,",
                    "            secondStep,",
                    "            disabledHours,",
                    "            disabledMinutes,",
                    "            disabledSeconds,",
                    "            ...others } = this.props;",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}time-picker-panel`]: true,",
                    "            [`${prefix}time-picker-panel-col-3`]: showHour && showSecond,",
                    "            [`${prefix}time-picker-panel-col-2`]: !showHour || !showSecond,",
                    "        }, className);",
                    "",
                    "        const commonProps = {",
                    "            prefix,",
                    "            disabled,",
                    "            onSelect: this.onSelectMenuItem,",
                    "        };",
                    "",
                    "        let activeHour;",
                    "        let activeMinute;",
                    "        let activeSecond;",
                    "",
                    "        if (value && moment.isMoment(value)) {",
                    "            activeHour = value.hour();",
                    "            activeMinute = value.minute();",
                    "            activeSecond = value.second();",
                    "        }",
                    "",
                    "        return (<div {...others} className={classNames}>",
                    "            {showHour ? <TimeMenu {...commonProps} activeIndex={activeHour} title={locale.hour} mode=\"hour\" step={hourStep} disabledItems={disabledHours} /> : null}",
                    "            <TimeMenu {...commonProps} activeIndex={activeMinute} title={locale.minute} mode=\"minute\" step={minuteStep} disabledItems={disabledMinutes} />",
                    "            {showSecond ? <TimeMenu {...commonProps} activeIndex={activeSecond} title={locale.second} step={secondStep} mode=\"second\" disabledItems={disabledSeconds} /> : null}",
                    "        </div>);",
                    "    }",
                    "}",
                    "",
                    "export default TimePickerPanel;"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$time-picker-prefix}-body[dir=\"rtl\"] {",
                    "    #{$time-picker-prefix}-menu {",
                    "        float: right;",
                    "        &:not(:last-child) {",
                    "            border-right: none;",
                    "            border-left: $time-picker-menu-border-width $line-solid $time-picker-menu-border-color;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../input/style.js';",
                    "import '../overlay/style.js';",
                    "import './main.scss';"
                ]
            },
            "time-picker.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classnames from 'classnames';",
                    "import moment from 'moment';",
                    "import Input from '../input';",
                    "import Overlay from '../overlay';",
                    "import locale from '../locale/zh-cn';",
                    "import { func, obj }  from '../util';",
                    "import TimePickerPanel from './panel';",
                    "import { checkDateValue, formatDateValue } from './utils';",
                    "",
                    "const { Popup } = Overlay;",
                    "const { noop } = func;",
                    "const timePickerLocale = locale.TimePicker;",
                    "",
                    "/**",
                    " * TimePicker",
                    " */",
                    "export default class TimePicker extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        rtl: PropTypes.bool,",
                    "        /**",
                    "         * 按钮的文案",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 输入框状态",
                    "         */",
                    "        state: PropTypes.oneOf(['error', 'success']),",
                    "        /**",
                    "         * 输入框提示",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 时间值（moment 对象或时间字符串，受控状态使用）",
                    "         */",
                    "        value: checkDateValue,",
                    "        /**",
                    "         * 时间初值（moment 对象或时间字符串，非受控状态使用）",
                    "         */",
                    "        defaultValue: checkDateValue,",
                    "        /**",
                    "         * 时间选择框的尺寸",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 是否允许清空时间",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 时间的格式",
                    "         * https://momentjs.com/docs/#/parsing/string-format/",
                    "         */",
                    "        format: PropTypes.string,",
                    "        /**",
                    "         * 小时选项步长",
                    "         */",
                    "        hourStep: PropTypes.number,",
                    "        /**",
                    "         * 分钟选项步长",
                    "         */",
                    "        minuteStep: PropTypes.number,",
                    "        /**",
                    "         * 秒钟选项步长",
                    "         */",
                    "        secondStep: PropTypes.number,",
                    "        /**",
                    "         * 禁用小时函数",
                    "         * @param {Number} index 时 0 - 23",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledHours: PropTypes.func,",
                    "        /**",
                    "         * 禁用分钟函数",
                    "         * @param {Number} index 分 0 - 59",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledMinutes: PropTypes.func,",
                    "        /**",
                    "         * 禁用秒钟函数",
                    "         * @param {Number} index 秒 0 - 59",
                    "         * @return {Boolean} 是否禁用",
                    "         */",
                    "        disabledSeconds: PropTypes.func,",
                    "        /**",
                    "         * 弹层是否显示（受控）",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层默认是否显示（非受控）",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 弹层容器",
                    "         * @param {Object} target 目标节点",
                    "         * @return {ReactNode} 容器节点",
                    "         */",
                    "        popupContainer: PropTypes.func,",
                    "        /**",
                    "         * 弹层对齐方式, 详情见Overlay 文档",
                    "         */",
                    "        popupAlign: PropTypes.string,",
                    "        /**",
                    "         * 弹层触发方式",
                    "         */",
                    "        popupTriggerType: PropTypes.oneOf(['click', 'hover']),",
                    "        /**",
                    "         * 弹层展示状态变化时的回调",
                    "         * @param {Boolean} visible 弹层是否隐藏和显示",
                    "         * @param {String} reason 触发弹层显示和隐藏的来源",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 弹层自定义样式",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 弹层自定义样式类",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 弹层属性",
                    "         */",
                    "        popupProps: PropTypes.object,",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 时间值改变时的回调",
                    "         * @param {Object|String} value 时间对象或时间字符串",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        className: PropTypes.string,",
                    "    }",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        rtl: false,",
                    "        locale: timePickerLocale,",
                    "        size: 'medium',",
                    "        format: 'HH:mm:ss',",
                    "        hasClear: true,",
                    "        disabled: false,",
                    "        popupAlign: 'tl tl',",
                    "        popupTriggerType: 'click',",
                    "        onChange: noop,",
                    "        onVisibleChange: noop,",
                    "    }",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "        const value = formatDateValue(props.value || props.defaultValue, props.format);",
                    "        this.inputAsString = (typeof (props.value || props.defaultValue) === 'string');",
                    "        this.state = {",
                    "            value,",
                    "            inputStr: '',",
                    "            inputing: false,",
                    "            visible: props.visible || props.defaultVisible,",
                    "        };",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps) {",
                    "            const value = formatDateValue(nextProps.value, nextProps.format || this.props.format);",
                    "            this.setState({",
                    "                value,",
                    "            });",
                    "        }",
                    "",
                    "        if ('visible' in nextProps) {",
                    "            this.setState({",
                    "                visible: nextProps.visible,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onValueChange(newValue) {",
                    "        const ret = (this.inputAsString && newValue) ? newValue.format(this.props.format) : newValue;",
                    "        this.props.onChange(ret);",
                    "    }",
                    "",
                    "    onClearValue = () => {",
                    "        this.setState({",
                    "            value: null,",
                    "        });",
                    "        if (this.state.value) {",
                    "            this.onValueChange(null);",
                    "        }",
                    "    }",
                    "",
                    "    onInputChange = (inputValue, e, eventType) => {",
                    "        if (!('value' in this.props)) {",
                    "            if (eventType === 'clear' || !inputValue) {",
                    "                e.stopPropagation();",
                    "                this.onClearValue();",
                    "            }",
                    "",
                    "            this.setState({",
                    "                inputStr: inputValue,",
                    "                inputing: true,",
                    "            });",
                    "        } else if (eventType === 'clear') {",
                    "            // 受控状态下用户点击 clear",
                    "            e.stopPropagation();",
                    "            this.onValueChange(null);",
                    "        }",
                    "    }",
                    "",
                    "    onInputBlur = () => {",
                    "        const { value, inputStr } = this.state;",
                    "        if (!value && inputStr) {",
                    "            const { format } = this.props;",
                    "            const parsed = moment(inputStr, format, true);",
                    "            if (parsed.isValid()) {",
                    "                this.setState({",
                    "                    value: parsed,",
                    "                    inputStr: '',",
                    "                });",
                    "                this.onValueChange(parsed);",
                    "            }",
                    "            this.setState({",
                    "                inputing: false,",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onTimePanelSelect = (value) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value,",
                    "                inputing: false,",
                    "            });",
                    "        }",
                    "        if (!this.state.value || value.valueOf() !== this.state.value.valueOf()) {",
                    "            this.onValueChange(value);",
                    "        }",
                    "    }",
                    "",
                    "    onVisibleChange = (visible, reason) => {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible,",
                    "            });",
                    "        }",
                    "        this.props.onVisibleChange(visible, reason);",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            label,",
                    "            state,",
                    "            placeholder,",
                    "            size,",
                    "            format,",
                    "            hasClear,",
                    "            hourStep,",
                    "            minuteStep,",
                    "            secondStep,",
                    "            disabledHours,",
                    "            disabledMinutes,",
                    "            disabledSeconds,",
                    "            popupAlign,",
                    "            popupTriggerType,",
                    "            popupContainer,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            popupProps,",
                    "            disabled,",
                    "            className,",
                    "            locale,",
                    "            rtl,",
                    "            ...others } = this.props;",
                    "",
                    "        const { value, inputStr, inputing, visible } = this.state;",
                    "",
                    "        const triggerCls = classnames({",
                    "            [`${prefix}time-picker-trigger`]: true,",
                    "        });",
                    "",
                    "        if (rtl) {",
                    "            others.dir = 'rtl';",
                    "        }",
                    "",
                    "        const inputValue = inputing ? inputStr : (value && value.format(format) || '');",
                    "        const sharedInputProps = {",
                    "            size,",
                    "            disabled,",
                    "            value: inputValue,",
                    "            hasClear: value && hasClear,",
                    "            onChange: this.onInputChange,",
                    "            onBlur: this.onInputBlur,",
                    "            onPressEnter: this.onInputBlur,",
                    "            hint: 'clock',",
                    "        };",
                    "",
                    "        const triggerInput = (<div className={triggerCls}>",
                    "            <Input",
                    "                {...sharedInputProps}",
                    "                label={label}",
                    "                state={state}",
                    "                placeholder={placeholder || locale.placeholder}",
                    "                className={`${prefix}time-picker-input`} />",
                    "        </div>);",
                    "",
                    "        const panelProps = {",
                    "            prefix,",
                    "            locale,",
                    "            value,",
                    "            disabled,",
                    "            showHour: format.indexOf('H') > -1,",
                    "            showSecond: format.indexOf('s') > -1,",
                    "            hourStep,",
                    "            minuteStep,",
                    "            secondStep,",
                    "            disabledHours,",
                    "            disabledMinutes,",
                    "            disabledSeconds,",
                    "            onSelect: this.onTimePanelSelect,",
                    "        };",
                    "",
                    "        const classNames = classnames({",
                    "            [`${prefix}time-picker`]: true,",
                    "            [`${prefix}time-picker-${size}`]: size,",
                    "            [`${prefix}disabled`]: disabled,",
                    "        }, className);",
                    "",
                    "        return (<div {...obj.pickOthers(TimePicker.propTypes, others)} className={classNames}>",
                    "            <Popup",
                    "                {...popupProps}",
                    "                autoFocus",
                    "                visible={visible}",
                    "                onVisibleChange={this.onVisibleChange}",
                    "                trigger={triggerInput}",
                    "                container={popupContainer}",
                    "                disabled={disabled}",
                    "                align={popupAlign}",
                    "                triggerType={popupTriggerType}",
                    "                style={popupStyle}",
                    "                className={popupClassName}>",
                    "                <div dir={others.dir} className={`${prefix}time-picker-body`}>",
                    "                    <div className={`${prefix}time-picker-panel-header`}>",
                    "                        <Input",
                    "                            {...sharedInputProps}",
                    "                            placeholder={format}",
                    "                            className={`${prefix}time-picker-panel-input`} />",
                    "                    </div>",
                    "                    <TimePickerPanel {...panelProps} />",
                    "                </div>",
                    "            </Popup>",
                    "        </div>);",
                    "    }",
                    "}"
                ]
            },
            "module": {
                "time-menu.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classnames from 'classnames';",
                        "",
                        "function scrollTo(element, to, duration) {",
                        "    const requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout(...params) {",
                        "        return setTimeout(params[0], 10);",
                        "    };",
                        "",
                        "    if (duration <= 0) {",
                        "        element.scrollTop = to;",
                        "        return;",
                        "    }",
                        "",
                        "    const difference = to - element.scrollTop;",
                        "    const perTick = difference / duration * 10;",
                        "",
                        "    requestAnimationFrame(() => {",
                        "        element.scrollTop = element.scrollTop + perTick;",
                        "",
                        "        if (element.scrollTop === to) {",
                        "            return;",
                        "        }",
                        "",
                        "        scrollTo(element, to, duration - 10);",
                        "    });",
                        "}",
                        "",
                        "const noop = () => {};",
                        "",
                        "class TimeMenu extends React.Component {",
                        "",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        title: PropTypes.node,",
                        "        mode: PropTypes.oneOf(['hour', 'minute', 'second']),",
                        "        step: PropTypes.number,",
                        "        activeIndex: PropTypes.number,",
                        "        disabledItems: PropTypes.func,",
                        "        onSelect: PropTypes.func,",
                        "        disabled: PropTypes.bool,",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        step: 1,",
                        "        disabledItems: () => false,",
                        "        onSelect: () => {},",
                        "        disabled: false,",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.scrollToSelected(0);",
                        "    }",
                        "",
                        "    componentDidUpdate(prevProps) {",
                        "        if (prevProps.activeIndex !== this.props.activeIndex) {",
                        "            this.scrollToSelected(120);",
                        "        }",
                        "    }",
                        "",
                        "    scrollToSelected(duration = 0) {",
                        "        const { activeIndex, step } = this.props;",
                        "        const targetIndex = Math.floor((activeIndex || 0) / step);",
                        "        const firstItem = this.menu.children[targetIndex];",
                        "        const offsetTo = firstItem.offsetTop;",
                        "        scrollTo(this.menu, offsetTo, duration);",
                        "    }",
                        "",
                        "    _menuRefHandler = ref => {",
                        "        this.menu = ref;",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, title, mode, activeIndex, step, disabled, disabledItems, onSelect } = this.props;",
                        "        const total = mode === 'hour' ? 24 : 60;",
                        "        const list = [];",
                        "        for (let i = 0; i < total; i++) {",
                        "            if (i % step === 0) {",
                        "                const isDisabled = disabled || disabledItems(i);",
                        "                const itemCls = classnames({",
                        "                    [`${prefix}time-picker-menu-item`]: true,",
                        "                    [`${prefix}disabled`]: isDisabled,",
                        "                    [`${prefix}selected`]: i === activeIndex,",
                        "                });",
                        "                const onClick = isDisabled ? noop : () => onSelect(i, mode);",
                        "                list.push(<li key={i} title={i} className={itemCls} onClick={onClick}>{i}</li>);",
                        "            }",
                        "        }",
                        "",
                        "        const menuTitle = title ? <div className={`${prefix}time-picker-menu-title`}>{title}</div> : null;",
                        "",
                        "        return (<div className={`${prefix}time-picker-menu`}>",
                        "            {menuTitle}",
                        "            <ul className={`${prefix}time-picker-menu-${mode}`} ref={this._menuRefHandler}>{list}</ul>",
                        "        </div>);",
                        "    }",
                        "}",
                        "",
                        "export default TimeMenu;"
                    ]
                }
            },
            "scss": {
                "menu.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$time-picker-prefix}-menu {",
                        "    float: left;",
                        "    text-align: center;",
                        "",
                        "    &:not(:last-child) {",
                        "        border-right: $time-picker-menu-border-width $line-solid $time-picker-menu-border-color;",
                        "    }",
                        "",
                        "    &-title {",
                        "        cursor: default;",
                        "        height: $time-picker-menu-title-height;",
                        "        line-height: $time-picker-menu-title-height;",
                        "        font-size: $time-picker-menu-title-font-size;",
                        "        font-weight: $time-pikcer-menu-title-font-weight;",
                        "        color: $time-picker-menu-title-color;",
                        "        background: $time-picker-menu-title-background;",
                        "    }",
                        "",
                        "    ul {",
                        "        position: relative;",
                        "        overflow-y: auto;",
                        "        list-style: none;",
                        "        margin: 0;",
                        "        padding: 0;",
                        "        font-size: $time-picker-menu-item-font-size;",
                        "        height: $time-picker-menu-item-height * 7;",
                        "    }",
                        "",
                        "    &-item {",
                        "        cursor: pointer;",
                        "        height: $time-picker-menu-item-height;",
                        "        line-height: $time-picker-menu-item-height;",
                        "        transition: background .3s ease-out;",
                        "        color: $time-picker-menu-item-color;",
                        "        background: $time-picker-menu-item-background;",
                        "",
                        "        &:hover {",
                        "            color: $time-picker-menu-item-color-hover;",
                        "            background: $time-picker-menu-item-background-hover;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}selected {",
                        "            font-weight: $time-picker-menu-item-font-weight-selected;",
                        "            color: $time-picker-menu-item-color-selected;",
                        "            background: $time-picker-menu-item-background-selected;",
                        "        }",
                        "",
                        "        &.#{$css-prefix}disabled {",
                        "            cursor: not-allowed;",
                        "            color: $time-picker-menu-item-color-disabled;",
                        "            background: $time-picker-menu-item-background-disabled;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "panel.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$time-picker-prefix}-panel {",
                        "    @include box-sizing;",
                        "    @include clearfix;",
                        "",
                        "    &-header {",
                        "        border-bottom: $line-1 $line-solid $time-picker-panel-border-color;",
                        "    }",
                        "",
                        "    &-input.#{$css-prefix}input {",
                        "        width: 100%;",
                        "        padding: 6px;",
                        "        border-color: $color-transparent;",
                        "        vertical-align: middle;",
                        "    }",
                        "",
                        "    &-col-3 {",
                        "        #{$time-picker-prefix}-menu {",
                        "            width: calc(100% / 3);",
                        "        }",
                        "    }",
                        "",
                        "    &-col-2 {",
                        "        #{$time-picker-prefix}-menu {",
                        "            width: 50%;",
                        "        }",
                        "    }",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module time-picker: 时间选择",
                        "/// @tag TimePicker",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $time-picker-",
                        "/// @classPrefix {prefix}-time-picker",
                        "/// @order {\"size/input\":10,\"size/panel\":11,\"size/menu\":12,\"size/menu title\":13,\"size/menu item\":14,\"statement/normal\":10,\"statement/normal/input\":100,\"statement/normal/panel\":101,\"statement/normal/menu\":102,\"statement/normal/menu title\":103,\"statement/normal/menu item\":104,\"statement/hover\":11,\"statement/hover/input\":110,\"statement/hover/menu item\":111,\"statement/selected\":12,\"statement/selected/menu item\":120,\"statement/disabled\":13,\"statement/disabled/menu item\":130}",
                        "////",
                        "",
                        "$time-picker-prefix: '.' + $css-prefix + 'time-picker';",
                        "",
                        "// global",
                        "$time-picker-panel-border-color: $popup-local-border-color;",
                        "$time-picker-panel-corner: $popup-local-corner;",
                        "$time-picker-panel-shadow: $popup-local-shadow;",
                        "",
                        "// 下拉面板",
                        "// --------------------------------------------------",
                        "",
                        "/// width",
                        "/// @namespace size/panel",
                        "$time-picker-panel-width: $s-50 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/panel",
                        "$time-picker-panel-background: $color-white !default;",
                        "",
                        "// 时间菜单",
                        "// --------------------------------------------------",
                        "",
                        "/// border",
                        "/// @namespace size/menu",
                        "$time-picker-menu-border-width: $line-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/menu title",
                        "$time-picker-menu-title-font-size: $font-size-caption !default;",
                        "",
                        "/// text",
                        "/// @namespace size/menu item",
                        "$time-picker-menu-item-font-size: $font-size-caption !default;",
                        "",
                        "/// height",
                        "/// @namespace size/menu title",
                        "$time-picker-menu-title-height: $s-7 !default;",
                        "",
                        "/// height",
                        "/// @namespace size/menu item",
                        "$time-picker-menu-item-height: $s-7 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/menu",
                        "$time-picker-menu-border-color: $color-line1-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/menu title",
                        "$time-picker-menu-title-color: $color-text1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/menu title",
                        "$time-picker-menu-title-background: $color-white !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/normal/menu title",
                        "$time-pikcer-menu-title-font-weight: $font-weight-2 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/menu item",
                        "$time-picker-menu-item-color: $color-text1-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/menu item",
                        "$time-picker-menu-item-color-hover: $color-text1-4 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/selected/menu item",
                        "$time-picker-menu-item-color-selected: $color-text1-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/disabled/menu item",
                        "$time-picker-menu-item-color-disabled: $color-text1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/menu item",
                        "$time-picker-menu-item-background: $color-white !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/menu item",
                        "$time-picker-menu-item-background-hover: $color-fill1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/menu item",
                        "$time-picker-menu-item-background-selected: $color-fill1-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/menu item",
                        "$time-picker-menu-item-background-disabled: $color-white !default;",
                        "",
                        "/// font weight",
                        "/// @namespace statement/selected/menu item",
                        "$time-picker-menu-item-font-weight-selected: $font-weight-3 !default;"
                    ]
                }
            },
            "utils": {
                "index.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import moment from 'moment';",
                        "",
                        "// 检查传入值是否为 moment 对象",
                        "export function checkMomentObj(props, propName, componentName) {",
                        "    if (props[propName] && !moment.isMoment(props[propName])) {",
                        "        return new Error(`Invalid prop ${propName} supplied to ${componentName}. Required a moment object`);",
                        "    }",
                        "}",
                        "",
                        "// 检查传入值是否为 moment 对象或时间字符串，字符串不检测是否为日期字符串",
                        "export function checkDateValue(props, propName, componentName) {",
                        "    if (props[propName] && (!moment.isMoment(props[propName])) && typeof props[propName] !== 'string') {",
                        "        return new Error(`Invalid prop ${propName} supplied to ${componentName}. Required a moment object or format date string!`);",
                        "    }",
                        "}",
                        "",
                        "export function formatDateValue(value, format) {",
                        "    const val = typeof value === 'string' ? moment(value, format, true) : value;",
                        "    if (val && moment.isMoment(val) && val.isValid()) {",
                        "        return val;",
                        "    }",
                        "    return null;",
                        "}"
                    ]
                }
            }
        },
        "timeline": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Timeline from './view/timeline';",
                    "import TimelineItem from './view/timeline-item';",
                    "",
                    "Timeline.Item = TimelineItem;",
                    "",
                    "export default Timeline;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@import \"scss/variable\";",
                    "@import \"scss/normalize\";",
                    "@import \"scss/mixin\";",
                    "@import \"scss/util\";",
                    "@import \"./rtl.scss\";",
                    "",
                    "#{$timeline-prefix} {",
                    "    & {",
                    "        margin: 0;",
                    "        padding: 0;",
                    "        list-style: none;",
                    "    }",
                    "}",
                    "",
                    "#{$timeline-prefix}-item {",
                    "    &-folder {",
                    "        padding-left: $timeline-item-content-margin-left + $timeline-item-node-size;",
                    "        padding-top: $timeline-item-folder-margin-top;",
                    "        padding-bottom: $timeline-item-folder-margin-bottom;",
                    "        font-size: $timeline-item-folder-font-size;",
                    "        line-height: $timeline-item-folder-font-size + 4;",
                    "        position: relative;",
                    "        /* min-height: auto !important; */",
                    "    }",
                    "",
                    "    &-dot-tail {",
                    "        position: absolute;",
                    "        top: 0;",
                    "        left: $timeline-item-node-size / 2;",
                    "        height: 100%;",
                    "        border-top: 0;",
                    "        border-bottom: 0;",
                    "        border-right: 0;",
                    "        border-left: $timeline-item-tail-size dotted $timeline-item-tail-color;",
                    "    }",
                    "",
                    "    &-dot-tail-solid {",
                    "        border-style: solid;",
                    "    }",
                    "",
                    "    /* 时间轴左边存在内容的情况 */",
                    "    &-has-left-content {",
                    "        &#{$timeline-prefix}-item-folder {",
                    "            margin-left: $timeline-item-left-content-width;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$timeline-prefix}-item-done {",
                    "    @include node-state('ltr', $timeline-item-done-background, $timeline-item-done-color, $timeline-item-done-dot-size);",
                    "}",
                    "",
                    "#{$timeline-prefix}-item-process {",
                    "    @include node-state('ltr', $timeline-item-process-background, $timeline-item-process-color, $timeline-item-process-dot-size);",
                    "}",
                    "",
                    "#{$timeline-prefix}-item-success {",
                    "    @include node-state('ltr', $timeline-item-success-background, $timeline-item-success-color, $timeline-item-success-dot-size);",
                    "}",
                    "",
                    "#{$timeline-prefix}-item-error {",
                    "    @include node-state('ltr', $timeline-item-error-background, $timeline-item-error-color, $timeline-item-error-dot-size);",
                    "}",
                    "",
                    "#{$timeline-prefix}-item-last {",
                    "    #{$timeline-prefix}-item-tail {",
                    "        display: none;",
                    "    }",
                    "}",
                    "",
                    "#{$timeline-prefix}-item-has-left-content {",
                    "    min-height: $s-12;",
                    "}",
                    "#{$timeline-prefix}-item-folder#{$timeline-prefix}-item-has-left-content {",
                    "    min-height: auto;",
                    "}"
                ]
            },
            "rtl.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "#{$timeline-prefix}[dir='rtl'] {",
                    "    #{$timeline-prefix}-item {",
                    "        &-folder {",
                    "            padding-left: 0;",
                    "            padding-right: $timeline-item-content-margin-left + $timeline-item-node-size;",
                    "        }",
                    "",
                    "        &-dot-tail {",
                    "            left: auto;",
                    "            right: $timeline-item-node-size / 2;",
                    "            border-left: none;",
                    "            border-right: $timeline-item-tail-size dotted $timeline-item-tail-color;",
                    "        }",
                    "        /* 时间轴左边存在内容的情况 */",
                    "        &-has-left-content {",
                    "            &#{$timeline-prefix}-item-folder {",
                    "                margin-left: 0;",
                    "                margin-right: $timeline-item-left-content-width;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    #{$timeline-prefix}-item-done {",
                    "        @include node-state('rtl', $timeline-item-done-background, $timeline-item-done-color, $timeline-item-done-dot-size);",
                    "    }",
                    "",
                    "    #{$timeline-prefix}-item-process {",
                    "        @include node-state('rtl', $timeline-item-process-background, $timeline-item-process-color, $timeline-item-process-dot-size);",
                    "    }",
                    "",
                    "    #{$timeline-prefix}-item-success {",
                    "        @include node-state('rtl', $timeline-item-success-background, $timeline-item-success-color, $timeline-item-success-dot-size);",
                    "    }",
                    "",
                    "    #{$timeline-prefix}-item-error {",
                    "        @include node-state('rtl', $timeline-item-error-background, $timeline-item-error-color, $timeline-item-error-dot-size);",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../button/style.js';",
                    "import '../animate/style.js';",
                    "import './main.scss';"
                ]
            },
            "locale": {
                "index.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "const locale = {",
                        "    expand: '展开',",
                        "    collapse: '收起',",
                        "};",
                        "",
                        "export default locale;"
                    ]
                }
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin node-state(",
                        "    $direction,",
                        "    $background,",
                        "    $color,",
                        "    $dot-size: $s-2",
                        ") {",
                        "    position: relative;",
                        "    #{$timeline-prefix}-item-timeline {",
                        "        position: absolute;",
                        "        @if $direction == 'rtl' {",
                        "            left: auto;",
                        "            right: 0;",
                        "        } @else {",
                        "            left: 0;",
                        "        }",
                        "        top: 0;",
                        "        height: 100%;",
                        "",
                        "        #{$timeline-prefix}-item-node {",
                        "            position: relative;",
                        "            width: $timeline-item-node-size;",
                        "            height: $timeline-item-node-size + $timeline-item-node-padding * 2;",
                        "            padding: $timeline-item-node-padding 0;",
                        "            text-align: center;",
                        "            @if $direction == 'rtl' {",
                        "                float: right;",
                        "            } @else {",
                        "                float: left;",
                        "            }",
                        "        }",
                        "",
                        "        #{$timeline-prefix}-item-node#{$timeline-prefix}-item-node-custom {",
                        "            width: $timeline-item-custom-node-size;",
                        "            height: auto;",
                        "            font-size: $timeline-item-custom-node-font-size;",
                        "            word-break: break-all;",
                        "            @if $direction == 'rtl' {",
                        "                margin-right: calc(-#{($timeline-item-custom-node-size - $timeline-item-node-size) / 2});",
                        "                margin-left: 0;",
                        "            } @else {",
                        "                margin-left: calc(-#{($timeline-item-custom-node-size - $timeline-item-node-size) / 2});",
                        "            }",
                        "            line-height: 1;",
                        "        }",
                        "",
                        "        #{$timeline-prefix}-item-dot {",
                        "            display: block;",
                        "            position: absolute;",
                        "            width: $dot-size;",
                        "            height: $dot-size;",
                        "            border-radius: 100%;",
                        "            top: 50%;",
                        "            margin-top: -$dot-size/2;",
                        "            left: 50%;",
                        "            margin-left: -$dot-size/2;",
                        "        }",
                        "",
                        "        #{$timeline-prefix}-item-icon {",
                        "            display: block;",
                        "            position: absolute;",
                        "            width: $timeline-item-icon-size + 4;",
                        "            height: $timeline-item-icon-size + 4;",
                        "            line-height: $timeline-item-icon-size + 4;",
                        "            border-radius: 100%;",
                        "            top: 50%;",
                        "            left: 50%;",
                        "            margin-top: -$timeline-item-icon-size/2 - 2;",
                        "            margin-left: -$timeline-item-icon-size/2 - 2;",
                        "",
                        "            #{$timeline-icon-prefix} {",
                        "                @include icon-size($timeline-item-icon-size);",
                        "            }",
                        "        }",
                        "",
                        "        #{$timeline-prefix}-item-tail {",
                        "            position: absolute;",
                        "            width: auto;",
                        "            height: calc(100% - #{$timeline-item-node-size + 2*$timeline-item-node-padding});",
                        "            top: $timeline-item-node-size + 2*$timeline-item-node-padding;",
                        "            @if $direction == 'rtl' {",
                        "                left: auto;",
                        "                right: $timeline-item-node-size/2;",
                        "            } @else {",
                        "                left: $timeline-item-node-size/2;",
                        "            }",
                        "",
                        "            i {",
                        "                display: inline-block;",
                        "                vertical-align: top;",
                        "                height: 100%;",
                        "                width: $timeline-item-tail-size;",
                        "                position: relative;",
                        "                background: $timeline-item-tail-color;",
                        "                -webkit-transition: all .4s ease;",
                        "                transition: all .4s ease;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    #{$timeline-prefix}-item-content {",
                        "        display: inline-block;",
                        "        @if $direction == 'rtl' {",
                        "            margin-right: $timeline-item-content-margin-left + $timeline-item-node-size;",
                        "            margin-left: 0;",
                        "        } @else {",
                        "            margin-left: $timeline-item-content-margin-left + $timeline-item-node-size;",
                        "        }",
                        "        #{$timeline-prefix}-item-title {",
                        "            margin: 0;",
                        "            font-size: $timeline-item-title-font-size;",
                        "            font-weight: $timeline-item-title-font-weight;",
                        "            line-height: $timeline-item-title-font-size + 4;",
                        "            margin-top: $timeline-item-title-margin-top;",
                        "            overflow: hidden;",
                        "            text-overflow: ellipsis;",
                        "            white-space: nowrap;",
                        "            color: $timeline-item-title-color;",
                        "            @if $direction == 'rtl' {",
                        "                text-align: right;",
                        "            } @else {",
                        "                text-align: left;",
                        "            }",
                        "        }",
                        "",
                        "        #{$timeline-prefix}-item-body {",
                        "            margin: 0;",
                        "            margin-top: $timeline-item-body-margin-top;",
                        "            font-size: $timeline-item-body-font-size;",
                        "            line-height: $timeline-item-body-font-size + 4;",
                        "            color: $timeline-item-body-color;",
                        "            @if $direction == 'rtl' {",
                        "                text-align: right;",
                        "            } @else {",
                        "                text-align: left;",
                        "            }",
                        "        }",
                        "",
                        "        #{$timeline-prefix}-item-time {",
                        "            margin: 0;",
                        "            margin-top: $timeline-item-time-margin-top;",
                        "            margin-bottom: $timeline-item-time-margin-bottom;",
                        "            font-size: $timeline-item-time-font-size;",
                        "            color: $timeline-item-time-color;",
                        "            @if $direction == 'rtl' {",
                        "                text-align: right;",
                        "            } @else {",
                        "                text-align: left;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    // 时间轴左边存在内容的情况",
                        "    &#{$timeline-prefix}-item-has-left-content {",
                        "        & > #{$timeline-prefix}-item-left-content {",
                        "            position: absolute;",
                        "            width: $timeline-item-left-content-width;",
                        "            display: inline-block;",
                        "            font-size: $timeline-item-left-body-font-size;",
                        "            color: $timeline-item-left-body-color;",
                        "            line-height: $timeline-item-left-body-font-size + 4;",
                        "            margin-top: $timeline-item-title-margin-top;",
                        "            @if $direction == 'rtl' {",
                        "                text-align: left;",
                        "                padding-left: $timeline-item-content-margin-left;",
                        "                padding-right: 0;",
                        "            } @else {",
                        "                text-align: right;",
                        "                padding-right: $timeline-item-content-margin-left;",
                        "            }",
                        "            p {",
                        "                word-break: break-word;",
                        "            }",
                        "        }",
                        "        & > #{$timeline-prefix}-item-timeline {",
                        "            @if $direction == 'rtl' {",
                        "                margin-right: $timeline-item-left-content-width;",
                        "                margin-left: 0;",
                        "            } @else {",
                        "                margin-left: $timeline-item-left-content-width;",
                        "            }",
                        "        }",
                        "        & > #{$timeline-prefix}-item-content {",
                        "            @if $direction == 'rtl' {",
                        "                margin-right: $timeline-item-left-content-width + $timeline-item-content-margin-left + $timeline-item-node-size;",
                        "                margin-left: 0;",
                        "            } @else {",
                        "                margin-left: $timeline-item-left-content-width + $timeline-item-content-margin-left + $timeline-item-node-size;",
                        "            }",
                        "        }",
                        "    }",
                        "    #{$timeline-prefix}-item-dot {",
                        "        background: $background;",
                        "    }",
                        "",
                        "    #{$timeline-prefix}-item-icon {",
                        "        background: $background;",
                        "        color: $color;",
                        "    }",
                        "}"
                    ]
                },
                "normalize.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$timeline-prefix} {",
                        "    *,",
                        "    *:before,",
                        "    *:after {",
                        "        box-sizing: border-box;",
                        "    }",
                        "",
                        "    &,",
                        "    &:before,",
                        "    &:after {",
                        "        box-sizing: border-box;",
                        "    }",
                        "",
                        "    ul {",
                        "        margin: 0;",
                        "        padding: 0;",
                        "        list-style: none;",
                        "    }",
                        "",
                        "    p {",
                        "        margin: 0;",
                        "    }",
                        "}"
                    ]
                },
                "util.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "#{$timeline-prefix}-hide {",
                        "    display: none;",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module timeline: 时间轴",
                        "/// @tag Timeline",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $timeline-",
                        "/// @classPrefix {prefix}-timeline",
                        "/// @order {\"size/node\":10,\"size/divider\":11,\"size/content\":12,\"size/expand button\":13,\"statement/normal\":10,\"statement/normal/content\":100,\"statement/normal/divider\":101,\"statement/normal/expand button\":102,\"statement/hover\":11,\"statement/hover/expand button\":110,\"statement/done\":12,\"statement/done/node\":120,\"statement/process\":13,\"statement/process/node\":130,\"statement/success\":14,\"statement/success/node\":140,\"statement/error\":15,\"statement/error/node\":150}",
                        "////",
                        "",
                        "$timeline-prefix: '.' + $css-prefix + 'timeline';",
                        "",
                        "$timeline-icon-prefix: '.' + $css-prefix + 'icon';",
                        "",
                        "/// size",
                        "/// @namespace size/node",
                        "$timeline-item-node-size: $s-4 !default;",
                        "",
                        "/// custom node size",
                        "/// @namespace size/node",
                        "$timeline-item-custom-node-size: $s-10 !default;",
                        "",
                        "/// custom node font size",
                        "/// @namespace size/node",
                        "$timeline-item-custom-node-font-size: $font-size-caption !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/node",
                        "$timeline-item-node-padding: $s-1 !default;",
                        "",
                        "/// dot size",
                        "/// @namespace size/node",
                        "$timeline-item-dot-size: $s-2 !default;",
                        "",
                        "/// icon size",
                        "/// @namespace size/node",
                        "$timeline-item-icon-size: $icon-xs !default;",
                        "",
                        "/// line width",
                        "/// @namespace size/divider",
                        "$timeline-item-tail-size: $line-1 !default;",
                        "",
                        "/// left content width",
                        "/// @namespace size/content",
                        "$timeline-item-left-content-width: $s-20 !default;",
                        "",
                        "/// margin (l)",
                        "/// @namespace size/content",
                        "$timeline-item-content-margin-left: $s-3 !default;",
                        "",
                        "/// margin (t)",
                        "/// @namespace size/content",
                        "$timeline-item-body-margin-top: $s-2 !default;",
                        "",
                        "/// title text",
                        "/// @namespace size/content",
                        "$timeline-item-title-font-size: $font-size-body-1 !default;",
                        "",
                        "/// title weight",
                        "/// @namespace size/content",
                        "$timeline-item-title-font-weight: $font-weight-3 !default;",
                        "",
                        "/// title margin (t)",
                        "/// @namespace size/content",
                        "$timeline-item-title-margin-top: $s-1 !default;",
                        "",
                        "/// time margin (t)",
                        "/// @namespace size/content",
                        "$timeline-item-time-margin-top: $s-1 !default;",
                        "",
                        "/// time margin (b)",
                        "/// @namespace size/content",
                        "$timeline-item-time-margin-bottom: $s-3 !default;",
                        "",
                        "/// body text",
                        "/// @namespace size/content",
                        "$timeline-item-body-font-size: $font-size-caption !default;",
                        "",
                        "/// left time text",
                        "/// @namespace size/content",
                        "$timeline-item-left-body-font-size: $font-size-caption !default;",
                        "",
                        "/// time text",
                        "/// @namespace size/content",
                        "$timeline-item-time-font-size: $font-size-caption !default;",
                        "",
                        "/// text",
                        "/// @namespace size/expand button",
                        "$timeline-item-folder-font-size: $font-size-caption !default;",
                        "",
                        "/// margin (t)",
                        "/// @namespace size/expand button",
                        "$timeline-item-folder-margin-top: $s-1 !default;",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/expand button",
                        "$timeline-item-folder-margin-bottom: $s-1 !default;",
                        "",
                        "/// title text",
                        "/// @namespace statement/normal/content",
                        "$timeline-item-title-color: $color-text1-4 !default;",
                        "",
                        "/// body text",
                        "/// @namespace statement/normal/content",
                        "$timeline-item-body-color: $color-text1-3 !default;",
                        "",
                        "/// left body text",
                        "/// @namespace statement/normal/content",
                        "$timeline-item-left-body-color: $color-text1-2 !default;",
                        "",
                        "/// time text",
                        "/// @namespace statement/normal/content",
                        "$timeline-item-time-color: $color-text1-2 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/divider",
                        "$timeline-item-tail-color: $color-line1-2 !default;",
                        "",
                        "/// dot size",
                        "/// @namespace statement/done/node",
                        "$timeline-item-done-dot-size: $s-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/done/node",
                        "$timeline-item-done-background: $color-line1-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/done/node",
                        "$timeline-item-done-color: $color-white !default;",
                        "",
                        "/// dot size",
                        "/// @namespace statement/process/node",
                        "$timeline-item-process-dot-size: $s-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/process/node",
                        "$timeline-item-process-background: $color-brand1-6 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/process/node",
                        "$timeline-item-process-color: $color-white !default;",
                        "",
                        "/// dot size",
                        "/// @namespace statement/success/node",
                        "$timeline-item-success-dot-size: $s-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/success/node",
                        "$timeline-item-success-background: $color-success-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/success/node",
                        "$timeline-item-success-color: $color-white !default;",
                        "",
                        "/// dot size",
                        "/// @namespace statement/error/node",
                        "$timeline-item-error-dot-size: $s-2 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/error/node",
                        "$timeline-item-error-background: $color-error-3 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/error/node",
                        "$timeline-item-error-color: $color-white !default;"
                    ]
                }
            },
            "view": {
                "timeline-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import Animate from '../../animate';",
                        "import Icon from '../../icon';",
                        "import Button from '../../button';",
                        "",
                        "const { Expand } = Animate;",
                        "/** Timeline.Item */",
                        "class TimelineItem extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        index: PropTypes.number,",
                        "        total: PropTypes.number,",
                        "        folderIndex: PropTypes.number,",
                        "        foldShow: PropTypes.bool,",
                        "        /**",
                        "         * 节点状态",
                        "         */",
                        "        state: PropTypes.oneOf(['done', 'process', 'error', 'success']),",
                        "        /**",
                        "         * 图标",
                        "         */",
                        "        icon: PropTypes.string,",
                        "        /**",
                        "         * 自定义时间轴节点",
                        "         */",
                        "        dot: PropTypes.node,",
                        "        /**",
                        "         * 格式化后的时间",
                        "         */",
                        "        time: PropTypes.node,",
                        "        /**",
                        "         * 标题",
                        "         */",
                        "        title: PropTypes.node,",
                        "        /**",
                        "         * 左侧时间",
                        "         */",
                        "        timeLeft: PropTypes.node,",
                        "        /**",
                        "         * 右侧内容",
                        "         */",
                        "        content: PropTypes.node,",
                        "        toggleFold: PropTypes.func,",
                        "        className: PropTypes.string,",
                        "        locale: PropTypes.object,",
                        "        /**",
                        "         * 动画",
                        "         */",
                        "        animation: PropTypes.bool",
                        "",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        state: 'done',",
                        "        toggleFold: () => { },",
                        "        animation: true",
                        "    }",
                        "",
                        "    toggleFold(folderIndex) {",
                        "        this.props.toggleFold(folderIndex);",
                        "    }",
                        "",
                        "    beforeEnter = () => {",
                        "        this['timeline-item'].style['min-height'] = 'auto';",
                        "    }",
                        "    beforeLeave = () => {",
                        "        this['timeline-item'].style['min-height'] = '48px'; // timeleft 节点最小高度",
                        "    }",
                        "    render() {",
                        "        const { prefix, className, state, icon, dot, time, title, timeLeft, content, index, total, folderIndex, foldShow, locale, animation, ...others } = this.props;",
                        "        const finalItemNode = dot ? dot : icon ? <span className={`${prefix}timeline-item-icon`}><Icon type={icon} size=\"xs\" /></span> : <span className={`${prefix}timeline-item-dot`}></span>;",
                        "        const itemCls = classNames({",
                        "            [`${prefix}timeline-item`]: true,",
                        "            [`${prefix}timeline-item-first`]: index === 0,",
                        "            [`${prefix}timeline-item-last`]: index === total - 1,",
                        "            [`${prefix}timeline-item-${state}`]: state,",
                        "            [`${prefix}timeline-item-folded`]: folderIndex,",
                        "            [`${prefix}timeline-item-unfolded`]: foldShow,",
                        "            [`${prefix}timeline-item-has-left-content`]: timeLeft,",
                        "            [className]: className",
                        "        });",
                        "        const folderCls = classNames({",
                        "            [`${prefix}timeline-item-folder`]: true,",
                        "            [`${prefix}timeline-item-has-left-content`]: timeLeft",
                        "        });",
                        "        const itemNodeCls = classNames({",
                        "            [`${prefix}timeline-item-node`]: true,",
                        "            [`${prefix}timeline-item-node-custom`]: dot",
                        "        });",
                        "        const dotTailCls = classNames({",
                        "            [`${prefix}timeline-item-dot-tail`]: true,",
                        "            [`${prefix}timeline-item-dot-tail-solid`]: foldShow,",
                        "            [`${prefix}timeline-hide`]: (index === total - 1) && foldShow",
                        "        });",
                        "",
                        "        const buttonProps = {",
                        "            text: true,",
                        "            size: 'small',",
                        "            type: 'primary',",
                        "            onClick: this.toggleFold.bind(this, folderIndex, total),",
                        "        };",
                        "        const timelineNode = folderIndex && foldShow || !folderIndex ? (<div {...others} className={itemCls} ref={e => {",
                        "            this['timeline-item'] = e;",
                        "        }}>",
                        "            <div className={`${prefix}timeline-item-left-content`}>",
                        "                <p className={`${prefix}timeline-item-body`}>{timeLeft}</p>",
                        "            </div>",
                        "            <div className={`${prefix}timeline-item-timeline`}>",
                        "                <div className={`${prefix}timeline-item-tail`}><i></i></div>",
                        "                <div className={itemNodeCls}>",
                        "                    {finalItemNode}",
                        "                </div>",
                        "            </div>",
                        "            <div className={`${prefix}timeline-item-content`}>",
                        "                <div className={`${prefix}timeline-item-title`}>{title}</div>",
                        "                <div className={`${prefix}timeline-item-body`}>{content}</div>",
                        "                <div className={`${prefix}timeline-item-time`}>{time}</div>",
                        "            </div>",
                        "        </div>) : null;",
                        "        return (<li>",
                        "            {",
                        "                animation && folderIndex ? <Expand",
                        "                    animationAppear={false}",
                        "                    beforeEnter={this.beforeEnter}",
                        "                    beforeLeave={this.beforeEnter}",
                        "                    afterEnter={this.beforeLeave}>",
                        "                    {timelineNode}",
                        "                </Expand> : timelineNode",
                        "            }",
                        "            {",
                        "                folderIndex === index ?",
                        "                    <div className={folderCls}>",
                        "                        <div className={dotTailCls}></div>",
                        "                        {",
                        "                            foldShow ?",
                        "                                <Button {...buttonProps}>{locale.fold}<Icon type=\"arrow-up\" /></Button> :",
                        "                                <Button {...buttonProps}>{locale.expand}<Icon type=\"arrow-down\" /></Button>",
                        "                        }",
                        "                    </div> :",
                        "                    null",
                        "            }",
                        "        </li>);",
                        "    }",
                        "}",
                        "export default TimelineItem;"
                    ]
                },
                "timeline.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import classNames from 'classnames';",
                        "import { obj } from '../../util';",
                        "import ConfigProvider from '../../config-provider';",
                        "import locale from '../../locale/zh-cn';",
                        "",
                        "/** Timeline */",
                        "class Timeline extends Component {",
                        "    static propTypes = {",
                        "        /**",
                        "         * 样式的品牌前缀",
                        "         */",
                        "        prefix: PropTypes.string,",
                        "        rtl: PropTypes.bool,",
                        "        /**",
                        "         * 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`",
                        "         */",
                        "        fold: PropTypes.array,",
                        "        /**",
                        "         * 自定义类名",
                        "         */",
                        "        className: PropTypes.string,",
                        "        children: PropTypes.any,",
                        "        locale: PropTypes.object,",
                        "        animation: PropTypes.bool",
                        "    }",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        rtl: false,",
                        "        fold: [],",
                        "        locale: locale.Timeline,",
                        "        animation: true",
                        "    }",
                        "",
                        "    constructor(props, context) {",
                        "        super(props, context);",
                        "",
                        "        this.state = {",
                        "            fold: props.fold",
                        "        };",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        if ('fold' in nextProps) {",
                        "            this.setState({",
                        "                fold: nextProps.fold",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    toggleFold(folderIndex, total) {",
                        "        const fold = this.state.fold.map(item => ({ ...item }));",
                        "",
                        "        if (folderIndex) {",
                        "            for (let i = 0; i < fold.length; i++) {",
                        "                const { foldArea, foldShow } = fold[i];",
                        "",
                        "                if ((foldArea[1] && folderIndex === foldArea[1]) || (!foldArea[1] && folderIndex === total - 1)) {",
                        "                    fold[i].foldShow = !foldShow;",
                        "                }",
                        "            }",
                        "",
                        "            this.setState({ fold });",
                        "        }",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, rtl, className, children, locale, animation, ...others } = this.props;",
                        "        const { fold } = this.state;",
                        "",
                        "        // 修改子节点属性",
                        "        const childrenCount = React.Children.count(children);",
                        "        const cloneChildren = Children.map(children, (child, i) => {",
                        "            let folderIndex = null;",
                        "            let foldNodeShow = false;",
                        "",
                        "",
                        "            fold.forEach((item) => {",
                        "                const { foldArea, foldShow } = item;",
                        "",
                        "                if (foldArea[0] && i >= foldArea[0] && (i <= foldArea[1] || !foldArea[1])) {",
                        "                    folderIndex = foldArea[1] || childrenCount - 1;",
                        "                    foldNodeShow = foldShow;",
                        "                }",
                        "            });",
                        "",
                        "            return React.cloneElement(child, {",
                        "                prefix: prefix,",
                        "                locale: locale,",
                        "                total: childrenCount,",
                        "                index: i,",
                        "                folderIndex: folderIndex,",
                        "                foldShow: foldNodeShow,",
                        "                toggleFold: folderIndex === i ? this.toggleFold.bind(this, folderIndex, childrenCount) : () => { },",
                        "                animation: animation",
                        "            });",
                        "        });",
                        "",
                        "        const timelineCls = classNames({",
                        "            [`${prefix}timeline`]: true,",
                        "        }, className);",
                        "",
                        "        if (rtl) {",
                        "            others.dir = 'rtl';",
                        "        }",
                        "",
                        "        return (",
                        "            <ul {...obj.pickOthers(Timeline.propTypes, others)} className={timelineCls}>",
                        "                {cloneChildren}",
                        "            </ul>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default ConfigProvider.config(Timeline);"
                    ]
                }
            }
        },
        "transfer": {
            ".eslintrc": {},
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Transfer from './view/transfer';",
                    "",
                    "export default Transfer;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$transfer-prefix} {",
                    "    @include box-sizing;",
                    "    display: inline-block;",
                    "",
                    "    &-panel {",
                    "        display: inline-block;",
                    "        border: $transfer-panel-border-width $line-solid $transfer-panel-border-color;",
                    "        border-radius: $transfer-panel-border-corner;",
                    "        background-color: $transfer-panel-background-color;",
                    "        vertical-align: middle;",
                    "        overflow: hidden;",
                    "    }",
                    "",
                    "    &-panel-header {",
                    "        padding: $transfer-panel-header-padding-top-bottom $transfer-panel-header-padding-left-right;",
                    "        border-bottom: $transfer-panel-border-width $line-solid $transfer-panel-border-color;",
                    "        background-color: $transfer-panel-header-background-color;",
                    "        color: $transfer-panel-header-text-color;",
                    "        font-size: $transfer-panel-header-text-size;",
                    "    }",
                    "",
                    "    &-panel-search {",
                    "        padding: 0 $transfer-panel-search-margin-left-right;",
                    "        margin-top: $transfer-panel-search-margin-top;",
                    "        margin-bottom: $transfer-panel-search-margin-bottom;",
                    "        width: 100%;",
                    "    }",
                    "",
                    "    & &-panel-list {",
                    "        width: $s-45;",
                    "        /* TODO */",
                    "        height: $s-8 * 5;",
                    "        padding: 0;",
                    "        border: none;",
                    "        box-shadow: none;",
                    "        border-radius: 0;",
                    "        overflow-y: auto;",
                    "    }",
                    "",
                    "    &-panel-not-found-container {",
                    "        display: table;",
                    "        width: 100%;",
                    "        height: 100%;",
                    "    }",
                    "",
                    "    &-panel-not-found {",
                    "        display: table-cell;",
                    "        vertical-align: middle;",
                    "        text-align: center;",
                    "        color: $color-text1-2;",
                    "        font-size: $font-size-body-2;",
                    "    }",
                    "",
                    "    &-panel-item {",
                    "        &.#{$css-prefix}focused {",
                    "            transition: background-color .2s ease;",
                    "        }",
                    "",
                    "        &:not(.#{$css-prefix}disabled).#{$css-prefix}simple:hover {",
                    "            color: $transfer-simple-panel-item-hover-text-color;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}insert-before:before {",
                    "            position: absolute;",
                    "            top: 0;",
                    "            left: 0;",
                    "            content: '';",
                    "            width: 100%;",
                    "            border-top: $line-1 solid $color-brand1-6;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}insert-after:after {",
                    "            position: absolute;",
                    "            left: 0;",
                    "            bottom: 0;",
                    "            content: '';",
                    "            width: 100%;",
                    "            border-bottom: $line-1 solid $color-brand1-6;",
                    "        }",
                    "    }",
                    "",
                    "    &-panel-footer {",
                    "        padding: $transfer-panel-footer-padding-top-bottom $transfer-panel-footer-padding-left-right;",
                    "        border-top: $transfer-panel-border-width $line-solid $transfer-panel-border-color;",
                    "        background-color: $transfer-panel-footer-background-color;",
                    "        font-size: 0;",
                    "    }",
                    "",
                    "    &-panel-count {",
                    "        /* TODO */",
                    "        margin-left: $s-1;",
                    "        font-size: $font-size-body-1;",
                    "        vertical-align: middle;",
                    "        color: $transfer-panel-footer-text-color;",
                    "    }",
                    "",
                    "    &-panel-move-all {",
                    "        font-size: $font-size-body-1;",
                    "        color: $transfer-simple-panel-footer-text-color;",
                    "        cursor: pointer;",
                    "",
                    "        &.#{$css-prefix}disabled {",
                    "            color: $color-text1-1;",
                    "            cursor: not-allowed;",
                    "        }",
                    "    }",
                    "",
                    "    &-operations {",
                    "        display: inline-block;",
                    "        vertical-align: middle;",
                    "        margin: 0 $transfer-operation-margin-left-right;",
                    "    }",
                    "",
                    "    &-move.#{$css-prefix}icon {",
                    "        color: $transfer-simple-move-icon-color;",
                    "    }",
                    "",
                    "    &-operation.#{$css-prefix}btn {",
                    "        display: block;",
                    "",
                    "        & + & {",
                    "            margin-top: $transfer-operation-margin-gutter;",
                    "        }",
                    "",
                    "        .#{$css-prefix}icon {",
                    "            @include icon-size($transfer-operation-icon-size);",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../button/style.js';",
                    "import '../menu/style.js';",
                    "import '../search/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module transfer: 穿梭框",
                        "/// @tag Transfer",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $transfer-",
                        "/// @classPrefix {prefix}-transfer",
                        "/// @order {\"size/move\":10,\"size/panel\":11,\"size/header\":12,\"size/search\":13,\"size/footer\":14,\"statement/normal\":10,\"statement/normal/move\":100,\"statement/normal/panel\":101,\"statement/normal/header\":102,\"statement/normal/item\":103,\"statement/normal/footer\":104,\"statement/hover\":11,\"statement/hover/item\":110}",
                        "////",
                        "",
                        "// transfer variables",
                        "// --------------------------------------------------",
                        "",
                        "// unconfigurable",
                        "$transfer-prefix: \".#{$css-prefix}transfer\";",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/move",
                        "$transfer-operation-margin-left-right: $s-5 !default;",
                        "",
                        "/// spacing",
                        "/// @namespace size/move",
                        "$transfer-operation-margin-gutter: $s-2 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/move",
                        "$transfer-operation-icon-size: $icon-xs !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/panel",
                        "$transfer-panel-border-width: $line-1 !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/header",
                        "$transfer-panel-header-padding-top-bottom: $s-2 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/header",
                        "$transfer-panel-header-padding-left-right: $s-5 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/header",
                        "$transfer-panel-header-text-size: $font-size-body-1 !default;",
                        "",
                        "/// margin (t)",
                        "/// @namespace size/search",
                        "$transfer-panel-search-margin-top: $s-2 !default;",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/search",
                        "$transfer-panel-search-margin-left-right: $s-1 !default;",
                        "",
                        "/// margin (b)",
                        "/// @namespace size/search",
                        "$transfer-panel-search-margin-bottom: $s-zero !default;",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/footer",
                        "$transfer-panel-footer-padding-top-bottom: $s-2 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/footer",
                        "$transfer-panel-footer-padding-left-right: $s-5 !default;",
                        "",
                        "// Statement",
                        "// ----------------------------------------",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal/move",
                        "$transfer-simple-move-icon-color: $color-line1-3 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/panel",
                        "$transfer-panel-border-color: $color-line1-2 !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/panel",
                        "$transfer-panel-border-corner: $corner-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/panel",
                        "$transfer-panel-background-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/header",
                        "$transfer-panel-header-text-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/header",
                        "$transfer-panel-header-background-color: $color-fill1-1 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal/item",
                        "$transfer-panel-search-icon-color: $color-text1-2 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/footer",
                        "$transfer-panel-footer-text-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/footer",
                        "$transfer-panel-footer-background-color: $color-white !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/footer",
                        "$transfer-simple-panel-footer-text-color: $color-brand1-6 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/item",
                        "$transfer-simple-panel-item-hover-text-color: $color-brand1-6 !default;"
                    ]
                }
            },
            "view": {
                "transfer-item.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Menu from '../../menu';",
                        "import { func, obj, dom } from '../../util';",
                        "",
                        "const { Item, CheckboxItem } = Menu;",
                        "const { bindCtx } = func;",
                        "const { pickOthers } = obj;",
                        "const { getOffset } = dom;",
                        "",
                        "export default class TransferItem extends Component {",
                        "    static menuChildType = CheckboxItem.menuChildType;",
                        "",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        mode: PropTypes.oneOf(['normal', 'simple']),",
                        "        value: PropTypes.array,",
                        "        disabled: PropTypes.bool,",
                        "        item: PropTypes.object,",
                        "        onCheck: PropTypes.func,",
                        "        onClick: PropTypes.func,",
                        "        needHighlight: PropTypes.bool,",
                        "        itemRender: PropTypes.func,",
                        "        draggable: PropTypes.bool,",
                        "        onDragStart: PropTypes.func,",
                        "        onDragOver: PropTypes.func,",
                        "        onDragEnd: PropTypes.func,",
                        "        onDrop: PropTypes.func,",
                        "        dragPosition: PropTypes.oneOf(['left', 'right']),",
                        "        dragValue: PropTypes.string,",
                        "        dragOverValue: PropTypes.string,",
                        "        panelPosition: PropTypes.oneOf(['left', 'right'])",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        this.state = {",
                        "            highlight: false",
                        "        };",
                        "",
                        "        bindCtx(this, ['getItemDOM', 'handleClick', 'handleDragStart', 'handleDragOver', 'handleDragEnd', 'handleDrop']);",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        if (this.props.needHighlight) {",
                        "            this.addHighlightTimer = setTimeout(() => {",
                        "                this.setState({",
                        "                    highlight: true",
                        "                });",
                        "            }, 1);",
                        "            this.removeHighlightTimer = setTimeout(() => {",
                        "                this.setState({",
                        "                    highlight: false",
                        "                });",
                        "            }, 201);",
                        "        }",
                        "    }",
                        "",
                        "    componentWillUnmount() {",
                        "        clearTimeout(this.addHighlightTimer);",
                        "        clearTimeout(this.removeHighlightTimer);",
                        "    }",
                        "",
                        "    getItemDOM(ref) {",
                        "        this.item = ref;",
                        "    }",
                        "",
                        "    handleClick() {",
                        "        const { onClick, panelPosition, item } = this.props;",
                        "        onClick(panelPosition === 'left' ? 'right' : 'left', item.value);",
                        "    }",
                        "",
                        "    handleDragStart() {",
                        "        const { onDragStart, panelPosition, item } = this.props;",
                        "        onDragStart(panelPosition, item.value);",
                        "    }",
                        "",
                        "    getDragGap(e) {",
                        "        const referenceTop = getOffset(e.currentTarget).top;",
                        "        const referenceHeight = e.currentTarget.offsetHeight;",
                        "        return e.pageY <= referenceTop + referenceHeight / 2 ? 'before' : 'after';",
                        "    }",
                        "",
                        "    handleDragOver(e) {",
                        "        const { panelPosition, dragPosition, onDragOver, item } = this.props;",
                        "        if (panelPosition === dragPosition) {",
                        "            e.preventDefault();",
                        "",
                        "            const dragGap = this.getDragGap(e);",
                        "            if (this.dragGap !== dragGap) {",
                        "                this.dragGap = dragGap;",
                        "                onDragOver(item.value);",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    handleDragEnd() {",
                        "        const { onDragEnd } = this.props;",
                        "        onDragEnd();",
                        "    }",
                        "",
                        "    handleDrop(e) {",
                        "        e.preventDefault();",
                        "",
                        "        const { onDrop, item, panelPosition, dragValue } = this.props;",
                        "        onDrop(panelPosition, dragValue, item.value, this.dragGap);",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, mode, checked, disabled, item, onCheck, itemRender, draggable, dragOverValue, panelPosition, dragPosition } = this.props;",
                        "        const others = pickOthers(Object.keys(TransferItem.propTypes), this.props);",
                        "        const { highlight } = this.state;",
                        "        const isSimple = mode === 'simple';",
                        "",
                        "        const classNames = cx({",
                        "            [`${prefix}transfer-panel-item`]: true,",
                        "            [`${prefix}insert-${this.dragGap}`]: dragOverValue === item.value && panelPosition === dragPosition,",
                        "            [`${prefix}focused`]: highlight,",
                        "            [`${prefix}simple`]: isSimple",
                        "        });",
                        "",
                        "        const itemProps = {",
                        "            ref: this.getItemDOM,",
                        "            className: classNames,",
                        "            children: itemRender(item),",
                        "            disabled,",
                        "            draggable: draggable && !disabled,",
                        "            onDragStart: this.handleDragStart,",
                        "            onDragOver: this.handleDragOver,",
                        "            onDragEnd: this.handleDragEnd,",
                        "            onDrop: this.handleDrop,",
                        "            ...others",
                        "        };",
                        "        if (isSimple) {",
                        "            if (!itemProps.disabled) {",
                        "                itemProps.onClick = this.handleClick;",
                        "            }",
                        "",
                        "            return (",
                        "                <Item {...itemProps} />",
                        "            );",
                        "        }",
                        "",
                        "        return (",
                        "            <CheckboxItem checked={checked} onChange={onCheck.bind(this, item.value)} {...itemProps} />",
                        "        );",
                        "    }",
                        "}",
                        ""
                    ]
                },
                "transfer-panel.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Checkbox from '../../checkbox';",
                        "import Search from '../../search';",
                        "import Menu from '../../menu';",
                        "import { func } from '../../util';",
                        "import TransferItem from './transfer-item';",
                        "",
                        "const { bindCtx } = func;",
                        "",
                        "export default class TransferPanel extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        position: PropTypes.oneOf(['left', 'right']),",
                        "        mode: PropTypes.oneOf(['normal', 'simple']),",
                        "        dataSource: PropTypes.array,",
                        "        value: PropTypes.array,",
                        "        onChange: PropTypes.func,",
                        "        onMove: PropTypes.func,",
                        "        onMoveAll: PropTypes.func,",
                        "        disabled: PropTypes.bool,",
                        "        locale: PropTypes.object,",
                        "        title: PropTypes.string,",
                        "        showSearch: PropTypes.bool,",
                        "        filter: PropTypes.func,",
                        "        onSearch: PropTypes.func,",
                        "        searchPlaceholder: PropTypes.string,",
                        "        notFoundContent: PropTypes.node,",
                        "        listClassName: PropTypes.string,",
                        "        listStyle: PropTypes.object,",
                        "        itemRender: PropTypes.func,",
                        "        sortable: PropTypes.bool,",
                        "        onSort: PropTypes.func",
                        "    };",
                        "",
                        "    constructor(props, context) {",
                        "        super(props, context);",
                        "",
                        "        this.state = {",
                        "            searchedValue: '',",
                        "            dragValue: null,",
                        "            dragOverValue: null",
                        "        };",
                        "",
                        "        bindCtx(this, [",
                        "            'handleCheck', 'handleAllCheck', 'handleSearch',",
                        "            'handleItemDragStart', 'handleItemDragOver', 'handleItemDragEnd', 'handleItemDrop',",
                        "            'getListDOM'",
                        "        ]);",
                        "        this.firstRender = true;",
                        "    }",
                        "",
                        "    componentDidMount() {",
                        "        this.firstRender = false;",
                        "    }",
                        "",
                        "    componentDidUpdate(prevProps) {",
                        "        if (prevProps.dataSource.length !== this.props.dataSource.length && this.list) {",
                        "            if (this.list.scrollTop > 0) {",
                        "                this.list.scrollTop = 0;",
                        "            }",
                        "        }",
                        "",
                        "        this.searched = false;",
                        "    }",
                        "",
                        "    getListDOM(ref) {",
                        "        this.list = ref;",
                        "    }",
                        "",
                        "    handleAllCheck(allChecked) {",
                        "        const { position, onChange } = this.props;",
                        "",
                        "        let newValue;",
                        "        if (allChecked) {",
                        "            newValue = this.enabledDatasource.map(item => item.value);",
                        "        } else {",
                        "            newValue = [];",
                        "        }",
                        "",
                        "        onChange && onChange(position, newValue);",
                        "    }",
                        "",
                        "    handleCheck(itemValue, checked) {",
                        "        const { position, value, onChange } = this.props;",
                        "",
                        "        const newValue = [...value];",
                        "        const index = value.indexOf(itemValue);",
                        "        if (checked && index === -1) {",
                        "            newValue.push(itemValue);",
                        "        } else if (!checked && index > -1) {",
                        "            newValue.splice(index, 1);",
                        "        }",
                        "",
                        "        onChange && onChange(position, newValue);",
                        "    }",
                        "",
                        "    handleSearch(searchedValue) {",
                        "        this.setState({",
                        "            searchedValue",
                        "        });",
                        "        this.searched = true;",
                        "",
                        "        const { onSearch, position } = this.props;",
                        "        onSearch(searchedValue, position);",
                        "    }",
                        "",
                        "    handleItemDragStart(position, value) {",
                        "        this.setState({",
                        "            dragPosition: position,",
                        "            dragValue: value",
                        "        });",
                        "    }",
                        "",
                        "    handleItemDragOver(value) {",
                        "        this.setState({",
                        "            dragOverValue: value",
                        "        });",
                        "    }",
                        "",
                        "    handleItemDragEnd() {",
                        "        this.setState({",
                        "            dragOverValue: null",
                        "        });",
                        "    }",
                        "",
                        "    handleItemDrop(...args) {",
                        "        this.setState({",
                        "            dragOverValue: null",
                        "        });",
                        "",
                        "        this.props.onSort(...args);",
                        "    }",
                        "",
                        "    renderHeader() {",
                        "        const { title, prefix } = this.props;",
                        "",
                        "        return <div className={`${prefix}transfer-panel-header`}>{title}</div>;",
                        "    }",
                        "",
                        "    renderSearch() {",
                        "        const { prefix, searchPlaceholder, locale } = this.props;",
                        "        return (",
                        "            <Search shape=\"simple\" className={`${prefix}transfer-panel-search`} placeholder={searchPlaceholder || locale.searchPlaceholder} onChange={this.handleSearch} />",
                        "        );",
                        "    }",
                        "",
                        "    renderList(dataSource) {",
                        "        const { prefix, position, mode, value, onMove, disabled, listClassName, listStyle, itemRender,",
                        "            sortable } = this.props;",
                        "        const { dragPosition, dragValue, dragOverValue } = this.state;",
                        "        const newClassName = cx({",
                        "            [`${prefix}transfer-panel-list`]: true,",
                        "            [listClassName]: !!listClassName",
                        "        });",
                        "",
                        "        return dataSource.length ? (",
                        "            <Menu className={newClassName} style={listStyle} ref={this.getListDOM}>",
                        "                {dataSource.map(item => (",
                        "                    <TransferItem key={item.value}",
                        "                        prefix={prefix}",
                        "                        mode={mode}",
                        "                        checked={value.indexOf(item.value) > -1}",
                        "                        disabled={disabled || item.disabled}",
                        "                        item={item}",
                        "                        onCheck={this.handleCheck}",
                        "                        onClick={onMove}",
                        "                        needHighlight={!this.firstRender && !this.searched}",
                        "                        itemRender={itemRender}",
                        "                        draggable={sortable}",
                        "                        onDragStart={this.handleItemDragStart}",
                        "                        onDragOver={this.handleItemDragOver}",
                        "                        onDragEnd={this.handleItemDragEnd}",
                        "                        onDrop={this.handleItemDrop}",
                        "                        dragPosition={dragPosition}",
                        "                        dragValue={dragValue}",
                        "                        dragOverValue={dragOverValue}",
                        "                        panelPosition={position} />",
                        "                ))}",
                        "            </Menu>",
                        "        ) : (",
                        "            <div className={newClassName} style={listStyle}>",
                        "                {this.renderNotFoundContent()}",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "    renderNotFoundContent() {",
                        "        const { prefix, notFoundContent } = this.props;",
                        "",
                        "        return (",
                        "            <div className={`${prefix}transfer-panel-not-found-container`}>",
                        "                <div className={`${prefix}transfer-panel-not-found`}>",
                        "                    {notFoundContent}",
                        "                </div>",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "    renderFooter() {",
                        "        const { prefix, position, mode, disabled, locale } = this.props;",
                        "        if (mode === 'simple') {",
                        "            const { onMoveAll } = this.props;",
                        "            const classNames = cx({",
                        "                [`${prefix}transfer-panel-move-all`]: true,",
                        "                [`${prefix}disabled`]: disabled",
                        "            });",
                        "            return (",
                        "                <div className={`${prefix}transfer-panel-footer`}>",
                        "                    <a className={classNames} onClick={onMoveAll.bind(this, position === 'left' ? 'right' : 'left')}>",
                        "                        {locale.moveAll}",
                        "                    </a>",
                        "                </div>",
                        "            );",
                        "        }",
                        "",
                        "        const { value, dataSource } = this.props;",
                        "        const checkedCount = value.length;",
                        "        const totalCount = dataSource.length;",
                        "        const totalEnabledCount = this.enabledDatasource.length;",
                        "        const checked = checkedCount > 0 && checkedCount >= totalEnabledCount;",
                        "        const indeterminate = checkedCount > 0 && checkedCount < totalEnabledCount;",
                        "        const items = totalCount > 1 ? locale.items : locale.item;",
                        "        const countLabel = checkedCount === 0 ? `${totalCount} ${items}` : `${checkedCount}/${totalCount} ${items}`;",
                        "",
                        "        return (",
                        "            <div className={`${prefix}transfer-panel-footer`}>",
                        "                <Checkbox disabled={disabled} checked={checked} indeterminate={indeterminate} onChange={this.handleAllCheck} />",
                        "                <span className={`${prefix}transfer-panel-count`}>{countLabel}</span>",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, title, showSearch, filter } = this.props;",
                        "        const { searchedValue } = this.state;",
                        "        let dataSource = this.props.dataSource;",
                        "        this.enabledDatasource = dataSource.filter(item => !item.disabled);",
                        "        if (showSearch && searchedValue) {",
                        "            dataSource = dataSource.filter(item => filter(searchedValue, item));",
                        "        }",
                        "",
                        "        return (",
                        "            <div className={`${prefix}transfer-panel`}>",
                        "                {title ? this.renderHeader() : null}",
                        "                {showSearch ? this.renderSearch() : null}",
                        "                {this.renderList(dataSource)}",
                        "                {this.renderFooter()}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "transfer.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Button from '../../button';",
                        "import Icon from '../../icon';",
                        "import ConfigProvider from '../../config-provider';",
                        "import zhCN from '../../locale/zh-cn';",
                        "import { func, obj } from '../../util';",
                        "import TransferPanel from '../view/transfer-panel';",
                        "",
                        "const { config } = ConfigProvider;",
                        "const { bindCtx } = func;",
                        "const { pickOthers } = obj;",
                        "",
                        "/**",
                        " * Transfer",
                        " */",
                        "class Transfer extends Component {",
                        "    static contextTypes = {",
                        "        prefix: PropTypes.string",
                        "    };",
                        "",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        pure: PropTypes.bool,",
                        "        rtl: PropTypes.bool,",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * 移动选项模式",
                        "         */",
                        "        mode: PropTypes.oneOf(['normal', 'simple']),",
                        "        /**",
                        "         * 数据源",
                        "         */",
                        "        dataSource: PropTypes.arrayOf(PropTypes.object),",
                        "        /**",
                        "         * （用于受控）当前值",
                        "         */",
                        "        value: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * （用于非受控）初始值",
                        "         */",
                        "        defaultValue: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * 值发生改变的时候触发的回调函数",
                        "         * @param {Array} value 右面板值",
                        "         * @param {Array} data 右面板数据",
                        "         * @param {Object} extra 额外参数",
                        "         * @param {Array} extra.leftValue 左面板值",
                        "         * @param {Array} extra.leftData 左面板数据",
                        "         * @param {Array} extra.movedValue 发生移动的值",
                        "         * @param {Object} extra.movedData 发生移动的数据",
                        "         * @param {String} extra.direction 移动的方向，值为'left'或'right'",
                        "         */",
                        "        onChange: PropTypes.func,",
                        "        /**",
                        "         * 是否禁用",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 是否禁用左侧面板",
                        "         */",
                        "        leftDisabled: PropTypes.bool,",
                        "        /**",
                        "         * 是否禁用右侧面板",
                        "         */",
                        "        rightDisabled: PropTypes.bool,",
                        "        /**",
                        "         * 列表项渲染函数",
                        "         * @param {Object} data 数据",
                        "         * @return {ReactNode} 列表项内容",
                        "         */",
                        "        itemRender: PropTypes.func,",
                        "        /**",
                        "         * 是否显示搜索框",
                        "         */",
                        "        showSearch: PropTypes.bool,",
                        "        /**",
                        "         * 自定义搜索函数",
                        "         * @param {String} searchedValue 搜索的内容",
                        "         * @param {Object} data 数据",
                        "         * @return {Boolean} 是否匹配到",
                        "         * @default 根据 label 属性匹配",
                        "         */",
                        "        filter: PropTypes.func,",
                        "        /**",
                        "         * 搜索框输入时触发的回调函数",
                        "         * @param {String} searchedValue 搜索的内容",
                        "         * @param {String} position 搜索面板的位置",
                        "         */",
                        "        onSearch: PropTypes.func,",
                        "        /**",
                        "         * 搜索框占位符",
                        "         */",
                        "        searchPlaceholder: PropTypes.string,",
                        "        /**",
                        "         * 列表为空显示内容",
                        "         */",
                        "        notFoundContent: PropTypes.node,",
                        "        /**",
                        "         * 左右面板标题",
                        "         */",
                        "        titles: PropTypes.arrayOf(PropTypes.node),",
                        "        /**",
                        "         * 向右向左移动按钮显示内容",
                        "         */",
                        "        operations: PropTypes.arrayOf(PropTypes.node),",
                        "        /**",
                        "         * 左面板默认选中值",
                        "         */",
                        "        defaultLeftChecked: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * 右面板默认选中值",
                        "         */",
                        "        defaultRightChecked: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * 左右面板列表自定义样式类名",
                        "         */",
                        "        listClassName: PropTypes.string,",
                        "        /**",
                        "         * 左右面板列表自定义样式对象",
                        "         */",
                        "        listStyle: PropTypes.object,",
                        "        /**",
                        "         * 是否允许拖拽排序",
                        "         */",
                        "        sortable: PropTypes.bool,",
                        "        /**",
                        "         * 拖拽排序时触发的回调函数",
                        "         * @param {Array} value 排序后的值",
                        "         * @param {String} position 拖拽的面板位置，值为：left 或 right",
                        "         */",
                        "        onSort: PropTypes.func,",
                        "        /**",
                        "         * 自定义国际化文案对象",
                        "         */",
                        "        locale: PropTypes.object",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        pure: false,",
                        "        mode: 'normal',",
                        "        dataSource: [],",
                        "        defaultValue: [],",
                        "        disabled: false,",
                        "        leftDisabled: false,",
                        "        rightDisabled: false,",
                        "        itemRender: data => data.label,",
                        "        showSearch: false,",
                        "        filter: (searchedValue, data) => {",
                        "            let labelString = '';",
                        "            const loop = arg => {",
                        "                if (React.isValidElement(arg) && arg.props.children) {",
                        "                    React.Children.forEach(arg.props.children, loop);",
                        "                } else if (typeof arg === 'string') {",
                        "                    labelString += arg;",
                        "                }",
                        "            };",
                        "            loop(data.label);",
                        "",
                        "            if (labelString.length >= searchedValue.length &&",
                        "                labelString.indexOf(searchedValue) > -1) {",
                        "                return true;",
                        "            }",
                        "",
                        "            return false;",
                        "        },",
                        "        onSearch: () => {},",
                        "        notFoundContent: 'Not Found',",
                        "        titles: [],",
                        "        // eslint-disable-next-line",
                        "        operations: [<Icon type=\"arrow-right\" />, <Icon type=\"arrow-left\" />],",
                        "        defaultLeftChecked: [],",
                        "        defaultRightChecked: [],",
                        "        sortable: false,",
                        "        onSort: () => {},",
                        "        locale: zhCN.Transfer",
                        "    };",
                        "",
                        "    constructor(props, context) {",
                        "        super(props, context);",
                        "",
                        "        const { value, defaultValue, defaultLeftChecked, defaultRightChecked, dataSource } = props;",
                        "",
                        "        const { left, right } = this.filterCheckedValue(",
                        "            this.normalizeValue(defaultLeftChecked),",
                        "            this.normalizeValue(defaultRightChecked),",
                        "            dataSource",
                        "        );",
                        "",
                        "        this.state = {",
                        "            value: this.normalizeValue('value' in props ? value : defaultValue),",
                        "            leftCheckedValue: left,",
                        "            rightCheckedValue: right",
                        "        };",
                        "",
                        "        this.leftValue = this.getLeftValue(dataSource, this.state.value);",
                        "",
                        "        bindCtx(this, [",
                        "            'handlePanelChange', 'handlePanelSort',",
                        "            'handleMoveItem', 'handleSimpleMove', 'handleSimpleMoveAll'",
                        "        ]);",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        const st = {};",
                        "",
                        "        let newValue;",
                        "        if ('value' in nextProps) {",
                        "            const value = this.normalizeValue(nextProps.value);",
                        "            st.value = value;",
                        "            newValue = value;",
                        "        } else {",
                        "            newValue = this.state.value;",
                        "        }",
                        "        this.leftValue = this.getLeftValue(nextProps.dataSource, newValue);",
                        "",
                        "        const { left, right } = this.filterCheckedValue(",
                        "            this.state.leftCheckedValue,",
                        "            this.state.rightCheckedValue,",
                        "            nextProps.dataSource",
                        "        );",
                        "        st.leftCheckedValue = left;",
                        "        st.rightCheckedValue = right;",
                        "",
                        "        this.setState(st);",
                        "    }",
                        "",
                        "    normalizeValue(value) {",
                        "        if (value) {",
                        "            if (Array.isArray(value)) {",
                        "                return value;",
                        "            }",
                        "",
                        "            return [value];",
                        "        }",
                        "",
                        "        return [];",
                        "    }",
                        "",
                        "    filterCheckedValue(left, right, dataSource) {",
                        "        const result = {",
                        "            left: [],",
                        "            right: []",
                        "        };",
                        "",
                        "        if (left.length || right.length) {",
                        "            const value = dataSource.map(item => item.value);",
                        "            value.forEach(itemValue => {",
                        "                if (left.indexOf(itemValue) > -1) {",
                        "                    result.left.push(itemValue);",
                        "                } else if (right.indexOf(itemValue) > -1) {",
                        "                    result.right.push(itemValue);",
                        "                }",
                        "            });",
                        "        }",
                        "",
                        "        return result;",
                        "    }",
                        "",
                        "    getLeftValue(dataSource, rightValue) {",
                        "        return dataSource.map(item => item.value).filter(itemValue => {",
                        "            return rightValue.indexOf(itemValue) === -1;",
                        "        });",
                        "    }",
                        "",
                        "    groupDatasource(value, itemValues, dataSource) {",
                        "        return value.reduce((ret, itemValue) => {",
                        "            const index = itemValues.indexOf(itemValue);",
                        "            if (index > -1) {",
                        "                ret.push(dataSource[index]);",
                        "            }",
                        "            return ret;",
                        "        }, []);",
                        "    }",
                        "",
                        "    handlePanelChange(position, value) {",
                        "        const valuePropName = position === 'left' ? 'leftCheckedValue' : 'rightCheckedValue';",
                        "        this.setState({",
                        "            [valuePropName]: value",
                        "        });",
                        "    }",
                        "",
                        "    handlePanelSort(position, dragValue, referenceValue, dragGap) {",
                        "        const value = position === 'right' ? this.state.value : this.leftValue;",
                        "        const currentIndex = value.indexOf(dragValue);",
                        "        const referenceIndex = value.indexOf(referenceValue);",
                        "        let expectIndex = dragGap === 'before' ? referenceIndex : referenceIndex + 1;",
                        "        if (currentIndex === expectIndex) {",
                        "            return;",
                        "        }",
                        "",
                        "        value.splice(currentIndex, 1);",
                        "        if (currentIndex < expectIndex) {",
                        "            expectIndex = expectIndex - 1;",
                        "        }",
                        "        value.splice(expectIndex, 0, dragValue);",
                        "",
                        "        this.setState({",
                        "            value: this.state.value",
                        "        }, () => {",
                        "            this.props.onSort(value, position);",
                        "        });",
                        "    }",
                        "",
                        "    handleMoveItem(direction) {",
                        "        let rightValue;",
                        "        let leftValue;",
                        "        let movedValue;",
                        "        let valuePropName;",
                        "",
                        "        const { value, leftCheckedValue, rightCheckedValue } = this.state;",
                        "",
                        "        if (direction === 'right') {",
                        "            rightValue = leftCheckedValue.concat(value);",
                        "            leftValue = this.leftValue.filter(itemValue => leftCheckedValue.indexOf(itemValue) === -1);",
                        "            movedValue = leftCheckedValue;",
                        "            valuePropName = 'leftCheckedValue';",
                        "        } else {",
                        "            rightValue = value.filter(itemValue => rightCheckedValue.indexOf(itemValue) === -1);",
                        "            leftValue = rightCheckedValue.concat(this.leftValue);",
                        "            movedValue = rightCheckedValue;",
                        "            valuePropName = 'rightCheckedValue';",
                        "        }",
                        "",
                        "        const st = { [valuePropName]: [] };",
                        "",
                        "        this.setValueState(st, rightValue, leftValue, movedValue, direction);",
                        "    }",
                        "",
                        "    handleSimpleMove(direction, v) {",
                        "        let rightValue;",
                        "        let leftValue;",
                        "",
                        "        const { value } = this.state;",
                        "",
                        "        if (direction === 'right') {",
                        "            rightValue = [v].concat(value);",
                        "            leftValue = this.leftValue.filter(itemValue => itemValue !== v);",
                        "        } else {",
                        "            rightValue = value.filter(itemValue => itemValue !== v);",
                        "            leftValue = [v].concat(this.leftValue);",
                        "        }",
                        "",
                        "        this.setValueState({}, rightValue, leftValue, [v], direction);",
                        "    }",
                        "",
                        "    handleSimpleMoveAll(direction) {",
                        "        let rightValue;",
                        "        let leftValue;",
                        "        let movedValue;",
                        "",
                        "        const { dataSource } = this.props;",
                        "        const { value } = this.state;",
                        "        const disabledValue = dataSource.reduce((ret, item) => {",
                        "            if (item.disabled) {",
                        "                ret.push(item.value);",
                        "            }",
                        "",
                        "            return ret;",
                        "        }, []);",
                        "",
                        "        if (direction === 'right') {",
                        "            movedValue = this.leftValue.filter(itemValue => disabledValue.indexOf(itemValue) === -1);",
                        "            rightValue = movedValue.concat(value);",
                        "            leftValue = this.leftValue.filter(itemValue => disabledValue.indexOf(itemValue) > -1);",
                        "        } else {",
                        "            movedValue = value.filter(itemValue => disabledValue.indexOf(itemValue) === -1);",
                        "            rightValue = value.filter(itemValue => disabledValue.indexOf(itemValue) > -1);",
                        "            leftValue = movedValue.concat(this.leftValue);",
                        "        }",
                        "",
                        "        this.setValueState({}, rightValue, leftValue, movedValue, direction);",
                        "    }",
                        "",
                        "    setValueState(st, rightValue, leftValue, movedValue, direction) {",
                        "        const { dataSource } = this.props;",
                        "        const callback = () => {",
                        "            if ('onChange' in this.props) {",
                        "                const itemValues = dataSource.map(item => item.value);",
                        "                const rightData = this.groupDatasource(rightValue, itemValues, dataSource);",
                        "                const leftData = this.groupDatasource(leftValue, itemValues, dataSource);",
                        "                const movedData = this.groupDatasource(movedValue, itemValues, dataSource);",
                        "",
                        "                this.props.onChange(rightValue, rightData, {",
                        "                    leftValue,",
                        "                    leftData,",
                        "                    movedValue,",
                        "                    movedData,",
                        "                    direction",
                        "                });",
                        "            }",
                        "        };",
                        "",
                        "        if (!('value' in this.props)) {",
                        "            st.value = rightValue;",
                        "            this.leftValue = leftValue;",
                        "        }",
                        "",
                        "        if (Object.keys(st).length) {",
                        "            this.setState(st, callback);",
                        "        } else {",
                        "            callback();",
                        "        }",
                        "    }",
                        "",
                        "    renderCenter() {",
                        "        const { prefix, mode, operations, disabled, leftDisabled, rightDisabled } = this.props;",
                        "        const { leftCheckedValue, rightCheckedValue } = this.state;",
                        "",
                        "        return (",
                        "            <div className={`${prefix}transfer-operations`}>",
                        "                {mode === 'simple' ? <Icon className={`${prefix}transfer-move`} size=\"large\" type=\"switch\" /> : [",
                        "                    <Button key=\"l2r\" className={`${prefix}transfer-operation`} type={leftCheckedValue.length ? 'primary' : 'normal'} disabled={leftDisabled || disabled || !leftCheckedValue.length} onClick={this.handleMoveItem.bind(this, 'right')}>",
                        "                        {operations[0]}",
                        "                    </Button>,",
                        "                    <Button key=\"r2l\" className={`${prefix}transfer-operation`} type={rightCheckedValue.length ? 'primary' : 'normal'}  disabled={rightDisabled || disabled || !rightCheckedValue.length} onClick={this.handleMoveItem.bind(this, 'left')}>",
                        "                        {operations[1]}",
                        "                    </Button>",
                        "                ]}",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, mode, disabled, className, dataSource, locale, showSearch, filter, onSearch,",
                        "            leftDisabled, rightDisabled, searchPlaceholder, notFoundContent, titles, listClassName,",
                        "            listStyle, itemRender, sortable } = this.props;",
                        "        const { value, leftCheckedValue, rightCheckedValue } = this.state;",
                        "        const itemValues = dataSource.map(item => item.value);",
                        "        const leftDatasource = this.groupDatasource(this.leftValue, itemValues, dataSource);",
                        "        const rightDatasource = this.groupDatasource(value, itemValues, dataSource);",
                        "        const panelProps = {",
                        "            prefix,",
                        "            mode,",
                        "            locale,",
                        "            showSearch,",
                        "            filter,",
                        "            onSearch,",
                        "            searchPlaceholder,",
                        "            notFoundContent,",
                        "            listClassName,",
                        "            listStyle,",
                        "            itemRender,",
                        "            onMove: this.handleSimpleMove,",
                        "            onMoveAll: this.handleSimpleMoveAll,",
                        "            onChange: this.handlePanelChange,",
                        "            sortable,",
                        "            onSort: this.handlePanelSort",
                        "        };",
                        "        const others = pickOthers(Object.keys(Transfer.propTypes), this.props);",
                        "",
                        "        return (",
                        "            <div className={cx(`${prefix}transfer`, className)} {...others}>",
                        "                <TransferPanel {...panelProps}",
                        "                    position=\"left\"",
                        "                    dataSource={leftDatasource}",
                        "                    disabled={leftDisabled || disabled}",
                        "                    value={leftCheckedValue}",
                        "                    title={titles[0]} />",
                        "                {this.renderCenter()}",
                        "                <TransferPanel {...panelProps}",
                        "                    position=\"right\"",
                        "                    dataSource={rightDatasource}",
                        "                    disabled={rightDisabled || disabled}",
                        "                    value={rightCheckedValue}",
                        "                    title={titles[1]} />",
                        "            </div>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default config(Transfer);"
                    ]
                }
            }
        },
        "tree": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import Tree from './view/tree';",
                    "import TreeNode from './view/tree-node';",
                    "",
                    "Tree.Node = TreeNode;",
                    "",
                    "export default Tree;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "",
                    "@import \"scss/variable\";",
                    "@import \"scss/mixin\";",
                    "",
                    "#{$tree-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    &, &-child-tree {",
                    "        margin: 0;",
                    "        padding: 0;",
                    "        list-style: none;",
                    "    }",
                    "",
                    "    &-node {",
                    "        white-space: nowrap;",
                    "    }",
                    "",
                    "    &-node-inner {",
                    "        font-size: 0;",
                    "    }",
                    "",
                    "    &-node-label-wrapper {",
                    "        display: inline-block;",
                    "        margin: 0 $tree-node-title-margin;",
                    "        vertical-align: middle;",
                    "    }",
                    "",
                    "    &-node-label {",
                    "        height: $tree-node-title-height;",
                    "        line-height: $tree-node-title-height;",
                    "        padding: 0 $tree-node-title-padding;",
                    "        border-radius: $tree-node-title-border-radius;",
                    "        font-size: $tree-node-title-font-size;",
                    "    }",
                    "",
                    "    &-node-input.#{$css-prefix}input {",
                    "        margin: 0 $tree-node-title-margin;",
                    "    }",
                    "",
                    "    &-switcher {",
                    "        position: relative;",
                    "        display: inline-block;",
                    "        vertical-align: middle;",
                    "        margin-right: $tree-switch-margint-right;",
                    "    }",
                    "",
                    "    &-switcher.#{$css-prefix}noline {",
                    "        width: $tree-switch-arrow-size;",
                    "        height: $tree-switch-arrow-size;",
                    "        line-height: $tree-switch-arrow-size;",
                    "        cursor: pointer;",
                    "",
                    "        #{$tree-prefix}-switcher-icon {",
                    "            @include icon-size($tree-switch-arrow-size);",
                    "            transition: transform cubic-bezier(.23, 1, .32, 1) 300ms;",
                    "            color: $tree-switch-arrow-color;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}close #{$tree-prefix}-switcher-icon {",
                    "            @include icon-size(",
                    "                $size: $tree-switch-arrow-size,",
                    "                $transform: rotate(-90deg)",
                    "            );",
                    "        }",
                    "",
                    "        &:not(.#{$css-prefix}disabled):hover #{$tree-prefix}-switcher-icon {",
                    "            color: $tree-switch-hover-arrow-color;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}disabled {",
                    "            cursor: not-allowed;",
                    "",
                    "            #{$tree-prefix}-switcher-icon {",
                    "                color: $tree-node-disabled-color;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-switcher.#{$css-prefix}noop-noline {",
                    "        width: $tree-switch-arrow-size;",
                    "        height: $tree-switch-arrow-size;",
                    "    }",
                    "",
                    "    &-switcher.#{$css-prefix}line {",
                    "        width: $tree-switch-size;",
                    "        height: $tree-switch-size;",
                    "        line-height: $tree-switch-size - $tree-switch-border-width * 2;",
                    "        border: $tree-switch-border-width $line-solid $tree-switch-border-color;",
                    "        border-radius: $tree-switch-corner;",
                    "        background-color: $tree-switch-bg-color;",
                    "        cursor: pointer;",
                    "",
                    "        #{$tree-prefix}-switcher-icon {",
                    "            @include icon-size($tree-switch-icon-size, ($tree-switch-size - $tree-switch-icon-size - $tree-switch-border-width * 2) / 2);",
                    "            color: $tree-switch-icon-color;",
                    "        }",
                    "",
                    "        &:not(.#{$css-prefix}disabled):hover {",
                    "            border-color: $tree-switch-hover-border-color;",
                    "            background-color: $tree-switch-hover-bg-color;",
                    "",
                    "            #{$tree-prefix}-switcher-icon {",
                    "                color: $tree-switch-hover-icon-color;",
                    "            }",
                    "        }",
                    "",
                    "        &.#{$css-prefix}disabled {",
                    "            border-color: $color-line1-1;",
                    "            background-color: $color-white;",
                    "            cursor: not-allowed;",
                    "",
                    "            #{$tree-prefix}-switcher-icon {",
                    "                color: $tree-node-disabled-color;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    &-switcher.#{$css-prefix}noop-line {",
                    "        width: $tree-switch-size;",
                    "        height: $tree-switch-size;",
                    "    }",
                    "",
                    "    &-switcher.#{$css-prefix}noop-line-noroot {",
                    "        height: 0;",
                    "        border-left: $tree-switch-border-width $line-solid $tree-line-color;",
                    "        border-bottom: $tree-line;",
                    "",
                    "        #{$tree-prefix}-right-angle {",
                    "            bottom: -$tree-line-width;",
                    "        }",
                    "    }",
                    "",
                    "    &-switcher.#{$css-prefix}loading {",
                    "        &.#{$css-prefix}loading-noline {",
                    "            width: $tree-switch-arrow-size;",
                    "            height: $tree-switch-arrow-size;",
                    "            line-height: $tree-switch-arrow-size;",
                    "        }",
                    "",
                    "        &.#{$css-prefix}loading-line {",
                    "            width: $tree-switch-size;",
                    "            height: $tree-switch-size;",
                    "            line-height: $tree-switch-size - $tree-switch-border-width * 2;",
                    "            border: $tree-switch-border-width $line-solid $color-transparent;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-switcher-icon {",
                    "            @include icon-size($tree-switch-arrow-size);",
                    "            color: $color-brand1-6;",
                    "        }",
                    "    }",
                    "",
                    "    &-right-angle {",
                    "        position: absolute;",
                    "        bottom: ($tree-switch-size - $tree-switch-border-width * 2 - $tree-line-width) / 2;",
                    "        left: - ($tree-child-indent-right + $tree-line-width + $tree-switch-border-width);",
                    "        display: block;",
                    "        width: $tree-child-indent-right + $tree-line-width;",
                    "        height: $tree-node-title-height + $tree-node-padding - $tree-line-width * 2;",
                    "        border-left: $tree-line;",
                    "        border-bottom: $tree-line;",
                    "    }",
                    "",
                    "    &.#{$css-prefix}label-block {",
                    "        #{$tree-prefix}-node-inner {",
                    "            display: flex;",
                    "            align-items: center;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-label-wrapper {",
                    "            flex: 1 1 auto;",
                    "        }",
                    "    }",
                    "",
                    "",
                    "    &.#{$css-prefix}node-indent {",
                    "        #{$tree-prefix}-node #{$tree-prefix}-node {",
                    "            margin-left: $tree-child-indent;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-inner {",
                    "            padding-top: $tree-node-padding / 2;",
                    "            padding-bottom: $tree-node-padding / 2;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-label-wrapper {",
                    "            border-top: $line-2 solid $color-transparent;",
                    "            border-bottom: $line-2 solid $color-transparent;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-label {",
                    "            transition: color cubic-bezier(.23, 1, .32, 1) 300ms, background-color cubic-bezier(.23, 1, .32, 1) 300ms;",
                    "            cursor: default;",
                    "            @include tree-node-state($tree-node-normal-color, $tree-node-normal-background);",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-label-selectable {",
                    "            cursor: pointer;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-label:hover {",
                    "            @include tree-node-state($tree-node-hover-color, $tree-node-hover-bg-color);",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-inner.#{$css-prefix}selected #{$tree-prefix}-node-label {",
                    "            @include tree-node-state($tree-node-selected-color, $tree-node-selected-background);",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-inner.#{$css-prefix}disabled #{$tree-prefix}-node-label,",
                    "        #{$tree-prefix}-node-inner.#{$css-prefix}disabled #{$tree-prefix}-node-label:hover {",
                    "            @include tree-node-state($tree-node-disabled-color, $tree-node-disabled-background);",
                    "            cursor: not-allowed;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-inner.#{$css-prefix}drag-over #{$tree-prefix}-node-label {",
                    "            background-color: $color-brand1-6;",
                    "            color: $color-white;",
                    "            opacity: .8;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-inner.#{$css-prefix}drag-over-gap-top #{$tree-prefix}-node-label-wrapper {",
                    "            border-top-color: $color-brand1-6;",
                    "        }",
                    "",
                    "        #{$tree-prefix}-node-inner.#{$css-prefix}drag-over-gap-bottom #{$tree-prefix}-node-label-wrapper {",
                    "            border-bottom-color: $color-brand1-6;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}node-block #{$tree-prefix}-node-inner {",
                    "        padding-top: $tree-node-padding;",
                    "        padding-bottom: $tree-node-padding;",
                    "        transition: color cubic-bezier(.23, 1, .32, 1) 300ms, background-color cubic-bezier(.23, 1, .32, 1) 300ms;",
                    "        cursor: pointer;",
                    "        @include tree-node-state($tree-node-normal-color, $tree-node-normal-background);",
                    "",
                    "        &:hover {",
                    "            @include tree-node-state($tree-node-hover-color, $tree-node-hover-bg-color);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}selected {",
                    "            @include tree-node-state($tree-node-selected-color, $tree-node-selected-background);",
                    "        }",
                    "",
                    "        &.#{$css-prefix}disabled,",
                    "        &.#{$css-prefix}disabled:hover {",
                    "            @include tree-node-state($tree-node-disabled-color, $tree-node-disabled-background);",
                    "            cursor: not-allowed;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}show-line &-node &-node:not(:last-child) {",
                    "        margin-left: $tree-child-indent-left;",
                    "        border-left: $tree-line;",
                    "        padding-left: $tree-child-indent-right;",
                    "    }",
                    "",
                    "    &-node.#{$css-prefix}filtered > #{$tree-prefix}-node-inner #{$tree-prefix}-node-label {",
                    "        color: $color-brand1-6;",
                    "",
                    "        &:hover {",
                    "            color: $color-brand1-6;",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../checkbox/style.js';",
                    "import '../input/style.js';",
                    "import './main.scss';"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@mixin tree-node-state (",
                        "    $handle-color,",
                        "    $handle-background",
                        ") {",
                        "    color: $handle-color;",
                        "    background-color: $handle-background;",
                        "}"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module tree: 树",
                        "/// @tag Tree",
                        "/// @category component",
                        "/// @family data-display",
                        "/// @varPrefix $tree-",
                        "/// @classPrefix {prefix}-tree",
                        "/// @order {\"size/node\":10,\"size/label\":11,\"size/arrow\":12,\"size/switch\":13,\"size/arrow & switch\":14,\"size/line\":15,\"statement/normal\":10,\"statement/normal/label\":100,\"statement/normal/arrow\":101,\"statement/normal/switch\":102,\"statement/normal/line\":103,\"statement/hover\":11,\"statement/hover/label\":110,\"statement/hover/arrow\":111,\"statement/hover/switch\":112,\"statement/selected\":12,\"statement/selected/label\":120,\"statement/disabled\":13,\"statement/disabled/label\":130}",
                        "////",
                        "",
                        "$tree-prefix: '.' + $css-prefix + 'tree';",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/node",
                        "$tree-node-padding: $s-1 !default;",
                        "",
                        "/// margin (l, r)",
                        "/// @namespace size/label",
                        "$tree-node-title-margin: $s-1 !default;",
                        "",
                        "/// padding (l, r)",
                        "/// @namespace size/label",
                        "$tree-node-title-padding: $s-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/label",
                        "$tree-node-title-font-size: $font-size-body-1 !default;",
                        "",
                        "/// size",
                        "/// @namespace size/arrow",
                        "$tree-switch-arrow-size: $icon-xs !default;",
                        "",
                        "/// size",
                        "/// @namespace size/switch",
                        "$tree-switch-size: $s-4 !default;",
                        "",
                        "/// icon",
                        "/// @namespace size/switch",
                        "$tree-switch-icon-size: $icon-xxs !default;",
                        "",
                        "/// border width",
                        "/// @namespace size/switch",
                        "$tree-switch-border-width: $line-1 !default;",
                        "",
                        "/// margin (r)",
                        "/// @namespace size/arrow & switch",
                        "$tree-switch-margint-right: $s-2 !default;",
                        "",
                        "/// width",
                        "/// @namespace size/line",
                        "$tree-line-width: $line-1 !default;",
                        "",
                        "// Statement:Normal",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/label",
                        "$tree-node-normal-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/label",
                        "$tree-node-normal-background: $color-white !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/label",
                        "$tree-node-title-border-radius: $corner-1 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/arrow",
                        "$tree-switch-arrow-color: $color-text1-2 !default;",
                        "",
                        "/// icon color",
                        "/// @namespace statement/normal/switch",
                        "$tree-switch-icon-color: $color-text1-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/switch",
                        "$tree-switch-bg-color: $color-white !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/normal/switch",
                        "$tree-switch-border-color: $color-line1-3 !default;",
                        "",
                        "/// corner",
                        "/// @namespace statement/normal/switch",
                        "$tree-switch-corner: $corner-1 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/normal/line",
                        "$tree-line-color: $color-line1-3 !default;",
                        "",
                        "/// style",
                        "/// @namespace statement/normal/line",
                        "$tree-line-style: $line-solid !default;",
                        "",
                        "// Statement:Hover",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/hover/label",
                        "$tree-node-hover-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/label",
                        "$tree-node-hover-bg-color: $color-fill1-2 !default;",
                        "",
                        "/// color",
                        "/// @namespace statement/hover/arrow",
                        "$tree-switch-hover-arrow-color: $color-text1-4 !default;",
                        "",
                        "/// icon color",
                        "/// @namespace statement/hover/switch",
                        "$tree-switch-hover-icon-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/hover/switch",
                        "$tree-switch-hover-bg-color: $color-fill1-2 !default;",
                        "",
                        "/// border color",
                        "/// @namespace statement/hover/switch",
                        "$tree-switch-hover-border-color: $color-line1-4 !default;",
                        "",
                        "// Statement:Selected",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/selected/label",
                        "$tree-node-selected-color: $color-text1-4 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/selected/label",
                        "$tree-node-selected-background: $color-brand1-1 !default;",
                        "",
                        "// Statement:Disabled",
                        "// ----------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled/label",
                        "$tree-node-disabled-color: $color-text1-1 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/disabled/label",
                        "$tree-node-disabled-background: $color-white !default;",
                        "",
                        "$tree-child-indent: $s-6 !default;",
                        "$tree-node-title-height: $s-5 !default;",
                        "$tree-child-indent-left: ($tree-switch-size - $tree-line-width) / 2;",
                        "$tree-child-indent-right: $tree-child-indent - $tree-line-width - $tree-child-indent-left;",
                        "$tree-line: $tree-line-width $tree-line-style $tree-line-color;"
                    ]
                }
            },
            "view": {
                "tree-node-input.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component } from 'react';",
                        "import { findDOMNode } from 'react-dom';",
                        "import PropTypes from 'prop-types';",
                        "import Input from '../../input';",
                        "",
                        "export default class TreeNodeInput extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string",
                        "    };",
                        "",
                        "    componentDidMount() {",
                        "        const inputWrapperNode = findDOMNode(this);",
                        "        inputWrapperNode.querySelector('input').focus();",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, ...others } = this.props;",
                        "",
                        "        return <Input size=\"small\" className={`${prefix}tree-node-input`} {...others} />;",
                        "    }",
                        "}"
                    ]
                },
                "tree-node.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import Icon from '../../icon';",
                        "import Checkbox from '../../checkbox';",
                        "import Animate from '../../animate';",
                        "import { func, obj, KEYCODE } from '../../util';",
                        "import TreeNodeInput from './tree-node-input';",
                        "",
                        "const { Expand } = Animate;",
                        "const { bindCtx } = func;",
                        "const { isPromise, pickOthers } = obj;",
                        "const isRoot = pos => /^0-(\\d)+$/.test(pos);",
                        "",
                        "/**",
                        " * Tree.Node",
                        " */",
                        "export default class TreeNode extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * 树节点",
                        "         */",
                        "        children: PropTypes.node,",
                        "        /**",
                        "         * 节点文本内容",
                        "         */",
                        "        label: PropTypes.node,",
                        "        /**",
                        "         * 单独设置是否支持选中，覆盖 Tree 的 selectable",
                        "         */",
                        "        selectable: PropTypes.bool,",
                        "        /**",
                        "         * 单独设置是否出现复选框，覆盖 Tree 的 checkable",
                        "         */",
                        "        checkable: PropTypes.bool,",
                        "        /**",
                        "         * 单独设置是否支持编辑，覆盖 Tree 的 editable",
                        "         */",
                        "        editable: PropTypes.bool,",
                        "        /**",
                        "         * 单独设置是否支持拖拽，覆盖 Tree 的 draggable",
                        "         */",
                        "        draggable: PropTypes.bool,",
                        "        /**",
                        "         * 是否禁止节点响应",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 是否禁止勾选节点复选框",
                        "         */",
                        "        checkboxDisabled: PropTypes.bool,",
                        "        /**",
                        "         * 是否是叶子节点，设置loadData时生效",
                        "         */",
                        "        isLeaf: PropTypes.bool,",
                        "        root: PropTypes.object,",
                        "        eventKey: PropTypes.string,",
                        "        pos: PropTypes.string,",
                        "        expanded: PropTypes.bool,",
                        "        selected: PropTypes.bool,",
                        "        checked: PropTypes.bool,",
                        "        indeterminate: PropTypes.bool,",
                        "        dragOver: PropTypes.bool,",
                        "        dragOverGapTop: PropTypes.bool,",
                        "        dragOverGapBottom: PropTypes.bool,",
                        "        parentNode: PropTypes.object",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        label: '---',",
                        "        disabled: false,",
                        "        checkboxDisabled: false,",
                        "        isLeaf: false",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        this.state = {",
                        "            editing: false,",
                        "            loading: false,",
                        "            label: props.label",
                        "        };",
                        "",
                        "        bindCtx(this, [",
                        "            'handleExpand',",
                        "            'handleSelect',",
                        "            'handleCheck',",
                        "            'handleEditStart',",
                        "            'handleEditFinish',",
                        "            'handleRightClick',",
                        "            'handleDragStart',",
                        "            'handleDragEnter',",
                        "            'handleDragOver',",
                        "            'handleDragLeave',",
                        "            'handleDragEnd',",
                        "            'handleDrop',",
                        "            'handleInputKeyDown'",
                        "        ]);",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        if ('label' in nextProps) {",
                        "            this.setState({",
                        "                label: nextProps.label",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    getParentNode() {",
                        "        return this.props.root.getParentNode(this.props.pos);",
                        "    }",
                        "",
                        "    handleExpand(e) {",
                        "        const { root, expanded, eventKey } = this.props;",
                        "",
                        "        if (root.props.isNodeBlock) {",
                        "            e.stopPropagation();",
                        "        }",
                        "",
                        "        const { loading } = this.state;",
                        "        if (loading) {",
                        "            return;",
                        "        }",
                        "",
                        "        const returnValue = root.handleExpand(!expanded, eventKey, this);",
                        "        if (isPromise(returnValue)) {",
                        "            this.setLoading(true);",
                        "            return returnValue.then(() => {",
                        "                this.setLoading(false);",
                        "            }, () => {",
                        "                this.setLoading(false);",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    setLoading(loading) {",
                        "        this.setState({ loading });",
                        "    }",
                        "",
                        "    handleSelect(e) {",
                        "        e.preventDefault();",
                        "",
                        "        const { root, selected, eventKey } = this.props;",
                        "        root.handleSelect(!selected, eventKey, this);",
                        "    }",
                        "",
                        "    handleCheck() {",
                        "        const { root, checked, eventKey } = this.props;",
                        "        root.handleCheck(!checked, eventKey, this);",
                        "    }",
                        "",
                        "    handleEditStart(e) {",
                        "        e.preventDefault();",
                        "",
                        "        this.setState({",
                        "            editing: true",
                        "        });",
                        "    }",
                        "",
                        "    handleEditFinish(e) {",
                        "        const label = e.target.value;",
                        "",
                        "        this.setState({",
                        "            editing: false,",
                        "            label",
                        "        });",
                        "",
                        "        const { root, eventKey } = this.props;",
                        "        root.props.onEditFinish(eventKey, label, this);",
                        "    }",
                        "",
                        "    handleRightClick(e) {",
                        "        this.props.root.props.onRightClick({",
                        "            event: e,",
                        "            node: this",
                        "        });",
                        "    }",
                        "",
                        "    handleDragStart(e) {",
                        "        e.stopPropagation();",
                        "",
                        "        this.props.root.handleDragStart(e, this);",
                        "    }",
                        "",
                        "    handleDragEnter(e) {",
                        "        e.preventDefault();",
                        "        e.stopPropagation();",
                        "",
                        "        this.props.root.handleDragEnter(e, this);",
                        "    }",
                        "",
                        "    handleDragOver(e) {",
                        "        if (this.props.root.canDrop(this)) {",
                        "            e.preventDefault();",
                        "            e.stopPropagation();",
                        "",
                        "            this.props.root.handleDragOver(e, this);",
                        "        }",
                        "    }",
                        "",
                        "    handleDragLeave(e) {",
                        "        e.stopPropagation();",
                        "",
                        "        this.props.root.handleDragLeave(e, this);",
                        "    }",
                        "",
                        "    handleDragEnd(e) {",
                        "        e.stopPropagation();",
                        "",
                        "        this.props.root.handleDragEnd(e, this);",
                        "    }",
                        "",
                        "    handleDrop(e) {",
                        "        e.preventDefault();",
                        "        e.stopPropagation();",
                        "",
                        "        this.props.root.handleDrop(e, this);",
                        "    }",
                        "",
                        "    handleInputKeyDown(e) {",
                        "        if (e.keyCode === KEYCODE.ENTER) {",
                        "            this.handleEditFinish(e);",
                        "        }",
                        "    }",
                        "",
                        "    addCallbacks(props) {",
                        "        const { disabled, root } = this.props;",
                        "        if (!disabled) {",
                        "            const selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;",
                        "            if (selectable) {",
                        "                props.onClick = this.handleSelect;",
                        "            }",
                        "            const editable = typeof this.props.editable !== 'undefined' ? this.props.editable : root.props.editable;",
                        "            if (editable) {",
                        "                props.onDoubleClick = this.handleEditStart;",
                        "            }",
                        "            const draggable = typeof this.props.draggable !== 'undefined' ? this.props.draggable : root.props.draggable;",
                        "            if (draggable) {",
                        "                props.draggable = true;",
                        "                props.onDragStart = this.handleDragStart;",
                        "                props.onDragEnd = this.handleDragEnd;",
                        "            }",
                        "            props.onContextMenu = this.handleRightClick;",
                        "        }",
                        "    }",
                        "",
                        "    renderSwitcher() {",
                        "        const { prefix, disabled, expanded, root } = this.props;",
                        "        const { loadData } = root.props;",
                        "        const { loading } = this.state;",
                        "        const showLine = this.showLine;",
                        "",
                        "        const lineState = showLine ? 'line' : 'noline';",
                        "        const className = cx({",
                        "            [`${prefix}tree-switcher`]: true,",
                        "            [`${prefix}${lineState}`]: !loading,",
                        "            [`${prefix}close`]: !loading && !showLine && !expanded,",
                        "            [`${prefix}disabled`]: disabled,",
                        "            [`${prefix}loading`]: loading,",
                        "            [`${prefix}loading-${lineState}`]: loading",
                        "        });",
                        "        const iconType = loadData && loading ?",
                        "            'loading' :",
                        "            (showLine ?",
                        "                (expanded ?",
                        "                    'minus' :",
                        "                    'add') :",
                        "                'arrow-down');",
                        "",
                        "        return (",
                        "            <span className={className} onClick={disabled ? null : this.handleExpand}>",
                        "                {this.renderRightAngle()}",
                        "                <Icon className={`${prefix}tree-switcher-icon`} type={iconType} />",
                        "            </span>",
                        "        );",
                        "    }",
                        "",
                        "    renderNoopSwitcher() {",
                        "        const { prefix, pos } = this.props;",
                        "        const showLine = this.showLine;",
                        "",
                        "        const lineState = showLine ? 'line' : 'noline';",
                        "        const className = cx({",
                        "            [`${prefix}tree-switcher`]: true,",
                        "            [`${prefix}noop-${lineState}`]: true,",
                        "            [`${prefix}noop-line-noroot`]: showLine && !isRoot(pos)",
                        "        });",
                        "",
                        "        return (",
                        "            <span className={className}>",
                        "                {this.renderRightAngle()}",
                        "            </span>",
                        "        );",
                        "    }",
                        "",
                        "    renderRightAngle() {",
                        "        const { prefix, pos } = this.props;",
                        "        return this.showLine && !isRoot(pos) ? <span className={`${prefix}tree-right-angle`} /> : null;",
                        "    }",
                        "",
                        "    renderCheckbox() {",
                        "        const { checked, indeterminate, disabled, checkboxDisabled } = this.props;",
                        "",
                        "        return <Checkbox checked={checked} indeterminate={indeterminate} disabled={disabled || checkboxDisabled} onChange={this.handleCheck} />;",
                        "    }",
                        "",
                        "    renderLabel() {",
                        "        const { prefix, root, disabled } = this.props;",
                        "        const { isNodeBlock } = root.props;",
                        "        const { label } = this.state;",
                        "        const selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;",
                        "        const labelProps = {",
                        "            className: cx({",
                        "                [`${prefix}tree-node-label`]: true,",
                        "                [`${prefix}tree-node-label-selectable`]: selectable && !disabled",
                        "            })",
                        "        };",
                        "        if (!isNodeBlock) {",
                        "            this.addCallbacks(labelProps);",
                        "        }",
                        "",
                        "        return (",
                        "            <div className={`${prefix}tree-node-label-wrapper`} ref=\"labelWrapper\">",
                        "                <div {...labelProps}>",
                        "                    {label}",
                        "                </div>",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "    renderInput() {",
                        "        const { prefix } = this.props;",
                        "        const { label } = this.state;",
                        "        return (",
                        "            <div className={`${prefix}tree-node-label-wrapper`} ref=\"labelWrapper\">",
                        "                <TreeNodeInput prefix={prefix} defaultValue={label} onBlur={this.handleEditFinish} onKeyDown={this.handleInputKeyDown} />",
                        "            </div>",
                        "        );",
                        "    }",
                        "",
                        "    renderChildTree(hasChildTree) {",
                        "        const { prefix, children, expanded, root } = this.props;",
                        "        const { animation } = root.props;",
                        "",
                        "        let childTree = expanded && hasChildTree ? <ul className={`${prefix}tree-child-tree`}>{children}</ul> : null;",
                        "        if (animation) {",
                        "            childTree = <Expand animationAppear={false}>{childTree}</Expand>;",
                        "        }",
                        "",
                        "        return childTree;",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, className, children, isLeaf, root, pos, selected, disabled, dragOver, dragOverGapTop, dragOverGapBottom } = this.props;",
                        "        const { loadData, isNodeBlock, showLine, draggable: rootDraggable, filterTreeNode } = root.props;",
                        "        this.showLine = !isNodeBlock && showLine;",
                        "        const others = pickOthers(Object.keys(TreeNode.propTypes), this.props);",
                        "        if (rootDraggable) {",
                        "            others.onDragEnter = this.handleDragEnter;",
                        "            others.onDragOver = this.handleDragOver;",
                        "            others.onDragLeave = this.handleDragLeave;",
                        "            others.onDrop = this.handleDrop;",
                        "        }",
                        "        const newClassName = cx({",
                        "            [`${prefix}tree-node`]: true,",
                        "            [`${prefix}filtered`]: !!filterTreeNode && !!root.filterTreeNode(this),",
                        "            [className]: !!className",
                        "        });",
                        "",
                        "        const innerClassName = cx({",
                        "            [`${prefix}tree-node-inner`]: true,",
                        "            [`${prefix}selected`]: selected,",
                        "            [`${prefix}disabled`]: disabled,",
                        "            [`${prefix}drag-over`]: dragOver,",
                        "            [`${prefix}drag-over-gap-top`]: dragOverGapTop,",
                        "            [`${prefix}drag-over-gap-bottom`]: dragOverGapBottom",
                        "        });",
                        "        const defaultPaddingLeft = typeof isNodeBlock === 'object' ? parseInt(isNodeBlock.defaultPaddingLeft || 0) : 0;",
                        "        const indent = typeof isNodeBlock === 'object' ? parseInt(isNodeBlock.indent || 24) : 24;",
                        "        const level = pos.split('-').length - 2;",
                        "        const innerStyle = isNodeBlock ? { paddingLeft: `${indent * level + defaultPaddingLeft}px` } : null;",
                        "        const innerProps = {",
                        "            className: innerClassName,",
                        "            style: innerStyle",
                        "        };",
                        "        if (isNodeBlock) {",
                        "            this.addCallbacks(innerProps);",
                        "        }",
                        "",
                        "        const hasChildTree = children && Children.count(children);",
                        "        const canExpand = hasChildTree || (loadData && !isLeaf);",
                        "        const checkable = typeof this.props.checkable !== 'undefined' ? this.props.checkable : root.props.checkable;",
                        "        const { editing } = this.state;",
                        "",
                        "        return (",
                        "            <li className={newClassName} {...others}>",
                        "                <div {...innerProps}>",
                        "                    {canExpand ? this.renderSwitcher() : this.renderNoopSwitcher()}",
                        "                    {checkable ? this.renderCheckbox() : null}",
                        "                    {editing ? this.renderInput() : this.renderLabel()}",
                        "                </div>",
                        "                {this.renderChildTree(hasChildTree)}",
                        "            </li>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "tree.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, { Component, Children, cloneElement } from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import cx from 'classnames';",
                        "import ConfigProvider from '../../config-provider';",
                        "import { func, dom, obj } from '../../util';",
                        "import TreeNode from './tree-node';",
                        "import { normalizeToArray, isDescendantOrSelf, isSiblingOrSelf, filterChildKey, filterParentKey, getAllCheckedKeys } from './util';",
                        "",
                        "const { bindCtx } = func;",
                        "const { getOffset } = dom;",
                        "const { pickOthers, isPlainObject } = obj;",
                        "",
                        "/**",
                        " * Tree",
                        " */",
                        "class Tree extends Component {",
                        "    static propTypes = {",
                        "        prefix: PropTypes.string,",
                        "        pure: PropTypes.bool,",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * 树节点",
                        "         */",
                        "        children: PropTypes.node,",
                        "        /**",
                        "         * 数据源，该属性优先级高于 children",
                        "         */",
                        "        dataSource: PropTypes.array,",
                        "        /**",
                        "         * 是否显示树的线",
                        "         */",
                        "        showLine: PropTypes.bool,",
                        "        /**",
                        "         * 是否支持选中节点",
                        "         */",
                        "        selectable: PropTypes.bool,",
                        "        /**",
                        "         * （用于受控）当前选中节点 key 的数组",
                        "         */",
                        "        selectedKeys: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * （用于非受控）默认选中节点 key 的数组",
                        "         */",
                        "        defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * 选中或取消选中节点时触发的回调函数",
                        "         * @param {Array} selectedKeys 选中节点key的数组",
                        "         * @param {Object} extra 额外参数",
                        "         * @param {Array} extra.selectedNodes 选中节点的数组",
                        "         * @param {Object} extra.node 当前操作的节点",
                        "         * @param {Boolean} extra.selected 当前操作是否是选中",
                        "         */",
                        "        onSelect: PropTypes.func,",
                        "        /**",
                        "         * 是否支持多选",
                        "         */",
                        "        multiple: PropTypes.bool,",
                        "        /**",
                        "         * 是否支持勾选节点的复选框",
                        "         */",
                        "        checkable: PropTypes.bool,",
                        "        /**",
                        "         * （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象",
                        "         */",
                        "        checkedKeys: PropTypes.oneOfType([",
                        "            PropTypes.arrayOf(PropTypes.string),",
                        "            PropTypes.object,",
                        "        ]),",
                        "        /**",
                        "         * （用于非受控）默认勾选复选框节点 key 的数组",
                        "         */",
                        "        defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * 勾选节点复选框是否完全受控（父子节点选中状态不再关联）",
                        "         */",
                        "        checkStrictly: PropTypes.bool,",
                        "        /**",
                        "         * 定义选中时回填的方式",
                        "         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点",
                        "         */",
                        "        checkedStrategy: PropTypes.oneOf(['all', 'parent', 'child']),",
                        "        /**",
                        "         * 勾选或取消勾选复选框时触发的回调函数",
                        "         * @param {Array} checkedKeys 勾选复选框节点key的数组",
                        "         * @param {Object} extra 额外参数",
                        "         * @param {Array} extra.checkedNodes 勾选复选框节点的数组",
                        "         * @param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组",
                        "         * @param {Array} extra.indeterminateKeys 半选复选框节点 key 的数组",
                        "         * @param {Object} extra.node 当前操作的节点",
                        "         * @param {Boolean} extra.checked 当前操作是否是勾选",
                        "         */",
                        "        onCheck: PropTypes.func,",
                        "        /**",
                        "         * （用于受控）当前展开的节点 key 的数组",
                        "         */",
                        "        expandedKeys: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * （用于非受控）默认展开的节点 key 的数组",
                        "         */",
                        "        defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),",
                        "        /**",
                        "         * 是否默认展开所有节点",
                        "         */",
                        "        defaultExpandAll: PropTypes.bool,",
                        "        /**",
                        "         * 是否自动展开父节点",
                        "         */",
                        "        autoExpandParent: PropTypes.bool,",
                        "        /**",
                        "         * 展开或收起节点时触发的回调函数",
                        "         * @param {Array} expandedKeys 展开的节点key的数组",
                        "         * @param {Object} extra 额外参数",
                        "         * @param {Object} extra.node 当前操作的节点",
                        "         * @param {Boolean} extra.expanded 当前操作是否是展开",
                        "         */",
                        "        onExpand: PropTypes.func,",
                        "        /**",
                        "         * 是否支持编辑节点内容",
                        "         */",
                        "        editable: PropTypes.bool,",
                        "        /**",
                        "         * 编辑节点内容完成时触发的回调函数",
                        "         * @param {String} key 编辑节点的 key",
                        "         * @param {String} label 编辑节点完成时节点的文本",
                        "         * @param {Object} node 当前编辑的节点",
                        "         */",
                        "        onEditFinish: PropTypes.func,",
                        "        /**",
                        "         * 是否支持拖拽节点",
                        "         */",
                        "        draggable: PropTypes.bool,",
                        "        /**",
                        "         * 开始拖拽节点时触发的回调函数",
                        "         * @param {Object} info 拖拽信息",
                        "         * @param {Object} info.event 事件对象",
                        "         * @param {Object} info.node 拖拽的节点",
                        "         */",
                        "        onDragStart: PropTypes.func,",
                        "        /**",
                        "         * 拖拽节点进入目标节点时触发的回调函数",
                        "         * @param {Object} info 拖拽信息",
                        "         * @param {Object} info.event 事件对象",
                        "         * @param {Object} info.node 目标节点",
                        "         * @param {Array} info.expandedKeys 当前展开的节点key的数组",
                        "         */",
                        "        onDragEnter: PropTypes.func,",
                        "        /**",
                        "         * 拖拽节点在目标节点上移动的时候触发的回调函数",
                        "         * @param {Object} info 拖拽信息",
                        "         * @param {Object} info.event 事件对象",
                        "         * @param {Object} info.node 目标节点",
                        "         */",
                        "        onDragOver: PropTypes.func,",
                        "        /**",
                        "         * 拖拽节点离开目标节点时触发的回调函数",
                        "         * @param {Object} info 拖拽信息",
                        "         * @param {Object} info.event 事件对象",
                        "         * @param {Object} info.node 目标节点",
                        "         */",
                        "        onDragLeave: PropTypes.func,",
                        "        /**",
                        "         * 拖拽节点拖拽结束时触发的回调函数",
                        "         * @param {Object} info 拖拽信息",
                        "         * @param {Object} info.event 事件对象",
                        "         * @param {Object} info.node 目标节点",
                        "         */",
                        "        onDragEnd: PropTypes.func,",
                        "        /**",
                        "         * 拖拽节点放入目标节点内或前后触发的回调函数",
                        "         * @param {Object} info 拖拽信息",
                        "         * @param {Object} info.event 事件对象",
                        "         * @param {Object} info.node 目标节点",
                        "         * @param {Object} info.dragNode 拖拽的节点",
                        "         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组",
                        "         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后",
                        "         */",
                        "        onDrop: PropTypes.func,",
                        "        /**",
                        "         * 节点是否可被作为拖拽的目标节点",
                        "         * @param {Object} info 拖拽信息",
                        "         * @param {Object} info.node 目标节点",
                        "         * @param {Object} info.dragNode 拖拽的节点",
                        "         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组",
                        "         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后",
                        "         * @return {Boolean} 是否可以被当作目标节点",
                        "         */",
                        "        canDrop: PropTypes.func,",
                        "        /**",
                        "         * 异步加载数据的函数",
                        "         * @param {Object} node 被点击展开的节点",
                        "         */",
                        "        loadData: PropTypes.func,",
                        "        /**",
                        "         * 按需筛选高亮节点",
                        "         * @param {Object} node 待筛选的节点",
                        "         * @return {Boolean} 是否被筛选中",
                        "         */",
                        "        filterTreeNode: PropTypes.func,",
                        "        /**",
                        "         * 右键点击节点时触发的回调函数",
                        "         * @param {Object} info 信息对象",
                        "         * @param {Object} info.event 事件对象",
                        "         * @param {Object} info.node 点击的节点",
                        "         */",
                        "        onRightClick: PropTypes.func,",
                        "        /**",
                        "         * 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)",
                        "         */",
                        "        isLabelBlock: PropTypes.bool,",
                        "        /**",
                        "         * 设置节点是否占满一行",
                        "         */",
                        "        isNodeBlock: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),",
                        "        /**",
                        "         * 是否开启展开收起动画",
                        "         */",
                        "        animation: PropTypes.bool",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        prefix: 'next-',",
                        "        pure: false,",
                        "        showLine: false,",
                        "        selectable: true,",
                        "        editable: false,",
                        "        multiple: false,",
                        "        checkable: false,",
                        "        checkStrictly: false,",
                        "        checkedStrategy: 'all',",
                        "        draggable: false,",
                        "        autoExpandParent: true,",
                        "        defaultExpandAll: false,",
                        "        defaultExpandedKeys: [],",
                        "        defaultCheckedKeys: [],",
                        "        defaultSelectedKeys: [],",
                        "        onExpand: () => {},",
                        "        onCheck: () => {},",
                        "        onSelect: () => {},",
                        "        onDragStart: () => {},",
                        "        onDragEnter: () => {},",
                        "        onDragOver: () => {},",
                        "        onDragLeave: () => {},",
                        "        onDragEnd: () => {},",
                        "        onDrop: () => {},",
                        "        canDrop: () => true,",
                        "        onEditFinish: () => {},",
                        "        onRightClick: () => {},",
                        "        isLabelBlock: false,",
                        "        isNodeBlock: false,",
                        "        animation: true",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "",
                        "        this.updateCache(props);",
                        "",
                        "        this.indeterminateKeys = [];",
                        "        this.state = {",
                        "            expandedKeys: this.getExpandedKeys(props),",
                        "            selectedKeys: this.getSelectedKeys(props),",
                        "            checkedKeys: this.getCheckedKeys(props)",
                        "        };",
                        "",
                        "        bindCtx(this, ['handleExpand', 'handleSelect', 'handleCheck']);",
                        "    }",
                        "",
                        "    componentWillReceiveProps(nextProps) {",
                        "        this.updateCache(nextProps);",
                        "",
                        "        const st = {};",
                        "",
                        "        if ('expandedKeys' in nextProps) {",
                        "            st.expandedKeys = this.getExpandedKeys(nextProps, true);",
                        "        }",
                        "        if ('selectedKeys' in nextProps) {",
                        "            st.selectedKeys = this.getSelectedKeys(nextProps, true);",
                        "        }",
                        "        if ('checkedKeys' in nextProps) {",
                        "            st.checkedKeys = this.getCheckedKeys(nextProps, true);",
                        "        }",
                        "",
                        "        if (Object.keys(st).length) {",
                        "            this.setState(st);",
                        "        }",
                        "    }",
                        "",
                        "    updateCache(props) {",
                        "        this._k2n = {};",
                        "        this._p2n = {};",
                        "",
                        "        if ('dataSource' in props) {",
                        "            const loop = (data, prefix = '0') => data.forEach((item, index) => {",
                        "                const pos = `${prefix}-${index}`;",
                        "                let { key } = item;",
                        "                key = key || pos;",
                        "                const newItem = { ...item, key, pos };",
                        "                const { children } = item;",
                        "                if (children && children.length) {",
                        "                    loop(children, pos);",
                        "                }",
                        "                this._k2n[key] = this._p2n[pos] = newItem;",
                        "            });",
                        "            loop(props.dataSource);",
                        "        } else if ('children' in props) {",
                        "            const loop = (children, prefix = '0') => Children.map(children, (node, index) => {",
                        "                const pos = `${prefix}-${index}`;",
                        "                let { key } = node;",
                        "                key = key || pos;",
                        "                const newItem = { ...node.props, key, pos };",
                        "",
                        "                const { children } = node.props;",
                        "                if (children && Children.count(children)) {",
                        "                    newItem.children = loop(children, pos);",
                        "                }",
                        "                this._k2n[key] = this._p2n[pos] = newItem;",
                        "                return newItem;",
                        "            });",
                        "            loop(props.children);",
                        "        }",
                        "    }",
                        "",
                        "    getExpandedKeys(props, willReceiveProps) {",
                        "        let expandedKeys;",
                        "",
                        "        if (!willReceiveProps && props.defaultExpandAll) {",
                        "            expandedKeys = Object.keys(this._k2n).filter(key => {",
                        "                const children = this._k2n[key].children;",
                        "                return children && children.length;",
                        "            });",
                        "        } else {",
                        "            expandedKeys = 'expandedKeys' in props ?",
                        "                props.expandedKeys :",
                        "                willReceiveProps ? [] : props.defaultExpandedKeys;",
                        "            expandedKeys = normalizeToArray(expandedKeys);",
                        "",
                        "            if (props.autoExpandParent) {",
                        "                const newExpandedKeys = [];",
                        "",
                        "                const expandedPoss = expandedKeys.reduce((ret, key) => {",
                        "                    const pos = this._k2n[key] && this._k2n[key].pos;",
                        "                    if (pos) {",
                        "                        ret.push(pos);",
                        "                        newExpandedKeys.push(key);",
                        "                    }",
                        "                    return ret;",
                        "                }, []);",
                        "",
                        "                expandedPoss.forEach(pos => {",
                        "                    const nums = pos.split('-');",
                        "                    if (nums.length === 2) {",
                        "                        return;",
                        "                    }",
                        "                    for (let i = 1; i <= nums.length - 2; i++) {",
                        "                        const ancestorPos = nums.slice(0, i + 1).join('-');",
                        "                        const ancestorKey = this._p2n[ancestorPos].key;",
                        "                        if (newExpandedKeys.indexOf(ancestorKey) === -1) {",
                        "                            newExpandedKeys.push(ancestorKey);",
                        "                        }",
                        "                    }",
                        "                });",
                        "",
                        "                return newExpandedKeys;",
                        "            }",
                        "        }",
                        "",
                        "        return expandedKeys;",
                        "    }",
                        "",
                        "    getSelectedKeys(props, willReceiveProps) {",
                        "        let selectedKeys = 'selectedKeys' in props ?",
                        "            props.selectedKeys :",
                        "            willReceiveProps ? [] : props.defaultSelectedKeys;",
                        "        selectedKeys = normalizeToArray(selectedKeys);",
                        "",
                        "        const newSelectKeys = selectedKeys.filter(key => {",
                        "            return this._k2n[key];",
                        "        });",
                        "        return newSelectKeys;",
                        "    }",
                        "",
                        "    getCheckedKeys(props, willReceiveProps) {",
                        "        let checkedKeys = 'checkedKeys' in props ?",
                        "            props.checkedKeys :",
                        "            willReceiveProps ? [] : props.defaultCheckedKeys;",
                        "",
                        "        const { checkStrictly } = this.props;",
                        "        if (checkStrictly) {",
                        "            if (isPlainObject(checkedKeys)) {",
                        "                const { checked, indeterminate } = checkedKeys;",
                        "                checkedKeys = normalizeToArray(checked);",
                        "                this.indeterminateKeys = normalizeToArray(indeterminate);",
                        "            } else {",
                        "                checkedKeys = normalizeToArray(checkedKeys);",
                        "            }",
                        "        } else {",
                        "            checkedKeys = getAllCheckedKeys(checkedKeys, this._k2n, this._p2n);",
                        "            this.indeterminateKeys = this.getIndeterminateKeys(checkedKeys);",
                        "        }",
                        "",
                        "        return checkedKeys;",
                        "    }",
                        "",
                        "    processKey(keys, key, add) {",
                        "        const index = keys.indexOf(key);",
                        "        if (add && index === -1) {",
                        "            keys.push(key);",
                        "        } else if (!add && index > -1) {",
                        "            keys.splice(index, 1);",
                        "        }",
                        "        return keys;",
                        "    }",
                        "",
                        "    handleExpand(expand, key, node) {",
                        "        const { onExpand, loadData } = this.props;",
                        "        const expandedKeys = [...this.state.expandedKeys];",
                        "        this.processKey(expandedKeys, key, expand);",
                        "        const setExpandedState = () => {",
                        "            if (!('expandedKeys' in this.props)) {",
                        "                this.setState({ expandedKeys });",
                        "            }",
                        "            onExpand(expandedKeys, { expanded: expand, node });",
                        "        };",
                        "",
                        "        if (expand && loadData) {",
                        "            return loadData(node).then(setExpandedState);",
                        "        } else {",
                        "            setExpandedState();",
                        "        }",
                        "    }",
                        "",
                        "    handleSelect(select, key, node) {",
                        "        const { multiple, onSelect } = this.props;",
                        "        let selectedKeys = [...this.state.selectedKeys];",
                        "        if (multiple) {",
                        "            this.processKey(selectedKeys, key, select);",
                        "        } else if (select) {",
                        "            selectedKeys = [key];",
                        "        } else {",
                        "            selectedKeys = [];",
                        "        }",
                        "",
                        "        if (!('selectedKeys' in this.props)) {",
                        "            this.setState({ selectedKeys });",
                        "        }",
                        "        onSelect(selectedKeys, {",
                        "            selectedNodes: this.getNodes(selectedKeys),",
                        "            node,",
                        "            selected: select",
                        "        });",
                        "    }",
                        "",
                        "    handleCheck(check, key, node) {",
                        "        const { checkStrictly, checkedStrategy, onCheck } = this.props;",
                        "        const checkedKeys = [...this.state.checkedKeys];",
                        "",
                        "        if (checkStrictly) {",
                        "            this.processKey(checkedKeys, key, check);",
                        "            const newCheckedKeys = isPlainObject(this.props.checkedKeys) ? {",
                        "                checked: checkedKeys,",
                        "                indeterminate: this.indeterminateKeys",
                        "            } : checkedKeys;",
                        "",
                        "            onCheck(newCheckedKeys, {",
                        "                checkedNodes: this.getNodes(checkedKeys),",
                        "                checkedNodesPositions: checkedKeys.map(key => {",
                        "                    const { node, pos } = this._k2n[key];",
                        "                    return { node, pos };",
                        "                }),",
                        "                node,",
                        "                indeterminateKeys: this.indeterminateKeys,",
                        "                checked: check",
                        "            });",
                        "",
                        "            return;",
                        "        }",
                        "",
                        "        const pos = this._k2n[key].pos;",
                        "",
                        "        const ps = Object.keys(this._p2n);",
                        "        ps.forEach(p => {",
                        "            if (isDescendantOrSelf(pos, p)) {",
                        "                this.processKey(checkedKeys, this._p2n[p].key, check);",
                        "            }",
                        "        });",
                        "",
                        "        let currentPos = pos;",
                        "        const nums = pos.split('-');",
                        "        for (let i = nums.length; i > 2; i--) {",
                        "            let parentCheck = true;",
                        "",
                        "            const parentPos = nums.slice(0, i - 1).join('-');",
                        "            const parentKey = this._p2n[parentPos].key;",
                        "            const parentChecked = checkedKeys.indexOf(parentKey) > -1;",
                        "            if (!check && !parentChecked) {",
                        "                break;",
                        "            }",
                        "",
                        "            for (let j = 0; j < ps.length; j++) {",
                        "                const p = ps[j];",
                        "                if (isSiblingOrSelf(currentPos, p)) {",
                        "                    const k = this._p2n[p].key;",
                        "                    if (checkedKeys.indexOf(k) === -1) {",
                        "                        parentCheck = false;",
                        "                        break;",
                        "                    }",
                        "                }",
                        "            }",
                        "",
                        "            this.processKey(checkedKeys, parentKey, parentCheck);",
                        "",
                        "            currentPos = parentPos;",
                        "        }",
                        "",
                        "        const indeterminateKeys = this.getIndeterminateKeys(checkedKeys);",
                        "        if (!('checkedKeys' in this.props)) {",
                        "            this.setState({",
                        "                checkedKeys",
                        "            });",
                        "            this.indeterminateKeys = indeterminateKeys;",
                        "        }",
                        "",
                        "        let newCheckedKeys;",
                        "        switch (checkedStrategy) {",
                        "            case 'parent':",
                        "                newCheckedKeys = filterChildKey(checkedKeys, this._k2n);",
                        "                break;",
                        "            case 'child':",
                        "                newCheckedKeys = filterParentKey(checkedKeys, this._k2n);",
                        "                break;",
                        "            default:",
                        "                newCheckedKeys = checkedKeys;",
                        "                break;",
                        "        }",
                        "",
                        "        onCheck(newCheckedKeys, {",
                        "            checkedNodes: this.getNodes(newCheckedKeys),",
                        "            checkedNodesPositions: newCheckedKeys.map(key => {",
                        "                const { node, pos } = this._k2n[key];",
                        "                return { node, pos };",
                        "            }),",
                        "            node,",
                        "            indeterminateKeys,",
                        "            checked: check",
                        "        });",
                        "    }",
                        "",
                        "    getNodeProps(key) {",
                        "        const { prefix } = this.props;",
                        "        const { expandedKeys, selectedKeys, checkedKeys, dragOverNodeKey } = this.state;",
                        "        const pos = this._k2n[key].pos;",
                        "",
                        "        return {",
                        "            prefix,",
                        "            root: this,",
                        "            eventKey: key,",
                        "            pos,",
                        "            expanded: expandedKeys.indexOf(key) > -1,",
                        "            selected: selectedKeys.indexOf(key) > -1,",
                        "            checked: checkedKeys.indexOf(key) > -1,",
                        "            indeterminate: this.indeterminateKeys.indexOf(key) > -1,",
                        "            dragOver: dragOverNodeKey === key && this.dropPosition === 0,",
                        "            dragOverGapTop: dragOverNodeKey === key && this.dropPosition === -1,",
                        "            dragOverGapBottom: dragOverNodeKey === key && this.dropPosition === 1",
                        "        };",
                        "    }",
                        "",
                        "    getParentNode(pos) {",
                        "        const parentPos = pos.split('-').slice(0, -1).join('-');",
                        "        if (parentPos.length === 1) {",
                        "            return null;",
                        "        }",
                        "",
                        "        return this._p2n[parentPos].node;",
                        "    }",
                        "",
                        "    getNodes(keys) {",
                        "        return keys.map(key => this._k2n[key].node);",
                        "    }",
                        "",
                        "    getIndeterminateKeys(checkedKeys) {",
                        "        const indeterminateKeys = [];",
                        "",
                        "        const poss = filterChildKey(checkedKeys, this._k2n).map(key => this._k2n[key].pos);",
                        "        poss.forEach(pos => {",
                        "            const nums = pos.split('-');",
                        "            for (let i = nums.length; i > 2; i--) {",
                        "                const parentPos = nums.slice(0, i - 1).join('-');",
                        "                const parentKey = this._p2n[parentPos].key;",
                        "                if (indeterminateKeys.indexOf(parentKey) === -1) {",
                        "                    indeterminateKeys.push(parentKey);",
                        "                }",
                        "            }",
                        "        });",
                        "",
                        "        return indeterminateKeys;",
                        "    }",
                        "",
                        "    handleDragStart(e, node) {",
                        "        const dragNodeKey = node.props.eventKey;",
                        "        this.dragNode = node;",
                        "        this.dragNodesKeys = Object.keys(this._k2n).filter(k => {",
                        "            return isDescendantOrSelf(this._k2n[dragNodeKey].pos, this._k2n[k].pos);",
                        "        });",
                        "",
                        "        const expandedKeys = this.processKey([...this.state.expandedKeys], dragNodeKey, false);",
                        "        this.setState({ expandedKeys });",
                        "",
                        "        this.props.onDragStart({",
                        "            event: e,",
                        "            node,",
                        "            expandedKeys",
                        "        });",
                        "    }",
                        "",
                        "    handleDragEnter(e, node) {",
                        "        const dragOverNodeKey = node.props.eventKey;",
                        "        this.dropPosition = this.getDropPosition(e, node);",
                        "        if (this.dragNode.props.eventKey === dragOverNodeKey && this.dropPosition === 0) {",
                        "            this.setState({",
                        "                dragOverNodeKey: null",
                        "            });",
                        "            return;",
                        "        }",
                        "",
                        "        const expandedKeys = this.processKey([...this.state.expandedKeys], dragOverNodeKey, true);",
                        "        this.setState({",
                        "            dragOverNodeKey,",
                        "            expandedKeys",
                        "        });",
                        "",
                        "        this.props.onDragEnter({",
                        "            event: e,",
                        "            node,",
                        "            expandedKeys",
                        "        });",
                        "    }",
                        "",
                        "    getDropPosition(e, node) {",
                        "        const labelWrapperNode = node.refs.labelWrapper;",
                        "        const offsetTop = getOffset(labelWrapperNode).top;",
                        "        const offsetHeight = labelWrapperNode.offsetHeight;",
                        "        const pageY = e.pageY;",
                        "        const gapHeight = 2;",
                        "",
                        "        if (pageY > offsetTop + offsetHeight - gapHeight) {",
                        "            return 1;",
                        "        }",
                        "        if (pageY < offsetTop + gapHeight) {",
                        "            return -1;",
                        "        }",
                        "        return 0;",
                        "    }",
                        "",
                        "    handleDragOver(e, node) {",
                        "        this.props.onDragOver({ event: e, node: node });",
                        "    }",
                        "",
                        "    handleDragLeave(e, node) {",
                        "        this.props.onDragLeave({ event: e, node: node });",
                        "    }",
                        "",
                        "    handleDragEnd(e, node) {",
                        "        this.setState({",
                        "            dragOverNodeKey: null",
                        "        });",
                        "",
                        "        this.props.onDragEnd({ event: e, node: node });",
                        "    }",
                        "",
                        "    handleDrop(e, node) {",
                        "        if (isDescendantOrSelf(this._k2n[this.dragNode.props.eventKey].pos, this._k2n[node.props.eventKey].pos)) {",
                        "            return;",
                        "        }",
                        "",
                        "        this.setState({",
                        "            dragOverNodeKey: null",
                        "        });",
                        "",
                        "        const params = this.generateDropParams(node);",
                        "        this.props.onDrop({",
                        "            event: e,",
                        "            ...params",
                        "        });",
                        "    }",
                        "",
                        "    canDrop(node) {",
                        "        const params = this.generateDropParams(node);",
                        "        return this.props.canDrop(params);",
                        "    }",
                        "",
                        "    generateDropParams(node) {",
                        "        return {",
                        "            dragNode: this.dragNode,",
                        "            dragNodesKeys: [...this.dragNodesKeys],",
                        "            node,",
                        "            dropPosition: this.dropPosition",
                        "        };",
                        "    }",
                        "",
                        "    filterTreeNode(node) {",
                        "        return this.props.filterTreeNode.call(this, node);",
                        "    }",
                        "",
                        "    renderByDataSource() {",
                        "        const loop = (data, prefix = '0') => {",
                        "            return data.map((item, index) => {",
                        "                const pos = `${prefix}-${index}`;",
                        "                const { key = pos, children, ...others } = item;",
                        "                const props = {",
                        "                    ...others,",
                        "                    ...this.getNodeProps(`${key}`)",
                        "                };",
                        "                if (children && children.length) {",
                        "                    props.children = loop(children, pos);",
                        "                }",
                        "                const node = <TreeNode key={key} {...props} />;",
                        "                this._k2n[key].node = node;",
                        "                return node;",
                        "            });",
                        "        };",
                        "",
                        "        return loop(this.props.dataSource);",
                        "    }",
                        "",
                        "    renderByChildren() {",
                        "        const loop = (children, prefix = '0') => {",
                        "            return Children.map(children, (child, index) => {",
                        "                const pos = `${prefix}-${index}`;",
                        "                const key = child.key || pos;",
                        "                const props = this.getNodeProps(`${key}`);",
                        "                if (child.props.children) {",
                        "                    props.children = loop(child.props.children, pos);",
                        "                }",
                        "",
                        "                const node = cloneElement(child, props);",
                        "                this._k2n[key].node = node;",
                        "                return node;",
                        "            });",
                        "        };",
                        "",
                        "        return loop(this.props.children);",
                        "    }",
                        "",
                        "    render() {",
                        "        const { prefix, className, dataSource, showLine, isNodeBlock, isLabelBlock } = this.props;",
                        "        const others = pickOthers(Object.keys(Tree.propTypes), this.props);",
                        "",
                        "        const newClassName = cx({",
                        "            [`${prefix}tree`]: true,",
                        "            [`${prefix}label-block`]: isLabelBlock,",
                        "            [`${prefix}node-block`]: isNodeBlock,",
                        "            [`${prefix}node-indent`]: !isNodeBlock,",
                        "            [`${prefix}show-line`]: !isNodeBlock && showLine,",
                        "            [className]: !!className",
                        "        });",
                        "",
                        "        return (",
                        "            <ul className={newClassName} {...others}>",
                        "                {dataSource ? this.renderByDataSource() : this.renderByChildren()}",
                        "            </ul>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        "export default ConfigProvider.config(Tree);"
                    ]
                },
                "util.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "export function normalizeToArray(keys) {",
                        "    if (keys) {",
                        "        if (Array.isArray(keys)) {",
                        "            return [...keys];",
                        "        }",
                        "",
                        "        return [keys];",
                        "    }",
                        "",
                        "    return [];",
                        "}",
                        "/**",
                        " * 过滤子节点",
                        " * @param {Array} keys",
                        " * @param {Object} _k2n",
                        " */",
                        "export function filterChildKey(keys, _k2n) {",
                        "    const newKeys = [...keys].sort((prev, next) => {",
                        "        return getDepth(prev, _k2n) - getDepth(next, _k2n);",
                        "    });",
                        "",
                        "    for (let i = 0; i < newKeys.length; i++) {",
                        "        for (let j = 0; j < newKeys.length; j++) {",
                        "            if (i !== j && isDescendantOrSelf(_k2n[newKeys[i]].pos, _k2n[newKeys[j]].pos)) {",
                        "                newKeys.splice(j, 1);",
                        "                j--;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    return newKeys;",
                        "}",
                        "",
                        "export function filterParentKey(keys, _k2n) {",
                        "    const newKeys = [...keys].sort((prev, next) => {",
                        "        return getDepth(next, _k2n) - getDepth(prev, _k2n);",
                        "    });",
                        "",
                        "    for (let i = 0; i < newKeys.length; i++) {",
                        "        for (let j = 0; j < newKeys.length; j++) {",
                        "            if (i !== j && isDescendantOrSelf(_k2n[newKeys[j]].pos, _k2n[newKeys[i]].pos)) {",
                        "                newKeys.splice(j, 1);",
                        "                j--;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    return newKeys;",
                        "}",
                        "",
                        "export function isDescendantOrSelf(currentPos, targetPos) {",
                        "    if (!currentPos || !targetPos) {",
                        "        return false;",
                        "    }",
                        "",
                        "    const currentNums = currentPos.split('-');",
                        "    const targetNums = targetPos.split('-');",
                        "",
                        "    return currentNums.length <= targetNums.length && currentNums.every((num, index) => {",
                        "        return num === targetNums[index];",
                        "    });",
                        "}",
                        "",
                        "export function isSiblingOrSelf(currentPos, targetPos) {",
                        "    const currentNums = currentPos.split('-').slice(0, -1);",
                        "    const targetNums = targetPos.split('-').slice(0, -1);",
                        "",
                        "    return currentNums.length === targetNums.length && currentNums.every((num, index) => {",
                        "        return num === targetNums[index];",
                        "    });",
                        "}",
                        "",
                        "export function getAllCheckedKeys(checkedKeys, _k2n, _p2n) {",
                        "    checkedKeys = normalizeToArray(checkedKeys);",
                        "    const filteredKeys = checkedKeys.filter(key => !!_k2n[key]);",
                        "    let flatKeys = filterChildKey(filteredKeys, _k2n);",
                        "    const childChecked = child => flatKeys.indexOf(child.key) > -1;",
                        "    const removeKey = child => flatKeys.splice(flatKeys.indexOf(child.key), 1);",
                        "    const addParentKey = (i, parent) => flatKeys.splice(i, 0, parent.key);",
                        "    const keys = [...flatKeys];",
                        "    for (let i = 0; i < keys.length; i++) {",
                        "        const pos = _k2n[keys[i]].pos;",
                        "        const nums = pos.split('-');",
                        "        if (nums.length === 2) {",
                        "            break;",
                        "        }",
                        "        for (let j = nums.length - 2; j > 0; j--) {",
                        "            const parentPos = nums.slice(0, j + 1).join('-');",
                        "            const parent = _p2n[parentPos];",
                        "            const parentChecked = parent.children.every(childChecked);",
                        "            if (parentChecked) {",
                        "                parent.children.forEach(removeKey);",
                        "                addParentKey(i, parent);",
                        "            } else {",
                        "                break;",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    const newKeys = [];",
                        "    if (flatKeys.length) {",
                        "        flatKeys = flatKeys.reverse();",
                        "        const ps = Object.keys(_p2n);",
                        "        for (let i = 0; i < flatKeys.length; i++) {",
                        "            const pos = _k2n[flatKeys[i]].pos;",
                        "            for (let j = 0; j < ps.length; j++) {",
                        "                if (isDescendantOrSelf(pos, ps[j])) {",
                        "                    newKeys.push(_p2n[ps[j]].key);",
                        "                    ps.splice(j, 1);",
                        "                    j--;",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    return newKeys;",
                        "}",
                        "",
                        "function getDepth(key, _k2n) {",
                        "    return _k2n[key].pos.split('-').length;",
                        "}"
                    ]
                }
            }
        },
        "tree-select": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import TreeSelect from './tree-select';",
                    "",
                    "export default ConfigProvider.config(TreeSelect, {",
                    "    transform: (props, deprecated) => {",
                    "        if ('shape' in props) {",
                    "            deprecated('shape', 'hasBorder', 'TreeSelect');",
                    "            const { shape, ...others } = props;",
                    "            props = { hasBorder: shape !== 'arrow-only', ...others };",
                    "        }",
                    "",
                    "        if ('container' in props) {",
                    "            deprecated('container', 'popupContainer', 'TreeSelect');",
                    "            const { container, ...others } = props;",
                    "            props = { popupContainer: container, ...others };",
                    "        }",
                    "",
                    "        return props;",
                    "    }",
                    "});"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"scss/variable\";",
                    "",
                    "#{$tree-select-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    &-dropdown {",
                    "        padding: $tree-select-padding-vertical $tree-select-padding-horizontal;",
                    "        background: $tree-select-background;",
                    "        border: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                    "        border-radius: $popup-local-corner;",
                    "        box-shadow: $popup-local-shadow;",
                    "    }",
                    "",
                    "    &-not-found {",
                    "        height: $s-4;",
                    "        font-size: $font-size-body-1;",
                    "        color: $color-text1-2;",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../tree/style.js';",
                    "import '../select/style.js';",
                    "import './main.scss';"
                ]
            },
            "tree-select.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, { Component, Children, isValidElement, cloneElement } from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import Select from '../select';",
                    "import Tree from '../tree';",
                    "import { normalizeToArray, getAllCheckedKeys, filterChildKey, filterParentKey, isDescendantOrSelf } from '../tree/view/util';",
                    "import { func, obj } from '../util';",
                    "",
                    "const noop = () => {};",
                    "const { Node: TreeNode } = Tree;",
                    "const { bindCtx } = func;",
                    "const { pickOthers } = obj;",
                    "",
                    "/**",
                    " * TreeSelect",
                    " */",
                    "export default class TreeSelect extends Component {",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        pure: PropTypes.bool,",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 树节点",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 选择框大小",
                    "         */",
                    "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                    "        /**",
                    "         * 选择框占位符",
                    "         */",
                    "        placeholder: PropTypes.string,",
                    "        /**",
                    "         * 是否禁用",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 是否有下拉箭头",
                    "         */",
                    "        hasArrow: PropTypes.bool,",
                    "        /**",
                    "         * 是否有边框",
                    "         */",
                    "        hasBorder: PropTypes.bool,",
                    "        /**",
                    "         * 是否有清空按钮",
                    "         */",
                    "        hasClear: PropTypes.bool,",
                    "        /**",
                    "         * 自定义内联 label",
                    "         */",
                    "        label: PropTypes.node,",
                    "        /**",
                    "         * 是否只读，只读模式下可以展开弹层但不能选择",
                    "         */",
                    "        readOnly: PropTypes.bool,",
                    "        /**",
                    "         * 下拉框是否与选择器对齐",
                    "         */",
                    "        autoWidth: PropTypes.bool,",
                    "        /**",
                    "         * 数据源，该属性优先级高于 children",
                    "         */",
                    "        dataSource: PropTypes.arrayOf(PropTypes.object),",
                    "        /**",
                    "         * （受控）当前值",
                    "         */",
                    "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                    "        /**",
                    "         * （非受控）默认值",
                    "         */",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                    "        /**",
                    "         * 选中值改变时触发的回调函数",
                    "         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组",
                    "         * @param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 是否显示搜索框",
                    "         */",
                    "        showSearch: PropTypes.bool,",
                    "        /**",
                    "         * 在搜索框中输入时触发的回调函数",
                    "         * @param {String} keyword 输入的关键字",
                    "         */",
                    "        onSearch: PropTypes.func,",
                    "        onSearchClear: PropTypes.func,",
                    "        /**",
                    "         * 无数据时显示内容",
                    "         */",
                    "        notFoundContent: PropTypes.node,",
                    "        /**",
                    "         * 是否支持多选",
                    "         */",
                    "        multiple: PropTypes.bool,",
                    "        /**",
                    "         * 下拉框中的树是否支持勾选节点的复选框",
                    "         */",
                    "        treeCheckable: PropTypes.bool,",
                    "        /**",
                    "         * 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）",
                    "         */",
                    "        treeCheckStrictly: PropTypes.bool,",
                    "        /**",
                    "         * 定义选中时回填的方式",
                    "         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点",
                    "         */",
                    "        treeCheckedStrategy: PropTypes.oneOf(['all', 'parent', 'child']),",
                    "        /**",
                    "         * 下拉框中的树是否默认展开所有节点",
                    "         */",
                    "        treeDefaultExpandAll: PropTypes.bool,",
                    "        /**",
                    "         * 下拉框中的树默认展开节点key的数组",
                    "         */",
                    "        treeDefaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),",
                    "        /**",
                    "         * 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](https://fusion.design/component/tree)",
                    "         * @param {ReactElement} node 被点击展开的节点",
                    "         */",
                    "        treeLoadData: PropTypes.func,",
                    "        /**",
                    "         * 透传到 Tree 的属性对象",
                    "         */",
                    "        treeProps: PropTypes.object,",
                    "        /**",
                    "         * 初始下拉框是否显示",
                    "         */",
                    "        defaultVisible: PropTypes.bool,",
                    "        /**",
                    "         * 当前下拉框是否显示",
                    "         */",
                    "        visible: PropTypes.bool,",
                    "        /**",
                    "         * 下拉框显示或关闭时触发事件的回调函数",
                    "         * @param {Boolean} visible 是否显示",
                    "         * @param {String} type 触发显示关闭的操作类型",
                    "         */",
                    "        onVisibleChange: PropTypes.func,",
                    "        /**",
                    "         * 下拉框自定义样式对象",
                    "         */",
                    "        popupStyle: PropTypes.object,",
                    "        /**",
                    "         * 下拉框样式自定义类名",
                    "         */",
                    "        popupClassName: PropTypes.string,",
                    "        /**",
                    "         * 下拉框挂载的容器节点",
                    "         */",
                    "        popupContainer: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),",
                    "        /**",
                    "         * 透传到 Popup 的属性对象",
                    "         */",
                    "        popupProps: PropTypes.object",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        pure: false,",
                    "        size: 'medium',",
                    "        disabled: false,",
                    "        hasArrow: true,",
                    "        hasBorder: true,",
                    "        hasClear: false,",
                    "        autoWidth: true,",
                    "        defaultValue: null,",
                    "        onChange: noop,",
                    "        showSearch: false,",
                    "        onSearch: noop,",
                    "        onSearchClear: noop,",
                    "        notFoundContent: 'Not Found',",
                    "        multiple: false,",
                    "        treeCheckable: false,",
                    "        treeCheckStrictly: false,",
                    "        treeCheckedStrategy: 'parent',",
                    "        treeDefaultExpandAll: false,",
                    "        treeDefaultExpandedKeys: [],",
                    "        treeProps: {},",
                    "        defaultVisible: false,",
                    "        onVisibleChange: noop",
                    "    };",
                    "",
                    "    constructor(props, context) {",
                    "        super(props, context);",
                    "",
                    "        const { defaultVisible, visible, defaultValue, value } = props;",
                    "        this.state = {",
                    "            visible: typeof visible === 'undefined' ? defaultVisible : visible,",
                    "            value: normalizeToArray(typeof value === 'undefined' ? defaultValue : value),",
                    "            searchedValue: '',",
                    "            expandedKeys: [],",
                    "            autoExpandParent: false",
                    "        };",
                    "",
                    "        bindCtx(this, ['handleSelect', 'handleCheck', 'handleSearch', 'handleSearchClear', 'handleVisibleChange', 'handleChange', 'handleRemove', 'handleExpand']);",
                    "",
                    "        this.updateCache(props);",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        this.updateCache(nextProps);",
                    "",
                    "        const st = {};",
                    "        if ('value' in nextProps) {",
                    "            st.value = normalizeToArray(nextProps.value);",
                    "        }",
                    "        if ('visible' in nextProps) {",
                    "            st.visible = nextProps.visible;",
                    "        }",
                    "",
                    "        if (Object.keys(st).length) {",
                    "            this.setState(st);",
                    "        }",
                    "    }",
                    "",
                    "    updateCache(props) {",
                    "        this._k2n = {};",
                    "        this._p2n = {};",
                    "        this._v2n = {};",
                    "",
                    "        if ('dataSource' in props) {",
                    "            const loop = (data, prefix = '0') => data.map((item, index) => {",
                    "                const { value, children } = item;",
                    "                const pos = `${prefix}-${index}`;",
                    "                const key = item.key || pos;",
                    "                const newItem = { ...item, key, pos };",
                    "                if (children && children.length) {",
                    "                    newItem.children = loop(children, pos);",
                    "                }",
                    "",
                    "                this._k2n[key] = this._p2n[pos] = this._v2n[value] = newItem;",
                    "                return newItem;",
                    "            });",
                    "            loop(props.dataSource);",
                    "        } else if ('children' in props) {",
                    "            const loop = (children, prefix = '0') => Children.map(children, (node, index) => {",
                    "                const { value, children } = node.props;",
                    "                const pos = `${prefix}-${index}`;",
                    "                const key = node.key || pos;",
                    "                const newItem = { ...node.props, key, pos };",
                    "                if (children && Children.count(children)) {",
                    "                    newItem.children = loop(children, pos);",
                    "                }",
                    "",
                    "                this._k2n[key] = this._p2n[pos] = this._v2n[value] = newItem;",
                    "                return newItem;",
                    "            });",
                    "            loop(props.children);",
                    "        }",
                    "    }",
                    "",
                    "    getKeysByValue(value) {",
                    "        return value.reduce((ret, v) => {",
                    "            const k = this._v2n[v] && this._v2n[v].key;",
                    "            if (k) {",
                    "                ret.push(k);",
                    "            }",
                    "",
                    "            return ret;",
                    "        }, []);",
                    "    }",
                    "",
                    "    getValueByKeys(keys) {",
                    "        return keys.map(k => this._k2n[k].value);",
                    "    }",
                    "",
                    "    getValueForSelect(value) {",
                    "        const { treeCheckedStrategy } = this.props;",
                    "",
                    "        let keys = this.getKeysByValue(value);",
                    "        keys = getAllCheckedKeys(keys, this._k2n, this._p2n);",
                    "",
                    "        switch (treeCheckedStrategy) {",
                    "            case 'parent':",
                    "                keys = filterChildKey(keys, this._k2n);",
                    "                break;",
                    "            case 'child':",
                    "                keys = filterParentKey(keys, this._k2n);",
                    "                break;",
                    "            default:",
                    "                break;",
                    "        }",
                    "",
                    "        return this.getValueByKeys(keys);",
                    "    }",
                    "",
                    "    getData(value, forSelect) {",
                    "        return value.reduce((ret, v) => {",
                    "            const k = this._v2n[v] && this._v2n[v].key;",
                    "            if (k) {",
                    "                const { label, pos, disabled, checkboxDisabled } = this._k2n[k];",
                    "                const d = {",
                    "                    value: v,",
                    "                    label,",
                    "                    pos",
                    "                };",
                    "                if (forSelect) {",
                    "                    d.disabled = disabled || checkboxDisabled;",
                    "                } else {",
                    "                    d.key = k;",
                    "                }",
                    "                ret.push(d);",
                    "            }",
                    "",
                    "            return ret;",
                    "        }, []);",
                    "    }",
                    "",
                    "    handleVisibleChange(visible, type) {",
                    "        if (!('visible' in this.props)) {",
                    "            this.setState({",
                    "                visible",
                    "            });",
                    "        }",
                    "",
                    "        this.props.onVisibleChange(visible, type);",
                    "    }",
                    "",
                    "    handleSelect(selectedKeys, extra) {",
                    "        const { multiple, onChange } = this.props;",
                    "        const { selected } = extra;",
                    "",
                    "        if (multiple || selected) {",
                    "            const value = this.getValueByKeys(selectedKeys);",
                    "            if (!('value' in this.props)) {",
                    "                this.setState({",
                    "                    value",
                    "                });",
                    "            }",
                    "            if (!multiple) {",
                    "                this.handleVisibleChange(false, 'fromTree');",
                    "            }",
                    "",
                    "            const data = this.getData(value);",
                    "            multiple ?",
                    "                onChange(value, data) :",
                    "                onChange(value[0], data[0]);",
                    "        } else {",
                    "            this.handleVisibleChange(false, 'fromTree');",
                    "        }",
                    "    }",
                    "",
                    "    handleCheck(checkedKeys) {",
                    "        const { onChange } = this.props;",
                    "",
                    "        const value = this.getValueByKeys(checkedKeys);",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "",
                    "        onChange(value, this.getData(value));",
                    "    }",
                    "",
                    "    handleRemove(removedItem) {",
                    "        const { value: removedValue } = removedItem;",
                    "        const { treeCheckable, treeCheckStrictly, treeCheckedStrategy, onChange } = this.props;",
                    "",
                    "        let value;",
                    "        if (treeCheckable && !treeCheckStrictly && treeCheckedStrategy === 'all') {",
                    "            const removedPos = this._v2n[removedValue].pos;",
                    "            value  = this.state.value.filter(v => {",
                    "                const p = this._v2n[v].pos;",
                    "                return !isDescendantOrSelf(removedPos, p);",
                    "            });",
                    "",
                    "            const nums = removedPos.split('-');",
                    "            for (let i = nums.length; i > 2; i--) {",
                    "                const parentPos = nums.slice(0, i - 1).join('-');",
                    "                const parentValue = this._p2n[parentPos].value;",
                    "                const parentIndex = value.indexOf(parentValue);",
                    "                if (parentIndex > -1) {",
                    "                    value.splice(parentIndex, 1);",
                    "                } else {",
                    "                    break;",
                    "                }",
                    "            }",
                    "        } else {",
                    "            value = this.state.value.filter(v => v !== removedValue);",
                    "        }",
                    "",
                    "",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "",
                    "        const data = this.getData(value);",
                    "        onChange(value, data);",
                    "    }",
                    "",
                    "    handleSearch(searchedValue) {",
                    "        const searchedKeys = [];",
                    "        const retainedKeys = [];",
                    "        Object.keys(this._k2n).forEach(k => {",
                    "            const { label, pos } = this._k2n[k];",
                    "            if (this.isSearched(label, searchedValue)) {",
                    "                searchedKeys.push(k);",
                    "                const posArr = pos.split('-');",
                    "                posArr.forEach((n, i) => {",
                    "                    if (i > 0) {",
                    "                        const p = posArr.slice(0, i + 1).join('-');",
                    "                        const kk = this._p2n[p].key;",
                    "                        if (retainedKeys.indexOf(kk) === -1) {",
                    "                            retainedKeys.push(kk);",
                    "                        }",
                    "                    }",
                    "                });",
                    "            }",
                    "        });",
                    "",
                    "        this.setState({",
                    "            searchedValue,",
                    "            expandedKeys: searchedKeys,",
                    "            autoExpandParent: true",
                    "        });",
                    "        this.searchedKeys = searchedKeys;",
                    "        this.retainedKeys = retainedKeys;",
                    "",
                    "        this.props.onSearch(searchedValue);",
                    "    }",
                    "",
                    "    handleSearchClear(triggerType) {",
                    "        this.setState({",
                    "            searchedValue: '',",
                    "            expandedKeys: []",
                    "        });",
                    "        this.props.onSearchClear(triggerType);",
                    "    }",
                    "",
                    "    handleExpand(expandedKeys) {",
                    "        this.setState({",
                    "            expandedKeys,",
                    "            autoExpandParent: false",
                    "        });",
                    "    }",
                    "",
                    "    handleChange() {",
                    "        // 单选时点击清空按钮",
                    "        const { hasClear, multiple, treeCheckable } = this.props;",
                    "        if (hasClear && (!multiple || !treeCheckable)) {",
                    "            if (!('value' in this.props)) {",
                    "                this.setState({",
                    "                    value: []",
                    "                });",
                    "            }",
                    "",
                    "            this.props.onChange(null, null);",
                    "        }",
                    "    }",
                    "",
                    "    isSearched(label, searchedValue) {",
                    "        let labelString = '';",
                    "        const loop = arg => {",
                    "            if (isValidElement(arg) && arg.props.children) {",
                    "                Children.forEach(arg.props.children, loop);",
                    "            } else if (typeof arg === 'string') {",
                    "                labelString += arg;",
                    "            }",
                    "        };",
                    "        loop(label);",
                    "",
                    "        if (labelString.length >= searchedValue.length &&",
                    "            labelString.indexOf(searchedValue) > -1) {",
                    "            return true;",
                    "        }",
                    "",
                    "        return false;",
                    "    }",
                    "",
                    "    searchNodes(children) {",
                    "        const loop = children => {",
                    "            const retainedNodes = [];",
                    "            Children.forEach(children, child => {",
                    "                if (this.searchedKeys.indexOf(child.key) > -1) {",
                    "                    retainedNodes.push(child);",
                    "                } else if (this.retainedKeys.indexOf(child.key) > -1) {",
                    "                    const retainedNode = child.props.children ?",
                    "                        cloneElement(child, {}, loop(child.props.children)) :",
                    "                        child;",
                    "                    retainedNodes.push(retainedNode);",
                    "                } else {",
                    "                    const hideNode = cloneElement(child, { style: { display: 'none' } });",
                    "                    retainedNodes.push(hideNode);",
                    "                }",
                    "            });",
                    "            return retainedNodes;",
                    "        };",
                    "",
                    "        return loop(children);",
                    "    }",
                    "",
                    "    createNodesByData(data, searching) {",
                    "        const loop = (data, isParentMatched, prefix = '0') => {",
                    "            const retainedNodes = [];",
                    "",
                    "            data.forEach((item, index) => {",
                    "                const { children, ...others } = item;",
                    "                const pos = `${prefix}-${index}`;",
                    "                const key = this._p2n[pos].key;",
                    "                const addNode = (isParentMatched, hide) => {",
                    "                    if (hide) {",
                    "                        others.style = { display: 'none' };",
                    "                    }",
                    "                    retainedNodes.push((",
                    "                        <TreeNode {...others} key={key}>",
                    "                            {children && children.length ? loop(children, isParentMatched, pos) : null}",
                    "                        </TreeNode>",
                    "                    ));",
                    "                };",
                    "",
                    "                if (searching) {",
                    "                    if (this.searchedKeys.indexOf(key) > -1 || isParentMatched) {",
                    "                        addNode(true);",
                    "                    } else if (this.retainedKeys.indexOf(key) > -1) {",
                    "                        addNode(false);",
                    "                    } else {",
                    "                        addNode(false, true);",
                    "                    }",
                    "                } else {",
                    "                    addNode();",
                    "                }",
                    "            });",
                    "",
                    "            return retainedNodes;",
                    "        };",
                    "",
                    "        return loop(data, false);",
                    "    }",
                    "",
                    "    renderPopupContent() {",
                    "        const prefix = this.props.prefix;",
                    "        const treeSelectPrefix = `${prefix}tree-select-`;",
                    "",
                    "        if (!this.state.visible) {",
                    "            return <div className={`${treeSelectPrefix}dropdown`} />;",
                    "        }",
                    "",
                    "        const {",
                    "            multiple,",
                    "            treeCheckable,",
                    "            treeCheckStrictly,",
                    "            treeCheckedStrategy,",
                    "            treeDefaultExpandAll,",
                    "            treeDefaultExpandedKeys,",
                    "            treeLoadData,",
                    "            treeProps: customTreeProps,",
                    "            showSearch,",
                    "            dataSource,",
                    "            children,",
                    "            readOnly,",
                    "            notFoundContent",
                    "        } = this.props;",
                    "        const {",
                    "            value,",
                    "            searchedValue,",
                    "            expandedKeys,",
                    "            autoExpandParent",
                    "        } = this.state;",
                    "",
                    "        const treeProps = {",
                    "            multiple,",
                    "            loadData: treeLoadData,",
                    "            defaultExpandAll: treeDefaultExpandAll,",
                    "            defaultExpandedKeys: treeDefaultExpandedKeys,",
                    "        };",
                    "",
                    "        const keys = this.getKeysByValue(value);",
                    "        if (treeCheckable) {",
                    "            treeProps.checkable = treeCheckable;",
                    "            treeProps.checkStrictly = treeCheckStrictly;",
                    "            treeProps.checkedStrategy = treeCheckStrictly ? 'all' : treeCheckedStrategy;",
                    "            treeProps.checkedKeys = keys;",
                    "            if (!readOnly) {",
                    "                treeProps.onCheck = this.handleCheck;",
                    "            }",
                    "        } else {",
                    "            treeProps.selectedKeys = keys;",
                    "            if (!readOnly) {",
                    "                treeProps.onSelect = this.handleSelect;",
                    "            }",
                    "        }",
                    "",
                    "        let notFound = false;",
                    "        let newChildren;",
                    "        if (showSearch && searchedValue) {",
                    "            treeProps.expandedKeys = expandedKeys;",
                    "            treeProps.autoExpandParent = autoExpandParent;",
                    "            treeProps.onExpand = this.handleExpand;",
                    "            treeProps.filterTreeNode = node => {",
                    "                return this.searchedKeys.indexOf(node.props.eventKey) > -1;",
                    "            };",
                    "",
                    "            if (this.searchedKeys.length) {",
                    "                newChildren = dataSource ?",
                    "                    this.createNodesByData(dataSource, true) :",
                    "                    this.searchNodes(children);",
                    "            } else {",
                    "                notFound = true;",
                    "            }",
                    "        } else {",
                    "            // eslint-disable-next-line",
                    "            if (dataSource) {",
                    "                if (dataSource.length) {",
                    "                    newChildren = this.createNodesByData(dataSource);",
                    "                } else {",
                    "                    notFound = true;",
                    "                }",
                    "            } else {",
                    "                // eslint-disable-next-line",
                    "                if (Children.count(children)) {",
                    "                    newChildren = children;",
                    "                } else {",
                    "                    notFound = true;",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        return (",
                    "            <div className={`${treeSelectPrefix}dropdown`}>",
                    "                {notFound ?",
                    "                    <div className={`${treeSelectPrefix}not-found`}>{notFoundContent}</div> :",
                    "                    <Tree {...customTreeProps} {...treeProps}>",
                    "                        {newChildren}",
                    "                    </Tree>}",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            prefix,",
                    "            size,",
                    "            placeholder,",
                    "            disabled,",
                    "            hasArrow,",
                    "            hasBorder,",
                    "            hasClear,",
                    "            label,",
                    "            readOnly,",
                    "            autoWidth,",
                    "            popupStyle,",
                    "            popupClassName,",
                    "            showSearch,",
                    "            multiple,",
                    "            treeCheckable,",
                    "            treeCheckStrictly,",
                    "            className,",
                    "            popupContainer,",
                    "            popupProps,",
                    "        } = this.props;",
                    "        const others = pickOthers(Object.keys(TreeSelect.propTypes), this.props);",
                    "        const {",
                    "            value,",
                    "            visible",
                    "        } = this.state;",
                    "",
                    "        const valueForSelect = treeCheckable && !treeCheckStrictly ? this.getValueForSelect(value) : value;",
                    "        let data = this.getData(valueForSelect, true);",
                    "        if (!multiple && !treeCheckable) {",
                    "            data = data[0];",
                    "        }",
                    "",
                    "        return (",
                    "            <Select prefix={prefix}",
                    "                className={className}",
                    "                size={size}",
                    "                hasBorder={hasBorder}",
                    "                hasArrow={hasArrow}",
                    "                hasClear={hasClear}",
                    "                placeholder={placeholder}",
                    "                disabled={disabled}",
                    "                autoWidth={autoWidth}",
                    "                label={label}",
                    "                readOnly={readOnly}",
                    "                mode={treeCheckable || multiple ? 'multiple' : 'single'}",
                    "                value={data}",
                    "                onRemove={this.handleRemove}",
                    "                onChange={this.handleChange}",
                    "                visible={visible}",
                    "                onVisibleChange={this.handleVisibleChange}",
                    "                showSearch={showSearch}",
                    "                onSearch={this.handleSearch}",
                    "                onSearchClear={this.handleSearchClear}",
                    "                popupContent={this.renderPopupContent()}",
                    "                popupContainer={popupContainer}",
                    "                popupStyle={popupStyle}",
                    "                popupClassName={popupClassName}",
                    "                popupProps={popupProps}",
                    "                {...others} />",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "TreeSelect.Node = TreeNode;"
                ]
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module tree-select: 树选择",
                        "/// @tag TreeSelect",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $tree-select-",
                        "/// @classPrefix {prefix}-tree-select",
                        "/// @order {\"size/dropdown\":10,\"statement/normal\":10,\"statement/normal/dropdown\":100}",
                        "////",
                        "",
                        "// tree-select variables",
                        "// --------------------------------------------------",
                        "",
                        "// unconfigurable",
                        "$tree-select-prefix: \".#{$css-prefix}tree-select\";",
                        "",
                        "// Size",
                        "// ----------------------------------------",
                        "",
                        "/// padding (t, b)",
                        "/// @namespace size/dropdown",
                        "$tree-select-padding-vertical: $s-2 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/dropdown",
                        "$tree-select-padding-horizontal: $s-5 !default;",
                        "",
                        "// Statement",
                        "// ----------------------------------------",
                        "/// background",
                        "/// @namespace statement/normal/dropdown",
                        "$tree-select-background: $color-white !default;"
                    ]
                }
            }
        },
        "upload": {
            "base.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import {Component} from 'react';",
                    "",
                    "export default class Base extends Component {",
                    "    /* istanbul ignore next */",
                    "    abort(file) {",
                    "        /* istanbul ignore next */",
                    "        this.uploaderRef.abort(file);",
                    "    }",
                    "    /* istanbul ignore next */",
                    "    startUpload() {",
                    "        /* istanbul ignore next */",
                    "        this.uploaderRef.startUpload();",
                    "    }",
                    "",
                    "    saveUploaderRef = (ref) => {",
                    "        /* istanbul ignore if */",
                    "        if (ref && typeof ref.getInstance === 'function') {",
                    "            this.uploaderRef = ref.getInstance();",
                    "        } else {",
                    "            this.uploaderRef = ref;",
                    "        }",
                    "    };",
                    "",
                    "    /* istanbul ignore next */",
                    "    isUploading() {",
                    "        /* istanbul ignore next */",
                    "        return this.uploaderRef.isUploading();",
                    "    }",
                    "}"
                ]
            },
            "card.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import zhCN from '../locale/zh-cn.js';",
                    "import {func, obj} from '../util';",
                    "import Base from './base';",
                    "import List from './list';",
                    "import Upload from './upload';",
                    "",
                    "/**",
                    " * Upload.Card",
                    " * @description 继承 Upload 的 API，除非特别说明",
                    " */",
                    "class Card extends Base {",
                    "    static displayName = 'Card';",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        locale: PropTypes.object,",
                    "        children: PropTypes.object,",
                    "        value: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),",
                    "        defaultValue: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),",
                    "        /**",
                    "         * 点击图片回调",
                    "         */",
                    "        onPreview: PropTypes.func,",
                    "        /**",
                    "         * 改变时候的回调",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 点击移除的回调",
                    "         */",
                    "        onRemove: PropTypes.func,",
                    "        /**",
                    "         * 取消上传的回调",
                    "         */",
                    "        onCancel: PropTypes.func,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        locale: zhCN.Upload,",
                    "        onChange: func.noop,",
                    "        onPreview: func.noop,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        let value;",
                    "        /* istanbul ignore else */",
                    "        if ('value' in props) {",
                    "            value = props.value;",
                    "        } else {",
                    "            value = props.defaultValue;",
                    "        }",
                    "",
                    "        this.state = {",
                    "",
                    "            value: typeof value === 'undefined' ? /* istanbul ignore next */[] : value,",
                    "            uploaderRef: this.uploaderRef,",
                    "        };",
                    "    }",
                    "    /* eslint react/no-did-mount-set-state: [0] */",
                    "    componentDidMount() {",
                    "        this.setState({uploaderRef: this.uploaderRef});",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        /* istanbul ignore if */",
                    "        if ('value' in nextProps) {",
                    "            this.setState({",
                    "                value: typeof nextProps.value === 'undefined' ? [] : nextProps.value",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onProgress = (value) => {",
                    "        this.setState({",
                    "            value",
                    "        });",
                    "    };",
                    "",
                    "    onChange = (value, file) => {",
                    "        if (!('value' in this.props)) {",
                    "            this.setState({",
                    "                value",
                    "            });",
                    "        }",
                    "        this.props.onChange(value, file);",
                    "    };",
                    "",
                    "    isUploading() {",
                    "        return this.state.uploaderRef.isUploading();",
                    "    }",
                    "",
                    "    saveRef(ref) {",
                    "        this.saveUploaderRef(ref);",
                    "    }",
                    "",
                    "    render() {",
                    "        const {",
                    "            action,",
                    "            disabled,",
                    "            prefix,",
                    "            locale,",
                    "            className,",
                    "            style,",
                    "            limit,",
                    "            onPreview,",
                    "            onRemove,",
                    "            onCancel,",
                    "            timeout,",
                    "        } = this.props;",
                    "",
                    "        const isExceedLimit = this.state.value.length >= limit;",
                    "        const uploadButtonCls = classNames({",
                    "            [`${prefix}upload-list-item`]: true,",
                    "            [`${prefix}hidden`]: isExceedLimit,",
                    "        });",
                    "",
                    "        const children = this.props.children || locale.card.addPhoto;",
                    "",
                    "        const othersForList = obj.pickOthers(Card.propTypes, this.props);",
                    "        const othersForUpload = obj.pickOthers(List.propTypes, othersForList);",
                    "        return (",
                    "            <List className={className}",
                    "                style={style}",
                    "                listType=\"card\"",
                    "                closable",
                    "                locale={locale}",
                    "                value={this.state.value}",
                    "                onRemove={onRemove}",
                    "                onCancel={onCancel}",
                    "                onPreview={onPreview}",
                    "                uploader={this.state.uploaderRef}",
                    "                {...othersForList}",
                    "            >",
                    "                <Upload",
                    "                    {...othersForUpload}",
                    "                    shape=\"card\"",
                    "                    disabled={disabled || isExceedLimit}",
                    "                    action={action}",
                    "                    timeout={timeout}",
                    "                    value={this.state.value}",
                    "                    onProgress={this.onProgress}",
                    "                    onChange={this.onChange}",
                    "                    ref={ref => this.saveRef(ref)}",
                    "                    className={uploadButtonCls}",
                    "                >",
                    "                    {children}",
                    "                </Upload>",
                    "            </List>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Card;"
                ]
            },
            "dragger.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Icon from '../icon';",
                    "import {func} from '../util';",
                    "import zhCN from '../locale/zh-cn.js';",
                    "import Upload from './upload';",
                    "",
                    "/**",
                    " * Upload.Drager",
                    " * @description IE10+ 支持。继承 Upload 的 API，除非特别说明",
                    " */",
                    "class Dragger extends React.Component {",
                    "",
                    "    static propTypes = {",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string,",
                    "        locale: PropTypes.object,",
                    "        shape: PropTypes.string,",
                    "        onDragOver: PropTypes.func,",
                    "        onDragLeave: PropTypes.func,",
                    "        onDrop: PropTypes.func,",
                    "        limit: PropTypes.number,",
                    "        className: PropTypes.string,",
                    "        style: PropTypes.object,",
                    "        defaultValue: PropTypes.array,",
                    "        children: PropTypes.node,",
                    "        listType: PropTypes.string,",
                    "        timeout: PropTypes.number,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        onDragOver: func.noop,",
                    "        onDragLeave: func.noop,",
                    "        onDrop: func.noop,",
                    "        locale: zhCN.Upload,",
                    "    };",
                    "",
                    "    state = {",
                    "        dragOver: false",
                    "    };",
                    "",
                    "    onDragOver = (e) => {",
                    "        this.setState({",
                    "            dragOver: true",
                    "        });",
                    "        this.props.onDragOver(e);",
                    "    };",
                    "",
                    "    onDragLeave = (e) => {",
                    "        this.setState({",
                    "            dragOver: false",
                    "        });",
                    "        this.props.onDragLeave(e);",
                    "    };",
                    "",
                    "    onDrop = (e) => {",
                    "        this.setState({",
                    "            dragOver: false",
                    "        });",
                    "        this.props.onDrop(e);",
                    "    };",
                    "",
                    "    render() {",
                    "        const {className, style, shape, locale, prefix, listType, ...others} = this.props;",
                    "        const prefixCls = `${prefix}upload-drag`;",
                    "        const cls = classNames({",
                    "            [`${prefixCls}`]: true,",
                    "            [`${prefixCls}-over`]: this.state.dragOver,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        const children = this.props.children || (<div className={cls}>",
                    "            <p className={`${prefixCls}-icon`}>",
                    "                <Icon type=\"upload\" size=\"large\"/>",
                    "            </p>",
                    "            <p className={`${prefixCls}-text`}>{locale.drag.text}</p>",
                    "            <p className={`${prefixCls}-hint`}>{locale.drag.hint}</p>",
                    "        </div>);",
                    "",
                    "        return (",
                    "            <Upload",
                    "                {...others}",
                    "                prefix={prefix}",
                    "                shape={shape}",
                    "                listType={listType}",
                    "                dragable",
                    "                style={style}",
                    "                onDragOver={this.onDragOver}",
                    "                onDragLeave={this.onDragLeave}",
                    "                onDrop={this.onDrop}",
                    "                ref={this.saveUploaderRef}",
                    "            >",
                    "                {children}",
                    "            </Upload>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Dragger;"
                ]
            },
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import ConfigProvider from '../config-provider';",
                    "import { log } from '../util';",
                    "import Upload from './upload';",
                    "import List from './list';",
                    "import Card from './card';",
                    "import Dragger from './dragger';",
                    "import Selecter from './runtime/selecter';",
                    "import Uploader from './runtime/uploader';",
                    "",
                    "Upload.Card = ConfigProvider.config(Card, { componentName: 'Upload' });",
                    "Upload.Dragger = ConfigProvider.config(Dragger, { componentName: 'Upload' });",
                    "Upload.Selecter = Selecter;",
                    "Upload.Uploader = Uploader;",
                    "",
                    "// compatible with 0.x version",
                    "function transform(props, deprecated) {",
                    "    const { listType, defaultFileList, fileList, ...others } = props;",
                    "    const newprops = others;",
                    "",
                    "    if (listType === 'text-image') {",
                    "        deprecated('listType=text-image', 'listType=image', 'Upload');",
                    "        newprops.listType = 'image';",
                    "    } else if (listType === 'picture-card') {",
                    "        deprecated('listType=picture-card', 'listType=card', 'Upload');",
                    "        newprops.listType = 'card';",
                    "    } else {",
                    "        newprops.listType = listType;",
                    "    }",
                    "",
                    "    if ('defaultFileList' in props) {",
                    "        deprecated('defaultFileList', 'defaultValue', 'Upload');",
                    "        newprops.defaultValue = defaultFileList;",
                    "    }",
                    "",
                    "    if ('fileList' in props) {",
                    "        deprecated('fileList', 'value', 'Upload');",
                    "        newprops.value = fileList;",
                    "    }",
                    "",
                    "    return newprops;",
                    "}",
                    "",
                    "// compatible with 0.x version",
                    "Upload.ImageUpload = ConfigProvider.config(Card, {",
                    "    componentName: 'Upload',",
                    "    transform: (props, deprecated) => {",
                    "        deprecated('Upload.ImageUpload', 'Upload.Card', 'Upload');",
                    "        const newprops = transform(props, () => { });",
                    "        if (newprops.locale && newprops.locale.image) {",
                    "            newprops.locale.card = newprops.locale.image;",
                    "        }",
                    "",
                    "        return newprops;",
                    "    }",
                    "});",
                    "",
                    "// compatible with 0.x version",
                    "Upload.DragUpload = ConfigProvider.config(Dragger, {",
                    "    componentName: 'Upload',",
                    "    transform: (props, deprecated) => {",
                    "        deprecated('Upload.DragUpload', 'Upload.Dragger', 'Upload');",
                    "        const newprops = transform(props, () => { });",
                    "        if (!newprops.listType) {",
                    "            newprops.listType = 'card';",
                    "        }",
                    "",
                    "        return newprops;",
                    "    }",
                    "});",
                    "",
                    "// compatible with 0.x version",
                    "Upload.Core = class Core extends React.Component {",
                    "    constructor(props) {",
                    "        super(props);",
                    "        // eslint-disable-next-line",
                    "        const { action, name, method, beforeUpload, onProgress, onError, withCredentials, headers, data, onSuccess } = this.props;",
                    "",
                    "        this.uploader = new Uploader({",
                    "            action,",
                    "            name,",
                    "            method,",
                    "            beforeUpload,",
                    "            onProgress,",
                    "            onError,",
                    "            withCredentials,",
                    "            headers,",
                    "            data,",
                    "            onSuccess",
                    "        });",
                    "    }",
                    "",
                    "    abort() {",
                    "        this.uploader.abort();",
                    "    }",
                    "",
                    "    handleSelect = (files) => {",
                    "        this.uploader.startUpload(files);",
                    "    }",
                    "",
                    "    render() {",
                    "        log.deprecated('Upload.Core', 'Upload.Selecter and Upload.Uploader', 'Upload');",
                    "",
                    "        // eslint-disable-next-line",
                    "        const { action, name, method, beforeUpload, onProgress, onError, withCredentials, headers, data, onSuccess, ...others } = this.props;",
                    "",
                    "        const props = others;",
                    "",
                    "        return <Selecter {...transform(props, () => { })} onSelect={this.handleSelect} />;",
                    "    }",
                    "};",
                    "",
                    "// compatible with 0.x version",
                    "Upload.List = ConfigProvider.config(List, {",
                    "    componentName: 'Upload',",
                    "    transform",
                    "});",
                    "",
                    "// compatible with 0.x version",
                    "Upload.CropUpload = function() {",
                    "    log.deprecated('Upload.CropUpload', '@alife/bc-next-crop-upload', 'Upload');",
                    "    return null;",
                    "};",
                    "",
                    "export default ConfigProvider.config(Upload, {",
                    "    transform",
                    "});"
                ]
            },
            "list.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React, {Component} from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import Progress from '../progress';",
                    "import Icon from '../icon';",
                    "import Button from '../button';",
                    "import {func, obj, KEYCODE} from '../util';",
                    "import zhCN from '../locale/zh-cn.js';",
                    "import {previewFile} from './util';",
                    "",
                    "class List extends Component {",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 多语言",
                    "         */",
                    "        locale: PropTypes.object,",
                    "        /**",
                    "         * 文件列表，数据格式请参考 文件对象",
                    "         */",
                    "        listType: PropTypes.oneOf(['text', 'image', 'card']),",
                    "        /**",
                    "         * 文件列表",
                    "         */",
                    "        value: PropTypes.array,",
                    "        closable: PropTypes.bool,",
                    "        /**",
                    "         * 删除文件回调(支持Promise)",
                    "         */",
                    "        onRemove: PropTypes.func,",
                    "        /**",
                    "         * 取消上传回调(支持Promise)",
                    "         */",
                    "        onCancel: PropTypes.func,",
                    "        /**",
                    "         * 头像加载出错回调",
                    "         */",
                    "        onImageError: PropTypes.func,",
                    "        /**",
                    "         * listType=card时点击图片回调",
                    "         */",
                    "        onPreview: PropTypes.func,",
                    "        /**",
                    "         * 自定义额外渲染",
                    "         */",
                    "        extraRender: PropTypes.func,",
                    "        children: PropTypes.node,",
                    "        uploader: PropTypes.any,",
                    "        useDataURL: PropTypes.bool,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        listType: 'text',",
                    "        value: [],",
                    "        locale: zhCN.Upload,",
                    "        closable: false,",
                    "        onRemove: func.noop,",
                    "        onCancel: func.noop,",
                    "        extraRender: func.noop,",
                    "        onImageError: func.noop,",
                    "        onPreview: func.noop,",
                    "    };",
                    "",
                    "    componentDidUpdate() {",
                    "        if (this.props.listType !== 'image' && this.props.listType !== 'card') {",
                    "            return;",
                    "        }",
                    "",
                    "        this.props.useDataURL && this.props.value.forEach(file => {",
                    "            if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File) || file.imgURL !== undefined) {",
                    "                return;",
                    "            }",
                    "            file.imgURL = '';",
                    "            previewFile(file.originFileObj, (previewDataUrl) => {",
                    "                file.imgURL = previewDataUrl;",
                    "                this.forceUpdate();",
                    "            });",
                    "        });",
                    "    }",
                    "",
                    "    handleClose = (file) => {",
                    "        const {onRemove, uploader} = this.props;",
                    "",
                    "        const remove = onRemove(file);",
                    "",
                    "        func.promiseCall(remove, () => {",
                    "            uploader && uploader.removeFile(file);",
                    "        });",
                    "    };",
                    "",
                    "    handleCancel = (file) => {",
                    "        const {onCancel, uploader} = this.props;",
                    "        const cancel = onCancel(file);",
                    "",
                    "        func.promiseCall(cancel, () => {",
                    "            uploader && uploader.abort(file);",
                    "        });",
                    "    };",
                    "",
                    "    onImageError = (file, obj) => {",
                    "        obj.onerror = null;",
                    "        this.props.onImageError(obj, file);",
                    "    };",
                    "",
                    "    onPreview = (file, e) => {",
                    "        this.props.onPreview(file, e);",
                    "    };",
                    "",
                    "    getInfo(file) {",
                    "        const prefixCls = `${this.props.prefix}upload`;",
                    "        const downloadURL = file.downloadURL || file.url;",
                    "        const imgURL = file.imgURL || file.url;",
                    "        const size = this.sizeCaculator(file.size);",
                    "        const itemCls = classNames({",
                    "            [`${prefixCls}-list-item`]: true,",
                    "            [`${prefixCls}-list-item-${file.state}`]: file.state",
                    "        });",
                    "        const alt = file.name || file.alt;",
                    "        return {prefixCls, downloadURL, imgURL, size, itemCls, alt};",
                    "    }",
                    "    // transfer size from number to xx K/ XxxM / xxG",
                    "    sizeCaculator(size) {",
                    "        let fileSize = parseFloat(size, 10);",
                    "        // fileSize为浮点数 用 < 0.000001 替代 === 0",
                    "        if (isNaN(fileSize) || fileSize < 0.0000001) {",
                    "            return 0;",
                    "        }",
                    "        const SIZE_SUFFIX = ['B', 'K', 'M', 'G', 'T', 'P'];",
                    "        let suffixIndex = 0;",
                    "",
                    "        // 在Mac上实验发现 取1024造成显示的大小和实际大小不一致",
                    "        // 因为单位制不同 见 https://superuser.com/questions/938234/size-of-files-in-windows-os-its-kb-or-kb",
                    "        const BIT_NUMBER_SYSTEM = 1024;",
                    "        while (fileSize >= BIT_NUMBER_SYSTEM && suffixIndex < SIZE_SUFFIX.length) {",
                    "            suffixIndex++;",
                    "            fileSize /= BIT_NUMBER_SYSTEM;",
                    "        }",
                    "",
                    "        const suffix = SIZE_SUFFIX[suffixIndex];",
                    "        fileSize = fileSize.toFixed(2);",
                    "",
                    "        return `${fileSize}${suffix}`;",
                    "    }",
                    "    getTextList(file) {",
                    "        const {extraRender} = this.props;",
                    "",
                    "        const {prefixCls, downloadURL, size, itemCls} = this.getInfo(file);",
                    "        const onClick = () => file.state === 'uploading' ? this.handleCancel(file) : this.handleClose(file);",
                    "        const onKeyDown = (e) => {",
                    "            if (e.keyCode === KEYCODE.ENTER) {",
                    "                onClick();",
                    "            }",
                    "        };",
                    "        return (",
                    "            <div className={itemCls} key={file.uid || file.name}>",
                    "                <div>",
                    "                    <a href={downloadURL} target=\"_blank\" style={{pointerEvents: downloadURL ? '' : 'none'}}",
                    "                        className={`${prefixCls}-list-item-name`}>",
                    "                        <span>{file.name}</span>",
                    "                        {!!size && <span className={`${prefixCls}-list-item-size`}>({size})</span>}",
                    "                    </a>",
                    "                    {file.state === 'uploading' ?",
                    "                        <div className={`${prefixCls}-list-item-progress`}>",
                    "                            <Progress size=\"medium\" percent={file.percent} textRender={func.noop}/>",
                    "                        </div> : null}",
                    "",
                    "                    <span className={`${prefixCls}-extra`}>{extraRender(file)}</span>",
                    "",
                    "                </div>",
                    "",
                    "                {this.props.closable ?",
                    "                    <Icon type=\"close\"",
                    "                        size=\"large\"",
                    "                        role=\"button\"",
                    "                        tabIndex=\"0\"",
                    "                        onClick={onClick}",
                    "                        onKeyDown={onKeyDown}/> : null",
                    "                }",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    getImageList(file) {",
                    "        const {extraRender} = this.props;",
                    "",
                    "        const {prefixCls, downloadURL, imgURL, size, itemCls, alt} = this.getInfo(file);",
                    "",
                    "        let img = null;",
                    "",
                    "        const onClick = () => file.state === 'uploading' ? this.handleCancel(file) : this.handleClose(file);",
                    "        const onKeyDown = (e) => {",
                    "            if (e.keyCode === KEYCODE.ENTER) {",
                    "                onClick();",
                    "            }",
                    "        };",
                    "",
                    "        if (file.state === 'uploading' || (file.state === 'selected' && !imgURL)) {",
                    "            img = (<Icon type=\"picture\"/>);",
                    "        } else if (file.state === 'error') {",
                    "            img = (<Icon type=\"cry\"/>);",
                    "        } else {",
                    "            img = (<img src={imgURL} onError={this.onImageError.bind(this, file)} tabIndex=\"0\" alt={alt} onClick={this.onPreview.bind(this, file)}/>);",
                    "        }",
                    "",
                    "        return (",
                    "            <div className={itemCls} key={file.uid || file.name}>",
                    "                <div className={`${prefixCls}-list-item-thumbnail`}>",
                    "                    {img}",
                    "                </div>",
                    "                {file.state !== 'uploading' ? <a href={downloadURL} target=\"_blank\" style={{pointerEvents: downloadURL ? '' : 'none'}} className={`${prefixCls}-list-item-name`}>",
                    "                    <span>{file.name}</span>",
                    "                    {!!size && <span className={`${prefixCls}-list-item-size`}>({size})</span>}",
                    "                </a> : null}",
                    "                {file.state === 'uploading' ? <div className={`${prefixCls}-list-item-progress`}>",
                    "                    <Progress size=\"medium\" percent={file.percent} textRender={func.noop}/>",
                    "                </div> : null}",
                    "                <span className={`${prefixCls}-extra`}>{extraRender(file)}</span>",
                    "                {this.props.closable ? <Icon type=\"close\" size=\"large\" tabIndex=\"0\" role=\"button\" onClick={onClick} onKeyDown={onKeyDown}/> : null}",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    getPictureCardList(file) {",
                    "        const {locale} = this.props;",
                    "",
                    "        const {prefixCls, downloadURL, imgURL, itemCls, alt} = this.getInfo(file);",
                    "",
                    "        let img = null;",
                    "",
                    "        if (file.state === 'uploading' || (file.state === 'selected' && !imgURL)) {",
                    "            img = (",
                    "                <div className={`${prefixCls}-list-item-handler`}>",
                    "                    <Icon type=\"picture\"/>",
                    "                    <Button text onClick={() => this.handleCancel(file)} >",
                    "                        {locale.card.cancel}",
                    "                    </Button>",
                    "                </div>",
                    "            );",
                    "        } else if (file.state === 'error') {",
                    "            img = (",
                    "                <div className={`${prefixCls}-list-item-handler`}>",
                    "                    <Icon type=\"cry\"/>",
                    "                </div>",
                    "            );",
                    "        } else {",
                    "            img = (<img src={imgURL} tabIndex=\"0\" alt={alt} onError={this.onImageError.bind(this, file)} onClick={this.onPreview.bind(this, file)}/>);",
                    "        }",
                    "",
                    "        const onClose = () => this.handleClose(file);",
                    "        const onKeyDownClose = (e) => {",
                    "            if (e.keyCode === KEYCODE.ENTER) {",
                    "                onClose();",
                    "            }",
                    "        };",
                    "        return (",
                    "            <div className={itemCls} key={file.uid || file.name}>",
                    "                <div className={`${prefixCls}-list-item-wrapper`}>",
                    "                    <div className={`${prefixCls}-list-item-thumbnail`}>",
                    "                        {img}",
                    "                    </div>",
                    "                    {file.state === 'uploading' ?",
                    "                        <div className={`${prefixCls}-list-item-progress`}>",
                    "                            <Progress size=\"medium\" percent={file.percent} textRender={func.noop}/>",
                    "                        </div> : null",
                    "                    }",
                    "                    {file.state !== 'uploading' ? (",
                    "                        <span className={`${prefixCls}-tool ${!this.props.closable ? '`${prefixCls}-noclose' : ''}`}>",
                    "                            <a href={downloadURL} target=\"_blank\" tabIndex={downloadURL ? '0' : '-1'} style={{pointerEvents: downloadURL ? '' : 'none'}}>",
                    "                                <Icon type={downloadURL ? 'download' : ''} className={`${prefixCls}-tool-download-icon`}/>",
                    "                            </a>",
                    "",
                    "                            {this.props.closable ?",
                    "                                <span className={`${prefixCls}-tool-close`}>",
                    "                                    <Icon type=\"ashbin\" tabIndex=\"0\" role=\"button\" onClick={onClose} onKeyDown={onKeyDownClose}/>",
                    "                                </span> : null",
                    "                            }",
                    "                        </span>",
                    "                    ) : ''}",
                    "                </div>",
                    "",
                    "                <span className={`${prefixCls}-list-item-name`}>{file.name}</span>",
                    "            </div>",
                    "        );",
                    "    }",
                    "",
                    "    render() {",
                    "        const {listType, children, prefix} = this.props;",
                    "        const prefixCls = `${prefix}upload`;",
                    "",
                    "        const list = this.props.value.map((file) => {",
                    "            if (listType === 'text') {",
                    "                return this.getTextList(file);",
                    "            } else if (listType === 'image') {",
                    "                return this.getImageList(file);",
                    "            } else if (listType === 'card') {",
                    "                return this.getPictureCardList(file);",
                    "            }",
                    "            return null;",
                    "        });",
                    "        const listclassNames = classNames({",
                    "            [`${prefixCls}-list`]: true,",
                    "            [`${prefixCls}-list-${this.props.listType}`]: true",
                    "        });",
                    "",
                    "        const others = obj.pickAttrsWith(this.props, 'data-');",
                    "        return (",
                    "            <div {...others} className={listclassNames}  >",
                    "                {list}",
                    "                {children}",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default List;"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "",
                    "@import \"../core/index-noreset\";",
                    "@import \"scss/variable\";",
                    "",
                    ".#{$css-prefix}upload-list-item-name {",
                    "    text-decoration: none;",
                    "}",
                    "#{$upload-prefix} {",
                    "    @include box-sizing;",
                    "",
                    "    &-inner {",
                    "        &.#{$css-prefix}hidden {",
                    "            display: none;",
                    "        }",
                    "        outline: 0;",
                    "        display: inline-block;",
                    "    }",
                    "",
                    "    &-list {",
                    "        overflow: hidden;",
                    "        @include box-sizing;",
                    "    }",
                    "",
                    "    &-list-item {",
                    "        position: relative;",
                    "        &.#{$css-prefix}hidden {",
                    "            display: none;",
                    "        }",
                    "    }",
                    "",
                    "    &.#{$css-prefix}disabled {",
                    "        border-color: $upload-disable-border-color !important;",
                    "        color: $upload-disable-text-color !important;",
                    "",
                    "        :hover {",
                    "            border-color: $upload-disable-border-color !important;",
                    "            color: $upload-disable-text-color !important;",
                    "            cursor: not-allowed;",
                    "        }",
                    "        * {",
                    "            color: $upload-disable-text-color !important;",
                    "            border-color: $upload-disable-border-color !important;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$upload-prefix}-list-text {",
                    "    #{$upload-prefix}-list-item {",
                    "        height: $upload-text-list-height;",
                    "        line-height: $upload-text-list-height;",
                    "        background-color: $upload-text-list-bg-color;",
                    "        padding: 0 $upload-text-list-padding-left-right;",
                    "        font-size: $upload-text-list-font-size;",
                    "        overflow: hidden;",
                    "        transition: all .2s ease-out;",
                    "        padding-right: $upload-text-list-close-icon-right + $upload-text-list-close-icon-size;",
                    "",
                    "        &:not(:last-child) {",
                    "            margin-bottom: 4px;",
                    "        }",
                    "",
                    "        .#{$css-prefix}icon {",
                    "            position: absolute;",
                    "            top: 0;",
                    "            right: $upload-text-list-close-icon-right;",
                    "            color: $upload-text-list-close-icon-color;",
                    "            cursor: pointer;",
                    "            text-align: center;",
                    "            transition: all .2s ease-out;",
                    "",
                    "            @include icon-size($upload-text-list-close-icon-size);",
                    "        }",
                    "",
                    "        &:hover {",
                    "            background-color: $upload-text-list-bg-color-hover;",
                    "            .#{$css-prefix}icon {",
                    "                color: $upload-text-list-close-icon-color-hover;",
                    "            }",
                    "        }",
                    "",
                    "        &-name {",
                    "            color: $upload-text-list-name-font-color;",
                    "            text-overflow: ellipsis;",
                    "            white-space: nowrap;",
                    "            overflow: hidden;",
                    "            float: left;",
                    "            margin-right: 4px;",
                    "            transition: all .2s ease-out;",
                    "        }",
                    "        &-size {",
                    "            color: $upload-text-list-size-font-color;",
                    "            margin-left: 8px;",
                    "        }",
                    "        &-uploading #{$upload-prefix}-list-item-name {",
                    "            max-width: 30%;",
                    "        }",
                    "        &-progress {",
                    "            float: left;",
                    "            width: 60%;",
                    "        }",
                    "        &-done:hover .#{$css-prefix}upload-list-item-name {",
                    "            color: $upload-text-list-name-font-color-hover;",
                    "        }",
                    "        &-done:hover .#{$css-prefix}upload-list-item-size {",
                    "            color: $upload-text-list-size-font-color-hover;",
                    "        }",
                    "        &-error {",
                    "            /* stylelint-disable declaration-no-important */",
                    "            background-color: $upload-text-list-bg-color-error !important;",
                    "            .#{$css-prefix}upload-list-item-name {",
                    "                color: $upload-text-list-error-text-color;",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$upload-prefix}-list-image {",
                    "    .#{$css-prefix}upload-list-item {",
                    "        border: $upload-image-list-item-border-width solid $upload-image-list-item-border-color;",
                    "        background-color: $upload-image-list-item-bg-color;",
                    "        padding: $upload-image-list-item-padding;",
                    "        line-height: $upload-image-list-item-picture-size;",
                    "        font-size: $upload-image-list-item-font-size;",
                    "        transition: all .2s ease-out;",
                    "",
                    "        &:not(:last-child) {",
                    "            margin-bottom: 4px;",
                    "        }",
                    "        @include clearfix();",
                    "",
                    "        .#{$css-prefix}icon-close {",
                    "            float: right;",
                    "            margin-right: $upload-image-list-close-icon-right;",
                    "            cursor: pointer;",
                    "            color: $upload-image-list-close-icon-color;",
                    "            text-align: center;",
                    "",
                    "            @include icon-size($upload-image-list-close-icon-size);",
                    "        }",
                    "",
                    "        &:hover {",
                    "            border-color: $upload-image-list-item-border-color-hover;",
                    "",
                    "            .#{$css-prefix}icon-close {",
                    "                color: $upload-image-list-close-icon-color-hover;",
                    "            }",
                    "        }",
                    "",
                    "        &-name {",
                    "            color: $upload-text-list-name-font-color;",
                    "        }",
                    "",
                    "        &-size {",
                    "            color: $upload-text-list-size-font-color;",
                    "            margin-left: 8px;",
                    "        }",
                    "        &-progress {",
                    "            float: left;",
                    "            width: 70%;",
                    "            /* line-height: $upload-image-list-item-picture-size; */",
                    "            /* font-size: 0; */",
                    "        }",
                    "",
                    "        &-done:hover .#{$css-prefix}upload-list-item-name {",
                    "            color: $upload-text-list-name-font-color-hover;",
                    "        }",
                    "        &-done:hover .#{$css-prefix}upload-list-item-size {",
                    "            color: $upload-text-list-size-font-color-hover;",
                    "        }",
                    "",
                    "        &-thumbnail {",
                    "            float: left;",
                    "            width: $upload-image-list-item-picture-size;",
                    "            height: $upload-image-list-item-picture-size;",
                    "            color: $upload-image-list-item-thumbnail-font-color;",
                    "            border: 1px solid $upload-image-list-item-picture-border-color;",
                    "            background-color: $upload-image-list-item-picture-background-color;",
                    "            margin-right: $upload-image-list-item-padding;",
                    "            vertical-align: middle;",
                    "            text-align: center;",
                    "",
                    "            img {",
                    "                width: 100%;",
                    "                height: 100%;",
                    "            }",
                    "",
                    "            .#{$css-prefix}icon {",
                    "                display: block;",
                    "                margin: 0;",
                    "                line-height: $upload-image-list-item-picture-size;",
                    "",
                    "                @include icon-size($upload-image-list-item-picture-icon-size);",
                    "            }",
                    "        }",
                    "",
                    "        &-error {",
                    "            border-color: $upload-image-list-item-border-color-error !important;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$upload-prefix}-list-card {",
                    "    display: inline-block;",
                    "    .#{$css-prefix}upload-list-item {",
                    "        vertical-align: middle;",
                    "        float: left;",
                    "",
                    "        &:not(:last-child) {",
                    "            margin-right: $upload-card-list-margin-right;",
                    "        }",
                    "",
                    "        &-wrapper {",
                    "            position: relative;",
                    "            border: 1px solid $upload-card-list-border-color;",
                    "            width: $upload-card-size;",
                    "            height: $upload-card-size;",
                    "        }",
                    "",
                    "        &-thumbnail {",
                    "            display: table;",
                    "            text-align: center;",
                    "            vertical-align: middle;",
                    "            width: 100%;",
                    "            height: 100%;",
                    "            color: $upload-card-list-thumbnail-font-color;",
                    "            font-size: $upload-card-list-thumbnail-font-size;",
                    "",
                    "            img {",
                    "                width: 100%;",
                    "                height: 100%;",
                    "            }",
                    "",
                    "            .#{$css-prefix}icon {",
                    "                width: 100%;",
                    "                @include icon-size($upload-card-list-thumbnail-icon-size);",
                    "            }",
                    "        }",
                    "",
                    "        &-handler {",
                    "            display: table-cell;",
                    "            width: 100%;",
                    "            vertical-align: middle;",
                    "        }",
                    "",
                    "        &-name {",
                    "            display: block;",
                    "            width: $upload-card-size;",
                    "            text-align: center;",
                    "            margin-top: $upload-card-list-name-margin-top;",
                    "            font-size: $upload-card-list-name-font-size;",
                    "            color: $upload-card-list-name-font-color;",
                    "            text-overflow: ellipsis;",
                    "            white-space: nowrap;",
                    "            overflow: hidden;",
                    "        }",
                    "",
                    "        &-progress {",
                    "            position: absolute;",
                    "            font-size: 0;",
                    "            bottom: 0;",
                    "            left: 0;",
                    "            width: 100%;",
                    "        }",
                    "",
                    "        &-uploading .#{$css-prefix}upload-list-item-thumbnail {",
                    "            background-color: $upload-card-list-uploading-bg-color;",
                    "        }",
                    "",
                    "        &:hover {",
                    "            .#{$css-prefix}upload-tool {",
                    "                opacity: .8;",
                    "            }",
                    "        }",
                    "",
                    "        .#{$css-prefix}upload-tool {",
                    "            position: absolute;",
                    "            z-index: 1;",
                    "            background-color: rgba($color-black, .7);",
                    "            transition: all .3s ease;",
                    "            opacity: 0;",
                    "            width: 100%;",
                    "            height: $upload-select-card-tool-height;",
                    "            left: 0;",
                    "            bottom: 0;",
                    "",
                    "            .#{$css-prefix}icon {",
                    "                width: 49%;",
                    "                text-align: center;",
                    "                line-height: $upload-select-card-tool-height;",
                    "                color: $color-white;",
                    "            }",
                    "",
                    "            .#{$css-prefix}icon {",
                    "                @include icon-size($upload-select-card-tool-icon-size);",
                    "            }",
                    "",
                    "            &.#{$css-prefix}noclose .#{$css-prefix}icon {",
                    "                width: 100%;",
                    "            }",
                    "",
                    "            &-close {",
                    "                cursor: pointer;",
                    "            }",
                    "",
                    "            &-download-icon {",
                    "                border-right: 1px solid $color-white;",
                    "            }",
                    "        }",
                    "",
                    "        &-error .#{$css-prefix}upload-list-item-wrapper {",
                    "            border-color: $upload-card-list-border-color-error;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$upload-prefix}-card {",
                    "    border: 1px $upload-card-border-style $upload-card-border-color;",
                    "    width: $upload-card-size;",
                    "    height: $upload-card-size;",
                    "    background-color: $upload-card-bg-color;",
                    "    text-align: center;",
                    "    cursor: pointer;",
                    "    transition: border-color .3s ease;",
                    "    display: table-cell;",
                    "    vertical-align: middle;",
                    "",
                    "    .#{$css-prefix}icon {",
                    "        color: $upload-card-border-color;",
                    "        @include icon-size($upload-card-add-icon-size);",
                    "    }",
                    "",
                    "    .#{$css-prefix}upload-text {",
                    "        font-size: $upload-card-add-text-size;",
                    "        margin-top: $upload-card-add-text-margin-top;",
                    "        color: $upload-card-font-color;",
                    "    }",
                    "",
                    "    &:hover {",
                    "        border-color: $upload-card-hover-border-color;",
                    "        .#{$css-prefix}icon {",
                    "            color: $upload-card-hover-font-color;",
                    "        }",
                    "        .#{$css-prefix}upload-text {",
                    "            color: $upload-card-hover-font-color;",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "#{$upload-prefix}-drag {",
                    "    border: 1px dashed $upload-drag-zone-border-color;",
                    "    transition: border-color .3s ease;",
                    "    cursor: pointer;",
                    "    border-radius: $upload-drag-zone-corner;",
                    "    text-align: center;",
                    "    margin-bottom: $s-1;",
                    "    &-icon {",
                    "        margin: $s-5 0 0;",
                    "        color: $color-text1-3;",
                    "    }",
                    "    &-text {",
                    "        margin: $s-3 0 0;",
                    "        font-size: $upload-drag-zone-font-size;",
                    "        color: $color-text1-3;",
                    "    }",
                    "    &-hint {",
                    "        margin: $s-1 0 $s-5;",
                    "        font-size: $upload-drag-zone-hint-font-size;",
                    "        color: $color-text1-2;",
                    "    }",
                    "    &-over {",
                    "        border-color: $upload-drag-zone-over-border-color;",
                    "    }",
                    "}"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import '../icon/style.js';",
                    "import '../button/style.js';",
                    "import '../progress/style.js';",
                    "import './main.scss';"
                ]
            },
            "upload.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import React from 'react';",
                    "import PropTypes from 'prop-types';",
                    "import classNames from 'classnames';",
                    "import {func, obj} from '../util';",
                    "import Icon from '../icon';",
                    "import Base from './base';",
                    "import Uploader from './runtime/index';",
                    "import html5Uploader from './runtime/html5-uploader';",
                    "import List from './list';",
                    "import {fileToObject, getFileItem} from './util';",
                    "",
                    "const noop = func.noop;",
                    "",
                    "/**",
                    " * Upload",
                    " */",
                    "class Upload extends Base {",
                    "    static displayName = 'Upload';",
                    "",
                    "    static propTypes = {",
                    "        ...html5Uploader.propTypes,",
                    "        ...List.propTypes,",
                    "        /**",
                    "         * 样式前缀",
                    "         */",
                    "        prefix: PropTypes.string.isRequired,",
                    "        /**",
                    "         * 上传的地址",
                    "         */",
                    "        action: PropTypes.string,",
                    "        /**",
                    "         * 文件列表",
                    "         */",
                    "        value: PropTypes.array,",
                    "        /**",
                    "         * 默认文件列表",
                    "         */",
                    "        defaultValue: PropTypes.array,",
                    "        /**",
                    "         * 上传按钮形状",
                    "         */",
                    "        shape: PropTypes.oneOf(['card']),",
                    "        /**",
                    "         * 上传列表的样式",
                    "         * @enumdesc 文字, 图文, 卡片",
                    "         */",
                    "        listType: PropTypes.oneOf(['text', 'image', 'card']),",
                    "        list: PropTypes.any,",
                    "        /**",
                    "         * 上传额外传参",
                    "         */",
                    "        data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),",
                    "        /**",
                    "         * 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)",
                    "         * @param {Object} response 返回",
                    "         * @param {File} file 文件对象",
                    "         */",
                    "        formatter: PropTypes.func,",
                    "        /**",
                    "         * 最大文件上传个数",
                    "         */",
                    "        limit: PropTypes.number,",
                    "        /**",
                    "         * 设置上传超时,单位ms",
                    "         */",
                    "        timeout: PropTypes.number,",
                    "        /**",
                    "         * 可选参数，是否支持拖拽上传，`ie10+` 支持。",
                    "         */",
                    "        dragable: PropTypes.bool,",
                    "        closable: PropTypes.bool,",
                    "        useDataURL: PropTypes.bool,",
                    "        /**",
                    "         * 可选参数，是否禁用上传功能",
                    "         */",
                    "        disabled: PropTypes.bool,",
                    "        /**",
                    "         * 选择文件回调",
                    "         */",
                    "        onSelect: PropTypes.func,",
                    "        /**",
                    "         * 上传中",
                    "         */",
                    "        onProgress: PropTypes.func,",
                    "        /**",
                    "         * 上传文件改变时的状态",
                    "         * @param {Object} info 文件事件对象",
                    "         */",
                    "        onChange: PropTypes.func,",
                    "        /**",
                    "         * 可选参数，上传成功回调函数，参数为请求下响应信息以及文件",
                    "         */",
                    "        onSuccess: PropTypes.func,",
                    "        /**",
                    "         * 移除文件回调函数，详见 [onRemove](#onRemove)",
                    "         */",
                    "        onRemove: PropTypes.func,",
                    "        /**",
                    "         * 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件",
                    "         */",
                    "        onError: PropTypes.func,",
                    "        /**",
                    "         * 可选参数, 详见 [beforeUpload](#beforeUpload)",
                    "         * @param {Object} files",
                    "         * @param {Object} options",
                    "         * @returns {Boolean|Object|Promise}",
                    "         */",
                    "        beforeUpload: PropTypes.func,",
                    "        /**",
                    "         * 放文件",
                    "         */",
                    "        onDrop: PropTypes.func,",
                    "        /**",
                    "         * 自定义class",
                    "         */",
                    "        className: PropTypes.string,",
                    "        /**",
                    "         * 自定义内联样式",
                    "         */",
                    "        style: PropTypes.object,",
                    "        /**",
                    "         * 子元素",
                    "         */",
                    "        children: PropTypes.node,",
                    "        /**",
                    "         * 自动上传",
                    "         */",
                    "        autoUpload: PropTypes.bool,",
                    "        /**",
                    "         * 可选参数, 用于校验文件,afterSelect仅在 autoUpload=false 的时候生效,autoUpload=true时,可以使用beforeUpload完全可以替代该功能.",
                    "         * @param {Object} file",
                    "         * @returns {Boolean} 返回false会阻止上传,其他则表示正常",
                    "         */",
                    "        afterSelect: PropTypes.func,",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        ...html5Uploader.defaultProps,",
                    "        prefix: 'next-',",
                    "        limit: Infinity,",
                    "        autoUpload: true,",
                    "        closable: true,",
                    "        onSelect: noop,",
                    "        onProgress: noop,",
                    "        onChange: noop,",
                    "        onSuccess: noop,",
                    "        onRemove: noop,",
                    "        onError: noop,",
                    "        onDrop: noop,",
                    "        beforeUpload: noop,",
                    "        afterSelect: noop,",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "",
                    "        let value;",
                    "        if ('value' in props) {",
                    "            value = props.value;",
                    "        } else {",
                    "            value = props.defaultValue;",
                    "        }",
                    "",
                    "        this.state = {",
                    "            value: typeof value === 'undefined' ? [] : [].concat(value)",
                    "        };",
                    "",
                    "        this.uploading = false;",
                    "    }",
                    "",
                    "    componentWillReceiveProps(nextProps) {",
                    "        if ('value' in nextProps && !this.uploading) {",
                    "            this.setState({",
                    "                value: typeof nextProps.value === 'undefined' ? [] : [].concat(nextProps.value)",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    onSelect = (files) => {",
                    "        const {autoUpload, afterSelect, onSelect, limit} = this.props;",
                    "",
                    "        const fileList = files.map(file => {",
                    "            const objFile = fileToObject(file);",
                    "            objFile.state = 'selected';",
                    "            return objFile;",
                    "        });",
                    "",
                    "        const total = this.state.value.length + fileList.length;",
                    "",
                    "        if (total > limit) {",
                    "            const more = total - limit;",
                    "            fileList.splice(fileList.length - more, more);",
                    "        }",
                    "",
                    "        const value = this.state.value.concat(fileList);",
                    "",
                    "        /* eslint-disable-next */",
                    "        this.state.value = value;",
                    "",
                    "",
                    "        if (autoUpload) {",
                    "            this.uploadFiles(fileList);",
                    "        }",
                    "",
                    "        onSelect(fileList, value);",
                    "",
                    "        if (!autoUpload) {",
                    "            fileList.forEach(file => {",
                    "                const isPassed = afterSelect(file);",
                    "                func.promiseCall(isPassed, func.noop, error => {",
                    "                    this.onError(error, null, file); //TODO: handle error message",
                    "                });",
                    "            });",
                    "            this.onChange(value, fileList);",
                    "        }",
                    "    };",
                    "",
                    "    onDrop = (files) => {",
                    "        this.onSelect(files);",
                    "    };",
                    "",
                    "    /**",
                    "     * 对外暴露API, 添加文件",
                    "     * @param files",
                    "     */",
                    "    selectFiles(files) {",
                    "        const filesArr = files.length ? Array.prototype.slice.call(files) : [files];",
                    "",
                    "        this.onSelect(filesArr);",
                    "    }",
                    "",
                    "    uploadFiles(files) {",
                    "        const fileList = files.filter((file => {",
                    "            if (file.state === 'selected') {",
                    "                file.state = 'uploading';",
                    "                return true;",
                    "            }",
                    "            return false;",
                    "        })).map((file) => {",
                    "            return file.originFileObj;",
                    "        });",
                    "",
                    "        fileList.length && this.uploaderRef.startUpload(fileList);",
                    "    }",
                    "",
                    "    /**",
                    "     * 对外暴露api，控制文件上传",
                    "     */",
                    "    startUpload() {",
                    "        this.uploadFiles(this.state.value);",
                    "    }",
                    "",
                    "    replaceFiles(old, current) {",
                    "        const targetItem = getFileItem(old, this.state.value);",
                    "        if (!targetItem) {",
                    "            return;",
                    "        }",
                    "",
                    "        current.uid = old.uid;",
                    "        targetItem.originFileObj = current;",
                    "    }",
                    "",
                    "    isUploading() {",
                    "        return this.uploading;",
                    "    }",
                    "",
                    "    onProgress = (e, file) => {",
                    "        this.uploading = true;",
                    "",
                    "        const value = this.state.value;",
                    "        const targetItem = getFileItem(file, value);",
                    "",
                    "        if (!targetItem) {",
                    "            return;",
                    "        }",
                    "",
                    "        Object.assign(targetItem, {",
                    "            state: 'uploading',",
                    "            percent: e.percent",
                    "        });",
                    "",
                    "        this.setState({",
                    "            value,",
                    "        });",
                    "",
                    "        this.props.onProgress(value, targetItem);",
                    "    };",
                    "",
                    "    onSuccess = (response, file) => {",
                    "        this.uploading = false;",
                    "",
                    "        const {formatter} = this.props;",
                    "",
                    "        if (formatter) {",
                    "            response = formatter(response, file);",
                    "        }",
                    "",
                    "        try {",
                    "            if (typeof response === 'string') {",
                    "                response = JSON.parse(response);",
                    "            }",
                    "        } catch (e) {",
                    "            this.onError(e, response, file);",
                    "            return;",
                    "        }",
                    "",
                    "        if (response.success === false) {",
                    "            return this.onError(response.message, response, file);",
                    "        }",
                    "",
                    "        const value = this.state.value;",
                    "        const targetItem = getFileItem(file, value);",
                    "",
                    "        if (!targetItem) {",
                    "            return;",
                    "        }",
                    "",
                    "        Object.assign(targetItem, {",
                    "            state: 'done',",
                    "            response,",
                    "            url: response.url,",
                    "            downloadURL: response.downloadURL || response.url,      // 下载地址(可选)",
                    "        });",
                    "",
                    "        if (!this.props.useDataURL) {",
                    "            targetItem.imgURL = response.imgURL || response.url;     // 缩略图地址(可选)",
                    "        }",
                    "",
                    "        this.props.onSuccess(targetItem, value);",
                    "        this.onChange(value, targetItem);",
                    "    };",
                    "",
                    "    onError = (err, response, file) => {",
                    "        this.uploading = false;",
                    "",
                    "        const value = this.state.value;",
                    "        const targetItem = getFileItem(file, value);",
                    "",
                    "        if (!targetItem) {",
                    "            return;",
                    "        }",
                    "",
                    "        Object.assign(targetItem, {",
                    "            state: 'error',",
                    "            error: err,",
                    "            response,",
                    "        });",
                    "",
                    "        this.props.onError(targetItem, value);",
                    "        this.onChange(value, targetItem);",
                    "    };",
                    "",
                    "",
                    "    /**",
                    "     * 删除文件",
                    "     * @param {File} file",
                    "     * @return {void}",
                    "     */",
                    "    removeFile = (file) => {",
                    "        if (this.props.disabled) {",
                    "            // disabled状态下不许删除文件",
                    "            return;",
                    "        }",
                    "        file.state = 'removed';",
                    "        this.uploaderRef.abort(file);     // 删除组件时调用组件的 `abort` 方法中断上传",
                    "",
                    "        const fileList = this.state.value;",
                    "        const targetItem = getFileItem(file, fileList);",
                    "        const index = fileList.indexOf(targetItem);",
                    "        if (index !== -1) {",
                    "            fileList.splice(index, 1);",
                    "            this.onChange(fileList, targetItem);",
                    "        }",
                    "    };",
                    "",
                    "    /**",
                    "     * 取消上传",
                    "     * @param {File} file",
                    "     * @return {void}",
                    "     */",
                    "    abort = (file) => {",
                    "        const fileList = this.state.value;",
                    "        const targetItem = getFileItem(file, fileList);",
                    "        const index = fileList.indexOf(targetItem);",
                    "        if (index !== -1) {",
                    "            fileList.splice(index, 1);",
                    "            this.onChange(fileList, targetItem);",
                    "        }",
                    "        this.uploaderRef.abort(file);     // 取消上传时调用组件的 `abort` 方法中断上传",
                    "    };",
                    "",
                    "    onChange = (value, file) => {",
                    "        // not controlled",
                    "        // if (!('value' in this.props)) {",
                    "        //     this.setState({",
                    "        //         value",
                    "        //     });",
                    "        // }",
                    "        this.setState({",
                    "            value",
                    "        });",
                    "        this.props.onChange(value, file);",
                    "    };",
                    "",
                    "    render() {",
                    "        const {",
                    "            listType,",
                    "            prefix,",
                    "            dragable,",
                    "            shape,",
                    "            className,",
                    "            style,",
                    "            useDataURL,",
                    "            disabled,",
                    "            limit,",
                    "            closable,",
                    "            beforeUpload,",
                    "            readonly,",
                    "            onRemove,",
                    "            onCancel,",
                    "            onPreview,",
                    "            list,",
                    "            extraRender,",
                    "            ...others} = this.props;",
                    "",
                    "        const cls = classNames({",
                    "            [`${prefix}upload`]: true,",
                    "            [`${prefix}disabled`]: disabled,",
                    "            [`${prefix}readonly`]: readonly,",
                    "            [className]: className",
                    "        });",
                    "",
                    "        const hidden = this.state.value.length >= limit;",
                    "        const innerCls = classNames({",
                    "            [`${prefix}upload-inner`]: true,",
                    "            [`${prefix}hidden`]: hidden,",
                    "        });",
                    "",
                    "        let children = this.props.children;",
                    "        if (shape === 'card') {",
                    "            const cardCls = classNames({",
                    "                [`${prefix}upload-card`]: true,",
                    "                [`${prefix}disabled`]: disabled,",
                    "            });",
                    "            children = (<div className={cardCls}>",
                    "                <Icon type=\"add\" size=\"large\"/>",
                    "                <div tabIndex=\"0\" role=\"button\" className={`${prefix}upload-text`}>",
                    "                    {children}",
                    "                </div>",
                    "            </div>);",
                    "        }",
                    "",
                    "        const otherAttributes = obj.pickAttrsWith(this.props, 'data-');",
                    "        return (",
                    "            <div className={cls} style={style} {...otherAttributes}>",
                    "                <Uploader",
                    "                    {...others}",
                    "                    beforeUpload={beforeUpload}",
                    "                    dragable={dragable}",
                    "                    disabled={disabled}",
                    "                    className={innerCls}",
                    "                    onSelect={this.onSelect}",
                    "                    onDrop={this.onDrop}",
                    "                    onProgress={this.onProgress}",
                    "                    onSuccess={this.onSuccess}",
                    "                    onError={this.onError}",
                    "                    ref={this.saveUploaderRef}",
                    "                >",
                    "                    {children}",
                    "                </Uploader>",
                    "                {listType || list ?",
                    "                    <List useDataURL={useDataURL} uploader={this} listType={listType} value={this.state.value}",
                    "                        closable={closable} onRemove={onRemove}",
                    "                        onCancel={onCancel} onPreview={onPreview} extraRender={extraRender}/> :",
                    "                    null}",
                    "            </div>",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default Upload;"
                ]
            },
            "util.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "let now = +(new Date());",
                    "",
                    "/**",
                    " * 生成唯一的id",
                    " * @return {String} uid",
                    " */",
                    "export function uid() {",
                    "    return (now++).toString(36);",
                    "}",
                    "",
                    "export function fileToObject(file) {",
                    "    if (!file.uid) {",
                    "        file.uid = uid();",
                    "    }",
                    "",
                    "    return {",
                    "        lastModified: file.lastModified,",
                    "        lastModifiedDate: file.lastModifiedDate,",
                    "        name: file.filename || file.name,",
                    "        size: file.size,",
                    "        type: file.type,",
                    "        uid: file.uid,",
                    "        error: file.error,",
                    "        percent: 0,",
                    "        originFileObj: file,",
                    "    };",
                    "}",
                    "",
                    "export function getFileItem(file, fileList) {",
                    "    const matchKey = file.uid !== undefined ? 'uid' : 'name';",
                    "    return fileList.filter(item => item[matchKey] === file[matchKey])[0];",
                    "}",
                    "",
                    "export function removeFileItem(file, fileList) {",
                    "    const matchKey = file.uid !== undefined ? 'uid' : 'name';",
                    "    const removed = fileList.filter(item => item[matchKey] !== file[matchKey]);",
                    "    if (removed.length === fileList.length) {",
                    "        return null;",
                    "    }",
                    "    return removed;",
                    "}",
                    "",
                    "",
                    "// https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL",
                    "export function previewFile(file, callback) {",
                    "    const reader = new FileReader();",
                    "    reader.onloadend = () => callback(reader.result);",
                    "    reader.readAsDataURL(file);",
                    "}"
                ]
            },
            "runtime": {
                "html5-uploader.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React, {Component} from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import {func} from '../../util';",
                        "import Uploader from './uploader';",
                        "import Selecter from './selecter';",
                        "",
                        "export default class Html5Uploader extends Component {",
                        "    static propTypes = {",
                        "        ...Selecter.propTypes,",
                        "        /**",
                        "         * 上传的地址",
                        "         */",
                        "        action: PropTypes.string,",
                        "        /**",
                        "         * 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)",
                        "         */",
                        "        accept: PropTypes.string,",
                        "        /**",
                        "         * 上传额外传参",
                        "         */",
                        "        data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),",
                        "        /**",
                        "         * 设置上传的请求头部",
                        "         */",
                        "        headers: PropTypes.object,",
                        "        /**",
                        "         * 是否允许请求携带 cookie",
                        "         */",
                        "        withCredentials: PropTypes.bool,",
                        "        /**",
                        "         * 上传文件之前",
                        "         * @param {Object} file 文件对象",
                        "         * @return {Boolean} `false` 停止上传",
                        "         */",
                        "        beforeUpload: PropTypes.func,",
                        "        /**",
                        "         * 正在上传文件的钩子，参数为上传的事件以及文件",
                        "         */",
                        "        onProgress: PropTypes.func,",
                        "        /**",
                        "         * 上传成功回调函数，参数为请求下响应信息以及文件",
                        "         */",
                        "        onSuccess: PropTypes.func,",
                        "        /**",
                        "         * 上传失败回调函数，参数为上传失败的信息、响应信息以及文件",
                        "         */",
                        "        onError: PropTypes.func,",
                        "        children: PropTypes.node,",
                        "        /**",
                        "         * 上传超时,单位ms",
                        "         */",
                        "        timeout: PropTypes.number,",
                        "        /**",
                        "         * 上传方法",
                        "         */",
                        "        method: PropTypes.oneOf(['post', 'put'])",
                        "    };",
                        "",
                        "",
                        "    static defaultProps = {",
                        "        ...Selecter.defaultProps,",
                        "        name: 'file',",
                        "        multiple: false,",
                        "        withCredentials: true,",
                        "        beforeUpload: func.noop,",
                        "        onSelect: func.noop,",
                        "        onDragOver: func.noop,",
                        "        onDragLeave: func.noop,",
                        "        onDrop: func.noop,",
                        "        onProgress: func.noop,",
                        "        onSuccess: func.noop,",
                        "        onError: func.noop,",
                        "        onAbort: func.noop,",
                        "        method: 'post',",
                        "    };",
                        "",
                        "    componentDidMount() {",
                        "        const {props} = this;",
                        "        const options = this.getUploadOptions(props);",
                        "        this.uploader = new Uploader(options);",
                        "    }",
                        "    componentWillReceiveProps(nextProps) {",
                        "        const options = this.getUploadOptions(nextProps);",
                        "        this.uploader.setOptions(options);",
                        "    }",
                        "",
                        "    componentWillUnmount() {",
                        "        this.abort();",
                        "    }",
                        "",
                        "    abort(file) {",
                        "        this.uploader.abort(file);",
                        "    }",
                        "",
                        "    startUpload(fileList) {",
                        "        this.uploader.startUpload(fileList);",
                        "    }",
                        "",
                        "    getUploadOptions = props => ({",
                        "        action: props.action,",
                        "        name: props.name,",
                        "        timeout: props.timeout,",
                        "        method: props.method,",
                        "        beforeUpload: props.beforeUpload,",
                        "        onProgress: props.onProgress,",
                        "        onSuccess: props.onSuccess,",
                        "        onError: props.onError,",
                        "        withCredentials: props.withCredentials,",
                        "        headers: props.headers,",
                        "        data: props.data,",
                        "    });",
                        "",
                        "    render() {",
                        "        const {",
                        "            accept,",
                        "            multiple,",
                        "            children,",
                        "            id,",
                        "            disabled,",
                        "            dragable,",
                        "            style,",
                        "            className,",
                        "            onSelect,",
                        "            onDragOver,",
                        "            onDragLeave,",
                        "            onDrop,",
                        "            name",
                        "        } = this.props;",
                        "",
                        "        return (",
                        "            <Selecter",
                        "                id={id}",
                        "                accept={accept}",
                        "                multiple={multiple}",
                        "                dragable={dragable}",
                        "                disabled={disabled}",
                        "                className={className}",
                        "                style={style}",
                        "                onSelect={onSelect}",
                        "                onDragOver={onDragOver}",
                        "                onDragLeave={onDragLeave}",
                        "                onDrop={onDrop}",
                        "                name={name}",
                        "            >",
                        "                {children}",
                        "            </Selecter>",
                        "        );",
                        "    }",
                        "}",
                        "",
                        ""
                    ]
                },
                "iframe-uploader.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import ReactDOM from 'react-dom';",
                        "import {log, func} from '../../util';",
                        "import {uid} from '../util';",
                        "",
                        "const INPUT_STYLE = {",
                        "    position: 'absolute',",
                        "    top: 0,",
                        "    right: 0,",
                        "    fontSize: 9999,",
                        "    zIndex: 9999,",
                        "    opacity: 0,",
                        "    outline: 'none',",
                        "    cursor: 'pointer'",
                        "};",
                        "",
                        "class IframeUploader extends React.Component {",
                        "    static propTypes = {",
                        "        style: PropTypes.object,",
                        "        action: PropTypes.string.isRequired,",
                        "        name: PropTypes.string.isRequired,",
                        "        data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),",
                        "        disabled: PropTypes.bool,",
                        "        className: PropTypes.string,",
                        "        children: PropTypes.node,",
                        "        headers: PropTypes.object,",
                        "        autoUpload: PropTypes.bool,",
                        "        onSelect: PropTypes.func,",
                        "        beforeUpload: PropTypes.func,",
                        "        onStart: PropTypes.func,",
                        "        onSuccess: PropTypes.func,",
                        "        onError: PropTypes.func,",
                        "        accept: PropTypes.string",
                        "    };",
                        "",
                        "    static defaultProps = {",
                        "        name: 'file',",
                        "        onSelect: func.noop,",
                        "        beforeUpload: func.noop,",
                        "        onStart: func.noop,",
                        "        onSuccess: func.noop,",
                        "        onError: func.noop,",
                        "        onAbort: func.noop",
                        "    };",
                        "",
                        "    constructor(props) {",
                        "        super(props);",
                        "        this.domain = typeof document !== 'undefined' && document.domain ? document.domain : '';",
                        "    }",
                        "",
                        "    state = {",
                        "        uploading: false",
                        "    };",
                        "",
                        "    componentDidMount() {",
                        "        this.updateInputWH();",
                        "    }",
                        "",
                        "    componentDidUpdate() {",
                        "        this.updateInputWH();",
                        "    }",
                        "",
                        "    file = {};",
                        "",
                        "    onLoad = () => {",
                        "        if (!this.state.uploading) {",
                        "            return;",
                        "        }",
                        "        const {props, file} = this;",
                        "        let response;",
                        "        try {",
                        "            const doc = this.refs.iframe.contentDocument;",
                        "            const script = doc.getElementsByTagName('script')[0];",
                        "            if (script && script.parentNode === doc.body) {",
                        "                doc.body.removeChild(script);",
                        "            }",
                        "            response = doc.body.innerHTML;",
                        "            props.onSuccess(response, file);",
                        "        } catch (err) {",
                        "            log.warning('cross domain error for Upload. Maybe server should return document.domain script.');",
                        "            response = 'cross-domain';",
                        "            props.onError(err, null, file);",
                        "        }",
                        "        this.endUpload();",
                        "    };",
                        "",
                        "    onSelect = (e) => {",
                        "        this.file = {",
                        "            uid: uid(),",
                        "            name: e.target.value",
                        "        };",
                        "        this.props.onSelect([this.file]);",
                        "    };",
                        "",
                        "    startUpload() {",
                        "        this.upload(this.file);",
                        "        this.file = {};",
                        "    }",
                        "",
                        "    upload(file) {",
                        "        if (!this.state.uploading) {",
                        "            // eslint-disable-next-line",
                        "            this.state.uploading = true;",
                        "            this.setState({uploading: true});",
                        "        }",
                        "",
                        "        const {beforeUpload} = this.props;",
                        "        if (!beforeUpload) {",
                        "            return this.post(file);",
                        "        }",
                        "        const before = beforeUpload(file);",
                        "        if (before && before.then) {",
                        "            before.then(() => {",
                        "                this.post(file);",
                        "            }, () => {",
                        "                this.endUpload();",
                        "            });",
                        "        } else if (before !== false) {",
                        "            this.post(file);",
                        "        } else {",
                        "            this.endUpload();",
                        "        }",
                        "    }",
                        "",
                        "    endUpload() {",
                        "        this.file = {};",
                        "        if (this.state.uploading) {",
                        "            // eslint-disable-next-line",
                        "            this.state.uploading = false;",
                        "            this.setState({uploading: false});",
                        "        }",
                        "    }",
                        "",
                        "    updateInputWH() {",
                        "        const rootNode = ReactDOM.findDOMNode(this);",
                        "        const inputNode = this.refs.input;",
                        "        inputNode.style.height = `${rootNode.offsetHeight}px`;",
                        "        inputNode.style.width = `${rootNode.offsetWidth}px`;",
                        "    }",
                        "",
                        "    abort(file) {",
                        "        if (file) {",
                        "            let uid = file;",
                        "            if (file && file.uid) {",
                        "                uid = file.uid;",
                        "            }",
                        "            if (uid === this.file.uid) {",
                        "                this.endUpload();",
                        "            }",
                        "        } else {",
                        "            this.endUpload();",
                        "        }",
                        "    }",
                        "",
                        "    post(file) {",
                        "        const formNode = this.refs.form;",
                        "        const dataSpan = this.refs.data;",
                        "",
                        "        let data = this.props.data;",
                        "        if (typeof data === 'function') {",
                        "            data = data(file);",
                        "        }",
                        "",
                        "        const inputs = document.createDocumentFragment();",
                        "        for (const key in data) {",
                        "            if (data.hasOwnProperty(key)) {",
                        "                const input = document.createElement('input');",
                        "                input.setAttribute('name', key);",
                        "                input.value = data[key];",
                        "                inputs.appendChild(input);",
                        "            }",
                        "        }",
                        "        dataSpan.appendChild(inputs);",
                        "        formNode.submit();",
                        "        dataSpan.innerHTML = '';",
                        "        this.props.onStart(file);",
                        "    }",
                        "",
                        "    render() {",
                        "        const {disabled, className, children, accept, name, style} = this.props;",
                        "",
                        "        const iframeName = `${name}-iframe`;",
                        "",
                        "        return (<span className={className} style={{",
                        "            position: 'relative',",
                        "            zIndex: 0,",
                        "            display: 'inline-block',",
                        "            ...style",
                        "        }}>",
                        "            {!disabled ?",
                        "                <iframe ref=\"iframe\" name={iframeName} onLoad={this.onLoad} style={{display: 'none'}}/> : null}",
                        "            <form ref=\"form\" method=\"post\" action={this.props.action} encType=\"multipart/form-data\"",
                        "                target={iframeName}>",
                        "                <input ref=\"input\" type=\"file\" accept={accept} name={name} onChange={this.onSelect}",
                        "                    style={INPUT_STYLE}/>",
                        "                <input name=\"_documentDomain\" value={this.domain} type=\"hidden\"/>",
                        "                <span ref=\"data\"></span>",
                        "            </form>",
                        "            {children}",
                        "        </span>);",
                        "    }",
                        "}",
                        "",
                        "export default IframeUploader;"
                    ]
                },
                "index.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import Html5Uploader from './html5-uploader';",
                        "import IframeUploader from './iframe-uploader';",
                        "",
                        "export default class Uploader extends React.Component {",
                        "    state = {",
                        "        Component: Html5Uploader",
                        "    };",
                        "",
                        "    componentDidMount() {",
                        "        if (typeof File === 'undefined') {",
                        "            /* eslint react/no-did-mount-set-state:0 */",
                        "            this.setState({",
                        "                Component: IframeUploader",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    abort(file) {",
                        "        this.uploaderRef.abort(file);",
                        "    }",
                        "",
                        "    startUpload(files) {",
                        "        this.uploaderRef.startUpload(files);",
                        "    }",
                        "",
                        "    saveUploaderRef = (ref) => {",
                        "        this.uploaderRef = ref;",
                        "    };",
                        "",
                        "    render() {",
                        "        const Uploader = this.state.Component;",
                        "        return (",
                        "            <Uploader {...this.props} ref={this.saveUploaderRef} />",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "request.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "/**",
                        " * clone from https://github.com/react-component/upload/blob/master/src/request.js",
                        " */",
                        "",
                        "function getError(option, xhr, msg) {",
                        "    msg = msg || `cannot post ${option.action} ${xhr.status}'`;",
                        "    const err = new Error(msg);",
                        "    err.status = xhr.status;",
                        "    err.method = option.method;",
                        "    err.url = option.action;",
                        "    return err;",
                        "}",
                        "",
                        "function getBody(xhr) {",
                        "    const text = xhr.responseText || xhr.response;",
                        "    if (!text) {",
                        "        return text;",
                        "    }",
                        "",
                        "    try {",
                        "        return JSON.parse(text);",
                        "    } catch (e) {",
                        "        return text;",
                        "    }",
                        "}",
                        "",
                        "// option {",
                        "//  onProgress: (event: { percent: number }): void,",
                        "//  onError: (event: Error, body?: Object): void,",
                        "//  onSuccess: (body: Object): void,",
                        "//  data: Object,",
                        "//  filename: String,",
                        "//  file: File,",
                        "//  withCredentials: Boolean,",
                        "//  action: String,",
                        "//  headers: Object,",
                        "//  method: String",
                        "//  timeout: Number",
                        "// }",
                        "export default function upload(option) {",
                        "    const xhr = new XMLHttpRequest();",
                        "",
                        "    if (option.onProgress && xhr.upload) {",
                        "        xhr.upload.onprogress = function progress(e) {",
                        "            if (e.total > 0) {",
                        "                e.percent = e.loaded / e.total * 100;",
                        "            }",
                        "            option.onProgress(e);",
                        "        };",
                        "    }",
                        "",
                        "    const formData = new FormData();",
                        "",
                        "    if (option.data) {",
                        "        Object.keys(option.data).forEach(key => {",
                        "            formData.append(key, option.data[key]);",
                        "        });",
                        "    }",
                        "",
                        "    formData.append(option.filename, option.file);",
                        "",
                        "    xhr.onerror = function error(e) {",
                        "        option.onError(e);",
                        "    };",
                        "",
                        "    xhr.onload = function onload() {",
                        "        // allow success when 2xx status",
                        "        // see https://github.com/react-component/upload/issues/34",
                        "        if (xhr.status < 200 || xhr.status >= 300) {",
                        "            return option.onError(getError(option, xhr), getBody(xhr));",
                        "        }",
                        "",
                        "        option.onSuccess(getBody(xhr), xhr);",
                        "    };",
                        "",
                        "    const {timeout} = option;",
                        "",
                        "    if (typeof timeout === 'number' && timeout > 0) {",
                        "        xhr.timeout = timeout;",
                        "        xhr.ontimeout = () => {",
                        "            const msg = `Upload abort for exceeding time (timeout: ${timeout}ms)`;",
                        "            option.onError(getError(option, xhr, msg), getBody(xhr));",
                        "        };",
                        "    }",
                        "",
                        "    option.method = option.method || 'POST';",
                        "    xhr.open(option.method, option.action, true);",
                        "",
                        "    // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179",
                        "    if (option.withCredentials && 'withCredentials' in xhr) {",
                        "        xhr.withCredentials = true;",
                        "    }",
                        "",
                        "    const headers = option.headers || {};",
                        "",
                        "    // when set headers['X-Requested-With'] = null , can close default XHR header",
                        "    // see https://github.com/react-component/upload/issues/33",
                        "    if (headers['X-Requested-With'] !== null) {",
                        "        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');",
                        "    }",
                        "",
                        "    for (const h in headers) {",
                        "        if (headers.hasOwnProperty(h) && headers[h] !== null) {",
                        "            xhr.setRequestHeader(h, headers[h]);",
                        "        }",
                        "    }",
                        "    xhr.send(formData);",
                        "",
                        "    return {",
                        "        abort() {",
                        "            xhr.abort();",
                        "        },",
                        "    };",
                        "}"
                    ]
                },
                "selecter.jsx": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import React from 'react';",
                        "import PropTypes from 'prop-types';",
                        "import {func} from '../../util';",
                        "import {uid} from '../util';",
                        "",
                        "const {noop} = func;",
                        "",
                        "/**",
                        " * Upload.Selecter",
                        " * @description [底层能力] 可自定义样式的文件选择器",
                        " */",
                        "export default class Selecter extends React.Component {",
                        "    static propTypes = {",
                        "        id: PropTypes.string,",
                        "        style: PropTypes.object,",
                        "        className: PropTypes.string,",
                        "        /**",
                        "         * 是否禁用上传功能",
                        "         */",
                        "        disabled: PropTypes.bool,",
                        "        /**",
                        "         * 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件",
                        "         */",
                        "        multiple: PropTypes.bool,",
                        "        /**",
                        "         * 是否支持拖拽上传，`ie10+` 支持。",
                        "         */",
                        "        dragable: PropTypes.bool,",
                        "        /**",
                        "         * 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)",
                        "         */",
                        "        accept: PropTypes.string,",
                        "        /**",
                        "         * 文件选择回调",
                        "         */",
                        "        onSelect: PropTypes.func,",
                        "        /**",
                        "         * 拖拽经过回调",
                        "         */",
                        "        onDragOver: PropTypes.func,",
                        "        /**",
                        "         * 拖拽离开回调",
                        "         */",
                        "        onDragLeave: PropTypes.func,",
                        "        /**",
                        "         * 拖拽完成回调",
                        "         */",
                        "        onDrop: PropTypes.func,",
                        "        children: PropTypes.node,",
                        "        name: PropTypes.string,",
                        "    };",
                        "",
                        "",
                        "    static defaultProps = {",
                        "        name: 'file',",
                        "        multiple: false,",
                        "        onSelect: noop,",
                        "        onDragOver: noop,",
                        "        onDragLeave: noop,",
                        "        onDrop: noop",
                        "    };",
                        "",
                        "    onSelect = (e) => {",
                        "        const files = e.target.files;",
                        "        const filesArr = files.length ? Array.prototype.slice.call(files) : [files];",
                        "",
                        "        filesArr.forEach(file => {",
                        "            file.uid = uid();",
                        "        });",
                        "",
                        "        this.props.onSelect(filesArr);",
                        "    };",
                        "",
                        "    /**",
                        "     * 点击上传按钮",
                        "     * @return {void}",
                        "     */",
                        "    onClick = () => {",
                        "        const el = this.fileRef;",
                        "        if (!el) {",
                        "            return;",
                        "        }",
                        "        el.click();",
                        "        el.value = '';",
                        "    };",
                        "",
                        "    /**",
                        "     * 键盘事件",
                        "     * @param  {SyntheticEvent} e",
                        "     * @return {void}",
                        "     */",
                        "    onKeyDown = (e) => {",
                        "        if (e.key === 'Enter') {",
                        "            this.onClick();",
                        "        }",
                        "    };",
                        "",
                        "    /**",
                        "     * 拖拽",
                        "     * @param  {SyntheticEvent} e",
                        "     * @return {void}",
                        "     */",
                        "    onDrop = (e) => {",
                        "        e.preventDefault();",
                        "",
                        "        const files = e.dataTransfer.files;",
                        "        const filesArr = Array.prototype.slice.call(files);",
                        "",
                        "        this.props.onDrop(filesArr);",
                        "    };",
                        "",
                        "    onDragOver = (e) => {",
                        "        e.preventDefault();",
                        "        this.props.onDragOver(e);",
                        "    };",
                        "",
                        "    saveFileRef = (ref) => {",
                        "        this.fileRef = ref;",
                        "    };",
                        "",
                        "    render() {",
                        "        const {",
                        "            accept,",
                        "            multiple,",
                        "            children,",
                        "            id,",
                        "            disabled,",
                        "            dragable,",
                        "            style,",
                        "            className,",
                        "            name",
                        "        } = this.props;",
                        "",
                        "        let events = {};",
                        "        if (!disabled) {",
                        "            events = Object.assign({",
                        "                onClick: this.onClick,",
                        "                onKeyDown: this.onKeyDown,",
                        "                tabIndex: '0',",
                        "            }, dragable ? {",
                        "                onDrop: this.onDrop,",
                        "                onDragOver: this.onDragOver,",
                        "                onDragLeave: this.props.onDragLeave,",
                        "            } : {});",
                        "        }",
                        "",
                        "        return (",
                        "            <div",
                        "                role=\"upload\"",
                        "                style={style}",
                        "                className={className}",
                        "                {...events}",
                        "            >",
                        "                <input type=\"file\"",
                        "                    name={name}",
                        "                    id={id}",
                        "                    ref={this.saveFileRef}",
                        "                    style={{display: 'none'}}",
                        "                    accept={accept}",
                        "                    aria-hidden",
                        "                    multiple={multiple}",
                        "                    onChange={this.onSelect}",
                        "                    disabled={disabled}",
                        "                />",
                        "                {children}",
                        "            </div>",
                        "        );",
                        "    }",
                        "}"
                    ]
                },
                "uploader.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import {func, obj} from '../../util';",
                        "import {uid} from '../util';",
                        "import request from './request';",
                        "",
                        "const noop = func.noop;",
                        "",
                        "export default class Uploader {",
                        "    constructor(options) {",
                        "        this.options = {",
                        "            beforeUpload: noop,",
                        "            onProgress: noop,",
                        "            onSuccess: noop,",
                        "            onError: noop,",
                        "            data: {},",
                        "            name: 'file',",
                        "            method: 'post',",
                        "            ...options",
                        "        };",
                        "        this.reqs = {};",
                        "    }",
                        "",
                        "    setOptions(options) {",
                        "        Object.assign(this.options, options);",
                        "    }",
                        "",
                        "    startUpload(files) {",
                        "        const filesArr = files.length ? Array.prototype.slice.call(files) : [files];",
                        "        filesArr.forEach((file) => {",
                        "            file.uid = file.uid || uid();",
                        "            this.upload(file);",
                        "        });",
                        "    }",
                        "",
                        "    abort(file) {",
                        "        const {reqs} = this;",
                        "        if (file) {",
                        "            let uid = file;",
                        "            if (file && file.uid) {",
                        "                uid = file.uid;",
                        "            }",
                        "            if (reqs[uid]) {",
                        "                reqs[uid].abort();",
                        "                delete reqs[uid];",
                        "            }",
                        "",
                        "        } else {",
                        "            Object.keys(reqs).forEach((uid) => {",
                        "                if (reqs[uid]) {",
                        "                    reqs[uid].abort();",
                        "                }",
                        "                delete reqs[uid];",
                        "            });",
                        "        }",
                        "    }",
                        "",
                        "    upload(file) {",
                        "        const {",
                        "            beforeUpload,",
                        "            action,",
                        "            name,",
                        "            headers,",
                        "            timeout,",
                        "            withCredentials,",
                        "            method,",
                        "            data,",
                        "        } = this.options;",
                        "        const before = beforeUpload(",
                        "            file,",
                        "            {",
                        "                action,",
                        "                name,",
                        "                headers,",
                        "                timeout,",
                        "                withCredentials,",
                        "                method,",
                        "                data,",
                        "            }",
                        "        );",
                        "",
                        "        func.promiseCall(before, (options) => {",
                        "            if (options === false) {",
                        "                this.options.onError(null, null, file);",
                        "                return;",
                        "            }",
                        "            this.post(file, obj.isPlainObject(options) ? options : undefined);",
                        "        }, () => {",
                        "            this.options.onError(null, null, file);",
                        "        });",
                        "    }",
                        "",
                        "    post(file, options = {}) {",
                        "        const requestOptions = {",
                        "            ...this.options,",
                        "            ...options,",
                        "        };",
                        "        const {",
                        "            action,",
                        "            name,",
                        "            headers,",
                        "            timeout,",
                        "            withCredentials,",
                        "            onProgress,",
                        "            onSuccess,",
                        "            onError,",
                        "            method",
                        "        } = requestOptions;",
                        "",
                        "        let data = requestOptions.data;",
                        "        if (typeof data === 'function') {",
                        "            data = data(file);",
                        "        }",
                        "",
                        "        const {uid} = file;",
                        "",
                        "        this.reqs[uid] = request({",
                        "            action,",
                        "            filename: name,",
                        "            file,",
                        "            data,",
                        "            timeout,",
                        "            headers,",
                        "            withCredentials,",
                        "            method,",
                        "            onProgress: e => {",
                        "                onProgress(e, file);",
                        "            },",
                        "            onSuccess: ret => {",
                        "                delete this.reqs[uid];",
                        "                onSuccess(ret, file);",
                        "            },",
                        "            onError: (err, ret) => {",
                        "                delete this.reqs[uid];",
                        "                onError(err, ret, file);",
                        "            }",
                        "        });",
                        "    }",
                        "",
                        "}"
                    ]
                }
            },
            "scss": {
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "@charset \"UTF-8\";",
                        "",
                        "////",
                        "/// @module upload: 上传",
                        "/// @tag upload",
                        "/// @category component",
                        "/// @family data-entry",
                        "/// @varPrefix $upload-",
                        "/// @classPrefix {prefix}-upload",
                        "/// @order {\"statement/disabled\":10,\"statement/normal\":11,\"statement/normal/bounding\":110,\"statement/normal/close\":111,\"statement/normal/name\":112,\"statement/normal/extra\":113,\"statement/normal/thumbnail\":114,\"statement/normal/picture\":115,\"statement/normal/add\":116,\"statement/hover\":12,\"statement/hover/bounding\":120,\"statement/hover/close\":121,\"statement/hover/title\":122,\"statement/hover/extra\":123,\"statement/hover/add\":124,\"statement/error\":13,\"statement/error/bounding\":130,\"statement/error/add\":131,\"statement/uploading\":14,\"statement/uploading/add\":140,\"size/bounding\":10,\"size/close icon\":11,\"size/picture\":12,\"size/border\":13,\"size/add\":14,\"size/normal\":15,\"size/normal/thumbnail\":150,\"size/name\":16}",
                        "////",
                        "",
                        "$upload-prefix: '.#{$css-prefix}upload';",
                        "",
                        "// upload variables",
                        "// --------------------------------------------------",
                        "",
                        "/// text",
                        "/// @namespace statement/disabled",
                        "$upload-disable-text-color: $color-text1-1;",
                        "/// border",
                        "/// @namespace statement/disabled",
                        "$upload-disable-border-color: $color-line1-1;",
                        "",
                        "// Text",
                        "// -----------------------------------------------------",
                        "/// heigth",
                        "/// @namespace size/bounding",
                        "$upload-text-list-height: $s-7 !default;",
                        "/// padding (l, r)",
                        "/// @namespace size/bounding",
                        "$upload-text-list-padding-left-right: $s-2 !default;",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$upload-text-list-font-size: $font-size-body-1 !default;",
                        "/// size",
                        "/// @namespace size/close icon",
                        "$upload-text-list-close-icon-size: $icon-xs !default;",
                        "/// margin (r)",
                        "/// @namespace size/close icon",
                        "$upload-text-list-close-icon-right: $s-3 !default;",
                        "",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$upload-text-list-bg-color: $color-fill1-2 !default;",
                        "/// background",
                        "/// @namespace statement/hover/bounding",
                        "$upload-text-list-bg-color-hover: $color-fill1-2 !default;",
                        "/// background",
                        "/// @namespace statement/error/bounding",
                        "$upload-text-list-bg-color-error: $color-error-1 !default;",
                        "/// text",
                        "/// @namespace statement/error/bounding",
                        "$upload-text-list-error-text-color: $color-error-3 !default;",
                        "",
                        "/// icon",
                        "/// @namespace statement/normal/close",
                        "$upload-text-list-close-icon-color: $color-text1-2 !default;",
                        "/// icon",
                        "/// @namespace statement/hover/close",
                        "$upload-text-list-close-icon-color-hover: $color-text1-3 !default;",
                        "",
                        "/// text",
                        "/// @namespace statement/normal/name",
                        "$upload-text-list-name-font-color: $color-text1-4 !default;",
                        "/// text",
                        "/// @namespace statement/hover/title",
                        "$upload-text-list-name-font-color-hover: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/normal/extra",
                        "$upload-text-list-size-font-color: $color-text1-2 !default;",
                        "/// text",
                        "/// @namespace statement/hover/extra",
                        "$upload-text-list-size-font-color-hover: $color-brand1-6 !default;",
                        "",
                        "// ============================================================",
                        "",
                        "// Simple with Image",
                        "// -----------------------------------",
                        "/// padding",
                        "/// @namespace size/bounding",
                        "$upload-image-list-item-padding: $s-2 !default;",
                        "/// size",
                        "/// @namespace size/picture",
                        "/// @type length",
                        "$upload-image-list-item-picture-size: $s-12 !default;",
                        "/// icon",
                        "/// @namespace size/picture",
                        "$upload-image-list-item-picture-icon-size: $icon-l !default;",
                        "/// font",
                        "/// @namespace statement/normal/thumbnail",
                        "$upload-image-list-item-thumbnail-font-color: $color-text1-1 !default;",
                        "",
                        "/// text",
                        "/// @namespace size/bounding",
                        "$upload-image-list-item-font-size: $font-size-body-1 !default;",
                        "/// size",
                        "/// @namespace size/close icon",
                        "$upload-image-list-close-icon-size: $icon-xs !default;",
                        "/// margin (r)",
                        "/// @namespace size/close icon",
                        "$upload-image-list-close-icon-right: $s-1 !default;",
                        "/// width",
                        "/// @namespace size/border",
                        "$upload-image-list-item-border-width: $line-1 !default;",
                        "/// background",
                        "/// @namespace statement/normal/bounding",
                        "$upload-image-list-item-bg-color: $color-white !default;",
                        "/// icon",
                        "/// @namespace statement/normal/close",
                        "$upload-image-list-close-icon-color: $color-text1-2 !default;",
                        "/// icon",
                        "/// @namespace statement/hover/close",
                        "$upload-image-list-close-icon-color-hover: $color-text1-3 !default;",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$upload-image-list-item-border-color: $color-line1-2 !default;",
                        "/// border",
                        "/// @namespace statement/error/bounding",
                        "$upload-image-list-item-border-color-error: $color-error-3 !default;",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$upload-image-list-item-border-color-hover: $color-brand1-6 !default;",
                        "/// border",
                        "/// @namespace statement/normal/picture",
                        "$upload-image-list-item-picture-border-color: $color-line1-2 !default;",
                        "/// background",
                        "/// @namespace statement/normal/picture",
                        "$upload-image-list-item-picture-background-color: $color-fill1-2 !default;",
                        "",
                        "// ============================================================",
                        "",
                        "// Card",
                        "// -----------------------------------------------------",
                        "/// size",
                        "/// @namespace size/bounding",
                        "/// @type length",
                        "$upload-card-size: $s-25 !default;",
                        "/// margin (b)",
                        "/// @namespace size/bounding",
                        "$upload-card-margin-bottom: $s-4 !default;",
                        "/// icon",
                        "/// @namespace size/add",
                        "$upload-card-add-icon-size: $icon-l !default;",
                        "/// text",
                        "/// @namespace size/add",
                        "$upload-card-add-text-size: $font-size-body-1 !default;",
                        "/// text margin (t)",
                        "/// @namespace size/add",
                        "$upload-card-add-text-margin-top: $s-3 !default;",
                        "/// background",
                        "/// @namespace statement/normal",
                        "$upload-card-bg-color: $color-white !default;",
                        "/// border style",
                        "/// @namespace statement/normal",
                        "$upload-card-border-style: $line-dashed !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$upload-card-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$upload-card-hover-border-color: $color-brand1-6 !default;",
                        "/// border",
                        "/// @namespace statement/hover/bounding",
                        "$upload-card-icon-color: $color-brand1-6 !default;",
                        "/// text",
                        "/// @namespace statement/normal/add",
                        "$upload-card-font-color: $color-text1-3 !default;",
                        "/// text",
                        "/// @namespace statement/hover/add",
                        "$upload-card-hover-font-color: $color-brand1-6 !default;",
                        "",
                        "// Card Item",
                        "",
                        "/// background",
                        "/// @namespace statement/uploading/add",
                        "$upload-card-list-uploading-bg-color: $color-fill1-1 !default;",
                        "/// background",
                        "/// @namespace statement/error/add",
                        "$upload-card-list-bg-color-error: $color-fill1-1 !default;",
                        "/// margin (r)",
                        "/// @namespace size/bounding",
                        "$upload-card-list-margin-right: $s-3 !default;",
                        "/// border",
                        "/// @namespace statement/normal/bounding",
                        "$upload-card-list-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @namespace statement/error/bounding",
                        "$upload-card-list-border-color-error: $color-error-3 !default;",
                        "/// font",
                        "/// @namespace statement/normal/thumbnail",
                        "$upload-card-list-thumbnail-font-color: $color-text1-1 !default;",
                        "/// text",
                        "/// @namespace size/normal/thumbnail",
                        "$upload-card-list-thumbnail-font-size: $font-size-caption !default;",
                        "/// icon",
                        "/// @namespace size/normal/thumbnail",
                        "$upload-card-list-thumbnail-icon-size: $icon-xxl !default;",
                        "",
                        "/// margin (t)",
                        "/// @namespace size/name",
                        "$upload-card-list-name-margin-top: $s-1 !default;",
                        "/// text",
                        "/// @namespace statement/normal/name",
                        "$upload-card-list-name-font-size: $font-size-caption !default;",
                        "/// text",
                        "/// @namespace statement/normal/name",
                        "$upload-card-list-name-font-color: $color-text1-3 !default;",
                        "",
                        "// 上传后的 item 文件下载、删除操作区域的样式",
                        "// @ignore",
                        "$upload-select-card-tool-height: $s-7 !default;",
                        "// @ignore",
                        "$upload-select-card-tool-icon-size: $icon-s !default;",
                        "",
                        "// ============================================================",
                        "",
                        "// Drag",
                        "// -----------------------------------------------------",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$upload-drag-zone-border-color: $color-line1-3 !default;",
                        "/// border",
                        "/// @namespace statement/normal",
                        "$upload-drag-zone-over-border-color: $color-brand1-6 !default;",
                        "/// corner",
                        "/// @namespace statement/normal",
                        "$upload-drag-zone-corner: $corner-1 !default;",
                        "/// font",
                        "/// @namespace size/bounding",
                        "$upload-drag-zone-font-size: $font-size-body-2 !default;",
                        "/// hint-font",
                        "/// @namespace size/bounding",
                        "$upload-drag-zone-hint-font-size: $font-size-caption !default;"
                    ]
                }
            }
        },
        "util": {
            "dom.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import {camelcase, hyphenate} from './string';",
                    "import {each} from './object';",
                    "",
                    "/**",
                    " * 是否能使用 DOM 方法",
                    " * @type {Boolean}",
                    " */",
                    "export const hasDOM = typeof window !== 'undefined' && !!window.document && !!document.createElement;",
                    "",
                    "/**",
                    " * 节点是否包含指定 className",
                    " * @param  {Element}  node",
                    " * @param  {String}  className",
                    " * @return {Boolean}",
                    " *",
                    " * @example",
                    " * dom.hasClass(document.body, 'foo');",
                    " */",
                    "export function hasClass (node, className) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM || !node) {",
                    "        return false;",
                    "    }",
                    "",
                    "    if (node.classList) {",
                    "        return node.classList.contains(className);",
                    "    } else {",
                    "        return node.className.indexOf(className) > -1;",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 添加 className",
                    " * @param {Element} node",
                    " * @param {String} className",
                    " *",
                    " * @example",
                    " * dom.addClass(document.body, 'foo');",
                    " */",
                    "export function addClass (node, className, _force) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM || !node) {",
                    "        return;",
                    "    }",
                    "",
                    "    if (node.classList) {",
                    "        node.classList.add(className);",
                    "    } else if (_force === true || !hasClass(node, className)) {",
                    "        node.className += ` ${className}`;",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 移除 className",
                    " * @param  {Element} node",
                    " * @param  {String} className",
                    " *",
                    " * @example",
                    " * dom.removeClass(document.body, 'foo');",
                    " */",
                    "export function removeClass (node, className, _force) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM || !node) {",
                    "        return;",
                    "    }",
                    "",
                    "    if (node.classList) {",
                    "        node.classList.remove(className);",
                    "    } else if (_force === true || hasClass(node, className)) {",
                    "        node.className = node.className.replace(className, '').replace(/\\s+/g, ' ').trim();",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 切换 className",
                    " * @param  {Element} node",
                    " * @param  {String} className",
                    " * @return {Boolean}           执行后节点上是否还有此 className",
                    " *",
                    " * @example",
                    " * dom.toggleClass(document.body, 'foo');",
                    " */",
                    "export function toggleClass (node, className) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM || !node) {",
                    "        return false;",
                    "    }",
                    "",
                    "    if (node.classList) {",
                    "        return node.classList.toggle(className);",
                    "    } else {",
                    "        const flag = hasClass(node, className);",
                    "        flag ? removeClass(node, className, true) : addClass(node, className, true);",
                    "",
                    "        return !flag;",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 元素是否匹配 CSS 选择器",
                    " * @param  {Element} node       DOM 节点",
                    " * @param  {String}  selector   CSS 选择器",
                    " * @return {Boolean}",
                    " *",
                    " * @example",
                    " * dom.matches(mountNode, '.container'); // boolean",
                    " */",
                    "export const matches = function () {",
                    "    let matchesFn = null;",
                    "    /* istanbul ignore else */",
                    "    if (hasDOM) {",
                    "        const _body = document.body || document.head;",
                    "        matchesFn = _body.matches ? 'matches' :",
                    "            _body.webkitMatchesSelector ? 'webkitMatchesSelector' :",
                    "                _body.msMatchesSelector ? 'msMatchesSelector' :",
                    "                    _body.mozMatchesSelector ? 'mozMatchesSelector' : null;",
                    "    }",
                    "",
                    "    return function (node, selector) {",
                    "        if (!hasDOM || !node) {",
                    "            return false;",
                    "        }",
                    "",
                    "        return matchesFn ? node[matchesFn](selector) : false;",
                    "    };",
                    "}();",
                    "",
                    "/**",
                    " * 获取元素计算后的样式",
                    " * @private",
                    " * @param  {Element} node",
                    " * @return {Object}",
                    " */",
                    "function _getComputedStyle (node) {",
                    "    return node && node.nodeType === 1 ? window.getComputedStyle(node, null) : {};",
                    "}",
                    "",
                    "const PIXEL_PATTERN = /margin|padding|width|height|max|min|offset|size/i;",
                    "const removePixel = {left: 1, top: 1, right: 1, bottom: 1};",
                    "",
                    "/**",
                    " * 校验并修正元素的样式属性值",
                    " * @private",
                    " * @param  {Element} node",
                    " * @param  {String} type",
                    " * @param  {Number} value",
                    " */",
                    "function _getStyleValue (node, type, value) {",
                    "    type = type.toLowerCase();",
                    "",
                    "    if (value === 'auto') {",
                    "        if (type === 'height') {",
                    "            return node.offsetHeight || 0;",
                    "        }",
                    "        if (type === 'width') {",
                    "            return node.offsetWidth || 0;",
                    "        }",
                    "    }",
                    "",
                    "    if (!(type in removePixel)) {",
                    "        // 属性值是否需要去掉 px 单位，这里假定此类的属性值都是 px 为单位的",
                    "        removePixel[type] = PIXEL_PATTERN.test(type);",
                    "    }",
                    "",
                    "    return removePixel[type] ? (parseFloat(value) || 0) : value;",
                    "}",
                    "",
                    "const floatMap = {cssFloat: 1, styleFloat: 1, float: 1};",
                    "",
                    "/**",
                    " * 获取元素计算后的样式",
                    " * @param  {Element} node DOM 节点",
                    " * @param  {String} name 属性名",
                    " * @return {Number|Object}",
                    " */",
                    "export function getStyle (node, name) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM || !node) {",
                    "        return null;",
                    "    }",
                    "",
                    "    const style = _getComputedStyle(node);",
                    "",
                    "    // 如果不指定属性名，则返回全部值",
                    "    if (arguments.length === 1) {",
                    "        return style;",
                    "    }",
                    "",
                    "    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;",
                    "",
                    "    return _getStyleValue(node, name, style.getPropertyValue(hyphenate(name)) || node.style[camelcase(name)]);",
                    "}",
                    "",
                    "/**",
                    " * 设置元素的样式",
                    " * @param {Element} node  DOM 节点",
                    " * @param {Object|String} name  属性名，或者是一个对象，包含多个属性",
                    " * @param {Number|String} value 属性值",
                    " *",
                    " * @example",
                    " * // 设置单个属性值",
                    " * dom.setStyle(mountNode, 'width', 100);",
                    " * // 设置多条属性值",
                    " * dom.setStyle(mountNode, {",
                    " *     width: 100,",
                    " *     height: 200",
                    " * });",
                    " */",
                    "export function setStyle (node, name, value) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM || !node) {",
                    "        return false;",
                    "    }",
                    "",
                    "    // 批量设置多个值",
                    "    if (typeof name === 'object' && arguments.length === 2) {",
                    "        each(name, (val, key) => setStyle(node, key, val));",
                    "    } else {",
                    "        name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;",
                    "        if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {",
                    "            value = `${value}px`;",
                    "        }",
                    "        node.style[camelcase(name)] = value; // IE8 support",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 获取默认的滚动条大小",
                    " * @return {Object} width, height",
                    " */",
                    "export function scrollbar () {",
                    "    const scrollDiv = document.createElement('div');",
                    "",
                    "    setStyle(scrollDiv, {",
                    "        position: 'absolute',",
                    "        width: '100px',",
                    "        height: '100px',",
                    "        overflow: 'scroll',",
                    "        top: '-9999px'",
                    "    });",
                    "    document.body.appendChild(scrollDiv);",
                    "    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;",
                    "    const scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;",
                    "    document.body.removeChild(scrollDiv);",
                    "",
                    "    return {",
                    "        width: scrollbarWidth,",
                    "        height: scrollbarHeight",
                    "    };",
                    "}",
                    "",
                    "/**",
                    " * 获取元素距离视口顶部和左边的偏移距离",
                    " * @return {Object} top, left",
                    " */",
                    "export function getOffset (node) {",
                    "    const rect = node.getBoundingClientRect();",
                    "    const win = node.ownerDocument.defaultView;",
                    "    return {",
                    "        top: rect.top + win.pageYOffset,",
                    "        left: rect.left + win.pageXOffset",
                    "    };",
                    "}"
                ]
            },
            "env.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "/**",
                    " * IE浏览器的渲染引擎版本号",
                    " * 注意：此属性与浏览器版本号不同，IE的渲染引擎版本号是可以通过HTML header或手动设置去更改的",
                    " * @type {Number} 6 ~ 10",
                    " */",
                    "export const ieVersion = typeof document !== 'undefined' ? document.documentMode : undefined;",
                    "",
                    "/**",
                    " * 判断是否是生产环境",
                    " * @type {Boolean}",
                    " */",
                    "export const isProduction = () => {",
                    "    const PRODUCTION_ENV = 'production';",
                    "    let result = false;",
                    "    try {",
                    "        if (process.env.NODE_ENV === PRODUCTION_ENV) {",
                    "            result = true;",
                    "        }",
                    "    } catch (err) {",
                    "        //",
                    "    }",
                    "",
                    "    if (!result) {",
                    "        try {",
                    "            if (window.process.env.NODE_ENV === PRODUCTION_ENV) {",
                    "                result = true;",
                    "            }",
                    "        } catch (err) {",
                    "            //",
                    "        }",
                    "    }",
                    "",
                    "",
                    "    return result;",
                    "};",
                    "",
                    "export default {",
                    "    ieVersion,",
                    "    isProduction,",
                    "};"
                ]
            },
            "events.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "/**",
                    " * 取消事件绑定",
                    " * @param  {*}   node       DOM节点或任何可以绑定事件的对象",
                    " * @param  {String}   eventName  事件名",
                    " * @param  {Function} callback   回调方法",
                    " * @param  {Boolean}   [useCapture=false] 是否开启事件捕获优先",
                    " */",
                    "export function off (node, eventName, callback, useCapture) {",
                    "    /* istanbul ignore else */",
                    "    if (node.removeEventListener) {",
                    "        node.removeEventListener(eventName, callback, useCapture || false);",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 绑定事件",
                    " * @param  {*}   node       DOM节点或任何可以绑定事件的对象",
                    " * @param  {String}   eventName  事件名",
                    " * @param  {Function} callback   回调方法",
                    " * @param  {Boolean}   useCapture 是否开启事件捕获优先",
                    " * @return {Object}               返回的object中包含一个off方法，用于取消事件监听",
                    " *",
                    " * @example",
                    " * const handler = events.on(document.body, 'click', e => {",
                    " *     // handle click ...",
                    " * });",
                    " * // 取消事件绑定",
                    " * handler.off();",
                    " */",
                    "export function on (node, eventName, callback, useCapture) {",
                    "    /* istanbul ignore else */",
                    "    if (node.addEventListener) {",
                    "        node.addEventListener(eventName, callback, useCapture || false);",
                    "    }",
                    "",
                    "    return {",
                    "        off: () => off(node, eventName, callback, useCapture)",
                    "    };",
                    "}",
                    "",
                    "/**",
                    " * 绑定事件，只执行一次后销毁",
                    " * @param  {*}   node       DOM节点或任何可以绑定事件的对象",
                    " * @param  {String}   eventName  事件名",
                    " * @param  {Function} callback   回调方法",
                    " * @param  {Boolean}   useCapture 是否开启事件捕获优先",
                    " * @return {Function}             返回的object中包含一个off方法，用于取消事件监听",
                    " */",
                    "export function once (node, eventName, callback, useCapture) {",
                    "    return on(node, eventName, function __fn (...args) {",
                    "        callback.apply(this, args);",
                    "",
                    "        // 由于addEventListener中的参数options只在Chrome 55、Firefox(Gecko)以上版本支持，故还是用传统的方法实现once",
                    "        off(node, eventName, __fn, useCapture);",
                    "    }, useCapture);",
                    "}"
                ]
            },
            "focus.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import KEYCODE from './keycode';",
                    "import {each} from './object';",
                    "",
                    "/**",
                    " * 用于切换页面元素的焦点",
                    " */",
                    "",
                    "",
                    "/**",
                    " * 元素是否可见",
                    " * @private",
                    " * @param   {Element}  node",
                    " * @return  {Boolean}",
                    " */",
                    "function _isVisible(node) {",
                    "    while (node) {",
                    "        if (node === document.body || node === document.documentElement) {",
                    "            break;",
                    "        }",
                    "        if (node.style.display === 'none' || node.style.visibility === 'hidden') {",
                    "            return false;",
                    "        }",
                    "        node = node.parentNode;",
                    "    }",
                    "    return true;",
                    "}",
                    "",
                    "/**",
                    " * 元素是否可以获取焦点",
                    " * @private",
                    " * @param   {Element}  node",
                    " * @return  {Boolean}",
                    " */",
                    "function _isFocusable(node) {",
                    "    const nodeName = node.nodeName.toLowerCase();",
                    "    const tabIndex = parseInt(node.getAttribute('tabindex'), 10);",
                    "    const hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;",
                    "",
                    "    if (_isVisible(node)) {",
                    "        if (nodeName === 'input') {",
                    "            return !node.disabled && node.type !== 'hidden';",
                    "        } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {",
                    "            return !node.disabled;",
                    "        } else if (nodeName === 'a') {",
                    "            return (node.getAttribute('href') || hasTabIndex);",
                    "        } else {",
                    "            return hasTabIndex;",
                    "        }",
                    "    }",
                    "    return false;",
                    "}",
                    "",
                    "/**",
                    " * 列出能获取焦点的子节点",
                    " * @param  {Element} node 容器节点",
                    " * @return {Array<Element>}",
                    " */",
                    "export function getFocusNodeList(node) {",
                    "    const res = [];",
                    "    const nodeList = node.querySelectorAll('*');",
                    "",
                    "    each(nodeList, item => {",
                    "        if (_isFocusable(item)) {",
                    "            const method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';",
                    "            res[method](item);",
                    "        }",
                    "    });",
                    "",
                    "    if (_isFocusable(node)) {",
                    "        res.unshift(node);",
                    "    }",
                    "",
                    "    return res;",
                    "}",
                    "",
                    "// 用于记录上一次获得焦点的无素",
                    "let lastFocusElement = null;",
                    "",
                    "/**",
                    " * 保存最近一次获得焦点的无素",
                    " */",
                    "export function saveLastFocusNode() {",
                    "    lastFocusElement = document.activeElement;",
                    "}",
                    "",
                    "/**",
                    " * 清除焦点记录",
                    " */",
                    "export function clearLastFocusNode() {",
                    "    lastFocusElement = null;",
                    "}",
                    "",
                    "/**",
                    " * 尝试将焦点切换到上一个元素",
                    " */",
                    "export function backLastFocusNode() {",
                    "    if (lastFocusElement) {",
                    "        try {",
                    "            // 元素可能已经被移动了",
                    "            lastFocusElement.focus();",
                    "        } catch (e) {",
                    "            // ignore ...",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 在限制的范围内切换焦点",
                    " * @param  {Element} node 容器节点",
                    " * @param  {Event} e      键盘事件",
                    " */",
                    "export function limitTabRange(node, e) {",
                    "    if (e.keyCode === KEYCODE.TAB) {",
                    "        const tabNodeList = getFocusNodeList(node);",
                    "        const maxIndex = tabNodeList.length - 1;",
                    "        const index = tabNodeList.indexOf(document.activeElement);",
                    "",
                    "        if (index > -1) {",
                    "            let targetIndex = index + (e.shiftKey ? -1 : 1);",
                    "            targetIndex < 0 && (targetIndex = maxIndex);",
                    "            targetIndex > maxIndex && (targetIndex = 0);",
                    "            tabNodeList[targetIndex].focus();",
                    "            e.preventDefault();",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            "func.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import {isPromise} from './object';",
                    "",
                    "/**",
                    " * 一个空方法，返回入参本身或空对象",
                    " */",
                    "export const noop = () => {};",
                    "",
                    "/**",
                    " * 将N个方法合并为一个链式调用的方法",
                    " * @return {Function}     合并后的方法",
                    " * 参考 https://github.com/react-component/util/",
                    " *",
                    " * @example",
                    " * func.makeChain(this.handleChange, this.props.onChange);",
                    " */",
                    "export function makeChain (...fns) {",
                    "    if (fns.length === 1) {",
                    "        return fns[0];",
                    "    }",
                    "",
                    "    return function chainedFunction (...args) {",
                    "        for (let i = 0, j = fns.length; i < j; i++) {",
                    "            if (fns[i] && fns[i].apply) {",
                    "                fns[i].apply(this, args);",
                    "            }",
                    "        }",
                    "    };",
                    "}",
                    "",
                    "/**",
                    " * 批量改变方法的上下文",
                    " * 此方法在react组件中很有用，在constructor中批量将组件上的方法执行上下文绑定到组件本身",
                    " * 注意：用bind改变函数运行的上下文只会生效一次",
                    " * @param  {Object} ctx 方法挂载的对象以及执行的上下文",
                    " * @param  {Array<String>} fns 方法名列表",
                    " *",
                    " * @example",
                    " * func.bindCtx(this, ['handleClick', 'handleChange']);",
                    " */",
                    "export function bindCtx (ctx, fns, ns) {",
                    "    if (typeof fns === 'string') {",
                    "        fns = [fns];",
                    "    }",
                    "",
                    "    // 方法的挂载空间，如果不传，默认与ctx相同",
                    "    ns = ns || ctx;",
                    "",
                    "    fns.forEach(fnName => {",
                    "        // 这里不要添加空方法判断，由调用者保证正确性，否则出了问题无法排查",
                    "        ns[fnName] = ns[fnName].bind(ctx);",
                    "    });",
                    "}",
                    "",
                    "/**",
                    " * 用于执行回调方法后的逻辑",
                    " * @param  {*} ret            回调方法执行结果",
                    " * @param  {Function} success 执行结果返回非false的回调",
                    " * @param  {Function} [failure=noop] 执行结果返回false的回调",
                    " */",
                    "export function promiseCall (ret, success, failure = noop) {",
                    "    if (isPromise(ret)) {",
                    "        return ret.then(result => {",
                    "            success(result);",
                    "            return result;",
                    "        }).catch(e => {",
                    "            failure(e);",
                    "            // throw e;",
                    "        });",
                    "    }",
                    "",
                    "    return ret !== false ? success(ret) : failure(ret);",
                    "}"
                ]
            },
            "guid.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "let timestamp = Date.now();",
                    "",
                    "/**",
                    " * 生成全局唯一的id",
                    " * @param  {String} [prefix=''] 前缀字符串",
                    " * @return {String}",
                    " *",
                    " * @example",
                    " * guid(); // j7jv509c",
                    " * guid('prefix-'); // prefix-j7jv509d",
                    " */",
                    "export default function (prefix) {",
                    "    prefix = prefix || '';",
                    "",
                    "    return prefix + (timestamp++).toString(36);",
                    "}"
                ]
            },
            "index.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import * as _dom from './dom';",
                    "import * as _env from './env';",
                    "import * as _events from './events';",
                    "import * as _func from './func';",
                    "import * as _log from './log';",
                    "import * as _object from './object';",
                    "import * as _string from './string';",
                    "import * as _support from './support';",
                    "import * as _focus from './focus';",
                    "import _guid from './guid';",
                    "import _KEYCODE from './keycode';",
                    "",
                    "export const dom = _dom;",
                    "export const env = _env;",
                    "export const events = _events;",
                    "export const func = _func;",
                    "export const log = _log;",
                    "export const obj = _object;",
                    "export const str = _string;",
                    "export const support = _support;",
                    "export const focus = _focus;",
                    "export const guid = _guid;",
                    "export const KEYCODE = _KEYCODE;"
                ]
            },
            "keycode.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "export default {",
                    "    BACKSPACE: 8,",
                    "    TAB: 9,",
                    "    ENTER: 13,",
                    "    SHIFT: 16,",
                    "    CTRL: 17,",
                    "    ALT: 18,",
                    "    ESC: 27,",
                    "    SPACE: 32,",
                    "    END: 35,",
                    "    HOME: 36,",
                    "    LEFT: 37,",
                    "    UP: 38,",
                    "    RIGHT: 39,",
                    "    DOWN: 40,",
                    "",
                    "    // version 0.x",
                    "    ESCAPE: 27,",
                    "    LEFT_ARROW: 37,",
                    "    UP_ARROW: 38,",
                    "    RIGHT_ARROW: 39,",
                    "    DOWN_ARROW: 40,",
                    "",
                    "    // MacOS",
                    "    CONTROL: 17,",
                    "    OPTION: 18,",
                    "    CMD: 91,",
                    "    COMMAND: 91,",
                    "    DELETE: 8,",
                    "};"
                ]
            },
            "log.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import { isProduction } from './env';",
                    "",
                    "/* eslint no-console: 0 */",
                    "",
                    "/**",
                    " * 反对使用某一方法或属性的警告",
                    " * @param  {String} props     过时的属性或方法名",
                    " * @param  {String} instead   替代的属性或方法名",
                    " * @param  {String} component 组件名",
                    " *",
                    " * @example",
                    " * log.deprecated('onBeforeClose', 'beforeClose', 'Dialog');",
                    " * // Warning: onBeforeClose is deprecated at [ Dialog ], use [ beforeClose ] instead of it.",
                    " */",
                    "export function deprecated (props, instead, component) {",
                    "    /* istanbul ignore else */",
                    "    if (!isProduction() && typeof console !== 'undefined' && console.error) {",
                    "        return console.error(",
                    "            `Warning: [ ${props} ] is deprecated at [ ${component} ], ` +",
                    "            `use [ ${instead} ] instead of it.`",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "/**",
                    " * 控制台警告日志",
                    " * @param  {String} msg",
                    " */",
                    "export function warning (msg) {",
                    "    /* istanbul ignore else */",
                    "    if (typeof console !== 'undefined' && console.error) {",
                    "        return console.error(`Warning: ${msg}`);",
                    "    }",
                    "}"
                ]
            },
            "object.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "/**",
                    " * 获取对象的类型",
                    " * @param  {*} obj",
                    " * @return {String}",
                    " *",
                    " * @example",
                    " * typeOf([]) === 'Array'",
                    " * typeOf() === 'Undefined'",
                    " * typeOf(1) === 'Number'",
                    " */",
                    "export function typeOf (obj) {",
                    "    return Object.prototype.toString.call(obj).replace(/\\[object\\s|]/g, '');",
                    "}",
                    "",
                    "/**",
                    " * 判断是否是数组或类数组对象",
                    " * @param  {*}  obj",
                    " * @return {Boolean}",
                    " *",
                    " * @example",
                    " * isArrayLike([]) === true",
                    " * isArrayLike(arguments) === true",
                    " * isArrayLike(this.props.children) === true",
                    " */",
                    "export function isArrayLike (obj) {",
                    "    const length = !!obj && 'length' in obj && obj.length;",
                    "    const type = typeOf(obj);",
                    "",
                    "    return type === 'Array' || length === 0 ||",
                    "        (typeof length === 'number' && length > 0 && (length - 1) in obj);",
                    "}",
                    "",
                    "/**",
                    " * 判断对象是否是一个promise，即是否可以用.then",
                    " * @param  {*}  obj",
                    " * @return {Boolean}",
                    " */",
                    "export function isPromise (obj) {",
                    "    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';",
                    "}",
                    "",
                    "/**",
                    " * 是否是一个纯净的对象",
                    " * @param  {*}  obj",
                    " * @return {Boolean}",
                    " * @reference https://github.com/jonschlinkert/is-plain-object",
                    " */",
                    "export function isPlainObject (obj) {",
                    "    if (typeOf(obj) !== 'Object') {",
                    "        return false;",
                    "    }",
                    "",
                    "    const ctor = obj.constructor;",
                    "",
                    "    if (typeof ctor !== 'function') {",
                    "        return false;",
                    "    }",
                    "",
                    "    const prot = ctor.prototype;",
                    "",
                    "    if (typeOf(prot) !== 'Object') {",
                    "        return false;",
                    "    }",
                    "",
                    "    if (!prot.hasOwnProperty('isPrototypeOf')) {",
                    "        return false;",
                    "    }",
                    "",
                    "    return true;",
                    "}",
                    "",
                    "/**",
                    " * 对象浅比较",
                    " * @param  {Object} objA",
                    " * @param  {Object} objB",
                    " * @param  {Function}  [compare] 手动调用方法比较",
                    " * @return {Boolean}      对象浅比较是否相等",
                    " *",
                    " * @example",
                    " * object.shallowEqual({a: 100}, {a: 100}); // true",
                    " */",
                    "export function shallowEqual (objA, objB, compare) {",
                    "    if (objA === objB) {",
                    "        return true;",
                    "    }",
                    "",
                    "    // 其中一个不是object，则不相等",
                    "    if (!objA || !objB || (typeof objA + typeof objB !== 'objectobject')) {",
                    "        return false;",
                    "    }",
                    "",
                    "    const keyA = Object.keys(objA);",
                    "    const keyB = Object.keys(objB);",
                    "    const len = keyA.length;",
                    "",
                    "    // key 数量不一致则不相等",
                    "    if (len !== keyB.length) {",
                    "        return false;",
                    "    }",
                    "",
                    "    const hasCallback = typeof compare === 'function';",
                    "",
                    "    for (let i = 0; i < len; i++) {",
                    "        const key = keyA[i];",
                    "",
                    "        if (!Object.prototype.hasOwnProperty.call(objB, key)) {",
                    "            return false;",
                    "        }",
                    "",
                    "        const valA = objA[key];",
                    "        const valB = objB[key];",
                    "",
                    "        const ret = hasCallback ? compare(valA, valB, key) : void 0;",
                    "",
                    "        if (ret === false || ret === void 0 && valA !== valB) {",
                    "            return false;",
                    "        }",
                    "    }",
                    "",
                    "    return true;",
                    "}",
                    "",
                    "/**",
                    " * 遍历对象或数组，或者类数组，例如React中的children对象、arguments等",
                    " * @param  {Object|Array}   obj",
                    " * @param  {Function} callback fn(n, i) or fn(val, key)",
                    " * @param  {Number}   [direction = 1] 是否倒序遍历，只对数组有效",
                    " * @return {Object|Array}",
                    " *",
                    " * @example",
                    " * // 遍历数组",
                    " * object.each([100, 200, 300], (n, i) => console.log(n, i));",
                    " * // 遍历json对象",
                    " * object.each({a: 100, b: 200}, (value, key) => console.log(key, value));",
                    " * // 遍历React子节点",
                    " * object.each(this.props.children, (child, index) => console.log(child));",
                    " * // 遍历arguments",
                    " * object.each(arguments, (arg, i) => console.log(arg));",
                    " */",
                    "export function each (obj, callback, direction) {",
                    "    const reversed = direction === -1;",
                    "    const length = obj.length;",
                    "    let value,",
                    "        i = reversed ? length - 1 : 0;",
                    "",
                    "    if (isArrayLike(obj)) {",
                    "        for (; i < length && i >= 0; reversed ? i-- : i++) {",
                    "            value = callback.call(obj[i], obj[i], i);",
                    "",
                    "            if (value === false) {",
                    "                break;",
                    "            }",
                    "        }",
                    "    } else {",
                    "        for (i in obj) {",
                    "            /* istanbul ignore else */",
                    "            if (obj.hasOwnProperty(i)) {",
                    "                value = callback.call(obj[i], obj[i], i);",
                    "",
                    "                if (value === false) {",
                    "                    break;",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    return obj;",
                    "}",
                    "",
                    "// @private 判断key是否在数组或对象中",
                    "const _isInObj = (key, obj, isArray) => isArray ? (obj.indexOf(key) > -1)  : (key in obj);",
                    "",
                    "/**",
                    " * 过滤出其它属性",
                    " * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key",
                    " * @param  {Object} props     被过滤的对象",
                    " * @return {Object}           others",
                    " *",
                    " * @example",
                    " * object.pickOthers(FooComponent.propTypes, this.props);",
                    " * object.pickOthers(['className', 'onChange'], this.props);",
                    " */",
                    "export function pickOthers (holdProps, props) {",
                    "    const others = {};",
                    "    const isArray = typeOf(holdProps) === 'Array';",
                    "",
                    "    for (const key in props) {",
                    "        if (!_isInObj(key, holdProps, isArray)) {",
                    "            others[key] = props[key];",
                    "        }",
                    "    }",
                    "",
                    "    return others;",
                    "}",
                    "",
                    "/**",
                    " * 过滤出带prefix的属性",
                    " * @param  {Object} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key",
                    " * @param  {string} prefix    包含的字符串",
                    " * @return {Object}           others",
                    " *",
                    " * @example",
                    " * object.pickAttrsWith(FooComponent.propTypes, 'data-');",
                    " */",
                    "export function pickAttrsWith (holdProps, prefix) {",
                    "    const others = {};",
                    "",
                    "    for (const key in holdProps) {",
                    "        if (key.match(prefix)) {",
                    "            others[key] = holdProps[key];",
                    "        }",
                    "    }",
                    "",
                    "    return others;",
                    "}"
                ]
            },
            "string.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "/**",
                    " * 将字符串转化为驼峰式写法",
                    " * @param  {String} str 例：-webkit-transition",
                    " * @return {String}     例：WebkitTransition",
                    " */",
                    "export function camelcase (str) {",
                    "    if (!/-/.test(str)) {",
                    "        return str || '';",
                    "    }",
                    "    return str.toLowerCase().replace(/-([a-z])/g, ($0, $1) => $1.toUpperCase());",
                    "}",
                    "",
                    "/**",
                    " * 将驼峰式字符串转化为连字符写法",
                    " * @param  {String} str 例：WebkitTransition",
                    " * @return {String}     例：-webkit-transition",
                    " */",
                    "export function hyphenate (str) {",
                    "    return str.replace(/([A-Z])/g, $0 => `-${$0.toLowerCase()}`);",
                    "}"
                ]
            },
            "support.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import {hasDOM} from './dom';",
                    "import {each} from './object';",
                    "",
                    "const animationEndEventNames = {",
                    "    WebkitAnimation: 'webkitAnimationEnd',",
                    "    OAnimation: 'oAnimationEnd',",
                    "    animation: 'animationend'",
                    "};",
                    "",
                    "const transitionEventNames = {",
                    "    WebkitTransition: 'webkitTransitionEnd',",
                    "    OTransition: 'oTransitionEnd',",
                    "    transition: 'transitionend'",
                    "};",
                    "",
                    "/**",
                    " * 是否支持某些动效事件，如果支持，返回相应的end事件名",
                    " * @private",
                    " * @param  {Object<String>} names",
                    " * @return {Object|false}",
                    " */",
                    "function _supportEnd (names) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM) {",
                    "        return false;",
                    "    }",
                    "",
                    "    const el = document.createElement('div');",
                    "    let ret = false;",
                    "",
                    "    each(names, (val, key) => {",
                    "        /* istanbul ignore else */",
                    "        if (el.style[key] !== undefined) {",
                    "            ret = {end: val};",
                    "            return false;",
                    "        }",
                    "    });",
                    "",
                    "    return ret;",
                    "}",
                    "",
                    "/**",
                    " * 是否支持某些CSS属性",
                    " * @private",
                    " * @param  {Object<Array<String>>} names",
                    " * @return {Boolean}       is support",
                    " */",
                    "function _supportCSS (names) {",
                    "    /* istanbul ignore if */",
                    "    if (!hasDOM) {",
                    "        return false;",
                    "    }",
                    "",
                    "    const el = document.createElement('div');",
                    "    let ret = false;",
                    "",
                    "    each(names, (val, key) => {",
                    "        each(val, item => {",
                    "            try {",
                    "                el.style[key] = item;",
                    "                ret = ret || el.style[key] === item;",
                    "            } catch (e) {",
                    "                // It will be throw error when set unknown property under IE8",
                    "            }",
                    "            return !ret; // 如果有一个支持就返回false，后面不需要再判断",
                    "        });",
                    "",
                    "        return !ret;",
                    "    });",
                    "",
                    "    return ret;",
                    "}",
                    "",
                    "/**",
                    " * 是否支持animation以及动画结束事件名",
                    " * @type {Object|false}",
                    " * @property {String} end 动画结束事件名",
                    " */",
                    "export const animation = _supportEnd(animationEndEventNames);",
                    "",
                    "/**",
                    " * 是否支持transition以及过滤效果结束事件名",
                    " * @type {Object|false}",
                    " * @property {String} end 过渡效果结束事件名",
                    " */",
                    "export const transition = _supportEnd(transitionEventNames);",
                    "",
                    "/**",
                    " * 是否支持flex属性",
                    " * @type {Boolean}",
                    " */",
                    "export const flex = _supportCSS({",
                    "    display: ['flex', '-webkit-flex', '-moz-flex', '-ms-flexbox']",
                    "});"
                ]
            }
        },
        "validate": {
            "index.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import {complementError, asyncMap} from './util';",
                    "import {getValidationMethod} from './validator';",
                    "import defaultMessages from './messages';",
                    "",
                    "function noop() {",
                    "}",
                    "",
                    "class Schema {",
                    "    constructor(rules, options = {}) {",
                    "        this._rules = rules;",
                    "        this._options = {",
                    "            ...options,",
                    "            messages: {",
                    "                ...defaultMessages,",
                    "                ...options.messages",
                    "            }",
                    "        };",
                    "        this.complete = [];",
                    "    }",
                    "",
                    "    abort() {",
                    "        for (let i = 0; i < this.complete.length; i++) {",
                    "            this.complete[i] = noop;",
                    "        }",
                    "    }",
                    "",
                    "    messages(messages) {",
                    "        this._options.messages = Object.assign({}, this._options.messages, messages);",
                    "    }",
                    "",
                    "    validate(source, callback) {",
                    "",
                    "        if (!this._rules || Object.keys(this._rules).length === 0) {",
                    "            if (callback) {",
                    "                callback(null);",
                    "            }",
                    "            return;",
                    "        }",
                    "",
                    "        // serialize rules",
                    "        let arr;",
                    "        let value;",
                    "        const series = {};",
                    "        const names = Object.keys(this._rules);",
                    "        names.forEach((name) => {",
                    "            arr = this._rules[name];",
                    "            value = source[name];",
                    "",
                    "            if (!Array.isArray(arr)) {",
                    "                arr = [arr];",
                    "            }",
                    "",
                    "            arr.forEach((rule) => {",
                    "                rule.validator = getValidationMethod(rule);",
                    "                rule.field = name;",
                    "                if (!rule.validator) {",
                    "                    return;",
                    "                }",
                    "                series[name] = series[name] || [];",
                    "                series[name].push({rule, value, source, field: name});",
                    "            });",
                    "        });",
                    "",
                    "        if (Object.keys(series).length === 0) {",
                    "            callback(null);",
                    "        }",
                    "",
                    "        // callback function for all rules return",
                    "        function complete(results) {",
                    "            let i;",
                    "            let field;",
                    "            let errors = [];",
                    "            let fields = {};",
                    "",
                    "            function add(e) {",
                    "                if (Array.isArray(e)) {",
                    "                    errors = errors.concat(e);",
                    "                } else {",
                    "                    errors.push(e);",
                    "                }",
                    "            }",
                    "",
                    "            for (i = 0; i < results.length; i++) {",
                    "                add(results[i]);",
                    "            }",
                    "            if (!errors.length) {",
                    "                errors = null;",
                    "                fields = null;",
                    "            } else {",
                    "                for (i = 0; i < errors.length; i++) {",
                    "                    field = errors[i].field;",
                    "                    fields[field] = fields[field] || [];",
                    "                    fields[field].push(errors[i]);",
                    "                }",
                    "            }",
                    "            callback(errors, fields);",
                    "        }",
                    "",
                    "        this.complete.push(complete);",
                    "        const idx = this.complete.length;",
                    "",
                    "        // async validate",
                    "        asyncMap(series, this._options, (data, doIt) => {",
                    "            const rule = data.rule;",
                    "            rule.field = data.field;",
                    "",
                    "            function cb(e = []) {",
                    "                let errors = e;",
                    "                if (!Array.isArray(errors)) {",
                    "                    errors = [errors];",
                    "                }",
                    "",
                    "                // 自定义错误",
                    "                if (errors.length && rule.message) {",
                    "                    errors = [].concat(rule.message);",
                    "                }",
                    "",
                    "                errors = errors.map(complementError(rule));",
                    "",
                    "                doIt(errors);",
                    "            }",
                    "",
                    "            const res = rule.validator(rule, data.value, cb, this._options);",
                    "            if (res && res.then) {",
                    "                res.then(() => cb(), e => cb(e));",
                    "            }",
                    "        }, (results) => {",
                    "            this.complete[idx - 1](results);",
                    "        });",
                    "    }",
                    "}",
                    "",
                    "export default Schema;"
                ]
            },
            "messages.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "export default {",
                    "    default: '%s 校验失败',",
                    "    required: '%s 是必填字段',",
                    "    format: {",
                    "        number: '%s 不是合法的数字',",
                    "        email: '%s 不是合法的 email 地址',",
                    "        url: '%s 不是合法的 URL 地址',",
                    "        tel: '%s 不是合法的电话号码'",
                    "    },",
                    "    number: {",
                    "        length: '%s 长度必须是 %s',",
                    "        min: '%s 字段数值不得小于 %s',",
                    "        max: '%s 字段数值不得大于 %s',",
                    "        minLength: '%s 字段字符长度不得少于 %s',",
                    "        maxLength: '%s 字段字符长度不得超过 %s',",
                    "    },",
                    "    string: {",
                    "        length: '%s 长度必须是 %s',",
                    "        min: '%s 字段数值不得小于 %s',",
                    "        max: '%s 字段数值不得大于 %s',",
                    "        minLength: '%s 字段字符长度不得少于 %s',",
                    "        maxLength: '%s 字段字符长度不得超过 %s',",
                    "    },",
                    "    array: {",
                    "        length: '%s 个数必须是 %s',",
                    "        minLength: '%s 个数不得少于 %s',",
                    "        maxLength: '%s 个数不得超过 %s'",
                    "    },",
                    "    pattern: '%s 字段数值 %s 不匹配正则 %s',",
                    "};"
                ]
            },
            "util.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "const formatRegExp = /%[sdj%]/g;",
                    "",
                    "export function format(...args) {",
                    "    let i = 1;",
                    "    const f = args[0];",
                    "    const len = args.length;",
                    "    if (typeof f === 'function') {",
                    "        return f(args.slice(1));",
                    "    }",
                    "    if (typeof f === 'string') {",
                    "        const str = String(f).replace(formatRegExp, (x) => {",
                    "            if (x === '%%') {",
                    "                return '%';",
                    "            }",
                    "            if (i >= len) {",
                    "                return x;",
                    "            }",
                    "            switch (x) {",
                    "                case '%s':",
                    "                    return String(args[i++]);",
                    "                case '%d':",
                    "                    return Number(args[i++]);",
                    "                case '%j':",
                    "                    try {",
                    "                        return JSON.stringify(args[i++]);",
                    "                    } catch (_) {",
                    "                        return '[Circular]';",
                    "                    }",
                    "                default:",
                    "                    return x;",
                    "            }",
                    "        });",
                    "",
                    "        return str;",
                    "    }",
                    "    return f;",
                    "}",
                    "",
                    "function asyncSerialArray(arr, func, callback) {",
                    "    let index = 0;",
                    "    const arrLength = arr.length;",
                    "",
                    "    function next(errors) {",
                    "        if (errors && errors.length) {",
                    "            callback(errors);",
                    "            return;",
                    "        }",
                    "        const original = index;",
                    "        index = index + 1;",
                    "        if (original < arrLength) {",
                    "            func(arr[original], next);",
                    "        } else {",
                    "            callback([]);",
                    "        }",
                    "    }",
                    "",
                    "    next([]);",
                    "}",
                    "",
                    "/**",
                    " * 平铺规则",
                    " * @param  {object} objArr [description]",
                    " * @return {Array}        [description]",
                    " */",
                    "function flattenObjArr(objArr) {",
                    "    const ret = [];",
                    "    Object.keys(objArr).forEach((k) => {",
                    "        Object.keys(objArr[k]).forEach(r => {",
                    "            ret.push(objArr[k][r]);",
                    "        });",
                    "    });",
                    "    return ret;",
                    "}",
                    "",
                    "/**",
                    " * 异步调用",
                    " * @param  {map}   objArr   校验规则对象列表",
                    " * @param  {object}   option   配置项",
                    " * @param  {Function} func     每个校验规则",
                    " * @param  {Function} callback 全部完成后的执行",
                    " */",
                    "export function asyncMap(objArr, option, func, callback) {",
                    "    // 发现第一个错误即返回",
                    "    if (option.first) {",
                    "        const flattenArr = flattenObjArr(objArr);",
                    "        return asyncSerialArray(flattenArr, func, callback);",
                    "    }",
                    "",
                    "    const objArrKeys = Object.keys(objArr);",
                    "    const objArrLength = objArrKeys.length;",
                    "    let total = 0;",
                    "    const results = [];",
                    "    const next = (errors) => {",
                    "        results.push(errors);",
                    "        total++;",
                    "        if (total === objArrLength) {",
                    "            callback(results);",
                    "        }",
                    "    };",
                    "    objArrKeys.forEach((key) => {",
                    "        const arr = objArr[key];",
                    "        asyncSerialArray(arr, func, next);",
                    "    });",
                    "}",
                    "",
                    "export function complementError(rule) {",
                    "    return (oe) => {",
                    "        if (oe && oe.message) {",
                    "            oe.field = rule.field;",
                    "            return oe;",
                    "        }",
                    "        return {",
                    "            message: oe,",
                    "            field: rule.field",
                    "        };",
                    "    };",
                    "}"
                ]
            },
            "validator.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import rules from './rules/';",
                    "",
                    "/**",
                    " * {required, format} => format; {required} => required",
                    " * @param  {function} validator [description]",
                    " * @param  {string} ruleType  [description]",
                    " * @return {function}           [description]",
                    " */",
                    "export function validateFunc(validator, ruleType) {",
                    "    return (rule, value, cb, options) => {",
                    "        const errors = [];",
                    "",
                    "        // 如果是非required校验",
                    "        if (ruleType !== 'required') {",
                    "            const errors = [];",
                    "            rules.required(rule, value, errors, options);",
                    "            if (errors.length > 0) {",
                    "                if ('required' in rule) {",
                    "                    cb(errors);",
                    "                } else {",
                    "                    cb([]); //忽略空数据的判断",
                    "                }",
                    "                return;",
                    "            }",
                    "        }",
                    "",
                    "        validator(rule, value, errors, options);",
                    "        cb(errors);",
                    "    };",
                    "}",
                    "",
                    "/**",
                    " * {required, format} => format; {required} => required",
                    " * @param  {object} rule [description]",
                    " * @return {function}      [description]",
                    " */",
                    "export function getValidationMethod(rule) {",
                    "    if (typeof rule.validator === 'function') {",
                    "        return rule.validator;",
                    "    }",
                    "",
                    "    const keys = Object.keys(rule);",
                    "",
                    "    //required和其他校验规则共存",
                    "    //{required, format} {required, unknown}",
                    "    for (let i = 0; i < keys.length; i++) {",
                    "        const ruleType = keys[i];",
                    "",
                    "        if (ruleType === 'required') {",
                    "            continue;",
                    "        }",
                    "        if (ruleType in rules) {",
                    "            return validateFunc(rules[ruleType], ruleType);",
                    "        }",
                    "    }",
                    "",
                    "    // 有其他位置参数",
                    "    if ('required' in rule) {",
                    "        return validateFunc(rules.required, 'required');",
                    "    }",
                    "",
                    "    return null;",
                    "}"
                ]
            },
            "rules": {
                "format.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import * as util from '../util';",
                        "",
                        "const pattern = {",
                        "    email: /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/,",
                        "    url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$', 'i'),",
                        "    number: /\\d*/,",
                        "    tel: /^(1\\d{10})$|(((400)-(\\d{3})-(\\d{4}))|^((\\d{7,8})|(\\d{3,4})-(\\d{7,8})|(\\d{7,8})-(\\d{1,4}))$)$|^([ ]?)$/",
                        "};",
                        "",
                        "const types = {",
                        "    number(value) {",
                        "        if (isNaN(value)) {",
                        "            return false;",
                        "        }",
                        "        return typeof value === 'number' || (typeof value === 'string' && !!value.match(pattern.number));",
                        "    },",
                        "    email(value) {",
                        "        return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;",
                        "    },",
                        "    url(value) {",
                        "        return typeof value === 'string' && !!value.match(pattern.url);",
                        "    },",
                        "    tel(value) {",
                        "        return typeof value === 'string' && !!value.match(pattern.tel);",
                        "    }",
                        "};",
                        "",
                        "/**",
                        " *  Rule for validating the type of a value.",
                        " *",
                        " *  @param rule The validation rule.",
                        " *  @param value The value of the field on the source object.",
                        " *  @param errors An array of errors that this rule may add",
                        " *  validation errors to.",
                        " *  @param options The validation options.",
                        " *  @param options.messages The validation messages.",
                        " */",
                        "function format(rule, value, errors, options) {",
                        "    const custom = ['email', 'number', 'url', 'tel'];",
                        "    const ruleType = rule.format;",
                        "    if (custom.indexOf(ruleType) > -1 && !types[ruleType](value)) {",
                        "        errors.push(util.format(options.messages.format[ruleType], rule.field, rule.format));",
                        "    }",
                        "}",
                        "",
                        "export default format;"
                    ]
                },
                "index.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import required from './required';",
                        "import format from './format';",
                        "import size from './size';",
                        "import length from './length';",
                        "import pattern from './pattern';",
                        "",
                        "export default {",
                        "    required,",
                        "    format,",
                        "    min: size,",
                        "    max: size,",
                        "    minLength: length,",
                        "    maxLength: length,",
                        "    length,",
                        "    pattern",
                        "};"
                    ]
                },
                "length.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import * as util from '../util';",
                        "",
                        "/**",
                        " *  Rule for validating minimum and maximum allowed values.",
                        " *",
                        " *  @param rule The validation rule.",
                        " *  @param value The value of the field on the source object.",
                        " *  @param errors An array of errors that this rule may add",
                        " *  validation errors to.",
                        " *  @param options The validation options.",
                        " *  @param options.messages The validation messages.",
                        " */",
                        "function length(rule, value, errors, options) {",
                        "",
                        "    let key = null;",
                        "    const isNum = typeof value === 'number';",
                        "    const isStr = typeof value === 'string';",
                        "    const isArr = Array.isArray(value);",
                        "",
                        "    if (isNum) {",
                        "        key = 'number';",
                        "    } else if (isStr) {",
                        "        key = 'string';",
                        "    } else if (isArr) {",
                        "        key = 'array';",
                        "    }",
                        "",
                        "    if (!key) {",
                        "        return false;",
                        "    }",
                        "",
                        "    let val = value;",
                        "    const length = Number(rule.length);",
                        "    const maxLength = Number(rule.maxLength);",
                        "    const minLength = Number(rule.minLength);",
                        "",
                        "    if (minLength || maxLength || length) {",
                        "        if (isNum) {",
                        "            val = `${val}`;",
                        "        }",
                        "        val = val.length;",
                        "        if (length && val !== rule.length) {",
                        "            errors.push(util.format(options.messages[key].length, rule.field, rule.length));",
                        "        } else if (val < minLength) {",
                        "            errors.push(util.format(options.messages[key].minLength, rule.field, rule.minLength));",
                        "        } else if (val > maxLength) {",
                        "            errors.push(util.format(options.messages[key].maxLength, rule.field, rule.maxLength));",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "export default length;"
                    ]
                },
                "pattern.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import * as util from '../util';",
                        "",
                        "/**",
                        " *  Rule for validating a regular expression pattern.",
                        " *",
                        " *  @param rule The validation rule.",
                        " *  @param value The value of the field on the source object.",
                        " *  @param errors An array of errors that this rule may add",
                        " *  validation errors to.",
                        " *  @param options The validation options.",
                        " *  @param options.messages The validation messages.",
                        " */",
                        "function pattern(rule, value, errors, options) {",
                        "    if (rule.pattern) {",
                        "        if (rule.pattern instanceof RegExp) {",
                        "            if (!rule.pattern.test(value)) {",
                        "                errors.push(util.format(options.messages.pattern, rule.field, value, rule.pattern));",
                        "            }",
                        "        } else if (typeof rule.pattern === 'string') {",
                        "            const _pattern = new RegExp(rule.pattern);",
                        "            if (!_pattern.test(value)) {",
                        "                errors.push(util.format(options.messages.pattern, rule.field, value, rule.pattern));",
                        "            }",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "export default pattern;"
                    ]
                },
                "required.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import * as util from '../util';",
                        "",
                        "/**",
                        " *  Rule for validating required fields.",
                        " *",
                        " *  @param rule The validation rule.",
                        " *  @param value The value of the field on the source object.",
                        " *  @param errors An array of errors that this rule may add",
                        " *  validation errors to.",
                        " *  @param options The validation options.",
                        " *  @param options.messages The validation messages.",
                        " */",
                        "function required(rule, value, errors, options) {",
                        "    if (value === undefined || value === null || value === '' || value.length === 0 || value === false) {",
                        "        errors.push(util.format(options.messages.required, rule.field));",
                        "    }",
                        "}",
                        "",
                        "export default required;"
                    ]
                },
                "size.js": {
                    "classes": [],
                    "functions": [],
                    "text": [
                        "import * as util from '../util';",
                        "",
                        "/**",
                        " *  Rule for validating minimum and maximum allowed values.",
                        " *",
                        " *  @param rule The validation rule.",
                        " *  @param value The value of the field on the source object.",
                        " *  @param errors An array of errors that this rule may add",
                        " *  validation errors to.",
                        " *  @param options The validation options.",
                        " *  @param options.messages The validation messages.",
                        " */",
                        "function size(rule, value, errors, options) {",
                        "",
                        "    let key = null;",
                        "    const isNum = typeof value === 'number';",
                        "    const isStr = typeof value === 'string';",
                        "",
                        "    if (isNum) {",
                        "        key = 'number';",
                        "    } else if (isStr) {",
                        "        key = 'string';",
                        "    }",
                        "",
                        "    if (!key) {",
                        "        return false;",
                        "    }",
                        "",
                        "    let val = value;",
                        "    const max = Number(rule.max);",
                        "    const min = Number(rule.min);",
                        "",
                        "    if (min || max) {",
                        "        if (isStr) {",
                        "            val = Number(val);",
                        "        }",
                        "        if (val < min) {",
                        "            errors.push(util.format(options.messages[key].min, rule.field, rule.min));",
                        "        } else if (val > max) {",
                        "            errors.push(util.format(options.messages[key].max, rule.field, rule.max));",
                        "        }",
                        "    }",
                        "}",
                        "",
                        "export default size;"
                    ]
                }
            }
        },
        "virtual-list": {
            "index.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import ConfigProvider from '../config-provider';",
                    "import VirtualList from './virtual-list';",
                    "",
                    "export default ConfigProvider.config(VirtualList);"
                ]
            },
            "main.scss": {
                "classes": "",
                "functions": "",
                "text": [
                    "@charset \"UTF-8\";",
                    "@import \"../core/index-noreset.scss\";",
                    "@import \"./scss/mixin.scss\";",
                    "@import \"./scss/variable.scss\";"
                ]
            },
            "style.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "import './main.scss';"
                ]
            },
            "virtual-list.jsx": {
                "classes": [],
                "functions": [],
                "text": [
                    "import PropTypes from 'prop-types';",
                    "import React, {Component} from 'react';",
                    "import cx from 'classnames';",
                    "import { findDOMNode } from 'react-dom';",
                    "import { events } from '../util';",
                    "",
                    "const NOOP = () => {};",
                    "const MAX_SYNC_UPDATES = 100;",
                    "",
                    "const isEqualSubset = (a, b) => {",
                    "    for (const key in b) {",
                    "        if (a[key] !== b[key]) {",
                    "            return false;",
                    "        }",
                    "    }",
                    "",
                    "    return true;",
                    "};",
                    "",
                    "/** VirtualList */",
                    "export default class VirtualList extends Component {",
                    "    static displayName = 'VirtualList';",
                    "",
                    "    static propTypes = {",
                    "        prefix: PropTypes.string,",
                    "        /**",
                    "         * 渲染的子节点",
                    "         */",
                    "        children: PropTypes.any,",
                    "        /**",
                    "         * 最小加载数量",
                    "         */",
                    "        minSize: PropTypes.number,",
                    "        /**",
                    "         * 一屏数量",
                    "         */",
                    "        pageSize: PropTypes.number,",
                    "        /**",
                    "         * 父渲染函数，默认为 (items, ref) => <ul ref={ref}>{items}</ul>",
                    "         */",
                    "        itemsRenderer: PropTypes.func,",
                    "        /**",
                    "         * 缓冲区高度",
                    "         */",
                    "        threshold: PropTypes.number,",
                    "        /**",
                    "         * 获取item高度的函数",
                    "         */",
                    "        itemSizeGetter: PropTypes.func,",
                    "        /**",
                    "         * 设置跳转位置，需要设置 itemSizeGetter 才能生效, 不设置认为元素等高并取第一个元素高度作为默认高",
                    "         */",
                    "        jumpIndex: PropTypes.number,",
                    "        className: PropTypes.string",
                    "    };",
                    "",
                    "    static defaultProps = {",
                    "        prefix: 'next-',",
                    "        itemsRenderer: (items, ref) => <ul ref={ref}>{items}</ul>,",
                    "        minSize: 1,",
                    "        pageSize: 10,",
                    "        jumpIndex: 0,",
                    "        threshold: 100",
                    "    };",
                    "",
                    "    constructor(props) {",
                    "        super(props);",
                    "        const { jumpIndex } = props;",
                    "        const { from, size } = this.constrain(jumpIndex, 0, props);",
                    "        this.state = { from, size};",
                    "        this.cache = {};",
                    "        this.scrollTo = this.scrollTo.bind(this);",
                    "        this.cachedScroll = null;",
                    "        this.unstable = false;",
                    "        this.updateCounter = 0;",
                    "    }",
                    "",
                    "    componentDidMount() {",
                    "        const { jumpIndex } = this.props;",
                    "",
                    "        this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);",
                    "",
                    "        events.on(window, 'resize', this.updateFrameAndClearCache);",
                    "",
                    "        this.updateFrame(this.scrollTo.bind(this, jumpIndex));",
                    "    }",
                    "",
                    "    componentWillReceiveProps(next) {",
                    "        const {from, size} = this.state;",
                    "",
                    "        const oldIndex = this.props.jumpIndex;",
                    "        const newIndex = next.jumpIndex;",
                    "",
                    "        if (oldIndex !== newIndex) {",
                    "            this.updateFrame(this.scrollTo.bind(this, newIndex));",
                    "        }",
                    "",
                    "        this.maybeSetState(this.constrain(from, size, next), NOOP);",
                    "    }",
                    "",
                    "    componentDidUpdate() {",
                    "",
                    "        // If the list has reached an unstable state, prevent an infinite loop.",
                    "        if (this.unstable) {",
                    "            return;",
                    "        }",
                    "",
                    "        if (++this.updateCounter > MAX_SYNC_UPDATES) {",
                    "            this.unstable = true;",
                    "        }",
                    "",
                    "        if (!this.updateCounterTimeoutId) {",
                    "            this.updateCounterTimeoutId = setTimeout(() => {",
                    "                this.updateCounter = 0;",
                    "                delete this.updateCounterTimeoutId;",
                    "            }, 0);",
                    "        }",
                    "",
                    "        this.updateFrame();",
                    "    }",
                    "",
                    "    componentWillUnmount() {",
                    "        events.off(window, 'resize', this.updateFrameAndClearCache);",
                    "",
                    "        events.off(this.scrollParent, 'scroll', this.updateFrameAndClearCache);",
                    "        events.off(this.scrollParent, 'mousewheel', NOOP);",
                    "    }",
                    "",
                    "    maybeSetState(b, cb) {",
                    "",
                    "        if (isEqualSubset(this.state, b)) {",
                    "            return cb();",
                    "        }",
                    "",
                    "        this.setState(b, cb);",
                    "    }",
                    "",
                    "    getOffset(el) {",
                    "        let offset = el.clientLeft || 0;",
                    "        do {",
                    "            offset += el.offsetTop || 0;",
                    "            el = el.offsetParent;",
                    "        } while (el);",
                    "        return offset;",
                    "    }",
                    "",
                    "    getEl() {",
                    "        return this.el || this.items || {};",
                    "    }",
                    "",
                    "    getScrollParent() {",
                    "        let el = this.getEl();",
                    "        el = el.parentElement;",
                    "",
                    "        switch (window.getComputedStyle(el).overflowY) {",
                    "            case 'auto': case 'scroll': case 'overlay': case 'visible': return el;",
                    "        }",
                    "",
                    "        return window;",
                    "    }",
                    "",
                    "    getScroll() {",
                    "        // Cache scroll position as this causes a forced synchronous layout.",
                    "        // if (typeof this.cachedScroll === 'number') {",
                    "        //     return this.cachedScroll;",
                    "        // }",
                    "        const {scrollParent} = this;",
                    "        const scrollKey = 'scrollTop';",
                    "        const actual = scrollParent === window ?",
                    "        // Firefox always returns document.body[scrollKey] as 0 and Chrome/Safari",
                    "        // always return document.documentElement[scrollKey] as 0, so take",
                    "        // whichever has a value.",
                    "            document.body[scrollKey] || document.documentElement[scrollKey] :",
                    "            scrollParent[scrollKey];",
                    "        const max = this.getScrollSize() - this.getViewportSize();",
                    "",
                    "        const scroll = Math.max(0, Math.min(actual, max));",
                    "        const el = this.getEl();",
                    "        this.cachedScroll = this.getOffset(scrollParent) + scroll - this.getOffset(el);",
                    "",
                    "        return this.cachedScroll;",
                    "    }",
                    "",
                    "    setScroll(offset) {",
                    "        const {scrollParent} = this;",
                    "        offset += this.getOffset(this.getEl());",
                    "        if (scrollParent === window) {",
                    "            return window.scrollTo(0, offset);",
                    "        }",
                    "",
                    "        offset -= this.getOffset(this.scrollParent);",
                    "        scrollParent.scrollTop = offset;",
                    "    }",
                    "",
                    "    getViewportSize() {",
                    "        const {scrollParent} = this;",
                    "        return scrollParent === window ?",
                    "            window.innerHeight :",
                    "            scrollParent.clientHeight;",
                    "    }",
                    "",
                    "    getScrollSize() {",
                    "        const {scrollParent} = this;",
                    "        const {body, documentElement} = document;",
                    "        const key = 'scrollHeight';",
                    "        return scrollParent === window ?",
                    "            Math.max(body[key], documentElement[key]) :",
                    "            scrollParent[key];",
                    "    }",
                    "",
                    "    getStartAndEnd(threshold = this.props.threshold) {",
                    "        const scroll = this.getScroll();",
                    "",
                    "        const trueScroll = scroll;",
                    "        const start = Math.max(0, trueScroll - threshold);",
                    "        const end = trueScroll + this.getViewportSize() + threshold;",
                    "",
                    "        return {start, end};",
                    "    }",
                    "",
                    "    // Called by 'scroll' and 'resize' events, clears scroll position cache.",
                    "    updateFrameAndClearCache(cb) {",
                    "        this.cachedScroll = null;",
                    "        return this.updateFrame(cb);",
                    "    }",
                    "",
                    "    updateFrame(cb) {",
                    "        this.updateScrollParent();",
                    "",
                    "        if (typeof cb !== 'function') {",
                    "            cb = NOOP;",
                    "        }",
                    "",
                    "        return this.updateVariableFrame(cb);",
                    "",
                    "    }",
                    "",
                    "    updateScrollParent() {",
                    "        const prev = this.scrollParent;",
                    "        this.scrollParent = this.getScrollParent();",
                    "",
                    "        if (prev === this.scrollParent) {",
                    "            return;",
                    "        }",
                    "        if (prev) {",
                    "            events.off(prev, 'scroll', this.updateFrameAndClearCache);",
                    "            events.off(prev, 'mousewheel', NOOP);",
                    "        }",
                    "",
                    "        events.on(this.scrollParent, 'scroll', this.updateFrameAndClearCache);",
                    "        events.on(this.scrollParent, 'mousewheel', NOOP);",
                    "",
                    "        // You have to attach mousewheel listener to the scrollable element.",
                    "        // Just an empty listener. After that onscroll events will be fired synchronously.",
                    "    }",
                    "",
                    "    updateVariableFrame(cb) {",
                    "        if (!this.props.itemSizeGetter) {",
                    "            this.cacheSizes();",
                    "        }",
                    "",
                    "        const {start, end} = this.getStartAndEnd();",
                    "        const {pageSize, children} = this.props;",
                    "        const length = children.length;",
                    "        let space = 0;",
                    "        let from = 0;",
                    "        let size = 0;",
                    "        const maxFrom = length - 1;",
                    "",
                    "        while (from < maxFrom) {",
                    "            const itemSize = this.getSizeOf(from);",
                    "            if (itemSize === null || itemSize === undefined || space + itemSize > start) {",
                    "                break;",
                    "            }",
                    "            space += itemSize;",
                    "            ++from;",
                    "        }",
                    "",
                    "        const maxSize = length - from;",
                    "",
                    "        while (size < maxSize && space < end) {",
                    "            const itemSize = this.getSizeOf(from + size);",
                    "            if (itemSize === null || itemSize === undefined) {",
                    "                size = Math.min(size + pageSize, maxSize);",
                    "                break;",
                    "            }",
                    "            space += itemSize;",
                    "            ++size;",
                    "        }",
                    "",
                    "        this.maybeSetState({from, size}, cb);",
                    "    }",
                    "",
                    "    getSpaceBefore(index, cache = {}) {",
                    "",
                    "        if (!index) {",
                    "            return 0;",
                    "        }",
                    "        if (cache[index] !== null && cache[index] !== undefined) {",
                    "            return cache[index] || 0;",
                    "        }",
                    "",
                    "        // Find the closest space to index there is a cached value for.",
                    "        let from = index;",
                    "        while (from > 0 && (cache[from] === null || cache[from] === undefined)) {",
                    "            from--;",
                    "        }",
                    "",
                    "        // Finally, accumulate sizes of items from - index.",
                    "        let space = cache[from] || 0;",
                    "        for (let i = from; i < index; ++i) {",
                    "            cache[i] = space;",
                    "            const itemSize = this.getSizeOf(i);",
                    "            if (itemSize === null || itemSize === undefined) {",
                    "                break;",
                    "            }",
                    "            space += itemSize;",
                    "        }",
                    "",
                    "        cache[index] = space;",
                    "",
                    "        return cache[index] || 0;",
                    "    }",
                    "",
                    "    cacheSizes() {",
                    "        const {cache} = this;",
                    "        const {from} = this.state;",
                    "        const { children, props = {} } = this.items;",
                    "        const itemEls = children || props.children || [];",
                    "        for (let i = 0, l = itemEls.length; i < l; ++i) {",
                    "            const ulRef =  findDOMNode(this.items);",
                    "            const height = ulRef.children[i].offsetHeight;",
                    "            if (height > 0) {",
                    "                cache[from + i] = height;",
                    "            }",
                    "        }",
                    "    }",
                    "",
                    "    getSizeOf(index) {",
                    "        const { cache } = this;",
                    "        const { itemSizeGetter, jumpIndex } = this.props;",
                    "",
                    "        // Try the cache.",
                    "        if (index in cache) {",
                    "            return cache[index];",
                    "        }",
                    "        if (itemSizeGetter) {",
                    "            return itemSizeGetter(index);",
                    "        }",
                    "",
                    "        const height = Object.values(this.cache).pop();",
                    "        if (!this.defaultItemHeight && jumpIndex > -1 && height) {",
                    "            this.defaultItemHeight = height;",
                    "        }",
                    "",
                    "        if (this.defaultItemHeight) {",
                    "            return this.defaultItemHeight;",
                    "        }",
                    "    }",
                    "",
                    "    constrain(from, size, {children, minSize}) {",
                    "        const length = children && children.length;",
                    "        size = Math.max(size, minSize);",
                    "        if (size > length) {",
                    "            size = length;",
                    "        }",
                    "        from = from ? Math.max(Math.min(from, length - size), 0) : 0;",
                    "",
                    "        return {from, size};",
                    "    }",
                    "",
                    "    scrollTo(index) {",
                    "        this.setScroll(this.getSpaceBefore(index));",
                    "    }",
                    "",
                    "    renderMenuItems() {",
                    "        const { children, itemsRenderer } = this.props;",
                    "        const {from, size} = this.state;",
                    "        const items = [];",
                    "",
                    "        for (let i = 0; i < size; ++i) {",
                    "            items.push(children[from + i]);",
                    "        }",
                    "",
                    "        return itemsRenderer(items, c => {",
                    "            this.items = c;",
                    "            return this.items;",
                    "        });",
                    "    }",
                    "",
                    "    render() {",
                    "        const { children = [], prefix, className } = this.props;",
                    "        const length = children.length;",
                    "        const {from} = this.state;",
                    "        const items = this.renderMenuItems();",
                    "",
                    "        const style = {position: 'relative'};",
                    "        const cache = {};",
                    "",
                    "        const size = this.getSpaceBefore(length, cache);",
                    "",
                    "        if (size) {",
                    "            style.height = size;",
                    "        }",
                    "        const offset = this.getSpaceBefore(from, cache);",
                    "        const transform = `translate(0px, ${offset}px)`;",
                    "        const listStyle = {",
                    "            msTransform: transform,",
                    "            WebkitTransform: transform,",
                    "            transform",
                    "        };",
                    "",
                    "        const cls =  cx({",
                    "            [`${prefix}virtual-list-wrapper`]: true,",
                    "            [className]: !!className",
                    "        });",
                    "",
                    "        return (",
                    "            <div className={cls} style={style} ref={",
                    "                c => {",
                    "                    this.el = c;",
                    "                    return this.el;",
                    "                }",
                    "            }>",
                    "                <div style={listStyle}>{items}</div>",
                    "            </div>",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            "scss": {
                "mixin.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "// virtual-list mixins",
                        "// --------------------------------------------------"
                    ]
                },
                "variable.scss": {
                    "classes": "",
                    "functions": "",
                    "text": [
                        "////",
                        "/// @module virtual-list: 虚拟滚动列表",
                        "/// @tag VirtualList",
                        "/// @category component",
                        "/// @family component",
                        "/// @varPrefix $virtual-list-",
                        "/// @classPrefix {prefix}-virtual-list",
                        "////",
                        "",
                        "// virtual-list variables",
                        "// --------------------------------------------------",
                        "",
                        "// unconfigurable",
                        "$virtual-list-prefix: \".#{$css-prefix}virtual-list\";"
                    ]
                }
            }
        }
    }
}