{
    "1": {
        "bug_file": "src/transfer/view/transfer-panel.jsx",
        "compressed": "NO",
        "line_numbers": 343,
        "compressed_line_numbers": 343,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Checkbox from '../../checkbox';\nimport Search from '../../search';\nimport Menu from '../../menu';\nimport { func, htmlId } from '../../util';\nimport TransferItem from './transfer-item';\nimport VirtualList from '../../virtual-list';\n\nconst { bindCtx } = func;\n\nexport default class TransferPanel extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        position: PropTypes.oneOf(['left', 'right']),\n        mode: PropTypes.oneOf(['normal', 'simple']),\n        dataSource: PropTypes.array,\n        value: PropTypes.array,\n        onChange: PropTypes.func,\n        onMove: PropTypes.func,\n        onMoveAll: PropTypes.func,\n        disabled: PropTypes.bool,\n        locale: PropTypes.object,\n        title: PropTypes.node,\n        showSearch: PropTypes.bool,\n        searchProps: PropTypes.object,\n        filter: PropTypes.func,\n        onSearch: PropTypes.func,\n        searchPlaceholder: PropTypes.string,\n        notFoundContent: PropTypes.node,\n        listClassName: PropTypes.string,\n        listStyle: PropTypes.object,\n        itemRender: PropTypes.func,\n        sortable: PropTypes.bool,\n        onSort: PropTypes.func,\n        baseId: PropTypes.string,\n        customerList: PropTypes.func,\n        useVirtual: PropTypes.bool,\n        showCheckAll: PropTypes.bool,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            searchedValue: '',\n            dragValue: null,\n            dragOverValue: null,\n        };\n        this.footerId = props.baseId ? htmlId.escapeForId(`${props.baseId}-panel-footer-${props.position}`) : '';\n        this.headerId = props.baseId ? htmlId.escapeForId(`${props.baseId}-panel-header-${props.position}`) : '';\n\n        bindCtx(this, [\n            'handleCheck',\n            'handleAllCheck',\n            'handleSearch',\n            'handleItemDragStart',\n            'handleItemDragOver',\n            'handleItemDragEnd',\n            'handleItemDrop',\n            'getListDOM',\n        ]);\n        this.firstRender = true;\n    }\n\n    componentDidMount() {\n        this.firstRender = false;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.dataSource.length !== this.props.dataSource.length && this.list) {\n            if (this.list.scrollTop > 0) {\n                this.list.scrollTop = 0;\n            }\n        }\n\n        this.searched = false;\n    }\n\n    getListDOM(ref) {\n        this.list = ref;\n    }\n\n    getListData(dataSource, disableHighlight) {\n        const { prefix, position, mode, value, onMove, disabled, itemRender, sortable } = this.props;\n        const { dragPosition, dragValue, dragOverValue } = this.state;\n        return dataSource.map(item => {\n            const others =\n                'title' in item\n                    ? {\n                          title: item.title,\n                      }\n                    : {};\n\n            return (\n                <TransferItem\n                    key={item.value}\n                    prefix={prefix}\n                    mode={mode}\n                    checked={value.indexOf(item.value) > -1}\n                    disabled={disabled || item.disabled}\n                    item={item}\n                    onCheck={this.handleCheck}\n                    onClick={onMove}\n                    needHighlight={!this.firstRender && !this.searched && !disableHighlight}\n                    itemRender={itemRender}\n                    draggable={sortable}\n                    onDragStart={this.handleItemDragStart}\n                    onDragOver={this.handleItemDragOver}\n                    onDragEnd={this.handleItemDragEnd}\n                    onDrop={this.handleItemDrop}\n                    dragPosition={dragPosition}\n                    dragValue={dragValue}\n                    dragOverValue={dragOverValue}\n                    panelPosition={position}\n                    {...others}\n                />\n            );\n        });\n    }\n\n    handleAllCheck(allChecked) {\n        const { position, onChange, filter } = this.props;\n        const { searchedValue } = this.state;\n\n        let newValue;\n        if (allChecked) {\n            if (searchedValue) {\n                newValue = this.enabledDatasource.filter(item => filter(searchedValue, item)).map(item => item.value);\n            } else {\n                newValue = this.enabledDatasource.map(item => item.value);\n            }\n        } else {\n            newValue = [];\n        }\n\n        onChange && onChange(position, newValue);\n    }\n\n    handleCheck(itemValue, checked) {\n        const { position, value, onChange } = this.props;\n\n        const newValue = [...value];\n        const index = value.indexOf(itemValue);\n        if (checked && index === -1) {\n            newValue.push(itemValue);\n        } else if (!checked && index > -1) {\n            newValue.splice(index, 1);\n        }\n\n        onChange && onChange(position, newValue);\n    }\n\n    handleSearch(searchedValue) {\n        this.setState({\n            searchedValue,\n        });\n        this.searched = true;\n\n        const { onSearch, position } = this.props;\n        onSearch(searchedValue, position);\n    }\n\n    handleItemDragStart(position, value) {\n        this.setState({\n            dragPosition: position,\n            dragValue: value,\n        });\n    }\n\n    handleItemDragOver(value) {\n        this.setState({\n            dragOverValue: value,\n        });\n    }\n\n    handleItemDragEnd() {\n        this.setState({\n            dragOverValue: null,\n        });\n    }\n\n    handleItemDrop(...args) {\n        this.setState({\n            dragOverValue: null,\n        });\n\n        this.props.onSort(...args);\n    }\n\n    renderHeader() {\n        const { title, prefix } = this.props;\n\n        return (\n            <div id={this.headerId} className={`${prefix}transfer-panel-header`}>\n                {title}\n            </div>\n        );\n    }\n\n    renderSearch() {\n        const { prefix, searchPlaceholder, locale, searchProps = {} } = this.props;\n        return (\n            <Search\n                aria-labelledby={this.headerId}\n                shape=\"simple\"\n                {...searchProps}\n                className={`${prefix}transfer-panel-search`}\n                placeholder={searchPlaceholder || locale.searchPlaceholder}\n                onChange={this.handleSearch}\n            />\n        );\n    }\n\n    renderList(dataSource) {\n        const { prefix, listClassName, listStyle, customerList, useVirtual } = this.props;\n        const newClassName = cx({\n            [`${prefix}transfer-panel-list`]: true,\n            [listClassName]: !!listClassName,\n        });\n\n        const customerPanel = customerList && customerList(this.props);\n        if (customerPanel) {\n            return (\n                <div className={newClassName} style={listStyle} ref={this.getListDOM}>\n                    {customerPanel}\n                </div>\n            );\n        }\n\n        if (!dataSource.length) {\n            return (\n                <div className={newClassName} style={listStyle}>\n                    {this.renderNotFoundContent()}\n                </div>\n            );\n        }\n\n        if (useVirtual) {\n            return (\n                <div className={newClassName} style={{ position: 'relative', ...listStyle }}>\n                    <VirtualList\n                        itemsRenderer={(items, ref) => (\n                            <Menu style={{ border: 'none' }} ref={ref}>\n                                {items}\n                            </Menu>\n                        )}\n                    >\n                        {this.getListData(dataSource, true)}\n                    </VirtualList>\n                </div>\n            );\n        }\n\n        return (\n            <Menu className={newClassName} style={listStyle} ref={this.getListDOM}>\n                {this.getListData(dataSource)}\n            </Menu>\n        );\n    }\n\n    renderNotFoundContent() {\n        const { prefix, notFoundContent } = this.props;\n\n        return (\n            <div className={`${prefix}transfer-panel-not-found-container`}>\n                <div className={`${prefix}transfer-panel-not-found`}>{notFoundContent}</div>\n            </div>\n        );\n    }\n\n    renderFooter() {\n        const { prefix, position, mode, disabled, locale, showCheckAll } = this.props;\n        if (mode === 'simple') {\n            const { onMoveAll } = this.props;\n            const classNames = cx({\n                [`${prefix}transfer-panel-move-all`]: true,\n                [`${prefix}disabled`]: disabled,\n            });\n            return (\n                <div className={`${prefix}transfer-panel-footer`}>\n                    <a className={classNames} onClick={onMoveAll.bind(this, position === 'left' ? 'right' : 'left')}>\n                        {locale.moveAll}\n                    </a>\n                </div>\n            );\n        }\n\n        const { value, showSearch, filter, dataSource } = this.props;\n        const { searchedValue } = this.state;\n        let totalCount = dataSource.length;\n        let _dataSource = dataSource;\n        const checkedCount = value.length;\n        let _checkedCount = checkedCount;\n        if (showSearch && searchedValue) {\n            _dataSource = dataSource.filter(item => filter(searchedValue, item));\n            totalCount = _dataSource.length;\n            _checkedCount = _dataSource.filter(item => value.includes(item.value)).length;\n        }\n        const totalEnabledCount = Math.min(totalCount, this.enabledDatasource.length);\n        const checked = checkedCount > 0 && checkedCount >= totalEnabledCount;\n        const indeterminate = checkedCount > 0 && _checkedCount >= 0 && _checkedCount < totalEnabledCount;\n        const items = totalCount > 1 ? locale.items : locale.item;\n        const countLabel = checkedCount === 0 ? `${totalCount} ${items}` : `${checkedCount}/${totalCount} ${items}`;\n\n        return (\n            <div className={`${prefix}transfer-panel-footer`}>\n                {showCheckAll && (\n                    <Checkbox\n                        disabled={disabled}\n                        checked={checked}\n                        indeterminate={indeterminate}\n                        onChange={this.handleAllCheck}\n                        aria-labelledby={this.footerId}\n                    />\n                )}\n                <span className={`${prefix}transfer-panel-count`} id={this.footerId}>\n                    {countLabel}\n                </span>\n            </div>\n        );\n    }\n\n    render() {\n        const { prefix, title, showSearch, filter, dataSource } = this.props;\n        const { searchedValue } = this.state;\n        let _dataSource = this.props.dataSource;\n        this.enabledDatasource = dataSource.filter(item => !item.disabled);\n        if (showSearch && searchedValue) {\n            _dataSource = dataSource.filter(item => filter(searchedValue, item));\n        }\n\n        return (\n            <div className={`${prefix}transfer-panel`}>\n                {title ? this.renderHeader() : null}\n                {showSearch ? this.renderSearch() : null}\n                {this.renderList(_dataSource)}\n                {this.renderFooter()}\n            </div>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/transfer/view/transfer.jsx",
        "compressed": "YES",
        "line_numbers": 584,
        "compressed_line_numbers": 173,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport Icon from '../../icon';\nimport Button from '../../button';\nimport zhCN from '../../locale/zh-cn';\nimport { func, obj } from '../../util';\nimport ConfigProvider from '../../config-provider';\nimport TransferPanel from '../view/transfer-panel';\n\n\n/**\n * Transfer\n */\n\n\n        /**\n         * 移动选项模式\n         */\n\n        /**\n         * 数据源\n         */\n\n        /**\n         * （用于受控）当前值\n         */\n\n        /**\n         * （用于非受控）初始值\n         */\n\n        /**\n         * 值发生改变的时候触发的回调函数\n         * @param {Array} value 右面板值\n         * @param {Array} data 右面板数据\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.leftValue 左面板值\n         * @param {Array} extra.leftData 左面板数据\n         * @param {Array} extra.movedValue 发生移动的值\n         * @param {Object} extra.movedData 发生移动的数据\n         * @param {String} extra.direction 移动的方向，值为'left'或'right'\n         */\n\n        /**\n         * Item 被选中的时候触发的回调函数\n         * @param {Array} sourceSelectedValue 源面板选中的 Item 列表\n         * @param {Array} targetSelectedValue 目标面板选中的 Item 列表\n         * @param {String} trigger 触发面板，值为'source'或'target'\n         */\n\n        /**\n         * 是否禁用\n         */\n\n        /**\n         * 是否禁用左侧面板\n         */\n\n        /**\n         * 是否禁用右侧面板\n         */\n\n        /**\n         * 列表项渲染函数\n         * @param {Object} data 数据\n         * @return {ReactNode} 列表项内容\n         */\n\n        /**\n         * 是否显示搜索框\n         */\n\n        /**\n         * 搜索框配置项，同 Search 组件 props\n         */\n\n        /**\n         * 自定义搜索函数\n         * @param {String} searchedValue 搜索的内容\n         * @param {Object} data 数据\n         * @return {Boolean} 是否匹配到\n         * @default 根据 label 属性匹配\n         */\n\n        /**\n         * 搜索框输入时触发的回调函数\n         * @param {String} searchedValue 搜索的内容\n         * @param {String} position 搜索面板的位置\n         */\n\n        /**\n         * 搜索框占位符\n         */\n\n        /**\n         * 列表为空显示内容\n         */\n\n        /**\n         * 左右面板标题\n         */\n\n        /**\n         * 向右向左移动按钮显示内容\n         * @default [<Icon type=\"arrow-right\" />, <Icon type=\"arrow-left\" />]\n         */\n\n        /**\n         * 左面板默认选中值\n         */\n\n        /**\n         * 右面板默认选中值\n         */\n\n        /**\n         * 左右面板列表自定义样式类名\n         */\n\n        /**\n         * 左右面板列表自定义样式对象\n         */\n\n        /**\n         * 是否允许拖拽排序\n         */\n\n        /**\n         * 拖拽排序时触发的回调函数\n         * @param {Array} value 排序后的值\n         * @param {String} position 拖拽的面板位置，值为：left 或 right\n         */\n\n        /**\n         * 自定义国际化文案对象\n         */\n\n        /**\n         * 请设置 id 以保证transfer的可访问性\n         */\n\n        /**\n         * 接收 children 自定义渲染列表\n         */\n\n        /**\n         * 是否开启虚拟滚动\n         */\n\n        /**\n         * 是否显示底部全选 checkbox\n         */\n\n\n            /* istanbul ignore next */\n\n\n            /* istanbul ignore next */\n\n\n        // inner state changed\n\n\n    // eslint-disable-next-line max-params\n\n\n            // eslint-disable-next-line callback-return\n\n\nexport default config(polyfill(Transfer));\n"
    }
}