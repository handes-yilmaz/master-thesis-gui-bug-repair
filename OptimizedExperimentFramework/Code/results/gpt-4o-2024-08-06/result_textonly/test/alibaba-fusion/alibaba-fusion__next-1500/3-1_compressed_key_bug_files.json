{
    "1": {
        "bug_file": "src/table/base/header.jsx",
        "compressed": "NO",
        "line_numbers": 195,
        "compressed_line_numbers": 195,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport FilterComponent from './filter';\nimport SortComponent from './sort';\nimport CellComponent from './cell';\nimport ResizeComponent from './resize';\n\nconst noop = () => {};\nexport default class Header extends React.Component {\n    static propTypes = {\n        children: PropTypes.any,\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        className: PropTypes.string,\n        component: PropTypes.string,\n        columns: PropTypes.array,\n        colGroup: PropTypes.object,\n        headerCellRef: PropTypes.func,\n        locale: PropTypes.object,\n        filterParams: PropTypes.object,\n        onFilter: PropTypes.func,\n        components: PropTypes.object,\n        sort: PropTypes.object,\n        sortIcons: PropTypes.object,\n        onSort: PropTypes.func,\n        onResizeChange: PropTypes.func,\n    };\n    static defaultProps = {\n        component: 'thead',\n        columns: [],\n        headerCellRef: noop,\n        onFilter: noop,\n        components: {},\n        onSort: noop,\n        onResizeChange: noop,\n    };\n\n    getCellRef = (i, j, cell) => {\n        this.props.headerCellRef(i, j, cell);\n    };\n\n    onSort = (dataIndex, order, sort) => {\n        this.props.onSort(dataIndex, order, sort);\n    };\n\n    render() {\n        /*eslint-disable no-unused-vars */\n        const {\n            prefix,\n            className,\n            children,\n            component: Tag,\n            colGroup,\n            columns,\n            locale,\n            filterParams,\n            onFilter,\n            components,\n            affixRef,\n            headerCellRef,\n            onSort,\n            sort,\n            sortIcons,\n            onResizeChange,\n            pure,\n            rtl,\n            ...others\n        } = this.props;\n\n        const {\n            Cell = CellComponent,\n            Filter = FilterComponent,\n            Sort = SortComponent,\n            Resize = ResizeComponent,\n        } = components;\n        const rowSpan = columns.length;\n\n        const header = columns.map((cols, index) => {\n            const col = cols.map((col, j) => {\n                /* eslint-disable no-unused-vars, prefer-const */\n                let {\n                    title,\n                    colSpan,\n                    sortable,\n                    resizable,\n                    dataIndex,\n                    filters,\n                    filterMode,\n                    filterMenuProps,\n                    filterProps,\n                    width,\n                    align,\n                    alignHeader,\n                    className,\n                    __normalized,\n                    lock,\n                    ...others\n                } = col;\n\n                className = classnames({\n                    [`${prefix}table-header-node`]: true,\n                    [`${prefix}table-header-resizable`]: resizable,\n                    [className]: className,\n                });\n                let attrs = {},\n                    sortElement,\n                    filterElement,\n                    resizeElement;\n\n                attrs.colSpan = colSpan;\n\n                // column.group doesn't have sort resize filter\n                if (!(col.children && col.children.length)) {\n                    if (sortable) {\n                        sortElement = (\n                            <Sort\n                                prefix={prefix}\n                                className={`${prefix}table-header-icon`}\n                                dataIndex={dataIndex}\n                                onSort={this.onSort}\n                                sortIcons={sortIcons}\n                                sort={sort}\n                                rtl={rtl}\n                                locale={locale}\n                            />\n                        );\n                    }\n                    if (resizable) {\n                        resizeElement = (\n                            <Resize\n                                prefix={prefix}\n                                rtl={rtl}\n                                dataIndex={dataIndex}\n                                onChange={onResizeChange}\n                            />\n                        );\n                    }\n\n                    if (filters) {\n                        filterElement = filters.length ? (\n                            <Filter\n                                dataIndex={dataIndex}\n                                className={`${prefix}table-header-icon`}\n                                filters={filters}\n                                prefix={prefix}\n                                locale={locale}\n                                rtl={rtl}\n                                filterParams={filterParams}\n                                filterMode={filterMode}\n                                filterMenuProps={filterMenuProps}\n                                filterProps={filterProps}\n                                onFilter={onFilter}\n                            />\n                        ) : null;\n                    }\n                    attrs.rowSpan = rowSpan - index;\n                }\n\n                if (+attrs.colSpan === 0) {\n                    return null;\n                }\n\n                return (\n                    <Cell\n                        {...others}\n                        {...attrs}\n                        key={j}\n                        prefix={prefix}\n                        pure={pure}\n                        rtl={rtl}\n                        cell={title}\n                        component=\"th\"\n                        align={alignHeader ? alignHeader : align}\n                        className={className}\n                        ref={this.getCellRef.bind(this, index, j)}\n                        type=\"header\"\n                    >\n                        {sortElement}\n                        {filterElement}\n                        {resizeElement}\n                    </Cell>\n                );\n            });\n            return <tr key={index}>{col}</tr>;\n        });\n\n        return (\n            <Tag className={className} {...others}>\n                {header}\n                {children}\n            </Tag>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/table/fixed/header.jsx",
        "compressed": "NO",
        "line_numbers": 37,
        "compressed_line_numbers": 37,
        "compressed_bug_file_content": "import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport HeaderComponent from '../base/header';\n\n/* eslint-disable react/prefer-stateless-function */\nexport default class FixedHeader extends React.Component {\n    static propTypes = {\n        children: PropTypes.any,\n        prefix: PropTypes.string,\n        className: PropTypes.string,\n        colGroup: PropTypes.any,\n    };\n\n    static contextTypes = {\n        getNode: PropTypes.func,\n        lockType: PropTypes.oneOf(['left', 'right']),\n    };\n\n    componentDidMount() {\n        this.context.getNode('header', findDOMNode(this));\n    }\n\n    render() {\n        const { prefix, className, colGroup, ...others } = this.props;\n        return (\n            <div className={className}>\n                <div className={`${prefix}table-header-inner`}>\n                    <table>\n                        {colGroup}\n                        <HeaderComponent {...others} prefix={prefix} />\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}"
    },
    "3": {
        "bug_file": "src/table/base/filter.jsx",
        "compressed": "NO",
        "line_numbers": 213,
        "compressed_line_numbers": 213,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Button from '../../button';\nimport Icon from '../../icon';\nimport { KEYCODE } from '../../util';\n\n// 共享状态的组件需要变成非受控组件\nexport default class Filter extends React.Component {\n    static propTypes = {\n        dataIndex: PropTypes.string,\n        filters: PropTypes.array,\n        filterMode: PropTypes.string,\n        filterParams: PropTypes.object,\n        filterMenuProps: PropTypes.object,\n        filterProps: PropTypes.object,\n        locale: PropTypes.object,\n        onFilter: PropTypes.func,\n        prefix: PropTypes.string,\n        rtl: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        onFilter: () => {},\n    };\n\n    constructor(props) {\n        super(props);\n        const filterParams = props.filterParams || {};\n        const filterConfig = filterParams[props.dataIndex] || {};\n        this.state = {\n            visible: filterConfig.visible || false,\n            selectedKeys: filterConfig.selectedKeys || [],\n        };\n        this._selectedKeys = [...this.state.selectedKeys];\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            nextProps.hasOwnProperty('filterParams') &&\n            typeof nextProps.filterParams !== 'undefined'\n        ) {\n            const dataIndex = nextProps.dataIndex || this.props.dataIndex;\n            const filterParams = nextProps.filterParams || {};\n            const filterConfig = filterParams[dataIndex] || {};\n            const selectedKeys = filterConfig.selectedKeys || [];\n            this.setState({\n                selectedKeys,\n            });\n            this._selectedKeys = [...selectedKeys];\n        }\n    }\n\n    filterKeydown = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.keyCode === KEYCODE.ENTER) {\n            this.setState({\n                visible: !this.state.visible,\n            });\n        }\n    };\n\n    onFilterVisible = visible => {\n        this.setState({\n            visible,\n        });\n\n        if (!visible) {\n            const selectedKeys = [...this._selectedKeys];\n\n            this.setState({\n                selectedKeys,\n            });\n        }\n    };\n\n    onFilterSelect = selectedKeys => {\n        this.setState({\n            visible: true,\n            selectedKeys,\n        });\n    };\n\n    onFilterConfirm = () => {\n        const selectedKeys = this.state.selectedKeys;\n        const filterParams = {},\n            { dataIndex } = this.props;\n\n        filterParams[dataIndex] = {\n            visible: false,\n            selectedKeys: selectedKeys,\n        };\n        this._selectedKeys = [...selectedKeys];\n        this.setState({\n            visible: false,\n        });\n        // 兼容之前的格式\n        this.props.onFilter(filterParams);\n    };\n\n    onFilterClear = () => {\n        const filterParams = {},\n            { dataIndex } = this.props;\n\n        filterParams[dataIndex] = {\n            visible: false,\n            selectedKeys: [],\n        };\n        this._selectedKeys = [];\n        this.setState({\n            selectedKeys: [],\n            visible: false,\n        });\n        // 兼容之前的格式\n        this.props.onFilter(filterParams);\n    };\n\n    render() {\n        const {\n            filters,\n            prefix,\n            locale,\n            className,\n            filterMode,\n            filterMenuProps,\n            filterProps,\n            rtl,\n        } = this.props;\n\n        const { visible, selectedKeys } = this.state;\n        const { subMenuSelectable, ...others } = filterMenuProps;\n\n        function renderMenuItem(item) {\n            return <Menu.Item key={item.value}>{item.label}</Menu.Item>;\n        }\n\n        function renderSubMenu(parent, children) {\n            return (\n                <Menu.SubMenu\n                    label={parent.label}\n                    key={parent.value}\n                    selectable={subMenuSelectable}\n                >\n                    {renderMenuContent(children)}\n                </Menu.SubMenu>\n            );\n        }\n\n        function renderMenuContent(list) {\n            return list.map(item => {\n                if (item.children) {\n                    return renderSubMenu(item, item.children);\n                } else {\n                    return renderMenuItem(item);\n                }\n            });\n        }\n\n        const content = renderMenuContent(filters),\n            footer = (\n                <div className={`${prefix}table-filter-footer`}>\n                    <Button type=\"primary\" onClick={this.onFilterConfirm}>\n                        {locale.ok}\n                    </Button>\n                    <Button onClick={this.onFilterClear}>{locale.reset}</Button>\n                </div>\n            );\n\n        const cls = classnames({\n            [`${prefix}table-filter`]: true,\n            [className]: className,\n        });\n\n        return (\n            <Dropdown\n                trigger={\n                    <span\n                        role=\"button\"\n                        aria-label={locale.filter}\n                        onKeyDown={this.filterKeydown}\n                        tabIndex=\"0\"\n                        className={cls}\n                    >\n                        <Icon type=\"filter\" size=\"small\" />\n                    </span>\n                }\n                triggerType=\"click\"\n                visible={visible}\n                autoFocus\n                rtl={rtl}\n                needAdjust={false}\n                container={node => node.parentNode}\n                onVisibleChange={this.onFilterVisible}\n                {...filterProps}\n            >\n                <Menu\n                    footer={footer}\n                    rtl={rtl}\n                    selectedKeys={selectedKeys}\n                    selectMode={filterMode}\n                    onSelect={this.onFilterSelect}\n                    {...others}\n                >\n                    {content}\n                </Menu>\n            </Dropdown>\n        );\n    }\n}"
    },
    "4": {
        "bug_file": "src/table/base/resize.jsx",
        "compressed": "NO",
        "line_numbers": 68,
        "compressed_line_numbers": 68,
        "compressed_bug_file_content": "import React from 'react';\nimport T from 'prop-types';\nimport { events, dom } from '../../util';\n\nclass Resize extends React.Component {\n    static propTypes = {\n        prefix: T.string,\n        rtl: T.bool,\n        onChange: T.func,\n        dataIndex: T.string,\n    };\n    static defaultProps = {\n        onChange: () => {},\n    };\n    componentWillUnmount() {\n        this.destory();\n    }\n    onMouseDown = e => {\n        this.lastPageX = e.pageX;\n        events.on(document, 'mousemove', this.onMouseMove);\n        events.on(document, 'mouseup', this.onMouseUp);\n        this.unSelect();\n    };\n    onMouseMove = e => {\n        const pageX = e.pageX;\n        let changedPageX = pageX - this.lastPageX;\n\n        if (this.props.rtl) {\n            changedPageX = -changedPageX;\n        }\n\n        this.props.onChange(this.props.dataIndex, changedPageX);\n        this.lastPageX = pageX;\n    };\n    onMouseUp = () => {\n        this.destory();\n    };\n    destory() {\n        events.off(document, 'mousemove', this.onMouseMove);\n        events.off(document, 'mouseup', this.onMouseMove);\n        this.select();\n    }\n    unSelect() {\n        dom.setStyle(document.body, {\n            userSelect: 'none',\n            cursor: 'ew-resize',\n        });\n        document.body.setAttribute('unselectable', 'on');\n    }\n    select() {\n        dom.setStyle(document.body, {\n            userSelect: '',\n            cursor: '',\n        });\n        document.body.removeAttribute('unselectable');\n    }\n    render() {\n        const { prefix } = this.props;\n        return (\n            <a\n                className={`${prefix}table-resize-handler`}\n                onMouseDown={this.onMouseDown}\n            />\n        );\n    }\n}\n\nexport default Resize;"
    }
}