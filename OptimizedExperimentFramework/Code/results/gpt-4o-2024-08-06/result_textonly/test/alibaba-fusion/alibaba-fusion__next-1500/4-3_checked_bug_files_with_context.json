{
    "src/table/base/header.jsx": [
        "import React from 'react';",
        "import PropTypes from 'prop-types';",
        "import classnames from 'classnames';",
        "import FilterComponent from './filter';",
        "import SortComponent from './sort';",
        "import CellComponent from './cell';",
        "import ResizeComponent from './resize';",
        "",
        "const noop = () => {};",
        "export default class Header extends React.Component {",
        "    static propTypes = {",
        "        children: PropTypes.any,",
        "        prefix: PropTypes.string,",
        "        pure: PropTypes.bool,",
        "        className: PropTypes.string,",
        "        component: PropTypes.string,",
        "        columns: PropTypes.array,",
        "        colGroup: PropTypes.object,",
        "        headerCellRef: PropTypes.func,",
        "        locale: PropTypes.object,",
        "        filterParams: PropTypes.object,",
        "        onFilter: PropTypes.func,",
        "        components: PropTypes.object,",
        "        sort: PropTypes.object,",
        "        sortIcons: PropTypes.object,",
        "        onSort: PropTypes.func,",
        "        onResizeChange: PropTypes.func,",
        "    };",
        "    static defaultProps = {",
        "        component: 'thead',",
        "        columns: [],",
        "        headerCellRef: noop,",
        "        onFilter: noop,",
        "        components: {},",
        "        onSort: noop,",
        "        onResizeChange: noop,",
        "    };",
        "",
        "    getCellRef = (i, j, cell) => {",
        "        this.props.headerCellRef(i, j, cell);",
        "    };",
        "",
        "    onSort = (dataIndex, order, sort) => {",
        "        this.props.onSort(dataIndex, order, sort);",
        "    };",
        "",
        "    render() {",
        "        /*eslint-disable no-unused-vars */",
        "        const {",
        "            prefix,",
        "            className,",
        "            children,",
        "            component: Tag,",
        "            colGroup,",
        "            columns,",
        "            locale,",
        "            filterParams,",
        "            onFilter,",
        "            components,",
        "            affixRef,",
        "            headerCellRef,",
        "            onSort,",
        "            sort,",
        "            sortIcons,",
        "            onResizeChange,",
        "            pure,",
        "            rtl,",
        "            ...others",
        "        } = this.props;",
        "",
        "        const {",
        "            Cell = CellComponent,",
        "            Filter = FilterComponent,",
        "            Sort = SortComponent,",
        "            Resize = ResizeComponent,",
        "        } = components;",
        "        const rowSpan = columns.length;",
        "",
        "        const header = columns.map((cols, index) => {",
        "            const col = cols.map((col, j) => {",
        "                /* eslint-disable no-unused-vars, prefer-const */",
        "                let {",
        "                    title,",
        "                    colSpan,",
        "                    sortable,",
        "                    resizable,",
        "                    dataIndex,",
        "                    filters,",
        "                    filterMode,",
        "                    filterMenuProps,",
        "                    filterProps,",
        "                    width,",
        "                    align,",
        "                    alignHeader,",
        "                    className,",
        "                    __normalized,",
        "                    lock,",
        "                    ...others",
        "                } = col;",
        "",
        "                className = classnames({",
        "                    [`${prefix}table-header-node`]: true,",
        "                    [`${prefix}table-header-resizable`]: resizable,",
        "                    [className]: className,",
        "                });",
        "                let attrs = {},",
        "                    sortElement,",
        "                    filterElement,",
        "                    resizeElement;",
        "",
        "                attrs.colSpan = colSpan;",
        "",
        "                // column.group doesn't have sort resize filter",
        "                if (!(col.children && col.children.length)) {",
        "                    if (sortable) {",
        "                        sortElement = (",
        "                            <Sort",
        "                                prefix={prefix}",
        "                                className={`${prefix}table-header-icon`}",
        "                                dataIndex={dataIndex}",
        "                                onSort={this.onSort}",
        "                                sortIcons={sortIcons}",
        "                                sort={sort}",
        "                                rtl={rtl}",
        "                                locale={locale}",
        "                            />",
        "                        );",
        "                    }",
        "                    if (resizable) {",
        "                        resizeElement = (",
        "                            <Resize",
        "                                prefix={prefix}",
        "                                rtl={rtl}",
        "                                dataIndex={dataIndex}",
        "                                onChange={onResizeChange}",
        "                            />",
        "                        );",
        "                    }",
        "",
        "                    if (filters) {",
        "                        filterElement = filters.length ? (",
        "                            <Filter",
        "                                dataIndex={dataIndex}",
        "                                className={`${prefix}table-header-icon`}",
        "                                filters={filters}",
        "                                prefix={prefix}",
        "                                locale={locale}",
        "                                rtl={rtl}",
        "                                filterParams={filterParams}",
        "                                filterMode={filterMode}",
        "                                filterMenuProps={filterMenuProps}",
        "                                filterProps={filterProps}",
        "                                onFilter={onFilter}",
        "                            />",
        "                        ) : null;",
        "                    }",
        "                    attrs.rowSpan = rowSpan - index;",
        "                }",
        "",
        "                if (+attrs.colSpan === 0) {",
        "                    return null;",
        "                }",
        "",
        "                return (",
        "                    <Cell",
        "                        {...others}",
        "                        {...attrs}",
        "                        key={j}",
        "                        prefix={prefix}",
        "                        pure={pure}",
        "                        rtl={rtl}",
        "                        cell={title}",
        "                        component=\"th\"",
        "                        align={alignHeader ? alignHeader : align}",
        "                        className={className}",
        "                        ref={this.getCellRef.bind(this, index, j)}",
        "                        type=\"header\"",
        "                    >",
        "                        {sortElement}",
        "                        {filterElement}",
        "                        {resizeElement}",
        "                    </Cell>",
        "                );",
        "            });",
        "            return <tr key={index}>{col}</tr>;",
        "        });",
        "",
        "        return (",
        "            <Tag className={className} {...others}>",
        "                {header}",
        "                {children}",
        "            </Tag>",
        "        );",
        "    }",
        "}"
    ],
    "src/table/fixed/header.jsx": [
        "import React from 'react';",
        "import { findDOMNode } from 'react-dom';",
        "import PropTypes from 'prop-types';",
        "import HeaderComponent from '../base/header';",
        "",
        "/* eslint-disable react/prefer-stateless-function */",
        "export default class FixedHeader extends React.Component {",
        "    static propTypes = {",
        "        children: PropTypes.any,",
        "        prefix: PropTypes.string,",
        "        className: PropTypes.string,",
        "        colGroup: PropTypes.any,",
        "    };",
        "",
        "    static contextTypes = {",
        "        getNode: PropTypes.func,",
        "        lockType: PropTypes.oneOf(['left', 'right']),",
        "    };",
        "",
        "    componentDidMount() {",
        "        this.context.getNode('header', findDOMNode(this));",
        "    }",
        "",
        "    render() {",
        "        const { prefix, className, colGroup, ...others } = this.props;",
        "        return (",
        "            <div className={className}>",
        "                <div className={`${prefix}table-header-inner`}>",
        "                    <table>",
        "                        {colGroup}",
        "                        <HeaderComponent {...others} prefix={prefix} />",
        "                    </table>",
        "                </div>",
        "            </div>",
        "        );",
        "    }",
        "}"
    ],
    "src/table/base/filter.jsx": [
        "import React from 'react';",
        "import PropTypes from 'prop-types';",
        "import classnames from 'classnames';",
        "import Dropdown from '../../dropdown';",
        "import Menu from '../../menu';",
        "import Button from '../../button';",
        "import Icon from '../../icon';",
        "import { KEYCODE } from '../../util';",
        "",
        "// 共享状态的组件需要变成非受控组件",
        "export default class Filter extends React.Component {",
        "    static propTypes = {",
        "        dataIndex: PropTypes.string,",
        "        filters: PropTypes.array,",
        "        filterMode: PropTypes.string,",
        "        filterParams: PropTypes.object,",
        "        filterMenuProps: PropTypes.object,",
        "        filterProps: PropTypes.object,",
        "        locale: PropTypes.object,",
        "        onFilter: PropTypes.func,",
        "        prefix: PropTypes.string,",
        "        rtl: PropTypes.bool,",
        "    };",
        "",
        "    static defaultProps = {",
        "        onFilter: () => {},",
        "    };",
        "",
        "    constructor(props) {",
        "        super(props);",
        "        const filterParams = props.filterParams || {};",
        "        const filterConfig = filterParams[props.dataIndex] || {};",
        "        this.state = {",
        "            visible: filterConfig.visible || false,",
        "            selectedKeys: filterConfig.selectedKeys || [],",
        "        };",
        "        this._selectedKeys = [...this.state.selectedKeys];",
        "    }",
        "",
        "    componentWillReceiveProps(nextProps) {",
        "        if (",
        "            nextProps.hasOwnProperty('filterParams') &&",
        "            typeof nextProps.filterParams !== 'undefined'",
        "        ) {",
        "            const dataIndex = nextProps.dataIndex || this.props.dataIndex;",
        "            const filterParams = nextProps.filterParams || {};",
        "            const filterConfig = filterParams[dataIndex] || {};",
        "            const selectedKeys = filterConfig.selectedKeys || [];",
        "            this.setState({",
        "                selectedKeys,",
        "            });",
        "            this._selectedKeys = [...selectedKeys];",
        "        }",
        "    }",
        "",
        "    filterKeydown = e => {",
        "        e.preventDefault();",
        "        e.stopPropagation();",
        "",
        "        if (e.keyCode === KEYCODE.ENTER) {",
        "            this.setState({",
        "                visible: !this.state.visible,",
        "            });",
        "        }",
        "    };",
        "",
        "    onFilterVisible = visible => {",
        "        this.setState({",
        "            visible,",
        "        });",
        "",
        "        if (!visible) {",
        "            const selectedKeys = [...this._selectedKeys];",
        "",
        "            this.setState({",
        "                selectedKeys,",
        "            });",
        "        }",
        "    };",
        "",
        "    onFilterSelect = selectedKeys => {",
        "        this.setState({",
        "            visible: true,",
        "            selectedKeys,",
        "        });",
        "    };",
        "",
        "    onFilterConfirm = () => {",
        "        const selectedKeys = this.state.selectedKeys;",
        "        const filterParams = {},",
        "            { dataIndex } = this.props;",
        "",
        "        filterParams[dataIndex] = {",
        "            visible: false,",
        "            selectedKeys: selectedKeys,",
        "        };",
        "        this._selectedKeys = [...selectedKeys];",
        "        this.setState({",
        "            visible: false,",
        "        });",
        "        // 兼容之前的格式",
        "        this.props.onFilter(filterParams);",
        "    };",
        "",
        "    onFilterClear = () => {",
        "        const filterParams = {},",
        "            { dataIndex } = this.props;",
        "",
        "        filterParams[dataIndex] = {",
        "            visible: false,",
        "            selectedKeys: [],",
        "        };",
        "        this._selectedKeys = [];",
        "        this.setState({",
        "            selectedKeys: [],",
        "            visible: false,",
        "        });",
        "        // 兼容之前的格式",
        "        this.props.onFilter(filterParams);",
        "    };",
        "",
        "    render() {",
        "        const {",
        "            filters,",
        "            prefix,",
        "            locale,",
        "            className,",
        "            filterMode,",
        "            filterMenuProps,",
        "            filterProps,",
        "            rtl,",
        "        } = this.props;",
        "",
        "        const { visible, selectedKeys } = this.state;",
        "        const { subMenuSelectable, ...others } = filterMenuProps;",
        "",
        "        function renderMenuItem(item) {",
        "            return <Menu.Item key={item.value}>{item.label}</Menu.Item>;",
        "        }",
        "",
        "        function renderSubMenu(parent, children) {",
        "            return (",
        "                <Menu.SubMenu",
        "                    label={parent.label}",
        "                    key={parent.value}",
        "                    selectable={subMenuSelectable}",
        "                >",
        "                    {renderMenuContent(children)}",
        "                </Menu.SubMenu>",
        "            );",
        "        }",
        "",
        "        function renderMenuContent(list) {",
        "            return list.map(item => {",
        "                if (item.children) {",
        "                    return renderSubMenu(item, item.children);",
        "                } else {",
        "                    return renderMenuItem(item);",
        "                }",
        "            });",
        "        }",
        "",
        "        const content = renderMenuContent(filters),",
        "            footer = (",
        "                <div className={`${prefix}table-filter-footer`}>",
        "                    <Button type=\"primary\" onClick={this.onFilterConfirm}>",
        "                        {locale.ok}",
        "                    </Button>",
        "                    <Button onClick={this.onFilterClear}>{locale.reset}</Button>",
        "                </div>",
        "            );",
        "",
        "        const cls = classnames({",
        "            [`${prefix}table-filter`]: true,",
        "            [className]: className,",
        "        });",
        "",
        "        return (",
        "            <Dropdown",
        "                trigger={",
        "                    <span",
        "                        role=\"button\"",
        "                        aria-label={locale.filter}",
        "                        onKeyDown={this.filterKeydown}",
        "                        tabIndex=\"0\"",
        "                        className={cls}",
        "                    >",
        "                        <Icon type=\"filter\" size=\"small\" />",
        "                    </span>",
        "                }",
        "                triggerType=\"click\"",
        "                visible={visible}",
        "                autoFocus",
        "                rtl={rtl}",
        "                needAdjust={false}",
        "                container={node => node.parentNode}",
        "                onVisibleChange={this.onFilterVisible}",
        "                {...filterProps}",
        "            >",
        "                <Menu",
        "                    footer={footer}",
        "                    rtl={rtl}",
        "                    selectedKeys={selectedKeys}",
        "                    selectMode={filterMode}",
        "                    onSelect={this.onFilterSelect}",
        "                    {...others}",
        "                >",
        "                    {content}",
        "                </Menu>",
        "            </Dropdown>",
        "        );",
        "    }",
        "}"
    ],
    "src/table/base/resize.jsx": [
        "import React from 'react';",
        "import T from 'prop-types';",
        "import { events, dom } from '../../util';",
        "",
        "class Resize extends React.Component {",
        "    static propTypes = {",
        "        prefix: T.string,",
        "        rtl: T.bool,",
        "        onChange: T.func,",
        "        dataIndex: T.string,",
        "    };",
        "    static defaultProps = {",
        "        onChange: () => {},",
        "    };",
        "    componentWillUnmount() {",
        "        this.destory();",
        "    }",
        "    onMouseDown = e => {",
        "        this.lastPageX = e.pageX;",
        "        events.on(document, 'mousemove', this.onMouseMove);",
        "        events.on(document, 'mouseup', this.onMouseUp);",
        "        this.unSelect();",
        "    };",
        "    onMouseMove = e => {",
        "        const pageX = e.pageX;",
        "        let changedPageX = pageX - this.lastPageX;",
        "",
        "        if (this.props.rtl) {",
        "            changedPageX = -changedPageX;",
        "        }",
        "",
        "        this.props.onChange(this.props.dataIndex, changedPageX);",
        "        this.lastPageX = pageX;",
        "    };",
        "    onMouseUp = () => {",
        "        this.destory();",
        "    };",
        "    destory() {",
        "        events.off(document, 'mousemove', this.onMouseMove);",
        "        events.off(document, 'mouseup', this.onMouseMove);",
        "        this.select();",
        "    }",
        "    unSelect() {",
        "        dom.setStyle(document.body, {",
        "            userSelect: 'none',",
        "            cursor: 'ew-resize',",
        "        });",
        "        document.body.setAttribute('unselectable', 'on');",
        "    }",
        "    select() {",
        "        dom.setStyle(document.body, {",
        "            userSelect: '',",
        "            cursor: '',",
        "        });",
        "        document.body.removeAttribute('unselectable');",
        "    }",
        "    render() {",
        "        const { prefix } = this.props;",
        "        return (",
        "            <a",
        "                className={`${prefix}table-resize-handler`}",
        "                onMouseDown={this.onMouseDown}",
        "            />",
        "        );",
        "    }",
        "}",
        "",
        "export default Resize;"
    ]
}