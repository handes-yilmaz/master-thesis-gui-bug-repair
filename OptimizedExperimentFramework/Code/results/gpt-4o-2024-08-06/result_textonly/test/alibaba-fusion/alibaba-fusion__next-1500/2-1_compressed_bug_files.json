{
    "1": {
        "bug_file": "src/table/base/header.jsx",
        "compressed": "NO",
        "line_numbers": 195,
        "compressed_line_numbers": 195,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport FilterComponent from './filter';\nimport SortComponent from './sort';\nimport CellComponent from './cell';\nimport ResizeComponent from './resize';\n\nconst noop = () => {};\nexport default class Header extends React.Component {\n    static propTypes = {\n        children: PropTypes.any,\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        className: PropTypes.string,\n        component: PropTypes.string,\n        columns: PropTypes.array,\n        colGroup: PropTypes.object,\n        headerCellRef: PropTypes.func,\n        locale: PropTypes.object,\n        filterParams: PropTypes.object,\n        onFilter: PropTypes.func,\n        components: PropTypes.object,\n        sort: PropTypes.object,\n        sortIcons: PropTypes.object,\n        onSort: PropTypes.func,\n        onResizeChange: PropTypes.func,\n    };\n    static defaultProps = {\n        component: 'thead',\n        columns: [],\n        headerCellRef: noop,\n        onFilter: noop,\n        components: {},\n        onSort: noop,\n        onResizeChange: noop,\n    };\n\n    getCellRef = (i, j, cell) => {\n        this.props.headerCellRef(i, j, cell);\n    };\n\n    onSort = (dataIndex, order, sort) => {\n        this.props.onSort(dataIndex, order, sort);\n    };\n\n    render() {\n        /*eslint-disable no-unused-vars */\n        const {\n            prefix,\n            className,\n            children,\n            component: Tag,\n            colGroup,\n            columns,\n            locale,\n            filterParams,\n            onFilter,\n            components,\n            affixRef,\n            headerCellRef,\n            onSort,\n            sort,\n            sortIcons,\n            onResizeChange,\n            pure,\n            rtl,\n            ...others\n        } = this.props;\n\n        const {\n            Cell = CellComponent,\n            Filter = FilterComponent,\n            Sort = SortComponent,\n            Resize = ResizeComponent,\n        } = components;\n        const rowSpan = columns.length;\n\n        const header = columns.map((cols, index) => {\n            const col = cols.map((col, j) => {\n                /* eslint-disable no-unused-vars, prefer-const */\n                let {\n                    title,\n                    colSpan,\n                    sortable,\n                    resizable,\n                    dataIndex,\n                    filters,\n                    filterMode,\n                    filterMenuProps,\n                    filterProps,\n                    width,\n                    align,\n                    alignHeader,\n                    className,\n                    __normalized,\n                    lock,\n                    ...others\n                } = col;\n\n                className = classnames({\n                    [`${prefix}table-header-node`]: true,\n                    [`${prefix}table-header-resizable`]: resizable,\n                    [className]: className,\n                });\n                let attrs = {},\n                    sortElement,\n                    filterElement,\n                    resizeElement;\n\n                attrs.colSpan = colSpan;\n\n                // column.group doesn't have sort resize filter\n                if (!(col.children && col.children.length)) {\n                    if (sortable) {\n                        sortElement = (\n                            <Sort\n                                prefix={prefix}\n                                className={`${prefix}table-header-icon`}\n                                dataIndex={dataIndex}\n                                onSort={this.onSort}\n                                sortIcons={sortIcons}\n                                sort={sort}\n                                rtl={rtl}\n                                locale={locale}\n                            />\n                        );\n                    }\n                    if (resizable) {\n                        resizeElement = (\n                            <Resize\n                                prefix={prefix}\n                                rtl={rtl}\n                                dataIndex={dataIndex}\n                                onChange={onResizeChange}\n                            />\n                        );\n                    }\n\n                    if (filters) {\n                        filterElement = filters.length ? (\n                            <Filter\n                                dataIndex={dataIndex}\n                                className={`${prefix}table-header-icon`}\n                                filters={filters}\n                                prefix={prefix}\n                                locale={locale}\n                                rtl={rtl}\n                                filterParams={filterParams}\n                                filterMode={filterMode}\n                                filterMenuProps={filterMenuProps}\n                                filterProps={filterProps}\n                                onFilter={onFilter}\n                            />\n                        ) : null;\n                    }\n                    attrs.rowSpan = rowSpan - index;\n                }\n\n                if (+attrs.colSpan === 0) {\n                    return null;\n                }\n\n                return (\n                    <Cell\n                        {...others}\n                        {...attrs}\n                        key={j}\n                        prefix={prefix}\n                        pure={pure}\n                        rtl={rtl}\n                        cell={title}\n                        component=\"th\"\n                        align={alignHeader ? alignHeader : align}\n                        className={className}\n                        ref={this.getCellRef.bind(this, index, j)}\n                        type=\"header\"\n                    >\n                        {sortElement}\n                        {filterElement}\n                        {resizeElement}\n                    </Cell>\n                );\n            });\n            return <tr key={index}>{col}</tr>;\n        });\n\n        return (\n            <Tag className={className} {...others}>\n                {header}\n                {children}\n            </Tag>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/table/fixed/header.jsx",
        "compressed": "NO",
        "line_numbers": 37,
        "compressed_line_numbers": 37,
        "compressed_bug_file_content": "import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport HeaderComponent from '../base/header';\n\n/* eslint-disable react/prefer-stateless-function */\nexport default class FixedHeader extends React.Component {\n    static propTypes = {\n        children: PropTypes.any,\n        prefix: PropTypes.string,\n        className: PropTypes.string,\n        colGroup: PropTypes.any,\n    };\n\n    static contextTypes = {\n        getNode: PropTypes.func,\n        lockType: PropTypes.oneOf(['left', 'right']),\n    };\n\n    componentDidMount() {\n        this.context.getNode('header', findDOMNode(this));\n    }\n\n    render() {\n        const { prefix, className, colGroup, ...others } = this.props;\n        return (\n            <div className={className}>\n                <div className={`${prefix}table-header-inner`}>\n                    <table>\n                        {colGroup}\n                        <HeaderComponent {...others} prefix={prefix} />\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}"
    },
    "3": {
        "bug_file": "src/table/sticky/header.jsx",
        "compressed": "NO",
        "line_numbers": 43,
        "compressed_line_numbers": 43,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Affix from '../../affix';\n\n/* eslint-disable react/prefer-stateless-function*/\nexport default class StickHeader extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n    };\n    static contextTypes = {\n        Header: PropTypes.any,\n        offsetTop: PropTypes.number,\n        affixProps: PropTypes.object,\n    };\n\n    getAffixRef = ref => {\n        this.props.affixRef && this.props.affixRef(ref);\n    };\n\n    render() {\n        const { prefix } = this.props;\n        const { Header, offsetTop, affixProps } = this.context;\n\n        const newAffixProps = affixProps || {};\n        const { className, ...others } = newAffixProps;\n        const cls = classnames({\n            [`${prefix}table-affix`]: true,\n            className,\n        });\n\n        return (\n            <Affix\n                ref={this.getAffixRef}\n                {...others}\n                className={cls}\n                offsetTop={offsetTop}\n            >\n                <Header {...this.props} />\n            </Affix>\n        );\n    }\n}"
    },
    "4": {
        "bug_file": "src/table/base/filter.jsx",
        "compressed": "NO",
        "line_numbers": 213,
        "compressed_line_numbers": 213,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Button from '../../button';\nimport Icon from '../../icon';\nimport { KEYCODE } from '../../util';\n\n// 共享状态的组件需要变成非受控组件\nexport default class Filter extends React.Component {\n    static propTypes = {\n        dataIndex: PropTypes.string,\n        filters: PropTypes.array,\n        filterMode: PropTypes.string,\n        filterParams: PropTypes.object,\n        filterMenuProps: PropTypes.object,\n        filterProps: PropTypes.object,\n        locale: PropTypes.object,\n        onFilter: PropTypes.func,\n        prefix: PropTypes.string,\n        rtl: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        onFilter: () => {},\n    };\n\n    constructor(props) {\n        super(props);\n        const filterParams = props.filterParams || {};\n        const filterConfig = filterParams[props.dataIndex] || {};\n        this.state = {\n            visible: filterConfig.visible || false,\n            selectedKeys: filterConfig.selectedKeys || [],\n        };\n        this._selectedKeys = [...this.state.selectedKeys];\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            nextProps.hasOwnProperty('filterParams') &&\n            typeof nextProps.filterParams !== 'undefined'\n        ) {\n            const dataIndex = nextProps.dataIndex || this.props.dataIndex;\n            const filterParams = nextProps.filterParams || {};\n            const filterConfig = filterParams[dataIndex] || {};\n            const selectedKeys = filterConfig.selectedKeys || [];\n            this.setState({\n                selectedKeys,\n            });\n            this._selectedKeys = [...selectedKeys];\n        }\n    }\n\n    filterKeydown = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.keyCode === KEYCODE.ENTER) {\n            this.setState({\n                visible: !this.state.visible,\n            });\n        }\n    };\n\n    onFilterVisible = visible => {\n        this.setState({\n            visible,\n        });\n\n        if (!visible) {\n            const selectedKeys = [...this._selectedKeys];\n\n            this.setState({\n                selectedKeys,\n            });\n        }\n    };\n\n    onFilterSelect = selectedKeys => {\n        this.setState({\n            visible: true,\n            selectedKeys,\n        });\n    };\n\n    onFilterConfirm = () => {\n        const selectedKeys = this.state.selectedKeys;\n        const filterParams = {},\n            { dataIndex } = this.props;\n\n        filterParams[dataIndex] = {\n            visible: false,\n            selectedKeys: selectedKeys,\n        };\n        this._selectedKeys = [...selectedKeys];\n        this.setState({\n            visible: false,\n        });\n        // 兼容之前的格式\n        this.props.onFilter(filterParams);\n    };\n\n    onFilterClear = () => {\n        const filterParams = {},\n            { dataIndex } = this.props;\n\n        filterParams[dataIndex] = {\n            visible: false,\n            selectedKeys: [],\n        };\n        this._selectedKeys = [];\n        this.setState({\n            selectedKeys: [],\n            visible: false,\n        });\n        // 兼容之前的格式\n        this.props.onFilter(filterParams);\n    };\n\n    render() {\n        const {\n            filters,\n            prefix,\n            locale,\n            className,\n            filterMode,\n            filterMenuProps,\n            filterProps,\n            rtl,\n        } = this.props;\n\n        const { visible, selectedKeys } = this.state;\n        const { subMenuSelectable, ...others } = filterMenuProps;\n\n        function renderMenuItem(item) {\n            return <Menu.Item key={item.value}>{item.label}</Menu.Item>;\n        }\n\n        function renderSubMenu(parent, children) {\n            return (\n                <Menu.SubMenu\n                    label={parent.label}\n                    key={parent.value}\n                    selectable={subMenuSelectable}\n                >\n                    {renderMenuContent(children)}\n                </Menu.SubMenu>\n            );\n        }\n\n        function renderMenuContent(list) {\n            return list.map(item => {\n                if (item.children) {\n                    return renderSubMenu(item, item.children);\n                } else {\n                    return renderMenuItem(item);\n                }\n            });\n        }\n\n        const content = renderMenuContent(filters),\n            footer = (\n                <div className={`${prefix}table-filter-footer`}>\n                    <Button type=\"primary\" onClick={this.onFilterConfirm}>\n                        {locale.ok}\n                    </Button>\n                    <Button onClick={this.onFilterClear}>{locale.reset}</Button>\n                </div>\n            );\n\n        const cls = classnames({\n            [`${prefix}table-filter`]: true,\n            [className]: className,\n        });\n\n        return (\n            <Dropdown\n                trigger={\n                    <span\n                        role=\"button\"\n                        aria-label={locale.filter}\n                        onKeyDown={this.filterKeydown}\n                        tabIndex=\"0\"\n                        className={cls}\n                    >\n                        <Icon type=\"filter\" size=\"small\" />\n                    </span>\n                }\n                triggerType=\"click\"\n                visible={visible}\n                autoFocus\n                rtl={rtl}\n                needAdjust={false}\n                container={node => node.parentNode}\n                onVisibleChange={this.onFilterVisible}\n                {...filterProps}\n            >\n                <Menu\n                    footer={footer}\n                    rtl={rtl}\n                    selectedKeys={selectedKeys}\n                    selectMode={filterMode}\n                    onSelect={this.onFilterSelect}\n                    {...others}\n                >\n                    {content}\n                </Menu>\n            </Dropdown>\n        );\n    }\n}"
    },
    "5": {
        "bug_file": "src/table/base/resize.jsx",
        "compressed": "NO",
        "line_numbers": 68,
        "compressed_line_numbers": 68,
        "compressed_bug_file_content": "import React from 'react';\nimport T from 'prop-types';\nimport { events, dom } from '../../util';\n\nclass Resize extends React.Component {\n    static propTypes = {\n        prefix: T.string,\n        rtl: T.bool,\n        onChange: T.func,\n        dataIndex: T.string,\n    };\n    static defaultProps = {\n        onChange: () => {},\n    };\n    componentWillUnmount() {\n        this.destory();\n    }\n    onMouseDown = e => {\n        this.lastPageX = e.pageX;\n        events.on(document, 'mousemove', this.onMouseMove);\n        events.on(document, 'mouseup', this.onMouseUp);\n        this.unSelect();\n    };\n    onMouseMove = e => {\n        const pageX = e.pageX;\n        let changedPageX = pageX - this.lastPageX;\n\n        if (this.props.rtl) {\n            changedPageX = -changedPageX;\n        }\n\n        this.props.onChange(this.props.dataIndex, changedPageX);\n        this.lastPageX = pageX;\n    };\n    onMouseUp = () => {\n        this.destory();\n    };\n    destory() {\n        events.off(document, 'mousemove', this.onMouseMove);\n        events.off(document, 'mouseup', this.onMouseMove);\n        this.select();\n    }\n    unSelect() {\n        dom.setStyle(document.body, {\n            userSelect: 'none',\n            cursor: 'ew-resize',\n        });\n        document.body.setAttribute('unselectable', 'on');\n    }\n    select() {\n        dom.setStyle(document.body, {\n            userSelect: '',\n            cursor: '',\n        });\n        document.body.removeAttribute('unselectable');\n    }\n    render() {\n        const { prefix } = this.props;\n        return (\n            <a\n                className={`${prefix}table-resize-handler`}\n                onMouseDown={this.onMouseDown}\n            />\n        );\n    }\n}\n\nexport default Resize;"
    },
    "6": {
        "bug_file": "src/table/util.js",
        "compressed": "NO",
        "line_numbers": 45,
        "compressed_line_numbers": 45,
        "compressed_bug_file_content": "const blackList = [\n    'defaultProps',\n    'propTypes',\n    'contextTypes',\n    'childContextTypes',\n    'displayName',\n];\n\nexport const statics = (Target, Component) => {\n    Object.keys(Component).forEach(property => {\n        if (blackList.indexOf(property) === -1) {\n            Target[property] = Component[property];\n        }\n    });\n};\n\nexport const fetchDataByPath = (object, path) => {\n    if (!object || !path) {\n        return false;\n    }\n    path = path.toString();\n    const field = path.split('.');\n    let val, key;\n    if (field.length) {\n        key = field[0];\n        // lists[1].name\n        if (key.indexOf('[') >= 0) {\n            key = key.match(/(.*)\\[(.*)\\]/);\n            if (key) {\n                val = object[key[1]][key[2]];\n            }\n        } else {\n            val = object[field[0]];\n        }\n        if (val) {\n            for (let colIndex = 1; colIndex < field.length; colIndex++) {\n                val = val[field[colIndex]];\n                if (typeof val === 'undefined') {\n                    break;\n                }\n            }\n        }\n    }\n    return val;\n};"
    },
    "7": {
        "bug_file": "src/table/style.js",
        "compressed": "NO",
        "line_numbers": 8,
        "compressed_line_numbers": 8,
        "compressed_bug_file_content": "import '../icon/style.js';\nimport '../checkbox/style.js';\nimport '../radio/style.js';\nimport '../menu/style.js';\nimport '../button/style.js';\nimport '../dropdown/style.js';\nimport '../loading/style.js';\nimport './main.scss';"
    },
    "8": {
        "bug_file": "src/table/main.scss",
        "compressed": "NO",
        "line_numbers": 424,
        "compressed_line_numbers": 424,
        "compressed_bug_file_content": "@charset \"UTF-8\";\n@import \"../core/index-noreset.scss\";\n@import \"scss/variable\";\n@import \"scss/mixin\";\n/* put your code here */\n#{$table-prefix} {\n    @include box-sizing;\n    position: relative;\n\n    &#{$table-prefix}-small {\n        th {\n            #{$table-prefix}-cell-wrapper {\n                padding: $table-size-s-header-padding-top $table-size-s-header-padding-left;\n            }\n        }\n\n        td {\n            #{$table-prefix}-cell-wrapper {\n                padding: $table-size-s-cell-padding-top $table-size-s-cell-padding-left;\n            }\n        }\n\n        #{$table-prefix}-prerow #{$table-prefix}-cell-wrapper {\n            padding: $s-2 $s-2;\n        }\n    }\n\n    table {\n        border-collapse: collapse;\n        border-spacing: 0;\n        width: 100%;\n        background: $table-row-bg;\n        tr:first-child td {\n            border-top-width: 0;\n        }\n    }\n    th {\n        padding: 0;\n        background: $table-th-bg;\n        color: $table-th-color;\n        text-align: left;\n        font-weight: $table-th-font-weight;\n        border: $table-normal-border-width $table-normal-border-style $table-normal-border-color;\n\n        #{$table-prefix}-cell-wrapper {\n            padding: $table-header-padding-top $table-header-padding-left;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            word-break: break-all;\n        }\n\n        &#{$table-prefix}-prerow #{$table-prefix}-cell-wrapper {\n            padding: $s-3 $s-4;\n        }\n    }\n    &-affix {\n        z-index: 1;\n        overflow: hidden;\n    }\n    &-header-resizable {\n        position: relative;\n        #{$table-prefix}-resize-handler {\n            position: absolute;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            width: 3px;\n            background: transparent;\n            cursor: ew-resize;\n        }\n    }\n    td {\n        padding: 0;\n        border: $table-normal-border-width $table-normal-border-style $table-normal-border-color;\n\n        #{$table-prefix}-cell-wrapper {\n            padding: $table-cell-padding-top $table-cell-padding-left;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            word-break: break-all;\n            .#{$css-prefix}icon-arrow-down.#{$css-prefix}table-tree-arrow,\n            .#{$css-prefix}icon-arrow-right.#{$css-prefix}table-tree-arrow,\n            #{$table-prefix}-tree-placeholder {\n                margin-right: $table-header-icon-margin-left;\n                outline: 0;\n                cursor: pointer;\n            }\n            .#{$css-prefix}icon-arrow-right.#{$css-prefix}table-tree-arrow {\n                @include icon-size($table-tree-expanded-icon-size);\n                &::before {\n                    content: $table-tree-fold-icon-content;\n                }\n            }\n\n            .#{$css-prefix}icon-arrow-down.#{$css-prefix}table-tree-arrow {\n                @include icon-size($table-tree-expanded-icon-size);\n                &::before {\n                    content: $table-tree-unfold-icon-content;\n                }\n            }\n        }\n        &#{$table-prefix}-prerow #{$table-prefix}-cell-wrapper {\n            padding: $s-3 $s-4;\n        }\n    }\n\n    #{$table-prefix}-expanded,\n    #{$table-prefix}-selection {\n        #{$table-prefix}-cell-wrapper {\n            overflow: visible;\n        }\n    }\n    &.no-header table tr:first-child td {\n        border-top-width: 1px;\n    }\n    &.only-bottom-border {\n        border-width: 0;\n        th {\n            border-width: 0 0 $table-normal-border-width 0;\n        }\n        td {\n            border-width: 0 0 $table-normal-border-width 0;\n        }\n        #{$table-prefix}-expanded-row {\n            th {\n                border-width: 0 0 $table-normal-border-width 0;\n            }\n            td {\n                border-width: 0 0 $table-normal-border-width 0;\n            }\n        }\n\n        table tr td:first-child,\n        table tr th:first-child {\n            border-left-width: 0;\n        }\n    }\n    &-loading {\n        display: block;\n    }\n    &.zebra {\n        tr:nth-child(odd) td {\n            background: $table-td-normal;\n        }\n        tr:nth-child(even) td {\n            background: $table-td-gray;\n        }\n        #{$table-prefix}-row.hovered td {\n            background: $table-row-hover-bg;\n            color: $table-row-hover-color;\n        }\n        #{$table-prefix}-cell.hovered {\n            background: $table-row-hover-bg;\n            color: $table-row-hover-color;\n        }\n        #{$table-prefix}-row.selected td {\n            background: $table-row-selected-bg;\n            color: $table-row-selected-color;\n        }\n    }\n    &-empty {\n        color: $table-empty-color;\n        padding: $table-empty-padding 0;\n        text-align: center;\n    }\n    &-expanded-row {\n        td {\n            border-width: 0;\n            &:first-child {\n                border-left-width: 1px;\n            }\n            &:last-child {\n                border-right-width: 1px;\n            }\n        }\n        &:last-child td {\n            border-bottom-width: 1px;\n        }\n        #{$table-prefix} .last td {\n            border-bottom-width: 0;\n        }\n    }\n    &-filter-footer {\n        margin: 10px 10px 0;\n        button {\n            margin-right: 5px;\n        }\n    }\n    &-row {\n        transition: all $motion-duration-immediately $motion-linear;\n        background: $table-row-bg;\n        color: $table-row-color;\n\n        &.hidden {\n            display: none;\n        }\n        &.hovered {\n            background: $table-row-hover-bg;\n            color: $table-row-hover-color;\n        }\n        &.selected {\n            background: $table-row-selected-bg;\n            color: $table-row-selected-color;\n        }\n    }\n    &-cell {\n        &.hovered {\n            background: $table-row-hover-bg;\n            color: $table-row-hover-color;\n        }\n    }\n    &-tree-placeholder {\n        display: inline-block;\n        width: 12px;\n    }\n}\n\n.last {\n    #{$table-prefix}-expanded-row {\n        td {\n            border-bottom-width: 1px;\n        }\n    }\n}\n\n#{$table-prefix}-body,\n#{$table-prefix}-header {\n    overflow: auto;\n    font-size: $table-th-font-size;\n}\n\n#{$table-prefix}-header {\n    margin-bottom: -20px;\n    padding-bottom: 20px;\n}\n\n#{$table-prefix}-body {\n    font-size: $table-body-font-size;\n    position: relative;\n}\n\n#{$table-prefix}-fixed {\n    border: $table-normal-border-width $table-normal-border-style $table-normal-border-color;\n    table {\n        table-layout: fixed;\n    }\n    #{$table-prefix}-header {\n        background: $table-th-bg;\n        padding-bottom: 20px;\n        margin-bottom: -20px;\n    }\n    @include table-border(0);\n    &#{$table-prefix}-group {\n        @include table-border($table-normal-border-width);\n    }\n}\n\n#{$table-prefix}-lock {\n    #{$table-prefix}-body {\n        overflow-x: auto;\n        overflow-y: visible;\n    }\n}\n\n#{$table-prefix}-group {\n    border-width: 0;\n    #{$table-prefix}-body {\n        margin-top: $table-group-split;\n        table {\n            margin-bottom: $table-group-split;\n            tr:first-child td {\n                border-top-width: 1px;\n            }\n        }\n    }\n    #{$table-prefix}-group-header {\n        td {\n            background: $table-group-th-bg;\n            color: $table-group-th-color;\n        }\n    }\n    #{$table-prefix}-group-footer {\n        td {\n            background: $table-group-footer-bg;\n            color: $table-group-footer-color;\n        }\n    }\n    #{$table-prefix}-row.hovered,\n    #{$table-prefix}-row.selected {\n        background: $table-row-bg;\n        color: $table-row-color;\n    }\n}\n\n#{$table-prefix}-lock {\n    position: relative;\n    table {\n        table-layout: fixed;\n    }\n}\n\n#{$table-prefix}-wrap-empty {\n    #{$table-prefix}-lock-left,\n    #{$table-prefix}-lock-right {\n        td {\n            border: none;\n        }\n        #{$table-prefix}-empty {\n            display: none;\n        }\n    }\n    > #{$table-prefix}-inner > #{$table-prefix}-body > table {\n        table-layout: auto;\n    }\n}\n\n#{$table-prefix}-lock-left,\n#{$table-prefix}-lock-right {\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 1;\n    border: 0;\n    transition: box-shadow .3s ease;\n    overflow: hidden;\n    table {\n        width: auto;\n    }\n    #{$table-prefix}-body {\n        overflow-y: scroll;\n        overflow-x: hidden;\n        margin-right: -20px;\n        padding-right: 0;\n    }\n}\n\n#{$table-prefix}-lock-right {\n    right: 0;\n    left: auto;\n    table tr td:first-child,\n    table tr th:first-child {\n        border-left-width: 1px;\n    }\n    &.shadow {\n        box-shadow: -2px 0 3px rgba(0, 0, 0, .12);\n    }\n}\n\n#{$table-prefix}-lock-left {\n    &.shadow {\n        box-shadow: 2px 0 3px rgba(0, 0, 0, .12);\n    }\n}\n\n#{$table-prefix}-filter {\n    line-height: 1;\n}\n\n#{$table-prefix}-sort {\n    position: relative;\n    width: 16px;\n    height: 15px;\n    display: inline-block;\n    vertical-align: middle;\n    line-height: 1;\n    &:focus {\n        outline: 0;\n    }\n    .#{$css-prefix}icon {\n        position: absolute;\n        left: 0;\n        @include icon-size($table-sort-icon-size);\n        color: $table-sort-color;\n    }\n    .current .#{$css-prefix}icon {\n        color: $table-sort-color-current;\n    }\n    .#{$css-prefix}icon-ascending {\n        left: 4px;\n    }\n}\n\n#{$table-prefix}-filter {\n    cursor: pointer;\n    width: 20px;\n    display: inline-block;\n    &:focus {\n        outline: 0;\n    }\n    .#{$css-prefix}icon {\n        @include icon-size($table-filter-icon-size);\n        color: $table-sort-color;\n    }\n}\n\n#{$table-prefix}-header-icon {\n    margin-left: $table-header-icon-margin-left;\n}\n\n#{$table-prefix}-expanded-ctrl {\n    cursor: pointer;\n    &:focus {\n        outline: 0;\n    }\n    &.disabled {\n        color: $table-expanded-ctrl-disabled-color;\n    }\n\n    .#{$css-prefix}table-expand-unfold {\n        @include icon-size($table-expanded-icon-size);\n        &::before {\n            content: $table-expand-unfold-icon-content;\n        }\n    }\n\n    .#{$css-prefix}table-expand-fold {\n        @include icon-size($table-expanded-icon-size);\n        &::before {\n            content: $table-expand-fold-icon-content;\n        }\n    }\n}\n\n@import \"./rtl.scss\";"
    }
}