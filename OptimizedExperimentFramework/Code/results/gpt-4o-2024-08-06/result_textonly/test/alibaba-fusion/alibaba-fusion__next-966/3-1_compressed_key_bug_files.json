{
    "1": {
        "bug_file": "src/menu/view/group.jsx",
        "compressed": "NO",
        "line_numbers": 70,
        "compressed_line_numbers": 70,
        "compressed_bug_file_content": "import React, { Component, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Item from './item';\n\n/**\n * Menu.Group\n * @order 5\n */\nexport default class Group extends Component {\n    static menuChildType = 'group';\n\n    static propTypes = {\n        root: PropTypes.object,\n        className: PropTypes.string,\n        /**\n         * 标签内容\n         */\n        label: PropTypes.node,\n        /**\n         * 菜单项\n         */\n        children: PropTypes.node,\n        parentMode: PropTypes.oneOf(['inline', 'popup']),\n    };\n\n    render() {\n        const {\n            root,\n            className,\n            label,\n            children,\n            parentMode,\n            ...others\n        } = this.props;\n        const { prefix } = root.props;\n\n        const newClassName = cx({\n            [`${prefix}menu-group-label`]: true,\n            [className]: !!className,\n        });\n\n        const newChildren = children.map(child => {\n            const { className } = child.props;\n            const newChildClassName = cx({\n                [`${prefix}menu-group-item`]: true,\n                [className]: !!className,\n            });\n\n            return cloneElement(child, {\n                parentMode,\n                className: newChildClassName,\n            });\n        });\n\n        return [\n            <Item\n                key=\"menu-group-label\"\n                className={newClassName}\n                replaceClassName\n                root={root}\n                parentMode={parentMode}\n                {...others}\n            >\n                {label}\n            </Item>,\n            ...newChildren,\n        ];\n    }\n}"
    },
    "2": {
        "bug_file": "src/menu/view/sub-menu.jsx",
        "compressed": "NO",
        "line_numbers": 283,
        "compressed_line_numbers": 283,
        "compressed_bug_file_content": "import React, { Component, Children, cloneElement } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Animate from '../../animate';\nimport Icon from '../../icon';\nimport { func, obj } from '../../util';\nimport Item from './item';\nimport SelectabelItem from './selectable-item';\nimport PopupItem from './popup-item';\n\nconst { Expand } = Animate;\nconst { bindCtx } = func;\n\n/**\n * Menu.SubMenu\n * @order 1\n */\nexport default class SubMenu extends Component {\n    static menuChildType = 'submenu';\n\n    static propTypes = {\n        _key: PropTypes.string,\n        root: PropTypes.object,\n        level: PropTypes.number,\n        groupIndent: PropTypes.number,\n        noIcon: PropTypes.bool,\n        /**\n         * 标签内容\n         */\n        label: PropTypes.node,\n        /**\n         * 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效\n         */\n        selectable: PropTypes.bool,\n        /**\n         * 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性\n         * @default Menu 的 mode 属性值\n         */\n        mode: PropTypes.oneOf(['inline', 'popup']),\n        /**\n         * 菜单项或下一级子菜单\n         */\n        children: PropTypes.node,\n        onMouseEnter: PropTypes.func,\n        onMouseLeave: PropTypes.func,\n        subMenuContentClassName: PropTypes.string,\n        triggerType: PropTypes.oneOf(['click', 'hover']),\n        align: PropTypes.oneOf(['outside', 'follow']),\n        parentMode: PropTypes.oneOf(['inline', 'popup']),\n    };\n\n    static defaultProps = {\n        groupIndent: 0,\n        noIcon: false,\n        selectable: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        bindCtx(this, [\n            'handleMouseEnter',\n            'handleMouseLeave',\n            'handleClick',\n            'handleOpen',\n            'afterLeave',\n        ]);\n    }\n\n    componentDidMount() {\n        this.itemNode = findDOMNode(this);\n    }\n\n    afterLeave() {\n        const { focused, root } = this.props;\n        const { focusable } = root.props;\n        if (focusable && focused) {\n            this.itemNode.focus();\n        }\n    }\n\n    getOpen() {\n        const { _key, root } = this.props;\n        const { openKeys } = root.state;\n\n        return openKeys.indexOf(_key) > -1;\n    }\n\n    handleMouseEnter(e) {\n        this.handleOpen(true);\n\n        this.props.onMouseEnter && this.props.onMouseEnter(e);\n    }\n\n    handleMouseLeave(e) {\n        this.handleOpen(false);\n\n        this.props.onMouseLeave && this.props.onMouseLeave(e);\n    }\n\n    handleClick(e) {\n        const { root, selectable } = this.props;\n        const { selectMode } = root.props;\n        if (selectMode && selectable) {\n            e.stopPropagation();\n        }\n\n        const open = this.getOpen();\n        this.handleOpen(!open);\n    }\n\n    handleOpen(open, triggerType, e) {\n        const { _key, root } = this.props;\n        root.handleOpen(_key, open, triggerType, e);\n    }\n\n    passParentToChildren(children) {\n        const { mode, root } = this.props;\n\n        return Children.map(children, child => {\n            return cloneElement(child, {\n                parent: this,\n                parentMode: mode || root.props.mode,\n            });\n        });\n    }\n\n    renderInline() {\n        const {\n            _key,\n            level,\n            root,\n            className,\n            selectable: selectableFromProps,\n            label,\n            children,\n            noIcon,\n            subMenuContentClassName,\n            triggerType: propsTriggerType,\n            parentMode,\n        } = this.props;\n        const {\n            prefix,\n            selectMode,\n            triggerType: rootTriggerType,\n            inlineArrowDirection,\n            expandAnimation,\n            rtl,\n        } = root.props;\n        const triggerType = propsTriggerType || rootTriggerType;\n        const open = this.getOpen();\n        const others = obj.pickOthers(\n            Object.keys(SubMenu.propTypes),\n            this.props\n        );\n\n        const liProps = {\n            className: cx({\n                [`${prefix}menu-sub-menu-wrapper`]: true,\n                [className]: !!className,\n            }),\n        };\n        const itemProps = {\n            'aria-expanded': open,\n            _key,\n            level,\n            root,\n            type: 'submenu',\n            component: 'div',\n            parentMode,\n        };\n        const arrorProps = {\n            type:\n                inlineArrowDirection === 'right' ? 'arrow-right' : 'arrow-down',\n            className: cx({\n                [`${prefix}menu-icon-arrow`]: true,\n                [`${prefix}menu-icon-arrow-down`]:\n                    inlineArrowDirection === 'down',\n                [`${prefix}menu-icon-arrow-right`]:\n                    inlineArrowDirection === 'right',\n                [`${prefix}open`]: open,\n            }),\n        };\n\n        const selectable = !!selectMode && selectableFromProps;\n        const NewItem = selectable ? SelectabelItem : Item;\n\n        if (triggerType === 'hover') {\n            liProps.onMouseEnter = this.handleMouseEnter;\n            liProps.onMouseLeave = this.handleMouseLeave;\n        } else if (selectable) {\n            arrorProps.onClick = this.handleClick;\n        } else {\n            itemProps.onClick = this.handleClick;\n        }\n        if (open) {\n            itemProps.className = `${prefix}opened`;\n        }\n\n        const newSubMenuContentClassName = cx({\n            [`${prefix}menu-sub-menu`]: true,\n            [subMenuContentClassName]: !!subMenuContentClassName,\n        });\n\n        let roleMenu = 'menu',\n            roleItem = 'menuitem';\n        if ('selectMode' in root.props) {\n            roleMenu = 'listbox';\n            roleItem = 'listitem';\n        }\n\n        const subMenu = open ? (\n            <ul\n                role={roleMenu}\n                dir={rtl ? 'rtl' : undefined}\n                ref=\"subMenu\"\n                className={newSubMenuContentClassName}\n            >\n                {this.passParentToChildren(children)}\n            </ul>\n        ) : null;\n\n        return (\n            <li role={roleItem} {...others} {...liProps}>\n                <NewItem {...itemProps}>\n                    <span className={`${prefix}menu-item-text`}>{label}</span>\n                    {noIcon ? null : <Icon {...arrorProps} />}\n                </NewItem>\n                {expandAnimation ? (\n                    <Expand\n                        animationAppear={false}\n                        afterLeave={this.afterLeave}\n                    >\n                        {subMenu}\n                    </Expand>\n                ) : (\n                    subMenu\n                )}\n            </li>\n        );\n    }\n\n    renderPopup() {\n        const {\n            children,\n            subMenuContentClassName,\n            noIcon,\n            ...others\n        } = this.props;\n        const root = this.props.root;\n        const { prefix, popupClassName, popupStyle, rtl } = root.props;\n\n        const newClassName = cx({\n            [`${prefix}menu`]: true,\n            [`${prefix}ver`]: true,\n            [popupClassName]: !!popupClassName,\n            [subMenuContentClassName]: !!subMenuContentClassName,\n        });\n\n        others.rtl = rtl;\n\n        return (\n            <PopupItem {...others} noIcon={noIcon} hasSubMenu>\n                <ul\n                    role=\"menu\"\n                    dir={rtl ? 'rtl' : undefined}\n                    className={newClassName}\n                    style={popupStyle}\n                >\n                    {this.passParentToChildren(children)}\n                </ul>\n            </PopupItem>\n        );\n    }\n\n    render() {\n        const { mode, root } = this.props;\n        const newMode = mode || root.props.mode;\n\n        return newMode === 'popup' ? this.renderPopup() : this.renderInline();\n    }\n}"
    }
}