{
    "1/1": {
        "src/cascader-select/cascader-select.jsx": [
            {
                "SEARCH": [
                    "updateCache(dataSource) {",
                    "this._v2n = {};",
                    "this._p2n = {};",
                    "const loop = (data, prefix = '0') =>",
                    "data.forEach((item, index) => {",
                    "const { value, children } = item;",
                    "const pos = `${prefix}-${index}`;",
                    "this._v2n[value] = this._p2n[pos] = { ...item, pos };",
                    "",
                    "if (children && children.length) {",
                    "loop(children, pos);",
                    "}",
                    "});",
                    "",
                    "loop(dataSource);",
                    "}"
                ],
                "REPLACE": [
                    "    updateCache(dataSource) {",
                    "        this._v2n = {};",
                    "        this._p2n = {};",
                    "        const loop = (data, prefix = '0') =>",
                    "            data.forEach((item, index) => {",
                    "                const { value, children } = item;",
                    "                const pos = `${prefix}-${index}`;",
                    "                this._v2n[value] = this._p2n[pos] = { ...item, pos };",
                    "",
                    "                if (children && children.length) {",
                    "                    loop([...children], pos); // Use a copy of children",
                    "                }",
                    "            });",
                    "",
                    "        loop([...dataSource]); // Use a copy of dataSource",
                    "    }"
                ]
            }
        ],
        "src/cascader-select/index.jsx": [
            {
                "SEARCH": [
                    "transform: /* istanbul ignore next */ (props, deprecated) => {",
                    "if ('shape' in props) {",
                    "deprecated('shape', 'hasBorder', 'CascaderSelect');",
                    "const { shape, ...others } = props;",
                    "props = { hasBorder: shape !== 'arrow-only', ...others };",
                    "}",
                    "",
                    "if ('container' in props) {",
                    "deprecated('container', 'popupContainer', 'CascaderSelect');",
                    "const { container, ...others } = props;",
                    "props = { popupContainer: container, ...others };",
                    "}",
                    "",
                    "if ('expandTrigger' in props) {",
                    "deprecated('expandTrigger', 'expandTriggerType', 'CascaderSelect');",
                    "const { expandTrigger, ...others } = props;",
                    "props = { expandTriggerType: expandTrigger, ...others };",
                    "}",
                    "",
                    "if ('showItemCount' in props) {",
                    "deprecated(",
                    "'showItemCount',",
                    "'listStyle | listClassName',",
                    "'CascaderSelect'",
                    ");",
                    "}",
                    "if ('labelWidth' in props) {",
                    "deprecated(",
                    "'labelWidth',",
                    "'listStyle | listClassName',",
                    "'CascaderSelect'",
                    ");",
                    "}",
                    "",
                    "return props;",
                    "},"
                ],
                "REPLACE": [
                    "    transform: /* istanbul ignore next */ (props, deprecated) => {",
                    "        let newProps = { ...props }; // Create a copy of props",
                    "        if ('shape' in newProps) {",
                    "            deprecated('shape', 'hasBorder', 'CascaderSelect');",
                    "            const { shape, ...others } = newProps;",
                    "            newProps = { hasBorder: shape !== 'arrow-only', ...others };",
                    "        }",
                    "",
                    "        if ('container' in newProps) {",
                    "            deprecated('container', 'popupContainer', 'CascaderSelect');",
                    "            const { container, ...others } = newProps;",
                    "            newProps = { popupContainer: container, ...others };",
                    "        }",
                    "",
                    "        if ('expandTrigger' in newProps) {",
                    "            deprecated('expandTrigger', 'expandTriggerType', 'CascaderSelect');",
                    "            const { expandTrigger, ...others } = newProps;",
                    "            newProps = { expandTriggerType: expandTrigger, ...others };",
                    "        }",
                    "",
                    "        if ('showItemCount' in newProps) {",
                    "            deprecated(",
                    "                'showItemCount',",
                    "                'listStyle | listClassName',",
                    "                'CascaderSelect'",
                    "            );",
                    "        }",
                    "        if ('labelWidth' in newProps) {",
                    "            deprecated(",
                    "                'labelWidth',",
                    "                'listStyle | listClassName',",
                    "                'CascaderSelect'",
                    "            );",
                    "        }",
                    "",
                    "        return newProps; // Return the modified copy",
                    "    },"
                ]
            }
        ]
    }
}