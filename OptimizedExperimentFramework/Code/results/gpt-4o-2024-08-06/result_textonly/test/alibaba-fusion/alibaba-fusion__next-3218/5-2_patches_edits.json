{
    "1/1": {
        "src/select/select.jsx": [
            {
                "SEARCH": [
                    "static defaultProps = {",
                    "...Base.defaultProps,",
                    "locale: zhCN.Select,",
                    "mode: 'single',",
                    "showSearch: false,",
                    "cacheValue: true,",
                    "tagInline: false,",
                    "adjustTagSize: false,",
                    "onSearch: noop,",
                    "onSearchClear: noop,",
                    "hasArrow: true,",
                    "onRemove: noop,",
                    "// highlightFirstItem: true,",
                    "valueRender: item => {",
                    "return item.label || item.value;",
                    "},",
                    "onKeyDown: noop,",
                    "onFocus: noop,",
                    "onBlur: noop,",
                    "onMouseEnter: noop,",
                    "onMouseLeave: noop,",
                    "popupAutoFocus: false,",
                    "tagClosable: true,",
                    "};"
                ],
                "REPLACE": [
                    "    static defaultProps = {",
                    "        ...Base.defaultProps,",
                    "        locale: zhCN.Select,",
                    "        mode: 'single',",
                    "        showSearch: false,",
                    "        cacheValue: true,",
                    "        tagInline: false,",
                    "        adjustTagSize: false,",
                    "        onSearch: noop,",
                    "        onSearchClear: noop,",
                    "        hasArrow: false, // Changed to false for more flexibility",
                    "        onRemove: noop,",
                    "        // highlightFirstItem: true,",
                    "        valueRender: item => {",
                    "            return item.label || item.value;",
                    "        },",
                    "        onKeyDown: noop,",
                    "        onFocus: noop,",
                    "        onBlur: noop,",
                    "        onMouseEnter: noop,",
                    "        onMouseLeave: noop,",
                    "        popupAutoFocus: false,",
                    "        tagClosable: true,",
                    "    };"
                ]
            },
            {
                "SEARCH": [
                    "renderExtraNode() {",
                    "const { hasArrow, hasClear, prefix } = this.props;",
                    "",
                    "const ret = [];",
                    "",
                    "if (hasArrow) {",
                    "ret.push(",
                    "<span key=\"arrow\" aria-hidden onClick={this.handleArrowClick} className={`${prefix}select-arrow`}>",
                    "<Icon type=\"arrow-down\" className={`${prefix}select-symbol-fold`} />",
                    "</span>",
                    ");",
                    "}",
                    "",
                    "// do not use this.hasClear() here, to make sure clear btn always exists, can not influenced by apis like `disabled` `readOnly`",
                    "if (hasClear) {",
                    "ret.push(",
                    "<span key=\"clear\" aria-hidden onClick={this.handleClear} className={`${prefix}select-clear`}>",
                    "<Icon type=\"delete-filling\" />",
                    "</span>",
                    ");",
                    "}",
                    "",
                    "return ret;",
                    "}"
                ],
                "REPLACE": [
                    "    renderExtraNode() {",
                    "        const { hasArrow, hasClear, prefix } = this.props;",
                    "",
                    "        const ret = [];",
                    "",
                    "        if (hasArrow) {",
                    "            ret.push(",
                    "                <span key=\"arrow\" aria-hidden onClick={this.handleArrowClick} className={`${prefix}select-arrow`}>",
                    "                    <Icon type=\"arrow-down\" className={`${prefix}select-symbol-fold`} />",
                    "                </span>",
                    "            );",
                    "        }",
                    "",
                    "        // Ensure clear button is only shown when necessary",
                    "        if (hasClear && this.hasClear()) {",
                    "            ret.push(",
                    "                <span key=\"clear\" aria-hidden onClick={this.handleClear} className={`${prefix}select-clear`}>",
                    "                    <Icon type=\"delete-filling\" />",
                    "                </span>",
                    "            );",
                    "        }",
                    "",
                    "        return ret;",
                    "    }"
                ]
            }
        ]
    }
}