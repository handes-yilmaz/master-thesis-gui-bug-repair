diff --git a/src/js/components/Form/Form.js b/src/js/components/Form/Form.js
index dc80434750..d47a0d980f 100644
--- a/src/js/components/Form/Form.js
+++ b/src/js/components/Form/Form.js
@@ -221,15 +221,13 @@ const Form = forwardRef(
     // Only keep validation results for current form fields. In the case of a
     // dynamic form, a field possessing an error may have been removed from the
     // form; need to clean up any previous related validation results.
-    const filterRemovedFields = (prevValidations) => {
-      const nextValidations = prevValidations;
-      return Object.keys(nextValidations)
-        .filter(
-          (n) =>
-            !validationRulesRef.current[n] || nextValidations[n] === undefined,
-        )
-        .forEach((n) => delete nextValidations[n]);
-    };
+const filterRemovedFields = (prevValidations) => {
+  const nextValidations = { ...prevValidations };
+  Object.keys(nextValidations)
+    .filter((n) => !validationRulesRef.current[n])
+    .forEach((n) => delete nextValidations[n]);
+  return nextValidations;
+};
 
     const applyValidationRules = useCallback(
       (validationRules) => {
@@ -240,33 +238,29 @@ const Form = forwardRef(
           messages,
         );
 
-        setValidationResults((prevValidationResults) => {
-          // Keep any previous errors and infos for untouched keys,
-          // these may have come from a Submit.
-          const nextErrors = {
-            ...prevValidationResults.errors,
-            ...validatedErrors,
-          };
-          const nextInfos = {
-            ...prevValidationResults.infos,
-            ...validatedInfos,
-          };
-          // Remove previous errors and infos for keys no longer in the
-          // form, these may have been fields removed from a dynamic form.
-          filterRemovedFields(nextErrors);
-          filterRemovedFields(nextInfos);
-          const nextValidationResults = {
-            errors: nextErrors,
-            infos: nextInfos,
-          };
-          if (onValidate)
-            onValidate({
-              ...nextValidationResults,
-              valid: buildValid(nextErrors),
-            });
-          validationResultsRef.current = nextValidationResults;
-          return nextValidationResults;
-        });
+setValidationResults((prevValidationResults) => {
+  // Keep any previous errors and infos for untouched keys,
+  // these may have come from a Submit.
+  const nextErrors = filterRemovedFields({
+    ...prevValidationResults.errors,
+    ...validatedErrors,
+  });
+  const nextInfos = filterRemovedFields({
+    ...prevValidationResults.infos,
+    ...validatedInfos,
+  });
+  const nextValidationResults = {
+    errors: nextErrors,
+    infos: nextInfos,
+  };
+  if (onValidate)
+    onValidate({
+      ...nextValidationResults,
+      valid: buildValid(nextErrors),
+    });
+  validationResultsRef.current = nextValidationResults;
+  return nextValidationResults;
+});
       },
       [buildValid, format, messages, onValidate, value],
     );
