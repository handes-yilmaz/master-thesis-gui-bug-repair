{
    "1": {
        "bug_file": "src/js/components/NameValueList/NameValueList.js",
        "compressed": "NO",
        "line_numbers": 70,
        "compressed_line_numbers": 70,
        "compressed_bug_file_content": "import React, { forwardRef, useContext, useMemo } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Grid } from '../Grid';\nimport { ResponsiveContext } from '../../contexts/ResponsiveContext';\nimport { NameValueListContext } from './NameValueListContext';\n\nconst NameValueList = forwardRef(\n  (\n    {\n      align,\n      layout = 'column',\n      nameProps,\n      pairProps = { direction: 'row' },\n      valueProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const size = useContext(ResponsiveContext);\n    const theme = useContext(ThemeContext);\n\n    // If layout is grid, valueWidth sets the max width of the column.\n    // Grid will 'fit' as many columns of valueWidth per row as container's\n    // width allows.\n    let columns;\n    const valueWidth = valueProps?.width || theme.nameValueList.value.width;\n    const nameWidth = nameProps?.width || theme.nameValueList.name.width;\n    if (size === 'small' || layout === 'grid')\n      columns = {\n        count: 'fit',\n        size: !Array.isArray(valueWidth) ? ['auto', valueWidth] : valueWidth,\n      };\n    else if (layout === 'column' && pairProps.direction === 'row')\n      columns = [\n        nameWidth,\n        !Array.isArray(valueWidth) ? ['auto', valueWidth] : valueWidth,\n      ];\n    else columns = [valueWidth];\n\n    let { gap } = theme.nameValueList;\n    if (\n      (pairProps.direction === 'column' || size === 'small') &&\n      theme.nameValueList.pair?.column?.gap\n    ) {\n      gap = theme.nameValueList.pair.column.gap;\n    }\n\n    const listContextValue = useMemo(\n      () => ({ nameProps, pairProps, valueProps }),\n      [nameProps, pairProps, valueProps],\n    );\n\n    return (\n      <NameValueListContext.Provider value={listContextValue}>\n        <Grid\n          as=\"dl\"\n          ref={ref}\n          columns={columns}\n          gap={gap}\n          margin=\"none\" // override browser default margin for dl\n          {...rest}\n        />\n      </NameValueListContext.Provider>\n    );\n  },\n);\n\nNameValueList.displayName = 'NameValueList';\n\nexport { NameValueList };"
    },
    "2": {
        "bug_file": "src/js/components/NameValuePair/NameValuePair.js",
        "compressed": "NO",
        "line_numbers": 81,
        "compressed_line_numbers": 81,
        "compressed_bug_file_content": "import React, { Fragment, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { Text } from '../Text';\nimport { ResponsiveContext } from '../../contexts/ResponsiveContext';\nimport { NameValueListContext } from '../NameValueList/NameValueListContext';\n\nconst NameValuePair = ({ children, name: nameProp }) => {\n  const { nameProps, pairProps, valueProps } = useContext(NameValueListContext);\n  const size = useContext(ResponsiveContext);\n  const theme = useContext(ThemeContext);\n  const direction = pairProps?.direction;\n\n  const column =\n    direction === 'column' ||\n    direction === 'column-reverse' ||\n    size === 'small';\n\n  const Container = column ? Box : Fragment;\n\n  const nameAlign = size !== 'small' ? nameProps?.align : undefined;\n  const valueAlign = size !== 'small' ? valueProps?.align : undefined;\n  // using margin to act as gap\n  // <dl> elements must only directly contain\n  // properly-ordered <dt> and <dd> groups\n  let valueGap;\n  if (column && theme.nameValuePair?.column?.gap)\n    valueGap = { bottom: theme.nameValuePair.column.gap };\n\n  let name;\n  if (typeof nameProp === 'string' || typeof nameProp === 'number')\n    name = (\n      <Text\n        as=\"dt\"\n        margin={valueGap}\n        textAlign={nameAlign}\n        {...theme.nameValuePair.name}\n      >\n        {nameProp}\n      </Text>\n    );\n  else\n    name = (\n      <Box as=\"dt\" align={nameAlign}>\n        {nameProp}\n      </Box>\n    );\n\n  let value;\n  if (typeof children === 'string' || typeof children === 'number')\n    value = (\n      // override browser default margin for dd\n      <Text\n        as=\"dd\"\n        margin=\"none\"\n        textAlign={valueAlign}\n        {...theme.nameValuePair.value}\n      >\n        {children}\n      </Text>\n    );\n  else\n    value = (\n      // override browser default margin for dd\n      <Box margin=\"none\" as=\"dd\" align={valueAlign}>\n        {children}\n      </Box>\n    );\n\n  const first = direction !== 'column-reverse' ? name : value;\n  const second = direction !== 'column-reverse' ? value : name;\n\n  return (\n    <Container>\n      {first}\n      {second}\n    </Container>\n  );\n};\n\nexport { NameValuePair };"
    },
    "3": {
        "bug_file": "src/js/components/NameValueList/stories/Align.js",
        "compressed": "NO",
        "line_numbers": 35,
        "compressed_line_numbers": 35,
        "compressed_bug_file_content": "import React from 'react';\nimport { Box, NameValueList, NameValuePair, Text } from 'grommet';\nimport { data } from './data';\n\nexport const Align = () => (\n  // Uncomment <Grommet> lines when using outside of storybook\n  // <Grommet theme={...}>\n  <Box pad=\"small\" gap=\"medium\">\n    <Text weight=\"bold\" size=\"3xl\">\n      Align value end\n    </Text>\n    <NameValueList valueProps={{ align: 'end' }}>\n      {Object.entries(data).map(([name, value]) => (\n        <NameValuePair key={name} name={name}>\n          {value}\n        </NameValuePair>\n      ))}\n    </NameValueList>\n    <Text weight=\"bold\" size=\"3xl\">\n      Align name end\n    </Text>\n    <NameValueList nameProps={{ align: 'end' }}>\n      {Object.entries(data).map(([name, value]) => (\n        <NameValuePair key={name} name={name}>\n          {value}\n        </NameValuePair>\n      ))}\n    </NameValueList>\n  </Box>\n  // </Grommet>\n);\n\nexport default {\n  title: 'Visualizations/NameValueList/Align',\n};"
    },
    "4": {
        "bug_file": "src/js/components/NameValuePair/__tests__/NameValuePair-test.tsx",
        "compressed": "NO",
        "line_numbers": 98,
        "compressed_line_numbers": 98,
        "compressed_bug_file_content": "import React from 'react';\nimport 'jest-styled-components';\nimport 'jest-axe/extend-expect';\nimport 'regenerator-runtime/runtime';\n\nimport { render } from '@testing-library/react';\n\nimport { Box } from '../../Box';\nimport { Grommet } from '../../Grommet';\nimport { Meter } from '../../Meter';\nimport { NameValueList } from '../../NameValueList';\nimport { NameValuePair } from '..';\n\nconst data = {\n  name: 'entry',\n  location: 'San Francisco',\n  health: 80,\n};\n\ndescribe('NameValuePair', () => {\n  test(`should render name when name is typeof string`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render name when name is JSX Element`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList nameProps={{ width: 'xsmall' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair\n              key={name}\n              name={\n                <Box pad=\"small\" background=\"brand\">\n                  {name}\n                </Box>\n              }\n            >\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render value when provided as child of type \n  string or number`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList valueProps={{ width: 'xsmall' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render value when provided as child of type JSX Element`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList nameProps={{ align: 'end' }}>\n          {Object.entries(data).map(([name, value]) => {\n            let renderedValue: any = value;\n            if (name === 'health' && typeof value === 'number') {\n              renderedValue = <Meter value={value} />;\n            }\n            return (\n              <NameValuePair key={name} name={name}>\n                {renderedValue}\n              </NameValuePair>\n            );\n          })}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n});"
    },
    "5": {
        "bug_file": "src/js/components/NameValueList/__tests__/NameValueList-test.tsx",
        "compressed": "NO",
        "line_numbers": 250,
        "compressed_line_numbers": 250,
        "compressed_bug_file_content": "import React from 'react';\nimport 'jest-styled-components';\nimport 'jest-axe/extend-expect';\nimport 'regenerator-runtime/runtime';\nimport { axe } from 'jest-axe';\n\nimport { render } from '@testing-library/react';\n\nimport { ThemeType } from '../../../themes';\nimport { Grommet } from '../../Grommet';\nimport { NameValueList } from '..';\nimport { NameValuePair } from '../../NameValuePair';\n\nconst data = {\n  name: 'entry',\n  location: 'San Francisco',\n  health: 80,\n};\n\ndescribe('NameValueList', () => {\n  test('should have no accessibility violations', async () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  test(`should render`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render correct width of name`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList nameProps={{ width: 'xsmall' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render correct width of value`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList valueProps={{ width: 'xsmall' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render correct width of value when value is array`, () => {\n    const { asFragment } = render(\n      <Grommet>\n        <NameValueList valueProps={{ width: 'xsmall' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(asFragment()).toMatchSnapshot();\n  });\n\n  test(`should render correct alignment of name`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList nameProps={{ align: 'end' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render correct alignment of value`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList valueProps={{ align: 'start' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render pairs in a grid when layout=\"grid\"`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList layout=\"grid\">\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render name/value as a column when pairProps = { direction: \n    'column' }`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList pairProps={{ direction: 'column' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render value above name when pairProps = { direction: \n    'column-reverse' }`, () => {\n    const { container } = render(\n      <Grommet>\n        <NameValueList pairProps={{ direction: 'column-reverse' }}>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should render correct gap between rows and columns`, () => {\n    const customGapTheme: ThemeType = {\n      nameValueList: {\n        gap: { column: 'small', row: 'large' },\n      },\n    };\n\n    const { container } = render(\n      <Grommet theme={customGapTheme}>\n        <NameValueList>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test(`should support custom theme`, () => {\n    const customTheme: ThemeType = {\n      nameValueList: {\n        gap: { column: 'small', row: 'large' },\n        pair: {\n          column: {\n            gap: {\n              column: 'medium',\n              row: 'small',\n            },\n          },\n        },\n        name: {\n          width: 'xsmall',\n        },\n        value: {\n          width: 'small',\n        },\n      },\n      nameValuePair: {\n        name: {\n          color: 'brand',\n          weight: 'bold',\n        },\n        value: {\n          weight: 'lighter',\n        },\n      },\n    };\n\n    const { container } = render(\n      <Grommet theme={customTheme}>\n        <NameValueList>\n          {Object.entries(data).map(([name, value]) => (\n            <NameValuePair key={name} name={name}>\n              {value}\n            </NameValuePair>\n          ))}\n        </NameValueList>\n      </Grommet>,\n    );\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n});"
    },
    "6": {
        "bug_file": "src/js/components/NameValueList/NameValueListContext.js",
        "compressed": "NO",
        "line_numbers": 3,
        "compressed_line_numbers": 3,
        "compressed_bug_file_content": "import React from 'react';\n\nexport const NameValueListContext = React.createContext({});"
    }
}