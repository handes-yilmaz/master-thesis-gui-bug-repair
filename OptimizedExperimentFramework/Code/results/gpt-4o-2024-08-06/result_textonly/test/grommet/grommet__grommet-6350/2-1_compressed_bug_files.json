{
    "1": {
        "bug_file": "src/js/components/List/List.js",
        "compressed": "YES",
        "line_numbers": 729,
        "compressed_line_numbers": 124,
        "compressed_bug_file_content": "import React, { Fragment, useContext, useMemo, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\n\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Pagination } from '../Pagination';\nimport { Text } from '../Text';\nimport {\n\n\nimport { useAnalytics } from '../../contexts/AnalyticsContext';\n\nimport { ListPropTypes } from './propTypes';\n\n\n  // Customizes to make list have a focus border color of green\n\n\n  // during the interim state when a user is holding down a click,\n  // the individual list item has focus in the DOM until the click\n  // completes and focus is placed back on the list container.\n  // for visual consistency, we want to keep the focus indicator on the\n  // list container the whole time.\n\n\n  // during the interim state when a user is holding down a click,\n  // the individual list item has focus in the DOM until the click\n  // completes and focus is placed back on the list container.\n  // for visual consistency, we are showing focus on the list container\n  // as opposed to the item itself.\n\n\n// when paginated, this wraps the data table and pagination component\n\n\n  // insert pinned items into their proper index within the orderable\n  // data object to make the complete data set again\n\n\n// Determine the primary content for a row. If the List\n// has a primaryKey defined this returns the item data\n// based on this primary key. If no primaryKey property\n// is defined this will return unknown. The intent of\n// the content from the primary key is that it is unique\n// within the list.\n\n\n    // fixes issue where itemKey is undefined when only primaryKey is provided\n\n\n    // active will be the index of the current 'active'\n    // control in the list. If the onOrder property is defined\n    // this will be the index of up or down control for ordering\n    // items in the list. In this case the item index of that\n    // control would be the active index / 2.\n    // If onOrder is not defined but onClickItem is (e.g. the\n    // List items are likely selectable), active will be the\n    // index of the item which is currently active.\n\n\n      // we occasionally call updateActive with undefined when it already is so,\n      // no need to call onActive in that case\n\n\n    // store a reference to the pinned and the data that is orderable\n\n\n      // let any specifications from paginate prop override component\n\n\n      // We have an item that is 'focused' within the list. This could\n      // be the list item or one of the up/down ordering buttons.\n      // We need to figure out an id of the thing that will be shown as active\n\n        // figure out which arrow button will be the active one.\n\n\n        // The whole list item is active. Figure out an id\n\n\n                    // Call onOrder with the re-ordered data.\n                    // Update the active control index so that the\n                    // active control will stay on the same item\n                    // even though it moved up or down.\n\n\n              // Fixes zero-th index showing undefined.\n              // Checks for active variable to stop bug where activeStyle\n              // gets applied to lastActive instead of the item the user\n              // is currently clicking on\n\n\n                      // eslint-disable-next-line max-len\n\n\n                      // eslint-disable-next-line max-len\n\n\n                      // Only prevent event when disabled. We still want screen\n                      // readers to be aware that an option exists, but is in a\n                      // disabled state.\n\n\n                        // extract from React's synthetic event pool\n\n\n                        // put focus on the List container to meet WCAG\n                        // accessibility guidelines that focus remains on `ul`\n\n\n                      // allowed per\n                      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API#define_the_drag_effect\n                      // eslint-disable-next-line no-param-reassign\n\n\n                          // eslint-disable-next-line no-param-reassign\n\n\n                  // Pinned icon and settings\n\n\nexport { List };\n"
    },
    "2": {
        "bug_file": "src/js/components/List/stories/Order.js",
        "compressed": "NO",
        "line_numbers": 24,
        "compressed_line_numbers": 24,
        "compressed_bug_file_content": "import React, { useState } from 'react';\n\nimport { Box, List } from 'grommet';\n\nconst locations = [\n  'Boise',\n  'Fort Collins',\n  'Los Gatos',\n  'Palo Alto',\n  'San Francisco',\n];\n\nexport const Order = () => {\n  const [ordered, setOrder] = useState(locations);\n  return (\n    <Box align=\"center\" pad=\"large\">\n      <List data={ordered} onOrder={setOrder} />\n    </Box>\n  );\n};\n\nexport default {\n  title: 'Visualizations/List/Order',\n};"
    },
    "3": {
        "bug_file": "src/js/components/List/stories/Action.js",
        "compressed": "NO",
        "line_numbers": 33,
        "compressed_line_numbers": 33,
        "compressed_bug_file_content": "import React from 'react';\n\nimport { Box, List, Menu } from 'grommet';\nimport { More } from 'grommet-icons';\n\nconst data = [];\n\nfor (let i = 0; i < 40; i += 1) {\n  data.push({\n    entry: `entry-${i + 1}`,\n  });\n}\n\nexport const Action = () => (\n  <Box pad=\"large\">\n    <List\n      data={data.slice(0, 10)}\n      pad={{ left: 'small', right: 'none' }}\n      action={(item, index) => (\n        <Menu\n          key={index}\n          icon={<More />}\n          hoverIndicator\n          items={[{ label: 'one' }]}\n        />\n      )}\n    />\n  </Box>\n);\n\nexport default {\n  title: 'Visualizations/List/Action',\n};"
    },
    "4": {
        "bug_file": "src/js/components/List/__tests__/List-test.js",
        "compressed": "YES",
        "line_numbers": 869,
        "compressed_line_numbers": 62,
        "compressed_bug_file_content": "import React, { useState } from 'react';\nimport 'jest-styled-components';\nimport 'jest-axe/extend-expect';\nimport 'regenerator-runtime/runtime';\nimport '@testing-library/jest-dom';\nimport userEvent from '@testing-library/user-event';\nimport { render, fireEvent, screen, within } from '@testing-library/react';\n\nimport { axe } from 'jest-axe';\nimport { Grommet } from '../../Grommet';\nimport { List } from '..';\nimport { Box } from '../../Box';\nimport { Text } from '../../Text';\n\n\n    // Reported bug: onEnter calls onClickItem twice instead of once.\n    // Issue #4173. Once fixed it should be\n    // `expect(onClickItem).toHaveBeenCalledTimes(2);`\n\n    // Both focus and active should be placed on 'beta'\n\n\n    // Focus on beta while `active` is on alpha\n\n\n    // Focus on alpha while `active` is on beta\n\n\n    // Both focus and active should be placed on 'beta'\n\n\n    // Both focus and active should be placed on 'beta'\n\n\n    // Focus on beta while `active` is not on beta\n\n\n    // Both focus and active should be placed on 'beta'\n\n\n    // Focus on beta while `active` is not on beta\n\n\n    // default step 50\n\n\n    // alpha's down arrow control should be active\n\n\n    // beta's up arrow control should be active\n\n\n    // user.keyboard is not behaving as expected\n    // await user.keyboard('[ArrowUp][Enter]');\n\n\n    // expect item at position 2 in the list\n\n\n    // confirm item at position 2 in the list is unchanged\n\n\n"
    },
    "5": {
        "bug_file": "src/js/components/List/index.js",
        "compressed": "NO",
        "line_numbers": 1,
        "compressed_line_numbers": 1,
        "compressed_bug_file_content": "export { List } from './List';"
    }
}