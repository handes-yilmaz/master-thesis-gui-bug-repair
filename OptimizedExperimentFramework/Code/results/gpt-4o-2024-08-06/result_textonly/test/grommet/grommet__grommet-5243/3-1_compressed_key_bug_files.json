{
    "1": {
        "bug_file": "src/js/components/RadioButton/RadioButton.js",
        "compressed": "NO",
        "line_numbers": 124,
        "compressed_line_numbers": 124,
        "compressed_bug_file_content": "import React, { forwardRef, useContext, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport { Box } from '../Box';\nimport { defaultProps } from '../../default-props';\nimport { normalizeColor, removeUndefined } from '../../utils';\n\nimport {\n  StyledRadioButton,\n  StyledRadioButtonContainer,\n  StyledRadioButtonIcon,\n  StyledRadioButtonInput,\n  StyledRadioButtonLabel,\n  StyledRadioButtonBox,\n} from './StyledRadioButton';\nimport { RadioButtonPropTypes } from './propTypes';\n\nconst RadioButton = forwardRef(\n  (\n    {\n      a11yTitle,\n      checked,\n      children,\n      disabled,\n      focus,\n      focusIndicator,\n      id,\n      label,\n      name,\n      onChange,\n      ...rest\n    },\n    ref,\n  ) => {\n    const theme = useContext(ThemeContext) || defaultProps.theme;\n    const [hover, setHover] = useState();\n    const normalizedLabel =\n      typeof label === 'string' ? (\n        <StyledRadioButtonLabel>{label}</StyledRadioButtonLabel>\n      ) : (\n        label\n      );\n\n    const Icon = theme.radioButton.icons.circle;\n    let borderColor = normalizeColor(theme.radioButton.border.color, theme);\n    if (checked) {\n      borderColor = normalizeColor(theme.radioButton.color || 'control', theme);\n    }\n\n    return (\n      <StyledRadioButtonContainer\n        {...removeUndefined({ htmlFor: id, disabled })}\n        onClick={(event) => {\n          // prevents clicking on the label trigging the event twice\n          // https://stackoverflow.com/questions/24501497/why-the-onclick-element-will-trigger-twice-for-label-element\n          if (event.target.type !== 'radio') {\n            event.stopPropagation();\n          }\n        }}\n        focus={focus}\n        focusIndicator={focusIndicator}\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n      >\n        <StyledRadioButton\n          as={Box}\n          flex={false}\n          margin={\n            label ? { right: theme.radioButton.gap || 'small' } : undefined\n          }\n        >\n          <StyledRadioButtonInput\n            aria-label={a11yTitle}\n            {...rest}\n            ref={ref}\n            type=\"radio\"\n            {...removeUndefined({\n              id,\n              name,\n              checked,\n              disabled,\n              onChange,\n            })}\n          />\n          {children ? (\n            children({ checked, focus: focus && focusIndicator, hover })\n          ) : (\n            <StyledRadioButtonBox\n              focus={focus && focusIndicator}\n              as={Box}\n              align=\"center\"\n              justify=\"center\"\n              width={theme.radioButton.size}\n              height={theme.radioButton.size}\n              border={{\n                size: theme.radioButton.border.width,\n                color: borderColor,\n              }}\n              round={theme.radioButton.check.radius}\n            >\n              {checked &&\n                (Icon ? (\n                  <Icon theme={theme} as={StyledRadioButtonIcon} />\n                ) : (\n                  <StyledRadioButtonIcon\n                    viewBox=\"0 0 24 24\"\n                    preserveAspectRatio=\"xMidYMid meet\"\n                  >\n                    <circle cx={12} cy={12} r={6} />\n                  </StyledRadioButtonIcon>\n                ))}\n            </StyledRadioButtonBox>\n          )}\n        </StyledRadioButton>\n        {normalizedLabel}\n      </StyledRadioButtonContainer>\n    );\n  },\n);\n\nRadioButton.displayName = 'RadioButton';\nRadioButton.propTypes = RadioButtonPropTypes;\n\nexport { RadioButton };"
    },
    "2": {
        "bug_file": "src/js/components/RadioButton/StyledRadioButton.js",
        "compressed": "NO",
        "line_numbers": 130,
        "compressed_line_numbers": 130,
        "compressed_bug_file_content": "import styled, { css } from 'styled-components';\n\nimport { focusStyle, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\n\nconst disabledStyle = `\n  opacity: 0.5;\n  cursor: default;\n`;\n\nconst StyledRadioButtonContainer = styled.label`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  user-select: none;\n  width: fit-content;\n  ${(props) => props.disabled && disabledStyle} ${(props) =>\n    !props.disabled && 'cursor: pointer;'}\n\n  :hover input:not([disabled]) + div,\n  :hover input:not([disabled]) + span {\n    border-color: ${(props) =>\n      normalizeColor(props.theme.radioButton.hover.border.color, props.theme)};\n  }\n  :hover {\n    background-color: ${(props) =>\n      normalizeColor(\n        !props.disabled &&\n          props.theme.radioButton.hover &&\n          props.theme.radioButton.hover.background &&\n          props.theme.radioButton.hover.background.color,\n        props.theme,\n      )};\n  }\n  // when the RadioButton has focus but there is no focusIndicator,\n  // apply the hover styling instead so that keyboard users know\n  // which RadioButton is active\n  ${(props) =>\n    props.focus &&\n    !props.focusIndicator &&\n    `\n      input:not([disabled]) + div,\n      input:not([disabled]) + span {\n      border-color: ${normalizeColor(\n        props.theme.radioButton.hover.border.color,\n        props.theme,\n      )};\n    }\n    background-color: ${normalizeColor(\n      !props.disabled &&\n        props.theme.radioButton.hover &&\n        props.theme.radioButton.hover.background &&\n        props.theme.radioButton.hover.background.color,\n      props.theme,\n    )};\n    `}\n  ${(props) => props.theme.radioButton.container.extend};\n`;\n\nStyledRadioButtonContainer.defaultProps = {};\nObject.setPrototypeOf(StyledRadioButtonContainer.defaultProps, defaultProps);\n\nconst StyledRadioButtonInput = styled.input`\n  opacity: 0;\n  -moz-appearance: none;\n  width: 0;\n  height: 0;\n  margin: 0;\n  ${(props) => !props.disabled && 'cursor: pointer;'};\n`;\n\nStyledRadioButtonInput.defaultProps = {};\nObject.setPrototypeOf(StyledRadioButtonInput.defaultProps, defaultProps);\n\nconst StyledRadioButtonLabel = styled.span`\n  ${(props) =>\n    props.theme.radioButton.font.weight &&\n    css`\n      font-weight: ${props.theme.radioButton.font.weight};\n    `}\n`;\n\nStyledRadioButtonLabel.defaultProps = {};\nObject.setPrototypeOf(StyledRadioButtonLabel.defaultProps, defaultProps);\n\nconst StyledRadioButtonIcon = styled.svg`\n  box-sizing: border-box;\n  width: ${(props) =>\n    props.theme.radioButton.icon.size || props.theme.radioButton.size};\n  height: ${(props) =>\n    props.theme.radioButton.icon.size || props.theme.radioButton.size};\n  fill: ${(props) =>\n    normalizeColor(\n      props.theme.radioButton.check.color || 'control',\n      props.theme,\n    )};\n  ${(props) => props.theme.radioButton.icon.extend};\n`;\n\nStyledRadioButtonIcon.defaultProps = {};\nObject.setPrototypeOf(StyledRadioButtonIcon.defaultProps, defaultProps);\n\nconst StyledRadioButtonBox = styled.div`\n  background-color: ${(props) =>\n    normalizeColor(\n      props.theme.radioButton.check.background?.color,\n      props.theme,\n    )};\n  ${(props) => props.focus && focusStyle()};\n  ${(props) => props.theme.radioButton.check.extend};\n`;\n\nStyledRadioButtonBox.defaultProps = {};\nObject.setPrototypeOf(StyledRadioButtonBox.defaultProps, defaultProps);\n\nconst StyledRadioButton = styled.div`\n  ${(props) => props.theme.radioButton && props.theme.radioButton.extend};\n`;\n\nStyledRadioButton.defaultProps = {};\nObject.setPrototypeOf(StyledRadioButton.defaultProps, defaultProps);\n\nexport {\n  StyledRadioButtonContainer,\n  StyledRadioButtonInput,\n  StyledRadioButtonLabel,\n  StyledRadioButtonIcon,\n  StyledRadioButtonBox,\n  StyledRadioButton,\n};"
    },
    "3": {
        "bug_file": "src/js/themes/base.js",
        "compressed": "YES",
        "line_numbers": 1959,
        "compressed_line_numbers": 805,
        "compressed_bug_file_content": "import { Actions } from 'grommet-icons/icons/Actions';\nimport { AssistListening } from 'grommet-icons/icons/AssistListening';\nimport { CircleInformation } from 'grommet-icons/icons/CircleInformation';\nimport { ClosedCaption } from 'grommet-icons/icons/ClosedCaption';\nimport { Expand } from 'grommet-icons/icons/Expand';\nimport { FormClose } from 'grommet-icons/icons/FormClose';\nimport { FormDown } from 'grommet-icons/icons/FormDown';\nimport { FormNext } from 'grommet-icons/icons/FormNext';\nimport { FormPrevious } from 'grommet-icons/icons/FormPrevious';\nimport { FormUp } from 'grommet-icons/icons/FormUp';\nimport { Next } from 'grommet-icons/icons/Next';\nimport { Pause } from 'grommet-icons/icons/Pause';\nimport { Play } from 'grommet-icons/icons/Play';\nimport { FormPin } from 'grommet-icons/icons/FormPin';\nimport { Previous } from 'grommet-icons/icons/Previous';\nimport { StatusCriticalSmall } from 'grommet-icons/icons/StatusCriticalSmall';\nimport { StatusGoodSmall } from 'grommet-icons/icons/StatusGoodSmall';\nimport { StatusWarningSmall } from 'grommet-icons/icons/StatusWarningSmall';\nimport { StatusUnknownSmall } from 'grommet-icons/icons/StatusUnknownSmall';\nimport { Subtract } from 'grommet-icons/icons/Subtract';\nimport { Volume } from 'grommet-icons/icons/Volume';\nimport { VolumeLow } from 'grommet-icons/icons/VolumeLow';\nimport { base as iconBase } from 'grommet-icons/themes/base';\n\nimport { deepFreeze, deepMerge } from '../utils/object';\nimport { parseMetricToNum } from '../utils/mixins';\n\n\nexport const generate = (baseSpacing = 24, scale = 6) => {\n  // 24\n\n\n    // maxWidth chosen to be ~50 characters wide\n    // see: https://ux.stackexchange.com/a/34125\n\n\n      // backgrounds: undefined,\n\n\n      // Breakpoints used at Server Side Rendering for the initial rendering\n      // These values correspond to the theme breakpoints\n\n\n      // The time to wait after the user stopped typing, measured in ms.\n      // A half second (500ms) debounce can be a helpful starting point.\n      // You want to give the user time to fill out a field, but capture\n      // their attention before they move on past it. 2 second (2000ms)\n      // might be too long depending on how fast people type, and 200ms\n      // would be an eye blink\n\n\n        // intelligentMargin: undefined,\n\n\n        // margin: undefined\n\n\n        // shadow or outline are required for accessibility\n\n          // remove to only have shadow\n\n\n        // outline: { color: undefined, size: undefined },\n\n\n        // face: undefined,\n        // family: undefined,\n\n\n          // size: undefined,\n          // height: undefined,\n\n\n        // deprecate in v3\n        // weight: undefined,\n\n\n    // icon: {\n    //   extennd: undefined,\n    //   matchSize: undefined,\n    //   size: undefined,\n    // },\n\n\n        // border: {\n        //   side: 'bottom',\n        //   color: 'border',\n        // },\n\n\n        // margin: undefined\n\n\n        // background: undefined,\n\n\n        // color: { dark: undefined, light: undefined },\n\n\n        // fontWeight: undefined,\n        // extend: undefined,\n\n      // size: {\n      //   medium: {\n      //     color: undefined,\n      //     fontWeight: undefined,\n      //     textDecoration: undefined,\n      //   },\n      // },\n      // extend: undefined,\n\n\n      // extend: undefined,\n\n\n        // fontWeight: undefined,\n        // extend: undefined\n\n\n      // extend: undefined,\n\n\n        // align: undefined,,\n\n\n          // pad: undefined,\n          // extend: undefined,\n\n\n          // iconOnly: {\n          //   pad: undefined,\n          // },\n\n\n          // iconOnly: {\n          //   pad: undefined,\n          // },\n\n\n          // iconOnly: {\n          //   pad: undefined,\n          // },\n\n\n        // color: { dark: undefined, light: undefined }\n\n\n      // color: { dark: undefined, light: undefined }\n      // default: {\n      //   background: undefined,\n      //   border: undefined,\n      //   color: undefined,\n      //   direction: undefined,\n      //   font: {\n      //     size: undefined,\n      //     weight: undefined,\n      //   },\n      //   icon: undefined,\n      //   padding: {\n      //     vertical: undefined,\n      //     horizontal: undefined,\n      //   },\n      //   reverse: undefined,\n      //   extend: undefined,\n      // },\n      // primary: {\n      //   font: {\n      //     size: undefined,\n      //     weight: undefined,\n      //   },\n      //   background: undefined,\n      //   border: undefined,\n      //   color: undefined,\n      //   direction: undefined,\n      //   icon: undefined,\n      //   padding: {\n      //     vertical: undefined,\n      //     horizontal: undefined,\n      //   },\n      //   reverse: undefined,\n      //   extend: undefined,\n      // },\n      // secondary: {\n      //   font: {\n      //     size: undefined,\n      //     weight: undefined,\n      //   },\n      //   background: undefined,\n      //   border: undefined,\n      //   color: undefined,\n      //   direction: undefined,\n      //   icon: undefined,\n      //   padding: {\n      //     vertical: undefined,\n      //     horizontal: undefined,\n      //   },\n      //   reverse: undefined,\n      //   extend: undefined,\n      // },\n      // option: {\n      //   background: undefined,\n      //   border: undefined,\n      //   color: undefined,\n      //   direction: undefined,\n      //   icon: undefined,\n      //   padding: {\n      //     vertical: undefined,\n      //     horizontal: undefined,\n      //   },\n      //   reverse: undefined,\n      //   extend: undefined,\n      // },\n\n\n        //   border: undefined,\n\n        //   extend: undefined,\n        //   default: {},\n        //   primary: {},\n        //   secondary: {},\n\n\n        //   background: undefined,\n        //   border: undefined,\n        //   color: undefined,\n\n        //   extend: undefined,\n        //   default: {},\n        //   primary: {},\n        //   secondary: {},\n\n      // hover: {\n      //   background: undefined,\n      //   border: undefined,\n      //   color: undefined,\n      //   extend: undefined,\n      //   default: {},\n      //   primary: {},\n      //   secondary: {},\n      // },\n\n\n      // daySize must align with global.size\n\n        // title: {},\n\n\n        // title: {},\n\n\n        // title: {},\n\n\n        // extend: undefined,\n\n      // hover: {\n      //   container: {\n      //     elevation: undefined,\n      //   },\n      // },\n\n\n        // any box props\n\n        // extend: undefined,\n\n\n        // color: { dark: undefined, light: undefined },\n\n\n          // color: { dark: undefined, light: undefined },\n\n\n      // extend: undefined,\n\n\n        // extend: undefined,\n\n\n      // color: { dark: undefined, light: undefined },\n      // extend: undefined,\n      // gap: undefined\n\n\n        // background: undefined,\n        // extend: undefined,\n\n\n        // size: undefined,\n        // extend: undefined,\n\n\n        // checked: undefined,\n        // indeterminate: undefined,\n\n      // pad: undefined,\n\n\n        // background: undefined\n\n\n          // extend: undefined,\n\n\n        // extend: undefined,\n\n\n      // container: {\n      //   // any box props\n      //   extend: undefined,\n      // },\n\n\n        // extend: undefined,\n\n\n      // icon: {\n      //   size: undefined,\n      // },\n\n\n      // body: {\n      //   extend: undefined,\n      // },\n\n        // body: {\n        //    background: undefined,\n        //    extend: undefined,\n        // },\n\n\n          //  extend: undefined,\n\n\n          //  extend: undefined,\n\n\n        // any box props\n\n        // extend: undefined,\n\n\n        // background: undefined,\n        // border: undefined,\n        // color: undefined,\n        // extend: undefined,\n        // font: {\n        //   weight: undefined,\n        //   size: undefined,\n        // },\n\n        // hover: {\n        //   background: undefined,\n        // },\n        // pad: undefined,\n\n\n        // sortable: undefined,\n\n\n        // hover: {\n        //   border: {\n        //     color: undefined,\n        //     side: undefined,\n        //     size: undefined,\n        //   },\n        // },\n\n\n      // extend: undefined,\n\n\n    // drop: {\n    //   extend: undefined,\n    //   maxHeight: undefined,\n    // },\n\n      // background: {},\n\n        // color: undefined,\n\n\n        // extend: undefined,\n\n\n        // extend: undefined,\n\n\n      // pad: {},\n\n\n        // extend: undefined,\n\n\n        // extend: undefined,\n\n      // extend: undefined,\n\n\n      // checkBox: {\n      //   pad: undefined,\n      // },\n\n        // margin: undefined,\n\n\n        // border: {\n        //   color: undefined,\n        // },\n        // label: {\n        //   color: undefined,\n        // },\n\n      // focus: {\n      //   background: {\n      //     color: undefined,\n      //   },\n      //   border: {\n      //     color: undefined,\n      //   },\n      // },\n\n\n        // background: undefined,\n        // container: {}, // any Box props\n        // icon: undefined,\n\n      // extend: undefined,\n\n\n        // container: {}, // any Box props\n        // icon: undefined,\n\n\n        // requiredIndicator: undefined,\n\n\n      // round: undefined,\n\n\n      // extend: undefined\n\n\n      // color: undefined,\n\n        // family: undefined\n\n\n            // family: undefined,\n            // weight: undefined,\n\n\n            // family: undefined,\n            // weight: undefined,\n\n\n            // family: undefined,\n            // weight: undefined,\n\n\n            // family: undefined,\n            // weight: undefined,\n\n\n            // family: undefined,\n            // weight: undefined,\n\n\n            // family: undefined,\n            // weight: undefined,\n\n\n        // intelligentRounding: undefined,\n\n\n        // elevation: undefined,\n\n\n      // extend: undefined,\n\n\n        // backdropFilter: undefined,\n\n\n        // any box props\n\n        // extend: undefined,\n\n\n        // background: undefined,\n\n\n        // extend: undefined,\n\n\n      // extend: undefined,\n\n\n      // container: {\n      //   extend: undefined,\n      // },\n      // extend: undefined,\n      // disabled: { opacity: undefined },\n\n\n      // background: undefined,\n      // item: undefined,\n      // extend: undefined,\n\n\n        // any drop props\n\n\n        // up: undefined,\n        // color: { dark: undefined, light: undefined },\n\n\n      // colors: [] || colors: ['graph-0', 'graph-1', 'graph-2', 'graph-3'],\n      // extend: undefined,\n\n\n        // any text props\n\n\n        // any text props\n\n\n        // any anchor props\n\n\n        // any box props\n\n\n          // any box props\n\n\n        // direction: undefined,\n\n          // any box props\n\n\n        // any box props\n\n\n        // any box props\n\n\n        // any text props\n\n\n        // any text props\n\n\n        // global: {},\n\n\n        // global: {},\n\n\n        // global: {},\n\n\n        // global: {},\n\n\n        // global: {},\n\n\n      // deprecate \"undefined\" in v3\n      // and if undefined, no icon\n\n\n        // background: undefined,\n\n        // global: {},\n        // toast: {},\n\n\n        // any box props\n\n\n        // any box props\n\n\n          // any box props\n\n\n        // gap: undefined,\n\n\n        // any paragraph props\n\n\n        // any heading props\n\n\n        // medium: {\n        //   // pad: undefined,\n        //   // subtitle: {},\n        //   // title: {},\n        // },\n\n\n      // container: {\n      //   // any box props,\n      //   extend: undefined,\n      // },\n\n\n        // color: undefined,\n\n\n        // family: undefined\n\n\n      // dislike: {\n      //   color: undefined,\n      // },\n      // like: {\n      //   color: undefined,\n      // },\n\n\n      // icon: undefined\n\n\n        // background: {\n        //  color: undefined,\n        // },\n        // color: { dark: undefined, light: undefined },\n        // extend: undefined,\n\n      // color: undefined,\n\n        // background: {\n        //   color: undefined,\n        // },\n\n\n        // size: undefined,\n        // extend: undefined,\n\n\n        // circle: undefined,\n\n\n        // weight: undefined,\n\n\n        // extend: undefined\n\n\n      // container: {}, // any box props\n\n\n        //   thumb: {\n        //     color: undefined,\n        //   },\n        //   track: {\n        //     color: undefined,\n        //   },\n\n      // extend: undefined\n\n\n        // opacity: undefined,\n        // lower: {\n        //   color: 'undefined',\n        //   opacity: undefined,\n        // },\n        // upper: {\n        //   color: undefined,\n        //   opacity: undefined,\n        // },\n        // extend: undefined\n\n\n        // color: { dark: undefined, light: undefined },\n        // extend: undefined\n\n\n      // edge: {\n      //   type: undefined,\n      // },\n\n\n      // background: undefined,\n\n\n        // extend: undefined,\n\n\n        // extend: undefined,\n        // open: undefined,\n\n      // emptySearchMessage: {\n      //   container: {}, // any box props\n      //   text: {}, // any text props\n      // },\n\n        // color: { dark: undefined, light: undefined },\n\n\n        // up: undefined\n\n\n      // searchInput: undefined,\n\n\n      // color: undefined,\n\n\n        // background: undefined,\n\n      // background: undefined,\n\n\n          // color: undefined,\n\n\n          // extend: undefined,\n\n\n      // disabled: {\n      //   color: undefined,\n      // },\n      // extend: undefined,\n\n        // background: undefined,\n        // extend: undefined,\n\n\n      // background: undefined,\n      // extend: undefined,\n      // gap: undefined,\n\n        // alignSelf: undefined,\n        // background: undefined,\n        // border: {\n        //   side: undefined,\n        //   size: undefined,\n        //   style: undefined,\n        //   color: undefined,\n        // },\n        // extend: undefined,\n\n\n        // extend: undefined,\n\n\n        // verticalAlign: undefined,\n        // background: undefined,\n        // extend: undefined,\n\n\n        // background: undefined,\n        // border: undefined,\n        // extend: undefined,\n\n      // row: {\n      //   hover: {\n      //     background: undefined,\n      //     color: undefined,\n      //   },\n      // },\n\n\n        // verticalAlign: undefined,\n        // background: undefined,\n        // extend: undefined,\n\n\n      // background: undefined,\n\n\n      // name: undefined,\n\n\n        // family: undefined\n\n\n      // extend: undefined,\n      // disabled: { opacity: undefined },\n\n\n      // extend: undefined,\n      // disabled: { opacity: undefined },\n\n\n        // any Box props\n\n\n        // any props for the drop\n\n\n      // controls: { background: undefined },\n\n\n        // color: { dark: undefined, light: undefined },\n\n\n        // track: { color: undefined }\n\n\nexport const base = generate(24);\n"
    }
}