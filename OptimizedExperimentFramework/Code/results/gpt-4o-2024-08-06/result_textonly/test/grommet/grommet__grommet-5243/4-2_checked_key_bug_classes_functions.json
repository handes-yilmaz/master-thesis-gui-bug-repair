{
    "bug_classes": {
        "1": {
            "class_name": "StyledRadioButtonBox (not found) ",
            "file_path": "src/js/components/RadioButton/StyledRadioButton.js",
            "class_details": [
                {
                    "name": "StyledRadioButtonBox",
                    "start_line": 1,
                    "end_line": 130
                }
            ],
            "class_code": [
                "import styled, { css } from 'styled-components';",
                "",
                "import { focusStyle, normalizeColor } from '../../utils';",
                "import { defaultProps } from '../../default-props';",
                "",
                "const disabledStyle = `",
                "  opacity: 0.5;",
                "  cursor: default;",
                "`;",
                "",
                "const StyledRadioButtonContainer = styled.label`",
                "  display: flex;",
                "  flex-direction: row;",
                "  align-items: center;",
                "  user-select: none;",
                "  width: fit-content;",
                "  ${(props) => props.disabled && disabledStyle} ${(props) =>",
                "    !props.disabled && 'cursor: pointer;'}",
                "",
                "  :hover input:not([disabled]) + div,",
                "  :hover input:not([disabled]) + span {",
                "    border-color: ${(props) =>",
                "      normalizeColor(props.theme.radioButton.hover.border.color, props.theme)};",
                "  }",
                "  :hover {",
                "    background-color: ${(props) =>",
                "      normalizeColor(",
                "        !props.disabled &&",
                "          props.theme.radioButton.hover &&",
                "          props.theme.radioButton.hover.background &&",
                "          props.theme.radioButton.hover.background.color,",
                "        props.theme,",
                "      )};",
                "  }",
                "  // when the RadioButton has focus but there is no focusIndicator,",
                "  // apply the hover styling instead so that keyboard users know",
                "  // which RadioButton is active",
                "  ${(props) =>",
                "    props.focus &&",
                "    !props.focusIndicator &&",
                "    `",
                "      input:not([disabled]) + div,",
                "      input:not([disabled]) + span {",
                "      border-color: ${normalizeColor(",
                "        props.theme.radioButton.hover.border.color,",
                "        props.theme,",
                "      )};",
                "    }",
                "    background-color: ${normalizeColor(",
                "      !props.disabled &&",
                "        props.theme.radioButton.hover &&",
                "        props.theme.radioButton.hover.background &&",
                "        props.theme.radioButton.hover.background.color,",
                "      props.theme,",
                "    )};",
                "    `}",
                "  ${(props) => props.theme.radioButton.container.extend};",
                "`;",
                "",
                "StyledRadioButtonContainer.defaultProps = {};",
                "Object.setPrototypeOf(StyledRadioButtonContainer.defaultProps, defaultProps);",
                "",
                "const StyledRadioButtonInput = styled.input`",
                "  opacity: 0;",
                "  -moz-appearance: none;",
                "  width: 0;",
                "  height: 0;",
                "  margin: 0;",
                "  ${(props) => !props.disabled && 'cursor: pointer;'};",
                "`;",
                "",
                "StyledRadioButtonInput.defaultProps = {};",
                "Object.setPrototypeOf(StyledRadioButtonInput.defaultProps, defaultProps);",
                "",
                "const StyledRadioButtonLabel = styled.span`",
                "  ${(props) =>",
                "    props.theme.radioButton.font.weight &&",
                "    css`",
                "      font-weight: ${props.theme.radioButton.font.weight};",
                "    `}",
                "`;",
                "",
                "StyledRadioButtonLabel.defaultProps = {};",
                "Object.setPrototypeOf(StyledRadioButtonLabel.defaultProps, defaultProps);",
                "",
                "const StyledRadioButtonIcon = styled.svg`",
                "  box-sizing: border-box;",
                "  width: ${(props) =>",
                "    props.theme.radioButton.icon.size || props.theme.radioButton.size};",
                "  height: ${(props) =>",
                "    props.theme.radioButton.icon.size || props.theme.radioButton.size};",
                "  fill: ${(props) =>",
                "    normalizeColor(",
                "      props.theme.radioButton.check.color || 'control',",
                "      props.theme,",
                "    )};",
                "  ${(props) => props.theme.radioButton.icon.extend};",
                "`;",
                "",
                "StyledRadioButtonIcon.defaultProps = {};",
                "Object.setPrototypeOf(StyledRadioButtonIcon.defaultProps, defaultProps);",
                "",
                "const StyledRadioButtonBox = styled.div`",
                "  background-color: ${(props) =>",
                "    normalizeColor(",
                "      props.theme.radioButton.check.background?.color,",
                "      props.theme,",
                "    )};",
                "  ${(props) => props.focus && focusStyle()};",
                "  ${(props) => props.theme.radioButton.check.extend};",
                "`;",
                "",
                "StyledRadioButtonBox.defaultProps = {};",
                "Object.setPrototypeOf(StyledRadioButtonBox.defaultProps, defaultProps);",
                "",
                "const StyledRadioButton = styled.div`",
                "  ${(props) => props.theme.radioButton && props.theme.radioButton.extend};",
                "`;",
                "",
                "StyledRadioButton.defaultProps = {};",
                "Object.setPrototypeOf(StyledRadioButton.defaultProps, defaultProps);",
                "",
                "export {",
                "  StyledRadioButtonContainer,",
                "  StyledRadioButtonInput,",
                "  StyledRadioButtonLabel,",
                "  StyledRadioButtonIcon,",
                "  StyledRadioButtonBox,",
                "  StyledRadioButton,",
                "};"
            ]
        },
        "2": {
            "class_name": "RadioButton (not found) ",
            "file_path": "src/js/components/RadioButton/RadioButton.js",
            "class_details": [
                {
                    "name": "RadioButton",
                    "start_line": 1,
                    "end_line": 124
                }
            ],
            "class_code": [
                "import React, { forwardRef, useContext, useState } from 'react';",
                "import { ThemeContext } from 'styled-components';",
                "",
                "import { Box } from '../Box';",
                "import { defaultProps } from '../../default-props';",
                "import { normalizeColor, removeUndefined } from '../../utils';",
                "",
                "import {",
                "  StyledRadioButton,",
                "  StyledRadioButtonContainer,",
                "  StyledRadioButtonIcon,",
                "  StyledRadioButtonInput,",
                "  StyledRadioButtonLabel,",
                "  StyledRadioButtonBox,",
                "} from './StyledRadioButton';",
                "import { RadioButtonPropTypes } from './propTypes';",
                "",
                "const RadioButton = forwardRef(",
                "  (",
                "    {",
                "      a11yTitle,",
                "      checked,",
                "      children,",
                "      disabled,",
                "      focus,",
                "      focusIndicator,",
                "      id,",
                "      label,",
                "      name,",
                "      onChange,",
                "      ...rest",
                "    },",
                "    ref,",
                "  ) => {",
                "    const theme = useContext(ThemeContext) || defaultProps.theme;",
                "    const [hover, setHover] = useState();",
                "    const normalizedLabel =",
                "      typeof label === 'string' ? (",
                "        <StyledRadioButtonLabel>{label}</StyledRadioButtonLabel>",
                "      ) : (",
                "        label",
                "      );",
                "",
                "    const Icon = theme.radioButton.icons.circle;",
                "    let borderColor = normalizeColor(theme.radioButton.border.color, theme);",
                "    if (checked) {",
                "      borderColor = normalizeColor(theme.radioButton.color || 'control', theme);",
                "    }",
                "",
                "    return (",
                "      <StyledRadioButtonContainer",
                "        {...removeUndefined({ htmlFor: id, disabled })}",
                "        onClick={(event) => {",
                "          // prevents clicking on the label trigging the event twice",
                "          // https://stackoverflow.com/questions/24501497/why-the-onclick-element-will-trigger-twice-for-label-element",
                "          if (event.target.type !== 'radio') {",
                "            event.stopPropagation();",
                "          }",
                "        }}",
                "        focus={focus}",
                "        focusIndicator={focusIndicator}",
                "        onMouseEnter={() => setHover(true)}",
                "        onMouseLeave={() => setHover(false)}",
                "      >",
                "        <StyledRadioButton",
                "          as={Box}",
                "          flex={false}",
                "          margin={",
                "            label ? { right: theme.radioButton.gap || 'small' } : undefined",
                "          }",
                "        >",
                "          <StyledRadioButtonInput",
                "            aria-label={a11yTitle}",
                "            {...rest}",
                "            ref={ref}",
                "            type=\"radio\"",
                "            {...removeUndefined({",
                "              id,",
                "              name,",
                "              checked,",
                "              disabled,",
                "              onChange,",
                "            })}",
                "          />",
                "          {children ? (",
                "            children({ checked, focus: focus && focusIndicator, hover })",
                "          ) : (",
                "            <StyledRadioButtonBox",
                "              focus={focus && focusIndicator}",
                "              as={Box}",
                "              align=\"center\"",
                "              justify=\"center\"",
                "              width={theme.radioButton.size}",
                "              height={theme.radioButton.size}",
                "              border={{",
                "                size: theme.radioButton.border.width,",
                "                color: borderColor,",
                "              }}",
                "              round={theme.radioButton.check.radius}",
                "            >",
                "              {checked &&",
                "                (Icon ? (",
                "                  <Icon theme={theme} as={StyledRadioButtonIcon} />",
                "                ) : (",
                "                  <StyledRadioButtonIcon",
                "                    viewBox=\"0 0 24 24\"",
                "                    preserveAspectRatio=\"xMidYMid meet\"",
                "                  >",
                "                    <circle cx={12} cy={12} r={6} />",
                "                  </StyledRadioButtonIcon>",
                "                ))}",
                "            </StyledRadioButtonBox>",
                "          )}",
                "        </StyledRadioButton>",
                "        {normalizedLabel}",
                "      </StyledRadioButtonContainer>",
                "    );",
                "  },",
                ");",
                "",
                "RadioButton.displayName = 'RadioButton';",
                "RadioButton.propTypes = RadioButtonPropTypes;",
                "",
                "export { RadioButton };"
            ]
        }
    },
    "bug_functions": {
        "3": {
            "function_name": "RadioButton (not found) ",
            "file_path": "src/js/components/RadioButton/RadioButton.js",
            "function_details": [
                {
                    "name": "RadioButton",
                    "start_line": 1,
                    "end_line": 124
                }
            ],
            "function_code": [
                "import React, { forwardRef, useContext, useState } from 'react';",
                "import { ThemeContext } from 'styled-components';",
                "",
                "import { Box } from '../Box';",
                "import { defaultProps } from '../../default-props';",
                "import { normalizeColor, removeUndefined } from '../../utils';",
                "",
                "import {",
                "  StyledRadioButton,",
                "  StyledRadioButtonContainer,",
                "  StyledRadioButtonIcon,",
                "  StyledRadioButtonInput,",
                "  StyledRadioButtonLabel,",
                "  StyledRadioButtonBox,",
                "} from './StyledRadioButton';",
                "import { RadioButtonPropTypes } from './propTypes';",
                "",
                "const RadioButton = forwardRef(",
                "  (",
                "    {",
                "      a11yTitle,",
                "      checked,",
                "      children,",
                "      disabled,",
                "      focus,",
                "      focusIndicator,",
                "      id,",
                "      label,",
                "      name,",
                "      onChange,",
                "      ...rest",
                "    },",
                "    ref,",
                "  ) => {",
                "    const theme = useContext(ThemeContext) || defaultProps.theme;",
                "    const [hover, setHover] = useState();",
                "    const normalizedLabel =",
                "      typeof label === 'string' ? (",
                "        <StyledRadioButtonLabel>{label}</StyledRadioButtonLabel>",
                "      ) : (",
                "        label",
                "      );",
                "",
                "    const Icon = theme.radioButton.icons.circle;",
                "    let borderColor = normalizeColor(theme.radioButton.border.color, theme);",
                "    if (checked) {",
                "      borderColor = normalizeColor(theme.radioButton.color || 'control', theme);",
                "    }",
                "",
                "    return (",
                "      <StyledRadioButtonContainer",
                "        {...removeUndefined({ htmlFor: id, disabled })}",
                "        onClick={(event) => {",
                "          // prevents clicking on the label trigging the event twice",
                "          // https://stackoverflow.com/questions/24501497/why-the-onclick-element-will-trigger-twice-for-label-element",
                "          if (event.target.type !== 'radio') {",
                "            event.stopPropagation();",
                "          }",
                "        }}",
                "        focus={focus}",
                "        focusIndicator={focusIndicator}",
                "        onMouseEnter={() => setHover(true)}",
                "        onMouseLeave={() => setHover(false)}",
                "      >",
                "        <StyledRadioButton",
                "          as={Box}",
                "          flex={false}",
                "          margin={",
                "            label ? { right: theme.radioButton.gap || 'small' } : undefined",
                "          }",
                "        >",
                "          <StyledRadioButtonInput",
                "            aria-label={a11yTitle}",
                "            {...rest}",
                "            ref={ref}",
                "            type=\"radio\"",
                "            {...removeUndefined({",
                "              id,",
                "              name,",
                "              checked,",
                "              disabled,",
                "              onChange,",
                "            })}",
                "          />",
                "          {children ? (",
                "            children({ checked, focus: focus && focusIndicator, hover })",
                "          ) : (",
                "            <StyledRadioButtonBox",
                "              focus={focus && focusIndicator}",
                "              as={Box}",
                "              align=\"center\"",
                "              justify=\"center\"",
                "              width={theme.radioButton.size}",
                "              height={theme.radioButton.size}",
                "              border={{",
                "                size: theme.radioButton.border.width,",
                "                color: borderColor,",
                "              }}",
                "              round={theme.radioButton.check.radius}",
                "            >",
                "              {checked &&",
                "                (Icon ? (",
                "                  <Icon theme={theme} as={StyledRadioButtonIcon} />",
                "                ) : (",
                "                  <StyledRadioButtonIcon",
                "                    viewBox=\"0 0 24 24\"",
                "                    preserveAspectRatio=\"xMidYMid meet\"",
                "                  >",
                "                    <circle cx={12} cy={12} r={6} />",
                "                  </StyledRadioButtonIcon>",
                "                ))}",
                "            </StyledRadioButtonBox>",
                "          )}",
                "        </StyledRadioButton>",
                "        {normalizedLabel}",
                "      </StyledRadioButtonContainer>",
                "    );",
                "  },",
                ");",
                "",
                "RadioButton.displayName = 'RadioButton';",
                "RadioButton.propTypes = RadioButtonPropTypes;",
                "",
                "export { RadioButton };"
            ]
        }
    }
}