{
    "src/js/themes/dark.js": [
        "import { rgba } from 'polished';",
        "import { css } from 'styled-components';",
        "",
        "import { colorForName, deepFreeze } from '../utils';",
        "",
        "const brandColor = '#FFCA58';",
        "const accentColors = ['#FD6FFF', '#60EB9F', '#60EBE1', '#FFCA58'];",
        "const neutralColors = ['#EB6060', '#01C781', '#6095EB', '#FFB200'];",
        "const statusColors = {",
        "  critical: '#FF3333',",
        "  error: '#FF3333',",
        "  warning: '#F7E464',",
        "  ok: '#7DD892',",
        "  unknown: '#a8a8a8',",
        "  disabled: '#a8a8a8',",
        "};",
        "const lightColors = ['#333333', '#444444', '#555555', '#666666', '#777777', '#999999'];",
        "const darkColors = ['#F6F6F6', '#EEEEEE', '#DDDDDD', '#CCCCCC', '#BBBBBB', '#AAAAAA'];",
        "const backgroundColor = '#111111';",
        "const textColor = '#eeeeee';",
        "const borderColor = 'rgba(255, 255, 255, 0.33)';",
        "const focusColor = accentColors[0];",
        "const activeColor = rgba('#666666', 0.5);",
        "",
        "const colors = {",
        "  active: activeColor,",
        "  accent: accentColors,",
        "  background: backgroundColor,",
        "  black: '#000000',",
        "  border: borderColor,",
        "  brand: brandColor,",
        "  dark: darkColors,",
        "  darkBackground: {",
        "    text: textColor,",
        "  },",
        "  focus: focusColor,",
        "  light: lightColors,",
        "  lightBackground: {",
        "    text: '#000000',",
        "  },",
        "  neutral: neutralColors,",
        "  placeholder: '#AAAAAA',",
        "  status: statusColors,",
        "  text: textColor,",
        "  white: '#FFFFFF',",
        "};",
        "",
        "const colorArray = (array, prefix) =>",
        "  array.forEach((color, index) => {",
        "    colors[`${prefix}-${index + 1}`] = color;",
        "  });",
        "",
        "colorArray(accentColors, 'accent');",
        "colorArray(darkColors, 'dark');",
        "colorArray(lightColors, 'light');",
        "colorArray(neutralColors, 'neutral');",
        "Object.keys(statusColors).forEach((color) => {",
        "  colors[`status-${color}`] = statusColors[color];",
        "});",
        "",
        "export default deepFreeze({",
        "  global: {",
        "    colors,",
        "    focus: {",
        "      border: {",
        "        color: css`${props => colorForName('focus', props.theme)}`,",
        "        width: '2px',",
        "      },",
        "    },",
        "    hover: {",
        "      backgroundColor: css`${props => props.theme.global.colors.active}`,",
        "      textColor: '#FFFFFF',",
        "    },",
        "    input: {",
        "      border: {",
        "        width: '1px',",
        "        radius: '4px',",
        "        color: css`${props => props.theme.global.colors.border}`,",
        "      },",
        "      weight: 700,",
        "    },",
        "  },",
        "  icon: {",
        "    color: textColor,",
        "    colors,",
        "  },",
        "  layer: {",
        "    backgroundColor,",
        "    overlayBackgroundColor: 'rgba(48, 48, 48, 0.5)',",
        "  },",
        "});"
    ],
    "src/js/components/Select/Select.js": [
        "import React, { Component } from 'react';",
        "import { compose } from 'recompose';",
        "import styled from 'styled-components';",
        "",
        "import { Box } from '../Box';",
        "import { DropButton } from '../DropButton';",
        "import { Keyboard } from '../Keyboard';",
        "import { TextInput } from '../TextInput';",
        "",
        "import { withForwardRef, withTheme } from '../hocs';",
        "",
        "import SelectContainer from './SelectContainer';",
        "import doc from './doc';",
        "",
        "const SelectTextInput = styled(TextInput)`cursor: pointer;`;",
        "",
        "class Select extends Component {",
        "  static defaultProps = {",
        "    closeOnChange: true,",
        "    dropAlign: { top: 'bottom', left: 'left' },",
        "    messages: { multiple: 'multiple' },",
        "  }",
        "",
        "  state = { open: false }",
        "",
        "  onOpen = () => {",
        "    const { onOpen } = this.props;",
        "    this.setState({ open: true }, () => {",
        "      if (onOpen) {",
        "        onOpen();",
        "      }",
        "    });",
        "  }",
        "",
        "  onClose = () => {",
        "    const { onClose } = this.props;",
        "    this.setState({ open: false }, () => {",
        "      if (onClose) {",
        "        onClose();",
        "      }",
        "    });",
        "  }",
        "",
        "  render() {",
        "    const {",
        "      a11yTitle,",
        "      children,",
        "      closeOnChange,",
        "      disabled,",
        "      dropAlign,",
        "      dropTarget,",
        "      forwardRef,",
        "      messages,",
        "      onChange,",
        "      onClose,",
        "      placeholder,",
        "      plain,",
        "      size,",
        "      theme,",
        "      value,",
        "      ...rest",
        "    } = this.props;",
        "    const { open } = this.state;",
        "",
        "    const onSelectChange = (event, ...args) => {",
        "      if (closeOnChange) {",
        "        this.onClose();",
        "      }",
        "      if (onChange) {",
        "        onChange(event, ...args);",
        "      }",
        "    };",
        "",
        "    const SelectIcon = theme.select.icons.down;",
        "    let selectValue;",
        "    let textValue;",
        "    if (!React.isValidElement(value)) {",
        "      if (Array.isArray(value)) {",
        "        if (value.length > 1) {",
        "          if (React.isValidElement(value[0])) {",
        "            selectValue = value;",
        "          } else {",
        "            textValue = messages.multiple;",
        "          }",
        "        } else if (value.length === 1) {",
        "          if (React.isValidElement(value[0])) {",
        "            selectValue = value[0];",
        "          } else {",
        "            textValue = value[0];",
        "          }",
        "        } else {",
        "          textValue = '';",
        "        }",
        "      } else {",
        "        textValue = value;",
        "      }",
        "    } else {",
        "      selectValue = value;",
        "    }",
        "",
        "    return (",
        "      <Keyboard onDown={this.onOpen} onUp={this.onOpen}>",
        "        <DropButton",
        "          ref={forwardRef}",
        "          disabled={disabled}",
        "          dropAlign={dropAlign}",
        "          dropTarget={dropTarget}",
        "          {...rest}",
        "          open={open}",
        "          onOpen={this.onOpen}",
        "          onClose={this.onClose}",
        "          a11yTitle={`${a11yTitle}${typeof value === 'string' ? `, ${value}` : ''}`}",
        "          dropContent={<SelectContainer {...this.props} onChange={onSelectChange} />}",
        "        >",
        "          <Box",
        "            align='center'",
        "            border={!plain ? 'all' : undefined}",
        "            direction='row'",
        "            justify='between'",
        "          >",
        "            <Box direction='row' flex={true} basis='auto'>",
        "              {selectValue || (",
        "                <SelectTextInput",
        "                  ref={(ref) => { this.inputRef = ref; }}",
        "                  {...rest}",
        "                  tabIndex='-1'",
        "                  type='text'",
        "                  placeholder={placeholder}",
        "                  plain={true}",
        "                  readOnly={true}",
        "                  value={textValue}",
        "                  size={size}",
        "                />",
        "              )}",
        "            </Box>",
        "            <Box",
        "              margin={{ horizontal: 'small' }}",
        "              flex={false}",
        "              style={{ minWidth: 'auto' }}",
        "            >",
        "              <SelectIcon color='brand' size={size} />",
        "            </Box>",
        "          </Box>",
        "        </DropButton>",
        "      </Keyboard>",
        "    );",
        "  }",
        "}",
        "",
        "if (process.env.NODE_ENV !== 'production') {",
        "  doc(Select);",
        "}",
        "",
        "export default compose(",
        "  withTheme,",
        "  withForwardRef,",
        ")(Select);"
    ],
    "src/js/components/Select/stories/components/icons/ArrowDown.js": [
        "import React from 'react';",
        "",
        "const ArrowDown = props => (",
        "  <svg width='10' height='20' fill='rgba(0, 0, 0, 0.54)' {...props}>",
        "    <path d='m0,7.5l5,5l5,-5l-10,0z' />",
        "  </svg>",
        ");",
        "",
        "export default ArrowDown;"
    ]
}