{
    "1": {
        "bug_file": "src/js/components/Select/Select.js",
        "compressed": "NO",
        "line_numbers": 157,
        "compressed_line_numbers": 157,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport styled from 'styled-components';\n\nimport { Box } from '../Box';\nimport { DropButton } from '../DropButton';\nimport { Keyboard } from '../Keyboard';\nimport { TextInput } from '../TextInput';\n\nimport { withForwardRef, withTheme } from '../hocs';\n\nimport SelectContainer from './SelectContainer';\nimport doc from './doc';\n\nconst SelectTextInput = styled(TextInput)`cursor: pointer;`;\n\nclass Select extends Component {\n  static defaultProps = {\n    closeOnChange: true,\n    dropAlign: { top: 'bottom', left: 'left' },\n    messages: { multiple: 'multiple' },\n  }\n\n  state = { open: false }\n\n  onOpen = () => {\n    const { onOpen } = this.props;\n    this.setState({ open: true }, () => {\n      if (onOpen) {\n        onOpen();\n      }\n    });\n  }\n\n  onClose = () => {\n    const { onClose } = this.props;\n    this.setState({ open: false }, () => {\n      if (onClose) {\n        onClose();\n      }\n    });\n  }\n\n  render() {\n    const {\n      a11yTitle,\n      children,\n      closeOnChange,\n      disabled,\n      dropAlign,\n      dropTarget,\n      forwardRef,\n      messages,\n      onChange,\n      onClose,\n      placeholder,\n      plain,\n      size,\n      theme,\n      value,\n      ...rest\n    } = this.props;\n    const { open } = this.state;\n\n    const onSelectChange = (event, ...args) => {\n      if (closeOnChange) {\n        this.onClose();\n      }\n      if (onChange) {\n        onChange(event, ...args);\n      }\n    };\n\n    const SelectIcon = theme.select.icons.down;\n    let selectValue;\n    let textValue;\n    if (!React.isValidElement(value)) {\n      if (Array.isArray(value)) {\n        if (value.length > 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value;\n          } else {\n            textValue = messages.multiple;\n          }\n        } else if (value.length === 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value[0];\n          } else {\n            textValue = value[0];\n          }\n        } else {\n          textValue = '';\n        }\n      } else {\n        textValue = value;\n      }\n    } else {\n      selectValue = value;\n    }\n\n    return (\n      <Keyboard onDown={this.onOpen} onUp={this.onOpen}>\n        <DropButton\n          ref={forwardRef}\n          disabled={disabled}\n          dropAlign={dropAlign}\n          dropTarget={dropTarget}\n          {...rest}\n          open={open}\n          onOpen={this.onOpen}\n          onClose={this.onClose}\n          a11yTitle={`${a11yTitle}${typeof value === 'string' ? `, ${value}` : ''}`}\n          dropContent={<SelectContainer {...this.props} onChange={onSelectChange} />}\n        >\n          <Box\n            align='center'\n            border={!plain ? 'all' : undefined}\n            direction='row'\n            justify='between'\n          >\n            <Box direction='row' flex={true} basis='auto'>\n              {selectValue || (\n                <SelectTextInput\n                  ref={(ref) => { this.inputRef = ref; }}\n                  {...rest}\n                  tabIndex='-1'\n                  type='text'\n                  placeholder={placeholder}\n                  plain={true}\n                  readOnly={true}\n                  value={textValue}\n                  size={size}\n                />\n              )}\n            </Box>\n            <Box\n              margin={{ horizontal: 'small' }}\n              flex={false}\n              style={{ minWidth: 'auto' }}\n            >\n              <SelectIcon color='brand' size={size} />\n            </Box>\n          </Box>\n        </DropButton>\n      </Keyboard>\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  doc(Select);\n}\n\nexport default compose(\n  withTheme,\n  withForwardRef,\n)(Select);"
    },
    "2": {
        "bug_file": "src/js/components/Select/SelectContainer.js",
        "compressed": "NO",
        "line_numbers": 273,
        "compressed_line_numbers": 273,
        "compressed_bug_file_content": "import React, { createRef, Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport styled from 'styled-components';\n\nimport {\n  debounce,\n  isNodeAfterScroll,\n  isNodeBeforeScroll,\n  setFocusWithoutScroll,\n} from '../../utils';\n\nimport { withTheme } from '../hocs';\n\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\n\nconst ContainerBox = styled(Box)`\n  max-height: inherit;\n\n  /* IE11 hack to get drop contents to not overflow */\n  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n    width: 100%;\n  }\n`;\n\nconst OptionsBox = styled(Box)`\n  scroll-behavior: smooth;\n`;\n\nclass SelectContainer extends Component {\n  static defaultProps = {\n    value: '',\n  }\n\n  optionsRef = {}\n  searchRef = createRef()\n  selectRef = createRef()\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { options, value } = nextProps;\n\n    if (prevState.activeIndex === -1 && prevState.search === '' && options && value) {\n      const optionValue = Array.isArray(value) && value.length ? value[0] : value;\n      const activeIndex = options.indexOf(optionValue);\n      return {\n        activeIndex,\n      };\n    } else if (prevState.activeIndex === -1 && prevState.search !== '') {\n      return {\n        activeIndex: 0,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    search: '',\n    activeIndex: -1,\n  }\n\n  componentDidMount() {\n    const { onSearch } = this.props;\n    const { activeIndex } = this.state;\n    // timeout need to send the operation through event loop and allow time to the portal\n    // to be available\n    setTimeout(() => {\n      const selectNode = findDOMNode(this.selectRef.current);\n      if (onSearch) {\n        const input = findDOMNode(this.searchRef.current);\n        if (input && input.focus) {\n          setFocusWithoutScroll(input);\n        }\n      } else if (this.selectRef) {\n        setFocusWithoutScroll(findDOMNode(this.selectRef.current));\n      }\n\n      // scroll to active option if it is below the fold\n      if (activeIndex >= 0) {\n        const optionNode = findDOMNode(this.optionsRef[activeIndex]);\n        const { bottom: containerBottom } = selectNode.getBoundingClientRect();\n        const { bottom: optionTop } = optionNode.getBoundingClientRect();\n\n        if (containerBottom < optionTop) {\n          optionNode.scrollIntoView();\n        }\n      }\n    }, 0);\n  }\n\n  onInput = (event) => {\n    this.setState(\n      {\n        search: event.target.value,\n        activeIndex: -1,\n      },\n      () => this.onSearch(this.state.search)\n    );\n  }\n\n  // wait 300ms of idle time before notifying that the search changed\n  // 300ms seems like the right amount to wait for after the used stopped typing\n  onSearch = debounce(search => this.props.onSearch(search), 300)\n\n  selectOption = (option, index) => {\n    const { multiple, onChange, options, selected, value } = this.props;\n\n    if (onChange) {\n      let nextValue = option;\n      let nextSelected = index;\n      if (multiple) {\n        nextValue = [];\n        nextSelected = [];\n        let removed = false;\n        let selectedIndexes = [];\n\n        if (Array.isArray(selected)) {\n          selectedIndexes = selected;\n        } else if (Array.isArray(value)) {\n          selectedIndexes = value.map(v => options.indexOf(v));\n        }\n\n        selectedIndexes.forEach((selectedIndex) => {\n          if (selectedIndex === index) {\n            removed = true;\n          } else {\n            nextValue.push(options[selectedIndex]);\n            nextSelected.push(selectedIndex);\n          }\n        });\n        if (!removed) {\n          nextValue.push(option);\n          nextSelected.push(index);\n        }\n      }\n\n      onChange({\n        target: findDOMNode(this.searchRef.current),\n        option,\n        value: nextValue,\n        selected: nextSelected,\n      });\n    }\n  }\n\n  onNextOption = (event) => {\n    const { options } = this.props;\n    const { activeIndex } = this.state;\n    event.preventDefault();\n    const index = Math.min(activeIndex + 1, options.length - 1);\n    this.setState({ activeIndex: index }, () => {\n      const buttonNode = findDOMNode(this.optionsRef[index]);\n      const selectNode = findDOMNode(this.selectRef.current);\n\n      if (isNodeAfterScroll(buttonNode, selectNode) && selectNode.scrollBy) {\n        selectNode.scrollBy(0, buttonNode.getBoundingClientRect().height);\n      }\n    });\n  }\n\n  onPreviousOption = (event) => {\n    const { activeIndex } = this.state;\n    event.preventDefault();\n    const index = Math.max(activeIndex - 1, 0);\n    this.setState({ activeIndex: index }, () => {\n      const buttonNode = findDOMNode(this.optionsRef[index]);\n      const selectNode = findDOMNode(this.selectRef.current);\n\n      if (isNodeBeforeScroll(buttonNode, selectNode) && selectNode.scrollBy) {\n        selectNode.scrollBy(0, -buttonNode.getBoundingClientRect().height);\n      }\n    });\n  }\n\n  onSelectOption = (event) => {\n    const { options } = this.props;\n    const { activeIndex } = this.state;\n    if (activeIndex >= 0) {\n      event.preventDefault(); // prevent submitting forms\n      this.selectOption(options[activeIndex], activeIndex);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      id,\n      name,\n      onKeyDown,\n      onSearch,\n      options,\n      searchPlaceholder,\n      selected,\n      theme,\n      value,\n    } = this.props;\n    const { activeIndex, search } = this.state;\n\n    const customSearchInput = theme.select.searchInput;\n    const SelectTextInput = customSearchInput || TextInput;\n\n    return (\n      <Keyboard\n        onEnter={this.onSelectOption}\n        onUp={this.onPreviousOption}\n        onDown={this.onNextOption}\n        onKeyDown={onKeyDown}\n      >\n        <ContainerBox\n          id={id ? `${id}__select-drop` : undefined}\n          theme={theme}\n        >\n          {onSearch && (\n            <Box pad={!customSearchInput ? 'xsmall' : undefined} flex={false}>\n              <SelectTextInput\n                focusIndicator={!customSearchInput}\n                size='small'\n                ref={this.searchRef}\n                type='search'\n                value={search}\n                placeholder={searchPlaceholder}\n                onInput={this.onInput}\n              />\n            </Box>\n          )}\n          <OptionsBox\n            flex='shrink'\n            role='menubar'\n            tabIndex='-1'\n            ref={this.selectRef}\n            overflow='auto'\n            theme={theme}\n          >\n            <InfiniteScroll items={options} step={theme.select.step}>\n              {(option, index) => (\n                <Box key={`option_${name || ''}_${index}`} flex={false}>\n                  <Button\n                    role='menuitem'\n                    ref={(ref) => { this.optionsRef[index] = ref; }}\n                    active={\n                      selected === index ||\n                      (Array.isArray(selected) && selected.indexOf(index) !== -1) ||\n                      activeIndex === index ||\n                      (option && option === value) ||\n                      (option && Array.isArray(value) && value.indexOf(option) !== -1)\n                    }\n                    onClick={() => this.selectOption(option, index)}\n                    hoverIndicator='background'\n                  >\n                    {children ? children(option, index, options) : (\n                      <Box align='start' pad='small'>\n                        <Text margin='none'>\n                          {(option !== null && option !== undefined) ?\n                            option.toString() : undefined}\n                        </Text>\n                      </Box>\n                    )}\n                  </Button>\n                </Box>\n              )}\n            </InfiniteScroll>\n          </OptionsBox>\n        </ContainerBox>\n      </Keyboard>\n    );\n  }\n}\n\nexport default withTheme(SelectContainer);"
    },
    "3": {
        "bug_file": "src/js/components/Select/stories/components/icons/ArrowDown.js",
        "compressed": "NO",
        "line_numbers": 9,
        "compressed_line_numbers": 9,
        "compressed_bug_file_content": "import React from 'react';\n\nconst ArrowDown = props => (\n  <svg width='10' height='20' fill='rgba(0, 0, 0, 0.54)' {...props}>\n    <path d='m0,7.5l5,5l5,-5l-10,0z' />\n  </svg>\n);\n\nexport default ArrowDown;"
    },
    "4": {
        "bug_file": "src/js/themes/dark.js",
        "compressed": "NO",
        "line_numbers": 91,
        "compressed_line_numbers": 91,
        "compressed_bug_file_content": "import { rgba } from 'polished';\nimport { css } from 'styled-components';\n\nimport { colorForName, deepFreeze } from '../utils';\n\nconst brandColor = '#FFCA58';\nconst accentColors = ['#FD6FFF', '#60EB9F', '#60EBE1', '#FFCA58'];\nconst neutralColors = ['#EB6060', '#01C781', '#6095EB', '#FFB200'];\nconst statusColors = {\n  critical: '#FF3333',\n  error: '#FF3333',\n  warning: '#F7E464',\n  ok: '#7DD892',\n  unknown: '#a8a8a8',\n  disabled: '#a8a8a8',\n};\nconst lightColors = ['#333333', '#444444', '#555555', '#666666', '#777777', '#999999'];\nconst darkColors = ['#F6F6F6', '#EEEEEE', '#DDDDDD', '#CCCCCC', '#BBBBBB', '#AAAAAA'];\nconst backgroundColor = '#111111';\nconst textColor = '#eeeeee';\nconst borderColor = 'rgba(255, 255, 255, 0.33)';\nconst focusColor = accentColors[0];\nconst activeColor = rgba('#666666', 0.5);\n\nconst colors = {\n  active: activeColor,\n  accent: accentColors,\n  background: backgroundColor,\n  black: '#000000',\n  border: borderColor,\n  brand: brandColor,\n  dark: darkColors,\n  darkBackground: {\n    text: textColor,\n  },\n  focus: focusColor,\n  light: lightColors,\n  lightBackground: {\n    text: '#000000',\n  },\n  neutral: neutralColors,\n  placeholder: '#AAAAAA',\n  status: statusColors,\n  text: textColor,\n  white: '#FFFFFF',\n};\n\nconst colorArray = (array, prefix) =>\n  array.forEach((color, index) => {\n    colors[`${prefix}-${index + 1}`] = color;\n  });\n\ncolorArray(accentColors, 'accent');\ncolorArray(darkColors, 'dark');\ncolorArray(lightColors, 'light');\ncolorArray(neutralColors, 'neutral');\nObject.keys(statusColors).forEach((color) => {\n  colors[`status-${color}`] = statusColors[color];\n});\n\nexport default deepFreeze({\n  global: {\n    colors,\n    focus: {\n      border: {\n        color: css`${props => colorForName('focus', props.theme)}`,\n        width: '2px',\n      },\n    },\n    hover: {\n      backgroundColor: css`${props => props.theme.global.colors.active}`,\n      textColor: '#FFFFFF',\n    },\n    input: {\n      border: {\n        width: '1px',\n        radius: '4px',\n        color: css`${props => props.theme.global.colors.border}`,\n      },\n      weight: 700,\n    },\n  },\n  icon: {\n    color: textColor,\n    colors,\n  },\n  layer: {\n    backgroundColor,\n    overlayBackgroundColor: 'rgba(48, 48, 48, 0.5)',\n  },\n});"
    },
    "5": {
        "bug_file": "src/js/utils/colors.js",
        "compressed": "NO",
        "line_numbers": 53,
        "compressed_line_numbers": 53,
        "compressed_bug_file_content": "\nexport const colorForName = (name, theme) => {\n  let color = theme.global.colors[name];\n  if (color) {\n    return color;\n  }\n  const [kind, index] = name.split('-');\n  const colorSet = theme.global.colors[kind];\n  if (Array.isArray(colorSet)) {\n    color = colorSet[index - 1];\n  } else if (typeof colorSet === 'object') {\n    color = colorSet[index];\n  } else if (typeof colorSet === 'string') {\n    color = colorSet;\n  } else {\n    color = name;\n  }\n  return color;\n};\n\nfunction parseHexToRGB(color) {\n  // https://stackoverflow.com/a/42429333\n  return color.match(/[A-Za-z0-9]{2}/g).map(v => parseInt(v, 16));\n}\n\nfunction getRGBArray(color) {\n  if (/^#/.test(color)) {\n    return parseHexToRGB(color);\n  } else if (/^rgb/.test(color)) {\n    return color.match(/rgba?\\((\\s?[0-9]*\\s?),(\\s?[0-9]*\\s?),(\\s?[0-9]*\\s?).*?\\)/).splice(1);\n  }\n  return color;\n}\n\nexport const colorIsDark = (color) => {\n  const [red, green, blue] = getRGBArray(color);\n  // http://www.had2know.com/technology/\n  //  color-contrast-calculator-web-design.html\n  const brightness = (\n    (299 * red) + (587 * green) + (114 * blue)\n  ) / 1000;\n  return (brightness < 125);\n};\n\nexport function getRGBA(color, opacity) {\n  if (color) {\n    const [red, green, blue] = getRGBArray(color);\n    return `rgba(${red}, ${green}, ${blue}, ${opacity || 1})`;\n  }\n  return undefined;\n}\n\nexport default { colorForName, colorIsDark, getRGBA };"
    }
}