{
    "1": {
        "bug_file": "src/js/components/Select/Select.js",
        "compressed": "NO",
        "line_numbers": 147,
        "compressed_line_numbers": 147,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport styled from 'styled-components';\n\nimport { Box } from '../Box';\nimport { DropButton } from '../DropButton';\nimport { Keyboard } from '../Keyboard';\nimport { TextInput } from '../TextInput';\n\nimport { withForwardRef, withTheme } from '../hocs';\n\nimport SelectContainer from './SelectContainer';\nimport doc from './doc';\n\nconst SelectTextInput = styled(TextInput)`cursor: pointer;`;\n\nclass Select extends Component {\n  static defaultProps = {\n    dropAlign: { top: 'bottom', left: 'left' },\n    messages: { multiple: 'multiple' },\n  }\n\n  state = { open: false }\n\n  onOpen = () => {\n    this.setState({ open: true });\n  }\n\n  onClose = () => {\n    const { onClose } = this.props;\n    this.setState({ open: false });\n    if (onClose) {\n      onClose();\n    }\n  }\n\n  render() {\n    const {\n      a11yTitle,\n      children,\n      disabled,\n      dropAlign,\n      dropTarget,\n      forwardRef,\n      messages,\n      onChange,\n      onClose,\n      placeholder,\n      plain,\n      size,\n      theme,\n      value,\n      ...rest\n    } = this.props;\n    const { open } = this.state;\n\n    const onSelectChange = (event, ...args) => {\n      this.onClose();\n      if (onChange) {\n        onChange(event, ...args);\n      }\n    };\n\n    const SelectIcon = theme.select.icons.down;\n    let selectValue;\n    let textValue;\n    if (!React.isValidElement(value)) {\n      if (Array.isArray(value)) {\n        if (value.length > 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value;\n          } else {\n            textValue = messages.multiple;\n          }\n        } else if (value.length === 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value[0];\n          } else {\n            textValue = value[0];\n          }\n        } else {\n          textValue = '';\n        }\n      } else {\n        textValue = value;\n      }\n    } else {\n      selectValue = value;\n    }\n\n    return (\n      <Keyboard onDown={this.onOpen} onUp={this.onOpen}>\n        <DropButton\n          ref={forwardRef}\n          disabled={disabled}\n          dropAlign={dropAlign}\n          dropTarget={dropTarget}\n          {...rest}\n          open={open}\n          onOpen={this.onOpen}\n          onClose={this.onClose}\n          a11yTitle={`${a11yTitle}${typeof value === 'string' ? `, ${value}` : ''}`}\n          dropContent={<SelectContainer {...this.props} onChange={onSelectChange} />}\n        >\n          <Box\n            align='center'\n            border={!plain ? 'all' : undefined}\n            direction='row'\n            justify='between'\n          >\n            <Box direction='row' flex={true}>\n              {selectValue || (\n                <SelectTextInput\n                  ref={(ref) => { this.inputRef = ref; }}\n                  {...rest}\n                  tabIndex='-1'\n                  type='text'\n                  placeholder={placeholder}\n                  plain={true}\n                  readOnly={true}\n                  value={textValue}\n                  size={size}\n                />\n              )}\n            </Box>\n            <Box\n              margin={{ horizontal: 'small' }}\n              flex={false}\n              style={{ minWidth: 'auto' }}\n            >\n              <SelectIcon color='brand' size={size} />\n            </Box>\n          </Box>\n        </DropButton>\n      </Keyboard>\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  doc(Select);\n}\n\nexport default compose(\n  withTheme,\n  withForwardRef,\n)(Select);"
    },
    "2": {
        "bug_file": "src/js/components/Select/SelectContainer.js",
        "compressed": "NO",
        "line_numbers": 190,
        "compressed_line_numbers": 190,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\nimport { debounce } from '../../utils';\n\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\n\nclass SelectContainer extends Component {\n  state = {\n    activeIndex: -1, // for tracking keyboard interaction\n    search: '',\n  }\n  static defaultProps = {\n    value: '',\n  }\n  optionsRef = {}\n\n  componentDidMount() {\n    const { onSearch } = this.props;\n    // timeout need to send the operation through event loop and allow time to the portal\n    // to be available\n    setTimeout(() => {\n      if (onSearch) {\n        findDOMNode(this.searchRef).querySelector('input').focus();\n      } else if (this.selectRef) {\n        findDOMNode(this.selectRef).focus();\n      }\n    }, 0);\n  }\n\n  componentDidUpdate() {\n    const { activeIndex } = this.state;\n    const buttonNode = findDOMNode(this.optionsRef[activeIndex]);\n    if (activeIndex >= 0 && buttonNode && buttonNode.scrollIntoView) {\n      buttonNode.scrollIntoView();\n    }\n  }\n\n  onInput = (event) => {\n    this.setState(\n      { search: event.target.value },\n      () => this.onSearch(this.state.search)\n    );\n  }\n\n  onSearch = debounce(search => this.props.onSearch(search), 150)\n\n  selectOption = (option, index) => {\n    const { multiple, onChange, options, selected } = this.props;\n\n    if (onChange) {\n      let nextValue = option;\n      let nextSelected = index;\n      if (multiple) {\n        nextValue = [];\n        nextSelected = [];\n        let removed = false;\n        (selected || []).forEach((selectedIndex) => {\n          if (selectedIndex === index) {\n            removed = true;\n          } else {\n            nextValue.push(options[selectedIndex]);\n            nextSelected.push(selectedIndex);\n          }\n        });\n        if (!removed) {\n          nextValue.push(option);\n          nextSelected.push(index);\n        }\n      }\n\n      onChange({\n        target: findDOMNode(this.inputRef),\n        option,\n        value: nextValue,\n        selected: nextSelected,\n      });\n    }\n  }\n\n  onNextOption = (event) => {\n    const { options } = this.props;\n    const { activeIndex } = this.state;\n    event.preventDefault();\n    const index = Math.min(activeIndex + 1, options.length - 1);\n    this.setState({ activeIndex: index });\n  }\n\n  onPreviousOption = (event) => {\n    const { activeIndex } = this.state;\n    event.preventDefault();\n    const index = Math.max(activeIndex - 1, 0);\n    this.setState({ activeIndex: index });\n  }\n\n  onSelectOption = (event) => {\n    const { options } = this.props;\n    const { activeIndex } = this.state;\n    if (activeIndex >= 0) {\n      event.preventDefault(); // prevent submitting forms\n      this.selectOption(options[activeIndex], activeIndex);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      dropBackground,\n      id,\n      name,\n      onKeyDown,\n      onSearch,\n      options,\n      searchPlaceholder,\n      selected,\n      value,\n    } = this.props;\n    const { activeIndex, search } = this.state;\n\n    return (\n      <Keyboard\n        onEnter={this.onSelectOption}\n        onUp={this.onPreviousOption}\n        onDown={this.onNextOption}\n        onKeyDown={onKeyDown}\n      >\n        <Box\n          id={id ? `${id}__select-drop` : undefined}\n          background={dropBackground}\n        >\n          {onSearch ? (\n            <Box pad='xsmall'>\n              <TextInput\n                focusIndicator={true}\n                size='small'\n                ref={(ref) => { this.searchRef = ref; }}\n                type='search'\n                value={search}\n                placeholder={searchPlaceholder}\n                onInput={this.onInput}\n              />\n            </Box>\n          ) : undefined}\n\n          <Box\n            flex={false}\n            role='menubar'\n            tabIndex='-1'\n            ref={(ref) => { this.selectRef = ref; }}\n          >\n            <InfiniteScroll items={options} step={20}>\n              {(option, index) => (\n                <Button\n                  role='menuitem'\n                  ref={(ref) => { this.optionsRef[index] = ref; }}\n                  active={\n                    selected === index ||\n                    (Array.isArray(selected) && selected.indexOf(index) !== -1) ||\n                    activeIndex === index ||\n                    (option && option === value) ||\n                    (option && Array.isArray(value) && value.indexOf(option) !== -1)\n                  }\n                  key={`option_${name || ''}_${index}`}\n                  onClick={() => this.selectOption(option, index)}\n                  hoverIndicator='background'\n                >\n                  {children ? children(option, index, options) : (\n                    <Box align='start' pad='small'>\n                      <Text margin='none'>\n                        {(option !== null && option !== undefined) ?\n                          option.toString() : undefined}\n                      </Text>\n                    </Box>\n                  )}\n                </Button>\n              )}\n            </InfiniteScroll>\n          </Box>\n        </Box>\n      </Keyboard>\n    );\n  }\n}\n\nexport default SelectContainer;"
    },
    "3": {
        "bug_file": "src/js/components/Select/select.stories.js",
        "compressed": "NO",
        "line_numbers": 114,
        "compressed_line_numbers": 114,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { storiesOf } from '@storybook/react';\n\nimport { FormClose } from 'grommet-icons';\n\nimport Box from '../Box/Box';\nimport Button from '../Button/Button';\nimport Grommet from '../Grommet/Grommet';\nimport Select from '../Select/Select';\nimport Text from '../Text/Text';\n\nconst allSeasons = ['S01', 'S02', 'S03', 'S04', 'S05', 'S06', 'S07', 'S08', 'S09', 'S10'];\n\nclass SeasonsSelect extends Component {\n  state = {\n    selectedSeasons: [],\n  };\n\n  onRemoveSeason = (season) => {\n    const { selectedSeasons } = this.state;\n    const newSeasons = [...selectedSeasons];\n    newSeasons.splice(\n      selectedSeasons.indexOf(season), 1\n    );\n    this.setState({\n      selectedSeasons: newSeasons,\n    });\n  }\n\n  renderSeason = season => (\n    <Button\n      key={`season_tag_${season}`}\n      href='#'\n      onClick={(event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        this.onRemoveSeason(season);\n      }}\n      onFocus={event => event.stopPropagation()}\n    >\n      <Box\n        align='center'\n        direction='row'\n        gap='xsmall'\n        pad={{ vertical: 'xsmall', horizontal: 'small' }}\n        margin='xsmall'\n        background='accent-1'\n        round='large'\n      >\n        <Text size='small' color='white'>{season}</Text>\n        <Box background='white' round='full' margin={{ left: 'xsmall' }}>\n          <FormClose\n            color='accent-1'\n            size='small'\n            style={{ width: '12px', height: '12px' }}\n          />\n        </Box>\n      </Box>\n    </Button>\n  );\n\n  renderOption = option => (\n    <Box\n      pad='small'\n      background={\n        this.state.selectedSeasons.indexOf(option) >= 0 ? 'active' : undefined\n      }\n    >\n      {option}\n    </Box>\n  );\n\n  render() {\n    const { selectedSeasons } = this.state;\n    return (\n      <Grommet>\n        <Box direction='row'>\n          <Box align='start' basis='medium' direction='row'>\n            <Select\n              size='medium'\n              placeholder='Select Season'\n              multiple={true}\n              value={\n                selectedSeasons && selectedSeasons.length\n                  ? (\n                    <Box wrap={true} direction='row' style={{ width: '208px' }}>\n                      {selectedSeasons.map(this.renderSeason)}\n                    </Box>\n                  )\n                  : undefined\n              }\n              options={allSeasons}\n              onChange={({ option }) => {\n                const newSelectedSeasons = [...this.state.selectedSeasons];\n                const seasonIndex = newSelectedSeasons.indexOf(option);\n                if (seasonIndex >= 0) {\n                  newSelectedSeasons.splice(seasonIndex, 1);\n                } else {\n                  newSelectedSeasons.push(option);\n                }\n                this.setState({ selectedSeasons: newSelectedSeasons.sort() });\n              }}\n            >\n              {this.renderOption}\n            </Select>\n          </Box>\n        </Box>\n      </Grommet>\n    );\n  }\n}\n\nstoriesOf('Select', module)\n  .add('Seasons Select', () => <SeasonsSelect />);"
    }
}