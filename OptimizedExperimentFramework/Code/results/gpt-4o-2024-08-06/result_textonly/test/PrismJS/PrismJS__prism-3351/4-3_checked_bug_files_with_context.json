{
    "components/prism-java.js": [
        "(function (Prism) {",
        "",
        "\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;",
        "",
        "\t// full package (optional) + parent classes (optional)",
        "\tvar classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;",
        "",
        "\t// based on the java naming conventions",
        "\tvar className = {",
        "\t\tpattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),",
        "\t\tlookbehind: true,",
        "\t\tinside: {",
        "\t\t\t'namespace': {",
        "\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,",
        "\t\t\t\tinside: {",
        "\t\t\t\t\t'punctuation': /\\./",
        "\t\t\t\t}",
        "\t\t\t},",
        "\t\t\t'punctuation': /\\./",
        "\t\t}",
        "\t};",
        "",
        "\tPrism.languages.java = Prism.languages.extend('clike', {",
        "\t\t'string': {",
        "\t\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
        "\t\t\tlookbehind: true,",
        "\t\t\tgreedy: true",
        "\t\t},",
        "\t\t'class-name': [",
        "\t\t\tclassName,",
        "\t\t\t{",
        "\t\t\t\t// variables and parameters",
        "\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)",
        "\t\t\t\tpattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),",
        "\t\t\t\tlookbehind: true,",
        "\t\t\t\tinside: className.inside",
        "\t\t\t}",
        "\t\t],",
        "\t\t'keyword': keywords,",
        "\t\t'function': [",
        "\t\t\tPrism.languages.clike.function,",
        "\t\t\t{",
        "\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,",
        "\t\t\t\tlookbehind: true",
        "\t\t\t}",
        "\t\t],",
        "\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,",
        "\t\t'operator': {",
        "\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,",
        "\t\t\tlookbehind: true",
        "\t\t}",
        "\t});",
        "",
        "\tPrism.languages.insertBefore('java', 'string', {",
        "\t\t'triple-quoted-string': {",
        "\t\t\t// http://openjdk.java.net/jeps/355#Description",
        "\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,",
        "\t\t\tgreedy: true,",
        "\t\t\talias: 'string'",
        "\t\t},",
        "\t\t'char': {",
        "\t\t\tpattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,",
        "\t\t\tgreedy: true",
        "\t\t}",
        "\t});",
        "",
        "\tPrism.languages.insertBefore('java', 'class-name', {",
        "\t\t'annotation': {",
        "\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,",
        "\t\t\tlookbehind: true,",
        "\t\t\talias: 'punctuation'",
        "\t\t},",
        "\t\t'generics': {",
        "\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,",
        "\t\t\tinside: {",
        "\t\t\t\t'class-name': className,",
        "\t\t\t\t'keyword': keywords,",
        "\t\t\t\t'punctuation': /[<>(),.:]/,",
        "\t\t\t\t'operator': /[?&|]/",
        "\t\t\t}",
        "\t\t},",
        "\t\t'namespace': {",
        "\t\t\tpattern: RegExp(",
        "\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/",
        "\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),",
        "\t\t\tlookbehind: true,",
        "\t\t\tinside: {",
        "\t\t\t\t'punctuation': /\\./,",
        "\t\t\t}",
        "\t\t}",
        "\t});",
        "}(Prism));"
    ]
}