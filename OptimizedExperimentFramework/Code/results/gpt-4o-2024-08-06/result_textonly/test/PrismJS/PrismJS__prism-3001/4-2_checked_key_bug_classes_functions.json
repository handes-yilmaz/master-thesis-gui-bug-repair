{
    "bug_classes": {
        "1": {
            "class_name": "Prism.languages.typescript (not found) ",
            "file_path": "components/prism-typescript.js",
            "class_details": [
                {
                    "name": "Prism.languages.typescript",
                    "start_line": 1,
                    "end_line": 58
                }
            ],
            "class_code": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.typescript = Prism.languages.extend('javascript', {",
                "\t\t'class-name': {",
                "\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: null // see below",
                "\t\t},",
                "\t\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,",
                "\t});",
                "",
                "\t// The keywords TypeScript adds to JavaScript",
                "\tPrism.languages.typescript.keyword.push(",
                "\t\t/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/,",
                "\t\t// keywords that have to be followed by an identifier",
                "\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class",
                "\t\t/\\b(?:asserts|infer|interface|module|namespace|type)(?!\\s*[^\\s_${}*a-zA-Z\\xA0-\\uFFFF])/",
                "\t);",
                "",
                "\t// doesn't work with TS because TS is too complex",
                "\tdelete Prism.languages.typescript['parameter'];",
                "",
                "\t// a version of typescript specifically for highlighting types",
                "\tvar typeInside = Prism.languages.extend('typescript', {});",
                "\tdelete typeInside['class-name'];",
                "",
                "\tPrism.languages.typescript['class-name'].inside = typeInside;",
                "",
                "\tPrism.languages.insertBefore('typescript', 'function', {",
                "\t\t'decorator': {",
                "\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,",
                "\t\t\tinside: {",
                "\t\t\t\t'at': {",
                "\t\t\t\t\tpattern: /^@/,",
                "\t\t\t\t\talias: 'operator'",
                "\t\t\t\t},",
                "\t\t\t\t'function': /^[\\s\\S]+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'generic-function': {",
                "\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...",
                "\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,",
                "\t\t\t\t'generic': {",
                "\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <",
                "\t\t\t\t\talias: 'class-name',",
                "\t\t\t\t\tinside: typeInside",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.ts = Prism.languages.typescript;",
                "",
                "}(Prism));"
            ]
        }
    },
    "bug_functions": {}
}