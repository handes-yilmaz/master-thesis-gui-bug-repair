{
    "1/1": "To address the issue of supporting single quotes in C++ floating point and integer literals, we need to modify the regular expression used for number matching in the `prism-cpp.js` file. The current implementation does not account for single quotes within numbers, which is causing the incorrect highlighting.\n\n### Bug Scenario Images Description and Reasoning\nThe provided images show the current and expected syntax highlighting for C++ code with numbers containing single quotes. The current highlighting fails to recognize numbers with single quotes as valid numeric literals, treating them as separate tokens or strings instead. This is because the regular expression used for matching numbers does not include single quotes as valid characters within numeric literals.\n\n### Bug Location and Fix\nThe bug is located in the `components/prism-cpp.js` file, specifically in the section where the C++ language is extended with additional patterns. We need to update the regular expression for numbers to include single quotes as valid characters within numeric literals.\n\n### Patch\nWe will modify the `prism-cpp.js` file to include single quotes in the number pattern. Here's the patch:\n\n```javascript\n### components/prism-cpp.js\n<<<<<<< SEARCH\nPrism.languages.cpp = Prism.languages.extend('c', {\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n\t\tlookbehind: true\n\t},\n\t'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\n\nPrism.languages.insertBefore('cpp', 'string', {\n\t'raw-string': {\n\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n\t\talias: 'string',\n\t\tgreedy: true\n\t}\n});\n=======\nPrism.languages.cpp = Prism.languages.extend('c', {\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n\t\tlookbehind: true\n\t},\n\t'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n\t'number': /(?:\\b0x(?:[\\da-f']+\\.?[\\da-f']*|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+\\.?[\\d']*|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]*/i\n});\n\nPrism.languages.insertBefore('cpp', 'string', {\n\t'raw-string': {\n\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n\t\talias: 'string',\n\t\tgreedy: true\n\t}\n});\n>>>>>>> REPLACE\n```\n\nThis patch updates the number pattern to include single quotes, allowing the correct highlighting of C++ numeric literals with single quotes."
}