{
    ".editorconfig": {},
    ".gitattributes": {},
    ".gitignore": {},
    ".jsdoc.json": {},
    ".npmignore": {},
    "CHANGELOG.md": {},
    "CNAME": {},
    "LICENSE": {},
    "README.md": {},
    "bower.json": {},
    "components.js": {
        "classes": [],
        "functions": [],
        "text": [
            "var components = {\"core\":{\"meta\":{\"path\":\"components/prism-core.js\",\"option\":\"mandatory\"},\"core\":\"Core\"},\"themes\":{\"meta\":{\"path\":\"themes/{id}.css\",\"link\":\"index.html?theme={id}\",\"exclusive\":true},\"prism\":{\"title\":\"Default\",\"option\":\"default\"},\"prism-dark\":\"Dark\",\"prism-funky\":\"Funky\",\"prism-okaidia\":{\"title\":\"Okaidia\",\"owner\":\"ocodia\"},\"prism-twilight\":{\"title\":\"Twilight\",\"owner\":\"remybach\"},\"prism-coy\":{\"title\":\"Coy\",\"owner\":\"tshedor\"},\"prism-solarizedlight\":{\"title\":\"Solarized Light\",\"owner\":\"hectormatos2011 \"},\"prism-tomorrow\":{\"title\":\"Tomorrow Night\",\"owner\":\"Rosey\"}},\"languages\":{\"meta\":{\"path\":\"components/prism-{id}\",\"noCSS\":true,\"examplesPath\":\"examples/prism-{id}\",\"addCheckAll\":true},\"markup\":{\"title\":\"Markup\",\"alias\":[\"html\",\"xml\",\"svg\",\"mathml\",\"ssml\",\"atom\",\"rss\"],\"aliasTitles\":{\"html\":\"HTML\",\"xml\":\"XML\",\"svg\":\"SVG\",\"mathml\":\"MathML\",\"ssml\":\"SSML\",\"atom\":\"Atom\",\"rss\":\"RSS\"},\"option\":\"default\"},\"css\":{\"title\":\"CSS\",\"option\":\"default\",\"modify\":\"markup\"},\"clike\":{\"title\":\"C-like\",\"option\":\"default\"},\"javascript\":{\"title\":\"JavaScript\",\"require\":\"clike\",\"modify\":\"markup\",\"optional\":\"regex\",\"alias\":\"js\",\"option\":\"default\"},\"abap\":{\"title\":\"ABAP\",\"owner\":\"dellagustin\"},\"abnf\":{\"title\":\"ABNF\",\"owner\":\"RunDevelopment\"},\"actionscript\":{\"title\":\"ActionScript\",\"require\":\"javascript\",\"modify\":\"markup\",\"owner\":\"Golmote\"},\"ada\":{\"title\":\"Ada\",\"owner\":\"Lucretia\"},\"agda\":{\"title\":\"Agda\",\"owner\":\"xy-ren\"},\"al\":{\"title\":\"AL\",\"owner\":\"RunDevelopment\"},\"antlr4\":{\"title\":\"ANTLR4\",\"alias\":\"g4\",\"owner\":\"RunDevelopment\"},\"apacheconf\":{\"title\":\"Apache Configuration\",\"owner\":\"GuiTeK\"},\"apex\":{\"title\":\"Apex\",\"require\":[\"clike\",\"sql\"],\"owner\":\"RunDevelopment\"},\"apl\":{\"title\":\"APL\",\"owner\":\"ngn\"},\"applescript\":{\"title\":\"AppleScript\",\"owner\":\"Golmote\"},\"aql\":{\"title\":\"AQL\",\"owner\":\"RunDevelopment\"},\"arduino\":{\"title\":\"Arduino\",\"require\":\"cpp\",\"owner\":\"dkern\"},\"arff\":{\"title\":\"ARFF\",\"owner\":\"Golmote\"},\"asciidoc\":{\"alias\":\"adoc\",\"title\":\"AsciiDoc\",\"owner\":\"Golmote\"},\"aspnet\":{\"title\":\"ASP.NET (C#)\",\"require\":[\"markup\",\"csharp\"],\"owner\":\"nauzilus\"},\"asm6502\":{\"title\":\"6502 Assembly\",\"owner\":\"kzurawel\"},\"autohotkey\":{\"title\":\"AutoHotkey\",\"owner\":\"aviaryan\"},\"autoit\":{\"title\":\"AutoIt\",\"owner\":\"Golmote\"},\"bash\":{\"title\":\"Bash\",\"alias\":\"shell\",\"aliasTitles\":{\"shell\":\"Shell\"},\"owner\":\"zeitgeist87\"},\"basic\":{\"title\":\"BASIC\",\"owner\":\"Golmote\"},\"batch\":{\"title\":\"Batch\",\"owner\":\"Golmote\"},\"bbcode\":{\"title\":\"BBcode\",\"alias\":\"shortcode\",\"aliasTitles\":{\"shortcode\":\"Shortcode\"},\"owner\":\"RunDevelopment\"},\"birb\":{\"title\":\"Birb\",\"require\":\"clike\",\"owner\":\"Calamity210\"},\"bison\":{\"title\":\"Bison\",\"require\":\"c\",\"owner\":\"Golmote\"},\"bnf\":{\"title\":\"BNF\",\"alias\":\"rbnf\",\"aliasTitles\":{\"rbnf\":\"RBNF\"},\"owner\":\"RunDevelopment\"},\"brainfuck\":{\"title\":\"Brainfuck\",\"owner\":\"Golmote\"},\"brightscript\":{\"title\":\"BrightScript\",\"owner\":\"RunDevelopment\"},\"bro\":{\"title\":\"Bro\",\"owner\":\"wayward710\"},\"bsl\":{\"title\":\"BSL (1C:Enterprise)\",\"alias\":\"oscript\",\"aliasTitles\":{\"oscript\":\"OneScript\"},\"owner\":\"Diversus23\"},\"c\":{\"title\":\"C\",\"require\":\"clike\",\"owner\":\"zeitgeist87\"},\"csharp\":{\"title\":\"C#\",\"require\":\"clike\",\"alias\":[\"cs\",\"dotnet\"],\"owner\":\"mvalipour\"},\"cpp\":{\"title\":\"C++\",\"require\":\"c\",\"owner\":\"zeitgeist87\"},\"cil\":{\"title\":\"CIL\",\"owner\":\"sbrl\"},\"clojure\":{\"title\":\"Clojure\",\"owner\":\"troglotit\"},\"cmake\":{\"title\":\"CMake\",\"owner\":\"mjrogozinski\"},\"coffeescript\":{\"title\":\"CoffeeScript\",\"require\":\"javascript\",\"alias\":\"coffee\",\"owner\":\"R-osey\"},\"concurnas\":{\"title\":\"Concurnas\",\"alias\":\"conc\",\"owner\":\"jasontatton\"},\"csp\":{\"title\":\"Content-Security-Policy\",\"owner\":\"ScottHelme\"},\"crystal\":{\"title\":\"Crystal\",\"require\":\"ruby\",\"owner\":\"MakeNowJust\"},\"css-extras\":{\"title\":\"CSS Extras\",\"require\":\"css\",\"modify\":\"css\",\"owner\":\"milesj\"},\"cypher\":{\"title\":\"Cypher\",\"owner\":\"RunDevelopment\"},\"d\":{\"title\":\"D\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"dart\":{\"title\":\"Dart\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"dataweave\":{\"title\":\"DataWeave\",\"owner\":\"machaval\"},\"dax\":{\"title\":\"DAX\",\"owner\":\"peterbud\"},\"dhall\":{\"title\":\"Dhall\",\"owner\":\"RunDevelopment\"},\"diff\":{\"title\":\"Diff\",\"owner\":\"uranusjr\"},\"django\":{\"title\":\"Django/Jinja2\",\"require\":\"markup-templating\",\"alias\":\"jinja2\",\"owner\":\"romanvm\"},\"dns-zone-file\":{\"title\":\"DNS zone file\",\"owner\":\"RunDevelopment\",\"alias\":\"dns-zone\"},\"docker\":{\"title\":\"Docker\",\"alias\":\"dockerfile\",\"owner\":\"JustinBeckwith\"},\"ebnf\":{\"title\":\"EBNF\",\"owner\":\"RunDevelopment\"},\"editorconfig\":{\"title\":\"EditorConfig\",\"owner\":\"osipxd\"},\"eiffel\":{\"title\":\"Eiffel\",\"owner\":\"Conaclos\"},\"ejs\":{\"title\":\"EJS\",\"require\":[\"javascript\",\"markup-templating\"],\"owner\":\"RunDevelopment\",\"alias\":\"eta\",\"aliasTitles\":{\"eta\":\"Eta\"}},\"elixir\":{\"title\":\"Elixir\",\"owner\":\"Golmote\"},\"elm\":{\"title\":\"Elm\",\"owner\":\"zwilias\"},\"etlua\":{\"title\":\"Embedded Lua templating\",\"require\":[\"lua\",\"markup-templating\"],\"owner\":\"RunDevelopment\"},\"erb\":{\"title\":\"ERB\",\"require\":[\"ruby\",\"markup-templating\"],\"owner\":\"Golmote\"},\"erlang\":{\"title\":\"Erlang\",\"owner\":\"Golmote\"},\"excel-formula\":{\"title\":\"Excel Formula\",\"alias\":[\"xlsx\",\"xls\"],\"owner\":\"RunDevelopment\"},\"fsharp\":{\"title\":\"F#\",\"require\":\"clike\",\"owner\":\"simonreynolds7\"},\"factor\":{\"title\":\"Factor\",\"owner\":\"catb0t\"},\"firestore-security-rules\":{\"title\":\"Firestore security rules\",\"require\":\"clike\",\"owner\":\"RunDevelopment\"},\"flow\":{\"title\":\"Flow\",\"require\":\"javascript\",\"owner\":\"Golmote\"},\"fortran\":{\"title\":\"Fortran\",\"owner\":\"Golmote\"},\"ftl\":{\"title\":\"FreeMarker Template Language\",\"require\":\"markup-templating\",\"owner\":\"RunDevelopment\"},\"gml\":{\"title\":\"GameMaker Language\",\"alias\":\"gamemakerlanguage\",\"require\":\"clike\",\"owner\":\"LiarOnce\"},\"gcode\":{\"title\":\"G-code\",\"owner\":\"RunDevelopment\"},\"gdscript\":{\"title\":\"GDScript\",\"owner\":\"RunDevelopment\"},\"gedcom\":{\"title\":\"GEDCOM\",\"owner\":\"Golmote\"},\"gherkin\":{\"title\":\"Gherkin\",\"owner\":\"hason\"},\"git\":{\"title\":\"Git\",\"owner\":\"lgiraudel\"},\"glsl\":{\"title\":\"GLSL\",\"require\":\"c\",\"owner\":\"Golmote\"},\"go\":{\"title\":\"Go\",\"require\":\"clike\",\"owner\":\"arnehormann\"},\"graphql\":{\"title\":\"GraphQL\",\"optional\":[\"markdown\"],\"owner\":\"Golmote\"},\"groovy\":{\"title\":\"Groovy\",\"require\":\"clike\",\"owner\":\"robfletcher\"},\"haml\":{\"title\":\"Haml\",\"require\":\"ruby\",\"optional\":[\"css\",\"css-extras\",\"coffeescript\",\"erb\",\"javascript\",\"less\",\"markdown\",\"scss\",\"textile\"],\"owner\":\"Golmote\"},\"handlebars\":{\"title\":\"Handlebars\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"haskell\":{\"title\":\"Haskell\",\"alias\":\"hs\",\"owner\":\"bholst\"},\"haxe\":{\"title\":\"Haxe\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"hcl\":{\"title\":\"HCL\",\"owner\":\"outsideris\"},\"hlsl\":{\"title\":\"HLSL\",\"require\":\"c\",\"owner\":\"RunDevelopment\"},\"http\":{\"title\":\"HTTP\",\"optional\":[\"css\",\"javascript\",\"json\",\"markup\"],\"owner\":\"danielgtaylor\"},\"hpkp\":{\"title\":\"HTTP Public-Key-Pins\",\"owner\":\"ScottHelme\"},\"hsts\":{\"title\":\"HTTP Strict-Transport-Security\",\"owner\":\"ScottHelme\"},\"ichigojam\":{\"title\":\"IchigoJam\",\"owner\":\"BlueCocoa\"},\"icon\":{\"title\":\"Icon\",\"owner\":\"Golmote\"},\"ignore\":{\"title\":\".ignore\",\"owner\":\"osipxd\",\"alias\":[\"gitignore\",\"hgignore\",\"npmignore\"],\"aliasTitles\":{\"gitignore\":\".gitignore\",\"hgignore\":\".hgignore\",\"npmignore\":\".npmignore\"}},\"inform7\":{\"title\":\"Inform 7\",\"owner\":\"Golmote\"},\"ini\":{\"title\":\"Ini\",\"owner\":\"aviaryan\"},\"io\":{\"title\":\"Io\",\"owner\":\"AlesTsurko\"},\"j\":{\"title\":\"J\",\"owner\":\"Golmote\"},\"java\":{\"title\":\"Java\",\"require\":\"clike\",\"owner\":\"sherblot\"},\"javadoc\":{\"title\":\"JavaDoc\",\"require\":[\"markup\",\"java\",\"javadoclike\"],\"modify\":\"java\",\"optional\":\"scala\",\"owner\":\"RunDevelopment\"},\"javadoclike\":{\"title\":\"JavaDoc-like\",\"modify\":[\"java\",\"javascript\",\"php\"],\"owner\":\"RunDevelopment\"},\"javastacktrace\":{\"title\":\"Java stack trace\",\"owner\":\"RunDevelopment\"},\"jolie\":{\"title\":\"Jolie\",\"require\":\"clike\",\"owner\":\"thesave\"},\"jq\":{\"title\":\"JQ\",\"owner\":\"RunDevelopment\"},\"jsdoc\":{\"title\":\"JSDoc\",\"require\":[\"javascript\",\"javadoclike\",\"typescript\"],\"modify\":\"javascript\",\"optional\":[\"actionscript\",\"coffeescript\"],\"owner\":\"RunDevelopment\"},\"js-extras\":{\"title\":\"JS Extras\",\"require\":\"javascript\",\"modify\":\"javascript\",\"optional\":[\"actionscript\",\"coffeescript\",\"flow\",\"n4js\",\"typescript\"],\"owner\":\"RunDevelopment\"},\"json\":{\"title\":\"JSON\",\"alias\":\"webmanifest\",\"aliasTitles\":{\"webmanifest\":\"Web App Manifest\"},\"owner\":\"CupOfTea696\"},\"json5\":{\"title\":\"JSON5\",\"require\":\"json\",\"owner\":\"RunDevelopment\"},\"jsonp\":{\"title\":\"JSONP\",\"require\":\"json\",\"owner\":\"RunDevelopment\"},\"jsstacktrace\":{\"title\":\"JS stack trace\",\"owner\":\"sbrl\"},\"js-templates\":{\"title\":\"JS Templates\",\"require\":\"javascript\",\"modify\":\"javascript\",\"optional\":[\"css\",\"css-extras\",\"graphql\",\"markdown\",\"markup\"],\"owner\":\"RunDevelopment\"},\"julia\":{\"title\":\"Julia\",\"owner\":\"cdagnino\"},\"keyman\":{\"title\":\"Keyman\",\"owner\":\"mcdurdin\"},\"kotlin\":{\"title\":\"Kotlin\",\"alias\":[\"kt\",\"kts\"],\"aliasTitles\":{\"kts\":\"Kotlin Script\"},\"require\":\"clike\",\"owner\":\"Golmote\"},\"latex\":{\"title\":\"LaTeX\",\"alias\":[\"tex\",\"context\"],\"aliasTitles\":{\"tex\":\"TeX\",\"context\":\"ConTeXt\"},\"owner\":\"japborst\"},\"latte\":{\"title\":\"Latte\",\"require\":[\"clike\",\"markup-templating\",\"php\"],\"owner\":\"nette\"},\"less\":{\"title\":\"Less\",\"require\":\"css\",\"optional\":\"css-extras\",\"owner\":\"Golmote\"},\"lilypond\":{\"title\":\"LilyPond\",\"require\":\"scheme\",\"alias\":\"ly\",\"owner\":\"RunDevelopment\"},\"liquid\":{\"title\":\"Liquid\",\"owner\":\"cinhtau\"},\"lisp\":{\"title\":\"Lisp\",\"alias\":[\"emacs\",\"elisp\",\"emacs-lisp\"],\"owner\":\"JuanCaicedo\"},\"livescript\":{\"title\":\"LiveScript\",\"owner\":\"Golmote\"},\"llvm\":{\"title\":\"LLVM IR\",\"owner\":\"porglezomp\"},\"lolcode\":{\"title\":\"LOLCODE\",\"owner\":\"Golmote\"},\"lua\":{\"title\":\"Lua\",\"owner\":\"Golmote\"},\"makefile\":{\"title\":\"Makefile\",\"owner\":\"Golmote\"},\"markdown\":{\"title\":\"Markdown\",\"require\":\"markup\",\"optional\":\"yaml\",\"alias\":\"md\",\"owner\":\"Golmote\"},\"markup-templating\":{\"title\":\"Markup templating\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"matlab\":{\"title\":\"MATLAB\",\"owner\":\"Golmote\"},\"mel\":{\"title\":\"MEL\",\"owner\":\"Golmote\"},\"mizar\":{\"title\":\"Mizar\",\"owner\":\"Golmote\"},\"mongodb\":{\"title\":\"MongoDB\",\"owner\":\"airs0urce\",\"require\":\"javascript\"},\"monkey\":{\"title\":\"Monkey\",\"owner\":\"Golmote\"},\"moonscript\":{\"title\":\"MoonScript\",\"alias\":\"moon\",\"owner\":\"RunDevelopment\"},\"n1ql\":{\"title\":\"N1QL\",\"owner\":\"TMWilds\"},\"n4js\":{\"title\":\"N4JS\",\"require\":\"javascript\",\"optional\":\"jsdoc\",\"alias\":\"n4jsd\",\"owner\":\"bsmith-n4\"},\"nand2tetris-hdl\":{\"title\":\"Nand To Tetris HDL\",\"owner\":\"stephanmax\"},\"naniscript\":{\"title\":\"Naninovel Script\",\"owner\":\"Elringus\",\"alias\":\"nani\"},\"nasm\":{\"title\":\"NASM\",\"owner\":\"rbmj\"},\"neon\":{\"title\":\"NEON\",\"owner\":\"nette\"},\"nginx\":{\"title\":\"nginx\",\"owner\":\"westonganger\",\"require\":\"clike\"},\"nim\":{\"title\":\"Nim\",\"owner\":\"Golmote\"},\"nix\":{\"title\":\"Nix\",\"owner\":\"Golmote\"},\"nsis\":{\"title\":\"NSIS\",\"owner\":\"idleberg\"},\"objectivec\":{\"title\":\"Objective-C\",\"require\":\"c\",\"alias\":\"objc\",\"owner\":\"uranusjr\"},\"ocaml\":{\"title\":\"OCaml\",\"owner\":\"Golmote\"},\"opencl\":{\"title\":\"OpenCL\",\"require\":\"c\",\"modify\":[\"c\",\"cpp\"],\"owner\":\"Milania1\"},\"oz\":{\"title\":\"Oz\",\"owner\":\"Golmote\"},\"parigp\":{\"title\":\"PARI/GP\",\"owner\":\"Golmote\"},\"parser\":{\"title\":\"Parser\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"pascal\":{\"title\":\"Pascal\",\"alias\":\"objectpascal\",\"aliasTitles\":{\"objectpascal\":\"Object Pascal\"},\"owner\":\"Golmote\"},\"pascaligo\":{\"title\":\"Pascaligo\",\"owner\":\"DefinitelyNotAGoat\"},\"pcaxis\":{\"title\":\"PC-Axis\",\"alias\":\"px\",\"owner\":\"RunDevelopment\"},\"peoplecode\":{\"title\":\"PeopleCode\",\"alias\":\"pcode\",\"owner\":\"RunDevelopment\"},\"perl\":{\"title\":\"Perl\",\"owner\":\"Golmote\"},\"php\":{\"title\":\"PHP\",\"require\":\"markup-templating\",\"owner\":\"milesj\"},\"phpdoc\":{\"title\":\"PHPDoc\",\"require\":[\"php\",\"javadoclike\"],\"modify\":\"php\",\"owner\":\"RunDevelopment\"},\"php-extras\":{\"title\":\"PHP Extras\",\"require\":\"php\",\"modify\":\"php\",\"owner\":\"milesj\"},\"plsql\":{\"title\":\"PL/SQL\",\"require\":\"sql\",\"owner\":\"Golmote\"},\"powerquery\":{\"title\":\"PowerQuery\",\"alias\":[\"pq\",\"mscript\"],\"owner\":\"peterbud\"},\"powershell\":{\"title\":\"PowerShell\",\"owner\":\"nauzilus\"},\"processing\":{\"title\":\"Processing\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"prolog\":{\"title\":\"Prolog\",\"owner\":\"Golmote\"},\"promql\":{\"title\":\"PromQL\",\"owner\":\"arendjr\"},\"properties\":{\"title\":\".properties\",\"owner\":\"Golmote\"},\"protobuf\":{\"title\":\"Protocol Buffers\",\"require\":\"clike\",\"owner\":\"just-boris\"},\"pug\":{\"title\":\"Pug\",\"require\":[\"markup\",\"javascript\"],\"optional\":[\"coffeescript\",\"ejs\",\"handlebars\",\"less\",\"livescript\",\"markdown\",\"scss\",\"stylus\",\"twig\"],\"owner\":\"Golmote\"},\"puppet\":{\"title\":\"Puppet\",\"owner\":\"Golmote\"},\"pure\":{\"title\":\"Pure\",\"optional\":[\"c\",\"cpp\",\"fortran\"],\"owner\":\"Golmote\"},\"purebasic\":{\"title\":\"PureBasic\",\"require\":\"clike\",\"alias\":\"pbfasm\",\"owner\":\"HeX0R101\"},\"purescript\":{\"title\":\"PureScript\",\"require\":\"haskell\",\"alias\":\"purs\",\"owner\":\"sriharshachilakapati\"},\"python\":{\"title\":\"Python\",\"alias\":\"py\",\"owner\":\"multipetros\"},\"q\":{\"title\":\"Q (kdb+ database)\",\"owner\":\"Golmote\"},\"qml\":{\"title\":\"QML\",\"require\":\"javascript\",\"owner\":\"RunDevelopment\"},\"qore\":{\"title\":\"Qore\",\"require\":\"clike\",\"owner\":\"temnroegg\"},\"r\":{\"title\":\"R\",\"owner\":\"Golmote\"},\"racket\":{\"title\":\"Racket\",\"require\":\"scheme\",\"alias\":\"rkt\",\"owner\":\"RunDevelopment\"},\"jsx\":{\"title\":\"React JSX\",\"require\":[\"markup\",\"javascript\"],\"optional\":[\"jsdoc\",\"js-extras\",\"js-templates\"],\"owner\":\"vkbansal\"},\"tsx\":{\"title\":\"React TSX\",\"require\":[\"jsx\",\"typescript\"]},\"reason\":{\"title\":\"Reason\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"regex\":{\"title\":\"Regex\",\"owner\":\"RunDevelopment\"},\"renpy\":{\"title\":\"Ren'py\",\"alias\":\"rpy\",\"owner\":\"HyuchiaDiego\"},\"rest\":{\"title\":\"reST (reStructuredText)\",\"owner\":\"Golmote\"},\"rip\":{\"title\":\"Rip\",\"owner\":\"ravinggenius\"},\"roboconf\":{\"title\":\"Roboconf\",\"owner\":\"Golmote\"},\"robotframework\":{\"title\":\"Robot Framework\",\"alias\":\"robot\",\"owner\":\"RunDevelopment\"},\"ruby\":{\"title\":\"Ruby\",\"require\":\"clike\",\"alias\":\"rb\",\"owner\":\"samflores\"},\"rust\":{\"title\":\"Rust\",\"owner\":\"Golmote\"},\"sas\":{\"title\":\"SAS\",\"optional\":[\"groovy\",\"lua\",\"sql\"],\"owner\":\"Golmote\"},\"sass\":{\"title\":\"Sass (Sass)\",\"require\":\"css\",\"owner\":\"Golmote\"},\"scss\":{\"title\":\"Sass (Scss)\",\"require\":\"css\",\"optional\":\"css-extras\",\"owner\":\"MoOx\"},\"scala\":{\"title\":\"Scala\",\"require\":\"java\",\"owner\":\"jozic\"},\"scheme\":{\"title\":\"Scheme\",\"owner\":\"bacchus123\"},\"shell-session\":{\"title\":\"Shell session\",\"require\":\"bash\",\"alias\":[\"sh-session\",\"shellsession\"],\"owner\":\"RunDevelopment\"},\"smali\":{\"title\":\"Smali\",\"owner\":\"RunDevelopment\"},\"smalltalk\":{\"title\":\"Smalltalk\",\"owner\":\"Golmote\"},\"smarty\":{\"title\":\"Smarty\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"sml\":{\"title\":\"SML\",\"alias\":\"smlnj\",\"aliasTitles\":{\"smlnj\":\"SML/NJ\"},\"owner\":\"RunDevelopment\"},\"solidity\":{\"title\":\"Solidity (Ethereum)\",\"alias\":\"sol\",\"require\":\"clike\",\"owner\":\"glachaud\"},\"solution-file\":{\"title\":\"Solution file\",\"alias\":\"sln\",\"owner\":\"RunDevelopment\"},\"soy\":{\"title\":\"Soy (Closure Template)\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"sparql\":{\"title\":\"SPARQL\",\"require\":\"turtle\",\"owner\":\"Triply-Dev\",\"alias\":\"rq\"},\"splunk-spl\":{\"title\":\"Splunk SPL\",\"owner\":\"RunDevelopment\"},\"sqf\":{\"title\":\"SQF: Status Quo Function (Arma 3)\",\"require\":\"clike\",\"owner\":\"RunDevelopment\"},\"sql\":{\"title\":\"SQL\",\"owner\":\"multipetros\"},\"stan\":{\"title\":\"Stan\",\"owner\":\"RunDevelopment\"},\"iecst\":{\"title\":\"Structured Text (IEC 61131-3)\",\"owner\":\"serhioromano\"},\"stylus\":{\"title\":\"Stylus\",\"owner\":\"vkbansal\"},\"swift\":{\"title\":\"Swift\",\"require\":\"clike\",\"owner\":\"chrischares\"},\"t4-templating\":{\"title\":\"T4 templating\",\"owner\":\"RunDevelopment\"},\"t4-cs\":{\"title\":\"T4 Text Templates (C#)\",\"require\":[\"t4-templating\",\"csharp\"],\"alias\":\"t4\",\"owner\":\"RunDevelopment\"},\"t4-vb\":{\"title\":\"T4 Text Templates (VB)\",\"require\":[\"t4-templating\",\"vbnet\"],\"owner\":\"RunDevelopment\"},\"tap\":{\"title\":\"TAP\",\"owner\":\"isaacs\",\"require\":\"yaml\"},\"tcl\":{\"title\":\"Tcl\",\"owner\":\"PeterChaplin\"},\"tt2\":{\"title\":\"Template Toolkit 2\",\"require\":[\"clike\",\"markup-templating\"],\"owner\":\"gflohr\"},\"textile\":{\"title\":\"Textile\",\"require\":\"markup\",\"optional\":\"css\",\"owner\":\"Golmote\"},\"toml\":{\"title\":\"TOML\",\"owner\":\"RunDevelopment\"},\"turtle\":{\"title\":\"Turtle\",\"alias\":\"trig\",\"aliasTitles\":{\"trig\":\"TriG\"},\"owner\":\"jakubklimek\"},\"twig\":{\"title\":\"Twig\",\"require\":\"markup\",\"owner\":\"brandonkelly\"},\"typescript\":{\"title\":\"TypeScript\",\"require\":\"javascript\",\"optional\":\"js-templates\",\"alias\":\"ts\",\"owner\":\"vkbansal\"},\"typoscript\":{\"title\":\"TypoScript\",\"alias\":\"tsconfig\",\"aliasTitles\":{\"tsconfig\":\"TSConfig\"},\"owner\":\"dkern\"},\"unrealscript\":{\"title\":\"UnrealScript\",\"alias\":[\"uscript\",\"uc\"],\"owner\":\"RunDevelopment\"},\"v\":{\"title\":\"V\",\"require\":\"clike\",\"owner\":\"taggon\"},\"vala\":{\"title\":\"Vala\",\"require\":\"clike\",\"optional\":\"regex\",\"owner\":\"TemplarVolk\"},\"vbnet\":{\"title\":\"VB.Net\",\"require\":\"basic\",\"owner\":\"Bigsby\"},\"velocity\":{\"title\":\"Velocity\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"verilog\":{\"title\":\"Verilog\",\"owner\":\"a-rey\"},\"vhdl\":{\"title\":\"VHDL\",\"owner\":\"a-rey\"},\"vim\":{\"title\":\"vim\",\"owner\":\"westonganger\"},\"visual-basic\":{\"title\":\"Visual Basic\",\"alias\":[\"vb\",\"vba\"],\"aliasTitles\":{\"vba\":\"VBA\"},\"owner\":\"Golmote\"},\"warpscript\":{\"title\":\"WarpScript\",\"owner\":\"RunDevelopment\"},\"wasm\":{\"title\":\"WebAssembly\",\"owner\":\"Golmote\"},\"wiki\":{\"title\":\"Wiki markup\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"xeora\":{\"title\":\"Xeora\",\"require\":\"markup\",\"alias\":\"xeoracube\",\"aliasTitles\":{\"xeoracube\":\"XeoraCube\"},\"owner\":\"freakmaxi\"},\"xml-doc\":{\"title\":\"XML doc (.net)\",\"require\":\"markup\",\"modify\":[\"csharp\",\"fsharp\",\"vbnet\"],\"owner\":\"RunDevelopment\"},\"xojo\":{\"title\":\"Xojo (REALbasic)\",\"owner\":\"Golmote\"},\"xquery\":{\"title\":\"XQuery\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"yaml\":{\"title\":\"YAML\",\"alias\":\"yml\",\"owner\":\"hason\"},\"yang\":{\"title\":\"YANG\",\"owner\":\"RunDevelopment\"},\"zig\":{\"title\":\"Zig\",\"owner\":\"RunDevelopment\"}},\"plugins\":{\"meta\":{\"path\":\"plugins/{id}/prism-{id}\",\"link\":\"plugins/{id}/\"},\"line-highlight\":{\"title\":\"Line Highlight\",\"description\":\"Highlights specific lines and/or line ranges.\"},\"line-numbers\":{\"title\":\"Line Numbers\",\"description\":\"Line number at the beginning of code lines.\",\"owner\":\"kuba-kubula\"},\"show-invisibles\":{\"title\":\"Show Invisibles\",\"description\":\"Show hidden characters such as tabs and line breaks.\",\"optional\":[\"autolinker\",\"data-uri-highlight\"]},\"autolinker\":{\"title\":\"Autolinker\",\"description\":\"Converts URLs and emails in code to clickable links. Parses Markdown links in comments.\"},\"wpd\":{\"title\":\"WebPlatform Docs\",\"description\":\"Makes tokens link to <a href=\\\"https://webplatform.github.io/docs/\\\">WebPlatform.org documentation</a>. The links open in a new tab.\"},\"custom-class\":{\"title\":\"Custom Class\",\"description\":\"This plugin allows you to prefix Prism's default classes (<code>.comment</code> can become <code>.namespace--comment</code>) or replace them with your defined ones (like <code>.editor__comment</code>). You can even add new classes.\",\"owner\":\"dvkndn\",\"noCSS\":true},\"file-highlight\":{\"title\":\"File Highlight\",\"description\":\"Fetch external files and highlight them with Prism. Used on the Prism website itself.\",\"noCSS\":true},\"show-language\":{\"title\":\"Show Language\",\"description\":\"Display the highlighted language in code blocks (inline code does not show the label).\",\"owner\":\"nauzilus\",\"noCSS\":true,\"require\":\"toolbar\"},\"jsonp-highlight\":{\"title\":\"JSONP Highlight\",\"description\":\"Fetch content with JSONP and highlight some interesting content (e.g. GitHub/Gists or Bitbucket API).\",\"noCSS\":true,\"owner\":\"nauzilus\"},\"highlight-keywords\":{\"title\":\"Highlight Keywords\",\"description\":\"Adds special CSS classes for each keyword matched in the code. For example, the keyword <code>if</code> will have the class <code>keyword-if</code> as well. You can have fine grained control over the appearance of each keyword by providing your own CSS rules.\",\"owner\":\"vkbansal\",\"noCSS\":true},\"remove-initial-line-feed\":{\"title\":\"Remove initial line feed\",\"description\":\"Removes the initial line feed in code blocks.\",\"owner\":\"Golmote\",\"noCSS\":true},\"inline-color\":{\"title\":\"Inline color\",\"description\":\"Adds a small inline preview for colors in style sheets.\",\"require\":\"css-extras\",\"owner\":\"RunDevelopment\"},\"previewers\":{\"title\":\"Previewers\",\"description\":\"Previewers for angles, colors, gradients, easing and time.\",\"require\":\"css-extras\",\"owner\":\"Golmote\"},\"autoloader\":{\"title\":\"Autoloader\",\"description\":\"Automatically loads the needed languages to highlight the code blocks.\",\"owner\":\"Golmote\",\"noCSS\":true},\"keep-markup\":{\"title\":\"Keep Markup\",\"description\":\"Prevents custom markup from being dropped out during highlighting.\",\"owner\":\"Golmote\",\"optional\":\"normalize-whitespace\",\"noCSS\":true},\"command-line\":{\"title\":\"Command Line\",\"description\":\"Display a command line with a prompt and, optionally, the output/response from the commands.\",\"owner\":\"chriswells0\"},\"unescaped-markup\":{\"title\":\"Unescaped Markup\",\"description\":\"Write markup without having to escape anything.\"},\"normalize-whitespace\":{\"title\":\"Normalize Whitespace\",\"description\":\"Supports multiple operations to normalize whitespace in code blocks.\",\"owner\":\"zeitgeist87\",\"optional\":\"unescaped-markup\",\"noCSS\":true},\"data-uri-highlight\":{\"title\":\"Data-URI Highlight\",\"description\":\"Highlights data-URI contents.\",\"owner\":\"Golmote\",\"noCSS\":true},\"toolbar\":{\"title\":\"Toolbar\",\"description\":\"Attach a toolbar for plugins to easily register buttons on the top of a code block.\",\"owner\":\"mAAdhaTTah\"},\"copy-to-clipboard\":{\"title\":\"Copy to Clipboard Button\",\"description\":\"Add a button that copies the code block to the clipboard when clicked.\",\"owner\":\"mAAdhaTTah\",\"require\":\"toolbar\",\"noCSS\":true},\"download-button\":{\"title\":\"Download Button\",\"description\":\"A button in the toolbar of a code block adding a convenient way to download a code file.\",\"owner\":\"Golmote\",\"require\":\"toolbar\",\"noCSS\":true},\"match-braces\":{\"title\":\"Match braces\",\"description\":\"Highlights matching braces.\",\"owner\":\"RunDevelopment\"},\"diff-highlight\":{\"title\":\"Diff Highlight\",\"description\":\"Highlights the code inside diff blocks.\",\"owner\":\"RunDevelopment\",\"require\":\"diff\"},\"filter-highlight-all\":{\"title\":\"Filter highlightAll\",\"description\":\"Filters the elements the <code>highlightAll</code> and <code>highlightAllUnder</code> methods actually highlight.\",\"owner\":\"RunDevelopment\",\"noCSS\":true},\"treeview\":{\"title\":\"Treeview\",\"description\":\"A language with special styles to highlight file system tree structures.\",\"owner\":\"Golmote\"}}};",
            "if (typeof module !== 'undefined' && module.exports) { module.exports = components; }"
        ]
    },
    "components.json": {},
    "composer.json": {},
    "dangerfile.js": {
        "classes": [],
        "functions": [],
        "text": [
            "const { markdown } = require('danger');",
            "const fs = require('fs').promises;",
            "const gzipSize = require('gzip-size');",
            "const git = require('simple-git/promise')(__dirname).silent(true);",
            "",
            "/**",
            " * Returns the contents of a text file in the base of the PR.",
            " *",
            " * The base is usually PrismJS/prism/master.",
            " *",
            " * @param {string} path",
            " * @returns {Promise<string>}",
            " */",
            "function readBaseFile(path) {",
            "\treturn fs.readFile(path, 'utf-8');",
            "}",
            "/**",
            " * Returns the contents of a text file in the pull request branch.",
            " *",
            " * @param {string} path",
            " * @returns {Promise<string>}",
            " */",
            "function readPRFile(path) {",
            "\treturn git.show([`pr:${path}`]);",
            "}",
            "",
            "// https://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript",
            "const formatBytes = (bytes, decimals = 2) => {",
            "\tif (bytes === 0) return '0 Bytes';",
            "",
            "\tconst k = 1000;",
            "\tconst dm = decimals < 0 ? 0 : decimals;",
            "\tconst sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];",
            "",
            "\tconst i = Math.floor(Math.log(Math.abs(bytes)) / Math.log(k));",
            "",
            "\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];",
            "}",
            "",
            "const maybePlus = (from, to) => from < to ? \"+\" : \"\";",
            "",
            "const absDiff = (from, to) => {",
            "\tif (from === to) {",
            "\t\treturn formatBytes(0);",
            "\t}",
            "",
            "\treturn `${maybePlus(from, to)}${formatBytes(to - from)}`;",
            "}",
            "",
            "const percDiff = (from, to) => {",
            "\tif (from === to) {",
            "\t\treturn '0%';",
            "\t}",
            "",
            "\treturn `${maybePlus(from, to)}${(100 * (to - from) / (from || to)).toFixed(1)}%`;",
            "}",
            "",
            "const getSummary = (rows, totalMasterFileSize, totalFileSize) => {",
            "\tconst numFiles = rows.length;",
            "\tconst maybeS = rows.length > 0 ? 's' : '';",
            "\tconst byteDiff = absDiff(totalMasterFileSize, totalFileSize);",
            "\tconst percentDiff = percDiff(totalMasterFileSize, totalFileSize);",
            "",
            "\treturn `A total of ${numFiles} file${maybeS} have changed, with a combined diff of ${byteDiff} (${percentDiff}).`;",
            "}",
            "",
            "const getChangedMinifiedFiles = async () => {",
            "\tconst result = await git.diff(['--name-only', '--no-renames', 'pr', 'HEAD']);",
            "\treturn (result || '').split(/\\r?\\n/g).filter(file => file.endsWith('.min.js'));",
            "};",
            "",
            "const run = async () => {",
            "\tconst minified = await getChangedMinifiedFiles();",
            "",
            "\tif (minified.length === 0) {",
            "\t\tmarkdown(`## No JS Changes`);",
            "\t\treturn;",
            "\t}",
            "",
            "\tconst rows = [];",
            "\tlet totalFileSize = 0;",
            "\tlet totalMasterFileSize = 0;",
            "",
            "\tfor (const file of minified) {",
            "\t\tconst [fileContents, fileMasterContents] = await Promise.all([",
            "\t\t\treadPRFile(file).catch(() => ''),",
            "\t\t\treadBaseFile(file).catch(() => ''),",
            "\t\t]);",
            "",
            "\t\tconst [fileSize, fileMasterSize] = await Promise.all([",
            "\t\t\tgzipSize(fileContents),",
            "\t\t\tgzipSize(fileMasterContents),",
            "\t\t]);",
            "",
            "\t\ttotalFileSize += fileSize;",
            "\t\ttotalMasterFileSize += fileMasterSize",
            "",
            "\t\trows.push([",
            "\t\t\tfile,",
            "\t\t\tformatBytes(fileMasterSize),",
            "\t\t\tformatBytes(fileSize),",
            "\t\t\tabsDiff(fileMasterSize, fileSize),",
            "\t\t\tpercDiff(fileMasterSize, fileSize),",
            "\t\t]);",
            "\t}",
            "",
            "\tmarkdown(`## JS File Size Changes (gzipped)",
            "",
            "${getSummary(rows, totalMasterFileSize, totalFileSize)}",
            "",
            "<details>",
            "",
            "| file | master | pull | size diff | % diff |",
            "| --- | --- | --- | --- | --- |",
            "${rows.map(row => `| ${row.join(' | ')} |`).join('\\n')}",
            "",
            "</details>",
            "`);",
            "}",
            "",
            "run().catch(err => {",
            "\tconsole.error(err);",
            "\tprocess.exit(1);",
            "});"
        ]
    },
    "dependencies.js": {
        "classes": [],
        "functions": [],
        "text": [
            "\"use strict\";",
            "",
            "/**",
            " * @typedef {Object<string, ComponentCategory>} Components",
            " * @typedef {Object<string, ComponentEntry | string>} ComponentCategory",
            " *",
            " * @typedef ComponentEntry",
            " * @property {string} [title] The title of the component.",
            " * @property {string} [owner] The GitHub user name of the owner.",
            " * @property {boolean} [noCSS=false] Whether the component doesn't have style sheets which should also be loaded.",
            " * @property {string | string[]} [alias] An optional list of aliases for the id of the component.",
            " * @property {Object<string, string>} [aliasTitles] An optional map from an alias to its title.",
            " *",
            " * Aliases which are not in this map will the get title of the component.",
            " * @property {string | string[]} [optional]",
            " * @property {string | string[]} [require]",
            " * @property {string | string[]} [modify]",
            " */",
            "",
            "var getLoader = (function () {",
            "",
            "\t/**",
            "\t * A function which does absolutely nothing.",
            "\t *",
            "\t * @type {any}",
            "\t */",
            "\tvar noop = function () { };",
            "",
            "\t/**",
            "\t * Invokes the given callback for all elements of the given value.",
            "\t *",
            "\t * If the given value is an array, the callback will be invokes for all elements. If the given value is `null` or",
            "\t * `undefined`, the callback will not be invoked. In all other cases, the callback will be invoked with the given",
            "\t * value as parameter.",
            "\t *",
            "\t * @param {null | undefined | T | T[]} value",
            "\t * @param {(value: T, index: number) => void} callbackFn",
            "\t * @returns {void}",
            "\t * @template T",
            "\t */",
            "\tfunction forEach(value, callbackFn) {",
            "\t\tif (Array.isArray(value)) {",
            "\t\t\tvalue.forEach(callbackFn);",
            "\t\t} else if (value != null) {",
            "\t\t\tcallbackFn(value, 0);",
            "\t\t}",
            "\t}",
            "",
            "\t/**",
            "\t * Returns a new set for the given string array.",
            "\t *",
            "\t * @param {string[]} array",
            "\t * @returns {StringSet}",
            "\t *",
            "\t * @typedef {Object<string, true>} StringSet",
            "\t */",
            "\tfunction toSet(array) {",
            "\t\t/** @type {StringSet} */",
            "\t\tvar set = {};",
            "\t\tfor (var i = 0, l = array.length; i < l; i++) {",
            "\t\t\tset[array[i]] = true;",
            "\t\t}",
            "\t\treturn set;",
            "\t}",
            "",
            "\t/**",
            "\t * Creates a map of every components id to its entry.",
            "\t *",
            "\t * @param {Components} components",
            "\t * @returns {EntryMap}",
            "\t *",
            "\t * @typedef {{ readonly [id: string]: Readonly<ComponentEntry> | undefined }} EntryMap",
            "\t */",
            "\tfunction createEntryMap(components) {",
            "\t\t/** @type {Object<string, Readonly<ComponentEntry>>} */",
            "\t\tvar map = {};",
            "",
            "\t\tfor (var categoryName in components) {",
            "\t\t\tvar category = components[categoryName];",
            "\t\t\tfor (var id in category) {",
            "\t\t\t\tif (id != 'meta') {",
            "\t\t\t\t\t/** @type {ComponentEntry | string} */",
            "\t\t\t\t\tvar entry = category[id];",
            "\t\t\t\t\tmap[id] = typeof entry == 'string' ? { title: entry } : entry;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\treturn map;",
            "\t}",
            "",
            "\t/**",
            "\t * Creates a full dependencies map which includes all types of dependencies and their transitive dependencies.",
            "\t *",
            "\t * @param {EntryMap} entryMap",
            "\t * @returns {DependencyResolver}",
            "\t *",
            "\t * @typedef {(id: string) => StringSet} DependencyResolver",
            "\t */",
            "\tfunction createDependencyResolver(entryMap) {",
            "\t\t/** @type {Object<string, StringSet>} */",
            "\t\tvar map = {};",
            "\t\tvar _stackArray = [];",
            "",
            "\t\t/**",
            "\t\t * Adds the dependencies of the given component to the dependency map.",
            "\t\t *",
            "\t\t * @param {string} id",
            "\t\t * @param {string[]} stack",
            "\t\t */",
            "\t\tfunction addToMap(id, stack) {",
            "\t\t\tif (id in map) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\tstack.push(id);",
            "",
            "\t\t\t// check for circular dependencies",
            "\t\t\tvar firstIndex = stack.indexOf(id);",
            "\t\t\tif (firstIndex < stack.length - 1) {",
            "\t\t\t\tthrow new Error('Circular dependency: ' + stack.slice(firstIndex).join(' -> '));",
            "\t\t\t}",
            "",
            "\t\t\t/** @type {StringSet} */",
            "\t\t\tvar dependencies = {};",
            "",
            "\t\t\tvar entry = entryMap[id];",
            "\t\t\tif (entry) {",
            "\t\t\t\t/**",
            "\t\t\t\t * This will add the direct dependency and all of its transitive dependencies to the set of",
            "\t\t\t\t * dependencies of `entry`.",
            "\t\t\t\t *",
            "\t\t\t\t * @param {string} depId",
            "\t\t\t\t * @returns {void}",
            "\t\t\t\t */",
            "\t\t\t\tfunction handleDirectDependency(depId) {",
            "\t\t\t\t\tif (!(depId in entryMap)) {",
            "\t\t\t\t\t\tthrow new Error(id + ' depends on an unknown component ' + depId);",
            "\t\t\t\t\t}",
            "\t\t\t\t\tif (depId in dependencies) {",
            "\t\t\t\t\t\t// if the given dependency is already in the set of deps, then so are its transitive deps",
            "\t\t\t\t\t\treturn;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\taddToMap(depId, stack);",
            "\t\t\t\t\tdependencies[depId] = true;",
            "\t\t\t\t\tfor (var transitiveDepId in map[depId]) {",
            "\t\t\t\t\t\tdependencies[transitiveDepId] = true;",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "",
            "\t\t\t\tforEach(entry.require, handleDirectDependency);",
            "\t\t\t\tforEach(entry.optional, handleDirectDependency);",
            "\t\t\t\tforEach(entry.modify, handleDirectDependency);",
            "\t\t\t}",
            "",
            "\t\t\tmap[id] = dependencies;",
            "",
            "\t\t\tstack.pop();",
            "\t\t}",
            "",
            "\t\treturn function (id) {",
            "\t\t\tvar deps = map[id];",
            "\t\t\tif (!deps) {",
            "\t\t\t\taddToMap(id, _stackArray);",
            "\t\t\t\tdeps = map[id];",
            "\t\t\t}",
            "\t\t\treturn deps;",
            "\t\t};",
            "\t}",
            "",
            "\t/**",
            "\t * Returns a function which resolves the aliases of its given id of alias.",
            "\t *",
            "\t * @param {EntryMap} entryMap",
            "\t * @returns {(idOrAlias: string) => string}",
            "\t */",
            "\tfunction createAliasResolver(entryMap) {",
            "\t\t/** @type {Object<string, string> | undefined} */",
            "\t\tvar map;",
            "",
            "\t\treturn function (idOrAlias) {",
            "\t\t\tif (idOrAlias in entryMap) {",
            "\t\t\t\treturn idOrAlias;",
            "\t\t\t} else {",
            "\t\t\t\t// only create the alias map if necessary",
            "\t\t\t\tif (!map) {",
            "\t\t\t\t\tmap = {};",
            "",
            "\t\t\t\t\tfor (var id in entryMap) {",
            "\t\t\t\t\t\tvar entry = entryMap[id];",
            "\t\t\t\t\t\tforEach(entry && entry.alias, function (alias) {",
            "\t\t\t\t\t\t\tif (alias in map) {",
            "\t\t\t\t\t\t\t\tthrow new Error(alias + ' cannot be alias for both ' + id + ' and ' + map[alias]);",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\tif (alias in entryMap) {",
            "\t\t\t\t\t\t\t\tthrow new Error(alias + ' cannot be alias of ' + id + ' because it is a component.');",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\tmap[alias] = id;",
            "\t\t\t\t\t\t});",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\treturn map[idOrAlias] || idOrAlias;",
            "\t\t\t}",
            "\t\t};",
            "\t}",
            "",
            "\t/**",
            "\t * @typedef LoadChainer",
            "\t * @property {(before: T, after: () => T) => T} series",
            "\t * @property {(values: T[]) => T} parallel",
            "\t * @template T",
            "\t */",
            "",
            "\t/**",
            "\t * Creates an implicit DAG from the given components and dependencies and call the given `loadComponent` for each",
            "\t * component in topological order.",
            "\t *",
            "\t * @param {DependencyResolver} dependencyResolver",
            "\t * @param {StringSet} ids",
            "\t * @param {(id: string) => T} loadComponent",
            "\t * @param {LoadChainer<T>} [chainer]",
            "\t * @returns {T}",
            "\t * @template T",
            "\t */",
            "\tfunction loadComponentsInOrder(dependencyResolver, ids, loadComponent, chainer) {",
            "\t\tconst series = chainer ? chainer.series : undefined;",
            "\t\tconst parallel = chainer ? chainer.parallel : noop;",
            "",
            "\t\t/** @type {Object<string, T>} */",
            "\t\tvar cache = {};",
            "",
            "\t\t/**",
            "\t\t * A set of ids of nodes which are not depended upon by any other node in the graph.",
            "\t\t * @type {StringSet}",
            "\t\t */",
            "\t\tvar ends = {};",
            "",
            "\t\t/**",
            "\t\t * Loads the given component and its dependencies or returns the cached value.",
            "\t\t *",
            "\t\t * @param {string} id",
            "\t\t * @returns {T}",
            "\t\t */",
            "\t\tfunction handleId(id) {",
            "\t\t\tif (id in cache) {",
            "\t\t\t\treturn cache[id];",
            "\t\t\t}",
            "",
            "\t\t\t// assume that it's an end",
            "\t\t\t// if it isn't, it will be removed later",
            "\t\t\tends[id] = true;",
            "",
            "\t\t\t// all dependencies of the component in the given ids",
            "\t\t\tvar dependsOn = [];",
            "\t\t\tfor (var depId in dependencyResolver(id)) {",
            "\t\t\t\tif (depId in ids) {",
            "\t\t\t\t\tdependsOn.push(depId);",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t\t/**",
            "\t\t\t * The value to be returned.",
            "\t\t\t * @type {T}",
            "\t\t\t */",
            "\t\t\tvar value;",
            "",
            "\t\t\tif (dependsOn.length === 0) {",
            "\t\t\t\tvalue = loadComponent(id);",
            "\t\t\t} else {",
            "\t\t\t\tvar depsValue = parallel(dependsOn.map(function (depId) {",
            "\t\t\t\t\tvar value = handleId(depId);",
            "\t\t\t\t\t// none of the dependencies can be ends",
            "\t\t\t\t\tdelete ends[depId];",
            "\t\t\t\t\treturn value;",
            "\t\t\t\t}));",
            "\t\t\t\tif (series) {",
            "\t\t\t\t\t// the chainer will be responsibly for calling the function calling loadComponent",
            "\t\t\t\t\tvalue = series(depsValue, function () { return loadComponent(id); });",
            "\t\t\t\t} else {",
            "\t\t\t\t\t// we don't have a chainer, so we call loadComponent ourselves",
            "\t\t\t\t\tloadComponent(id);",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t\t// cache and return",
            "\t\t\treturn cache[id] = value;",
            "\t\t}",
            "",
            "\t\tfor (var id in ids) {",
            "\t\t\thandleId(id);",
            "\t\t}",
            "",
            "\t\t/** @type {T[]} */",
            "\t\tvar endValues = [];",
            "\t\tfor (var endId in ends) {",
            "\t\t\tendValues.push(cache[endId]);",
            "\t\t}",
            "\t\treturn parallel(endValues);",
            "\t}",
            "",
            "\t/**",
            "\t * Returns whether the given object has any keys.",
            "\t *",
            "\t * @param {object} obj",
            "\t */",
            "\tfunction hasKeys(obj) {",
            "\t\tfor (var key in obj) {",
            "\t\t\treturn true;",
            "\t\t}",
            "\t\treturn false;",
            "\t}",
            "",
            "\t/**",
            "\t * Returns an object which provides methods to get the ids of the components which have to be loaded (`getIds`) and",
            "\t * a way to efficiently load them in synchronously and asynchronous contexts (`load`).",
            "\t *",
            "\t * The set of ids to be loaded is a superset of `load`. If some of these ids are in `loaded`, the corresponding",
            "\t * components will have to reloaded.",
            "\t *",
            "\t * The ids in `load` and `loaded` may be in any order and can contain duplicates.",
            "\t *",
            "\t * @param {Components} components",
            "\t * @param {string[]} load",
            "\t * @param {string[]} [loaded=[]] A list of already loaded components.",
            "\t *",
            "\t * If a component is in this list, then all of its requirements will also be assumed to be in the list.",
            "\t * @returns {Loader}",
            "\t *",
            "\t * @typedef Loader",
            "\t * @property {() => string[]} getIds A function to get all ids of the components to load.",
            "\t *",
            "\t * The returned ids will be duplicate-free, alias-free and in load order.",
            "\t * @property {LoadFunction} load A functional interface to load components.",
            "\t *",
            "\t * @typedef {<T> (loadComponent: (id: string) => T, chainer?: LoadChainer<T>) => T} LoadFunction",
            "\t * A functional interface to load components.",
            "\t *",
            "\t * The `loadComponent` function will be called for every component in the order in which they have to be loaded.",
            "\t *",
            "\t * The `chainer` is useful for asynchronous loading and its `series` and `parallel` functions can be thought of as",
            "\t * `Promise#then` and `Promise.all`.",
            "\t *",
            "\t * @example",
            "\t * load(id => { loadComponent(id); }); // returns undefined",
            "\t *",
            "\t * await load(",
            "\t *     id => loadComponentAsync(id), // returns a Promise for each id",
            "\t *     {",
            "\t *         series: async (before, after) => {",
            "\t *             await before;",
            "\t *             await after();",
            "\t *         },",
            "\t *         parallel: async (values) => {",
            "\t *             await Promise.all(values);",
            "\t *         }",
            "\t *     }",
            "\t * );",
            "\t */",
            "\tfunction getLoader(components, load, loaded) {",
            "\t\tvar entryMap = createEntryMap(components);",
            "\t\tvar resolveAlias = createAliasResolver(entryMap);",
            "",
            "\t\tload = load.map(resolveAlias);",
            "\t\tloaded = (loaded || []).map(resolveAlias);",
            "",
            "\t\tvar loadSet = toSet(load);",
            "\t\tvar loadedSet = toSet(loaded);",
            "",
            "\t\t// add requirements",
            "",
            "\t\tload.forEach(addRequirements);",
            "\t\tfunction addRequirements(id) {",
            "\t\t\tvar entry = entryMap[id];",
            "\t\t\tforEach(entry && entry.require, function (reqId) {",
            "\t\t\t\tif (!(reqId in loadedSet)) {",
            "\t\t\t\t\tloadSet[reqId] = true;",
            "\t\t\t\t\taddRequirements(reqId);",
            "\t\t\t\t}",
            "\t\t\t});",
            "\t\t}",
            "",
            "\t\t// add components to reload",
            "",
            "\t\t// A component x in `loaded` has to be reloaded if",
            "\t\t//  1) a component in `load` modifies x.",
            "\t\t//  2) x depends on a component in `load`.",
            "\t\t// The above two condition have to be applied until nothing changes anymore.",
            "",
            "\t\tvar dependencyResolver = createDependencyResolver(entryMap);",
            "",
            "\t\t/** @type {StringSet} */",
            "\t\tvar loadAdditions = loadSet;",
            "\t\t/** @type {StringSet} */",
            "\t\tvar newIds;",
            "\t\twhile (hasKeys(loadAdditions)) {",
            "\t\t\tnewIds = {};",
            "",
            "\t\t\t// condition 1)",
            "\t\t\tfor (var loadId in loadAdditions) {",
            "\t\t\t\tvar entry = entryMap[loadId];",
            "\t\t\t\tforEach(entry && entry.modify, function (modId) {",
            "\t\t\t\t\tif (modId in loadedSet) {",
            "\t\t\t\t\t\tnewIds[modId] = true;",
            "\t\t\t\t\t}",
            "\t\t\t\t});",
            "\t\t\t}",
            "",
            "\t\t\t// condition 2)",
            "\t\t\tfor (var loadedId in loadedSet) {",
            "\t\t\t\tif (!(loadedId in loadSet)) {",
            "\t\t\t\t\tfor (var depId in dependencyResolver(loadedId)) {",
            "\t\t\t\t\t\tif (depId in loadSet) {",
            "\t\t\t\t\t\t\tnewIds[loadedId] = true;",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t\tloadAdditions = newIds;",
            "\t\t\tfor (var newId in loadAdditions) {",
            "\t\t\t\tloadSet[newId] = true;",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\t/** @type {Loader} */",
            "\t\tvar loader = {",
            "\t\t\tgetIds: function () {",
            "\t\t\t\tvar ids = [];",
            "\t\t\t\tloader.load(function (id) {",
            "\t\t\t\t\tids.push(id);",
            "\t\t\t\t});",
            "\t\t\t\treturn ids;",
            "\t\t\t},",
            "\t\t\tload: function (loadComponent, chainer) {",
            "\t\t\t\treturn loadComponentsInOrder(dependencyResolver, loadSet, loadComponent, chainer);",
            "\t\t\t}",
            "\t\t};",
            "",
            "\t\treturn loader;",
            "\t}",
            "",
            "\treturn getLoader;",
            "",
            "}());",
            "",
            "if (typeof module !== 'undefined') {",
            "\tmodule.exports = getLoader;",
            "}"
        ]
    },
    "download.html": {},
    "examples.html": {},
    "extending.html": {},
    "faq.html": {},
    "index.html": {},
    "known-failures.html": {},
    "package-lock.json": {},
    "package.json": {},
    "prism.js": {
        "classes": [],
        "functions": [],
        "text": [
            "",
            "/* **********************************************",
            "     Begin prism-core.js",
            "********************************************** */",
            "",
            "/// <reference lib=\"WebWorker\"/>",
            "",
            "var _self = (typeof window !== 'undefined')",
            "\t? window   // if in browser",
            "\t: (",
            "\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)",
            "\t\t? self // if in worker",
            "\t\t: {}   // if in node js",
            "\t);",
            "",
            "/**",
            " * Prism: Lightweight, robust, elegant syntax highlighting",
            " *",
            " * @license MIT <https://opensource.org/licenses/MIT>",
            " * @author Lea Verou <https://lea.verou.me>",
            " * @namespace",
            " * @public",
            " */",
            "var Prism = (function (_self){",
            "",
            "// Private helper vars",
            "var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
            "var uniqueId = 0;",
            "",
            "",
            "var _ = {",
            "\t/**",
            "\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the",
            "\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load",
            "\t * additional languages or plugins yourself.",
            "\t *",
            "\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.",
            "\t *",
            "\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an",
            "\t * empty Prism object into the global scope before loading the Prism script like this:",
            "\t *",
            "\t * ```js",
            "\t * window.Prism = window.Prism || {};",
            "\t * Prism.manual = true;",
            "\t * // add a new <script> to load Prism's script",
            "\t * ```",
            "\t *",
            "\t * @default false",
            "\t * @type {boolean}",
            "\t * @memberof Prism",
            "\t * @public",
            "\t */",
            "\tmanual: _self.Prism && _self.Prism.manual,",
            "\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,",
            "",
            "\t/**",
            "\t * A namespace for utility methods.",
            "\t *",
            "\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may",
            "\t * change or disappear at any time.",
            "\t *",
            "\t * @namespace",
            "\t * @memberof Prism",
            "\t */",
            "\tutil: {",
            "\t\tencode: function encode(tokens) {",
            "\t\t\tif (tokens instanceof Token) {",
            "\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);",
            "\t\t\t} else if (Array.isArray(tokens)) {",
            "\t\t\t\treturn tokens.map(encode);",
            "\t\t\t} else {",
            "\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');",
            "\t\t\t}",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Returns the name of the type of the given value.",
            "\t\t *",
            "\t\t * @param {any} o",
            "\t\t * @returns {string}",
            "\t\t * @example",
            "\t\t * type(null)      === 'Null'",
            "\t\t * type(undefined) === 'Undefined'",
            "\t\t * type(123)       === 'Number'",
            "\t\t * type('foo')     === 'String'",
            "\t\t * type(true)      === 'Boolean'",
            "\t\t * type([1, 2])    === 'Array'",
            "\t\t * type({})        === 'Object'",
            "\t\t * type(String)    === 'Function'",
            "\t\t * type(/abc+/)    === 'RegExp'",
            "\t\t */",
            "\t\ttype: function (o) {",
            "\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Returns a unique number for the given object. Later calls will still return the same number.",
            "\t\t *",
            "\t\t * @param {Object} obj",
            "\t\t * @returns {number}",
            "\t\t */",
            "\t\tobjId: function (obj) {",
            "\t\t\tif (!obj['__id']) {",
            "\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });",
            "\t\t\t}",
            "\t\t\treturn obj['__id'];",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Creates a deep clone of the given object.",
            "\t\t *",
            "\t\t * The main intended use of this function is to clone language definitions.",
            "\t\t *",
            "\t\t * @param {T} o",
            "\t\t * @param {Record<number, any>} [visited]",
            "\t\t * @returns {T}",
            "\t\t * @template T",
            "\t\t */",
            "\t\tclone: function deepClone(o, visited) {",
            "\t\t\tvisited = visited || {};",
            "",
            "\t\t\tvar clone, id;",
            "\t\t\tswitch (_.util.type(o)) {",
            "\t\t\t\tcase 'Object':",
            "\t\t\t\t\tid = _.util.objId(o);",
            "\t\t\t\t\tif (visited[id]) {",
            "\t\t\t\t\t\treturn visited[id];",
            "\t\t\t\t\t}",
            "\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});",
            "\t\t\t\t\tvisited[id] = clone;",
            "",
            "\t\t\t\t\tfor (var key in o) {",
            "\t\t\t\t\t\tif (o.hasOwnProperty(key)) {",
            "\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\treturn /** @type {any} */ (clone);",
            "",
            "\t\t\t\tcase 'Array':",
            "\t\t\t\t\tid = _.util.objId(o);",
            "\t\t\t\t\tif (visited[id]) {",
            "\t\t\t\t\t\treturn visited[id];",
            "\t\t\t\t\t}",
            "\t\t\t\t\tclone = [];",
            "\t\t\t\t\tvisited[id] = clone;",
            "",
            "\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {",
            "\t\t\t\t\t\tclone[i] = deepClone(v, visited);",
            "\t\t\t\t\t});",
            "",
            "\t\t\t\t\treturn /** @type {any} */ (clone);",
            "",
            "\t\t\t\tdefault:",
            "\t\t\t\t\treturn o;",
            "\t\t\t}",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.",
            "\t\t *",
            "\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.",
            "\t\t *",
            "\t\t * @param {Element} element",
            "\t\t * @returns {string}",
            "\t\t */",
            "\t\tgetLanguage: function (element) {",
            "\t\t\twhile (element && !lang.test(element.className)) {",
            "\t\t\t\telement = element.parentElement;",
            "\t\t\t}",
            "\t\t\tif (element) {",
            "\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();",
            "\t\t\t}",
            "\t\t\treturn 'none';",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Returns the script element that is currently executing.",
            "\t\t *",
            "\t\t * This does __not__ work for line script element.",
            "\t\t *",
            "\t\t * @returns {HTMLScriptElement | null}",
            "\t\t */",
            "\t\tcurrentScript: function () {",
            "\t\t\tif (typeof document === 'undefined') {",
            "\t\t\t\treturn null;",
            "\t\t\t}",
            "\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {",
            "\t\t\t\treturn /** @type {any} */ (document.currentScript);",
            "\t\t\t}",
            "",
            "\t\t\t// IE11 workaround",
            "\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace",
            "\t\t\t// this will not work for inline scripts",
            "",
            "\t\t\ttry {",
            "\t\t\t\tthrow new Error();",
            "\t\t\t} catch (err) {",
            "\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.",
            "\t\t\t\t// A stack will look like this:",
            "\t\t\t\t//",
            "\t\t\t\t// Error",
            "\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)",
            "\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)",
            "",
            "\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(err.stack) || [])[1];",
            "\t\t\t\tif (src) {",
            "\t\t\t\t\tvar scripts = document.getElementsByTagName('script');",
            "\t\t\t\t\tfor (var i in scripts) {",
            "\t\t\t\t\t\tif (scripts[i].src == src) {",
            "\t\t\t\t\t\t\treturn scripts[i];",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\treturn null;",
            "\t\t\t}",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Returns whether a given class is active for `element`.",
            "\t\t *",
            "\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated",
            "\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the",
            "\t\t * given class is just the given class with a `no-` prefix.",
            "\t\t *",
            "\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is",
            "\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its",
            "\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.",
            "\t\t *",
            "\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated",
            "\t\t * version of it, the class is considered active.",
            "\t\t *",
            "\t\t * @param {Element} element",
            "\t\t * @param {string} className",
            "\t\t * @param {boolean} [defaultActivation=false]",
            "\t\t * @returns {boolean}",
            "\t\t */",
            "\t\tisActive: function (element, className, defaultActivation) {",
            "\t\t\tvar no = 'no-' + className;",
            "",
            "\t\t\twhile (element) {",
            "\t\t\t\tvar classList = element.classList;",
            "\t\t\t\tif (classList.contains(className)) {",
            "\t\t\t\t\treturn true;",
            "\t\t\t\t}",
            "\t\t\t\tif (classList.contains(no)) {",
            "\t\t\t\t\treturn false;",
            "\t\t\t\t}",
            "\t\t\t\telement = element.parentElement;",
            "\t\t\t}",
            "\t\t\treturn !!defaultActivation;",
            "\t\t}",
            "\t},",
            "",
            "\t/**",
            "\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.",
            "\t *",
            "\t * @namespace",
            "\t * @memberof Prism",
            "\t * @public",
            "\t */",
            "\tlanguages: {",
            "\t\t/**",
            "\t\t * Creates a deep copy of the language with the given id and appends the given tokens.",
            "\t\t *",
            "\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language",
            "\t\t * will be overwritten at its original position.",
            "\t\t *",
            "\t\t * ## Best practices",
            "\t\t *",
            "\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)",
            "\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to",
            "\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.",
            "\t\t *",
            "\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.",
            "\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.",
            "\t\t *",
            "\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.",
            "\t\t * @param {Grammar} redef The new tokens to append.",
            "\t\t * @returns {Grammar} The new language created.",
            "\t\t * @public",
            "\t\t * @example",
            "\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {",
            "\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token",
            "\t\t *     // at its original position",
            "\t\t *     'comment': { ... },",
            "\t\t *     // CSS doesn't have a 'color' token, so this token will be appended",
            "\t\t *     'color': /\\b(?:red|green|blue)\\b/",
            "\t\t * });",
            "\t\t */",
            "\t\textend: function (id, redef) {",
            "\t\t\tvar lang = _.util.clone(_.languages[id]);",
            "",
            "\t\t\tfor (var key in redef) {",
            "\t\t\t\tlang[key] = redef[key];",
            "\t\t\t}",
            "",
            "\t\t\treturn lang;",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.",
            "\t\t *",
            "\t\t * ## Usage",
            "\t\t *",
            "\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition",
            "\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded",
            "\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the",
            "\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do",
            "\t\t * this:",
            "\t\t *",
            "\t\t * ```js",
            "\t\t * Prism.languages.markup.style = {",
            "\t\t *     // token",
            "\t\t * };",
            "\t\t * ```",
            "\t\t *",
            "\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens",
            "\t\t * before existing tokens. For the CSS example above, you would use it like this:",
            "\t\t *",
            "\t\t * ```js",
            "\t\t * Prism.languages.insertBefore('markup', 'cdata', {",
            "\t\t *     'style': {",
            "\t\t *         // token",
            "\t\t *     }",
            "\t\t * });",
            "\t\t * ```",
            "\t\t *",
            "\t\t * ## Special cases",
            "\t\t *",
            "\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar",
            "\t\t * will be ignored.",
            "\t\t *",
            "\t\t * This behavior can be used to insert tokens after `before`:",
            "\t\t *",
            "\t\t * ```js",
            "\t\t * Prism.languages.insertBefore('markup', 'comment', {",
            "\t\t *     'comment': Prism.languages.markup.comment,",
            "\t\t *     // tokens after 'comment'",
            "\t\t * });",
            "\t\t * ```",
            "\t\t *",
            "\t\t * ## Limitations",
            "\t\t *",
            "\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object",
            "\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave",
            "\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily",
            "\t\t * deleting properties which is necessary to insert at arbitrary positions.",
            "\t\t *",
            "\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.",
            "\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This",
            "\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.",
            "\t\t *",
            "\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if",
            "\t\t * you hold the target object in a variable, then the value of the variable will not change.",
            "\t\t *",
            "\t\t * ```js",
            "\t\t * var oldMarkup = Prism.languages.markup;",
            "\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });",
            "\t\t *",
            "\t\t * assert(oldMarkup !== Prism.languages.markup);",
            "\t\t * assert(newMarkup === Prism.languages.markup);",
            "\t\t * ```",
            "\t\t *",
            "\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the",
            "\t\t * object to be modified.",
            "\t\t * @param {string} before The key to insert before.",
            "\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.",
            "\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the",
            "\t\t * object to be modified.",
            "\t\t *",
            "\t\t * Defaults to `Prism.languages`.",
            "\t\t * @returns {Grammar} The new grammar object.",
            "\t\t * @public",
            "\t\t */",
            "\t\tinsertBefore: function (inside, before, insert, root) {",
            "\t\t\troot = root || /** @type {any} */ (_.languages);",
            "\t\t\tvar grammar = root[inside];",
            "\t\t\t/** @type {Grammar} */",
            "\t\t\tvar ret = {};",
            "",
            "\t\t\tfor (var token in grammar) {",
            "\t\t\t\tif (grammar.hasOwnProperty(token)) {",
            "",
            "\t\t\t\t\tif (token == before) {",
            "\t\t\t\t\t\tfor (var newToken in insert) {",
            "\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
            "\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\t// Do not insert token which also occur in insert. See #1525",
            "\t\t\t\t\tif (!insert.hasOwnProperty(token)) {",
            "\t\t\t\t\t\tret[token] = grammar[token];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t\tvar old = root[inside];",
            "\t\t\troot[inside] = ret;",
            "",
            "\t\t\t// Update references in other language definitions",
            "\t\t\t_.languages.DFS(_.languages, function(key, value) {",
            "\t\t\t\tif (value === old && key != inside) {",
            "\t\t\t\t\tthis[key] = ret;",
            "\t\t\t\t}",
            "\t\t\t});",
            "",
            "\t\t\treturn ret;",
            "\t\t},",
            "",
            "\t\t// Traverse a language definition with Depth First Search",
            "\t\tDFS: function DFS(o, callback, type, visited) {",
            "\t\t\tvisited = visited || {};",
            "",
            "\t\t\tvar objId = _.util.objId;",
            "",
            "\t\t\tfor (var i in o) {",
            "\t\t\t\tif (o.hasOwnProperty(i)) {",
            "\t\t\t\t\tcallback.call(o, i, o[i], type || i);",
            "",
            "\t\t\t\t\tvar property = o[i],",
            "\t\t\t\t\t    propertyType = _.util.type(property);",
            "",
            "\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {",
            "\t\t\t\t\t\tvisited[objId(property)] = true;",
            "\t\t\t\t\t\tDFS(property, callback, null, visited);",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse if (propertyType === 'Array' && !visited[objId(property)]) {",
            "\t\t\t\t\t\tvisited[objId(property)] = true;",
            "\t\t\t\t\t\tDFS(property, callback, i, visited);",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "",
            "\tplugins: {},",
            "",
            "\t/**",
            "\t * This is the most high-level function in Prism’s API.",
            "\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on",
            "\t * each one of them.",
            "\t *",
            "\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.",
            "\t *",
            "\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.",
            "\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.",
            "\t * @memberof Prism",
            "\t * @public",
            "\t */",
            "\thighlightAll: function(async, callback) {",
            "\t\t_.highlightAllUnder(document, async, callback);",
            "\t},",
            "",
            "\t/**",
            "\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls",
            "\t * {@link Prism.highlightElement} on each one of them.",
            "\t *",
            "\t * The following hooks will be run:",
            "\t * 1. `before-highlightall`",
            "\t * 2. `before-all-elements-highlight`",
            "\t * 3. All hooks of {@link Prism.highlightElement} for each element.",
            "\t *",
            "\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.",
            "\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.",
            "\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.",
            "\t * @memberof Prism",
            "\t * @public",
            "\t */",
            "\thighlightAllUnder: function(container, async, callback) {",
            "\t\tvar env = {",
            "\t\t\tcallback: callback,",
            "\t\t\tcontainer: container,",
            "\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'",
            "\t\t};",
            "",
            "\t\t_.hooks.run('before-highlightall', env);",
            "",
            "\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));",
            "",
            "\t\t_.hooks.run('before-all-elements-highlight', env);",
            "",
            "\t\tfor (var i = 0, element; element = env.elements[i++];) {",
            "\t\t\t_.highlightElement(element, async === true, env.callback);",
            "\t\t}",
            "\t},",
            "",
            "\t/**",
            "\t * Highlights the code inside a single element.",
            "\t *",
            "\t * The following hooks will be run:",
            "\t * 1. `before-sanity-check`",
            "\t * 2. `before-highlight`",
            "\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.",
            "\t * 4. `before-insert`",
            "\t * 5. `after-highlight`",
            "\t * 6. `complete`",
            "\t *",
            "\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for",
            "\t * the element's language.",
            "\t *",
            "\t * @param {Element} element The element containing the code.",
            "\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.",
            "\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers",
            "\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is",
            "\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).",
            "\t *",
            "\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for",
            "\t * asynchronous highlighting to work. You can build your own bundle on the",
            "\t * [Download page](https://prismjs.com/download.html).",
            "\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.",
            "\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.",
            "\t * @memberof Prism",
            "\t * @public",
            "\t */",
            "\thighlightElement: function(element, async, callback) {",
            "\t\t// Find language",
            "\t\tvar language = _.util.getLanguage(element);",
            "\t\tvar grammar = _.languages[language];",
            "",
            "\t\t// Set language on the element, if not present",
            "\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
            "",
            "\t\t// Set language on the parent, for styling",
            "\t\tvar parent = element.parentElement;",
            "\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {",
            "\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
            "\t\t}",
            "",
            "\t\tvar code = element.textContent;",
            "",
            "\t\tvar env = {",
            "\t\t\telement: element,",
            "\t\t\tlanguage: language,",
            "\t\t\tgrammar: grammar,",
            "\t\t\tcode: code",
            "\t\t};",
            "",
            "\t\tfunction insertHighlightedCode(highlightedCode) {",
            "\t\t\tenv.highlightedCode = highlightedCode;",
            "",
            "\t\t\t_.hooks.run('before-insert', env);",
            "",
            "\t\t\tenv.element.innerHTML = env.highlightedCode;",
            "",
            "\t\t\t_.hooks.run('after-highlight', env);",
            "\t\t\t_.hooks.run('complete', env);",
            "\t\t\tcallback && callback.call(env.element);",
            "\t\t}",
            "",
            "\t\t_.hooks.run('before-sanity-check', env);",
            "",
            "\t\tif (!env.code) {",
            "\t\t\t_.hooks.run('complete', env);",
            "\t\t\tcallback && callback.call(env.element);",
            "\t\t\treturn;",
            "\t\t}",
            "",
            "\t\t_.hooks.run('before-highlight', env);",
            "",
            "\t\tif (!env.grammar) {",
            "\t\t\tinsertHighlightedCode(_.util.encode(env.code));",
            "\t\t\treturn;",
            "\t\t}",
            "",
            "\t\tif (async && _self.Worker) {",
            "\t\t\tvar worker = new Worker(_.filename);",
            "",
            "\t\t\tworker.onmessage = function(evt) {",
            "\t\t\t\tinsertHighlightedCode(evt.data);",
            "\t\t\t};",
            "",
            "\t\t\tworker.postMessage(JSON.stringify({",
            "\t\t\t\tlanguage: env.language,",
            "\t\t\t\tcode: env.code,",
            "\t\t\t\timmediateClose: true",
            "\t\t\t}));",
            "\t\t}",
            "\t\telse {",
            "\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));",
            "\t\t}",
            "\t},",
            "",
            "\t/**",
            "\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input",
            "\t * and the language definitions to use, and returns a string with the HTML produced.",
            "\t *",
            "\t * The following hooks will be run:",
            "\t * 1. `before-tokenize`",
            "\t * 2. `after-tokenize`",
            "\t * 3. `wrap`: On each {@link Token}.",
            "\t *",
            "\t * @param {string} text A string with the code to be highlighted.",
            "\t * @param {Grammar} grammar An object containing the tokens to use.",
            "\t *",
            "\t * Usually a language definition like `Prism.languages.markup`.",
            "\t * @param {string} language The name of the language definition passed to `grammar`.",
            "\t * @returns {string} The highlighted HTML.",
            "\t * @memberof Prism",
            "\t * @public",
            "\t * @example",
            "\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');",
            "\t */",
            "\thighlight: function (text, grammar, language) {",
            "\t\tvar env = {",
            "\t\t\tcode: text,",
            "\t\t\tgrammar: grammar,",
            "\t\t\tlanguage: language",
            "\t\t};",
            "\t\t_.hooks.run('before-tokenize', env);",
            "\t\tenv.tokens = _.tokenize(env.code, env.grammar);",
            "\t\t_.hooks.run('after-tokenize', env);",
            "\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);",
            "\t},",
            "",
            "\t/**",
            "\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input",
            "\t * and the language definitions to use, and returns an array with the tokenized code.",
            "\t *",
            "\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.",
            "\t *",
            "\t * This method could be useful in other contexts as well, as a very crude parser.",
            "\t *",
            "\t * @param {string} text A string with the code to be highlighted.",
            "\t * @param {Grammar} grammar An object containing the tokens to use.",
            "\t *",
            "\t * Usually a language definition like `Prism.languages.markup`.",
            "\t * @returns {TokenStream} An array of strings and tokens, a token stream.",
            "\t * @memberof Prism",
            "\t * @public",
            "\t * @example",
            "\t * let code = `var foo = 0;`;",
            "\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);",
            "\t * tokens.forEach(token => {",
            "\t *     if (token instanceof Prism.Token && token.type === 'number') {",
            "\t *         console.log(`Found numeric literal: ${token.content}`);",
            "\t *     }",
            "\t * });",
            "\t */",
            "\ttokenize: function(text, grammar) {",
            "\t\tvar rest = grammar.rest;",
            "\t\tif (rest) {",
            "\t\t\tfor (var token in rest) {",
            "\t\t\t\tgrammar[token] = rest[token];",
            "\t\t\t}",
            "",
            "\t\t\tdelete grammar.rest;",
            "\t\t}",
            "",
            "\t\tvar tokenList = new LinkedList();",
            "\t\taddAfter(tokenList, tokenList.head, text);",
            "",
            "\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);",
            "",
            "\t\treturn toArray(tokenList);",
            "\t},",
            "",
            "\t/**",
            "\t * @namespace",
            "\t * @memberof Prism",
            "\t * @public",
            "\t */",
            "\thooks: {",
            "\t\tall: {},",
            "",
            "\t\t/**",
            "\t\t * Adds the given callback to the list of callbacks for the given hook.",
            "\t\t *",
            "\t\t * The callback will be invoked when the hook it is registered for is run.",
            "\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.",
            "\t\t *",
            "\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.",
            "\t\t *",
            "\t\t * @param {string} name The name of the hook.",
            "\t\t * @param {HookCallback} callback The callback function which is given environment variables.",
            "\t\t * @public",
            "\t\t */",
            "\t\tadd: function (name, callback) {",
            "\t\t\tvar hooks = _.hooks.all;",
            "",
            "\t\t\thooks[name] = hooks[name] || [];",
            "",
            "\t\t\thooks[name].push(callback);",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Runs a hook invoking all registered callbacks with the given environment variables.",
            "\t\t *",
            "\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.",
            "\t\t *",
            "\t\t * @param {string} name The name of the hook.",
            "\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.",
            "\t\t * @public",
            "\t\t */",
            "\t\trun: function (name, env) {",
            "\t\t\tvar callbacks = _.hooks.all[name];",
            "",
            "\t\t\tif (!callbacks || !callbacks.length) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {",
            "\t\t\t\tcallback(env);",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "",
            "\tToken: Token",
            "};",
            "_self.Prism = _;",
            "",
            "",
            "// Typescript note:",
            "// The following can be used to import the Token type in JSDoc:",
            "//",
            "//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token",
            "",
            "/**",
            " * Creates a new token.",
            " *",
            " * @param {string} type See {@link Token#type type}",
            " * @param {string | TokenStream} content See {@link Token#content content}",
            " * @param {string|string[]} [alias] The alias(es) of the token.",
            " * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.",
            " * @class",
            " * @global",
            " * @public",
            " */",
            "function Token(type, content, alias, matchedStr) {",
            "\t/**",
            "\t * The type of the token.",
            "\t *",
            "\t * This is usually the key of a pattern in a {@link Grammar}.",
            "\t *",
            "\t * @type {string}",
            "\t * @see GrammarToken",
            "\t * @public",
            "\t */",
            "\tthis.type = type;",
            "\t/**",
            "\t * The strings or tokens contained by this token.",
            "\t *",
            "\t * This will be a token stream if the pattern matched also defined an `inside` grammar.",
            "\t *",
            "\t * @type {string | TokenStream}",
            "\t * @public",
            "\t */",
            "\tthis.content = content;",
            "\t/**",
            "\t * The alias(es) of the token.",
            "\t *",
            "\t * @type {string|string[]}",
            "\t * @see GrammarToken",
            "\t * @public",
            "\t */",
            "\tthis.alias = alias;",
            "\t// Copy of the full string this token was created from",
            "\tthis.length = (matchedStr || '').length | 0;",
            "}",
            "",
            "/**",
            " * A token stream is an array of strings and {@link Token Token} objects.",
            " *",
            " * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process",
            " * them.",
            " *",
            " * 1. No adjacent strings.",
            " * 2. No empty strings.",
            " *",
            " *    The only exception here is the token stream that only contains the empty string and nothing else.",
            " *",
            " * @typedef {Array<string | Token>} TokenStream",
            " * @global",
            " * @public",
            " */",
            "",
            "/**",
            " * Converts the given token or token stream to an HTML representation.",
            " *",
            " * The following hooks will be run:",
            " * 1. `wrap`: On each {@link Token}.",
            " *",
            " * @param {string | Token | TokenStream} o The token or token stream to be converted.",
            " * @param {string} language The name of current language.",
            " * @returns {string} The HTML representation of the token or token stream.",
            " * @memberof Token",
            " * @static",
            " */",
            "Token.stringify = function stringify(o, language) {",
            "\tif (typeof o == 'string') {",
            "\t\treturn o;",
            "\t}",
            "\tif (Array.isArray(o)) {",
            "\t\tvar s = '';",
            "\t\to.forEach(function (e) {",
            "\t\t\ts += stringify(e, language);",
            "\t\t});",
            "\t\treturn s;",
            "\t}",
            "",
            "\tvar env = {",
            "\t\ttype: o.type,",
            "\t\tcontent: stringify(o.content, language),",
            "\t\ttag: 'span',",
            "\t\tclasses: ['token', o.type],",
            "\t\tattributes: {},",
            "\t\tlanguage: language",
            "\t};",
            "",
            "\tvar aliases = o.alias;",
            "\tif (aliases) {",
            "\t\tif (Array.isArray(aliases)) {",
            "\t\t\tArray.prototype.push.apply(env.classes, aliases);",
            "\t\t} else {",
            "\t\t\tenv.classes.push(aliases);",
            "\t\t}",
            "\t}",
            "",
            "\t_.hooks.run('wrap', env);",
            "",
            "\tvar attributes = '';",
            "\tfor (var name in env.attributes) {",
            "\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';",
            "\t}",
            "",
            "\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';",
            "};",
            "",
            "/**",
            " * @param {RegExp} pattern",
            " * @param {number} pos",
            " * @param {string} text",
            " * @param {boolean} lookbehind",
            " * @returns {RegExpExecArray | null}",
            " */",
            "function matchPattern(pattern, pos, text, lookbehind) {",
            "\tpattern.lastIndex = pos;",
            "\tvar match = pattern.exec(text);",
            "\tif (match && lookbehind && match[1]) {",
            "\t\t// change the match to remove the text matched by the Prism lookbehind group",
            "\t\tvar lookbehindLength = match[1].length;",
            "\t\tmatch.index += lookbehindLength;",
            "\t\tmatch[0] = match[0].slice(lookbehindLength);",
            "\t}",
            "\treturn match;",
            "}",
            "",
            "/**",
            " * @param {string} text",
            " * @param {LinkedList<string | Token>} tokenList",
            " * @param {any} grammar",
            " * @param {LinkedListNode<string | Token>} startNode",
            " * @param {number} startPos",
            " * @param {RematchOptions} [rematch]",
            " * @returns {void}",
            " * @private",
            " *",
            " * @typedef RematchOptions",
            " * @property {string} cause",
            " * @property {number} reach",
            " */",
            "function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {",
            "\tfor (var token in grammar) {",
            "\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {",
            "\t\t\tcontinue;",
            "\t\t}",
            "",
            "\t\tvar patterns = grammar[token];",
            "\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];",
            "",
            "\t\tfor (var j = 0; j < patterns.length; ++j) {",
            "\t\t\tif (rematch && rematch.cause == token + ',' + j) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\tvar patternObj = patterns[j],",
            "\t\t\t\tinside = patternObj.inside,",
            "\t\t\t\tlookbehind = !!patternObj.lookbehind,",
            "\t\t\t\tgreedy = !!patternObj.greedy,",
            "\t\t\t\talias = patternObj.alias;",
            "",
            "\t\t\tif (greedy && !patternObj.pattern.global) {",
            "\t\t\t\t// Without the global flag, lastIndex won't work",
            "\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];",
            "\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');",
            "\t\t\t}",
            "",
            "\t\t\t/** @type {RegExp} */",
            "\t\t\tvar pattern = patternObj.pattern || patternObj;",
            "",
            "\t\t\tfor ( // iterate the token list and keep track of the current token/string position",
            "\t\t\t\tvar currentNode = startNode.next, pos = startPos;",
            "\t\t\t\tcurrentNode !== tokenList.tail;",
            "\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next",
            "\t\t\t) {",
            "",
            "\t\t\t\tif (rematch && pos >= rematch.reach) {",
            "\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "",
            "\t\t\t\tvar str = currentNode.value;",
            "",
            "\t\t\t\tif (tokenList.length > text.length) {",
            "\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!",
            "\t\t\t\t\treturn;",
            "\t\t\t\t}",
            "",
            "\t\t\t\tif (str instanceof Token) {",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\t}",
            "",
            "\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween",
            "\t\t\t\tvar match;",
            "",
            "\t\t\t\tif (greedy) {",
            "\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);",
            "\t\t\t\t\tif (!match) {",
            "\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tvar from = match.index;",
            "\t\t\t\t\tvar to = match.index + match[0].length;",
            "\t\t\t\t\tvar p = pos;",
            "",
            "\t\t\t\t\t// find the node that contains the match",
            "\t\t\t\t\tp += currentNode.value.length;",
            "\t\t\t\t\twhile (from >= p) {",
            "\t\t\t\t\t\tcurrentNode = currentNode.next;",
            "\t\t\t\t\t\tp += currentNode.value.length;",
            "\t\t\t\t\t}",
            "\t\t\t\t\t// adjust pos (and p)",
            "\t\t\t\t\tp -= currentNode.value.length;",
            "\t\t\t\t\tpos = p;",
            "",
            "\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid",
            "\t\t\t\t\tif (currentNode.value instanceof Token) {",
            "\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\t// find the last node which is affected by this match",
            "\t\t\t\t\tfor (",
            "\t\t\t\t\t\tvar k = currentNode;",
            "\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');",
            "\t\t\t\t\t\tk = k.next",
            "\t\t\t\t\t) {",
            "\t\t\t\t\t\tremoveCount++;",
            "\t\t\t\t\t\tp += k.value.length;",
            "\t\t\t\t\t}",
            "\t\t\t\t\tremoveCount--;",
            "",
            "\t\t\t\t\t// replace with the new match",
            "\t\t\t\t\tstr = text.slice(pos, p);",
            "\t\t\t\t\tmatch.index -= pos;",
            "\t\t\t\t} else {",
            "\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);",
            "\t\t\t\t\tif (!match) {",
            "\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "",
            "\t\t\t\tvar from = match.index,",
            "\t\t\t\t\tmatchStr = match[0],",
            "\t\t\t\t\tbefore = str.slice(0, from),",
            "\t\t\t\t\tafter = str.slice(from + matchStr.length);",
            "",
            "\t\t\t\tvar reach = pos + str.length;",
            "\t\t\t\tif (rematch && reach > rematch.reach) {",
            "\t\t\t\t\trematch.reach = reach;",
            "\t\t\t\t}",
            "",
            "\t\t\t\tvar removeFrom = currentNode.prev;",
            "",
            "\t\t\t\tif (before) {",
            "\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);",
            "\t\t\t\t\tpos += before.length;",
            "\t\t\t\t}",
            "",
            "\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);",
            "",
            "\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);",
            "\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);",
            "",
            "\t\t\t\tif (after) {",
            "\t\t\t\t\taddAfter(tokenList, currentNode, after);",
            "\t\t\t\t}",
            "",
            "\t\t\t\tif (removeCount > 1) {",
            "\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching",
            "\t\t\t\t\t// this can only happen if the current pattern is greedy",
            "\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, {",
            "\t\t\t\t\t\tcause: token + ',' + j,",
            "\t\t\t\t\t\treach: reach",
            "\t\t\t\t\t});",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "}",
            "",
            "/**",
            " * @typedef LinkedListNode",
            " * @property {T} value",
            " * @property {LinkedListNode<T> | null} prev The previous node.",
            " * @property {LinkedListNode<T> | null} next The next node.",
            " * @template T",
            " * @private",
            " */",
            "",
            "/**",
            " * @template T",
            " * @private",
            " */",
            "function LinkedList() {",
            "\t/** @type {LinkedListNode<T>} */",
            "\tvar head = { value: null, prev: null, next: null };",
            "\t/** @type {LinkedListNode<T>} */",
            "\tvar tail = { value: null, prev: head, next: null };",
            "\thead.next = tail;",
            "",
            "\t/** @type {LinkedListNode<T>} */",
            "\tthis.head = head;",
            "\t/** @type {LinkedListNode<T>} */",
            "\tthis.tail = tail;",
            "\tthis.length = 0;",
            "}",
            "",
            "/**",
            " * Adds a new node with the given value to the list.",
            " * @param {LinkedList<T>} list",
            " * @param {LinkedListNode<T>} node",
            " * @param {T} value",
            " * @returns {LinkedListNode<T>} The added node.",
            " * @template T",
            " */",
            "function addAfter(list, node, value) {",
            "\t// assumes that node != list.tail && values.length >= 0",
            "\tvar next = node.next;",
            "",
            "\tvar newNode = { value: value, prev: node, next: next };",
            "\tnode.next = newNode;",
            "\tnext.prev = newNode;",
            "\tlist.length++;",
            "",
            "\treturn newNode;",
            "}",
            "/**",
            " * Removes `count` nodes after the given node. The given node will not be removed.",
            " * @param {LinkedList<T>} list",
            " * @param {LinkedListNode<T>} node",
            " * @param {number} count",
            " * @template T",
            " */",
            "function removeRange(list, node, count) {",
            "\tvar next = node.next;",
            "\tfor (var i = 0; i < count && next !== list.tail; i++) {",
            "\t\tnext = next.next;",
            "\t}",
            "\tnode.next = next;",
            "\tnext.prev = node;",
            "\tlist.length -= i;",
            "}",
            "/**",
            " * @param {LinkedList<T>} list",
            " * @returns {T[]}",
            " * @template T",
            " */",
            "function toArray(list) {",
            "\tvar array = [];",
            "\tvar node = list.head.next;",
            "\twhile (node !== list.tail) {",
            "\t\tarray.push(node.value);",
            "\t\tnode = node.next;",
            "\t}",
            "\treturn array;",
            "}",
            "",
            "",
            "if (!_self.document) {",
            "\tif (!_self.addEventListener) {",
            "\t\t// in Node.js",
            "\t\treturn _;",
            "\t}",
            "",
            "\tif (!_.disableWorkerMessageHandler) {",
            "\t\t// In worker",
            "\t\t_self.addEventListener('message', function (evt) {",
            "\t\t\tvar message = JSON.parse(evt.data),",
            "\t\t\t\tlang = message.language,",
            "\t\t\t\tcode = message.code,",
            "\t\t\t\timmediateClose = message.immediateClose;",
            "",
            "\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));",
            "\t\t\tif (immediateClose) {",
            "\t\t\t\t_self.close();",
            "\t\t\t}",
            "\t\t}, false);",
            "\t}",
            "",
            "\treturn _;",
            "}",
            "",
            "// Get current script and highlight",
            "var script = _.util.currentScript();",
            "",
            "if (script) {",
            "\t_.filename = script.src;",
            "",
            "\tif (script.hasAttribute('data-manual')) {",
            "\t\t_.manual = true;",
            "\t}",
            "}",
            "",
            "function highlightAutomaticallyCallback() {",
            "\tif (!_.manual) {",
            "\t\t_.highlightAll();",
            "\t}",
            "}",
            "",
            "if (!_.manual) {",
            "\t// If the document state is \"loading\", then we'll use DOMContentLoaded.",
            "\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the",
            "\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they",
            "\t// might take longer one animation frame to execute which can create a race condition where only some plugins have",
            "\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.",
            "\t// See https://github.com/PrismJS/prism/issues/2102",
            "\tvar readyState = document.readyState;",
            "\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {",
            "\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);",
            "\t} else {",
            "\t\tif (window.requestAnimationFrame) {",
            "\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);",
            "\t\t} else {",
            "\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);",
            "\t\t}",
            "\t}",
            "}",
            "",
            "return _;",
            "",
            "})(_self);",
            "",
            "if (typeof module !== 'undefined' && module.exports) {",
            "\tmodule.exports = Prism;",
            "}",
            "",
            "// hack for components to work correctly in node.js",
            "if (typeof global !== 'undefined') {",
            "\tglobal.Prism = Prism;",
            "}",
            "",
            "// some additional documentation/types",
            "",
            "/**",
            " * The expansion of a simple `RegExp` literal to support additional properties.",
            " *",
            " * @typedef GrammarToken",
            " * @property {RegExp} pattern The regular expression of the token.",
            " * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)",
            " * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.",
            " * @property {boolean} [greedy=false] Whether the token is greedy.",
            " * @property {string|string[]} [alias] An optional alias or list of aliases.",
            " * @property {Grammar} [inside] The nested grammar of this token.",
            " *",
            " * The `inside` grammar will be used to tokenize the text value of each token of this kind.",
            " *",
            " * This can be used to make nested and even recursive language definitions.",
            " *",
            " * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into",
            " * each another.",
            " * @global",
            " * @public",
            "*/",
            "",
            "/**",
            " * @typedef Grammar",
            " * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}",
            " * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.",
            " * @global",
            " * @public",
            " */",
            "",
            "/**",
            " * A function which will invoked after an element was successfully highlighted.",
            " *",
            " * @callback HighlightCallback",
            " * @param {Element} element The element successfully highlighted.",
            " * @returns {void}",
            " * @global",
            " * @public",
            "*/",
            "",
            "/**",
            " * @callback HookCallback",
            " * @param {Object<string, any>} env The environment variables of the hook.",
            " * @returns {void}",
            " * @global",
            " * @public",
            " */",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-markup.js",
            "********************************************** */",
            "",
            "Prism.languages.markup = {",
            "\t'comment': /<!--[\\s\\S]*?-->/,",
            "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
            "\t'doctype': {",
            "\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl",
            "\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'internal-subset': {",
            "\t\t\t\tpattern: /(\\[)[\\s\\S]+(?=\\]>$)/,",
            "\t\t\t\tlookbehind: true,",
            "\t\t\t\tgreedy: true,",
            "\t\t\t\tinside: null // see below",
            "\t\t\t},",
            "\t\t\t'string': {",
            "\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
            "\t\t\t\tgreedy: true",
            "\t\t\t},",
            "\t\t\t'punctuation': /^<!|>$|[[\\]]/,",
            "\t\t\t'doctype-tag': /^DOCTYPE/,",
            "\t\t\t'name': /[^\\s<>'\"]+/",
            "\t\t}",
            "\t},",
            "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,",
            "\t'tag': {",
            "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'tag': {",
            "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'punctuation': /^<\\/?/,",
            "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'attr-value': {",
            "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'punctuation': [",
            "\t\t\t\t\t\t{",
            "\t\t\t\t\t\t\tpattern: /^=/,",
            "\t\t\t\t\t\t\talias: 'attr-equals'",
            "\t\t\t\t\t\t},",
            "\t\t\t\t\t\t/\"|'/",
            "\t\t\t\t\t]",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'punctuation': /\\/?>/,",
            "\t\t\t'attr-name': {",
            "\t\t\t\tpattern: /[^\\s>\\/]+/,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t}",
            "\t},",
            "\t'entity': [",
            "\t\t{",
            "\t\t\tpattern: /&[\\da-z]{1,8};/i,",
            "\t\t\talias: 'named-entity'",
            "\t\t},",
            "\t\t/&#x?[\\da-f]{1,8};/i",
            "\t]",
            "};",
            "",
            "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
            "\tPrism.languages.markup['entity'];",
            "Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;",
            "",
            "// Plugin to make entity title show the real entity, idea by Roman Komarov",
            "Prism.hooks.add('wrap', function (env) {",
            "",
            "\tif (env.type === 'entity') {",
            "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
            "\t}",
            "});",
            "",
            "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
            "\t/**",
            "\t * Adds an inlined language to markup.",
            "\t *",
            "\t * An example of an inlined language is CSS with `<style>` tags.",
            "\t *",
            "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
            "\t * case insensitive.",
            "\t * @param {string} lang The language key.",
            "\t * @example",
            "\t * addInlined('style', 'css');",
            "\t */",
            "\tvalue: function addInlined(tagName, lang) {",
            "\t\tvar includedCdataInside = {};",
            "\t\tincludedCdataInside['language-' + lang] = {",
            "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages[lang]",
            "\t\t};",
            "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
            "",
            "\t\tvar inside = {",
            "\t\t\t'included-cdata': {",
            "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
            "\t\t\t\tinside: includedCdataInside",
            "\t\t\t}",
            "\t\t};",
            "\t\tinside['language-' + lang] = {",
            "\t\t\tpattern: /[\\s\\S]+/,",
            "\t\t\tinside: Prism.languages[lang]",
            "\t\t};",
            "",
            "\t\tvar def = {};",
            "\t\tdef[tagName] = {",
            "\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),",
            "\t\t\tlookbehind: true,",
            "\t\t\tgreedy: true,",
            "\t\t\tinside: inside",
            "\t\t};",
            "",
            "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
            "\t}",
            "});",
            "",
            "Prism.languages.html = Prism.languages.markup;",
            "Prism.languages.mathml = Prism.languages.markup;",
            "Prism.languages.svg = Prism.languages.markup;",
            "",
            "Prism.languages.xml = Prism.languages.extend('markup', {});",
            "Prism.languages.ssml = Prism.languages.xml;",
            "Prism.languages.atom = Prism.languages.xml;",
            "Prism.languages.rss = Prism.languages.xml;",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-css.js",
            "********************************************** */",
            "",
            "(function (Prism) {",
            "",
            "\tvar string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
            "",
            "\tPrism.languages.css = {",
            "\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,",
            "\t\t'atrule': {",
            "\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,",
            "\t\t\tinside: {",
            "\t\t\t\t'rule': /^@[\\w-]+/,",
            "\t\t\t\t'selector-function-argument': {",
            "\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,",
            "\t\t\t\t\tlookbehind: true,",
            "\t\t\t\t\talias: 'selector'",
            "\t\t\t\t},",
            "\t\t\t\t'keyword': {",
            "\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,",
            "\t\t\t\t\tlookbehind: true",
            "\t\t\t\t}",
            "\t\t\t\t// See rest below",
            "\t\t\t}",
            "\t\t},",
            "\t\t'url': {",
            "\t\t\t// https://drafts.csswg.org/css-values-3/#urls",
            "\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),",
            "\t\t\tgreedy: true,",
            "\t\t\tinside: {",
            "\t\t\t\t'function': /^url/i,",
            "\t\t\t\t'punctuation': /^\\(|\\)$/,",
            "\t\t\t\t'string': {",
            "\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),",
            "\t\t\t\t\talias: 'url'",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t},",
            "\t\t'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),",
            "\t\t'string': {",
            "\t\t\tpattern: string,",
            "\t\t\tgreedy: true",
            "\t\t},",
            "\t\t'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,",
            "\t\t'important': /!important\\b/i,",
            "\t\t'function': /[-a-z0-9]+(?=\\()/i,",
            "\t\t'punctuation': /[(){};:,]/",
            "\t};",
            "",
            "\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;",
            "",
            "\tvar markup = Prism.languages.markup;",
            "\tif (markup) {",
            "\t\tmarkup.tag.addInlined('style', 'css');",
            "",
            "\t\tPrism.languages.insertBefore('inside', 'attr-value', {",
            "\t\t\t'style-attr': {",
            "\t\t\t\tpattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,",
            "\t\t\t\tlookbehind: true,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'attr-value': {",
            "\t\t\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
            "\t\t\t\t\t\tinside: {",
            "\t\t\t\t\t\t\t'style': {",
            "\t\t\t\t\t\t\t\tpattern: /([\"'])[\\s\\S]+(?=[\"']$)/,",
            "\t\t\t\t\t\t\t\tlookbehind: true,",
            "\t\t\t\t\t\t\t\talias: 'language-css',",
            "\t\t\t\t\t\t\t\tinside: Prism.languages.css",
            "\t\t\t\t\t\t\t},",
            "\t\t\t\t\t\t\t'punctuation': [",
            "\t\t\t\t\t\t\t\t{",
            "\t\t\t\t\t\t\t\t\tpattern: /^=/,",
            "\t\t\t\t\t\t\t\t\talias: 'attr-equals'",
            "\t\t\t\t\t\t\t\t},",
            "\t\t\t\t\t\t\t\t/\"|'/",
            "\t\t\t\t\t\t\t]",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t},",
            "\t\t\t\t\t'attr-name': /^style/i",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}, markup.tag);",
            "\t}",
            "",
            "}(Prism));",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-clike.js",
            "********************************************** */",
            "",
            "Prism.languages.clike = {",
            "\t'comment': [",
            "\t\t{",
            "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tgreedy: true",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tgreedy: true",
            "\t\t}",
            "\t],",
            "\t'string': {",
            "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
            "\t\tgreedy: true",
            "\t},",
            "\t'class-name': {",
            "\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,",
            "\t\tlookbehind: true,",
            "\t\tinside: {",
            "\t\t\t'punctuation': /[.\\\\]/",
            "\t\t}",
            "\t},",
            "\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,",
            "\t'boolean': /\\b(?:true|false)\\b/,",
            "\t'function': /\\w+(?=\\()/,",
            "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
            "\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,",
            "\t'punctuation': /[{}[\\];(),.:]/",
            "};",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-javascript.js",
            "********************************************** */",
            "",
            "Prism.languages.javascript = Prism.languages.extend('clike', {",
            "\t'class-name': [",
            "\t\tPrism.languages.clike['class-name'],",
            "\t\t{",
            "\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,",
            "\t\t\tlookbehind: true",
            "\t\t}",
            "\t],",
            "\t'keyword': [",
            "\t\t{",
            "\t\t\tpattern: /((?:^|})\\s*)(?:catch|finally)\\b/,",
            "\t\t\tlookbehind: true",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,",
            "\t\t\tlookbehind: true",
            "\t\t},",
            "\t],",
            "\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)",
            "\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,",
            "\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,",
            "\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/",
            "});",
            "",
            "Prism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;",
            "",
            "Prism.languages.insertBefore('javascript', 'keyword', {",
            "\t'regex': {",
            "\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,",
            "\t\tlookbehind: true,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'regex-source': {",
            "\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,",
            "\t\t\t\tlookbehind: true,",
            "\t\t\t\talias: 'language-regex',",
            "\t\t\t\tinside: Prism.languages.regex",
            "\t\t\t},",
            "\t\t\t'regex-flags': /[a-z]+$/,",
            "\t\t\t'regex-delimiter': /^\\/|\\/$/",
            "\t\t}",
            "\t},",
            "\t// This must be declared before keyword because we use \"function\" inside the look-forward",
            "\t'function-variable': {",
            "\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,",
            "\t\talias: 'function'",
            "\t},",
            "\t'parameter': [",
            "\t\t{",
            "\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t}",
            "\t],",
            "\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
            "});",
            "",
            "Prism.languages.insertBefore('javascript', 'string', {",
            "\t'template-string': {",
            "\t\tpattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'template-punctuation': {",
            "\t\t\t\tpattern: /^`|`$/,",
            "\t\t\t\talias: 'string'",
            "\t\t\t},",
            "\t\t\t'interpolation': {",
            "\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,",
            "\t\t\t\tlookbehind: true,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'interpolation-punctuation': {",
            "\t\t\t\t\t\tpattern: /^\\${|}$/,",
            "\t\t\t\t\t\talias: 'punctuation'",
            "\t\t\t\t\t},",
            "\t\t\t\t\trest: Prism.languages.javascript",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'string': /[\\s\\S]+/",
            "\t\t}",
            "\t}",
            "});",
            "",
            "if (Prism.languages.markup) {",
            "\tPrism.languages.markup.tag.addInlined('script', 'javascript');",
            "}",
            "",
            "Prism.languages.js = Prism.languages.javascript;",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-file-highlight.js",
            "********************************************** */",
            "",
            "(function () {",
            "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
            "\t\treturn;",
            "\t}",
            "",
            "\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill",
            "\tif (!Element.prototype.matches) {",
            "\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;",
            "\t}",
            "",
            "\tvar Prism = window.Prism;",
            "",
            "\tvar LOADING_MESSAGE = 'Loading…';",
            "\tvar FAILURE_MESSAGE = function (status, message) {",
            "\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;",
            "\t};",
            "\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';",
            "",
            "\tvar EXTENSIONS = {",
            "\t\t'js': 'javascript',",
            "\t\t'py': 'python',",
            "\t\t'rb': 'ruby',",
            "\t\t'ps1': 'powershell',",
            "\t\t'psm1': 'powershell',",
            "\t\t'sh': 'bash',",
            "\t\t'bat': 'batch',",
            "\t\t'h': 'c',",
            "\t\t'tex': 'latex'",
            "\t};",
            "",
            "\tvar STATUS_ATTR = 'data-src-status';",
            "\tvar STATUS_LOADING = 'loading';",
            "\tvar STATUS_LOADED = 'loaded';",
            "\tvar STATUS_FAILED = 'failed';",
            "",
            "\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'",
            "\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';",
            "",
            "\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
            "",
            "\t/**",
            "\t * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.",
            "\t *",
            "\t * @param {HTMLElement} element",
            "\t * @param {string} language",
            "\t * @returns {void}",
            "\t */",
            "\tfunction setLanguageClass(element, language) {",
            "\t\tvar className = element.className;",
            "\t\tclassName = className.replace(lang, ' ') + ' language-' + language;",
            "\t\telement.className = className.replace(/\\s+/g, ' ').trim();",
            "\t}",
            "",
            "",
            "\tPrism.hooks.add('before-highlightall', function (env) {",
            "\t\tenv.selector += ', ' + SELECTOR;",
            "\t});",
            "",
            "\tPrism.hooks.add('before-sanity-check', function (env) {",
            "\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);",
            "\t\tif (pre.matches(SELECTOR)) {",
            "\t\t\tenv.code = ''; // fast-path the whole thing and go to complete",
            "",
            "\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading",
            "",
            "\t\t\t// add code element with loading message",
            "\t\t\tvar code = pre.appendChild(document.createElement('CODE'));",
            "\t\t\tcode.textContent = LOADING_MESSAGE;",
            "",
            "\t\t\tvar src = pre.getAttribute('data-src');",
            "",
            "\t\t\tvar language = env.language;",
            "\t\t\tif (language === 'none') {",
            "\t\t\t\t// the language might be 'none' because there is no language set;",
            "\t\t\t\t// in this case, we want to use the extension as the language",
            "\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];",
            "\t\t\t\tlanguage = EXTENSIONS[extension] || extension;",
            "\t\t\t}",
            "",
            "\t\t\t// set language classes",
            "\t\t\tsetLanguageClass(code, language);",
            "\t\t\tsetLanguageClass(pre, language);",
            "",
            "\t\t\t// preload the language",
            "\t\t\tvar autoloader = Prism.plugins.autoloader;",
            "\t\t\tif (autoloader) {",
            "\t\t\t\tautoloader.loadLanguages(language);",
            "\t\t\t}",
            "",
            "\t\t\t// load file",
            "\t\t\tvar xhr = new XMLHttpRequest();",
            "\t\t\txhr.open('GET', src, true);",
            "\t\t\txhr.onreadystatechange = function () {",
            "\t\t\t\tif (xhr.readyState == 4) {",
            "\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
            "\t\t\t\t\t\t// mark as loaded",
            "\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);",
            "",
            "\t\t\t\t\t\t// highlight code",
            "\t\t\t\t\t\tcode.textContent = xhr.responseText;",
            "\t\t\t\t\t\tPrism.highlightElement(code);",
            "",
            "\t\t\t\t\t} else {",
            "\t\t\t\t\t\t// mark as failed",
            "\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);",
            "",
            "\t\t\t\t\t\tif (xhr.status >= 400) {",
            "\t\t\t\t\t\t\tcode.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);",
            "\t\t\t\t\t\t} else {",
            "\t\t\t\t\t\t\tcode.textContent = FAILURE_EMPTY_MESSAGE;",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t};",
            "\t\t\txhr.send(null);",
            "\t\t}",
            "\t});",
            "",
            "\tPrism.plugins.fileHighlight = {",
            "\t\t/**",
            "\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.",
            "\t\t *",
            "\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.",
            "\t\t *",
            "\t\t * @param {ParentNode} [container=document]",
            "\t\t */",
            "\t\thighlight: function highlight(container) {",
            "\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);",
            "",
            "\t\t\tfor (var i = 0, element; element = elements[i++];) {",
            "\t\t\t\tPrism.highlightElement(element);",
            "\t\t\t}",
            "\t\t}",
            "\t};",
            "",
            "\tvar logged = false;",
            "\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */",
            "\tPrism.fileHighlight = function () {",
            "\t\tif (!logged) {",
            "\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');",
            "\t\t\tlogged = true;",
            "\t\t}",
            "\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);",
            "\t}",
            "",
            "})();"
        ]
    },
    "test-suite.html": {},
    "test.html": {},
    "components": {
        "index.js": {
            "classes": [],
            "functions": [],
            "text": [
                "const components = require('../components.js');",
                "const getLoader = require('../dependencies');",
                "",
                "",
                "/**",
                " * The set of all languages which have been loaded using the below function.",
                " *",
                " * @type {Set<string>}",
                " */",
                "const loadedLanguages = new Set();",
                "",
                "/**",
                " * Loads the given languages and adds them to the current Prism instance.",
                " *",
                " * If no languages are provided, __all__ Prism languages will be loaded.",
                " *",
                " * @param {string|string[]} [languages]",
                " * @returns {void}",
                " */",
                "function loadLanguages(languages) {",
                "\tif (languages === undefined) {",
                "\t\tlanguages = Object.keys(components.languages).filter(l => l != 'meta');",
                "\t} else if (!Array.isArray(languages)) {",
                "\t\tlanguages = [languages];",
                "\t}",
                "",
                "\t// the user might have loaded languages via some other way or used `prism.js` which already includes some",
                "\t// we don't need to validate the ids because `getLoader` will ignore invalid ones",
                "\tconst loaded = [...loadedLanguages, ...Object.keys(Prism.languages)];",
                "",
                "\tgetLoader(components, languages, loaded).load(lang => {",
                "\t\tif (!(lang in components.languages)) {",
                "\t\t\tif (!loadLanguages.silent) {",
                "\t\t\t\tconsole.warn('Language does not exist: ' + lang);",
                "\t\t\t}",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tconst pathToLanguage = './prism-' + lang;",
                "",
                "\t\t// remove from require cache and from Prism",
                "\t\tdelete require.cache[require.resolve(pathToLanguage)];",
                "\t\tdelete Prism.languages[lang];",
                "",
                "\t\trequire(pathToLanguage);",
                "",
                "\t\tloadedLanguages.add(lang);",
                "\t});",
                "}",
                "",
                "/**",
                " * Set this to `true` to prevent all warning messages `loadLanguages` logs.",
                " */",
                "loadLanguages.silent = false;",
                "",
                "module.exports = loadLanguages;"
            ]
        },
        "prism-abap.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.abap = {",
                "\t'comment': /^\\*.*/m,",
                "\t'string' : /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,",
                "\t'string-template': {",
                "\t\tpattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t/* End Of Line comments should not interfere with strings when the  ",
                "\tquote character occurs within them. We assume a string being highlighted",
                "\tinside an EOL comment is more acceptable than the opposite.",
                "\t*/",
                "\t'eol-comment': {",
                "\t\tpattern: /(^|\\s)\".*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'keyword' : {",
                "\t\tpattern: /(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t/* Numbers can be only integers. Decimal or Hex appear only as strings */",
                "\t'number' : /\\b\\d+\\b/,",
                "\t/* Operators must always be surrounded by whitespace, they cannot be put ",
                "\tadjacent to operands. ",
                "\t*/",
                "\t'operator' : {",
                "\t\tpattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string-operator' : {",
                "\t\tpattern: /(\\s)&&?(?=\\s)/,",
                "\t\tlookbehind: true,",
                "\t\t/* The official editor highlights */",
                "\t\talias: \"keyword\"",
                "\t},",
                "\t'token-operator' : [{",
                "\t\t/* Special operators used to access structure components, class methods/attributes, etc. */",
                "\t\tpattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,",
                "\t\tlookbehind: true,",
                "\t\talias: \"punctuation\"",
                "\t}, {",
                "\t    /* Special tokens used do delimit string templates */",
                "\t    pattern: /[|{}]/,",
                "\t\talias: \"punctuation\"",
                "\t}],",
                "\t'punctuation' : /[,.:()]/",
                "};"
            ]
        },
        "prism-abap.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.abap={comment:/^\\*.*/m,string:/(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\"string-template\":{pattern:/([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,lookbehind:!0,alias:\"string\"},\"eol-comment\":{pattern:/(^|\\s)\".*/m,lookbehind:!0,alias:\"comment\"},keyword:{pattern:/(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,lookbehind:!0},number:/\\b\\d+\\b/,operator:{pattern:/(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,lookbehind:!0},\"string-operator\":{pattern:/(\\s)&&?(?=\\s)/,lookbehind:!0,alias:\"keyword\"},\"token-operator\":[{pattern:/(\\w)(?:->?|=>|[~|{}])(?=\\w)/,lookbehind:!0,alias:\"punctuation\"},{pattern:/[|{}]/,alias:\"punctuation\"}],punctuation:/[,.:()]/};"
            ]
        },
        "prism-abnf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar coreRules = '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';",
                "",
                "\tPrism.languages.abnf = {",
                "\t\t'comment': /;.*/,",
                "\t\t'string': {",
                "\t\t\tpattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^%[is]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'range': {",
                "\t\t\tpattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,",
                "\t\t\talias: 'number'",
                "\t\t},",
                "\t\t'terminal': {",
                "\t\t\tpattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,",
                "\t\t\talias: 'number'",
                "\t\t},",
                "\t\t'repetition': {",
                "\t\t\tpattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'definition': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^>\\r\\n]*>)(?=\\s*=)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /<|>/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'core-rule': {",
                "\t\t\tpattern: RegExp('(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])', 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: ['rule', 'constant'],",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /<|>/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'rule': {",
                "\t\t\tpattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^>\\r\\n]*>/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /<|>/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'operator': /=\\/?|\\//,",
                "\t\t'punctuation': /[()\\[\\]]/",
                "\t};",
                "",
                "})(Prism);"
            ]
        },
        "prism-abnf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var i=\"(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)\";Prism.languages.abnf={comment:/;.*/,string:{pattern:/(?:%[is])?\"[^\"\\n\\r]*\"/,greedy:!0,inside:{punctuation:/^%[is]/}},range:{pattern:/%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,alias:\"number\"},terminal:{pattern:/%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,alias:\"number\"},repetition:{pattern:/(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,lookbehind:!0,alias:\"operator\"},definition:{pattern:/(^[ \\t]*)(?:[a-z][\\w-]*|<[^>\\r\\n]*>)(?=\\s*=)/m,lookbehind:!0,alias:\"keyword\",inside:{punctuation:/<|>/}},\"core-rule\":{pattern:RegExp(\"(?:(^|[^<\\\\w-])\"+i+\"|<\"+i+\">)(?![\\\\w-])\",\"i\"),lookbehind:!0,alias:[\"rule\",\"constant\"],inside:{punctuation:/<|>/}},rule:{pattern:/(^|[^<\\w-])[a-z][\\w-]*|<[^>\\r\\n]*>/i,lookbehind:!0,inside:{punctuation:/<|>/}},operator:/=\\/?|\\//,punctuation:/[()\\[\\]]/}}();"
            ]
        },
        "prism-actionscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.actionscript = Prism.languages.extend('javascript',  {",
                "\t'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,",
                "\t'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/",
                "});",
                "Prism.languages.actionscript['class-name'].alias = 'function';",
                "",
                "if (Prism.languages.markup) {",
                "\tPrism.languages.insertBefore('actionscript', 'string', {",
                "\t\t'xml': {",
                "\t\t\tpattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.markup",
                "\t\t}",
                "\t});",
                "}"
            ]
        },
        "prism-actionscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.actionscript=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,operator:/\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/}),Prism.languages.actionscript[\"class-name\"].alias=\"function\",Prism.languages.markup&&Prism.languages.insertBefore(\"actionscript\",\"string\",{xml:{pattern:/(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,lookbehind:!0,inside:Prism.languages.markup}});"
            ]
        },
        "prism-ada.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ada = {",
                "\t'comment': /--.*/,",
                "\t'string': /\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,",
                "\t'number': [",
                "\t\t{",
                "\t\t\tpattern: /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i",
                "\t\t}",
                "\t],",
                "\t'attr-name': /\\b'\\w+/i,",
                "\t'keyword': /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'operator': /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,",
                "\t'punctuation': /\\.\\.?|[,;():]/,",
                "\t'char': /'.'/,",
                "\t'variable': /\\b[a-z](?:[_a-z\\d])*\\b/i",
                "};"
            ]
        },
        "prism-ada.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ada={comment:/--.*/,string:/\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,number:[{pattern:/\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i},{pattern:/\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i}],\"attr-name\":/\\b'\\w+/i,keyword:/\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,boolean:/\\b(?:true|false)\\b/i,operator:/<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,punctuation:/\\.\\.?|[,;():]/,char:/'.'/,variable:/\\b[a-z](?:[_a-z\\d])*\\b/i};"
            ]
        },
        "prism-agda.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.agda = {",
                "\t\t'comment': /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t},",
                "\t\t'punctuation': /[(){}⦃⦄.;@]/,",
                "\t\t'class-name': {",
                "\t\t\tpattern: /((?:data|record) +)\\S+/,",
                "\t\t\tlookbehind: true,",
                "\t\t},",
                "\t\t'function': {",
                "\t\t\tpattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t},",
                "\t\t'operator': {",
                "\t\t\tpattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,",
                "\t\t\tlookbehind: true,",
                "\t\t},",
                "\t\t'keyword': /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/,",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-agda.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.agda={comment:/\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,greedy:!0},punctuation:/[(){}⦃⦄.;@]/,\"class-name\":{pattern:/((?:data|record) +)\\S+/,lookbehind:!0},function:{pattern:/(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,lookbehind:!0},operator:{pattern:/(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,lookbehind:!0},keyword:/\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/};"
            ]
        },
        "prism-al.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// based on https://github.com/microsoft/AL/blob/master/grammar/alsyntax.tmlanguage",
                "",
                "Prism.languages.al = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'string': {",
                "\t\tpattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /(\\b(?:event|procedure|trigger)\\s+|(?:^|[^.])\\.\\s*)[a-z_]\\w*(?=\\s*\\()/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': [",
                "\t\t// keywords",
                "\t\t/\\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\\b/i,",
                "\t\t// objects and metadata that are used like keywords",
                "\t\t/\\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\\b/i",
                "\t],",
                "\t'number': /\\b(?:0x[\\da-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)(?:F|U(?:LL?)?|LL?)?\\b/i,",
                "\t'boolean': /\\b(?:false|true)\\b/i,",
                "\t'variable': /\\b(?:Curr(?:FieldNo|Page|Report)|RequestOptionsPage|x?Rec)\\b/,",
                "\t'class-name': /\\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\\b/i,",
                "\t'operator': /\\.\\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\\b(?:and|div|mod|not|or|xor)\\b/i,",
                "\t'punctuation': /[()\\[\\]{}:.;,]/",
                "};"
            ]
        },
        "prism-al.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.al={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,string:{pattern:/'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,greedy:!0},function:{pattern:/(\\b(?:event|procedure|trigger)\\s+|(?:^|[^.])\\.\\s*)[a-z_]\\w*(?=\\s*\\()/i,lookbehind:!0},keyword:[/\\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\\b/i,/\\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\\b/i],number:/\\b(?:0x[\\da-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)(?:F|U(?:LL?)?|LL?)?\\b/i,boolean:/\\b(?:false|true)\\b/i,variable:/\\b(?:Curr(?:FieldNo|Page|Report)|RequestOptionsPage|x?Rec)\\b/,\"class-name\":/\\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\\b/i,operator:/\\.\\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\\b(?:and|div|mod|not|or|xor)\\b/i,punctuation:/[()\\[\\]{}:.;,]/};"
            ]
        },
        "prism-antlr4.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.antlr4 = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t'string': {",
                "\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'character-class': {",
                "\t\tpattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,",
                "\t\tgreedy: true,",
                "\t\talias: 'regex',",
                "\t\tinside: {",
                "\t\t\t'range': {",
                "\t\t\t\tpattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\t'escape': /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,",
                "\t\t\t'punctuation': /[\\[\\]]/",
                "\t\t}",
                "\t},",
                "\t'action': {",
                "\t\tpattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'content': {",
                "\t\t\t\t// this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to",
                "\t\t\t\tpattern: /(\\{)[\\s\\S]+(?=\\})/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /[{}]/",
                "\t\t}",
                "\t},",
                "\t'command': {",
                "\t\tpattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'function': /\\b\\w+(?=\\s*(?:[,(]|$))/,",
                "\t\t\t'punctuation': /[,()]/",
                "\t\t}",
                "\t},",
                "\t'annotation': {",
                "\t\tpattern: /@\\w+(?:::\\w+)*/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /#[ \\t]*\\w+/,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'keyword': /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,",
                "\t'definition': [",
                "\t\t{",
                "\t\t\tpattern: /\\b[a-z]\\w*(?=\\s*:)/,",
                "\t\t\talias: ['rule', 'class-name']",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b[A-Z]\\w*(?=\\s*:)/,",
                "\t\t\talias: ['token', 'constant']",
                "\t\t},",
                "\t],",
                "\t'constant': /\\b[A-Z][A-Z_]*\\b/,",
                "\t'operator': /\\.\\.|->|[|~]|[*+?]\\??/,",
                "\t'punctuation': /[;:()=]/",
                "};",
                "",
                "Prism.languages.g4 = Prism.languages.antlr4;"
            ]
        },
        "prism-antlr4.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.antlr4={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,string:{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])*'/,greedy:!0},\"character-class\":{pattern:/\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,greedy:!0,alias:\"regex\",inside:{range:{pattern:/([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,lookbehind:!0,alias:\"punctuation\"},escape:/\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,punctuation:/[\\[\\]]/}},action:{pattern:/\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,greedy:!0,inside:{content:{pattern:/(\\{)[\\s\\S]+(?=\\})/,lookbehind:!0},punctuation:/[{}]/}},command:{pattern:/(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,lookbehind:!0,inside:{function:/\\b\\w+(?=\\s*(?:[,(]|$))/,punctuation:/[,()]/}},annotation:{pattern:/@\\w+(?:::\\w+)*/,alias:\"keyword\"},label:{pattern:/#[ \\t]*\\w+/,alias:\"punctuation\"},keyword:/\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,definition:[{pattern:/\\b[a-z]\\w*(?=\\s*:)/,alias:[\"rule\",\"class-name\"]},{pattern:/\\b[A-Z]\\w*(?=\\s*:)/,alias:[\"token\",\"constant\"]}],constant:/\\b[A-Z][A-Z_]*\\b/,operator:/\\.\\.|->|[|~]|[*+?]\\??/,punctuation:/[;:()=]/},Prism.languages.g4=Prism.languages.antlr4;"
            ]
        },
        "prism-apacheconf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apacheconf = {",
                "\t'comment': /#.*/,",
                "\t'directive-inline': {",
                "\t\tpattern: /(^\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|Type|UserFile|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferSize|BufferedLogs|CGIDScriptTimeout|CGIMapExtension|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DTracePrivileges|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtFilterDefine|ExtFilterOptions|ExtendedStatus|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|KeepAlive|KeepAliveTimeout|KeptBodySize|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|LanguagePriority|Limit(?:InternalRecursion|Request(?:Body|FieldSize|Fields|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|MMapFile|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|ModMimeUsePathInfo|ModemStandard|MultiviewsMatch|Mutex|NWSSLTrustedCerts|NWSSLUpgradeable|NameVirtualHost|NoProxy|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|RLimitCPU|RLimitMEM|RLimitNPROC|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|SSIETag|SSIEndTag|SSIErrorMsg|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|SRPUnknownUserSeed|SRPVerifierFile|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UseStapling|UserName|VerifyClient|VerifyDepth)|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadStackSize|ThreadsPerChild|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property'",
                "\t},",
                "\t'directive-block': {",
                "\t\tpattern: /<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b.*>/i,",
                "\t\tinside: {",
                "\t\t\t'directive-block': {",
                "\t\t\t\tpattern: /^<\\/?\\w+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/",
                "\t\t\t\t},",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\t'directive-block-parameter': {",
                "\t\t\t\tpattern: /.*[^>]/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t\t'string': {",
                "\t\t\t\t\t\tpattern: /(\"|').*\\1/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\talias: 'attr-value'",
                "\t\t\t},",
                "\t\t\t'punctuation': />/",
                "\t\t},",
                "\t\talias: 'tag'",
                "\t},",
                "\t'directive-flags': {",
                "\t\tpattern: /\\[(?:[\\w=],?)+\\]/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|').*\\1/,",
                "\t\tinside: {",
                "\t\t\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/",
                "\t\t}",
                "\t},",
                "\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,",
                "\t'regex': /\\^?.*\\$|\\^.*\\$?/",
                "};"
            ]
        },
        "prism-apacheconf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apacheconf={comment:/#.*/,\"directive-inline\":{pattern:/(^\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|Type|UserFile|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferSize|BufferedLogs|CGIDScriptTimeout|CGIMapExtension|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DTracePrivileges|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtFilterDefine|ExtFilterOptions|ExtendedStatus|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|KeepAlive|KeepAliveTimeout|KeptBodySize|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|LanguagePriority|Limit(?:InternalRecursion|Request(?:Body|FieldSize|Fields|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|MMapFile|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|ModMimeUsePathInfo|ModemStandard|MultiviewsMatch|Mutex|NWSSLTrustedCerts|NWSSLUpgradeable|NameVirtualHost|NoProxy|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|RLimitCPU|RLimitMEM|RLimitNPROC|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|SSIETag|SSIEndTag|SSIErrorMsg|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|SRPUnknownUserSeed|SRPVerifierFile|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UseStapling|UserName|VerifyClient|VerifyDepth)|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadStackSize|ThreadsPerChild|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,lookbehind:!0,alias:\"property\"},\"directive-block\":{pattern:/<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b.*>/i,inside:{\"directive-block\":{pattern:/^<\\/?\\w+/,inside:{punctuation:/^<\\/?/},alias:\"tag\"},\"directive-block-parameter\":{pattern:/.*[^>]/,inside:{punctuation:/:/,string:{pattern:/(\"|').*\\1/,inside:{variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/}}},alias:\"attr-value\"},punctuation:/>/},alias:\"tag\"},\"directive-flags\":{pattern:/\\[(?:[\\w=],?)+\\]/,alias:\"keyword\"},string:{pattern:/(\"|').*\\1/,inside:{variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/}},variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,regex:/\\^?.*\\$|\\^.*\\$?/};"
            ]
        },
        "prism-apex.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar keywords = /\\b(?:abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|get(?=\\s*[{};])|(?:after|before)(?=\\s+[a-z])|(?:inherited|with|without)\\s+sharing)\\b/i;",
                "",
                "\tvar className = /\\b(?:(?=[a-z_]\\w*\\s*[<\\[])|(?!<keyword>))[A-Z_]\\w*(?:\\s*\\.\\s*[A-Z_]\\w*)*\\b(?:\\s*(?:\\[\\s*\\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*/.source",
                "\t\t.replace(/<keyword>/g, function () { return keywords.source; });",
                "\t/** @param {string} pattern */",
                "\tfunction insertClassName(pattern) {",
                "\t\treturn RegExp(pattern.replace(/<CLASS-NAME>/g, function () { return className; }), 'i');",
                "\t}",
                "",
                "\tvar classNameInside = {",
                "\t\t'keyword': keywords,",
                "\t\t'punctuation': /[()\\[\\]{};,:.<>]/",
                "\t};",
                "",
                "\tPrism.languages.apex = {",
                "\t\t'comment': Prism.languages.clike.comment,",
                "\t\t'string': Prism.languages.clike.string,",
                "\t\t'sql': {",
                "\t\t\tpattern: /((?:[=,({:]|\\breturn)\\s*)\\[[^\\[\\]]*\\]/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'language-sql',",
                "\t\t\tinside: Prism.languages.sql",
                "\t\t},",
                "",
                "\t\t'annotation': {",
                "\t\t\tpattern: /@\\w+\\b/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: insertClassName(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\\s+\\w+\\s+on)\\s+)<CLASS-NAME>/.source),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: classNameInside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// cast",
                "\t\t\t\tpattern: insertClassName(/(\\(\\s*)<CLASS-NAME>(?=\\s*\\)\\s*[\\w(])/.source),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: classNameInside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// variable/parameter declaration and return types",
                "\t\t\t\tpattern: insertClassName(/<CLASS-NAME>(?=\\s*\\w+\\s*[;=,(){:])/.source),",
                "\t\t\t\tinside: classNameInside",
                "\t\t\t}",
                "\t\t],",
                "\t\t'trigger': {",
                "\t\t\tpattern: /(\\btrigger\\s+)\\w+\\b/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'keyword': keywords,",
                "\t\t'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,",
                "",
                "\t\t'boolean': /\\b(?:false|true)\\b/i,",
                "",
                "\t\t'number': /(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+|L)?)\\b/i,",
                "\t\t'operator': /[!=](?:==?)?|\\?\\.?|&&|\\|\\||--|\\+\\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,",
                "\t\t'punctuation': /[()\\[\\]{};,.]/",
                "\t};",
                "",
                "})(Prism);"
            ]
        },
        "prism-apex.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=/\\b(?:abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|get(?=\\s*[{};])|(?:after|before)(?=\\s+[a-z])|(?:inherited|with|without)\\s+sharing)\\b/i,n=\"\\\\b(?:(?=[a-z_]\\\\w*\\\\s*[<\\\\[])|(?!<keyword>))[A-Z_]\\\\w*(?:\\\\s*\\\\.\\\\s*[A-Z_]\\\\w*)*\\\\b(?:\\\\s*(?:\\\\[\\\\s*\\\\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*\".replace(/<keyword>/g,function(){return t.source});function i(e){return RegExp(e.replace(/<CLASS-NAME>/g,function(){return n}),\"i\")}var a={keyword:t,punctuation:/[()\\[\\]{};,:.<>]/};e.languages.apex={comment:e.languages.clike.comment,string:e.languages.clike.string,sql:{pattern:/((?:[=,({:]|\\breturn)\\s*)\\[[^\\[\\]]*\\]/i,lookbehind:!0,greedy:!0,alias:\"language-sql\",inside:e.languages.sql},annotation:{pattern:/@\\w+\\b/,alias:\"punctuation\"},\"class-name\":[{pattern:i(\"(\\\\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\\\\s+\\\\w+\\\\s+on)\\\\s+)<CLASS-NAME>\"),lookbehind:!0,inside:a},{pattern:i(\"(\\\\(\\\\s*)<CLASS-NAME>(?=\\\\s*\\\\)\\\\s*[\\\\w(])\"),lookbehind:!0,inside:a},{pattern:i(\"<CLASS-NAME>(?=\\\\s*\\\\w+\\\\s*[;=,(){:])\"),inside:a}],trigger:{pattern:/(\\btrigger\\s+)\\w+\\b/i,lookbehind:!0,alias:\"class-name\"},keyword:t,function:/\\b[a-z_]\\w*(?=\\s*\\()/i,boolean:/\\b(?:false|true)\\b/i,number:/(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+|L)?)\\b/i,operator:/[!=](?:==?)?|\\?\\.?|&&|\\|\\||--|\\+\\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,punctuation:/[()\\[\\]{};,.]/}}(Prism);"
            ]
        },
        "prism-apl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apl = {",
                "\t'comment': /(?:⍝|#[! ]).*$/m,",
                "\t'string': {",
                "\t\tpattern: /'(?:[^'\\r\\n]|'')*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /¯?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+)?|¯|∞))?/i,",
                "\t'statement': /:[A-Z][a-z][A-Za-z]*\\b/,",
                "\t'system-function': {",
                "\t\tpattern: /⎕[A-Z]+/i,",
                "\t\talias: 'function'",
                "\t},",
                "\t'constant': /[⍬⌾#⎕⍞]/,",
                "\t'function': /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,",
                "\t'monadic-operator': {",
                "\t\tpattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'dyadic-operator': {",
                "\t\tpattern: /[.⍣⍠⍤∘⌸@⌺⍥]/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'assignment': {",
                "\t\tpattern: /←/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'punctuation': /[\\[;\\]()◇⋄]/,",
                "\t'dfn': {",
                "\t\tpattern: /[{}⍺⍵⍶⍹∇⍫:]/,",
                "\t\talias: 'builtin'",
                "\t}",
                "};"
            ]
        },
        "prism-apl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apl={comment:/(?:⍝|#[! ]).*$/m,string:{pattern:/'(?:[^'\\r\\n]|'')*'/,greedy:!0},number:/¯?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+)?|¯|∞))?/i,statement:/:[A-Z][a-z][A-Za-z]*\\b/,\"system-function\":{pattern:/⎕[A-Z]+/i,alias:\"function\"},constant:/[⍬⌾#⎕⍞]/,function:/[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\"monadic-operator\":{pattern:/[\\\\\\/⌿⍀¨⍨⌶&∥]/,alias:\"operator\"},\"dyadic-operator\":{pattern:/[.⍣⍠⍤∘⌸@⌺⍥]/,alias:\"operator\"},assignment:{pattern:/←/,alias:\"keyword\"},punctuation:/[\\[;\\]()◇⋄]/,dfn:{pattern:/[{}⍺⍵⍶⍹∇⍫:]/,alias:\"builtin\"}};"
            ]
        },
        "prism-applescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.applescript = {",
                "\t'comment': [",
                "\t\t// Allow one level of nesting",
                "\t\t/\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/,",
                "\t\t/--.+/,",
                "\t\t/#.+/",
                "\t],",
                "\t'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,",
                "\t'operator': [",
                "\t\t/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,",
                "\t\t/\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/",
                "\t],",
                "\t'keyword': /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,",
                "\t'class': {",
                "\t\tpattern: /\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'punctuation': /[{}():,¬«»《》]/",
                "};"
            ]
        },
        "prism-applescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.applescript={comment:[/\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/,/--.+/,/#.+/],string:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,operator:[/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,/\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/],keyword:/\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,class:{pattern:/\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,alias:\"builtin\"},punctuation:/[{}():,¬«»《》]/};"
            ]
        },
        "prism-aql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aql = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'property': {",
                "\t\tpattern: /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([\"'´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /@@?\\w+/,",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WITH)\\b/i,",
                "\t\t// pseudo keywords get a lookbehind to avoid false positives",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\bOPTIONS(?=\\s*{)/i",
                "\t\t}",
                "\t],",
                "\t'function': /(?!\\d)\\w+(?=\\s*\\()/,",
                "\t'boolean': /(?:true|false)/i,",
                "\t'range': {",
                "\t\tpattern: /\\.\\./,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'number': /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i,",
                "\t'operator': /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,",
                "\t'punctuation': /::|[?.:,;()[\\]{}]/",
                "};"
            ]
        },
        "prism-aql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aql={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,property:{pattern:/([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/([\"'´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,greedy:!0},variable:/@@?\\w+/,keyword:[{pattern:/(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,lookbehind:!0},/\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WITH)\\b/i,{pattern:/(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,lookbehind:!0},{pattern:/(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,lookbehind:!0},{pattern:/\\bOPTIONS(?=\\s*{)/i}],function:/(?!\\d)\\w+(?=\\s*\\()/,boolean:/(?:true|false)/i,range:{pattern:/\\.\\./,alias:\"operator\"},number:/(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i,operator:/\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,punctuation:/::|[?.:,;()[\\]{}]/};"
            ]
        },
        "prism-arduino.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arduino = Prism.languages.extend('cpp', {",
                "\t'constant': /\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/,",
                "\t'keyword': /\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,",
                "\t'builtin': /\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/",
                "});"
            ]
        },
        "prism-arduino.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arduino=Prism.languages.extend(\"cpp\",{constant:/\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/,keyword:/\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,builtin:/\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/});"
            ]
        },
        "prism-arff.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arff = {",
                "\t'comment': /%.*/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /@(?:attribute|data|end|relation)\\b/i,",
                "\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,",
                "\t'punctuation': /[{},]/",
                "};"
            ]
        },
        "prism-arff.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arff={comment:/%.*/,string:{pattern:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:/@(?:attribute|data|end|relation)\\b/i,number:/\\b\\d+(?:\\.\\d+)?\\b/,punctuation:/[{},]/};"
            ]
        },
        "prism-asciidoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar attributes = {",
                "\t\tpattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'quoted': {",
                "\t\t\t\tpattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^[$`]|[$`]$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'interpreted': {",
                "\t\t\t\tpattern: /'(?:[^'\\\\]|\\\\.)*'/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^'|'$/",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\t'variable': /\\w+(?==)/,",
                "\t\t\t'punctuation': /^\\[|\\]$|,/,",
                "\t\t\t'operator': /=/,",
                "\t\t\t// The negative look-ahead prevents blank matches",
                "\t\t\t'attr-value': /(?!^\\s+$).+/",
                "\t\t}",
                "\t};",
                "",
                "\tvar asciidoc = Prism.languages.asciidoc = {",
                "\t\t'comment-block': {",
                "\t\t\tpattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'table': {",
                "\t\t\tpattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'specifiers': {",
                "\t\t\t\t\tpattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /(^|[^\\\\])[|!]=*/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'passthrough-block': {",
                "\t\t\tpattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\++|\\++$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Literal blocks and listing blocks",
                "\t\t'literal-block': {",
                "\t\t\tpattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:-+|\\.+)|(?:-+|\\.+)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Sidebar blocks, quote blocks, example blocks and open blocks",
                "\t\t'other-block': {",
                "\t\t\tpattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// list-punctuation and list-label must appear before indented-block",
                "\t\t'list-punctuation': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'list-label': {",
                "\t\t\tpattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'indented-block': {",
                "\t\t\tpattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t'comment': /^\\/\\/.*/m,",
                "\t\t'title': {",
                "\t\t\tpattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,",
                "\t\t\talias: 'important',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t'attribute-entry': {",
                "\t\t\tpattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,",
                "\t\t\talias: 'tag'",
                "\t\t},",
                "\t\t'attributes': attributes,",
                "\t\t'hr': {",
                "\t\t\tpattern: /^'{3,}$/m,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'page-break': {",
                "\t\t\tpattern: /^<{3,}$/m,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'admonition': {",
                "\t\t\tpattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'callout': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[ \\t]*)<?\\d*>/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'symbol'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /<\\d+>/,",
                "\t\t\t\talias: 'symbol'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'macro': {",
                "\t\t\tpattern: /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^[a-z\\d-]+(?=:)/,",
                "\t\t\t\t'punctuation': /^::?/,",
                "\t\t\t\t'attributes': {",
                "\t\t\t\t\tpattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,",
                "\t\t\t\t\tinside: attributes.inside",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'inline': {",
                "\t\t\t/*",
                "\t\t\tThe initial look-behind prevents the highlighting of escaped quoted text.",
                "",
                "\t\t\tQuoted text can be multi-line but cannot span an empty line.",
                "\t\t\tAll quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].",
                "",
                "\t\t\tFirst, we handle the constrained quotes.",
                "\t\t\tThose must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.",
                "\t\t\tThey are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#",
                "",
                "\t\t\tThen we handle the unconstrained quotes.",
                "\t\t\tThose do not have the restrictions of the constrained quotes.",
                "\t\t\tThey are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))",
                "\t\t\t */",
                "\t\t\tpattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': attributes,",
                "\t\t\t\t'url': {",
                "\t\t\t\t\tpattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'attribute-ref': {",
                "\t\t\t\t\tpattern: /^\\{.+\\}$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'variable': {",
                "\t\t\t\t\t\t\tpattern: /(^\\{)[a-z\\d,+_-]+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'operator': /^[=?!#%@$]|!(?=[:}])/,",
                "\t\t\t\t\t\t'punctuation': /^\\{|\\}$|::?/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'italic': {",
                "\t\t\t\t\tpattern: /^(['_])[\\s\\S]+\\1$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^(?:''?|__?)|(?:''?|__?)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'bold': {",
                "\t\t\t\t\tpattern: /^\\*[\\s\\S]+\\*$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\tpunctuation: /^\\*\\*?|\\*\\*?$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'replacement': {",
                "\t\t\tpattern: /\\((?:C|TM|R)\\)/,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t'entity': /&#?[\\da-z]{1,8};/i,",
                "\t\t'line-continuation': {",
                "\t\t\tpattern: /(^| )\\+$/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t};",
                "",
                "",
                "\t// Allow some nesting. There is no recursion though, so cloning should not be needed.",
                "",
                "\tfunction copyFromAsciiDoc(keys) {",
                "\t\tkeys = keys.split(' ');",
                "",
                "\t\tvar o = {};",
                "\t\tfor (var i = 0, l = keys.length; i < l; i++) {",
                "\t\t\to[keys[i]] = asciidoc[keys[i]];",
                "\t\t}",
                "\t\treturn o;",
                "\t}",
                "",
                "\tattributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');",
                "",
                "\tasciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');",
                "",
                "\tasciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');",
                "",
                "\tasciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');",
                "",
                "\tasciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');",
                "",
                "\tasciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');",
                "",
                "",
                "\t// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "\tPrism.hooks.add('wrap', function (env) {",
                "\t\tif (env.type === 'entity') {",
                "\t\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.adoc = Prism.languages.asciidoc;",
                "}(Prism));"
            ]
        },
        "prism-asciidoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){var n={pattern:/(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,lookbehind:!0,inside:{quoted:{pattern:/([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,inside:{punctuation:/^[$`]|[$`]$/}},interpreted:{pattern:/'(?:[^'\\\\]|\\\\.)*'/,inside:{punctuation:/^'|'$/}},string:/\"(?:[^\"\\\\]|\\\\.)*\"/,variable:/\\w+(?==)/,punctuation:/^\\[|\\]$|,/,operator:/=/,\"attr-value\":/(?!^\\s+$).+/}},a=t.languages.asciidoc={\"comment-block\":{pattern:/^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,alias:\"comment\"},table:{pattern:/^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,inside:{specifiers:{pattern:/(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,alias:\"attr-value\"},punctuation:{pattern:/(^|[^\\\\])[|!]=*/,lookbehind:!0}}},\"passthrough-block\":{pattern:/^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^\\++|\\++$/}},\"literal-block\":{pattern:/^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^(?:-+|\\.+)|(?:-+|\\.+)$/}},\"other-block\":{pattern:/^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/}},\"list-punctuation\":{pattern:/(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,lookbehind:!0,alias:\"punctuation\"},\"list-label\":{pattern:/(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,lookbehind:!0,alias:\"symbol\"},\"indented-block\":{pattern:/((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,lookbehind:!0},comment:/^\\/\\/.*/m,title:{pattern:/^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,alias:\"important\",inside:{punctuation:/^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/}},\"attribute-entry\":{pattern:/^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,alias:\"tag\"},attributes:n,hr:{pattern:/^'{3,}$/m,alias:\"punctuation\"},\"page-break\":{pattern:/^<{3,}$/m,alias:\"punctuation\"},admonition:{pattern:/^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,alias:\"keyword\"},callout:[{pattern:/(^[ \\t]*)<?\\d*>/m,lookbehind:!0,alias:\"symbol\"},{pattern:/<\\d+>/,alias:\"symbol\"}],macro:{pattern:/\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:{function:/^[a-z\\d-]+(?=:)/,punctuation:/^::?/,attributes:{pattern:/(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:n.inside}}},inline:{pattern:/(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,lookbehind:!0,inside:{attributes:n,url:{pattern:/^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,inside:{punctuation:/^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/}},\"attribute-ref\":{pattern:/^\\{.+\\}$/,inside:{variable:{pattern:/(^\\{)[a-z\\d,+_-]+/,lookbehind:!0},operator:/^[=?!#%@$]|!(?=[:}])/,punctuation:/^\\{|\\}$|::?/}},italic:{pattern:/^(['_])[\\s\\S]+\\1$/,inside:{punctuation:/^(?:''?|__?)|(?:''?|__?)$/}},bold:{pattern:/^\\*[\\s\\S]+\\*$/,inside:{punctuation:/^\\*\\*?|\\*\\*?$/}},punctuation:/^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/}},replacement:{pattern:/\\((?:C|TM|R)\\)/,alias:\"builtin\"},entity:/&#?[\\da-z]{1,8};/i,\"line-continuation\":{pattern:/(^| )\\+$/m,lookbehind:!0,alias:\"punctuation\"}};function i(t){for(var n={},i=0,e=(t=t.split(\" \")).length;i<e;i++)n[t[i]]=a[t[i]];return n}n.inside.interpreted.inside.rest=i(\"macro inline replacement entity\"),a[\"passthrough-block\"].inside.rest=i(\"macro\"),a[\"literal-block\"].inside.rest=i(\"callout\"),a.table.inside.rest=i(\"comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation\"),a[\"other-block\"].inside.rest=i(\"table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation\"),a.title.inside.rest=i(\"macro inline replacement entity\"),t.hooks.add(\"wrap\",function(t){\"entity\"===t.type&&(t.attributes.title=t.content.replace(/&amp;/,\"&\"))}),t.languages.adoc=t.languages.asciidoc}(Prism);"
            ]
        },
        "prism-asm6502.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.asm6502 = {",
                "\t'comment': /;.*/,",
                "\t'directive': {",
                "\t\tpattern: /\\.\\w+(?= )/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t'opcode': {",
                "\t\tpattern: /\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,",
                "\t\talias: 'property'",
                "\t},",
                "\t'hexnumber': {",
                "\t\tpattern: /#?\\$[\\da-f]{2,4}\\b/i,",
                "\t\talias: 'string'",
                "\t},",
                "\t'binarynumber': {",
                "\t\tpattern: /#?%[01]+\\b/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'decimalnumber': {",
                "\t\tpattern: /#?\\b\\d+\\b/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'register': {",
                "\t\tpattern: /\\b[xya]\\b/i,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-asm6502.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.asm6502={comment:/;.*/,directive:{pattern:/\\.\\w+(?= )/,alias:\"keyword\"},string:/([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,opcode:{pattern:/\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,alias:\"property\"},hexnumber:{pattern:/#?\\$[\\da-f]{2,4}\\b/i,alias:\"string\"},binarynumber:{pattern:/#?%[01]+\\b/,alias:\"string\"},decimalnumber:{pattern:/#?\\b\\d+\\b/,alias:\"string\"},register:{pattern:/\\b[xya]\\b/i,alias:\"variable\"}};"
            ]
        },
        "prism-aspnet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aspnet = Prism.languages.extend('markup', {",
                "\t'page-directive': {",
                "\t\tpattern: /<%\\s*@.*%>/i,",
                "\t\talias: 'tag',",
                "\t\tinside: {",
                "\t\t\t'page-directive': {",
                "\t\t\t\tpattern: /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.markup.tag.inside",
                "\t\t}",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /<%.*%>/i,",
                "\t\talias: 'tag',",
                "\t\tinside: {",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /<%\\s*?[$=%#:]{0,2}|%>/i,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.csharp",
                "\t\t}",
                "\t}",
                "});",
                "// Regexp copied from prism-markup, with a negative look-ahead added",
                "Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "",
                "// match directives of attribute value foo=\"<% Bar %>\"",
                "Prism.languages.insertBefore('inside', 'punctuation', {",
                "\t'directive': Prism.languages.aspnet['directive']",
                "}, Prism.languages.aspnet.tag.inside[\"attr-value\"]);",
                "",
                "Prism.languages.insertBefore('aspnet', 'comment', {",
                "\t'asp-comment': {",
                "\t\tpattern: /<%--[\\s\\S]*?--%>/,",
                "\t\talias: ['asp', 'comment']",
                "\t}",
                "});",
                "",
                "// script runat=\"server\" contains csharp, not javascript",
                "Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {",
                "\t'asp-script': {",
                "\t\tpattern: /(<script(?=.*runat=['\"]?server['\"]?)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: ['asp', 'script'],",
                "\t\tinside: Prism.languages.csharp || {}",
                "\t}",
                "});"
            ]
        },
        "prism-aspnet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aspnet=Prism.languages.extend(\"markup\",{\"page-directive\":{pattern:/<%\\s*@.*%>/i,alias:\"tag\",inside:{\"page-directive\":{pattern:/<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,alias:\"tag\"},rest:Prism.languages.markup.tag.inside}},directive:{pattern:/<%.*%>/i,alias:\"tag\",inside:{directive:{pattern:/<%\\s*?[$=%#:]{0,2}|%>/i,alias:\"tag\"},rest:Prism.languages.csharp}}}),Prism.languages.aspnet.tag.pattern=/<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,Prism.languages.insertBefore(\"inside\",\"punctuation\",{directive:Prism.languages.aspnet.directive},Prism.languages.aspnet.tag.inside[\"attr-value\"]),Prism.languages.insertBefore(\"aspnet\",\"comment\",{\"asp-comment\":{pattern:/<%--[\\s\\S]*?--%>/,alias:[\"asp\",\"comment\"]}}),Prism.languages.insertBefore(\"aspnet\",Prism.languages.javascript?\"script\":\"tag\",{\"asp-script\":{pattern:/(<script(?=.*runat=['\"]?server['\"]?)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,alias:[\"asp\",\"script\"],inside:Prism.languages.csharp||{}}});"
            ]
        },
        "prism-autohotkey.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl",
                "Prism.languages.autohotkey = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|\\s);.*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*)\\/\\*(?:[\\r\\n](?![ \\t]*\\*\\/)|[^\\r\\n])*(?:[\\r\\n][ \\t]*\\*\\/)?/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': /\"(?:[^\"\\n\\r]|\"\")*\"/m,",
                "\t'tag': /^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m, //labels",
                "\t'variable': /%\\w+%/,",
                "\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t'operator': /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "",
                "\t'selector': /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,",
                "",
                "\t'constant': /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|programfiles|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,",
                "",
                "\t'builtin': /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|ltrim|rtrim|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|strreplace|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,",
                "",
                "\t'symbol': /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,",
                "",
                "\t'important': /#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|DerefChar|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|If|IfTimeout|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InputLevel|InstallKeybdHook|InstallMouseHook|KeyHistory|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|MenuMaskKey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|Warn|WinActivateForce)\\b/i,",
                "",
                "\t'keyword': /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Throw|Try|Catch|Finally|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i,",
                "\t'function': /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,",
                "\t'punctuation': /[{}[\\]():,]/",
                "};"
            ]
        },
        "prism-autohotkey.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autohotkey={comment:[{pattern:/(^|\\s);.*/,lookbehind:!0},{pattern:/(^\\s*)\\/\\*(?:[\\r\\n](?![ \\t]*\\*\\/)|[^\\r\\n])*(?:[\\r\\n][ \\t]*\\*\\/)?/m,lookbehind:!0,greedy:!0}],string:/\"(?:[^\"\\n\\r]|\"\")*\"/m,tag:/^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m,variable:/%\\w+%/,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,boolean:/\\b(?:true|false)\\b/,selector:/\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,constant:/\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|programfiles|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,builtin:/\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|ltrim|rtrim|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|strreplace|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,symbol:/\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,important:/#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|DerefChar|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|If|IfTimeout|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InputLevel|InstallKeybdHook|InstallMouseHook|KeyHistory|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|MenuMaskKey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|Warn|WinActivateForce)\\b/i,keyword:/\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Throw|Try|Catch|Finally|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i,function:/[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,punctuation:/[{}[\\]():,]/};"
            ]
        },
        "prism-autoit.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autoit = {",
                "\t\"comment\": [",
                "\t\t/;.*/,",
                "\t\t{",
                "\t\t\t// The multi-line comments delimiters can actually be commented out with \";\"",
                "\t\t\tpattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:comments-end|ce)/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t\"url\": {",
                "\t\tpattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t\"string\": {",
                "\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t\"variable\": /([%$@])\\w+\\1/",
                "\t\t}",
                "\t},",
                "\t\"directive\": {",
                "\t\tpattern: /(^\\s*)#\\w+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t\"function\": /\\b\\w+(?=\\()/,",
                "\t// Variables and macros",
                "\t\"variable\": /[$@]\\w+/,",
                "\t\"keyword\": /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,",
                "\t\"number\": /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,",
                "\t\"boolean\": /\\b(?:True|False)\\b/i,",
                "\t\"operator\": /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,",
                "\t\"punctuation\": /[\\[\\]().,:]/",
                "};"
            ]
        },
        "prism-autoit.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autoit={comment:[/;.*/,{pattern:/(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:comments-end|ce)/m,lookbehind:!0}],url:{pattern:/(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,lookbehind:!0},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,greedy:!0,inside:{variable:/([%$@])\\w+\\1/}},directive:{pattern:/(^\\s*)#\\w+/m,lookbehind:!0,alias:\"keyword\"},function:/\\b\\w+(?=\\()/,variable:/[$@]\\w+/,keyword:/\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,boolean:/\\b(?:True|False)\\b/i,operator:/<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,punctuation:/[\\[\\]().,:]/};"
            ]
        },
        "prism-bash.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\t// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'",
                "\t// + LC_ALL, RANDOM, REPLY, SECONDS.",
                "\t// + make sure PS1..4 are here as they are not always set,",
                "\t// - some useless things.",
                "\tvar envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';",
                "",
                "\tvar commandAfterHeredoc = {",
                "\t\tpattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation', // this looks reasonably well in all themes",
                "\t\tinside: null // see below",
                "\t};",
                "",
                "\tvar insideString = {",
                "\t\t'bash': commandAfterHeredoc,",
                "\t\t'environment': {",
                "\t\t\tpattern: RegExp(\"\\\\$\" + envVars),",
                "\t\t\talias: 'constant'",
                "\t\t},",
                "\t\t'variable': [",
                "\t\t\t// [0]: Arithmetic Environment",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// If there is a $ sign at the beginning highlight $(( and )) as variable",
                "\t\t\t\t\t'variable': [",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/^\\$\\(\\(/",
                "\t\t\t\t\t],",
                "\t\t\t\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t\t\t\t\t// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic",
                "\t\t\t\t\t'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,",
                "\t\t\t\t\t// If there is no $ sign at the beginning highlight (( and )) as punctuation",
                "\t\t\t\t\t'punctuation': /\\(\\(?|\\)\\)?|,|;/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// [1]: Command Substitution",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'variable': /^\\$\\(|^`|\\)$|`$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// [2]: Brace expansion",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$\\{[^}]+\\}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,",
                "\t\t\t\t\t'punctuation': /[\\[\\]]/,",
                "\t\t\t\t\t'environment': {",
                "\t\t\t\t\t\tpattern: RegExp(\"(\\\\{)\" + envVars),",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'constant'",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t/\\$(?:\\w+|[#?*!@$])/",
                "\t\t],",
                "\t\t// Escape sequences from echo and printf's manuals, and escaped quotes.",
                "\t\t'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/",
                "\t};",
                "",
                "\tPrism.languages.bash = {",
                "\t\t'shebang': {",
                "\t\t\tpattern: /^#!\\s*\\/.*/,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\"{\\\\$])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function-name': [",
                "\t\t\t// a) function foo {",
                "\t\t\t// b) foo() {",
                "\t\t\t// c) function foo() {",
                "\t\t\t// but not “foo {”",
                "\t\t\t{",
                "\t\t\t\t// a) and c)",
                "\t\t\t\tpattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'function'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// b)",
                "\t\t\t\tpattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,",
                "\t\t\t\talias: 'function'",
                "\t\t\t}",
                "\t\t],",
                "\t\t// Highlight variable names as variables in for and select beginnings.",
                "\t\t'for-or-select': {",
                "\t\t\tpattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,",
                "\t\t\talias: 'variable',",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// Highlight variable names as variables in the left-hand part",
                "\t\t// of assignments (“=” and “+=”).",
                "\t\t'assign-left': {",
                "\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,",
                "\t\t\tinside: {",
                "\t\t\t\t'environment': {",
                "\t\t\t\t\tpattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'constant'",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'variable',",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'string': [",
                "\t\t\t// Support for Here-documents https://en.wikipedia.org/wiki/Here_document",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: insideString",
                "\t\t\t},",
                "\t\t\t// Here-document with quotes around the tag",
                "\t\t\t// → No expansion (so no “inside”).",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'bash': commandAfterHeredoc",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// “Normal” string",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\2)[^\\\\`$])*\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: insideString",
                "\t\t\t}",
                "\t\t],",
                "\t\t'environment': {",
                "\t\t\tpattern: RegExp(\"\\\\$?\" + envVars),",
                "\t\t\talias: 'constant'",
                "\t\t},",
                "\t\t'variable': insideString.variable,",
                "\t\t'function': {",
                "\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html",
                "\t\t'builtin': {",
                "\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\t// Alias added to make those easier to distinguish from strings.",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'boolean': {",
                "\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'file-descriptor': {",
                "\t\t\tpattern: /\\B&\\d\\b/,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'operator': {",
                "\t\t\t// Lots of redirections here, but not just that.",
                "\t\t\tpattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,",
                "\t\t\tinside: {",
                "\t\t\t\t'file-descriptor': {",
                "\t\t\t\t\tpattern: /^\\d/,",
                "\t\t\t\t\talias: 'important'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,",
                "\t\t'number': {",
                "\t\t\tpattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t};",
                "",
                "\tcommandAfterHeredoc.inside = Prism.languages.bash;",
                "",
                "\t/* Patterns in command substitution. */",
                "\tvar toBeCopied = [",
                "\t\t'comment',",
                "\t\t'function-name',",
                "\t\t'for-or-select',",
                "\t\t'assign-left',",
                "\t\t'string',",
                "\t\t'environment',",
                "\t\t'function',",
                "\t\t'keyword',",
                "\t\t'builtin',",
                "\t\t'boolean',",
                "\t\t'file-descriptor',",
                "\t\t'operator',",
                "\t\t'punctuation',",
                "\t\t'number'",
                "\t];",
                "\tvar inside = insideString.variable[1].inside;",
                "\tfor(var i = 0; i < toBeCopied.length; i++) {",
                "\t\tinside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];",
                "\t}",
                "",
                "\tPrism.languages.shell = Prism.languages.bash;",
                "})(Prism);"
            ]
        },
        "prism-bash.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=\"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\",n={pattern:/(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,lookbehind:!0,alias:\"punctuation\",inside:null},a={bash:n,environment:{pattern:RegExp(\"\\\\$\"+t),alias:\"constant\"},variable:[{pattern:/\\$?\\(\\([\\s\\S]+?\\)\\)/,greedy:!0,inside:{variable:[{pattern:/(^\\$\\(\\([\\s\\S]+)\\)\\)/,lookbehind:!0},/^\\$\\(\\(/],number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,punctuation:/\\(\\(?|\\)\\)?|,|;/}},{pattern:/\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,greedy:!0,inside:{variable:/^\\$\\(|^`|\\)$|`$/}},{pattern:/\\$\\{[^}]+\\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,punctuation:/[\\[\\]]/,environment:{pattern:RegExp(\"(\\\\{)\"+t),lookbehind:!0,alias:\"constant\"}}},/\\$(?:\\w+|[#?*!@$])/],entity:/\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};e.languages.bash={shebang:{pattern:/^#!\\s*\\/.*/,alias:\"important\"},comment:{pattern:/(^|[^\"{\\\\$])#.*/,lookbehind:!0},\"function-name\":[{pattern:/(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,lookbehind:!0,alias:\"function\"},{pattern:/\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,alias:\"function\"}],\"for-or-select\":{pattern:/(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,alias:\"variable\",lookbehind:!0},\"assign-left\":{pattern:/(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,inside:{environment:{pattern:RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\"+t),lookbehind:!0,alias:\"constant\"}},alias:\"variable\",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\\s*)(\\w+?)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,lookbehind:!0,greedy:!0,inside:a},{pattern:/((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,lookbehind:!0,greedy:!0,inside:{bash:n}},{pattern:/(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\2)[^\\\\`$])*\\2/,lookbehind:!0,greedy:!0,inside:a}],environment:{pattern:RegExp(\"\\\\$?\"+t),alias:\"constant\"},variable:a.variable,function:{pattern:/(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,lookbehind:!0,alias:\"class-name\"},boolean:{pattern:/(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,lookbehind:!0},\"file-descriptor\":{pattern:/\\B&\\d\\b/,alias:\"important\"},operator:{pattern:/\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,inside:{\"file-descriptor\":{pattern:/^\\d/,alias:\"important\"}}},punctuation:/\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,number:{pattern:/(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,lookbehind:!0}},n.inside=e.languages.bash;for(var s=[\"comment\",\"function-name\",\"for-or-select\",\"assign-left\",\"string\",\"environment\",\"function\",\"keyword\",\"builtin\",\"boolean\",\"file-descriptor\",\"operator\",\"punctuation\",\"number\"],i=a.variable[1].inside,o=0;o<s.length;o++)i[s[o]]=e.languages.bash[s[o]];e.languages.shell=e.languages.bash}(Prism);"
            ]
        },
        "prism-basic.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.basic = {",
                "\t'comment': {",
                "\t\tpattern: /(?:!|REM\\b).+/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^REM/i",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t'keyword': /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,",
                "\t'function': /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,",
                "\t'operator': /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,",
                "\t'punctuation': /[,;:()]/",
                "};"
            ]
        },
        "prism-basic.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.basic={comment:{pattern:/(?:!|REM\\b).+/i,inside:{keyword:/^REM/i}},string:{pattern:/\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,greedy:!0},number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,keyword:/\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,function:/\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,operator:/<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,punctuation:/[,;:()]/};"
            ]
        },
        "prism-batch.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar variable = /%%?[~:\\w]+%?|!\\S+!/;",
                "\tvar parameter = {",
                "\t\tpattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,",
                "\t\talias: 'attr-name',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /:/",
                "\t\t}",
                "\t};",
                "\tvar string = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/;",
                "\tvar number = /(?:\\b|-)\\d+\\b/;",
                "",
                "\tPrism.languages.batch = {",
                "\t\t'comment': [",
                "\t\t\t/^::.*/m,",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'label': {",
                "\t\t\tpattern: /^:.*/m,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'command': [",
                "\t\t\t{",
                "\t\t\t\t// FOR command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^for\\b|\\b(?:in|do)\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'punctuation': /[()',]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// IF command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// ELSE command",
                "\t\t\t\tpattern: /((?:^|[&()])[ \\t]*)else\\b/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^else\\b/i",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// SET command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^set\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': [",
                "\t\t\t\t\t\tvariable,",
                "\t\t\t\t\t\t/\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/",
                "\t\t\t\t\t],",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,",
                "\t\t\t\t\t'punctuation': /[()',]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Other commands",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^\\w+\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'label': {",
                "\t\t\t\t\t\tpattern: /(^\\s*):\\S+/m,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'property'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /\\^/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'operator': /[&@]/,",
                "\t\t'punctuation': /[()']/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-batch.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var r=/%%?[~:\\w]+%?|!\\S+!/,t={pattern:/\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,alias:\"attr-name\",inside:{punctuation:/:/}},n=/\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/,i=/(?:\\b|-)\\d+\\b/;Prism.languages.batch={comment:[/^::.*/m,{pattern:/((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0}],label:{pattern:/^:.*/m,alias:\"property\"},command:[{pattern:/((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,lookbehind:!0,inside:{keyword:/^for\\b|\\b(?:in|do)\\b/i,string:n,parameter:t,variable:r,number:i,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,lookbehind:!0,inside:{keyword:/^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,string:n,parameter:t,variable:r,number:i,operator:/\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i}},{pattern:/((?:^|[&()])[ \\t]*)else\\b/im,lookbehind:!0,inside:{keyword:/^else\\b/i}},{pattern:/((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,inside:{keyword:/^set\\b/i,string:n,parameter:t,variable:[r,/\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],number:i,operator:/[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,inside:{keyword:/^\\w+\\b/i,string:n,parameter:t,label:{pattern:/(^\\s*):\\S+/m,lookbehind:!0,alias:\"property\"},variable:r,number:i,operator:/\\^/}}],operator:/[&@]/,punctuation:/[()']/}}();"
            ]
        },
        "prism-bbcode.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bbcode = {",
                "\t'tag': {",
                "\t\tpattern: /\\[\\/?[^\\s=\\]]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))?(?:\\s+[^\\s=\\]]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))*\\s*\\]/,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^\\[\\/?[^\\s=\\]]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^\\[\\/?/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+)/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t/^=/,",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\]/,",
                "\t\t\t'attr-name': /[^\\s=\\]]+/",
                "\t\t}",
                "\t}",
                "};",
                "",
                "Prism.languages.shortcode = Prism.languages.bbcode;"
            ]
        },
        "prism-bbcode.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bbcode={tag:{pattern:/\\[\\/?[^\\s=\\]]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))?(?:\\s+[^\\s=\\]]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))*\\s*\\]/,inside:{tag:{pattern:/^\\[\\/?[^\\s=\\]]+/,inside:{punctuation:/^\\[\\/?/}},\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\\s*)[\"']|[\"']$/,lookbehind:!0}]}},punctuation:/\\]/,\"attr-name\":/[^\\s=\\]]+/}}},Prism.languages.shortcode=Prism.languages.bbcode;"
            ]
        },
        "prism-birb.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.birb = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': [",
                "\t\t/\\b[A-Z](?:[\\d_]*[a-zA-Z]\\w*)?\\b/,",
                "",
                "\t\t// matches variable and function return types (parameters as well).",
                "\t\t/\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/",
                "\t],",
                "\t'keyword': /\\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|next|new|noSeeb|return|static|switch|throw|var|void|while)\\b/,",
                "\t'operator': /\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?|:/,",
                "\t'variable': /\\b[a-z_]\\w*\\b/,",
                "});",
                "",
                "Prism.languages.insertBefore('birb', 'function', {",
                "\t'metadata': {",
                "\t\tpattern: /<\\w+>/,",
                "\t\tgreedy: true,",
                "\t\talias: 'symbol'",
                "\t}",
                "});"
            ]
        },
        "prism-birb.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.birb=Prism.languages.extend(\"clike\",{string:{pattern:/r?(\"|')(?:\\\\.|(?!\\1)[^\\\\])*\\1/,greedy:!0},\"class-name\":[/\\b[A-Z](?:[\\d_]*[a-zA-Z]\\w*)?\\b/,/\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/],keyword:/\\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|next|new|noSeeb|return|static|switch|throw|var|void|while)\\b/,operator:/\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?|:/,variable:/\\b[a-z_]\\w*\\b/}),Prism.languages.insertBefore(\"birb\",\"function\",{metadata:{pattern:/<\\w+>/,greedy:!0,alias:\"symbol\"}});"
            ]
        },
        "prism-bison.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bison = Prism.languages.extend('c', {});",
                "",
                "Prism.languages.insertBefore('bison', 'comment', {",
                "\t'bison': {",
                "\t\t// This should match all the beginning of the file",
                "\t\t// including the prologue(s), the bison declarations and",
                "\t\t// the grammar rules.",
                "\t\tpattern: /^(?:[^%]|%(?!%))*%%[\\s\\S]*?%%/,",
                "\t\tinside: {",
                "\t\t\t'c': {",
                "\t\t\t\t// Allow for one level of nested braces",
                "\t\t\t\tpattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern: /^%?\\{|%?\\}$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'bison-variable': {",
                "\t\t\t\t\t\tpattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,",
                "\t\t\t\t\t\talias: 'variable',",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'punctuation': /<|>/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.c",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'comment': Prism.languages.c.comment,",
                "\t\t\t'string': Prism.languages.c.string,",
                "\t\t\t'property': /\\S+(?=:)/,",
                "\t\t\t'keyword': /%\\w+/,",
                "\t\t\t'number': {",
                "\t\t\t\tpattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /%[%?]|[|:;\\[\\]<>]/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-bison.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bison=Prism.languages.extend(\"c\",{}),Prism.languages.insertBefore(\"bison\",\"comment\",{bison:{pattern:/^(?:[^%]|%(?!%))*%%[\\s\\S]*?%%/,inside:{c:{pattern:/%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,inside:{delimiter:{pattern:/^%?\\{|%?\\}$/,alias:\"punctuation\"},\"bison-variable\":{pattern:/[$@](?:<[^\\s>]+>)?[\\w$]+/,alias:\"variable\",inside:{punctuation:/<|>/}},rest:Prism.languages.c}},comment:Prism.languages.c.comment,string:Prism.languages.c.string,property:/\\S+(?=:)/,keyword:/%\\w+/,number:{pattern:/(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,lookbehind:!0},punctuation:/%[%?]|[|:;\\[\\]<>]/}}});"
            ]
        },
        "prism-bnf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bnf = {",
                "\t'string': {",
                "\t\tpattern: /\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/",
                "\t},",
                "\t'definition': {",
                "\t\tpattern: /<[^<>\\r\\n\\t]+>(?=\\s*::=)/,",
                "\t\talias: ['rule', 'keyword'],",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^<|>$/",
                "\t\t}",
                "\t},",
                "\t'rule': {",
                "\t\tpattern: /<[^<>\\r\\n\\t]+>/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^<|>$/",
                "\t\t}",
                "\t},",
                "\t'operator': /::=|[|()[\\]{}*+?]|\\.{3}/",
                "};",
                "",
                "Prism.languages.rbnf = Prism.languages.bnf;"
            ]
        },
        "prism-bnf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bnf={string:{pattern:/\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/},definition:{pattern:/<[^<>\\r\\n\\t]+>(?=\\s*::=)/,alias:[\"rule\",\"keyword\"],inside:{punctuation:/^<|>$/}},rule:{pattern:/<[^<>\\r\\n\\t]+>/,inside:{punctuation:/^<|>$/}},operator:/::=|[|()[\\]{}*+?]|\\.{3}/},Prism.languages.rbnf=Prism.languages.bnf;"
            ]
        },
        "prism-brainfuck.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brainfuck = {",
                "\t'pointer': {",
                "\t\tpattern: /<|>/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'increment': {",
                "\t\tpattern: /\\+/,",
                "\t\talias: 'inserted'",
                "\t},",
                "\t'decrement': {",
                "\t\tpattern: /-/,",
                "\t\talias: 'deleted'",
                "\t},",
                "\t'branching': {",
                "\t\tpattern: /\\[|\\]/,",
                "\t\talias: 'important'",
                "\t},",
                "\t'operator': /[.,]/,",
                "\t'comment': /\\S+/",
                "};"
            ]
        },
        "prism-brainfuck.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brainfuck={pointer:{pattern:/<|>/,alias:\"keyword\"},increment:{pattern:/\\+/,alias:\"inserted\"},decrement:{pattern:/-/,alias:\"deleted\"},branching:{pattern:/\\[|\\]/,alias:\"important\"},operator:/[.,]/,comment:/\\S+/};"
            ]
        },
        "prism-brightscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brightscript = {",
                "\t'comment': /(?:\\brem|').*/i,",
                "\t'directive-statement': {",
                "\t\tpattern: /(^[\\t ]*)#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if).*/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t'error-message': {",
                "\t\t\t\tpattern: /(^#error).+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /^#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if)/,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t},",
                "\t\t\t'expression': {",
                "\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'property': {",
                "\t\tpattern: /([\\r\\n{,][\\t ]*)(?:(?!\\d)\\w+|\"(?:[^\"\\r\\n]|\"\")*\"(?!\"))(?=[ \\t]*:)/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\bAs[\\t ]+)\\w+/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'function': /\\b(?!\\d)\\w+(?=[\\t ]*\\()/i,",
                "\t'number': /(?:\\b\\d+(?:\\.\\d+)?(?:[ed][+-]\\d+)?|&h[a-f\\d]+)\\b[%&!#]?/i,",
                "\t'operator': /--|\\+\\+|>>=?|<<=?|<>|[-+*/\\\\<>]=?|[:^=?]|\\b(?:and|mod|not|or)\\b/i,",
                "\t'punctuation': /[.,;()[\\]{}]/,",
                "\t'constant': /\\b(?:LINE_NUM)\\b/i",
                "};",
                "",
                "Prism.languages.brightscript['directive-statement'].inside.expression.inside = Prism.languages.brightscript;"
            ]
        },
        "prism-brightscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brightscript={comment:/(?:\\brem|').*/i,\"directive-statement\":{pattern:/(^[\\t ]*)#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if).*/im,lookbehind:!0,alias:\"property\",inside:{\"error-message\":{pattern:/(^#error).+/,lookbehind:!0},directive:{pattern:/^#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if)/,alias:\"keyword\"},expression:{pattern:/[\\s\\S]+/,inside:null}}},property:{pattern:/([\\r\\n{,][\\t ]*)(?:(?!\\d)\\w+|\"(?:[^\"\\r\\n]|\"\")*\"(?!\"))(?=[ \\t]*:)/,lookbehind:!0,greedy:!0},string:{pattern:/\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,greedy:!0},\"class-name\":{pattern:/(\\bAs[\\t ]+)\\w+/i,lookbehind:!0},keyword:/\\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\\b/i,boolean:/\\b(?:true|false)\\b/i,function:/\\b(?!\\d)\\w+(?=[\\t ]*\\()/i,number:/(?:\\b\\d+(?:\\.\\d+)?(?:[ed][+-]\\d+)?|&h[a-f\\d]+)\\b[%&!#]?/i,operator:/--|\\+\\+|>>=?|<<=?|<>|[-+*/\\\\<>]=?|[:^=?]|\\b(?:and|mod|not|or)\\b/i,punctuation:/[.,;()[\\]{}]/,constant:/\\b(?:LINE_NUM)\\b/i},Prism.languages.brightscript[\"directive-statement\"].inside.expression.inside=Prism.languages.brightscript;"
            ]
        },
        "prism-bro.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bro = {",
                "",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\$])#.*/,",
                "\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'italic':  /\\b(?:TODO|FIXME|XXX)\\b/",
                "\t\t}",
                "\t},",
                "",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'boolean': /\\b[TF]\\b/,",
                "",
                "\t'function': {",
                "\t\tpattern: /(?:function|hook|event) \\w+(?:::\\w+)?/,",
                "\t\tinside: {",
                "\t\t\tkeyword: /^(?:function|hook|event)/",
                "\t\t}",
                "\t},",
                "",
                "\t'variable':\t{",
                "\t\tpattern: /(?:global|local) \\w+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /(?:global|local)/",
                "\t\t}",
                "\t},",
                "",
                "\t'builtin': /(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,",
                "",
                "\t'constant': {",
                "\t\tpattern: /const \\w+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /const/",
                "\t\t}",
                "\t},",
                "",
                "\t'keyword': /\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,",
                "",
                "\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,",
                "",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-bro.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bro={comment:{pattern:/(^|[^\\\\$])#.*/,lookbehind:!0,inside:{italic:/\\b(?:TODO|FIXME|XXX)\\b/}},string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},boolean:/\\b[TF]\\b/,function:{pattern:/(?:function|hook|event) \\w+(?:::\\w+)?/,inside:{keyword:/^(?:function|hook|event)/}},variable:{pattern:/(?:global|local) \\w+/i,inside:{keyword:/(?:global|local)/}},builtin:/(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,constant:{pattern:/const \\w+/i,inside:{keyword:/const/}},keyword:/\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-bsl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// 1C:Enterprise",
                "// https://github.com/Diversus23/",
                "//",
                "Prism.languages.bsl = {",
                "\t'comment': /\\/\\/.*/,",
                "\t'string': [",
                "\t\t// Строки",
                "\t\t// Strings",
                "\t\t{",
                "\t\t\tpattern: /\"(?:[^\"]|\"\")*\"(?!\")/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// Дата и время",
                "\t\t// Date & time",
                "\t\t{",
                "\t\t\tpattern: /'(?:[^'\\r\\n\\\\]|\\\\.)*'/",
                "\t\t}",
                "\t],",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\t// RU",
                "\t\t\tpattern: /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// EN",
                "\t\t\tpattern: /\\b(?:while|for|new|break|try|except|raise|else|endtry|undefined|function|var|return|endfunction|null|if|elseif|procedure|endprocedure|then|val|export|endif|in|each|true|false|to|do|enddo|execute)\\b/i",
                "\t\t}",
                "\t],",
                "\t'number': {",
                "\t\tpattern: /(^(?=\\d)|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': [",
                "\t\t/[<>+\\-*/]=?|[%=]/,",
                "\t\t// RU",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:и|или|не)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// EN",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:and|or|not)\\b/i",
                "\t\t}",
                "",
                "\t],",
                "\t'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.]/,",
                "\t'directive': [",
                "\t\t// Теги препроцессора вида &Клиент, &Сервер, ...",
                "\t\t// Preprocessor tags of the type &Client, &Server, ...",
                "\t\t{",
                "\t\t\tpattern: /^(\\s*)&.*/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t// Инструкции препроцессора вида:",
                "\t\t// #Если Сервер Тогда",
                "\t\t// ...",
                "\t\t// #КонецЕсли",
                "\t\t// Preprocessor instructions of the form:",
                "\t\t// #If Server Then",
                "\t\t// ...",
                "\t\t// #EndIf",
                "\t\t{",
                "\t\t\tpattern: /^\\s*#.*/gm,",
                "\t\t\talias: 'important'",
                "\t\t}",
                "\t]",
                "};",
                "",
                "Prism.languages.oscript = Prism.languages['bsl'];"
            ]
        },
        "prism-bsl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bsl={comment:/\\/\\/.*/,string:[{pattern:/\"(?:[^\"]|\"\")*\"(?!\")/,greedy:!0},{pattern:/'(?:[^'\\r\\n\\\\]|\\\\.)*'/}],keyword:[{pattern:/(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,lookbehind:!0},{pattern:/\\b(?:while|for|new|break|try|except|raise|else|endtry|undefined|function|var|return|endfunction|null|if|elseif|procedure|endprocedure|then|val|export|endif|in|each|true|false|to|do|enddo|execute)\\b/i}],number:{pattern:/(^(?=\\d)|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:E[+-]?\\d+)?/i,lookbehind:!0},operator:[/[<>+\\-*/]=?|[%=]/,{pattern:/(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:и|или|не)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1c80-\\u1c88\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,lookbehind:!0},{pattern:/\\b(?:and|or|not)\\b/i}],punctuation:/\\(\\.|\\.\\)|[()\\[\\]:;,.]/,directive:[{pattern:/^(\\s*)&.*/m,lookbehind:!0,alias:\"important\"},{pattern:/^\\s*#.*/gm,alias:\"important\"}]},Prism.languages.oscript=Prism.languages.bsl;"
            ]
        },
        "prism-c.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.c = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,",
                "\t'function': /[a-z_]\\w*(?=\\s*\\()/i,",
                "\t'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,",
                "\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/",
                "});",
                "",
                "Prism.languages.insertBefore('c', 'string', {",
                "\t'macro': {",
                "\t\t// allow for multiline macro definitions",
                "\t\t// spaces after the # character compile fine with gcc",
                "\t\tpattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t'string': [",
                "\t\t\t\t{",
                "\t\t\t\t\t// highlight the path of the include statement as a string",
                "\t\t\t\t\tpattern: /^(#\\s*include\\s*)<[^>]+>/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\tPrism.languages.c['string']",
                "\t\t\t],",
                "\t\t\t'comment': Prism.languages.c['comment'],",
                "\t\t\t'macro-name': [",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'function'",
                "\t\t\t\t}",
                "\t\t\t],",
                "\t\t\t// highlight macro directives as keywords",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /^(#\\s*)[a-z]+/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t},",
                "\t\t\t'directive-hash': /^#/,",
                "\t\t\t'punctuation': /##|\\\\(?=[\\r\\n])/,",
                "\t\t\t'expression': {",
                "\t\t\t\tpattern: /\\S[\\s\\S]*/,",
                "\t\t\t\tinside: Prism.languages.c",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t// highlight predefined macros as constants",
                "\t'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/",
                "});",
                "",
                "delete Prism.languages.c['boolean'];"
            ]
        },
        "prism-c.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.c=Prism.languages.extend(\"clike\",{comment:{pattern:/\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,greedy:!0},\"class-name\":{pattern:/(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,lookbehind:!0},keyword:/\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,function:/[a-z_]\\w*(?=\\s*\\()/i,number:/(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/}),Prism.languages.insertBefore(\"c\",\"string\",{macro:{pattern:/(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,greedy:!0,alias:\"property\",inside:{string:[{pattern:/^(#\\s*include\\s*)<[^>]+>/,lookbehind:!0},Prism.languages.c.string],comment:Prism.languages.c.comment,\"macro-name\":[{pattern:/(^#\\s*define\\s+)\\w+\\b(?!\\()/i,lookbehind:!0},{pattern:/(^#\\s*define\\s+)\\w+\\b(?=\\()/i,lookbehind:!0,alias:\"function\"}],directive:{pattern:/^(#\\s*)[a-z]+/,lookbehind:!0,alias:\"keyword\"},\"directive-hash\":/^#/,punctuation:/##|\\\\(?=[\\r\\n])/,expression:{pattern:/\\S[\\s\\S]*/,inside:Prism.languages.c}}},constant:/\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/}),delete Prism.languages.c.boolean;"
            ]
        },
        "prism-cil.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cil = {",
                "\t'comment': /\\/\\/.*/,",
                "",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'directive': {",
                "\t\tpattern: /(^|\\W)\\.[a-z]+(?=\\s)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'class-name'",
                "\t},",
                "",
                "\t// Actually an assembly reference",
                "\t'variable': /\\[[\\w\\.]+\\]/,",
                "",
                "",
                "\t'keyword': /\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|iant|idispatch|implements|import|initonly|instance|u?int(?:8|16|32|64)?|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,",
                "",
                "\t'function': /\\b(?:(?:constrained|unaligned|volatile|readonly|tail|no)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.[0-9]+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.[0-9]+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|ldvirtftn|castclass|beq(?:\\.s)?|mkrefany|localloc|ckfinite|rethrow|ldtoken|ldsflda|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\\b/,",
                "",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'number': /\\b-?(?:0x[0-9a-fA-F]+|[0-9]+)(?:\\.[0-9a-fA-F]+)?\\b/i,",
                "",
                "\t'punctuation': /[{}[\\];(),:=]|IL_[0-9A-Za-z]+/",
                "}"
            ]
        },
        "prism-cil.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cil={comment:/\\/\\/.*/,string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},directive:{pattern:/(^|\\W)\\.[a-z]+(?=\\s)/,lookbehind:!0,alias:\"class-name\"},variable:/\\[[\\w\\.]+\\]/,keyword:/\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|iant|idispatch|implements|import|initonly|instance|u?int(?:8|16|32|64)?|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,function:/\\b(?:(?:constrained|unaligned|volatile|readonly|tail|no)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.[0-9]+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.[0-9]+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|ldvirtftn|castclass|beq(?:\\.s)?|mkrefany|localloc|ckfinite|rethrow|ldtoken|ldsflda|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\\b/,boolean:/\\b(?:true|false)\\b/,number:/\\b-?(?:0x[0-9a-fA-F]+|[0-9]+)(?:\\.[0-9a-fA-F]+)?\\b/i,punctuation:/[{}[\\];(),:=]|IL_[0-9A-Za-z]+/};"
            ]
        },
        "prism-clike.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clike = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[.\\\\]/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-clike.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,boolean:/\\b(?:true|false)\\b/,function:/\\w+(?=\\()/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-clojure.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Copied from https://github.com/jeluard/prism-clojure",
                "Prism.languages.clojure = {",
                "\t'comment': /;.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'operator': /(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i, //used for symbols and keywords",
                "\t'keyword': {",
                "\t\tpattern: /([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'boolean': /\\b(?:true|false|nil)\\b/,",
                "\t'number': /\\b[\\da-f]+\\b/i,",
                "\t'punctuation': /[{}\\[\\](),]/",
                "};"
            ]
        },
        "prism-clojure.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clojure={comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},operator:/(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i,keyword:{pattern:/([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,lookbehind:!0},boolean:/\\b(?:true|false|nil)\\b/,number:/\\b[\\da-f]+\\b/i,punctuation:/[{}\\[\\](),]/};"
            ]
        },
        "prism-cmake.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cmake = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\${(?:[^{}$]|\\${[^{}$]*})*}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\${|}/,",
                "\t\t\t\t\t'variable': /\\w+/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'variable': /\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:CTEST_CUSTOM_(?:MAXIMUM_(?:(?:FAIL|PASS)ED_TEST_OUTPUT_SIZE|NUMBER_OF_(?:ERROR|WARNING)S)|ERROR_(?:P(?:OST|RE)_CONTEXT|EXCEPTION|MATCH)|P(?:OST|RE)_MEMCHECK|WARNING_(?:EXCEPTION|MATCH)|(?:MEMCHECK|TESTS)_IGNORE|P(?:OST|RE)_TEST|COVERAGE_EXCLUDE)|ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,",
                "\t'property': /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ARCHIVE_OUTPUT_NAME|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEBUG_POSTFIX|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,",
                "\t'keyword': /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,",
                "\t'boolean': /\\b(?:ON|OFF|TRUE|FALSE)\\b/,",
                "\t'namespace': /\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,",
                "\t'operator': /\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,",
                "\t'inserted': {",
                "\t\tpattern: /\\b\\w+::\\w+\\b/,",
                "\t\talias: 'class-name'",
                "\t},",
                "\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,",
                "\t'function': /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,",
                "\t'punctuation': /[()>}]|\\$[<{]/",
                "};"
            ]
        },
        "prism-cmake.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cmake={comment:/#.*/,string:{pattern:/\"(?:[^\\\\\"]|\\\\.)*\"/,greedy:!0,inside:{interpolation:{pattern:/\\${(?:[^{}$]|\\${[^{}$]*})*}/,inside:{punctuation:/\\${|}/,variable:/\\w+/}}}},variable:/\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:CTEST_CUSTOM_(?:MAXIMUM_(?:(?:FAIL|PASS)ED_TEST_OUTPUT_SIZE|NUMBER_OF_(?:ERROR|WARNING)S)|ERROR_(?:P(?:OST|RE)_CONTEXT|EXCEPTION|MATCH)|P(?:OST|RE)_MEMCHECK|WARNING_(?:EXCEPTION|MATCH)|(?:MEMCHECK|TESTS)_IGNORE|P(?:OST|RE)_TEST|COVERAGE_EXCLUDE)|ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,property:/\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ARCHIVE_OUTPUT_NAME|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEBUG_POSTFIX|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,keyword:/\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,boolean:/\\b(?:ON|OFF|TRUE|FALSE)\\b/,namespace:/\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,operator:/\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,inserted:{pattern:/\\b\\w+::\\w+\\b/,alias:\"class-name\"},number:/\\b\\d+(?:\\.\\d+)*\\b/,function:/\\b[a-z_]\\w*(?=\\s*\\()\\b/i,punctuation:/[()>}]|\\$[<{]/};"
            ]
        },
        "prism-coffeescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "// Ignore comments starting with { to privilege string interpolation highlighting",
                "var comment = /#(?!\\{).+/,",
                "    interpolation = {",
                "    \tpattern: /#\\{[^}]+\\}/,",
                "    \talias: 'variable'",
                "    };",
                "",
                "Prism.languages.coffeescript = Prism.languages.extend('javascript', {",
                "\t'comment': comment,",
                "\t'string': [",
                "",
                "\t\t// Strings are multiline",
                "\t\t{",
                "\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t{",
                "\t\t\t// Strings are multiline",
                "\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,",
                "\t'class-member': {",
                "\t\tpattern: /@(?!\\d)\\w+/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'comment', {",
                "\t'multiline-comment': {",
                "\t\tpattern: /###[\\s\\S]+?###/,",
                "\t\talias: 'comment'",
                "\t},",
                "",
                "\t// Block regexp can contain comments and interpolation",
                "\t'block-regex': {",
                "\t\tpattern: /\\/{3}[\\s\\S]*?\\/{3}/,",
                "\t\talias: 'regex',",
                "\t\tinside: {",
                "\t\t\t'comment': comment,",
                "\t\t\t'interpolation': interpolation",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'string', {",
                "\t'inline-javascript': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\t'script': {",
                "\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\talias: 'language-javascript',",
                "\t\t\t\tinside: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "",
                "\t// Block strings",
                "\t'multiline-string': [",
                "\t\t{",
                "\t\t\tpattern: /'''[\\s\\S]*?'''/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\tinterpolation: interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t]",
                "",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'keyword', {",
                "\t// Object property",
                "\t'property': /(?!\\d)\\w+(?=\\s*:(?!:))/",
                "});",
                "",
                "delete Prism.languages.coffeescript['template-string'];",
                "",
                "Prism.languages.coffee = Prism.languages.coffeescript;",
                "}(Prism));"
            ]
        },
        "prism-coffeescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=/#(?!\\{).+/,n={pattern:/#\\{[^}]+\\}/,alias:\"variable\"};e.languages.coffeescript=e.languages.extend(\"javascript\",{comment:t,string:[{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:!0},{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0,inside:{interpolation:n}}],keyword:/\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\"class-member\":{pattern:/@(?!\\d)\\w+/,alias:\"variable\"}}),e.languages.insertBefore(\"coffeescript\",\"comment\",{\"multiline-comment\":{pattern:/###[\\s\\S]+?###/,alias:\"comment\"},\"block-regex\":{pattern:/\\/{3}[\\s\\S]*?\\/{3}/,alias:\"regex\",inside:{comment:t,interpolation:n}}}),e.languages.insertBefore(\"coffeescript\",\"string\",{\"inline-javascript\":{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:\"punctuation\"},script:{pattern:/[\\s\\S]+/,alias:\"language-javascript\",inside:e.languages.javascript}}},\"multiline-string\":[{pattern:/'''[\\s\\S]*?'''/,greedy:!0,alias:\"string\"},{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\",inside:{interpolation:n}}]}),e.languages.insertBefore(\"coffeescript\",\"keyword\",{property:/(?!\\d)\\w+(?=\\s*:(?!:))/}),delete e.languages.coffeescript[\"template-string\"],e.languages.coffee=e.languages.coffeescript}(Prism);"
            ]
        },
        "prism-concurnas.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.concurnas = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'langext': {",
                "\t\tpattern: /\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,",
                "\t'punctuation': /[{}[\\];(),.:]/,",
                "\t'operator': /<==|>==|=>|->|<-|<>|\\^|&==|&<>|!|\\?|\\?:|\\.\\?|\\+\\+|--|[-+*/=<>]=?|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,",
                "\t'annotation': {",
                "\t\tpattern: /@(?:\\w+:)?(?:\\w*|\\[[^\\]]+\\])/,",
                "\t\talias: 'builtin'",
                "\t}",
                "};",
                "",
                "Prism.languages.insertBefore('concurnas', 'langext', {",
                "\t'string': {",
                "\t\tpattern: /[rs]?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*){(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: Prism.languages.concurnas",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.conc = Prism.languages.concurnas;"
            ]
        },
        "prism-concurnas.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.concurnas={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],langext:{pattern:/\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,greedy:!0,alias:\"string\"},function:{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,lookbehind:!0},keyword:/\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,boolean:/\\b(?:false|true)\\b/,number:/\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,punctuation:/[{}[\\];(),.:]/,operator:/<==|>==|=>|->|<-|<>|\\^|&==|&<>|!|\\?|\\?:|\\.\\?|\\+\\+|--|[-+*/=<>]=?|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,annotation:{pattern:/@(?:\\w+:)?(?:\\w*|\\[[^\\]]+\\])/,alias:\"builtin\"}},Prism.languages.insertBefore(\"concurnas\",\"langext\",{string:{pattern:/[rs]?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*){(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:Prism.languages.concurnas},string:/[\\s\\S]+/}}}),Prism.languages.conc=Prism.languages.concurnas;"
            ]
        },
        "prism-core.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/// <reference lib=\"WebWorker\"/>",
                "",
                "var _self = (typeof window !== 'undefined')",
                "\t? window   // if in browser",
                "\t: (",
                "\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)",
                "\t\t? self // if in worker",
                "\t\t: {}   // if in node js",
                "\t);",
                "",
                "/**",
                " * Prism: Lightweight, robust, elegant syntax highlighting",
                " *",
                " * @license MIT <https://opensource.org/licenses/MIT>",
                " * @author Lea Verou <https://lea.verou.me>",
                " * @namespace",
                " * @public",
                " */",
                "var Prism = (function (_self){",
                "",
                "// Private helper vars",
                "var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
                "var uniqueId = 0;",
                "",
                "",
                "var _ = {",
                "\t/**",
                "\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the",
                "\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load",
                "\t * additional languages or plugins yourself.",
                "\t *",
                "\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.",
                "\t *",
                "\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an",
                "\t * empty Prism object into the global scope before loading the Prism script like this:",
                "\t *",
                "\t * ```js",
                "\t * window.Prism = window.Prism || {};",
                "\t * Prism.manual = true;",
                "\t * // add a new <script> to load Prism's script",
                "\t * ```",
                "\t *",
                "\t * @default false",
                "\t * @type {boolean}",
                "\t * @memberof Prism",
                "\t * @public",
                "\t */",
                "\tmanual: _self.Prism && _self.Prism.manual,",
                "\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,",
                "",
                "\t/**",
                "\t * A namespace for utility methods.",
                "\t *",
                "\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may",
                "\t * change or disappear at any time.",
                "\t *",
                "\t * @namespace",
                "\t * @memberof Prism",
                "\t */",
                "\tutil: {",
                "\t\tencode: function encode(tokens) {",
                "\t\t\tif (tokens instanceof Token) {",
                "\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);",
                "\t\t\t} else if (Array.isArray(tokens)) {",
                "\t\t\t\treturn tokens.map(encode);",
                "\t\t\t} else {",
                "\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Returns the name of the type of the given value.",
                "\t\t *",
                "\t\t * @param {any} o",
                "\t\t * @returns {string}",
                "\t\t * @example",
                "\t\t * type(null)      === 'Null'",
                "\t\t * type(undefined) === 'Undefined'",
                "\t\t * type(123)       === 'Number'",
                "\t\t * type('foo')     === 'String'",
                "\t\t * type(true)      === 'Boolean'",
                "\t\t * type([1, 2])    === 'Array'",
                "\t\t * type({})        === 'Object'",
                "\t\t * type(String)    === 'Function'",
                "\t\t * type(/abc+/)    === 'RegExp'",
                "\t\t */",
                "\t\ttype: function (o) {",
                "\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Returns a unique number for the given object. Later calls will still return the same number.",
                "\t\t *",
                "\t\t * @param {Object} obj",
                "\t\t * @returns {number}",
                "\t\t */",
                "\t\tobjId: function (obj) {",
                "\t\t\tif (!obj['__id']) {",
                "\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });",
                "\t\t\t}",
                "\t\t\treturn obj['__id'];",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Creates a deep clone of the given object.",
                "\t\t *",
                "\t\t * The main intended use of this function is to clone language definitions.",
                "\t\t *",
                "\t\t * @param {T} o",
                "\t\t * @param {Record<number, any>} [visited]",
                "\t\t * @returns {T}",
                "\t\t * @template T",
                "\t\t */",
                "\t\tclone: function deepClone(o, visited) {",
                "\t\t\tvisited = visited || {};",
                "",
                "\t\t\tvar clone, id;",
                "\t\t\tswitch (_.util.type(o)) {",
                "\t\t\t\tcase 'Object':",
                "\t\t\t\t\tid = _.util.objId(o);",
                "\t\t\t\t\tif (visited[id]) {",
                "\t\t\t\t\t\treturn visited[id];",
                "\t\t\t\t\t}",
                "\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});",
                "\t\t\t\t\tvisited[id] = clone;",
                "",
                "\t\t\t\t\tfor (var key in o) {",
                "\t\t\t\t\t\tif (o.hasOwnProperty(key)) {",
                "\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\treturn /** @type {any} */ (clone);",
                "",
                "\t\t\t\tcase 'Array':",
                "\t\t\t\t\tid = _.util.objId(o);",
                "\t\t\t\t\tif (visited[id]) {",
                "\t\t\t\t\t\treturn visited[id];",
                "\t\t\t\t\t}",
                "\t\t\t\t\tclone = [];",
                "\t\t\t\t\tvisited[id] = clone;",
                "",
                "\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {",
                "\t\t\t\t\t\tclone[i] = deepClone(v, visited);",
                "\t\t\t\t\t});",
                "",
                "\t\t\t\t\treturn /** @type {any} */ (clone);",
                "",
                "\t\t\t\tdefault:",
                "\t\t\t\t\treturn o;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.",
                "\t\t *",
                "\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.",
                "\t\t *",
                "\t\t * @param {Element} element",
                "\t\t * @returns {string}",
                "\t\t */",
                "\t\tgetLanguage: function (element) {",
                "\t\t\twhile (element && !lang.test(element.className)) {",
                "\t\t\t\telement = element.parentElement;",
                "\t\t\t}",
                "\t\t\tif (element) {",
                "\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();",
                "\t\t\t}",
                "\t\t\treturn 'none';",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Returns the script element that is currently executing.",
                "\t\t *",
                "\t\t * This does __not__ work for line script element.",
                "\t\t *",
                "\t\t * @returns {HTMLScriptElement | null}",
                "\t\t */",
                "\t\tcurrentScript: function () {",
                "\t\t\tif (typeof document === 'undefined') {",
                "\t\t\t\treturn null;",
                "\t\t\t}",
                "\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {",
                "\t\t\t\treturn /** @type {any} */ (document.currentScript);",
                "\t\t\t}",
                "",
                "\t\t\t// IE11 workaround",
                "\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace",
                "\t\t\t// this will not work for inline scripts",
                "",
                "\t\t\ttry {",
                "\t\t\t\tthrow new Error();",
                "\t\t\t} catch (err) {",
                "\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.",
                "\t\t\t\t// A stack will look like this:",
                "\t\t\t\t//",
                "\t\t\t\t// Error",
                "\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)",
                "\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)",
                "",
                "\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(err.stack) || [])[1];",
                "\t\t\t\tif (src) {",
                "\t\t\t\t\tvar scripts = document.getElementsByTagName('script');",
                "\t\t\t\t\tfor (var i in scripts) {",
                "\t\t\t\t\t\tif (scripts[i].src == src) {",
                "\t\t\t\t\t\t\treturn scripts[i];",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t\treturn null;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Returns whether a given class is active for `element`.",
                "\t\t *",
                "\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated",
                "\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the",
                "\t\t * given class is just the given class with a `no-` prefix.",
                "\t\t *",
                "\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is",
                "\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its",
                "\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.",
                "\t\t *",
                "\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated",
                "\t\t * version of it, the class is considered active.",
                "\t\t *",
                "\t\t * @param {Element} element",
                "\t\t * @param {string} className",
                "\t\t * @param {boolean} [defaultActivation=false]",
                "\t\t * @returns {boolean}",
                "\t\t */",
                "\t\tisActive: function (element, className, defaultActivation) {",
                "\t\t\tvar no = 'no-' + className;",
                "",
                "\t\t\twhile (element) {",
                "\t\t\t\tvar classList = element.classList;",
                "\t\t\t\tif (classList.contains(className)) {",
                "\t\t\t\t\treturn true;",
                "\t\t\t\t}",
                "\t\t\t\tif (classList.contains(no)) {",
                "\t\t\t\t\treturn false;",
                "\t\t\t\t}",
                "\t\t\t\telement = element.parentElement;",
                "\t\t\t}",
                "\t\t\treturn !!defaultActivation;",
                "\t\t}",
                "\t},",
                "",
                "\t/**",
                "\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.",
                "\t *",
                "\t * @namespace",
                "\t * @memberof Prism",
                "\t * @public",
                "\t */",
                "\tlanguages: {",
                "\t\t/**",
                "\t\t * Creates a deep copy of the language with the given id and appends the given tokens.",
                "\t\t *",
                "\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language",
                "\t\t * will be overwritten at its original position.",
                "\t\t *",
                "\t\t * ## Best practices",
                "\t\t *",
                "\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)",
                "\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to",
                "\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.",
                "\t\t *",
                "\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.",
                "\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.",
                "\t\t *",
                "\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.",
                "\t\t * @param {Grammar} redef The new tokens to append.",
                "\t\t * @returns {Grammar} The new language created.",
                "\t\t * @public",
                "\t\t * @example",
                "\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {",
                "\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token",
                "\t\t *     // at its original position",
                "\t\t *     'comment': { ... },",
                "\t\t *     // CSS doesn't have a 'color' token, so this token will be appended",
                "\t\t *     'color': /\\b(?:red|green|blue)\\b/",
                "\t\t * });",
                "\t\t */",
                "\t\textend: function (id, redef) {",
                "\t\t\tvar lang = _.util.clone(_.languages[id]);",
                "",
                "\t\t\tfor (var key in redef) {",
                "\t\t\t\tlang[key] = redef[key];",
                "\t\t\t}",
                "",
                "\t\t\treturn lang;",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.",
                "\t\t *",
                "\t\t * ## Usage",
                "\t\t *",
                "\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition",
                "\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded",
                "\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the",
                "\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do",
                "\t\t * this:",
                "\t\t *",
                "\t\t * ```js",
                "\t\t * Prism.languages.markup.style = {",
                "\t\t *     // token",
                "\t\t * };",
                "\t\t * ```",
                "\t\t *",
                "\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens",
                "\t\t * before existing tokens. For the CSS example above, you would use it like this:",
                "\t\t *",
                "\t\t * ```js",
                "\t\t * Prism.languages.insertBefore('markup', 'cdata', {",
                "\t\t *     'style': {",
                "\t\t *         // token",
                "\t\t *     }",
                "\t\t * });",
                "\t\t * ```",
                "\t\t *",
                "\t\t * ## Special cases",
                "\t\t *",
                "\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar",
                "\t\t * will be ignored.",
                "\t\t *",
                "\t\t * This behavior can be used to insert tokens after `before`:",
                "\t\t *",
                "\t\t * ```js",
                "\t\t * Prism.languages.insertBefore('markup', 'comment', {",
                "\t\t *     'comment': Prism.languages.markup.comment,",
                "\t\t *     // tokens after 'comment'",
                "\t\t * });",
                "\t\t * ```",
                "\t\t *",
                "\t\t * ## Limitations",
                "\t\t *",
                "\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object",
                "\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave",
                "\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily",
                "\t\t * deleting properties which is necessary to insert at arbitrary positions.",
                "\t\t *",
                "\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.",
                "\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This",
                "\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.",
                "\t\t *",
                "\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if",
                "\t\t * you hold the target object in a variable, then the value of the variable will not change.",
                "\t\t *",
                "\t\t * ```js",
                "\t\t * var oldMarkup = Prism.languages.markup;",
                "\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });",
                "\t\t *",
                "\t\t * assert(oldMarkup !== Prism.languages.markup);",
                "\t\t * assert(newMarkup === Prism.languages.markup);",
                "\t\t * ```",
                "\t\t *",
                "\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the",
                "\t\t * object to be modified.",
                "\t\t * @param {string} before The key to insert before.",
                "\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.",
                "\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the",
                "\t\t * object to be modified.",
                "\t\t *",
                "\t\t * Defaults to `Prism.languages`.",
                "\t\t * @returns {Grammar} The new grammar object.",
                "\t\t * @public",
                "\t\t */",
                "\t\tinsertBefore: function (inside, before, insert, root) {",
                "\t\t\troot = root || /** @type {any} */ (_.languages);",
                "\t\t\tvar grammar = root[inside];",
                "\t\t\t/** @type {Grammar} */",
                "\t\t\tvar ret = {};",
                "",
                "\t\t\tfor (var token in grammar) {",
                "\t\t\t\tif (grammar.hasOwnProperty(token)) {",
                "",
                "\t\t\t\t\tif (token == before) {",
                "\t\t\t\t\t\tfor (var newToken in insert) {",
                "\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
                "\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\t// Do not insert token which also occur in insert. See #1525",
                "\t\t\t\t\tif (!insert.hasOwnProperty(token)) {",
                "\t\t\t\t\t\tret[token] = grammar[token];",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t\tvar old = root[inside];",
                "\t\t\troot[inside] = ret;",
                "",
                "\t\t\t// Update references in other language definitions",
                "\t\t\t_.languages.DFS(_.languages, function(key, value) {",
                "\t\t\t\tif (value === old && key != inside) {",
                "\t\t\t\t\tthis[key] = ret;",
                "\t\t\t\t}",
                "\t\t\t});",
                "",
                "\t\t\treturn ret;",
                "\t\t},",
                "",
                "\t\t// Traverse a language definition with Depth First Search",
                "\t\tDFS: function DFS(o, callback, type, visited) {",
                "\t\t\tvisited = visited || {};",
                "",
                "\t\t\tvar objId = _.util.objId;",
                "",
                "\t\t\tfor (var i in o) {",
                "\t\t\t\tif (o.hasOwnProperty(i)) {",
                "\t\t\t\t\tcallback.call(o, i, o[i], type || i);",
                "",
                "\t\t\t\t\tvar property = o[i],",
                "\t\t\t\t\t    propertyType = _.util.type(property);",
                "",
                "\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {",
                "\t\t\t\t\t\tvisited[objId(property)] = true;",
                "\t\t\t\t\t\tDFS(property, callback, null, visited);",
                "\t\t\t\t\t}",
                "\t\t\t\t\telse if (propertyType === 'Array' && !visited[objId(property)]) {",
                "\t\t\t\t\t\tvisited[objId(property)] = true;",
                "\t\t\t\t\t\tDFS(property, callback, i, visited);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "",
                "\tplugins: {},",
                "",
                "\t/**",
                "\t * This is the most high-level function in Prism’s API.",
                "\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on",
                "\t * each one of them.",
                "\t *",
                "\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.",
                "\t *",
                "\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.",
                "\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.",
                "\t * @memberof Prism",
                "\t * @public",
                "\t */",
                "\thighlightAll: function(async, callback) {",
                "\t\t_.highlightAllUnder(document, async, callback);",
                "\t},",
                "",
                "\t/**",
                "\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls",
                "\t * {@link Prism.highlightElement} on each one of them.",
                "\t *",
                "\t * The following hooks will be run:",
                "\t * 1. `before-highlightall`",
                "\t * 2. `before-all-elements-highlight`",
                "\t * 3. All hooks of {@link Prism.highlightElement} for each element.",
                "\t *",
                "\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.",
                "\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.",
                "\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.",
                "\t * @memberof Prism",
                "\t * @public",
                "\t */",
                "\thighlightAllUnder: function(container, async, callback) {",
                "\t\tvar env = {",
                "\t\t\tcallback: callback,",
                "\t\t\tcontainer: container,",
                "\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'",
                "\t\t};",
                "",
                "\t\t_.hooks.run('before-highlightall', env);",
                "",
                "\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));",
                "",
                "\t\t_.hooks.run('before-all-elements-highlight', env);",
                "",
                "\t\tfor (var i = 0, element; element = env.elements[i++];) {",
                "\t\t\t_.highlightElement(element, async === true, env.callback);",
                "\t\t}",
                "\t},",
                "",
                "\t/**",
                "\t * Highlights the code inside a single element.",
                "\t *",
                "\t * The following hooks will be run:",
                "\t * 1. `before-sanity-check`",
                "\t * 2. `before-highlight`",
                "\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.",
                "\t * 4. `before-insert`",
                "\t * 5. `after-highlight`",
                "\t * 6. `complete`",
                "\t *",
                "\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for",
                "\t * the element's language.",
                "\t *",
                "\t * @param {Element} element The element containing the code.",
                "\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.",
                "\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers",
                "\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is",
                "\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).",
                "\t *",
                "\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for",
                "\t * asynchronous highlighting to work. You can build your own bundle on the",
                "\t * [Download page](https://prismjs.com/download.html).",
                "\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.",
                "\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.",
                "\t * @memberof Prism",
                "\t * @public",
                "\t */",
                "\thighlightElement: function(element, async, callback) {",
                "\t\t// Find language",
                "\t\tvar language = _.util.getLanguage(element);",
                "\t\tvar grammar = _.languages[language];",
                "",
                "\t\t// Set language on the element, if not present",
                "\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
                "",
                "\t\t// Set language on the parent, for styling",
                "\t\tvar parent = element.parentElement;",
                "\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {",
                "\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
                "\t\t}",
                "",
                "\t\tvar code = element.textContent;",
                "",
                "\t\tvar env = {",
                "\t\t\telement: element,",
                "\t\t\tlanguage: language,",
                "\t\t\tgrammar: grammar,",
                "\t\t\tcode: code",
                "\t\t};",
                "",
                "\t\tfunction insertHighlightedCode(highlightedCode) {",
                "\t\t\tenv.highlightedCode = highlightedCode;",
                "",
                "\t\t\t_.hooks.run('before-insert', env);",
                "",
                "\t\t\tenv.element.innerHTML = env.highlightedCode;",
                "",
                "\t\t\t_.hooks.run('after-highlight', env);",
                "\t\t\t_.hooks.run('complete', env);",
                "\t\t\tcallback && callback.call(env.element);",
                "\t\t}",
                "",
                "\t\t_.hooks.run('before-sanity-check', env);",
                "",
                "\t\tif (!env.code) {",
                "\t\t\t_.hooks.run('complete', env);",
                "\t\t\tcallback && callback.call(env.element);",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\t_.hooks.run('before-highlight', env);",
                "",
                "\t\tif (!env.grammar) {",
                "\t\t\tinsertHighlightedCode(_.util.encode(env.code));",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tif (async && _self.Worker) {",
                "\t\t\tvar worker = new Worker(_.filename);",
                "",
                "\t\t\tworker.onmessage = function(evt) {",
                "\t\t\t\tinsertHighlightedCode(evt.data);",
                "\t\t\t};",
                "",
                "\t\t\tworker.postMessage(JSON.stringify({",
                "\t\t\t\tlanguage: env.language,",
                "\t\t\t\tcode: env.code,",
                "\t\t\t\timmediateClose: true",
                "\t\t\t}));",
                "\t\t}",
                "\t\telse {",
                "\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));",
                "\t\t}",
                "\t},",
                "",
                "\t/**",
                "\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input",
                "\t * and the language definitions to use, and returns a string with the HTML produced.",
                "\t *",
                "\t * The following hooks will be run:",
                "\t * 1. `before-tokenize`",
                "\t * 2. `after-tokenize`",
                "\t * 3. `wrap`: On each {@link Token}.",
                "\t *",
                "\t * @param {string} text A string with the code to be highlighted.",
                "\t * @param {Grammar} grammar An object containing the tokens to use.",
                "\t *",
                "\t * Usually a language definition like `Prism.languages.markup`.",
                "\t * @param {string} language The name of the language definition passed to `grammar`.",
                "\t * @returns {string} The highlighted HTML.",
                "\t * @memberof Prism",
                "\t * @public",
                "\t * @example",
                "\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');",
                "\t */",
                "\thighlight: function (text, grammar, language) {",
                "\t\tvar env = {",
                "\t\t\tcode: text,",
                "\t\t\tgrammar: grammar,",
                "\t\t\tlanguage: language",
                "\t\t};",
                "\t\t_.hooks.run('before-tokenize', env);",
                "\t\tenv.tokens = _.tokenize(env.code, env.grammar);",
                "\t\t_.hooks.run('after-tokenize', env);",
                "\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);",
                "\t},",
                "",
                "\t/**",
                "\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input",
                "\t * and the language definitions to use, and returns an array with the tokenized code.",
                "\t *",
                "\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.",
                "\t *",
                "\t * This method could be useful in other contexts as well, as a very crude parser.",
                "\t *",
                "\t * @param {string} text A string with the code to be highlighted.",
                "\t * @param {Grammar} grammar An object containing the tokens to use.",
                "\t *",
                "\t * Usually a language definition like `Prism.languages.markup`.",
                "\t * @returns {TokenStream} An array of strings and tokens, a token stream.",
                "\t * @memberof Prism",
                "\t * @public",
                "\t * @example",
                "\t * let code = `var foo = 0;`;",
                "\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);",
                "\t * tokens.forEach(token => {",
                "\t *     if (token instanceof Prism.Token && token.type === 'number') {",
                "\t *         console.log(`Found numeric literal: ${token.content}`);",
                "\t *     }",
                "\t * });",
                "\t */",
                "\ttokenize: function(text, grammar) {",
                "\t\tvar rest = grammar.rest;",
                "\t\tif (rest) {",
                "\t\t\tfor (var token in rest) {",
                "\t\t\t\tgrammar[token] = rest[token];",
                "\t\t\t}",
                "",
                "\t\t\tdelete grammar.rest;",
                "\t\t}",
                "",
                "\t\tvar tokenList = new LinkedList();",
                "\t\taddAfter(tokenList, tokenList.head, text);",
                "",
                "\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);",
                "",
                "\t\treturn toArray(tokenList);",
                "\t},",
                "",
                "\t/**",
                "\t * @namespace",
                "\t * @memberof Prism",
                "\t * @public",
                "\t */",
                "\thooks: {",
                "\t\tall: {},",
                "",
                "\t\t/**",
                "\t\t * Adds the given callback to the list of callbacks for the given hook.",
                "\t\t *",
                "\t\t * The callback will be invoked when the hook it is registered for is run.",
                "\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.",
                "\t\t *",
                "\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.",
                "\t\t *",
                "\t\t * @param {string} name The name of the hook.",
                "\t\t * @param {HookCallback} callback The callback function which is given environment variables.",
                "\t\t * @public",
                "\t\t */",
                "\t\tadd: function (name, callback) {",
                "\t\t\tvar hooks = _.hooks.all;",
                "",
                "\t\t\thooks[name] = hooks[name] || [];",
                "",
                "\t\t\thooks[name].push(callback);",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Runs a hook invoking all registered callbacks with the given environment variables.",
                "\t\t *",
                "\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.",
                "\t\t *",
                "\t\t * @param {string} name The name of the hook.",
                "\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.",
                "\t\t * @public",
                "\t\t */",
                "\t\trun: function (name, env) {",
                "\t\t\tvar callbacks = _.hooks.all[name];",
                "",
                "\t\t\tif (!callbacks || !callbacks.length) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {",
                "\t\t\t\tcallback(env);",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "",
                "\tToken: Token",
                "};",
                "_self.Prism = _;",
                "",
                "",
                "// Typescript note:",
                "// The following can be used to import the Token type in JSDoc:",
                "//",
                "//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token",
                "",
                "/**",
                " * Creates a new token.",
                " *",
                " * @param {string} type See {@link Token#type type}",
                " * @param {string | TokenStream} content See {@link Token#content content}",
                " * @param {string|string[]} [alias] The alias(es) of the token.",
                " * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.",
                " * @class",
                " * @global",
                " * @public",
                " */",
                "function Token(type, content, alias, matchedStr) {",
                "\t/**",
                "\t * The type of the token.",
                "\t *",
                "\t * This is usually the key of a pattern in a {@link Grammar}.",
                "\t *",
                "\t * @type {string}",
                "\t * @see GrammarToken",
                "\t * @public",
                "\t */",
                "\tthis.type = type;",
                "\t/**",
                "\t * The strings or tokens contained by this token.",
                "\t *",
                "\t * This will be a token stream if the pattern matched also defined an `inside` grammar.",
                "\t *",
                "\t * @type {string | TokenStream}",
                "\t * @public",
                "\t */",
                "\tthis.content = content;",
                "\t/**",
                "\t * The alias(es) of the token.",
                "\t *",
                "\t * @type {string|string[]}",
                "\t * @see GrammarToken",
                "\t * @public",
                "\t */",
                "\tthis.alias = alias;",
                "\t// Copy of the full string this token was created from",
                "\tthis.length = (matchedStr || '').length | 0;",
                "}",
                "",
                "/**",
                " * A token stream is an array of strings and {@link Token Token} objects.",
                " *",
                " * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process",
                " * them.",
                " *",
                " * 1. No adjacent strings.",
                " * 2. No empty strings.",
                " *",
                " *    The only exception here is the token stream that only contains the empty string and nothing else.",
                " *",
                " * @typedef {Array<string | Token>} TokenStream",
                " * @global",
                " * @public",
                " */",
                "",
                "/**",
                " * Converts the given token or token stream to an HTML representation.",
                " *",
                " * The following hooks will be run:",
                " * 1. `wrap`: On each {@link Token}.",
                " *",
                " * @param {string | Token | TokenStream} o The token or token stream to be converted.",
                " * @param {string} language The name of current language.",
                " * @returns {string} The HTML representation of the token or token stream.",
                " * @memberof Token",
                " * @static",
                " */",
                "Token.stringify = function stringify(o, language) {",
                "\tif (typeof o == 'string') {",
                "\t\treturn o;",
                "\t}",
                "\tif (Array.isArray(o)) {",
                "\t\tvar s = '';",
                "\t\to.forEach(function (e) {",
                "\t\t\ts += stringify(e, language);",
                "\t\t});",
                "\t\treturn s;",
                "\t}",
                "",
                "\tvar env = {",
                "\t\ttype: o.type,",
                "\t\tcontent: stringify(o.content, language),",
                "\t\ttag: 'span',",
                "\t\tclasses: ['token', o.type],",
                "\t\tattributes: {},",
                "\t\tlanguage: language",
                "\t};",
                "",
                "\tvar aliases = o.alias;",
                "\tif (aliases) {",
                "\t\tif (Array.isArray(aliases)) {",
                "\t\t\tArray.prototype.push.apply(env.classes, aliases);",
                "\t\t} else {",
                "\t\t\tenv.classes.push(aliases);",
                "\t\t}",
                "\t}",
                "",
                "\t_.hooks.run('wrap', env);",
                "",
                "\tvar attributes = '';",
                "\tfor (var name in env.attributes) {",
                "\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';",
                "\t}",
                "",
                "\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';",
                "};",
                "",
                "/**",
                " * @param {RegExp} pattern",
                " * @param {number} pos",
                " * @param {string} text",
                " * @param {boolean} lookbehind",
                " * @returns {RegExpExecArray | null}",
                " */",
                "function matchPattern(pattern, pos, text, lookbehind) {",
                "\tpattern.lastIndex = pos;",
                "\tvar match = pattern.exec(text);",
                "\tif (match && lookbehind && match[1]) {",
                "\t\t// change the match to remove the text matched by the Prism lookbehind group",
                "\t\tvar lookbehindLength = match[1].length;",
                "\t\tmatch.index += lookbehindLength;",
                "\t\tmatch[0] = match[0].slice(lookbehindLength);",
                "\t}",
                "\treturn match;",
                "}",
                "",
                "/**",
                " * @param {string} text",
                " * @param {LinkedList<string | Token>} tokenList",
                " * @param {any} grammar",
                " * @param {LinkedListNode<string | Token>} startNode",
                " * @param {number} startPos",
                " * @param {RematchOptions} [rematch]",
                " * @returns {void}",
                " * @private",
                " *",
                " * @typedef RematchOptions",
                " * @property {string} cause",
                " * @property {number} reach",
                " */",
                "function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {",
                "\tfor (var token in grammar) {",
                "\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {",
                "\t\t\tcontinue;",
                "\t\t}",
                "",
                "\t\tvar patterns = grammar[token];",
                "\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];",
                "",
                "\t\tfor (var j = 0; j < patterns.length; ++j) {",
                "\t\t\tif (rematch && rematch.cause == token + ',' + j) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tvar patternObj = patterns[j],",
                "\t\t\t\tinside = patternObj.inside,",
                "\t\t\t\tlookbehind = !!patternObj.lookbehind,",
                "\t\t\t\tgreedy = !!patternObj.greedy,",
                "\t\t\t\talias = patternObj.alias;",
                "",
                "\t\t\tif (greedy && !patternObj.pattern.global) {",
                "\t\t\t\t// Without the global flag, lastIndex won't work",
                "\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];",
                "\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');",
                "\t\t\t}",
                "",
                "\t\t\t/** @type {RegExp} */",
                "\t\t\tvar pattern = patternObj.pattern || patternObj;",
                "",
                "\t\t\tfor ( // iterate the token list and keep track of the current token/string position",
                "\t\t\t\tvar currentNode = startNode.next, pos = startPos;",
                "\t\t\t\tcurrentNode !== tokenList.tail;",
                "\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next",
                "\t\t\t) {",
                "",
                "\t\t\t\tif (rematch && pos >= rematch.reach) {",
                "\t\t\t\t\tbreak;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar str = currentNode.value;",
                "",
                "\t\t\t\tif (tokenList.length > text.length) {",
                "\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!",
                "\t\t\t\t\treturn;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tif (str instanceof Token) {",
                "\t\t\t\t\tcontinue;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween",
                "\t\t\t\tvar match;",
                "",
                "\t\t\t\tif (greedy) {",
                "\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);",
                "\t\t\t\t\tif (!match) {",
                "\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tvar from = match.index;",
                "\t\t\t\t\tvar to = match.index + match[0].length;",
                "\t\t\t\t\tvar p = pos;",
                "",
                "\t\t\t\t\t// find the node that contains the match",
                "\t\t\t\t\tp += currentNode.value.length;",
                "\t\t\t\t\twhile (from >= p) {",
                "\t\t\t\t\t\tcurrentNode = currentNode.next;",
                "\t\t\t\t\t\tp += currentNode.value.length;",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// adjust pos (and p)",
                "\t\t\t\t\tp -= currentNode.value.length;",
                "\t\t\t\t\tpos = p;",
                "",
                "\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid",
                "\t\t\t\t\tif (currentNode.value instanceof Token) {",
                "\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\t// find the last node which is affected by this match",
                "\t\t\t\t\tfor (",
                "\t\t\t\t\t\tvar k = currentNode;",
                "\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');",
                "\t\t\t\t\t\tk = k.next",
                "\t\t\t\t\t) {",
                "\t\t\t\t\t\tremoveCount++;",
                "\t\t\t\t\t\tp += k.value.length;",
                "\t\t\t\t\t}",
                "\t\t\t\t\tremoveCount--;",
                "",
                "\t\t\t\t\t// replace with the new match",
                "\t\t\t\t\tstr = text.slice(pos, p);",
                "\t\t\t\t\tmatch.index -= pos;",
                "\t\t\t\t} else {",
                "\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);",
                "\t\t\t\t\tif (!match) {",
                "\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar from = match.index,",
                "\t\t\t\t\tmatchStr = match[0],",
                "\t\t\t\t\tbefore = str.slice(0, from),",
                "\t\t\t\t\tafter = str.slice(from + matchStr.length);",
                "",
                "\t\t\t\tvar reach = pos + str.length;",
                "\t\t\t\tif (rematch && reach > rematch.reach) {",
                "\t\t\t\t\trematch.reach = reach;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar removeFrom = currentNode.prev;",
                "",
                "\t\t\t\tif (before) {",
                "\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);",
                "\t\t\t\t\tpos += before.length;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);",
                "",
                "\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);",
                "\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);",
                "",
                "\t\t\t\tif (after) {",
                "\t\t\t\t\taddAfter(tokenList, currentNode, after);",
                "\t\t\t\t}",
                "",
                "\t\t\t\tif (removeCount > 1) {",
                "\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching",
                "\t\t\t\t\t// this can only happen if the current pattern is greedy",
                "\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, {",
                "\t\t\t\t\t\tcause: token + ',' + j,",
                "\t\t\t\t\t\treach: reach",
                "\t\t\t\t\t});",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "}",
                "",
                "/**",
                " * @typedef LinkedListNode",
                " * @property {T} value",
                " * @property {LinkedListNode<T> | null} prev The previous node.",
                " * @property {LinkedListNode<T> | null} next The next node.",
                " * @template T",
                " * @private",
                " */",
                "",
                "/**",
                " * @template T",
                " * @private",
                " */",
                "function LinkedList() {",
                "\t/** @type {LinkedListNode<T>} */",
                "\tvar head = { value: null, prev: null, next: null };",
                "\t/** @type {LinkedListNode<T>} */",
                "\tvar tail = { value: null, prev: head, next: null };",
                "\thead.next = tail;",
                "",
                "\t/** @type {LinkedListNode<T>} */",
                "\tthis.head = head;",
                "\t/** @type {LinkedListNode<T>} */",
                "\tthis.tail = tail;",
                "\tthis.length = 0;",
                "}",
                "",
                "/**",
                " * Adds a new node with the given value to the list.",
                " * @param {LinkedList<T>} list",
                " * @param {LinkedListNode<T>} node",
                " * @param {T} value",
                " * @returns {LinkedListNode<T>} The added node.",
                " * @template T",
                " */",
                "function addAfter(list, node, value) {",
                "\t// assumes that node != list.tail && values.length >= 0",
                "\tvar next = node.next;",
                "",
                "\tvar newNode = { value: value, prev: node, next: next };",
                "\tnode.next = newNode;",
                "\tnext.prev = newNode;",
                "\tlist.length++;",
                "",
                "\treturn newNode;",
                "}",
                "/**",
                " * Removes `count` nodes after the given node. The given node will not be removed.",
                " * @param {LinkedList<T>} list",
                " * @param {LinkedListNode<T>} node",
                " * @param {number} count",
                " * @template T",
                " */",
                "function removeRange(list, node, count) {",
                "\tvar next = node.next;",
                "\tfor (var i = 0; i < count && next !== list.tail; i++) {",
                "\t\tnext = next.next;",
                "\t}",
                "\tnode.next = next;",
                "\tnext.prev = node;",
                "\tlist.length -= i;",
                "}",
                "/**",
                " * @param {LinkedList<T>} list",
                " * @returns {T[]}",
                " * @template T",
                " */",
                "function toArray(list) {",
                "\tvar array = [];",
                "\tvar node = list.head.next;",
                "\twhile (node !== list.tail) {",
                "\t\tarray.push(node.value);",
                "\t\tnode = node.next;",
                "\t}",
                "\treturn array;",
                "}",
                "",
                "",
                "if (!_self.document) {",
                "\tif (!_self.addEventListener) {",
                "\t\t// in Node.js",
                "\t\treturn _;",
                "\t}",
                "",
                "\tif (!_.disableWorkerMessageHandler) {",
                "\t\t// In worker",
                "\t\t_self.addEventListener('message', function (evt) {",
                "\t\t\tvar message = JSON.parse(evt.data),",
                "\t\t\t\tlang = message.language,",
                "\t\t\t\tcode = message.code,",
                "\t\t\t\timmediateClose = message.immediateClose;",
                "",
                "\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));",
                "\t\t\tif (immediateClose) {",
                "\t\t\t\t_self.close();",
                "\t\t\t}",
                "\t\t}, false);",
                "\t}",
                "",
                "\treturn _;",
                "}",
                "",
                "// Get current script and highlight",
                "var script = _.util.currentScript();",
                "",
                "if (script) {",
                "\t_.filename = script.src;",
                "",
                "\tif (script.hasAttribute('data-manual')) {",
                "\t\t_.manual = true;",
                "\t}",
                "}",
                "",
                "function highlightAutomaticallyCallback() {",
                "\tif (!_.manual) {",
                "\t\t_.highlightAll();",
                "\t}",
                "}",
                "",
                "if (!_.manual) {",
                "\t// If the document state is \"loading\", then we'll use DOMContentLoaded.",
                "\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the",
                "\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they",
                "\t// might take longer one animation frame to execute which can create a race condition where only some plugins have",
                "\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.",
                "\t// See https://github.com/PrismJS/prism/issues/2102",
                "\tvar readyState = document.readyState;",
                "\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {",
                "\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);",
                "\t} else {",
                "\t\tif (window.requestAnimationFrame) {",
                "\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);",
                "\t\t} else {",
                "\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);",
                "\t\t}",
                "\t}",
                "}",
                "",
                "return _;",
                "",
                "})(_self);",
                "",
                "if (typeof module !== 'undefined' && module.exports) {",
                "\tmodule.exports = Prism;",
                "}",
                "",
                "// hack for components to work correctly in node.js",
                "if (typeof global !== 'undefined') {",
                "\tglobal.Prism = Prism;",
                "}",
                "",
                "// some additional documentation/types",
                "",
                "/**",
                " * The expansion of a simple `RegExp` literal to support additional properties.",
                " *",
                " * @typedef GrammarToken",
                " * @property {RegExp} pattern The regular expression of the token.",
                " * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)",
                " * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.",
                " * @property {boolean} [greedy=false] Whether the token is greedy.",
                " * @property {string|string[]} [alias] An optional alias or list of aliases.",
                " * @property {Grammar} [inside] The nested grammar of this token.",
                " *",
                " * The `inside` grammar will be used to tokenize the text value of each token of this kind.",
                " *",
                " * This can be used to make nested and even recursive language definitions.",
                " *",
                " * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into",
                " * each another.",
                " * @global",
                " * @public",
                "*/",
                "",
                "/**",
                " * @typedef Grammar",
                " * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}",
                " * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.",
                " * @global",
                " * @public",
                " */",
                "",
                "/**",
                " * A function which will invoked after an element was successfully highlighted.",
                " *",
                " * @callback HighlightCallback",
                " * @param {Element} element The element successfully highlighted.",
                " * @returns {void}",
                " * @global",
                " * @public",
                "*/",
                "",
                "/**",
                " * @callback HookCallback",
                " * @param {Object<string, any>} env The environment variables of the hook.",
                " * @returns {void}",
                " * @global",
                " * @public",
                " */"
            ]
        },
        "prism-core.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(u){var c=/\\blang(?:uage)?-([\\w-]+)\\b/i,n=0,_={manual:u.Prism&&u.Prism.manual,disableWorkerMessageHandler:u.Prism&&u.Prism.disableWorkerMessageHandler,util:{encode:function e(n){return n instanceof M?new M(n.type,e(n.content),n.alias):Array.isArray(n)?n.map(e):n.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++n}),e.__id},clone:function t(e,r){var a,n;switch(r=r||{},_.util.type(e)){case\"Object\":if(n=_.util.objId(e),r[n])return r[n];for(var i in a={},r[n]=a,e)e.hasOwnProperty(i)&&(a[i]=t(e[i],r));return a;case\"Array\":return n=_.util.objId(e),r[n]?r[n]:(a=[],r[n]=a,e.forEach(function(e,n){a[n]=t(e,r)}),a);default:return e}},getLanguage:function(e){for(;e&&!c.test(e.className);)e=e.parentElement;return e?(e.className.match(c)||[,\"none\"])[1].toLowerCase():\"none\"},currentScript:function(){if(\"undefined\"==typeof document)return null;if(\"currentScript\"in document)return document.currentScript;try{throw new Error}catch(e){var n=(/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(e.stack)||[])[1];if(n){var t=document.getElementsByTagName(\"script\");for(var r in t)if(t[r].src==n)return t[r]}return null}},isActive:function(e,n,t){for(var r=\"no-\"+n;e;){var a=e.classList;if(a.contains(n))return!0;if(a.contains(r))return!1;e=e.parentElement}return!!t}},languages:{extend:function(e,n){var t=_.util.clone(_.languages[e]);for(var r in n)t[r]=n[r];return t},insertBefore:function(t,e,n,r){var a=(r=r||_.languages)[t],i={};for(var l in a)if(a.hasOwnProperty(l)){if(l==e)for(var o in n)n.hasOwnProperty(o)&&(i[o]=n[o]);n.hasOwnProperty(l)||(i[l]=a[l])}var s=r[t];return r[t]=i,_.languages.DFS(_.languages,function(e,n){n===s&&e!=t&&(this[e]=i)}),i},DFS:function e(n,t,r,a){a=a||{};var i=_.util.objId;for(var l in n)if(n.hasOwnProperty(l)){t.call(n,l,n[l],r||l);var o=n[l],s=_.util.type(o);\"Object\"!==s||a[i(o)]?\"Array\"!==s||a[i(o)]||(a[i(o)]=!0,e(o,t,l,a)):(a[i(o)]=!0,e(o,t,null,a))}}},plugins:{},highlightAll:function(e,n){_.highlightAllUnder(document,e,n)},highlightAllUnder:function(e,n,t){var r={callback:t,container:e,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};_.hooks.run(\"before-highlightall\",r),r.elements=Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)),_.hooks.run(\"before-all-elements-highlight\",r);for(var a,i=0;a=r.elements[i++];)_.highlightElement(a,!0===n,r.callback)},highlightElement:function(e,n,t){var r=_.util.getLanguage(e),a=_.languages[r];e.className=e.className.replace(c,\"\").replace(/\\s+/g,\" \")+\" language-\"+r;var i=e.parentElement;i&&\"pre\"===i.nodeName.toLowerCase()&&(i.className=i.className.replace(c,\"\").replace(/\\s+/g,\" \")+\" language-\"+r);var l={element:e,language:r,grammar:a,code:e.textContent};function o(e){l.highlightedCode=e,_.hooks.run(\"before-insert\",l),l.element.innerHTML=l.highlightedCode,_.hooks.run(\"after-highlight\",l),_.hooks.run(\"complete\",l),t&&t.call(l.element)}if(_.hooks.run(\"before-sanity-check\",l),!l.code)return _.hooks.run(\"complete\",l),void(t&&t.call(l.element));if(_.hooks.run(\"before-highlight\",l),l.grammar)if(n&&u.Worker){var s=new Worker(_.filename);s.onmessage=function(e){o(e.data)},s.postMessage(JSON.stringify({language:l.language,code:l.code,immediateClose:!0}))}else o(_.highlight(l.code,l.grammar,l.language));else o(_.util.encode(l.code))},highlight:function(e,n,t){var r={code:e,grammar:n,language:t};return _.hooks.run(\"before-tokenize\",r),r.tokens=_.tokenize(r.code,r.grammar),_.hooks.run(\"after-tokenize\",r),M.stringify(_.util.encode(r.tokens),r.language)},tokenize:function(e,n){var t=n.rest;if(t){for(var r in t)n[r]=t[r];delete n.rest}var a=new i;return z(a,a.head,e),function e(n,t,r,a,i,l){for(var o in r)if(r.hasOwnProperty(o)&&r[o]){var s=r[o];s=Array.isArray(s)?s:[s];for(var u=0;u<s.length;++u){if(l&&l.cause==o+\",\"+u)return;var c=s[u],g=c.inside,f=!!c.lookbehind,h=!!c.greedy,d=c.alias;if(h&&!c.pattern.global){var v=c.pattern.toString().match(/[imsuy]*$/)[0];c.pattern=RegExp(c.pattern.source,v+\"g\")}for(var p=c.pattern||c,m=a.next,y=i;m!==t.tail&&!(l&&y>=l.reach);y+=m.value.length,m=m.next){var k=m.value;if(t.length>n.length)return;if(!(k instanceof M)){var b,x=1;if(h){if(!(b=W(p,y,n,f)))break;var w=b.index,A=b.index+b[0].length,P=y;for(P+=m.value.length;P<=w;)m=m.next,P+=m.value.length;if(P-=m.value.length,y=P,m.value instanceof M)continue;for(var S=m;S!==t.tail&&(P<A||\"string\"==typeof S.value);S=S.next)x++,P+=S.value.length;x--,k=n.slice(y,P),b.index-=y}else if(!(b=W(p,0,k,f)))continue;var w=b.index,E=b[0],O=k.slice(0,w),L=k.slice(w+E.length),N=y+k.length;l&&N>l.reach&&(l.reach=N);var j=m.prev;O&&(j=z(t,j,O),y+=O.length),I(t,j,x);var C=new M(o,g?_.tokenize(E,g):E,d,E);m=z(t,j,C),L&&z(t,m,L),1<x&&e(n,t,r,m.prev,y,{cause:o+\",\"+u,reach:N})}}}}}(e,a,n,a.head,0),function(e){var n=[],t=e.head.next;for(;t!==e.tail;)n.push(t.value),t=t.next;return n}(a)},hooks:{all:{},add:function(e,n){var t=_.hooks.all;t[e]=t[e]||[],t[e].push(n)},run:function(e,n){var t=_.hooks.all[e];if(t&&t.length)for(var r,a=0;r=t[a++];)r(n)}},Token:M};function M(e,n,t,r){this.type=e,this.content=n,this.alias=t,this.length=0|(r||\"\").length}function W(e,n,t,r){e.lastIndex=n;var a=e.exec(t);if(a&&r&&a[1]){var i=a[1].length;a.index+=i,a[0]=a[0].slice(i)}return a}function i(){var e={value:null,prev:null,next:null},n={value:null,prev:e,next:null};e.next=n,this.head=e,this.tail=n,this.length=0}function z(e,n,t){var r=n.next,a={value:t,prev:n,next:r};return n.next=a,r.prev=a,e.length++,a}function I(e,n,t){for(var r=n.next,a=0;a<t&&r!==e.tail;a++)r=r.next;(n.next=r).prev=n,e.length-=a}if(u.Prism=_,M.stringify=function n(e,t){if(\"string\"==typeof e)return e;if(Array.isArray(e)){var r=\"\";return e.forEach(function(e){r+=n(e,t)}),r}var a={type:e.type,content:n(e.content,t),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t},i=e.alias;i&&(Array.isArray(i)?Array.prototype.push.apply(a.classes,i):a.classes.push(i)),_.hooks.run(\"wrap\",a);var l=\"\";for(var o in a.attributes)l+=\" \"+o+'=\"'+(a.attributes[o]||\"\").replace(/\"/g,\"&quot;\")+'\"';return\"<\"+a.tag+' class=\"'+a.classes.join(\" \")+'\"'+l+\">\"+a.content+\"</\"+a.tag+\">\"},!u.document)return u.addEventListener&&(_.disableWorkerMessageHandler||u.addEventListener(\"message\",function(e){var n=JSON.parse(e.data),t=n.language,r=n.code,a=n.immediateClose;u.postMessage(_.highlight(r,_.languages[t],t)),a&&u.close()},!1)),_;var e=_.util.currentScript();function t(){_.manual||_.highlightAll()}if(e&&(_.filename=e.src,e.hasAttribute(\"data-manual\")&&(_.manual=!0)),!_.manual){var r=document.readyState;\"loading\"===r||\"interactive\"===r&&e&&e.defer?document.addEventListener(\"DOMContentLoaded\",t):window.requestAnimationFrame?window.requestAnimationFrame(t):window.setTimeout(t,16)}return _}(_self);\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);"
            ]
        },
        "prism-cpp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;",
                "",
                "\tPrism.languages.cpp = Prism.languages.extend('c', {",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source",
                "\t\t\t\t\t.replace(/<keyword>/g, function () { return keyword.source; })),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t// This is intended to capture the class name of method implementations like:",
                "\t\t\t//   void foo::bar() const {}",
                "\t\t\t// However! The `foo` in the above example could also be a namespace, so we only capture the class name if",
                "\t\t\t// it starts with an uppercase letter. This approximation should give decent results.",
                "\t\t\t/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,",
                "\t\t\t// This will capture the class name before destructors like:",
                "\t\t\t//   Foo::~Foo() {}",
                "\t\t\t/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,",
                "\t\t\t// This also intends to capture the class name of method implementations but here the class has template",
                "\t\t\t// parameters, so it can't be a namespace (until C++ adds generic namespaces).",
                "\t\t\t/\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/",
                "\t\t],",
                "\t\t'keyword': keyword,",
                "\t\t'number': {",
                "\t\t\tpattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('cpp', 'string', {",
                "\t\t'raw-string': {",
                "\t\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,",
                "\t\t\talias: 'string',",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('cpp', 'class-name', {",
                "\t\t// the base clause is an optional list of parent classes",
                "\t\t// https://en.cppreference.com/w/cpp/language/class",
                "\t\t'base-clause': {",
                "\t\t\tpattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: Prism.languages.extend('cpp', {})",
                "\t\t}",
                "\t});",
                "\tPrism.languages.insertBefore('inside', 'operator', {",
                "\t\t// All untokenized words that are not namespaces should be class names",
                "\t\t'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i",
                "\t}, Prism.languages.cpp['base-clause']);",
                "",
                "}(Prism));"
            ]
        },
        "prism-cpp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=/\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;e.languages.cpp=e.languages.extend(\"c\",{\"class-name\":[{pattern:RegExp(\"(\\\\b(?:class|concept|enum|struct|typename)\\\\s+)(?!<keyword>)\\\\w+\".replace(/<keyword>/g,function(){return t.source})),lookbehind:!0},/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,/\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],keyword:t,number:{pattern:/(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|([-+&|:])\\1|[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,boolean:/\\b(?:true|false)\\b/}),e.languages.insertBefore(\"cpp\",\"string\",{\"raw-string\":{pattern:/R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,alias:\"string\",greedy:!0}}),e.languages.insertBefore(\"cpp\",\"class-name\",{\"base-clause\":{pattern:/(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend(\"cpp\",{})}}),e.languages.insertBefore(\"inside\",\"operator\",{\"class-name\":/\\b[a-z_]\\w*\\b(?!\\s*::)/i},e.languages.cpp[\"base-clause\"])}(Prism);"
            ]
        },
        "prism-crystal.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.crystal = Prism.languages.extend('ruby', {",
                "\t\tkeyword: [",
                "\t\t\t/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\tnumber: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('crystal', 'string', {",
                "\t\tattribute: {",
                "\t\t\tpattern: /@\\[.+?\\]/,",
                "\t\t\talias: 'attr-name',",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^@\\[|\\]$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\texpansion: [",
                "\t\t{",
                "\t\t\tpattern: /\\{\\{.+?\\}\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\{\\{|\\}\\}$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\{%.+?%\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\{%|%\\}$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t}",
                "\t\t]",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-crystal.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.crystal=e.languages.extend(\"ruby\",{keyword:[/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,{pattern:/(\\.\\s*)(?:is_a|responds_to)\\?/,lookbehind:!0}],number:/\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/}),e.languages.insertBefore(\"crystal\",\"string\",{attribute:{pattern:/@\\[.+?\\]/,alias:\"attr-name\",inside:{delimiter:{pattern:/^@\\[|\\]$/,alias:\"tag\"},rest:e.languages.crystal}},expansion:[{pattern:/\\{\\{.+?\\}\\}/,inside:{delimiter:{pattern:/^\\{\\{|\\}\\}$/,alias:\"tag\"},rest:e.languages.crystal}},{pattern:/\\{%.+?%\\}/,inside:{delimiter:{pattern:/^\\{%|%\\}$/,alias:\"tag\"},rest:e.languages.crystal}}]})}(Prism);"
            ]
        },
        "prism-csharp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t/**",
                "\t * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).",
                "\t *",
                "\t * Note: This is a simple text based replacement. Be careful when using backreferences!",
                "\t *",
                "\t * @param {string} pattern the given pattern.",
                "\t * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.",
                "\t * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.",
                "\t * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source",
                "\t */",
                "\tfunction replace(pattern, replacements) {",
                "\t\treturn pattern.replace(/<<(\\d+)>>/g, function (m, index) {",
                "\t\t\treturn '(?:' + replacements[+index] + ')';",
                "\t\t});",
                "\t}",
                "\t/**",
                "\t * @param {string} pattern",
                "\t * @param {string[]} replacements",
                "\t * @param {string} [flags]",
                "\t * @returns {RegExp}",
                "\t */",
                "\tfunction re(pattern, replacements, flags) {",
                "\t\treturn RegExp(replace(pattern, replacements), flags || '');",
                "\t}",
                "",
                "\t/**",
                "\t * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.",
                "\t *",
                "\t * @param {string} pattern",
                "\t * @param {number} depthLog2",
                "\t * @returns {string}",
                "\t */",
                "\tfunction nested(pattern, depthLog2) {",
                "\t\tfor (var i = 0; i < depthLog2; i++) {",
                "\t\t\tpattern = pattern.replace(/<<self>>/g, function () { return '(?:' + pattern + ')'; });",
                "\t\t}",
                "\t\treturn pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]');",
                "\t}",
                "",
                "\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/",
                "\tvar keywordKinds = {",
                "\t\t// keywords which represent a return or variable type",
                "\t\ttype: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',",
                "\t\t// keywords which are used to declare a type",
                "\t\ttypeDeclaration: 'class enum interface struct',",
                "\t\t// contextual keywords",
                "\t\t// (\"var\" and \"dynamic\" are missing because they are used like types)",
                "\t\tcontextual: 'add alias and ascending async await by descending from get global group into join let nameof not notnull on or orderby partial remove select set unmanaged value when where',",
                "\t\t// all other keywords",
                "\t\tother: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'",
                "\t};",
                "",
                "\t// keywords",
                "\tfunction keywordsToPattern(words) {",
                "\t\treturn '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b';",
                "\t}",
                "\tvar typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);",
                "\tvar keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));",
                "\tvar nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);",
                "\tvar nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other);",
                "",
                "\t// types",
                "\tvar generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.",
                "\tvar nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);",
                "\tvar name = /@?\\b[A-Za-z_]\\w*\\b/.source;",
                "\tvar genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic]);",
                "\tvar identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);",
                "\tvar array = /\\[\\s*(?:,\\s*)*\\]/.source;",
                "\tvar typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [identifier, array]);",
                "\tvar tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array])",
                "\tvar tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement]);",
                "\tvar typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [tuple, identifier, array]);",
                "",
                "\tvar typeInside = {",
                "\t\t'keyword': keywords,",
                "\t\t'punctuation': /[<>()?,.:[\\]]/",
                "\t};",
                "",
                "\t// strings & characters",
                "\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals",
                "\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals",
                "\tvar character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source; // simplified pattern",
                "\tvar regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;",
                "\tvar verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;",
                "",
                "",
                "\tPrism.languages.csharp = Prism.languages.extend('clike', {",
                "\t\t'string': [",
                "\t\t\t{",
                "\t\t\t\tpattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(character),",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'character'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\t// Using static",
                "\t\t\t\t// using static System.Math;",
                "\t\t\t\tpattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [identifier]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: typeInside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Using alias (type)",
                "\t\t\t\t// using Project = PC.MyCompany.Project;",
                "\t\t\t\tpattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [name, typeExpression]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: typeInside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Using alias (alias)",
                "\t\t\t\t// using Project = PC.MyCompany.Project;",
                "\t\t\t\tpattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Type declarations",
                "\t\t\t\t// class Foo<A, B>",
                "\t\t\t\t// interface Foo<out A, B>",
                "\t\t\t\tpattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: typeInside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Single catch exception declaration",
                "\t\t\t\t// catch(Foo)",
                "\t\t\t\t// (things like catch(Foo e) is covered by variable declaration)",
                "\t\t\t\tpattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: typeInside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Name of the type parameter of generic constraints",
                "\t\t\t\t// where Foo : class",
                "\t\t\t\tpattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Casts and checks via as and is.",
                "\t\t\t\t// as Foo<A>, is Bar<B>",
                "\t\t\t\t// (things like if(a is Foo b) is covered by variable declaration)",
                "\t\t\t\tpattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [typeExpressionWithoutTuple]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: typeInside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Variable, field and parameter declaration",
                "\t\t\t\t// (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)",
                "\t\t\t\tpattern: re(/\\b<<0>>(?=\\s+(?!<<1>>)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [typeExpression, nonContextualKeywords, name]),",
                "\t\t\t\tinside: typeInside",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': keywords,",
                "\t\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals",
                "\t\t'number': /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,",
                "\t\t'operator': />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,",
                "\t\t'punctuation': /\\?\\.?|::|[{}[\\];(),.:]/",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('csharp', 'number', {",
                "\t\t'range': {",
                "\t\t\tpattern: /\\.\\./,",
                "\t\t\talias: 'operator'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('csharp', 'punctuation', {",
                "\t\t'named-parameter': {",
                "\t\t\tpattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('csharp', 'class-name', {",
                "\t\t'namespace': {",
                "\t\t\t// namespace Foo.Bar {}",
                "\t\t\t// using Foo.Bar;",
                "\t\t\tpattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [name]),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t'type-expression': {",
                "\t\t\t// default(Foo), typeof(Foo<Bar>), sizeof(int)",
                "\t\t\tpattern: re(/(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [nestedRound]),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'class-name',",
                "\t\t\tinside: typeInside",
                "\t\t},",
                "\t\t'return-type': {",
                "\t\t\t// Foo<Bar> ForBar(); Foo IFoo.Bar() => 0",
                "\t\t\t// int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];",
                "\t\t\t// int Foo => 0; int Foo { get; set } = 0;",
                "\t\t\tpattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [typeExpression, identifier]),",
                "\t\t\tinside: typeInside,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'constructor-invocation': {",
                "\t\t\t// new List<Foo<Bar[]>> { }",
                "\t\t\tpattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: typeInside,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t/*'explicit-implementation': {",
                "\t\t\t// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();",
                "\t\t\tpattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),",
                "\t\t\tinside: classNameInside,",
                "\t\t\talias: 'class-name'",
                "\t\t},*/",
                "\t\t'generic-method': {",
                "\t\t\t// foo<Bar>()",
                "\t\t\tpattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),",
                "\t\t\tinside: {",
                "\t\t\t\t'function': re(/^<<0>>/.source, [name]),",
                "\t\t\t\t'generic': {",
                "\t\t\t\t\tpattern: RegExp(generic),",
                "\t\t\t\t\talias: 'class-name',",
                "\t\t\t\t\tinside: typeInside",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'type-list': {",
                "\t\t\t// The list of types inherited or of generic constraints",
                "\t\t\t// class Foo<F> : Bar, IList<FooBar>",
                "\t\t\t// where F : Bar, IList<int>",
                "\t\t\tpattern: re(",
                "\t\t\t\t/\\b((?:<<0>>\\s+<<1>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>)(?:\\s*,\\s*(?:<<3>>|<<4>>))*(?=\\s*(?:where|[{;]|=>|$))/.source,",
                "\t\t\t\t[typeDeclarationKeywords, genericName, name, typeExpression, keywords.source]",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': keywords,",
                "\t\t\t\t'class-name': {",
                "\t\t\t\t\tpattern: RegExp(typeExpression),",
                "\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\tinside: typeInside",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /,/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'preprocessor': {",
                "\t\t\tpattern: /(^\\s*)#.*/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'property',",
                "\t\t\tinside: {",
                "\t\t\t\t// highlight preprocessor directives as keywords",
                "\t\t\t\t'directive': {",
                "\t\t\t\t\tpattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\t// attributes",
                "\tvar regularStringOrCharacter = regularString + '|' + character;",
                "\tvar regularStringCharacterOrComment = replace(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source, [regularStringOrCharacter]);",
                "\tvar roundExpression = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2);",
                "",
                "\t// https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets",
                "\tvar attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;",
                "\tvar attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [identifier, roundExpression]);",
                "",
                "\tPrism.languages.insertBefore('csharp', 'class-name', {",
                "\t\t'attribute': {",
                "\t\t\t// Attributes",
                "\t\t\t// [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]",
                "\t\t\tpattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [attrTarget, attr]),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'target': {",
                "\t\t\t\t\tpattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\t'attribute-arguments': {",
                "\t\t\t\t\tpattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),",
                "\t\t\t\t\tinside: Prism.languages.csharp",
                "\t\t\t\t},",
                "\t\t\t\t'class-name': {",
                "\t\t\t\t\tpattern: RegExp(identifier),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /[:,]/",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "",
                "\t// string interpolation",
                "\tvar formatString = /:[^}\\r\\n]+/.source;",
                "\t// multi line",
                "\tvar mInterpolationRound = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]), 2)",
                "\tvar mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [mInterpolationRound, formatString]);",
                "\t// single line",
                "\tvar sInterpolationRound = nested(replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [regularStringOrCharacter]), 2)",
                "\tvar sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [sInterpolationRound, formatString]);",
                "",
                "\tfunction createInterpolationInside(interpolation, interpolationRound) {",
                "\t\treturn {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'format-string': {",
                "\t\t\t\t\t\tpattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [interpolationRound, formatString]),",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'punctuation': /^:/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'punctuation': /^\\{|\\}$/,",
                "\t\t\t\t\t'expression': {",
                "\t\t\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\t\t\talias: 'language-csharp',",
                "\t\t\t\t\t\tinside: Prism.languages.csharp",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t};",
                "\t}",
                "",
                "\tPrism.languages.insertBefore('csharp', 'string', {",
                "\t\t'interpolation-string': [",
                "\t\t\t{",
                "\t\t\t\tpattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [mInterpolation]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: createInterpolationInside(mInterpolation, mInterpolationRound),",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [sInterpolation]),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: createInterpolationInside(sInterpolation, sInterpolationRound),",
                "\t\t\t}",
                "\t\t]",
                "\t});",
                "",
                "}(Prism));",
                "",
                "Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;"
            ]
        },
        "prism-csharp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(s){function a(e,s){return e.replace(/<<(\\d+)>>/g,function(e,n){return\"(?:\"+s[+n]+\")\"})}function t(e,n,s){return RegExp(a(e,n),s||\"\")}function e(e,n){for(var s=0;s<n;s++)e=e.replace(/<<self>>/g,function(){return\"(?:\"+e+\")\"});return e.replace(/<<self>>/g,\"[^\\\\s\\\\S]\")}var n=\"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\",i=\"class enum interface struct\",r=\"add alias and ascending async await by descending from get global group into join let nameof not notnull on or orderby partial remove select set unmanaged value when where\",o=\"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\";function l(e){return\"\\\\b(?:\"+e.trim().replace(/ /g,\"|\")+\")\\\\b\"}var d=l(i),p=RegExp(l(n+\" \"+i+\" \"+r+\" \"+o)),c=l(i+\" \"+r+\" \"+o),u=l(n+\" \"+i+\" \"+o),g=e(\"<(?:[^<>;=+\\\\-*/%&|^]|<<self>>)*>\",2),b=e(\"\\\\((?:[^()]|<<self>>)*\\\\)\",2),h=\"@?\\\\b[A-Za-z_]\\\\w*\\\\b\",f=a(\"<<0>>(?:\\\\s*<<1>>)?\",[h,g]),m=a(\"(?!<<0>>)<<1>>(?:\\\\s*\\\\.\\\\s*<<1>>)*\",[c,f]),k=\"\\\\[\\\\s*(?:,\\\\s*)*\\\\]\",y=a(\"<<0>>(?:\\\\s*(?:\\\\?\\\\s*)?<<1>>)*(?:\\\\s*\\\\?)?\",[m,k]),w=a(\"(?:<<0>>|<<1>>)(?:\\\\s*(?:\\\\?\\\\s*)?<<2>>)*(?:\\\\s*\\\\?)?\",[a(\"\\\\(<<0>>+(?:,<<0>>+)+\\\\)\",[a(\"[^,()<>[\\\\];=+\\\\-*/%&|^]|<<0>>|<<1>>|<<2>>\",[g,b,k])]),m,k]),v={keyword:p,punctuation:/[<>()?,.:[\\]]/},x=\"'(?:[^\\r\\n'\\\\\\\\]|\\\\\\\\.|\\\\\\\\[Uux][\\\\da-fA-F]{1,8})'\",$='\"(?:\\\\\\\\.|[^\\\\\\\\\"\\r\\n])*\"';s.languages.csharp=s.languages.extend(\"clike\",{string:[{pattern:t(\"(^|[^$\\\\\\\\])<<0>>\",['@\"(?:\"\"|\\\\\\\\[^]|[^\\\\\\\\\"])*\"(?!\")']),lookbehind:!0,greedy:!0},{pattern:t(\"(^|[^@$\\\\\\\\])<<0>>\",[$]),lookbehind:!0,greedy:!0},{pattern:RegExp(x),greedy:!0,alias:\"character\"}],\"class-name\":[{pattern:t(\"(\\\\busing\\\\s+static\\\\s+)<<0>>(?=\\\\s*;)\",[m]),lookbehind:!0,inside:v},{pattern:t(\"(\\\\busing\\\\s+<<0>>\\\\s*=\\\\s*)<<1>>(?=\\\\s*;)\",[h,w]),lookbehind:!0,inside:v},{pattern:t(\"(\\\\busing\\\\s+)<<0>>(?=\\\\s*=)\",[h]),lookbehind:!0},{pattern:t(\"(\\\\b<<0>>\\\\s+)<<1>>\",[d,f]),lookbehind:!0,inside:v},{pattern:t(\"(\\\\bcatch\\\\s*\\\\(\\\\s*)<<0>>\",[m]),lookbehind:!0,inside:v},{pattern:t(\"(\\\\bwhere\\\\s+)<<0>>\",[h]),lookbehind:!0},{pattern:t(\"(\\\\b(?:is(?:\\\\s+not)?|as)\\\\s+)<<0>>\",[y]),lookbehind:!0,inside:v},{pattern:t(\"\\\\b<<0>>(?=\\\\s+(?!<<1>>)<<2>>(?:\\\\s*[=,;:{)\\\\]]|\\\\s+(?:in|when)\\\\b))\",[w,u,h]),inside:v}],keyword:p,number:/(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,operator:/>>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,punctuation:/\\?\\.?|::|[{}[\\];(),.:]/}),s.languages.insertBefore(\"csharp\",\"number\",{range:{pattern:/\\.\\./,alias:\"operator\"}}),s.languages.insertBefore(\"csharp\",\"punctuation\",{\"named-parameter\":{pattern:t(\"([(,]\\\\s*)<<0>>(?=\\\\s*:)\",[h]),lookbehind:!0,alias:\"punctuation\"}}),s.languages.insertBefore(\"csharp\",\"class-name\",{namespace:{pattern:t(\"(\\\\b(?:namespace|using)\\\\s+)<<0>>(?:\\\\s*\\\\.\\\\s*<<0>>)*(?=\\\\s*[;{])\",[h]),lookbehind:!0,inside:{punctuation:/\\./}},\"type-expression\":{pattern:t(\"(\\\\b(?:default|typeof|sizeof)\\\\s*\\\\(\\\\s*(?!\\\\s))(?:[^()\\\\s]|\\\\s(?!\\\\s)|<<0>>)*(?=\\\\s*\\\\))\",[b]),lookbehind:!0,alias:\"class-name\",inside:v},\"return-type\":{pattern:t(\"<<0>>(?=\\\\s+(?:<<1>>\\\\s*(?:=>|[({]|\\\\.\\\\s*this\\\\s*\\\\[)|this\\\\s*\\\\[))\",[w,m]),inside:v,alias:\"class-name\"},\"constructor-invocation\":{pattern:t(\"(\\\\bnew\\\\s+)<<0>>(?=\\\\s*[[({])\",[w]),lookbehind:!0,inside:v,alias:\"class-name\"},\"generic-method\":{pattern:t(\"<<0>>\\\\s*<<1>>(?=\\\\s*\\\\()\",[h,g]),inside:{function:t(\"^<<0>>\",[h]),generic:{pattern:RegExp(g),alias:\"class-name\",inside:v}}},\"type-list\":{pattern:t(\"\\\\b((?:<<0>>\\\\s+<<1>>|where\\\\s+<<2>>)\\\\s*:\\\\s*)(?:<<3>>|<<4>>)(?:\\\\s*,\\\\s*(?:<<3>>|<<4>>))*(?=\\\\s*(?:where|[{;]|=>|$))\",[d,f,h,w,p.source]),lookbehind:!0,inside:{keyword:p,\"class-name\":{pattern:RegExp(w),greedy:!0,inside:v},punctuation:/,/}},preprocessor:{pattern:/(^\\s*)#.*/m,lookbehind:!0,alias:\"property\",inside:{directive:{pattern:/(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,lookbehind:!0,alias:\"keyword\"}}}});var _=$+\"|\"+x,B=a(\"/(?![*/])|//[^\\r\\n]*[\\r\\n]|/\\\\*(?:[^*]|\\\\*(?!/))*\\\\*/|<<0>>\",[_]),E=e(a(\"[^\\\"'/()]|<<0>>|\\\\(<<self>>*\\\\)\",[B]),2),R=\"\\\\b(?:assembly|event|field|method|module|param|property|return|type)\\\\b\",P=a(\"<<0>>(?:\\\\s*\\\\(<<1>>*\\\\))?\",[m,E]);s.languages.insertBefore(\"csharp\",\"class-name\",{attribute:{pattern:t(\"((?:^|[^\\\\s\\\\w>)?])\\\\s*\\\\[\\\\s*)(?:<<0>>\\\\s*:\\\\s*)?<<1>>(?:\\\\s*,\\\\s*<<1>>)*(?=\\\\s*\\\\])\",[R,P]),lookbehind:!0,greedy:!0,inside:{target:{pattern:t(\"^<<0>>(?=\\\\s*:)\",[R]),alias:\"keyword\"},\"attribute-arguments\":{pattern:t(\"\\\\(<<0>>*\\\\)\",[E]),inside:s.languages.csharp},\"class-name\":{pattern:RegExp(m),inside:{punctuation:/\\./}},punctuation:/[:,]/}}});var z=\":[^}\\r\\n]+\",S=e(a(\"[^\\\"'/()]|<<0>>|\\\\(<<self>>*\\\\)\",[B]),2),j=a(\"\\\\{(?!\\\\{)(?:(?![}:])<<0>>)*<<1>>?\\\\}\",[S,z]),A=e(a(\"[^\\\"'/()]|/(?!\\\\*)|/\\\\*(?:[^*]|\\\\*(?!/))*\\\\*/|<<0>>|\\\\(<<self>>*\\\\)\",[_]),2),F=a(\"\\\\{(?!\\\\{)(?:(?![}:])<<0>>)*<<1>>?\\\\}\",[A,z]);function U(e,n){return{interpolation:{pattern:t(\"((?:^|[^{])(?:\\\\{\\\\{)*)<<0>>\",[e]),lookbehind:!0,inside:{\"format-string\":{pattern:t(\"(^\\\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\\\}$)\",[n,z]),lookbehind:!0,inside:{punctuation:/^:/}},punctuation:/^\\{|\\}$/,expression:{pattern:/[\\s\\S]+/,alias:\"language-csharp\",inside:s.languages.csharp}}},string:/[\\s\\S]+/}}s.languages.insertBefore(\"csharp\",\"string\",{\"interpolation-string\":[{pattern:t('(^|[^\\\\\\\\])(?:\\\\$@|@\\\\$)\"(?:\"\"|\\\\\\\\[^]|\\\\{\\\\{|<<0>>|[^\\\\\\\\{\"])*\"',[j]),lookbehind:!0,greedy:!0,inside:U(j,S)},{pattern:t('(^|[^@\\\\\\\\])\\\\$\"(?:\\\\\\\\.|\\\\{\\\\{|<<0>>|[^\\\\\\\\\"{])*\"',[F]),lookbehind:!0,greedy:!0,inside:U(F,A)}]})}(Prism),Prism.languages.dotnet=Prism.languages.cs=Prism.languages.csharp;"
            ]
        },
        "prism-csp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/csp-cheat-sheet/",
                " *",
                " * Supports the following:",
                " *  - CSP Level 1",
                " *  - CSP Level 2",
                " *  - CSP Level 3",
                " */",
                "",
                "Prism.languages.csp = {",
                "\t'directive': {",
                "\t\tpattern: /(^|[^-\\da-z])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[^-\\da-z]|$)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\t// CSP2 hashes and nonces are base64 values. CSP3 accepts both base64 and base64url values.",
                "\t\t// See https://tools.ietf.org/html/rfc4648#section-4",
                "\t\t// See https://tools.ietf.org/html/rfc4648#section-5",
                "\t\tpattern: /'(?:deny|none|report-sample|self|strict-dynamic|top-only|(?:nonce|sha(?:256|384|512))-[-+/\\d=_a-z]+)'/i,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /(?:'unsafe-(?:allow-redirects|dynamic|eval|hash-attributes|hashed-attributes|hashes|inline)'|\\*)/i,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-csp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.csp={directive:{pattern:/(^|[^-\\da-z])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[^-\\da-z]|$)/i,lookbehind:!0,alias:\"keyword\"},safe:{pattern:/'(?:deny|none|report-sample|self|strict-dynamic|top-only|(?:nonce|sha(?:256|384|512))-[-+/\\d=_a-z]+)'/i,alias:\"selector\"},unsafe:{pattern:/(?:'unsafe-(?:allow-redirects|dynamic|eval|hash-attributes|hashed-attributes|hashes|inline)'|\\*)/i,alias:\"function\"}};"
            ]
        },
        "prism-css-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
                "\tvar selectorInside;",
                "",
                "\tPrism.languages.css.selector = {",
                "\t\tpattern: Prism.languages.css.selector,",
                "\t\tinside: selectorInside = {",
                "\t\t\t'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,",
                "\t\t\t'pseudo-class': /:[-\\w]+/,",
                "\t\t\t'class': /\\.[-\\w]+/,",
                "\t\t\t'id': /#[-\\w]+/,",
                "\t\t\t'attribute': {",
                "\t\t\t\tpattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^\\[|\\]$/,",
                "\t\t\t\t\t'case-sensitivity': {",
                "\t\t\t\t\t\tpattern: /(\\s)[si]$/i,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'namespace': {",
                "\t\t\t\t\t\tpattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'punctuation': /\\|$/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'attr-name': {",
                "\t\t\t\t\t\tpattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'attr-value': [",
                "\t\t\t\t\t\tstring,",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t],",
                "\t\t\t\t\t'operator': /[|~*^$]?=/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'n-th': [",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'number': /[\\dn]+/,",
                "\t\t\t\t\t\t'operator': /[+-]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t],",
                "\t\t\t'combinator': />|\\+|~|\\|\\|/,",
                "",
                "\t\t\t// the `tag` token has been existed and removed.",
                "\t\t\t// because we can't find a perfect tokenize to match it.",
                "\t\t\t// if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.",
                "",
                "\t\t\t'punctuation': /[(),]/,",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;",
                "",
                "\tPrism.languages.insertBefore('css', 'property', {",
                "\t\t'variable': {",
                "\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tvar unit = {",
                "\t\tpattern: /(\\b\\d+)(?:%|[a-z]+\\b)/,",
                "\t\tlookbehind: true",
                "\t};",
                "\t// 123 -123 .123 -.123 12.3 -12.3",
                "\tvar number = {",
                "\t\tpattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,",
                "\t\tlookbehind: true",
                "\t};",
                "",
                "\tPrism.languages.insertBefore('css', 'function', {",
                "\t\t'operator': {",
                "\t\t\tpattern: /(\\s)[+\\-*\\/](?=\\s)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// CAREFUL!",
                "\t\t// Previewers and Inline color use hexcode and color.",
                "\t\t'hexcode': {",
                "\t\t\tpattern: /\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,",
                "\t\t\talias: 'color'",
                "\t\t},",
                "\t\t'color': [",
                "\t\t\t/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'unit': unit,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                "\t\t\t\t\t'punctuation': /[(),]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t// it's important that there is no boundary assertion after the hex digits",
                "\t\t'entity': /\\\\[\\da-f]{1,8}/i,",
                "\t\t'unit': unit,",
                "\t\t'number': number",
                "\t});",
                "",
                "})(Prism);"
            ]
        },
        "prism-css-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var a,n=/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;e.languages.css.selector={pattern:e.languages.css.selector,inside:a={\"pseudo-element\":/:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\"pseudo-class\":/:[-\\w]+/,class:/\\.[-\\w]+/,id:/#[-\\w]+/,attribute:{pattern:RegExp(\"\\\\[(?:[^[\\\\]\\\"']|\"+n.source+\")*\\\\]\"),greedy:!0,inside:{punctuation:/^\\[|\\]$/,\"case-sensitivity\":{pattern:/(\\s)[si]$/i,lookbehind:!0,alias:\"keyword\"},namespace:{pattern:/^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,lookbehind:!0,inside:{punctuation:/\\|$/}},\"attr-name\":{pattern:/^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,lookbehind:!0},\"attr-value\":[n,{pattern:/(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,lookbehind:!0}],operator:/[|~*^$]?=/}},\"n-th\":[{pattern:/(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,lookbehind:!0,inside:{number:/[\\dn]+/,operator:/[+-]/}},{pattern:/(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,lookbehind:!0}],combinator:/>|\\+|~|\\|\\|/,punctuation:/[(),]/}},e.languages.css.atrule.inside[\"selector-function-argument\"].inside=a,e.languages.insertBefore(\"css\",\"property\",{variable:{pattern:/(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,lookbehind:!0}});var r={pattern:/(\\b\\d+)(?:%|[a-z]+\\b)/,lookbehind:!0},i={pattern:/(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,lookbehind:!0};e.languages.insertBefore(\"css\",\"function\",{operator:{pattern:/(\\s)[+\\-*\\/](?=\\s)/,lookbehind:!0},hexcode:{pattern:/\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,alias:\"color\"},color:[/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,{pattern:/\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,inside:{unit:r,number:i,function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}],entity:/\\\\[\\da-f]{1,8}/i,unit:r,number:i})}(Prism);"
            ]
        },
        "prism-css.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
                "",
                "\tPrism.languages.css = {",
                "\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t'atrule': {",
                "\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,",
                "\t\t\tinside: {",
                "\t\t\t\t'rule': /^@[\\w-]+/,",
                "\t\t\t\t'selector-function-argument': {",
                "\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'selector'",
                "\t\t\t\t},",
                "\t\t\t\t'keyword': {",
                "\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t'url': {",
                "\t\t\t// https://drafts.csswg.org/css-values-3/#urls",
                "\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^url/i,",
                "\t\t\t\t'punctuation': /^\\(|\\)$/,",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),",
                "\t\t\t\t\talias: 'url'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),",
                "\t\t'string': {",
                "\t\t\tpattern: string,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,",
                "\t\t'important': /!important\\b/i,",
                "\t\t'function': /[-a-z0-9]+(?=\\()/i,",
                "\t\t'punctuation': /[(){};:,]/",
                "\t};",
                "",
                "\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;",
                "",
                "\tvar markup = Prism.languages.markup;",
                "\tif (markup) {",
                "\t\tmarkup.tag.addInlined('style', 'css');",
                "",
                "\t\tPrism.languages.insertBefore('inside', 'attr-value', {",
                "\t\t\t'style-attr': {",
                "\t\t\t\tpattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'style': {",
                "\t\t\t\t\t\t\t\tpattern: /([\"'])[\\s\\S]+(?=[\"']$)/,",
                "\t\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\t\talias: 'language-css',",
                "\t\t\t\t\t\t\t\tinside: Prism.languages.css",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t\t\t]",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'attr-name': /^style/i",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}, markup.tag);",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-css.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(s){var e=/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;s.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,inside:{rule:/^@[\\w-]+/,\"selector-function-argument\":{pattern:/(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,lookbehind:!0,alias:\"selector\"},keyword:{pattern:/(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,lookbehind:!0}}},url:{pattern:RegExp(\"\\\\burl\\\\((?:\"+e.source+\"|(?:[^\\\\\\\\\\r\\n()\\\"']|\\\\\\\\[^])*)\\\\)\",\"i\"),greedy:!0,inside:{function:/^url/i,punctuation:/^\\(|\\)$/,string:{pattern:RegExp(\"^\"+e.source+\"$\"),alias:\"url\"}}},selector:RegExp(\"[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\"+e.source+\")*(?=\\\\s*\\\\{)\"),string:{pattern:e,greedy:!0},property:/(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,important:/!important\\b/i,function:/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:,]/},s.languages.css.atrule.inside.rest=s.languages.css;var t=s.languages.markup;t&&(t.tag.addInlined(\"style\",\"css\"),s.languages.insertBefore(\"inside\",\"attr-value\",{\"style-attr\":{pattern:/(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,lookbehind:!0,inside:{\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,inside:{style:{pattern:/([\"'])[\\s\\S]+(?=[\"']$)/,lookbehind:!0,alias:\"language-css\",inside:s.languages.css},punctuation:[{pattern:/^=/,alias:\"attr-equals\"},/\"|'/]}},\"attr-name\":/^style/i}}},t.tag))}(Prism);"
            ]
        },
        "prism-cypher.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cypher = {",
                "\t// https://neo4j.com/docs/cypher-manual/current/syntax/comments/",
                "\t'comment': /\\/\\/.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)(?=\\s*[{):])/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'relationship': {",
                "\t\tpattern: /(-\\[\\s*(?:\\w+\\s*|`(?:[^`\\\\\\r\\n])*`\\s*)?:\\s*|\\|\\s*:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\talias: 'property'",
                "\t},",
                "\t'identifier': {",
                "\t\tpattern: /`(?:[^`\\\\\\r\\n])*`/,",
                "\t\tgreedy: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "",
                "\t'variable': /\\$\\w+/,",
                "",
                "\t// https://neo4j.com/docs/cypher-manual/current/syntax/reserved/",
                "\t'keyword': /\\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\\b/i,",
                "",
                "\t'function': /\\b\\w+\\b(?=\\s*\\()/,",
                "",
                "\t'boolean': /\\b(?:true|false|null)\\b/i,",
                "\t'number': /\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\b/,",
                "\t// https://neo4j.com/docs/cypher-manual/current/syntax/operators/",
                "\t'operator': /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\\.\\.\\.?/,",
                "\t'punctuation': /[()[\\]{},;.]/",
                "};"
            ]
        },
        "prism-cypher.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cypher={comment:/\\/\\/.*/,string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/,greedy:!0},\"class-name\":{pattern:/(:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)(?=\\s*[{):])/,lookbehind:!0,greedy:!0},relationship:{pattern:/(-\\[\\s*(?:\\w+\\s*|`(?:[^`\\\\\\r\\n])*`\\s*)?:\\s*|\\|\\s*:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)/,lookbehind:!0,greedy:!0,alias:\"property\"},identifier:{pattern:/`(?:[^`\\\\\\r\\n])*`/,greedy:!0,alias:\"symbol\"},variable:/\\$\\w+/,keyword:/\\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\\b/i,function:/\\b\\w+\\b(?=\\s*\\()/,boolean:/\\b(?:true|false|null)\\b/i,number:/\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\b/,operator:/:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\\.\\.\\.?/,punctuation:/[()[\\]{},;.]/};"
            ]
        },
        "prism-d.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.d = Prism.languages.extend('clike', {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\t// Shebang",
                "\t\t\tpattern: /^\\s*#!.+/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: RegExp(/(^|[^\\\\])/.source + '(?:' + [",
                "\t\t\t\t// /+ comment +/",
                "\t\t\t\t// Allow one level of nesting",
                "\t\t\t\t/\\/\\+(?:\\/\\+(?:[^+]|\\+(?!\\/))*\\+\\/|(?!\\/\\+)[\\s\\S])*?\\+\\//.source,",
                "\t\t\t\t// // comment",
                "\t\t\t\t/\\/\\/.*/.source,",
                "\t\t\t\t// /* comment */",
                "\t\t\t\t/\\/\\*[\\s\\S]*?\\*\\//.source",
                "\t\t\t].join('|') + ')'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: RegExp([",
                "\t\t\t\t// r\"\", x\"\"",
                "\t\t\t\t/\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/.source,",
                "",
                "\t\t\t\t// q\"[]\", q\"()\", q\"<>\", q\"{}\"",
                "\t\t\t\t/\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/.source,",
                "",
                "\t\t\t\t// q\"IDENT",
                "\t\t\t\t// ...",
                "\t\t\t\t// IDENT\"",
                "\t\t\t\t/\\bq\"((?!\\d)\\w+)$[\\s\\S]*?^\\1\"/.source,",
                "",
                "\t\t\t\t// q\"//\", q\"||\", etc.",
                "\t\t\t\t/\\bq\"(.)[\\s\\S]*?\\2\"/.source,",
                "",
                "\t\t\t\t// Characters",
                "\t\t\t\t// 'a', '\\\\', '\\n', '\\xFF', '\\377', '\\uFFFF', '\\U0010FFFF', '\\quot'",
                "\t\t\t\t/'(?:\\\\(?:\\W|\\w+)|[^\\\\])'/.source,",
                "",
                "\t\t\t\t/([\"`])(?:\\\\[\\s\\S]|(?!\\3)[^\\\\])*\\3[cwd]?/.source",
                "\t\t\t].join('|'), 'm'),",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'token-string'",
                "\t\t}",
                "\t],",
                "",
                "\t// In order: $, keywords and special tokens, globally defined symbols",
                "\t'keyword': /\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,",
                "",
                "\t'number': [",
                "\t\t// The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator",
                "\t\t// Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"",
                "\t\t/\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i,",
                "\t\t{",
                "\t\t\tpattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "",
                "\t'operator': /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/",
                "});",
                "",
                "Prism.languages.insertBefore('d', 'keyword', {",
                "\t'property': /\\B@\\w*/",
                "});",
                "",
                "Prism.languages.insertBefore('d', 'function', {",
                "\t'register': {",
                "\t\t// Iasm registers",
                "\t\tpattern: /\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,",
                "\t\talias: 'variable'",
                "\t}",
                "});"
            ]
        },
        "prism-d.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.d=Prism.languages.extend(\"clike\",{comment:[{pattern:/^\\s*#!.+/,greedy:!0},{pattern:RegExp(\"(^|[^\\\\\\\\])(?:\"+[\"/\\\\+(?:/\\\\+(?:[^+]|\\\\+(?!/))*\\\\+/|(?!/\\\\+)[^])*?\\\\+/\",\"//.*\",\"/\\\\*[^]*?\\\\*/\"].join(\"|\")+\")\"),lookbehind:!0,greedy:!0}],string:[{pattern:RegExp(['\\\\b[rx]\"(?:\\\\\\\\[^]|[^\\\\\\\\\"])*\"[cwd]?','\\\\bq\"(?:\\\\[[^]*?\\\\]|\\\\([^]*?\\\\)|<[^]*?>|\\\\{[^]*?\\\\})\"','\\\\bq\"((?!\\\\d)\\\\w+)$[^]*?^\\\\1\"','\\\\bq\"(.)[^]*?\\\\2\"',\"'(?:\\\\\\\\(?:\\\\W|\\\\w+)|[^\\\\\\\\])'\",'([\"`])(?:\\\\\\\\[^]|(?!\\\\3)[^\\\\\\\\])*\\\\3[cwd]?'].join(\"|\"),\"m\"),greedy:!0},{pattern:/\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,greedy:!0,alias:\"token-string\"}],keyword:/\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,number:[/\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i,{pattern:/((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,lookbehind:!0}],operator:/\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/}),Prism.languages.insertBefore(\"d\",\"keyword\",{property:/\\B@\\w*/}),Prism.languages.insertBefore(\"d\",\"function\",{register:{pattern:/\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,alias:\"variable\"}});"
            ]
        },
        "prism-dart.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dart = Prism.languages.extend('clike', {",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'keyword': [",
                "\t\t/\\b(?:async|sync|yield)\\*/,",
                "\t\t/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|Function|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/",
                "\t],",
                "\t'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/",
                "});",
                "",
                "Prism.languages.insertBefore('dart','function',{",
                "\t'metadata': {",
                "\t\tpattern: /@\\w+/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});"
            ]
        },
        "prism-dart.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dart=Prism.languages.extend(\"clike\",{string:[{pattern:/r?(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0},{pattern:/r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],keyword:[/\\b(?:async|sync|yield)\\*/,/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|Function|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/],operator:/\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/}),Prism.languages.insertBefore(\"dart\",\"function\",{metadata:{pattern:/@\\w+/,alias:\"symbol\"}});"
            ]
        },
        "prism-dataweave.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {    ",
                "    Prism.languages.dataweave = {\t",
                "        'url': /\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,",
                "        'property': {",
                "            pattern: /(?:\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\w+)(?=\\s*[:@])/,",
                "            greedy: true",
                "        },",
                "        'string': {",
                "            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "            greedy: true",
                "        },",
                "        'mime-type':  /\\b(?:text|audio|video|application|multipart|image)\\/[\\w+-]+/,       ",
                "        'date': {",
                "            pattern: /\\|[\\w:+-]+\\|/,",
                "            greedy: true",
                "        },",
                "        'comment': [",
                "            {",
                "                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "                lookbehind: true,",
                "                greedy: true",
                "            },",
                "            {",
                "                pattern: /(^|[^\\\\:])\\/\\/.*/,",
                "                lookbehind: true,",
                "                greedy: true",
                "            }",
                "        ],",
                "        'regex': {",
                "            pattern: /\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,",
                "            greedy: true",
                "        },",
                "        'function': /\\b[A-Za-z_]\\w*(?=\\s*\\()/i,",
                "        'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,",
                "        'punctuation': /[{}[\\];(),.:@]/,        ",
                "        'operator': /<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|\\!|\\?/,",
                "        'boolean': /\\b(?:true|false)\\b/,",
                "        'keyword': /\\b(?:match|input|output|ns|type|update|null|if|else|using|unless|at|is|as|case|do|fun|var|not|and|or)\\b/",
                "    };",
                "    ",
                "}(Prism));"
            ]
        },
        "prism-dataweave.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dataweave={url:/\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,property:{pattern:/(?:\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\w+)(?=\\s*[:@])/,greedy:!0},string:{pattern:/([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},\"mime-type\":/\\b(?:text|audio|video|application|multipart|image)\\/[\\w+-]+/,date:{pattern:/\\|[\\w:+-]+\\|/,greedy:!0},comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],regex:{pattern:/\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,greedy:!0},function:/\\b[A-Za-z_]\\w*(?=\\s*\\()/i,number:/-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,punctuation:/[{}[\\];(),.:@]/,operator:/<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|\\!|\\?/,boolean:/\\b(?:true|false)\\b/,keyword:/\\b(?:match|input|output|ns|type|update|null|if|else|using|unless|at|is|as|case|do|fun|var|not|and|or)\\b/};"
            ]
        },
        "prism-dax.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dax = {",
                "    'comment': {",
                "        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/).*)/,",
                "        lookbehind: true",
                "    },",
                "    'data-field': {",
                "        pattern: /'(?:[^']|'')*'(?!')(?:\\[[ \\w\\xA0-\\uFFFF]+\\])?|\\w+\\[[ \\w\\xA0-\\uFFFF]+\\]/,",
                "        alias: 'symbol'",
                "    },",
                "    'measure': {",
                "        pattern: /\\[[ \\w\\xA0-\\uFFFF]+\\]/,",
                "        alias: 'constant'",
                "    },",
                "    'string': {",
                "        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,",
                "        greedy: true",
                "    },",
                "    'function': /\\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\\.DIST|BETA\\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\\.DIST|CHISQ\\.DIST\\.RT|CHISQ\\.INV|CHISQ\\.INV\\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\\.NORM|CONFIDENCE\\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\\.DIST|NORM\\.INV|NORM\\.S\\.DIST|NORM\\.S\\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\\.EXC|PERCENTILE\\.INC|PERCENTILEX\\.EXC|PERCENTILEX\\.INC|PERMUT|PI|POISSON\\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\\.P|STDEV\\.S|STDEVX\\.P|STDEVX\\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\\.DIST|T\\.DIST\\.2T|T\\.DIST\\.RT|T\\.INV|T\\.INV\\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\\.P|VAR\\.S|VARX\\.P|VARX\\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\\s*\\()/i,",
                "    'keyword': /\\b(?:DEFINE|MEASURE|EVALUATE|ORDER\\s+BY|RETURN|VAR|START\\s+AT|ASC|DESC)\\b/i,",
                "    'boolean': {",
                "        pattern: /\\b(?:TRUE|FALSE|NULL)\\b/i,",
                "        alias: 'constant'",
                "    },",
                "    'number': /\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,",
                "    'operator': /:=|[-+*\\/=^]|&&?|\\|\\||<(?:=>?|<|>)?|>[>=]?|\\b(?:IN|NOT)\\b/i,",
                "    'punctuation': /[;\\[\\](){}`,.]/",
                "};"
            ]
        },
        "prism-dax.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dax={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/).*)/,lookbehind:!0},\"data-field\":{pattern:/'(?:[^']|'')*'(?!')(?:\\[[ \\w\\xA0-\\uFFFF]+\\])?|\\w+\\[[ \\w\\xA0-\\uFFFF]+\\]/,alias:\"symbol\"},measure:{pattern:/\\[[ \\w\\xA0-\\uFFFF]+\\]/,alias:\"constant\"},string:{pattern:/\"(?:[^\"]|\"\")*\"(?!\")/,greedy:!0},function:/\\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\\.DIST|BETA\\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\\.DIST|CHISQ\\.DIST\\.RT|CHISQ\\.INV|CHISQ\\.INV\\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\\.NORM|CONFIDENCE\\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\\.DIST|NORM\\.INV|NORM\\.S\\.DIST|NORM\\.S\\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\\.EXC|PERCENTILE\\.INC|PERCENTILEX\\.EXC|PERCENTILEX\\.INC|PERMUT|PI|POISSON\\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\\.P|STDEV\\.S|STDEVX\\.P|STDEVX\\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\\.DIST|T\\.DIST\\.2T|T\\.DIST\\.RT|T\\.INV|T\\.INV\\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\\.P|VAR\\.S|VARX\\.P|VARX\\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\\s*\\()/i,keyword:/\\b(?:DEFINE|MEASURE|EVALUATE|ORDER\\s+BY|RETURN|VAR|START\\s+AT|ASC|DESC)\\b/i,boolean:{pattern:/\\b(?:TRUE|FALSE|NULL)\\b/i,alias:\"constant\"},number:/\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,operator:/:=|[-+*\\/=^]|&&?|\\|\\||<(?:=>?|<|>)?|>[>=]?|\\b(?:IN|NOT)\\b/i,punctuation:/[;\\[\\](){}`,.]/};"
            ]
        },
        "prism-dhall.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// ABNF grammar:",
                "// https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf",
                "",
                "Prism.languages.dhall = {",
                "\t// Multi-line comments can be nested. E.g. {- foo {- bar -} -}",
                "\t// The multi-line pattern is essentially this:",
                "\t//   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}",
                "\t'comment': /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\$\\{[^{}]*\\}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'expression': {",
                "\t\t\t\t\t\tpattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'language-dhall',",
                "\t\t\t\t\t\tinside: null // see blow",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'punctuation': /\\$\\{|\\}/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /`[^`]*`/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'url': {",
                "\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596",
                "\t\tpattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'env': {",
                "\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661",
                "\t\tpattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'function': /^env/,",
                "\t\t\t'operator': /^:/,",
                "\t\t\t'variable': /[\\s\\S]+/",
                "\t\t}",
                "\t},",
                "\t'hash': {",
                "\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725",
                "\t\tpattern: /\\bsha256:[\\da-fA-F]{64}\\b/,",
                "\t\tinside: {",
                "\t\t\t'function': /sha256/,",
                "\t\t\t'operator': /:/,",
                "\t\t\t'number': /[\\da-fA-F]{64}/",
                "\t\t}",
                "\t},",
                "",
                "\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359",
                "\t'keyword': /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,",
                "\t'builtin': /\\b(?:Some|None)\\b/,",
                "",
                "\t'boolean': /\\b(?:False|True)\\b/,",
                "\t'number': /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,",
                "\t'operator': /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||[!=]=|===|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,",
                "\t'punctuation': /\\.\\.|[{}\\[\\](),./]/,",
                "",
                "\t// we'll just assume that every capital word left is a type name",
                "\t'class-name': /\\b[A-Z]\\w*\\b/",
                "};",
                "",
                "Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;"
            ]
        },
        "prism-dhall.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dhall={comment:/--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,greedy:!0,inside:{interpolation:{pattern:/\\$\\{[^{}]*\\}/,inside:{expression:{pattern:/(^\\$\\{)[\\s\\S]+(?=\\}$)/,lookbehind:!0,alias:\"language-dhall\",inside:null},punctuation:/\\$\\{|\\}/}}}},label:{pattern:/`[^`]*`/,greedy:!0},url:{pattern:/\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,greedy:!0},env:{pattern:/\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,greedy:!0,inside:{function:/^env/,operator:/^:/,variable:/[\\s\\S]+/}},hash:{pattern:/\\bsha256:[\\da-fA-F]{64}\\b/,inside:{function:/sha256/,operator:/:/,number:/[\\da-fA-F]{64}/}},keyword:/\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,builtin:/\\b(?:Some|None)\\b/,boolean:/\\b(?:False|True)\\b/,number:/\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,operator:/\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||[!=]=|===|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,punctuation:/\\.\\.|[{}\\[\\](),./]/,\"class-name\":/\\b[A-Z]\\w*\\b/},Prism.languages.dhall.string.inside.interpolation.inside.expression.inside=Prism.languages.dhall;"
            ]
        },
        "prism-diff.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.diff = {",
                "\t\t'coord': [",
                "\t\t\t// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").",
                "\t\t\t/^(?:\\*{3}|-{3}|\\+{3}).*$/m,",
                "\t\t\t// Match \"@@ ... @@\" coord lines in unified diff.",
                "\t\t\t/^@@.*@@$/m,",
                "\t\t\t// Match coord lines in normal diff (starts with a number).",
                "\t\t\t/^\\d.*$/m",
                "\t\t]",
                "",
                "\t\t// deleted, inserted, unchanged, diff",
                "\t};",
                "",
                "\t/**",
                "\t * A map from the name of a block to its line prefix.",
                "\t *",
                "\t * @type {Object<string, string>}",
                "\t */",
                "\tvar PREFIXES = {",
                "\t\t'deleted-sign': '-',",
                "\t\t'deleted-arrow': '<',",
                "\t\t'inserted-sign': '+',",
                "\t\t'inserted-arrow': '>',",
                "\t\t'unchanged': ' ',",
                "\t\t'diff': '!',",
                "\t};",
                "",
                "\t// add a token for each prefix",
                "\tObject.keys(PREFIXES).forEach(function (name) {",
                "\t\tvar prefix = PREFIXES[name];",
                "",
                "\t\tvar alias = [];",
                "\t\tif (!/^\\w+$/.test(name)) { // \"deleted-sign\" -> \"deleted\"",
                "\t\t\talias.push(/\\w+/.exec(name)[0]);",
                "\t\t}",
                "\t\tif (name === \"diff\") {",
                "\t\t\talias.push(\"bold\");",
                "\t\t}",
                "",
                "\t\tPrism.languages.diff[name] = {",
                "\t\t\tpattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),",
                "\t\t\talias: alias,",
                "\t\t\tinside: {",
                "\t\t\t\t'line': {",
                "\t\t\t\t\tpattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'prefix': {",
                "\t\t\t\t\tpattern: /[\\s\\S]/,",
                "\t\t\t\t\talias: /\\w+/.exec(name)[0]",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t};",
                "",
                "\t});",
                "",
                "\t// make prefixes available to Diff plugin",
                "\tObject.defineProperty(Prism.languages.diff, 'PREFIXES', {",
                "\t\tvalue: PREFIXES",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-diff.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(i){i.languages.diff={coord:[/^(?:\\*{3}|-{3}|\\+{3}).*$/m,/^@@.*@@$/m,/^\\d.*$/m]};var r={\"deleted-sign\":\"-\",\"deleted-arrow\":\"<\",\"inserted-sign\":\"+\",\"inserted-arrow\":\">\",unchanged:\" \",diff:\"!\"};Object.keys(r).forEach(function(e){var n=r[e],a=[];/^\\w+$/.test(e)||a.push(/\\w+/.exec(e)[0]),\"diff\"===e&&a.push(\"bold\"),i.languages.diff[e]={pattern:RegExp(\"^(?:[\"+n+\"].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+\",\"m\"),alias:a,inside:{line:{pattern:/(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,lookbehind:!0},prefix:{pattern:/[\\s\\S]/,alias:/\\w+/.exec(e)[0]}}}}),Object.defineProperty(i.languages.diff,\"PREFIXES\",{value:r})}(Prism);"
            ]
        },
        "prism-django.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.",
                "// Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.",
                "",
                "(function (Prism) {",
                "",
                "\tPrism.languages.django = {",
                "\t\t'comment': /^{#[\\s\\S]*?#}$/,",
                "\t\t'tag': {",
                "\t\t\tpattern: /(^{%[+-]?\\s*)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^{[{%][+-]?|[+-]?[}%]}$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'filter': {",
                "\t\t\tpattern: /(\\|)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'test': {",
                "\t\t\tpattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'function': /\\b[a-z_]\\w+(?=\\s*\\()/i,",
                "\t\t'keyword': /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,",
                "\t\t'operator': /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,",
                "\t\t'boolean': /[Tt]rue|[Ff]alse|[Nn]one/,",
                "\t\t'variable': /\\b\\w+?\\b/,",
                "\t\t'punctuation': /[{}[\\](),.:;]/",
                "\t};",
                "",
                "",
                "\tvar pattern = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g;",
                "\tvar markupTemplating = Prism.languages['markup-templating'];",
                "",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tmarkupTemplating.buildPlaceholders(env, 'django', pattern);",
                "\t});",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tmarkupTemplating.tokenizePlaceholders(env, 'django');",
                "\t});",
                "",
                "\t// Add an Jinja2 alias",
                "\tPrism.languages.jinja2 = Prism.languages.django;",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tmarkupTemplating.buildPlaceholders(env, 'jinja2', pattern);",
                "\t});",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tmarkupTemplating.tokenizePlaceholders(env, 'jinja2');",
                "\t});",
                "",
                "})(Prism);"
            ]
        },
        "prism-django.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.django={comment:/^{#[\\s\\S]*?#}$/,tag:{pattern:/(^{%[+-]?\\s*)\\w+/,lookbehind:!0,alias:\"keyword\"},delimiter:{pattern:/^{[{%][+-]?|[+-]?[}%]}$/,alias:\"punctuation\"},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},filter:{pattern:/(\\|)\\w+/,lookbehind:!0,alias:\"function\"},test:{pattern:/(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,lookbehind:!0,alias:\"function\"},function:/\\b[a-z_]\\w+(?=\\s*\\()/i,keyword:/\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,operator:/[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,number:/\\b\\d+(?:\\.\\d+)?\\b/,boolean:/[Tt]rue|[Ff]alse|[Nn]one/,variable:/\\b\\w+?\\b/,punctuation:/[{}[\\](),.:;]/};var n=/{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g,o=e.languages[\"markup-templating\"];e.hooks.add(\"before-tokenize\",function(e){o.buildPlaceholders(e,\"django\",n)}),e.hooks.add(\"after-tokenize\",function(e){o.tokenizePlaceholders(e,\"django\")}),e.languages.jinja2=e.languages.django,e.hooks.add(\"before-tokenize\",function(e){o.buildPlaceholders(e,\"jinja2\",n)}),e.hooks.add(\"after-tokenize\",function(e){o.tokenizePlaceholders(e,\"jinja2\")})}(Prism);"
            ]
        },
        "prism-dns-zone-file.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['dns-zone-file'] = {",
                "\t'comment': /;.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\$ORIGIN[ \\t]+)\\S+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|\\s)@(?=\\s|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t}",
                "\t],",
                "\t'keyword': /^\\$(?:ORIGIN|INCLUDE|TTL)(?=\\s|$)/m,",
                "\t'class': {",
                "\t\t// https://tools.ietf.org/html/rfc1035#page-13",
                "\t\tpattern: /(^|\\s)(?:IN|CH|CS|HS)(?=\\s|$)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'type': {",
                "\t\t// https://en.wikipedia.org/wiki/List_of_DNS_record_types",
                "\t\tpattern: /(^|\\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\\s|$)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'punctuation': /[()]/",
                "};",
                "",
                "Prism.languages['dns-zone'] = Prism.languages['dns-zone-file']"
            ]
        },
        "prism-dns-zone-file.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"dns-zone-file\"]={comment:/;.*/,string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},variable:[{pattern:/(^\\$ORIGIN[ \\t]+)\\S+/m,lookbehind:!0},{pattern:/(^|\\s)@(?=\\s|$)/,lookbehind:!0}],keyword:/^\\$(?:ORIGIN|INCLUDE|TTL)(?=\\s|$)/m,class:{pattern:/(^|\\s)(?:IN|CH|CS|HS)(?=\\s|$)/,lookbehind:!0,alias:\"keyword\"},type:{pattern:/(^|\\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\\s|$)/,lookbehind:!0,alias:\"keyword\"},punctuation:/[()]/},Prism.languages[\"dns-zone\"]=Prism.languages[\"dns-zone-file\"];"
            ]
        },
        "prism-docker.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.docker = {",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/mi,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t'comment': {",
                "\t\tpattern: /#.*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'punctuation': /---|\\.\\.\\.|[:[\\]{}\\-,|>?]/",
                "};",
                "",
                "Prism.languages.dockerfile = Prism.languages.docker;"
            ]
        },
        "prism-docker.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.docker={keyword:{pattern:/(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/im,lookbehind:!0},string:/(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,comment:{pattern:/#.*/,greedy:!0},punctuation:/---|\\.\\.\\.|[:[\\]{}\\-,|>?]/},Prism.languages.dockerfile=Prism.languages.docker;"
            ]
        },
        "prism-ebnf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ebnf = {",
                "\t'comment': /\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t'string': {",
                "\t\tpattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'special': {",
                "\t\tpattern: /\\?[^?\\r\\n]*\\?/,",
                "\t\tgreedy: true,",
                "\t\talias: 'class-name'",
                "\t},",
                "",
                "\t'definition': {",
                "\t\tpattern: /^(\\s*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,",
                "\t\tlookbehind: true,",
                "\t\talias: ['rule', 'keyword']",
                "\t},",
                "\t'rule': /\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,",
                "",
                "\t'punctuation': /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,",
                "\t'operator': /[-=|*/!]/",
                "};"
            ]
        },
        "prism-ebnf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ebnf={comment:/\\(\\*[\\s\\S]*?\\*\\)/,string:{pattern:/\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,greedy:!0},special:{pattern:/\\?[^?\\r\\n]*\\?/,greedy:!0,alias:\"class-name\"},definition:{pattern:/^(\\s*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,lookbehind:!0,alias:[\"rule\",\"keyword\"]},rule:/\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,punctuation:/\\([:/]|[:/]\\)|[.,;()[\\]{}]/,operator:/[-=|*/!]/};"
            ]
        },
        "prism-editorconfig.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.editorconfig = {",
                "\t// https://editorconfig-specification.readthedocs.io/en/latest/",
                "\t'comment': /[;#].*/,",
                "\t'section': {",
                "\t\tpattern: /(^[ \\t]*)\\[.+]/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword',",
                "\t\tinside: {",
                "\t\t\t'regex': /\\\\\\\\[\\[\\]{},!?.*]/, // Escape special characters with '\\\\'",
                "\t\t\t'operator': /[!?]|\\.\\.|\\*{1,2}/,",
                "\t\t\t'punctuation': /[\\[\\]{},]/",
                "\t\t}",
                "\t},",
                "\t'property': {",
                "\t\tpattern: /(^[ \\t]*)[^\\s=]+(?=[ \\t]*=)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'value': {",
                "\t\tpattern: /=.*/,",
                "\t\talias: 'string',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^=/",
                "\t\t}",
                "\t}",
                "};"
            ]
        },
        "prism-editorconfig.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.editorconfig={comment:/[;#].*/,section:{pattern:/(^[ \\t]*)\\[.+]/m,lookbehind:!0,alias:\"keyword\",inside:{regex:/\\\\\\\\[\\[\\]{},!?.*]/,operator:/[!?]|\\.\\.|\\*{1,2}/,punctuation:/[\\[\\]{},]/}},property:{pattern:/(^[ \\t]*)[^\\s=]+(?=[ \\t]*=)/m,lookbehind:!0},value:{pattern:/=.*/,alias:\"string\",inside:{punctuation:/^=/}}};"
            ]
        },
        "prism-eiffel.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.eiffel = {",
                "\t'comment': /--.*/,",
                "\t'string': [",
                "\t\t// Aligned-verbatim-strings",
                "\t\t{",
                "\t\t\tpattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// Non-aligned-verbatim-strings",
                "\t\t{",
                "\t\t\tpattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// Single-line string",
                "\t\t{",
                "\t\t\tpattern: /\"(?:%(?:(?!\\n)\\s)*\\n\\s*%|%\\S|[^%\"\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t// normal char | special char | char code",
                "\t'char': /'(?:%.|[^%'\\r\\n])+'/,",
                "\t'keyword': /\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,",
                "\t'boolean': /\\b(?:True|False)\\b/i,",
                "\t// Convention: class-names are always all upper-case characters",
                "\t'class-name': {",
                "\t\t'pattern': /\\b[A-Z][\\dA-Z_]*\\b/,",
                "\t\t'alias': 'builtin'",
                "\t},",
                "\t'number': [",
                "\t\t// hexa | octal | bin",
                "\t\t/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,",
                "\t\t// Decimal",
                "\t\t/(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i",
                "\t],",
                "\t'punctuation': /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,",
                "\t'operator': /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/",
                "};"
            ]
        },
        "prism-eiffel.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.eiffel={comment:/--.*/,string:[{pattern:/\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,greedy:!0},{pattern:/\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,greedy:!0},{pattern:/\"(?:%(?:(?!\\n)\\s)*\\n\\s*%|%\\S|[^%\"\\r\\n])*\"/,greedy:!0}],char:/'(?:%.|[^%'\\r\\n])+'/,keyword:/\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,boolean:/\\b(?:True|False)\\b/i,\"class-name\":{pattern:/\\b[A-Z][\\dA-Z_]*\\b/,alias:\"builtin\"},number:[/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,/(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i],punctuation:/:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,operator:/\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/};"
            ]
        },
        "prism-ejs.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.ejs = {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^<%[-_=]?|[-_]?%>$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'comment': /^#[\\s\\S]*/,",
                "\t\t'language-javascript': {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');",
                "\t});",
                "",
                "\tPrism.languages.eta = Prism.languages.ejs;",
                "",
                "}(Prism));"
            ]
        },
        "prism-ejs.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.ejs={delimiter:{pattern:/^<%[-_=]?|[-_]?%>$/,alias:\"punctuation\"},comment:/^#[\\s\\S]*/,\"language-javascript\":{pattern:/[\\s\\S]+/,inside:e.languages.javascript}},e.hooks.add(\"before-tokenize\",function(a){e.languages[\"markup-templating\"].buildPlaceholders(a,\"ejs\",/<%(?!%)[\\s\\S]+?%>/g)}),e.hooks.add(\"after-tokenize\",function(a){e.languages[\"markup-templating\"].tokenizePlaceholders(a,\"ejs\")}),e.languages.eta=e.languages.ejs}(Prism);"
            ]
        },
        "prism-elixir.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elixir = {",
                "\t'comment': /#.*/m,",
                "\t// ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>",
                "\t'regex': {",
                "\t\tpattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': [",
                "\t\t{",
                "\t\t\t// ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>",
                "\t\t\tpattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Multi-line strings are allowed",
                "\t\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'atom': {",
                "\t\t// Look-behind prevents bad highlighting of the :: operator",
                "\t\tpattern: /(^|[^:]):\\w+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t// Look-ahead prevents bad highlighting of the :: operator",
                "\t'attr-name': /\\w+\\??:(?!:)/,",
                "\t'capture': {",
                "\t\t// Look-behind prevents bad highlighting of the && operator",
                "\t\tpattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'argument': {",
                "\t\t// Look-behind prevents bad highlighting of the && operator",
                "\t\tpattern: /(^|[^&])&\\d+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'attribute': {",
                "\t\tpattern: /@\\w+/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,",
                "\t'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,",
                "\t'boolean': /\\b(?:true|false|nil)\\b/,",
                "\t'operator': [",
                "\t\t/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /([^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /([^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /<<|>>|[.,%\\[\\]{}()]/",
                "};",
                "",
                "Prism.languages.elixir.string.forEach(function(o) {",
                "\to.inside = {",
                "\t\t'interpolation': {",
                "\t\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.elixir",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "});"
            ]
        },
        "prism-elixir.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elixir={comment:/#.*/m,regex:{pattern:/~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0,inside:{}},{pattern:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\\w+/,lookbehind:!0,alias:\"symbol\"},\"attr-name\":/\\w+\\??:(?!:)/,capture:{pattern:/(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,lookbehind:!0,alias:\"function\"},argument:{pattern:/(^|[^&])&\\d+/,lookbehind:!0,alias:\"variable\"},attribute:{pattern:/@\\w+/,alias:\"variable\"},number:/\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,keyword:/\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,boolean:/\\b(?:true|false|nil)\\b/,operator:[/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\\[\\]{}()]/},Prism.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:Prism.languages.elixir}}}});"
            ]
        },
        "prism-elm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elm = {",
                "\t'comment': /--.*|{-[\\s\\S]*?-}/,",
                "\t'char': {",
                "\t\tpattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': [",
                "\t\t{",
                "\t\t\t// Multiline strings are wrapped in triple \". Quotes may appear unescaped.",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'import-statement': {",
                "\t\t// The imported or hidden names are not included in this import",
                "\t\t// statement. This is because we want to highlight those exactly like",
                "\t\t// we do for the names in the program.",
                "\t\tpattern: /^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,",
                "\t\tinside: {",
                "\t\t\t'keyword': /\\b(?:import|as|exposing)\\b/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,",
                "\t// These are builtin variables only. Constructors are highlighted later as a constant.",
                "\t'builtin': /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,",
                "\t// decimal integers and floating point numbers | hexadecimal integers",
                "\t'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,",
                "\t// Most of this is needed because of the meaning of a single '.'.",
                "\t// If it stands alone freely, it is the function composition.",
                "\t// It may also be a separator between a module name and an identifier => no",
                "\t// operator. If it comes together with other special characters it is an",
                "\t// operator too.",
                "\t// Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!",
                "\t// Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ",
                "\t'operator': /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,",
                "\t// In Elm, nearly everything is a variable, do not highlight these.",
                "\t'hvariable': /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,",
                "\t'constant': /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,",
                "\t'punctuation': /[{}[\\]|(),.:]/",
                "};"
            ]
        },
        "prism-elm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elm={comment:/--.*|{-[\\s\\S]*?-}/,char:{pattern:/'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,greedy:!0},string:[{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0},{pattern:/\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,greedy:!0}],\"import-statement\":{pattern:/^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,inside:{keyword:/\\b(?:import|as|exposing)\\b/}},keyword:/\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,builtin:/\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,hvariable:/\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,constant:/\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,punctuation:/[{}[\\]|(),.:]/};"
            ]
        },
        "prism-erb.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.erb = Prism.languages.extend('ruby', {});",
                "\tPrism.languages.insertBefore('erb', 'comment', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^<%=?|%>$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-erb.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.erb=n.languages.extend(\"ruby\",{}),n.languages.insertBefore(\"erb\",\"comment\",{delimiter:{pattern:/^<%=?|%>$/,alias:\"punctuation\"}}),n.hooks.add(\"before-tokenize\",function(e){n.languages[\"markup-templating\"].buildPlaceholders(e,\"erb\",/<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm)}),n.hooks.add(\"after-tokenize\",function(e){n.languages[\"markup-templating\"].tokenizePlaceholders(e,\"erb\")})}(Prism);"
            ]
        },
        "prism-erlang.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.erlang = {",
                "\t'comment': /%.+/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'quoted-function': {",
                "\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'quoted-atom': {",
                "\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,",
                "\t\talias: 'atom'",
                "\t},",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,",
                "\t'number': [",
                "\t\t/\\$\\\\?./,",
                "\t\t/\\d+#[a-z0-9]+/i,",
                "\t\t/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i",
                "\t],",
                "\t'function': /\\b[a-z][\\w@]*(?=\\()/,",
                "\t'variable': {",
                "\t\t// Look-behind is used to prevent wrong highlighting of atoms containing \"@\"",
                "\t\tpattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': [",
                "\t\t/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /(^|[^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /(^|[^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'atom': /\\b[a-z][\\w@]*/,",
                "\t'punctuation': /[()[\\]{}:;,.#|]|<<|>>/",
                "",
                "};"
            ]
        },
        "prism-erlang.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.erlang={comment:/%.+/,string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},\"quoted-function\":{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,alias:\"function\"},\"quoted-atom\":{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'/,alias:\"atom\"},boolean:/\\b(?:true|false)\\b/,keyword:/\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,number:[/\\$\\\\?./,/\\d+#[a-z0-9]+/i,/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],function:/\\b[a-z][\\w@]*(?=\\()/,variable:{pattern:/(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,lookbehind:!0},operator:[/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],atom:/\\b[a-z][\\w@]*/,punctuation:/[()[\\]{}:;,.#|]|<<|>>/};"
            ]
        },
        "prism-etlua.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.etlua = {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^<%[-=]?|-?%>$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'language-lua': {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages.lua",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tvar pattern = /<%[\\s\\S]+?%>/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'etlua', pattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-etlua.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.etlua={delimiter:{pattern:/^<%[-=]?|-?%>$/,alias:\"punctuation\"},\"language-lua\":{pattern:/[\\s\\S]+/,inside:e.languages.lua}},e.hooks.add(\"before-tokenize\",function(a){e.languages[\"markup-templating\"].buildPlaceholders(a,\"etlua\",/<%[\\s\\S]+?%>/g)}),e.hooks.add(\"after-tokenize\",function(a){e.languages[\"markup-templating\"].tokenizePlaceholders(a,\"etlua\")})}(Prism);"
            ]
        },
        "prism-excel-formula.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['excel-formula'] = {",
                "\t'comment': {",
                "\t\tpattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"]|\"\")*\"(?!\")/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'reference': {",
                "\t\t// https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/",
                "",
                "\t\t// Sales!B2",
                "\t\t// 'Winter sales'!B2",
                "\t\t// [Sales.xlsx]Jan!B2:B5",
                "\t\t// D:\\Reports\\[Sales.xlsx]Jan!B2:B5",
                "\t\t// '[Sales.xlsx]Jan sales'!B2:B5",
                "\t\t// 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5",
                "",
                "\t\tpattern: /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string',",
                "\t\tinside: {",
                "\t\t\t'operator': /!$/,",
                "\t\t\t'punctuation': /'/,",
                "\t\t\t'sheet': {",
                "\t\t\t\tpattern: /[^[\\]]+$/,",
                "\t\t\t\talias: 'function'",
                "\t\t\t},",
                "\t\t\t'file': {",
                "\t\t\t\tpattern: /\\[[^[\\]]+\\]$/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /[[\\]]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'path': /[\\s\\S]+/",
                "\t\t}",
                "\t},",
                "\t'function-name': {",
                "\t\tpattern: /\\b[A-Z]\\w*(?=\\()/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'range': {",
                "\t\tpattern: /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t'operator': /:/,",
                "\t\t\t'cell': /\\$?[A-Z]+\\$?\\d+/i,",
                "\t\t\t'column': /\\$?[A-Z]+/i,",
                "\t\t\t'row': /\\$?\\d+/",
                "\t\t}",
                "\t},",
                "\t'cell': {",
                "\t\t// Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.",
                "\t\t// To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.",
                "\t\tpattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,",
                "\t\talias: 'property'",
                "\t},",
                "\t'number': /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,",
                "\t'boolean': /\\b(?:TRUE|FALSE)\\b/i,",
                "\t'operator': /[-+*/^%=&,]|<[=>]?|>=?/,",
                "\t'punctuation': /[[\\]();{}|]/",
                "};",
                "",
                "Prism.languages['xlsx'] = Prism.languages['xls'] = Prism.languages['excel-formula'];"
            ]
        },
        "prism-excel-formula.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"excel-formula\"]={comment:{pattern:/(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,lookbehind:!0,greedy:!0},string:{pattern:/\"(?:[^\"]|\"\")*\"(?!\")/,greedy:!0},reference:{pattern:/(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,greedy:!0,alias:\"string\",inside:{operator:/!$/,punctuation:/'/,sheet:{pattern:/[^[\\]]+$/,alias:\"function\"},file:{pattern:/\\[[^[\\]]+\\]$/,inside:{punctuation:/[[\\]]/}},path:/[\\s\\S]+/}},\"function-name\":{pattern:/\\b[A-Z]\\w*(?=\\()/i,alias:\"keyword\"},range:{pattern:/\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,alias:\"property\",inside:{operator:/:/,cell:/\\$?[A-Z]+\\$?\\d+/i,column:/\\$?[A-Z]+/i,row:/\\$?\\d+/}},cell:{pattern:/\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,alias:\"property\"},number:/(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,boolean:/\\b(?:TRUE|FALSE)\\b/i,operator:/[-+*/^%=&,]|<[=>]?|>=?/,punctuation:/[[\\]();{}|]/},Prism.languages.xlsx=Prism.languages.xls=Prism.languages[\"excel-formula\"];"
            ]
        },
        "prism-factor.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar comment_inside = {",
                "\t\t'function': /\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/",
                "\t};",
                "\tvar string_inside = {",
                "\t\t'number': /\\\\[^\\s']|%\\w/",
                "\t};",
                "",
                "\tvar factor = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\t// ! single-line exclamation point comments with whitespace after/around the !",
                "\t\t\t\tpattern: /(^|\\s)(?:! .*|!$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: comment_inside",
                "\t\t\t},",
                "",
                "\t\t\t/* from basis/multiline: */",
                "\t\t\t{",
                "\t\t\t\t// /* comment */, /* comment*/",
                "\t\t\t\tpattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: comment_inside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// ![[ comment ]] , ![===[ comment]===]",
                "\t\t\t\tpattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: comment_inside",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\t'number': [",
                "\t\t\t{",
                "\t\t\t\t// basic base 10 integers 9, -9",
                "\t\t\t\tpattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9",
                "\t\t\t\tpattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.",
                "\t\t\t\tpattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// positive mixed numbers 23+1/5 +23+1/5",
                "\t\t\t\tpattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// negative mixed numbers -23-1/5",
                "\t\t\t\tpattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13",
                "\t\t\t\t// and scientific notation with base 10 exponents 3e4 3e-4 .3e-4",
                "\t\t\t\tpattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// NAN literal syntax NAN: 80000deadbeef, NAN: a",
                "\t\t\t\tpattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t/*",
                "\t\t\t\t\tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...",
                "\t\t\t\t\t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.",
                "\t\t\t\t\tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"",
                "\t\t\t\t\t<https://docs.factorcode.org/content/article-syntax-floats.html>",
                "\t\t\t\t*/",
                "\t\t\t\tpattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\t// R/ regexp?\\/\\\\/",
                "\t\t'regexp': {",
                "\t\t\tpattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'number',",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': /\\\\\\S/,",
                "\t\t\t\t'keyword': /[+?*\\[\\]^$(){}.|]/,",
                "\t\t\t\t'operator': {",
                "\t\t\t\t\tpattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'boolean': {",
                "\t\t\tpattern: /(^|\\s)[tf](?=\\s|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t// SBUF\" asd\", URL\" ://...\", P\" /etc/\"",
                "\t\t'custom-string': {",
                "\t\t\tpattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'number': /\\\\\\S|%\\w|\\//",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'multiline-string': [",
                "\t\t\t{",
                "\t\t\t\t// STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)",
                "\t\t\t\tpattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'number': string_inside.number,",
                "\t\t\t\t\t// trailing semicolon on its own line",
                "\t\t\t\t\t'semicolon-or-setlocal': {",
                "\t\t\t\t\t\tpattern: /((?:\\n|\\r\\n)\\s*);(?=\\s|$)/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'function'",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)",
                "\t\t\t\tpattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: string_inside",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// [[ string ]], [==[ string]==]",
                "\t\t\t\tpattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: string_inside",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\t'special-using': {",
                "\t\t\tpattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function',",
                "\t\t\tinside: {",
                "\t\t\t\t// this is essentially a regex for vocab names, which i don't want to specify",
                "\t\t\t\t// but the USING: gets picked up as a vocab name",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: /(\\s)[^:\\s]+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t/* this description of stack effect literal syntax is not complete and not as specific as theoretically possible",
                "\t\t\ttrying to do better is more work and regex-computation-time than it's worth though.",
                "\t\t\t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents",
                "\t\t\t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)",
                "\t\t\t- we'd like if the following variable name conventions were recognised specifically:",
                "\t\t\t\tspecial row variables = ..a b..",
                "\t\t\t\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )",
                "\t\t\t\tword throws unconditional error = *",
                "\t\t\t\tany other word-like variable name = a ? q' etc",
                "",
                "\t\t\thttps://docs.factorcode.org/content/article-effects.html",
                "",
                "\t\t\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope",
                "\t\t\tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)",
                "\t\t*/",
                "",
                "\t\t// current solution is not great",
                "\t\t'stack-effect-delimiter': [",
                "\t\t\t{",
                "\t\t\t\t// opening parenthesis",
                "\t\t\t\tpattern: /(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'operator'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// middle --",
                "\t\t\t\tpattern: /(\\s)--(?=\\s)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'operator'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// closing parenthesis",
                "\t\t\t\tpattern: /(\\s)\\)(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'operator'",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\t'combinators': {",
                "\t\t\tpattern: null,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "",
                "\t\t'kernel-builtin': {",
                "\t\t\tpattern: null,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "",
                "\t\t'sequences-builtin': {",
                "\t\t\tpattern: null,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "",
                "\t\t'math-builtin': {",
                "\t\t\tpattern: null,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "",
                "\t\t'constructor-word': {",
                "\t\t\t// <array> but not <=>",
                "\t\t\tpattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "",
                "\t\t'other-builtin-syntax': {",
                "\t\t\tpattern: null,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "",
                "\t\t/*",
                "\t\t\tfull list of supported word naming conventions: (the convention appears outside of the [brackets])",
                "\t\t\t\tset-[x]",
                "\t\t\t\tchange-[x]",
                "\t\t\t\twith-[x]",
                "\t\t\t\tnew-[x]",
                "\t\t\t\t>[string]",
                "\t\t\t\t[base]>",
                "\t\t\t\t[string]>[number]",
                "\t\t\t\t+[symbol]+",
                "\t\t\t\t[boolean-word]?",
                "\t\t\t\t?[of]",
                "\t\t\t\t[slot-reader]>>",
                "\t\t\t\t>>[slot-setter]",
                "\t\t\t\t[slot-writer]<<",
                "\t\t\t\t([implementation-detail])",
                "\t\t\t\t[mutater]!",
                "\t\t\t\t[variant]*",
                "\t\t\t\t[prettyprint].",
                "\t\t\t\t$[help-markup]",
                "",
                "\t\t\t<constructors>, SYNTAX:, etc are supported by their own patterns.",
                "",
                "\t\t\t`with` and `new` from `kernel` are their own builtins.",
                "",
                "\t\t\tsee <https://docs.factorcode.org/content/article-conventions.html>",
                "\t\t*/",
                "\t\t'conventionally-named-word': {",
                "\t\t\tpattern: /(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "",
                "\t\t'colon-syntax': {",
                "\t\t\tpattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "",
                "\t\t'semicolon-or-setlocal': {",
                "\t\t\tpattern: /(\\s)(?:;|:>)(?=\\s|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "",
                "\t\t// do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax",
                "\t\t'curly-brace-literal-delimiter': [",
                "\t\t\t{",
                "\t\t\t\t// opening",
                "\t\t\t\tpattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'operator'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// closing",
                "\t\t\t\tpattern: /(\\s)\\}(?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'operator'",
                "\t\t\t},",
                "",
                "\t\t],",
                "",
                "\t\t// do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax",
                "\t\t'quotation-delimiter': [",
                "\t\t\t{",
                "\t\t\t\t// opening",
                "\t\t\t\tpattern: /(^|\\s)\\[(?=\\s)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'operator'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// closing",
                "\t\t\t\tpattern: /(\\s)\\](?=\\s|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'operator'",
                "\t\t\t},",
                "\t\t],",
                "",
                "\t\t'normal-word': {",
                "\t\t\tpattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t/*",
                "\t\t\tbasic first-class string \"a\"",
                "\t\t\t\twith escaped double-quote \"a\\\"\"",
                "\t\t\t\tescaped backslash \"\\\\\"",
                "\t\t\t\tand general escapes since Factor has so many \"\\N\"",
                "",
                "\t\t\tsyntax that works in the reference implementation that isn't fully",
                "\t\t\tsupported because it's an implementation detail:",
                "\t\t\t\t\"string 1\"\"string 2\" -> 2 strings (works anyway)",
                "\t\t\t\t\"string\"5 -> string, 5",
                "\t\t\t\t\"string\"[ ] -> string, quotation",
                "\t\t\t\t{ \"a\"} -> array<string>",
                "",
                "\t\t\tthe rest of those examples all properly recognise the string, but not",
                "\t\t\t\tthe other object (number, quotation, etc)",
                "\t\t\tthis is fine for a regex-only implementation.",
                "\t\t*/",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: string_inside",
                "\t\t}",
                "\t};",
                "",
                "\tvar escape = function (str) {",
                "\t\treturn (str+'').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');",
                "\t};",
                "",
                "\tvar arrToWordsRegExp = function (arr) {",
                "\t\treturn new RegExp(",
                "\t\t\t'(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)'",
                "\t\t);",
                "\t};",
                "",
                "\tvar builtins = {",
                "\t\t'kernel-builtin': [",
                "\t\t\t'or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'",
                "\t\t],",
                "\t\t'other-builtin-syntax': [",
                "\t\t\t// syntax",
                "\t\t\t'=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable',",
                "\t\t\t// literals",
                "\t\t\t'$', '$[', '${'",
                "\t\t],",
                "\t\t'sequences-builtin': [",
                "\t\t\t'member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'",
                "\t\t],",
                "\t\t'math-builtin': [",
                "\t\t\t'number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'",
                "\t\t]",
                "\t\t// that's all for now",
                "\t};",
                "",
                "\tObject.keys(builtins).forEach(function (k) {",
                "\t\tfactor[k].pattern = arrToWordsRegExp( builtins[k] );",
                "\t});",
                "",
                "\tvar combinators = [",
                "\t\t// kernel",
                "\t\t'2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@',",
                "\t\t// sequences",
                "\t\t'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index',",
                "\t\t// math",
                "\t\t'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?',",
                "\t\t// math.combinators",
                "\t\t'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative',",
                "\t\t// combinators",
                "\t\t'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot',",
                "\t\t// combinators.short-circuit",
                "\t\t'2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&',",
                "\t\t// combinators.smart",
                "\t\t'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence',",
                "\t\t// tafn",
                "\t];",
                "",
                "\tfactor.combinators.pattern = arrToWordsRegExp(combinators);",
                "",
                "\tPrism.languages.factor = factor;",
                "",
                "})(Prism);"
            ]
        },
        "prism-factor.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t={function:/\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/},s={number:/\\\\[^\\s']|%\\w/},i={comment:[{pattern:/(^|\\s)(?:! .*|!$)/,lookbehind:!0,inside:t},{pattern:/(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,lookbehind:!0,greedy:!0,inside:t},{pattern:/(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,lookbehind:!0,greedy:!0,inside:t}],number:[{pattern:/(^|\\s)[+-]?\\d+(?=\\s|$)/,lookbehind:!0},{pattern:/(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,lookbehind:!0},{pattern:/(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,lookbehind:!0},{pattern:/(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,lookbehind:!0},{pattern:/(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,lookbehind:!0},{pattern:/(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,lookbehind:!0},{pattern:/(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,lookbehind:!0},{pattern:/(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,lookbehind:!0}],regexp:{pattern:/(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,lookbehind:!0,alias:\"number\",inside:{variable:/\\\\\\S/,keyword:/[+?*\\[\\]^$(){}.|]/,operator:{pattern:/(\\/)[idmsr]+(?:-[idmsr]+)?/,lookbehind:!0}}},boolean:{pattern:/(^|\\s)[tf](?=\\s|$)/,lookbehind:!0},\"custom-string\":{pattern:/(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,lookbehind:!0,greedy:!0,alias:\"string\",inside:{number:/\\\\\\S|%\\w|\\//}},\"multiline-string\":[{pattern:/(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,lookbehind:!0,greedy:!0,alias:\"string\",inside:{number:s.number,\"semicolon-or-setlocal\":{pattern:/((?:\\n|\\r\\n)\\s*);(?=\\s|$)/,lookbehind:!0,alias:\"function\"}}},{pattern:/(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,lookbehind:!0,greedy:!0,alias:\"string\",inside:s},{pattern:/(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,lookbehind:!0,greedy:!0,alias:\"string\",inside:s}],\"special-using\":{pattern:/(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,lookbehind:!0,alias:\"function\",inside:{string:{pattern:/(\\s)[^:\\s]+/,lookbehind:!0}}},\"stack-effect-delimiter\":[{pattern:/(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,lookbehind:!0,alias:\"operator\"},{pattern:/(\\s)--(?=\\s)/,lookbehind:!0,alias:\"operator\"},{pattern:/(\\s)\\)(?=\\s|$)/,lookbehind:!0,alias:\"operator\"}],combinators:{pattern:null,lookbehind:!0,alias:\"keyword\"},\"kernel-builtin\":{pattern:null,lookbehind:!0,alias:\"variable\"},\"sequences-builtin\":{pattern:null,lookbehind:!0,alias:\"variable\"},\"math-builtin\":{pattern:null,lookbehind:!0,alias:\"variable\"},\"constructor-word\":{pattern:/(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,lookbehind:!0,alias:\"keyword\"},\"other-builtin-syntax\":{pattern:null,lookbehind:!0,alias:\"operator\"},\"conventionally-named-word\":{pattern:/(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,lookbehind:!0,alias:\"keyword\"},\"colon-syntax\":{pattern:/(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,lookbehind:!0,greedy:!0,alias:\"function\"},\"semicolon-or-setlocal\":{pattern:/(\\s)(?:;|:>)(?=\\s|$)/,lookbehind:!0,alias:\"function\"},\"curly-brace-literal-delimiter\":[{pattern:/(^|\\s)[a-z]*\\{(?=\\s)/i,lookbehind:!0,alias:\"operator\"},{pattern:/(\\s)\\}(?=\\s|$)/,lookbehind:!0,alias:\"operator\"}],\"quotation-delimiter\":[{pattern:/(^|\\s)\\[(?=\\s)/,lookbehind:!0,alias:\"operator\"},{pattern:/(\\s)\\](?=\\s|$)/,lookbehind:!0,alias:\"operator\"}],\"normal-word\":{pattern:/(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,lookbehind:!0},string:{pattern:/\"(?:\\\\\\S|[^\"\\\\])*\"/,greedy:!0,inside:s}},n=function(e){return(e+\"\").replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g,\"\\\\$1\")},r=function(e){return new RegExp(\"(^|\\\\s)(?:\"+e.map(n).join(\"|\")+\")(?=\\\\s|$)\")},a={\"kernel-builtin\":[\"or\",\"2nipd\",\"4drop\",\"tuck\",\"wrapper\",\"nip\",\"wrapper?\",\"callstack>array\",\"die\",\"dupd\",\"callstack\",\"callstack?\",\"3dup\",\"hashcode\",\"pick\",\"4nip\",\"build\",\">boolean\",\"nipd\",\"clone\",\"5nip\",\"eq?\",\"?\",\"=\",\"swapd\",\"2over\",\"clear\",\"2dup\",\"get-retainstack\",\"not\",\"tuple?\",\"dup\",\"3nipd\",\"call\",\"-rotd\",\"object\",\"drop\",\"assert=\",\"assert?\",\"-rot\",\"execute\",\"boa\",\"get-callstack\",\"curried?\",\"3drop\",\"pickd\",\"overd\",\"over\",\"roll\",\"3nip\",\"swap\",\"and\",\"2nip\",\"rotd\",\"throw\",\"(clone)\",\"hashcode*\",\"spin\",\"reach\",\"4dup\",\"equal?\",\"get-datastack\",\"assert\",\"2drop\",\"<wrapper>\",\"boolean?\",\"identity-hashcode\",\"identity-tuple?\",\"null\",\"composed?\",\"new\",\"5drop\",\"rot\",\"-roll\",\"xor\",\"identity-tuple\",\"boolean\"],\"other-builtin-syntax\":[\"=======\",\"recursive\",\"flushable\",\">>\",\"<<<<<<\",\"M\\\\\",\"B\",\"PRIVATE>\",\"\\\\\",\"======\",\"final\",\"inline\",\"delimiter\",\"deprecated\",\"<PRIVATE\",\">>>>>>\",\"<<<<<<<\",\"parse-complex\",\"malformed-complex\",\"read-only\",\">>>>>>>\",\"call-next-method\",\"<<\",\"foldable\",\"$\",\"$[\",\"${\"],\"sequences-builtin\":[\"member-eq?\",\"mismatch\",\"append\",\"assert-sequence=\",\"longer\",\"repetition\",\"clone-like\",\"3sequence\",\"assert-sequence?\",\"last-index-from\",\"reversed\",\"index-from\",\"cut*\",\"pad-tail\",\"join-as\",\"remove-eq!\",\"concat-as\",\"but-last\",\"snip\",\"nths\",\"nth\",\"sequence\",\"longest\",\"slice?\",\"<slice>\",\"remove-nth\",\"tail-slice\",\"empty?\",\"tail*\",\"member?\",\"virtual-sequence?\",\"set-length\",\"drop-prefix\",\"iota\",\"unclip\",\"bounds-error?\",\"unclip-last-slice\",\"non-negative-integer-expected\",\"non-negative-integer-expected?\",\"midpoint@\",\"longer?\",\"?set-nth\",\"?first\",\"rest-slice\",\"prepend-as\",\"prepend\",\"fourth\",\"sift\",\"subseq-start\",\"new-sequence\",\"?last\",\"like\",\"first4\",\"1sequence\",\"reverse\",\"slice\",\"virtual@\",\"repetition?\",\"set-last\",\"index\",\"4sequence\",\"max-length\",\"set-second\",\"immutable-sequence\",\"first2\",\"first3\",\"supremum\",\"unclip-slice\",\"suffix!\",\"insert-nth\",\"tail\",\"3append\",\"short\",\"suffix\",\"concat\",\"flip\",\"immutable?\",\"reverse!\",\"2sequence\",\"sum\",\"delete-all\",\"indices\",\"snip-slice\",\"<iota>\",\"check-slice\",\"sequence?\",\"head\",\"append-as\",\"halves\",\"sequence=\",\"collapse-slice\",\"?second\",\"slice-error?\",\"product\",\"bounds-check?\",\"bounds-check\",\"immutable\",\"virtual-exemplar\",\"harvest\",\"remove\",\"pad-head\",\"last\",\"set-fourth\",\"cartesian-product\",\"remove-eq\",\"shorten\",\"shorter\",\"reversed?\",\"shorter?\",\"shortest\",\"head-slice\",\"pop*\",\"tail-slice*\",\"but-last-slice\",\"iota?\",\"append!\",\"cut-slice\",\"new-resizable\",\"head-slice*\",\"sequence-hashcode\",\"pop\",\"set-nth\",\"?nth\",\"second\",\"join\",\"immutable-sequence?\",\"<reversed>\",\"3append-as\",\"virtual-sequence\",\"subseq?\",\"remove-nth!\",\"length\",\"last-index\",\"lengthen\",\"assert-sequence\",\"copy\",\"move\",\"third\",\"first\",\"tail?\",\"set-first\",\"prefix\",\"bounds-error\",\"<repetition>\",\"exchange\",\"surround\",\"cut\",\"min-length\",\"set-third\",\"push-all\",\"head?\",\"subseq-start-from\",\"delete-slice\",\"rest\",\"sum-lengths\",\"head*\",\"infimum\",\"remove!\",\"glue\",\"slice-error\",\"subseq\",\"push\",\"replace-slice\",\"subseq-as\",\"unclip-last\"],\"math-builtin\":[\"number=\",\"next-power-of-2\",\"?1+\",\"fp-special?\",\"imaginary-part\",\"float>bits\",\"number?\",\"fp-infinity?\",\"bignum?\",\"fp-snan?\",\"denominator\",\"gcd\",\"*\",\"+\",\"fp-bitwise=\",\"-\",\"u>=\",\"/\",\">=\",\"bitand\",\"power-of-2?\",\"log2-expects-positive\",\"neg?\",\"<\",\"log2\",\">\",\"integer?\",\"number\",\"bits>double\",\"2/\",\"zero?\",\"bits>float\",\"float?\",\"shift\",\"ratio?\",\"rect>\",\"even?\",\"ratio\",\"fp-sign\",\"bitnot\",\">fixnum\",\"complex?\",\"/i\",\"integer>fixnum\",\"/f\",\"sgn\",\">bignum\",\"next-float\",\"u<\",\"u>\",\"mod\",\"recip\",\"rational\",\">float\",\"2^\",\"integer\",\"fixnum?\",\"neg\",\"fixnum\",\"sq\",\"bignum\",\">rect\",\"bit?\",\"fp-qnan?\",\"simple-gcd\",\"complex\",\"<fp-nan>\",\"real\",\">fraction\",\"double>bits\",\"bitor\",\"rem\",\"fp-nan-payload\",\"real-part\",\"log2-expects-positive?\",\"prev-float\",\"align\",\"unordered?\",\"float\",\"fp-nan?\",\"abs\",\"bitxor\",\"integer>fixnum-strict\",\"u<=\",\"odd?\",\"<=\",\"/mod\",\">integer\",\"real?\",\"rational?\",\"numerator\"]};Object.keys(a).forEach(function(e){i[e].pattern=r(a[e])});i.combinators.pattern=r([\"2bi\",\"while\",\"2tri\",\"bi*\",\"4dip\",\"both?\",\"same?\",\"tri@\",\"curry\",\"prepose\",\"3bi\",\"?if\",\"tri*\",\"2keep\",\"3keep\",\"curried\",\"2keepd\",\"when\",\"2bi*\",\"2tri*\",\"4keep\",\"bi@\",\"keepdd\",\"do\",\"unless*\",\"tri-curry\",\"if*\",\"loop\",\"bi-curry*\",\"when*\",\"2bi@\",\"2tri@\",\"with\",\"2with\",\"either?\",\"bi\",\"until\",\"3dip\",\"3curry\",\"tri-curry*\",\"tri-curry@\",\"bi-curry\",\"keepd\",\"compose\",\"2dip\",\"if\",\"3tri\",\"unless\",\"tuple\",\"keep\",\"2curry\",\"tri\",\"most\",\"while*\",\"dip\",\"composed\",\"bi-curry@\",\"find-last-from\",\"trim-head-slice\",\"map-as\",\"each-from\",\"none?\",\"trim-tail\",\"partition\",\"if-empty\",\"accumulate*\",\"reject!\",\"find-from\",\"accumulate-as\",\"collector-for-as\",\"reject\",\"map\",\"map-sum\",\"accumulate!\",\"2each-from\",\"follow\",\"supremum-by\",\"map!\",\"unless-empty\",\"collector\",\"padding\",\"reduce-index\",\"replicate-as\",\"infimum-by\",\"trim-tail-slice\",\"count\",\"find-index\",\"filter\",\"accumulate*!\",\"reject-as\",\"map-integers\",\"map-find\",\"reduce\",\"selector\",\"interleave\",\"2map\",\"filter-as\",\"binary-reduce\",\"map-index-as\",\"find\",\"produce\",\"filter!\",\"replicate\",\"cartesian-map\",\"cartesian-each\",\"find-index-from\",\"map-find-last\",\"3map-as\",\"3map\",\"find-last\",\"selector-as\",\"2map-as\",\"2map-reduce\",\"accumulate\",\"each\",\"each-index\",\"accumulate*-as\",\"when-empty\",\"all?\",\"collector-as\",\"push-either\",\"new-like\",\"collector-for\",\"2selector\",\"push-if\",\"2all?\",\"map-reduce\",\"3each\",\"any?\",\"trim-slice\",\"2reduce\",\"change-nth\",\"produce-as\",\"2each\",\"trim\",\"trim-head\",\"cartesian-find\",\"map-index\",\"if-zero\",\"each-integer\",\"unless-zero\",\"(find-integer)\",\"when-zero\",\"find-last-integer\",\"(all-integers?)\",\"times\",\"(each-integer)\",\"find-integer\",\"all-integers?\",\"unless-negative\",\"if-positive\",\"when-positive\",\"when-negative\",\"unless-positive\",\"if-negative\",\"case\",\"2cleave\",\"cond>quot\",\"case>quot\",\"3cleave\",\"wrong-values\",\"to-fixed-point\",\"alist>quot\",\"cond\",\"cleave\",\"call-effect\",\"recursive-hashcode\",\"spread\",\"deep-spread>quot\",\"2||\",\"0||\",\"n||\",\"0&&\",\"2&&\",\"3||\",\"1||\",\"1&&\",\"n&&\",\"3&&\",\"smart-unless*\",\"keep-inputs\",\"reduce-outputs\",\"smart-when*\",\"cleave>array\",\"smart-with\",\"smart-apply\",\"smart-if\",\"inputs/outputs\",\"output>sequence-n\",\"map-outputs\",\"map-reduce-outputs\",\"dropping\",\"output>array\",\"smart-map-reduce\",\"smart-2map-reduce\",\"output>array-n\",\"nullary\",\"input<sequence\",\"append-outputs\",\"drop-inputs\",\"inputs\",\"smart-2reduce\",\"drop-outputs\",\"smart-reduce\",\"preserving\",\"smart-when\",\"outputs\",\"append-outputs-as\",\"smart-unless\",\"smart-if*\",\"sum-outputs\",\"input<sequence-unsafe\",\"output>sequence\"]),e.languages.factor=i}(Prism);"
            ]
        },
        "prism-firestore-security-rules.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['firestore-security-rules'] = Prism.languages.extend('clike', {",
                "\t'comment': /\\/\\/.*/,",
                "\t'keyword': /\\b(?:allow|function|if|match|null|return|rules_version|service)\\b/,",
                "\t'operator': /&&|\\|\\||[<>!=]=?|[-+*/%]|\\b(?:in|is)\\b/,",
                "});",
                "",
                "delete Prism.languages['firestore-security-rules']['class-name'];",
                "",
                "Prism.languages.insertBefore('firestore-security-rules', 'keyword', {",
                "\t'path': {",
                "\t\tpattern: /(^|[\\s(),])(?:\\/(?:[\\w\\xA0-\\uFFFF]+|\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)))+/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'operator': /=/,",
                "\t\t\t\t\t'keyword': /\\*\\*/,",
                "\t\t\t\t\t'punctuation': /[.$(){}]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /[/]/",
                "\t\t}",
                "\t},",
                "\t'method': {",
                "\t\t// to make the pattern shorter, the actual method names are omitted",
                "\t\tpattern: /(\\ballow\\s+)[a-z]+(?:\\s*,\\s*[a-z]+)*(?=\\s*[:;])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'builtin',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /,/",
                "\t\t}",
                "\t},",
                "});"
            ]
        },
        "prism-firestore-security-rules.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"firestore-security-rules\"]=Prism.languages.extend(\"clike\",{comment:/\\/\\/.*/,keyword:/\\b(?:allow|function|if|match|null|return|rules_version|service)\\b/,operator:/&&|\\|\\||[<>!=]=?|[-+*/%]|\\b(?:in|is)\\b/}),delete Prism.languages[\"firestore-security-rules\"][\"class-name\"],Prism.languages.insertBefore(\"firestore-security-rules\",\"keyword\",{path:{pattern:/(^|[\\s(),])(?:\\/(?:[\\w\\xA0-\\uFFFF]+|\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)))+/,lookbehind:!0,greedy:!0,inside:{variable:{pattern:/\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)/,inside:{operator:/=/,keyword:/\\*\\*/,punctuation:/[.$(){}]/}},punctuation:/[/]/}},method:{pattern:/(\\ballow\\s+)[a-z]+(?:\\s*,\\s*[a-z]+)*(?=\\s*[:;])/,lookbehind:!0,alias:\"builtin\",inside:{punctuation:/,/}}});"
            ]
        },
        "prism-flow.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.flow = Prism.languages.extend('javascript', {});",
                "",
                "\tPrism.languages.insertBefore('flow', 'keyword', {",
                "\t\t'type': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t}",
                "\t\t]",
                "\t});",
                "\tPrism.languages.flow['function-variable'].pattern = /(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/i;",
                "\tdelete Prism.languages.flow['parameter'];",
                "",
                "\tPrism.languages.insertBefore('flow', 'operator', {",
                "\t\t'flow-punctuation': {",
                "\t\t\tpattern: /\\{\\||\\|\\}/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tif (!Array.isArray(Prism.languages.flow.keyword)) {",
                "\t\tPrism.languages.flow.keyword = [Prism.languages.flow.keyword];",
                "\t}",
                "\tPrism.languages.flow.keyword.unshift(",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t);",
                "}(Prism));"
            ]
        },
        "prism-flow.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){a.languages.flow=a.languages.extend(\"javascript\",{}),a.languages.insertBefore(\"flow\",\"keyword\",{type:[{pattern:/\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,alias:\"tag\"}]}),a.languages.flow[\"function-variable\"].pattern=/(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/i,delete a.languages.flow.parameter,a.languages.insertBefore(\"flow\",\"operator\",{\"flow-punctuation\":{pattern:/\\{\\||\\|\\}/,alias:\"punctuation\"}}),Array.isArray(a.languages.flow.keyword)||(a.languages.flow.keyword=[a.languages.flow.keyword]),a.languages.flow.keyword.unshift({pattern:/(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,lookbehind:!0},{pattern:/(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,lookbehind:!0})}(Prism);"
            ]
        },
        "prism-fortran.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fortran = {",
                "\t'quoted-number': {",
                "\t\tpattern: /[BOZ](['\"])[A-F0-9]+\\1/i,",
                "\t\talias: 'number'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:[ \\t]*!.*(?:\\r\\n?|\\n)|(?![ \\t]*!))|(?!\\1).)*(?:\\1|&)/,",
                "\t\tinside: {",
                "\t\t\t'comment': {",
                "\t\t\t\tpattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /!.*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'boolean': /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,",
                "\t'keyword': [",
                "\t\t// Types",
                "\t\t/\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i,",
                "\t\t// END statements",
                "\t\t/\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,",
                "\t\t// Statements",
                "\t\t/\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,",
                "\t\t// Others",
                "\t\t/\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i",
                "\t],",
                "\t'operator': [",
                "\t\t/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.[A-Z]+\\./i,",
                "\t\t{",
                "\t\t\t// Use lookbehind to prevent confusion with (/ /)",
                "\t\t\tpattern: /(^|(?!\\().)\\/(?!\\))/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /\\(\\/|\\/\\)|[(),;:&]/",
                "};"
            ]
        },
        "prism-fortran.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fortran={\"quoted-number\":{pattern:/[BOZ](['\"])[A-F0-9]+\\1/i,alias:\"number\"},string:{pattern:/(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:[ \\t]*!.*(?:\\r\\n?|\\n)|(?![ \\t]*!))|(?!\\1).)*(?:\\1|&)/,inside:{comment:{pattern:/(&(?:\\r\\n?|\\n)\\s*)!.*/,lookbehind:!0}}},comment:{pattern:/!.*/,greedy:!0},boolean:/\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,keyword:[/\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i,/\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,/\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,/\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],operator:[/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.[A-Z]+\\./i,{pattern:/(^|(?!\\().)\\/(?!\\))/,lookbehind:!0}],punctuation:/\\(\\/|\\/\\)|[(),;:&]/};"
            ]
        },
        "prism-fsharp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fsharp = Prism.languages.extend('clike', {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?|'(?:[^\\\\']|\\\\(?:.|\\d{3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|U[a-fA-F\\d]{8}))'B?/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'operator': /->|\\*/,",
                "\t\t\t'punctuation': /\\./",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(?:abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,",
                "\t'number': [",
                "\t\t/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/,",
                "\t\t/\\b0b[01]+(?:y|uy)?\\b/,",
                "\t\t/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,",
                "\t\t/\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/",
                "\t],",
                "\t'operator': /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/",
                "});",
                "Prism.languages.insertBefore('fsharp', 'keyword', {",
                "\t'preprocessor': {",
                "\t\tpattern: /^[^\\r\\n\\S]*#.*/m,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});",
                "Prism.languages.insertBefore('fsharp', 'punctuation', {",
                "\t'computation-expression': {",
                "\t\tpattern: /[_a-z]\\w*(?=\\s*\\{)/i,",
                "\t\talias: 'keyword'",
                "\t}",
                "});",
                "Prism.languages.insertBefore('fsharp', 'string', {",
                "\t'annotation': {",
                "\t\tpattern: /\\[<.+?>\\]/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^\\[<|>\\]$/,",
                "\t\t\t'class-name': {",
                "\t\t\t\tpattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'annotation-content': {",
                "\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\tinside: Prism.languages.fsharp",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-fsharp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fsharp=Prism.languages.extend(\"clike\",{comment:[{pattern:/(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],string:{pattern:/(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?|'(?:[^\\\\']|\\\\(?:.|\\d{3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|U[a-fA-F\\d]{8}))'B?/,greedy:!0},\"class-name\":{pattern:/(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,lookbehind:!0,inside:{operator:/->|\\*/,punctuation:/\\./}},keyword:/\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(?:abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,number:[/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/,/\\b0b[01]+(?:y|uy)?\\b/,/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,/\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/],operator:/([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/}),Prism.languages.insertBefore(\"fsharp\",\"keyword\",{preprocessor:{pattern:/^[^\\r\\n\\S]*#.*/m,alias:\"property\",inside:{directive:{pattern:/(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,lookbehind:!0,alias:\"keyword\"}}}}),Prism.languages.insertBefore(\"fsharp\",\"punctuation\",{\"computation-expression\":{pattern:/[_a-z]\\w*(?=\\s*\\{)/i,alias:\"keyword\"}}),Prism.languages.insertBefore(\"fsharp\",\"string\",{annotation:{pattern:/\\[<.+?>\\]/,inside:{punctuation:/^\\[<|>\\]$/,\"class-name\":{pattern:/^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,lookbehind:!0},\"annotation-content\":{pattern:/[\\s\\S]+/,inside:Prism.languages.fsharp}}}});"
            ]
        },
        "prism-ftl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t// https://freemarker.apache.org/docs/dgui_template_exp.html",
                "",
                "\t// FTL expression with 4 levels of nesting supported",
                "\tvar FTL_EXPR = /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/.source;",
                "\tfor (var i = 0; i < 2; i++) {",
                "\t\tFTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () { return FTL_EXPR; });",
                "\t}",
                "\tFTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source);",
                "",
                "\tvar ftl = {",
                "\t\t'comment': /<#--[\\s\\S]*?-->/,",
                "\t\t'string': [",
                "\t\t\t{",
                "\t\t\t\t// raw string",
                "\t\t\t\tpattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(/<expr>/g, function () { return FTL_EXPR; })),",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': {",
                "\t\t\t\t\t\tpattern: RegExp(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(/<expr>/g, function () { return FTL_EXPR; })),",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,",
                "\t\t\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\trest: null",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': /\\b(?:as)\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'builtin-function': {",
                "\t\t\tpattern: /((?:^|[^?])\\?\\s*)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'function': /\\w+(?=\\s*\\()/,",
                "\t\t'number': /\\d+(?:\\.\\d+)?/,",
                "\t\t'operator': /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,",
                "\t\t'punctuation': /[,;.:()[\\]{}]/",
                "\t};",
                "",
                "\tftl.string[1].inside.interpolation.inside.rest = ftl;",
                "",
                "\tPrism.languages.ftl = {",
                "\t\t'ftl-comment': {",
                "\t\t\t// the pattern is shortened to be more efficient",
                "\t\t\tpattern: /^<#--[\\s\\S]*/,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'ftl-directive': {",
                "\t\t\tpattern: /^<[\\s\\S]+>$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'directive': {",
                "\t\t\t\t\tpattern: /(^<\\/?)[#@][a-z]\\w*/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /^<\\/?|\\/?>$/,",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /\\s*\\S[\\s\\S]*/,",
                "\t\t\t\t\talias: 'ftl',",
                "\t\t\t\t\tinside: ftl",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'ftl-interpolation': {",
                "\t\t\tpattern: /^\\$\\{[\\s\\S]*\\}$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\$\\{|\\}$/,",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /\\s*\\S[\\s\\S]*/,",
                "\t\t\t\t\talias: 'ftl',",
                "\t\t\t\t\tinside: ftl",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tvar pattern = RegExp(/<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () { return FTL_EXPR; }), 'gi');",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-ftl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){for(var i=\"[^<()\\\"']|\\\\((?:<expr>)*\\\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*--\\x3e|\\\"(?:[^\\\\\\\\\\\"]|\\\\\\\\.)*\\\"|'(?:[^\\\\\\\\']|\\\\\\\\.)*'\",e=0;e<2;e++)i=i.replace(/<expr>/g,function(){return i});i=i.replace(/<expr>/g,\"[^\\\\s\\\\S]\");var t={comment:/<#--[\\s\\S]*?-->/,string:[{pattern:/\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,greedy:!0},{pattern:RegExp(\"(\\\"|')(?:(?!\\\\1|\\\\$\\\\{)[^\\\\\\\\]|\\\\\\\\.|\\\\$\\\\{(?:(?!\\\\})(?:<expr>))*\\\\})*\\\\1\".replace(/<expr>/g,function(){return i})),greedy:!0,inside:{interpolation:{pattern:RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*)\\\\$\\\\{(?:(?!\\\\})(?:<expr>))*\\\\}\".replace(/<expr>/g,function(){return i})),lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^\\$\\{|\\}$/,alias:\"punctuation\"},rest:null}}}}],keyword:/\\b(?:as)\\b/,boolean:/\\b(?:true|false)\\b/,\"builtin-function\":{pattern:/((?:^|[^?])\\?\\s*)\\w+/,lookbehind:!0,alias:\"function\"},function:/\\w+(?=\\s*\\()/,number:/\\d+(?:\\.\\d+)?/,operator:/\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,punctuation:/[,;.:()[\\]{}]/};t.string[1].inside.interpolation.inside.rest=t,n.languages.ftl={\"ftl-comment\":{pattern:/^<#--[\\s\\S]*/,alias:\"comment\"},\"ftl-directive\":{pattern:/^<[\\s\\S]+>$/,inside:{directive:{pattern:/(^<\\/?)[#@][a-z]\\w*/i,lookbehind:!0,alias:\"keyword\"},punctuation:/^<\\/?|\\/?>$/,content:{pattern:/\\s*\\S[\\s\\S]*/,alias:\"ftl\",inside:t}}},\"ftl-interpolation\":{pattern:/^\\$\\{[\\s\\S]*\\}$/,inside:{punctuation:/^\\$\\{|\\}$/,content:{pattern:/\\s*\\S[\\s\\S]*/,alias:\"ftl\",inside:t}}}},n.hooks.add(\"before-tokenize\",function(e){var t=RegExp(\"<#--[^]*?--\\x3e|</?[#@][a-zA-Z](?:<expr>)*?>|\\\\$\\\\{(?:<expr>)*?\\\\}\".replace(/<expr>/g,function(){return i}),\"gi\");n.languages[\"markup-templating\"].buildPlaceholders(e,\"ftl\",t)}),n.hooks.add(\"after-tokenize\",function(e){n.languages[\"markup-templating\"].tokenizePlaceholders(e,\"ftl\")})}(Prism);"
            ]
        },
        "prism-gcode.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gcode = {",
                "\t'comment': /;.*|\\B\\(.*?\\)\\B/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[^\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b[GM]\\d+(?:\\.\\d+)?\\b/,",
                "\t'property': /\\b[A-Z]/,",
                "\t'checksum': {",
                "\t\tpattern: /\\*\\d+/,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t// T0:0:0",
                "\t'punctuation': /:/",
                "};"
            ]
        },
        "prism-gcode.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gcode={comment:/;.*|\\B\\(.*?\\)\\B/,string:{pattern:/\"(?:\"\"|[^\"])*\"/,greedy:!0},keyword:/\\b[GM]\\d+(?:\\.\\d+)?\\b/,property:/\\b[A-Z]/,checksum:{pattern:/\\*\\d+/,alias:\"punctuation\"},punctuation:/:/};"
            ]
        },
        "prism-gdscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gdscript = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /@?(?:(\"|')(?:(?!\\1)[^\\n\\\\]|\\\\[\\s\\S])*\\1(?!\"|')|\"\"\"(?:[^\\\\]|\\\\[\\s\\S])*?\"\"\")/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\t// class_name Foo, extends Bar, class InnerClass",
                "\t\t// export(int) var baz, export(int, 0) var i",
                "\t\t// as Node",
                "\t\t// const FOO: int = 9, var bar: bool = true",
                "\t\t// func add(reference: Item, amount: int) -> Item:",
                "\t\tpattern: /(^(?:class_name|class|extends)[ \\t]+|^export\\([ \\t]*|\\bas[ \\t]+|(?:\\b(?:const|var)[ \\t]|[,(])[ \\t]*\\w+[ \\t]*:[ \\t]*|->[ \\t]*)[a-zA-Z_]\\w*/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\\b/,",
                "\t'function': /[a-z_]\\w*(?=[ \\t]*\\()/i,",
                "\t'variable': /\\$\\w+/,",
                "\t'number': [",
                "\t\t/\\b0b[01_]+\\b|\\b0x[\\da-fA-F_]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.[\\d_]+)(?:e[+-]?[\\d_]+)?\\b/,",
                "\t\t/\\b(?:INF|NAN|PI|TAU)\\b/",
                "\t],",
                "\t'constant': /\\b[A-Z][A-Z_\\d]*\\b/,",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t'operator': /->|:=|&&|\\|\\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,",
                "\t'punctuation': /[.:,;()[\\]{}]/",
                "};"
            ]
        },
        "prism-gdscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gdscript={comment:/#.*/,string:{pattern:/@?(?:(\"|')(?:(?!\\1)[^\\n\\\\]|\\\\[\\s\\S])*\\1(?!\"|')|\"\"\"(?:[^\\\\]|\\\\[\\s\\S])*?\"\"\")/,greedy:!0},\"class-name\":{pattern:/(^(?:class_name|class|extends)[ \\t]+|^export\\([ \\t]*|\\bas[ \\t]+|(?:\\b(?:const|var)[ \\t]|[,(])[ \\t]*\\w+[ \\t]*:[ \\t]*|->[ \\t]*)[a-zA-Z_]\\w*/m,lookbehind:!0},keyword:/\\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\\b/,function:/[a-z_]\\w*(?=[ \\t]*\\()/i,variable:/\\$\\w+/,number:[/\\b0b[01_]+\\b|\\b0x[\\da-fA-F_]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.[\\d_]+)(?:e[+-]?[\\d_]+)?\\b/,/\\b(?:INF|NAN|PI|TAU)\\b/],constant:/\\b[A-Z][A-Z_\\d]*\\b/,boolean:/\\b(?:false|true)\\b/,operator:/->|:=|&&|\\|\\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,punctuation:/[.:,;()[\\]{}]/};"
            ]
        },
        "prism-gedcom.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gedcom = {",
                "\t'line-value': {",
                "\t\t// Preceded by level, optional pointer, and tag",
                "\t\tpattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ ).+/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'pointer': {",
                "\t\t\t\tpattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'tag': {",
                "\t\t// Preceded by level and optional pointer",
                "\t\tpattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'level': {",
                "\t\tpattern: /(^\\s*)\\d+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'number'",
                "\t},",
                "\t'pointer': {",
                "\t\tpattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-gedcom.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gedcom={\"line-value\":{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ ).+/m,lookbehind:!0,inside:{pointer:{pattern:/^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,alias:\"variable\"}}},tag:{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,lookbehind:!0,alias:\"string\"},level:{pattern:/(^\\s*)\\d+/m,lookbehind:!0,alias:\"number\"},pointer:{pattern:/@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,alias:\"variable\"}};"
            ]
        },
        "prism-gherkin.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar tableRow = /(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|(?:(?!\\|).)*/.source;",
                "",
                "\tPrism.languages.gherkin = {",
                "\t\t'pystring': {",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]+?\\1/,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^[ \\t]*)#.*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\tpattern: /(^[ \\t]*)@\\S*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'feature': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\\r\\n]+(?:\\r?\\n|\\r|$))*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'important': {",
                "\t\t\t\t\tpattern: /(:)[^\\r\\n]+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'keyword': /[^:\\r\\n]+:/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'scenario': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'important': {",
                "\t\t\t\t\tpattern: /(:)[^\\r\\n]*/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'keyword': /[^:\\r\\n]+:/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'table-body': {",
                "\t\t\t// Look-behind is used to skip the table head, which has the same format as any table row",
                "\t\t\tpattern: RegExp('(' + tableRow + ')(?:' + tableRow + ')+'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'outline': {",
                "\t\t\t\t\tpattern: /<[^>]+?>/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\t'td': {",
                "\t\t\t\t\tpattern: /\\s*[^\\s|][^|]*/,",
                "\t\t\t\t\talias: 'string'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\|/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'table-head': {",
                "\t\t\tpattern: RegExp(tableRow),",
                "\t\t\tinside: {",
                "\t\t\t\t'th': {",
                "\t\t\t\t\tpattern: /\\s*[^\\s|][^|]*/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\|/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'atrule': {",
                "\t\t\tpattern: /(^[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t])/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,",
                "\t\t\tinside: {",
                "\t\t\t\t'outline': {",
                "\t\t\t\t\tpattern: /<[^>]+?>/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'outline': {",
                "\t\t\tpattern: /<[^>]+?>/,",
                "\t\t\talias: 'variable'",
                "\t\t}",
                "\t};",
                "",
                "}(Prism));"
            ]
        },
        "prism-gherkin.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var n=\"(?:\\r?\\n|\\r)[ \\t]*\\\\|.+\\\\|(?:(?!\\\\|).)*\";Prism.languages.gherkin={pystring:{pattern:/(\"\"\"|''')[\\s\\S]+?\\1/,alias:\"string\"},comment:{pattern:/(^[ \\t]*)#.*/m,lookbehind:!0},tag:{pattern:/(^[ \\t]*)@\\S*/m,lookbehind:!0},feature:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\\r\\n]+(?:\\r?\\n|\\r|$))*/,lookbehind:!0,inside:{important:{pattern:/(:)[^\\r\\n]+/,lookbehind:!0},keyword:/[^:\\r\\n]+:/}},scenario:{pattern:/(^[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/m,lookbehind:!0,inside:{important:{pattern:/(:)[^\\r\\n]*/,lookbehind:!0},keyword:/[^:\\r\\n]+:/}},\"table-body\":{pattern:RegExp(\"(\"+n+\")(?:\"+n+\")+\"),lookbehind:!0,inside:{outline:{pattern:/<[^>]+?>/,alias:\"variable\"},td:{pattern:/\\s*[^\\s|][^|]*/,alias:\"string\"},punctuation:/\\|/}},\"table-head\":{pattern:RegExp(n),inside:{th:{pattern:/\\s*[^\\s|][^|]*/,alias:\"variable\"},punctuation:/\\|/}},atrule:{pattern:/(^[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t])/m,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,inside:{outline:{pattern:/<[^>]+?>/,alias:\"variable\"}}},outline:{pattern:/<[^>]+?>/,alias:\"variable\"}}}();"
            ]
        },
        "prism-git.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.git = {",
                "\t/*",
                "\t * A simple one line comment like in a git status command",
                "\t * For instance:",
                "\t * $ git status",
                "\t * # On branch infinite-scroll",
                "\t * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,",
                "\t * # and have 1 and 2 different commits each, respectively.",
                "\t * nothing to commit (working directory clean)",
                "\t */",
                "\t'comment': /^#.*/m,",
                "",
                "\t/*",
                "\t * Regexp to match the changed lines in a git diff output. Check the example below.",
                "\t */",
                "\t'deleted': /^[-–].*/m,",
                "\t'inserted': /^\\+.*/m,",
                "",
                "\t/*",
                "\t * a string (double and simple quote)",
                "\t */",
                "\t'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,",
                "",
                "\t/*",
                "\t * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters",
                "\t * For instance:",
                "\t * $ git add file.txt",
                "\t */",
                "\t'command': {",
                "\t\tpattern: /^.*\\$ git .*$/m,",
                "\t\tinside: {",
                "\t\t\t/*",
                "\t\t\t * A git command can contain a parameter starting by a single or a double dash followed by a string",
                "\t\t\t * For instance:",
                "\t\t\t * $ git diff --cached",
                "\t\t\t * $ git log -p",
                "\t\t\t */",
                "\t\t\t'parameter': /\\s--?\\w+/m",
                "\t\t}",
                "\t},",
                "",
                "\t/*",
                "\t * Coordinates displayed in a git diff command",
                "\t * For instance:",
                "\t * $ git diff",
                "\t * diff --git file.txt file.txt",
                "\t * index 6214953..1d54a52 100644",
                "\t * --- file.txt",
                "\t * +++ file.txt",
                "\t * @@ -1 +1,2 @@",
                "\t * -Here's my tetx file",
                "\t * +Here's my text file",
                "\t * +And this is the second line",
                "\t */",
                "\t'coord': /^@@.*@@$/m,",
                "",
                "\t/*",
                "\t * Match a \"commit [SHA1]\" line in a git log output.",
                "\t * For instance:",
                "\t * $ git log",
                "\t * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09",
                "\t * Author: lgiraudel",
                "\t * Date:   Mon Feb 17 11:18:34 2014 +0100",
                "\t *",
                "\t *     Add of a new line",
                "\t */",
                "\t'commit-sha1': /^commit \\w{40}$/m",
                "};"
            ]
        },
        "prism-git.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.git={comment:/^#.*/m,deleted:/^[-–].*/m,inserted:/^\\+.*/m,string:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,command:{pattern:/^.*\\$ git .*$/m,inside:{parameter:/\\s--?\\w+/m}},coord:/^@@.*@@$/m,\"commit-sha1\":/^commit \\w{40}$/m};"
            ]
        },
        "prism-glsl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.glsl = Prism.languages.extend('c', {",
                "\t'keyword': /\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/",
                "});"
            ]
        },
        "prism-glsl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.glsl=Prism.languages.extend(\"c\",{keyword:/\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/});"
            ]
        },
        "prism-gml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:if|else|switch|case|default|break|for|repeat|while|do|until|continue|exit|return|globalvar|var|enum)\\b/,",
                "\t'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]{0,4}/i,",
                "\t'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at|xor)\\b/,",
                "\t'constant': /\\b(?:self|other|all|noone|global|local|undefined|pointer_(?:invalid|null)|action_(?:stop|restart|continue|reverse)|pi|GM_build_date|GM_version|timezone_(?:local|utc)|gamespeed_(?:fps|microseconds)|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|pre|post)|keypress|keyrelease|trigger|(?:left|right|middle|no)_button|(?:left|right|middle)_press|(?:left|right|middle)_release|mouse_(?:enter|leave|wheel_up|wheel_down)|global_(?:left|right|middle)_button|global_(?:left|right|middle)_press|global_(?:left|right|middle)_release|joystick(?:1|2)_(?:left|right|up|down|button1|button2|button3|button4|button5|button6|button7|button8)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|step_(?:normal|begin|end)|gui|gui_begin|gui_end)|vk_(?:nokey|anykey|enter|return|shift|control|alt|escape|space|backspace|tab|pause|printscreen|left|right|up|down|home|end|delete|insert|pageup|pagedown|f\\d|numpad\\d|divide|multiply|subtract|add|decimal|lshift|lcontrol|lalt|rshift|rcontrol|ralt)|mb_(?:any|none|left|right|middle)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|purple|red|silver|teal|white|yellow|orange)|fa_(?:left|center|right|top|middle|bottom|readonly|hidden|sysfile|volumeid|directory|archive)|pr_(?:pointlist|linelist|linestrip|trianglelist|trianglestrip|trianglefan)|bm_(?:complex|normal|add|max|subtract|zero|one|src_colour|inv_src_colour|src_color|inv_src_color|src_alpha|inv_src_alpha|dest_alpha|inv_dest_alpha|dest_colour|inv_dest_colour|dest_color|inv_dest_color|src_alpha_sat)|audio_(?:falloff_(?:none|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|exponent_distance|exponent_distance_clamped)|old_system|new_system|mono|stereo|3d)|cr_(?:default|none|arrow|cross|beam|size_nesw|size_ns|size_nwse|size_we|uparrow|hourglass|drag|appstart|handpoint|size_all)|spritespeed_framesper(?:second|gameframe)|asset_(?:object|unknown|sprite|sound|room|path|script|font|timeline|tiles|shader)|ds_type_(?:map|list|stack|queue|grid|priority)|ef_(?:explosion|ring|ellipse|firework|smoke|smokeup|star|spark|flare|cloud|rain|snow)|pt_shape_(?:pixel|disk|square|line|star|circle|ring|sphere|flare|spark|explosion|cloud|smoke|snow)|ps_(?:distr|shape)_(?:linear|gaussian|invgaussian|rectangle|ellipse|diamond|line)|ty_(?:real|string)|dll_(?:cdel|cdecl|stdcall)|matrix_(?:view|projection|world)|os_(?:win32|windows|macosx|ios|android|linux|unknown|winphone|win8native|psvita|ps4|xboxone|ps3|uwp)|browser_(?:not_a_browser|unknown|ie|firefox|chrome|safari|safari_mobile|opera|tizen|windows_store|ie_mobile)|device_ios_(?:unknown|iphone|iphone_retina|ipad|ipad_retina|iphone5|iphone6|iphone6plus)|device_(?:emulator|tablet)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|of_challenge_(?:win|lose|tie)|leaderboard_type_(?:number|time_mins_secs)|cmpfunc_(?:never|less|equal|lessequal|greater|notequal|greaterequal|always)|cull_(?:noculling|clockwise|counterclockwise)|lighttype_(?:dir|point)|iap_(?:ev_storeload|ev_product|ev_purchase|ev_consume|ev_restore|storeload_ok|storeload_failed|status_uninitialised|status_unavailable|status_loading|status_available|status_processing|status_restoring|failed|unavailable|available|purchased|canceled|refunded)|fb_login_(?:default|fallback_to_webview|no_fallback_to_webview|forcing_webview|use_system_account|forcing_safari)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|reaction_force_x|reaction_force_y|reaction_torque|motor_speed|angle|motor_torque|max_motor_torque|translation|speed|motor_force|max_motor_force|length_1|length_2|damping_ratio|frequency|lower_angle_limit|upper_angle_limit|angle_limits|max_length|max_torque|max_force)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_particle_flag_(?:water|zombie|wall|spring|elastic|viscous|powder|tensile|colourmixing|colormixing)|phy_particle_group_flag_(?:solid|rigid)|phy_particle_data_flag_(?:typeflags|position|velocity|colour|color|category)|achievement_(?:our_info|friends_info|leaderboard_info|info|filter_(?:all_players|friends_only|favorites_only)|type_challenge|type_score_challenge|pic_loaded|show_(?:ui|profile|leaderboard|achievement|bank|friend_picker|purchase_prompt))|network_(?:socket_(?:tcp|udp|bluetooth)|type_(?:connect|disconnect|data|non_blocking_connect)|config_(?:connect_timeout|use_non_blocking_socket|enable_reliable_udp|disable_reliable_udp))|buffer_(?:fixed|grow|wrap|fast|vbuffer|network|u8|s8|u16|s16|u32|s32|u64|f16|f32|f64|bool|text|string|seek_start|seek_relative|seek_end|generalerror|outofspace|outofbounds|invalidtype)|gp_(?:face\\d|shoulderl|shoulderr|shoulderlb|shoulderrb|select|start|stickl|stickr|padu|padd|padl|padr|axislh|axislv|axisrh|axisrv)|ov_(?:friends|community|players|settings|gamegroup|achievements)|lb_sort_(?:none|ascending|descending)|lb_disp_(?:none|numeric|time_sec|time_ms)|ugc_(?:result_success|filetype_(?:community|microtrans)|visibility_(?:public|friends_only|private)|query_RankedBy(?:Vote|PublicationDate|Trend|NumTimesReported|TotalVotesAsc|VotesUp|TextSearch)|query_(?:AcceptedForGameRankedByAcceptanceDate|FavoritedByFriendsRankedByPublicationDate|CreatedByFriendsRankedByPublicationDate|NotYetRated)|sortorder_CreationOrder(?:Desc|Asc)|sortorder_(?:TitleAsc|LastUpdatedDesc|SubscriptionDateDesc|VoteScoreDesc|ForModeration)|list_(?:Published|VotedOn|VotedUp|VotedDown|WillVoteLater|Favorited|Subscribed|UsedOrPlayed|Followed)|match_(?:Items|Items_Mtx|Items_ReadyToUse|Collections|Artwork|Videos|Screenshots|AllGuides|WebGuides|IntegratedGuides|UsableInGame|ControllerBindings))|vertex_usage_(?:position|colour|color|normal|texcoord|textcoord|blendweight|blendindices|psize|tangent|binormal|fog|depth|sample)|vertex_type_(?:float\\d|colour|color|ubyte4)|layerelementtype_(?:undefined|background|instance|oldtilemap|sprite|tilemap|particlesystem|tile)|tile_(?:rotate|flip|mirror|index_mask)|input_type|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|(?:obj|scr|spr|rm)\\w+)\\b/,",
                "\t'variable': /\\b(?:x|y|(?:x|y)(?:previous|start)|(?:h|v)speed|direction|speed|friction|gravity|gravity_direction|path_(?:index|position|positionprevious|speed|scale|orientation|endaction)|object_index|id|solid|persistent|mask_index|instance_(?:count|id)|alarm|timeline_(?:index|position|speed|running|loop)|visible|sprite_(?:index|width|height|xoffset|yoffset)|image_(?:number|index|speed|depth|xscale|yscale|angle|alpha|blend)|bbox_(?:left|right|top|bottom)|layer|phy_(?:rotation|(?:position|linear_velocity|speed|com|collision|col_normal)_(?:x|y)|angular_(?:velocity|damping)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|working_directory|webgl_enabled|view_(?:(?:y|x|w|h)view|(?:y|x|w|h)port|(?:v|h)(?:speed|border)|visible|surface_id|object|enabled|current|angle)|undefined|transition_(?:steps|kind|color)|temp_directory|show_(?:score|lives|health)|secure_mode|score|room_(?:width|speed|persistent|last|height|first|caption)|room|pointer_(?:null|invalid)|os_(?:version|type|device|browser)|mouse_(?:y|x|lastbutton|button)|lives|keyboard_(?:string|lastkey|lastchar|key)|iap_data|health|gamemaker_(?:version|registered|pro)|game_(?:save|project|display)_(?:id|name)|fps_real|fps|event_(?:type|object|number|action)|error_(?:occurred|last)|display_aa|delta_time|debug_mode|cursor_sprite|current_(?:year|weekday|time|second|month|minute|hour|day)|caption_(?:score|lives|health)|browser_(?:width|height)|background_(?:yscale|y|xscale|x|width|vtiled|vspeed|visible|showcolour|showcolor|index|htiled|hspeed|height|foreground|colour|color|blend|alpha)|async_load|application_surface|argument(?:_relitive|_count|\\d)|argument|global|local|self|other)\\b/",
                "});"
            ]
        },
        "prism-gml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gamemakerlanguage=Prism.languages.gml=Prism.languages.extend(\"clike\",{keyword:/\\b(?:if|else|switch|case|default|break|for|repeat|while|do|until|continue|exit|return|globalvar|var|enum)\\b/,number:/(?:\\b0x[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]{0,4}/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at|xor)\\b/,constant:/\\b(?:self|other|all|noone|global|local|undefined|pointer_(?:invalid|null)|action_(?:stop|restart|continue|reverse)|pi|GM_build_date|GM_version|timezone_(?:local|utc)|gamespeed_(?:fps|microseconds)|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|pre|post)|keypress|keyrelease|trigger|(?:left|right|middle|no)_button|(?:left|right|middle)_press|(?:left|right|middle)_release|mouse_(?:enter|leave|wheel_up|wheel_down)|global_(?:left|right|middle)_button|global_(?:left|right|middle)_press|global_(?:left|right|middle)_release|joystick(?:1|2)_(?:left|right|up|down|button1|button2|button3|button4|button5|button6|button7|button8)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|step_(?:normal|begin|end)|gui|gui_begin|gui_end)|vk_(?:nokey|anykey|enter|return|shift|control|alt|escape|space|backspace|tab|pause|printscreen|left|right|up|down|home|end|delete|insert|pageup|pagedown|f\\d|numpad\\d|divide|multiply|subtract|add|decimal|lshift|lcontrol|lalt|rshift|rcontrol|ralt)|mb_(?:any|none|left|right|middle)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|purple|red|silver|teal|white|yellow|orange)|fa_(?:left|center|right|top|middle|bottom|readonly|hidden|sysfile|volumeid|directory|archive)|pr_(?:pointlist|linelist|linestrip|trianglelist|trianglestrip|trianglefan)|bm_(?:complex|normal|add|max|subtract|zero|one|src_colour|inv_src_colour|src_color|inv_src_color|src_alpha|inv_src_alpha|dest_alpha|inv_dest_alpha|dest_colour|inv_dest_colour|dest_color|inv_dest_color|src_alpha_sat)|audio_(?:falloff_(?:none|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|exponent_distance|exponent_distance_clamped)|old_system|new_system|mono|stereo|3d)|cr_(?:default|none|arrow|cross|beam|size_nesw|size_ns|size_nwse|size_we|uparrow|hourglass|drag|appstart|handpoint|size_all)|spritespeed_framesper(?:second|gameframe)|asset_(?:object|unknown|sprite|sound|room|path|script|font|timeline|tiles|shader)|ds_type_(?:map|list|stack|queue|grid|priority)|ef_(?:explosion|ring|ellipse|firework|smoke|smokeup|star|spark|flare|cloud|rain|snow)|pt_shape_(?:pixel|disk|square|line|star|circle|ring|sphere|flare|spark|explosion|cloud|smoke|snow)|ps_(?:distr|shape)_(?:linear|gaussian|invgaussian|rectangle|ellipse|diamond|line)|ty_(?:real|string)|dll_(?:cdel|cdecl|stdcall)|matrix_(?:view|projection|world)|os_(?:win32|windows|macosx|ios|android|linux|unknown|winphone|win8native|psvita|ps4|xboxone|ps3|uwp)|browser_(?:not_a_browser|unknown|ie|firefox|chrome|safari|safari_mobile|opera|tizen|windows_store|ie_mobile)|device_ios_(?:unknown|iphone|iphone_retina|ipad|ipad_retina|iphone5|iphone6|iphone6plus)|device_(?:emulator|tablet)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|of_challenge_(?:win|lose|tie)|leaderboard_type_(?:number|time_mins_secs)|cmpfunc_(?:never|less|equal|lessequal|greater|notequal|greaterequal|always)|cull_(?:noculling|clockwise|counterclockwise)|lighttype_(?:dir|point)|iap_(?:ev_storeload|ev_product|ev_purchase|ev_consume|ev_restore|storeload_ok|storeload_failed|status_uninitialised|status_unavailable|status_loading|status_available|status_processing|status_restoring|failed|unavailable|available|purchased|canceled|refunded)|fb_login_(?:default|fallback_to_webview|no_fallback_to_webview|forcing_webview|use_system_account|forcing_safari)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|reaction_force_x|reaction_force_y|reaction_torque|motor_speed|angle|motor_torque|max_motor_torque|translation|speed|motor_force|max_motor_force|length_1|length_2|damping_ratio|frequency|lower_angle_limit|upper_angle_limit|angle_limits|max_length|max_torque|max_force)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_particle_flag_(?:water|zombie|wall|spring|elastic|viscous|powder|tensile|colourmixing|colormixing)|phy_particle_group_flag_(?:solid|rigid)|phy_particle_data_flag_(?:typeflags|position|velocity|colour|color|category)|achievement_(?:our_info|friends_info|leaderboard_info|info|filter_(?:all_players|friends_only|favorites_only)|type_challenge|type_score_challenge|pic_loaded|show_(?:ui|profile|leaderboard|achievement|bank|friend_picker|purchase_prompt))|network_(?:socket_(?:tcp|udp|bluetooth)|type_(?:connect|disconnect|data|non_blocking_connect)|config_(?:connect_timeout|use_non_blocking_socket|enable_reliable_udp|disable_reliable_udp))|buffer_(?:fixed|grow|wrap|fast|vbuffer|network|u8|s8|u16|s16|u32|s32|u64|f16|f32|f64|bool|text|string|seek_start|seek_relative|seek_end|generalerror|outofspace|outofbounds|invalidtype)|gp_(?:face\\d|shoulderl|shoulderr|shoulderlb|shoulderrb|select|start|stickl|stickr|padu|padd|padl|padr|axislh|axislv|axisrh|axisrv)|ov_(?:friends|community|players|settings|gamegroup|achievements)|lb_sort_(?:none|ascending|descending)|lb_disp_(?:none|numeric|time_sec|time_ms)|ugc_(?:result_success|filetype_(?:community|microtrans)|visibility_(?:public|friends_only|private)|query_RankedBy(?:Vote|PublicationDate|Trend|NumTimesReported|TotalVotesAsc|VotesUp|TextSearch)|query_(?:AcceptedForGameRankedByAcceptanceDate|FavoritedByFriendsRankedByPublicationDate|CreatedByFriendsRankedByPublicationDate|NotYetRated)|sortorder_CreationOrder(?:Desc|Asc)|sortorder_(?:TitleAsc|LastUpdatedDesc|SubscriptionDateDesc|VoteScoreDesc|ForModeration)|list_(?:Published|VotedOn|VotedUp|VotedDown|WillVoteLater|Favorited|Subscribed|UsedOrPlayed|Followed)|match_(?:Items|Items_Mtx|Items_ReadyToUse|Collections|Artwork|Videos|Screenshots|AllGuides|WebGuides|IntegratedGuides|UsableInGame|ControllerBindings))|vertex_usage_(?:position|colour|color|normal|texcoord|textcoord|blendweight|blendindices|psize|tangent|binormal|fog|depth|sample)|vertex_type_(?:float\\d|colour|color|ubyte4)|layerelementtype_(?:undefined|background|instance|oldtilemap|sprite|tilemap|particlesystem|tile)|tile_(?:rotate|flip|mirror|index_mask)|input_type|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|(?:obj|scr|spr|rm)\\w+)\\b/,variable:/\\b(?:x|y|(?:x|y)(?:previous|start)|(?:h|v)speed|direction|speed|friction|gravity|gravity_direction|path_(?:index|position|positionprevious|speed|scale|orientation|endaction)|object_index|id|solid|persistent|mask_index|instance_(?:count|id)|alarm|timeline_(?:index|position|speed|running|loop)|visible|sprite_(?:index|width|height|xoffset|yoffset)|image_(?:number|index|speed|depth|xscale|yscale|angle|alpha|blend)|bbox_(?:left|right|top|bottom)|layer|phy_(?:rotation|(?:position|linear_velocity|speed|com|collision|col_normal)_(?:x|y)|angular_(?:velocity|damping)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|working_directory|webgl_enabled|view_(?:(?:y|x|w|h)view|(?:y|x|w|h)port|(?:v|h)(?:speed|border)|visible|surface_id|object|enabled|current|angle)|undefined|transition_(?:steps|kind|color)|temp_directory|show_(?:score|lives|health)|secure_mode|score|room_(?:width|speed|persistent|last|height|first|caption)|room|pointer_(?:null|invalid)|os_(?:version|type|device|browser)|mouse_(?:y|x|lastbutton|button)|lives|keyboard_(?:string|lastkey|lastchar|key)|iap_data|health|gamemaker_(?:version|registered|pro)|game_(?:save|project|display)_(?:id|name)|fps_real|fps|event_(?:type|object|number|action)|error_(?:occurred|last)|display_aa|delta_time|debug_mode|cursor_sprite|current_(?:year|weekday|time|second|month|minute|hour|day)|caption_(?:score|lives|health)|browser_(?:width|height)|background_(?:yscale|y|xscale|x|width|vtiled|vspeed|visible|showcolour|showcolor|index|htiled|hspeed|height|foreground|colour|color|blend|alpha)|async_load|application_surface|argument(?:_relitive|_count|\\d)|argument|global|local|self|other)\\b/});"
            ]
        },
        "prism-go.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.go = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,",
                "\t'boolean': /\\b(?:_|iota|nil|true|false)\\b/,",
                "\t'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,",
                "\t'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,",
                "\t'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/",
                "});",
                "delete Prism.languages.go['class-name'];"
            ]
        },
        "prism-go.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.go=Prism.languages.extend(\"clike\",{string:{pattern:/([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},keyword:/\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,boolean:/\\b(?:_|iota|nil|true|false)\\b/,number:/(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,operator:/[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,builtin:/\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/}),delete Prism.languages.go[\"class-name\"];"
            ]
        },
        "prism-graphql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.graphql = {",
                "\t'comment': /#.*/,",
                "\t'description': {",
                "\t\tpattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,",
                "\t\tgreedy: true,",
                "\t\talias: 'string',",
                "\t\tinside: {",
                "\t\t\t'language-markdown': {",
                "\t\t\t\tpattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: Prism.languages.markdown",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'variable': /\\$[a-z_]\\w*/i,",
                "\t'directive': {",
                "\t\tpattern: /@[a-z_]\\w*/i,",
                "\t\talias: 'function'",
                "\t},",
                "\t'attr-name': {",
                "\t\tpattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*)[a-zA-Z_]\\w*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'fragment': {",
                "\t\tpattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,",
                "\t'operator': /[!=|&]|\\.{3}/,",
                "\t'punctuation': /[!(){}\\[\\]:=,]/,",
                "\t'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/",
                "};"
            ]
        },
        "prism-graphql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.graphql={comment:/#.*/,description:{pattern:/(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,greedy:!0,alias:\"string\",inside:{\"language-markdown\":{pattern:/(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,lookbehind:!0,inside:Prism.languages.markdown}}},string:{pattern:/\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},number:/(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,boolean:/\\b(?:true|false)\\b/,variable:/\\$[a-z_]\\w*/i,directive:{pattern:/@[a-z_]\\w*/i,alias:\"function\"},\"attr-name\":{pattern:/[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,greedy:!0},\"class-name\":{pattern:/(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*)[a-zA-Z_]\\w*/,lookbehind:!0},fragment:{pattern:/(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,lookbehind:!0,alias:\"function\"},keyword:/\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,operator:/[!=|&]|\\.{3}/,punctuation:/[!(){}\\[\\]:=,]/,constant:/\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/};"
            ]
        },
        "prism-groovy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.groovy = Prism.languages.extend('clike', {",
                "\t'string': [",
                "\t\t{",
                "\t\t\t// https://groovy-lang.org/syntax.html#_dollar_slashy_string",
                "\t\t\tpattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with",
                "\t\t\t// simple division (see JS regex), so find a fix maybe?",
                "\t\t\tpattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,",
                "\t'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /\\.+|[{}[\\];(),:$]/",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'string', {",
                "\t'shebang': {",
                "\t\tpattern: /#!.+/,",
                "\t\talias: 'comment'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'punctuation', {",
                "\t'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'function', {",
                "\t'annotation': {",
                "\t\tpattern: /(^|[^.])@\\w+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t}",
                "});",
                "",
                "// Handle string interpolation",
                "Prism.hooks.add('wrap', function(env) {",
                "\tif (env.language === 'groovy' && env.type === 'string') {",
                "\t\tvar delimiter = env.content[0];",
                "",
                "\t\tif (delimiter != \"'\") {",
                "\t\t\tvar pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;",
                "\t\t\tif (delimiter === '$') {",
                "\t\t\t\tpattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;",
                "\t\t\t}",
                "",
                "\t\t\t// To prevent double HTML-encoding we have to decode env.content first",
                "\t\t\tenv.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');",
                "",
                "\t\t\tenv.content = Prism.highlight(env.content, {",
                "\t\t\t\t'expression': {",
                "\t\t\t\t\tpattern: pattern,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: Prism.languages.groovy",
                "\t\t\t\t}",
                "\t\t\t});",
                "",
                "\t\t\tenv.classes.push(delimiter === '/' ? 'regex' : 'gstring');",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-groovy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.groovy=Prism.languages.extend(\"clike\",{string:[{pattern:/(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,greedy:!0},{pattern:/([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],keyword:/\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,number:/\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,operator:{pattern:/(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,lookbehind:!0},punctuation:/\\.+|[{}[\\];(),:$]/}),Prism.languages.insertBefore(\"groovy\",\"string\",{shebang:{pattern:/#!.+/,alias:\"comment\"}}),Prism.languages.insertBefore(\"groovy\",\"punctuation\",{\"spock-block\":/\\b(?:setup|given|when|then|and|cleanup|expect|where):/}),Prism.languages.insertBefore(\"groovy\",\"function\",{annotation:{pattern:/(^|[^.])@\\w+/,lookbehind:!0,alias:\"punctuation\"}}),Prism.hooks.add(\"wrap\",function(e){if(\"groovy\"===e.language&&\"string\"===e.type){var t=e.content[0];if(\"'\"!=t){var n=/([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\"$\"===t&&(n=/([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/),e.content=e.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\"),e.content=Prism.highlight(e.content,{expression:{pattern:n,lookbehind:!0,inside:Prism.languages.groovy}}),e.classes.push(\"/\"===t?\"regex\":\"gstring\")}}});"
            ]
        },
        "prism-haml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tHandle multiline code after tag",
                "\t    %foo= some |",
                "\t\t\tmultiline |",
                "\t\t\tcode |",
                "*/",
                "",
                "(function(Prism) {",
                "",
                "\tPrism.languages.haml = {",
                "\t\t// Multiline stuff should appear before the rest",
                "",
                "\t\t'multiline-comment': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "",
                "\t\t'multiline-code': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: Prism.languages.ruby",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\t// See at the end of the file for known filters",
                "\t\t'filter': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'filter-name': {",
                "\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'markup': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.markup",
                "\t\t},",
                "\t\t'doctype': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\t// Allows for one nested group of braces",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': [",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\t// Lookbehind tries to prevent interpolations from breaking it all",
                "\t\t\t\t\t\t// Allows for one nested group of braces",
                "\t\t\t\t\t\tpattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: Prism.languages.ruby",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\t\tpattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,",
                "\t\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,",
                "\t\t\t\t\t\t\t'punctuation': /[=(),]/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\t\t\t\tinside: Prism.languages.ruby",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /[<>]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.ruby",
                "\t\t},",
                "\t\t// Interpolations in plain text",
                "\t\t'interpolation': {",
                "\t\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t};",
                "",
                "\tvar filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+';",
                "",
                "\t// Non exhaustive list of available filters and associated languages",
                "\tvar filters = [",
                "\t\t'css',",
                "\t\t{filter:'coffee',language:'coffeescript'},",
                "\t\t'erb',",
                "\t\t'javascript',",
                "\t\t'less',",
                "\t\t'markdown',",
                "\t\t'ruby',",
                "\t\t'scss',",
                "\t\t'textile'",
                "\t];",
                "\tvar all_filters = {};",
                "\tfor (var i = 0, l = filters.length; i < l; i++) {",
                "\t\tvar filter = filters[i];",
                "\t\tfilter = typeof filter === 'string' ? {filter: filter, language: filter} : filter;",
                "\t\tif (Prism.languages[filter.language]) {",
                "\t\t\tall_filters['filter-' + filter.filter] = {",
                "\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', function () { return filter.filter; })),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'filter-name': {",
                "\t\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages[filter.language]",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tPrism.languages.insertBefore('haml', 'filter', all_filters);",
                "",
                "}(Prism));"
            ]
        },
        "prism-haml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.haml={\"multiline-comment\":{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,lookbehind:!0,alias:\"comment\"},\"multiline-code\":[{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,lookbehind:!0,inside:e.languages.ruby},{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,lookbehind:!0,inside:e.languages.ruby}],filter:{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},markup:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,lookbehind:!0,inside:e.languages.markup},doctype:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,lookbehind:!0},tag:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,lookbehind:!0,inside:{attributes:[{pattern:/(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,lookbehind:!0,inside:e.languages.ruby},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,lookbehind:!0},\"attr-name\":/[\\w:-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[=(),]/}},{pattern:/\\[[^\\]]+\\]/,inside:e.languages.ruby}],punctuation:/[<>]/}},code:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,lookbehind:!0,inside:e.languages.ruby},interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:e.languages.ruby}},punctuation:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,lookbehind:!0}};for(var t=[\"css\",{filter:\"coffee\",language:\"coffeescript\"},\"erb\",\"javascript\",\"less\",\"markdown\",\"ruby\",\"scss\",\"textile\"],n={},r=0,a=t.length;r<a;r++){var i=t[r];i=\"string\"==typeof i?{filter:i,language:i}:i,e.languages[i.language]&&(n[\"filter-\"+i.filter]={pattern:RegExp(\"((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\".replace(\"{{filter_name}}\",function(){return i.filter})),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[i.language]}})}e.languages.insertBefore(\"haml\",\"filter\",n)}(Prism);"
            ]
        },
        "prism-handlebars.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "\tPrism.languages.handlebars = {",
                "\t\t'comment': /\\{\\{![\\s\\S]*?\\}\\}/,",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'block': {",
                "\t\t\tpattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'brackets': {",
                "\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\[|\\]/,",
                "\t\t\t\tvariable: /[\\s\\S]+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,",
                "\t\t'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/",
                "\t};",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-handlebars.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.handlebars={comment:/\\{\\{![\\s\\S]*?\\}\\}/,delimiter:{pattern:/^\\{\\{\\{?|\\}\\}\\}?$/i,alias:\"punctuation\"},string:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,boolean:/\\b(?:true|false)\\b/,block:{pattern:/^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/i,lookbehind:!0,alias:\"keyword\"},brackets:{pattern:/\\[[^\\]]+\\]/,inside:{punctuation:/\\[|\\]/,variable:/[\\s\\S]+/}},punctuation:/[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,variable:/[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/},e.hooks.add(\"before-tokenize\",function(a){e.languages[\"markup-templating\"].buildPlaceholders(a,\"handlebars\",/\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g)}),e.hooks.add(\"after-tokenize\",function(a){e.languages[\"markup-templating\"].tokenizePlaceholders(a,\"handlebars\")})}(Prism);"
            ]
        },
        "prism-haskell.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haskell = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|{-[\\s\\S]*?-})/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'char': {",
                "\t\tpattern: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,",
                "\t'import-statement': {",
                "\t\t// The imported or hidden names are not included in this import",
                "\t\t// statement. This is because we want to highlight those exactly like",
                "\t\t// we do for the names in the program.",
                "\t\tpattern: /(^\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /\\b(?:import|qualified|as|hiding)\\b/",
                "\t\t}",
                "\t},",
                "\t// These are builtin variables only. Constructors are highlighted later as a constant.",
                "\t'builtin': /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,",
                "\t// decimal integers and floating point numbers | octal integers | hexadecimal integers",
                "\t'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,",
                "\t// Most of this is needed because of the meaning of a single '.'.",
                "\t// If it stands alone freely, it is the function composition.",
                "\t// It may also be a separator between a module name and an identifier => no",
                "\t// operator. If it comes together with other special characters it is an",
                "\t// operator too.",
                "\t'operator': /\\s\\.\\s|[-!#$%*+=?&@|~:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,",
                "\t// In Haskell, nearly everything is a variable, do not highlight these.",
                "\t'hvariable': /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,",
                "\t'constant': /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};",
                "",
                "Prism.languages.hs = Prism.languages.haskell;"
            ]
        },
        "prism-haskell.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|{-[\\s\\S]*?-})/m,lookbehind:!0},char:{pattern:/'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,alias:\"string\"},string:{pattern:/\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,greedy:!0},keyword:/\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\"import-statement\":{pattern:/(^\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:import|qualified|as|hiding)\\b/}},builtin:/\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[-!#$%*+=?&@|~:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,hvariable:/\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,constant:/\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,punctuation:/[{}[\\];(),.:]/},Prism.languages.hs=Prism.languages.haskell;"
            ]
        },
        "prism-haxe.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haxe = Prism.languages.extend('clike', {",
                "\t// Strings can be multi-line",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': {",
                "\t\t\t\t\t\tpattern: /^\\$\\w*/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t// The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"",
                "\t'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,",
                "\t'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/",
                "});",
                "Prism.languages.insertBefore('haxe', 'class-name', {",
                "\t'regex': {",
                "\t\tpattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,",
                "\t\tgreedy: true",
                "\t}",
                "});",
                "Prism.languages.insertBefore('haxe', 'keyword', {",
                "\t'preprocessor': {",
                "\t\tpattern: /#\\w+/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'metadata': {",
                "\t\tpattern: /@:?\\w+/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'reification': {",
                "\t\tpattern: /\\$(?:\\w+|(?=\\{))/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "Prism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;",
                "delete Prism.languages.haxe['class-name'];"
            ]
        },
        "prism-haxe.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haxe=Prism.languages.extend(\"clike\",{string:{pattern:/([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{interpolation:{pattern:/(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,lookbehind:!0,inside:{interpolation:{pattern:/^\\$\\w*/,alias:\"variable\"}}}}},keyword:/\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,operator:/\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/}),Prism.languages.insertBefore(\"haxe\",\"class-name\",{regex:{pattern:/~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,greedy:!0}}),Prism.languages.insertBefore(\"haxe\",\"keyword\",{preprocessor:{pattern:/#\\w+/,alias:\"builtin\"},metadata:{pattern:/@:?\\w+/,alias:\"symbol\"},reification:{pattern:/\\$(?:\\w+|(?=\\{))/,alias:\"variable\"}}),Prism.languages.haxe.string.inside.interpolation.inside.rest=Prism.languages.haxe,delete Prism.languages.haxe[\"class-name\"];"
            ]
        },
        "prism-hcl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hcl = {",
                "\t'comment': /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t'heredoc': {",
                "\t\tpattern: /<<-?(\\w+\\b)[\\s\\S]*?^[ \\t]*\\1/m,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(?:resource|data)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+{)/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'type': {",
                "\t\t\t\t\tpattern: /(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(?:provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?={)/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'type': {",
                "\t\t\t\t\tpattern: /(provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t/[\\w-]+(?=\\s+{)/",
                "\t],",
                "\t'property': [",
                "\t\t/[\\w-\\.]+(?=\\s*=(?!=))/,",
                "\t\t/\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/,",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+(?!\\$)|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'type': {",
                "\t\t\t\t\t\tpattern: /(\\b(?:terraform|var|self|count|module|path|data|local)\\b\\.)[\\w\\*]+/i,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'keyword': /\\b(?:terraform|var|self|count|module|path|data|local)\\b/i,",
                "\t\t\t\t\t'function': /\\w+(?=\\()/,",
                "\t\t\t\t\t'string': {",
                "\t\t\t\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,",
                "\t\t\t\t\t'punctuation': /[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/,",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t}",
                "\t},",
                "\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'punctuation': /[=\\[\\]{}]/,",
                "};"
            ]
        },
        "prism-hcl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hcl={comment:/(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,heredoc:{pattern:/<<-?(\\w+\\b)[\\s\\S]*?^[ \\t]*\\1/m,greedy:!0,alias:\"string\"},keyword:[{pattern:/(?:resource|data)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+{)/i,inside:{type:{pattern:/(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,lookbehind:!0,alias:\"variable\"}}},{pattern:/(?:provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?={)/i,inside:{type:{pattern:/(provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,lookbehind:!0,alias:\"variable\"}}},/[\\w-]+(?=\\s+{)/],property:[/[\\w-\\.]+(?=\\s*=(?!=))/,/\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/],string:{pattern:/\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+(?!\\$)|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,greedy:!0,inside:{interpolation:{pattern:/(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,lookbehind:!0,inside:{type:{pattern:/(\\b(?:terraform|var|self|count|module|path|data|local)\\b\\.)[\\w\\*]+/i,lookbehind:!0,alias:\"variable\"},keyword:/\\b(?:terraform|var|self|count|module|path|data|local)\\b/i,function:/\\w+(?=\\()/,string:{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0},number:/\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,punctuation:/[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/}}}},number:/\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,boolean:/\\b(?:true|false)\\b/i,punctuation:/[=\\[\\]{}]/};"
            ]
        },
        "prism-hlsl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hlsl = Prism.languages.extend('c', {",
                "",
                "\t// Regarding keywords and class names:",
                "\t// The list of all keywords was split into 'keyword' and 'class-name' tokens based on whether they are capitalized.",
                "\t// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-keywords",
                "\t// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-reserved-words",
                "\t'class-name': [",
                "\t\tPrism.languages.c['class-name'],",
                "\t\t/\\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RasterizerState|RenderTargetView|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\\b/",
                "\t],",
                "\t'keyword': [",
                "\t\t// HLSL keyword",
                "\t\t/\\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\\b/,",
                "\t\t// scalar, vector, and matrix types",
                "\t\t/\\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\\b/",
                "\t],",
                "\t// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-grammar#floating-point-numbers",
                "\t'number': /(?:(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?|\\b0x[\\da-fA-F]+)[fFhHlLuU]?\\b/,",
                "\t'boolean': /\\b(?:false|true)\\b/",
                "});"
            ]
        },
        "prism-hlsl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hlsl=Prism.languages.extend(\"c\",{\"class-name\":[Prism.languages.c[\"class-name\"],/\\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RasterizerState|RenderTargetView|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\\b/],keyword:[/\\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\\b/,/\\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\\b/],number:/(?:(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?|\\b0x[\\da-fA-F]+)[fFhHlLuU]?\\b/,boolean:/\\b(?:false|true)\\b/});"
            ]
        },
        "prism-hpkp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/",
                " */",
                "",
                "Prism.languages.hpkp = {",
                "\t'directive': {",
                "\t\tpattern: /\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=/]+\"|(?:max-age|report-uri)=|report-to )/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /\\b\\d{7,}\\b/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /\\b\\d{1,6}\\b/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-hpkp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hpkp={directive:{pattern:/\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=/]+\"|(?:max-age|report-uri)=|report-to )/,alias:\"keyword\"},safe:{pattern:/\\b\\d{7,}\\b/,alias:\"selector\"},unsafe:{pattern:/\\b\\d{1,6}\\b/,alias:\"function\"}};"
            ]
        },
        "prism-hsts.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/",
                " */",
                "",
                "Prism.languages.hsts = {",
                "\t'directive': {",
                "\t\tpattern: /\\b(?:max-age=|includeSubDomains|preload)/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /\\b\\d{8,}\\b/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /\\b\\d{1,7}\\b/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-hsts.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hsts={directive:{pattern:/\\b(?:max-age=|includeSubDomains|preload)/,alias:\"keyword\"},safe:{pattern:/\\b\\d{8,}\\b/,alias:\"selector\"},unsafe:{pattern:/\\b\\d{1,7}\\b/,alias:\"function\"}};"
            ]
        },
        "prism-http.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.http = {",
                "\t\t'request-line': {",
                "\t\t\tpattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t// HTTP Verb",
                "\t\t\t\t'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,",
                "\t\t\t\t// Path or query argument",
                "\t\t\t\t'attr-name': /:\\w+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'response-status': {",
                "\t\t\tpattern: /^HTTP\\/1.[01] \\d.*/m,",
                "\t\t\tinside: {",
                "\t\t\t\t// Status, e.g. 200 OK",
                "\t\t\t\t'property': {",
                "\t\t\t\t\tpattern: /(^HTTP\\/1.[01] )\\d.*/i,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t// HTTP header name",
                "\t\t'header-name': {",
                "\t\t\tpattern: /^[\\w-]+:(?=.)/m,",
                "\t\t\talias: 'keyword'",
                "\t\t}",
                "\t};",
                "",
                "\t// Create a mapping of Content-Type headers to language definitions",
                "\tvar langs = Prism.languages;",
                "\tvar httpLanguages = {",
                "\t\t'application/javascript': langs.javascript,",
                "\t\t'application/json': langs.json || langs.javascript,",
                "\t\t'application/xml': langs.xml,",
                "\t\t'text/xml': langs.xml,",
                "\t\t'text/html': langs.html,",
                "\t\t'text/css': langs.css",
                "\t};",
                "",
                "\t// Declare which types can also be suffixes",
                "\tvar suffixTypes = {",
                "\t\t'application/json': true,",
                "\t\t'application/xml': true",
                "\t};",
                "",
                "\t/**",
                "\t * Returns a pattern for the given content type which matches it and any type which has it as a suffix.",
                "\t *",
                "\t * @param {string} contentType",
                "\t * @returns {string}",
                "\t */",
                "\tfunction getSuffixPattern(contentType) {",
                "\t\tvar suffix = contentType.replace(/^[a-z]+\\//, '');",
                "\t\tvar suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';",
                "\t\treturn '(?:' + contentType + '|' + suffixPattern + ')';",
                "\t}",
                "",
                "\t// Insert each content type parser that has its associated language",
                "\t// currently loaded.",
                "\tvar options;",
                "\tfor (var contentType in httpLanguages) {",
                "\t\tif (httpLanguages[contentType]) {",
                "\t\t\toptions = options || {};",
                "",
                "\t\t\tvar pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;",
                "\t\t\toptions[contentType.replace(/\\//g, '-')] = {",
                "\t\t\t\tpattern: RegExp('(content-type:\\\\s*' + pattern + '.*)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: httpLanguages[contentType]",
                "\t\t\t};",
                "\t\t}",
                "\t}",
                "\tif (options) {",
                "\t\tPrism.languages.insertBefore('http', 'header-name', options);",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-http.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){t.languages.http={\"request-line\":{pattern:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,inside:{property:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\"attr-name\":/:\\w+/}},\"response-status\":{pattern:/^HTTP\\/1.[01] \\d.*/m,inside:{property:{pattern:/(^HTTP\\/1.[01] )\\d.*/i,lookbehind:!0}}},\"header-name\":{pattern:/^[\\w-]+:(?=.)/m,alias:\"keyword\"}};var a,e,n,i=t.languages,p={\"application/javascript\":i.javascript,\"application/json\":i.json||i.javascript,\"application/xml\":i.xml,\"text/xml\":i.xml,\"text/html\":i.html,\"text/css\":i.css},r={\"application/json\":!0,\"application/xml\":!0};for(var s in p)if(p[s]){a=a||{};var T=r[s]?(void 0,n=(e=s).replace(/^[a-z]+\\//,\"\"),\"(?:\"+e+\"|\\\\w+/(?:[\\\\w.-]+\\\\+)+\"+n+\"(?![+\\\\w.-]))\"):s;a[s.replace(/\\//g,\"-\")]={pattern:RegExp(\"(content-type:\\\\s*\"+T+\".*)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*\",\"i\"),lookbehind:!0,inside:p[s]}}a&&t.languages.insertBefore(\"http\",\"header-name\",a)}(Prism);"
            ]
        },
        "prism-ichigojam.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// according to the offical reference (EN)",
                "// https://ichigojam.net/IchigoJam-en.html",
                "Prism.languages.ichigojam = {",
                "\t'comment': /(?:\\B'|REM)(?:[^\\n\\r]*)/i,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t'keyword': /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,",
                "\t'function': /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,",
                "\t'label': /(?:\\B@[^\\s]+)/i,",
                "\t'operator': /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,",
                "\t'punctuation': /[\\[,;:()\\]]/",
                "};"
            ]
        },
        "prism-ichigojam.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ichigojam={comment:/(?:\\B'|REM)(?:[^\\n\\r]*)/i,string:{pattern:/\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,greedy:!0},number:/\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,keyword:/\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,function:/\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,label:/(?:\\B@[^\\s]+)/i,operator:/<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,punctuation:/[\\[,;:()\\]]/};"
            ]
        },
        "prism-icon.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.icon = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,",
                "\t'builtin-keyword': {",
                "\t\tpattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /\\$\\w+/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'keyword': /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,",
                "\t'operator': /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,",
                "\t'punctuation': /[\\[\\](){},;]/",
                "};"
            ]
        },
        "prism-icon.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.icon={comment:/#.*/,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,greedy:!0},number:/\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\"builtin-keyword\":{pattern:/&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,alias:\"variable\"},directive:{pattern:/\\$\\w+/,alias:\"builtin\"},keyword:/\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,function:/(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,operator:/[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,punctuation:/[\\[\\](){},;]/};"
            ]
        },
        "prism-iecst.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.iecst = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\(\\*[\\s\\S]*?(?:\\*\\)|$)|\\{[\\s\\S]*?(?:\\}|$))/,",
                "\t\t\tlookbehind: true,",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t},",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t},",
                "\t'class-name': /\\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:GLOBAL|INPUT|PUTPUT|IN_OUT|ACCESS|TEMP|EXTERNAL|CONFIG)|VAR|METHOD|PROPERTY)\\b/i,",
                "\t'keyword': /\\b(?:(?:END_)?(?:IF|WHILE|REPEAT|CASE|FOR)|ELSE|FROM|THEN|ELSIF|DO|TO|BY|PRIVATE|PUBLIC|PROTECTED|CONSTANT|RETURN|EXIT|CONTINUE|GOTO|JMP|AT|RETAIN|NON_RETAIN|TASK|WITH|UNTIL|USING|EXTENDS|IMPLEMENTS|GET|SET|__TRY|__CATCH|__FINALLY|__ENDTRY)\\b/,",
                "\t'variable': /\\b(?:AT|BOOL|BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT|L?REAL|TIME(?:_OF_DAY)?|TOD|DT|DATE(?:_AND_TIME)?|STRING|ARRAY|ANY|POINTER)\\b/,",
                "\t'symbol': /%[IQM][XBWDL][\\d.]*|%[IQ][\\d.]*/,",
                "\t'number': /\\b(?:16#[\\da-f]+|2#[01_]+|0x[\\da-f]+)\\b|\\b(?:T|D|DT|TOD)#[\\d_shmd:]*|\\b[A-Z]*\\#[\\d.,_]*|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "\t'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t'operator': /(?:S?R?:?=>?|&&?|\\*\\*?|<=?|>=?|[-:^/+])|\\b(?:OR|AND|MOD|NOT|XOR|LE|GE|EQ|NE|GT|LT)\\b/,",
                "\t'punctuation': /[();]/,",
                "\t'type': {",
                "\t\t'pattern': /#/,",
                "\t\t'alias': 'selector',",
                "\t},",
                "};"
            ]
        },
        "prism-iecst.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.iecst={comment:[{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\(\\*[\\s\\S]*?(?:\\*\\)|$)|\\{[\\s\\S]*?(?:\\}|$))/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":/\\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:GLOBAL|INPUT|PUTPUT|IN_OUT|ACCESS|TEMP|EXTERNAL|CONFIG)|VAR|METHOD|PROPERTY)\\b/i,keyword:/\\b(?:(?:END_)?(?:IF|WHILE|REPEAT|CASE|FOR)|ELSE|FROM|THEN|ELSIF|DO|TO|BY|PRIVATE|PUBLIC|PROTECTED|CONSTANT|RETURN|EXIT|CONTINUE|GOTO|JMP|AT|RETAIN|NON_RETAIN|TASK|WITH|UNTIL|USING|EXTENDS|IMPLEMENTS|GET|SET|__TRY|__CATCH|__FINALLY|__ENDTRY)\\b/,variable:/\\b(?:AT|BOOL|BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT|L?REAL|TIME(?:_OF_DAY)?|TOD|DT|DATE(?:_AND_TIME)?|STRING|ARRAY|ANY|POINTER)\\b/,symbol:/%[IQM][XBWDL][\\d.]*|%[IQ][\\d.]*/,number:/\\b(?:16#[\\da-f]+|2#[01_]+|0x[\\da-f]+)\\b|\\b(?:T|D|DT|TOD)#[\\d_shmd:]*|\\b[A-Z]*\\#[\\d.,_]*|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,boolean:/\\b(?:TRUE|FALSE|NULL)\\b/,function:/\\w+(?=\\()/,operator:/(?:S?R?:?=>?|&&?|\\*\\*?|<=?|>=?|[-:^/+])|\\b(?:OR|AND|MOD|NOT|XOR|LE|GE|EQ|NE|GT|LT)\\b/,punctuation:/[();]/,type:{pattern:/#/,alias:\"selector\"}};"
            ]
        },
        "prism-ignore.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.ignore = {",
                "\t\t// https://git-scm.com/docs/gitignore",
                "\t\t'comment': /^#.*/m,",
                "\t\t'entry': {",
                "\t\t\tpattern: /\\S(?:.*(?:(?:\\\\ )|\\S))?/,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'operator': /^!|\\*\\*?|\\?/,",
                "\t\t\t\t'regex': {",
                "\t\t\t\t\tpattern: /(^|[^\\\\])\\[[^\\[\\]]*\\]/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\//",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.gitignore = Prism.languages.ignore",
                "\tPrism.languages.hgignore = Prism.languages.ignore",
                "\tPrism.languages.npmignore = Prism.languages.ignore",
                "",
                "}(Prism));"
            ]
        },
        "prism-ignore.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.ignore={comment:/^#.*/m,entry:{pattern:/\\S(?:.*(?:(?:\\\\ )|\\S))?/,alias:\"string\",inside:{operator:/^!|\\*\\*?|\\?/,regex:{pattern:/(^|[^\\\\])\\[[^\\[\\]]*\\]/,lookbehind:!0},punctuation:/\\//}}},n.languages.gitignore=n.languages.ignore,n.languages.hgignore=n.languages.ignore,n.languages.npmignore=n.languages.ignore}(Prism);"
            ]
        },
        "prism-inform7.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.inform7 = {",
                "\t'string': {",
                "\t\tpattern: /\"[^\"]*\"/,",
                "\t\tinside: {",
                "\t\t\t'substitution': {",
                "\t\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern:/\\[|\\]/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'title': {",
                "\t\tpattern: /^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,",
                "\t\talias: 'important'",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?(?:(?!\\d)\\w+)?|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'verb': {",
                "\t\tpattern: /(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'property': {",
                "\t\tpattern: /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'position': {",
                "\t\tpattern: /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'type': {",
                "\t\tpattern: /(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'punctuation': /[.,:;(){}]/",
                "};",
                "",
                "Prism.languages.inform7['string'].inside['substitution'].inside.rest = Prism.languages.inform7;",
                "// We don't want the remaining text in the substitution to be highlighted as the string.",
                "Prism.languages.inform7['string'].inside['substitution'].inside.rest.text = {",
                "\tpattern: /\\S(?:\\s*\\S)*/,",
                "\talias: 'comment'",
                "};"
            ]
        },
        "prism-inform7.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.inform7={string:{pattern:/\"[^\"]*\"/,inside:{substitution:{pattern:/\\[[^\\]]+\\]/,inside:{delimiter:{pattern:/\\[|\\]/,alias:\"punctuation\"}}}}},comment:{pattern:/\\[[^\\]]+\\]/,greedy:!0},title:{pattern:/^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,alias:\"important\"},number:{pattern:/(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?(?:(?!\\d)\\w+)?|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,lookbehind:!0},verb:{pattern:/(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,lookbehind:!0,alias:\"operator\"},keyword:{pattern:/(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,lookbehind:!0},property:{pattern:/(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,lookbehind:!0,alias:\"symbol\"},position:{pattern:/(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,lookbehind:!0,alias:\"keyword\"},type:{pattern:/(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,lookbehind:!0,alias:\"variable\"},punctuation:/[.,:;(){}]/},Prism.languages.inform7.string.inside.substitution.inside.rest=Prism.languages.inform7,Prism.languages.inform7.string.inside.substitution.inside.rest.text={pattern:/\\S(?:\\s*\\S)*/,alias:\"comment\"};"
            ]
        },
        "prism-ini.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ini= {",
                "\t'comment': /^[ \\t]*[;#].*$/m,",
                "\t'selector': /^[ \\t]*\\[.*?\\]/m,",
                "\t'constant': /^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,",
                "\t'attr-value': {",
                "\t\tpattern: /=.*/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^[=]/",
                "\t\t}",
                "\t}",
                "};"
            ]
        },
        "prism-ini.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ini={comment:/^[ \\t]*[;#].*$/m,selector:/^[ \\t]*\\[.*?\\]/m,constant:/^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,\"attr-value\":{pattern:/=.*/,inside:{punctuation:/^[=]/}}};"
            ]
        },
        "prism-io.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.io = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'triple-quoted-string': {",
                "\t\tpattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,",
                "\t'builtin':/\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum)\\b/,",
                "\t'boolean': /\\b(?:true|false|nil)\\b/,",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?/i,",
                "\t'operator': /[=!*/%+\\-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|\\b(?:return|and|or|not)\\b|@@?|\\?\\??|\\.\\./,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-io.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.io={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0},{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}],\"triple-quoted-string\":{pattern:/\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,greedy:!0,alias:\"string\"},string:{pattern:/\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0},keyword:/\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,builtin:/\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum)\\b/,boolean:/\\b(?:true|false|nil)\\b/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?/i,operator:/[=!*/%+\\-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|\\b(?:return|and|or|not)\\b|@@?|\\?\\??|\\.\\./,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-j.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.j = {",
                "\t'comment': /\\bNB\\..*/,",
                "\t'string': {",
                "\t\tpattern: /'(?:''|[^'\\r\\n])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,",
                "\t'verb': {",
                "\t\t// Negative look-ahead prevents bad highlighting",
                "\t\t// of ^: ;. =. =: !. !:",
                "\t\tpattern: /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'number': /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_\\b(?!\\.))/,",
                "\t'adverb': {",
                "\t\tpattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'operator': /[=a][.:]|_\\./,",
                "\t'conjunction': {",
                "\t\tpattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'punctuation': /[()]/",
                "};"
            ]
        },
        "prism-j.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.j={comment:/\\bNB\\..*/,string:{pattern:/'(?:''|[^'\\r\\n])*'/,greedy:!0},keyword:/\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,verb:{pattern:/(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,alias:\"keyword\"},number:/\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_\\b(?!\\.))/,adverb:{pattern:/[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,alias:\"builtin\"},operator:/[=a][.:]|_\\./,conjunction:{pattern:/&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,alias:\"variable\"},punctuation:/[()]/};"
            ]
        },
        "prism-java.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;",
                "",
                "\t// full package (optional) + parent classes (optional)",
                "\tvar classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;",
                "",
                "\t// based on the java naming conventions",
                "\tvar className = {",
                "\t\tpattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'namespace': {",
                "\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\./",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.java = Prism.languages.extend('clike', {",
                "\t\t'class-name': [",
                "\t\t\tclassName,",
                "\t\t\t{",
                "\t\t\t\t// variables and parameters",
                "\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)",
                "\t\t\t\tpattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/.source),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: className.inside",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': keywords,",
                "\t\t'function': [",
                "\t\t\tPrism.languages.clike.function,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\:\\:\\s*)[a-z_]\\w*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,",
                "\t\t'operator': {",
                "\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('java', 'string', {",
                "\t\t'triple-quoted-string': {",
                "\t\t\t// http://openjdk.java.net/jeps/355#Description",
                "\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('java', 'class-name', {",
                "\t\t'annotation': {",
                "\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'generics': {",
                "\t\t\tpattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,",
                "\t\t\tinside: {",
                "\t\t\t\t'class-name': className,",
                "\t\t\t\t'keyword': keywords,",
                "\t\t\t\t'punctuation': /[<>(),.:]/,",
                "\t\t\t\t'operator': /[?&|]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'namespace': {",
                "\t\t\tpattern: RegExp(",
                "\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/",
                "\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./,",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "}(Prism));"
            ]
        },
        "prism-java.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=/\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/,n=\"(^|[^\\\\w.])(?:[a-z]\\\\w*\\\\s*\\\\.\\\\s*)*(?:[A-Z]\\\\w*\\\\s*\\\\.\\\\s*)*\",a={pattern:RegExp(n+\"[A-Z](?:[\\\\d_A-Z]*[a-z]\\\\w*)?\\\\b\"),lookbehind:!0,inside:{namespace:{pattern:/^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,inside:{punctuation:/\\./}},punctuation:/\\./}};e.languages.java=e.languages.extend(\"clike\",{\"class-name\":[a,{pattern:RegExp(n+\"[A-Z]\\\\w*(?=\\\\s+\\\\w+\\\\s*[;,=())])\"),lookbehind:!0,inside:a.inside}],keyword:t,function:[e.languages.clike.function,{pattern:/(\\:\\:\\s*)[a-z_]\\w*/,lookbehind:!0}],number:/\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0}}),e.languages.insertBefore(\"java\",\"string\",{\"triple-quoted-string\":{pattern:/\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,greedy:!0,alias:\"string\"}}),e.languages.insertBefore(\"java\",\"class-name\",{annotation:{pattern:/(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,lookbehind:!0,alias:\"punctuation\"},generics:{pattern:/<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,inside:{\"class-name\":a,keyword:t,punctuation:/[<>(),.:]/,operator:/[?&|]/}},namespace:{pattern:RegExp(\"(\\\\b(?:exports|import(?:\\\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\\\s+)(?!<keyword>)[a-z]\\\\w*(?:\\\\.[a-z]\\\\w*)*\\\\.?\".replace(/<keyword>/g,function(){return t.source})),lookbehind:!0,inside:{punctuation:/\\./}}})}(Prism);"
            ]
        },
        "prism-javadoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar codeLinePattern = /(^(?:\\s*(?:\\*\\s*)*))[^*\\s].*$/m;",
                "",
                "\tvar memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source;",
                "\tvar reference = /(?:[a-zA-Z]\\w+\\s*\\.\\s*)*[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(/<mem>/g, function () { return memberReference });",
                "",
                "\tPrism.languages.javadoc = Prism.languages.extend('javadoclike', {});",
                "\tPrism.languages.insertBefore('javadoc', 'keyword', {",
                "\t\t'reference': {",
                "\t\t\tpattern: RegExp(/(@(?:exception|throws|see|link|linkplain|value)\\s+(?:\\*\\s*)?)/.source + '(?:' + reference + ')'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': {",
                "\t\t\t\t\tpattern: /(#\\s*)\\w+(?=\\s*\\()/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'field': {",
                "\t\t\t\t\tpattern: /(#\\s*)\\w+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'namespace': {",
                "\t\t\t\t\tpattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'class-name': /\\b[A-Z]\\w*/,",
                "\t\t\t\t'keyword': Prism.languages.java.keyword,",
                "\t\t\t\t'punctuation': /[#()[\\],.]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'class-name': {",
                "\t\t\t// @param <T> the first generic type parameter",
                "\t\t\tpattern: /(@param\\s+)<[A-Z]\\w*>/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[.<>]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code-section': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'code': {",
                "\t\t\t\t\t\t// there can't be any HTML inside of {@code} tags",
                "\t\t\t\t\t\tpattern: codeLinePattern,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: Prism.languages.java,",
                "\t\t\t\t\t\talias: 'language-java'",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'line': {",
                "\t\t\t\t\t\tpattern: codeLinePattern,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t// highlight HTML tags and entities",
                "\t\t\t\t\t\t\t'tag': Prism.languages.markup.tag,",
                "\t\t\t\t\t\t\t'entity': Prism.languages.markup.entity,",
                "\t\t\t\t\t\t\t'code': {",
                "\t\t\t\t\t\t\t\t// everything else is Java code",
                "\t\t\t\t\t\t\t\tpattern: /.+/,",
                "\t\t\t\t\t\t\t\tinside: Prism.languages.java,",
                "\t\t\t\t\t\t\t\talias: 'language-java'",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'tag': Prism.languages.markup.tag,",
                "\t\t'entity': Prism.languages.markup.entity,",
                "\t});",
                "",
                "\tPrism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);",
                "}(Prism));"
            ]
        },
        "prism-javadoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=/(^(?:\\s*(?:\\*\\s*)*))[^*\\s].*$/m,n=\"(?:[a-zA-Z]\\\\w+\\\\s*\\\\.\\\\s*)*[A-Z]\\\\w*(?:\\\\s*<mem>)?|<mem>\".replace(/<mem>/g,function(){return\"#\\\\s*\\\\w+(?:\\\\s*\\\\([^()]*\\\\))?\"});a.languages.javadoc=a.languages.extend(\"javadoclike\",{}),a.languages.insertBefore(\"javadoc\",\"keyword\",{reference:{pattern:RegExp(\"(@(?:exception|throws|see|link|linkplain|value)\\\\s+(?:\\\\*\\\\s*)?)(?:\"+n+\")\"),lookbehind:!0,inside:{function:{pattern:/(#\\s*)\\w+(?=\\s*\\()/,lookbehind:!0},field:{pattern:/(#\\s*)\\w+/,lookbehind:!0},namespace:{pattern:/\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,inside:{punctuation:/\\./}},\"class-name\":/\\b[A-Z]\\w*/,keyword:a.languages.java.keyword,punctuation:/[#()[\\],.]/}},\"class-name\":{pattern:/(@param\\s+)<[A-Z]\\w*>/,lookbehind:!0,inside:{punctuation:/[.<>]/}},\"code-section\":[{pattern:/(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,lookbehind:!0,inside:{code:{pattern:e,lookbehind:!0,inside:a.languages.java,alias:\"language-java\"}}},{pattern:/(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,lookbehind:!0,inside:{line:{pattern:e,lookbehind:!0,inside:{tag:a.languages.markup.tag,entity:a.languages.markup.entity,code:{pattern:/.+/,inside:a.languages.java,alias:\"language-java\"}}}}}],tag:a.languages.markup.tag,entity:a.languages.markup.entity}),a.languages.javadoclike.addSupport(\"java\",a.languages.javadoc)}(Prism);"
            ]
        },
        "prism-javadoclike.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar javaDocLike = Prism.languages.javadoclike = {",
                "\t\t'parameter': {",
                "\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\t// keywords are the first word in a line preceded be an `@` or surrounded by curly braces.",
                "\t\t\t// @word, {@word}",
                "\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'punctuation': /[{}]/",
                "\t};",
                "",
                "",
                "\t/**",
                "\t * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.",
                "\t *",
                "\t * @param {string} lang the language add doc comment support to.",
                "\t * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.",
                "\t */",
                "\tfunction docCommentSupport(lang, callback) {",
                "\t\tvar tokenName = 'doc-comment';",
                "",
                "\t\tvar grammar = Prism.languages[lang];",
                "\t\tif (!grammar) {",
                "\t\t\treturn;",
                "\t\t}",
                "\t\tvar token = grammar[tokenName];",
                "",
                "\t\tif (!token) {",
                "\t\t\t// add doc comment: /** */",
                "\t\t\tvar definition = {};",
                "\t\t\tdefinition[tokenName] = {",
                "\t\t\t\tpattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t};",
                "",
                "\t\t\tgrammar = Prism.languages.insertBefore(lang, 'comment', definition);",
                "\t\t\ttoken = grammar[tokenName];",
                "\t\t}",
                "",
                "\t\tif (token instanceof RegExp) { // convert regex to object",
                "\t\t\ttoken = grammar[tokenName] = { pattern: token };",
                "\t\t}",
                "",
                "\t\tif (Array.isArray(token)) {",
                "\t\t\tfor (var i = 0, l = token.length; i < l; i++) {",
                "\t\t\t\tif (token[i] instanceof RegExp) {",
                "\t\t\t\t\ttoken[i] = { pattern: token[i] };",
                "\t\t\t\t}",
                "\t\t\t\tcallback(token[i]);",
                "\t\t\t}",
                "\t\t} else {",
                "\t\t\tcallback(token);",
                "\t\t}",
                "\t}",
                "",
                "\t/**",
                "\t * Adds doc-comment support to the given languages for the given documentation language.",
                "\t *",
                "\t * @param {string[]|string} languages",
                "\t * @param {Object} docLanguage",
                "\t */",
                "\tfunction addSupport(languages, docLanguage) {",
                "\t\tif (typeof languages === 'string') {",
                "\t\t\tlanguages = [languages];",
                "\t\t}",
                "",
                "\t\tlanguages.forEach(function (lang) {",
                "\t\t\tdocCommentSupport(lang, function (pattern) {",
                "\t\t\t\tif (!pattern.inside) {",
                "\t\t\t\t\tpattern.inside = {};",
                "\t\t\t\t}",
                "\t\t\t\tpattern.inside.rest = docLanguage;",
                "\t\t\t});",
                "\t\t});",
                "\t}",
                "",
                "\tObject.defineProperty(javaDocLike, 'addSupport', { value: addSupport });",
                "",
                "\tjavaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);",
                "",
                "}(Prism));"
            ]
        },
        "prism-javadoclike.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(p){var a=p.languages.javadoclike={parameter:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,lookbehind:!0},keyword:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(a,\"addSupport\",{value:function(a,e){\"string\"==typeof a&&(a=[a]),a.forEach(function(a){!function(a,e){var n=\"doc-comment\",t=p.languages[a];if(t){var r=t[n];if(!r){var o={\"doc-comment\":{pattern:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,alias:\"comment\"}};r=(t=p.languages.insertBefore(a,\"comment\",o))[n]}if(r instanceof RegExp&&(r=t[n]={pattern:r}),Array.isArray(r))for(var i=0,s=r.length;i<s;i++)r[i]instanceof RegExp&&(r[i]={pattern:r[i]}),e(r[i]);else e(r)}}(a,function(a){a.inside||(a.inside={}),a.inside.rest=e})})}}),a.addSupport([\"java\",\"javascript\",\"php\"],a)}(Prism);"
            ]
        },
        "prism-javascript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javascript = Prism.languages.extend('clike', {",
                "\t'class-name': [",
                "\t\tPrism.languages.clike['class-name'],",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /((?:^|})\\s*)(?:catch|finally)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t],",
                "\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)",
                "\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,",
                "\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,",
                "\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/",
                "});",
                "",
                "Prism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;",
                "",
                "Prism.languages.insertBefore('javascript', 'keyword', {",
                "\t'regex': {",
                "\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'regex-source': {",
                "\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'language-regex',",
                "\t\t\t\tinside: Prism.languages.regex",
                "\t\t\t},",
                "\t\t\t'regex-flags': /[a-z]+$/,",
                "\t\t\t'regex-delimiter': /^\\/|\\/$/",
                "\t\t}",
                "\t},",
                "\t// This must be declared before keyword because we use \"function\" inside the look-forward",
                "\t'function-variable': {",
                "\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'parameter': [",
                "\t\t{",
                "\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t}",
                "\t],",
                "\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('javascript', 'string', {",
                "\t'template-string': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'template-punctuation': {",
                "\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\tpattern: /^\\${|}$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "if (Prism.languages.markup) {",
                "\tPrism.languages.markup.tag.addInlined('script', 'javascript');",
                "}",
                "",
                "Prism.languages.js = Prism.languages.javascript;"
            ]
        },
        "prism-javascript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\\s*)(?:catch|finally)\\b/,lookbehind:!0},{pattern:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,lookbehind:!0}],function:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,number:/\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,operator:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,lookbehind:!0,greedy:!0,inside:{\"regex-source\":{pattern:/^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,lookbehind:!0,alias:\"language-regex\",inside:Prism.languages.regex},\"regex-flags\":/[a-z]+$/,\"regex-delimiter\":/^\\/|\\/$/}},\"function-variable\":{pattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,alias:\"function\"},parameter:[{pattern:/(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,inside:Prism.languages.javascript},{pattern:/(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,greedy:!0,inside:{\"template-punctuation\":{pattern:/^`|`$/,alias:\"string\"},interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.markup.tag.addInlined(\"script\",\"javascript\"),Prism.languages.js=Prism.languages.javascript;"
            ]
        },
        "prism-javastacktrace.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Specification:",
                "// https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Throwable.html#printStackTrace()",
                "",
                "Prism.languages.javastacktrace = {",
                "",
                "\t// java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]",
                "\t// Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]",
                "\t// Caused by: com.example.myproject.MyProjectServletException",
                "\t// Caused by: MidLevelException: LowLevelException",
                "\t// Suppressed: Resource$CloseFailException: Resource ID = 0",
                "\t'summary': {",
                "\t\tpattern: /^[\\t ]*(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?:\\:.*)?$/m,",
                "\t\tinside: {",
                "\t\t\t'keyword': {",
                "\t\t\t\tpattern: /^(\\s*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "",
                "\t\t\t// the current thread if the summary starts with 'Exception in thread'",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /^(\\s*)\"[^\"]*\"/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'exceptions': {",
                "\t\t\t\tpattern: /^(:?\\s*)[\\w$.]+(?=:|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'class-name': /[\\w$]+(?=$|:)/,",
                "\t\t\t\t\t'namespace': /[a-z]\\w*/,",
                "\t\t\t\t\t'punctuation': /[.:]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'message': {",
                "\t\t\t\tpattern: /(:\\s*)\\S.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t'punctuation': /[:]/",
                "\t\t}",
                "\t},",
                "",
                "\t// at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)",
                "\t// at org.hsqldb.jdbc.Util.throwError(Unknown Source) here could be some notes",
                "\t// at java.base/java.lang.Class.forName0(Native Method)",
                "\t// at Util.<init>(Unknown Source)",
                "\t// at com.foo.loader/foo@9.0/com.foo.Main.run(Main.java:101)",
                "\t// at com.foo.loader//com.foo.bar.App.run(App.java:12)",
                "\t// at acme@2.1/org.acme.Lib.test(Lib.java:80)",
                "\t// at MyClass.mash(MyClass.java:9)",
                "\t//",
                "\t// More information:",
                "\t// https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/StackTraceElement.html#toString()",
                "\t//",
                "\t// A valid Java module name is defined as:",
                "\t//   \"A module name consists of one or more Java identifiers (§3.8) separated by \".\" tokens.\"",
                "\t// https://docs.oracle.com/javase/specs/jls/se9/html/jls-6.html#jls-ModuleName",
                "\t//",
                "\t// A Java module version is defined by this class:",
                "\t// https://docs.oracle.com/javase/9/docs/api/java/lang/module/ModuleDescriptor.Version.html",
                "\t// This is the implementation of the `parse` method in JDK13:",
                "\t// https://github.com/matcdac/jdk/blob/2305df71d1b7710266ae0956d73927a225132c0f/src/java.base/share/classes/java/lang/module/ModuleDescriptor.java#L1108",
                "\t// However, to keep this simple, a version will be matched by the pattern /@[\\w$.+-]*/.",
                "\t'stack-frame': {",
                "\t\tpattern: /^[\\t ]*at (?:[\\w$./]|@[\\w$.+-]*\\/)+(?:<init>)?\\([^()]*\\)/m,",
                "\t\tinside: {",
                "\t\t\t'keyword': {",
                "\t\t\t\tpattern: /^(\\s*)at(?= )/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'source': [",
                "\t\t\t\t// (Main.java:15)",
                "\t\t\t\t// (Main.scala:15)",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\()\\w+\\.\\w+:\\d+(?=\\))/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'file': /^\\w+\\.\\w+/,",
                "\t\t\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t\t\t'line-number': {",
                "\t\t\t\t\t\t\tpattern: /\\d+/,",
                "\t\t\t\t\t\t\talias: 'number'",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t// (Unknown Source)",
                "\t\t\t\t// (Native Method)",
                "\t\t\t\t// (...something...)",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\()[^()]*(?=\\))/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'keyword': /^(?:Unknown Source|Native Method)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t],",
                "\t\t\t'class-name': /[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,",
                "\t\t\t'function': /(?:<init>|[\\w$]+)(?=\\()/,",
                "\t\t\t'class-loader': {",
                "\t\t\t\tpattern: /(\\s)[a-z]\\w*(?:\\.[a-z]\\w*)*(?=\\/[\\w@$.]*\\/)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'namespace',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'module': {",
                "\t\t\t\tpattern: /([\\s/])[a-z]\\w*(?:\\.[a-z]\\w*)*(?:@[\\w$.+-]*)?(?=\\/)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'version': {",
                "\t\t\t\t\t\tpattern: /(@)[\\s\\S]+/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'number'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'punctuation': /[@.]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'namespace': {",
                "\t\t\t\tpattern: /(?:[a-z]\\w*\\.)+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /[()/.]/",
                "\t\t}",
                "\t},",
                "",
                "\t// ... 32 more",
                "\t// ... 32 common frames omitted",
                "\t'more': {",
                "\t\tpattern: /^[\\t ]*\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\.{3}/,",
                "\t\t\t'number': /\\d+/,",
                "\t\t\t'keyword': /\\b[a-z]+(?: [a-z]+)*\\b/",
                "\t\t}",
                "\t}",
                "",
                "};"
            ]
        },
        "prism-javastacktrace.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javastacktrace={summary:{pattern:/^[\\t ]*(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?:\\:.*)?$/m,inside:{keyword:{pattern:/^(\\s*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,lookbehind:!0},string:{pattern:/^(\\s*)\"[^\"]*\"/,lookbehind:!0},exceptions:{pattern:/^(:?\\s*)[\\w$.]+(?=:|$)/,lookbehind:!0,inside:{\"class-name\":/[\\w$]+(?=$|:)/,namespace:/[a-z]\\w*/,punctuation:/[.:]/}},message:{pattern:/(:\\s*)\\S.*/,lookbehind:!0,alias:\"string\"},punctuation:/[:]/}},\"stack-frame\":{pattern:/^[\\t ]*at (?:[\\w$./]|@[\\w$.+-]*\\/)+(?:<init>)?\\([^()]*\\)/m,inside:{keyword:{pattern:/^(\\s*)at(?= )/,lookbehind:!0},source:[{pattern:/(\\()\\w+\\.\\w+:\\d+(?=\\))/,lookbehind:!0,inside:{file:/^\\w+\\.\\w+/,punctuation:/:/,\"line-number\":{pattern:/\\d+/,alias:\"number\"}}},{pattern:/(\\()[^()]*(?=\\))/,lookbehind:!0,inside:{keyword:/^(?:Unknown Source|Native Method)$/}}],\"class-name\":/[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,function:/(?:<init>|[\\w$]+)(?=\\()/,\"class-loader\":{pattern:/(\\s)[a-z]\\w*(?:\\.[a-z]\\w*)*(?=\\/[\\w@$.]*\\/)/,lookbehind:!0,alias:\"namespace\",inside:{punctuation:/\\./}},module:{pattern:/([\\s/])[a-z]\\w*(?:\\.[a-z]\\w*)*(?:@[\\w$.+-]*)?(?=\\/)/,lookbehind:!0,inside:{version:{pattern:/(@)[\\s\\S]+/,lookbehind:!0,alias:\"number\"},punctuation:/[@.]/}},namespace:{pattern:/(?:[a-z]\\w*\\.)+/,inside:{punctuation:/\\./}},punctuation:/[()/.]/}},more:{pattern:/^[\\t ]*\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,inside:{punctuation:/\\.{3}/,number:/\\d+/,keyword:/\\b[a-z]+(?: [a-z]+)*\\b/}}};"
            ]
        },
        "prism-jolie.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jolie = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,",
                "\t'operator': /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,",
                "\t'punctuation': /[,.]/,",
                "\t'builtin': /\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,",
                "\t'symbol': /[|;@]/",
                "});",
                "",
                "delete Prism.languages.jolie['class-name'];",
                "",
                "Prism.languages.insertBefore( 'jolie', 'keyword', {",
                "\t'function':",
                "\t{",
                "\t\tpattern: /((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'aggregates': {",
                "\t\tpattern: /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'with-extension': {",
                "\t\t\t\tpattern: /\\bwith\\s+\\w+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword' : /\\bwith\\b/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /\\w+/",
                "\t\t\t},",
                "\t\t\t'punctuation': {",
                "\t\t\t\tpattern: /,/",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'redirects': {",
                "\t\tpattern: /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': {",
                "\t\t\t\tpattern: /,/",
                "\t\t\t},",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /\\w+/",
                "\t\t\t},",
                "\t\t\t'symbol': {",
                "\t\t\t\tpattern: /=>/",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-jolie.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jolie=Prism.languages.extend(\"clike\",{string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:/\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,operator:/-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,punctuation:/[,.]/,builtin:/\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,symbol:/[|;@]/}),delete Prism.languages.jolie[\"class-name\"],Prism.languages.insertBefore(\"jolie\",\"keyword\",{function:{pattern:/((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,lookbehind:!0},aggregates:{pattern:/(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,lookbehind:!0,inside:{\"with-extension\":{pattern:/\\bwith\\s+\\w+/,inside:{keyword:/\\bwith\\b/}},function:{pattern:/\\w+/},punctuation:{pattern:/,/}}},redirects:{pattern:/(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,lookbehind:!0,inside:{punctuation:{pattern:/,/},function:{pattern:/\\w+/},symbol:{pattern:/=>/}}}});"
            ]
        },
        "prism-jq.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar interpolation = /\\\\\\((?:[^()]|\\([^()]*\\))*\\)/.source;",
                "\tvar string = RegExp(/\"(?:[^\"\\r\\n\\\\]|\\\\[^\\r\\n(]|__)*\"/.source.replace(/__/g, function () { return interpolation; }));",
                "\tvar stringInterpolation = {",
                "\t\t'interpolation': {",
                "\t\t\tpattern: RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + interpolation),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: null // see below",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /^\\\\\\(|\\)$/",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tvar jq = Prism.languages.jq = {",
                "\t\t'comment': /#.*/,",
                "\t\t'property': {",
                "\t\t\tpattern: RegExp(string.source + /(?=\\s*:(?!:))/.source),",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: stringInterpolation",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: string,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: stringInterpolation",
                "\t\t},",
                "",
                "\t\t'function': {",
                "\t\t\tpattern: /(\\bdef\\s+)[a-z_]\\w+/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t'variable': /\\B\\$\\w+/,",
                "\t\t'property-literal': {",
                "\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'keyword': /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'number': /(?:\\b\\d+\\.|\\B\\.)?\\b\\d+(?:[eE][+-]?\\d+)?\\b/,",
                "",
                "\t\t'operator': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\|=?/,",
                "\t\t\t\talias: 'pipe'",
                "\t\t\t},",
                "\t\t\t/\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|or|not)\\b/",
                "\t\t],",
                "\t\t'c-style-function': {",
                "\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'punctuation': /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,",
                "\t\t'dot': {",
                "\t\t\tpattern: /\\./,",
                "\t\t\talias: 'important'",
                "\t\t}",
                "\t}",
                "",
                "\tstringInterpolation.interpolation.inside.content.inside = jq;",
                "",
                "}(Prism));"
            ]
        },
        "prism-jq.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n=\"\\\\\\\\\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)\",t=RegExp('\"(?:[^\"\\r\\n\\\\\\\\]|\\\\\\\\[^\\r\\n(]|__)*\"'.replace(/__/g,function(){return n})),i={interpolation:{pattern:RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)\"+n),lookbehind:!0,inside:{content:{pattern:/^(\\\\\\()[\\s\\S]+(?=\\)$)/,lookbehind:!0,inside:null},punctuation:/^\\\\\\(|\\)$/}}},a=e.languages.jq={comment:/#.*/,property:{pattern:RegExp(t.source+\"(?=\\\\s*:(?!:))\"),greedy:!0,inside:i},string:{pattern:t,greedy:!0,inside:i},function:{pattern:/(\\bdef\\s+)[a-z_]\\w+/i,lookbehind:!0},variable:/\\B\\$\\w+/,\"property-literal\":{pattern:/\\b[a-z_]\\w*(?=\\s*:(?!:))/i,alias:\"property\"},keyword:/\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,boolean:/\\b(?:true|false)\\b/,number:/(?:\\b\\d+\\.|\\B\\.)?\\b\\d+(?:[eE][+-]?\\d+)?\\b/,operator:[{pattern:/\\|=?/,alias:\"pipe\"},/\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|or|not)\\b/],\"c-style-function\":{pattern:/\\b[a-z_]\\w*(?=\\s*\\()/i,alias:\"function\"},punctuation:/::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,dot:{pattern:/\\./,alias:\"important\"}};i.interpolation.inside.content.inside=a}(Prism);"
            ]
        },
        "prism-js-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.insertBefore('javascript', 'function-variable', {",
                "\t\t'method-variable': {",
                "\t\t\tpattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: ['function-variable', 'method', 'function', 'property-access']",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('javascript', 'function', {",
                "\t\t'method': {",
                "\t\t\tpattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: ['function', 'property-access']",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('javascript', 'constant', {",
                "\t\t'known-class-name': [",
                "\t\t\t{",
                "\t\t\t\t// standard built-ins",
                "\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",
                "\t\t\t\tpattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,",
                "\t\t\t\talias: 'class-name'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// errors",
                "\t\t\t\tpattern: /\\b(?:[A-Z]\\w*)Error\\b/,",
                "\t\t\t\talias: 'class-name'",
                "\t\t\t}",
                "\t\t]",
                "\t});",
                "",
                "\t/**",
                "\t * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.",
                "\t *",
                "\t * @param {string} source",
                "\t * @param {string} [flags]",
                "\t * @returns {RegExp}",
                "\t */",
                "\tfunction withId(source, flags) {",
                "\t\treturn RegExp(",
                "\t\t\tsource.replace(/<ID>/g, function () { return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source; }),",
                "\t\t\tflags);",
                "\t}",
                "\tPrism.languages.insertBefore('javascript', 'keyword', {",
                "\t\t'imports': {",
                "\t\t\t// https://tc39.es/ecma262/#sec-imports",
                "\t\t\tpattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t'exports': {",
                "\t\t\t// https://tc39.es/ecma262/#sec-exports",
                "\t\t\tpattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.javascript['keyword'].unshift(",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:as|default|export|from|import)\\b/,",
                "\t\t\talias: 'module'",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\\b/,",
                "\t\t\talias: 'control-flow'",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\bnull\\b/,",
                "\t\t\talias: ['null', 'nil']",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\bundefined\\b/,",
                "\t\t\talias: 'nil'",
                "\t\t}",
                "\t);",
                "",
                "\tPrism.languages.insertBefore('javascript', 'operator', {",
                "\t\t'spread': {",
                "\t\t\tpattern: /\\.{3}/,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'arrow': {",
                "\t\t\tpattern: /=>/,",
                "\t\t\talias: 'operator'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('javascript', 'punctuation', {",
                "\t\t'property-access': {",
                "\t\t\tpattern: withId(/(\\.\\s*)#?<ID>/.source),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'maybe-class-name': {",
                "\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'dom': {",
                "\t\t\t// this contains only a few commonly used DOM variables",
                "\t\t\tpattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "\t\t'console': {",
                "\t\t\tpattern: /\\bconsole(?=\\s*\\.)/,",
                "\t\t\talias: 'class-name'",
                "\t\t}",
                "\t});",
                "",
                "",
                "\t// add 'maybe-class-name' to tokens which might be a class name",
                "\tvar maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];",
                "",
                "\tfor (var i = 0; i < maybeClassNameTokens.length; i++) {",
                "\t\tvar token = maybeClassNameTokens[i];",
                "\t\tvar value = Prism.languages.javascript[token];",
                "",
                "\t\t// convert regex to object",
                "\t\tif (Prism.util.type(value) === 'RegExp') {",
                "\t\t\tvalue = Prism.languages.javascript[token] = {",
                "\t\t\t\tpattern: value",
                "\t\t\t};",
                "\t\t}",
                "",
                "\t\t// keep in mind that we don't support arrays",
                "",
                "\t\tvar inside = value.inside || {};",
                "\t\tvalue.inside = inside;",
                "",
                "\t\tinside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-js-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){function e(a,e){return RegExp(a.replace(/<ID>/g,function(){return\"(?!\\\\s)[_$a-zA-Z\\\\xA0-\\\\uFFFF](?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF])*\"}),e)}a.languages.insertBefore(\"javascript\",\"function-variable\",{\"method-variable\":{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript[\"function-variable\"].pattern.source),lookbehind:!0,alias:[\"function-variable\",\"method\",\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"function\",{method:{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript.function.source),lookbehind:!0,alias:[\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"constant\",{\"known-class-name\":[{pattern:/\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,alias:\"class-name\"},{pattern:/\\b(?:[A-Z]\\w*)Error\\b/,alias:\"class-name\"}]}),a.languages.insertBefore(\"javascript\",\"keyword\",{imports:{pattern:e(\"(\\\\bimport\\\\b\\\\s*)(?:<ID>(?:\\\\s*,\\\\s*(?:\\\\*\\\\s*as\\\\s+<ID>|\\\\{[^{}]*\\\\}))?|\\\\*\\\\s*as\\\\s+<ID>|\\\\{[^{}]*\\\\})(?=\\\\s*\\\\bfrom\\\\b)\"),lookbehind:!0,inside:a.languages.javascript},exports:{pattern:e(\"(\\\\bexport\\\\b\\\\s*)(?:\\\\*(?:\\\\s*as\\\\s+<ID>)?(?=\\\\s*\\\\bfrom\\\\b)|\\\\{[^{}]*\\\\})\"),lookbehind:!0,inside:a.languages.javascript}}),a.languages.javascript.keyword.unshift({pattern:/\\b(?:as|default|export|from|import)\\b/,alias:\"module\"},{pattern:/\\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\\b/,alias:\"control-flow\"},{pattern:/\\bnull\\b/,alias:[\"null\",\"nil\"]},{pattern:/\\bundefined\\b/,alias:\"nil\"}),a.languages.insertBefore(\"javascript\",\"operator\",{spread:{pattern:/\\.{3}/,alias:\"operator\"},arrow:{pattern:/=>/,alias:\"operator\"}}),a.languages.insertBefore(\"javascript\",\"punctuation\",{\"property-access\":{pattern:e(\"(\\\\.\\\\s*)#?<ID>\"),lookbehind:!0},\"maybe-class-name\":{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,lookbehind:!0},dom:{pattern:/\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,alias:\"variable\"},console:{pattern:/\\bconsole(?=\\s*\\.)/,alias:\"class-name\"}});for(var t=[\"function\",\"function-variable\",\"method\",\"method-variable\",\"property-access\"],r=0;r<t.length;r++){var n=t[r],s=a.languages.javascript[n];\"RegExp\"===a.util.type(s)&&(s=a.languages.javascript[n]={pattern:s});var o=s.inside||{};(s.inside=o)[\"maybe-class-name\"]=/^[A-Z][\\s\\S]*/}}(Prism);"
            ]
        },
        "prism-js-templates.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar templateString = Prism.languages.javascript['template-string'];",
                "",
                "\t// see the pattern in prism-javascript.js",
                "\tvar templateLiteralPattern = templateString.pattern.source;",
                "\tvar interpolationObject = templateString.inside['interpolation'];",
                "\tvar interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];",
                "\tvar interpolationPattern = interpolationObject.pattern.source;",
                "",
                "",
                "\t/**",
                "\t * Creates a new pattern to match a template string with a special tag.",
                "\t *",
                "\t * This will return `undefined` if there is no grammar with the given language id.",
                "\t *",
                "\t * @param {string} language The language id of the embedded language. E.g. `markdown`.",
                "\t * @param {string} tag The regex pattern to match the tag.",
                "\t * @returns {object | undefined}",
                "\t * @example",
                "\t * createTemplate('css', /\\bcss/.source);",
                "\t */",
                "\tfunction createTemplate(language, tag) {",
                "\t\tif (!Prism.languages[language]) {",
                "\t\t\treturn undefined;",
                "\t\t}",
                "",
                "\t\treturn {",
                "\t\t\tpattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'template-punctuation': {",
                "\t\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\t\talias: 'string'",
                "\t\t\t\t},",
                "\t\t\t\t'embedded-code': {",
                "\t\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\t\talias: language",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t};",
                "\t}",
                "",
                "",
                "\tPrism.languages.javascript['template-string'] = [",
                "\t\t// styled-jsx:",
                "\t\t//   css`a { color: #25F; }`",
                "\t\t// styled-components:",
                "\t\t//   styled.h1`color: red;`",
                "\t\tcreateTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),",
                "",
                "\t\t// html`<p></p>`",
                "\t\t// div.innerHTML = `<p></p>`",
                "\t\tcreateTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),",
                "",
                "\t\t// svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`",
                "\t\tcreateTemplate('svg', /\\bsvg/.source),",
                "",
                "\t\t// md`# h1`, markdown`## h2`",
                "\t\tcreateTemplate('markdown', /\\b(?:md|markdown)/.source),",
                "",
                "\t\t// gql`...`, graphql`...`, graphql.experimental`...`",
                "\t\tcreateTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source),",
                "",
                "\t\t// vanilla template string",
                "\t\ttemplateString",
                "\t].filter(Boolean);",
                "",
                "",
                "\t/**",
                "\t * Returns a specific placeholder literal for the given language.",
                "\t *",
                "\t * @param {number} counter",
                "\t * @param {string} language",
                "\t * @returns {string}",
                "\t */",
                "\tfunction getPlaceholder(counter, language) {",
                "\t\treturn '___' + language.toUpperCase() + '_' + counter + '___';",
                "\t}",
                "",
                "\t/**",
                "\t * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.",
                "\t *",
                "\t * @param {string} code",
                "\t * @param {any} grammar",
                "\t * @param {string} language",
                "\t * @returns {(string|Token)[]}",
                "\t */",
                "\tfunction tokenizeWithHooks(code, grammar, language) {",
                "\t\tvar env = {",
                "\t\t\tcode: code,",
                "\t\t\tgrammar: grammar,",
                "\t\t\tlanguage: language",
                "\t\t};",
                "\t\tPrism.hooks.run('before-tokenize', env);",
                "\t\tenv.tokens = Prism.tokenize(env.code, env.grammar);",
                "\t\tPrism.hooks.run('after-tokenize', env);",
                "\t\treturn env.tokens;",
                "\t}",
                "",
                "\t/**",
                "\t * Returns the token of the given JavaScript interpolation expression.",
                "\t *",
                "\t * @param {string} expression The code of the expression. E.g. `\"${42}\"`",
                "\t * @returns {Token}",
                "\t */",
                "\tfunction tokenizeInterpolationExpression(expression) {",
                "\t\tvar tempGrammar = {};",
                "\t\ttempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;",
                "",
                "\t\t/** @type {Array} */",
                "\t\tvar tokens = Prism.tokenize(expression, tempGrammar);",
                "\t\tif (tokens.length === 3) {",
                "\t\t\t/**",
                "\t\t\t * The token array will look like this",
                "\t\t\t * [",
                "\t\t\t *     [\"interpolation-punctuation\", \"${\"]",
                "\t\t\t *     \"...\" // JavaScript expression of the interpolation",
                "\t\t\t *     [\"interpolation-punctuation\", \"}\"]",
                "\t\t\t * ]",
                "\t\t\t */",
                "",
                "\t\t\tvar args = [1, 1];",
                "\t\t\targs.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));",
                "",
                "\t\t\ttokens.splice.apply(tokens, args);",
                "\t\t}",
                "",
                "\t\treturn new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);",
                "\t}",
                "",
                "\t/**",
                "\t * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.",
                "\t *",
                "\t * This function has 3 phases:",
                "\t *",
                "\t * 1. Replace all JavaScript interpolation expression with a placeholder.",
                "\t *    The placeholder will have the syntax of a identify of the target language.",
                "\t * 2. Tokenize the code with placeholders.",
                "\t * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.",
                "\t *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been",
                "\t *    tokenized as two tokens by the grammar of the embedded language.",
                "\t *",
                "\t * @param {string} code",
                "\t * @param {object} grammar",
                "\t * @param {string} language",
                "\t * @returns {Token}",
                "\t */",
                "\tfunction tokenizeEmbedded(code, grammar, language) {",
                "\t\t// 1. First filter out all interpolations",
                "",
                "\t\t// because they might be escaped, we need a lookbehind, so we use Prism",
                "\t\t/** @type {(Token|string)[]} */",
                "\t\tvar _tokens = Prism.tokenize(code, {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: RegExp(interpolationPattern),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t});",
                "",
                "\t\t// replace all interpolations with a placeholder which is not in the code already",
                "\t\tvar placeholderCounter = 0;",
                "\t\t/** @type {Object<string, string>} */",
                "\t\tvar placeholderMap = {};",
                "\t\tvar embeddedCode = _tokens.map(function (token) {",
                "\t\t\tif (typeof token === 'string') {",
                "\t\t\t\treturn token;",
                "\t\t\t} else {",
                "\t\t\t\tvar interpolationExpression = token.content;",
                "",
                "\t\t\t\tvar placeholder;",
                "\t\t\t\twhile (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) { }",
                "\t\t\t\tplaceholderMap[placeholder] = interpolationExpression;",
                "\t\t\t\treturn placeholder;",
                "\t\t\t}",
                "\t\t}).join('');",
                "",
                "",
                "\t\t// 2. Tokenize the embedded code",
                "",
                "\t\tvar embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language);",
                "",
                "",
                "\t\t// 3. Re-insert the interpolation",
                "",
                "\t\tvar placeholders = Object.keys(placeholderMap);",
                "\t\tplaceholderCounter = 0;",
                "",
                "\t\t/**",
                "\t\t *",
                "\t\t * @param {(Token|string)[]} tokens",
                "\t\t * @returns {void}",
                "\t\t */",
                "\t\tfunction walkTokens(tokens) {",
                "\t\t\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\t\t\tif (placeholderCounter >= placeholders.length) {",
                "\t\t\t\t\treturn;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar token = tokens[i];",
                "",
                "\t\t\t\tif (typeof token === 'string' || typeof token.content === 'string') {",
                "\t\t\t\t\tvar placeholder = placeholders[placeholderCounter];",
                "\t\t\t\t\tvar s = typeof token === 'string' ? token : /** @type {string} */ (token.content);",
                "",
                "\t\t\t\t\tvar index = s.indexOf(placeholder);",
                "\t\t\t\t\tif (index !== -1) {",
                "\t\t\t\t\t\t++placeholderCounter;",
                "",
                "\t\t\t\t\t\tvar before = s.substring(0, index);",
                "\t\t\t\t\t\tvar middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);",
                "\t\t\t\t\t\tvar after = s.substring(index + placeholder.length);",
                "",
                "\t\t\t\t\t\tvar replacement = [];",
                "\t\t\t\t\t\tif (before) {",
                "\t\t\t\t\t\t\treplacement.push(before);",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t\treplacement.push(middle);",
                "\t\t\t\t\t\tif (after) {",
                "\t\t\t\t\t\t\tvar afterTokens = [after];",
                "\t\t\t\t\t\t\twalkTokens(afterTokens);",
                "\t\t\t\t\t\t\treplacement.push.apply(replacement, afterTokens);",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tif (typeof token === 'string') {",
                "\t\t\t\t\t\t\ttokens.splice.apply(tokens, [i, 1].concat(replacement));",
                "\t\t\t\t\t\t\ti += replacement.length - 1;",
                "\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\ttoken.content = replacement;",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t} else {",
                "\t\t\t\t\tvar content = token.content;",
                "\t\t\t\t\tif (Array.isArray(content)) {",
                "\t\t\t\t\t\twalkTokens(content);",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\twalkTokens([content]);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t\twalkTokens(embeddedTokens);",
                "",
                "\t\treturn new Prism.Token(language, embeddedTokens, 'language-' + language, code);",
                "\t}",
                "",
                "\t/**",
                "\t * The languages for which JS templating will handle tagged template literals.",
                "\t *",
                "\t * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.",
                "\t */",
                "\tvar supportedLanguages = {",
                "\t\t'javascript': true,",
                "\t\t'js': true,",
                "\t\t'typescript': true,",
                "\t\t'ts': true,",
                "\t\t'jsx': true,",
                "\t\t'tsx': true,",
                "\t};",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tif (!(env.language in supportedLanguages)) {",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\t/**",
                "\t\t * Finds and tokenizes all template strings with an embedded languages.",
                "\t\t *",
                "\t\t * @param {(Token | string)[]} tokens",
                "\t\t * @returns {void}",
                "\t\t */",
                "\t\tfunction findTemplateStrings(tokens) {",
                "\t\t\tfor (var i = 0, l = tokens.length; i < l; i++) {",
                "\t\t\t\tvar token = tokens[i];",
                "",
                "\t\t\t\tif (typeof token === 'string') {",
                "\t\t\t\t\tcontinue;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar content = token.content;",
                "\t\t\t\tif (!Array.isArray(content)) {",
                "\t\t\t\t\tif (typeof content !== 'string') {",
                "\t\t\t\t\t\tfindTemplateStrings([content]);",
                "\t\t\t\t\t}",
                "\t\t\t\t\tcontinue;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tif (token.type === 'template-string') {",
                "\t\t\t\t\t/**",
                "\t\t\t\t\t * A JavaScript template-string token will look like this:",
                "\t\t\t\t\t *",
                "\t\t\t\t\t * [\"template-string\", [",
                "\t\t\t\t\t *     [\"template-punctuation\", \"`\"],",
                "\t\t\t\t\t *     (",
                "\t\t\t\t\t *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.",
                "\t\t\t\t\t *         or",
                "\t\t\t\t\t *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.",
                "\t\t\t\t\t *                                  It also has an alias which is the language of the embedded code.",
                "\t\t\t\t\t *     ),",
                "\t\t\t\t\t *     [\"template-punctuation\", \"`\"]",
                "\t\t\t\t\t * ]]",
                "\t\t\t\t\t */",
                "",
                "\t\t\t\t\tvar embedded = content[1];",
                "\t\t\t\t\tif (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {",
                "\t\t\t\t\t\t// get string content",
                "\t\t\t\t\t\tvar code = stringContent(embedded);",
                "",
                "\t\t\t\t\t\tvar alias = embedded.alias;",
                "\t\t\t\t\t\tvar language = Array.isArray(alias) ? alias[0] : alias;",
                "",
                "\t\t\t\t\t\tvar grammar = Prism.languages[language];",
                "\t\t\t\t\t\tif (!grammar) {",
                "\t\t\t\t\t\t\t// the embedded language isn't registered.",
                "\t\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tcontent[1] = tokenizeEmbedded(code, grammar, language);",
                "\t\t\t\t\t}",
                "\t\t\t\t} else {",
                "\t\t\t\t\tfindTemplateStrings(content);",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\tfindTemplateStrings(env.tokens);",
                "\t});",
                "",
                "",
                "\t/**",
                "\t * Returns the string content of a token or token stream.",
                "\t *",
                "\t * @param {string | Token | (string | Token)[]} value",
                "\t * @returns {string}",
                "\t */",
                "\tfunction stringContent(value) {",
                "\t\tif (typeof value === 'string') {",
                "\t\t\treturn value;",
                "\t\t} else if (Array.isArray(value)) {",
                "\t\t\treturn value.map(stringContent).join('');",
                "\t\t} else {",
                "\t\t\treturn stringContent(value.content);",
                "\t\t}",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-js-templates.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(u){var e=u.languages.javascript[\"template-string\"],n=e.pattern.source,a=e.inside.interpolation,i=a.inside[\"interpolation-punctuation\"],r=a.pattern.source;function t(e,t){if(u.languages[e])return{pattern:RegExp(\"((?:\"+t+\")\\\\s*)\"+n),lookbehind:!0,greedy:!0,inside:{\"template-punctuation\":{pattern:/^`|`$/,alias:\"string\"},\"embedded-code\":{pattern:/[\\s\\S]+/,alias:e}}}}function o(e,t,n){var r={code:e,grammar:t,language:n};return u.hooks.run(\"before-tokenize\",r),r.tokens=u.tokenize(r.code,r.grammar),u.hooks.run(\"after-tokenize\",r),r.tokens}function d(e){var t={};t[\"interpolation-punctuation\"]=i;var n=u.tokenize(e,t);if(3===n.length){var r=[1,1];r.push.apply(r,o(n[1],u.languages.javascript,\"javascript\")),n.splice.apply(n,r)}return new u.Token(\"interpolation\",n,a.alias,e)}function c(a,e,i){var t=u.tokenize(a,{interpolation:{pattern:RegExp(r),lookbehind:!0}}),f=0,y={},n=o(t.map(function(e){if(\"string\"==typeof e)return e;for(var t,n=e.content;-1!==a.indexOf((r=f++,t=\"___\"+i.toUpperCase()+\"_\"+r+\"___\")););return y[t]=n,t;var r}).join(\"\"),e,i),v=Object.keys(y);return f=0,function e(t){for(var n=0;n<t.length;n++){if(f>=v.length)return;var r=t[n];if(\"string\"==typeof r||\"string\"==typeof r.content){var a=v[f],i=\"string\"==typeof r?r:r.content,o=i.indexOf(a);if(-1!==o){++f;var s=i.substring(0,o),p=d(y[a]),l=i.substring(o+a.length),g=[];if(s&&g.push(s),g.push(p),l){var u=[l];e(u),g.push.apply(g,u)}\"string\"==typeof r?(t.splice.apply(t,[n,1].concat(g)),n+=g.length-1):r.content=g}}else{var c=r.content;Array.isArray(c)?e(c):e([c])}}}(n),new u.Token(i,n,\"language-\"+i,a)}u.languages.javascript[\"template-string\"]=[t(\"css\",\"\\\\b(?:styled(?:\\\\([^)]*\\\\))?(?:\\\\s*\\\\.\\\\s*\\\\w+(?:\\\\([^)]*\\\\))*)*|css(?:\\\\s*\\\\.\\\\s*(?:global|resolve))?|createGlobalStyle|keyframes)\"),t(\"html\",\"\\\\bhtml|\\\\.\\\\s*(?:inner|outer)HTML\\\\s*\\\\+?=\"),t(\"svg\",\"\\\\bsvg\"),t(\"markdown\",\"\\\\b(?:md|markdown)\"),t(\"graphql\",\"\\\\b(?:gql|graphql(?:\\\\s*\\\\.\\\\s*experimental)?)\"),e].filter(Boolean);var s={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};function f(e){return\"string\"==typeof e?e:Array.isArray(e)?e.map(f).join(\"\"):f(e.content)}u.hooks.add(\"after-tokenize\",function(e){e.language in s&&!function e(t){for(var n=0,r=t.length;n<r;n++){var a=t[n];if(\"string\"!=typeof a){var i=a.content;if(Array.isArray(i))if(\"template-string\"===a.type){var o=i[1];if(3===i.length&&\"string\"!=typeof o&&\"embedded-code\"===o.type){var s=f(o),p=o.alias,l=Array.isArray(p)?p[0]:p,g=u.languages[l];if(!g)continue;i[1]=c(s,g,l)}}else e(i);else\"string\"!=typeof i&&e([i])}}}(e.tokens)})}(Prism);"
            ]
        },
        "prism-jsdoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar javascript = Prism.languages.javascript;",
                "",
                "\tvar type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;",
                "\tvar parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';",
                "",
                "\tPrism.languages.jsdoc = Prism.languages.extend('javadoclike', {",
                "\t\t'parameter': {",
                "\t\t\t// @param {string} foo - foo bar",
                "\t\t\tpattern: RegExp(parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('jsdoc', 'keyword', {",
                "\t\t'optional-parameter': {",
                "\t\t\t// @param {string} [baz.foo=\"bar\"] foo bar",
                "\t\t\tpattern: RegExp(parameterPrefix + /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'parameter': {",
                "\t\t\t\t\tpattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'code': {",
                "\t\t\t\t\tpattern: /(=)[\\s\\S]*(?=\\]$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: javascript,",
                "\t\t\t\t\talias: 'language-javascript'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /[=[\\]]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/(@(?:augments|extends|class|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(/<TYPE>/g, function () { return type; })),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp('(@[a-z]+\\\\s+)' + type),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'string': javascript.string,",
                "\t\t\t\t\t'number': javascript.number,",
                "\t\t\t\t\t'boolean': javascript.boolean,",
                "\t\t\t\t\t'keyword': Prism.languages.typescript.keyword,",
                "\t\t\t\t\t'operator': /=>|\\.\\.\\.|[&|?:*]/,",
                "\t\t\t\t\t'punctuation': /[.,;=<>{}()[\\]]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'example': {",
                "\t\t\tpattern: /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'code': {",
                "\t\t\t\t\tpattern: /^(\\s*(?:\\*\\s*)?)\\S.*$/m,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: javascript,",
                "\t\t\t\t\talias: 'language-javascript'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);",
                "",
                "}(Prism));"
            ]
        },
        "prism-jsdoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var a=e.languages.javascript,n=\"{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}\",s=\"(@(?:param|arg|argument|property)\\\\s+(?:\"+n+\"\\\\s+)?)\";e.languages.jsdoc=e.languages.extend(\"javadoclike\",{parameter:{pattern:RegExp(s+\"(?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF.])+(?=\\\\s|$)\"),lookbehind:!0,inside:{punctuation:/\\./}}}),e.languages.insertBefore(\"jsdoc\",\"keyword\",{\"optional-parameter\":{pattern:RegExp(s+\"\\\\[(?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF.])+(?:=[^[\\\\]]+)?\\\\](?=\\\\s|$)\"),lookbehind:!0,inside:{parameter:{pattern:/(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,lookbehind:!0,inside:{punctuation:/\\./}},code:{pattern:/(=)[\\s\\S]*(?=\\]$)/,lookbehind:!0,inside:a,alias:\"language-javascript\"},punctuation:/[=[\\]]/}},\"class-name\":[{pattern:RegExp(\"(@(?:augments|extends|class|interface|memberof!?|template|this|typedef)\\\\s+(?:<TYPE>\\\\s+)?)[A-Z]\\\\w*(?:\\\\.[A-Z]\\\\w*)*\".replace(/<TYPE>/g,function(){return n})),lookbehind:!0,inside:{punctuation:/\\./}},{pattern:RegExp(\"(@[a-z]+\\\\s+)\"+n),lookbehind:!0,inside:{string:a.string,number:a.number,boolean:a.boolean,keyword:e.languages.typescript.keyword,operator:/=>|\\.\\.\\.|[&|?:*]/,punctuation:/[.,;=<>{}()[\\]]/}}],example:{pattern:/(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,lookbehind:!0,inside:{code:{pattern:/^(\\s*(?:\\*\\s*)?)\\S.*$/m,lookbehind:!0,inside:a,alias:\"language-javascript\"}}}}),e.languages.javadoclike.addSupport(\"javascript\",e.languages.jsdoc)}(Prism);"
            ]
        },
        "prism-json.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// https://www.json.org/json-en.html",
                "Prism.languages.json = {",
                "\t'property': {",
                "\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,",
                "\t'punctuation': /[{}[\\],]/,",
                "\t'operator': /:/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'null': {",
                "\t\tpattern: /\\bnull\\b/,",
                "\t\talias: 'keyword'",
                "\t}",
                "};",
                "",
                "Prism.languages.webmanifest = Prism.languages.json;"
            ]
        },
        "prism-json.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.json={property:{pattern:/(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,greedy:!0},number:/-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,punctuation:/[{}[\\],]/,operator:/:/,boolean:/\\b(?:true|false)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"}},Prism.languages.webmanifest=Prism.languages.json;"
            ]
        },
        "prism-json5.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar string = /(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/",
                "",
                "\tPrism.languages.json5 = Prism.languages.extend('json', {",
                "\t\t'property': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(string.source + '(?=\\\\s*:)'),",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/,",
                "\t\t\t\talias: 'unquoted'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'string': {",
                "\t\t\tpattern: string,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': /[+-]?\\b(?:NaN|Infinity|0x[a-fA-F\\d]+)\\b|[+-]?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+\\b)?/",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-json5.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var e=/(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/;n.languages.json5=n.languages.extend(\"json\",{property:[{pattern:RegExp(e.source+\"(?=\\\\s*:)\"),greedy:!0},{pattern:/(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/,alias:\"unquoted\"}],string:{pattern:e,greedy:!0},number:/[+-]?\\b(?:NaN|Infinity|0x[a-fA-F\\d]+)\\b|[+-]?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+\\b)?/})}(Prism);"
            ]
        },
        "prism-jsonp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jsonp = Prism.languages.extend('json', {",
                "\t'punctuation': /[{}[\\]();,.]/",
                "});",
                "",
                "Prism.languages.insertBefore('jsonp', 'punctuation', {",
                "\t'function': /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*\\()/",
                "});"
            ]
        },
        "prism-jsonp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jsonp=Prism.languages.extend(\"json\",{punctuation:/[{}[\\]();,.]/}),Prism.languages.insertBefore(\"jsonp\",\"punctuation\",{function:/(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*\\()/});"
            ]
        },
        "prism-jsstacktrace.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jsstacktrace = {",
                "\t'error-message': {",
                "\t\tpattern: /^\\S.*/m,",
                "\t\talias: 'string'",
                "\t},",
                "",
                "\t'stack-frame': {",
                "\t\tpattern: /^[ \\t]+at[ \\t].*/m,",
                "\t\tinside: {",
                "\t\t\t'not-my-code': {",
                "\t\t\t\tpattern: /[ \\t]+at[ \\t]+(?!\\s)(?:node\\.js|\\<unknown\\>|.*(?:node_modules|\\(\\<anonymous\\>\\)|\\(\\<unknown\\>|\\<anonymous\\>$|\\(internal\\/|\\(node\\.js)).*/m,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t},",
                "",
                "\t\t\t'filename': {",
                "\t\t\t\tpattern: /(\\bat\\s+(?!\\s)|\\()(?:[a-zA-Z]:)?[^():]+(?=:)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'url'",
                "\t\t\t},",
                "",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /(at\\s+(?:new\\s+)?)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF<][.$\\w\\xA0-\\uFFFF<>]*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "",
                "\t\t\t'punctuation': /[()]/,",
                "",
                "\t\t\t'keyword': /\\b(?:at|new)\\b/,",
                "",
                "\t\t\t'alias': {",
                "\t\t\t\tpattern: /\\[(?:as\\s+)?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\]/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "",
                "\t\t\t'line-number': {",
                "\t\t\t\tpattern: /:[0-9]+(?::[0-9]+)?\\b/,",
                "\t\t\t\talias: 'number',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "",
                "\t\t}",
                "\t}",
                "}"
            ]
        },
        "prism-jsstacktrace.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jsstacktrace={\"error-message\":{pattern:/^\\S.*/m,alias:\"string\"},\"stack-frame\":{pattern:/^[ \\t]+at[ \\t].*/m,inside:{\"not-my-code\":{pattern:/[ \\t]+at[ \\t]+(?!\\s)(?:node\\.js|\\<unknown\\>|.*(?:node_modules|\\(\\<anonymous\\>\\)|\\(\\<unknown\\>|\\<anonymous\\>$|\\(internal\\/|\\(node\\.js)).*/m,alias:\"comment\"},filename:{pattern:/(\\bat\\s+(?!\\s)|\\()(?:[a-zA-Z]:)?[^():]+(?=:)/,lookbehind:!0,alias:\"url\"},function:{pattern:/(at\\s+(?:new\\s+)?)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF<][.$\\w\\xA0-\\uFFFF<>]*/,lookbehind:!0,inside:{punctuation:/\\./}},punctuation:/[()]/,keyword:/\\b(?:at|new)\\b/,alias:{pattern:/\\[(?:as\\s+)?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\]/,alias:\"variable\"},\"line-number\":{pattern:/:[0-9]+(?::[0-9]+)?\\b/,alias:\"number\",inside:{punctuation:/:/}}}}};"
            ]
        },
        "prism-jsx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "var javascript = Prism.util.clone(Prism.languages.javascript);",
                "",
                "Prism.languages.jsx = Prism.languages.extend('markup', javascript);",
                "Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i;",
                "",
                "Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;",
                "Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i;",
                "Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;",
                "",
                "Prism.languages.insertBefore('inside', 'attr-name', {",
                "\t'spread': {",
                "\t\tpattern: /\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\.{3}|[{}.]/,",
                "\t\t\t'attr-value': /\\w+/",
                "\t\t}",
                "\t}",
                "}, Prism.languages.jsx.tag);",
                "",
                "Prism.languages.insertBefore('inside', 'attr-value',{",
                "\t'script': {",
                "\t\t// Allow for two levels of nesting",
                "\t\tpattern: /=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,",
                "\t\tinside: {",
                "\t\t\t'script-punctuation': {",
                "\t\t\t\tpattern: /^=(?={)/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.jsx",
                "\t\t},",
                "\t\t'alias': 'language-javascript'",
                "\t}",
                "}, Prism.languages.jsx.tag);",
                "",
                "// The following will handle plain text inside tags",
                "var stringifyToken = function (token) {",
                "\tif (!token) {",
                "\t\treturn '';",
                "\t}",
                "\tif (typeof token === 'string') {",
                "\t\treturn token;",
                "\t}",
                "\tif (typeof token.content === 'string') {",
                "\t\treturn token.content;",
                "\t}",
                "\treturn token.content.map(stringifyToken).join('');",
                "};",
                "",
                "var walkTokens = function (tokens) {",
                "\tvar openedTags = [];",
                "\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\tvar token = tokens[i];",
                "\t\tvar notTagNorBrace = false;",
                "",
                "\t\tif (typeof token !== 'string') {",
                "\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {",
                "\t\t\t\t// We found a tag, now find its kind",
                "",
                "\t\t\t\tif (token.content[0].content[0].content === '</') {",
                "\t\t\t\t\t// Closing tag",
                "\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {",
                "\t\t\t\t\t\t// Pop matching opening tag",
                "\t\t\t\t\t\topenedTags.pop();",
                "\t\t\t\t\t}",
                "\t\t\t\t} else {",
                "\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {",
                "\t\t\t\t\t\t// Autoclosed tag, ignore",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\t// Opening tag",
                "\t\t\t\t\t\topenedTags.push({",
                "\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),",
                "\t\t\t\t\t\t\topenedBraces: 0",
                "\t\t\t\t\t\t});",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {",
                "",
                "\t\t\t\t// Here we might have entered a JSX context inside a tag",
                "\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;",
                "",
                "\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {",
                "",
                "\t\t\t\t// Here we might have left a JSX context inside a tag",
                "\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;",
                "",
                "\t\t\t} else {",
                "\t\t\t\tnotTagNorBrace = true",
                "\t\t\t}",
                "\t\t}",
                "\t\tif (notTagNorBrace || typeof token === 'string') {",
                "\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {",
                "\t\t\t\t// Here we are inside a tag, and not inside a JSX context.",
                "\t\t\t\t// That's plain text: drop any tokens matched.",
                "\t\t\t\tvar plainText = stringifyToken(token);",
                "",
                "\t\t\t\t// And merge text with adjacent text",
                "\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {",
                "\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);",
                "\t\t\t\t\ttokens.splice(i + 1, 1);",
                "\t\t\t\t}",
                "\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {",
                "\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;",
                "\t\t\t\t\ttokens.splice(i - 1, 1);",
                "\t\t\t\t\ti--;",
                "\t\t\t\t}",
                "",
                "\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\tif (token.content && typeof token.content !== 'string') {",
                "\t\t\twalkTokens(token.content);",
                "\t\t}",
                "\t}",
                "};",
                "",
                "Prism.hooks.add('after-tokenize', function (env) {",
                "\tif (env.language !== 'jsx' && env.language !== 'tsx') {",
                "\t\treturn;",
                "\t}",
                "\twalkTokens(env.tokens);",
                "});",
                "",
                "}(Prism));"
            ]
        },
        "prism-jsx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(i){var t=i.util.clone(i.languages.javascript);i.languages.jsx=i.languages.extend(\"markup\",t),i.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i,i.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,i.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i,i.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,i.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,\"attr-value\":/\\w+/}}},i.languages.jsx.tag),i.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,inside:{\"script-punctuation\":{pattern:/^=(?={)/,alias:\"punctuation\"},rest:i.languages.jsx},alias:\"language-javascript\"}},i.languages.jsx.tag);var o=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(o).join(\"\"):\"\"},p=function(t){for(var n=[],e=0;e<t.length;e++){var a=t[e],s=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<n.length&&n[n.length-1].tagName===o(a.content[0].content[1])&&n.pop():\"/>\"===a.content[a.content.length-1].content||n.push({tagName:o(a.content[0].content[1]),openedBraces:0}):0<n.length&&\"punctuation\"===a.type&&\"{\"===a.content?n[n.length-1].openedBraces++:0<n.length&&0<n[n.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?n[n.length-1].openedBraces--:s=!0),(s||\"string\"==typeof a)&&0<n.length&&0===n[n.length-1].openedBraces){var g=o(a);e<t.length-1&&(\"string\"==typeof t[e+1]||\"plain-text\"===t[e+1].type)&&(g+=o(t[e+1]),t.splice(e+1,1)),0<e&&(\"string\"==typeof t[e-1]||\"plain-text\"===t[e-1].type)&&(g=o(t[e-1])+g,t.splice(e-1,1),e--),t[e]=new i.Token(\"plain-text\",g,null,g)}a.content&&\"string\"!=typeof a.content&&p(a.content)}};i.hooks.add(\"after-tokenize\",function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||p(t.tokens)})}(Prism);"
            ]
        },
        "prism-julia.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.julia = {",
                "\t'comment': {",
                "\t\t// support one level of nested comments",
                "\t\t// https://github.com/JuliaLang/julia/pull/6128",
                "\t\tpattern: /(^|[^\\\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'regex': {",
                "\t\t// https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressions-1",
                "\t\tpattern: /r\"(?:\\\\.|[^\"\\\\\\r\\n])*\"[imsx]{0,4}/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\t// https://docs.julialang.org/en/v1/manual/strings/#man-characters-1",
                "\t\t// https://docs.julialang.org/en/v1/manual/strings/#String-Basics-1",
                "\t\t// https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals-1",
                "\t\t// https://docs.julialang.org/en/v1/manual/running-external-programs/#Running-External-Programs-1",
                "\t\tpattern: /\"\"\"[\\s\\S]+?\"\"\"|\\w*\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(^|[^\\w'])'(?:\\\\[^\\r\\n][^'\\r\\n]*|[^\\\\\\r\\n])'|`(?:[^\\\\`\\r\\n]|\\\\.)*`/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+(?:_[\\da-f]+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[efp][+-]?\\d+(?:_\\d+)*)?j?/i,",
                "\t// https://docs.julialang.org/en/v1/manual/mathematical-operations/",
                "\t// https://docs.julialang.org/en/v1/manual/mathematical-operations/#Operator-Precedence-and-Associativity-1",
                "\t'operator': /&&|\\|\\||[-+*^%÷⊻&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,",
                "\t'punctuation': /::?|[{}[\\]();,.?]/,",
                "\t// https://docs.julialang.org/en/v1/base/numbers/#Base.im",
                "\t'constant': /\\b(?:(?:NaN|Inf)(?:16|32|64)?|im|pi)\\b|[πℯ]/",
                "};"
            ]
        },
        "prism-julia.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.julia={comment:{pattern:/(^|[^\\\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,lookbehind:!0},regex:{pattern:/r\"(?:\\\\.|[^\"\\\\\\r\\n])*\"[imsx]{0,4}/,greedy:!0},string:{pattern:/\"\"\"[\\s\\S]+?\"\"\"|\\w*\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(^|[^\\w'])'(?:\\\\[^\\r\\n][^'\\r\\n]*|[^\\\\\\r\\n])'|`(?:[^\\\\`\\r\\n]|\\\\.)*`/,lookbehind:!0,greedy:!0},keyword:/\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\\b/,boolean:/\\b(?:true|false)\\b/,number:/(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+(?:_[\\da-f]+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[efp][+-]?\\d+(?:_\\d+)*)?j?/i,operator:/&&|\\|\\||[-+*^%÷⊻&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,punctuation:/::?|[{}[\\]();,.?]/,constant:/\\b(?:(?:NaN|Inf)(?:16|32|64)?|im|pi)\\b|[πℯ]/};"
            ]
        },
        "prism-keyman.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.keyman = {",
                "\t'comment': /\\bc\\s.*/i,",
                "\t'function': /\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,  // virtual key",
                "\t'string': /(\"|').*?\\1/,",
                "\t'bold': [   // header statements, system stores and variable system stores",
                "\t\t/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i,",
                "\t\t/\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i",
                "\t],",
                "\t'keyword': /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,  // rule keywords",
                "\t'atrule': /\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,   // structural keywords",
                "\t'number': /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i, // U+####, x###, d### characters and numbers",
                "\t'operator': /[+>\\\\,()]/,",
                "\t'tag': /\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i   // prefixes",
                "};"
            ]
        },
        "prism-keyman.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.keyman={comment:/\\bc\\s.*/i,function:/\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,string:/(\"|').*?\\1/,bold:[/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i,/\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i],keyword:/\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,atrule:/\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,number:/\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,operator:/[+>\\\\,()]/,tag:/\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i};"
            ]
        },
        "prism-kotlin.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.kotlin = Prism.languages.extend('clike', {",
                "\t\t'keyword': {",
                "\t\t\t// The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get",
                "\t\t\tpattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\()/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'number': /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,",
                "\t\t'operator': /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/",
                "\t});",
                "",
                "\tdelete Prism.languages.kotlin[\"class-name\"];",
                "",
                "\tPrism.languages.insertBefore('kotlin', 'string', {",
                "\t\t'raw-string': {",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\talias: 'string'",
                "\t\t\t// See interpolation below",
                "\t\t}",
                "\t});",
                "\tPrism.languages.insertBefore('kotlin', 'keyword', {",
                "\t\t'annotation': {",
                "\t\t\tpattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,",
                "\t\t\talias: 'builtin'",
                "\t\t}",
                "\t});",
                "\tPrism.languages.insertBefore('kotlin', 'function', {",
                "\t\t'label': {",
                "\t\t\tpattern: /\\w+@|@\\w+/,",
                "\t\t\talias: 'symbol'",
                "\t\t}",
                "\t});",
                "",
                "\tvar interpolation = [",
                "\t\t{",
                "\t\t\tpattern: /\\$\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^\\$\\{|\\}$/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.kotlin",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\$\\w+/,",
                "\t\t\talias: 'variable'",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {",
                "\t\tinterpolation: interpolation",
                "\t};",
                "",
                "\tPrism.languages.kt = Prism.languages.kotlin;",
                "\tPrism.languages.kts = Prism.languages.kotlin;",
                "}(Prism));"
            ]
        },
        "prism-kotlin.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.kotlin=e.languages.extend(\"clike\",{keyword:{pattern:/(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,lookbehind:!0},function:[{pattern:/(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\()/,greedy:!0},{pattern:/(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,lookbehind:!0,greedy:!0}],number:/\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,operator:/\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/}),delete e.languages.kotlin[\"class-name\"],e.languages.insertBefore(\"kotlin\",\"string\",{\"raw-string\":{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,alias:\"string\"}}),e.languages.insertBefore(\"kotlin\",\"keyword\",{annotation:{pattern:/\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,alias:\"builtin\"}}),e.languages.insertBefore(\"kotlin\",\"function\",{label:{pattern:/\\w+@|@\\w+/,alias:\"symbol\"}});var n=[{pattern:/\\$\\{[^}]+\\}/,inside:{delimiter:{pattern:/^\\$\\{|\\}$/,alias:\"variable\"},rest:e.languages.kotlin}},{pattern:/\\$\\w+/,alias:\"variable\"}];e.languages.kotlin.string.inside=e.languages.kotlin[\"raw-string\"].inside={interpolation:n},e.languages.kt=e.languages.kotlin,e.languages.kts=e.languages.kotlin}(Prism);"
            ]
        },
        "prism-latex.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i;",
                "\tvar insideEqu = {",
                "\t\t'equation-command': {",
                "\t\t\tpattern: funcPattern,",
                "\t\t\talias: 'regex'",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.latex = {",
                "\t\t'comment': /%.*/m,",
                "\t\t// the verbatim environment prints whitespace to the document",
                "\t\t'cdata': {",
                "\t\t\tpattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/*",
                "\t\t * equations can be between $$ $$ or $ $ or \\( \\) or \\[ \\]",
                "\t\t * (all are multiline)",
                "\t\t */",
                "\t\t'equation': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,",
                "\t\t\t\tinside: insideEqu,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: insideEqu,",
                "\t\t\t\talias: 'string'",
                "\t\t\t}",
                "\t\t],",
                "\t\t/*",
                "\t\t * arguments which are keywords or references are highlighted",
                "\t\t * as keywords",
                "\t\t */",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'url': {",
                "\t\t\tpattern: /(\\\\url\\{)[^}]+(?=\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/*",
                "\t\t * section or chapter headlines are highlighted as bold so that",
                "\t\t * they stand out more",
                "\t\t */",
                "\t\t'headline': {",
                "\t\t\tpattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'function': {",
                "\t\t\tpattern: funcPattern,",
                "\t\t\talias: 'selector'",
                "\t\t},",
                "\t\t'punctuation': /[[\\]{}&]/",
                "\t};",
                "",
                "\tPrism.languages.tex = Prism.languages.latex;",
                "\tPrism.languages.context = Prism.languages.latex;",
                "})(Prism);"
            ]
        },
        "prism-latex.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=/\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,n={\"equation-command\":{pattern:e,alias:\"regex\"}};a.languages.latex={comment:/%.*/m,cdata:{pattern:/(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,lookbehind:!0},equation:[{pattern:/\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,inside:n,alias:\"string\"},{pattern:/(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,lookbehind:!0,inside:n,alias:\"string\"}],keyword:{pattern:/(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,lookbehind:!0},url:{pattern:/(\\\\url\\{)[^}]+(?=\\})/,lookbehind:!0},headline:{pattern:/(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,lookbehind:!0,alias:\"class-name\"},function:{pattern:e,alias:\"selector\"},punctuation:/[[\\]{}&]/},a.languages.tex=a.languages.latex,a.languages.context=a.languages.latex}(Prism);"
            ]
        },
        "prism-latte.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.latte = {",
                "\t\t'comment': /^\\{\\*[\\s\\S]*/,",
                "\t\t'ld': {",
                "\t\t\tpattern: /^\\{(?:[=_]|\\/?(?!\\d|\\w+\\()\\w+|)/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\{\\/?/,",
                "\t\t\t\t'tag': {",
                "\t\t\t\t\tpattern: /.+/,",
                "\t\t\t\t\talias: 'important'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'rd': {",
                "\t\t\tpattern: /\\}$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /.+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'php': {",
                "\t\t\tpattern: /\\S(?:[\\s\\S]*\\S)?/,",
                "\t\t\talias: 'language-php',",
                "\t\t\tinside: Prism.languages.php",
                "\t\t}",
                "\t};",
                "",
                "\tvar markupLatte = Prism.languages.extend('markup', {});",
                "\tPrism.languages.insertBefore('inside', 'attr-value', {",
                "\t\t'n-attr': {",
                "\t\t\tpattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,",
                "\t\t\tinside: {",
                "\t\t\t\t'attr-name': {",
                "\t\t\t\t\tpattern: /^[^\\s=]+/,",
                "\t\t\t\t\talias: 'important'",
                "\t\t\t\t},",
                "\t\t\t\t'attr-value': {",
                "\t\t\t\t\tpattern: /=[\\s\\S]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t\t/^=/,",
                "\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,",
                "\t\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t],",
                "\t\t\t\t\t\t'php': {",
                "\t\t\t\t\t\t\tpattern: /\\S(?:[\\s\\S]*\\S)?/,",
                "\t\t\t\t\t\t\tinside: Prism.languages.php",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t}",
                "\t\t},",
                "\t}, markupLatte.tag);",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tif (env.language !== 'latte') {",
                "\t\t\treturn;",
                "\t\t}",
                "\t\tvar lattePattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*?\\}/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'latte', lattePattern);",
                "\t\tenv.grammar = markupLatte;",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'latte');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-latte.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){t.languages.latte={comment:/^\\{\\*[\\s\\S]*/,ld:{pattern:/^\\{(?:[=_]|\\/?(?!\\d|\\w+\\()\\w+|)/,inside:{punctuation:/^\\{\\/?/,tag:{pattern:/.+/,alias:\"important\"}}},rd:{pattern:/\\}$/,inside:{punctuation:/.+/}},php:{pattern:/\\S(?:[\\s\\S]*\\S)?/,alias:\"language-php\",inside:t.languages.php}};var e=t.languages.extend(\"markup\",{});t.languages.insertBefore(\"inside\",\"attr-value\",{\"n-attr\":{pattern:/n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,inside:{\"attr-name\":{pattern:/^[^\\s=]+/,alias:\"important\"},\"attr-value\":{pattern:/=[\\s\\S]+/,inside:{punctuation:[/^=/,{pattern:/^(\\s*)[\"']|[\"']$/,lookbehind:!0}],php:{pattern:/\\S(?:[\\s\\S]*\\S)?/,inside:t.languages.php}}}}}},e.tag),t.hooks.add(\"before-tokenize\",function(a){if(\"latte\"===a.language){t.languages[\"markup-templating\"].buildPlaceholders(a,\"latte\",/\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*?\\}/g),a.grammar=e}}),t.hooks.add(\"after-tokenize\",function(a){t.languages[\"markup-templating\"].tokenizePlaceholders(a,\"latte\")})}(Prism);"
            ]
        },
        "prism-less.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* FIXME :",
                " :extend() is not handled specifically : its highlighting is buggy.",
                " Mixin usage must be inside a ruleset to be highlighted.",
                " At-rules (e.g. import) containing interpolations are buggy.",
                " Detached rulesets are highlighted as at-rules.",
                " A comment before a mixin usage prevents the latter to be properly highlighted.",
                " */",
                "",
                "Prism.languages.less = Prism.languages.extend('css', {",
                "\t'comment': [",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'atrule': {",
                "\t\tpattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[:()]/",
                "\t\t}",
                "\t},",
                "\t// selectors and mixins are considered the same",
                "\t'selector': {",
                "\t\tpattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,",
                "\t\tinside: {",
                "\t\t\t// mixin parameters",
                "\t\t\t'variable': /@+[\\w-]+/",
                "\t\t}",
                "\t},",
                "",
                "\t'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,",
                "\t'operator': /[+\\-*\\/]/",
                "});",
                "",
                "Prism.languages.insertBefore('less', 'property', {",
                "\t'variable': [",
                "\t\t// Variable declaration (the colon must be consumed!)",
                "\t\t{",
                "\t\t\tpattern: /@[\\w-]+\\s*:/,",
                "\t\t\tinside: {",
                "\t\t\t\t\"punctuation\": /:/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Variable usage",
                "\t\t/@@?[\\w-]+/",
                "\t],",
                "\t'mixin-usage': {",
                "\t\tpattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t}",
                "});"
            ]
        },
        "prism-less.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.less=Prism.languages.extend(\"css\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0}],atrule:{pattern:/@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,inside:{variable:/@+[\\w-]+/}},property:/(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,operator:/[+\\-*\\/]/}),Prism.languages.insertBefore(\"less\",\"property\",{variable:[{pattern:/@[\\w-]+\\s*:/,inside:{punctuation:/:/}},/@@?[\\w-]+/],\"mixin-usage\":{pattern:/([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,lookbehind:!0,alias:\"function\"}});"
            ]
        },
        "prism-lilypond.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/.source;",
                "\t// allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions",
                "\t// For some reason, this can't be 4",
                "\tvar recursivenessLog2 = 5;",
                "\tfor (var i = 0; i < recursivenessLog2; i++) {",
                "\t\tschemeExpression = schemeExpression.replace(/<expr>/g, function () { return schemeExpression; });",
                "\t}",
                "\tschemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source);",
                "",
                "",
                "\tvar lilypond = Prism.languages.lilypond = {",
                "\t\t'comment': /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,",
                "\t\t'embedded-scheme': {",
                "\t\t\tpattern: RegExp(/(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(/<expr>/g, function () { return schemeExpression; }), 'm'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'scheme': {",
                "\t\t\t\t\tpattern: /^(#)[\\s\\S]+$/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'language-scheme',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'embedded-lilypond': {",
                "\t\t\t\t\t\t\tpattern: /#\\{[\\s\\S]*?#\\}/,",
                "\t\t\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t\t'punctuation': /^#\\{|#\\}$/,",
                "\t\t\t\t\t\t\t\t'lilypond': {",
                "\t\t\t\t\t\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\t\t\t\t\t\talias: 'language-lilypond',",
                "\t\t\t\t\t\t\t\t\tinside: null // see below",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\trest: Prism.languages.scheme",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /#/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'class-name': {",
                "\t\t\tpattern: /(\\\\new\\s+)[\\w-]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /\\\\[a-z][-\\w]*/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\\\/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'operator': /[=|]|<<|>>/,",
                "\t\t'punctuation': {",
                "\t\t\tpattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': /\\b\\d+(?:\\/\\d+)?\\b/",
                "\t};",
                "",
                "\tlilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;",
                "",
                "\tPrism.languages.ly = lilypond;",
                "",
                "}(Prism));"
            ]
        },
        "prism-lilypond.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){for(var n='\\\\((?:[^();\"#\\\\\\\\]|\\\\\\\\[^]|;.*(?!.)|\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"|#(?:\\\\{(?:(?!#\\\\})[^])*#\\\\}|[^{])|<expr>)*\\\\)',i=0;i<5;i++)n=n.replace(/<expr>/g,function(){return n});n=n.replace(/<expr>/g,\"[^\\\\s\\\\S]\");var d=e.languages.lilypond={comment:/%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\"embedded-scheme\":{pattern:RegExp('(^|[=\\\\s])#(?:\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"|[^\\\\s()\"]*(?:[^\\\\s()]|<expr>))'.replace(/<expr>/g,function(){return n}),\"m\"),lookbehind:!0,greedy:!0,inside:{scheme:{pattern:/^(#)[\\s\\S]+$/,lookbehind:!0,alias:\"language-scheme\",inside:{\"embedded-lilypond\":{pattern:/#\\{[\\s\\S]*?#\\}/,greedy:!0,inside:{punctuation:/^#\\{|#\\}$/,lilypond:{pattern:/[\\s\\S]+/,alias:\"language-lilypond\",inside:null}}},rest:e.languages.scheme}},punctuation:/#/}},string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},\"class-name\":{pattern:/(\\\\new\\s+)[\\w-]+/,lookbehind:!0},keyword:{pattern:/\\\\[a-z][-\\w]*/i,inside:{punctuation:/^\\\\/}},operator:/[=|]|<<|>>/,punctuation:{pattern:/(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,lookbehind:!0},number:/\\b\\d+(?:\\/\\d+)?\\b/};d[\"embedded-scheme\"].inside.scheme.inside[\"embedded-lilypond\"].inside.lilypond.inside=d,e.languages.ly=d}(Prism);"
            ]
        },
        "prism-liquid.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.liquid = {",
                "\t'keyword': /\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,",
                "\t'number': /\\b0b[01]+\\b|\\b0x(?:\\.[\\da-fp-]+|[\\da-f]+(?:\\.[\\da-fp-]+)?)\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-liquid.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.liquid={keyword:/\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,number:/\\b0b[01]+\\b|\\b0x(?:\\.[\\da-fp-]+|[\\da-f]+(?:\\.[\\da-fp-]+)?)\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,operator:{pattern:/(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,lookbehind:!0},function:{pattern:/(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,lookbehind:!0}};"
            ]
        },
        "prism-lisp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t// Functions to construct regular expressions",
                "\t// simple form",
                "\t// e.g. (interactive ... or (interactive)",
                "\tfunction simple_form(name) {",
                "\t\treturn RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');",
                "\t}",
                "\t// booleans and numbers",
                "\tfunction primitive(pattern) {",
                "\t\treturn RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');",
                "\t}",
                "",
                "\t// Patterns in regular expressions",
                "",
                "\t// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html",
                "\t// & and : are excluded as they are usually used for special purposes",
                "\tvar symbol = '[-+*/_~!@$%^=<>{}\\\\w]+';",
                "\t// symbol starting with & used in function arguments",
                "\tvar marker = '&' + symbol;",
                "\t// Open parenthesis for look-behind",
                "\tvar par = '(\\\\()';",
                "\tvar endpar = '(?=\\\\))';",
                "\t// End the pattern with look-ahead space",
                "\tvar space = '(?=\\\\s)';",
                "",
                "\tvar language = {",
                "\t\t// Three or four semicolons are considered a heading.",
                "\t\t// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html",
                "\t\theading: {",
                "\t\t\tpattern: /;;;.*/,",
                "\t\t\talias: ['comment', 'title']",
                "\t\t},",
                "\t\tcomment: /;.*/,",
                "\t\tstring: {",
                "\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\targument: /[-A-Z]+(?=[.,\\s])/,",
                "\t\t\t\tsymbol: RegExp('`' + symbol + \"'\")",
                "\t\t\t}",
                "\t\t},",
                "\t\t'quoted-symbol': {",
                "\t\t\tpattern: RegExp(\"#?'\" + symbol),",
                "\t\t\talias: ['variable', 'symbol']",
                "\t\t},",
                "\t\t'lisp-property': {",
                "\t\t\tpattern: RegExp(':' + symbol),",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\tsplice: {",
                "\t\t\tpattern: RegExp(',@?' + symbol),",
                "\t\t\talias: ['symbol', 'variable']",
                "\t\t},",
                "\t\tkeyword: [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(",
                "\t\t\t\t\tpar +",
                "\t\t\t\t\t\t'(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +",
                "\t\t\t\t\t\tspace",
                "\t\t\t\t),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(",
                "\t\t\t\t\tpar + '(?:for|do|collect|return|finally|append|concat|in|by)' + space",
                "\t\t\t\t),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t],",
                "\t\tdeclare: {",
                "\t\t\tpattern: simple_form('declare'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\tinteractive: {",
                "\t\t\tpattern: simple_form('interactive'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\tboolean: {",
                "\t\t\tpattern: primitive('(?:t|nil)'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tnumber: {",
                "\t\t\tpattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tdefvar: {",
                "\t\t\tpattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^def[a-z]+/,",
                "\t\t\t\tvariable: RegExp(symbol)",
                "\t\t\t}",
                "\t\t},",
                "\t\tdefun: {",
                "\t\t\tpattern: RegExp(",
                "\t\t\t\tpar +",
                "\t\t\t\t\t'(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +",
                "\t\t\t\t\tsymbol +",
                "\t\t\t\t\t'\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^(?:cl-)?def\\S+/,",
                "\t\t\t\t// See below, this property needs to be defined later so that it can",
                "\t\t\t\t// reference the language object.",
                "\t\t\t\targuments: null,",
                "\t\t\t\tfunction: {",
                "\t\t\t\t\tpattern: RegExp('(^\\\\s)' + symbol),",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\tpunctuation: /[()]/",
                "\t\t\t}",
                "\t\t},",
                "\t\tlambda: {",
                "\t\t\tpattern: RegExp(par + 'lambda\\\\s+\\\\(\\\\s*(?:&?' + symbol + '(?:\\\\s+&?' + symbol + ')*\\\\s*)?\\\\)'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^lambda/,",
                "\t\t\t\t// See below, this property needs to be defined later so that it can",
                "\t\t\t\t// reference the language object.",
                "\t\t\t\targuments: null,",
                "\t\t\t\tpunctuation: /[()]/",
                "\t\t\t}",
                "\t\t},",
                "\t\tcar: {",
                "\t\t\tpattern: RegExp(par + symbol),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tpunctuation: [",
                "\t\t\t// open paren, brackets, and close paren",
                "\t\t\t/(?:['`,]?\\(|[)\\[\\]])/,",
                "\t\t\t// cons",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)\\.(?=\\s)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t]",
                "\t};",
                "",
                "\tvar arg = {",
                "\t\t'lisp-marker': RegExp(marker),",
                "\t\trest: {",
                "\t\t\targument: {",
                "\t\t\t\tpattern: RegExp(symbol),",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\tvarform: {",
                "\t\t\t\tpattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tstring: language.string,",
                "\t\t\t\t\tboolean: language.boolean,",
                "\t\t\t\t\tnumber: language.number,",
                "\t\t\t\t\tsymbol: language.symbol,",
                "\t\t\t\t\tpunctuation: /[()]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tvar forms = '\\\\S+(?:\\\\s+\\\\S+)*';",
                "",
                "\tvar arglist = {",
                "\t\tpattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'rest-vars': {",
                "\t\t\t\tpattern: RegExp('&(?:rest|body)\\\\s+' + forms),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\t'other-marker-vars': {",
                "\t\t\t\tpattern: RegExp('&(?:optional|aux)\\\\s+' + forms),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\tkeys: {",
                "\t\t\t\tpattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\targument: {",
                "\t\t\t\tpattern: RegExp(symbol),",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\tpunctuation: /[()]/",
                "\t\t}",
                "\t};",
                "",
                "\tlanguage['lambda'].inside.arguments = arglist;",
                "\tlanguage['defun'].inside.arguments = Prism.util.clone(arglist);",
                "\tlanguage['defun'].inside.arguments.inside.sublist = arglist;",
                "",
                "\tPrism.languages.lisp = language;",
                "\tPrism.languages.elisp = language;",
                "\tPrism.languages.emacs = language;",
                "\tPrism.languages['emacs-lisp'] = language;",
                "}(Prism));"
            ]
        },
        "prism-lisp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){function n(e){return RegExp(\"(\\\\()\"+e+\"(?=[\\\\s\\\\)])\")}function a(e){return RegExp(\"([\\\\s([])\"+e+\"(?=[\\\\s)])\")}var t=\"[-+*/_~!@$%^=<>{}\\\\w]+\",r=\"(\\\\()\",s=\"(?=\\\\))\",i=\"(?=\\\\s)\",o={heading:{pattern:/;;;.*/,alias:[\"comment\",\"title\"]},comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\\s])/,symbol:RegExp(\"`\"+t+\"'\")}},\"quoted-symbol\":{pattern:RegExp(\"#?'\"+t),alias:[\"variable\",\"symbol\"]},\"lisp-property\":{pattern:RegExp(\":\"+t),alias:\"property\"},splice:{pattern:RegExp(\",@?\"+t),alias:[\"symbol\",\"variable\"]},keyword:[{pattern:RegExp(r+\"(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)\"+i),lookbehind:!0},{pattern:RegExp(r+\"(?:for|do|collect|return|finally|append|concat|in|by)\"+i),lookbehind:!0}],declare:{pattern:n(\"declare\"),lookbehind:!0,alias:\"keyword\"},interactive:{pattern:n(\"interactive\"),lookbehind:!0,alias:\"keyword\"},boolean:{pattern:a(\"(?:t|nil)\"),lookbehind:!0},number:{pattern:a(\"[-+]?\\\\d+(?:\\\\.\\\\d*)?\"),lookbehind:!0},defvar:{pattern:RegExp(r+\"def(?:var|const|custom|group)\\\\s+\"+t),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(t)}},defun:{pattern:RegExp(r+\"(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+\"+t+\"\\\\s+\\\\([\\\\s\\\\S]*?\\\\)\"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\\S+/,arguments:null,function:{pattern:RegExp(\"(^\\\\s)\"+t),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(r+\"lambda\\\\s+\\\\(\\\\s*(?:&?\"+t+\"(?:\\\\s+&?\"+t+\")*\\\\s*)?\\\\)\"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(r+t),lookbehind:!0},punctuation:[/(?:['`,]?\\(|[)\\[\\]])/,{pattern:/(\\s)\\.(?=\\s)/,lookbehind:!0}]},l={\"lisp-marker\":RegExp(\"&[-+*/_~!@$%^=<>{}\\\\w]+\"),rest:{argument:{pattern:RegExp(t),alias:\"variable\"},varform:{pattern:RegExp(r+t+\"\\\\s+\\\\S[\\\\s\\\\S]*\"+s),lookbehind:!0,inside:{string:o.string,boolean:o.boolean,number:o.number,symbol:o.symbol,punctuation:/[()]/}}}},p=\"\\\\S+(?:\\\\s+\\\\S+)*\",d={pattern:RegExp(r+\"[\\\\s\\\\S]*\"+s),lookbehind:!0,inside:{\"rest-vars\":{pattern:RegExp(\"&(?:rest|body)\\\\s+\"+p),inside:l},\"other-marker-vars\":{pattern:RegExp(\"&(?:optional|aux)\\\\s+\"+p),inside:l},keys:{pattern:RegExp(\"&key\\\\s+\"+p+\"(?:\\\\s+&allow-other-keys)?\"),inside:l},argument:{pattern:RegExp(t),alias:\"variable\"},punctuation:/[()]/}};o.lambda.inside.arguments=d,o.defun.inside.arguments=e.util.clone(d),o.defun.inside.arguments.inside.sublist=d,e.languages.lisp=o,e.languages.elisp=o,e.languages.emacs=o,e.languages[\"emacs-lisp\"]=o}(Prism);"
            ]
        },
        "prism-livescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.livescript = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'interpolated-string': {",
                "\t\t/* Look-behind and look-ahead prevents wrong behavior of the greedy pattern",
                "\t\t* forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */",
                "\t\tpattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^\\\\])#\\{[^}]+\\}/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t},",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /<\\[[\\s\\S]*?\\]>/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t/\\\\[^\\s,;\\])}]+/",
                "\t],",
                "\t'regex': [",
                "\t\t{",
                "\t\t\tpattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'comment': {",
                "\t\t\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'keyword': {",
                "\t\tpattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword-operator': {",
                "\t\tpattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'boolean': {",
                "\t\tpattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'argument': {",
                "\t\t// Don't match .&. nor &&",
                "\t\tpattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,",
                "\t'identifier': /[a-z_](?:-?[a-z]|[\\d_])*/i,",
                "\t'operator': [",
                "\t\t// Spaced .",
                "\t\t{",
                "\t\t\tpattern: /( )\\.(?= )/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// Full list, in order:",
                "\t\t// .= .~ .. ...",
                "\t\t// .&. .^. .<<. .>>. .>>>.",
                "\t\t// := :: ::=",
                "\t\t// &&",
                "\t\t// || |>",
                "\t\t// < << <<< <<<<",
                "\t\t// <- <-- <-! <--!",
                "\t\t// <~ <~~ <~! <~~!",
                "\t\t// <| <= <?",
                "\t\t// > >> >= >?",
                "\t\t// - -- -> -->",
                "\t\t// + ++",
                "\t\t// @ @@",
                "\t\t// % %%",
                "\t\t// * **",
                "\t\t// ! != !~=",
                "\t\t// !~> !~~>",
                "\t\t// !-> !-->",
                "\t\t// ~ ~> ~~> ~=",
                "\t\t// = ==",
                "\t\t// ^ ^^",
                "\t\t// / ?",
                "\t\t/\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/",
                "\t],",
                "\t'punctuation': /[(){}\\[\\]|.,:;`]/",
                "};",
                "",
                "Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;"
            ]
        },
        "prism-livescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.livescript={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}],\"interpolated-string\":{pattern:/(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,lookbehind:!0},interpolation:{pattern:/(^|[^\\\\])#\\{[^}]+\\}/m,lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^#\\{|\\}$/,alias:\"variable\"}}},string:/[\\s\\S]+/}},string:[{pattern:/('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},{pattern:/<\\[[\\s\\S]*?\\]>/,greedy:!0},/\\\\[^\\s,;\\])}]+/],regex:[{pattern:/\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,greedy:!0,inside:{comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}}},{pattern:/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,greedy:!0}],keyword:{pattern:/(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,lookbehind:!0},\"keyword-operator\":{pattern:/(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,lookbehind:!0,alias:\"operator\"},boolean:{pattern:/(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,lookbehind:!0},argument:{pattern:/(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,lookbehind:!0,alias:\"variable\"},number:/\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,identifier:/[a-z_](?:-?[a-z]|[\\d_])*/i,operator:[{pattern:/( )\\.(?= )/,lookbehind:!0},/\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],punctuation:/[(){}\\[\\]|.,:;`]/},Prism.languages.livescript[\"interpolated-string\"].inside.interpolation.inside.rest=Prism.languages.livescript;"
            ]
        },
        "prism-llvm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.llvm = {",
                "\t\t'comment': /;.*/,",
                "\t\t'string': {",
                "\t\t\tpattern: /\"[^\"]*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t},",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'variable': /[%@!#](?:(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+|\\d+)/i,",
                "\t\t'label': /(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+:/i,",
                "\t\t'type': {",
                "\t\t\tpattern: /\\b(?:double|float|fp128|half|i[1-9]\\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\\b/,",
                "\t\t\talias: 'class-name',",
                "\t\t},",
                "\t\t'keyword': /\\b[a-z_][a-z_0-9]*\\b/,",
                "\t\t'number': /[+-]?\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-Fa-f]+\\b|\\b0xK[\\dA-Fa-f]{20}\\b|\\b0x[ML][\\dA-Fa-f]{32}\\b|\\b0xH[\\dA-Fa-f]{4}\\b/,",
                "\t\t'punctuation': /[{}[\\];(),.!*=<>]/,",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-llvm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.llvm={comment:/;.*/,string:{pattern:/\"[^\"]*\"/,greedy:!0},boolean:/\\b(?:true|false)\\b/,variable:/[%@!#](?:(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+|\\d+)/i,label:/(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+:/i,type:{pattern:/\\b(?:double|float|fp128|half|i[1-9]\\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\\b/,alias:\"class-name\"},keyword:/\\b[a-z_][a-z_0-9]*\\b/,number:/[+-]?\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-Fa-f]+\\b|\\b0xK[\\dA-Fa-f]{20}\\b|\\b0x[ML][\\dA-Fa-f]{32}\\b|\\b0xH[\\dA-Fa-f]{4}\\b/,punctuation:/[{}[\\];(),.!*=<>]/};"
            ]
        },
        "prism-lolcode.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lolcode = {",
                "\t'comment': [",
                "\t\t/\\bOBTW\\s[\\s\\S]*?\\sTLDR\\b/,",
                "\t\t/\\bBTW.+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?::.|[^\":])*\"/,",
                "\t\tinside: {",
                "\t\t\t'variable': /:\\{[^}]+\\}/,",
                "\t\t\t'symbol': [",
                "\t\t\t\t/:\\([a-f\\d]+\\)/i,",
                "\t\t\t\t/:\\[[^\\]]+\\]/,",
                "\t\t\t\t/:[)>o\":]/",
                "\t\t\t]",
                "\t\t},",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\B-)?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)/,",
                "\t'symbol': {",
                "\t\tpattern: /(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /A(?=\\s)/",
                "\t\t}",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/'Z(?=\\s|,|$)/",
                "\t],",
                "\t'boolean': {",
                "\t\tpattern: /(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': {",
                "\t\tpattern: /(^|\\s)IT(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': {",
                "\t\tpattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /\\.{3}|…|,|!/",
                "};"
            ]
        },
        "prism-lolcode.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lolcode={comment:[/\\bOBTW\\s[\\s\\S]*?\\sTLDR\\b/,/\\bBTW.+/],string:{pattern:/\"(?::.|[^\":])*\"/,inside:{variable:/:\\{[^}]+\\}/,symbol:[/:\\([a-f\\d]+\\)/i,/:\\[[^\\]]+\\]/,/:[)>o\":]/]},greedy:!0},number:/(?:\\B-)?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)/,symbol:{pattern:/(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,lookbehind:!0,inside:{keyword:/A(?=\\s)/}},label:{pattern:/((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,lookbehind:!0,alias:\"string\"},function:{pattern:/((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,lookbehind:!0},keyword:[{pattern:/(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,lookbehind:!0},/'Z(?=\\s|,|$)/],boolean:{pattern:/(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,lookbehind:!0},variable:{pattern:/(^|\\s)IT(?=\\s|,|$)/,lookbehind:!0},operator:{pattern:/(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,lookbehind:!0},punctuation:/\\.{3}|…|,|!/};"
            ]
        },
        "prism-lua.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lua = {",
                "\t'comment': /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,",
                "\t// \\z may be used to skip the following space",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,",
                "\t'keyword': /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*(?:[({]))/,",
                "\t'operator': [",
                "\t\t/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,",
                "\t\t{",
                "\t\t\t// Match \"..\" but don't break \"...\"",
                "\t\t\tpattern: /(^|[^.])\\.\\.(?!\\.)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /[\\[\\](){},;]|\\.+|:+/",
                "};"
            ]
        },
        "prism-lua.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lua={comment:/^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,greedy:!0},number:/\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,keyword:/\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,function:/(?!\\d)\\w+(?=\\s*(?:[({]))/,operator:[/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\\.\\.(?!\\.)/,lookbehind:!0}],punctuation:/[\\[\\](){},;]|\\.+|:+/};"
            ]
        },
        "prism-makefile.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.makefile = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t// Built-in target names",
                "\t'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,",
                "",
                "\t// Targets",
                "\t'symbol': {",
                "\t\tpattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,",
                "\t\tinside: {",
                "\t\t\t'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/",
                "\t\t}",
                "\t},",
                "\t'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,",
                "",
                "\t'keyword': [",
                "\t\t// Directives",
                "\t\t/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,",
                "\t\t// Functions",
                "\t\t{",
                "\t\t\tpattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'operator': /(?:::|[?:+!])?=|[|@]/,",
                "\t'punctuation': /[:;(){}]/",
                "};"
            ]
        },
        "prism-makefile.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.makefile={comment:{pattern:/(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,lookbehind:!0},string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,symbol:{pattern:/^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,inside:{variable:/\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/}},variable:/\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,keyword:[/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,{pattern:/(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,lookbehind:!0}],operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/};"
            ]
        },
        "prism-markdown.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t// Allow only one line break",
                "\tvar inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;",
                "",
                "\t/**",
                "\t * This function is intended for the creation of the bold or italic pattern.",
                "\t *",
                "\t * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.",
                "\t *",
                "\t * _Note:_ Keep in mind that this adds a capturing group.",
                "\t *",
                "\t * @param {string} pattern",
                "\t * @returns {RegExp}",
                "\t */",
                "\tfunction createInline(pattern) {",
                "\t\tpattern = pattern.replace(/<inner>/g, function () { return inner; });",
                "\t\treturn RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');",
                "\t}",
                "",
                "",
                "\tvar tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;",
                "\tvar tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () { return tableCell; });",
                "\tvar tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;",
                "",
                "",
                "\tPrism.languages.markdown = Prism.languages.extend('markup', {});",
                "\tPrism.languages.insertBefore('markdown', 'prolog', {",
                "\t\t'front-matter-block': {",
                "\t\t\tpattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^---|---$/,",
                "\t\t\t\t'font-matter': {",
                "\t\t\t\t\tpattern: /\\S+(?:\\s+\\S+)*/,",
                "\t\t\t\t\talias: ['yaml', 'language-yaml'],",
                "\t\t\t\t\tinside: Prism.languages.yaml",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'blockquote': {",
                "\t\t\t// > ...",
                "\t\t\tpattern: /^>(?:[\\t ]*>)*/m,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'table': {",
                "\t\t\tpattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),",
                "\t\t\tinside: {",
                "\t\t\t\t'table-data-rows': {",
                "\t\t\t\t\tpattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'table-data': {",
                "\t\t\t\t\t\t\tpattern: RegExp(tableCell),",
                "\t\t\t\t\t\t\tinside: Prism.languages.markdown",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /\\|/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'table-line': {",
                "\t\t\t\t\tpattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\||:?-{3,}:?/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'table-header-row': {",
                "\t\t\t\t\tpattern: RegExp('^' + tableRow + '$'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'table-header': {",
                "\t\t\t\t\t\t\tpattern: RegExp(tableCell),",
                "\t\t\t\t\t\t\talias: 'important',",
                "\t\t\t\t\t\t\tinside: Prism.languages.markdown",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /\\|/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code': [",
                "\t\t\t{",
                "\t\t\t\t// Prefixed by 4 spaces or 1 tab and preceded by an empty line",
                "\t\t\t\tpattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// `code`",
                "\t\t\t\t// ``code``",
                "\t\t\t\tpattern: /``.+?``|`[^`\\r\\n]+`/,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// ```optional language",
                "\t\t\t\t// code block",
                "\t\t\t\t// ```",
                "\t\t\t\tpattern: /^```[\\s\\S]*?^```$/m,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'code-block': {",
                "\t\t\t\t\t\tpattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'code-language': {",
                "\t\t\t\t\t\tpattern: /^(```).+/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'punctuation': /```/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'title': [",
                "\t\t\t{",
                "\t\t\t\t// title 1",
                "\t\t\t\t// =======",
                "",
                "\t\t\t\t// title 2",
                "\t\t\t\t// -------",
                "\t\t\t\tpattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,",
                "\t\t\t\talias: 'important',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tpunctuation: /==+$|--+$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// # title 1",
                "\t\t\t\t// ###### title 6",
                "\t\t\t\tpattern: /(^\\s*)#.+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'important',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tpunctuation: /^#+|#+$/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'hr': {",
                "\t\t\t// ***",
                "\t\t\t// ---",
                "\t\t\t// * * *",
                "\t\t\t// -----------",
                "\t\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'list': {",
                "\t\t\t// * item",
                "\t\t\t// + item",
                "\t\t\t// - item",
                "\t\t\t// 1. item",
                "\t\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'url-reference': {",
                "\t\t\t// [id]: http://example.com \"Optional title\"",
                "\t\t\t// [id]: http://example.com 'Optional title'",
                "\t\t\t// [id]: http://example.com (Optional title)",
                "\t\t\t// [id]: <http://example.com> \"Optional title\"",
                "\t\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': {",
                "\t\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,",
                "\t\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/",
                "\t\t\t},",
                "\t\t\talias: 'url'",
                "\t\t},",
                "\t\t'bold': {",
                "\t\t\t// **strong**",
                "\t\t\t// __strong__",
                "",
                "\t\t\t// allow one nested instance of italic text using the same delimiter",
                "\t\t\tpattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /(^..)[\\s\\S]+(?=..$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {} // see below",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\*\\*|__/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'italic': {",
                "\t\t\t// *em*",
                "\t\t\t// _em_",
                "",
                "\t\t\t// allow one nested instance of bold text using the same delimiter",
                "\t\t\tpattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /(^.)[\\s\\S]+(?=.$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {} // see below",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /[*_]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'strike': {",
                "\t\t\t// ~~strike through~~",
                "\t\t\t// ~strike~",
                "\t\t\tpattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /(^~~?)[\\s\\S]+(?=\\1$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {} // see below",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /~~?/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'url': {",
                "\t\t\t// [example](http://example.com \"Optional title\")",
                "\t\t\t// [example][id]",
                "\t\t\t// [example] [id]",
                "\t\t\tpattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'operator': /^!/,",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /(^\\[)[^\\]]+(?=\\])/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {} // see below",
                "\t\t\t\t},",
                "\t\t\t\t'variable': {",
                "\t\t\t\t\tpattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'url': {",
                "\t\t\t\t\tpattern: /(^\\]\\()[^\\s)]+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\t['url', 'bold', 'italic', 'strike'].forEach(function (token) {",
                "\t\t['url', 'bold', 'italic', 'strike'].forEach(function (inside) {",
                "\t\t\tif (token !== inside) {",
                "\t\t\t\tPrism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];",
                "\t\t\t}",
                "\t\t});",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tif (env.language !== 'markdown' && env.language !== 'md') {",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tfunction walkTokens(tokens) {",
                "\t\t\tif (!tokens || typeof tokens === 'string') {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tfor (var i = 0, l = tokens.length; i < l; i++) {",
                "\t\t\t\tvar token = tokens[i];",
                "",
                "\t\t\t\tif (token.type !== 'code') {",
                "\t\t\t\t\twalkTokens(token.content);",
                "\t\t\t\t\tcontinue;",
                "\t\t\t\t}",
                "",
                "\t\t\t\t/*",
                "\t\t\t\t * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token",
                "\t\t\t\t * is optional. But the grammar is defined so that there is only one case we have to handle:",
                "\t\t\t\t *",
                "\t\t\t\t * token.content = [",
                "\t\t\t\t *     <span class=\"punctuation\">```</span>,",
                "\t\t\t\t *     <span class=\"code-language\">xxxx</span>,",
                "\t\t\t\t *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)",
                "\t\t\t\t *     <span class=\"code-block\">...</span>,",
                "\t\t\t\t *     '\\n', // exactly one new lines again",
                "\t\t\t\t *     <span class=\"punctuation\">```</span>",
                "\t\t\t\t * ];",
                "\t\t\t\t */",
                "",
                "\t\t\t\tvar codeLang = token.content[1];",
                "\t\t\t\tvar codeBlock = token.content[3];",
                "",
                "\t\t\t\tif (codeLang && codeBlock &&",
                "\t\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&",
                "\t\t\t\t\ttypeof codeLang.content === 'string') {",
                "",
                "\t\t\t\t\t// this might be a language that Prism does not support",
                "",
                "\t\t\t\t\t// do some replacements to support C++, C#, and F#",
                "\t\t\t\t\tvar lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp')",
                "\t\t\t\t\t// only use the first word",
                "\t\t\t\t\tlang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();",
                "\t\t\t\t\tvar alias = 'language-' + lang;",
                "",
                "\t\t\t\t\t// add alias",
                "\t\t\t\t\tif (!codeBlock.alias) {",
                "\t\t\t\t\t\tcodeBlock.alias = [alias];",
                "\t\t\t\t\t} else if (typeof codeBlock.alias === 'string') {",
                "\t\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\tcodeBlock.alias.push(alias);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\twalkTokens(env.tokens);",
                "\t});",
                "",
                "\tPrism.hooks.add('wrap', function (env) {",
                "\t\tif (env.type !== 'code-block') {",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tvar codeLang = '';",
                "\t\tfor (var i = 0, l = env.classes.length; i < l; i++) {",
                "\t\t\tvar cls = env.classes[i];",
                "\t\t\tvar match = /language-(.+)/.exec(cls);",
                "\t\t\tif (match) {",
                "\t\t\t\tcodeLang = match[1];",
                "\t\t\t\tbreak;",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\tvar grammar = Prism.languages[codeLang];",
                "",
                "\t\tif (!grammar) {",
                "\t\t\tif (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {",
                "\t\t\t\tvar id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);",
                "\t\t\t\tenv.attributes['id'] = id;",
                "",
                "\t\t\t\tPrism.plugins.autoloader.loadLanguages(codeLang, function () {",
                "\t\t\t\t\tvar ele = document.getElementById(id);",
                "\t\t\t\t\tif (ele) {",
                "\t\t\t\t\t\tele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);",
                "\t\t\t\t\t}",
                "\t\t\t\t});",
                "\t\t\t}",
                "\t\t} else {",
                "\t\t\t// reverse Prism.util.encode",
                "\t\t\tvar code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');",
                "",
                "\t\t\tenv.content = Prism.highlight(code, grammar, codeLang);",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.md = Prism.languages.markdown;",
                "",
                "}(Prism));"
            ]
        },
        "prism-markdown.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(d){function n(n){return n=n.replace(/<inner>/g,function(){return\"(?:\\\\\\\\.|[^\\\\\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))\"}),RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)(?:\"+n+\")\")}var e=\"(?:\\\\\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\\\\\|\\r\\n`])+\",t=\"\\\\|?__(?:\\\\|__)+\\\\|?(?:(?:\\n|\\r\\n?)|(?![^]))\".replace(/__/g,function(){return e}),a=\"\\\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\\\|?(?:\\n|\\r\\n?)\";d.languages.markdown=d.languages.extend(\"markup\",{}),d.languages.insertBefore(\"markdown\",\"prolog\",{\"front-matter-block\":{pattern:/(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,\"font-matter\":{pattern:/\\S+(?:\\s+\\S+)*/,alias:[\"yaml\",\"language-yaml\"],inside:d.languages.yaml}}},blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},table:{pattern:RegExp(\"^\"+t+a+\"(?:\"+t+\")*\",\"m\"),inside:{\"table-data-rows\":{pattern:RegExp(\"^(\"+t+a+\")(?:\"+t+\")*$\"),lookbehind:!0,inside:{\"table-data\":{pattern:RegExp(e),inside:d.languages.markdown},punctuation:/\\|/}},\"table-line\":{pattern:RegExp(\"^(\"+t+\")\"+a+\"$\"),lookbehind:!0,inside:{punctuation:/\\||:?-{3,}:?/}},\"table-header-row\":{pattern:RegExp(\"^\"+t+\"$\"),inside:{\"table-header\":{pattern:RegExp(e),alias:\"important\",inside:d.languages.markdown},punctuation:/\\|/}}}},code:[{pattern:/((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,lookbehind:!0,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\r\\n]+`/,alias:\"keyword\"},{pattern:/^```[\\s\\S]*?^```$/m,greedy:!0,inside:{\"code-block\":{pattern:/^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,lookbehind:!0},\"code-language\":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:n(\"\\\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\\\b|\\\\*\\\\*(?:(?!\\\\*)<inner>|\\\\*(?:(?!\\\\*)<inner>)+\\\\*)+\\\\*\\\\*\"),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\\s\\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\\*\\*|__/}},italic:{pattern:n(\"\\\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\\\b|\\\\*(?:(?!\\\\*)<inner>|\\\\*\\\\*(?:(?!\\\\*)<inner>)+\\\\*\\\\*)+\\\\*\"),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\\s\\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(\"(~~?)(?:(?!~)<inner>)+?\\\\2\"),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\\s\\S]+(?=\\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},url:{pattern:n('!?\\\\[(?:(?!\\\\])<inner>)+\\\\](?:\\\\([^\\\\s)]+(?:[\\t ]+\"(?:\\\\\\\\.|[^\"\\\\\\\\])*\")?\\\\)|[ \\t]?\\\\[(?:(?!\\\\])<inner>)+\\\\])'),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\\[)[^\\]]+(?=\\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},url:{pattern:/(^\\]\\()[^\\s)]+/,lookbehind:!0},string:{pattern:/(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,lookbehind:!0}}}}),[\"url\",\"bold\",\"italic\",\"strike\"].forEach(function(e){[\"url\",\"bold\",\"italic\",\"strike\"].forEach(function(n){e!==n&&(d.languages.markdown[e].inside.content.inside[n]=d.languages.markdown[n])})}),d.hooks.add(\"after-tokenize\",function(n){\"markdown\"!==n.language&&\"md\"!==n.language||!function n(e){if(e&&\"string\"!=typeof e)for(var t=0,a=e.length;t<a;t++){var i=e[t];if(\"code\"===i.type){var r=i.content[1],o=i.content[3];if(r&&o&&\"code-language\"===r.type&&\"code-block\"===o.type&&\"string\"==typeof r.content){var l=r.content.replace(/\\b#/g,\"sharp\").replace(/\\b\\+\\+/g,\"pp\"),s=\"language-\"+(l=(/[a-z][\\w-]*/i.exec(l)||[\"\"])[0].toLowerCase());o.alias?\"string\"==typeof o.alias?o.alias=[o.alias,s]:o.alias.push(s):o.alias=[s]}}else n(i.content)}}(n.tokens)}),d.hooks.add(\"wrap\",function(n){if(\"code-block\"===n.type){for(var e=\"\",t=0,a=n.classes.length;t<a;t++){var i=n.classes[t],r=/language-(.+)/.exec(i);if(r){e=r[1];break}}var o=d.languages[e];if(o){var l=n.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\");n.content=d.highlight(l,o,e)}else if(e&&\"none\"!==e&&d.plugins.autoloader){var s=\"md-\"+(new Date).valueOf()+\"-\"+Math.floor(1e16*Math.random());n.attributes.id=s,d.plugins.autoloader.loadLanguages(e,function(){var n=document.getElementById(s);n&&(n.innerHTML=d.highlight(n.textContent,d.languages[e],e))})}}}),d.languages.md=d.languages.markdown}(Prism);"
            ]
        },
        "prism-markup-templating.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t/**",
                "\t * Returns the placeholder for the given language id and index.",
                "\t *",
                "\t * @param {string} language",
                "\t * @param {string|number} index",
                "\t * @returns {string}",
                "\t */",
                "\tfunction getPlaceholder(language, index) {",
                "\t\treturn '___' + language.toUpperCase() + index + '___';",
                "\t}",
                "",
                "\tObject.defineProperties(Prism.languages['markup-templating'] = {}, {",
                "\t\tbuildPlaceholders: {",
                "\t\t\t/**",
                "\t\t\t * Tokenize all inline templating expressions matching `placeholderPattern`.",
                "\t\t\t *",
                "\t\t\t * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns",
                "\t\t\t * `true` will be replaced.",
                "\t\t\t *",
                "\t\t\t * @param {object} env The environment of the `before-tokenize` hook.",
                "\t\t\t * @param {string} language The language id.",
                "\t\t\t * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.",
                "\t\t\t * @param {(match: string) => boolean} [replaceFilter]",
                "\t\t\t */",
                "\t\t\tvalue: function (env, language, placeholderPattern, replaceFilter) {",
                "\t\t\t\tif (env.language !== language) {",
                "\t\t\t\t\treturn;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar tokenStack = env.tokenStack = [];",
                "",
                "\t\t\t\tenv.code = env.code.replace(placeholderPattern, function (match) {",
                "\t\t\t\t\tif (typeof replaceFilter === 'function' && !replaceFilter(match)) {",
                "\t\t\t\t\t\treturn match;",
                "\t\t\t\t\t}",
                "\t\t\t\t\tvar i = tokenStack.length;",
                "\t\t\t\t\tvar placeholder;",
                "",
                "\t\t\t\t\t// Check for existing strings",
                "\t\t\t\t\twhile (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1)",
                "\t\t\t\t\t\t++i;",
                "",
                "\t\t\t\t\t// Create a sparse array",
                "\t\t\t\t\ttokenStack[i] = match;",
                "",
                "\t\t\t\t\treturn placeholder;",
                "\t\t\t\t});",
                "",
                "\t\t\t\t// Switch the grammar to markup",
                "\t\t\t\tenv.grammar = Prism.languages.markup;",
                "\t\t\t}",
                "\t\t},",
                "\t\ttokenizePlaceholders: {",
                "\t\t\t/**",
                "\t\t\t * Replace placeholders with proper tokens after tokenizing.",
                "\t\t\t *",
                "\t\t\t * @param {object} env The environment of the `after-tokenize` hook.",
                "\t\t\t * @param {string} language The language id.",
                "\t\t\t */",
                "\t\t\tvalue: function (env, language) {",
                "\t\t\t\tif (env.language !== language || !env.tokenStack) {",
                "\t\t\t\t\treturn;",
                "\t\t\t\t}",
                "",
                "\t\t\t\t// Switch the grammar back",
                "\t\t\t\tenv.grammar = Prism.languages[language];",
                "",
                "\t\t\t\tvar j = 0;",
                "\t\t\t\tvar keys = Object.keys(env.tokenStack);",
                "",
                "\t\t\t\tfunction walkTokens(tokens) {",
                "\t\t\t\t\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\t\t\t\t\t// all placeholders are replaced already",
                "\t\t\t\t\t\tif (j >= keys.length) {",
                "\t\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tvar token = tokens[i];",
                "\t\t\t\t\t\tif (typeof token === 'string' || (token.content && typeof token.content === 'string')) {",
                "\t\t\t\t\t\t\tvar k = keys[j];",
                "\t\t\t\t\t\t\tvar t = env.tokenStack[k];",
                "\t\t\t\t\t\t\tvar s = typeof token === 'string' ? token : token.content;",
                "\t\t\t\t\t\t\tvar placeholder = getPlaceholder(language, k);",
                "",
                "\t\t\t\t\t\t\tvar index = s.indexOf(placeholder);",
                "\t\t\t\t\t\t\tif (index > -1) {",
                "\t\t\t\t\t\t\t\t++j;",
                "",
                "\t\t\t\t\t\t\t\tvar before = s.substring(0, index);",
                "\t\t\t\t\t\t\t\tvar middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);",
                "\t\t\t\t\t\t\t\tvar after = s.substring(index + placeholder.length);",
                "",
                "\t\t\t\t\t\t\t\tvar replacement = [];",
                "\t\t\t\t\t\t\t\tif (before) {",
                "\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([before]));",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t\treplacement.push(middle);",
                "\t\t\t\t\t\t\t\tif (after) {",
                "\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([after]));",
                "\t\t\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\t\t\tif (typeof token === 'string') {",
                "\t\t\t\t\t\t\t\t\ttokens.splice.apply(tokens, [i, 1].concat(replacement));",
                "\t\t\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\t\t\ttoken.content = replacement;",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t} else if (token.content /* && typeof token.content !== 'string' */) {",
                "\t\t\t\t\t\t\twalkTokens(token.content);",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\treturn tokens;",
                "\t\t\t\t}",
                "",
                "\t\t\t\twalkTokens(env.tokens);",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-markup-templating.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(h){function v(e,n){return\"___\"+e.toUpperCase()+n+\"___\"}Object.defineProperties(h.languages[\"markup-templating\"]={},{buildPlaceholders:{value:function(a,r,e,o){if(a.language===r){var c=a.tokenStack=[];a.code=a.code.replace(e,function(e){if(\"function\"==typeof o&&!o(e))return e;for(var n,t=c.length;-1!==a.code.indexOf(n=v(r,t));)++t;return c[t]=e,n}),a.grammar=h.languages.markup}}},tokenizePlaceholders:{value:function(p,k){if(p.language===k&&p.tokenStack){p.grammar=h.languages[k];var m=0,d=Object.keys(p.tokenStack);!function e(n){for(var t=0;t<n.length&&!(m>=d.length);t++){var a=n[t];if(\"string\"==typeof a||a.content&&\"string\"==typeof a.content){var r=d[m],o=p.tokenStack[r],c=\"string\"==typeof a?a:a.content,i=v(k,r),u=c.indexOf(i);if(-1<u){++m;var g=c.substring(0,u),l=new h.Token(k,h.tokenize(o,p.grammar),\"language-\"+k,o),s=c.substring(u+i.length),f=[];g&&f.push.apply(f,e([g])),f.push(l),s&&f.push.apply(f,e([s])),\"string\"==typeof a?n.splice.apply(n,[t,1].concat(f)):a.content=f}}else a.content&&e(a.content)}return n}(p.tokens)}}}})}(Prism);"
            ]
        },
        "prism-markup.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markup = {",
                "\t'comment': /<!--[\\s\\S]*?-->/,",
                "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
                "\t'doctype': {",
                "\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl",
                "\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'internal-subset': {",
                "\t\t\t\tpattern: /(\\[)[\\s\\S]+(?=\\]>$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^<!|>$|[[\\]]/,",
                "\t\t\t'doctype-tag': /^DOCTYPE/,",
                "\t\t\t'name': /[^\\s<>'\"]+/",
                "\t\t}",
                "\t},",
                "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,",
                "\t'tag': {",
                "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/,",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\/?>/,",
                "\t\t\t'attr-name': {",
                "\t\t\t\tpattern: /[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t}",
                "\t},",
                "\t'entity': [",
                "\t\t{",
                "\t\t\tpattern: /&[\\da-z]{1,8};/i,",
                "\t\t\talias: 'named-entity'",
                "\t\t},",
                "\t\t/&#x?[\\da-f]{1,8};/i",
                "\t]",
                "};",
                "",
                "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
                "\tPrism.languages.markup['entity'];",
                "Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;",
                "",
                "// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "Prism.hooks.add('wrap', function (env) {",
                "",
                "\tif (env.type === 'entity') {",
                "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t}",
                "});",
                "",
                "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
                "\t/**",
                "\t * Adds an inlined language to markup.",
                "\t *",
                "\t * An example of an inlined language is CSS with `<style>` tags.",
                "\t *",
                "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addInlined('style', 'css');",
                "\t */",
                "\tvalue: function addInlined(tagName, lang) {",
                "\t\tvar includedCdataInside = {};",
                "\t\tincludedCdataInside['language-' + lang] = {",
                "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
                "",
                "\t\tvar inside = {",
                "\t\t\t'included-cdata': {",
                "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t\t\t\tinside: includedCdataInside",
                "\t\t\t}",
                "\t\t};",
                "\t\tinside['language-' + lang] = {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "",
                "\t\tvar def = {};",
                "\t\tdef[tagName] = {",
                "\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: inside",
                "\t\t};",
                "",
                "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
                "\t}",
                "});",
                "",
                "Prism.languages.html = Prism.languages.markup;",
                "Prism.languages.mathml = Prism.languages.markup;",
                "Prism.languages.svg = Prism.languages.markup;",
                "",
                "Prism.languages.xml = Prism.languages.extend('markup', {});",
                "Prism.languages.ssml = Prism.languages.xml;",
                "Prism.languages.atom = Prism.languages.xml;",
                "Prism.languages.rss = Prism.languages.xml;"
            ]
        },
        "prism-markup.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markup={comment:/<!--[\\s\\S]*?-->/,prolog:/<\\?[\\s\\S]+?\\?>/,doctype:{pattern:/<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,greedy:!0,inside:{\"internal-subset\":{pattern:/(\\[)[\\s\\S]+(?=\\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\\]]/,\"doctype-tag\":/^DOCTYPE/,name:/[^\\s<>'\"]+/}},cdata:/<!\\[CDATA\\[[\\s\\S]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:\"attr-equals\"},/\"|'/]}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:[{pattern:/&[\\da-z]{1,8};/i,alias:\"named-entity\"},/&#x?[\\da-f]{1,8};/i]},Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity=Prism.languages.markup.entity,Prism.languages.markup.doctype.inside[\"internal-subset\"].inside=Prism.languages.markup,Prism.hooks.add(\"wrap\",function(a){\"entity\"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,\"&\"))}),Object.defineProperty(Prism.languages.markup.tag,\"addInlined\",{value:function(a,e){var s={};s[\"language-\"+e]={pattern:/(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,lookbehind:!0,inside:Prism.languages[e]},s.cdata=/^<!\\[CDATA\\[|\\]\\]>$/i;var n={\"included-cdata\":{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,inside:s}};n[\"language-\"+e]={pattern:/[\\s\\S]+/,inside:Prism.languages[e]};var t={};t[a]={pattern:RegExp(\"(<__[^>]*>)(?:<!\\\\[CDATA\\\\[(?:[^\\\\]]|\\\\](?!\\\\]>))*\\\\]\\\\]>|(?!<!\\\\[CDATA\\\\[)[^])*?(?=</__>)\".replace(/__/g,function(){return a}),\"i\"),lookbehind:!0,greedy:!0,inside:n},Prism.languages.insertBefore(\"markup\",\"cdata\",t)}}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,Prism.languages.xml=Prism.languages.extend(\"markup\",{}),Prism.languages.ssml=Prism.languages.xml,Prism.languages.atom=Prism.languages.xml,Prism.languages.rss=Prism.languages.xml;"
            ]
        },
        "prism-matlab.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.matlab = {",
                "\t'comment': [",
                "\t\t/%\\{[\\s\\S]*?\\}%/,",
                "\t\t/%.+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\\B'(?:''|[^'\\r\\n])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// FIXME We could handle imaginary numbers as a whole",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,",
                "\t'keyword': /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*\\()/,",
                "\t'operator': /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,",
                "\t'punctuation': /\\.{3}|[.,;\\[\\](){}!]/",
                "};"
            ]
        },
        "prism-matlab.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.matlab={comment:[/%\\{[\\s\\S]*?\\}%/,/%.+/],string:{pattern:/\\B'(?:''|[^'\\r\\n])*'/,greedy:!0},number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,keyword:/\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,function:/(?!\\d)\\w+(?=\\s*\\()/,operator:/\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,punctuation:/\\.{3}|[.,;\\[\\](){}!]/};"
            ]
        },
        "prism-mel.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mel = {",
                "\t'comment': /\\/\\/.*/,",
                "\t'code': {",
                "\t\tpattern: /`(?:\\\\.|[^\\\\`\\r\\n])*`/,",
                "\t\tgreedy: true,",
                "\t\talias: 'italic',",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t\t// See rest below",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /\\$\\w+/,",
                "\t'number': /\\b0x[\\da-fA-F]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+/,",
                "\t'flag': {",
                "\t\tpattern: /-[^\\d\\W]\\w*/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'keyword': /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,",
                "\t'function': /\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,",
                "",
                "\t'operator': [",
                "\t\t/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /(^|[^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /(^|[^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /<<|>>|[.,:;?\\[\\](){}]/",
                "};",
                "Prism.languages.mel['code'].inside.rest = Prism.languages.mel;"
            ]
        },
        "prism-mel.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mel={comment:/\\/\\/.*/,code:{pattern:/`(?:\\\\.|[^\\\\`\\r\\n])*`/,greedy:!0,alias:\"italic\",inside:{delimiter:{pattern:/^`|`$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},variable:/\\$\\w+/,number:/\\b0x[\\da-fA-F]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+/,flag:{pattern:/-[^\\d\\W]\\w*/,alias:\"operator\"},keyword:/\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,function:/\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,operator:[/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,:;?\\[\\](){}]/},Prism.languages.mel.code.inside.rest=Prism.languages.mel;"
            ]
        },
        "prism-mizar.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mizar = {",
                "\t'comment': /::.+/,",
                "\t'keyword': /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,",
                "\t'parameter': {",
                "\t\tpattern: /\\$(?:10|\\d)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'variable': /\\w+(?=:)/,",
                "\t'number': /(?:\\b|-)\\d+\\b/,",
                "\t'operator': /\\.\\.\\.|->|&|\\.?=/,",
                "\t'punctuation': /\\(#|#\\)|[,:;\\[\\](){}]/",
                "};"
            ]
        },
        "prism-mizar.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mizar={comment:/::.+/,keyword:/@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,parameter:{pattern:/\\$(?:10|\\d)/,alias:\"variable\"},variable:/\\w+(?=:)/,number:/(?:\\b|-)\\d+\\b/,operator:/\\.\\.\\.|->|&|\\.?=/,punctuation:/\\(#|#\\)|[,:;\\[\\](){}]/};"
            ]
        },
        "prism-mongodb.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar operators = [",
                "\t\t// query and projection",
                "\t\t'$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or',",
                "\t\t'$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects',",
                "\t\t'$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet',",
                "\t\t'$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice',",
                "",
                "\t\t// update",
                "\t\t'$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset',",
                "\t\t'$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit',",
                "",
                "\t\t// aggregation pipeline stages",
                "\t\t'$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear',",
                "\t\t'$graphLookup', '$group','$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup',",
                "\t\t'$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith',",
                "\t\t'$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind',",
                "",
                "\t\t// aggregation pipeline operators",
                "\t\t'$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and',",
                "\t\t'$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2',",
                "\t\t'$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond',",
                "\t\t'$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth',",
                "\t\t'$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first',",
                "\t\t'$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes',",
                "\t\t'$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last',",
                "\t\t'$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max',",
                "\t\t'$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne',",
                "\t\t'$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce',",
                "\t\t'$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round',",
                "\t\t'$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion',",
                "\t\t'$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes',",
                "\t\t'$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan',",
                "\t\t'$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString',",
                "\t\t'$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip',",
                "",
                "\t\t// aggregation pipeline query modifiers",
                "\t\t'$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query',",
                "\t\t'$returnKey', '$showDiskLoc', '$natural',",
                "\t];",
                "",
                "\tvar builtinFunctions = [",
                "\t\t'ObjectId',",
                "\t\t'Code',",
                "\t\t'BinData',",
                "\t\t'DBRef',",
                "\t\t'Timestamp',",
                "\t\t'NumberLong',",
                "\t\t'NumberDecimal',",
                "\t\t'MaxKey',",
                "\t\t'MinKey',",
                "\t\t'RegExp',",
                "\t\t'ISODate',",
                "\t\t'UUID',",
                "\t];",
                "",
                "\toperators = operators.map(function(operator) {",
                "\t\treturn operator.replace('$', '\\\\$');",
                "\t});",
                "",
                "\tvar operatorsSource = '(?:' + operators.join('|') + ')\\\\b';",
                "",
                "\tPrism.languages.mongodb = Prism.languages.extend('javascript', {});",
                "",
                "\tPrism.languages.insertBefore('mongodb', 'string', {",
                "\t\t'property': {",
                "\t\t\tpattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.mongodb.string.inside = {",
                "\t\turl: {",
                "\t\t\t// url pattern",
                "\t\t\tpattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\tentity: {",
                "\t\t\t// ipv4",
                "\t\t\tpattern: /\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.insertBefore('mongodb', 'constant', {",
                "\t\t'builtin': {",
                "\t\t\tpattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),",
                "\t\t\talias: 'keyword'",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-mongodb.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function($){var e=[\"$eq\",\"$gt\",\"$gte\",\"$in\",\"$lt\",\"$lte\",\"$ne\",\"$nin\",\"$and\",\"$not\",\"$nor\",\"$or\",\"$exists\",\"$type\",\"$expr\",\"$jsonSchema\",\"$mod\",\"$regex\",\"$text\",\"$where\",\"$geoIntersects\",\"$geoWithin\",\"$near\",\"$nearSphere\",\"$all\",\"$elemMatch\",\"$size\",\"$bitsAllClear\",\"$bitsAllSet\",\"$bitsAnyClear\",\"$bitsAnySet\",\"$comment\",\"$elemMatch\",\"$meta\",\"$slice\",\"$currentDate\",\"$inc\",\"$min\",\"$max\",\"$mul\",\"$rename\",\"$set\",\"$setOnInsert\",\"$unset\",\"$addToSet\",\"$pop\",\"$pull\",\"$push\",\"$pullAll\",\"$each\",\"$position\",\"$slice\",\"$sort\",\"$bit\",\"$addFields\",\"$bucket\",\"$bucketAuto\",\"$collStats\",\"$count\",\"$currentOp\",\"$facet\",\"$geoNear\",\"$graphLookup\",\"$group\",\"$indexStats\",\"$limit\",\"$listLocalSessions\",\"$listSessions\",\"$lookup\",\"$match\",\"$merge\",\"$out\",\"$planCacheStats\",\"$project\",\"$redact\",\"$replaceRoot\",\"$replaceWith\",\"$sample\",\"$set\",\"$skip\",\"$sort\",\"$sortByCount\",\"$unionWith\",\"$unset\",\"$unwind\",\"$abs\",\"$accumulator\",\"$acos\",\"$acosh\",\"$add\",\"$addToSet\",\"$allElementsTrue\",\"$and\",\"$anyElementTrue\",\"$arrayElemAt\",\"$arrayToObject\",\"$asin\",\"$asinh\",\"$atan\",\"$atan2\",\"$atanh\",\"$avg\",\"$binarySize\",\"$bsonSize\",\"$ceil\",\"$cmp\",\"$concat\",\"$concatArrays\",\"$cond\",\"$convert\",\"$cos\",\"$dateFromParts\",\"$dateToParts\",\"$dateFromString\",\"$dateToString\",\"$dayOfMonth\",\"$dayOfWeek\",\"$dayOfYear\",\"$degreesToRadians\",\"$divide\",\"$eq\",\"$exp\",\"$filter\",\"$first\",\"$floor\",\"$function\",\"$gt\",\"$gte\",\"$hour\",\"$ifNull\",\"$in\",\"$indexOfArray\",\"$indexOfBytes\",\"$indexOfCP\",\"$isArray\",\"$isNumber\",\"$isoDayOfWeek\",\"$isoWeek\",\"$isoWeekYear\",\"$last\",\"$last\",\"$let\",\"$literal\",\"$ln\",\"$log\",\"$log10\",\"$lt\",\"$lte\",\"$ltrim\",\"$map\",\"$max\",\"$mergeObjects\",\"$meta\",\"$min\",\"$millisecond\",\"$minute\",\"$mod\",\"$month\",\"$multiply\",\"$ne\",\"$not\",\"$objectToArray\",\"$or\",\"$pow\",\"$push\",\"$radiansToDegrees\",\"$range\",\"$reduce\",\"$regexFind\",\"$regexFindAll\",\"$regexMatch\",\"$replaceOne\",\"$replaceAll\",\"$reverseArray\",\"$round\",\"$rtrim\",\"$second\",\"$setDifference\",\"$setEquals\",\"$setIntersection\",\"$setIsSubset\",\"$setUnion\",\"$size\",\"$sin\",\"$slice\",\"$split\",\"$sqrt\",\"$stdDevPop\",\"$stdDevSamp\",\"$strcasecmp\",\"$strLenBytes\",\"$strLenCP\",\"$substr\",\"$substrBytes\",\"$substrCP\",\"$subtract\",\"$sum\",\"$switch\",\"$tan\",\"$toBool\",\"$toDate\",\"$toDecimal\",\"$toDouble\",\"$toInt\",\"$toLong\",\"$toObjectId\",\"$toString\",\"$toLower\",\"$toUpper\",\"$trim\",\"$trunc\",\"$type\",\"$week\",\"$year\",\"$zip\",\"$comment\",\"$explain\",\"$hint\",\"$max\",\"$maxTimeMS\",\"$min\",\"$orderby\",\"$query\",\"$returnKey\",\"$showDiskLoc\",\"$natural\"],t=\"(?:\"+(e=e.map(function($){return $.replace(\"$\",\"\\\\$\")})).join(\"|\")+\")\\\\b\";$.languages.mongodb=$.languages.extend(\"javascript\",{}),$.languages.insertBefore(\"mongodb\",\"string\",{property:{pattern:/(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,greedy:!0,inside:{keyword:RegExp(\"^(['\\\"])?\"+t+\"(?:\\\\1)?$\")}}}),$.languages.mongodb.string.inside={url:{pattern:/https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,greedy:!0},entity:{pattern:/\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/,greedy:!0}},$.languages.insertBefore(\"mongodb\",\"constant\",{builtin:{pattern:RegExp(\"\\\\b(?:\"+[\"ObjectId\",\"Code\",\"BinData\",\"DBRef\",\"Timestamp\",\"NumberLong\",\"NumberDecimal\",\"MaxKey\",\"MinKey\",\"RegExp\",\"ISODate\",\"UUID\"].join(\"|\")+\")\\\\b\"),alias:\"keyword\"}})}(Prism);"
            ]
        },
        "prism-monkey.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.monkey = {",
                "\t'string': /\"[^\"\\r\\n]*\"/,",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /^#Rem\\s[\\s\\S]*?^#End/im,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /'.+/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'preprocessor': {",
                "\t\tpattern: /(^[ \\t]*)#.+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'function': /\\w+(?=\\()/,",
                "\t'type-char': {",
                "\t\tpattern: /(\\w)[?%#$]/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,",
                "\t'operator': /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,",
                "\t'punctuation': /[.,:;()\\[\\]]/",
                "};"
            ]
        },
        "prism-monkey.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.monkey={string:/\"[^\"\\r\\n]*\"/,comment:[{pattern:/^#Rem\\s[\\s\\S]*?^#End/im,greedy:!0},{pattern:/'.+/,greedy:!0}],preprocessor:{pattern:/(^[ \\t]*)#.+/m,lookbehind:!0,alias:\"comment\"},function:/\\w+(?=\\()/,\"type-char\":{pattern:/(\\w)[?%#$]/,lookbehind:!0,alias:\"variable\"},number:{pattern:/((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,lookbehind:!0},keyword:/\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,operator:/\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,punctuation:/[.,:;()\\[\\]]/};"
            ]
        },
        "prism-moonscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.moonscript = {",
                "\t'comment': /--.*/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /'[^']*'|\\[(=*)\\[[\\s\\S]*?\\]\\1\\]/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"[^\"]*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': {",
                "\t\t\t\t\tpattern: /#\\{[^{}]*\\}/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'moonscript': {",
                "\t\t\t\t\t\t\tpattern: /(^#\\{)[\\s\\S]+(?=\\})/,",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: null // see beow",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\t\tpattern: /#\\{|\\}/,",
                "\t\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'class-name': [",
                "\t\t{",
                "\t\t\tpattern: /(\\b(?:class|extends)[ \\t]+)\\w+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// class-like names start with a capital letter",
                "\t\t/\\b[A-Z]\\w*/",
                "\t],",
                "\t'keyword': /\\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\\b/,",
                "\t'variable': /@@?\\w*/,",
                "\t'property': {",
                "\t\tpattern: /\\b(?!\\d)\\w+(?=:)|(:)(?!\\d)\\w+/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /\\b(?:_G|_VERSION|assert|collectgarbage|coroutine\\.(?:running|create|resume|status|wrap|yield)|debug\\.(?:debug|gethook|getinfo|getlocal|getupvalue|setlocal|setupvalue|sethook|traceback|getfenv|getmetatable|getregistry|setfenv|setmetatable)|dofile|error|getfenv|getmetatable|io\\.(?:stdin|stdout|stderr|close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\\.(?:abs|acos|asin|atan|atan2|ceil|sin|cos|tan|deg|exp|floor|log|log10|max|min|fmod|modf|cosh|sinh|tanh|pow|rad|sqrt|frexp|ldexp|random|randomseed|pi)|module|next|os\\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\\.(?:byte|char|dump|find|len|lower|rep|sub|upper|format|gsub|gmatch|match|reverse)|table\\.(?:maxn|concat|sort|insert|remove)|tonumber|tostring|type|unpack|xpcall)\\b/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\./",
                "\t\t}",
                "\t},",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t'number': /(?:\\B\\.\\d+|\\b\\d+\\.\\d+|\\b\\d+(?=[eE]))(?:[eE][-+]?\\d+)?\\b|\\b(?:0x[a-fA-F\\d]+|\\d+)(?:U?LL)?\\b/,",
                "\t'operator': /\\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\\.\\.)=?|[:#^]|\\b(?:and|or)\\b=?|\\b(?:not)\\b/,",
                "\t'punctuation': /[.,()[\\]{}\\\\]/",
                "};",
                "",
                "Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside = Prism.languages.moonscript;",
                "",
                "Prism.languages.moon = Prism.languages.moonscript;"
            ]
        },
        "prism-moonscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.moonscript={comment:/--.*/,string:[{pattern:/'[^']*'|\\[(=*)\\[[\\s\\S]*?\\]\\1\\]/,greedy:!0},{pattern:/\"[^\"]*\"/,greedy:!0,inside:{interpolation:{pattern:/#\\{[^{}]*\\}/,inside:{moonscript:{pattern:/(^#\\{)[\\s\\S]+(?=\\})/,lookbehind:!0,inside:null},\"interpolation-punctuation\":{pattern:/#\\{|\\}/,alias:\"punctuation\"}}}}}],\"class-name\":[{pattern:/(\\b(?:class|extends)[ \\t]+)\\w+/,lookbehind:!0},/\\b[A-Z]\\w*/],keyword:/\\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\\b/,variable:/@@?\\w*/,property:{pattern:/\\b(?!\\d)\\w+(?=:)|(:)(?!\\d)\\w+/,lookbehind:!0},function:{pattern:/\\b(?:_G|_VERSION|assert|collectgarbage|coroutine\\.(?:running|create|resume|status|wrap|yield)|debug\\.(?:debug|gethook|getinfo|getlocal|getupvalue|setlocal|setupvalue|sethook|traceback|getfenv|getmetatable|getregistry|setfenv|setmetatable)|dofile|error|getfenv|getmetatable|io\\.(?:stdin|stdout|stderr|close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\\.(?:abs|acos|asin|atan|atan2|ceil|sin|cos|tan|deg|exp|floor|log|log10|max|min|fmod|modf|cosh|sinh|tanh|pow|rad|sqrt|frexp|ldexp|random|randomseed|pi)|module|next|os\\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\\.(?:byte|char|dump|find|len|lower|rep|sub|upper|format|gsub|gmatch|match|reverse)|table\\.(?:maxn|concat|sort|insert|remove)|tonumber|tostring|type|unpack|xpcall)\\b/,inside:{punctuation:/\\./}},boolean:/\\b(?:false|true)\\b/,number:/(?:\\B\\.\\d+|\\b\\d+\\.\\d+|\\b\\d+(?=[eE]))(?:[eE][-+]?\\d+)?\\b|\\b(?:0x[a-fA-F\\d]+|\\d+)(?:U?LL)?\\b/,operator:/\\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\\.\\.)=?|[:#^]|\\b(?:and|or)\\b=?|\\b(?:not)\\b/,punctuation:/[.,()[\\]{}\\\\]/},Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside=Prism.languages.moonscript,Prism.languages.moon=Prism.languages.moonscript;"
            ]
        },
        "prism-n1ql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n1ql = {",
                "\t'comment': /\\/\\*[\\s\\S]*?(?:$|\\*\\/)/,",
                "\t'parameter': /\\$[\\w.]+/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,",
                "\t\tgreedy: true,",
                "\t},",
                "\t'identifier': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,",
                "\t\tgreedy: true,",
                "\t},",
                "\t'function': /\\b(?:ABS|ACOS|ARRAY_AGG|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|BASE64|BASE64_DECODE|BASE64_ENCODE|BITAND|BITCLEAR|BITNOT|BITOR|BITSET|BITSHIFT|BITTEST|BITXOR|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONTAINS|CONTAINS_TOKEN|CONTAINS_TOKEN_LIKE|CONTAINS_TOKEN_REGEXP|COS|COUNT|CURL|DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODED_SIZE|ENCODE_JSON|EXP|FLOOR|GREATEST|HAS_TOKEN|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|ISARRAY|ISATOM|ISBOOLEAN|ISNUMBER|ISOBJECT|ISSTRING|IsBitSET|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSINGIF|NANIF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|NULLIF|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_PAIRS|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POLY_LENGTH|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUFFIXES|SUM|TAN|TITLE|TOARRAY|TOATOM|TOBOOLEAN|TOKENS|TONUMBER|TOOBJECT|TOSTRING|TRIM|TRUNC|TYPE|UPPER|WEEKDAY_MILLIS|WEEKDAY_STR)(?=\\s*\\()/i,",
                "\t'keyword': /\\b(?:ALL|ALTER|ANALYZE|AS|ASC|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|CONNECT|CONTINUE|CORRELATE|COVER|CREATE|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FLATTEN|FOR|FORCE|FROM|FUNCTION|GRANT|GROUP|GSI|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LAST|LEFT|LET|LETTING|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NULL|NUMBER|OBJECT|OFFSET|ON|OPTION|ORDER|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROCEDURE|PUBLIC|RAW|REALM|REDUCE|RENAME|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|SATISFIES|SCHEMA|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TO|TRANSACTION|TRIGGER|TRUNCATE|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WITH|WORK|XOR)\\b/i,",
                "\t'boolean': /\\b(?:TRUE|FALSE)\\b/i,",
                "\t'number': /(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,",
                "\t'operator': /[-+*\\/%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,",
                "\t'punctuation': /[;[\\](),.{}:]/",
                "};"
            ]
        },
        "prism-n1ql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n1ql={comment:/\\/\\*[\\s\\S]*?(?:$|\\*\\/)/,parameter:/\\$[\\w.]+/,string:{pattern:/([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,greedy:!0},identifier:{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,greedy:!0},function:/\\b(?:ABS|ACOS|ARRAY_AGG|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|BASE64|BASE64_DECODE|BASE64_ENCODE|BITAND|BITCLEAR|BITNOT|BITOR|BITSET|BITSHIFT|BITTEST|BITXOR|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONTAINS|CONTAINS_TOKEN|CONTAINS_TOKEN_LIKE|CONTAINS_TOKEN_REGEXP|COS|COUNT|CURL|DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODED_SIZE|ENCODE_JSON|EXP|FLOOR|GREATEST|HAS_TOKEN|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|ISARRAY|ISATOM|ISBOOLEAN|ISNUMBER|ISOBJECT|ISSTRING|IsBitSET|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSINGIF|NANIF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|NULLIF|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_PAIRS|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POLY_LENGTH|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUFFIXES|SUM|TAN|TITLE|TOARRAY|TOATOM|TOBOOLEAN|TOKENS|TONUMBER|TOOBJECT|TOSTRING|TRIM|TRUNC|TYPE|UPPER|WEEKDAY_MILLIS|WEEKDAY_STR)(?=\\s*\\()/i,keyword:/\\b(?:ALL|ALTER|ANALYZE|AS|ASC|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|CONNECT|CONTINUE|CORRELATE|COVER|CREATE|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FLATTEN|FOR|FORCE|FROM|FUNCTION|GRANT|GROUP|GSI|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LAST|LEFT|LET|LETTING|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NULL|NUMBER|OBJECT|OFFSET|ON|OPTION|ORDER|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROCEDURE|PUBLIC|RAW|REALM|REDUCE|RENAME|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|SATISFIES|SCHEMA|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TO|TRANSACTION|TRIGGER|TRUNCATE|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WITH|WORK|XOR)\\b/i,boolean:/\\b(?:TRUE|FALSE)\\b/i,number:/(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,operator:/[-+*\\/%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,punctuation:/[;[\\](),.{}:]/};"
            ]
        },
        "prism-n4js.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n4js = Prism.languages.extend('javascript', {",
                "\t// Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html",
                "\t'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('n4js', 'constant', {",
                "\t// Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations",
                "\t'annotation': {",
                "\t\tpattern: /@+\\w+/,",
                "\t\talias: 'operator'",
                "\t}",
                "});",
                "",
                "Prism.languages.n4jsd=Prism.languages.n4js;"
            ]
        },
        "prism-n4js.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n4js=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/}),Prism.languages.insertBefore(\"n4js\",\"constant\",{annotation:{pattern:/@+\\w+/,alias:\"operator\"}}),Prism.languages.n4jsd=Prism.languages.n4js;"
            ]
        },
        "prism-nand2tetris-hdl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['nand2tetris-hdl'] = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t'keyword': /\\b(?:CHIP|IN|OUT|PARTS|BUILTIN|CLOCKED)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'function': /[A-Za-z][A-Za-z0-9]*(?=\\()/,",
                "\t'number': /\\b\\d+\\b/,",
                "\t'operator': /=|\\.\\./,",
                "\t'punctuation': /[{}[\\];(),:]/",
                "};"
            ]
        },
        "prism-nand2tetris-hdl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"nand2tetris-hdl\"]={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,keyword:/\\b(?:CHIP|IN|OUT|PARTS|BUILTIN|CLOCKED)\\b/,boolean:/\\b(?:true|false)\\b/,function:/[A-Za-z][A-Za-z0-9]*(?=\\()/,number:/\\b\\d+\\b/,operator:/=|\\.\\./,punctuation:/[{}[\\];(),:]/};"
            ]
        },
        "prism-naniscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/;",
                "",
                "\tvar params = {",
                "\t\t'quoted-string': {",
                "\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'command-param-id': {",
                "\t\t\tpattern: /(\\s)\\w+:/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'command-param-value': [",
                "\t\t\t{",
                "\t\t\t\tpattern: expressionDef,",
                "\t\t\t\talias: 'selector',",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /([\\t ])\\S+/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'operator',",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\S(?:.*\\S)?/,",
                "\t\t\t\talias: 'operator',",
                "\t\t\t}",
                "\t\t]",
                "\t};",
                "",
                "\tPrism.languages.naniscript = {",
                "\t\t// ; ...",
                "\t\t'comment': {",
                "\t\t\tpattern: /^([\\t ]*);.*/m,",
                "\t\t\tlookbehind: true,",
                "\t\t},",
                "\t\t// > ...",
                "\t\t// Define is a control line starting with '>' followed by a word, a space and a text.",
                "\t\t'define': {",
                "\t\t\tpattern: /^>.+/m,",
                "\t\t\talias: 'tag',",
                "\t\t\tinside: {",
                "\t\t\t\t'value': {",
                "\t\t\t\t\tpattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'operator'",
                "\t\t\t\t},",
                "\t\t\t\t'key': {",
                "\t\t\t\t\tpattern: /(^>)\\w+/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t// # ...",
                "\t\t'label': {",
                "\t\t\tpattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'regex'",
                "\t\t},",
                "\t\t'command': {",
                "\t\t\tpattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function',",
                "\t\t\tinside: {",
                "\t\t\t\t'command-name': /^@\\w+/,",
                "\t\t\t\t'expression': {",
                "\t\t\t\t\tpattern: expressionDef,",
                "\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\talias: 'selector'",
                "\t\t\t\t},",
                "\t\t\t\t'command-params': {",
                "\t\t\t\t\tpattern: /\\s*\\S[\\s\\S]*/,",
                "\t\t\t\t\tinside: params",
                "\t\t\t\t},",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Generic is any line that doesn't start with operators: ;>#@",
                "\t\t'generic-text': {",
                "\t\t\tpattern: /(^[ \\t]*)[^#@>;\\s].*/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation',",
                "\t\t\tinside: {",
                "\t\t\t\t// \\{ ... \\} ... \\[ ... \\] ... \\\"",
                "\t\t\t\t'escaped-char': /\\\\[{}\\[\\]\"]/,",
                "\t\t\t\t'expression': {",
                "\t\t\t\t\tpattern: expressionDef,",
                "\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\talias: 'selector'",
                "\t\t\t\t},",
                "\t\t\t\t'inline-command': {",
                "\t\t\t\t\tpattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,",
                "\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\talias: 'function',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'command-params': {",
                "\t\t\t\t\t\t\tpattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: params",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'command-param-name': {",
                "\t\t\t\t\t\t\tpattern: /^(\\[[\\t ]*)\\w+/,",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'name',",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'start-stop-char': /[\\[\\]]/,",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "\tPrism.languages.nani = Prism.languages['naniscript'];",
                "",
                "\t/** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */",
                "",
                "\t/**",
                "\t * This hook is used to validate generic-text tokens for balanced brackets.",
                "\t * Mark token as bad-line when contains not balanced brackets: {},[]",
                "\t */",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\t/** @type {(Token | string)[]} */",
                "\t\tvar tokens = env.tokens;",
                "\t\ttokens.forEach(function (token) {",
                "\t\t\tif (typeof token !== \"string\" && token.type === 'generic-text') {",
                "\t\t\t\tvar content = getTextContent(token);",
                "\t\t\t\tif (!isBracketsBalanced(content)) {",
                "\t\t\t\t\ttoken.type = 'bad-line';",
                "\t\t\t\t\ttoken.content = content;",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t});",
                "\t});",
                "",
                "\t/**",
                "\t * @param {string} input",
                "\t * @returns {boolean}",
                "\t */",
                "\tfunction isBracketsBalanced(input) {",
                "\t\tvar brackets = \"[]{}\";",
                "\t\tvar stack = [];",
                "\t\tfor (var i = 0; i < input.length; i++) {",
                "\t\t\tvar bracket = input[i];",
                "\t\t\tvar bracketsIndex = brackets.indexOf(bracket);",
                "\t\t\tif (bracketsIndex !== -1) {",
                "\t\t\t\tif (bracketsIndex % 2 === 0) {",
                "\t\t\t\t\tstack.push(bracketsIndex + 1);",
                "\t\t\t\t} else if (stack.pop() !== bracketsIndex) {",
                "\t\t\t\t\treturn false;",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t\treturn stack.length === 0;",
                "\t};",
                "",
                "\t/**",
                "\t * @param {string | Token | (string | Token)[]} token",
                "\t * @returns {string}",
                "\t */",
                "\tfunction getTextContent(token) {",
                "\t\tif (typeof token === 'string') {",
                "\t\t\treturn token;",
                "\t\t} else if (Array.isArray(token)) {",
                "\t\t\treturn token.map(getTextContent).join('');",
                "\t\t} else {",
                "\t\t\treturn getTextContent(token.content);",
                "\t\t}",
                "\t}",
                "",
                "})(Prism);"
            ]
        },
        "prism-naniscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var a=/\\{[^\\r\\n\\[\\]{}]*\\}/,n={\"quoted-string\":{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,alias:\"operator\"},\"command-param-id\":{pattern:/(\\s)\\w+:/,lookbehind:!0,alias:\"property\"},\"command-param-value\":[{pattern:a,alias:\"selector\"},{pattern:/([\\t ])\\S+/,lookbehind:!0,greedy:!0,alias:\"operator\"},{pattern:/\\S(?:.*\\S)?/,alias:\"operator\"}]};function t(e){return\"string\"==typeof e?e:Array.isArray(e)?e.map(t).join(\"\"):t(e.content)}e.languages.naniscript={comment:{pattern:/^([\\t ]*);.*/m,lookbehind:!0},define:{pattern:/^>.+/m,alias:\"tag\",inside:{value:{pattern:/(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,lookbehind:!0,alias:\"operator\"},key:{pattern:/(^>)\\w+/,lookbehind:!0}}},label:{pattern:/^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,lookbehind:!0,alias:\"regex\"},command:{pattern:/^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,lookbehind:!0,alias:\"function\",inside:{\"command-name\":/^@\\w+/,expression:{pattern:a,greedy:!0,alias:\"selector\"},\"command-params\":{pattern:/\\s*\\S[\\s\\S]*/,inside:n}}},\"generic-text\":{pattern:/(^[ \\t]*)[^#@>;\\s].*/m,lookbehind:!0,alias:\"punctuation\",inside:{\"escaped-char\":/\\\\[{}\\[\\]\"]/,expression:{pattern:a,greedy:!0,alias:\"selector\"},\"inline-command\":{pattern:/\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,greedy:!0,alias:\"function\",inside:{\"command-params\":{pattern:/(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,lookbehind:!0,inside:n},\"command-param-name\":{pattern:/^(\\[[\\t ]*)\\w+/,lookbehind:!0,alias:\"name\"},\"start-stop-char\":/[\\[\\]]/}}}}},e.languages.nani=e.languages.naniscript,e.hooks.add(\"after-tokenize\",function(e){e.tokens.forEach(function(e){if(\"string\"!=typeof e&&\"generic-text\"===e.type){var a=t(e);(function(e){for(var a=[],n=0;n<e.length;n++){var t=e[n],r=\"[]{}\".indexOf(t);if(-1!==r)if(r%2==0)a.push(r+1);else if(a.pop()!==r)return!1}return 0===a.length})(a)||(e.type=\"bad-line\",e.content=a)}})})}(Prism);"
            ]
        },
        "prism-nasm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nasm = {",
                "\t'comment': /;.*$/m,",
                "\t'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t'label': {",
                "\t\tpattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'keyword': [",
                "\t\t/\\[?BITS (?:16|32|64)\\]?/,",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*)section\\s*[a-zA-Z.]+:?/im,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/(?:extern|global)[^;\\r\\n]*/i,",
                "\t\t/(?:CPU|FLOAT|DEFAULT).*$/m",
                "\t],",
                "\t'register': {",
                "\t\tpattern: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /(?:\\b|(?=\\$))(?:0[hx](?:\\.[\\da-f]+|[\\da-f]+(?:\\.[\\da-f]+)?)(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,",
                "\t'operator': /[\\[\\]*+\\-\\/%<>=&|$!]/",
                "};"
            ]
        },
        "prism-nasm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nasm={comment:/;.*$/m,string:/([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,label:{pattern:/(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,lookbehind:!0,alias:\"function\"},keyword:[/\\[?BITS (?:16|32|64)\\]?/,{pattern:/(^\\s*)section\\s*[a-zA-Z.]+:?/im,lookbehind:!0},/(?:extern|global)[^;\\r\\n]*/i,/(?:CPU|FLOAT|DEFAULT).*$/m],register:{pattern:/\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,alias:\"variable\"},number:/(?:\\b|(?=\\$))(?:0[hx](?:\\.[\\da-f]+|[\\da-f]+(?:\\.[\\da-f]+)?)(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,operator:/[\\[\\]*+\\-\\/%<>=&|$!]/};"
            ]
        },
        "prism-neon.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.neon = {",
                "\t'comment': {",
                "\t\tpattern: /#.*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'datetime': {",
                "\t\tpattern: /(^|[[{(=:,\\s])\\d\\d\\d\\d-\\d\\d?-\\d\\d?(?:(?:[Tt]| +)\\d\\d?:\\d\\d:\\d\\d(?:\\.\\d*)? *(?:Z|[-+]\\d\\d?(?::?\\d\\d)?)?)?(?=$|[\\]}),\\s])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'number'",
                "\t},",
                "\t'key': {",
                "\t\tpattern: /(^|[[{(,\\s])[^,:=[\\]{}()'\"\\s]+(?=\\s*:(?:$|[\\]}),\\s])|\\s*=)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'atrule'",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /(^|[[{(=:,\\s])[+-]?(?:0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:[eE][+-]?\\d+)?)(?=$|[\\]}),:=\\s])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'boolean': {",
                "\t\tpattern: /(^|[[{(=:,\\s])(?:true|false|yes|no)(?=$|[\\]}),:=\\s])/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'null': {",
                "\t\tpattern: /(^|[[{(=:,\\s])(?:null)(?=$|[\\]}),:=\\s])/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(^|[[{(=:,\\s])(?:('''|\"\"\")\\r?\\n(?:(?:[^\\r\\n]|\\r?\\n(?![\\t ]*\\2))*\\r?\\n)?[\\t ]*\\2|'[^'\\r\\n]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'literal': {",
                "\t\tpattern: /(^|[[{(=:,\\s])(?:[^#\"\\',:=[\\]{}()\\s`-]|[:-][^\"\\',=[\\]{}()\\s])(?:[^,:=\\]})(\\s]|:(?![\\s,\\]})]|$)|[ \\t]+[^#,:=\\]})(\\s])*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string',",
                "\t},",
                "\t'punctuation': /[,:=[\\]{}()-]/,",
                "};",
                ""
            ]
        },
        "prism-neon.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.neon={comment:{pattern:/#.*/,greedy:!0},datetime:{pattern:/(^|[[{(=:,\\s])\\d\\d\\d\\d-\\d\\d?-\\d\\d?(?:(?:[Tt]| +)\\d\\d?:\\d\\d:\\d\\d(?:\\.\\d*)? *(?:Z|[-+]\\d\\d?(?::?\\d\\d)?)?)?(?=$|[\\]}),\\s])/,lookbehind:!0,alias:\"number\"},key:{pattern:/(^|[[{(,\\s])[^,:=[\\]{}()'\"\\s]+(?=\\s*:(?:$|[\\]}),\\s])|\\s*=)/,lookbehind:!0,alias:\"atrule\"},number:{pattern:/(^|[[{(=:,\\s])[+-]?(?:0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:[eE][+-]?\\d+)?)(?=$|[\\]}),:=\\s])/,lookbehind:!0},boolean:{pattern:/(^|[[{(=:,\\s])(?:true|false|yes|no)(?=$|[\\]}),:=\\s])/i,lookbehind:!0},null:{pattern:/(^|[[{(=:,\\s])(?:null)(?=$|[\\]}),:=\\s])/i,lookbehind:!0,alias:\"keyword\"},string:{pattern:/(^|[[{(=:,\\s])(?:('''|\"\"\")\\r?\\n(?:(?:[^\\r\\n]|\\r?\\n(?![\\t ]*\\2))*\\r?\\n)?[\\t ]*\\2|'[^'\\r\\n]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/,lookbehind:!0,greedy:!0},literal:{pattern:/(^|[[{(=:,\\s])(?:[^#\"\\',:=[\\]{}()\\s`-]|[:-][^\"\\',=[\\]{}()\\s])(?:[^,:=\\]})(\\s]|:(?![\\s,\\]})]|$)|[ \\t]+[^#,:=\\]})(\\s])*/,lookbehind:!0,alias:\"string\"},punctuation:/[,:=[\\]{}()-]/};"
            ]
        },
        "prism-nginx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nginx = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\"{\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types|ssl_session_tickets|ssl_stapling|ssl_stapling_verify|ssl_ecdh_curve|ssl_trusted_certificate|more_set_headers|ssl_early_data)\\b/i",
                "});",
                "",
                "Prism.languages.insertBefore('nginx', 'keyword', {",
                "\t'variable': /\\$[a-z_]+/i",
                "});"
            ]
        },
        "prism-nginx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nginx=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\"{\\\\])#.*/,lookbehind:!0},keyword:/\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types|ssl_session_tickets|ssl_stapling|ssl_stapling_verify|ssl_ecdh_curve|ssl_trusted_certificate|more_set_headers|ssl_early_data)\\b/i}),Prism.languages.insertBefore(\"nginx\",\"keyword\",{variable:/\\$[a-z_]+/i});"
            ]
        },
        "prism-nim.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nim = {",
                "\t'comment': /#.*/,",
                "\t// Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)",
                "\t// Character literals are handled specifically to prevent issues with numeric type suffixes",
                "\t'string': {",
                "\t\tpattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// The negative look ahead prevents wrong highlighting of the .. operator",
                "\t'number': /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,",
                "\t'keyword': /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,",
                "\t'function': {",
                "\t\tpattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,",
                "\t\tinside: {",
                "\t\t\t'operator': /\\*$/",
                "\t\t}",
                "\t},",
                "\t// We don't want to highlight operators inside backticks",
                "\t'ignore': {",
                "\t\tpattern: /`[^`\\r\\n]+`/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /`/",
                "\t\t}",
                "\t},",
                "\t'operator': {",
                "\t\t// Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)",
                "\t\t// but allow the slice operator .. to take precedence over them",
                "\t\t// One can define his own operators in Nim so all combination of operators might be an operator.",
                "\t\tpattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/",
                "};"
            ]
        },
        "prism-nim.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nim={comment:/#.*/,string:{pattern:/(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,greedy:!0},number:/\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,keyword:/\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,function:{pattern:/(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,inside:{operator:/\\*$/}},ignore:{pattern:/`[^`\\r\\n]+`/,inside:{punctuation:/`/}},operator:{pattern:/(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,lookbehind:!0},punctuation:/[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/};"
            ]
        },
        "prism-nix.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nix = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\t// The lookbehind ensures the ${} is not preceded by \\ or ''",
                "\t\t\t\tpattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^{}]|\\{[^}]*\\})*\\}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'antiquotation': {",
                "\t\t\t\t\t\tpattern: /^\\$(?=\\{)/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'url': [",
                "\t\t/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,",
                "\t\t{",
                "\t\t\tpattern: /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'antiquotation': {",
                "\t\tpattern: /\\$(?=\\{)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b\\d+\\b/,",
                "\t'keyword': /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,",
                "\t'function': /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'operator': /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,",
                "\t'punctuation': /[{}()[\\].,:;]/",
                "};",
                "",
                "Prism.languages.nix.string.inside.interpolation.inside.rest = Prism.languages.nix;"
            ]
        },
        "prism-nix.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nix={comment:/\\/\\*[\\s\\S]*?\\*\\/|#.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,greedy:!0,inside:{interpolation:{pattern:/(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^{}]|\\{[^}]*\\})*\\}/,lookbehind:!0,inside:{antiquotation:{pattern:/^\\$(?=\\{)/,alias:\"variable\"}}}}},url:[/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,{pattern:/([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,lookbehind:!0}],antiquotation:{pattern:/\\$(?=\\{)/,alias:\"variable\"},number:/\\b\\d+\\b/,keyword:/\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,function:/\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,boolean:/\\b(?:true|false)\\b/,operator:/[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,punctuation:/[{}()[\\].,:;]/},Prism.languages.nix.string.inside.interpolation.inside.rest=Prism.languages.nix;"
            ]
        },
        "prism-nsis.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Jan T. Sott (http://github.com/idleberg)",
                " *",
                " * Includes all commands and plug-ins shipped with NSIS 3.02",
                " */",
                " Prism.languages.nsis = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t 'property': /\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,",
                "\t'constant': /\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,",
                "\t'variable': /\\$\\w+/i,",
                "\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t'operator': /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,",
                "\t'punctuation': /[{}[\\];(),.:]/,",
                "\t'important': {",
                "\t\tpattern: /(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/mi,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-nsis.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nsis={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,lookbehind:!0},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:{pattern:/(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,lookbehind:!0},property:/\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,constant:/\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,variable:/\\$\\w+/i,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,punctuation:/[{}[\\];(),.:]/,important:{pattern:/(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/im,lookbehind:!0}};"
            ]
        },
        "prism-objectivec.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.objectivec = Prism.languages.extend('c', {",
                "\t'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,",
                "\t'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,",
                "\t'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/",
                "});",
                "",
                "delete Prism.languages.objectivec['class-name'];",
                "",
                "Prism.languages.objc = Prism.languages.objectivec;"
            ]
        },
        "prism-objectivec.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.objectivec=Prism.languages.extend(\"c\",{string:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,keyword:/\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,operator:/-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/}),delete Prism.languages.objectivec[\"class-name\"],Prism.languages.objc=Prism.languages.objectivec;"
            ]
        },
        "prism-ocaml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ocaml = {",
                "\t'comment': /\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,",
                "\t'directive': {",
                "\t\tpattern: /\\B#\\w+/,",
                "\t\talias: 'important'",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /\\B~\\w+/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'type-variable': {",
                "\t\tpattern: /\\B'\\w+/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'variant': {",
                "\t\tpattern: /`\\w+/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'module': {",
                "\t\tpattern: /\\b[A-Z]\\w+/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t// For the list of keywords and operators,",
                "\t// see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84",
                "\t'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t// Custom operators are allowed",
                "\t'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,",
                "\t'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/",
                "};"
            ]
        },
        "prism-ocaml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ocaml={comment:/\\(\\*[\\s\\S]*?\\*\\)/,string:[{pattern:/\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0},{pattern:/(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,greedy:!0}],number:/\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,directive:{pattern:/\\B#\\w+/,alias:\"important\"},label:{pattern:/\\B~\\w+/,alias:\"function\"},\"type-variable\":{pattern:/\\B'\\w+/,alias:\"function\"},variant:{pattern:/`\\w+/,alias:\"variable\"},module:{pattern:/\\b[A-Z]\\w+/,alias:\"variable\"},keyword:/\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,boolean:/\\b(?:false|true)\\b/,operator:/:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,punctuation:/[(){}\\[\\]|.,:;]|\\b_\\b/};"
            ]
        },
        "prism-opencl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t/* OpenCL kernel language */",
                "\tPrism.languages.opencl = Prism.languages.extend('c', {",
                "\t\t// Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)",
                "\t\t'keyword': /\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|auto|break|case|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\\b/,",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)",
                "\t\t// Math Constants: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/mathConstants.html",
                "\t\t// Macros and Limits: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/macroLimits.html",
                "\t\t'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[fuhl]{0,4}/i,",
                "\t\t'boolean': /\\b(?:false|true)\\b/,",
                "\t\t'constant-opencl-kernel': {",
                "\t\t\tpattern: /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF?|INFINITY|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|(?:UCHAR|USHRT|UINT|ULONG)_MAX|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN)\\b/,",
                "\t\t\talias: 'constant'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('opencl', 'class-name', {",
                "\t\t// https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/scalarDataTypes.html",
                "\t\t// https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/otherDataTypes.html",
                "\t\t'builtin-type': {",
                "\t\t\tpattern: /\\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\\b/,",
                "\t\t\talias: 'keyword'",
                "\t\t}",
                "\t});",
                "",
                "\tvar attributes = {",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)",
                "\t\t'type-opencl-host': {",
                "\t\t\tpattern: /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'boolean-opencl-host': {",
                "\t\t\tpattern: /\\bCL_(?:TRUE|FALSE)\\b/,",
                "\t\t\talias: 'boolean'",
                "\t\t},",
                "\t\t// Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)",
                "\t\t'constant-opencl-host': {",
                "\t\t\tpattern: /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,",
                "\t\t\talias: 'constant'",
                "\t\t},",
                "\t\t// Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)",
                "\t\t'function-opencl-host': {",
                "\t\t\tpattern: /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,",
                "\t\t\talias: 'function'",
                "\t\t}",
                "\t};",
                "",
                "\t/* OpenCL host API */",
                "\tPrism.languages.insertBefore('c', 'keyword', attributes);",
                "",
                "\t// C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h",
                "\tif (Prism.languages.cpp) {",
                "\t\t// Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html",
                "\t\tattributes['type-opencl-host-cpp'] = {",
                "\t\t\tpattern: /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,",
                "\t\t\talias: 'keyword'",
                "\t\t};",
                "",
                "\t\tPrism.languages.insertBefore('cpp', 'keyword', attributes);",
                "\t}",
                "}(Prism));"
            ]
        },
        "prism-opencl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(E){E.languages.opencl=E.languages.extend(\"c\",{keyword:/\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|auto|break|case|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\\b/,number:/(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[fuhl]{0,4}/i,boolean:/\\b(?:false|true)\\b/,\"constant-opencl-kernel\":{pattern:/\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF?|INFINITY|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|(?:UCHAR|USHRT|UINT|ULONG)_MAX|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN)\\b/,alias:\"constant\"}}),E.languages.insertBefore(\"opencl\",\"class-name\",{\"builtin-type\":{pattern:/\\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\\b/,alias:\"keyword\"}});var _={\"type-opencl-host\":{pattern:/\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,alias:\"keyword\"},\"boolean-opencl-host\":{pattern:/\\bCL_(?:TRUE|FALSE)\\b/,alias:\"boolean\"},\"constant-opencl-host\":{pattern:/\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,alias:\"constant\"},\"function-opencl-host\":{pattern:/\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,alias:\"function\"}};E.languages.insertBefore(\"c\",\"keyword\",_),E.languages.cpp&&(_[\"type-opencl-host-cpp\"]={pattern:/\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,alias:\"keyword\"},E.languages.insertBefore(\"cpp\",\"keyword\",_))}(Prism);"
            ]
        },
        "prism-oz.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.oz = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|%.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'atom': {",
                "\t\tpattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,",
                "\t\tgreedy: true,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'keyword': /\\$|\\[\\]|\\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,",
                "\t'function': [",
                "\t\t/\\b[a-z][A-Za-z\\d]*(?=\\()/,",
                "\t\t{",
                "\t\t\tpattern: /(\\{)[A-Z][A-Za-z\\d]*\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0[bx][\\da-f]+|\\d+(?:\\.\\d*)?(?:e~?\\d+)?)\\b|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,",
                "\t'variable': /\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,",
                "\t'attr-name': /\\w+(?=:)/,",
                "\t'operator': /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,",
                "\t'punctuation': /[\\[\\](){}.:;?]/",
                "};"
            ]
        },
        "prism-oz.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.oz={comment:/\\/\\*[\\s\\S]*?\\*\\/|%.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,greedy:!0},atom:{pattern:/'(?:[^'\\\\]|\\\\[\\s\\S])*'/,greedy:!0,alias:\"builtin\"},keyword:/\\$|\\[\\]|\\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,function:[/\\b[a-z][A-Za-z\\d]*(?=\\()/,{pattern:/(\\{)[A-Z][A-Za-z\\d]*\\b/,lookbehind:!0}],number:/\\b(?:0[bx][\\da-f]+|\\d+(?:\\.\\d*)?(?:e~?\\d+)?)\\b|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,variable:/\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,\"attr-name\":/\\w+(?=:)/,operator:/:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,punctuation:/[\\[\\](){}.:;?]/};"
            ]
        },
        "prism-parigp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parigp = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// PARI/GP does not care about white spaces at all",
                "\t// so let's process the keywords to build an appropriate regexp",
                "\t// (e.g. \"b *r *e *a *k\", etc.)",
                "\t'keyword': (function () {",
                "\t\tvar keywords = [",
                "\t\t\t'breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x',",
                "\t\t\t'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime',",
                "\t\t\t'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if',",
                "\t\t\t'local', 'my', 'next', 'return', 'until', 'while'",
                "\t\t];",
                "\t\tkeywords = keywords.map(function (keyword) {",
                "\t\t\treturn keyword.split('').join(' *');",
                "\t\t}).join('|');",
                "\t\treturn RegExp('\\\\b(?:' + keywords + ')\\\\b');",
                "\t}()),",
                "\t'function': /\\w(?:[\\w ]*\\w)?(?= *\\()/,",
                "\t'number': {",
                "\t\t// The lookbehind and the negative lookahead prevent from breaking the .. operator",
                "\t\tpattern: /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,",
                "\t'punctuation': /[\\[\\]{}().,:;|]/",
                "};"
            ]
        },
        "prism-parigp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parigp={comment:/\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,greedy:!0},keyword:function(){var r=[\"breakpoint\",\"break\",\"dbg_down\",\"dbg_err\",\"dbg_up\",\"dbg_x\",\"forcomposite\",\"fordiv\",\"forell\",\"forpart\",\"forprime\",\"forstep\",\"forsubgroup\",\"forvec\",\"for\",\"iferr\",\"if\",\"local\",\"my\",\"next\",\"return\",\"until\",\"while\"];return r=r.map(function(r){return r.split(\"\").join(\" *\")}).join(\"|\"),RegExp(\"\\\\b(?:\"+r+\")\\\\b\")}(),function:/\\w(?:[\\w ]*\\w)?(?= *\\()/,number:{pattern:/((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,lookbehind:!0},operator:/\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,punctuation:/[\\[\\]{}().,:;|]/};"
            ]
        },
        "prism-parser.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar parser = Prism.languages.parser = Prism.languages.extend('markup', {",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\.|:+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'function': {",
                "\t\t\tpattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': {",
                "\t\t\t\t\tpattern: /(^@)(?:GET_|SET_)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\.|:+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'escape': {",
                "\t\t\tpattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t'punctuation': /[\\[\\](){};]/",
                "\t});",
                "",
                "\tparser = Prism.languages.insertBefore('parser', 'keyword', {",
                "\t\t'parser-comment': {",
                "\t\t\tpattern: /(\\s)#.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'expression': {",
                "\t\t\t// Allow for 3 levels of depth",
                "\t\t\tpattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,",
                "\t\t\tgreedy: true,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'keyword': parser.keyword,",
                "\t\t\t\t'variable': parser.variable,",
                "\t\t\t\t'function': parser.function,",
                "\t\t\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t\t\t'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,",
                "\t\t\t\t'escape': parser.escape,",
                "\t\t\t\t'operator': /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,",
                "\t\t\t\t'punctuation': parser.punctuation",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tparser = Prism.languages.insertBefore('inside', 'punctuation', {",
                "\t\t'expression': parser.expression,",
                "\t\t'keyword': parser.keyword,",
                "\t\t'variable': parser.variable,",
                "\t\t'function': parser.function,",
                "\t\t'escape': parser.escape,",
                "\t\t'parser-punctuation': {",
                "\t\t\tpattern: parser.punctuation,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t}, parser['tag'].inside['attr-value']);",
                "",
                "}(Prism));"
            ]
        },
        "prism-parser.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n=e.languages.parser=e.languages.extend(\"markup\",{keyword:{pattern:/(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,lookbehind:!0},variable:{pattern:/(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{punctuation:/\\.|:+/}},function:{pattern:/(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{keyword:{pattern:/(^@)(?:GET_|SET_)/,lookbehind:!0},punctuation:/\\.|:+/}},escape:{pattern:/\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,alias:\"builtin\"},punctuation:/[\\[\\](){};]/});n=e.languages.insertBefore(\"parser\",\"keyword\",{\"parser-comment\":{pattern:/(\\s)#.*/,lookbehind:!0,alias:\"comment\"},expression:{pattern:/(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,greedy:!0,lookbehind:!0,inside:{string:{pattern:/(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,lookbehind:!0},keyword:n.keyword,variable:n.variable,function:n.function,boolean:/\\b(?:true|false)\\b/,number:/\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,escape:n.escape,operator:/[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,punctuation:n.punctuation}}}),n=e.languages.insertBefore(\"inside\",\"punctuation\",{expression:n.expression,keyword:n.keyword,variable:n.variable,function:n.function,escape:n.escape,\"parser-punctuation\":{pattern:n.punctuation,alias:\"punctuation\"}},n.tag.inside[\"attr-value\"])}(Prism);"
            ]
        },
        "prism-pascal.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Based on Free Pascal",
                "",
                "/* TODO",
                "\tSupport inline asm ?",
                "*/",
                "",
                "Prism.languages.pascal = {",
                "\t'comment': [",
                "\t\t/\\(\\*[\\s\\S]+?\\*\\)/,",
                "\t\t/\\{[\\s\\S]+?\\}/,",
                "\t\t/\\/\\/.*/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\t// Turbo Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Free Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Object Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Modifiers",
                "\t\t\tpattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'number': [",
                "\t\t// Hexadecimal, octal and binary",
                "\t\t/(?:[&%]\\d+|\\$[a-f\\d]+)/i,",
                "\t\t// Decimal",
                "\t\t/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i",
                "\t],",
                "\t'operator': [",
                "\t\t/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,",
                "\t\t{",
                "\t\t\tpattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.]/",
                "};",
                "",
                "Prism.languages.objectpascal = Prism.languages.pascal;"
            ]
        },
        "prism-pascal.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.pascal={comment:[/\\(\\*[\\s\\S]+?\\*\\)/,/\\{[\\s\\S]+?\\}/,/\\/\\/.*/],string:{pattern:/(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,lookbehind:!0}],number:[/(?:[&%]\\d+|\\$[a-f\\d]+)/i,/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],operator:[/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,{pattern:/(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,lookbehind:!0}],punctuation:/\\(\\.|\\.\\)|[()\\[\\]:;,.]/},Prism.languages.objectpascal=Prism.languages.pascal;"
            ]
        },
        "prism-pascaligo.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t// Pascaligo is a layer 2 smart contract language for the tezos blockchain",
                "",
                "\tvar braces = /\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\)/.source;",
                "\tvar type = /(?:\\w+(?:<braces>)?|<braces>)/.source.replace(/<braces>/g, function () { return braces; });",
                "",
                "\tvar pascaligo = Prism.languages.pascaligo = {",
                "\t\t'comment': /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,",
                "\t\t'string': {",
                "\t\t\tpattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/(\\btype\\s+\\w+\\s+is\\s+)<type>/.source.replace(/<type>/g, function () { return type; }), 'i'),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/<type>(?=\\s+is\\b)/.source.replace(/<type>/g, function () { return type; }), 'i'),",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/(:\\s*)<type>/.source.replace(/<type>/g, function () { return type; })),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'boolean': {",
                "\t\t\tpattern: /(^|[^&])\\b(?:True|False)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'builtin': {",
                "\t\t\tpattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': /\\w+(?=\\s*\\()/i,",
                "\t\t'number': [",
                "\t\t\t// Hexadecimal, octal and binary",
                "\t\t\t/%[01]+|&[0-7]+|\\$[a-f\\d]+/i,",
                "\t\t\t// Decimal",
                "\t\t\t/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i",
                "\t\t],",
                "\t\t'operator': /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,",
                "\t\t'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/",
                "\t};",
                "",
                "\tvar classNameInside = ['comment', 'keyword', 'builtin', 'operator', 'punctuation'].reduce(function (accum, key) {",
                "\t\taccum[key] = pascaligo[key];",
                "\t\treturn accum;",
                "\t}, {});",
                "",
                "\tpascaligo[\"class-name\"].forEach(function (p) {",
                "\t\tp.inside = classNameInside;",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-pascaligo.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n=\"(?:\\\\w+(?:<braces>)?|<braces>)\".replace(/<braces>/g,function(){return\"\\\\((?:[^()]|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))*\\\\)\"}),t=e.languages.pascaligo={comment:/\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,string:{pattern:/([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,greedy:!0},\"class-name\":[{pattern:RegExp(\"(\\\\btype\\\\s+\\\\w+\\\\s+is\\\\s+)<type>\".replace(/<type>/g,function(){return n}),\"i\"),lookbehind:!0,inside:null},{pattern:RegExp(\"<type>(?=\\\\s+is\\\\b)\".replace(/<type>/g,function(){return n}),\"i\"),inside:null},{pattern:RegExp(\"(:\\\\s*)<type>\".replace(/<type>/g,function(){return n})),lookbehind:!0,inside:null}],keyword:{pattern:/(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,lookbehind:!0},boolean:{pattern:/(^|[^&])\\b(?:True|False)\\b/i,lookbehind:!0},builtin:{pattern:/(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,lookbehind:!0},function:/\\w+(?=\\s*\\()/i,number:[/%[01]+|&[0-7]+|\\$[a-f\\d]+/i,/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i],operator:/->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,punctuation:/\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/},i=[\"comment\",\"keyword\",\"builtin\",\"operator\",\"punctuation\"].reduce(function(e,n){return e[n]=t[n],e},{});t[\"class-name\"].forEach(function(e){e.inside=i})}(Prism);"
            ]
        },
        "prism-pcaxis.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.pcaxis = {",
                "\t'string': /\"[^\"]*\"/,",
                "\t'keyword': {",
                "\t\tpattern: /((?:^|;)\\s*)[-A-Z\\d]+(?:\\s*\\[[-\\w]+\\])?(?:\\s*\\(\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\))?(?=\\s*=)/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^[-A-Z\\d]+/,",
                "\t\t\t'language': {",
                "\t\t\t\tpattern: /^(\\s*)\\[[-\\w]+\\]/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^\\[|\\]$/,",
                "\t\t\t\t\t'property': /[-\\w]+/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'sub-key': {",
                "\t\t\t\tpattern: /^(\\s*)\\S[\\s\\S]*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'parameter': {",
                "\t\t\t\t\t\tpattern: /\"[^\"]*\"/,",
                "\t\t\t\t\t\talias: 'property'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'punctuation': /^\\(|\\)$|,/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'operator': /=/,",
                "\t'tlist': {",
                "\t\tpattern: /TLIST\\s*\\(\\s*\\w+(?:(?:\\s*,\\s*\"[^\"]*\")+|\\s*,\\s*\"[^\"]*\"-\"[^\"]*\")?\\s*\\)/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'function': /^TLIST/,",
                "\t\t\t'property': {",
                "\t\t\t\tpattern: /^(\\s*\\(\\s*)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'string': /\"[^\"]*\"/,",
                "\t\t\t'punctuation': /[(),]/,",
                "\t\t\t'operator': /-/",
                "\t\t}",
                "\t},",
                "\t'punctuation': /[;,]/,",
                "\t'number': {",
                "\t\tpattern: /(^|\\s)\\d+(?:\\.\\d+)?(?!\\S)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'boolean': /YES|NO/,",
                "};",
                "",
                "Prism.languages.px = Prism.languages.pcaxis;"
            ]
        },
        "prism-pcaxis.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.pcaxis={string:/\"[^\"]*\"/,keyword:{pattern:/((?:^|;)\\s*)[-A-Z\\d]+(?:\\s*\\[[-\\w]+\\])?(?:\\s*\\(\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\))?(?=\\s*=)/,lookbehind:!0,greedy:!0,inside:{keyword:/^[-A-Z\\d]+/,language:{pattern:/^(\\s*)\\[[-\\w]+\\]/,lookbehind:!0,inside:{punctuation:/^\\[|\\]$/,property:/[-\\w]+/}},\"sub-key\":{pattern:/^(\\s*)\\S[\\s\\S]*/,lookbehind:!0,inside:{parameter:{pattern:/\"[^\"]*\"/,alias:\"property\"},punctuation:/^\\(|\\)$|,/}}}},operator:/=/,tlist:{pattern:/TLIST\\s*\\(\\s*\\w+(?:(?:\\s*,\\s*\"[^\"]*\")+|\\s*,\\s*\"[^\"]*\"-\"[^\"]*\")?\\s*\\)/,greedy:!0,inside:{function:/^TLIST/,property:{pattern:/^(\\s*\\(\\s*)\\w+/,lookbehind:!0},string:/\"[^\"]*\"/,punctuation:/[(),]/,operator:/-/}},punctuation:/[;,]/,number:{pattern:/(^|\\s)\\d+(?:\\.\\d+)?(?!\\S)/,lookbehind:!0},boolean:/YES|NO/},Prism.languages.px=Prism.languages.pcaxis;"
            ]
        },
        "prism-peoplecode.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.peoplecode = {",
                "\t'comment': RegExp([",
                "\t\t// C-style multiline comments",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//.source,",
                "\t\t// REM comments",
                "\t\t/\\bREM[^;]*;/.source,",
                "\t\t// Nested <* *> comments",
                "\t\t/<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source,",
                "\t\t// /+ +/ comments",
                "\t\t/\\/\\+[\\s\\S]*?\\+\\//.source,",
                "\t].join(\"|\")),",
                "\t'string': {",
                "\t\tpattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /%\\w+/,",
                "\t'function-definition': {",
                "\t\tpattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /:/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|implements|import|instance|if|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,",
                "\t'operator-keyword': {",
                "\t\tpattern: /\\b(?:and|not|or)\\b/i,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'function': /[_a-z]\\w*(?=\\s*\\()/i,",
                "",
                "\t'boolean': /\\b(?:false|true)\\b/i,",
                "\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,",
                "\t'operator': /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,",
                "\t'punctuation': /[:.;,()[\\]]/",
                "};",
                "",
                "Prism.languages.pcode = Prism.languages.peoplecode;"
            ]
        },
        "prism-peoplecode.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.peoplecode={comment:RegExp([\"/\\\\*[^]*?\\\\*/\",\"\\\\bREM[^;]*;\",\"<\\\\*(?:[^<*]|\\\\*(?!>)|<(?!\\\\*)|<\\\\*(?:(?!\\\\*>)[^])*\\\\*>)*\\\\*>\",\"/\\\\+[^]*?\\\\+/\"].join(\"|\")),string:{pattern:/'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,greedy:!0},variable:/%\\w+/,\"function-definition\":{pattern:/((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,lookbehind:!0,alias:\"function\"},\"class-name\":{pattern:/((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,lookbehind:!0,inside:{punctuation:/:/}},keyword:/\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|implements|import|instance|if|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\"operator-keyword\":{pattern:/\\b(?:and|not|or)\\b/i,alias:\"operator\"},function:/[_a-z]\\w*(?=\\s*\\()/i,boolean:/\\b(?:false|true)\\b/i,number:/\\b\\d+(?:\\.\\d+)?\\b/,operator:/<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,punctuation:/[:.;,()[\\]]/},Prism.languages.pcode=Prism.languages.peoplecode;"
            ]
        },
        "prism-perl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.perl = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\t// POD",
                "\t\t\tpattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\$])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t// TODO Could be nice to handle Heredoc too.",
                "\t'string': [",
                "\t\t// q/.../",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// q a...a",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// q(...)",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// q{...}",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// q[...]",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// q<...>",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// \"...\", `...`",
                "\t\t{",
                "\t\t\tpattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// '...'",
                "\t\t// FIXME Multi-line single-quoted strings are not supported as they would break variables containing '",
                "\t\t{",
                "\t\t\tpattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'regex': [",
                "\t\t// m/.../",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// m a...a",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// m(...)",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// m{...}",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// m[...]",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// m<...>",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// The lookbehinds prevent -s from breaking",
                "\t\t// FIXME We don't handle change of separator like s(...)[...]",
                "\t\t// s/.../.../",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// s a...a...a",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// s(...)(...)",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// s{...}{...}",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// s[...][...]",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// s<...><...>",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// /.../",
                "\t\t// The look-ahead tries to prevent two divisions on",
                "\t\t// the same line from being highlighted as regex.",
                "\t\t// This does not support multi-line regex.",
                "\t\t{",
                "\t\t\tpattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "",
                "\t// FIXME Not sure about the handling of ::, ', and #",
                "\t'variable': [",
                "\t\t// ${^POSTMATCH}",
                "\t\t/[&*$@%]\\{\\^[A-Z]+\\}/,",
                "\t\t// $^V",
                "\t\t/[&*$@%]\\^[A-Z_]/,",
                "\t\t// ${...}",
                "\t\t/[&*$@%]#?(?=\\{)/,",
                "\t\t// $foo",
                "\t\t/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i,",
                "\t\t// $1",
                "\t\t/[&*$@%]\\d+/,",
                "\t\t// $_, @_, %!",
                "\t\t// The negative lookahead prevents from breaking the %= operator",
                "\t\t/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/",
                "\t],",
                "\t'filehandle': {",
                "\t\t// <>, <FOO>, _",
                "\t\tpattern: /<(?![<=])\\S*>|\\b_\\b/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'vstring': {",
                "\t\t// v1.2, 1.2.3",
                "\t\tpattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /sub [a-z0-9_]+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /sub/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,",
                "\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,",
                "\t'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,",
                "\t'punctuation': /[{}[\\];(),:]/",
                "};"
            ]
        },
        "prism-perl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.perl={comment:[{pattern:/(^\\s*)=\\w[\\s\\S]*?=cut.*/m,lookbehind:!0},{pattern:/(^|[^\\\\$])#.*/,lookbehind:!0}],string:[{pattern:/\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,greedy:!0},{pattern:/(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/'(?:[^'\\\\\\r\\n]|\\\\.)*'/,greedy:!0}],regex:[{pattern:/\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,greedy:!0}],variable:[/[&*$@%]\\{\\^[A-Z]+\\}/,/[&*$@%]\\^[A-Z_]/,/[&*$@%]#?(?=\\{)/,/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i,/[&*$@%]\\d+/,/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],filehandle:{pattern:/<(?![<=])\\S*>|\\b_\\b/,alias:\"symbol\"},vstring:{pattern:/v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,alias:\"string\"},function:{pattern:/sub [a-z0-9_]+/i,inside:{keyword:/sub/}},keyword:/\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,operator:/-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,punctuation:/[{}[\\];(),:]/};"
            ]
        },
        "prism-php-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.insertBefore('php', 'variable', {",
                "\t'this': /\\$this\\b/,",
                "\t'global': /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,",
                "\t'scope': {",
                "\t\tpattern: /\\b[\\w\\\\]+::/,",
                "\t\tinside: {",
                "\t\t\tkeyword: /static|self|parent/,",
                "\t\t\tpunctuation: /::|\\\\/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-php-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.insertBefore(\"php\",\"variable\",{this:/\\$this\\b/,global:/\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,scope:{pattern:/\\b[\\w\\\\]+::/,inside:{keyword:/static|self|parent/,punctuation:/::|\\\\/}}});"
            ]
        },
        "prism-php.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/",
                " * Modified by Miles Johnson: http://milesj.me",
                " * Rewritten by Tom Pavelec",
                " *",
                " * Supports PHP 5.3 - 8.0",
                " */",
                "(function (Prism) {",
                "\tvar comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;",
                "\tvar constant = [",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:false|true)\\b/i,",
                "\t\t\talias: 'boolean'",
                "\t\t},",
                "\t\t/\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/,",
                "\t\t/\\b(?:null)\\b/i,",
                "\t];",
                "\tvar number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;",
                "\tvar operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;",
                "\tvar punctuation = /[{}\\[\\](),:;]/;",
                "",
                "\tPrism.languages.php = {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'comment': comment,",
                "\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,",
                "\t\t'package': {",
                "\t\t\tpattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'keyword': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,",
                "\t\t\t\talias: 'type-casting',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,",
                "\t\t\t\talias: 'type-hint',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /([(,?]\\s*[a-z0-9_|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,",
                "\t\t\t\talias: 'type-hint',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,",
                "\t\t\t\talias: 'return-type',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[a-z0-9_|]\\|\\s*)(?:null|false)\\b/i,",
                "\t\t\t\talias: 'return-type',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,",
                "\t\t\t\talias: 'type-declaration',",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|\\s*)(?:null|false)\\b/i,",
                "\t\t\t\talias: 'type-declaration',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b(?:parent|self|static)(?=\\s*::)/i,",
                "\t\t\t\talias: 'static-context',",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t/\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i",
                "\t\t],",
                "\t\t'argument-name': /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,",
                "\t\t\t\talias: 'class-name-fully-qualified',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,",
                "\t\t\t\talias: 'class-name-fully-qualified',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,",
                "\t\t\t\talias: 'class-name-fully-qualified',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,",
                "\t\t\t\talias: 'type-declaration',",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,",
                "\t\t\t\talias: ['class-name-fully-qualified', 'type-declaration'],",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*::)/i,",
                "\t\t\t\talias: 'static-context',",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,",
                "\t\t\t\talias: ['class-name-fully-qualified', 'static-context'],",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,",
                "\t\t\t\talias: 'type-hint',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,",
                "\t\t\t\talias: ['class-name-fully-qualified', 'type-hint'],",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,",
                "\t\t\t\talias: 'return-type',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,",
                "\t\t\t\talias: ['class-name-fully-qualified', 'return-type'],",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'constant': constant,",
                "\t\t'function': /\\w+\\s*(?=\\()/,",
                "\t\t'property': {",
                "\t\t\tpattern: /(->)[\\w]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': number,",
                "\t\t'operator': operator,",
                "\t\t'punctuation': punctuation",
                "\t};",
                "",
                "\tvar string_interpolation = {",
                "\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: Prism.languages.php",
                "\t};",
                "",
                "\tvar string = [",
                "\t\t{",
                "\t\t\tpattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,",
                "\t\t\talias: 'nowdoc-string',",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,",
                "\t\t\t\t\talias: 'symbol',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,",
                "\t\t\talias: 'heredoc-string',",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,",
                "\t\t\t\t\talias: 'symbol',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'interpolation': string_interpolation // See below",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,",
                "\t\t\talias: 'backtick-quoted-string',",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,",
                "\t\t\talias: 'single-quoted-string',",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\talias: 'double-quoted-string',",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': string_interpolation // See below",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.insertBefore('php', 'variable', {",
                "\t\t'string': string,",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('php', 'variable', {",
                "\t\t'attribute': {",
                "\t\t\tpattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/mi,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attribute-content': {",
                "\t\t\t\t\tpattern: /^(#\\[)[\\s\\S]+(?=]$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t// inside can appear subset of php",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'comment': comment,",
                "\t\t\t\t\t\t'string': string,",
                "\t\t\t\t\t\t'attribute-class-name': [",
                "\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\tpattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,",
                "\t\t\t\t\t\t\t\talias: 'class-name',",
                "\t\t\t\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\tpattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,",
                "\t\t\t\t\t\t\t\talias: [",
                "\t\t\t\t\t\t\t\t\t'class-name',",
                "\t\t\t\t\t\t\t\t\t'class-name-fully-qualified'",
                "\t\t\t\t\t\t\t\t],",
                "\t\t\t\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t\t\t'punctuation': /\\\\/",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t],",
                "\t\t\t\t\t\t'constant': constant,",
                "\t\t\t\t\t\t'number': number,",
                "\t\t\t\t\t\t'operator': operator,",
                "\t\t\t\t\t\t'punctuation': punctuation",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^#\\[|]$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t});",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tif (!/<\\?/.test(env.code)) {",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tvar phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/ig;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-php.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/,t=[{pattern:/\\b(?:false|true)\\b/i,alias:\"boolean\"},/\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/,/\\b(?:null)\\b/i],i=/\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,n=/<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/,s=/[{}\\[\\](),:;]/;a.languages.php={delimiter:{pattern:/\\?>$|^<\\?(?:php(?=\\s)|=)?/i,alias:\"important\"},comment:e,variable:/\\$+(?:\\w+\\b|(?={))/i,package:{pattern:/(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,lookbehind:!0,inside:{punctuation:/\\\\/}},keyword:[{pattern:/(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,alias:\"type-casting\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,alias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*[a-z0-9_|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,alias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?[a-z0-9_|]\\|\\s*)(?:null|false)\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,alias:\"type-declaration\",greedy:!0},{pattern:/(\\|\\s*)(?:null|false)\\b/i,alias:\"type-declaration\",greedy:!0,lookbehind:!0},{pattern:/\\b(?:parent|self|static)(?=\\s*::)/i,alias:\"static-context\",greedy:!0},/\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i],\"argument-name\":/\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\"class-name\":[{pattern:/(\\b(?:class|interface|extends|implements|trait|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,greedy:!0,lookbehind:!0},{pattern:/(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,greedy:!0,lookbehind:!0},{pattern:/\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,greedy:!0},{pattern:/(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,alias:\"class-name-fully-qualified\",greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,alias:\"class-name-fully-qualified\",greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,alias:\"class-name-fully-qualified\",greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/\\b[a-z_]\\w*(?=\\s*\\$)/i,alias:\"type-declaration\",greedy:!0},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,alias:[\"class-name-fully-qualified\",\"type-declaration\"],greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/\\b[a-z_]\\w*(?=\\s*::)/i,alias:\"static-context\",greedy:!0},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,alias:[\"class-name-fully-qualified\",\"static-context\"],greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,alias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,alias:[\"class-name-fully-qualified\",\"type-hint\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,alias:[\"class-name-fully-qualified\",\"return-type\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}}],constant:t,function:/\\w+\\s*(?=\\()/,property:{pattern:/(->)[\\w]+/,lookbehind:!0},number:i,operator:n,punctuation:s};var l={pattern:/{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,lookbehind:!0,inside:a.languages.php},r=[{pattern:/<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,alias:\"nowdoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<'?|[';]$/}}}},{pattern:/<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,alias:\"heredoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:l}},{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`])*`/,alias:\"backtick-quoted-string\",greedy:!0},{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,alias:\"single-quoted-string\",greedy:!0},{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,alias:\"double-quoted-string\",greedy:!0,inside:{interpolation:l}}];a.languages.insertBefore(\"php\",\"variable\",{string:r}),a.languages.insertBefore(\"php\",\"variable\",{attribute:{pattern:/#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,greedy:!0,inside:{\"attribute-content\":{pattern:/^(#\\[)[\\s\\S]+(?=]$)/,lookbehind:!0,inside:{comment:e,string:r,\"attribute-class-name\":[{pattern:/([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,alias:\"class-name\",greedy:!0,lookbehind:!0},{pattern:/([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,alias:[\"class-name\",\"class-name-fully-qualified\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}}],constant:t,number:i,operator:n,punctuation:s}},delimiter:{pattern:/^#\\[|]$/,alias:\"punctuation\"}}}}),a.hooks.add(\"before-tokenize\",function(e){if(/<\\?/.test(e.code)){a.languages[\"markup-templating\"].buildPlaceholders(e,\"php\",/<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi)}}),a.hooks.add(\"after-tokenize\",function(e){a.languages[\"markup-templating\"].tokenizePlaceholders(e,\"php\")})}(Prism);"
            ]
        },
        "prism-phpdoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source;",
                "",
                "\tPrism.languages.phpdoc = Prism.languages.extend('javadoclike', {",
                "\t\t'parameter': {",
                "\t\t\tpattern: RegExp('(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' + typeExpression + '\\\\s+)?)\\\\$\\\\w+'),",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('phpdoc', 'keyword', {",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp('(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' + typeExpression),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,",
                "\t\t\t\t\t'punctuation': /[|\\\\[\\]()]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t});",
                "",
                "\tPrism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc);",
                "",
                "}(Prism));"
            ]
        },
        "prism-phpdoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=\"(?:\\\\b[a-zA-Z]\\\\w*|[|\\\\\\\\[\\\\]])+\";a.languages.phpdoc=a.languages.extend(\"javadoclike\",{parameter:{pattern:RegExp(\"(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:\"+e+\"\\\\s+)?)\\\\$\\\\w+\"),lookbehind:!0}}),a.languages.insertBefore(\"phpdoc\",\"keyword\",{\"class-name\":[{pattern:RegExp(\"(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)\"+e),lookbehind:!0,inside:{keyword:/\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,punctuation:/[|\\\\[\\]()]/}}]}),a.languages.javadoclike.addSupport(\"php\",a.languages.phpdoc)}(Prism);"
            ]
        },
        "prism-plsql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar plsql = Prism.languages.plsql = Prism.languages.extend('sql', {",
                "\t\t'comment': [",
                "\t\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t/--.*/",
                "\t\t]",
                "\t});",
                "",
                "\tvar keyword = plsql['keyword'];",
                "\tif (!Array.isArray(keyword)) {",
                "\t\tkeyword = plsql['keyword'] = [keyword];",
                "\t}",
                "\tkeyword.unshift(",
                "\t\t/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i",
                "\t);",
                "",
                "\tvar operator = plsql['operator'];",
                "\tif (!Array.isArray(operator)) {",
                "\t\toperator = plsql['operator'] = [operator];",
                "\t}",
                "\toperator.unshift(",
                "\t\t/:=/",
                "\t);",
                "",
                "}(Prism));"
            ]
        },
        "prism-plsql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(E){var A=E.languages.plsql=E.languages.extend(\"sql\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,/--.*/]}),T=A.keyword;Array.isArray(T)||(T=A.keyword=[T]),T.unshift(/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i);var R=A.operator;Array.isArray(R)||(R=A.operator=[R]),R.unshift(/:=/)}(Prism);"
            ]
        },
        "prism-powerquery.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// https://docs.microsoft.com/en-us/powerquery-m/power-query-m-language-specification",
                "",
                "Prism.languages.powerquery = {",
                "    'comment': {",
                "        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/).*)/,",
                "        lookbehind: true",
                "    },",
                "    'quoted-identifier': {",
                "        pattern: /#\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,",
                "        greedy: true,",
                "        alias: 'variable'",
                "    },",
                "    'string': {",
                "        pattern: /\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,",
                "        greedy: true",
                "    },",
                "    'constant': [",
                "        /\\bDay\\.(?:Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)\\b/,",
                "        /\\bTraceLevel\\.(?:Critical|Error|Information|Verbose|Warning)\\b/,",
                "        /\\bOccurrence\\.(?:First|Last|All)\\b/,",
                "        /\\bOrder\\.(?:Ascending|Descending)\\b/,",
                "        /\\bRoundingMode\\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\\b/,",
                "        /\\bMissingField\\.(?:Error|Ignore|UseNull)\\b/,",
                "        /\\bQuoteStyle\\.(?:Csv|None)\\b/,",
                "        /\\bJoinKind\\.(?:Inner|LeftOuter|RightOuter|FullOuter|LeftAnti|RightAnti)\\b/,",
                "        /\\bGroupKind\\.(?:Global|Local)\\b/,",
                "        /\\bExtraValues\\.(?:List|Ignore|Error)\\b/,",
                "        /\\bJoinAlgorithm\\.(?:Dynamic|PairwiseHash|SortMerge|LeftHash|RightHash|LeftIndex|RightIndex)\\b/,",
                "        /\\bJoinSide\\.(?:Left|Right)\\b/,",
                "        /\\bPrecision\\.(?:Double|Decimal)\\b/,",
                "        /\\bRelativePosition\\.From(?:End|Start)\\b/,",
                "        /\\bTextEncoding\\.(?:Ascii|BigEndianUnicode|Unicode|Utf8|Utf16|Windows)\\b/,",
                "        /\\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Int8|Int16|Int32|Int64|Function|List|Logical|None|Number|Record|Table|Text|Time)\\.Type\\b/,",
                "        /\\bnull\\b/",
                "    ],",
                "    'boolean': /\\b(?:true|false)\\b/,",
                "    'keyword': /\\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\\b/,",
                "    'function': {",
                "        pattern: /(^|[^#\\w.])(?!\\d)[\\w.]+(?=\\s*\\()/,",
                "        lookbehind: true",
                "    },",
                "    'data-type': {",
                "        pattern: /\\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time|type)\\b/,",
                "        alias: 'variable'",
                "    },",
                "    'number': {",
                "        pattern: /\\b0x[\\da-f]+\\b|(?:[+-]?(?:\\b\\d+\\.)?\\b\\d+|[+-]\\.\\d+|(^|[^.])\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,",
                "        lookbehind: true",
                "    },",
                "    'operator': /[-+*\\/&?@^]|<(?:=>?|>)?|>=?|=>?|\\.\\.\\.?/,",
                "    'punctuation': /[,;\\[\\](){}]/",
                "};",
                "",
                "Prism.languages.pq = Prism.languages['powerquery'];",
                "Prism.languages.mscript = Prism.languages['powerquery']"
            ]
        },
        "prism-powerquery.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.powerquery={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/).*)/,lookbehind:!0},\"quoted-identifier\":{pattern:/#\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,greedy:!0,alias:\"variable\"},string:{pattern:/\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,greedy:!0},constant:[/\\bDay\\.(?:Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)\\b/,/\\bTraceLevel\\.(?:Critical|Error|Information|Verbose|Warning)\\b/,/\\bOccurrence\\.(?:First|Last|All)\\b/,/\\bOrder\\.(?:Ascending|Descending)\\b/,/\\bRoundingMode\\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\\b/,/\\bMissingField\\.(?:Error|Ignore|UseNull)\\b/,/\\bQuoteStyle\\.(?:Csv|None)\\b/,/\\bJoinKind\\.(?:Inner|LeftOuter|RightOuter|FullOuter|LeftAnti|RightAnti)\\b/,/\\bGroupKind\\.(?:Global|Local)\\b/,/\\bExtraValues\\.(?:List|Ignore|Error)\\b/,/\\bJoinAlgorithm\\.(?:Dynamic|PairwiseHash|SortMerge|LeftHash|RightHash|LeftIndex|RightIndex)\\b/,/\\bJoinSide\\.(?:Left|Right)\\b/,/\\bPrecision\\.(?:Double|Decimal)\\b/,/\\bRelativePosition\\.From(?:End|Start)\\b/,/\\bTextEncoding\\.(?:Ascii|BigEndianUnicode|Unicode|Utf8|Utf16|Windows)\\b/,/\\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Int8|Int16|Int32|Int64|Function|List|Logical|None|Number|Record|Table|Text|Time)\\.Type\\b/,/\\bnull\\b/],boolean:/\\b(?:true|false)\\b/,keyword:/\\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\\b/,function:{pattern:/(^|[^#\\w.])(?!\\d)[\\w.]+(?=\\s*\\()/,lookbehind:!0},\"data-type\":{pattern:/\\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time|type)\\b/,alias:\"variable\"},number:{pattern:/\\b0x[\\da-f]+\\b|(?:[+-]?(?:\\b\\d+\\.)?\\b\\d+|[+-]\\.\\d+|(^|[^.])\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,lookbehind:!0},operator:/[-+*\\/&?@^]|<(?:=>?|>)?|>=?|=>?|\\.\\.\\.?/,punctuation:/[,;\\[\\](){}]/},Prism.languages.pq=Prism.languages.powerquery,Prism.languages.mscript=Prism.languages.powerquery;"
            ]
        },
        "prism-powershell.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar powershell = Prism.languages.powershell = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^`])<#[\\s\\S]*?#>/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^`])#.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'string': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'function': {",
                "\t\t\t\t\t\t// Allow for one level of nesting",
                "\t\t\t\t\t\tpattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t// Populated at end of file",
                "\t\t\t\t\t\tinside: {}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /'(?:[^']|'')*'/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t// Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices",
                "\t\t// Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)",
                "\t\t'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,",
                "\t\t'boolean': /\\$(?:true|false)\\b/i,",
                "\t\t'variable': /\\$\\w+\\b/,",
                "\t\t// Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example",
                "\t\t// Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }",
                "\t\t// Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }",
                "\t\t'function': [",
                "\t\t\t/\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i,",
                "\t\t\t/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i",
                "\t\t],",
                "\t\t// per http://technet.microsoft.com/en-us/library/hh847744.aspx",
                "\t\t'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,",
                "\t\t'operator': {",
                "\t\t\tpattern: /(\\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'punctuation': /[|{}[\\];(),.]/",
                "\t};",
                "",
                "\t// Variable interpolation inside strings, and nested expressions",
                "\tvar stringInside = powershell.string[0].inside;",
                "\tstringInside.boolean = powershell.boolean;",
                "\tstringInside.variable = powershell.variable;",
                "\tstringInside.function.inside = powershell;",
                "",
                "}(Prism));"
            ]
        },
        "prism-powershell.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var i=Prism.languages.powershell={comment:[{pattern:/(^|[^`])<#[\\s\\S]*?#>/,lookbehind:!0},{pattern:/(^|[^`])#.*/,lookbehind:!0}],string:[{pattern:/\"(?:`[\\s\\S]|[^`\"])*\"/,greedy:!0,inside:{function:{pattern:/(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,lookbehind:!0,inside:{}}}},{pattern:/'(?:[^']|'')*'/,greedy:!0}],namespace:/\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,boolean:/\\$(?:true|false)\\b/i,variable:/\\$\\w+\\b/,function:[/\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i,/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],keyword:/\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,operator:{pattern:/(\\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,lookbehind:!0},punctuation:/[|{}[\\];(),.]/},r=i.string[0].inside;r.boolean=i.boolean,r.variable=i.variable,r.function.inside=i}();"
            ]
        },
        "prism-processing.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.processing = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,",
                "\t'operator': /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/",
                "});",
                "Prism.languages.insertBefore('processing', 'number', {",
                "\t// Special case: XML is a type",
                "\t'constant': /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,",
                "\t'type': {",
                "\t\tpattern: /\\b(?:boolean|byte|char|color|double|float|int|[A-Z]\\w*)\\b/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "",
                "// Spaces are allowed between function name and parenthesis",
                "Prism.languages.processing['function'] = /\\w+(?=\\s*\\()/;",
                "",
                "// Class-names is not styled by default",
                "Prism.languages.processing['class-name'].alias = 'variable';"
            ]
        },
        "prism-processing.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.processing=Prism.languages.extend(\"clike\",{keyword:/\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,operator:/<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/}),Prism.languages.insertBefore(\"processing\",\"number\",{constant:/\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,type:{pattern:/\\b(?:boolean|byte|char|color|double|float|int|[A-Z]\\w*)\\b/,alias:\"variable\"}}),Prism.languages.processing.function=/\\w+(?=\\s*\\()/,Prism.languages.processing[\"class-name\"].alias=\"variable\";"
            ]
        },
        "prism-prolog.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.prolog = {",
                "\t// Syntax depends on the implementation",
                "\t'comment': [",
                "\t\t/%.+/,",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//",
                "\t],",
                "\t// Depending on the implementation, strings may allow escaped newlines and quote-escape",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'builtin': /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,",
                "\t'variable': /\\b[A-Z_]\\w*/,",
                "\t// FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?",
                "\t'function': /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,",
                "\t'number': /\\b\\d+(?:\\.\\d*)?/,",
                "\t// Custom operators are allowed",
                "\t'operator': /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,",
                "\t'punctuation': /[(){}\\[\\],]/",
                "};"
            ]
        },
        "prism-prolog.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.prolog={comment:[/%.+/,/\\/\\*[\\s\\S]*?\\*\\//],string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,variable:/\\b[A-Z_]\\w*/,function:/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+(?:\\.\\d*)?/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/};"
            ]
        },
        "prism-promql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts",
                "// As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/",
                "",
                "(function (Prism) {",
                "\t// PromQL Aggregation Operators",
                "\t// (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)",
                "\tvar aggregations = [",
                "\t\t'sum',",
                "\t\t'min',",
                "\t\t'max',",
                "\t\t'avg',",
                "\t\t'group',",
                "\t\t'stddev',",
                "\t\t'stdvar',",
                "\t\t'count',",
                "\t\t'count_values',",
                "\t\t'bottomk',",
                "\t\t'topk',",
                "\t\t'quantile'",
                "\t];",
                "",
                "\t// PromQL vector matching + the by and without clauses",
                "\t// (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)",
                "\tvar vectorMatching = [",
                "\t\t'on',",
                "\t\t'ignoring',",
                "\t\t'group_right',",
                "\t\t'group_left',",
                "\t\t'by',",
                "\t\t'without',",
                "\t];",
                "",
                "\t// PromQL offset modifier",
                "\t// (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)",
                "\tvar offsetModifier = ['offset'];",
                "",
                "\tvar keywords = aggregations.concat(vectorMatching, offsetModifier);",
                "",
                "\tPrism.languages.promql = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^[ \\t]*)#.*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'vector-match': {",
                "\t\t\t// Match the comma-separated label lists inside vector matching:",
                "\t\t\tpattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'label-key': {",
                "\t\t\t\t\tpattern: /\\b[^,]*\\b/,",
                "\t\t\t\t\talias: 'attr-name',",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /[(),]/",
                "\t\t\t},",
                "\t\t},",
                "\t\t'context-labels': {",
                "\t\t\tpattern: /\\{[^{}]*\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'label-key': {",
                "\t\t\t\t\tpattern: /\\b[a-z_]\\w*(?=\\s*(?:=~?|![=~]))/,",
                "\t\t\t\t\talias: 'attr-name',",
                "\t\t\t\t},",
                "\t\t\t\t'label-value': {",
                "\t\t\t\t\tpattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\talias: 'attr-value',",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\{|\\}|=~?|![=~]|,/,",
                "\t\t\t},",
                "\t\t},",
                "\t\t'context-range': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\[[\\w\\s:]+\\]/, // [1m]",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\[|\\]|:/,",
                "\t\t\t\t\t'range-duration': {",
                "\t\t\t\t\t\tpattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,",
                "\t\t\t\t\t\talias: 'number',",
                "\t\t\t\t\t},",
                "\t\t\t\t},",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\boffset\\s+)\\w+/, // offset 1m",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'range-duration': {",
                "\t\t\t\t\t\tpattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,",
                "\t\t\t\t\t\talias: 'number',",
                "\t\t\t\t\t},",
                "\t\t\t\t},",
                "\t\t\t},",
                "\t\t],",
                "\t\t'keyword': new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),",
                "\t\t'function': /\\b[a-zA-Z_]\\w*(?=\\s*\\()/i,",
                "\t\t'number': /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,",
                "\t\t'operator': /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|unless|or)\\b/i,",
                "\t\t'punctuation': /[{};()`,.[\\]]/,",
                "\t};",
                "})(Prism);"
            ]
        },
        "prism-promql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){var n=[\"on\",\"ignoring\",\"group_right\",\"group_left\",\"by\",\"without\"],a=[\"sum\",\"min\",\"max\",\"avg\",\"group\",\"stddev\",\"stdvar\",\"count\",\"count_values\",\"bottomk\",\"topk\",\"quantile\"].concat(n,[\"offset\"]);t.languages.promql={comment:{pattern:/(^[ \\t]*)#.*/m,lookbehind:!0},\"vector-match\":{pattern:new RegExp(\"((?:\"+n.join(\"|\")+\")\\\\s*)\\\\([^)]*\\\\)\"),lookbehind:!0,inside:{\"label-key\":{pattern:/\\b[^,]*\\b/,alias:\"attr-name\"},punctuation:/[(),]/}},\"context-labels\":{pattern:/\\{[^{}]*\\}/,inside:{\"label-key\":{pattern:/\\b[a-z_]\\w*(?=\\s*(?:=~?|![=~]))/,alias:\"attr-name\"},\"label-value\":{pattern:/([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0,alias:\"attr-value\"},punctuation:/\\{|\\}|=~?|![=~]|,/}},\"context-range\":[{pattern:/\\[[\\w\\s:]+\\]/,inside:{punctuation:/\\[|\\]|:/,\"range-duration\":{pattern:/\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,alias:\"number\"}}},{pattern:/(\\boffset\\s+)\\w+/,lookbehind:!0,inside:{\"range-duration\":{pattern:/\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,alias:\"number\"}}}],keyword:new RegExp(\"\\\\b(?:\"+a.join(\"|\")+\")\\\\b\",\"i\"),function:/\\b[a-zA-Z_]\\w*(?=\\s*\\()/i,number:/[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,operator:/[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|unless|or)\\b/i,punctuation:/[{};()`,.[\\]]/}}(Prism);"
            ]
        },
        "prism-properties.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.properties = {",
                "\t'comment': /^[ \\t]*[#!].*$/m,",
                "\t'attr-value': {",
                "\t\tpattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *(?! )| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,",
                "\t'punctuation': /[=:]/",
                "};"
            ]
        },
        "prism-properties.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.properties={comment:/^[ \\t]*[#!].*$/m,\"attr-value\":{pattern:/(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *(?! )| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,lookbehind:!0},\"attr-name\":/^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,punctuation:/[=:]/};"
            ]
        },
        "prism-protobuf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar builtinTypes = /\\b(?:double|float|[su]?int(?:32|64)|s?fixed(?:32|64)|bool|string|bytes)\\b/;",
                "",
                "\tPrism.languages.protobuf = Prism.languages.extend('clike', {",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\b(?:enum|extend|message|service)\\s+)[A-Za-z_]\\w*(?=\\s*\\{)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\b(?:rpc\\s+\\w+|returns)\\s*\\(\\s*(?:stream\\s+)?)\\.?[A-Za-z_]\\w*(?:\\.[A-Za-z_]\\w*)*(?=\\s*\\))/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': /\\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\\s+\\w)|service|stream|syntax|to)\\b(?!\\s*=\\s*\\d)/,",
                "\t\t'function': /[a-z_]\\w*(?=\\s*\\()/i",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('protobuf', 'operator', {",
                "\t\t'map': {",
                "\t\t\tpattern: /\\bmap<\\s*[\\w.]+\\s*,\\s*[\\w.]+\\s*>(?=\\s+[a-z_]\\w*\\s*[=;])/i,",
                "\t\t\talias: 'class-name',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[<>.,]/,",
                "\t\t\t\t'builtin': builtinTypes",
                "\t\t\t}",
                "\t\t},",
                "\t\t'builtin': builtinTypes,",
                "\t\t'positional-class-name': {",
                "\t\t\tpattern: /(?:\\b|\\B\\.)[a-z_]\\w*(?:\\.[a-z_]\\w*)*(?=\\s+[a-z_]\\w*\\s*[=;])/i,",
                "\t\t\talias: 'class-name',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t'annotation': {",
                "\t\t\tpattern: /(\\[\\s*)[a-z_]\\w*(?=\\s*=)/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-protobuf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var s=/\\b(?:double|float|[su]?int(?:32|64)|s?fixed(?:32|64)|bool|string|bytes)\\b/;e.languages.protobuf=e.languages.extend(\"clike\",{\"class-name\":[{pattern:/(\\b(?:enum|extend|message|service)\\s+)[A-Za-z_]\\w*(?=\\s*\\{)/,lookbehind:!0},{pattern:/(\\b(?:rpc\\s+\\w+|returns)\\s*\\(\\s*(?:stream\\s+)?)\\.?[A-Za-z_]\\w*(?:\\.[A-Za-z_]\\w*)*(?=\\s*\\))/,lookbehind:!0}],keyword:/\\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\\s+\\w)|service|stream|syntax|to)\\b(?!\\s*=\\s*\\d)/,function:/[a-z_]\\w*(?=\\s*\\()/i}),e.languages.insertBefore(\"protobuf\",\"operator\",{map:{pattern:/\\bmap<\\s*[\\w.]+\\s*,\\s*[\\w.]+\\s*>(?=\\s+[a-z_]\\w*\\s*[=;])/i,alias:\"class-name\",inside:{punctuation:/[<>.,]/,builtin:s}},builtin:s,\"positional-class-name\":{pattern:/(?:\\b|\\B\\.)[a-z_]\\w*(?:\\.[a-z_]\\w*)*(?=\\s+[a-z_]\\w*\\s*[=;])/i,alias:\"class-name\",inside:{punctuation:/\\./}},annotation:{pattern:/(\\[\\s*)[a-z_]\\w*(?=\\s*=)/i,lookbehind:!0}})}(Prism);"
            ]
        },
        "prism-pug.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\t// TODO:",
                "\t// - Add CSS highlighting inside <style> tags",
                "\t// - Add support for multi-line code blocks",
                "\t// - Add support for interpolation #{} and !{}",
                "\t// - Add support for tag interpolation #[]",
                "\t// - Add explicit support for plain text using |",
                "\t// - Add support for markup embedded in plain text",
                "",
                "\tPrism.languages.pug = {",
                "",
                "\t\t// Multiline stuff should appear before the rest",
                "",
                "\t\t// This handles both single-line and multi-line comments",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t// All the tag-related part is in lookbehind",
                "\t\t// so that it can be highlighted by the \"tag\" pattern",
                "\t\t'multiline-script': {",
                "\t\t\tpattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "",
                "\t\t// See at the end of the file for known filters",
                "\t\t'filter': {",
                "\t\t\tpattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'filter-name': {",
                "\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'multiline-plain-text': {",
                "\t\t\tpattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'markup': {",
                "\t\t\tpattern: /(^[\\t ]*)<.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.markup",
                "\t\t},",
                "\t\t'doctype': {",
                "\t\t\tpattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t// This handle all conditional and loop keywords",
                "\t\t'flow-control': {",
                "\t\t\tpattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'each': {",
                "\t\t\t\t\tpattern: /^each .+? in\\b/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'keyword': /\\b(?:each|in)\\b/,",
                "\t\t\t\t\t\t'punctuation': /,/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'branch': {",
                "\t\t\t\t\tpattern: /^(?:if|unless|else|case|when|default|while)\\b/,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'mixin': [",
                "\t\t\t// Declaration",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*)mixin .+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^mixin/,",
                "\t\t\t\t\t'function': /\\w+(?=\\s*\\(|\\s*$)/,",
                "\t\t\t\t\t'punctuation': /[(),.]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Usage",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*)\\+.+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'name': {",
                "\t\t\t\t\t\tpattern: /^\\+\\w+/,",
                "\t\t\t\t\t\talias: 'function'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'script': {",
                "\t\t\tpattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "",
                "\t\t'plain-text': {",
                "\t\t\tpattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\tpattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': [",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /&[^(]+\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: Prism.languages.javascript",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\t\tpattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,",
                "\t\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\t\tinside: Prism.languages.javascript",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,",
                "\t\t\t\t\t\t\t'punctuation': /[!=(),]+/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t'attr-id': /#[\\w\\-]+/,",
                "\t\t\t\t'attr-class': /\\.[\\w\\-]+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*(?:-|!?=)).+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t],",
                "\t\t'punctuation': /[.\\-!=|]+/",
                "\t};",
                "",
                "\tvar filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source;",
                "",
                "\t// Non exhaustive list of available filters and associated languages",
                "\tvar filters = [",
                "\t\t{filter:'atpl',language:'twig'},",
                "\t\t{filter:'coffee',language:'coffeescript'},",
                "\t\t'ejs',",
                "\t\t'handlebars',",
                "\t\t'less',",
                "\t\t'livescript',",
                "\t\t'markdown',",
                "\t\t{filter:'sass',language:'scss'},",
                "\t\t'stylus'",
                "\t];",
                "\tvar all_filters = {};",
                "\tfor (var i = 0, l = filters.length; i < l; i++) {",
                "\t\tvar filter = filters[i];",
                "\t\tfilter = typeof filter === 'string' ? {filter: filter, language: filter} : filter;",
                "\t\tif (Prism.languages[filter.language]) {",
                "\t\t\tall_filters['filter-' + filter.filter] = {",
                "\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', function () { return filter.filter; }), 'm'),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'filter-name': {",
                "\t\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages[filter.language]",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tPrism.languages.insertBefore('pug', 'filter', all_filters);",
                "",
                "}(Prism));"
            ]
        },
        "prism-pug.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.pug={comment:{pattern:/(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,lookbehind:!0},\"multiline-script\":{pattern:/(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:e.languages.javascript},filter:{pattern:/(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},\"multiline-plain-text\":{pattern:/(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0},markup:{pattern:/(^[\\t ]*)<.+/m,lookbehind:!0,inside:e.languages.markup},doctype:{pattern:/((?:^|\\n)[\\t ]*)doctype(?: .+)?/,lookbehind:!0},\"flow-control\":{pattern:/(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,lookbehind:!0,inside:{each:{pattern:/^each .+? in\\b/,inside:{keyword:/\\b(?:each|in)\\b/,punctuation:/,/}},branch:{pattern:/^(?:if|unless|else|case|when|default|while)\\b/,alias:\"keyword\"},rest:e.languages.javascript}},keyword:{pattern:/(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,lookbehind:!0},mixin:[{pattern:/(^[\\t ]*)mixin .+/m,lookbehind:!0,inside:{keyword:/^mixin/,function:/\\w+(?=\\s*\\(|\\s*$)/,punctuation:/[(),.]/}},{pattern:/(^[\\t ]*)\\+.+/m,lookbehind:!0,inside:{name:{pattern:/^\\+\\w+/,alias:\"function\"},rest:e.languages.javascript}}],script:{pattern:/(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,lookbehind:!0,inside:e.languages.javascript},\"plain-text\":{pattern:/(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,lookbehind:!0},tag:{pattern:/(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,lookbehind:!0,inside:{attributes:[{pattern:/&[^(]+\\([^)]+\\)/,inside:e.languages.javascript},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,lookbehind:!0,inside:e.languages.javascript},\"attr-name\":/[\\w-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[!=(),]+/}}],punctuation:/:/,\"attr-id\":/#[\\w\\-]+/,\"attr-class\":/\\.[\\w\\-]+/}},code:[{pattern:/(^[\\t ]*(?:-|!?=)).+/m,lookbehind:!0,inside:e.languages.javascript}],punctuation:/[.\\-!=|]+/};for(var t=[{filter:\"atpl\",language:\"twig\"},{filter:\"coffee\",language:\"coffeescript\"},\"ejs\",\"handlebars\",\"less\",\"livescript\",\"markdown\",{filter:\"sass\",language:\"scss\"},\"stylus\"],n={},a=0,i=t.length;a<i;a++){var r=t[a];r=\"string\"==typeof r?{filter:r,language:r}:r,e.languages[r.language]&&(n[\"filter-\"+r.filter]={pattern:RegExp(\"(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\\\2[\\t ].+|\\\\s*?(?=\\r?\\n|\\r)))+\".replace(\"{{filter_name}}\",function(){return r.filter}),\"m\"),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[r.language]}})}e.languages.insertBefore(\"pug\",\"filter\",n)}(Prism);"
            ]
        },
        "prism-puppet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.puppet = {",
                "\t\t'heredoc': [",
                "\t\t\t// Matches the content of a quoted heredoc string (subject to interpolation)",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// Matches the end tag",
                "\t\t\t\t\t'punctuation': /(?=\\S).*\\S(?= *$)/",
                "\t\t\t\t\t// See interpolation below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Matches the content of an unquoted heredoc string (no interpolation)",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// Matches the end tag",
                "\t\t\t\t\t'punctuation': /(?=\\S).*\\S(?= *$)/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Matches the start tag of heredoc strings",
                "\t\t\t{",
                "\t\t\t\tpattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\tpattern: /(\\().+?(?=\\))/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'multiline-comment': {",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'regex': {",
                "\t\t\t// Must be prefixed with the keyword \"node\" or a non-word char",
                "\t\t\tpattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// Extended regexes must have the x flag. They can contain single-line comments.",
                "\t\t\t\t'extended-regex': {",
                "\t\t\t\t\tpattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'comment': /#.*/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\t// Allow for one nested level of double quotes inside interpolation",
                "\t\t\tpattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'double-quoted': {",
                "\t\t\t\t\tpattern: /^\"[\\s\\S]*\"$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t// See interpolation below",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /::/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'attr-name': /(?:\\w+|\\*)(?=\\s*=>)/,",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.)(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/",
                "\t\t],",
                "\t\t'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t// Includes words reserved for future use",
                "\t\t'keyword': /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,",
                "\t\t'datatype': {",
                "\t\t\tpattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'operator': /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,",
                "\t\t'punctuation': /[\\[\\]{}().,;]|:+/",
                "\t};",
                "",
                "\tvar interpolation = [",
                "\t\t{",
                "\t\t\t// Allow for one nested level of braces inside interpolation",
                "\t\t\tpattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'short-variable': {",
                "\t\t\t\t\t// Negative look-ahead prevent wrong highlighting of functions",
                "\t\t\t\t\tpattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'variable',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /::/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^\\$/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.puppet",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /::/",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "\tPrism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;",
                "\tPrism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;",
                "}(Prism));"
            ]
        },
        "prism-puppet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.puppet={heredoc:[{pattern:/(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,lookbehind:!0,alias:\"string\",inside:{punctuation:/(?=\\S).*\\S(?= *$)/}},{pattern:/(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,lookbehind:!0,greedy:!0,alias:\"string\",inside:{punctuation:/(?=\\S).*\\S(?= *$)/}},{pattern:/@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,alias:\"string\",inside:{punctuation:{pattern:/(\\().+?(?=\\))/,lookbehind:!0}}}],\"multiline-comment\":{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0,greedy:!0,alias:\"comment\"},regex:{pattern:/((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,lookbehind:!0,greedy:!0,inside:{\"extended-regex\":{pattern:/^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,inside:{comment:/#.*/}}}},comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0,greedy:!0},string:{pattern:/([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{\"double-quoted\":{pattern:/^\"[\\s\\S]*\"$/,inside:{}}}},variable:{pattern:/\\$(?:::)?\\w+(?:::\\w+)*/,inside:{punctuation:/::/}},\"attr-name\":/(?:\\w+|\\*)(?=\\s*=>)/,function:[{pattern:/(\\.)(?!\\d)\\w+/,lookbehind:!0},/\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],number:/\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,boolean:/\\b(?:true|false)\\b/,keyword:/\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,datatype:{pattern:/\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,alias:\"symbol\"},operator:/=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,punctuation:/[\\[\\]{}().,;]|:+/};var n=[{pattern:/(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,lookbehind:!0,inside:{\"short-variable\":{pattern:/(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,lookbehind:!0,alias:\"variable\",inside:{punctuation:/::/}},delimiter:{pattern:/^\\$/,alias:\"variable\"},rest:e.languages.puppet}},{pattern:/(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,lookbehind:!0,alias:\"variable\",inside:{punctuation:/::/}}];e.languages.puppet.heredoc[0].inside.interpolation=n,e.languages.puppet.string.inside[\"double-quoted\"].inside.interpolation=n}(Prism);"
            ]
        },
        "prism-pure.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t// https://agraef.github.io/pure-docs/pure.html#lexical-matters",
                "",
                "\tPrism.languages.pure = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/#!.+/",
                "\t\t],",
                "\t\t'inline-lang': {",
                "\t\t\tpattern: /%<[\\s\\S]+?%>/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'lang': {",
                "\t\t\t\t\tpattern: /(^%< *)-\\*-.+?-\\*-/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'comment'",
                "\t\t\t\t},",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^%<.*|%>$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': {",
                "\t\t\t// The look-behind prevents wrong highlighting of the .. operator",
                "\t\t\tpattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,",
                "\t\t'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,",
                "\t\t'special': {",
                "\t\t\tpattern: /\\b__[a-z]+__\\b/i,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t// Any combination of operator chars can be an operator",
                "\t\t'operator': /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,",
                "\t\t// FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?",
                "\t\t'punctuation': /[(){}\\[\\];,|]/",
                "\t};",
                "",
                "\tvar inlineLanguages = [",
                "\t\t'c',",
                "\t\t{ lang: 'c++', alias: 'cpp' },",
                "\t\t'fortran'",
                "\t];",
                "\tvar inlineLanguageRe = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;",
                "",
                "\tinlineLanguages.forEach(function (lang) {",
                "\t\tvar alias = lang;",
                "\t\tif (typeof lang !== 'string') {",
                "\t\t\talias = lang.alias;",
                "\t\t\tlang = lang.lang;",
                "\t\t}",
                "\t\tif (Prism.languages[alias]) {",
                "\t\t\tvar o = {};",
                "\t\t\to['inline-lang-' + alias] = {",
                "\t\t\t\tpattern: RegExp(inlineLanguageRe.replace('{lang}', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,'\\\\$1')), 'i'),",
                "\t\t\t\tinside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)",
                "\t\t\t};",
                "\t\t\to['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);",
                "\t\t\tPrism.languages.insertBefore('pure', 'inline-lang', o);",
                "\t\t}",
                "\t});",
                "",
                "\t// C is the default inline language",
                "\tif (Prism.languages.c) {",
                "\t\tPrism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-pure.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(r){r.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0},/#!.+/],\"inline-lang\":{pattern:/%<[\\s\\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:!0,alias:\"comment\"},delimiter:{pattern:/^%<.*|%>$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},number:{pattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,lookbehind:!0},keyword:/\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,function:/\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,special:{pattern:/\\b__[a-z]+__\\b/i,alias:\"builtin\"},operator:/(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,punctuation:/[(){}\\[\\];,|]/};[\"c\",{lang:\"c++\",alias:\"cpp\"},\"fortran\"].forEach(function(e){var t=e;if(\"string\"!=typeof e&&(t=e.alias,e=e.lang),r.languages[t]){var a={};a[\"inline-lang-\"+t]={pattern:RegExp(\"%< *-\\\\*- *{lang}\\\\d* *-\\\\*-[^]+?%>\".replace(\"{lang}\",e.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,\"\\\\$1\")),\"i\"),inside:r.util.clone(r.languages.pure[\"inline-lang\"].inside)},a[\"inline-lang-\"+t].inside.rest=r.util.clone(r.languages[t]),r.languages.insertBefore(\"pure\",\"inline-lang\",a)}}),r.languages.c&&(r.languages.pure[\"inline-lang\"].inside.rest=r.util.clone(r.languages.c))}(Prism);"
            ]
        },
        "prism-purebasic.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/*",
                "Original Code by Bas Groothedde",
                "!!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)",
                "==> https://codepen.io/ImagineProgramming/details/JYydBy/",
                "slightly changed to pass all tests",
                "*/",
                "",
                "",
                "// PureBasic support, steal stuff from ansi-c",
                "Prism.languages.purebasic = Prism.languages.extend('clike', {",
                "\t'comment': /;.*/,",
                "\t'keyword': /\\b(?:declarecdll|declaredll|compilerselect|compilercase|compilerdefault|compilerendselect|compilererror|enableexplicit|disableexplicit|not|and|or|xor|calldebugger|debuglevel|enabledebugger|disabledebugger|restore|read|includepath|includebinary|threaded|runtime|with|endwith|structureunion|endstructureunion|align|newlist|newmap|interface|endinterface|extends|enumeration|endenumeration|swap|foreach|continue|fakereturn|goto|gosub|return|break|module|endmodule|declaremodule|enddeclaremodule|declare|declarec|prototype|prototypec|enableasm|disableasm|dim|redim|data|datasection|enddatasection|to|procedurereturn|debug|default|case|select|endselect|as|import|endimport|importc|compilerif|compilerelse|compilerendif|compilerelseif|end|structure|endstructure|while|wend|for|next|step|if|else|elseif|endif|repeat|until|procedure|proceduredll|procedurec|procedurecdll|endprocedure|protected|shared|static|global|define|includefile|xincludefile|macro|endmacro)\\b/i,",
                "\t'function': /\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,",
                "\t'number': /(?:\\$[\\da-f]+|\\b-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+-]?\\d+)?)\\b/i,",
                "\t'operator': /(?:@\\*?|\\?|\\*)\\w+|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/",
                "});",
                "",
                "Prism.languages.insertBefore('purebasic', 'keyword', {",
                "\t'tag': /#\\w+/,",
                "\t'asm': {",
                "\t\tpattern: /(^\\s*)!.*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'tag',",
                "\t\tinside: {",
                "\t\t\t'comment': /;.*/,",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t// Anonymous label references, i.e.: jmp @b",
                "\t\t\t'label-reference-anonymous': {",
                "\t\t\t\tpattern: /(\\s*!\\s*j[a-z]+\\s+)@[fb]/i,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'fasm-label'",
                "\t\t\t},",
                "\t\t\t// Named label reference, i.e.: jne label1",
                "\t\t\t'label-reference-addressed': {",
                "\t\t\t\tpattern: /(\\s*!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'fasm-label'",
                "\t\t\t},",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /^(\\s*!\\s*)[\\da-z]+(?=\\s|$)/im,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'function-inline': {",
                "\t\t\t\tpattern: /(\\s*:\\s*)[\\da-z]+(?=\\s)/i,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'function'",
                "\t\t\t},",
                "\t\t\t'label': {",
                "\t\t\t\tpattern: /^(\\s*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'fasm-label'",
                "\t\t\t},",
                "\t\t\t'keyword': [",
                "\t\t\t\t/(?:extern|global)[^;\\r\\n]*/i,",
                "\t\t\t\t/(?:CPU|FLOAT|DEFAULT).*/",
                "\t\t\t],",
                "\t\t\t'register': /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s|mm\\d+)\\b/i,",
                "\t\t\t'number': /(?:\\b|-|(?=\\$))(?:0[hx](?:[\\da-f]*\\.)?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,",
                "\t\t\t'operator': /[\\[\\]*+\\-/%<>=&|$!,.:]/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "delete Prism.languages.purebasic['class-name'];",
                "delete Prism.languages.purebasic['boolean'];",
                "",
                "Prism.languages.pbfasm = Prism.languages['purebasic'];"
            ]
        },
        "prism-purebasic.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.purebasic=Prism.languages.extend(\"clike\",{comment:/;.*/,keyword:/\\b(?:declarecdll|declaredll|compilerselect|compilercase|compilerdefault|compilerendselect|compilererror|enableexplicit|disableexplicit|not|and|or|xor|calldebugger|debuglevel|enabledebugger|disabledebugger|restore|read|includepath|includebinary|threaded|runtime|with|endwith|structureunion|endstructureunion|align|newlist|newmap|interface|endinterface|extends|enumeration|endenumeration|swap|foreach|continue|fakereturn|goto|gosub|return|break|module|endmodule|declaremodule|enddeclaremodule|declare|declarec|prototype|prototypec|enableasm|disableasm|dim|redim|data|datasection|enddatasection|to|procedurereturn|debug|default|case|select|endselect|as|import|endimport|importc|compilerif|compilerelse|compilerendif|compilerelseif|end|structure|endstructure|while|wend|for|next|step|if|else|elseif|endif|repeat|until|procedure|proceduredll|procedurec|procedurecdll|endprocedure|protected|shared|static|global|define|includefile|xincludefile|macro|endmacro)\\b/i,function:/\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,number:/(?:\\$[\\da-f]+|\\b-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+-]?\\d+)?)\\b/i,operator:/(?:@\\*?|\\?|\\*)\\w+|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/}),Prism.languages.insertBefore(\"purebasic\",\"keyword\",{tag:/#\\w+/,asm:{pattern:/(^\\s*)!.*/m,lookbehind:!0,alias:\"tag\",inside:{comment:/;.*/,string:{pattern:/([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"label-reference-anonymous\":{pattern:/(\\s*!\\s*j[a-z]+\\s+)@[fb]/i,lookbehind:!0,alias:\"fasm-label\"},\"label-reference-addressed\":{pattern:/(\\s*!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,lookbehind:!0,alias:\"fasm-label\"},function:{pattern:/^(\\s*!\\s*)[\\da-z]+(?=\\s|$)/im,lookbehind:!0},\"function-inline\":{pattern:/(\\s*:\\s*)[\\da-z]+(?=\\s)/i,lookbehind:!0,alias:\"function\"},label:{pattern:/^(\\s*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,lookbehind:!0,alias:\"fasm-label\"},keyword:[/(?:extern|global)[^;\\r\\n]*/i,/(?:CPU|FLOAT|DEFAULT).*/],register:/\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s|mm\\d+)\\b/i,number:/(?:\\b|-|(?=\\$))(?:0[hx](?:[\\da-f]*\\.)?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,operator:/[\\[\\]*+\\-/%<>=&|$!,.:]/}}}),delete Prism.languages.purebasic[\"class-name\"],delete Prism.languages.purebasic.boolean,Prism.languages.pbfasm=Prism.languages.purebasic;"
            ]
        },
        "prism-purescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.purescript = Prism.languages.extend('haskell', {",
                "\t'keyword': /\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,",
                "",
                "\t'import-statement': {",
                "\t\t// The imported or hidden names are not included in this import",
                "\t\t// statement. This is because we want to highlight those exactly like",
                "\t\t// we do for the names in the program.",
                "\t\tpattern: /(^\\s*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /\\b(?:import|as|hiding)\\b/",
                "\t\t}",
                "\t},",
                "",
                "\t// These are builtin functions only. Constructors are highlighted later as a constant.",
                "\t'builtin': /\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/,",
                "});",
                "",
                "Prism.languages.purs = Prism.languages.purescript;"
            ]
        },
        "prism-purescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.purescript=Prism.languages.extend(\"haskell\",{keyword:/\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\"import-statement\":{pattern:/(^\\s*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:import|as|hiding)\\b/}},builtin:/\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/}),Prism.languages.purs=Prism.languages.purescript;"
            ]
        },
        "prism-python.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.python = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string-interpolation': {",
                "\t\tpattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\t// \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"",
                "\t\t\t\tpattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'format-spec': {",
                "\t\t\t\t\t\tpattern: /(:)[^:(){}]+(?=}$)/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'conversion-option': {",
                "\t\t\t\t\t\tpattern: /![sra](?=[:}]$)/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: null",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t},",
                "\t'triple-quoted-string': {",
                "\t\tpattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\bclass\\s+)\\w+/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'decorator': {",
                "\t\tpattern: /(^\\s*)@\\w+(?:\\.\\w+)*/im,",
                "\t\tlookbehind: true,",
                "\t\talias: ['annotation', 'punctuation'],",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\./",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,",
                "\t'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,",
                "\t'boolean': /\\b(?:True|False|None)\\b/,",
                "\t'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,",
                "\t'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};",
                "",
                "Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;",
                "",
                "Prism.languages.py = Prism.languages.python;"
            ]
        },
        "prism-python.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.python={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},\"string-interpolation\":{pattern:/(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,lookbehind:!0,inside:{\"format-spec\":{pattern:/(:)[^:(){}]+(?=}$)/,lookbehind:!0},\"conversion-option\":{pattern:/![sra](?=[:}]$)/,alias:\"punctuation\"},rest:null}},string:/[\\s\\S]+/}},\"triple-quoted-string\":{pattern:/(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,greedy:!0,alias:\"string\"},string:{pattern:/(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,greedy:!0},function:{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,lookbehind:!0},\"class-name\":{pattern:/(\\bclass\\s+)\\w+/i,lookbehind:!0},decorator:{pattern:/(^\\s*)@\\w+(?:\\.\\w+)*/im,lookbehind:!0,alias:[\"annotation\",\"punctuation\"],inside:{punctuation:/\\./}},keyword:/\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,builtin:/\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,boolean:/\\b(?:True|False|None)\\b/,number:/(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\\];(),.:]/},Prism.languages.python[\"string-interpolation\"].inside.interpolation.inside.rest=Prism.languages.python,Prism.languages.py=Prism.languages.python;"
            ]
        },
        "prism-q.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.q = {",
                "\t'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t'comment': [",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.",
                "\t\t{",
                "",
                "\t\t\tpattern: /([\\t )\\]}])\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.",
                "\t\t// A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.",
                "\t\t// If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.",
                "\t\t// The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.",
                "\t\t{",
                "\t\t\tpattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r(?!\\n)))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// A \\ on a line by itself with no preceding matching / will comment to end of file.",
                "\t\t{",
                "\t\t\tpattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /^#!.+/m,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'symbol': /`(?::\\S+|[\\w.]*)/,",
                "\t'datetime': {",
                "\t\tpattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,",
                "\t\talias: 'number'",
                "\t},",
                "\t// The negative look-ahead prevents bad highlighting",
                "\t// of verbs 0: and 1:",
                "\t'number': /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?[hjfeb]?)/,",
                "\t'keyword': /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,",
                "\t'adverb': {",
                "\t\tpattern: /['\\/\\\\]:?|\\beach\\b/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'verb': {",
                "\t\tpattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?~=|$&#@^]):?|\\b_\\b:?/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'punctuation': /[(){}\\[\\];.]/",
                "};"
            ]
        },
        "prism-q.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.q={string:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,comment:[{pattern:/([\\t )\\]}])\\/.*/,lookbehind:!0,greedy:!0},{pattern:/(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r(?!\\n)))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,lookbehind:!0,greedy:!0},{pattern:/^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,greedy:!0},{pattern:/^#!.+/m,greedy:!0}],symbol:/`(?::\\S+|[\\w.]*)/,datetime:{pattern:/0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,alias:\"number\"},number:/\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?[hjfeb]?)/,keyword:/\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,adverb:{pattern:/['\\/\\\\]:?|\\beach\\b/,alias:\"function\"},verb:{pattern:/(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?~=|$&#@^]):?|\\b_\\b:?/,alias:\"operator\"},punctuation:/[(){}\\[\\];.]/};"
            ]
        },
        "prism-qml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar jsString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|'(?:\\\\.|[^\\\\'\\r\\n])*'/.source;",
                "\tvar jsComment = /\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\//.source;",
                "",
                "\tvar jsExpr = /(?:[^\\\\()[\\]{}\"'/]|<string>|\\/(?![*/])|<comment>|\\(<expr>*\\)|\\[<expr>*\\]|\\{<expr>*\\}|\\\\[\\s\\S])/",
                "\t\t.source.replace(/<string>/g, function () { return jsString; }).replace(/<comment>/g, function () { return jsComment; });",
                "",
                "\t// the pattern will blow up, so only a few iterations",
                "\tfor (var i = 0; i < 2; i++) {",
                "\t\tjsExpr = jsExpr.replace(/<expr>/g, function () { return jsExpr; });",
                "\t}",
                "\tjsExpr = jsExpr.replace(/<expr>/g, '[^\\\\s\\\\S]');",
                "",
                "",
                "\tPrism.languages.qml = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'javascript-function': {",
                "\t\t\tpattern: RegExp(/((?:^|;)[ \\t]*)function\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*\\(<js>*\\)\\s*\\{<js>*\\}/.source.replace(/<js>/g, function () { return jsExpr; }), 'm'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'language-javascript',",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t'class-name': {",
                "\t\t\tpattern: /((?:^|[:;])[ \\t]*)(?!\\d)\\w+(?=[ \\t]*\\{|[ \\t]+on\\b)/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'property': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[;{])[ \\t]*)(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[;{])[ \\t]*)property[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^property/,",
                "\t\t\t\t\t'property': /\\w+(?:\\.\\w+)*/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'javascript-expression': {",
                "\t\t\tpattern: RegExp(/(:[ \\t]*)(?![\\s;}[])(?:(?!$|[;}])<js>)+/.source.replace(/<js>/g, function () { return jsExpr; }), 'm'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'language-javascript',",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t'string': /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\t'keyword': /\\b(?:as|import|on)\\b/,",
                "\t\t'punctuation': /[{}[\\]:;,]/",
                "\t};",
                "",
                "}(Prism));"
            ]
        },
        "prism-qml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){for(var r=\"(?:[^\\\\\\\\()[\\\\]{}\\\"'/]|<string>|/(?![*/])|<comment>|\\\\(<expr>*\\\\)|\\\\[<expr>*\\\\]|\\\\{<expr>*\\\\}|\\\\\\\\[^])\".replace(/<string>/g,function(){return\"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\"|'(?:\\\\\\\\.|[^\\\\\\\\'\\r\\n])*'\"}).replace(/<comment>/g,function(){return\"//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))*\\\\*/\"}),n=0;n<2;n++)r=r.replace(/<expr>/g,function(){return r});r=r.replace(/<expr>/g,\"[^\\\\s\\\\S]\"),e.languages.qml={comment:{pattern:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,greedy:!0},\"javascript-function\":{pattern:RegExp(\"((?:^|;)[ \\t]*)function\\\\s+(?!\\\\s)[_$a-zA-Z\\\\xA0-\\\\uFFFF](?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF])*\\\\s*\\\\(<js>*\\\\)\\\\s*\\\\{<js>*\\\\}\".replace(/<js>/g,function(){return r}),\"m\"),lookbehind:!0,greedy:!0,alias:\"language-javascript\",inside:e.languages.javascript},\"class-name\":{pattern:/((?:^|[:;])[ \\t]*)(?!\\d)\\w+(?=[ \\t]*\\{|[ \\t]+on\\b)/m,lookbehind:!0},property:[{pattern:/((?:^|[;{])[ \\t]*)(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,lookbehind:!0},{pattern:/((?:^|[;{])[ \\t]*)property[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,lookbehind:!0,inside:{keyword:/^property/,property:/\\w+(?:\\.\\w+)*/}}],\"javascript-expression\":{pattern:RegExp(\"(:[ \\t]*)(?![\\\\s;}[])(?:(?!$|[;}])<js>)+\".replace(/<js>/g,function(){return r}),\"m\"),lookbehind:!0,greedy:!0,alias:\"language-javascript\",inside:e.languages.javascript},string:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,keyword:/\\b(?:as|import|on)\\b/,punctuation:/[{}[\\]:;,]/}}(Prism);"
            ]
        },
        "prism-qore.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.qore = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t// Overridden to allow unescaped multi-line strings",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'function': /\\$?\\b(?!\\d)\\w+(?=\\()/,",
                "\t'number': /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': /\\$(?!\\d)\\w+\\b/",
                "});"
            ]
        },
        "prism-qore.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.qore=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,lookbehind:!0},string:{pattern:/(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},keyword:/\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,boolean:/\\b(?:true|false)\\b/i,function:/\\$?\\b(?!\\d)\\w+(?=\\()/,number:/\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,operator:{pattern:/(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,lookbehind:!0},variable:/\\$(?!\\d)\\w+\\b/});"
            ]
        },
        "prism-r.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.r = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'percent-operator': {",
                "\t\t// Includes user-defined operators",
                "\t\t// and %%, %*%, %/%, %in%, %o%, %x%",
                "\t\tpattern: /%[^%\\s]*%/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'boolean': /\\b(?:TRUE|FALSE)\\b/,",
                "\t'ellipsis': /\\.\\.(?:\\.|\\d+)/,",
                "\t'number': [",
                "\t\t/\\b(?:NaN|Inf)\\b/,",
                "\t\t/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/",
                "\t],",
                "\t'keyword': /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,",
                "\t'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,",
                "\t'punctuation': /[(){}\\[\\],;]/",
                "};"
            ]
        },
        "prism-r.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.r={comment:/#.*/,string:{pattern:/(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"percent-operator\":{pattern:/%[^%\\s]*%/,alias:\"operator\"},boolean:/\\b(?:TRUE|FALSE)\\b/,ellipsis:/\\.\\.(?:\\.|\\d+)/,number:[/\\b(?:NaN|Inf)\\b/,/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],keyword:/\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,operator:/->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,punctuation:/[(){}\\[\\],;]/};"
            ]
        },
        "prism-racket.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.racket = Prism.languages.extend('scheme', {",
                "\t'lambda-parameter': {",
                "\t\t// the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.",
                "\t\t// this will just prevent false positives of the `function` pattern",
                "\t\tpattern: /(\\(lambda\\s+\\()[^()'\\s]+/,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "// Add brackets to racket",
                "// The basic idea here is to go through all pattens of Scheme and replace all occurrences of \"(\" with the union of \"(\"",
                "// and \"[\"; Similar for \")\". This is a bit tricky because \"(\" can be escaped or inside a character set. Both cases",
                "// have to be handled differently and, of course, we don't want to destroy groups, so we can only replace literal \"(\"",
                "// and \")\".",
                "// To do this, we use a regular expression which will parse any JS regular expression. It works because regexes are",
                "// matches from left to right and already matched text cannot be matched again. We use this to first capture all",
                "// escaped characters (not really, we don't get escape sequences but we don't need them). Because we already captured",
                "// all escaped characters, we know that any \"[\" character is the start of a character set, so we match that character",
                "// set whole.",
                "// With the regex parsed, we only have to replace all escaped \"(\" (they cannot be unescaped outside of character sets)",
                "// with /[([]/ and replace all \"(\" inside character sets.",
                "// Note: This method does not work for \"(\" that are escaped like this /\\x28/ or this /\\u0028/.",
                "Prism.languages.DFS(Prism.languages.racket, function (key, value) {",
                "\tif (Prism.util.type(value) === 'RegExp') {",
                "\t\tvar source = value.source.replace(/\\\\(.)|\\[\\^?((?:\\\\.|[^\\\\\\]])*)\\]/g, function (m, g1, g2) {",
                "\t\t\tif (g1) {",
                "\t\t\t\tif (g1 === '(') {",
                "\t\t\t\t\t// replace all '(' characters outside character sets",
                "\t\t\t\t\treturn '[([]';",
                "\t\t\t\t}",
                "\t\t\t\tif (g1 === ')') {",
                "\t\t\t\t\t// replace all ')' characters outside character sets",
                "\t\t\t\t\treturn '[)\\\\]]';",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t\tif (g2) {",
                "\t\t\t\tvar prefix = m[1] === '^' ? '[^' : '[';",
                "\t\t\t\treturn prefix + g2.replace(/\\\\(.)|[()]/g, function (m, g1) {",
                "\t\t\t\t\tif (m === '(' || g1 === '(') {",
                "\t\t\t\t\t\t// replace all '(' characters inside character sets",
                "\t\t\t\t\t\treturn '([';",
                "\t\t\t\t\t}",
                "\t\t\t\t\tif (m === ')' || g1 === ')') {",
                "\t\t\t\t\t\t// replace all ')' characters inside character sets",
                "\t\t\t\t\t\treturn ')\\\\]';",
                "\t\t\t\t\t}",
                "\t\t\t\t\treturn m;",
                "\t\t\t\t}) + ']';",
                "\t\t\t}",
                "\t\t\treturn m;",
                "\t\t});",
                "",
                "\t\tthis[key] = RegExp(source, value.flags);",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('racket', 'string', {",
                "\t'lang': {",
                "\t\tpattern: /^#lang.+/m,",
                "\t\tgreedy: true,",
                "\t\talias: 'keyword'",
                "\t}",
                "});",
                "",
                "Prism.languages.rkt = Prism.languages.racket;"
            ]
        },
        "prism-racket.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.racket=Prism.languages.extend(\"scheme\",{\"lambda-parameter\":{pattern:/(\\(lambda\\s+\\()[^()'\\s]+/,lookbehind:!0}}),Prism.languages.DFS(Prism.languages.racket,function(e,a){if(\"RegExp\"===Prism.util.type(a)){var r=a.source.replace(/\\\\(.)|\\[\\^?((?:\\\\.|[^\\\\\\]])*)\\]/g,function(e,a,r){if(a){if(\"(\"===a)return\"[([]\";if(\")\"===a)return\"[)\\\\]]\"}return r?(\"^\"===e[1]?\"[^\":\"[\")+r.replace(/\\\\(.)|[()]/g,function(e,a){return\"(\"===e||\"(\"===a?\"([\":\")\"===e||\")\"===a?\")\\\\]\":e})+\"]\":e});this[e]=RegExp(r,a.flags)}}),Prism.languages.insertBefore(\"racket\",\"string\",{lang:{pattern:/^#lang.+/m,greedy:!0,alias:\"keyword\"}}),Prism.languages.rkt=Prism.languages.racket;"
            ]
        },
        "prism-reason.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.reason = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// 'class-name' must be matched *after* 'constructor' defined below",
                "\t'class-name': /\\b[A-Z]\\w*/,",
                "\t'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,",
                "\t'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/",
                "});",
                "Prism.languages.insertBefore('reason', 'class-name', {",
                "\t'character': {",
                "\t\tpattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'constructor': {",
                "\t\t// Negative look-ahead prevents from matching things like String.capitalize",
                "\t\tpattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /\\b[a-z]\\w*(?=::)/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});",
                "",
                "// We can't match functions property, so let's not even try.",
                "delete Prism.languages.reason.function;"
            ]
        },
        "prism-reason.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.reason=Prism.languages.extend(\"clike\",{string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,greedy:!0},\"class-name\":/\\b[A-Z]\\w*/,keyword:/\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,operator:/\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/}),Prism.languages.insertBefore(\"reason\",\"class-name\",{character:{pattern:/'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,alias:\"string\"},constructor:{pattern:/\\b[A-Z]\\w*\\b(?!\\s*\\.)/,alias:\"variable\"},label:{pattern:/\\b[a-z]\\w*(?=::)/,alias:\"symbol\"}}),delete Prism.languages.reason.function;"
            ]
        },
        "prism-regex.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar specialEscape = {",
                "\t\tpattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,",
                "\t\talias: 'escape'",
                "\t};",
                "\tvar escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;",
                "\tvar charClass = {",
                "\t\tpattern: /\\.|\\\\[wsd]|\\\\p{[^{}]+}/i,",
                "\t\talias: 'class-name'",
                "\t};",
                "\tvar charClassWithoutDot = {",
                "\t\tpattern: /\\\\[wsd]|\\\\p{[^{}]+}/i,",
                "\t\talias: 'class-name'",
                "\t};",
                "",
                "\tvar rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';",
                "\tvar range = RegExp(rangeChar + '-' + rangeChar);",
                "",
                "\t// the name of a capturing group",
                "\tvar groupName = {",
                "\t\tpattern: /(<|')[^<>']+(?=[>']$)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t};",
                "",
                "\tPrism.languages.regex = {",
                "\t\t'charset': {",
                "\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'charset-negation': {",
                "\t\t\t\t\tpattern: /(^\\[)\\^/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'operator'",
                "\t\t\t\t},",
                "\t\t\t\t'charset-punctuation': {",
                "\t\t\t\t\tpattern: /^\\[|\\]$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\t'range': {",
                "\t\t\t\t\tpattern: range,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'escape': escape,",
                "\t\t\t\t\t\t'range-punctuation': {",
                "\t\t\t\t\t\t\tpattern: /-/,",
                "\t\t\t\t\t\t\talias: 'operator'",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'special-escape': specialEscape,",
                "\t\t\t\t'charclass': charClassWithoutDot,",
                "\t\t\t\t'escape': escape",
                "\t\t\t}",
                "\t\t},",
                "\t\t'special-escape': specialEscape,",
                "\t\t'charclass': charClass,",
                "\t\t'backreference': [",
                "\t\t\t{",
                "\t\t\t\t// a backreference which is not an octal escape",
                "\t\t\t\tpattern: /\\\\(?![123][0-7]{2})[1-9]/,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\\\k<[^<>']+>/,",
                "\t\t\t\talias: 'keyword',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'group-name': groupName",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'anchor': {",
                "\t\t\tpattern: /[$^]|\\\\[ABbGZz]/,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'escape': escape,",
                "\t\t'group': [",
                "\t\t\t{",
                "\t\t\t\t// https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html",
                "\t\t\t\t// https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs",
                "",
                "\t\t\t\t// (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)",
                "\t\t\t\tpattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,",
                "\t\t\t\talias: 'punctuation',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'group-name': groupName",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\)/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'quantifier': {",
                "\t\t\tpattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,",
                "\t\t\talias: 'number'",
                "\t\t},",
                "\t\t'alternation': {",
                "\t\t\tpattern: /\\|/,",
                "\t\t\talias: 'keyword'",
                "\t\t}",
                "\t};",
                "",
                "}(Prism))"
            ]
        },
        "prism-regex.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e={pattern:/\\\\[\\\\(){}[\\]^$+*?|.]/,alias:\"escape\"},n=/\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/,t=\"(?:[^\\\\\\\\-]|\"+n.source+\")\",s=RegExp(t+\"-\"+t),i={pattern:/(<|')[^<>']+(?=[>']$)/,lookbehind:!0,alias:\"variable\"};a.languages.regex={charset:{pattern:/((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,lookbehind:!0,inside:{\"charset-negation\":{pattern:/(^\\[)\\^/,lookbehind:!0,alias:\"operator\"},\"charset-punctuation\":{pattern:/^\\[|\\]$/,alias:\"punctuation\"},range:{pattern:s,inside:{escape:n,\"range-punctuation\":{pattern:/-/,alias:\"operator\"}}},\"special-escape\":e,charclass:{pattern:/\\\\[wsd]|\\\\p{[^{}]+}/i,alias:\"class-name\"},escape:n}},\"special-escape\":e,charclass:{pattern:/\\.|\\\\[wsd]|\\\\p{[^{}]+}/i,alias:\"class-name\"},backreference:[{pattern:/\\\\(?![123][0-7]{2})[1-9]/,alias:\"keyword\"},{pattern:/\\\\k<[^<>']+>/,alias:\"keyword\",inside:{\"group-name\":i}}],anchor:{pattern:/[$^]|\\\\[ABbGZz]/,alias:\"function\"},escape:n,group:[{pattern:/\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,alias:\"punctuation\",inside:{\"group-name\":i}},{pattern:/\\)/,alias:\"punctuation\"}],quantifier:{pattern:/(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,alias:\"number\"},alternation:{pattern:/\\|/,alias:\"keyword\"}}}(Prism);"
            ]
        },
        "prism-renpy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.renpy= {",
                "\t// TODO Write tests.",
                "",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.+/,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'string': {",
                "\t\tpattern: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'function' : /[a-z_]\\w*(?=\\()/i,",
                "",
                "\t'property': /\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,",
                "",
                "\t'tag': /\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,",
                "",
                "\t'keyword' : /\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,",
                "",
                "\t'boolean' : /\\b(?:[Tt]rue|[Ff]alse)\\b/,",
                "",
                "\t'number' : /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,",
                "",
                "\t'operator' : /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,",
                "",
                "\t'punctuation' : /[{}[\\];(),.:]/",
                "};",
                "",
                "Prism.languages.rpy = Prism.languages.renpy;"
            ]
        },
        "prism-renpy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.renpy={comment:{pattern:/(^|[^\\\\])#.+/,lookbehind:!0},string:{pattern:/(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,greedy:!0},function:/[a-z_]\\w*(?=\\()/i,property:/\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,tag:/\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,keyword:/\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,boolean:/\\b(?:[Tt]rue|[Ff]alse)\\b/,number:/(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,punctuation:/[{}[\\];(),.:]/},Prism.languages.rpy=Prism.languages.renpy;"
            ]
        },
        "prism-rest.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rest = {",
                "\t'table': [",
                "\t\t{",
                "\t\t\tpattern: /(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1[+|].+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\||(?:\\+[=-]+)+\\+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\s*)=+ [ =]*=(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1=+ [ =]*=(?=(?:\\r?\\n|\\r){2}|\\s*$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[=-]+/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t// Directive-like patterns",
                "",
                "\t'substitution-def': {",
                "\t\tpattern: /(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'substitution': {",
                "\t\t\t\tpattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,",
                "\t\t\t\talias: 'attr-value',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^\\||\\|$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /( +)(?! )[^:]+::/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'function',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /::$/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'link-target': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*\\.\\. )\\[[^\\]]+\\]/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\[|\\]$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^_|:$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'directive': {",
                "\t\tpattern: /(^\\s*\\.\\. )[^:]+::/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /::$/",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\t// The two alternatives try to prevent highlighting of blank comments",
                "\t\tpattern: /(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'title': [",
                "\t\t// Overlined and underlined",
                "\t\t{",
                "\t\t\tpattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,",
                "\t\t\t\t'important': /.+/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Underlined only",
                "\t\t{",
                "\t\t\tpattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,",
                "\t\t\t\t'important': /.+/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'hr': {",
                "\t\tpattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'field': {",
                "\t\tpattern: /(^\\s*):[^:\\r\\n]+:(?= )/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'attr-name'",
                "\t},",
                "\t'command-line-option': {",
                "\t\tpattern: /(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'literal-block': {",
                "\t\tpattern: /::(?:\\r?\\n|\\r){2}([ \\t]+)(?![ \\t]).+(?:(?:\\r?\\n|\\r)\\1.+)*/,",
                "\t\tinside: {",
                "\t\t\t'literal-block-punctuation': {",
                "\t\t\t\tpattern: /^::/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'quoted-literal-block': {",
                "\t\tpattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,",
                "\t\tinside: {",
                "\t\t\t'literal-block-punctuation': {",
                "\t\t\t\tpattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'list-bullet': {",
                "\t\tpattern: /(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'doctest-block': {",
                "\t\tpattern: /(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^>>>/",
                "\t\t}",
                "\t},",
                "",
                "\t'inline': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'bold': {",
                "\t\t\t\t\tpattern: /(^\\*\\*).+(?=\\*\\*$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'italic': {",
                "\t\t\t\t\tpattern: /(^\\*).+(?=\\*$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'inline-literal': {",
                "\t\t\t\t\tpattern: /(^``).+(?=``$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'symbol'",
                "\t\t\t\t},",
                "\t\t\t\t'role': {",
                "\t\t\t\t\tpattern: /^:[^:]+:|:[^:]+:$/,",
                "\t\t\t\t\talias: 'function',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^:|:$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'interpreted-text': {",
                "\t\t\t\t\tpattern: /(^`).+(?=`$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'substitution': {",
                "\t\t\t\t\tpattern: /(^\\|).+(?=\\|$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\*\\*?|``?|\\|/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t'link': [",
                "\t\t{",
                "\t\t\tpattern: /\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\[|\\]_$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(?:\\b[a-z\\d]+(?:[_.:+][a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^_?`|`$|`?_?_$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t// Line block start,",
                "\t// quote attribution,",
                "\t// explicit markup start,",
                "\t// and anonymous hyperlink target shortcut (__)",
                "\t'punctuation': {",
                "\t\tpattern: /(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-rest.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rest={table:[{pattern:/(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1[+|].+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,lookbehind:!0,inside:{punctuation:/\\||(?:\\+[=-]+)+\\+/}},{pattern:/(\\s*)=+ [ =]*=(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1=+ [ =]*=(?=(?:\\r?\\n|\\r){2}|\\s*$)/,lookbehind:!0,inside:{punctuation:/[=-]+/}}],\"substitution-def\":{pattern:/(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,lookbehind:!0,inside:{substitution:{pattern:/^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,alias:\"attr-value\",inside:{punctuation:/^\\||\\|$/}},directive:{pattern:/( +)(?! )[^:]+::/,lookbehind:!0,alias:\"function\",inside:{punctuation:/::$/}}}},\"link-target\":[{pattern:/(^\\s*\\.\\. )\\[[^\\]]+\\]/m,lookbehind:!0,alias:\"string\",inside:{punctuation:/^\\[|\\]$/}},{pattern:/(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,lookbehind:!0,alias:\"string\",inside:{punctuation:/^_|:$/}}],directive:{pattern:/(^\\s*\\.\\. )[^:]+::/m,lookbehind:!0,alias:\"function\",inside:{punctuation:/::$/}},comment:{pattern:/(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,lookbehind:!0},title:[{pattern:/^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,inside:{punctuation:/^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,important:/.+/}},{pattern:/(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,lookbehind:!0,inside:{punctuation:/[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,important:/.+/}}],hr:{pattern:/((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,lookbehind:!0,alias:\"punctuation\"},field:{pattern:/(^\\s*):[^:\\r\\n]+:(?= )/m,lookbehind:!0,alias:\"attr-name\"},\"command-line-option\":{pattern:/(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,lookbehind:!0,alias:\"symbol\"},\"literal-block\":{pattern:/::(?:\\r?\\n|\\r){2}([ \\t]+)(?![ \\t]).+(?:(?:\\r?\\n|\\r)\\1.+)*/,inside:{\"literal-block-punctuation\":{pattern:/^::/,alias:\"punctuation\"}}},\"quoted-literal-block\":{pattern:/::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,inside:{\"literal-block-punctuation\":{pattern:/^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,alias:\"punctuation\"}}},\"list-bullet\":{pattern:/(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,lookbehind:!0,alias:\"punctuation\"},\"doctest-block\":{pattern:/(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,lookbehind:!0,inside:{punctuation:/^>>>/}},inline:[{pattern:/(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,lookbehind:!0,inside:{bold:{pattern:/(^\\*\\*).+(?=\\*\\*$)/,lookbehind:!0},italic:{pattern:/(^\\*).+(?=\\*$)/,lookbehind:!0},\"inline-literal\":{pattern:/(^``).+(?=``$)/,lookbehind:!0,alias:\"symbol\"},role:{pattern:/^:[^:]+:|:[^:]+:$/,alias:\"function\",inside:{punctuation:/^:|:$/}},\"interpreted-text\":{pattern:/(^`).+(?=`$)/,lookbehind:!0,alias:\"attr-value\"},substitution:{pattern:/(^\\|).+(?=\\|$)/,lookbehind:!0,alias:\"attr-value\"},punctuation:/\\*\\*?|``?|\\|/}}],link:[{pattern:/\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,alias:\"string\",inside:{punctuation:/^\\[|\\]_$/}},{pattern:/(?:\\b[a-z\\d]+(?:[_.:+][a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,alias:\"string\",inside:{punctuation:/^_?`|`$|`?_?_$/}}],punctuation:{pattern:/(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,lookbehind:!0}};"
            ]
        },
        "prism-rip.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rip = {",
                "\t'comment': /#.*/,",
                "",
                "\t'keyword': /(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,",
                "",
                "\t'builtin': /@|\\bSystem\\b/,",
                "",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "",
                "\t'date': /\\b\\d{4}-\\d{2}-\\d{2}\\b/,",
                "\t'time': /\\b\\d{2}:\\d{2}:\\d{2}\\b/,",
                "\t'datetime': /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,",
                "",
                "\t'character': /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,",
                "",
                "\t'regex': {",
                "\t\tpattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\n\\r\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/(?=\\s*(?:$|[\\r\\n,.;})]))/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'symbol': /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /[+-]?\\b(?:\\d+\\.\\d+|\\d+)\\b/,",
                "",
                "\t'punctuation': /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,",
                "",
                "\t'reference': /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/",
                "};"
            ]
        },
        "prism-rip.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rip={comment:/#.*/,keyword:/(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,builtin:/@|\\bSystem\\b/,boolean:/\\b(?:true|false)\\b/,date:/\\b\\d{4}-\\d{2}-\\d{2}\\b/,time:/\\b\\d{2}:\\d{2}:\\d{2}\\b/,datetime:/\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,character:/\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,regex:{pattern:/(^|[^/])\\/(?!\\/)(?:\\[[^\\n\\r\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/(?=\\s*(?:$|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0},symbol:/:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},number:/[+-]?\\b(?:\\d+\\.\\d+|\\d+)\\b/,punctuation:/(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,reference:/[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/};"
            ]
        },
        "prism-roboconf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.roboconf = {",
                "\t'comment': /#.*/,",
                "\t'keyword': {",
                "\t\t'pattern': /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'component': {",
                "\t\tpattern: /[\\w-]+(?=[ \\t]*\\{)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'property': /[\\w.-]+(?=[ \\t]*:)/,",
                "\t'value': {",
                "\t\tpattern: /(=[ \\t]*(?![ \\t]))[^,;]+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'attr-value'",
                "\t},",
                "\t'optional': {",
                "\t\tpattern: /\\(optional\\)/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'wildcard': {",
                "\t\tpattern: /(\\.)\\*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'punctuation': /[{},.;:=]/",
                "};"
            ]
        },
        "prism-roboconf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.roboconf={comment:/#.*/,keyword:{pattern:/(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,lookbehind:!0},component:{pattern:/[\\w-]+(?=[ \\t]*\\{)/,alias:\"variable\"},property:/[\\w.-]+(?=[ \\t]*:)/,value:{pattern:/(=[ \\t]*(?![ \\t]))[^,;]+/,lookbehind:!0,alias:\"attr-value\"},optional:{pattern:/\\(optional\\)/,alias:\"builtin\"},wildcard:{pattern:/(\\.)\\*/,lookbehind:!0,alias:\"operator\"},punctuation:/[{},.;:=]/};"
            ]
        },
        "prism-robotframework.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar comment = {",
                "\t\tpattern: /(^[ \\t]*| {2}|\\t)#.*/m,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t};",
                "",
                "\tvar variable = {",
                "\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^[$@&%]\\{|\\}$/",
                "\t\t}",
                "\t};",
                "",
                "\tfunction createSection(name, inside) {",
                "\t\tvar extendecInside = {};",
                "",
                "\t\textendecInside['section-header'] = {",
                "\t\t\tpattern: /^ ?\\*{3}.+?\\*{3}/,",
                "\t\t\talias: 'keyword'",
                "\t\t};",
                "",
                "\t\t// copy inside tokens",
                "\t\tfor (var token in inside) {",
                "\t\t\textendecInside[token] = inside[token];",
                "\t\t}",
                "",
                "\t\textendecInside['tag'] = {",
                "\t\t\tpattern: /([\\r\\n](?:  |\\t)[ \\t]*)\\[[-\\w]+\\]/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\[|\\]/",
                "\t\t\t}",
                "\t\t};",
                "\t\textendecInside['variable'] = variable;",
                "\t\textendecInside['comment'] = comment;",
                "",
                "\t\treturn {",
                "\t\t\tpattern: RegExp(/^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(/<name>/g, function () { return name; }), 'im'),",
                "\t\t\talias: 'section',",
                "\t\t\tinside: extendecInside",
                "\t\t};",
                "\t}",
                "",
                "",
                "\tvar docTag = {",
                "\t\tpattern: /(\\[Documentation\\](?:  |\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t};",
                "",
                "\tvar testNameLike = {",
                "\t\tpattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function',",
                "\t\tinside: {",
                "\t\t\t'variable': variable",
                "\t\t}",
                "\t};",
                "",
                "\tvar testPropertyLike = {",
                "\t\tpattern: /([\\r\\n](?:  |\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'variable': variable",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages['robotframework'] = {",
                "\t\t'settings': createSection('Settings', {",
                "\t\t\t'documentation': {",
                "\t\t\t\tpattern: /([\\r\\n] ?Documentation(?:  |\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t'property': {",
                "\t\t\t\tpattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t}),",
                "\t\t'variables': createSection('Variables'),",
                "\t\t'test-cases': createSection('Test Cases', {",
                "\t\t\t'test-name': testNameLike,",
                "\t\t\t'documentation': docTag,",
                "\t\t\t'property': testPropertyLike",
                "\t\t}),",
                "\t\t'keywords': createSection('Keywords', {",
                "\t\t\t'keyword-name': testNameLike,",
                "\t\t\t'documentation': docTag,",
                "\t\t\t'property': testPropertyLike",
                "\t\t}),",
                "\t\t'tasks': createSection('Tasks', {",
                "\t\t\t'task-name': testNameLike,",
                "\t\t\t'documentation': docTag,",
                "\t\t\t'property': testPropertyLike",
                "\t\t}),",
                "\t\t'comment': comment",
                "\t};",
                "",
                "\tPrism.languages.robot = Prism.languages['robotframework'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-robotframework.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){var r={pattern:/(^[ \\t]*| {2}|\\t)#.*/m,lookbehind:!0,greedy:!0},o={pattern:/((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,lookbehind:!0,inside:{punctuation:/^[$@&%]\\{|\\}$/}};function n(t,n){var e={\"section-header\":{pattern:/^ ?\\*{3}.+?\\*{3}/,alias:\"keyword\"}};for(var a in n)e[a]=n[a];return e.tag={pattern:/([\\r\\n](?:  |\\t)[ \\t]*)\\[[-\\w]+\\]/,lookbehind:!0,inside:{punctuation:/\\[|\\]/}},e.variable=o,e.comment=r,{pattern:RegExp(\"^ ?\\\\*{3}[ \\t]*<name>[ \\t]*\\\\*{3}(?:.|[\\r\\n](?!\\\\*{3}))*\".replace(/<name>/g,function(){return t}),\"im\"),alias:\"section\",inside:e}}var e={pattern:/(\\[Documentation\\](?:  |\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,lookbehind:!0,alias:\"string\"},a={pattern:/([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,lookbehind:!0,alias:\"function\",inside:{variable:o}},i={pattern:/([\\r\\n](?:  |\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,lookbehind:!0,inside:{variable:o}};t.languages.robotframework={settings:n(\"Settings\",{documentation:{pattern:/([\\r\\n] ?Documentation(?:  |\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,lookbehind:!0,alias:\"string\"},property:{pattern:/([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,lookbehind:!0}}),variables:n(\"Variables\"),\"test-cases\":n(\"Test Cases\",{\"test-name\":a,documentation:e,property:i}),keywords:n(\"Keywords\",{\"keyword-name\":a,documentation:e,property:i}),tasks:n(\"Tasks\",{\"task-name\":a,documentation:e,property:i}),comment:r},t.languages.robot=t.languages.robotframework}(Prism);"
            ]
        },
        "prism-ruby.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Samuel Flores",
                " *",
                " * Adds the following new token classes:",
                " *     constant, builtin, variable, symbol, regex",
                " */",
                "(function (Prism) {",
                "\tPrism.languages.ruby = Prism.languages.extend('clike', {",
                "\t\t'comment': [",
                "\t\t\t/#.*/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /^=begin\\s[\\s\\S]*?^=end/m,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'class-name': {",
                "\t\t\tpattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[.\\\\]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/",
                "\t});",
                "",
                "\tvar interpolation = {",
                "\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.ruby",
                "\t\t}",
                "\t};",
                "",
                "\tdelete Prism.languages.ruby.function;",
                "",
                "\tPrism.languages.insertBefore('ruby', 'keyword', {",
                "\t\t'regex': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/%r/.source + '(?:' + [",
                "\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/.source,",
                "\t\t\t\t\t/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/.source,",
                "\t\t\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\t\t\t/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/.source,",
                "\t\t\t\t\t/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/.source,",
                "\t\t\t\t\t/<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/.source",
                "\t\t\t\t].join('|') + ')'),",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t'symbol': {",
                "\t\t\tpattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'method-definition': {",
                "\t\t\tpattern: /(\\bdef\\s+)[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /\\w+$/,",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('ruby', 'number', {",
                "\t\t'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,",
                "\t\t'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/",
                "\t});",
                "",
                "\tPrism.languages.ruby.string = [",
                "\t\t{",
                "\t\t\tpattern: RegExp(/%[qQiIwWxs]?/.source + '(?:' + [",
                "\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,",
                "\t\t\t\t/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,",
                "\t\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\t\t/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,",
                "\t\t\t\t/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,",
                "\t\t\t\t/<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source",
                "\t\t\t].join('|') + ')'),",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.rb = Prism.languages.ruby;",
                "}(Prism));"
            ]
        },
        "prism-ruby.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.ruby=e.languages.extend(\"clike\",{comment:[/#.*/,{pattern:/^=begin\\s[\\s\\S]*?^=end/m,greedy:!0}],\"class-name\":{pattern:/(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/});var n={pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"tag\"},rest:e.languages.ruby}};delete e.languages.ruby.function,e.languages.insertBefore(\"ruby\",\"keyword\",{regex:[{pattern:RegExp(\"%r(?:\"+[\"([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[^])*\\\\1[gim]{0,3}\",\"\\\\((?:[^()\\\\\\\\]|\\\\\\\\[^])*\\\\)[gim]{0,3}\",\"\\\\{(?:[^#{}\\\\\\\\]|#(?:\\\\{[^}]+\\\\})?|\\\\\\\\[^])*\\\\}[gim]{0,3}\",\"\\\\[(?:[^\\\\[\\\\]\\\\\\\\]|\\\\\\\\[^])*\\\\][gim]{0,3}\",\"<(?:[^<>\\\\\\\\]|\\\\\\\\[^])*>[gim]{0,3}\"].join(\"|\")+\")\"),greedy:!0,inside:{interpolation:n}},{pattern:/(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0}],variable:/[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,lookbehind:!0},\"method-definition\":{pattern:/(\\bdef\\s+)[\\w.]+/,lookbehind:!0,inside:{function:/\\w+$/,rest:e.languages.ruby}}}),e.languages.insertBefore(\"ruby\",\"number\",{builtin:/\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,constant:/\\b[A-Z]\\w*(?:[?!]|\\b)/}),e.languages.ruby.string=[{pattern:RegExp(\"%[qQiIwWxs]?(?:\"+[\"([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[^])*\\\\1\",\"\\\\((?:[^()\\\\\\\\]|\\\\\\\\[^])*\\\\)\",\"\\\\{(?:[^#{}\\\\\\\\]|#(?:\\\\{[^}]+\\\\})?|\\\\\\\\[^])*\\\\}\",\"\\\\[(?:[^\\\\[\\\\]\\\\\\\\]|\\\\\\\\[^])*\\\\]\",\"<(?:[^<>\\\\\\\\]|\\\\\\\\[^])*>\"].join(\"|\")+\")\"),greedy:!0,inside:{interpolation:n}},{pattern:/(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,greedy:!0,inside:{interpolation:n}}],e.languages.rb=e.languages.ruby}(Prism);"
            ]
        },
        "prism-rust.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;",
                "\tfor (var i = 0; i < 2; i++) {",
                "\t\t// support 4 levels of nested comments",
                "\t\tmultilineComment = multilineComment.replace(/<self>/g, function () { return multilineComment; });",
                "\t}",
                "\tmultilineComment = multilineComment.replace(/<self>/g, function () { return /[^\\s\\S]/.source; });",
                "",
                "",
                "\tPrism.languages.rust = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/(^|[^\\\\])/.source + multilineComment),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'string': {",
                "\t\t\tpattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'char': {",
                "\t\t\tpattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'attribute': {",
                "\t\t\tpattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'attr-name',",
                "\t\t\tinside: {",
                "\t\t\t\t'string': null // see below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Closure params should not be confused with bitwise OR |",
                "\t\t'closure-params': {",
                "\t\t\tpattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'closure-punctuation': {",
                "\t\t\t\t\tpattern: /^\\||\\|$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\trest: null // see below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'lifetime-annotation': {",
                "\t\t\tpattern: /'\\w+/,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "",
                "\t\t'fragment-specifier': {",
                "\t\t\tpattern: /(\\$\\w+:)[a-z]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'variable': /\\$\\w+/,",
                "",
                "\t\t'function-definition': {",
                "\t\t\tpattern: /(\\bfn\\s+)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'type-definition': {",
                "\t\t\tpattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'module-declaration': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'namespace'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'namespace',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /::/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': [",
                "\t\t\t// https://github.com/rust-lang/reference/blob/master/src/keywords.md",
                "\t\t\t/\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,",
                "\t\t\t// primitives and str",
                "\t\t\t// https://doc.rust-lang.org/stable/rust-by-example/primitives.html",
                "\t\t\t/\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/",
                "\t\t],",
                "",
                "\t\t// functions can technically start with an upper-case letter, but this will introduce a lot of false positives",
                "\t\t// and Rust's naming conventions recommend snake_case anyway.",
                "\t\t// https://doc.rust-lang.org/1.0.0/style/style/naming/README.html",
                "\t\t'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,",
                "\t\t'macro': {",
                "\t\t\tpattern: /\\w+!/,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,",
                "\t\t'class-name': /\\b[A-Z]\\w*\\b/,",
                "",
                "\t\t'namespace': {",
                "\t\t\tpattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /::/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Hex, oct, bin, dec numbers with visual separators and type suffix",
                "\t\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,",
                "\t\t'boolean': /\\b(?:false|true)\\b/,",
                "\t\t'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,",
                "\t\t'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/",
                "\t};",
                "",
                "\tPrism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;",
                "\tPrism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-rust.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){for(var a=\"/\\\\*(?:[^*/]|\\\\*(?!/)|/(?!\\\\*)|<self>)*\\\\*/\",t=0;t<2;t++)a=a.replace(/<self>/g,function(){return a});a=a.replace(/<self>/g,function(){return\"[^\\\\s\\\\S]\"}),e.languages.rust={comment:[{pattern:RegExp(\"(^|[^\\\\\\\\])\"+a),lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,greedy:!0},char:{pattern:/b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,greedy:!0,alias:\"string\"},attribute:{pattern:/#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,greedy:!0,alias:\"attr-name\",inside:{string:null}},\"closure-params\":{pattern:/([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,lookbehind:!0,greedy:!0,inside:{\"closure-punctuation\":{pattern:/^\\||\\|$/,alias:\"punctuation\"},rest:null}},\"lifetime-annotation\":{pattern:/'\\w+/,alias:\"symbol\"},\"fragment-specifier\":{pattern:/(\\$\\w+:)[a-z]+/,lookbehind:!0,alias:\"punctuation\"},variable:/\\$\\w+/,\"function-definition\":{pattern:/(\\bfn\\s+)\\w+/,lookbehind:!0,alias:\"function\"},\"type-definition\":{pattern:/(\\b(?:enum|struct|union)\\s+)\\w+/,lookbehind:!0,alias:\"class-name\"},\"module-declaration\":[{pattern:/(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,lookbehind:!0,alias:\"namespace\"},{pattern:/(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,lookbehind:!0,alias:\"namespace\",inside:{punctuation:/::/}}],keyword:[/\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,/\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/],function:/\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,macro:{pattern:/\\w+!/,alias:\"property\"},constant:/\\b[A-Z_][A-Z_\\d]+\\b/,\"class-name\":/\\b[A-Z]\\w*\\b/,namespace:{pattern:/(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,inside:{punctuation:/::/}},number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,boolean:/\\b(?:false|true)\\b/,punctuation:/->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,operator:/[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/},e.languages.rust[\"closure-params\"].inside.rest=e.languages.rust,e.languages.rust.attribute.inside.string=e.languages.rust.string}(Prism);"
            ]
        },
        "prism-sas.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source;",
                "",
                "\tvar number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i;",
                "\tvar numericConstant = {",
                "\t\tpattern: RegExp(stringPattern + '[bx]'),",
                "\t\talias: 'number'",
                "\t};",
                "",
                "\tvar macroVariable = {",
                "\t\tpattern: /&[a-z_][a-z_0-9]*/i",
                "\t};",
                "",
                "\tvar macroKeyword = {",
                "\t\tpattern: /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMGLOBL|SYMLOCAL|SYMEXIST|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t};",
                "",
                "\tvar step = {",
                "\t\tpattern: /(^|\\s+)(?:proc\\s+\\w+|quit|run|data(?!\\=))\\b/i,",
                "\t\talias: 'keyword',",
                "\t\tlookbehind: true",
                "\t};",
                "",
                "\tvar comment = [",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*|;\\s*)\\*[^;]*;/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t];",
                "",
                "\tvar string = {",
                "\t\tpattern: RegExp(stringPattern),",
                "\t\tgreedy: true",
                "\t};",
                "",
                "\tvar punctuation = /[$%@.(){}\\[\\];,\\\\]/;",
                "",
                "\tvar func = {",
                "\t\tpattern: /%?\\w+(?=\\()/,",
                "\t\talias: 'keyword'",
                "\t};",
                "",
                "\tvar args = {",
                "\t\t'function': func,",
                "\t\t'arg-value': {",
                "\t\t\tpattern: /(\\s*=\\s*)[A-Z\\.]+/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'operator': /=/,",
                "\t\t'macro-variable': macroVariable,",
                "\t\t'arg': {",
                "\t\t\tpattern: /[A-Z]+/i,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'number': number,",
                "\t\t'numeric-constant': numericConstant,",
                "\t\t'punctuation': punctuation,",
                "\t\t'string': string",
                "\t};",
                "",
                "\tvar format = {",
                "\t\tpattern: /\\b(?:format|put)\\b=?[\\w'$.]+/im,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^(?:format|put)(?=\\=)/i,",
                "\t\t\t'equals': /=/,",
                "\t\t\t'format': {",
                "\t\t\t\tpattern: /(?:\\w|\\$\\d)+\\.\\d?/i,",
                "\t\t\t\talias: 'number'",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tvar altformat = {",
                "\t\tpattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^(?:format|put)/i,",
                "\t\t\t'format': {",
                "\t\t\t\tpattern: /[\\w$]+\\.\\d?/,",
                "\t\t\t\talias: 'number'",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tvar globalStatements = {",
                "\t\tpattern: /((?:^|[\\s])=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t};",
                "",
                "\tvar submitStatement = {",
                "\t\tpattern: /(^|\\s)(?:submit(?:\\s+(?:load|parseonly|norun))?|endsubmit)\\b/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t};",
                "",
                "\tvar actionSets = /accessControl|cdm|aggregation|aStore|ruleMining|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|sccasl|clustering|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deepLearn|deepNeural|varReduce|simSystem|ds2|deduplication|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gam|gleam|graphSemiSupLearn|gVarCluster|hiddenMarkovModel|hyperGroup|image|iml|ica|kernalPca|langModel|ldaTopic|sparseML|mlTools|mixed|modelPublishing|mbc|network|optNetwork|neuralNet|nonlinear|nmf|nonParametricBayes|optimization|panel|pls|percentile|pca|phreg|qkb|qlim|quantreg|recommend|tsReconcile|deepRnn|regression|reinforcementLearn|robustPca|sampling|sparkEmbeddedProcess|search(?:Analytics)?|sentimentAnalysis|sequence|configuration|session(?:Prop)?|severity|simple|smartData|sandwich|spatialreg|stabilityMonitoring|spc|loadStreams|svDataDescription|svm|table|conditionalRandomFields|text(?:Rule(?:Develop|Score)|Mining|Parse|Topic|Util|Filters|Frequency)|tsInfo|timeData|transpose|uniTimeSeries/.source;",
                "",
                "\tvar casActions = {",
                "\t\tpattern: RegExp(/(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(/<act>/g, function () { return actionSets; }), 'i'),",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': RegExp(/(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function () { return actionSets; }), 'i'),",
                "\t\t\t'action': {",
                "\t\t\t\tpattern: /(?:action)/i,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t},",
                "\t\t\t'comment': comment,",
                "\t\t\t'function': func,",
                "\t\t\t'arg-value': args['arg-value'],",
                "\t\t\t'operator': args.operator,",
                "\t\t\t'argument': args.arg,",
                "\t\t\t'number': number,",
                "\t\t\t'numeric-constant': numericConstant,",
                "\t\t\t'punctuation': punctuation,",
                "\t\t\t'string': string",
                "\t\t}",
                "\t};",
                "",
                "\tvar keywords = {",
                "\t\tpattern: /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?=\\=)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|end(?:source|comp)?|entryTitle|else|eval(?:uate)?|exec(?:ute)?|exit|fill(?:attrs)?|file(?:name)?|flist|fnc|function(?:list)?|goto|global|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|name|noobs|nowd|_?null_|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|put|print|raise|ranexp|rannor|rbreak|retain|return|select|set|session|sessref|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|yaxisopts|y2axisopts)\\b/i,",
                "\t\tlookbehind: true,",
                "\t};",
                "",
                "\tPrism.languages.sas = {",
                "\t\t'datalines': {",
                "\t\t\tpattern: /^(\\s*)(?:(?:data)?lines|cards);[\\s\\S]+?^[ \\t]*;/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': {",
                "\t\t\t\t\tpattern: /^(?:(?:data)?lines|cards)/i",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /;/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'proc-sql': {",
                "\t\t\tpattern: /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|run|data);|(?![\\s\\S]))/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'sql': {",
                "\t\t\t\t\tpattern: RegExp(/^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(/<str>/g, function () { return stringPattern; }), 'im'),",
                "\t\t\t\t\talias: 'language-sql',",
                "\t\t\t\t\tinside: Prism.languages.sql",
                "\t\t\t\t},",
                "\t\t\t\t'global-statements': globalStatements,",
                "\t\t\t\t'sql-statements': {",
                "\t\t\t\t\tpattern: /(^|\\s)(?:disconnect\\s+from|exec(?:ute)?|begin|commit|rollback|reset|validate)\\b/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\t'number': number,",
                "\t\t\t\t'numeric-constant': numericConstant,",
                "\t\t\t\t'punctuation': punctuation,",
                "\t\t\t\t'string': string",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'proc-groovy': {",
                "\t\t\tpattern: /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|run|data);|(?![\\s\\S]))/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'comment': comment,",
                "\t\t\t\t'groovy': {",
                "\t\t\t\t\tpattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|parseonly|norun))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () { return stringPattern; }), 'im'),",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'language-groovy',",
                "\t\t\t\t\tinside: Prism.languages.groovy",
                "\t\t\t\t},",
                "\t\t\t\t'keyword': keywords,",
                "\t\t\t\t'submit-statement': submitStatement,",
                "\t\t\t\t'global-statements': globalStatements,",
                "\t\t\t\t'number': number,",
                "\t\t\t\t'numeric-constant': numericConstant,",
                "\t\t\t\t'punctuation': punctuation,",
                "\t\t\t\t'string': string",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'proc-lua': {",
                "\t\t\tpattern: /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|run|data);|(?![\\s\\S]))/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'comment': comment,",
                "\t\t\t\t'lua': {",
                "\t\t\t\t\tpattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|parseonly|norun))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () { return stringPattern; }), 'im'),",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'language-lua',",
                "\t\t\t\t\tinside: Prism.languages.lua",
                "\t\t\t\t},",
                "\t\t\t\t'keyword': keywords,",
                "\t\t\t\t'submit-statement': submitStatement,",
                "\t\t\t\t'global-statements': globalStatements,",
                "\t\t\t\t'number': number,",
                "\t\t\t\t'numeric-constant': numericConstant,",
                "\t\t\t\t'punctuation': punctuation,",
                "\t\t\t\t'string': string",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'proc-cas': {",
                "\t\t\tpattern: /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'comment': comment,",
                "\t\t\t\t'statement-var': {",
                "\t\t\t\t\tpattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "",
                "\t\t\t\t\t\t'statement': {",
                "\t\t\t\t\t\t\tpattern: /^saveresult\\s+\\S+/i,",
                "\t\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t\tkeyword: /^(?:saveresult)/i",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\trest: args",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'cas-actions': casActions,",
                "\t\t\t\t'statement': {",
                "\t\t\t\t\tpattern: /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: args",
                "\t\t\t\t},",
                "\t\t\t\t'step': step,",
                "\t\t\t\t'keyword': keywords,",
                "\t\t\t\t'function': func,",
                "\t\t\t\t'format': format,",
                "\t\t\t\t'altformat': altformat,",
                "\t\t\t\t'global-statements': globalStatements,",
                "\t\t\t\t'number': number,",
                "\t\t\t\t'numeric-constant': numericConstant,",
                "\t\t\t\t'punctuation': punctuation,",
                "\t\t\t\t'string': string",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'proc-args': {",
                "\t\t\tpattern: RegExp(/(^proc\\s+\\w+\\s+)(?!\\s)(?:[^;\"']|<str>)+;/.source.replace(/<str>/g, function () { return stringPattern; }), 'im'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: args",
                "\t\t},",
                "\t\t/*Special keywords within macros*/",
                "\t\t'macro-keyword': macroKeyword,",
                "\t\t'macro-variable': macroVariable,",
                "\t\t'macro-string-functions': {",
                "\t\t\tpattern: /((?:^|\\s|=))%(?:NRBQUOTE|NRQUOTE|NRSTR|BQUOTE|QUOTE|STR)\\(.*?(?:[^%]\\))/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': {",
                "\t\t\t\t\tpattern: /%(?:NRBQUOTE|NRQUOTE|NRSTR|BQUOTE|QUOTE|STR)/i,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\t'macro-keyword': macroKeyword,",
                "\t\t\t\t'macro-variable': macroVariable,",
                "\t\t\t\t'escaped-char': {",
                "\t\t\t\t\tpattern: /%['\"()<>=¬^~;,#]/i,",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': punctuation",
                "\t\t\t}",
                "\t\t},",
                "\t\t'macro-declaration': {",
                "\t\t\tpattern: /^%macro[^;]+(?=;)/im,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': /%macro/i,",
                "\t\t\t}",
                "\t\t},",
                "\t\t'macro-end': {",
                "\t\t\tpattern: /^%mend[^;]+(?=;)/im,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': /%mend/i,",
                "\t\t\t}",
                "\t\t},",
                "\t\t/*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */",
                "\t\t'macro': {",
                "\t\t\tpattern: /%_\\w+(?=\\()/,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'input': {",
                "\t\t\tpattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'input': {",
                "\t\t\t\t\talias: 'keyword',",
                "\t\t\t\t\tpattern: /^input/i,",
                "\t\t\t\t},",
                "\t\t\t\t'comment': comment,",
                "\t\t\t\t'number': number,",
                "\t\t\t\t'numeric-constant': numericConstant",
                "\t\t\t}",
                "\t\t},",
                "\t\t'options-args': {",
                "\t\t\tpattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: args",
                "\t\t},",
                "\t\t'cas-actions': casActions,",
                "\t\t'comment': comment,",
                "\t\t'function': func,",
                "\t\t'format': format,",
                "\t\t'altformat': altformat,",
                "\t\t'numeric-constant': numericConstant,",
                "\t\t'datetime': {",
                "\t\t\t// '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt",
                "\t\t\tpattern: RegExp(stringPattern + '(?:dt?|t)'),",
                "\t\t\talias: 'number'",
                "\t\t},",
                "\t\t'string': string,",
                "\t\t'step': step,",
                "\t\t'keyword': keywords,",
                "\t\t// In SAS Studio syntax highlighting, these operators are styled like keywords",
                "\t\t'operator-keyword': {",
                "\t\t\tpattern: /\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t// Decimal (1.2e23), hexadecimal (0c1x)",
                "\t\t'number': number,",
                "\t\t'operator': /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/i,",
                "\t\t'punctuation': punctuation",
                "\t};",
                "",
                "}(Prism));"
            ]
        },
        "prism-sas.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=\"(?:\\\"(?:\\\"\\\"|[^\\\"])*\\\"(?!\\\")|'(?:''|[^'])*'(?!'))\",a=/\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,n={pattern:RegExp(t+\"[bx]\"),alias:\"number\"},i={pattern:/&[a-z_][a-z_0-9]*/i},r={pattern:/((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMGLOBL|SYMLOCAL|SYMEXIST|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,lookbehind:!0,alias:\"keyword\"},s={pattern:/(^|\\s+)(?:proc\\s+\\w+|quit|run|data(?!\\=))\\b/i,alias:\"keyword\",lookbehind:!0},o=[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^\\s*|;\\s*)\\*[^;]*;/m,lookbehind:!0}],l={pattern:RegExp(t),greedy:!0},c=/[$%@.(){}\\[\\];,\\\\]/,d={pattern:/%?\\w+(?=\\()/,alias:\"keyword\"},p={function:d,\"arg-value\":{pattern:/(\\s*=\\s*)[A-Z\\.]+/i,lookbehind:!0},operator:/=/,\"macro-variable\":i,arg:{pattern:/[A-Z]+/i,alias:\"keyword\"},number:a,\"numeric-constant\":n,punctuation:c,string:l},u={pattern:/\\b(?:format|put)\\b=?[\\w'$.]+/im,inside:{keyword:/^(?:format|put)(?=\\=)/i,equals:/=/,format:{pattern:/(?:\\w|\\$\\d)+\\.\\d?/i,alias:\"number\"}}},m={pattern:/\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,inside:{keyword:/^(?:format|put)/i,format:{pattern:/[\\w$]+\\.\\d?/,alias:\"number\"}}},b={pattern:/((?:^|[\\s])=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,lookbehind:!0,alias:\"keyword\"},g={pattern:/(^|\\s)(?:submit(?:\\s+(?:load|parseonly|norun))?|endsubmit)\\b/i,lookbehind:!0,alias:\"keyword\"},k=\"accessControl|cdm|aggregation|aStore|ruleMining|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|sccasl|clustering|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deepLearn|deepNeural|varReduce|simSystem|ds2|deduplication|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gam|gleam|graphSemiSupLearn|gVarCluster|hiddenMarkovModel|hyperGroup|image|iml|ica|kernalPca|langModel|ldaTopic|sparseML|mlTools|mixed|modelPublishing|mbc|network|optNetwork|neuralNet|nonlinear|nmf|nonParametricBayes|optimization|panel|pls|percentile|pca|phreg|qkb|qlim|quantreg|recommend|tsReconcile|deepRnn|regression|reinforcementLearn|robustPca|sampling|sparkEmbeddedProcess|search(?:Analytics)?|sentimentAnalysis|sequence|configuration|session(?:Prop)?|severity|simple|smartData|sandwich|spatialreg|stabilityMonitoring|spc|loadStreams|svDataDescription|svm|table|conditionalRandomFields|text(?:Rule(?:Develop|Score)|Mining|Parse|Topic|Util|Filters|Frequency)|tsInfo|timeData|transpose|uniTimeSeries\",y={pattern:RegExp(\"(^|\\\\s)(?:action\\\\s+)?(?:<act>)\\\\.[a-z]+\\\\b[^;]+\".replace(/<act>/g,function(){return k}),\"i\"),lookbehind:!0,inside:{keyword:RegExp(\"(?:<act>)\\\\.[a-z]+\\\\b\".replace(/<act>/g,function(){return k}),\"i\"),action:{pattern:/(?:action)/i,alias:\"keyword\"},comment:o,function:d,\"arg-value\":p[\"arg-value\"],operator:p.operator,argument:p.arg,number:a,\"numeric-constant\":n,punctuation:c,string:l}},S={pattern:/((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?=\\=)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|end(?:source|comp)?|entryTitle|else|eval(?:uate)?|exec(?:ute)?|exit|fill(?:attrs)?|file(?:name)?|flist|fnc|function(?:list)?|goto|global|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|name|noobs|nowd|_?null_|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|put|print|raise|ranexp|rannor|rbreak|retain|return|select|set|session|sessref|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|yaxisopts|y2axisopts)\\b/i,lookbehind:!0};e.languages.sas={datalines:{pattern:/^(\\s*)(?:(?:data)?lines|cards);[\\s\\S]+?^[ \\t]*;/im,lookbehind:!0,alias:\"string\",inside:{keyword:{pattern:/^(?:(?:data)?lines|cards)/i},punctuation:/;/}},\"proc-sql\":{pattern:/(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|run|data);|(?![\\s\\S]))/im,lookbehind:!0,inside:{sql:{pattern:RegExp(\"^[ \\t]*(?:select|alter\\\\s+table|(?:create|describe|drop)\\\\s+(?:index|table(?:\\\\s+constraints)?|view)|create\\\\s+unique\\\\s+index|insert\\\\s+into|update)(?:<str>|[^;\\\"'])+;\".replace(/<str>/g,function(){return t}),\"im\"),alias:\"language-sql\",inside:e.languages.sql},\"global-statements\":b,\"sql-statements\":{pattern:/(^|\\s)(?:disconnect\\s+from|exec(?:ute)?|begin|commit|rollback|reset|validate)\\b/i,lookbehind:!0,alias:\"keyword\"},number:a,\"numeric-constant\":n,punctuation:c,string:l}},\"proc-groovy\":{pattern:/(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|run|data);|(?![\\s\\S]))/im,lookbehind:!0,inside:{comment:o,groovy:{pattern:RegExp(\"(^[ \\t]*submit(?:\\\\s+(?:load|parseonly|norun))?)(?:<str>|[^\\\"'])+?(?=endsubmit;)\".replace(/<str>/g,function(){return t}),\"im\"),lookbehind:!0,alias:\"language-groovy\",inside:e.languages.groovy},keyword:S,\"submit-statement\":g,\"global-statements\":b,number:a,\"numeric-constant\":n,punctuation:c,string:l}},\"proc-lua\":{pattern:/(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|run|data);|(?![\\s\\S]))/im,lookbehind:!0,inside:{comment:o,lua:{pattern:RegExp(\"(^[ \\t]*submit(?:\\\\s+(?:load|parseonly|norun))?)(?:<str>|[^\\\"'])+?(?=endsubmit;)\".replace(/<str>/g,function(){return t}),\"im\"),lookbehind:!0,alias:\"language-lua\",inside:e.languages.lua},keyword:S,\"submit-statement\":g,\"global-statements\":b,number:a,\"numeric-constant\":n,punctuation:c,string:l}},\"proc-cas\":{pattern:/(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,lookbehind:!0,inside:{comment:o,\"statement-var\":{pattern:/((?:^|\\s)=?)saveresult\\s[^;]+/im,lookbehind:!0,inside:{statement:{pattern:/^saveresult\\s+\\S+/i,inside:{keyword:/^(?:saveresult)/i}},rest:p}},\"cas-actions\":y,statement:{pattern:/((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,lookbehind:!0,inside:p},step:s,keyword:S,function:d,format:u,altformat:m,\"global-statements\":b,number:a,\"numeric-constant\":n,punctuation:c,string:l}},\"proc-args\":{pattern:RegExp(\"(^proc\\\\s+\\\\w+\\\\s+)(?!\\\\s)(?:[^;\\\"']|<str>)+;\".replace(/<str>/g,function(){return t}),\"im\"),lookbehind:!0,inside:p},\"macro-keyword\":r,\"macro-variable\":i,\"macro-string-functions\":{pattern:/((?:^|\\s|=))%(?:NRBQUOTE|NRQUOTE|NRSTR|BQUOTE|QUOTE|STR)\\(.*?(?:[^%]\\))/i,lookbehind:!0,inside:{function:{pattern:/%(?:NRBQUOTE|NRQUOTE|NRSTR|BQUOTE|QUOTE|STR)/i,alias:\"keyword\"},\"macro-keyword\":r,\"macro-variable\":i,\"escaped-char\":{pattern:/%['\"()<>=¬^~;,#]/i},punctuation:c}},\"macro-declaration\":{pattern:/^%macro[^;]+(?=;)/im,inside:{keyword:/%macro/i}},\"macro-end\":{pattern:/^%mend[^;]+(?=;)/im,inside:{keyword:/%mend/i}},macro:{pattern:/%_\\w+(?=\\()/,alias:\"keyword\"},input:{pattern:/\\binput\\s[-\\w\\s/*.$&]+;/i,inside:{input:{alias:\"keyword\",pattern:/^input/i},comment:o,number:a,\"numeric-constant\":n}},\"options-args\":{pattern:/(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,lookbehind:!0,inside:p},\"cas-actions\":y,comment:o,function:d,format:u,altformat:m,\"numeric-constant\":n,datetime:{pattern:RegExp(t+\"(?:dt?|t)\"),alias:\"number\"},string:l,step:s,keyword:S,\"operator-keyword\":{pattern:/\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,alias:\"operator\"},number:a,operator:/\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/i,punctuation:c}}(Prism);"
            ]
        },
        "prism-sass.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.sass = Prism.languages.extend('css', {",
                "\t\t// Sass comments don't need to be closed, only indented",
                "\t\t'comment': {",
                "\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('sass', 'atrule', {",
                "\t\t// We want to consume the whole line",
                "\t\t'atrule-line': {",
                "\t\t\t// Includes support for = and + shortcuts",
                "\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\tdelete Prism.languages.sass.atrule;",
                "",
                "",
                "\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;",
                "\tvar operator = [",
                "\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,",
                "\t\t{",
                "\t\t\tpattern: /(\\s+)-(?=\\s)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.insertBefore('sass', 'property', {",
                "\t\t// We want to consume the whole line",
                "\t\t'variable-line': {",
                "\t\t\tpattern: /^[ \\t]*\\$.+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t'variable': variable,",
                "\t\t\t\t'operator': operator",
                "\t\t\t}",
                "\t\t},",
                "\t\t// We want to consume the whole line",
                "\t\t'property-line': {",
                "\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'property': [",
                "\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t'variable': variable,",
                "\t\t\t\t'operator': operator,",
                "\t\t\t\t'important': Prism.languages.sass.important",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\tdelete Prism.languages.sass.property;",
                "\tdelete Prism.languages.sass.important;",
                "",
                "\t// Now that whole lines for other patterns are consumed,",
                "\t// what's left should be selectors",
                "\tPrism.languages.insertBefore('sass', 'punctuation', {",
                "\t\t'selector': {",
                "\t\t\tpattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-sass.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.sass=e.languages.extend(\"css\",{comment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,lookbehind:!0}}),e.languages.insertBefore(\"sass\",\"atrule\",{\"atrule-line\":{pattern:/^(?:[ \\t]*)[@+=].+/m,inside:{atrule:/(?:@[\\w-]+|[+=])/m}}}),delete e.languages.sass.atrule;var t=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,a=[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,{pattern:/(\\s+)-(?=\\s)/,lookbehind:!0}];e.languages.insertBefore(\"sass\",\"property\",{\"variable-line\":{pattern:/^[ \\t]*\\$.+/m,inside:{punctuation:/:/,variable:t,operator:a}},\"property-line\":{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:a,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore(\"sass\",\"punctuation\",{selector:{pattern:/([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,lookbehind:!0}})}(Prism);"
            ]
        },
        "prism-scala.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scala = Prism.languages.extend('java', {",
                "\t'triple-quoted-string': {",
                "\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,",
                "\t'number': /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,",
                "\t'builtin': /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,",
                "\t'symbol': /'[^\\d\\s\\\\]\\w*/",
                "});",
                "delete Prism.languages.scala['class-name'];",
                "delete Prism.languages.scala['function'];"
            ]
        },
        "prism-scala.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scala=Prism.languages.extend(\"java\",{\"triple-quoted-string\":{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\"},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:/<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,number:/\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,builtin:/\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,symbol:/'[^\\d\\s\\\\]\\w*/}),delete Prism.languages.scala[\"class-name\"],delete Prism.languages.scala.function;"
            ]
        },
        "prism-scheme.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.scheme = {",
                "\t\t// this supports \"normal\" single-line comments:",
                "\t\t//   ; comment",
                "\t\t// and (potentially nested) multiline comments:",
                "\t\t//   #| comment #| nested |# still comment |#",
                "\t\t// (only 1 level of nesting is supported)",
                "\t\t'comment': /;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'symbol': {",
                "\t\t\tpattern: /'[^()#'\\s]+/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'character': {",
                "\t\t\tpattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'lambda-parameter': [",
                "\t\t\t// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[^'`#])\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[^'`#])\\(lambda\\s+\\()[^()']+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': {",
                "\t\t\tpattern: /((?:^|[^'`#])\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'builtin': {",
                "\t\t\t// all functions of the base library of R7RS plus some of built-ins of R5Rs",
                "\t\t\tpattern: /((?:^|[^'`#])\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'operator': {",
                "\t\t\tpattern: /((?:^|[^'`#])\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': {",
                "\t\t\t// The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).",
                "\t\t\t//",
                "\t\t\t// <number>      := <num 2>|<num 8>|<num 10>|<num 16>",
                "\t\t\t// <num R>       := <prefix R><complex R>",
                "\t\t\t// <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>",
                "\t\t\t// <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i",
                "\t\t\t// <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0",
                "\t\t\t// <ureal R>     := <uint R>(?:\\/<uint R>)?",
                "\t\t\t//                | <decimal R>",
                "\t\t\t//",
                "\t\t\t// <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?",
                "\t\t\t// <uint R>      := <digit R>+",
                "\t\t\t// <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>",
                "\t\t\t// <radix 2>     := #b",
                "\t\t\t// <radix 8>     := #o",
                "\t\t\t// <radix 10>    := (?:#d)?",
                "\t\t\t// <radix 16>    := #x",
                "\t\t\t// <digit 2>     := [01]",
                "\t\t\t// <digit 8>     := [0-7]",
                "\t\t\t// <digit 10>    := \\d",
                "\t\t\t// <digit 16>    := [0-9a-f]",
                "\t\t\t//",
                "\t\t\t// The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all",
                "\t\t\t// non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)",
                "\t\t\t// pattern:",
                "\t\t\tpattern: RegExp(SortedBNF({",
                "\t\t\t\t'<ureal dec>': /\\d+(?:\\/\\d+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/.source,",
                "\t\t\t\t'<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,",
                "\t\t\t\t'<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,",
                "\t\t\t\t'<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,",
                "\t\t\t\t'<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,",
                "",
                "\t\t\t\t'<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,",
                "\t\t\t\t'<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,",
                "\t\t\t\t'<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,",
                "\t\t\t\t'<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,",
                "\t\t\t\t'<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,",
                "",
                "\t\t\t\t'<number>': /(^|[\\s()])(?:<num dec>|<num box>)(?=[()\\s]|$)/.source,",
                "\t\t\t}), 'i'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'boolean': {",
                "\t\t\tpattern: /(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': {",
                "\t\t\tpattern: /((?:^|[^'`#])\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'identifier': {",
                "\t\t\tpattern: /(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'punctuation': /[()']/",
                "\t};",
                "",
                "\t/**",
                "\t * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.",
                "\t *",
                "\t * @param {Record<string, string>} grammar",
                "\t * @returns {string}",
                "\t */",
                "\tfunction SortedBNF(grammar) {",
                "\t\tfor (var key in grammar) {",
                "\t\t\tgrammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {",
                "\t\t\t\treturn '(?:' + grammar[key].trim() + ')';",
                "\t\t\t});",
                "\t\t}",
                "\t\t// return the last item",
                "\t\treturn grammar[key];",
                "\t}",
                "",
                "})(Prism);"
            ]
        },
        "prism-scheme.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scheme={comment:/;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},symbol:{pattern:/'[^()#'\\s]+/,greedy:!0},character:{pattern:/#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,greedy:!0,alias:\"string\"},\"lambda-parameter\":[{pattern:/((?:^|[^'`#])\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,lookbehind:!0},{pattern:/((?:^|[^'`#])\\(lambda\\s+\\()[^()']+/,lookbehind:!0}],keyword:{pattern:/((?:^|[^'`#])\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,lookbehind:!0},builtin:{pattern:/((?:^|[^'`#])\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,lookbehind:!0},operator:{pattern:/((?:^|[^'`#])\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,lookbehind:!0},number:{pattern:RegExp(function(r){for(var e in r)r[e]=r[e].replace(/<[\\w\\s]+>/g,function(e){return\"(?:\"+r[e].trim()+\")\"});return r[e]}({\"<ureal dec>\":\"\\\\d+(?:/\\\\d+)?|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\",\"<real dec>\":\"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\"<imaginary dec>\":\"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\"<complex dec>\":\"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\"<num dec>\":\"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\"<ureal box>\":\"[0-9a-f]+(?:/[0-9a-f]+)?\",\"<real box>\":\"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\"<imaginary box>\":\"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\"<complex box>\":\"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\"<num box>\":\"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\"<number>\":\"(^|[\\\\s()])(?:<num dec>|<num box>)(?=[()\\\\s]|$)\"}),\"i\"),lookbehind:!0},boolean:{pattern:/(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,lookbehind:!0},function:{pattern:/((?:^|[^'`#])\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,lookbehind:!0},identifier:{pattern:/(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,lookbehind:!0,greedy:!0},punctuation:/[()']/};"
            ]
        },
        "prism-scss.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scss = Prism.languages.extend('css', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'atrule': {",
                "\t\tpattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,",
                "\t\tinside: {",
                "\t\t\t'rule': /@[\\w-]+/",
                "\t\t\t// See rest below",
                "\t\t}",
                "\t},",
                "\t// url, compassified",
                "\t'url': /(?:[-a-z]+-)?url(?=\\()/i,",
                "\t// CSS selector regex is not appropriate for Sass",
                "\t// since there can be lot more things (var, @ directive, nesting..)",
                "\t// a selector must start at the end of a property or after a brace (end of other rules or nesting)",
                "\t// it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable",
                "\t// the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var",
                "\t// can \"pass\" as a selector- e.g: proper#{$erty})",
                "\t// this one was hard to do, so please be careful if you edit this one :)",
                "\t'selector': {",
                "\t\t// Initial look-ahead is used to prevent matching of blank selectors",
                "\t\tpattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]+))/m,",
                "\t\tinside: {",
                "\t\t\t'parent': {",
                "\t\t\t\tpattern: /&/,",
                "\t\t\t\talias: 'important'",
                "\t\t\t},",
                "\t\t\t'placeholder': /%[-\\w]+/,",
                "\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "\t\t}",
                "\t},",
                "\t'property': {",
                "\t\tpattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,",
                "\t\tinside: {",
                "\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'atrule', {",
                "\t'keyword': [",
                "\t\t/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i,",
                "\t\t{",
                "\t\t\tpattern: /( +)(?:from|through)(?= )/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t]",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'important', {",
                "\t// var and interpolated vars",
                "\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'function', {",
                "\t'module-modifier': {",
                "\t\tpattern: /\\b(?:as|with|show|hide)\\b/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'placeholder': {",
                "\t\tpattern: /%[-\\w]+/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'statement': {",
                "\t\tpattern: /\\B!(?:default|optional)\\b/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'null': {",
                "\t\tpattern: /\\bnull\\b/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'operator': {",
                "\t\tpattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;"
            ]
        },
        "prism-scss.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scss=Prism.languages.extend(\"css\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},atrule:{pattern:/@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,inside:{rule:/@[\\w-]+/}},url:/(?:[-a-z]+-)?url(?=\\()/i,selector:{pattern:/(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]+))/m,inside:{parent:{pattern:/&/,alias:\"important\"},placeholder:/%[-\\w]+/,variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}},property:{pattern:/(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,inside:{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}}}),Prism.languages.insertBefore(\"scss\",\"atrule\",{keyword:[/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i,{pattern:/( +)(?:from|through)(?= )/,lookbehind:!0}]}),Prism.languages.insertBefore(\"scss\",\"important\",{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}),Prism.languages.insertBefore(\"scss\",\"function\",{\"module-modifier\":{pattern:/\\b(?:as|with|show|hide)\\b/i,alias:\"keyword\"},placeholder:{pattern:/%[-\\w]+/,alias:\"selector\"},statement:{pattern:/\\B!(?:default|optional)\\b/i,alias:\"keyword\"},boolean:/\\b(?:true|false)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"},operator:{pattern:/(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,lookbehind:!0}}),Prism.languages.scss.atrule.inside.rest=Prism.languages.scss;"
            ]
        },
        "prism-shell-session.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t// CAREFUL!",
                "\t// The following patterns are concatenated, so the group referenced by a back reference is non-obvious!",
                "",
                "\tvar strings = [",
                "\t\t// normal string",
                "\t\t// 1 capturing group",
                "\t\t/([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\1)[^\\\\`$])*\\1/.source,",
                "",
                "\t\t// here doc",
                "\t\t// 2 capturing groups",
                "\t\t/<<-?\\s*([\"']?)(\\w+)\\2\\s[\\s\\S]*?[\\r\\n]\\3/.source",
                "\t].join('|');",
                "",
                "\tPrism.languages['shell-session'] = {",
                "\t\t'command': {",
                "\t\t\tpattern: RegExp(/^(?:[^\\s@:$#*!/\\\\]+@[^\\s@:$#*!/\\\\]+(?::[^\\0-\\x1F$#*?\"<>:;|]+)?|[^\\0-\\x1F$#*?\"<>:;|]+)?[$#](?:[^\\\\\\r\\n'\"<]|\\\\.|<<str>>)+/.source.replace(/<<str>>/g, function () { return strings; }), 'm'),",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'info': {",
                "\t\t\t\t\t// foo@bar:~/files$ exit",
                "\t\t\t\t\t// foo@bar$ exit",
                "\t\t\t\t\t// ~/files$ exit",
                "\t\t\t\t\tpattern: /^[^#$]+/,",
                "\t\t\t\t\talias: 'punctuation',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'user': /^[^\\s@:$#*!/\\\\]+@[^\\s@:$#*!/\\\\]+/,",
                "\t\t\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t\t\t'path': /[\\s\\S]+/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'bash': {",
                "\t\t\t\t\tpattern: /(^[$#]\\s*)\\S[\\s\\S]*/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'language-bash',",
                "\t\t\t\t\tinside: Prism.languages.bash",
                "\t\t\t\t},",
                "\t\t\t\t'shell-symbol': {",
                "\t\t\t\t\tpattern: /^[$#]/,",
                "\t\t\t\t\talias: 'important'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'output': /.(?:.*(?:[\\r\\n]|.$))*/",
                "\t};",
                "",
                "\tPrism.languages['sh-session'] = Prism.languages['shellsession'] = Prism.languages['shell-session'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-shell-session.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(s){var n=[\"([\\\"'])(?:\\\\\\\\[^]|\\\\$\\\\([^)]+\\\\)|\\\\$(?!\\\\()|`[^`]+`|(?!\\\\1)[^\\\\\\\\`$])*\\\\1\",\"<<-?\\\\s*([\\\"']?)(\\\\w+)\\\\2\\\\s[^]*?[\\r\\n]\\\\3\"].join(\"|\");s.languages[\"shell-session\"]={command:{pattern:RegExp('^(?:[^\\\\s@:$#*!/\\\\\\\\]+@[^\\\\s@:$#*!/\\\\\\\\]+(?::[^\\0-\\\\x1F$#*?\"<>:;|]+)?|[^\\0-\\\\x1F$#*?\"<>:;|]+)?[$#](?:[^\\\\\\\\\\r\\n\\'\"<]|\\\\\\\\.|<<str>>)+'.replace(/<<str>>/g,function(){return n}),\"m\"),greedy:!0,inside:{info:{pattern:/^[^#$]+/,alias:\"punctuation\",inside:{user:/^[^\\s@:$#*!/\\\\]+@[^\\s@:$#*!/\\\\]+/,punctuation:/:/,path:/[\\s\\S]+/}},bash:{pattern:/(^[$#]\\s*)\\S[\\s\\S]*/,lookbehind:!0,alias:\"language-bash\",inside:s.languages.bash},\"shell-symbol\":{pattern:/^[$#]/,alias:\"important\"}}},output:/.(?:.*(?:[\\r\\n]|.$))*/},s.languages[\"sh-session\"]=s.languages.shellsession=s.languages[\"shell-session\"]}(Prism);"
            ]
        },
        "prism-smali.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Test files for the parser itself:",
                "// https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest",
                "",
                "Prism.languages.smali = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'class-name': {",
                "\t\tpattern: /L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,",
                "\t\tinside: {",
                "\t\t\t'class-name': {",
                "\t\t\t\tpattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'namespace': {",
                "\t\t\t\tpattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\//",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'builtin': /^L/",
                "\t\t}",
                "\t},",
                "\t'builtin': [",
                "\t\t{",
                "\t\t\t// Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types",
                "\t\t\tpattern: /([();\\[])[BCDFIJSVZ]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// e.g. .field mWifiOnUid:I",
                "\t\t\tpattern: /([\\w$>]:)[BCDFIJSVZ]/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(\\.end\\s+)[\\w-]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'function': {",
                "\t\tpattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'field': {",
                "\t\tpattern: /[\\w$]+(?=:)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'register': {",
                "\t\tpattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "",
                "\t'boolean': {",
                "\t\tpattern: /(^|[^\\w.-])(?:true|false)(?![\\w.-])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'label': {",
                "\t\tpattern: /(:)\\w+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property'",
                "\t},",
                "",
                "\t'operator': /->|\\.\\.|[\\[=]/,",
                "\t'punctuation': /[{}(),;:]/",
                "};"
            ]
        },
        "prism-smali.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.smali={comment:/#.*/,string:{pattern:/\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,greedy:!0},\"class-name\":{pattern:/L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,inside:{\"class-name\":{pattern:/(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,lookbehind:!0},namespace:{pattern:/^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,lookbehind:!0,inside:{punctuation:/\\//}},builtin:/^L/}},builtin:[{pattern:/([();\\[])[BCDFIJSVZ]+/,lookbehind:!0},{pattern:/([\\w$>]:)[BCDFIJSVZ]/,lookbehind:!0}],keyword:[{pattern:/(\\.end\\s+)[\\w-]+/,lookbehind:!0},{pattern:/(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,lookbehind:!0},{pattern:/(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,lookbehind:!0}],function:{pattern:/(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,lookbehind:!0},field:{pattern:/[\\w$]+(?=:)/,alias:\"variable\"},register:{pattern:/(^|[^\\w.-])[vp]\\d(?![\\w.-])/,lookbehind:!0,alias:\"variable\"},boolean:{pattern:/(^|[^\\w.-])(?:true|false)(?![\\w.-])/,lookbehind:!0},number:{pattern:/(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,lookbehind:!0},label:{pattern:/(:)\\w+/,lookbehind:!0,alias:\"property\"},operator:/->|\\.\\.|[\\[=]/,punctuation:/[{}(),;:]/};"
            ]
        },
        "prism-smalltalk.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.smalltalk = {",
                "\t'comment': /\"(?:\"\"|[^\"])*\"/,",
                "\t'character': {",
                "\t\tpattern: /\\$./,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': /'(?:''|[^'])*'/,",
                "\t'symbol': /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,",
                "\t'block-arguments': {",
                "\t\tpattern: /(\\[\\s*):[^\\[|]*\\|/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'variable': /:[\\da-z]+/i,",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'temporary-variables': {",
                "\t\tpattern: /\\|[^|]+\\|/,",
                "\t\tinside: {",
                "\t\t\t'variable': /[\\da-z]+/i,",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:nil|true|false|self|super|new)\\b/,",
                "\t'number': [",
                "\t\t/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,",
                "\t\t/\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/",
                "\t],",
                "\t'operator': /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,",
                "\t'punctuation': /[.;:?\\[\\](){}]/",
                "};"
            ]
        },
        "prism-smalltalk.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.smalltalk={comment:/\"(?:\"\"|[^\"])*\"/,character:{pattern:/\\$./,alias:\"string\"},string:/'(?:''|[^'])*'/,symbol:/#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\"block-arguments\":{pattern:/(\\[\\s*):[^\\[|]*\\|/,lookbehind:!0,inside:{variable:/:[\\da-z]+/i,punctuation:/\\|/}},\"temporary-variables\":{pattern:/\\|[^|]+\\|/,inside:{variable:/[\\da-z]+/i,punctuation:/\\|/}},keyword:/\\b(?:nil|true|false|self|super|new)\\b/,number:[/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,/\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/],operator:/[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,punctuation:/[.;:?\\[\\](){}]/};"
            ]
        },
        "prism-smarty.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tAdd support for variables inside double quoted strings",
                "\tAdd support for {php}",
                "*/",
                "",
                "(function(Prism) {",
                "",
                "\tPrism.languages.smarty = {",
                "\t\t'comment': /\\{\\*[\\s\\S]*?\\*\\}/,",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^\\{|\\}$/i,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,",
                "\t\t'variable': [",
                "\t\t\t/\\$(?!\\d)\\w+/,",
                "\t\t\t/#(?!\\d)\\w+#/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.|->)(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\[)(?!\\d)\\w+(?=\\])/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|\\s*)@?(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/^\\/?(?!\\d)\\w+/,",
                "\t\t\t/(?!\\d)\\w+(?=\\()/",
                "\t\t],",
                "\t\t'attr-name': {",
                "\t\t\t// Value is made optional because it may have already been tokenized",
                "\t\t\tpattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,",
                "\t\t\tinside: {",
                "\t\t\t\t\"variable\": {",
                "\t\t\t\t\tpattern: /(=\\s*)(?!\\d)\\w+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t\"operator\": /=/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': [",
                "\t\t\t/[\\[\\]().,:`]|->/",
                "\t\t],",
                "\t\t'operator': [",
                "\t\t\t/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,",
                "\t\t\t/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,",
                "\t\t\t/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/",
                "\t\t],",
                "\t\t'keyword': /\\b(?:false|off|on|no|true|yes)\\b/",
                "\t};",
                "",
                "\t// Tokenize all inline Smarty expressions",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;",
                "\t\tvar smartyLitteralStart = '{literal}';",
                "\t\tvar smartyLitteralEnd = '{/literal}';",
                "\t\tvar smartyLitteralMode = false;",
                "",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {",
                "\t\t\t// Smarty tags inside {literal} block are ignored",
                "\t\t\tif(match === smartyLitteralEnd) {",
                "\t\t\t\tsmartyLitteralMode = false;",
                "\t\t\t}",
                "",
                "\t\t\tif(!smartyLitteralMode) {",
                "\t\t\t\tif(match === smartyLitteralStart) {",
                "\t\t\t\t\tsmartyLitteralMode = true;",
                "\t\t\t\t}",
                "",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t});",
                "",
                "\t// Re-insert the tokens after tokenizing",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-smarty.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.smarty={comment:/\\{\\*[\\s\\S]*?\\*\\}/,delimiter:{pattern:/^\\{|\\}$/i,alias:\"punctuation\"},string:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,number:/\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,variable:[/\\$(?!\\d)\\w+/,/#(?!\\d)\\w+#/,{pattern:/(\\.|->)(?!\\d)\\w+/,lookbehind:!0},{pattern:/(\\[)(?!\\d)\\w+(?=\\])/,lookbehind:!0}],function:[{pattern:/(\\|\\s*)@?(?!\\d)\\w+/,lookbehind:!0},/^\\/?(?!\\d)\\w+/,/(?!\\d)\\w+(?=\\()/],\"attr-name\":{pattern:/\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,inside:{variable:{pattern:/(=\\s*)(?!\\d)\\w+/,lookbehind:!0},operator:/=/}},punctuation:[/[\\[\\]().,:`]|->/],operator:[/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],keyword:/\\b(?:false|off|on|no|true|yes)\\b/},n.hooks.add(\"before-tokenize\",function(e){var t=!1;n.languages[\"markup-templating\"].buildPlaceholders(e,\"smarty\",/\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g,function(e){return\"{/literal}\"===e&&(t=!1),!t&&(\"{literal}\"===e&&(t=!0),!0)})}),n.hooks.add(\"after-tokenize\",function(e){n.languages[\"markup-templating\"].tokenizePlaceholders(e,\"smarty\")})}(Prism);"
            ]
        },
        "prism-sml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// https://smlfamily.github.io/sml97-defn.pdf",
                "// https://people.mpi-sws.org/~rossberg/sml.html",
                "(function (Prism) {",
                "",
                "\tvar keywords = /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;",
                "",
                "\tPrism.languages.sml = {",
                "\t\t// allow one level of nesting",
                "\t\t'comment': /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,",
                "\t\t'string': {",
                "\t\t\tpattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\t// This is only an approximation since the real grammar is context-free",
                "\t\t\t\t//",
                "\t\t\t\t// Why the main loop so complex?",
                "\t\t\t\t// The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot",
                "\t\t\t\t// simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be",
                "\t\t\t\t// followed by a long identifier.",
                "\t\t\t\tpattern: RegExp(",
                "\t\t\t\t\t/((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source",
                "\t\t\t\t\t\t.replace(/<NOT-LAST>/g, function () { return /\\s*(?:[*,]|->)/.source; })",
                "\t\t\t\t\t\t.replace(/<TERMINAL>/g, function () {",
                "\t\t\t\t\t\t\treturn /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/.source;",
                "\t\t\t\t\t\t})",
                "\t\t\t\t\t\t.replace(/<LONG-ID>/g, function () { return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source; })",
                "\t\t\t\t\t\t.replace(/<KEYWORD>/g, function () { return keywords.source; }),",
                "\t\t\t\t\t'i'",
                "\t\t\t\t),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'function': {",
                "\t\t\tpattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t'keyword': keywords,",
                "\t\t'variable': {",
                "\t\t\tpattern: /(^|[^\\w'])'[\\w']*/,",
                "\t\t\tlookbehind: true,",
                "\t\t},",
                "",
                "\t\t'number': /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,",
                "\t\t'word': {",
                "\t\t\tpattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,",
                "\t\t\talias: 'constant'",
                "\t\t},",
                "",
                "\t\t'boolean': /\\b(?:false|true)\\b/i,",
                "\t\t'operator': /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,",
                "\t\t'punctuation': /[(){}\\[\\].:,;]/",
                "\t};",
                "",
                "\tPrism.languages.sml['class-name'][0].inside = Prism.languages.sml;",
                "",
                "\tPrism.languages.smlnj = Prism.languages.sml;",
                "",
                "}(Prism));"
            ]
        },
        "prism-sml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n=/\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;e.languages.sml={comment:/\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,string:{pattern:/#?\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},\"class-name\":[{pattern:RegExp(\"((?:^|[^:]):\\\\s*)<TERMINAL>(?:\\\\s*(?:(?:\\\\*|->)\\\\s*<TERMINAL>|,\\\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\\\s+<LONG-ID>)))*\".replace(/<NOT-LAST>/g,function(){return\"\\\\s*(?:[*,]|->)\"}).replace(/<TERMINAL>/g,function(){return\"(?:'[\\\\w']*|<LONG-ID>|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\\\{(?:[^{}]|\\\\{[^{}]*\\\\})*\\\\})(?:\\\\s+<LONG-ID>)*\"}).replace(/<LONG-ID>/g,function(){return\"(?!<KEYWORD>)[a-z\\\\d_][\\\\w'.]*\"}).replace(/<KEYWORD>/g,function(){return n.source}),\"i\"),lookbehind:!0,greedy:!0,inside:null},{pattern:/((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,lookbehind:!0}],function:{pattern:/((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,lookbehind:!0},keyword:n,variable:{pattern:/(^|[^\\w'])'[\\w']*/,lookbehind:!0},number:/~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,word:{pattern:/\\b0w(?:\\d+|x[\\da-f]+)\\b/i,alias:\"constant\"},boolean:/\\b(?:false|true)\\b/i,operator:/\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,punctuation:/[(){}\\[\\].:,;]/},e.languages.sml[\"class-name\"][0].inside=e.languages.sml,e.languages.smlnj=e.languages.sml}(Prism);"
            ]
        },
        "prism-solidity.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.solidity = Prism.languages.extend('clike', {",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:contract|enum|interface|library|new|struct|using)\\s+)(?!\\d)[\\w$]+/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\\b/,",
                "\t'operator': /=>|->|:=|=:|\\*\\*|\\+\\+|--|\\|\\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/",
                "});",
                "",
                "Prism.languages.insertBefore('solidity', 'keyword', {",
                "\t'builtin': /\\b(?:address|bool|string|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|byte|bytes(?:[1-9]|[12]\\d|3[0-2])?)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('solidity', 'number', {",
                "\t'version': {",
                "\t\tpattern: /([<>]=?|\\^)\\d+\\.\\d+\\.\\d+\\b/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'number',",
                "\t}",
                "});",
                "",
                "Prism.languages.sol = Prism.languages.solidity;"
            ]
        },
        "prism-solidity.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.solidity=Prism.languages.extend(\"clike\",{\"class-name\":{pattern:/(\\b(?:contract|enum|interface|library|new|struct|using)\\s+)(?!\\d)[\\w$]+/,lookbehind:!0},keyword:/\\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\\b/,operator:/=>|->|:=|=:|\\*\\*|\\+\\+|--|\\|\\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/}),Prism.languages.insertBefore(\"solidity\",\"keyword\",{builtin:/\\b(?:address|bool|string|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|byte|bytes(?:[1-9]|[12]\\d|3[0-2])?)\\b/}),Prism.languages.insertBefore(\"solidity\",\"number\",{version:{pattern:/([<>]=?|\\^)\\d+\\.\\d+\\.\\d+\\b/,lookbehind:!0,alias:\"number\"}}),Prism.languages.sol=Prism.languages.solidity;"
            ]
        },
        "prism-solution-file.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism){",
                "",
                "\tvar guid = {",
                "\t\t// https://en.wikipedia.org/wiki/Universally_unique_identifier#Format",
                "\t\tpattern: /\\{[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}\\}/i,",
                "\t\talias: 'constant',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[{}]/",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages['solution-file'] = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /#.*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'guid': guid",
                "\t\t\t}",
                "\t\t},",
                "\t\t'object': {",
                "\t\t\t// Foo",
                "\t\t\t//   Bar(\"abs\") = 9",
                "\t\t\t//   EndBar",
                "\t\t\t//   Prop = TRUE",
                "\t\t\t// EndFoo",
                "\t\t\tpattern: /^([ \\t]*)(?:([A-Z]\\w*)\\b(?=.*(?:\\r\\n?|\\n)(?:\\1[ \\t].*(?:\\r\\n?|\\n))*\\1End\\2(?=[ \\t]*$))|End[A-Z]\\w*(?=[ \\t]*$))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'property': {",
                "\t\t\tpattern: /^([ \\t]*)(?!\\s)[^\\r\\n\"#=()]*[^\\s\"#=()](?=\\s*=)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'guid': guid",
                "\t\t\t}",
                "\t\t},",
                "\t\t'guid': guid,",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,",
                "\t\t'boolean': /\\b(?:FALSE|TRUE)\\b/,",
                "\t\t'operator': /=/,",
                "\t\t'punctuation': /[(),]/",
                "\t};",
                "",
                "\tPrism.languages['sln'] = Prism.languages['solution-file'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-solution-file.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var t={pattern:/\\{[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}\\}/i,alias:\"constant\",inside:{punctuation:/[{}]/}};n.languages[\"solution-file\"]={comment:{pattern:/#.*/,greedy:!0},string:{pattern:/\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,greedy:!0,inside:{guid:t}},object:{pattern:/^([ \\t]*)(?:([A-Z]\\w*)\\b(?=.*(?:\\r\\n?|\\n)(?:\\1[ \\t].*(?:\\r\\n?|\\n))*\\1End\\2(?=[ \\t]*$))|End[A-Z]\\w*(?=[ \\t]*$))/m,lookbehind:!0,greedy:!0,alias:\"keyword\"},property:{pattern:/^([ \\t]*)(?!\\s)[^\\r\\n\"#=()]*[^\\s\"#=()](?=\\s*=)/m,lookbehind:!0,inside:{guid:t}},guid:t,number:/\\b\\d+(?:\\.\\d+)*\\b/,boolean:/\\b(?:FALSE|TRUE)\\b/,operator:/=/,punctuation:/[(),]/},n.languages.sln=n.languages[\"solution-file\"]}(Prism);"
            ]
        },
        "prism-soy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
                "\tvar numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;",
                "",
                "\tPrism.languages.soy = {",
                "\t\t'comment': [",
                "\t\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)\\/\\/.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'command-arg': {",
                "\t\t\tpattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t'parameter': {",
                "\t\t\tpattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "\t\t'keyword': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/",
                "\t\t],",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^{+\\/?|\\/?}+$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'property': /\\w+(?==)/,",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,",
                "\t\t\tinside: {",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: stringPattern,",
                "\t\t\t\t\tgreedy: true",
                "\t\t\t\t},",
                "\t\t\t\t'number': numberPattern,",
                "\t\t\t\t'punctuation': /[\\[\\].?]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: stringPattern,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'function': [",
                "\t\t\t/\\w+(?=\\()/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|[^\\S\\r\\n]*)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'number': numberPattern,",
                "\t\t'operator': /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,",
                "\t\t'punctuation': /[{}()\\[\\]|.,:]/",
                "\t};",
                "",
                "\t// Tokenize all inline Soy expressions",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tvar soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;",
                "\t\tvar soyLitteralStart = '{literal}';",
                "\t\tvar soyLitteralEnd = '{/literal}';",
                "\t\tvar soyLitteralMode = false;",
                "",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {",
                "\t\t\t// Soy tags inside {literal} block are ignored",
                "\t\t\tif (match === soyLitteralEnd) {",
                "\t\t\t\tsoyLitteralMode = false;",
                "\t\t\t}",
                "",
                "\t\t\tif (!soyLitteralMode) {",
                "\t\t\t\tif (match === soyLitteralStart) {",
                "\t\t\t\t\tsoyLitteralMode = true;",
                "\t\t\t\t}",
                "",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t});",
                "",
                "\t// Re-insert the tokens after tokenizing",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-soy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){var e=/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,a=/\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;t.languages.soy={comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(\\s)\\/\\/.*/,lookbehind:!0,greedy:!0}],\"command-arg\":{pattern:/({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,lookbehind:!0,alias:\"string\",inside:{punctuation:/\\./}},parameter:{pattern:/({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,lookbehind:!0,alias:\"variable\"},keyword:[{pattern:/({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,lookbehind:!0},/\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],delimiter:{pattern:/^{+\\/?|\\/?}+$/,alias:\"punctuation\"},property:/\\w+(?==)/,variable:{pattern:/\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,inside:{string:{pattern:e,greedy:!0},number:a,punctuation:/[\\[\\].?]/}},string:{pattern:e,greedy:!0},function:[/\\w+(?=\\()/,{pattern:/(\\|[^\\S\\r\\n]*)\\w+/,lookbehind:!0}],boolean:/\\b(?:true|false)\\b/,number:a,operator:/\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,punctuation:/[{}()\\[\\]|.,:]/},t.hooks.add(\"before-tokenize\",function(e){var a=!1;t.languages[\"markup-templating\"].buildPlaceholders(e,\"soy\",/{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g,function(e){return\"{/literal}\"===e&&(a=!1),!a&&(\"{literal}\"===e&&(a=!0),!0)})}),t.hooks.add(\"after-tokenize\",function(e){t.languages[\"markup-templating\"].tokenizePlaceholders(e,\"soy\")})}(Prism);"
            ]
        },
        "prism-sparql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sparql = Prism.languages.extend('turtle', {",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'variable': {",
                "\t\tpattern: /[?$]\\w+/,",
                "\t\tgreedy: true",
                "\t},",
                "}",
                ");",
                "",
                "Prism.languages.insertBefore('sparql', 'punctuation', {",
                "\t'keyword': [",
                "\t\t/\\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\\b/i,",
                "\t\t/\\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|ROUND|REGEX|REPLACE|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\\b(?=\\s*\\()/i,",
                "\t\t/\\b(?:GRAPH|BASE|PREFIX)\\b/i",
                "\t]",
                "});",
                "",
                "Prism.languages.rq = Prism.languages.sparql;"
            ]
        },
        "prism-sparql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sparql=Prism.languages.extend(\"turtle\",{boolean:/\\b(?:true|false)\\b/i,variable:{pattern:/[?$]\\w+/,greedy:!0}}),Prism.languages.insertBefore(\"sparql\",\"punctuation\",{keyword:[/\\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\\b/i,/\\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|ROUND|REGEX|REPLACE|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\\b(?=\\s*\\()/i,/\\b(?:GRAPH|BASE|PREFIX)\\b/i]}),Prism.languages.rq=Prism.languages.sparql;"
            ]
        },
        "prism-splunk-spl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['splunk-spl'] = {",
                "\t'comment': /`comment\\(\"(?:\\\\.|[^\\\\\"])*\"\\)`/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// https://docs.splunk.com/Documentation/Splunk/7.3.0/SearchReference/ListOfSearchCommands",
                "\t'keyword': /\\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\\b/i,",
                "\t'operator-word': {",
                "\t\tpattern: /\\b(?:and|as|by|not|or|xor)\\b/i,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'function': /\\w+(?=\\s*\\()/,",
                "\t'property': /\\w+(?=\\s*=(?!=))/,",
                "\t'date': {",
                "\t\t// MM/DD/YYYY(:HH:MM:SS)?",
                "\t\tpattern: /\\b\\d{1,2}\\/\\d{1,2}\\/\\d{1,4}(?:(?::\\d{1,2}){3})?\\b/,",
                "\t\talias: 'number'",
                "\t},",
                "\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,",
                "\t'boolean': /\\b(?:f|false|t|true)\\b/i,",
                "\t'operator': /[<>=]=?|[-+*/%|]/,",
                "\t'punctuation': /[()[\\],]/",
                "}"
            ]
        },
        "prism-splunk-spl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"splunk-spl\"]={comment:/`comment\\(\"(?:\\\\.|[^\\\\\"])*\"\\)`/,string:{pattern:/\"(?:\\\\.|[^\\\\\"])*\"/,greedy:!0},keyword:/\\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\\b/i,\"operator-word\":{pattern:/\\b(?:and|as|by|not|or|xor)\\b/i,alias:\"operator\"},function:/\\w+(?=\\s*\\()/,property:/\\w+(?=\\s*=(?!=))/,date:{pattern:/\\b\\d{1,2}\\/\\d{1,2}\\/\\d{1,4}(?:(?::\\d{1,2}){3})?\\b/,alias:\"number\"},number:/\\b\\d+(?:\\.\\d+)?\\b/,boolean:/\\b(?:f|false|t|true)\\b/i,operator:/[<>=]=?|[-+*/%|]/,punctuation:/[()[\\],]/};"
            ]
        },
        "prism-sqf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sqf = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /\"(?:(?:\"\")?[^\"])*\"(?!\")|'(?:[^'])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execVM|execFSM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'function': /\\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\\b/i,",
                "\t'number': /(?:\\$|\\b0x)[\\da-f]+\\b|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+)?)(?:e[+-]?\\d+)?\\b/i,",
                "\t'operator': /##|>>|&&|\\|\\||[!=<>]=?|[-+*/%#^]|\\b(?:and|mod|not|or)\\b/i,",
                "\t'magic-variable': {",
                "\t\tpattern: /\\b(?:_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x|this|thisList|thisTrigger)\\b/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'constant': /\\bDIK(?:_[a-z\\d]+)+\\b/i",
                "});",
                "",
                "Prism.languages.insertBefore('sqf', 'string', {",
                "\t'macro': {",
                "\t\tpattern: /(^\\s*)#[a-z](?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /#[a-z]+\\b/i,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t},",
                "\t\t\t'comment': Prism.languages.sqf.comment",
                "\t\t}",
                "\t}",
                "});",
                "",
                "delete Prism.languages.sqf['class-name'];"
            ]
        },
        "prism-sqf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sqf=Prism.languages.extend(\"clike\",{string:{pattern:/\"(?:(?:\"\")?[^\"])*\"(?!\")|'(?:[^'])*'/,greedy:!0},keyword:/\\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execVM|execFSM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\\b/i,boolean:/\\b(?:true|false)\\b/i,function:/\\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\\b/i,number:/(?:\\$|\\b0x)[\\da-f]+\\b|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+)?)(?:e[+-]?\\d+)?\\b/i,operator:/##|>>|&&|\\|\\||[!=<>]=?|[-+*/%#^]|\\b(?:and|mod|not|or)\\b/i,\"magic-variable\":{pattern:/\\b(?:_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x|this|thisList|thisTrigger)\\b/i,alias:\"keyword\"},constant:/\\bDIK(?:_[a-z\\d]+)+\\b/i}),Prism.languages.insertBefore(\"sqf\",\"string\",{macro:{pattern:/(^\\s*)#[a-z](?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,greedy:!0,alias:\"property\",inside:{directive:{pattern:/#[a-z]+\\b/i,alias:\"keyword\"},comment:Prism.languages.sqf.comment}}}),delete Prism.languages.sqf[\"class-name\"];"
            ]
        },
        "prism-sql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sql = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': [",
                "\t\t{",
                "\t\t\tpattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t/@[\\w.$]+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,",
                "\t\tgreedy: true,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i, // Should we highlight user defined functions too?",
                "\t'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,",
                "\t'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,",
                "\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,",
                "\t'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,",
                "\t'punctuation': /[;[\\]()`,.]/",
                "};"
            ]
        },
        "prism-sql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sql={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,lookbehind:!0},variable:[{pattern:/@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,greedy:!0},/@[\\w.$]+/],string:{pattern:/(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,greedy:!0,lookbehind:!0},function:/\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,keyword:/\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,boolean:/\\b(?:TRUE|FALSE|NULL)\\b/i,number:/\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,operator:/[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,punctuation:/[;[\\]()`,.]/};"
            ]
        },
        "prism-stan.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html",
                "",
                "Prism.languages.stan = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,",
                "\t'string': {",
                "\t\t// String literals can contain spaces and any printable ASCII characters except for \" and \\",
                "\t\t// https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals",
                "\t\tpattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /^([ \\t]*)#include\\b.*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property'",
                "\t},",
                "",
                "\t'function-arg': {",
                "\t\tpattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'constraint': {",
                "\t\tpattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'expression': {",
                "\t\t\t\tpattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t'property': /\\b[a-z]\\w*(?=\\s*=)/i,",
                "\t\t\t'operator': /=/,",
                "\t\t\t'punctuation': /^<|>$|[,]/",
                "\t\t}",
                "\t},",
                "\t'keyword': [",
                "\t\t/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/,",
                "\t\t// these are functions that are known to take another function as their first argument.",
                "\t\t/\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/",
                "\t],",
                "\t'function': /\\b[a-z]\\w*(?=\\s*\\()/i,",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "",
                "\t'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,",
                "\t'punctuation': /[()\\[\\]{},;]/",
                "};",
                "",
                "Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;"
            ]
        },
        "prism-stan.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.stan={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,string:{pattern:/\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,greedy:!0},directive:{pattern:/^([ \\t]*)#include\\b.*/m,lookbehind:!0,alias:\"property\"},\"function-arg\":{pattern:/(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,lookbehind:!0,alias:\"function\"},constraint:{pattern:/(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,lookbehind:!0,inside:{expression:{pattern:/(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,lookbehind:!0,inside:null},property:/\\b[a-z]\\w*(?=\\s*=)/i,operator:/=/,punctuation:/^<|>$|[,]/}},keyword:[/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/,/\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],function:/\\b[a-z]\\w*(?=\\s*\\()/i,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,boolean:/\\b(?:false|true)\\b/,operator:/<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,punctuation:/[()\\[\\]{},;]/},Prism.languages.stan.constraint.inside.expression.inside=Prism.languages.stan;"
            ]
        },
        "prism-stylus.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar unit = {",
                "\t\tpattern: /(\\b\\d+)(?:%|[a-z]+)/,",
                "\t\tlookbehind: true",
                "\t};",
                "\t// 123 -123 .123 -.123 12.3 -12.3",
                "\tvar number = {",
                "\t\tpattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,",
                "\t\tlookbehind: true",
                "\t};",
                "",
                "\tvar inside = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'url': {",
                "\t\t\tpattern: /url\\(([\"']?).*?\\1\\)/i,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'interpolation': null, // See below",
                "\t\t'func': null, // See below",
                "\t\t'important': /\\B!(?:important|optional)\\b/i,",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'hexcode': /#[\\da-f]{3,6}/i,",
                "\t\t'color': [",
                "\t\t\t/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'unit': unit,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                "\t\t\t\t\t'punctuation': /[(),]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'entity': /\\\\[\\da-f]{1,8}/i,",
                "\t\t'unit': unit,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'operator': [",
                "\t\t\t// We want non-word chars around \"-\" because it is",
                "\t\t\t// accepted in property names.",
                "\t\t\t/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/",
                "\t\t],",
                "\t\t'number': number,",
                "\t\t'punctuation': /[{}()\\[\\];:,]/",
                "\t};",
                "",
                "\tinside['interpolation'] = {",
                "\t\tpattern: /\\{[^\\r\\n}:]+\\}/,",
                "\t\talias: 'variable',",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^{|}$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: inside",
                "\t\t}",
                "\t};",
                "\tinside['func'] = {",
                "\t\tpattern: /[\\w-]+\\([^)]*\\).*/,",
                "\t\tinside: {",
                "\t\t\t'function': /^[^(]+/,",
                "\t\t\trest: inside",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.stylus = {",
                "\t\t'atrule-declaration': {",
                "\t\t\tpattern: /(^\\s*)@.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'atrule': /^@[\\w-]+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable-declaration': {",
                "\t\t\tpattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': /^\\S+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'statement': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': /^\\S+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// A property/value pair cannot end with a comma or a brace",
                "\t\t// It cannot have indented content unless it ended with a semicolon",
                "\t\t'property-declaration': {",
                "\t\t\tpattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'property': {",
                "\t\t\t\t\tpattern: /^[^\\s:]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'interpolation': inside.interpolation",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "",
                "",
                "\t\t// A selector can contain parentheses only as part of a pseudo-element",
                "\t\t// It can span multiple lines.",
                "\t\t// It must end with a comma or an accolade or have indented content.",
                "\t\t'selector': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': inside.interpolation,",
                "\t\t\t\t'comment': inside.comment,",
                "\t\t\t\t'punctuation': /[{},]/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'func': inside.func,",
                "\t\t'string': inside.string,",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'interpolation': inside.interpolation,",
                "\t\t'punctuation': /[{}()\\[\\];:.]/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-stylus.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n={pattern:/(\\b\\d+)(?:%|[a-z]+)/,lookbehind:!0},r={pattern:/(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,lookbehind:!0},i={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},url:{pattern:/url\\(([\"']?).*?\\1\\)/i,greedy:!0},string:{pattern:/(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,greedy:!0},interpolation:null,func:null,important:/\\B!(?:important|optional)\\b/i,keyword:{pattern:/(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,lookbehind:!0},hexcode:/#[\\da-f]{3,6}/i,color:[/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,{pattern:/\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,inside:{unit:n,number:r,function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}],entity:/\\\\[\\da-f]{1,8}/i,unit:n,boolean:/\\b(?:true|false)\\b/,operator:[/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],number:r,punctuation:/[{}()\\[\\];:,]/};i.interpolation={pattern:/\\{[^\\r\\n}:]+\\}/,alias:\"variable\",inside:{delimiter:{pattern:/^{|}$/,alias:\"punctuation\"},rest:i}},i.func={pattern:/[\\w-]+\\([^)]*\\).*/,inside:{function:/^[^(]+/,rest:i}},e.languages.stylus={\"atrule-declaration\":{pattern:/(^\\s*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\\w-]+/,rest:i}},\"variable-declaration\":{pattern:/(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,lookbehind:!0,inside:{variable:/^\\S+/,rest:i}},statement:{pattern:/(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,lookbehind:!0,inside:{keyword:/^\\S+/,rest:i}},\"property-declaration\":{pattern:/((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,lookbehind:!0,inside:{property:{pattern:/^[^\\s:]+/,inside:{interpolation:i.interpolation}},rest:i}},selector:{pattern:/(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,lookbehind:!0,inside:{interpolation:i.interpolation,comment:i.comment,punctuation:/[{},]/}},func:i.func,string:i.string,comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0,greedy:!0},interpolation:i.interpolation,punctuation:/[{}()\\[\\];:.]/}}(Prism);"
            ]
        },
        "prism-swift.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// issues: nested multiline comments",
                "Prism.languages.swift = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[^(])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tdelimiter: {",
                "\t\t\t\t\t\tpattern: /^\\\\\\(|\\)$/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,",
                "\t'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,",
                "\t'constant': /\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,",
                "\t'atrule': /@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,",
                "\t'builtin': /\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/",
                "});",
                "Prism.languages.swift['string'].inside['interpolation'].inside.rest = Prism.languages.swift;"
            ]
        },
        "prism-swift.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.swift=Prism.languages.extend(\"clike\",{string:{pattern:/(\"|')(?:\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[^(])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,inside:{delimiter:{pattern:/^\\\\\\(|\\)$/,alias:\"variable\"}}}}},keyword:/\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,number:/\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,constant:/\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,atrule:/@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,builtin:/\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/}),Prism.languages.swift.string.inside.interpolation.inside.rest=Prism.languages.swift;"
            ]
        },
        "prism-t4-cs.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.t4 = Prism.languages['t4-cs'] = Prism.languages['t4-templating'].createT4('csharp');"
            ]
        },
        "prism-t4-cs.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.t4=Prism.languages[\"t4-cs\"]=Prism.languages[\"t4-templating\"].createT4(\"csharp\");"
            ]
        },
        "prism-t4-templating.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tfunction createBlock(prefix, inside, contentAlias) {",
                "\t\treturn {",
                "\t\t\tpattern: RegExp('<#' + prefix + '[\\\\s\\\\S]*?#>'),",
                "\t\t\talias: 'block',",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: RegExp('^<#' + prefix + '|#>$'),",
                "\t\t\t\t\talias: 'important'",
                "\t\t\t\t},",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\t\tinside: inside,",
                "\t\t\t\t\talias: contentAlias",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t};",
                "\t}",
                "",
                "\tfunction createT4(insideLang) {",
                "\t\tvar grammar = Prism.languages[insideLang];",
                "\t\tvar className = 'language-' + insideLang;",
                "",
                "\t\treturn {",
                "\t\t\t'block': {",
                "\t\t\t\tpattern: /<#[\\s\\S]+?#>/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'directive': createBlock('@', {",
                "\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\tpattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,",
                "\t\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t\t'punctuation': /^=|^[\"']|[\"']$/",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'keyword': /\\w+(?=\\s)/,",
                "\t\t\t\t\t\t'attr-name': /\\w+/",
                "\t\t\t\t\t}),",
                "\t\t\t\t\t'expression': createBlock('=', grammar, className),",
                "\t\t\t\t\t'class-feature': createBlock('\\\\+', grammar, className),",
                "\t\t\t\t\t'standard': createBlock('', grammar, className)",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t};",
                "\t}",
                "",
                "\tPrism.languages['t4-templating'] = Object.defineProperty({}, 'createT4', { value: createT4 });",
                "",
                "}(Prism));"
            ]
        },
        "prism-t4-templating.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){function i(e,t,a){return{pattern:RegExp(\"<#\"+e+\"[\\\\s\\\\S]*?#>\"),alias:\"block\",inside:{delimiter:{pattern:RegExp(\"^<#\"+e+\"|#>$\"),alias:\"important\"},content:{pattern:/[\\s\\S]+/,inside:t,alias:a}}}}n.languages[\"t4-templating\"]=Object.defineProperty({},\"createT4\",{value:function(e){var t=n.languages[e],a=\"language-\"+e;return{block:{pattern:/<#[\\s\\S]+?#>/,inside:{directive:i(\"@\",{\"attr-value\":{pattern:/=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,inside:{punctuation:/^=|^[\"']|[\"']$/}},keyword:/\\w+(?=\\s)/,\"attr-name\":/\\w+/}),expression:i(\"=\",t,a),\"class-feature\":i(\"\\\\+\",t,a),standard:i(\"\",t,a)}}}}})}(Prism);"
            ]
        },
        "prism-t4-vb.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['t4-vb'] = Prism.languages['t4-templating'].createT4('vbnet');"
            ]
        },
        "prism-t4-vb.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"t4-vb\"]=Prism.languages[\"t4-templating\"].createT4(\"vbnet\");"
            ]
        },
        "prism-tap.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tap = {",
                "\tfail: /not ok[^#{\\n\\r]*/,",
                "\tpass: /ok[^#{\\n\\r]*/,",
                "\tpragma: /pragma [+-][a-z]+/,",
                "\tbailout: /bail out!.*/i,",
                "\tversion: /TAP version \\d+/i,",
                "\tplan: /\\d+\\.\\.\\d+(?: +#.*)?/,",
                "\tsubtest: {",
                "\t\tpattern: /# Subtest(?:: .*)?/,",
                "\t\tgreedy: true",
                "\t},",
                "\tpunctuation: /[{}]/,",
                "\tdirective: /#.*/,",
                "\tyamlish: {",
                "\t\tpattern: /(^[ \\t]*)---[\\s\\S]*?[\\r\\n][ \\t]*\\.\\.\\.$/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: Prism.languages.yaml,",
                "\t\talias: 'language-yaml'",
                "\t}",
                "};"
            ]
        },
        "prism-tap.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tap={fail:/not ok[^#{\\n\\r]*/,pass:/ok[^#{\\n\\r]*/,pragma:/pragma [+-][a-z]+/,bailout:/bail out!.*/i,version:/TAP version \\d+/i,plan:/\\d+\\.\\.\\d+(?: +#.*)?/,subtest:{pattern:/# Subtest(?:: .*)?/,greedy:!0},punctuation:/[{}]/,directive:/#.*/,yamlish:{pattern:/(^[ \\t]*)---[\\s\\S]*?[\\r\\n][ \\t]*\\.\\.\\.$/m,lookbehind:!0,inside:Prism.languages.yaml,alias:\"language-yaml\"}};"
            ]
        },
        "prism-tcl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tcl = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': [",
                "\t\t{",
                "\t\t\tpattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\$){[^}]+}/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'function': {",
                "\t\tpattern: /(^\\s*proc[ \\t]+)[^\\s]+/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'builtin': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/\\b(?:elseif|else)\\b/",
                "\t],",
                "\t'scope': {",
                "\t\tpattern: /(^\\s*)(?:global|upvar|variable)\\b/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'constant'",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,",
                "\t'punctuation': /[{}()\\[\\]]/",
                "};"
            ]
        },
        "prism-tcl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tcl={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,greedy:!0},variable:[{pattern:/(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,lookbehind:!0},{pattern:/(\\$){[^}]+}/,lookbehind:!0},{pattern:/(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,lookbehind:!0}],function:{pattern:/(^\\s*proc[ \\t]+)[^\\s]+/m,lookbehind:!0},builtin:[{pattern:/(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,lookbehind:!0},/\\b(?:elseif|else)\\b/],scope:{pattern:/(^\\s*)(?:global|upvar|variable)\\b/m,lookbehind:!0,alias:\"constant\"},keyword:{pattern:/(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,lookbehind:!0},operator:/!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,punctuation:/[{}()\\[\\]]/};"
            ]
        },
        "prism-textile.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t// We don't allow for pipes inside parentheses",
                "\t// to not break table pattern |(. foo |). bar |",
                "\tvar modifierRegex = /\\([^|()\\n]+\\)|\\[[^\\]\\n]+\\]|\\{[^}\\n]+\\}/.source;",
                "\t// Opening and closing parentheses which are not a modifier",
                "\t// This pattern is necessary to prevent exponential backtracking",
                "\tvar parenthesesRegex = /\\)|\\((?![^|()\\n]+\\))/.source;",
                "\t/**",
                "\t * @param {string} source",
                "\t * @param {string} [flags]",
                "\t */",
                "\tfunction withModifier(source, flags) {",
                "\t\treturn RegExp(",
                "\t\t\tsource",
                "\t\t\t\t.replace(/<MOD>/g, function () { return '(?:' + modifierRegex + ')'; })",
                "\t\t\t\t.replace(/<PAR>/g, function () { return '(?:' + parenthesesRegex + ')'; }),",
                "\t\t\tflags || '');",
                "\t}",
                "",
                "\tvar modifierTokens = {",
                "\t\t'css': {",
                "\t\t\tpattern: /\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.css",
                "\t\t\t}",
                "\t\t},",
                "\t\t'class-id': {",
                "\t\t\tpattern: /(\\()[^)]+(?=\\))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-value'",
                "\t\t},",
                "\t\t'lang': {",
                "\t\t\tpattern: /(\\[)[^\\]]+(?=\\])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-value'",
                "\t\t},",
                "\t\t// Anything else is punctuation (the first pattern is for row/col spans inside tables)",
                "\t\t'punctuation': /[\\\\\\/]\\d+|\\S/",
                "\t};",
                "",
                "",
                "\tvar textile = Prism.languages.textile = Prism.languages.extend('markup', {",
                "\t\t'phrase': {",
                "\t\t\tpattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "",
                "\t\t\t\t// h1. Header 1",
                "\t\t\t\t'block-tag': {",
                "\t\t\t\t\tpattern: withModifier(/^[a-z]\\w*(?:<MOD>|<PAR>|[<>=])*\\./.source),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^[a-z]\\w*)(?:<MOD>|<PAR>|[<>=])+(?=\\.)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'tag': /^[a-z]\\w*/,",
                "\t\t\t\t\t\t'punctuation': /\\.$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// # List item",
                "\t\t\t\t// * List item",
                "\t\t\t\t'list': {",
                "\t\t\t\t\tpattern: withModifier(/^[*#]+<MOD>*\\s+\\S.*/.source, 'm'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^[*#]+)<MOD>+/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /^[*#]+/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// | cell | cell | cell |",
                "\t\t\t\t'table': {",
                "\t\t\t\t\t// Modifiers can be applied to the row: {color:red}.|1|2|3|",
                "\t\t\t\t\t// or the cell: |{color:red}.1|2|3|",
                "\t\t\t\t\tpattern: withModifier(/^(?:(?:<MOD>|<PAR>|[<>=^~])+\\.\\s*)?(?:\\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.))[^|]*)+\\|/.source, 'm'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\t// Modifiers for rows after the first one are",
                "\t\t\t\t\t\t\t// preceded by a pipe and a line feed",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^|\\|(?:\\r?\\n|\\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+(?=\\.)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /\\||^\\./",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t'inline': {",
                "\t\t\t\t\tpattern: withModifier(/(^|[^a-zA-Z\\d])(\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>*.+?\\2(?![a-zA-Z\\d])/.source),",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t// Note: superscripts and subscripts are not handled specifically",
                "",
                "\t\t\t\t\t\t// *bold*, **bold**",
                "\t\t\t\t\t\t'bold': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^(\\*\\*?)<MOD>*).+?(?=\\2)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// _italic_, __italic__",
                "\t\t\t\t\t\t'italic': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^(__?)<MOD>*).+?(?=\\2)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// ??cite??",
                "\t\t\t\t\t\t'cite': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^\\?\\?<MOD>*).+?(?=\\?\\?)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'string'",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// @code@",
                "\t\t\t\t\t\t'code': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^@<MOD>*).+?(?=@)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// +inserted+",
                "\t\t\t\t\t\t'inserted': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^\\+<MOD>*).+?(?=\\+)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// -deleted-",
                "\t\t\t\t\t\t'deleted': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^-<MOD>*).+?(?=-)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// %span%",
                "\t\t\t\t\t\t'span': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^%<MOD>*).+?(?=%)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>+/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[*_%?@+\\-^~]+/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// [alias]http://example.com",
                "\t\t\t\t'link-ref': {",
                "\t\t\t\t\tpattern: /^\\[[^\\]]+\\]\\S+$/m,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'string': {",
                "\t\t\t\t\t\t\tpattern: /(\\[)[^\\]]+(?=\\])/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(\\])\\S+$/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[\\[\\]]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// \"text\":http://example.com",
                "\t\t\t\t// \"text\":link-ref",
                "\t\t\t\t'link': {",
                "\t\t\t\t\tpattern: withModifier(/\"<MOD>*[^\"]+\":.+?(?=[^\\w/]?(?:\\s|$))/.source),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'text': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^\"<MOD>*)[^\"]+(?=\")/.source),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^\")<MOD>+/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(:).+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[\":]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// !image.jpg!",
                "\t\t\t\t// !image.jpg(Title)!:http://example.com",
                "\t\t\t\t'image': {",
                "\t\t\t\t\tpattern: withModifier(/!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?!(?::.+?(?=[^\\w/]?(?:\\s|$)))?/.source),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'source': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?(?=!)/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'url'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: withModifier(/(^!)(?:<MOD>|<PAR>|[<>=])+/.source),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(:).+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[!:]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// Footnote[1]",
                "\t\t\t\t'footnote': {",
                "\t\t\t\t\tpattern: /\\b\\[\\d+\\]/,",
                "\t\t\t\t\talias: 'comment',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\[|\\]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// CSS(Cascading Style Sheet)",
                "\t\t\t\t'acronym': {",
                "\t\t\t\t\tpattern: /\\b[A-Z\\d]+\\([^)]+\\)/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'comment': {",
                "\t\t\t\t\t\t\tpattern: /(\\()[^)]+(?=\\))/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[()]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// Prism(C)",
                "\t\t\t\t'mark': {",
                "\t\t\t\t\tpattern: /\\b\\((?:TM|R|C)\\)/,",
                "\t\t\t\t\talias: 'comment',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /[()]/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tvar phraseInside = textile['phrase'].inside;",
                "\tvar nestedPatterns = {",
                "\t\t'inline': phraseInside['inline'],",
                "\t\t'link': phraseInside['link'],",
                "\t\t'image': phraseInside['image'],",
                "\t\t'footnote': phraseInside['footnote'],",
                "\t\t'acronym': phraseInside['acronym'],",
                "\t\t'mark': phraseInside['mark']",
                "\t};",
                "",
                "\t// Only allow alpha-numeric HTML tags, not XML tags",
                "\ttextile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "",
                "\t// Allow some nesting",
                "\tvar phraseInlineInside = phraseInside['inline'].inside;",
                "\tphraseInlineInside['bold'].inside = nestedPatterns;",
                "\tphraseInlineInside['italic'].inside = nestedPatterns;",
                "\tphraseInlineInside['inserted'].inside = nestedPatterns;",
                "\tphraseInlineInside['deleted'].inside = nestedPatterns;",
                "\tphraseInlineInside['span'].inside = nestedPatterns;",
                "",
                "\t// Allow some styles inside table cells",
                "\tvar phraseTableInside = phraseInside['table'].inside;",
                "\tphraseTableInside['inline'] = nestedPatterns['inline'];",
                "\tphraseTableInside['link'] = nestedPatterns['link'];",
                "\tphraseTableInside['image'] = nestedPatterns['image'];",
                "\tphraseTableInside['footnote'] = nestedPatterns['footnote'];",
                "\tphraseTableInside['acronym'] = nestedPatterns['acronym'];",
                "\tphraseTableInside['mark'] = nestedPatterns['mark'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-textile.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){function e(n,e){return RegExp(n.replace(/<MOD>/g,function(){return\"(?:\\\\([^|()\\n]+\\\\)|\\\\[[^\\\\]\\n]+\\\\]|\\\\{[^}\\n]+\\\\})\"}).replace(/<PAR>/g,function(){return\"(?:\\\\)|\\\\((?![^|()\\n]+\\\\)))\"}),e||\"\")}var i={css:{pattern:/\\{[^}]+\\}/,inside:{rest:n.languages.css}},\"class-id\":{pattern:/(\\()[^)]+(?=\\))/,lookbehind:!0,alias:\"attr-value\"},lang:{pattern:/(\\[)[^\\]]+(?=\\])/,lookbehind:!0,alias:\"attr-value\"},punctuation:/[\\\\\\/]\\d+|\\S/},t=n.languages.textile=n.languages.extend(\"markup\",{phrase:{pattern:/(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,lookbehind:!0,inside:{\"block-tag\":{pattern:e(\"^[a-z]\\\\w*(?:<MOD>|<PAR>|[<>=])*\\\\.\"),inside:{modifier:{pattern:e(\"(^[a-z]\\\\w*)(?:<MOD>|<PAR>|[<>=])+(?=\\\\.)\"),lookbehind:!0,inside:i},tag:/^[a-z]\\w*/,punctuation:/\\.$/}},list:{pattern:e(\"^[*#]+<MOD>*\\\\s+\\\\S.*\",\"m\"),inside:{modifier:{pattern:e(\"(^[*#]+)<MOD>+\"),lookbehind:!0,inside:i},punctuation:/^[*#]+/}},table:{pattern:e(\"^(?:(?:<MOD>|<PAR>|[<>=^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\\\\\\\/]\\\\d+)+\\\\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\\\\\\\/]\\\\d+)+\\\\.))[^|]*)+\\\\|\",\"m\"),inside:{modifier:{pattern:e(\"(^|\\\\|(?:\\r?\\n|\\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)\"),lookbehind:!0,inside:i},punctuation:/\\||^\\./}},inline:{pattern:e(\"(^|[^a-zA-Z\\\\d])(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])<MOD>*.+?\\\\2(?![a-zA-Z\\\\d])\"),lookbehind:!0,inside:{bold:{pattern:e(\"(^(\\\\*\\\\*?)<MOD>*).+?(?=\\\\2)\"),lookbehind:!0},italic:{pattern:e(\"(^(__?)<MOD>*).+?(?=\\\\2)\"),lookbehind:!0},cite:{pattern:e(\"(^\\\\?\\\\?<MOD>*).+?(?=\\\\?\\\\?)\"),lookbehind:!0,alias:\"string\"},code:{pattern:e(\"(^@<MOD>*).+?(?=@)\"),lookbehind:!0,alias:\"keyword\"},inserted:{pattern:e(\"(^\\\\+<MOD>*).+?(?=\\\\+)\"),lookbehind:!0},deleted:{pattern:e(\"(^-<MOD>*).+?(?=-)\"),lookbehind:!0},span:{pattern:e(\"(^%<MOD>*).+?(?=%)\"),lookbehind:!0},modifier:{pattern:e(\"(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])<MOD>+\"),lookbehind:!0,inside:i},punctuation:/[*_%?@+\\-^~]+/}},\"link-ref\":{pattern:/^\\[[^\\]]+\\]\\S+$/m,inside:{string:{pattern:/(\\[)[^\\]]+(?=\\])/,lookbehind:!0},url:{pattern:/(\\])\\S+$/,lookbehind:!0},punctuation:/[\\[\\]]/}},link:{pattern:e('\"<MOD>*[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),inside:{text:{pattern:e('(^\"<MOD>*)[^\"]+(?=\")'),lookbehind:!0},modifier:{pattern:e('(^\")<MOD>+'),lookbehind:!0,inside:i},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[\":]/}},image:{pattern:e(\"!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?\"),inside:{source:{pattern:e(\"(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)\"),lookbehind:!0,alias:\"url\"},modifier:{pattern:e(\"(^!)(?:<MOD>|<PAR>|[<>=])+\"),lookbehind:!0,inside:i},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[!:]/}},footnote:{pattern:/\\b\\[\\d+\\]/,alias:\"comment\",inside:{punctuation:/\\[|\\]/}},acronym:{pattern:/\\b[A-Z\\d]+\\([^)]+\\)/,inside:{comment:{pattern:/(\\()[^)]+(?=\\))/,lookbehind:!0},punctuation:/[()]/}},mark:{pattern:/\\b\\((?:TM|R|C)\\)/,alias:\"comment\",inside:{punctuation:/[()]/}}}}}),a=t.phrase.inside,o={inline:a.inline,link:a.link,image:a.image,footnote:a.footnote,acronym:a.acronym,mark:a.mark};t.tag.pattern=/<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;var r=a.inline.inside;r.bold.inside=o,r.italic.inside=o,r.inserted.inside=o,r.deleted.inside=o,r.span.inside=o;var d=a.table.inside;d.inline=o.inline,d.link=o.link,d.image=o.image,d.footnote=o.footnote,d.acronym=o.acronym,d.mark=o.mark}(Prism);"
            ]
        },
        "prism-toml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar key = /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/.source;",
                "",
                "\t/**",
                "\t * @param {string} pattern",
                "\t */",
                "\tfunction insertKey(pattern) {",
                "\t\treturn pattern.replace(/__/g, function () { return key; });",
                "\t}",
                "",
                "\tPrism.languages.toml = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /#.*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'table': {",
                "\t\t\tpattern: RegExp(insertKey(/(^\\s*\\[\\s*(?:\\[\\s*)?)__(?:\\s*\\.\\s*__)*(?=\\s*\\])/.source), 'm'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'key': {",
                "\t\t\tpattern: RegExp(insertKey(/(^\\s*|[{,]\\s*)__(?:\\s*\\.\\s*__)*(?=\\s*=)/.source), 'm'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'date': [",
                "\t\t\t{",
                "\t\t\t\t// Offset Date-Time, Local Date-Time, Local Date",
                "\t\t\t\tpattern: /\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,",
                "\t\t\t\talias: 'number'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Local Time",
                "\t\t\t\tpattern: /\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,",
                "\t\t\t\talias: 'number'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'number': /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'punctuation': /[.,=[\\]{}]/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-toml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){function n(e){return e.replace(/__/g,function(){return\"(?:[\\\\w-]+|'[^'\\n\\r]*'|\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\")\"})}e.languages.toml={comment:{pattern:/#.*/,greedy:!0},table:{pattern:RegExp(n(\"(^\\\\s*\\\\[\\\\s*(?:\\\\[\\\\s*)?)__(?:\\\\s*\\\\.\\\\s*__)*(?=\\\\s*\\\\])\"),\"m\"),lookbehind:!0,greedy:!0,alias:\"class-name\"},key:{pattern:RegExp(n(\"(^\\\\s*|[{,]\\\\s*)__(?:\\\\s*\\\\.\\\\s*__)*(?=\\\\s*=)\"),\"m\"),lookbehind:!0,greedy:!0,alias:\"property\"},string:{pattern:/\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},date:[{pattern:/\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,alias:\"number\"},{pattern:/\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,alias:\"number\"}],number:/(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,boolean:/\\b(?:true|false)\\b/,punctuation:/[.,=[\\]{}]/}}(Prism);"
            ]
        },
        "prism-tsx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar typescript = Prism.util.clone(Prism.languages.typescript);",
                "\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);",
                "",
                "\t// This will prevent collisions between TSX tags and TS generic types.",
                "\t// Idea by https://github.com/karlhorky",
                "\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928",
                "\tvar tag = Prism.languages.tsx.tag;",
                "\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);",
                "\ttag.lookbehind = true;",
                "}(Prism));"
            ]
        },
        "prism-tsx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=a.util.clone(a.languages.typescript);a.languages.tsx=a.languages.extend(\"jsx\",e);var t=a.languages.tsx.tag;t.pattern=RegExp(\"(^|[^\\\\w$]|(?=</))(?:\"+t.pattern.source+\")\",t.pattern.flags),t.lookbehind=!0}(Prism);"
            ]
        },
        "prism-tt2.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "\tPrism.languages.tt2 = Prism.languages.extend('clike', {",
                "\t\t'comment': /#.*|\\[%#[\\s\\S]*?%\\]/,",
                "\t\t'keyword': /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,",
                "\t\t'punctuation': /[[\\]{},()]/",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('tt2', 'number', {",
                "\t\t'operator': /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('tt2', 'keyword', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^(?:\\[%|%%)-?|-?%]$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('tt2', 'string', {",
                "\t\t'single-quoted-string': {",
                "\t\t\tpattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'double-quoted-string': {",
                "\t\t\tpattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': {",
                "\t\t\t\t\tpattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\t// The different types of TT2 strings \"replace\" the C-like standard string",
                "\tdelete Prism.languages.tt2.string;",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-tt2.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){t.languages.tt2=t.languages.extend(\"clike\",{comment:/#.*|\\[%#[\\s\\S]*?%\\]/,keyword:/\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,punctuation:/[[\\]{},()]/}),t.languages.insertBefore(\"tt2\",\"number\",{operator:/=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,variable:{pattern:/\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i}}),t.languages.insertBefore(\"tt2\",\"keyword\",{delimiter:{pattern:/^(?:\\[%|%%)-?|-?%]$/,alias:\"punctuation\"}}),t.languages.insertBefore(\"tt2\",\"string\",{\"single-quoted-string\":{pattern:/'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,greedy:!0,alias:\"string\",inside:{variable:{pattern:/\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i}}}}),delete t.languages.tt2.string,t.hooks.add(\"before-tokenize\",function(e){t.languages[\"markup-templating\"].buildPlaceholders(e,\"tt2\",/\\[%[\\s\\S]+?%\\]/g)}),t.hooks.add(\"after-tokenize\",function(e){t.languages[\"markup-templating\"].tokenizePlaceholders(e,\"tt2\")})}(Prism);"
            ]
        },
        "prism-turtle.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.turtle = {",
                "\t'comment': {",
                "\t\tpattern: /#.*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'multiline-string': {",
                "\t\tpattern: /\"\"\"(?:(?:\"\"?)?(?:[^\"\\\\]|\\\\.))*\"\"\"|'''(?:(?:''?)?(?:[^'\\\\]|\\\\.))*'''/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string',",
                "\t\tinside: {",
                "\t\t\t'comment': /#.*/",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'url': {",
                "\t\tpattern: /<(?:[^\\x00-\\x20<>\"{}|^`\\\\]|\\\\(?:u[\\da-fA-F]{4}|U[\\da-fA-F]{8}))*>/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[<>]/",
                "\t\t}",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /(?:(?![-.\\d\\xB7])[-.\\w\\xB7\\xC0-\\uFFFD]+)?:(?:(?![-.])(?:[-.:\\w\\xC0-\\uFFFD]|%[\\da-f]{2}|\\\\.)+)?/i,",
                "\t\tinside: {",
                "\t\t\t'local-name': {",
                "\t\t\t\tpattern: /([^:]*:)[\\s\\S]+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'prefix': {",
                "\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'number': /[+-]?\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,",
                "\t'punctuation': /[{}.,;()[\\]]|\\^\\^/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'keyword': [",
                "\t\t/(?:\\ba|@prefix|@base)\\b|=/,",
                "\t\t/\\b(?:graph|base|prefix)\\b/i",
                "\t],",
                "\t'tag': {",
                "\t\tpattern: /@[a-z]+(?:-[a-z\\d]+)*/i,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /@/",
                "\t\t}",
                "\t}",
                "};",
                "Prism.languages.trig = Prism.languages['turtle'];"
            ]
        },
        "prism-turtle.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.turtle={comment:{pattern:/#.*/,greedy:!0},\"multiline-string\":{pattern:/\"\"\"(?:(?:\"\"?)?(?:[^\"\\\\]|\\\\.))*\"\"\"|'''(?:(?:''?)?(?:[^'\\\\]|\\\\.))*'''/,greedy:!0,alias:\"string\",inside:{comment:/#.*/}},string:{pattern:/\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*'/,greedy:!0},url:{pattern:/<(?:[^\\x00-\\x20<>\"{}|^`\\\\]|\\\\(?:u[\\da-fA-F]{4}|U[\\da-fA-F]{8}))*>/,greedy:!0,inside:{punctuation:/[<>]/}},function:{pattern:/(?:(?![-.\\d\\xB7])[-.\\w\\xB7\\xC0-\\uFFFD]+)?:(?:(?![-.])(?:[-.:\\w\\xC0-\\uFFFD]|%[\\da-f]{2}|\\\\.)+)?/i,inside:{\"local-name\":{pattern:/([^:]*:)[\\s\\S]+/,lookbehind:!0},prefix:{pattern:/[\\s\\S]+/,inside:{punctuation:/:/}}}},number:/[+-]?\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,punctuation:/[{}.,;()[\\]]|\\^\\^/,boolean:/\\b(?:true|false)\\b/,keyword:[/(?:\\ba|@prefix|@base)\\b|=/,/\\b(?:graph|base|prefix)\\b/i],tag:{pattern:/@[a-z]+(?:-[a-z\\d]+)*/i,inside:{punctuation:/@/}}},Prism.languages.trig=Prism.languages.turtle;"
            ]
        },
        "prism-twig.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.twig = {",
                "\t'comment': /\\{#[\\s\\S]*?#\\}/,",
                "\t'tag': {",
                "\t\tpattern: /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,",
                "\t\tinside: {",
                "\t\t\t'ld': {",
                "\t\t\t\tpattern: /^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^(?:\\{\\{|\\{%)-?/,",
                "\t\t\t\t\t'keyword': /\\w+/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'rd': {",
                "\t\t\t\tpattern: /-?(?:%\\}|\\}\\})$/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /.+/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^['\"]|['\"]$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'keyword': /\\b(?:even|if|odd)\\b/,",
                "\t\t\t'boolean': /\\b(?:true|false|null)\\b/,",
                "\t\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,",
                "\t\t\t'operator': [",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t/[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/",
                "\t\t\t],",
                "\t\t\t'property': /\\b[a-zA-Z_]\\w*\\b/,",
                "\t\t\t'punctuation': /[()\\[\\]{}:.,]/",
                "\t\t}",
                "\t},",
                "",
                "\t// The rest can be parsed as HTML",
                "\t'other': {",
                "\t\t// We want non-blank matches",
                "\t\tpattern: /\\S(?:[\\s\\S]*\\S)?/,",
                "\t\tinside: Prism.languages.markup",
                "\t}",
                "};"
            ]
        },
        "prism-twig.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.twig={comment:/\\{#[\\s\\S]*?#\\}/,tag:{pattern:/\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,inside:{ld:{pattern:/^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,inside:{punctuation:/^(?:\\{\\{|\\{%)-?/,keyword:/\\w+/}},rd:{pattern:/-?(?:%\\}|\\}\\})$/,inside:{punctuation:/.+/}},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,inside:{punctuation:/^['\"]|['\"]$/}},keyword:/\\b(?:even|if|odd)\\b/,boolean:/\\b(?:true|false|null)\\b/,number:/\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,operator:[{pattern:/(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,lookbehind:!0},/[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],property:/\\b[a-zA-Z_]\\w*\\b/,punctuation:/[()\\[\\]{}:.,]/}},other:{pattern:/\\S(?:[\\s\\S]*\\S)?/,inside:Prism.languages.markup}};"
            ]
        },
        "prism-typescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.typescript = Prism.languages.extend('javascript', {",
                "\t\t'class-name': {",
                "\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: null // see below",
                "\t\t},",
                "\t\t// From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words",
                "\t\t'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,",
                "\t\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,",
                "\t});",
                "",
                "\t// doesn't work with TS because TS is too complex",
                "\tdelete Prism.languages.typescript['parameter'];",
                "",
                "\t// a version of typescript specifically for highlighting types",
                "\tvar typeInside = Prism.languages.extend('typescript', {});",
                "\tdelete typeInside['class-name'];",
                "",
                "\tPrism.languages.typescript['class-name'].inside = typeInside;",
                "",
                "\tPrism.languages.insertBefore('typescript', 'function', {",
                "\t\t'generic-function': {",
                "\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...",
                "\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,",
                "\t\t\t\t'generic': {",
                "\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <",
                "\t\t\t\t\talias: 'class-name',",
                "\t\t\t\t\tinside: typeInside",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.ts = Prism.languages.typescript;",
                "",
                "}(Prism));"
            ]
        },
        "prism-typescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.typescript=e.languages.extend(\"javascript\",{\"class-name\":{pattern:/(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},keyword:/\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,builtin:/\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/}),delete e.languages.typescript.parameter;var n=e.languages.extend(\"typescript\",{});delete n[\"class-name\"],e.languages.typescript[\"class-name\"].inside=n,e.languages.insertBefore(\"typescript\",\"function\",{\"generic-function\":{pattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,greedy:!0,inside:{function:/^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,generic:{pattern:/<[\\s\\S]+/,alias:\"class-name\",inside:n}}}}),e.languages.ts=e.languages.typescript}(Prism);"
            ]
        },
        "prism-typoscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "\tvar keywords = /\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/;",
                "",
                "\tPrism.languages.typoscript = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\t// multiline comments /* */",
                "\t\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// double-slash comments - ignored when backslashes or colon is found in front",
                "\t\t\t\t// also ignored whenever directly after an equal-sign, because it would probably be an url without protocol",
                "\t\t\t\tpattern: /(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// hash comments - ignored when leading quote is found for hex colors in strings",
                "\t\t\t\tpattern: /(^|[^\"'])#.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\t// old include style",
                "\t\t\t\tpattern: /<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'string': {",
                "\t\t\t\t\t\tpattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'keyword': keywords,",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'keyword': {",
                "\t\t\t\t\t\tpattern: /INCLUDE_TYPOSCRIPT/,",
                "\t\t\t\t\t},",
                "\t\t\t\t},",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// new include style",
                "\t\t\t\tpattern: /@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'string': /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,",
                "\t\t\t\t},",
                "\t\t\t}",
                "\t\t],",
                "\t\t'string': {",
                "\t\t\tpattern: /^([^=]*=[< ]?)(?:(?!]\\n).)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /{\\$.*}/, // constants include",
                "\t\t\t\t'keyword': keywords,",
                "\t\t\t\t'number': /^[0-9]+$/,",
                "\t\t\t\t'punctuation': /[,|:]/,",
                "\t\t\t}",
                "\t\t},",
                "\t\t'keyword': keywords,",
                "\t\t'number': {",
                "\t\t\t// special highlighting for indexes of arrays in tags",
                "\t\t\tpattern: /[0-9]+\\s*[.{=]/,",
                "\t\t\tinside: {",
                "\t\t\t\t'operator': /[.{=]/,",
                "\t\t\t}",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\tpattern: /\\.?[\\w-\\\\]+\\.?/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./,",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': /[{}[\\];(),.:|]/,",
                "\t\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,",
                "\t};",
                "",
                "\tPrism.languages.tsconfig = Prism.languages.typoscript;",
                "",
                "}(Prism));"
            ]
        },
        "prism-typoscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(E){var n=/\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/;E.languages.typoscript={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\"'])#.*/,lookbehind:!0,greedy:!0}],function:[{pattern:/<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,inside:{string:{pattern:/\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,inside:{keyword:n}},keyword:{pattern:/INCLUDE_TYPOSCRIPT/}}},{pattern:/@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,inside:{string:/\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/}}],string:{pattern:/^([^=]*=[< ]?)(?:(?!]\\n).)*/,lookbehind:!0,inside:{function:/{\\$.*}/,keyword:n,number:/^[0-9]+$/,punctuation:/[,|:]/}},keyword:n,number:{pattern:/[0-9]+\\s*[.{=]/,inside:{operator:/[.{=]/}},tag:{pattern:/\\.?[\\w-\\\\]+\\.?/,inside:{punctuation:/\\./}},punctuation:/[{}[\\];(),.:|]/,operator:/[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/},E.languages.tsconfig=E.languages.typoscript}(Prism);"
            ]
        },
        "prism-unrealscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.unrealscript = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'category': {",
                "\t\tpattern: /(\\b(?:(?:autoexpand|hide|show)categories|var)\\s*\\()[^()]+(?=\\))/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\talias: 'property'",
                "\t},",
                "\t'metadata': {",
                "\t\tpattern: /(\\w\\s*)<\\s*\\w+\\s*=[^<>|=\\r\\n]+(?:\\|\\s*\\w+\\s*=[^<>|=\\r\\n]+)*>/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'property': /\\w+(?=\\s*=)/,",
                "\t\t\t'operator': /=/,",
                "\t\t\t'punctuation': /[<>|]/",
                "\t\t}",
                "\t},",
                "\t'macro': {",
                "\t\tpattern: /`\\w+/,",
                "\t\talias: 'property'",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:class|enum|extends|interface|state(?:\\(\\))?|struct|within)\\s+)\\w+/,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'keyword': /\\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\\b/,",
                "\t'function': /[a-z_]\\w*(?=\\s*\\()/i,",
                "",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "\t// https://docs.unrealengine.com/udk/Three/UnrealScriptExpressions.html",
                "\t'operator': />>|<<|--|\\+\\+|\\*\\*|[-+*/~!=<>$@]=?|&&?|\\|\\|?|\\^\\^?|[?:%]|\\b(?:Cross|Dot|ClockwiseFrom)\\b/,",
                "\t'punctuation': /[()[\\]{};,.]/",
                "};",
                "",
                "Prism.languages.uc = Prism.languages.uscript = Prism.languages.unrealscript;"
            ]
        },
        "prism-unrealscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.unrealscript={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},category:{pattern:/(\\b(?:(?:autoexpand|hide|show)categories|var)\\s*\\()[^()]+(?=\\))/,lookbehind:!0,greedy:!0,alias:\"property\"},metadata:{pattern:/(\\w\\s*)<\\s*\\w+\\s*=[^<>|=\\r\\n]+(?:\\|\\s*\\w+\\s*=[^<>|=\\r\\n]+)*>/,lookbehind:!0,greedy:!0,inside:{property:/\\w+(?=\\s*=)/,operator:/=/,punctuation:/[<>|]/}},macro:{pattern:/`\\w+/,alias:\"property\"},\"class-name\":{pattern:/(\\b(?:class|enum|extends|interface|state(?:\\(\\))?|struct|within)\\s+)\\w+/,lookbehind:!0},keyword:/\\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\\b/,function:/[a-z_]\\w*(?=\\s*\\()/i,boolean:/\\b(?:false|true)\\b/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/>>|<<|--|\\+\\+|\\*\\*|[-+*/~!=<>$@]=?|&&?|\\|\\|?|\\^\\^?|[?:%]|\\b(?:Cross|Dot|ClockwiseFrom)\\b/,punctuation:/[()[\\]{};,.]/},Prism.languages.uc=Prism.languages.uscript=Prism.languages.unrealscript;"
            ]
        },
        "prism-v.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tvar interpolationExpr = {",
                "\t\tpattern: /[\\s\\S]+/,",
                "\t\tinside: null",
                "\t};",
                "",
                "\tPrism.languages.v = Prism.languages.extend('clike', {",
                "\t\t'string': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /`(?:\\\\\\`|\\\\?[^\\`]{1,2})`/, // using {1,2} instead of `u` flag for compatibility",
                "\t\t\t\talias: 'rune'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\t\talias: 'quoted-string',",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': {",
                "\t\t\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'interpolation-variable': {",
                "\t\t\t\t\t\t\t\tpattern: /^\\$\\w[\\s\\S]*$/,",
                "\t\t\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\t\t\tpattern: /^\\${|}$/,",
                "\t\t\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'interpolation-expression': interpolationExpr",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'class-name': {",
                "\t\t\tpattern: /(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?[\\w]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': /(?:\\b(?:as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|__global|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:if|else|for)|#(?:include|flag))\\b/,",
                "\t\t'number': /\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,",
                "\t\t'operator': /~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,",
                "\t\t'builtin': /\\b(?:any(?:_int|_float)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|nt|64|128)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/",
                "\t});",
                "",
                "\tinterpolationExpr.inside = Prism.languages.v;",
                "\t",
                "\tPrism.languages.insertBefore('v', 'operator', {",
                "\t\t'attribute': {",
                "\t\t\tpattern: /^\\s*\\[(?:deprecated|unsafe_fn|typedef|live|inline|flag|ref_only|windows_stdcall|direct_array_access)\\]/m,",
                "\t\t\talias: 'annotation',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[\\[\\]]/,",
                "\t\t\t\t'keyword': /\\w+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'generic': {",
                "\t\t\tpattern: /\\<\\w+\\>(?=\\s*[\\)\\{])/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[<>]/,",
                "\t\t\t\t'class-name': /\\w+/",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\t",
                "\tPrism.languages.insertBefore('v', 'function', {",
                "\t\t'generic-function': {",
                "\t\t\t// e.g. foo<T>( ...",
                "\t\t\tpattern: /\\w+\\s*<\\w+>(?=\\()/,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^\\w+/,",
                "\t\t\t\t'generic': {",
                "\t\t\t\t\tpattern: /<\\w+>/,",
                "\t\t\t\t\tinside: Prism.languages.v.generic.inside",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "})(Prism);"
            ]
        },
        "prism-v.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n={pattern:/[\\s\\S]+/,inside:null};e.languages.v=e.languages.extend(\"clike\",{string:[{pattern:/`(?:\\\\\\`|\\\\?[^\\`]{1,2})`/,alias:\"rune\"},{pattern:/r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,alias:\"quoted-string\",greedy:!0,inside:{interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,lookbehind:!0,inside:{\"interpolation-variable\":{pattern:/^\\$\\w[\\s\\S]*$/,alias:\"variable\"},\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},\"interpolation-expression\":n}}}}],\"class-name\":{pattern:/(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?[\\w]+/,lookbehind:!0},keyword:/(?:\\b(?:as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|__global|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:if|else|for)|#(?:include|flag))\\b/,number:/\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,operator:/~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,builtin:/\\b(?:any(?:_int|_float)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|nt|64|128)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/}),n.inside=e.languages.v,e.languages.insertBefore(\"v\",\"operator\",{attribute:{pattern:/^\\s*\\[(?:deprecated|unsafe_fn|typedef|live|inline|flag|ref_only|windows_stdcall|direct_array_access)\\]/m,alias:\"annotation\",inside:{punctuation:/[\\[\\]]/,keyword:/\\w+/}},generic:{pattern:/\\<\\w+\\>(?=\\s*[\\)\\{])/,inside:{punctuation:/[<>]/,\"class-name\":/\\w+/}}}),e.languages.insertBefore(\"v\",\"function\",{\"generic-function\":{pattern:/\\w+\\s*<\\w+>(?=\\()/,inside:{function:/^\\w+/,generic:{pattern:/<\\w+>/,inside:e.languages.v.generic.inside}}}})}(Prism);"
            ]
        },
        "prism-vala.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vala = Prism.languages.extend('clike', {",
                "\t// Classes copied from prism-csharp",
                "\t'class-name': [",
                "\t\t{",
                "\t\t\t// (Foo bar, Bar baz)",
                "\t\t\tpattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// [Foo]",
                "\t\t\tpattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo : Bar",
                "\t\t\tpattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo",
                "\t\t\tpattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'keyword': /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,",
                "\t'function': /\\w+(?=\\s*\\()/,",
                "\t'number': /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,",
                "\t'operator': /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,",
                "\t'punctuation': /[{}[\\];(),.:]/,",
                "\t'constant': /\\b[A-Z0-9_]+\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('vala','string', {",
                "\t'raw-string': {",
                "\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'template-string': {",
                "\t\tpattern: /@\"[\\s\\S]*?\"/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern: /^\\$\\(?|\\)$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.vala",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('vala', 'keyword', {",
                "\t'regex': {",
                "\t\tpattern: /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'regex-source': {",
                "\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'language-regex',",
                "\t\t\t\tinside: Prism.languages.regex",
                "\t\t\t},",
                "\t\t\t'regex-flags': /[a-z]+$/,",
                "\t\t\t'regex-delimiter': /^\\/|\\/$/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-vala.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vala=Prism.languages.extend(\"clike\",{\"class-name\":[{pattern:/\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,inside:{punctuation:/\\./}},{pattern:/(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}}],keyword:/\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,function:/\\w+(?=\\s*\\()/,number:/(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,operator:/\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,punctuation:/[{}[\\];(),.:]/,constant:/\\b[A-Z0-9_]+\\b/}),Prism.languages.insertBefore(\"vala\",\"string\",{\"raw-string\":{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\"},\"template-string\":{pattern:/@\"[\\s\\S]*?\"/,greedy:!0,inside:{interpolation:{pattern:/\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,inside:{delimiter:{pattern:/^\\$\\(?|\\)$/,alias:\"punctuation\"},rest:Prism.languages.vala}},string:/[\\s\\S]+/}}}),Prism.languages.insertBefore(\"vala\",\"keyword\",{regex:{pattern:/\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,greedy:!0,inside:{\"regex-source\":{pattern:/^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,lookbehind:!0,alias:\"language-regex\",inside:Prism.languages.regex},\"regex-flags\":/[a-z]+$/,\"regex-delimiter\":/^\\/|\\/$/}}});"
            ]
        },
        "prism-vbnet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vbnet = Prism.languages.extend(\"basic\", {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(?:!|REM\\b).+/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': /^REM/i",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])'.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'keyword': /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i",
                "});"
            ]
        },
        "prism-vbnet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vbnet=Prism.languages.extend(\"basic\",{comment:[{pattern:/(?:!|REM\\b).+/i,inside:{keyword:/^REM/i}},{pattern:/(^|[^\\\\:])'.*/,lookbehind:!0}],keyword:/(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i});"
            ]
        },
        "prism-velocity.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.velocity = Prism.languages.extend('markup', {});",
                "",
                "\tvar velocity = {",
                "\t\t'variable': {",
                "\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {} // See below",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': /\\b\\d+\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'operator': /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,",
                "\t\t'punctuation': /[(){}[\\]:,.]/",
                "\t};",
                "",
                "\tvelocity.variable.inside = {",
                "\t\t'string': velocity['string'],",
                "\t\t'function': {",
                "\t\t\tpattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': velocity['number'],",
                "\t\t'boolean': velocity['boolean'],",
                "\t\t'punctuation': velocity['punctuation']",
                "\t};",
                "",
                "\tPrism.languages.insertBefore('velocity', 'comment', {",
                "\t\t'unparsed': {",
                "\t\t\tpattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^#\\[\\[|]]#$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'velocity-comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])##.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'directive': {",
                "\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': {",
                "\t\t\t\t\tpattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /[{}]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\trest: velocity",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': velocity['variable']",
                "\t});",
                "",
                "\tPrism.languages.velocity['tag'].inside['attr-value'].inside.rest = Prism.languages.velocity;",
                "",
                "}(Prism));"
            ]
        },
        "prism-velocity.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.velocity=e.languages.extend(\"markup\",{});var n={variable:{pattern:/(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,lookbehind:!0,inside:{}},string:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},number:/\\b\\d+\\b/,boolean:/\\b(?:true|false)\\b/,operator:/[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,punctuation:/[(){}[\\]:,.]/};n.variable.inside={string:n.string,function:{pattern:/([^\\w-])[a-z][\\w-]*(?=\\()/,lookbehind:!0},number:n.number,boolean:n.boolean,punctuation:n.punctuation},e.languages.insertBefore(\"velocity\",\"comment\",{unparsed:{pattern:/(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,lookbehind:!0,greedy:!0,inside:{punctuation:/^#\\[\\[|]]#$/}},\"velocity-comment\":[{pattern:/(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,lookbehind:!0,greedy:!0,alias:\"comment\"},{pattern:/(^|[^\\\\])##.*/,lookbehind:!0,greedy:!0,alias:\"comment\"}],directive:{pattern:/(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,lookbehind:!0,inside:{keyword:{pattern:/^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,inside:{punctuation:/[{}]/}},rest:n}},variable:n.variable}),e.languages.velocity.tag.inside[\"attr-value\"].inside.rest=e.languages.velocity}(Prism);"
            ]
        },
        "prism-verilog.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.verilog = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// support for any kernel function (ex: $display())",
                "\t'property': /\\B\\$\\w+\\b/,",
                "\t// support for user defined constants (ex: `define)",
                "\t'constant': /\\B`\\w+\\b/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t// support for verilog and system verilog keywords",
                "\t'keyword': /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,",
                "\t// bold highlighting for all verilog and system verilog logic blocks",
                "\t'important': /\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,",
                "\t// support for time ticks, vectors, and real numbers",
                "\t'number': /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b(?:\\d*[._])?\\d+(?:e[-+]?\\d+)?/i,",
                "\t'operator': /[-+{}^~%*\\/?=!<>&|]+/,",
                "\t'punctuation': /[[\\];(),.:]/",
                "};"
            ]
        },
        "prism-verilog.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.verilog={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,greedy:!0},property:/\\B\\$\\w+\\b/,constant:/\\B`\\w+\\b/,function:/\\w+(?=\\()/,keyword:/\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,important:/\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,number:/\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b(?:\\d*[._])?\\d+(?:e[-+]?\\d+)?/i,operator:/[-+{}^~%*\\/?=!<>&|]+/,punctuation:/[[\\];(),.:]/};"
            ]
        },
        "prism-vhdl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vhdl = {",
                "\t'comment': /--.+/,",
                "\t// support for all logic vectors",
                "\t'vhdl-vectors': {",
                "\t\t'pattern': /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,",
                "\t\t'alias': 'number'",
                "\t},",
                "\t// support for operator overloading included",
                "\t'quoted-function': {",
                "\t\tpattern: /\"\\S+?\"(?=\\()/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'string': /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,",
                "\t'constant': /\\b(?:use|library)\\b/i,",
                "\t// support for predefined attributes included",
                "\t'keyword': /\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'function': /\\w+(?=\\()/,",
                "\t// decimal, based, physical, and exponential numbers supported",
                "\t'number': /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,",
                "\t'operator': /[<>]=?|:=|[-+*/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-vhdl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vhdl={comment:/--.+/,\"vhdl-vectors\":{pattern:/\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,alias:\"number\"},\"quoted-function\":{pattern:/\"\\S+?\"(?=\\()/,alias:\"function\"},string:/\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,constant:/\\b(?:use|library)\\b/i,keyword:/\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,boolean:/\\b(?:true|false)\\b/i,function:/\\w+(?=\\()/,number:/'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,operator:/[<>]=?|:=|[-+*/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-vim.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vim = {",
                "\t'string': /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,",
                "\t'comment': /\".*/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t'keyword': /\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,",
                "\t'builtin': /\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,",
                "\t'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,",
                "\t'operator': /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,",
                "\t'punctuation': /[{}[\\](),;:]/",
                "};"
            ]
        },
        "prism-vim.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vim={string:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,comment:/\".*/,function:/\\w+(?=\\()/,keyword:/\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,builtin:/\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,operator:/\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,punctuation:/[{}[\\](),;:]/};"
            ]
        },
        "prism-visual-basic.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['visual-basic'] = {",
                "\t'comment': {",
                "\t\tpattern: /(?:['‘’]|REM\\b)(?:[^\\r\\n_]|_(?:\\r\\n?|\\n)?)*/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^REM/i",
                "\t\t}",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,",
                "\t\talias: 'comment',",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\\$?[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'date': {",
                "\t\tpattern: /#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?)[^\\S\\r\\n]*#/i,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'number': /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,",
                "\t'boolean': /\\b(?:True|False|Nothing)\\b/i,",
                "\t'keyword': /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Until|Xor)\\b/i,",
                "\t'operator': [",
                "\t\t/[+\\-*/\\\\^<=>&#@$%!]/,",
                "\t\t{",
                "\t\t\tpattern: /([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /[{}().,:?]/",
                "};",
                "",
                "Prism.languages.vb = Prism.languages['visual-basic'];",
                "Prism.languages.vba = Prism.languages['visual-basic'];"
            ]
        },
        "prism-visual-basic.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"visual-basic\"]={comment:{pattern:/(?:['‘’]|REM\\b)(?:[^\\r\\n_]|_(?:\\r\\n?|\\n)?)*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,alias:\"comment\",greedy:!0},string:{pattern:/\\$?[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,greedy:!0},date:{pattern:/#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?)[^\\S\\r\\n]*#/i,alias:\"builtin\"},number:/(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,boolean:/\\b(?:True|False|Nothing)\\b/i,keyword:/\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Until|Xor)\\b/i,operator:[/[+\\-*/\\\\^<=>&#@$%!]/,{pattern:/([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages[\"visual-basic\"],Prism.languages.vba=Prism.languages[\"visual-basic\"];"
            ]
        },
        "prism-warpscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.warpscript = {",
                "\t'comment': /#.*|\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'|<'(?:[^\\\\']|'(?!>)|\\\\.)*'>/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /\\$\\S+/,",
                "\t'macro': {",
                "\t\tpattern: /@\\S+/,",
                "\t\talias: 'property'",
                "\t},",
                "\t// WarpScript doesn't have any keywords, these are all functions under the control category",
                "\t// https://www.warp10.io/tags/control",
                "\t'keyword': /\\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\\b/,",
                "\t'number': /[+-]?\\b(?:NaN|Infinity|\\d+(?:\\.\\d*)?(?:[Ee][+-]?\\d+)?|0x[\\da-fA-F]+|0b[01]+)\\b/,",
                "\t'boolean': /\\b(?:false|true|F|T)\\b/,",
                "\t'punctuation': /<%|%>|[{}[\\]()]/,",
                "\t// Some operators from the \"operators\" category",
                "\t// https://www.warp10.io/tags/operators",
                "\t'operator': /==|&&?|\\|\\|?|\\*\\*?|>>>?|<<|[<>!~]=?|[-/%^]|\\+!?|\\b(?:AND|NOT|OR)\\b/",
                "};"
            ]
        },
        "prism-warpscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.warpscript={comment:/#.*|\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'|<'(?:[^\\\\']|'(?!>)|\\\\.)*'>/,greedy:!0},variable:/\\$\\S+/,macro:{pattern:/@\\S+/,alias:\"property\"},keyword:/\\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\\b/,number:/[+-]?\\b(?:NaN|Infinity|\\d+(?:\\.\\d*)?(?:[Ee][+-]?\\d+)?|0x[\\da-fA-F]+|0b[01]+)\\b/,boolean:/\\b(?:false|true|F|T)\\b/,punctuation:/<%|%>|[{}[\\]()]/,operator:/==|&&?|\\|\\|?|\\*\\*?|>>>?|<<|[<>!~]=?|[-/%^]|\\+!?|\\b(?:AND|NOT|OR)\\b/};"
            ]
        },
        "prism-wasm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wasm = {",
                "\t'comment': [",
                "\t\t/\\(;[\\s\\S]*?;\\)/,",
                "\t\t{",
                "\t\t\tpattern: /;;.*/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:align|offset)=/,",
                "\t\t\tinside: {",
                "\t\t\t\t'operator': /=/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t/\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/",
                "\t],",
                "\t'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,",
                "\t'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,",
                "\t'punctuation': /[()]/",
                "};"
            ]
        },
        "prism-wasm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wasm={comment:[/\\(;[\\s\\S]*?;\\)/,{pattern:/;;.*/,greedy:!0}],string:{pattern:/\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,greedy:!0},keyword:[{pattern:/\\b(?:align|offset)=/,inside:{operator:/=/}},{pattern:/\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,inside:{punctuation:/\\./}},/\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],variable:/\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,number:/[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,punctuation:/[()]/};"
            ]
        },
        "prism-wiki.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wiki = Prism.languages.extend('markup', {",
                "\t'block-comment': {",
                "\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'heading': {",
                "\t\tpattern: /^(=+)[^=\\r\\n].*?\\1/m,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^=+|=+$/,",
                "\t\t\t'important': /.+/",
                "\t\t}",
                "\t},",
                "\t'emphasis': {",
                "\t\t// TODO Multi-line",
                "\t\tpattern: /('{2,5}).+?\\1/,",
                "\t\tinside: {",
                "\t\t\t'bold-italic': {",
                "\t\t\t\tpattern: /(''''').+?(?=\\1)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: ['bold', 'italic']",
                "\t\t\t},",
                "\t\t\t'bold': {",
                "\t\t\t\tpattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'italic': {",
                "\t\t\t\tpattern: /('')[^'](?:.*?[^'])?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^''+|''+$/",
                "\t\t}",
                "\t},",
                "\t'hr': {",
                "\t\tpattern: /^-{4,}/m,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'url': [",
                "\t\t/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i,",
                "\t\t/\\[\\[.+?\\]\\]|\\[.+?\\]/",
                "\t],",
                "\t'variable': [",
                "\t\t/__[A-Z]+__/,",
                "\t\t// FIXME Nested structures should be handled",
                "\t\t// {{formatnum:{{#expr:{{{3}}}}}}}",
                "\t\t/\\{{3}.+?\\}{3}/,",
                "\t\t/\\{\\{.+?\\}\\}/",
                "\t],",
                "\t'symbol': [",
                "\t\t/^#redirect/im,",
                "\t\t/~{3,5}/",
                "\t],",
                "\t// Handle table attrs:",
                "\t// {|",
                "\t// ! style=\"text-align:left;\"| Item",
                "\t// |}",
                "\t'table-tag': {",
                "\t\tpattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'table-bar': {",
                "\t\t\t\tpattern: /\\|$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.markup['tag'].inside",
                "\t\t}",
                "\t},",
                "\t'punctuation': /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m",
                "});",
                "",
                "Prism.languages.insertBefore('wiki', 'tag', {",
                "\t// Prevent highlighting inside <nowiki>, <source> and <pre> tags",
                "\t'nowiki': {",
                "\t\tpattern: /<(nowiki|pre|source)\\b[^>]*>[\\s\\S]*?<\\/\\1>/i,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /<(?:nowiki|pre|source)\\b[^>]*>|<\\/(?:nowiki|pre|source)>/i,",
                "\t\t\t\tinside: Prism.languages.markup['tag'].inside",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-wiki.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wiki=Prism.languages.extend(\"markup\",{\"block-comment\":{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0,alias:\"comment\"},heading:{pattern:/^(=+)[^=\\r\\n].*?\\1/m,inside:{punctuation:/^=+|=+$/,important:/.+/}},emphasis:{pattern:/('{2,5}).+?\\1/,inside:{\"bold-italic\":{pattern:/(''''').+?(?=\\1)/,lookbehind:!0,alias:[\"bold\",\"italic\"]},bold:{pattern:/(''')[^'](?:.*?[^'])?(?=\\1)/,lookbehind:!0},italic:{pattern:/('')[^'](?:.*?[^'])?(?=\\1)/,lookbehind:!0},punctuation:/^''+|''+$/}},hr:{pattern:/^-{4,}/m,alias:\"punctuation\"},url:[/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i,/\\[\\[.+?\\]\\]|\\[.+?\\]/],variable:[/__[A-Z]+__/,/\\{{3}.+?\\}{3}/,/\\{\\{.+?\\}\\}/],symbol:[/^#redirect/im,/~{3,5}/],\"table-tag\":{pattern:/((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,lookbehind:!0,inside:{\"table-bar\":{pattern:/\\|$/,alias:\"punctuation\"},rest:Prism.languages.markup.tag.inside}},punctuation:/^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m}),Prism.languages.insertBefore(\"wiki\",\"tag\",{nowiki:{pattern:/<(nowiki|pre|source)\\b[^>]*>[\\s\\S]*?<\\/\\1>/i,inside:{tag:{pattern:/<(?:nowiki|pre|source)\\b[^>]*>|<\\/(?:nowiki|pre|source)>/i,inside:Prism.languages.markup.tag.inside}}}});"
            ]
        },
        "prism-xeora.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.xeora = Prism.languages.extend('markup', {",
                "\t\t'constant': {",
                "\t\t\tpattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[$.]/",
                "\t\t\t\t},",
                "\t\t\t\t'operator': {",
                "\t\t\t\t\tpattern: /#+|[-+*~=^@]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'function-inline': {",
                "\t\t\tpattern: /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': {",
                "\t\t\t\t\tpattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\t\tpattern: /[,.|]/",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'operator': {",
                "\t\t\t\t\t\t\tpattern: /#+|[-+*~=^@]/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$\\w:|[$:?.,|]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'function-block': {",
                "\t\t\tpattern: /\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?}:XF\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[$:{}?.,|]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-inline': {",
                "\t\t\tpattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'tag': {",
                "\t\t\t\t\t\t\tpattern: /#\\d/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-open': {",
                "\t\t\tpattern: /\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(?:![A-Z]+)?/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'tag': {",
                "\t\t\t\t\t\t\tpattern: /#\\d/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'attribute': {",
                "\t\t\t\t\tpattern: /![A-Z]+$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\t\tpattern: /!/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-separator': {",
                "\t\t\tpattern: /}:[-\\w.]+:{/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[:{}]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-close': {",
                "\t\t\tpattern: /}:[-\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[:{}$]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('inside', 'punctuation', {",
                "\t\t'variable': Prism.languages.xeora['function-inline'].inside['variable']",
                "\t}, Prism.languages.xeora[\"function-block\"]);",
                "",
                "\tPrism.languages.xeoracube = Prism.languages.xeora;",
                "",
                "}(Prism));"
            ]
        },
        "prism-xeora.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.xeora=n.languages.extend(\"markup\",{constant:{pattern:/\\$(?:DomainContents|PageRenderDuration)\\$/,inside:{punctuation:{pattern:/\\$/}}},variable:{pattern:/\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,inside:{punctuation:{pattern:/[$.]/},operator:{pattern:/#+|[-+*~=^@]/}}},\"function-inline\":{pattern:/\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\$/,inside:{variable:{pattern:/(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,inside:{punctuation:{pattern:/[,.|]/},operator:{pattern:/#+|[-+*~=^@]/}}},punctuation:{pattern:/\\$\\w:|[$:?.,|]/}},alias:\"function\"},\"function-block\":{pattern:/\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?}:XF\\$/,inside:{punctuation:{pattern:/[$:{}?.,|]/}},alias:\"function\"},\"directive-inline\":{pattern:/\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,inside:{punctuation:{pattern:/\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,inside:{tag:{pattern:/#\\d/}}}},alias:\"function\"},\"directive-block-open\":{pattern:/\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(?:![A-Z]+)?/,inside:{punctuation:{pattern:/\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,inside:{tag:{pattern:/#\\d/}}},attribute:{pattern:/![A-Z]+$/,inside:{punctuation:{pattern:/!/}},alias:\"keyword\"}},alias:\"function\"},\"directive-block-separator\":{pattern:/}:[-\\w.]+:{/,inside:{punctuation:{pattern:/[:{}]/}},alias:\"function\"},\"directive-block-close\":{pattern:/}:[-\\w.]+\\$/,inside:{punctuation:{pattern:/[:{}$]/}},alias:\"function\"}}),n.languages.insertBefore(\"inside\",\"punctuation\",{variable:n.languages.xeora[\"function-inline\"].inside.variable},n.languages.xeora[\"function-block\"]),n.languages.xeoracube=n.languages.xeora}(Prism);"
            ]
        },
        "prism-xml-doc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t/**",
                "\t * If the given language is present, it will insert the given doc comment grammar token into it.",
                "\t *",
                "\t * @param {string} lang",
                "\t * @param {any} docComment",
                "\t */",
                "\tfunction insertDocComment(lang, docComment) {",
                "\t\tif (Prism.languages[lang]) {",
                "\t\t\tPrism.languages.insertBefore(lang, 'comment', {",
                "\t\t\t\t'doc-comment': docComment",
                "\t\t\t});",
                "\t\t}",
                "\t}",
                "",
                "\tvar tag = Prism.languages.markup.tag;",
                "",
                "\tvar slashDocComment = {",
                "\t\tpattern: /\\/\\/\\/.*/,",
                "\t\tgreedy: true,",
                "\t\talias: 'comment',",
                "\t\tinside: {",
                "\t\t\t'tag': tag",
                "\t\t}",
                "\t};",
                "\tvar tickDocComment = {",
                "\t\tpattern: /'''.*/,",
                "\t\tgreedy: true,",
                "\t\talias: 'comment',",
                "\t\tinside: {",
                "\t\t\t'tag': tag",
                "\t\t}",
                "\t};",
                "",
                "\tinsertDocComment('csharp', slashDocComment);",
                "\tinsertDocComment('fsharp', slashDocComment);",
                "\tinsertDocComment('vbnet', tickDocComment);",
                "",
                "}(Prism));"
            ]
        },
        "prism-xml-doc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){function a(a,e){n.languages[a]&&n.languages.insertBefore(a,\"comment\",{\"doc-comment\":e})}var e=n.languages.markup.tag,t={pattern:/\\/\\/\\/.*/,greedy:!0,alias:\"comment\",inside:{tag:e}},g={pattern:/'''.*/,greedy:!0,alias:\"comment\",inside:{tag:e}};a(\"csharp\",t),a(\"fsharp\",t),a(\"vbnet\",g)}(Prism);"
            ]
        },
        "prism-xojo.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.xojo = {",
                "\t'comment': {",
                "\t\tpattern: /(?:'|\\/\\/|Rem\\b).+/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^Rem/i",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[^\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': [",
                "\t\t/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t\t/&[bchou][a-z\\d]+/i",
                "\t],",
                "\t'symbol': /#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,",
                "\t'keyword': /\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,",
                "\t'operator': /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,",
                "\t'punctuation': /[.,;:()]/",
                "};"
            ]
        },
        "prism-xojo.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.xojo={comment:{pattern:/(?:'|\\/\\/|Rem\\b).+/i,inside:{keyword:/^Rem/i}},string:{pattern:/\"(?:\"\"|[^\"])*\"/,greedy:!0},number:[/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,/&[bchou][a-z\\d]+/i],symbol:/#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,keyword:/\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,operator:/<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,punctuation:/[.,;:()]/};"
            ]
        },
        "prism-xquery.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.xquery = Prism.languages.extend('markup', {",
                "\t\t'xquery-comment': {",
                "\t\t\tpattern: /\\(:[\\s\\S]*?:\\)/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: \"comment\"",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'extension': {",
                "\t\t\tpattern: /\\(#.+?#\\)/,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'variable': /\\$[\\w-:]+/,",
                "\t\t'axis': {",
                "\t\t\tpattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'keyword-operator': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,",
                "\t\t'xquery-element': {",
                "\t\t\tpattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'tag'",
                "\t\t},",
                "\t\t'xquery-attribute': {",
                "\t\t\tpattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-name'",
                "\t\t},",
                "\t\t'builtin': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,",
                "\t\t'operator': [",
                "\t\t\t/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)-(?=\\s)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'punctuation': /[[\\](){},;:/]/",
                "\t});",
                "",
                "\tPrism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^{}]*}|[^{}])*}|[^{}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^{}]*}|[^{}])*}|[^{}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {",
                "\t\t// Allow for two levels of nesting",
                "\t\tpattern: /{(?!{)(?:{(?:{[^{}]*}|[^{}])*}|[^{}])+}/,",
                "\t\tinside: Prism.languages.xquery,",
                "\t\talias: 'language-xquery'",
                "\t};",
                "",
                "\t// The following will handle plain text inside tags",
                "\tvar stringifyToken = function (token) {",
                "\t\tif (typeof token === 'string') {",
                "\t\t\treturn token;",
                "\t\t}",
                "\t\tif (typeof token.content === 'string') {",
                "\t\t\treturn token.content;",
                "\t\t}",
                "\t\treturn token.content.map(stringifyToken).join('');",
                "\t};",
                "",
                "\tvar walkTokens = function (tokens) {",
                "\t\tvar openedTags = [];",
                "\t\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\t\tvar token = tokens[i];",
                "\t\t\tvar notTagNorBrace = false;",
                "",
                "\t\t\tif (typeof token !== 'string') {",
                "\t\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {",
                "\t\t\t\t\t// We found a tag, now find its kind",
                "",
                "\t\t\t\t\tif (token.content[0].content[0].content === '</') {",
                "\t\t\t\t\t\t// Closing tag",
                "\t\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {",
                "\t\t\t\t\t\t\t// Pop matching opening tag",
                "\t\t\t\t\t\t\topenedTags.pop();",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {",
                "\t\t\t\t\t\t\t// Autoclosed tag, ignore",
                "\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\t// Opening tag",
                "\t\t\t\t\t\t\topenedTags.push({",
                "\t\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),",
                "\t\t\t\t\t\t\t\topenedBraces: 0",
                "\t\t\t\t\t\t\t});",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t} else if (",
                "\t\t\t\t\topenedTags.length > 0 && token.type === 'punctuation' && token.content === '{' &&",
                "\t\t\t\t\t// Ignore `{{`",
                "\t\t\t\t\t(!tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') &&",
                "\t\t\t\t\t(!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')",
                "\t\t\t\t) {",
                "\t\t\t\t\t// Here we might have entered an XQuery expression inside a tag",
                "\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;",
                "",
                "\t\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {",
                "",
                "\t\t\t\t\t// Here we might have left an XQuery expression inside a tag",
                "\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;",
                "",
                "\t\t\t\t} else if (token.type !== 'comment') {",
                "\t\t\t\t\tnotTagNorBrace = true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t\tif (notTagNorBrace || typeof token === 'string') {",
                "\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {",
                "\t\t\t\t\t// Here we are inside a tag, and not inside an XQuery expression.",
                "\t\t\t\t\t// That's plain text: drop any tokens matched.",
                "\t\t\t\t\tvar plainText = stringifyToken(token);",
                "",
                "\t\t\t\t\t// And merge text with adjacent text",
                "\t\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {",
                "\t\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);",
                "\t\t\t\t\t\ttokens.splice(i + 1, 1);",
                "\t\t\t\t\t}",
                "\t\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {",
                "\t\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;",
                "\t\t\t\t\t\ttokens.splice(i - 1, 1);",
                "\t\t\t\t\t\ti--;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (/^\\s+$/.test(plainText)) {",
                "\t\t\t\t\t\ttokens[i] = plainText;",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t\tif (token.content && typeof token.content !== 'string') {",
                "\t\t\t\twalkTokens(token.content);",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tif (env.language !== 'xquery') {",
                "\t\t\treturn;",
                "\t\t}",
                "\t\twalkTokens(env.tokens);",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-xquery.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(r){r.languages.xquery=r.languages.extend(\"markup\",{\"xquery-comment\":{pattern:/\\(:[\\s\\S]*?:\\)/,greedy:!0,alias:\"comment\"},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,greedy:!0},extension:{pattern:/\\(#.+?#\\)/,alias:\"symbol\"},variable:/\\$[\\w-:]+/,axis:{pattern:/(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,lookbehind:!0,alias:\"operator\"},\"keyword-operator\":{pattern:/(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,lookbehind:!0,alias:\"operator\"},keyword:{pattern:/(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,lookbehind:!0},function:/[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\"xquery-element\":{pattern:/(element\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"tag\"},\"xquery-attribute\":{pattern:/(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"attr-name\"},builtin:{pattern:/(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,lookbehind:!0},number:/\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,operator:[/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,{pattern:/(\\s)-(?=\\s)/,lookbehind:!0}],punctuation:/[[\\](){},;:/]/}),r.languages.xquery.tag.pattern=/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^{}]*}|[^{}])*}|[^{}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,r.languages.xquery.tag.inside[\"attr-value\"].pattern=/=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^{}]*}|[^{}])*}|[^{}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,r.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation=/^=\"|\"$/,r.languages.xquery.tag.inside[\"attr-value\"].inside.expression={pattern:/{(?!{)(?:{(?:{[^{}]*}|[^{}])*}|[^{}])+}/,inside:r.languages.xquery,alias:\"language-xquery\"};var s=function(e){return\"string\"==typeof e?e:\"string\"==typeof e.content?e.content:e.content.map(s).join(\"\")},l=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n],o=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<t.length&&t[t.length-1].tagName===s(a.content[0].content[1])&&t.pop():\"/>\"===a.content[a.content.length-1].content||t.push({tagName:s(a.content[0].content[1]),openedBraces:0}):!(0<t.length&&\"punctuation\"===a.type&&\"{\"===a.content)||e[n+1]&&\"punctuation\"===e[n+1].type&&\"{\"===e[n+1].content||e[n-1]&&\"plain-text\"===e[n-1].type&&\"{\"===e[n-1].content?0<t.length&&0<t[t.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?t[t.length-1].openedBraces--:\"comment\"!==a.type&&(o=!0):t[t.length-1].openedBraces++),(o||\"string\"==typeof a)&&0<t.length&&0===t[t.length-1].openedBraces){var i=s(a);n<e.length-1&&(\"string\"==typeof e[n+1]||\"plain-text\"===e[n+1].type)&&(i+=s(e[n+1]),e.splice(n+1,1)),0<n&&(\"string\"==typeof e[n-1]||\"plain-text\"===e[n-1].type)&&(i=s(e[n-1])+i,e.splice(n-1,1),n--),/^\\s+$/.test(i)?e[n]=i:e[n]=new r.Token(\"plain-text\",i,null,i)}a.content&&\"string\"!=typeof a.content&&l(a.content)}};r.hooks.add(\"after-tokenize\",function(e){\"xquery\"===e.language&&l(e.tokens)})}(Prism);"
            ]
        },
        "prism-yaml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t// https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property",
                "\t// https://yaml.org/spec/1.2/spec.html#c-ns-alias-node",
                "\tvar anchorOrAlias = /[*&][^\\s[\\]{},]+/;",
                "\t// https://yaml.org/spec/1.2/spec.html#c-ns-tag-property",
                "\tvar tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/;",
                "\t// https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)",
                "\tvar properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|'",
                "\t\t+ anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)';",
                "\t// https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)",
                "\t// This is a simplified version that doesn't support \"#\" and multiline keys",
                "\t// All these long scarry character classes are simplified versions of YAML's characters",
                "\tvar plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source",
                "\t\t.replace(/<PLAIN>/g, function () { return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source; });",
                "\tvar string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;",
                "",
                "\t/**",
                "\t *",
                "\t * @param {string} value",
                "\t * @param {string} [flags]",
                "\t * @returns {RegExp}",
                "\t */",
                "\tfunction createValuePattern(value, flags) {",
                "\t\tflags = (flags || '').replace(/m/g, '') + 'm'; // add m flag",
                "\t\tvar pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|(?:[\\r\\n]\\s*)?#))/.source",
                "\t\t\t.replace(/<<prop>>/g, function () { return properties; }).replace(/<<value>>/g, function () { return value; });",
                "\t\treturn RegExp(pattern, flags)",
                "\t}",
                "",
                "\tPrism.languages.yaml = {",
                "\t\t'scalar': {",
                "\t\t\tpattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source",
                "\t\t\t\t.replace(/<<prop>>/g, function () { return properties; })),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'comment': /#.*/,",
                "\t\t'key': {",
                "\t\t\tpattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source",
                "\t\t\t\t.replace(/<<prop>>/g, function () { return properties; })",
                "\t\t\t\t.replace(/<<key>>/g, function () { return '(?:' + plainKey + '|' + string + ')'; })),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'atrule'",
                "\t\t},",
                "\t\t'directive': {",
                "\t\t\tpattern: /(^[ \\t]*)%.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'datetime': {",
                "\t\t\tpattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'number'",
                "\t\t},",
                "\t\t'boolean': {",
                "\t\t\tpattern: createValuePattern(/true|false/.source, 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'null': {",
                "\t\t\tpattern: createValuePattern(/null|~/.source, 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: createValuePattern(string),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': {",
                "\t\t\tpattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': tag,",
                "\t\t'important': anchorOrAlias,",
                "\t\t'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./",
                "\t};",
                "",
                "\tPrism.languages.yml = Prism.languages.yaml;",
                "",
                "}(Prism));"
            ]
        },
        "prism-yaml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n=/[*&][^\\s[\\]{},]+/,r=/!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/,t=\"(?:\"+r.source+\"(?:[ \\t]+\"+n.source+\")?|\"+n.source+\"(?:[ \\t]+\"+r.source+\")?)\",a=\"(?:[^\\\\s\\\\x00-\\\\x08\\\\x0e-\\\\x1f!\\\"#%&'*,\\\\-:>?@[\\\\]`{|}\\\\x7f-\\\\x84\\\\x86-\\\\x9f\\\\ud800-\\\\udfff\\\\ufffe\\\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*\".replace(/<PLAIN>/g,function(){return\"[^\\\\s\\\\x00-\\\\x08\\\\x0e-\\\\x1f,[\\\\]{}\\\\x7f-\\\\x84\\\\x86-\\\\x9f\\\\ud800-\\\\udfff\\\\ufffe\\\\uffff]\"}),d=\"\\\"(?:[^\\\"\\\\\\\\\\r\\n]|\\\\\\\\.)*\\\"|'(?:[^'\\\\\\\\\\r\\n]|\\\\\\\\.)*'\";function o(e,n){n=(n||\"\").replace(/m/g,\"\")+\"m\";var r=\"([:\\\\-,[{]\\\\s*(?:\\\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|(?:[\\r\\n]\\\\s*)?#))\".replace(/<<prop>>/g,function(){return t}).replace(/<<value>>/g,function(){return e});return RegExp(r,n)}e.languages.yaml={scalar:{pattern:RegExp(\"([\\\\-:]\\\\s*(?:\\\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\\\S[^\\r\\n]*(?:\\\\2[^\\r\\n]+)*)\".replace(/<<prop>>/g,function(){return t})),lookbehind:!0,alias:\"string\"},comment:/#.*/,key:{pattern:RegExp(\"((?:^|[:\\\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\\\s*:\\\\s)\".replace(/<<prop>>/g,function(){return t}).replace(/<<key>>/g,function(){return\"(?:\"+a+\"|\"+d+\")\"})),lookbehind:!0,greedy:!0,alias:\"atrule\"},directive:{pattern:/(^[ \\t]*)%.+/m,lookbehind:!0,alias:\"important\"},datetime:{pattern:o(\"\\\\d{4}-\\\\d\\\\d?-\\\\d\\\\d?(?:[tT]|[ \\t]+)\\\\d\\\\d?:\\\\d{2}:\\\\d{2}(?:\\\\.\\\\d*)?(?:[ \\t]*(?:Z|[-+]\\\\d\\\\d?(?::\\\\d{2})?))?|\\\\d{4}-\\\\d{2}-\\\\d{2}|\\\\d\\\\d?:\\\\d{2}(?::\\\\d{2}(?:\\\\.\\\\d*)?)?\"),lookbehind:!0,alias:\"number\"},boolean:{pattern:o(\"true|false\",\"i\"),lookbehind:!0,alias:\"important\"},null:{pattern:o(\"null|~\",\"i\"),lookbehind:!0,alias:\"important\"},string:{pattern:o(d),lookbehind:!0,greedy:!0},number:{pattern:o(\"[+-]?(?:0x[\\\\da-f]+|0o[0-7]+|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.?\\\\d+)(?:e[+-]?\\\\d+)?|\\\\.inf|\\\\.nan)\",\"i\"),lookbehind:!0},tag:r,important:n,punctuation:/---|[:[\\]{}\\-,|>?]|\\.\\.\\./},e.languages.yml=e.languages.yaml}(Prism);"
            ]
        },
        "prism-yang.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.yang = {",
                "\t// https://tools.ietf.org/html/rfc6020#page-34",
                "\t// http://www.yang-central.org/twiki/bin/view/Main/YangExamples",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\\"]|\\\\.)*\"|'[^']*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^|[{};\\r\\n][ \\t]*)[a-z_][\\w.-]*/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'namespace': {",
                "\t\tpattern: /(\\s)[a-z_][\\w.-]*(?=:)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t'operator': /\\+/,",
                "\t'punctuation': /[{};:]/",
                "};"
            ]
        },
        "prism-yang.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.yang={comment:/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,string:{pattern:/\"(?:[^\\\\\"]|\\\\.)*\"|'[^']*'/,greedy:!0},keyword:{pattern:/(^|[{};\\r\\n][ \\t]*)[a-z_][\\w.-]*/i,lookbehind:!0},namespace:{pattern:/(\\s)[a-z_][\\w.-]*(?=:)/i,lookbehind:!0},boolean:/\\b(?:false|true)\\b/,operator:/\\+/,punctuation:/[{};:]/};"
            ]
        },
        "prism-zig.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tfunction literal(str) {",
                "\t\treturn function () { return str; };",
                "\t}",
                "",
                "\tvar keyword = /\\b(?:align|allowzero|and|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/;",
                "",
                "\tvar IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b';",
                "\tvar ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source;",
                "\tvar PREFIX_TYPE_OP = /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(/<ALIGN>/g, literal(ALIGN));",
                "\tvar SUFFIX_EXPR = /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(/<ID>/g, literal(IDENTIFIER));",
                "\tvar TYPE = '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+';",
                "",
                "\t/*",
                "\t * A simplified grammar for Zig compile time type literals:",
                "\t *",
                "\t * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+",
                "\t *",
                "\t * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )",
                "\t *",
                "\t * PREFIX_TYPE_OP = \"?\"",
                "\t *                | \\b \"promise\" \"->\"",
                "\t *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*",
                "\t *",
                "\t * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"",
                "\t *",
                "\t * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b",
                "\t *",
                "\t*/",
                "",
                "\tPrism.languages.zig = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\/{3}.*/,",
                "\t\t\t\talias: 'doc-comment'",
                "\t\t\t},",
                "\t\t\t/\\/{2}.*/",
                "\t\t],",
                "\t\t'string': [",
                "\t\t\t{",
                "\t\t\t\t// \"string\" and c\"string\"",
                "\t\t\t\tpattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// multiline strings and c-strings",
                "\t\t\t\tpattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'",
                "\t\t\t\tpattern: /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'builtin': /\\B@(?!\\d)\\w+(?=\\s*\\()/,",
                "\t\t'label': {",
                "\t\t\tpattern: /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'class-name': [",
                "\t\t\t// const Foo = struct {};",
                "\t\t\t/\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,",
                "\t\t\t{",
                "\t\t\t\t// const x: i32 = 9;",
                "\t\t\t\t// var x: Bar;",
                "\t\t\t\t// fn foo(x: bool, y: f32) void {}",
                "\t\t\t\tpattern: RegExp(/(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// extern fn foo(x: f64) f64; (optional alignment)",
                "\t\t\t\tpattern: RegExp(/(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t}",
                "\t\t],",
                "\t\t'builtin-types': {",
                "\t\t\tpattern: /\\b(?:anyerror|bool|c_u?(?:short|int|long|longlong)|c_longdouble|c_void|comptime_(?:float|int)|[iu](?:8|16|32|64|128|size)|f(?:16|32|64|128)|noreturn|type|void)\\b/,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'keyword': keyword,",
                "\t\t'function': /\\b(?!\\d)\\w+(?=\\s*\\()/,",
                "\t\t'number': /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,",
                "\t\t'boolean': /\\b(?:false|true)\\b/,",
                "\t\t'operator': /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,",
                "\t\t'punctuation': /[.:,;(){}[\\]]/",
                "\t};",
                "",
                "\tPrism.languages.zig['class-name'].forEach(function (obj) {",
                "\t\tif (obj.inside === null) {",
                "\t\t\tobj.inside = Prism.languages.zig;",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-zig.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){function e(e){return function(){return e}}var r=/\\b(?:align|allowzero|and|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/,a=\"\\\\b(?!\"+r.source+\")(?!\\\\d)\\\\w+\\\\b\",o=\"align\\\\s*\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)\",s=\"(?!\\\\s)(?:!?\\\\s*(?:\"+\"(?:\\\\?|\\\\bpromise->|(?:\\\\[[^[\\\\]]*\\\\]|\\\\*(?!\\\\*)|\\\\*\\\\*)(?:\\\\s*<ALIGN>|\\\\s*const\\\\b|\\\\s*volatile\\\\b|\\\\s*allowzero\\\\b)*)\".replace(/<ALIGN>/g,e(o))+\"\\\\s*)*\"+\"(?:\\\\bpromise\\\\b|(?:\\\\berror\\\\.)?<ID>(?:\\\\.<ID>)*(?!\\\\s+<ID>))\".replace(/<ID>/g,e(a))+\")+\";n.languages.zig={comment:[{pattern:/\\/{3}.*/,alias:\"doc-comment\"},/\\/{2}.*/],string:[{pattern:/(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,lookbehind:!0,greedy:!0},{pattern:/([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\])'(?:[^'\\\\\\r\\n]|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,lookbehind:!0,greedy:!0}],builtin:/\\B@(?!\\d)\\w+(?=\\s*\\()/,label:{pattern:/(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,lookbehind:!0},\"class-name\":[/\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,{pattern:RegExp(\"(:\\\\s*)<TYPE>(?=\\\\s*(?:<ALIGN>\\\\s*)?[=;,)])|<TYPE>(?=\\\\s*(?:<ALIGN>\\\\s*)?\\\\{)\".replace(/<TYPE>/g,e(s)).replace(/<ALIGN>/g,e(o))),lookbehind:!0,inside:null},{pattern:RegExp(\"(\\\\)\\\\s*)<TYPE>(?=\\\\s*(?:<ALIGN>\\\\s*)?;)\".replace(/<TYPE>/g,e(s)).replace(/<ALIGN>/g,e(o))),lookbehind:!0,inside:null}],\"builtin-types\":{pattern:/\\b(?:anyerror|bool|c_u?(?:short|int|long|longlong)|c_longdouble|c_void|comptime_(?:float|int)|[iu](?:8|16|32|64|128|size)|f(?:16|32|64|128)|noreturn|type|void)\\b/,alias:\"keyword\"},keyword:r,function:/\\b(?!\\d)\\w+(?=\\s*\\()/,number:/\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,boolean:/\\b(?:false|true)\\b/,operator:/\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,punctuation:/[.:,;(){}[\\]]/},n.languages.zig[\"class-name\"].forEach(function(e){null===e.inside&&(e.inside=n.languages.zig)})}(Prism);"
            ]
        }
    },
    "gulpfile.js": {
        "changelog.js": {
            "classes": [],
            "functions": [],
            "text": [
                "\"use strict\";",
                "",
                "const { src, dest } = require('gulp');",
                "",
                "const replace = require('gulp-replace');",
                "const pump = require('pump');",
                "const git = require('simple-git/promise')(__dirname);",
                "",
                "const { changelog } = require('./paths');",
                "",
                "",
                "const ISSUE_RE = /#(\\d+)(?![\\d\\]])/g;",
                "const ISSUE_SUB = '[#$1](https://github.com/PrismJS/prism/issues/$1)';",
                "",
                "function linkify(cb) {",
                "\treturn pump([",
                "\t\tsrc(changelog),",
                "\t\treplace(ISSUE_RE, ISSUE_SUB),",
                "\t\treplace(",
                "\t\t\t/\\[[\\da-f]+(?:, *[\\da-f]+)*\\]/g,",
                "\t\t\tm => m.replace(/([\\da-f]{7})[\\da-f]*/g, '[`$1`](https://github.com/PrismJS/prism/commit/$1)')",
                "\t\t),",
                "\t\tdest('.')",
                "\t], cb);",
                "}",
                "",
                "/**",
                " * Creates an array which iterates its items in the order given by `compareFn`.",
                " *",
                " * The array may not be sorted at all times.",
                " *",
                " * @param {(a: T, b: T) => number} compareFn",
                " * @returns {T[]}",
                " * @template T",
                " */",
                "function createSortedArray(compareFn) {",
                "\t/** @type {T[]} */",
                "\tconst a = [];",
                "",
                "\ta['sort'] = function () {",
                "\t\treturn Array.prototype.sort.call(this, compareFn);",
                "\t};",
                "\ta[Symbol.iterator] = function () {",
                "\t\treturn this.slice().sort(compareFn)[Symbol.iterator]();",
                "\t};",
                "",
                "\treturn a;",
                "}",
                "",
                "/**",
                " * Parses the given log line and adds the list of the changed files to the output.",
                " *",
                " * @param {string} line A one-liner log line consisting of the commit hash and the commit message.",
                " * @returns {Promise<CommitInfo>}",
                " *",
                " * @typedef {{ message: string, hash: string, changes: CommitChange[] }} CommitInfo",
                " * @typedef {{ file: string, mode: ChangeMode }} CommitChange",
                " * @typedef {\"A\" | \"C\" | \"D\" | \"M\" | \"R\" | \"T\" | \"U\" | \"X\" | \"B\"} ChangeMode",
                " */",
                "async function getCommitInfo(line) {",
                "\tconst [, hash, message] = /^([a-f\\d]+)\\s+(.*)$/i.exec(line);",
                "",
                "\t/* The output looks like this:",
                "\t *",
                "\t * M       components.js",
                "\t * M       components.json",
                "\t *",
                "\t * or nothing for e.g. reverts.",
                "\t */",
                "\tconst output = await git.raw(['diff-tree', '--no-commit-id', '--name-status', '-r', hash]);",
                "",
                "\tconst changes = !output ? [] : output.trim().split(/\\n/g).map(line => {",
                "\t\tconst [, mode, file] = /(\\w)\\s+(.+)/.exec(line);",
                "\t\treturn { mode: /** @type {ChangeMode} */ (mode), file };",
                "\t});",
                "",
                "\treturn { hash, message, changes };",
                "}",
                "",
                "/**",
                " * Parses the output of `git log` with the given revision range.",
                " *",
                " * @param {string | Promise<string>} range The revision range in which the log will be parsed.",
                " * @returns {Promise<CommitInfo[]>}",
                " */",
                "async function getLog(range) {",
                "\t/* The output looks like this:",
                "\t*",
                "\t* bfbe4464 Invoke `callback` after `after-highlight` hook (#1588)",
                "\t* b41fb8f1 Fixes regex for JS examples (#1591)",
                "\t*/",
                "\tconst output = await git.raw(['log', await Promise.resolve(range), '--oneline']);",
                "",
                "\tif (output) {",
                "\t\tconst commits = output.trim().split(/\\n/g);",
                "\t\treturn Promise.all(commits.map(getCommitInfo));",
                "\t} else {",
                "\t\treturn [];",
                "\t}",
                "}",
                "",
                "const revisionRanges = {",
                "\tnextRelease() {",
                "\t\treturn git.raw(['describe', '--abbrev=0', '--tags']).then(res => `${res.trim()}..HEAD`);",
                "\t}",
                "};",
                "const strCompare = (a, b) => a.localeCompare(b, 'en');",
                "",
                "async function changes() {",
                "\tconst { languages, plugins } = require('../components.js');",
                "",
                "\tconst infos = await getLog(revisionRanges.nextRelease());",
                "",
                "\tconst entries = {",
                "\t\t'TODO:': {},",
                "\t\t'New components': {",
                "\t\t\t['']: createSortedArray(strCompare)",
                "\t\t},",
                "\t\t'Updated components': {},",
                "\t\t'Updated plugins': {},",
                "\t\t'Updated themes': {},",
                "\t\t'Other': {},",
                "\t};",
                "\t/**",
                "\t *",
                "\t * @param {string} category",
                "\t * @param {string | { message: string, hash: string }} info",
                "\t */",
                "\tfunction addEntry(category, info) {",
                "\t\tconst path = category.split(/\\s*>>\\s*/g);",
                "\t\tif (path[path.length - 1] !== '') {",
                "\t\t\tpath.push('');",
                "\t\t}",
                "",
                "\t\tlet current = entries;",
                "\t\tfor (const key of path) {",
                "\t\t\tif (key) {",
                "\t\t\t\tcurrent = current[key] = current[key] || {};",
                "\t\t\t} else {",
                "\t\t\t\t(current[key] = current[key] || []).push(info);",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "",
                "\t/** @param {CommitChange} change */",
                "\tfunction notGenerated(change) {",
                "\t\treturn !change.file.endsWith('.min.js')",
                "\t\t\t&& !change.file.startsWith('docs/')",
                "\t\t\t&& ['prism.js', 'components.js', 'package-lock.json'].indexOf(change.file) === -1;",
                "\t}",
                "\t/** @param {CommitChange} change */",
                "\tfunction notPartlyGenerated(change) {",
                "\t\treturn change.file !== 'plugins/autoloader/prism-autoloader.js' &&",
                "\t\t\tchange.file !== 'plugins/show-language/prism-show-language.js';",
                "\t}",
                "\t/** @param {CommitChange} change */",
                "\tfunction notTests(change) {",
                "\t\treturn !/^tests\\//.test(change.file);",
                "\t}",
                "\t/** @param {CommitChange} change */",
                "\tfunction notExamples(change) {",
                "\t\treturn !/^examples\\//.test(change.file);",
                "\t}",
                "\t/** @param {CommitChange} change */",
                "\tfunction notFailures(change) {",
                "\t\treturn !/^known-failures.html$/.test(change.file);",
                "\t}",
                "\t/** @param {CommitChange} change */",
                "\tfunction notComponentsJSON(change) {",
                "\t\treturn change.file !== 'components.json';",
                "\t}",
                "",
                "\t/**",
                "\t * @param {((e: T, index: number) => boolean)[]} filters",
                "\t * @returns {(e: T, index: number) => boolean}",
                "\t * @template T",
                "\t */",
                "\tfunction and(...filters) {",
                "\t\treturn (e, index) => {",
                "\t\t\tfor (let i = 0, l = filters.length; i < l; i++) {",
                "\t\t\t\tif (!filters[i](e, index)) {",
                "\t\t\t\t\treturn false;",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t\treturn true;",
                "\t\t};",
                "\t}",
                "",
                "\t/**",
                "\t * Some commit message have the format `component changed: actual message`.",
                "\t * This function can be used to remove this prefix.",
                "\t *",
                "\t * @param {string} prefix",
                "\t * @param {CommitInfo} info",
                "\t * @returns {{ message: string, hash: string }}",
                "\t */",
                "\tfunction removeMessagePrefix(prefix, info) {",
                "\t\tconst source = String.raw`^${prefix.replace(/([^-\\w\\s])/g, '\\\\$1').replace(/[-\\s]/g, '[-\\\\s]')}:\\s*`;",
                "\t\tconst patter = RegExp(source, 'i');",
                "\t\treturn {",
                "\t\t\tmessage: info.message.replace(patter, ''),",
                "\t\t\thash: info.hash",
                "\t\t};",
                "\t}",
                "",
                "",
                "\t/**",
                "\t * @type {((info: CommitInfo) => boolean)[]}",
                "\t */",
                "\tconst commitSorters = [",
                "",
                "\t\tfunction rebuild(info) {",
                "\t\t\tif (info.changes.length > 0 && info.changes.filter(notGenerated).length === 0) {",
                "\t\t\t\tconsole.log('Rebuild found: ' + info.message);",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\tfunction addedComponent(info) {",
                "\t\t\tlet relevantChanges = info.changes.filter(and(notGenerated, notTests, notExamples, notFailures));",
                "",
                "\t\t\t// `components.json` has to be modified",
                "\t\t\tif (relevantChanges.some(c => c.file === 'components.json')) {",
                "\t\t\t\trelevantChanges = relevantChanges.filter(and(notComponentsJSON, notPartlyGenerated));",
                "",
                "\t\t\t\t// now, only the newly added JS should be left",
                "\t\t\t\tif (relevantChanges.length === 1) {",
                "\t\t\t\t\tconst change = relevantChanges[0];",
                "\t\t\t\t\tif (change.mode === 'A' && change.file.startsWith('components/prism-')) {",
                "\t\t\t\t\t\tconst lang = change.file.match(/prism-([\\w-]+)\\.js$/)[1];",
                "\t\t\t\t\t\tconst entry = languages[lang] || {",
                "\t\t\t\t\t\t\ttitle: \"REMOVED LANGUAGE \" + lang,",
                "\t\t\t\t\t\t};",
                "\t\t\t\t\t\tconst titles = [entry.title];",
                "\t\t\t\t\t\tif (entry.aliasTitles) {",
                "\t\t\t\t\t\t\ttitles.push(...Object.values(entry.aliasTitles));",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t\taddEntry('New components', `__${titles.join('__ & __')}__: ${infoToString(info)}`);",
                "\t\t\t\t\t\treturn true;",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\tfunction changedComponentOrCore(info) {",
                "\t\t\tlet relevantChanges = info.changes.filter(and(notGenerated, notTests, notExamples, notFailures));",
                "",
                "\t\t\t// if `components.json` changed, then autoloader and show-language also change",
                "\t\t\tif (relevantChanges.some(c => c.file === 'components.json')) {",
                "\t\t\t\trelevantChanges = relevantChanges.filter(and(notComponentsJSON, notPartlyGenerated));",
                "\t\t\t}",
                "",
                "\t\t\tif (relevantChanges.length === 1) {",
                "\t\t\t\tconst change = relevantChanges[0];",
                "\t\t\t\tif (change.mode === 'M' && change.file.startsWith('components/prism-')) {",
                "\t\t\t\t\tconst lang = change.file.match(/prism-([\\w-]+)\\.js$/)[1];",
                "\t\t\t\t\tif (lang === 'core') {",
                "\t\t\t\t\t\taddEntry('Other >> Core', removeMessagePrefix('Core', info));",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\tconst title = languages[lang].title;",
                "\t\t\t\t\t\taddEntry('Updated components >> ' + title, removeMessagePrefix(title, info));",
                "\t\t\t\t\t}",
                "\t\t\t\t\treturn true;",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\tfunction changedPlugin(info) {",
                "\t\t\tlet relevantChanges = info.changes.filter(and(notGenerated, notTests, notExamples, c => !/\\.(?:html|css)$/.test(c.file)));",
                "",
                "\t\t\tif (relevantChanges.length > 0 &&",
                "\t\t\t\trelevantChanges.every(c => c.mode === 'M' && /^plugins\\/.*\\.js$/.test(c.file))) {",
                "",
                "\t\t\t\tif (relevantChanges.length === 1) {",
                "\t\t\t\t\tconst change = relevantChanges[0];",
                "\t\t\t\t\tconst id = change.file.match(/\\/prism-([\\w-]+)\\.js/)[1];",
                "\t\t\t\t\tconst title = plugins[id].title || plugins[id];",
                "\t\t\t\t\taddEntry('Updated plugins >> ' + title, removeMessagePrefix(title, info));",
                "\t\t\t\t} else {",
                "\t\t\t\t\taddEntry('Updated plugins', info);",
                "\t\t\t\t}",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\tfunction changedTheme(info) {",
                "\t\t\tif (info.changes.length > 0 && info.changes.every(c => {",
                "\t\t\t\treturn /themes\\/.*\\.css/.test(c.file) && c.mode === 'M';",
                "\t\t\t})) {",
                "\t\t\t\tif (info.changes.length === 1) {",
                "\t\t\t\t\tconst change = info.changes[0];",
                "\t\t\t\t\tlet name = (change.file.match(/prism-(\\w+)\\.css$/) || [, 'Default'])[1];",
                "\t\t\t\t\tname = name[0].toUpperCase() + name.substr(1);",
                "\t\t\t\t\taddEntry('Updated themes >> ' + name, removeMessagePrefix(name, info));",
                "\t\t\t\t} else {",
                "\t\t\t\t\taddEntry('Updated themes', info);",
                "\t\t\t\t}",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\tfunction changedInfrastructure(info) {",
                "\t\t\tlet relevantChanges = info.changes.filter(notGenerated);",
                "",
                "\t\t\tif (relevantChanges.length > 0 && relevantChanges.every(c => {",
                "\t\t\t\tif (/^(?:gulpfile.js|tests)\\//.test(c.file)) {",
                "\t\t\t\t\t// gulp tasks or tests",
                "\t\t\t\t\treturn true;",
                "\t\t\t\t}",
                "\t\t\t\tif (/^\\.[\\w.]+$/.test(c.file)) {",
                "\t\t\t\t\t// a .something file",
                "\t\t\t\t\treturn true;",
                "\t\t\t\t}",
                "\t\t\t\treturn ['bower.json', 'CNAME', 'composer.json', 'package.json', 'package-lock.json'].indexOf(c.file) >= 0;",
                "\t\t\t})) {",
                "\t\t\t\taddEntry('Other >> Infrastructure', info);",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "",
                "\t\t\t// or dependencies.js",
                "\t\t\tconst excludeTests = info.changes.filter(notTests);",
                "\t\t\tif (excludeTests.length === 1 && excludeTests[0].file === 'dependencies.js') {",
                "\t\t\t\taddEntry('Other >> Infrastructure', info);",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\tfunction changedWebsite(info) {",
                "\t\t\tif (info.changes.length > 0 && info.changes.every(c => {",
                "\t\t\t\treturn /[\\w-]+\\.html$/.test(c.file) || /^(?:assets|docs)\\//.test(c.file);",
                "\t\t\t})) {",
                "\t\t\t\taddEntry('Other >> Website', info);",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\tfunction otherChanges(info) {",
                "\t\t\t// detect changes of the Github setup",
                "\t\t\t// This assumes that .md files are related to GitHub",
                "\t\t\tif (info.changes.length > 0 && info.changes.every(c => /\\.md$/i.test(c.file))) {",
                "\t\t\t\taddEntry('Other', info);",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t];",
                "",
                "\tfor (const info of infos) {",
                "\t\tif (!commitSorters.some(sorter => sorter(info))) {",
                "\t\t\taddEntry('TODO:', info);",
                "\t\t}",
                "\t}",
                "",
                "",
                "\t/**",
                "\t * Stringifies the given commit info.",
                "\t *",
                "\t * @param {string | CommitInfo} info",
                "\t * @returns {string}",
                "\t */",
                "\tfunction infoToString(info) {",
                "\t\tif (typeof info === 'string') {",
                "\t\t\treturn info;",
                "\t\t}",
                "\t\treturn `${info.message} [\\`${info.hash}\\`](https://github.com/PrismJS/prism/commit/${info.hash})`;",
                "\t}",
                "\tfunction printCategory(category, indentation = '') {",
                "\t\tfor (const subCategory of Object.keys(category).sort(strCompare)) {",
                "\t\t\tif (subCategory) {",
                "\t\t\t\tmd += `${indentation}* __${subCategory}__\\n`;",
                "\t\t\t\tprintCategory(category[subCategory], indentation + '    ')",
                "\t\t\t} else {",
                "\t\t\t\tfor (const info of category['']) {",
                "\t\t\t\t\tmd += `${indentation}* ${infoToString(info)}\\n`;",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tlet md = '';",
                "\tfor (const category of Object.keys(entries)) {",
                "\t\tmd += `\\n### ${category}\\n\\n`;",
                "\t\tprintCategory(entries[category]);",
                "\t}",
                "\tconsole.log(md);",
                "}",
                "",
                "",
                "module.exports = {",
                "\tlinkify,",
                "\tchanges",
                "};"
            ]
        },
        "docs.js": {
            "classes": [],
            "functions": [],
            "text": [
                "\"use strict\";",
                "",
                "const { src, dest, series } = require('gulp');",
                "const replace = require('gulp-replace');",
                "const jsdoc = require('gulp-jsdoc3');",
                "const pump = require('pump');",
                "const del = require('del');",
                "",
                "const jsDoc = {",
                "\tconfig: '../.jsdoc.json',",
                "\treadme: 'README.md',",
                "\tfiles: ['components/prism-core.js'],",
                "\tjunk: ['docs/fonts/Source-Sans-Pro', 'docs/**/Apache-License-2.0.txt']",
                "};",
                "",
                "",
                "function docsClean() {",
                "\treturn del([",
                "\t\t// everything in the docs folder",
                "\t\t'docs/**/*',",
                "\t\t// except for our CSS overwrites",
                "\t\t'!docs/styles',",
                "\t\t'!docs/styles/overwrites.css',",
                "\t]);",
                "}",
                "",
                "function docsCreate(cb) {",
                "\tvar config = require(jsDoc.config);",
                "\tvar files = [jsDoc.readme].concat(jsDoc.files);",
                "\tsrc(files, { read: false }).pipe(jsdoc(config, cb));",
                "}",
                "",
                "function docsAddFavicon(cb) {",
                "\treturn pump([",
                "\t\tsrc('docs/*.html'),",
                "\t\treplace(",
                "\t\t\t/\\s*<\\/head>/,",
                "\t\t\t'\\n    <link rel=\"icon\" type=\"image/png\" href=\"/favicon.png\"/>$&'",
                "\t\t),",
                "\t\tdest('docs/')",
                "\t], cb);",
                "}",
                "",
                "function docsRemoveExcessFiles() {",
                "\treturn del(jsDoc.junk);",
                "}",
                "",
                "function docsFixLineEnds(cb) {",
                "\t// https://github.com/jsdoc/jsdoc/issues/1837",
                "\treturn pump([",
                "\t\tsrc('docs/*.html'),",
                "\t\treplace(/\\r\\n?|\\n/g, '\\n'),",
                "\t\tdest('docs/')",
                "\t], cb);",
                "}",
                "",
                "const docs = series(docsClean, docsCreate, docsRemoveExcessFiles, docsAddFavicon, docsFixLineEnds);",
                "",
                "module.exports = {",
                "\tdocs,",
                "\thandlers: {",
                "\t\tjsdocCommentFound(comment) {",
                "\t\t\t// This is a hack.",
                "\t\t\t// JSDoc doesn't support TS' type import syntax (e.g. `@type {import(\"./my-file.js\").Type}`) and throws an",
                "\t\t\t// error if used. So we just replace the \"function\" with some literal that JSDoc will interpret as a",
                "\t\t\t// namespace. Not pretty but it works.",
                "\t\t\tcomment.comment = comment.comment",
                "\t\t\t\t.replace(/\\bimport\\s*\\(\\s*(?:\"(?:[^\"\\r\\n\\\\]|\\\\.)*\"|'(?:[^'\\r\\n\\\\]|\\\\.)*')\\s*\\)/g, '__dyn_import__')",
                "\t\t}",
                "\t}",
                "};"
            ]
        },
        "index.js": {
            "classes": [],
            "functions": [],
            "text": [
                "\"use strict\";",
                "",
                "const { src, dest, series, parallel, watch } = require('gulp');",
                "",
                "const rename = require('gulp-rename');",
                "const uglify = require('gulp-uglify');",
                "const header = require('gulp-header');",
                "const concat = require('gulp-concat');",
                "const replace = require('gulp-replace');",
                "const webfont = require('webfont').default;",
                "const pump = require('pump');",
                "const util = require('util');",
                "const fs = require('fs');",
                "",
                "const paths = require('./paths');",
                "const { changes, linkify } = require('./changelog');",
                "const { docs } = require('./docs');",
                "",
                "",
                "const componentsPromise = new Promise((resolve, reject) => {",
                "\tfs.readFile(paths.componentsFile, {",
                "\t\tencoding: 'utf-8'",
                "\t}, (err, data) => {",
                "\t\tif (!err) {",
                "\t\t\tresolve(JSON.parse(data));",
                "\t\t} else {",
                "\t\t\treject(err);",
                "\t\t}",
                "\t});",
                "});",
                "",
                "function inlineRegexSource() {",
                "\treturn replace(",
                "\t\t/\\/((?:[^\\n\\r[\\\\\\/]|\\\\.|\\[(?:[^\\n\\r\\\\\\]]|\\\\.)*\\])+)\\/\\s*\\.\\s*source\\b/g,",
                "\t\t(m, source) => {",
                "\t\t\t// escape backslashes",
                "\t\t\tsource = source.replace(/\\\\(.)|\\[(\\\\s\\\\S|\\\\S\\\\s)\\]/g, function (m, g1, g2) {",
                "\t\t\t\tif (g1) {",
                "\t\t\t\t\t// characters like /\\n/ can just be kept as \"\\n\" instead of being escaped to \"\\\\n\"",
                "\t\t\t\t\tif (/[nrt0/]/.test(g1)) {",
                "\t\t\t\t\t\treturn m;",
                "\t\t\t\t\t}",
                "\t\t\t\t\tif ('\\\\' == g1) {",
                "\t\t\t\t\t\treturn '\\\\\\\\\\\\\\\\'; // escape using 4 backslashes",
                "\t\t\t\t\t}",
                "\t\t\t\t\treturn '\\\\\\\\' + g1;",
                "\t\t\t\t} else {",
                "\t\t\t\t\treturn \"[^]\";",
                "\t\t\t\t}",
                "\t\t\t});",
                "\t\t\t// escape single quotes",
                "\t\t\tsource = source.replace(/'/g, \"\\\\'\");",
                "\t\t\t// wrap source in single quotes",
                "\t\t\treturn \"'\" + source + \"'\";",
                "\t\t}",
                "\t);",
                "}",
                "",
                "function minifyJS() {",
                "\treturn [",
                "\t\tinlineRegexSource(),",
                "\t\tuglify()",
                "\t];",
                "}",
                "",
                "",
                "function minifyComponents(cb) {",
                "\tpump([src(paths.components), ...minifyJS(), rename({ suffix: '.min' }), dest('components')], cb);",
                "}",
                "function minifyPlugins(cb) {",
                "\tpump([src(paths.plugins), ...minifyJS(), rename({ suffix: '.min' }), dest('plugins')], cb);",
                "}",
                "function build(cb) {",
                "\tpump([src(paths.main), header(`",
                "/* **********************************************",
                "     Begin <%= file.relative %>",
                "********************************************** */",
                "",
                "`), concat('prism.js'), dest('./')], cb);",
                "}",
                "",
                "async function componentsJsonToJs() {",
                "\tconst data = await componentsPromise;",
                "\tconst js = `var components = ${JSON.stringify(data)};",
                "if (typeof module !== 'undefined' && module.exports) { module.exports = components; }`;",
                "\treturn util.promisify(fs.writeFile)(paths.componentsFileJS, js);",
                "}",
                "",
                "function watchComponentsAndPlugins() {",
                "\twatch(paths.components, parallel(minifyComponents, build));",
                "\twatch(paths.plugins, parallel(minifyPlugins, build));",
                "}",
                "",
                "async function languagePlugins() {",
                "\tconst data = await componentsPromise;",
                "\t/** @type {Record<string, string | null>} */",
                "\tconst languagesMap = {};",
                "\tconst dependenciesMap = {};",
                "\tconst aliasMap = {};",
                "",
                "\t/**",
                "\t * Tries to guess the name of a language given its id.",
                "\t *",
                "\t * From `prism-show-language.js`.",
                "\t *",
                "\t * @param {string} id The language id.",
                "\t * @returns {string}",
                "\t */",
                "\tfunction guessTitle(id) {",
                "\t\tif (!id) {",
                "\t\t\treturn id;",
                "\t\t}",
                "\t\treturn (id.substring(0, 1).toUpperCase() + id.substring(1)).replace(/s(?=cript)/, 'S');",
                "\t}",
                "",
                "\t/**",
                "\t * @param {string} key",
                "\t * @param {string} title",
                "\t */",
                "\tfunction addLanguageTitle(key, title) {",
                "\t\tif (!(key in languagesMap)) {",
                "\t\t\tif (guessTitle(key) === title) {",
                "\t\t\t\tlanguagesMap[key] = null;",
                "\t\t\t} else {",
                "\t\t\t\tlanguagesMap[key] = title;",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tfor (const id in data.languages) {",
                "\t\tif (id !== 'meta') {",
                "\t\t\tconst language = data.languages[id];",
                "\t\t\tconst title = language.displayTitle || language.title;",
                "",
                "\t\t\taddLanguageTitle(id, title);",
                "",
                "\t\t\tfor (const name in language.aliasTitles) {",
                "\t\t\t\taddLanguageTitle(name, language.aliasTitles[name]);",
                "\t\t\t}",
                "",
                "\t\t\tif (language.alias) {",
                "\t\t\t\tif (typeof language.alias === 'string') {",
                "\t\t\t\t\taliasMap[language.alias] = id;",
                "\t\t\t\t\taddLanguageTitle(language.alias, title);",
                "\t\t\t\t} else {",
                "\t\t\t\t\tlanguage.alias.forEach(function (alias) {",
                "\t\t\t\t\t\taliasMap[alias] = id;",
                "\t\t\t\t\t\taddLanguageTitle(alias, title);",
                "\t\t\t\t\t});",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t\tif (language.require) {",
                "\t\t\t\tdependenciesMap[id] = language.require;",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tfunction formattedStringify(json) {",
                "\t\treturn JSON.stringify(json, null, '\\t').replace(/\\n/g, '\\n\\t');",
                "\t}",
                "",
                "\t/** @type {Record<string, string>} */",
                "\tconst nonNullLanguageMap = {",
                "\t\t'none': 'Plain text'",
                "\t};",
                "\tfor (const id in languagesMap) {",
                "\t\tconst title = languagesMap[id];",
                "\t\tif (title) {",
                "\t\t\tnonNullLanguageMap[id] = title;",
                "\t\t}",
                "\t}",
                "",
                "\tconst jsonLanguagesMap = formattedStringify(nonNullLanguageMap);",
                "\tconst jsonDependenciesMap = formattedStringify(dependenciesMap);",
                "\tconst jsonAliasMap = formattedStringify(aliasMap);",
                "",
                "\tconst tasks = [",
                "\t\t{",
                "\t\t\tplugin: paths.showLanguagePlugin,",
                "\t\t\tmaps: { languages: jsonLanguagesMap }",
                "\t\t},",
                "\t\t{",
                "\t\t\tplugin: paths.autoloaderPlugin,",
                "\t\t\tmaps: { aliases: jsonAliasMap, dependencies: jsonDependenciesMap }",
                "\t\t}",
                "\t];",
                "",
                "\t// TODO: Use `Promise.allSettled` (https://github.com/tc39/proposal-promise-allSettled)",
                "\tconst taskResults = await Promise.all(tasks.map(async task => {",
                "\t\ttry {",
                "\t\t\tconst value = await new Promise((resolve, reject) => {",
                "\t\t\t\tconst stream = src(task.plugin)",
                "\t\t\t\t\t.pipe(replace(",
                "\t\t\t\t\t\t/\\/\\*(\\w+)_placeholder\\[\\*\\/[\\s\\S]*?\\/\\*\\]\\*\\//g,",
                "\t\t\t\t\t\t(m, mapName) => `/*${mapName}_placeholder[*/${task.maps[mapName]}/*]*/`",
                "\t\t\t\t\t))",
                "\t\t\t\t\t.pipe(dest(task.plugin.substring(0, task.plugin.lastIndexOf('/'))));",
                "",
                "\t\t\t\tstream.on('error', reject);",
                "\t\t\t\tstream.on('end', resolve);",
                "\t\t\t});",
                "\t\t\treturn { status: 'fulfilled', value };",
                "\t\t} catch (error) {",
                "\t\t\treturn { status: 'rejected', reason: error };",
                "\t\t}",
                "\t}));",
                "",
                "\tconst rejectedTasks = taskResults.filter(/** @returns {r is {status: 'rejected', reason: any}} */ r => r.status === 'rejected');",
                "\tif (rejectedTasks.length > 0) {",
                "\t\tthrow rejectedTasks.map(r => r.reason);",
                "\t}",
                "}",
                "",
                "async function treeviewIconFont() {",
                "\t// List of all icons",
                "\t// Add new icons to the end of the list.",
                "\tconst iconList = [",
                "\t\t'file', 'folder',",
                "\t\t'image', 'audio', 'video',",
                "\t\t'text', 'code',",
                "\t\t'archive', 'pdf',",
                "\t\t'excel', 'powerpoint', 'word'",
                "\t];",
                "\tconst fontName = 'PrismTreeview';",
                "",
                "\t// generate the font",
                "\tconst result = await webfont({",
                "\t\tfiles: iconList.map(n => `plugins/treeview/icons/${n}.svg`),",
                "\t\tformats: ['woff'],",
                "\t\tfontName,",
                "\t\tsort: false",
                "\t});",
                "",
                "\t/** @type {Buffer} */",
                "\tconst woff = result.woff;",
                "\t/**",
                "\t * @type {{ contents: string; srcPath: string; metadata: Metadata }[]}",
                "\t * @typedef Metadata",
                "\t * @property {string} path",
                "\t * @property {string} name",
                "\t * @property {string[]} unicode",
                "\t * @property {boolean} renamed",
                "\t * @property {number} width",
                "\t * @property {number} height",
                "\t * */",
                "\tconst glyphsData = result.glyphsData;",
                "",
                "\tconst fontFace = `",
                "/* @GENERATED-FONT */",
                "@font-face {",
                "\tfont-family: \"${fontName}\";",
                "\t/**",
                "\t * This font is generated from the .svg files in the \\`icons\\` folder. See the \\`treeviewIconFont\\` function in",
                "\t * \\`gulpfile.js/index.js\\` for more information.",
                "\t *",
                "\t * Use the following escape sequences to refer to a specific icon:",
                "\t *",
                "\t * - ${glyphsData.map(({ metadata }) => {",
                "\t\tconst codePoint = metadata.unicode[0].codePointAt(0);",
                "\t\treturn `\\\\${codePoint.toString(16)} ${metadata.name}`;",
                "\t}).join('\\n\\t * - ')}",
                "\t */",
                "\tsrc: url(\"data:application/font-woff;base64,${woff.toString('base64')}\")",
                "\t\tformat(\"woff\");",
                "}",
                "`.trim();",
                "",
                "\tconst cssPath = 'plugins/treeview/prism-treeview.css';",
                "\tconst fontFaceRegex = /\\/\\*\\s*@GENERATED-FONT\\s*\\*\\/\\s*@font-face\\s*\\{(?:[^{}/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\}/;",
                "",
                "\tconst css = fs.readFileSync(cssPath, 'utf-8');",
                "\tfs.writeFileSync(cssPath, css.replace(fontFaceRegex, fontFace), 'utf-8');",
                "}",
                "",
                "const components = minifyComponents;",
                "const plugins = series(languagePlugins, treeviewIconFont, minifyPlugins);",
                "",
                "",
                "module.exports = {",
                "\twatch: watchComponentsAndPlugins,",
                "\tdefault: series(parallel(components, plugins, componentsJsonToJs, build), docs),",
                "\tlinkify,",
                "\tchanges",
                "};"
            ]
        },
        "paths.js": {
            "classes": [],
            "functions": [],
            "text": [
                "\"use strict\";",
                "",
                "module.exports = {",
                "\tcomponentsFile: 'components.json',",
                "\tcomponentsFileJS: 'components.js',",
                "\tcomponents: ['components/**/*.js', '!components/index.js', '!components/**/*.min.js'],",
                "\tmain: [",
                "\t\t'components/prism-core.js',",
                "\t\t'components/prism-markup.js',",
                "\t\t'components/prism-css.js',",
                "\t\t'components/prism-clike.js',",
                "\t\t'components/prism-javascript.js',",
                "\t\t'plugins/file-highlight/prism-file-highlight.js'",
                "\t],",
                "\tplugins: ['plugins/**/*.js', '!plugins/**/*.min.js'],",
                "\tshowLanguagePlugin: 'plugins/show-language/prism-show-language.js',",
                "\tautoloaderPlugin: 'plugins/autoloader/prism-autoloader.js',",
                "\tchangelog: 'CHANGELOG.md'",
                "};"
            ]
        }
    },
    "plugins": {
        "index.html": {},
        "autolinker": {
            "index.html": {},
            "prism-autolinker.css": {},
            "prism-autolinker.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "var url = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&@]+(?:\\?[\\w\\-+%~/.:=?&!$'()*,;@]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;@]*)?/,",
                    "    email = /\\b\\S+@[\\w.]+[a-z]{2}/,",
                    "    linkMd = /\\[([^\\]]+)]\\(([^)]+)\\)/,",
                    "",
                    "\t// Tokens that may contain URLs and emails",
                    "    candidates = ['comment', 'url', 'attr-value', 'string'];",
                    "",
                    "Prism.plugins.autolinker = {",
                    "\tprocessGrammar: function (grammar) {",
                    "\t\t// Abort if grammar has already been processed",
                    "\t\tif (!grammar || grammar['url-link']) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tPrism.languages.DFS(grammar, function (key, def, type) {",
                    "\t\t\tif (candidates.indexOf(type) > -1 && !Array.isArray(def)) {",
                    "\t\t\t\tif (!def.pattern) {",
                    "\t\t\t\t\tdef = this[key] = {",
                    "\t\t\t\t\t\tpattern: def",
                    "\t\t\t\t\t};",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tdef.inside = def.inside || {};",
                    "",
                    "\t\t\t\tif (type == 'comment') {",
                    "\t\t\t\t\tdef.inside['md-link'] = linkMd;",
                    "\t\t\t\t}",
                    "\t\t\t\tif (type == 'attr-value') {",
                    "\t\t\t\t\tPrism.languages.insertBefore('inside', 'punctuation', { 'url-link': url }, def);",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tdef.inside['url-link'] = url;",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tdef.inside['email-link'] = email;",
                    "\t\t\t}",
                    "\t\t});",
                    "\t\tgrammar['url-link'] = url;",
                    "\t\tgrammar['email-link'] = email;",
                    "\t}",
                    "};",
                    "",
                    "Prism.hooks.add('before-highlight', function(env) {",
                    "\tPrism.plugins.autolinker.processGrammar(env.grammar);",
                    "});",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif (/-link$/.test(env.type)) {",
                    "\t\tenv.tag = 'a';",
                    "",
                    "\t\tvar href = env.content;",
                    "",
                    "\t\tif (env.type == 'email-link' && href.indexOf('mailto:') != 0) {",
                    "\t\t\thref = 'mailto:' + href;",
                    "\t\t}",
                    "\t\telse if (env.type == 'md-link') {",
                    "\t\t\t// Markdown",
                    "\t\t\tvar match = env.content.match(linkMd);",
                    "",
                    "\t\t\thref = match[2];",
                    "\t\t\tenv.content = match[1];",
                    "\t\t}",
                    "",
                    "\t\tenv.attributes.href = href;",
                    "",
                    "\t\t// Silently catch any error thrown by decodeURIComponent (#1186)",
                    "\t\ttry {",
                    "\t\t\tenv.content = decodeURIComponent(env.content);",
                    "\t\t} catch(e) {}",
                    "\t}",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-autolinker.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var t=/\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&@]+(?:\\?[\\w\\-+%~/.:=?&!$'()*,;@]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;@]*)?/,r=/\\b\\S+@[\\w.]+[a-z]{2}/,a=/\\[([^\\]]+)]\\(([^)]+)\\)/,l=[\"comment\",\"url\",\"attr-value\",\"string\"];Prism.plugins.autolinker={processGrammar:function(i){i&&!i[\"url-link\"]&&(Prism.languages.DFS(i,function(i,n,e){-1<l.indexOf(e)&&!Array.isArray(n)&&(n.pattern||(n=this[i]={pattern:n}),n.inside=n.inside||{},\"comment\"==e&&(n.inside[\"md-link\"]=a),\"attr-value\"==e?Prism.languages.insertBefore(\"inside\",\"punctuation\",{\"url-link\":t},n):n.inside[\"url-link\"]=t,n.inside[\"email-link\"]=r)}),i[\"url-link\"]=t,i[\"email-link\"]=r)}},Prism.hooks.add(\"before-highlight\",function(i){Prism.plugins.autolinker.processGrammar(i.grammar)}),Prism.hooks.add(\"wrap\",function(i){if(/-link$/.test(i.type)){i.tag=\"a\";var n=i.content;if(\"email-link\"==i.type&&0!=n.indexOf(\"mailto:\"))n=\"mailto:\"+n;else if(\"md-link\"==i.type){var e=i.content.match(a);n=e[2],i.content=e[1]}i.attributes.href=n;try{i.content=decodeURIComponent(i.content)}catch(i){}}})}}();"
                ]
            }
        },
        "autoloader": {
            "index.html": {},
            "prism-autoloader.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.createElement) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * The dependencies map is built automatically with gulp.",
                    "\t *",
                    "\t * @type {Object<string, string | string[]>}",
                    "\t */",
                    "\tvar lang_dependencies = /*dependencies_placeholder[*/{",
                    "\t\t\"javascript\": \"clike\",",
                    "\t\t\"actionscript\": \"javascript\",",
                    "\t\t\"apex\": [",
                    "\t\t\t\"clike\",",
                    "\t\t\t\"sql\"",
                    "\t\t],",
                    "\t\t\"arduino\": \"cpp\",",
                    "\t\t\"aspnet\": [",
                    "\t\t\t\"markup\",",
                    "\t\t\t\"csharp\"",
                    "\t\t],",
                    "\t\t\"birb\": \"clike\",",
                    "\t\t\"bison\": \"c\",",
                    "\t\t\"c\": \"clike\",",
                    "\t\t\"csharp\": \"clike\",",
                    "\t\t\"cpp\": \"c\",",
                    "\t\t\"coffeescript\": \"javascript\",",
                    "\t\t\"crystal\": \"ruby\",",
                    "\t\t\"css-extras\": \"css\",",
                    "\t\t\"d\": \"clike\",",
                    "\t\t\"dart\": \"clike\",",
                    "\t\t\"django\": \"markup-templating\",",
                    "\t\t\"ejs\": [",
                    "\t\t\t\"javascript\",",
                    "\t\t\t\"markup-templating\"",
                    "\t\t],",
                    "\t\t\"etlua\": [",
                    "\t\t\t\"lua\",",
                    "\t\t\t\"markup-templating\"",
                    "\t\t],",
                    "\t\t\"erb\": [",
                    "\t\t\t\"ruby\",",
                    "\t\t\t\"markup-templating\"",
                    "\t\t],",
                    "\t\t\"fsharp\": \"clike\",",
                    "\t\t\"firestore-security-rules\": \"clike\",",
                    "\t\t\"flow\": \"javascript\",",
                    "\t\t\"ftl\": \"markup-templating\",",
                    "\t\t\"gml\": \"clike\",",
                    "\t\t\"glsl\": \"c\",",
                    "\t\t\"go\": \"clike\",",
                    "\t\t\"groovy\": \"clike\",",
                    "\t\t\"haml\": \"ruby\",",
                    "\t\t\"handlebars\": \"markup-templating\",",
                    "\t\t\"haxe\": \"clike\",",
                    "\t\t\"hlsl\": \"c\",",
                    "\t\t\"java\": \"clike\",",
                    "\t\t\"javadoc\": [",
                    "\t\t\t\"markup\",",
                    "\t\t\t\"java\",",
                    "\t\t\t\"javadoclike\"",
                    "\t\t],",
                    "\t\t\"jolie\": \"clike\",",
                    "\t\t\"jsdoc\": [",
                    "\t\t\t\"javascript\",",
                    "\t\t\t\"javadoclike\",",
                    "\t\t\t\"typescript\"",
                    "\t\t],",
                    "\t\t\"js-extras\": \"javascript\",",
                    "\t\t\"json5\": \"json\",",
                    "\t\t\"jsonp\": \"json\",",
                    "\t\t\"js-templates\": \"javascript\",",
                    "\t\t\"kotlin\": \"clike\",",
                    "\t\t\"latte\": [",
                    "\t\t\t\"clike\",",
                    "\t\t\t\"markup-templating\",",
                    "\t\t\t\"php\"",
                    "\t\t],",
                    "\t\t\"less\": \"css\",",
                    "\t\t\"lilypond\": \"scheme\",",
                    "\t\t\"markdown\": \"markup\",",
                    "\t\t\"markup-templating\": \"markup\",",
                    "\t\t\"mongodb\": \"javascript\",",
                    "\t\t\"n4js\": \"javascript\",",
                    "\t\t\"nginx\": \"clike\",",
                    "\t\t\"objectivec\": \"c\",",
                    "\t\t\"opencl\": \"c\",",
                    "\t\t\"parser\": \"markup\",",
                    "\t\t\"php\": \"markup-templating\",",
                    "\t\t\"phpdoc\": [",
                    "\t\t\t\"php\",",
                    "\t\t\t\"javadoclike\"",
                    "\t\t],",
                    "\t\t\"php-extras\": \"php\",",
                    "\t\t\"plsql\": \"sql\",",
                    "\t\t\"processing\": \"clike\",",
                    "\t\t\"protobuf\": \"clike\",",
                    "\t\t\"pug\": [",
                    "\t\t\t\"markup\",",
                    "\t\t\t\"javascript\"",
                    "\t\t],",
                    "\t\t\"purebasic\": \"clike\",",
                    "\t\t\"purescript\": \"haskell\",",
                    "\t\t\"qml\": \"javascript\",",
                    "\t\t\"qore\": \"clike\",",
                    "\t\t\"racket\": \"scheme\",",
                    "\t\t\"jsx\": [",
                    "\t\t\t\"markup\",",
                    "\t\t\t\"javascript\"",
                    "\t\t],",
                    "\t\t\"tsx\": [",
                    "\t\t\t\"jsx\",",
                    "\t\t\t\"typescript\"",
                    "\t\t],",
                    "\t\t\"reason\": \"clike\",",
                    "\t\t\"ruby\": \"clike\",",
                    "\t\t\"sass\": \"css\",",
                    "\t\t\"scss\": \"css\",",
                    "\t\t\"scala\": \"java\",",
                    "\t\t\"shell-session\": \"bash\",",
                    "\t\t\"smarty\": \"markup-templating\",",
                    "\t\t\"solidity\": \"clike\",",
                    "\t\t\"soy\": \"markup-templating\",",
                    "\t\t\"sparql\": \"turtle\",",
                    "\t\t\"sqf\": \"clike\",",
                    "\t\t\"swift\": \"clike\",",
                    "\t\t\"t4-cs\": [",
                    "\t\t\t\"t4-templating\",",
                    "\t\t\t\"csharp\"",
                    "\t\t],",
                    "\t\t\"t4-vb\": [",
                    "\t\t\t\"t4-templating\",",
                    "\t\t\t\"vbnet\"",
                    "\t\t],",
                    "\t\t\"tap\": \"yaml\",",
                    "\t\t\"tt2\": [",
                    "\t\t\t\"clike\",",
                    "\t\t\t\"markup-templating\"",
                    "\t\t],",
                    "\t\t\"textile\": \"markup\",",
                    "\t\t\"twig\": \"markup\",",
                    "\t\t\"typescript\": \"javascript\",",
                    "\t\t\"v\": \"clike\",",
                    "\t\t\"vala\": \"clike\",",
                    "\t\t\"vbnet\": \"basic\",",
                    "\t\t\"velocity\": \"markup\",",
                    "\t\t\"wiki\": \"markup\",",
                    "\t\t\"xeora\": \"markup\",",
                    "\t\t\"xml-doc\": \"markup\",",
                    "\t\t\"xquery\": \"markup\"",
                    "\t}/*]*/;",
                    "",
                    "\tvar lang_aliases = /*aliases_placeholder[*/{",
                    "\t\t\"html\": \"markup\",",
                    "\t\t\"xml\": \"markup\",",
                    "\t\t\"svg\": \"markup\",",
                    "\t\t\"mathml\": \"markup\",",
                    "\t\t\"ssml\": \"markup\",",
                    "\t\t\"atom\": \"markup\",",
                    "\t\t\"rss\": \"markup\",",
                    "\t\t\"js\": \"javascript\",",
                    "\t\t\"g4\": \"antlr4\",",
                    "\t\t\"adoc\": \"asciidoc\",",
                    "\t\t\"shell\": \"bash\",",
                    "\t\t\"shortcode\": \"bbcode\",",
                    "\t\t\"rbnf\": \"bnf\",",
                    "\t\t\"oscript\": \"bsl\",",
                    "\t\t\"cs\": \"csharp\",",
                    "\t\t\"dotnet\": \"csharp\",",
                    "\t\t\"coffee\": \"coffeescript\",",
                    "\t\t\"conc\": \"concurnas\",",
                    "\t\t\"jinja2\": \"django\",",
                    "\t\t\"dns-zone\": \"dns-zone-file\",",
                    "\t\t\"dockerfile\": \"docker\",",
                    "\t\t\"eta\": \"ejs\",",
                    "\t\t\"xlsx\": \"excel-formula\",",
                    "\t\t\"xls\": \"excel-formula\",",
                    "\t\t\"gamemakerlanguage\": \"gml\",",
                    "\t\t\"hs\": \"haskell\",",
                    "\t\t\"gitignore\": \"ignore\",",
                    "\t\t\"hgignore\": \"ignore\",",
                    "\t\t\"npmignore\": \"ignore\",",
                    "\t\t\"webmanifest\": \"json\",",
                    "\t\t\"kt\": \"kotlin\",",
                    "\t\t\"kts\": \"kotlin\",",
                    "\t\t\"tex\": \"latex\",",
                    "\t\t\"context\": \"latex\",",
                    "\t\t\"ly\": \"lilypond\",",
                    "\t\t\"emacs\": \"lisp\",",
                    "\t\t\"elisp\": \"lisp\",",
                    "\t\t\"emacs-lisp\": \"lisp\",",
                    "\t\t\"md\": \"markdown\",",
                    "\t\t\"moon\": \"moonscript\",",
                    "\t\t\"n4jsd\": \"n4js\",",
                    "\t\t\"nani\": \"naniscript\",",
                    "\t\t\"objc\": \"objectivec\",",
                    "\t\t\"objectpascal\": \"pascal\",",
                    "\t\t\"px\": \"pcaxis\",",
                    "\t\t\"pcode\": \"peoplecode\",",
                    "\t\t\"pq\": \"powerquery\",",
                    "\t\t\"mscript\": \"powerquery\",",
                    "\t\t\"pbfasm\": \"purebasic\",",
                    "\t\t\"purs\": \"purescript\",",
                    "\t\t\"py\": \"python\",",
                    "\t\t\"rkt\": \"racket\",",
                    "\t\t\"rpy\": \"renpy\",",
                    "\t\t\"robot\": \"robotframework\",",
                    "\t\t\"rb\": \"ruby\",",
                    "\t\t\"sh-session\": \"shell-session\",",
                    "\t\t\"shellsession\": \"shell-session\",",
                    "\t\t\"smlnj\": \"sml\",",
                    "\t\t\"sol\": \"solidity\",",
                    "\t\t\"sln\": \"solution-file\",",
                    "\t\t\"rq\": \"sparql\",",
                    "\t\t\"t4\": \"t4-cs\",",
                    "\t\t\"trig\": \"turtle\",",
                    "\t\t\"ts\": \"typescript\",",
                    "\t\t\"tsconfig\": \"typoscript\",",
                    "\t\t\"uscript\": \"unrealscript\",",
                    "\t\t\"uc\": \"unrealscript\",",
                    "\t\t\"vb\": \"visual-basic\",",
                    "\t\t\"vba\": \"visual-basic\",",
                    "\t\t\"xeoracube\": \"xeora\",",
                    "\t\t\"yml\": \"yaml\"",
                    "\t}/*]*/;",
                    "",
                    "\t/**",
                    "\t * @typedef LangDataItem",
                    "\t * @property {{ success?: () => void, error?: () => void }[]} callbacks",
                    "\t * @property {boolean} [error]",
                    "\t * @property {boolean} [loading]",
                    "\t */",
                    "\t/** @type {Object<string, LangDataItem>} */",
                    "\tvar lang_data = {};",
                    "",
                    "\tvar ignored_language = 'none';",
                    "\tvar languages_path = 'components/';",
                    "",
                    "\tvar script = Prism.util.currentScript();",
                    "\tif (script) {",
                    "\t\tvar autoloaderFile = /\\bplugins\\/autoloader\\/prism-autoloader\\.(?:min\\.)?js(?:\\?[^\\r\\n/]*)?$/i;",
                    "\t\tvar prismFile = /(^|\\/)[\\w-]+\\.(?:min\\.)?js(?:\\?[^\\r\\n/]*)?$/i;",
                    "",
                    "\t\tvar autoloaderPath = script.getAttribute('data-autoloader-path');",
                    "\t\tif (autoloaderPath != null) {",
                    "\t\t\t// data-autoloader-path is set, so just use it",
                    "\t\t\tlanguages_path = autoloaderPath.trim().replace(/\\/?$/, '/');",
                    "\t\t} else {",
                    "\t\t\tvar src = script.src;",
                    "\t\t\tif (autoloaderFile.test(src)) {",
                    "\t\t\t\t// the script is the original autoloader script in the usual Prism project structure",
                    "\t\t\t\tlanguages_path = src.replace(autoloaderFile, 'components/');",
                    "\t\t\t} else if (prismFile.test(src)) {",
                    "\t\t\t\t// the script is part of a bundle like a custom prism.js from the download page",
                    "\t\t\t\tlanguages_path = src.replace(prismFile, '$1components/');",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tvar config = Prism.plugins.autoloader = {",
                    "\t\tlanguages_path: languages_path,",
                    "\t\tuse_minified: true,",
                    "\t\tloadLanguages: loadLanguages",
                    "\t};",
                    "",
                    "",
                    "\t/**",
                    "\t * Lazily loads an external script.",
                    "\t *",
                    "\t * @param {string} src",
                    "\t * @param {() => void} [success]",
                    "\t * @param {() => void} [error]",
                    "\t */",
                    "\tfunction addScript(src, success, error) {",
                    "\t\tvar s = document.createElement('script');",
                    "\t\ts.src = src;",
                    "\t\ts.async = true;",
                    "\t\ts.onload = function () {",
                    "\t\t\tdocument.body.removeChild(s);",
                    "\t\t\tsuccess && success();",
                    "\t\t};",
                    "\t\ts.onerror = function () {",
                    "\t\t\tdocument.body.removeChild(s);",
                    "\t\t\terror && error();",
                    "\t\t};",
                    "\t\tdocument.body.appendChild(s);",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Returns all additional dependencies of the given element defined by the `data-dependencies` attribute.",
                    "\t *",
                    "\t * @param {Element} element",
                    "\t * @returns {string[]}",
                    "\t */",
                    "\tfunction getDependencies(element) {",
                    "\t\tvar deps = (element.getAttribute('data-dependencies') || '').trim();",
                    "\t\tif (!deps) {",
                    "\t\t\tvar parent = element.parentElement;",
                    "\t\t\tif (parent && parent.tagName.toLowerCase() === 'pre') {",
                    "\t\t\t\tdeps = (parent.getAttribute('data-dependencies') || '').trim();",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn deps ? deps.split(/\\s*,\\s*/g) : [];",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Returns whether the given language is currently loaded.",
                    "\t *",
                    "\t * @param {string} lang",
                    "\t * @returns {boolean}",
                    "\t */",
                    "\tfunction isLoaded(lang) {",
                    "\t\tif (lang.indexOf('!') >= 0) {",
                    "\t\t\t// forced reload",
                    "\t\t\treturn false;",
                    "\t\t}",
                    "",
                    "\t\tlang = lang_aliases[lang] || lang; // resolve alias",
                    "",
                    "\t\tif (lang in Prism.languages) {",
                    "\t\t\t// the given language is already loaded",
                    "\t\t\treturn true;",
                    "\t\t}",
                    "",
                    "\t\t// this will catch extensions like CSS extras that don't add a grammar to Prism.languages",
                    "\t\tvar data = lang_data[lang];",
                    "\t\treturn data && !data.error && data.loading === false;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Returns the path to a grammar, using the language_path and use_minified config keys.",
                    "\t *",
                    "\t * @param {string} lang",
                    "\t * @returns {string}",
                    "\t */",
                    "\tfunction getLanguagePath(lang) {",
                    "\t\treturn config.languages_path + 'prism-' + lang + (config.use_minified ? '.min' : '') + '.js'",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Loads all given grammars concurrently.",
                    "\t *",
                    "\t * @param {string[]|string} languages",
                    "\t * @param {(languages: string[]) => void} [success]",
                    "\t * @param {(language: string) => void} [error] This callback will be invoked on the first language to fail.",
                    "\t */",
                    "\tfunction loadLanguages(languages, success, error) {",
                    "\t\tif (typeof languages === 'string') {",
                    "\t\t\tlanguages = [languages];",
                    "\t\t}",
                    "",
                    "\t\tvar total = languages.length;",
                    "\t\tvar completed = 0;",
                    "\t\tvar failed = false;",
                    "",
                    "\t\tif (total === 0) {",
                    "\t\t\tif (success) {",
                    "\t\t\t\tsetTimeout(success, 0);",
                    "\t\t\t}",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tfunction successCallback() {",
                    "\t\t\tif (failed) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "\t\t\tcompleted++;",
                    "\t\t\tif (completed === total) {",
                    "\t\t\t\tsuccess && success(languages);",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tlanguages.forEach(function (lang) {",
                    "\t\t\tloadLanguage(lang, successCallback, function () {",
                    "\t\t\t\tif (failed) {",
                    "\t\t\t\t\treturn;",
                    "\t\t\t\t}",
                    "\t\t\t\tfailed = true;",
                    "\t\t\t\terror && error(lang);",
                    "\t\t\t});",
                    "\t\t});",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Loads a grammar with its dependencies.",
                    "\t *",
                    "\t * @param {string} lang",
                    "\t * @param {() => void} [success]",
                    "\t * @param {() => void} [error]",
                    "\t */",
                    "\tfunction loadLanguage(lang, success, error) {",
                    "\t\tvar force = lang.indexOf('!') >= 0;",
                    "",
                    "\t\tlang = lang.replace('!', '');",
                    "\t\tlang = lang_aliases[lang] || lang;",
                    "",
                    "\t\tfunction load() {",
                    "\t\t\tvar data = lang_data[lang];",
                    "\t\t\tif (!data) {",
                    "\t\t\t\tdata = lang_data[lang] = {",
                    "\t\t\t\t\tcallbacks: []",
                    "\t\t\t\t};",
                    "\t\t\t}",
                    "\t\t\tdata.callbacks.push({",
                    "\t\t\t\tsuccess: success,",
                    "\t\t\t\terror: error",
                    "\t\t\t});",
                    "",
                    "\t\t\tif (!force && isLoaded(lang)) {",
                    "\t\t\t\t// the language is already loaded and we aren't forced to reload",
                    "\t\t\t\tlanguageCallback(lang, 'success');",
                    "\t\t\t} else if (!force && data.error) {",
                    "\t\t\t\t// the language failed to load before and we don't reload",
                    "\t\t\t\tlanguageCallback(lang, 'error');",
                    "\t\t\t} else if (force || !data.loading) {",
                    "\t\t\t\t// the language isn't currently loading and/or we are forced to reload",
                    "\t\t\t\tdata.loading = true;",
                    "\t\t\t\tdata.error = false;",
                    "",
                    "\t\t\t\taddScript(getLanguagePath(lang), function () {",
                    "\t\t\t\t\tdata.loading = false;",
                    "\t\t\t\t\tlanguageCallback(lang, 'success');",
                    "",
                    "\t\t\t\t}, function () {",
                    "\t\t\t\t\tdata.loading = false;",
                    "\t\t\t\t\tdata.error = true;",
                    "\t\t\t\t\tlanguageCallback(lang, 'error');",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t};",
                    "",
                    "\t\tvar dependencies = lang_dependencies[lang];",
                    "\t\tif (dependencies && dependencies.length) {",
                    "\t\t\tloadLanguages(dependencies, load, error);",
                    "\t\t} else {",
                    "\t\t\tload();",
                    "\t\t}",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Runs all callbacks of the given type for the given language.",
                    "\t *",
                    "\t * @param {string} lang",
                    "\t * @param {\"success\" | \"error\"} type",
                    "\t */",
                    "\tfunction languageCallback(lang, type) {",
                    "\t\tif (lang_data[lang]) {",
                    "\t\t\tvar callbacks = lang_data[lang].callbacks;",
                    "\t\t\tfor (var i = 0, l = callbacks.length; i < l; i++) {",
                    "\t\t\t\tvar callback = callbacks[i][type];",
                    "\t\t\t\tif (callback) {",
                    "\t\t\t\t\tsetTimeout(callback, 0);",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\tcallbacks.length = 0;",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "\t\tvar element = env.element;",
                    "\t\tvar language = env.language;",
                    "\t\tif (!element || !language || language === ignored_language) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar deps = getDependencies(element);",
                    "\t\tif (/^diff-./i.test(language)) {",
                    "\t\t\t// the \"diff-xxxx\" format is used by the Diff Highlight plugin",
                    "\t\t\tdeps.push('diff');",
                    "\t\t\tdeps.push(language.substr('diff-'.length));",
                    "\t\t} else {",
                    "\t\t\tdeps.push(language);",
                    "\t\t}",
                    "",
                    "\t\tif (!deps.every(isLoaded)) {",
                    "\t\t\t// the language or some dependencies aren't loaded",
                    "\t\t\tloadLanguages(deps, function () {",
                    "\t\t\t\tPrism.highlightElement(element);",
                    "\t\t\t});",
                    "\t\t}",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-autoloader.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document&&document.createElement){var l={javascript:\"clike\",actionscript:\"javascript\",apex:[\"clike\",\"sql\"],arduino:\"cpp\",aspnet:[\"markup\",\"csharp\"],birb:\"clike\",bison:\"c\",c:\"clike\",csharp:\"clike\",cpp:\"c\",coffeescript:\"javascript\",crystal:\"ruby\",\"css-extras\":\"css\",d:\"clike\",dart:\"clike\",django:\"markup-templating\",ejs:[\"javascript\",\"markup-templating\"],etlua:[\"lua\",\"markup-templating\"],erb:[\"ruby\",\"markup-templating\"],fsharp:\"clike\",\"firestore-security-rules\":\"clike\",flow:\"javascript\",ftl:\"markup-templating\",gml:\"clike\",glsl:\"c\",go:\"clike\",groovy:\"clike\",haml:\"ruby\",handlebars:\"markup-templating\",haxe:\"clike\",hlsl:\"c\",java:\"clike\",javadoc:[\"markup\",\"java\",\"javadoclike\"],jolie:\"clike\",jsdoc:[\"javascript\",\"javadoclike\",\"typescript\"],\"js-extras\":\"javascript\",json5:\"json\",jsonp:\"json\",\"js-templates\":\"javascript\",kotlin:\"clike\",latte:[\"clike\",\"markup-templating\",\"php\"],less:\"css\",lilypond:\"scheme\",markdown:\"markup\",\"markup-templating\":\"markup\",mongodb:\"javascript\",n4js:\"javascript\",nginx:\"clike\",objectivec:\"c\",opencl:\"c\",parser:\"markup\",php:\"markup-templating\",phpdoc:[\"php\",\"javadoclike\"],\"php-extras\":\"php\",plsql:\"sql\",processing:\"clike\",protobuf:\"clike\",pug:[\"markup\",\"javascript\"],purebasic:\"clike\",purescript:\"haskell\",qml:\"javascript\",qore:\"clike\",racket:\"scheme\",jsx:[\"markup\",\"javascript\"],tsx:[\"jsx\",\"typescript\"],reason:\"clike\",ruby:\"clike\",sass:\"css\",scss:\"css\",scala:\"java\",\"shell-session\":\"bash\",smarty:\"markup-templating\",solidity:\"clike\",soy:\"markup-templating\",sparql:\"turtle\",sqf:\"clike\",swift:\"clike\",\"t4-cs\":[\"t4-templating\",\"csharp\"],\"t4-vb\":[\"t4-templating\",\"vbnet\"],tap:\"yaml\",tt2:[\"clike\",\"markup-templating\"],textile:\"markup\",twig:\"markup\",typescript:\"javascript\",v:\"clike\",vala:\"clike\",vbnet:\"basic\",velocity:\"markup\",wiki:\"markup\",xeora:\"markup\",\"xml-doc\":\"markup\",xquery:\"markup\"},n={html:\"markup\",xml:\"markup\",svg:\"markup\",mathml:\"markup\",ssml:\"markup\",atom:\"markup\",rss:\"markup\",js:\"javascript\",g4:\"antlr4\",adoc:\"asciidoc\",shell:\"bash\",shortcode:\"bbcode\",rbnf:\"bnf\",oscript:\"bsl\",cs:\"csharp\",dotnet:\"csharp\",coffee:\"coffeescript\",conc:\"concurnas\",jinja2:\"django\",\"dns-zone\":\"dns-zone-file\",dockerfile:\"docker\",eta:\"ejs\",xlsx:\"excel-formula\",xls:\"excel-formula\",gamemakerlanguage:\"gml\",hs:\"haskell\",gitignore:\"ignore\",hgignore:\"ignore\",npmignore:\"ignore\",webmanifest:\"json\",kt:\"kotlin\",kts:\"kotlin\",tex:\"latex\",context:\"latex\",ly:\"lilypond\",emacs:\"lisp\",elisp:\"lisp\",\"emacs-lisp\":\"lisp\",md:\"markdown\",moon:\"moonscript\",n4jsd:\"n4js\",nani:\"naniscript\",objc:\"objectivec\",objectpascal:\"pascal\",px:\"pcaxis\",pcode:\"peoplecode\",pq:\"powerquery\",mscript:\"powerquery\",pbfasm:\"purebasic\",purs:\"purescript\",py:\"python\",rkt:\"racket\",rpy:\"renpy\",robot:\"robotframework\",rb:\"ruby\",\"sh-session\":\"shell-session\",shellsession:\"shell-session\",smlnj:\"sml\",sol:\"solidity\",sln:\"solution-file\",rq:\"sparql\",t4:\"t4-cs\",trig:\"turtle\",ts:\"typescript\",tsconfig:\"typoscript\",uscript:\"unrealscript\",uc:\"unrealscript\",vb:\"visual-basic\",vba:\"visual-basic\",xeoracube:\"xeora\",yml:\"yaml\"},p={},e=\"components/\",a=Prism.util.currentScript();if(a){var r=/\\bplugins\\/autoloader\\/prism-autoloader\\.(?:min\\.)?js(?:\\?[^\\r\\n/]*)?$/i,s=/(^|\\/)[\\w-]+\\.(?:min\\.)?js(?:\\?[^\\r\\n/]*)?$/i,t=a.getAttribute(\"data-autoloader-path\");if(null!=t)e=t.trim().replace(/\\/?$/,\"/\");else{var i=a.src;r.test(i)?e=i.replace(r,\"components/\"):s.test(i)&&(e=i.replace(s,\"$1components/\"))}}var o=Prism.plugins.autoloader={languages_path:e,use_minified:!0,loadLanguages:m};Prism.hooks.add(\"complete\",function(e){var a=e.element,r=e.language;if(a&&r&&\"none\"!==r){var s=function(e){var a=(e.getAttribute(\"data-dependencies\")||\"\").trim();if(!a){var r=e.parentElement;r&&\"pre\"===r.tagName.toLowerCase()&&(a=(r.getAttribute(\"data-dependencies\")||\"\").trim())}return a?a.split(/\\s*,\\s*/g):[]}(a);/^diff-./i.test(r)?(s.push(\"diff\"),s.push(r.substr(\"diff-\".length))):s.push(r),s.every(u)||m(s,function(){Prism.highlightElement(a)})}})}function u(e){if(0<=e.indexOf(\"!\"))return!1;if((e=n[e]||e)in Prism.languages)return!0;var a=p[e];return a&&!a.error&&!1===a.loading}function m(e,a,r){\"string\"==typeof e&&(e=[e]);var s=e.length,t=0,i=!1;function c(){i||++t===s&&a&&a(e)}0!==s?e.forEach(function(e){!function(a,r,s){var t=0<=a.indexOf(\"!\");function e(){var e=p[a];e||(e=p[a]={callbacks:[]}),e.callbacks.push({success:r,error:s}),!t&&u(a)?k(a,\"success\"):!t&&e.error?k(a,\"error\"):!t&&e.loading||(e.loading=!0,e.error=!1,function(e,a,r){var s=document.createElement(\"script\");s.src=e,s.async=!0,s.onload=function(){document.body.removeChild(s),a&&a()},s.onerror=function(){document.body.removeChild(s),r&&r()},document.body.appendChild(s)}(function(e){return o.languages_path+\"prism-\"+e+(o.use_minified?\".min\":\"\")+\".js\"}(a),function(){e.loading=!1,k(a,\"success\")},function(){e.loading=!1,e.error=!0,k(a,\"error\")}))}a=a.replace(\"!\",\"\"),a=n[a]||a;var i=l[a];i&&i.length?m(i,e,s):e()}(e,c,function(){i||(i=!0,r&&r(e))})}):a&&setTimeout(a,0)}function k(e,a){if(p[e]){for(var r=p[e].callbacks,s=0,t=r.length;s<t;s++){var i=r[s][a];i&&setTimeout(i,0)}r.length=0}}}();"
                ]
            }
        },
        "command-line": {
            "index.html": {},
            "prism-command-line.css": {},
            "prism-command-line.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar CLASS_PATTERN = /(?:^|\\s)command-line(?:\\s|$)/;",
                    "\tvar PROMPT_CLASS = 'command-line-prompt';",
                    "",
                    "\t/** @type {(str: string, prefix: string) => boolean} */",
                    "\tvar startsWith = \"\".startsWith",
                    "\t\t? function (s, p) { return s.startsWith(p); }",
                    "\t\t: function (s, p) { return s.indexOf(p) === 0; };",
                    "",
                    "\t/**",
                    "\t * Repeats the given string some number of times.",
                    "\t *",
                    "\t * This is just a polyfill for `String.prototype.repeat`.",
                    "\t *",
                    "\t * @param {string} str",
                    "\t * @param {number} times",
                    "\t * @returns {string}",
                    "\t */",
                    "\tfunction repeat(str, times) {",
                    "\t\tvar s = \"\";",
                    "\t\tfor (var i = 0; i < times; i++) {",
                    "\t\t\ts += str;",
                    "\t\t}",
                    "\t\treturn s;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Returns the command line info object from the given hook environment.",
                    "\t *",
                    "\t * @param {any} env",
                    "\t * @returns {CommandLineInfo}",
                    "\t *",
                    "\t * @typedef CommandLineInfo",
                    "\t * @property {boolean} [complete]",
                    "\t * @property {number} [numberOfLines]",
                    "\t * @property {string[]} [outputLines]",
                    "\t */",
                    "\tfunction getCommandLineInfo(env) {",
                    "\t\tvar vars = env.vars = env.vars || {};",
                    "\t\treturn vars['command-line'] = vars['command-line'] || {};",
                    "\t}",
                    "",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\tvar commandLine = getCommandLineInfo(env);",
                    "",
                    "\t\tif (commandLine.complete || !env.code) {",
                    "\t\t\tcommandLine.complete = true;",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Works only for <code> wrapped inside <pre> (not inline).",
                    "\t\tvar pre = env.element.parentElement;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName) || // Abort only if neither the <pre> nor the <code> have the class",
                    "\t\t\t(!CLASS_PATTERN.test(pre.className) && !CLASS_PATTERN.test(env.element.className))) {",
                    "\t\t\tcommandLine.complete = true;",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// The element might be highlighted multiple times, so we just remove the previous prompt",
                    "\t\tvar existingPrompt = env.element.querySelector('.' + PROMPT_CLASS);",
                    "\t\tif (existingPrompt) {",
                    "\t\t\texistingPrompt.remove();",
                    "\t\t}",
                    "",
                    "\t\tvar codeLines = env.code.split('\\n');",
                    "\t\tcommandLine.numberOfLines = codeLines.length;",
                    "\t\t/** @type {string[]} */",
                    "\t\tvar outputLines = commandLine.outputLines = [];",
                    "",
                    "\t\tvar outputSections = pre.getAttribute('data-output');",
                    "\t\tvar outputFilter = pre.getAttribute('data-filter-output');",
                    "\t\tif (outputSections !== null) { // The user specified the output lines. -- cwells",
                    "\t\t\toutputSections.split(',').forEach(function (section) {",
                    "\t\t\t\tvar range = section.split('-');",
                    "\t\t\t\tvar outputStart = parseInt(range[0], 10);",
                    "\t\t\t\tvar outputEnd = range.length === 2 ? parseInt(range[1], 10) : outputStart;",
                    "",
                    "\t\t\t\tif (!isNaN(outputStart) && !isNaN(outputEnd)) {",
                    "\t\t\t\t\tif (outputStart < 1) {",
                    "\t\t\t\t\t\toutputStart = 1;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tif (outputEnd > codeLines.length) {",
                    "\t\t\t\t\t\toutputEnd = codeLines.length;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\t// Convert start and end to 0-based to simplify the arrays. -- cwells",
                    "\t\t\t\t\toutputStart--;",
                    "\t\t\t\t\toutputEnd--;",
                    "\t\t\t\t\t// Save the output line in an array and clear it in the code so it's not highlighted. -- cwells",
                    "\t\t\t\t\tfor (var j = outputStart; j <= outputEnd; j++) {",
                    "\t\t\t\t\t\toutputLines[j] = codeLines[j];",
                    "\t\t\t\t\t\tcodeLines[j] = '';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "\t\t} else if (outputFilter) { // Treat lines beginning with this string as output. -- cwells",
                    "\t\t\tfor (var i = 0; i < codeLines.length; i++) {",
                    "\t\t\t\tif (startsWith(codeLines[i], outputFilter)) { // This line is output. -- cwells",
                    "\t\t\t\t\toutputLines[i] = codeLines[i].slice(outputFilter.length);",
                    "\t\t\t\t\tcodeLines[i] = '';",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tenv.code = codeLines.join('\\n');",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('before-insert', function (env) {",
                    "\t\tvar commandLine = getCommandLineInfo(env);",
                    "",
                    "\t\tif (commandLine.complete) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Reinsert the output lines into the highlighted code. -- cwells",
                    "\t\tvar codeLines = env.highlightedCode.split('\\n');",
                    "\t\tvar outputLines = commandLine.outputLines || [];",
                    "\t\tfor (var i = 0, l = outputLines.length; i < l; i++) {",
                    "\t\t\tif (outputLines.hasOwnProperty(i)) {",
                    "\t\t\t\tcodeLines[i] = outputLines[i];",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\tenv.highlightedCode = codeLines.join('\\n');",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "\t\tvar commandLine = getCommandLineInfo(env);",
                    "",
                    "\t\tif (commandLine.complete) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar pre = env.element.parentElement;",
                    "\t\tif (CLASS_PATTERN.test(env.element.className)) { // Remove the class \"command-line\" from the <code>",
                    "\t\t\tenv.element.className = env.element.className.replace(CLASS_PATTERN, ' ');",
                    "\t\t}",
                    "\t\tif (!CLASS_PATTERN.test(pre.className)) { // Add the class \"command-line\" to the <pre>",
                    "\t\t\tpre.className += ' command-line';",
                    "\t\t}",
                    "",
                    "\t\tfunction getAttribute(key, defaultValue) {",
                    "\t\t\treturn (pre.getAttribute(key) || defaultValue).replace(/\"/g, '&quot');",
                    "\t\t}",
                    "",
                    "\t\t// Create the \"rows\" that will become the command-line prompts. -- cwells",
                    "\t\tvar promptLines;",
                    "\t\tvar rowCount = commandLine.numberOfLines || 0;",
                    "\t\tvar promptText = getAttribute('data-prompt', '');",
                    "\t\tif (promptText !== '') {",
                    "\t\t\tpromptLines = repeat('<span data-prompt=\"' + promptText + '\"></span>', rowCount);",
                    "\t\t} else {",
                    "\t\t\tvar user = getAttribute('data-user', 'user');",
                    "\t\t\tvar host = getAttribute('data-host', 'localhost');",
                    "\t\t\tpromptLines = repeat('<span data-user=\"' + user + '\" data-host=\"' + host + '\"></span>', rowCount);",
                    "\t\t}",
                    "",
                    "\t\t// Create the wrapper element. -- cwells",
                    "\t\tvar prompt = document.createElement('span');",
                    "\t\tprompt.className = PROMPT_CLASS;",
                    "\t\tprompt.innerHTML = promptLines;",
                    "",
                    "\t\t// Remove the prompt from the output lines. -- cwells",
                    "\t\tvar outputLines = commandLine.outputLines || [];",
                    "\t\tfor (var i = 0, l = outputLines.length; i < l; i++) {",
                    "\t\t\tif (outputLines.hasOwnProperty(i)) {",
                    "\t\t\t\tvar node = prompt.children[i];",
                    "\t\t\t\tnode.removeAttribute('data-user');",
                    "\t\t\t\tnode.removeAttribute('data-host');",
                    "\t\t\t\tnode.removeAttribute('data-prompt');",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tenv.element.insertBefore(prompt, env.element.firstChild);",
                    "\t\tcommandLine.complete = true;",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-command-line.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var f=/(?:^|\\s)command-line(?:\\s|$)/,p=\"command-line-prompt\",m=\"\".startsWith?function(e,t){return e.startsWith(t)}:function(e,t){return 0===e.indexOf(t)};Prism.hooks.add(\"before-highlight\",function(e){var t=h(e);if(!t.complete&&e.code){var n=e.element.parentElement;if(n&&/pre/i.test(n.nodeName)&&(f.test(n.className)||f.test(e.element.className))){var a=e.element.querySelector(\".\"+p);a&&a.remove();var s=e.code.split(\"\\n\");t.numberOfLines=s.length;var o=t.outputLines=[],r=n.getAttribute(\"data-output\"),i=n.getAttribute(\"data-filter-output\");if(null!==r)r.split(\",\").forEach(function(e){var t=e.split(\"-\"),n=parseInt(t[0],10),a=2===t.length?parseInt(t[1],10):n;if(!isNaN(n)&&!isNaN(a)){n<1&&(n=1),a>s.length&&(a=s.length),a--;for(var r=--n;r<=a;r++)o[r]=s[r],s[r]=\"\"}});else if(i)for(var l=0;l<s.length;l++)m(s[l],i)&&(o[l]=s[l].slice(i.length),s[l]=\"\");e.code=s.join(\"\\n\")}else t.complete=!0}else t.complete=!0}),Prism.hooks.add(\"before-insert\",function(e){var t=h(e);if(!t.complete){for(var n=e.highlightedCode.split(\"\\n\"),a=t.outputLines||[],r=0,s=a.length;r<s;r++)a.hasOwnProperty(r)&&(n[r]=a[r]);e.highlightedCode=n.join(\"\\n\")}}),Prism.hooks.add(\"complete\",function(e){var t=h(e);if(!t.complete){var n,a=e.element.parentElement;f.test(e.element.className)&&(e.element.className=e.element.className.replace(f,\" \")),f.test(a.className)||(a.className+=\" command-line\");var r=t.numberOfLines||0,s=u(\"data-prompt\",\"\");if(\"\"!==s)n=d('<span data-prompt=\"'+s+'\"></span>',r);else n=d('<span data-user=\"'+u(\"data-user\",\"user\")+'\" data-host=\"'+u(\"data-host\",\"localhost\")+'\"></span>',r);var o=document.createElement(\"span\");o.className=p,o.innerHTML=n;for(var i=t.outputLines||[],l=0,m=i.length;l<m;l++)if(i.hasOwnProperty(l)){var c=o.children[l];c.removeAttribute(\"data-user\"),c.removeAttribute(\"data-host\"),c.removeAttribute(\"data-prompt\")}e.element.insertBefore(o,e.element.firstChild),t.complete=!0}function u(e,t){return(a.getAttribute(e)||t).replace(/\"/g,\"&quot\")}})}function d(e,t){for(var n=\"\",a=0;a<t;a++)n+=e;return n}function h(e){var t=e.vars=e.vars||{};return t[\"command-line\"]=t[\"command-line\"]||{}}}();"
                ]
            }
        },
        "copy-to-clipboard": {
            "index.html": {},
            "prism-copy-to-clipboard.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tif (!Prism.plugins.toolbar) {",
                    "\t\tconsole.warn('Copy to Clipboard plugin loaded before Toolbar plugin.');",
                    "",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar ClipboardJS = window.ClipboardJS || undefined;",
                    "",
                    "\tif (!ClipboardJS && typeof require === 'function') {",
                    "\t\tClipboardJS = require('clipboard');",
                    "\t}",
                    "",
                    "\tvar callbacks = [];",
                    "",
                    "\tif (!ClipboardJS) {",
                    "\t\tvar script = document.createElement('script');",
                    "\t\tvar head = document.querySelector('head');",
                    "",
                    "\t\tscript.onload = function() {",
                    "\t\t\tClipboardJS = window.ClipboardJS;",
                    "",
                    "\t\t\tif (ClipboardJS) {",
                    "\t\t\t\twhile (callbacks.length) {",
                    "\t\t\t\t\tcallbacks.pop()();",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t};",
                    "",
                    "\t\tscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js';",
                    "\t\thead.appendChild(script);",
                    "\t}",
                    "",
                    "\tPrism.plugins.toolbar.registerButton('copy-to-clipboard', function (env) {",
                    "\t\tvar linkCopy = document.createElement('button');",
                    "\t\tlinkCopy.textContent = 'Copy';",
                    "\t\tlinkCopy.setAttribute('type', 'button');",
                    "",
                    "\t\tvar element = env.element;",
                    "",
                    "\t\tif (!ClipboardJS) {",
                    "\t\t\tcallbacks.push(registerClipboard);",
                    "\t\t} else {",
                    "\t\t\tregisterClipboard();",
                    "\t\t}",
                    "",
                    "\t\treturn linkCopy;",
                    "",
                    "\t\tfunction registerClipboard() {",
                    "\t\t\tvar clip = new ClipboardJS(linkCopy, {",
                    "\t\t\t\t'text': function () {",
                    "\t\t\t\t\treturn element.textContent;",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "",
                    "\t\t\tclip.on('success', function() {",
                    "\t\t\t\tlinkCopy.textContent = 'Copied!';",
                    "",
                    "\t\t\t\tresetText();",
                    "\t\t\t});",
                    "\t\t\tclip.on('error', function () {",
                    "\t\t\t\tlinkCopy.textContent = 'Press Ctrl+C to copy';",
                    "",
                    "\t\t\t\tresetText();",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t\tfunction resetText() {",
                    "\t\t\tsetTimeout(function () {",
                    "\t\t\t\tlinkCopy.textContent = 'Copy';",
                    "\t\t\t}, 5000);",
                    "\t\t}",
                    "\t});",
                    "})();"
                ]
            },
            "prism-copy-to-clipboard.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document)if(Prism.plugins.toolbar){var i=window.ClipboardJS||void 0;i||\"function\"!=typeof require||(i=require(\"clipboard\"));var u=[];if(!i){var t=document.createElement(\"script\"),e=document.querySelector(\"head\");t.onload=function(){if(i=window.ClipboardJS)for(;u.length;)u.pop()()},t.src=\"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js\",e.appendChild(t)}Prism.plugins.toolbar.registerButton(\"copy-to-clipboard\",function(t){var e=document.createElement(\"button\");e.textContent=\"Copy\",e.setAttribute(\"type\",\"button\");var o=t.element;return i?n():u.push(n),e;function n(){var t=new i(e,{text:function(){return o.textContent}});t.on(\"success\",function(){e.textContent=\"Copied!\",r()}),t.on(\"error\",function(){e.textContent=\"Press Ctrl+C to copy\",r()})}function r(){setTimeout(function(){e.textContent=\"Copy\"},5e3)}})}else console.warn(\"Copy to Clipboard plugin loaded before Toolbar plugin.\")}();"
                ]
            }
        },
        "custom-class": {
            "index.html": {},
            "prism-custom-class.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (",
                    "\t\t(typeof self === 'undefined' || !self.Prism) &&",
                    "\t\t(typeof global === 'undefined' || !global.Prism)",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * @callback ClassMapper",
                    "\t * @param {string} className",
                    "\t * @param {string} language",
                    "\t * @returns {string}",
                    "\t *",
                    "\t * @callback ClassAdder",
                    "\t * @param {ClassAdderEnvironment} env",
                    "\t * @returns {undefined | string | string[]}",
                    "\t *",
                    "\t * @typedef ClassAdderEnvironment",
                    "\t * @property {string} language",
                    "\t * @property {string} type",
                    "\t * @property {string} content",
                    "\t */",
                    "",
                    "\t// options",
                    "",
                    "\t/** @type {ClassAdder | undefined} */",
                    "\tvar adder;",
                    "\t/** @type {ClassMapper | undefined} */",
                    "\tvar mapper;",
                    "\t/** @type {string} */",
                    "\tvar prefixString = '';",
                    "",
                    "",
                    "\tPrism.plugins.customClass = {",
                    "\t\t/**",
                    "\t\t * Sets the function which can be used to add custom aliases to any token.",
                    "\t\t *",
                    "\t\t * @param {ClassAdder} classAdder",
                    "\t\t */",
                    "\t\tadd: function (classAdder) {",
                    "\t\t\tadder = classAdder;",
                    "\t\t},",
                    "\t\t/**",
                    "\t\t * Maps all class names using the given object or map function.",
                    "\t\t *",
                    "\t\t * This does not affect the prefix.",
                    "\t\t *",
                    "\t\t * @param {Object<string, string> | ClassMapper} classMapper",
                    "\t\t */",
                    "\t\tmap: function map(classMapper) {",
                    "\t\t\tif (typeof classMapper === 'function') {",
                    "\t\t\t\tmapper = classMapper;",
                    "\t\t\t} else {",
                    "\t\t\t\tmapper = function (className) {",
                    "\t\t\t\t\treturn classMapper[className] || className;",
                    "\t\t\t\t};",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t/**",
                    "\t\t * Adds the given prefix to all class names.",
                    "\t\t *",
                    "\t\t * @param {string} string",
                    "\t\t */",
                    "\t\tprefix: function prefix(string) {",
                    "\t\t\tprefixString = string || '';",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tPrism.hooks.add('wrap', function (env) {",
                    "\t\tif (adder) {",
                    "\t\t\tvar result = adder({",
                    "\t\t\t\tcontent: env.content,",
                    "\t\t\t\ttype: env.type,",
                    "\t\t\t\tlanguage: env.language",
                    "\t\t\t});",
                    "",
                    "\t\t\tif (Array.isArray(result)) {",
                    "\t\t\t\tenv.classes.push.apply(env.classes, result);",
                    "\t\t\t} else if (result) {",
                    "\t\t\t\tenv.classes.push(result);",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tif (!mapper && !prefixString) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tenv.classes = env.classes.map(function (c) {",
                    "\t\t\treturn prefixString + (mapper ? mapper(c, env.language) : c);",
                    "\t\t});",
                    "\t});",
                    "",
                    "})();"
                ]
            },
            "prism-custom-class.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism||\"undefined\"!=typeof global&&global.Prism){var a,e,t=\"\";Prism.plugins.customClass={add:function(n){a=n},map:function(s){e=\"function\"==typeof s?s:function(n){return s[n]||n}},prefix:function(n){t=n||\"\"}},Prism.hooks.add(\"wrap\",function(s){if(a){var n=a({content:s.content,type:s.type,language:s.language});Array.isArray(n)?s.classes.push.apply(s.classes,n):n&&s.classes.push(n)}(e||t)&&(s.classes=s.classes.map(function(n){return t+(e?e(n,s.language):n)}))})}}();"
                ]
            }
        },
        "data-uri-highlight": {
            "index.html": {},
            "prism-data-uri-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\ttypeof global !== 'undefined' && !global.Prism",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar autoLinkerProcess = function (grammar) {",
                    "\t\tif (Prism.plugins.autolinker) {",
                    "\t\t\tPrism.plugins.autolinker.processGrammar(grammar);",
                    "\t\t}",
                    "\t\treturn grammar;",
                    "\t};",
                    "\tvar dataURI = {",
                    "\t\tpattern: /(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,",
                    "\t\tlookbehind: true,",
                    "\t\tinside: {",
                    "\t\t\t'language-css': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-javascript': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-json': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-markup': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t// Tokens that may contain URLs",
                    "\tvar candidates = ['url', 'attr-value', 'string'];",
                    "",
                    "\tPrism.plugins.dataURIHighlight = {",
                    "\t\tprocessGrammar: function (grammar) {",
                    "\t\t\t// Abort if grammar has already been processed",
                    "\t\t\tif (!grammar || grammar['data-uri']) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tPrism.languages.DFS(grammar, function (key, def, type) {",
                    "\t\t\t\tif (candidates.indexOf(type) > -1 && !Array.isArray(def)) {",
                    "\t\t\t\t\tif (!def.pattern) {",
                    "\t\t\t\t\t\tdef = this[key] = {",
                    "\t\t\t\t\t\t\tpattern: def",
                    "\t\t\t\t\t\t};",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tdef.inside = def.inside || {};",
                    "",
                    "\t\t\t\t\tif (type == 'attr-value') {",
                    "\t\t\t\t\t\tPrism.languages.insertBefore('inside', def.inside['url-link'] ? 'url-link' : 'punctuation', {",
                    "\t\t\t\t\t\t\t'data-uri': dataURI",
                    "\t\t\t\t\t\t}, def);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\tif (def.inside['url-link']) {",
                    "\t\t\t\t\t\t\tPrism.languages.insertBefore('inside', 'url-link', {",
                    "\t\t\t\t\t\t\t\t'data-uri': dataURI",
                    "\t\t\t\t\t\t\t}, def);",
                    "\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\tdef.inside['data-uri'] = dataURI;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "\t\t\tgrammar['data-uri'] = dataURI;",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\t// Prepare the needed grammars for this code block",
                    "\t\tif (dataURI.pattern.test(env.code)) {",
                    "\t\t\tfor (var p in dataURI.inside) {",
                    "\t\t\t\tif (dataURI.inside.hasOwnProperty(p)) {",
                    "\t\t\t\t\tif (!dataURI.inside[p].inside && dataURI.inside[p].pattern.test(env.code)) {",
                    "\t\t\t\t\t\tvar lang = p.match(/^language-(.+)/)[1];",
                    "\t\t\t\t\t\tif (Prism.languages[lang]) {",
                    "\t\t\t\t\t\t\tdataURI.inside[p].inside = {",
                    "\t\t\t\t\t\t\t\trest: autoLinkerProcess(Prism.languages[lang])",
                    "\t\t\t\t\t\t\t};",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tPrism.plugins.dataURIHighlight.processGrammar(env.grammar);",
                    "\t});",
                    "}());"
                ]
            },
            "prism-data-uri-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var r={pattern:/(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,lookbehind:!0,inside:{\"language-css\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,lookbehind:!0},\"language-javascript\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,lookbehind:!0},\"language-json\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,lookbehind:!0},\"language-markup\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,lookbehind:!0}}},e=[\"url\",\"attr-value\",\"string\"];Prism.plugins.dataURIHighlight={processGrammar:function(i){i&&!i[\"data-uri\"]&&(Prism.languages.DFS(i,function(i,a,n){-1<e.indexOf(n)&&!Array.isArray(a)&&(a.pattern||(a=this[i]={pattern:a}),a.inside=a.inside||{},\"attr-value\"==n?Prism.languages.insertBefore(\"inside\",a.inside[\"url-link\"]?\"url-link\":\"punctuation\",{\"data-uri\":r},a):a.inside[\"url-link\"]?Prism.languages.insertBefore(\"inside\",\"url-link\",{\"data-uri\":r},a):a.inside[\"data-uri\"]=r)}),i[\"data-uri\"]=r)}},Prism.hooks.add(\"before-highlight\",function(i){if(r.pattern.test(i.code))for(var a in r.inside)if(r.inside.hasOwnProperty(a)&&!r.inside[a].inside&&r.inside[a].pattern.test(i.code)){var n=a.match(/^language-(.+)/)[1];Prism.languages[n]&&(r.inside[a].inside={rest:(e=Prism.languages[n],Prism.plugins.autolinker&&Prism.plugins.autolinker.processGrammar(e),e)})}var e;Prism.plugins.dataURIHighlight.processGrammar(i.grammar)})}}();"
                ]
            }
        },
        "diff-highlight": {
            "index.html": {},
            "prism-diff-highlight.css": {},
            "prism-diff-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof Prism === 'undefined') {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "",
                    "\tvar LANGUAGE_REGEX = /^diff-([\\w-]+)/i;",
                    "\tvar HTML_TAG = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/gi;",
                    "\t//this will match a line plus the line break while ignoring the line breaks HTML tags may contain.",
                    "\tvar HTML_LINE = RegExp(/(?:__|[^\\r\\n<])*(?:\\r\\n?|\\n|(?:__|[^\\r\\n<])(?![^\\r\\n]))/.source.replace(/__/g, function () { return HTML_TAG.source; }), 'gi');",
                    "",
                    "\tvar warningLogged = false;",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\tvar lang = env.language;",
                    "\t\tif (LANGUAGE_REGEX.test(lang) && !env.grammar) {",
                    "\t\t\tenv.grammar = Prism.languages[lang] = Prism.languages.diff;",
                    "\t\t}",
                    "\t});",
                    "\tPrism.hooks.add('before-tokenize', function (env) {",
                    "\t\tif (!warningLogged && !Prism.languages.diff && !Prism.plugins.autoloader) {",
                    "\t\t\twarningLogged = true;",
                    "\t\t\tconsole.warn(\"Prism's Diff Highlight plugin requires the Diff language definition (prism-diff.js).\" +",
                    "\t\t\t\t\"Make sure the language definition is loaded or use Prism's Autoloader plugin.\");",
                    "\t\t}",
                    "",
                    "\t\tvar lang = env.language;",
                    "\t\tif (LANGUAGE_REGEX.test(lang) && !Prism.languages[lang]) {",
                    "\t\t\tPrism.languages[lang] = Prism.languages.diff;",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('wrap', function (env) {",
                    "\t\tvar diffLanguage, diffGrammar;",
                    "",
                    "\t\tif (env.language !== 'diff') {",
                    "\t\t\tvar langMatch = LANGUAGE_REGEX.exec(env.language);",
                    "\t\t\tif (!langMatch) {",
                    "\t\t\t\treturn; // not a language specific diff",
                    "\t\t\t}",
                    "",
                    "\t\t\tdiffLanguage = langMatch[1];",
                    "\t\t\tdiffGrammar = Prism.languages[diffLanguage];",
                    "\t\t}",
                    "",
                    "\t\tvar PREFIXES = Prism.languages.diff && Prism.languages.diff.PREFIXES;",
                    "",
                    "\t\t// one of the diff tokens without any nested tokens",
                    "\t\tif (PREFIXES && env.type in PREFIXES) {",
                    "\t\t\t/** @type {string} */",
                    "\t\t\tvar content = env.content.replace(HTML_TAG, ''); // remove all HTML tags",
                    "",
                    "\t\t\t/** @type {string} */",
                    "\t\t\tvar decoded = content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');",
                    "",
                    "\t\t\t// remove any one-character prefix",
                    "\t\t\tvar code = decoded.replace(/(^|[\\r\\n])./g, '$1');",
                    "",
                    "\t\t\t// highlight, if possible",
                    "\t\t\tvar highlighted;",
                    "\t\t\tif (diffGrammar) {",
                    "\t\t\t\thighlighted = Prism.highlight(code, diffGrammar, diffLanguage);",
                    "\t\t\t} else {",
                    "\t\t\t\thighlighted = Prism.util.encode(code);",
                    "\t\t\t}",
                    "",
                    "\t\t\t// get the HTML source of the prefix token",
                    "\t\t\tvar prefixToken = new Prism.Token('prefix', PREFIXES[env.type], [/\\w+/.exec(env.type)[0]]);",
                    "\t\t\tvar prefix = Prism.Token.stringify(prefixToken, env.language);",
                    "",
                    "\t\t\t// add prefix",
                    "\t\t\tvar lines = [], m;",
                    "\t\t\tHTML_LINE.lastIndex = 0;",
                    "\t\t\twhile (m = HTML_LINE.exec(highlighted)) {",
                    "\t\t\t\tlines.push(prefix + m[0]);",
                    "\t\t\t}",
                    "\t\t\tif (/(?:^|[\\r\\n]).$/.test(decoded)) {",
                    "\t\t\t\t// because both \"+a\\n+\" and \"+a\\n\" will map to \"a\\n\" after the line prefixes are removed",
                    "\t\t\t\tlines.push(prefix);",
                    "\t\t\t}",
                    "\t\t\tenv.content = lines.join('');",
                    "",
                    "\t\t\tif (diffGrammar) {",
                    "\t\t\t\tenv.classes.push('language-' + diffLanguage);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-diff-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof Prism){var m=/^diff-([\\w-]+)/i,d=/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/gi,c=RegExp(\"(?:__|[^\\r\\n<])*(?:\\r\\n?|\\n|(?:__|[^\\r\\n<])(?![^\\r\\n]))\".replace(/__/g,function(){return d.source}),\"gi\"),a=!1;Prism.hooks.add(\"before-sanity-check\",function(e){var i=e.language;m.test(i)&&!e.grammar&&(e.grammar=Prism.languages[i]=Prism.languages.diff)}),Prism.hooks.add(\"before-tokenize\",function(e){a||Prism.languages.diff||Prism.plugins.autoloader||(a=!0,console.warn(\"Prism's Diff Highlight plugin requires the Diff language definition (prism-diff.js).Make sure the language definition is loaded or use Prism's Autoloader plugin.\"));var i=e.language;m.test(i)&&!Prism.languages[i]&&(Prism.languages[i]=Prism.languages.diff)}),Prism.hooks.add(\"wrap\",function(e){var i,a;if(\"diff\"!==e.language){var s=m.exec(e.language);if(!s)return;i=s[1],a=Prism.languages[i]}var r=Prism.languages.diff&&Prism.languages.diff.PREFIXES;if(r&&e.type in r){var n,g=e.content.replace(d,\"\").replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\"),f=g.replace(/(^|[\\r\\n])./g,\"$1\");n=a?Prism.highlight(f,a,i):Prism.util.encode(f);var u,l=new Prism.Token(\"prefix\",r[e.type],[/\\w+/.exec(e.type)[0]]),t=Prism.Token.stringify(l,e.language),o=[];for(c.lastIndex=0;u=c.exec(n);)o.push(t+u[0]);/(?:^|[\\r\\n]).$/.test(g)&&o.push(t),e.content=o.join(\"\"),a&&e.classes.push(\"language-\"+i)}})}}();"
                ]
            }
        },
        "download-button": {
            "index.html": {},
            "prism-download-button.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tPrism.plugins.toolbar.registerButton('download-file', function (env) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tvar src = pre.getAttribute('data-src');",
                    "\t\tvar a = document.createElement('a');",
                    "\t\ta.textContent = pre.getAttribute('data-download-link-label') || 'Download';",
                    "\t\ta.setAttribute('download', '');",
                    "\t\ta.href = src;",
                    "\t\treturn a;",
                    "\t});",
                    "",
                    "})();"
                ]
            },
            "prism-download-button.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&self.Prism&&self.document&&document.querySelector&&Prism.plugins.toolbar.registerButton(\"download-file\",function(t){var e=t.element.parentNode;if(e&&/pre/i.test(e.nodeName)&&e.hasAttribute(\"data-src\")&&e.hasAttribute(\"data-download-link\")){var a=e.getAttribute(\"data-src\"),n=document.createElement(\"a\");return n.textContent=e.getAttribute(\"data-download-link-label\")||\"Download\",n.setAttribute(\"download\",\"\"),n.href=a,n}});"
                ]
            }
        },
        "file-highlight": {
            "index.html": {},
            "prism-file-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill",
                    "\tif (!Element.prototype.matches) {",
                    "\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;",
                    "\t}",
                    "",
                    "\tvar Prism = window.Prism;",
                    "",
                    "\tvar LOADING_MESSAGE = 'Loading…';",
                    "\tvar FAILURE_MESSAGE = function (status, message) {",
                    "\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;",
                    "\t};",
                    "\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';",
                    "",
                    "\tvar EXTENSIONS = {",
                    "\t\t'js': 'javascript',",
                    "\t\t'py': 'python',",
                    "\t\t'rb': 'ruby',",
                    "\t\t'ps1': 'powershell',",
                    "\t\t'psm1': 'powershell',",
                    "\t\t'sh': 'bash',",
                    "\t\t'bat': 'batch',",
                    "\t\t'h': 'c',",
                    "\t\t'tex': 'latex'",
                    "\t};",
                    "",
                    "\tvar STATUS_ATTR = 'data-src-status';",
                    "\tvar STATUS_LOADING = 'loading';",
                    "\tvar STATUS_LOADED = 'loaded';",
                    "\tvar STATUS_FAILED = 'failed';",
                    "",
                    "\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'",
                    "\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';",
                    "",
                    "\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
                    "",
                    "\t/**",
                    "\t * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.",
                    "\t *",
                    "\t * @param {HTMLElement} element",
                    "\t * @param {string} language",
                    "\t * @returns {void}",
                    "\t */",
                    "\tfunction setLanguageClass(element, language) {",
                    "\t\tvar className = element.className;",
                    "\t\tclassName = className.replace(lang, ' ') + ' language-' + language;",
                    "\t\telement.className = className.replace(/\\s+/g, ' ').trim();",
                    "\t}",
                    "",
                    "",
                    "\tPrism.hooks.add('before-highlightall', function (env) {",
                    "\t\tenv.selector += ', ' + SELECTOR;",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);",
                    "\t\tif (pre.matches(SELECTOR)) {",
                    "\t\t\tenv.code = ''; // fast-path the whole thing and go to complete",
                    "",
                    "\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading",
                    "",
                    "\t\t\t// add code element with loading message",
                    "\t\t\tvar code = pre.appendChild(document.createElement('CODE'));",
                    "\t\t\tcode.textContent = LOADING_MESSAGE;",
                    "",
                    "\t\t\tvar src = pre.getAttribute('data-src');",
                    "",
                    "\t\t\tvar language = env.language;",
                    "\t\t\tif (language === 'none') {",
                    "\t\t\t\t// the language might be 'none' because there is no language set;",
                    "\t\t\t\t// in this case, we want to use the extension as the language",
                    "\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];",
                    "\t\t\t\tlanguage = EXTENSIONS[extension] || extension;",
                    "\t\t\t}",
                    "",
                    "\t\t\t// set language classes",
                    "\t\t\tsetLanguageClass(code, language);",
                    "\t\t\tsetLanguageClass(pre, language);",
                    "",
                    "\t\t\t// preload the language",
                    "\t\t\tvar autoloader = Prism.plugins.autoloader;",
                    "\t\t\tif (autoloader) {",
                    "\t\t\t\tautoloader.loadLanguages(language);",
                    "\t\t\t}",
                    "",
                    "\t\t\t// load file",
                    "\t\t\tvar xhr = new XMLHttpRequest();",
                    "\t\t\txhr.open('GET', src, true);",
                    "\t\t\txhr.onreadystatechange = function () {",
                    "\t\t\t\tif (xhr.readyState == 4) {",
                    "\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
                    "\t\t\t\t\t\t// mark as loaded",
                    "\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);",
                    "",
                    "\t\t\t\t\t\t// highlight code",
                    "\t\t\t\t\t\tcode.textContent = xhr.responseText;",
                    "\t\t\t\t\t\tPrism.highlightElement(code);",
                    "",
                    "\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t// mark as failed",
                    "\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);",
                    "",
                    "\t\t\t\t\t\tif (xhr.status >= 400) {",
                    "\t\t\t\t\t\t\tcode.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);",
                    "\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\tcode.textContent = FAILURE_EMPTY_MESSAGE;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t};",
                    "\t\t\txhr.send(null);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tPrism.plugins.fileHighlight = {",
                    "\t\t/**",
                    "\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.",
                    "\t\t *",
                    "\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.",
                    "\t\t *",
                    "\t\t * @param {ParentNode} [container=document]",
                    "\t\t */",
                    "\t\thighlight: function highlight(container) {",
                    "\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);",
                    "",
                    "\t\t\tfor (var i = 0, element; element = elements[i++];) {",
                    "\t\t\t\tPrism.highlightElement(element);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tvar logged = false;",
                    "\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */",
                    "\tPrism.fileHighlight = function () {",
                    "\t\tif (!logged) {",
                    "\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');",
                    "\t\t\tlogged = true;",
                    "\t\t}",
                    "\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);",
                    "\t}",
                    "",
                    "})();"
                ]
            },
            "prism-file-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var r=window.Prism,h={js:\"javascript\",py:\"python\",rb:\"ruby\",ps1:\"powershell\",psm1:\"powershell\",sh:\"bash\",bat:\"batch\",h:\"c\",tex:\"latex\"},g=\"data-src-status\",c=\"loading\",u=\"loaded\",p=\"pre[data-src]:not([\"+g+'=\"'+u+'\"]):not(['+g+'=\"'+c+'\"])',i=/\\blang(?:uage)?-([\\w-]+)\\b/i;r.hooks.add(\"before-highlightall\",function(e){e.selector+=\", \"+p}),r.hooks.add(\"before-sanity-check\",function(e){var t=e.element;if(t.matches(p)){e.code=\"\",t.setAttribute(g,c);var n=t.appendChild(document.createElement(\"CODE\"));n.textContent=\"Loading…\";var i=t.getAttribute(\"data-src\"),a=e.language;if(\"none\"===a){var s=(/\\.(\\w+)$/.exec(i)||[,\"none\"])[1];a=h[s]||s}d(n,a),d(t,a);var l=r.plugins.autoloader;l&&l.loadLanguages(a);var o=new XMLHttpRequest;o.open(\"GET\",i,!0),o.onreadystatechange=function(){4==o.readyState&&(o.status<400&&o.responseText?(t.setAttribute(g,u),n.textContent=o.responseText,r.highlightElement(n)):(t.setAttribute(g,\"failed\"),400<=o.status?n.textContent=function(e,t){return\"✖ Error \"+e+\" while fetching file: \"+t}(o.status,o.statusText):n.textContent=\"✖ Error: File does not exist or is empty\"))},o.send(null)}});var e=!(r.plugins.fileHighlight={highlight:function(e){for(var t,n=(e||document).querySelectorAll(p),i=0;t=n[i++];)r.highlightElement(t)}});r.fileHighlight=function(){e||(console.warn(\"Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.\"),e=!0),r.plugins.fileHighlight.highlight.apply(this,arguments)}}function d(e,t){var n=e.className;n=n.replace(i,\" \")+\" language-\"+t,e.className=n.replace(/\\s+/g,\" \").trim()}}();"
                ]
            }
        },
        "filter-highlight-all": {
            "index.html": {},
            "prism-filter-highlight-all.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self !== 'undefined' && !self.Prism) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill",
                    "\tif (!Element.prototype.matches) {",
                    "\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;",
                    "\t}",
                    "",
                    "\tvar script = Prism.util.currentScript();",
                    "",
                    "",
                    "\t/**",
                    "\t * @type {Array<(element: HTMLElement) => boolean>}",
                    "\t */",
                    "\tvar filters = [];",
                    "",
                    "\tvar config = Prism.plugins.filterHighlightAll = {",
                    "",
                    "\t\t/**",
                    "\t\t * Adds a new filter for the elements of `highlightAll` and `highlightAllUnder` such that only elements for",
                    "\t\t * which the given function returns `true` will be highlighted.",
                    "\t\t *",
                    "\t\t * @param {(value: { element: HTMLElement, language: string }) => boolean} condition",
                    "\t\t */",
                    "\t\tadd: function (condition) {",
                    "\t\t\tfilters.push(function (element) {",
                    "\t\t\t\treturn condition({",
                    "\t\t\t\t\telement: element,",
                    "\t\t\t\t\tlanguage: Prism.util.getLanguage(element)",
                    "\t\t\t\t});",
                    "\t\t\t});",
                    "\t\t},",
                    "",
                    "\t\t/**",
                    "\t\t * Adds a new filter for the elements of `highlightAll` and `highlightAllUnder` such that only elements that",
                    "\t\t * match the given CSS selection will be highlighted.",
                    "\t\t *",
                    "\t\t * @param {string} selector",
                    "\t\t */",
                    "\t\taddSelector: function (selector) {",
                    "\t\t\tfilters.push(function (element) {",
                    "\t\t\t\treturn element.matches(selector);",
                    "\t\t\t});",
                    "\t\t},",
                    "",
                    "\t\treject: {",
                    "",
                    "\t\t\t/**",
                    "\t\t\t * Adds a new filter for the elements of `highlightAll` and `highlightAllUnder` such that only elements for",
                    "\t\t\t * which the given function returns `false` will be highlighted.",
                    "\t\t\t *",
                    "\t\t\t * @param {(value: { element: HTMLElement, language: string }) => boolean} condition",
                    "\t\t\t */",
                    "\t\t\tadd: function (condition) {",
                    "\t\t\t\tfilters.push(function (element) {",
                    "\t\t\t\t\treturn !condition({",
                    "\t\t\t\t\t\telement: element,",
                    "\t\t\t\t\t\tlanguage: Prism.util.getLanguage(element)",
                    "\t\t\t\t\t});",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "",
                    "\t\t\t/**",
                    "\t\t\t * Adds a new filter for the elements of `highlightAll` and `highlightAllUnder` such that only elements that do",
                    "\t\t\t * not match the given CSS selection will be highlighted.",
                    "\t\t\t *",
                    "\t\t\t * @param {string} selector",
                    "\t\t\t */",
                    "\t\t\taddSelector: function (selector) {",
                    "\t\t\t\tfilters.push(function (element) {",
                    "\t\t\t\t\treturn !element.matches(selector);",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "",
                    "\t\t},",
                    "",
                    "\t\t/**",
                    "\t\t * Filters the elements of `highlightAll` and `highlightAllUnder` such that only elements with a known language",
                    "\t\t * will be highlighted. All elements with an unset or unknown language will be ignored.",
                    "\t\t *",
                    "\t\t * __Note:__ This will effectively disable the AutoLoader plugin.",
                    "\t\t *",
                    "\t\t * @type {boolean}",
                    "\t\t */",
                    "\t\tfilterKnown: !!script && script.hasAttribute('data-filter-known')",
                    "\t};",
                    "",
                    "\tconfig.add(function filterKnown(env) {",
                    "\t\treturn !config.filterKnown || typeof Prism.languages[env.language] === 'object';",
                    "\t});",
                    "",
                    "\tif (script) {",
                    "\t\tvar attr;",
                    "\t\tif (attr = script.getAttribute('data-filter-selector')) {",
                    "\t\t\tconfig.addSelector(attr);",
                    "\t\t}",
                    "\t\tif (attr = script.getAttribute('data-reject-selector')) {",
                    "\t\t\tconfig.reject.addSelector(attr);",
                    "\t\t}",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Applies all filters to the given element and returns true if and only if every filter returned true on the",
                    "\t * given element.",
                    "\t *",
                    "\t * @param {HTMLElement} element",
                    "\t * @returns {boolean}",
                    "\t */",
                    "\tfunction combinedFilter(element) {",
                    "\t\tfor (var i = 0, l = filters.length; i < l; i++) {",
                    "\t\t\tif (!filters[i](element)) {",
                    "\t\t\t\treturn false;",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn true;",
                    "\t}",
                    "",
                    "\tPrism.hooks.add('before-all-elements-highlight', function (env) {",
                    "\t\tenv.elements = env.elements.filter(combinedFilter);",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-filter-highlight-all.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"==typeof self||self.Prism){Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var e,t=Prism.util.currentScript(),r=[],n=Prism.plugins.filterHighlightAll={add:function(t){r.push(function(e){return t({element:e,language:Prism.util.getLanguage(e)})})},addSelector:function(t){r.push(function(e){return e.matches(t)})},reject:{add:function(t){r.push(function(e){return!t({element:e,language:Prism.util.getLanguage(e)})})},addSelector:function(t){r.push(function(e){return!e.matches(t)})}},filterKnown:!!t&&t.hasAttribute(\"data-filter-known\")};if(n.add(function(e){return!n.filterKnown||\"object\"==typeof Prism.languages[e.language]}),t)(e=t.getAttribute(\"data-filter-selector\"))&&n.addSelector(e),(e=t.getAttribute(\"data-reject-selector\"))&&n.reject.addSelector(e);Prism.hooks.add(\"before-all-elements-highlight\",function(e){e.elements=e.elements.filter(i)})}function i(e){for(var t=0,n=r.length;t<n;t++)if(!r[t](e))return!1;return!0}}();"
                ]
            }
        },
        "highlight-keywords": {
            "index.html": {},
            "prism-highlight-keywords.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif (env.type !== \"keyword\") {",
                    "\t\treturn;",
                    "\t}",
                    "\tenv.classes.push('keyword-' + env.content);",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-highlight-keywords.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&!self.Prism||\"undefined\"!=typeof global&&!global.Prism||Prism.hooks.add(\"wrap\",function(e){\"keyword\"===e.type&&e.classes.push(\"keyword-\"+e.content)});"
                ]
            }
        },
        "inline-color": {
            "index.html": {},
            "prism-inline-color.css": {},
            "prism-inline-color.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || typeof Prism === 'undefined' || typeof document === 'undefined') {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Copied from the markup language definition",
                    "\tvar HTML_TAG = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/g;",
                    "",
                    "\t// a regex to validate hexadecimal colors",
                    "\tvar HEX_COLOR = /^#?((?:[\\da-f]){3,4}|(?:[\\da-f]{2}){3,4})$/i;",
                    "",
                    "\t/**",
                    "\t * Parses the given hexadecimal representation and returns the parsed RGBA color.",
                    "\t *",
                    "\t * If the format of the given string is invalid, `undefined` will be returned.",
                    "\t * Valid formats are: `RGB`, `RGBA`, `RRGGBB`, and `RRGGBBAA`.",
                    "\t *",
                    "\t * Hexadecimal colors are parsed because they are not fully supported by older browsers, so converting them to",
                    "\t * `rgba` functions improves browser compatibility.",
                    "\t *",
                    "\t * @param {string} hex",
                    "\t * @returns {string | undefined}",
                    "\t */",
                    "\tfunction parseHexColor(hex) {",
                    "\t\tvar match = HEX_COLOR.exec(hex);",
                    "\t\tif (!match) {",
                    "\t\t\treturn undefined;",
                    "\t\t}",
                    "\t\thex = match[1]; // removes the leading \"#\"",
                    "",
                    "\t\t// the width and number of channels",
                    "\t\tvar channelWidth = hex.length >= 6 ? 2 : 1;",
                    "\t\tvar channelCount = hex.length / channelWidth;",
                    "",
                    "\t\t// the scale used to normalize 4bit and 8bit values",
                    "\t\tvar scale = channelWidth == 1 ? 1 / 15 : 1 / 255;",
                    "",
                    "\t\t// normalized RGBA channels",
                    "\t\tvar channels = [];",
                    "\t\tfor (var i = 0; i < channelCount; i++) {",
                    "\t\t\tvar int = parseInt(hex.substr(i * channelWidth, channelWidth), 16);",
                    "\t\t\tchannels.push(int * scale);",
                    "\t\t}",
                    "\t\tif (channelCount == 3) {",
                    "\t\t\tchannels.push(1); // add alpha of 100%",
                    "\t\t}",
                    "",
                    "\t\t// output",
                    "\t\tvar rgb = channels.slice(0, 3).map(function (x) {",
                    "\t\t\treturn String(Math.round(x * 255));",
                    "\t\t}).join(',');",
                    "\t\tvar alpha = String(Number(channels[3].toFixed(3))); // easy way to round 3 decimal places",
                    "",
                    "\t\treturn 'rgba(' + rgb + ',' + alpha + ')';",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Validates the given Color using the current browser's internal implementation.",
                    "\t *",
                    "\t * @param {string} color",
                    "\t * @returns {string | undefined}",
                    "\t */",
                    "\tfunction validateColor(color) {",
                    "\t\tvar s = new Option().style;",
                    "\t\ts.color = color;",
                    "\t\treturn s.color ? color : undefined;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * An array of function which parse a given string representation of a color.",
                    "\t *",
                    "\t * These parser serve as validators and as a layer of compatibility to support color formats which the browser",
                    "\t * might not support natively.",
                    "\t *",
                    "\t * @type {((value: string) => (string|undefined))[]}",
                    "\t */",
                    "\tvar parsers = [",
                    "\t\tparseHexColor,",
                    "\t\tvalidateColor",
                    "\t];",
                    "",
                    "",
                    "\tPrism.hooks.add('wrap', function (env) {",
                    "\t\tif (env.type === 'color' || env.classes.indexOf('color') >= 0) {",
                    "\t\t\tvar content = env.content;",
                    "",
                    "\t\t\t// remove all HTML tags inside",
                    "\t\t\tvar rawText = content.split(HTML_TAG).join('');",
                    "",
                    "\t\t\tvar color;",
                    "\t\t\tfor (var i = 0, l = parsers.length; i < l && !color; i++) {",
                    "\t\t\t\tcolor = parsers[i](rawText);",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (!color) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar previewElement = '<span class=\"inline-color-wrapper\"><span class=\"inline-color\" style=\"background-color:' + color + ';\"></span></span>';",
                    "\t\t\tenv.content = previewElement + content;",
                    "\t\t}",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-inline-color.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&\"undefined\"!=typeof Prism&&\"undefined\"!=typeof document){var a=/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/g,c=/^#?((?:[\\da-f]){3,4}|(?:[\\da-f]{2}){3,4})$/i,f=[function(n){var r=c.exec(n);if(r){for(var o=6<=(n=r[1]).length?2:1,e=n.length/o,s=1==o?1/15:1/255,t=[],i=0;i<e;i++){var a=parseInt(n.substr(i*o,o),16);t.push(a*s)}return 3==e&&t.push(1),\"rgba(\"+t.slice(0,3).map(function(n){return String(Math.round(255*n))}).join(\",\")+\",\"+String(Number(t[3].toFixed(3)))+\")\"}},function(n){var r=(new Option).style;return r.color=n,r.color?n:void 0}];Prism.hooks.add(\"wrap\",function(n){if(\"color\"===n.type||0<=n.classes.indexOf(\"color\")){for(var r,o=n.content,e=o.split(a).join(\"\"),s=0,t=f.length;s<t&&!r;s++)r=f[s](e);if(!r)return;var i='<span class=\"inline-color-wrapper\"><span class=\"inline-color\" style=\"background-color:'+r+';\"></span></span>';n.content=i+o}})}}();"
                ]
            }
        },
        "jsonp-highlight": {
            "index.html": {},
            "prism-jsonp-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * @callback Adapter",
                    "\t * @param {any} response",
                    "\t * @param {HTMLPreElement} [pre]",
                    "\t * @returns {string | null}",
                    "\t */",
                    "",
                    "\t/**",
                    "\t * The list of adapter which will be used if `data-adapter` is not specified.",
                    "\t *",
                    "\t * @type {Array<{adapter: Adapter, name: string}>}",
                    "\t */",
                    "\tvar adapters = [];",
                    "",
                    "\t/**",
                    "\t * Adds a new function to the list of adapters.",
                    "\t *",
                    "\t * If the given adapter is already registered or not a function or there is an adapter with the given name already,",
                    "\t * nothing will happen.",
                    "\t *",
                    "\t * @param {Adapter} adapter The adapter to be registered.",
                    "\t * @param {string} [name] The name of the adapter. Defaults to the function name of `adapter`.",
                    "\t */",
                    "\tfunction registerAdapter(adapter, name) {",
                    "\t\tname = name || adapter.name;",
                    "\t\tif (typeof adapter === \"function\" && !getAdapter(adapter) && !getAdapter(name)) {",
                    "\t\t\tadapters.push({ adapter: adapter, name: name });",
                    "\t\t}",
                    "\t}",
                    "\t/**",
                    "\t * Returns the given adapter itself, if registered, or a registered adapter with the given name.",
                    "\t *",
                    "\t * If no fitting adapter is registered, `null` will be returned.",
                    "\t *",
                    "\t * @param {string|Function} adapter The adapter itself or the name of an adapter.",
                    "\t * @returns {Adapter} A registered adapter or `null`.",
                    "\t */",
                    "\tfunction getAdapter(adapter) {",
                    "\t\tif (typeof adapter === \"function\") {",
                    "\t\t\tfor (var i = 0, item; item = adapters[i++];) {",
                    "\t\t\t\tif (item.adapter.valueOf() === adapter.valueOf()) {",
                    "\t\t\t\t\treturn item.adapter;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\telse if (typeof adapter === \"string\") {",
                    "\t\t\tfor (var i = 0, item; item = adapters[i++];) {",
                    "\t\t\t\tif (item.name === adapter) {",
                    "\t\t\t\t\treturn item.adapter;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}",
                    "\t/**",
                    "\t * Remove the given adapter or the first registered adapter with the given name from the list of",
                    "\t * registered adapters.",
                    "\t *",
                    "\t * @param {string|Function} adapter The adapter itself or the name of an adapter.",
                    "\t */",
                    "\tfunction removeAdapter(adapter) {",
                    "\t\tif (typeof adapter === \"string\") {",
                    "\t\t\tadapter = getAdapter(adapter);",
                    "\t\t}",
                    "\t\tif (typeof adapter === \"function\") {",
                    "\t\t\tvar index = adapters.findIndex(function (item) {",
                    "\t\t\t\treturn item.adapter === adapter;",
                    "\t\t\t});",
                    "\t\t\tif (index >= 0) {",
                    "\t\t\t\tadapters.splice(index, 1);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tregisterAdapter(function github(rsp, el) {",
                    "\t\tif (rsp && rsp.meta && rsp.data) {",
                    "\t\t\tif (rsp.meta.status && rsp.meta.status >= 400) {",
                    "\t\t\t\treturn \"Error: \" + (rsp.data.message || rsp.meta.status);",
                    "\t\t\t}",
                    "\t\t\telse if (typeof (rsp.data.content) === \"string\") {",
                    "\t\t\t\treturn typeof (atob) === \"function\"",
                    "\t\t\t\t\t? atob(rsp.data.content.replace(/\\s/g, \"\"))",
                    "\t\t\t\t\t: \"Your browser cannot decode base64\";",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}, 'github');",
                    "\tregisterAdapter(function gist(rsp, el) {",
                    "\t\tif (rsp && rsp.meta && rsp.data && rsp.data.files) {",
                    "\t\t\tif (rsp.meta.status && rsp.meta.status >= 400) {",
                    "\t\t\t\treturn \"Error: \" + (rsp.data.message || rsp.meta.status);",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar files = rsp.data.files;",
                    "\t\t\tvar filename = el.getAttribute(\"data-filename\");",
                    "\t\t\tif (filename == null) {",
                    "\t\t\t\t// Maybe in the future we can somehow render all files",
                    "\t\t\t\t// But the standard <script> include for gists does that nicely already,",
                    "\t\t\t\t// so that might be getting beyond the scope of this plugin",
                    "\t\t\t\tfor (var key in files) {",
                    "\t\t\t\t\tif (files.hasOwnProperty(key)) {",
                    "\t\t\t\t\t\tfilename = key;",
                    "\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (files[filename] !== undefined) {",
                    "\t\t\t\treturn files[filename].content;",
                    "\t\t\t}",
                    "\t\t\treturn \"Error: unknown or missing gist file \" + filename;",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}, 'gist');",
                    "\tregisterAdapter(function bitbucket(rsp, el) {",
                    "\t\tif (rsp && rsp.node && typeof (rsp.data) === \"string\") {",
                    "\t\t\treturn rsp.data;",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}, 'bitbucket');",
                    "",
                    "",
                    "\tvar jsonpCallbackCounter = 0;",
                    "",
                    "\tvar LOADING_MESSAGE = 'Loading…';",
                    "\tvar MISSING_ADAPTER_MESSAGE = function (name) {",
                    "\t\treturn '✖ Error: JSONP adapter function \"' + name + '\" doesn\\'t exist';",
                    "\t};",
                    "\tvar TIMEOUT_MESSAGE = function (url) {",
                    "\t\treturn '✖ Error: Timeout loading ' + url;",
                    "\t};",
                    "\tvar UNKNOWN_FAILURE_MESSAGE = '✖ Error: Cannot parse response (perhaps you need an adapter function?)';",
                    "",
                    "\tvar STATUS_ATTR = 'data-jsonp-status';",
                    "\tvar STATUS_LOADING = 'loading';",
                    "\tvar STATUS_LOADED = 'loaded';",
                    "\tvar STATUS_FAILED = 'failed';",
                    "",
                    "\tvar SELECTOR = 'pre[data-jsonp]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'",
                    "\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';",
                    "",
                    "",
                    "\tPrism.hooks.add('before-highlightall', function (env) {",
                    "\t\tenv.selector += ', ' + SELECTOR;",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);",
                    "\t\tif (pre.matches(SELECTOR)) {",
                    "\t\t\tenv.code = ''; // fast-path the whole thing and go to complete",
                    "",
                    "\t\t\t// mark as loading",
                    "\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING);",
                    "",
                    "\t\t\t// add code element with loading message",
                    "\t\t\tvar code = pre.appendChild(document.createElement('CODE'));",
                    "\t\t\tcode.textContent = LOADING_MESSAGE;",
                    "",
                    "\t\t\t// set language",
                    "\t\t\tvar language = env.language;",
                    "\t\t\tcode.className = 'language-' + language;",
                    "",
                    "\t\t\t// preload the language",
                    "\t\t\tvar autoloader = Prism.plugins.autoloader;",
                    "\t\t\tif (autoloader) {",
                    "\t\t\t\tautoloader.loadLanguages(language);",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar adapterName = pre.getAttribute('data-adapter');",
                    "\t\t\tvar adapter = null;",
                    "\t\t\tif (adapterName) {",
                    "\t\t\t\tif (typeof window[adapterName] === 'function') {",
                    "\t\t\t\t\tadapter = window[adapterName];",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\t// mark as failed",
                    "\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);",
                    "",
                    "\t\t\t\t\tcode.textContent = MISSING_ADAPTER_MESSAGE(adapterName);",
                    "\t\t\t\t\treturn;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar callbackName = 'prismjsonp' + jsonpCallbackCounter++;",
                    "",
                    "\t\t\tvar uri = document.createElement('a');",
                    "\t\t\tvar src = uri.href = pre.getAttribute('data-jsonp');",
                    "\t\t\turi.href += (uri.search ? '&' : '?') + (pre.getAttribute('data-callback') || 'callback') + '=' + callbackName;",
                    "",
                    "",
                    "\t\t\tvar timeout = setTimeout(function () {",
                    "\t\t\t\t// we could clean up window[cb], but if the request finally succeeds, keeping it around is a good thing",
                    "",
                    "\t\t\t\t// mark as failed",
                    "\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);",
                    "",
                    "\t\t\t\tcode.textContent = TIMEOUT_MESSAGE(src);",
                    "\t\t\t}, Prism.plugins.jsonphighlight.timeout);",
                    "",
                    "",
                    "\t\t\tvar script = document.createElement('script');",
                    "\t\t\tscript.src = uri.href;",
                    "",
                    "\t\t\t// the JSONP callback function",
                    "\t\t\twindow[callbackName] = function (response) {",
                    "\t\t\t\t// clean up",
                    "\t\t\t\tdocument.head.removeChild(script);",
                    "\t\t\t\tclearTimeout(timeout);",
                    "\t\t\t\tdelete window[callbackName];",
                    "",
                    "\t\t\t\t// interpret the received data using the adapter(s)",
                    "\t\t\t\tvar data = null;",
                    "\t\t\t\tif (adapter) {",
                    "\t\t\t\t\tdata = adapter(response, pre);",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\tfor (var i = 0, l = adapters.length; i < l; i++) {",
                    "\t\t\t\t\t\tdata = adapters[i].adapter(response, pre);",
                    "\t\t\t\t\t\tif (data !== null) {",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tif (data === null) {",
                    "\t\t\t\t\t// mark as failed",
                    "\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);",
                    "",
                    "\t\t\t\t\tcode.textContent = UNKNOWN_FAILURE_MESSAGE;",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\t// mark as loaded",
                    "\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);",
                    "",
                    "\t\t\t\t\tcode.textContent = data;",
                    "\t\t\t\t\tPrism.highlightElement(code);",
                    "\t\t\t\t}",
                    "\t\t\t};",
                    "",
                    "\t\t\tdocument.head.appendChild(script);",
                    "\t\t}",
                    "\t});",
                    "",
                    "",
                    "\tPrism.plugins.jsonphighlight = {",
                    "\t\t/**",
                    "\t\t * The timeout after which an error message will be displayed.",
                    "\t\t *",
                    "\t\t * __Note:__ If the request succeeds after the timeout, it will still be processed and will override any",
                    "\t\t * displayed error messages.",
                    "\t\t */",
                    "\t\ttimeout: 5000,",
                    "\t\tregisterAdapter: registerAdapter,",
                    "\t\tremoveAdapter: removeAdapter,",
                    "",
                    "\t\t/**",
                    "\t\t * Highlights all `pre` elements under the given container with a `data-jsonp` attribute by requesting the",
                    "\t\t * specified JSON and using the specified adapter or a registered adapter to extract the code to highlight",
                    "\t\t * from the response. The highlighted code will be inserted into the `pre` element.",
                    "\t\t *",
                    "\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.",
                    "\t\t *",
                    "\t\t * @param {Element | Document} [container=document]",
                    "\t\t */",
                    "\t\thighlight: function (container) {",
                    "\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);",
                    "",
                    "\t\t\tfor (var i = 0, element; element = elements[i++];) {",
                    "\t\t\t\tPrism.highlightElement(element);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "})();"
                ]
            },
            "prism-jsonp-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var c=[];t(function(t,e){if(t&&t.meta&&t.data){if(t.meta.status&&400<=t.meta.status)return\"Error: \"+(t.data.message||t.meta.status);if(\"string\"==typeof t.data.content)return\"function\"==typeof atob?atob(t.data.content.replace(/\\s/g,\"\")):\"Your browser cannot decode base64\"}return null},\"github\"),t(function(t,e){if(t&&t.meta&&t.data&&t.data.files){if(t.meta.status&&400<=t.meta.status)return\"Error: \"+(t.data.message||t.meta.status);var n=t.data.files,a=e.getAttribute(\"data-filename\");if(null==a)for(var r in n)if(n.hasOwnProperty(r)){a=r;break}return void 0!==n[a]?n[a].content:\"Error: unknown or missing gist file \"+a}return null},\"gist\"),t(function(t,e){return t&&t.node&&\"string\"==typeof t.data?t.data:null},\"bitbucket\");var m=0,p=\"data-jsonp-status\",g=\"loading\",h=\"loaded\",v=\"failed\",b=\"pre[data-jsonp]:not([\"+p+'=\"'+h+'\"]):not(['+p+'=\"'+g+'\"])';Prism.hooks.add(\"before-highlightall\",function(t){t.selector+=\", \"+b}),Prism.hooks.add(\"before-sanity-check\",function(t){var r=t.element;if(r.matches(b)){t.code=\"\",r.setAttribute(p,g);var i=r.appendChild(document.createElement(\"CODE\"));i.textContent=\"Loading…\";var e=t.language;i.className=\"language-\"+e;var n=Prism.plugins.autoloader;n&&n.loadLanguages(e);var a=r.getAttribute(\"data-adapter\"),o=null;if(a){if(\"function\"!=typeof window[a])return r.setAttribute(p,v),void(i.textContent=function(t){return'✖ Error: JSONP adapter function \"'+t+\"\\\" doesn't exist\"}(a));o=window[a]}var u=\"prismjsonp\"+m++,s=document.createElement(\"a\"),f=s.href=r.getAttribute(\"data-jsonp\");s.href+=(s.search?\"&\":\"?\")+(r.getAttribute(\"data-callback\")||\"callback\")+\"=\"+u;var l=setTimeout(function(){r.setAttribute(p,v),i.textContent=function(t){return\"✖ Error: Timeout loading \"+t}(f)},Prism.plugins.jsonphighlight.timeout),d=document.createElement(\"script\");d.src=s.href,window[u]=function(t){document.head.removeChild(d),clearTimeout(l),delete window[u];var e=null;if(o)e=o(t,r);else for(var n=0,a=c.length;n<a&&null===(e=c[n].adapter(t,r));n++);null===e?(r.setAttribute(p,v),i.textContent=\"✖ Error: Cannot parse response (perhaps you need an adapter function?)\"):(r.setAttribute(p,h),i.textContent=e,Prism.highlightElement(i))},document.head.appendChild(d)}}),Prism.plugins.jsonphighlight={timeout:5e3,registerAdapter:t,removeAdapter:function(e){if(\"string\"==typeof e&&(e=n(e)),\"function\"==typeof e){var t=c.findIndex(function(t){return t.adapter===e});0<=t&&c.splice(t,1)}},highlight:function(t){for(var e,n=(t||document).querySelectorAll(b),a=0;e=n[a++];)Prism.highlightElement(e)}}}function t(t,e){e=e||t.name,\"function\"!=typeof t||n(t)||n(e)||c.push({adapter:t,name:e})}function n(t){if(\"function\"==typeof t){for(var e=0;n=c[e++];)if(n.adapter.valueOf()===t.valueOf())return n.adapter}else if(\"string\"==typeof t){var n;for(e=0;n=c[e++];)if(n.name===t)return n.adapter}return null}}();"
                ]
            }
        },
        "keep-markup": {
            "index.html": {},
            "prism-keep-markup.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.createRange) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tPrism.plugins.KeepMarkup = true;",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\tif (!env.element.children.length) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!Prism.util.isActive(env.element, 'keep-markup', true)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar pos = 0;",
                    "\t\tvar data = [];",
                    "\t\tvar f = function (elt, baseNode) {",
                    "\t\t\tvar o = {};",
                    "\t\t\tif (!baseNode) {",
                    "\t\t\t\t// Clone the original tag to keep all attributes",
                    "\t\t\t\to.clone = elt.cloneNode(false);",
                    "\t\t\t\to.posOpen = pos;",
                    "\t\t\t\tdata.push(o);",
                    "\t\t\t}",
                    "\t\t\tfor (var i = 0, l = elt.childNodes.length; i < l; i++) {",
                    "\t\t\t\tvar child = elt.childNodes[i];",
                    "\t\t\t\tif (child.nodeType === 1) { // element",
                    "\t\t\t\t\tf(child);",
                    "\t\t\t\t} else if(child.nodeType === 3) { // text",
                    "\t\t\t\t\tpos += child.data.length;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\tif (!baseNode) {",
                    "\t\t\t\to.posClose = pos;",
                    "\t\t\t}",
                    "\t\t};",
                    "\t\tf(env.element, true);",
                    "",
                    "\t\tif (data && data.length) {",
                    "\t\t\t// data is an array of all existing tags",
                    "\t\t\tenv.keepMarkup = data;",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('after-highlight', function (env) {",
                    "\t\tif(env.keepMarkup && env.keepMarkup.length) {",
                    "",
                    "\t\t\tvar walk = function (elt, nodeState) {",
                    "\t\t\t\tfor (var i = 0, l = elt.childNodes.length; i < l; i++) {",
                    "",
                    "\t\t\t\t\tvar child = elt.childNodes[i];",
                    "",
                    "\t\t\t\t\tif (child.nodeType === 1) { // element",
                    "\t\t\t\t\t\tif (!walk(child, nodeState)) {",
                    "\t\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t} else if (child.nodeType === 3) { // text",
                    "\t\t\t\t\t\tif(!nodeState.nodeStart && nodeState.pos + child.data.length > nodeState.node.posOpen) {",
                    "\t\t\t\t\t\t\t// We found the start position",
                    "\t\t\t\t\t\t\tnodeState.nodeStart = child;",
                    "\t\t\t\t\t\t\tnodeState.nodeStartPos = nodeState.node.posOpen - nodeState.pos;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tif(nodeState.nodeStart && nodeState.pos + child.data.length >= nodeState.node.posClose) {",
                    "\t\t\t\t\t\t\t// We found the end position",
                    "\t\t\t\t\t\t\tnodeState.nodeEnd = child;",
                    "\t\t\t\t\t\t\tnodeState.nodeEndPos = nodeState.node.posClose - nodeState.pos;",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\tnodeState.pos += child.data.length;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tif (nodeState.nodeStart && nodeState.nodeEnd) {",
                    "\t\t\t\t\t\t// Select the range and wrap it with the clone",
                    "\t\t\t\t\t\tvar range = document.createRange();",
                    "\t\t\t\t\t\trange.setStart(nodeState.nodeStart, nodeState.nodeStartPos);",
                    "\t\t\t\t\t\trange.setEnd(nodeState.nodeEnd, nodeState.nodeEndPos);",
                    "\t\t\t\t\t\tnodeState.node.clone.appendChild(range.extractContents());",
                    "\t\t\t\t\t\trange.insertNode(nodeState.node.clone);",
                    "\t\t\t\t\t\trange.detach();",
                    "",
                    "\t\t\t\t\t\t// Process is over",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\treturn true;",
                    "\t\t\t};",
                    "",
                    "\t\t\t// For each tag, we walk the DOM to reinsert it",
                    "\t\t\tenv.keepMarkup.forEach(function (node) {",
                    "\t\t\t\twalk(env.element, {",
                    "\t\t\t\t\tnode: node,",
                    "\t\t\t\t\tpos: 0",
                    "\t\t\t\t});",
                    "\t\t\t});",
                    "\t\t\t// Store new highlightedCode for later hooks calls",
                    "\t\t\tenv.highlightedCode = env.element.innerHTML;",
                    "\t\t}",
                    "\t});",
                    "}());"
                ]
            },
            "prism-keep-markup.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&self.Prism&&self.document&&document.createRange&&(Prism.plugins.KeepMarkup=!0,Prism.hooks.add(\"before-highlight\",function(e){if(e.element.children.length&&Prism.util.isActive(e.element,\"keep-markup\",!0)){var a=0,s=[],l=function(e,n){var o={};n||(o.clone=e.cloneNode(!1),o.posOpen=a,s.push(o));for(var t=0,d=e.childNodes.length;t<d;t++){var r=e.childNodes[t];1===r.nodeType?l(r):3===r.nodeType&&(a+=r.data.length)}n||(o.posClose=a)};l(e.element,!0),s&&s.length&&(e.keepMarkup=s)}}),Prism.hooks.add(\"after-highlight\",function(n){if(n.keepMarkup&&n.keepMarkup.length){var a=function(e,n){for(var o=0,t=e.childNodes.length;o<t;o++){var d=e.childNodes[o];if(1===d.nodeType){if(!a(d,n))return!1}else 3===d.nodeType&&(!n.nodeStart&&n.pos+d.data.length>n.node.posOpen&&(n.nodeStart=d,n.nodeStartPos=n.node.posOpen-n.pos),n.nodeStart&&n.pos+d.data.length>=n.node.posClose&&(n.nodeEnd=d,n.nodeEndPos=n.node.posClose-n.pos),n.pos+=d.data.length);if(n.nodeStart&&n.nodeEnd){var r=document.createRange();return r.setStart(n.nodeStart,n.nodeStartPos),r.setEnd(n.nodeEnd,n.nodeEndPos),n.node.clone.appendChild(r.extractContents()),r.insertNode(n.node.clone),r.detach(),!1}}return!0};n.keepMarkup.forEach(function(e){a(n.element,{node:e,pos:0})}),n.highlightedCode=n.element.innerHTML}}));"
                ]
            }
        },
        "line-highlight": {
            "index.html": {},
            "prism-line-highlight.css": {},
            "prism-line-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * @param {string} selector",
                    "\t * @param {ParentNode} [container]",
                    "\t * @returns {HTMLElement[]}",
                    "\t */",
                    "\tfunction $$(selector, container) {",
                    "\t\treturn Array.prototype.slice.call((container || document).querySelectorAll(selector));",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Returns whether the given element has the given class.",
                    "\t *",
                    "\t * @param {Element} element",
                    "\t * @param {string} className",
                    "\t * @returns {boolean}",
                    "\t */",
                    "\tfunction hasClass(element, className) {",
                    "\t\tclassName = \" \" + className + \" \";",
                    "\t\treturn (\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(className) > -1",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Calls the given function.",
                    "\t *",
                    "\t * @param {() => any} func",
                    "\t * @returns {void}",
                    "\t */",
                    "\tfunction callFunction(func) {",
                    "\t\tfunc();",
                    "\t}",
                    "",
                    "\t// Some browsers round the line-height, others don't.",
                    "\t// We need to test for it to position the elements properly.",
                    "\tvar isLineHeightRounded = (function () {",
                    "\t\tvar res;",
                    "\t\treturn function () {",
                    "\t\t\tif (typeof res === 'undefined') {",
                    "\t\t\t\tvar d = document.createElement('div');",
                    "\t\t\t\td.style.fontSize = '13px';",
                    "\t\t\t\td.style.lineHeight = '1.5';",
                    "\t\t\t\td.style.padding = '0';",
                    "\t\t\t\td.style.border = '0';",
                    "\t\t\t\td.innerHTML = '&nbsp;<br />&nbsp;';",
                    "\t\t\t\tdocument.body.appendChild(d);",
                    "\t\t\t\t// Browsers that round the line-height should have offsetHeight === 38",
                    "\t\t\t\t// The others should have 39.",
                    "\t\t\t\tres = d.offsetHeight === 38;",
                    "\t\t\t\tdocument.body.removeChild(d);",
                    "\t\t\t}",
                    "\t\t\treturn res;",
                    "\t\t}",
                    "\t}());",
                    "",
                    "\t/**",
                    "\t * Returns the top offset of the content box of the given parent and the content box of one of its children.",
                    "\t *",
                    "\t * @param {HTMLElement} parent",
                    "\t * @param {HTMLElement} child",
                    "\t */",
                    "\tfunction getContentBoxTopOffset(parent, child) {",
                    "\t\tvar parentStyle = getComputedStyle(parent);",
                    "\t\tvar childStyle = getComputedStyle(child);",
                    "",
                    "\t\t/**",
                    "\t\t * Returns the numeric value of the given pixel value.",
                    "\t\t *",
                    "\t\t * @param {string} px",
                    "\t\t */",
                    "\t\tfunction pxToNumber(px) {",
                    "\t\t\treturn +px.substr(0, px.length - 2);",
                    "\t\t}",
                    "",
                    "\t\treturn child.offsetTop",
                    "\t\t\t+ pxToNumber(childStyle.borderTopWidth)",
                    "\t\t\t+ pxToNumber(childStyle.paddingTop)",
                    "\t\t\t- pxToNumber(parentStyle.paddingTop);",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Highlights the lines of the given pre.",
                    "\t *",
                    "\t * This function is split into a DOM measuring and mutate phase to improve performance.",
                    "\t * The returned function mutates the DOM when called.",
                    "\t *",
                    "\t * @param {HTMLElement} pre",
                    "\t * @param {string | null} [lines]",
                    "\t * @param {string} [classes='']",
                    "\t * @returns {() => void}",
                    "\t */",
                    "\tfunction highlightLines(pre, lines, classes) {",
                    "\t\tlines = typeof lines === 'string' ? lines : pre.getAttribute('data-line');",
                    "",
                    "\t\tvar ranges = lines.replace(/\\s+/g, '').split(',').filter(Boolean);",
                    "\t\tvar offset = +pre.getAttribute('data-line-offset') || 0;",
                    "",
                    "\t\tvar parseMethod = isLineHeightRounded() ? parseInt : parseFloat;",
                    "\t\tvar lineHeight = parseMethod(getComputedStyle(pre).lineHeight);",
                    "\t\tvar hasLineNumbers = hasClass(pre, 'line-numbers');",
                    "\t\tvar codeElement = pre.querySelector('code');",
                    "\t\tvar parentElement = hasLineNumbers ? pre : codeElement || pre;",
                    "\t\tvar mutateActions = /** @type {(() => void)[]} */ ([]);",
                    "",
                    "\t\t/**",
                    "\t\t * The top offset between the content box of the <code> element and the content box of the parent element of",
                    "\t\t * the line highlight element (either `<pre>` or `<code>`).",
                    "\t\t *",
                    "\t\t * This offset might not be zero for some themes where the <code> element has a top margin. Some plugins",
                    "\t\t * (or users) might also add element above the <code> element. Because the line highlight is aligned relative",
                    "\t\t * to the <pre> element, we have to take this into account.",
                    "\t\t *",
                    "\t\t * This offset will be 0 if the parent element of the line highlight element is the `<code>` element.",
                    "\t\t */",
                    "\t\tvar codePreOffset = !codeElement || parentElement == codeElement ? 0 : getContentBoxTopOffset(pre, codeElement);",
                    "",
                    "\t\tranges.forEach(function (currentRange) {",
                    "\t\t\tvar range = currentRange.split('-');",
                    "",
                    "\t\t\tvar start = +range[0];",
                    "\t\t\tvar end = +range[1] || start;",
                    "",
                    "\t\t\t/** @type {HTMLElement} */",
                    "\t\t\tvar line = pre.querySelector('.line-highlight[data-range=\"' + currentRange + '\"]') || document.createElement('div');",
                    "",
                    "\t\t\tmutateActions.push(function () {",
                    "\t\t\t\tline.setAttribute('aria-hidden', 'true');",
                    "\t\t\t\tline.setAttribute('data-range', currentRange);",
                    "\t\t\t\tline.className = (classes || '') + ' line-highlight';",
                    "\t\t\t});",
                    "",
                    "\t\t\t// if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers",
                    "\t\t\tif (hasLineNumbers && Prism.plugins.lineNumbers) {",
                    "\t\t\t\tvar startNode = Prism.plugins.lineNumbers.getLine(pre, start);",
                    "\t\t\t\tvar endNode = Prism.plugins.lineNumbers.getLine(pre, end);",
                    "",
                    "\t\t\t\tif (startNode) {",
                    "\t\t\t\t\tvar top = startNode.offsetTop + codePreOffset + 'px';",
                    "\t\t\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t\t\tline.style.top = top;",
                    "\t\t\t\t\t});",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tif (endNode) {",
                    "\t\t\t\t\tvar height = (endNode.offsetTop - startNode.offsetTop) + endNode.offsetHeight + 'px';",
                    "\t\t\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t\t\tline.style.height = height;",
                    "\t\t\t\t\t});",
                    "\t\t\t\t}",
                    "\t\t\t} else {",
                    "\t\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t\tline.setAttribute('data-start', String(start));",
                    "",
                    "\t\t\t\t\tif (end > start) {",
                    "\t\t\t\t\t\tline.setAttribute('data-end', String(end));",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tline.style.top = (start - offset - 1) * lineHeight + codePreOffset + 'px';",
                    "",
                    "\t\t\t\t\tline.textContent = new Array(end - start + 2).join(' \\n');",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "",
                    "\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t// allow this to play nicely with the line-numbers plugin",
                    "\t\t\t\t// need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning",
                    "\t\t\t\tparentElement.appendChild(line);",
                    "\t\t\t});",
                    "\t\t});",
                    "",
                    "\t\tvar id = pre.id;",
                    "\t\tif (hasLineNumbers && id) {",
                    "\t\t\t// This implements linkable line numbers. Linkable line numbers use Line Highlight to create a link to a",
                    "\t\t\t// specific line. For this to work, the pre element has to:",
                    "\t\t\t//  1) have line numbers,",
                    "\t\t\t//  2) have the `linkable-line-numbers` class or an ascendant that has that class, and",
                    "\t\t\t//  3) have an id.",
                    "",
                    "\t\t\tvar linkableLineNumbersClass = 'linkable-line-numbers';",
                    "\t\t\tvar linkableLineNumbers = false;",
                    "\t\t\tvar node = pre;",
                    "\t\t\twhile (node) {",
                    "\t\t\t\tif (hasClass(node, linkableLineNumbersClass)) {",
                    "\t\t\t\t\tlinkableLineNumbers = true;",
                    "\t\t\t\t\tbreak;",
                    "\t\t\t\t}",
                    "\t\t\t\tnode = node.parentElement;",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (linkableLineNumbers) {",
                    "\t\t\t\tif (!hasClass(pre, linkableLineNumbersClass)) {",
                    "\t\t\t\t\t// add class to pre",
                    "\t\t\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t\t\tpre.className = (pre.className + ' ' + linkableLineNumbersClass).trim();",
                    "\t\t\t\t\t});",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tvar start = parseInt(pre.getAttribute('data-start') || '1');",
                    "",
                    "\t\t\t\t// iterate all line number spans",
                    "\t\t\t\t$$('.line-numbers-rows > span', pre).forEach(function (lineSpan, i) {",
                    "\t\t\t\t\tvar lineNumber = i + start;",
                    "\t\t\t\t\tlineSpan.onclick = function () {",
                    "\t\t\t\t\t\tvar hash = id + '.' + lineNumber;",
                    "",
                    "\t\t\t\t\t\t// this will prevent scrolling since the span is obviously in view",
                    "\t\t\t\t\t\tscrollIntoView = false;",
                    "\t\t\t\t\t\tlocation.hash = hash;",
                    "\t\t\t\t\t\tsetTimeout(function () {",
                    "\t\t\t\t\t\t\tscrollIntoView = true;",
                    "\t\t\t\t\t\t}, 1);",
                    "\t\t\t\t\t};",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\treturn function () {",
                    "\t\t\tmutateActions.forEach(callFunction);",
                    "\t\t};",
                    "\t}",
                    "",
                    "\tvar scrollIntoView = true;",
                    "\tfunction applyHash() {",
                    "\t\tvar hash = location.hash.slice(1);",
                    "",
                    "\t\t// Remove pre-existing temporary lines",
                    "\t\t$$('.temporary.line-highlight').forEach(function (line) {",
                    "\t\t\tline.parentNode.removeChild(line);",
                    "\t\t});",
                    "",
                    "\t\tvar range = (hash.match(/\\.([\\d,-]+)$/) || [, ''])[1];",
                    "",
                    "\t\tif (!range || document.getElementById(hash)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar id = hash.slice(0, hash.lastIndexOf('.')),",
                    "\t\t\tpre = document.getElementById(id);",
                    "",
                    "\t\tif (!pre) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!pre.hasAttribute('data-line')) {",
                    "\t\t\tpre.setAttribute('data-line', '');",
                    "\t\t}",
                    "",
                    "\t\tvar mutateDom = highlightLines(pre, range, 'temporary ');",
                    "\t\tmutateDom();",
                    "",
                    "\t\tif (scrollIntoView) {",
                    "\t\t\tdocument.querySelector('.temporary.line-highlight').scrollIntoView();",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tvar fakeTimer = 0; // Hack to limit the number of times applyHash() runs",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\tvar pre = env.element.parentElement;",
                    "\t\tvar lines = pre && pre.getAttribute('data-line');",
                    "",
                    "\t\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t/*",
                    "\t\t * Cleanup for other plugins (e.g. autoloader).",
                    "\t\t *",
                    "\t\t * Sometimes <code> blocks are highlighted multiple times. It is necessary",
                    "\t\t * to cleanup any left-over tags, because the whitespace inside of the <div>",
                    "\t\t * tags change the content of the <code> tag.",
                    "\t\t */",
                    "\t\tvar num = 0;",
                    "\t\t$$('.line-highlight', pre).forEach(function (line) {",
                    "\t\t\tnum += line.textContent.length;",
                    "\t\t\tline.parentNode.removeChild(line);",
                    "\t\t});",
                    "\t\t// Remove extra whitespace",
                    "\t\tif (num && /^( \\n)+$/.test(env.code.slice(-num))) {",
                    "\t\t\tenv.code = env.code.slice(0, -num);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('complete', function completeHook(env) {",
                    "\t\tvar pre = env.element.parentElement;",
                    "\t\tvar lines = pre && pre.getAttribute('data-line');",
                    "",
                    "\t\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tclearTimeout(fakeTimer);",
                    "",
                    "\t\tvar hasLineNumbers = Prism.plugins.lineNumbers;",
                    "\t\tvar isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;",
                    "",
                    "\t\tif (hasClass(pre, 'line-numbers') && hasLineNumbers && !isLineNumbersLoaded) {",
                    "\t\t\tPrism.hooks.add('line-numbers', completeHook);",
                    "\t\t} else {",
                    "\t\t\tvar mutateDom = highlightLines(pre, lines);",
                    "\t\t\tmutateDom();",
                    "\t\t\tfakeTimer = setTimeout(applyHash, 1);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\twindow.addEventListener('hashchange', applyHash);",
                    "\twindow.addEventListener('resize', function () {",
                    "\t\tvar actions = $$('pre[data-line]').map(function (pre) {",
                    "\t\t\treturn highlightLines(pre);",
                    "\t\t});",
                    "\t\tactions.forEach(callFunction);",
                    "\t});",
                    "",
                    "})();"
                ]
            },
            "prism-line-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document&&document.querySelector){var t,s=function(){if(void 0===t){var e=document.createElement(\"div\");e.style.fontSize=\"13px\",e.style.lineHeight=\"1.5\",e.style.padding=\"0\",e.style.border=\"0\",e.innerHTML=\"&nbsp;<br />&nbsp;\",document.body.appendChild(e),t=38===e.offsetHeight,document.body.removeChild(e)}return t},b=!0,a=0;Prism.hooks.add(\"before-sanity-check\",function(e){var t=e.element.parentElement,n=t&&t.getAttribute(\"data-line\");if(t&&n&&/pre/i.test(t.nodeName)){var i=0;v(\".line-highlight\",t).forEach(function(e){i+=e.textContent.length,e.parentNode.removeChild(e)}),i&&/^( \\n)+$/.test(e.code.slice(-i))&&(e.code=e.code.slice(0,-i))}}),Prism.hooks.add(\"complete\",function e(t){var n=t.element.parentElement,i=n&&n.getAttribute(\"data-line\");if(n&&i&&/pre/i.test(n.nodeName)){clearTimeout(a);var r=Prism.plugins.lineNumbers,o=t.plugins&&t.plugins.lineNumbers;if(y(n,\"line-numbers\")&&r&&!o)Prism.hooks.add(\"line-numbers\",e);else l(n,i)(),a=setTimeout(u,1)}}),window.addEventListener(\"hashchange\",u),window.addEventListener(\"resize\",function(){v(\"pre[data-line]\").map(function(e){return l(e)}).forEach(E)})}function v(e,t){return Array.prototype.slice.call((t||document).querySelectorAll(e))}function y(e,t){return t=\" \"+t+\" \",-1<(\" \"+e.className+\" \").replace(/[\\n\\t]/g,\" \").indexOf(t)}function E(e){e()}function l(u,e,d){var t=(e=\"string\"==typeof e?e:u.getAttribute(\"data-line\")).replace(/\\s+/g,\"\").split(\",\").filter(Boolean),c=+u.getAttribute(\"data-line-offset\")||0,f=(s()?parseInt:parseFloat)(getComputedStyle(u).lineHeight),p=y(u,\"line-numbers\"),n=u.querySelector(\"code\"),m=p?u:n||u,h=[],g=n&&m!=n?function(e,t){var n=getComputedStyle(e),i=getComputedStyle(t);function r(e){return+e.substr(0,e.length-2)}return t.offsetTop+r(i.borderTopWidth)+r(i.paddingTop)-r(n.paddingTop)}(u,n):0;t.forEach(function(e){var t=e.split(\"-\"),n=+t[0],i=+t[1]||n,r=u.querySelector('.line-highlight[data-range=\"'+e+'\"]')||document.createElement(\"div\");if(h.push(function(){r.setAttribute(\"aria-hidden\",\"true\"),r.setAttribute(\"data-range\",e),r.className=(d||\"\")+\" line-highlight\"}),p&&Prism.plugins.lineNumbers){var o=Prism.plugins.lineNumbers.getLine(u,n),a=Prism.plugins.lineNumbers.getLine(u,i);if(o){var l=o.offsetTop+g+\"px\";h.push(function(){r.style.top=l})}if(a){var s=a.offsetTop-o.offsetTop+a.offsetHeight+\"px\";h.push(function(){r.style.height=s})}}else h.push(function(){r.setAttribute(\"data-start\",String(n)),n<i&&r.setAttribute(\"data-end\",String(i)),r.style.top=(n-c-1)*f+g+\"px\",r.textContent=new Array(i-n+2).join(\" \\n\")});h.push(function(){m.appendChild(r)})});var i=u.id;if(p&&i){for(var r=\"linkable-line-numbers\",o=!1,a=u;a;){if(y(a,r)){o=!0;break}a=a.parentElement}if(o){y(u,r)||h.push(function(){u.className=(u.className+\" \"+r).trim()});var l=parseInt(u.getAttribute(\"data-start\")||\"1\");v(\".line-numbers-rows > span\",u).forEach(function(e,t){var n=t+l;e.onclick=function(){var e=i+\".\"+n;b=!1,location.hash=e,setTimeout(function(){b=!0},1)}})}}return function(){h.forEach(E)}}function u(){var e=location.hash.slice(1);v(\".temporary.line-highlight\").forEach(function(e){e.parentNode.removeChild(e)});var t=(e.match(/\\.([\\d,-]+)$/)||[,\"\"])[1];if(t&&!document.getElementById(e)){var n=e.slice(0,e.lastIndexOf(\".\")),i=document.getElementById(n);if(i)i.hasAttribute(\"data-line\")||i.setAttribute(\"data-line\",\"\"),l(i,t,\"temporary \")(),b&&document.querySelector(\".temporary.line-highlight\").scrollIntoView()}}}();"
                ]
            }
        },
        "line-numbers": {
            "index.html": {},
            "prism-line-numbers.css": {},
            "prism-line-numbers.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Plugin name which is used as a class name for <pre> which is activating the plugin",
                    "\t * @type {String}",
                    "\t */",
                    "\tvar PLUGIN_NAME = 'line-numbers';",
                    "",
                    "\t/**",
                    "\t * Regular expression used for determining line breaks",
                    "\t * @type {RegExp}",
                    "\t */",
                    "\tvar NEW_LINE_EXP = /\\n(?!$)/g;",
                    "",
                    "",
                    "\t/**",
                    "\t * Global exports",
                    "\t */",
                    "\tvar config = Prism.plugins.lineNumbers = {",
                    "\t\t/**",
                    "\t\t * Get node for provided line number",
                    "\t\t * @param {Element} element pre element",
                    "\t\t * @param {Number} number line number",
                    "\t\t * @return {Element|undefined}",
                    "\t\t */",
                    "\t\tgetLine: function (element, number) {",
                    "\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');",
                    "\t\t\tif (!lineNumberRows) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;",
                    "\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);",
                    "",
                    "\t\t\tif (number < lineNumberStart) {",
                    "\t\t\t\tnumber = lineNumberStart;",
                    "\t\t\t}",
                    "\t\t\tif (number > lineNumberEnd) {",
                    "\t\t\t\tnumber = lineNumberEnd;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar lineIndex = number - lineNumberStart;",
                    "",
                    "\t\t\treturn lineNumberRows.children[lineIndex];",
                    "\t\t},",
                    "",
                    "\t\t/**",
                    "\t\t * Resizes the line numbers of the given element.",
                    "\t\t *",
                    "\t\t * This function will not add line numbers. It will only resize existing ones.",
                    "\t\t * @param {HTMLElement} element A `<pre>` element with line numbers.",
                    "\t\t * @returns {void}",
                    "\t\t */",
                    "\t\tresize: function (element) {",
                    "\t\t\tresizeElements([element]);",
                    "\t\t},",
                    "",
                    "\t\t/**",
                    "\t\t * Whether the plugin can assume that the units font sizes and margins are not depended on the size of",
                    "\t\t * the current viewport.",
                    "\t\t *",
                    "\t\t * Setting this to `true` will allow the plugin to do certain optimizations for better performance.",
                    "\t\t *",
                    "\t\t * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.",
                    "\t\t *",
                    "\t\t * @type {boolean}",
                    "\t\t */",
                    "\t\tassumeViewportIndependence: true",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Resizes the given elements.",
                    "\t *",
                    "\t * @param {HTMLElement[]} elements",
                    "\t */",
                    "\tfunction resizeElements(elements) {",
                    "\t\telements = elements.filter(function (e) {",
                    "\t\t\tvar codeStyles = getStyles(e);",
                    "\t\t\tvar whiteSpace = codeStyles['white-space'];",
                    "\t\t\treturn whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';",
                    "\t\t});",
                    "",
                    "\t\tif (elements.length == 0) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar infos = elements.map(function (element) {",
                    "\t\t\tvar codeElement = element.querySelector('code');",
                    "\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');",
                    "\t\t\tif (!codeElement || !lineNumbersWrapper) {",
                    "\t\t\t\treturn undefined;",
                    "\t\t\t}",
                    "",
                    "\t\t\t/** @type {HTMLElement} */",
                    "\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');",
                    "\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);",
                    "",
                    "\t\t\tif (!lineNumberSizer) {",
                    "\t\t\t\tlineNumberSizer = document.createElement('span');",
                    "\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';",
                    "",
                    "\t\t\t\tcodeElement.appendChild(lineNumberSizer);",
                    "\t\t\t}",
                    "",
                    "\t\t\tlineNumberSizer.innerHTML = '0';",
                    "\t\t\tlineNumberSizer.style.display = 'block';",
                    "",
                    "\t\t\tvar oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;",
                    "\t\t\tlineNumberSizer.innerHTML = '';",
                    "",
                    "\t\t\treturn {",
                    "\t\t\t\telement: element,",
                    "\t\t\t\tlines: codeLines,",
                    "\t\t\t\tlineHeights: [],",
                    "\t\t\t\toneLinerHeight: oneLinerHeight,",
                    "\t\t\t\tsizer: lineNumberSizer,",
                    "\t\t\t};",
                    "\t\t}).filter(Boolean);",
                    "",
                    "\t\tinfos.forEach(function (info) {",
                    "\t\t\tvar lineNumberSizer = info.sizer;",
                    "\t\t\tvar lines = info.lines;",
                    "\t\t\tvar lineHeights = info.lineHeights;",
                    "\t\t\tvar oneLinerHeight = info.oneLinerHeight;",
                    "",
                    "\t\t\tlineHeights[lines.length - 1] = undefined;",
                    "\t\t\tlines.forEach(function (line, index) {",
                    "\t\t\t\tif (line && line.length > 1) {",
                    "\t\t\t\t\tvar e = lineNumberSizer.appendChild(document.createElement('span'));",
                    "\t\t\t\t\te.style.display = 'block';",
                    "\t\t\t\t\te.textContent = line;",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\tlineHeights[index] = oneLinerHeight;",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "\t\t});",
                    "",
                    "\t\tinfos.forEach(function (info) {",
                    "\t\t\tvar lineNumberSizer = info.sizer;",
                    "\t\t\tvar lineHeights = info.lineHeights;",
                    "",
                    "\t\t\tvar childIndex = 0;",
                    "\t\t\tfor (var i = 0; i < lineHeights.length; i++) {",
                    "\t\t\t\tif (lineHeights[i] === undefined) {",
                    "\t\t\t\t\tlineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t});",
                    "",
                    "\t\tinfos.forEach(function (info) {",
                    "\t\t\tvar lineNumberSizer = info.sizer;",
                    "\t\t\tvar wrapper = info.element.querySelector('.line-numbers-rows');",
                    "",
                    "\t\t\tlineNumberSizer.style.display = 'none';",
                    "\t\t\tlineNumberSizer.innerHTML = '';",
                    "",
                    "\t\t\tinfo.lineHeights.forEach(function (height, lineNumber) {",
                    "\t\t\t\twrapper.children[lineNumber].style.height = height + 'px';",
                    "\t\t\t});",
                    "\t\t});",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Returns style declarations for the element",
                    "\t * @param {Element} element",
                    "\t */",
                    "\tvar getStyles = function (element) {",
                    "\t\tif (!element) {",
                    "\t\t\treturn null;",
                    "\t\t}",
                    "",
                    "\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);",
                    "\t};",
                    "",
                    "\tvar lastWidth = undefined;",
                    "\twindow.addEventListener('resize', function () {",
                    "\t\tif (config.assumeViewportIndependence && lastWidth === window.innerWidth) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tlastWidth = window.innerWidth;",
                    "",
                    "\t\tresizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "\t\tif (!env.code) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar code = /** @type {Element} */ (env.element);",
                    "\t\tvar pre = /** @type {HTMLElement} */ (code.parentNode);",
                    "",
                    "\t\t// works only for <code> wrapped inside <pre> (not inline)",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Abort if line numbers already exists",
                    "\t\tif (code.querySelector('.line-numbers-rows')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class",
                    "\t\tif (!Prism.util.isActive(code, PLUGIN_NAME)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Remove the class 'line-numbers' from the <code>",
                    "\t\tcode.classList.remove(PLUGIN_NAME);",
                    "\t\t// Add the class 'line-numbers' to the <pre>",
                    "\t\tpre.classList.add(PLUGIN_NAME);",
                    "",
                    "\t\tvar match = env.code.match(NEW_LINE_EXP);",
                    "\t\tvar linesNum = match ? match.length + 1 : 1;",
                    "\t\tvar lineNumbersWrapper;",
                    "",
                    "\t\tvar lines = new Array(linesNum + 1).join('<span></span>');",
                    "",
                    "\t\tlineNumbersWrapper = document.createElement('span');",
                    "\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');",
                    "\t\tlineNumbersWrapper.className = 'line-numbers-rows';",
                    "\t\tlineNumbersWrapper.innerHTML = lines;",
                    "",
                    "\t\tif (pre.hasAttribute('data-start')) {",
                    "\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);",
                    "\t\t}",
                    "",
                    "\t\tenv.element.appendChild(lineNumbersWrapper);",
                    "",
                    "\t\tresizeElements([pre]);",
                    "",
                    "\t\tPrism.hooks.run('line-numbers', env);",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('line-numbers', function (env) {",
                    "\t\tenv.plugins = env.plugins || {};",
                    "\t\tenv.plugins.lineNumbers = true;",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-line-numbers.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var o=\"line-numbers\",a=/\\n(?!$)/g,e=Prism.plugins.lineNumbers={getLine:function(e,n){if(\"PRE\"===e.tagName&&e.classList.contains(o)){var t=e.querySelector(\".line-numbers-rows\");if(t){var i=parseInt(e.getAttribute(\"data-start\"),10)||1,r=i+(t.children.length-1);n<i&&(n=i),r<n&&(n=r);var s=n-i;return t.children[s]}}},resize:function(e){u([e])},assumeViewportIndependence:!0},t=function(e){return e?window.getComputedStyle?getComputedStyle(e):e.currentStyle||null:null},n=void 0;window.addEventListener(\"resize\",function(){e.assumeViewportIndependence&&n===window.innerWidth||(n=window.innerWidth,u(Array.prototype.slice.call(document.querySelectorAll(\"pre.\"+o))))}),Prism.hooks.add(\"complete\",function(e){if(e.code){var n=e.element,t=n.parentNode;if(t&&/pre/i.test(t.nodeName)&&!n.querySelector(\".line-numbers-rows\")&&Prism.util.isActive(n,o)){n.classList.remove(o),t.classList.add(o);var i,r=e.code.match(a),s=r?r.length+1:1,l=new Array(s+1).join(\"<span></span>\");(i=document.createElement(\"span\")).setAttribute(\"aria-hidden\",\"true\"),i.className=\"line-numbers-rows\",i.innerHTML=l,t.hasAttribute(\"data-start\")&&(t.style.counterReset=\"linenumber \"+(parseInt(t.getAttribute(\"data-start\"),10)-1)),e.element.appendChild(i),u([t]),Prism.hooks.run(\"line-numbers\",e)}}}),Prism.hooks.add(\"line-numbers\",function(e){e.plugins=e.plugins||{},e.plugins.lineNumbers=!0})}function u(e){if(0!=(e=e.filter(function(e){var n=t(e)[\"white-space\"];return\"pre-wrap\"===n||\"pre-line\"===n})).length){var n=e.map(function(e){var n=e.querySelector(\"code\"),t=e.querySelector(\".line-numbers-rows\");if(n&&t){var i=e.querySelector(\".line-numbers-sizer\"),r=n.textContent.split(a);i||((i=document.createElement(\"span\")).className=\"line-numbers-sizer\",n.appendChild(i)),i.innerHTML=\"0\",i.style.display=\"block\";var s=i.getBoundingClientRect().height;return i.innerHTML=\"\",{element:e,lines:r,lineHeights:[],oneLinerHeight:s,sizer:i}}}).filter(Boolean);n.forEach(function(e){var i=e.sizer,n=e.lines,r=e.lineHeights,s=e.oneLinerHeight;r[n.length-1]=void 0,n.forEach(function(e,n){if(e&&1<e.length){var t=i.appendChild(document.createElement(\"span\"));t.style.display=\"block\",t.textContent=e}else r[n]=s})}),n.forEach(function(e){for(var n=e.sizer,t=e.lineHeights,i=0,r=0;r<t.length;r++)void 0===t[r]&&(t[r]=n.children[i++].getBoundingClientRect().height)}),n.forEach(function(e){var n=e.sizer,t=e.element.querySelector(\".line-numbers-rows\");n.style.display=\"none\",n.innerHTML=\"\",e.lineHeights.forEach(function(e,n){t.children[n].style.height=e+\"px\"})})}}}();"
                ]
            }
        },
        "match-braces": {
            "index.html": {},
            "prism-match-braces.css": {},
            "prism-match-braces.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar PARTNER = {",
                    "\t\t'(': ')',",
                    "\t\t'[': ']',",
                    "\t\t'{': '}',",
                    "\t};",
                    "",
                    "\t// The names for brace types.",
                    "\t// These names have two purposes: 1) they can be used for styling and 2) they are used to pair braces. Only braces",
                    "\t// of the same type are paired.",
                    "\tvar NAMES = {",
                    "\t\t'(': 'brace-round',",
                    "\t\t'[': 'brace-square',",
                    "\t\t'{': 'brace-curly',",
                    "\t};",
                    "",
                    "\t// A map for brace aliases.",
                    "\t// This is useful for when some braces have a prefix/suffix as part of the punctuation token.",
                    "\tvar BRACE_ALIAS_MAP = {",
                    "\t\t'${': '{', // JS template punctuation (e.g. `foo ${bar + 1}`)",
                    "\t};",
                    "",
                    "\tvar LEVEL_WARP = 12;",
                    "",
                    "\tvar pairIdCounter = 0;",
                    "",
                    "\tvar BRACE_ID_PATTERN = /^(pair-\\d+-)(open|close)$/;",
                    "",
                    "\t/**",
                    "\t * Returns the brace partner given one brace of a brace pair.",
                    "\t *",
                    "\t * @param {HTMLElement} brace",
                    "\t * @returns {HTMLElement}",
                    "\t */",
                    "\tfunction getPartnerBrace(brace) {",
                    "\t\tvar match = BRACE_ID_PATTERN.exec(brace.id);",
                    "\t\treturn document.querySelector('#' + match[1] + (match[2] == 'open' ? 'close' : 'open'));",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * @this {HTMLElement}",
                    "\t */",
                    "\tfunction hoverBrace() {",
                    "\t\tif (!Prism.util.isActive(this, 'brace-hover', true)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t[this, getPartnerBrace(this)].forEach(function (e) {",
                    "\t\t\te.classList.add('brace-hover');",
                    "\t\t});",
                    "\t}",
                    "\t/**",
                    "\t * @this {HTMLElement}",
                    "\t */",
                    "\tfunction leaveBrace() {",
                    "\t\t[this, getPartnerBrace(this)].forEach(function (e) {",
                    "\t\t\te.classList.remove('brace-hover');",
                    "\t\t});",
                    "\t}",
                    "\t/**",
                    "\t * @this {HTMLElement}",
                    "\t */",
                    "\tfunction clickBrace() {",
                    "\t\tif (!Prism.util.isActive(this, 'brace-select', true)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t[this, getPartnerBrace(this)].forEach(function (e) {",
                    "\t\t\te.classList.add('brace-selected');",
                    "\t\t});",
                    "\t}",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "",
                    "\t\t/** @type {HTMLElement} */",
                    "\t\tvar code = env.element;",
                    "\t\tvar pre = code.parentElement;",
                    "",
                    "\t\tif (!pre || pre.tagName != 'PRE') {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// find the braces to match",
                    "\t\t/** @type {string[]} */",
                    "\t\tvar toMatch = [];",
                    "\t\tif (Prism.util.isActive(code, 'match-braces')) {",
                    "\t\t\ttoMatch.push('(', '[', '{');",
                    "\t\t}",
                    "",
                    "\t\tif (toMatch.length == 0) {",
                    "\t\t\t// nothing to match",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!pre.__listenerAdded) {",
                    "\t\t\t// code blocks might be highlighted more than once",
                    "\t\t\tpre.addEventListener('mousedown', function removeBraceSelected() {",
                    "\t\t\t\t// the code element might have been replaced",
                    "\t\t\t\tvar code = pre.querySelector('code');",
                    "\t\t\t\tArray.prototype.slice.call(code.querySelectorAll('.brace-selected')).forEach(function (e) {",
                    "\t\t\t\t\te.classList.remove('brace-selected');",
                    "\t\t\t\t});",
                    "\t\t\t});",
                    "\t\t\tObject.defineProperty(pre, '__listenerAdded', { value: true });",
                    "\t\t}",
                    "",
                    "\t\t/** @type {HTMLSpanElement[]} */",
                    "\t\tvar punctuation = Array.prototype.slice.call(code.querySelectorAll('span.token.punctuation'));",
                    "",
                    "\t\t/** @type {{ index: number, open: boolean, element: HTMLElement }[]} */",
                    "\t\tvar allBraces = [];",
                    "",
                    "\t\ttoMatch.forEach(function (open) {",
                    "\t\t\tvar close = PARTNER[open];",
                    "\t\t\tvar name = NAMES[open];",
                    "",
                    "\t\t\t/** @type {[number, number][]} */",
                    "\t\t\tvar pairs = [];",
                    "\t\t\t/** @type {number[]} */",
                    "\t\t\tvar openStack = [];",
                    "",
                    "\t\t\tfor (var i = 0; i < punctuation.length; i++) {",
                    "\t\t\t\tvar element = punctuation[i];",
                    "\t\t\t\tif (element.childElementCount == 0) {",
                    "\t\t\t\t\tvar text = element.textContent;",
                    "\t\t\t\t\ttext = BRACE_ALIAS_MAP[text] || text;",
                    "\t\t\t\t\tif (text === open) {",
                    "\t\t\t\t\t\tallBraces.push({ index: i, open: true, element: element });",
                    "\t\t\t\t\t\telement.classList.add(name);",
                    "\t\t\t\t\t\telement.classList.add('brace-open');",
                    "\t\t\t\t\t\topenStack.push(i);",
                    "\t\t\t\t\t} else if (text === close) {",
                    "\t\t\t\t\t\tallBraces.push({ index: i, open: false, element: element });",
                    "\t\t\t\t\t\telement.classList.add(name);",
                    "\t\t\t\t\t\telement.classList.add('brace-close');",
                    "\t\t\t\t\t\tif (openStack.length) {",
                    "\t\t\t\t\t\t\tpairs.push([i, openStack.pop()]);",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\tpairs.forEach(function (pair) {",
                    "\t\t\t\tvar pairId = 'pair-' + (pairIdCounter++) + '-';",
                    "",
                    "\t\t\t\tvar opening = punctuation[pair[0]];",
                    "\t\t\t\tvar closing = punctuation[pair[1]];",
                    "",
                    "\t\t\t\topening.id = pairId + 'open';",
                    "\t\t\t\tclosing.id = pairId + 'close';",
                    "",
                    "\t\t\t\t[opening, closing].forEach(function (e) {",
                    "\t\t\t\t\te.addEventListener('mouseenter', hoverBrace);",
                    "\t\t\t\t\te.addEventListener('mouseleave', leaveBrace);",
                    "\t\t\t\t\te.addEventListener('click', clickBrace);",
                    "\t\t\t\t});",
                    "\t\t\t});",
                    "\t\t});",
                    "",
                    "\t\tvar level = 0;",
                    "\t\tallBraces.sort(function (a, b) { return a.index - b.index; });",
                    "\t\tallBraces.forEach(function (brace) {",
                    "\t\t\tif (brace.open) {",
                    "\t\t\t\tbrace.element.classList.add('brace-level-' + (level % LEVEL_WARP + 1));",
                    "\t\t\t\tlevel++;",
                    "\t\t\t} else {",
                    "\t\t\t\tlevel = Math.max(0, level - 1);",
                    "\t\t\t\tbrace.element.classList.add('brace-level-' + (level % LEVEL_WARP + 1));",
                    "\t\t\t}",
                    "\t\t});",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-match-braces.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var d={\"(\":\")\",\"[\":\"]\",\"{\":\"}\"},u={\"(\":\"brace-round\",\"[\":\"brace-square\",\"{\":\"brace-curly\"},f={\"${\":\"{\"},h=0,n=/^(pair-\\d+-)(open|close)$/;Prism.hooks.add(\"complete\",function(e){var t=e.element,n=t.parentElement;if(n&&\"PRE\"==n.tagName){var c=[];if(Prism.util.isActive(t,\"match-braces\")&&c.push(\"(\",\"[\",\"{\"),0!=c.length){n.__listenerAdded||(n.addEventListener(\"mousedown\",function(){var e=n.querySelector(\"code\");Array.prototype.slice.call(e.querySelectorAll(\".brace-selected\")).forEach(function(e){e.classList.remove(\"brace-selected\")})}),Object.defineProperty(n,\"__listenerAdded\",{value:!0}));var o=Array.prototype.slice.call(t.querySelectorAll(\"span.token.punctuation\")),l=[];c.forEach(function(e){for(var t=d[e],n=u[e],c=[],r=[],s=0;s<o.length;s++){var a=o[s];if(0==a.childElementCount){var i=a.textContent;(i=f[i]||i)===e?(l.push({index:s,open:!0,element:a}),a.classList.add(n),a.classList.add(\"brace-open\"),r.push(s)):i===t&&(l.push({index:s,open:!1,element:a}),a.classList.add(n),a.classList.add(\"brace-close\"),r.length&&c.push([s,r.pop()]))}}c.forEach(function(e){var t=\"pair-\"+h+++\"-\",n=o[e[0]],c=o[e[1]];n.id=t+\"open\",c.id=t+\"close\",[n,c].forEach(function(e){e.addEventListener(\"mouseenter\",p),e.addEventListener(\"mouseleave\",v),e.addEventListener(\"click\",m)})})});var r=0;l.sort(function(e,t){return e.index-t.index}),l.forEach(function(e){e.open?(e.element.classList.add(\"brace-level-\"+(r%12+1)),r++):(r=Math.max(0,r-1),e.element.classList.add(\"brace-level-\"+(r%12+1)))})}}})}function e(e){var t=n.exec(e.id);return document.querySelector(\"#\"+t[1]+(\"open\"==t[2]?\"close\":\"open\"))}function p(){Prism.util.isActive(this,\"brace-hover\",!0)&&[this,e(this)].forEach(function(e){e.classList.add(\"brace-hover\")})}function v(){[this,e(this)].forEach(function(e){e.classList.remove(\"brace-hover\")})}function m(){Prism.util.isActive(this,\"brace-select\",!0)&&[this,e(this)].forEach(function(e){e.classList.add(\"brace-selected\")})}}();"
                ]
            }
        },
        "normalize-whitespace": {
            "demo.html": {},
            "index.html": {},
            "prism-normalize-whitespace.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "var assign = Object.assign || function (obj1, obj2) {",
                    "\tfor (var name in obj2) {",
                    "\t\tif (obj2.hasOwnProperty(name))",
                    "\t\t\tobj1[name] = obj2[name];",
                    "\t}",
                    "\treturn obj1;",
                    "}",
                    "",
                    "function NormalizeWhitespace(defaults) {",
                    "\tthis.defaults = assign({}, defaults);",
                    "}",
                    "",
                    "function toCamelCase(value) {",
                    "\treturn value.replace(/-(\\w)/g, function(match, firstChar) {",
                    "\t\treturn firstChar.toUpperCase();",
                    "\t});",
                    "}",
                    "",
                    "function tabLen(str) {",
                    "\tvar res = 0;",
                    "\tfor (var i = 0; i < str.length; ++i) {",
                    "\t\tif (str.charCodeAt(i) == '\\t'.charCodeAt(0))",
                    "\t\t\tres += 3;",
                    "\t}",
                    "\treturn str.length + res;",
                    "}",
                    "",
                    "NormalizeWhitespace.prototype = {",
                    "\tsetDefaults: function (defaults) {",
                    "\t\tthis.defaults = assign(this.defaults, defaults);",
                    "\t},",
                    "\tnormalize: function (input, settings) {",
                    "\t\tsettings = assign(this.defaults, settings);",
                    "",
                    "\t\tfor (var name in settings) {",
                    "\t\t\tvar methodName = toCamelCase(name);",
                    "\t\t\tif (name !== \"normalize\" && methodName !== 'setDefaults' &&",
                    "\t\t\t\t\tsettings[name] && this[methodName]) {",
                    "\t\t\t\tinput = this[methodName].call(this, input, settings[name]);",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\treturn input;",
                    "\t},",
                    "",
                    "\t/*",
                    "\t * Normalization methods",
                    "\t */",
                    "\tleftTrim: function (input) {",
                    "\t\treturn input.replace(/^\\s+/, '');",
                    "\t},",
                    "\trightTrim: function (input) {",
                    "\t\treturn input.replace(/\\s+$/, '');",
                    "\t},",
                    "\ttabsToSpaces: function (input, spaces) {",
                    "\t\tspaces = spaces|0 || 4;",
                    "\t\treturn input.replace(/\\t/g, new Array(++spaces).join(' '));",
                    "\t},",
                    "\tspacesToTabs: function (input, spaces) {",
                    "\t\tspaces = spaces|0 || 4;",
                    "\t\treturn input.replace(RegExp(' {' + spaces + '}', 'g'), '\\t');",
                    "\t},",
                    "\tremoveTrailing: function (input) {",
                    "\t\treturn input.replace(/\\s*?$/gm, '');",
                    "\t},",
                    "\t// Support for deprecated plugin remove-initial-line-feed",
                    "\tremoveInitialLineFeed: function (input) {",
                    "\t\treturn input.replace(/^(?:\\r?\\n|\\r)/, '');",
                    "\t},",
                    "\tremoveIndent: function (input) {",
                    "\t\tvar indents = input.match(/^[^\\S\\n\\r]*(?=\\S)/gm);",
                    "",
                    "\t\tif (!indents || !indents[0].length)",
                    "\t\t\treturn input;",
                    "",
                    "\t\tindents.sort(function(a, b){return a.length - b.length; });",
                    "",
                    "\t\tif (!indents[0].length)",
                    "\t\t\treturn input;",
                    "",
                    "\t\treturn input.replace(RegExp('^' + indents[0], 'gm'), '');",
                    "\t},",
                    "\tindent: function (input, tabs) {",
                    "\t\treturn input.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++tabs).join('\\t') + '$&');",
                    "\t},",
                    "\tbreakLines: function (input, characters) {",
                    "\t\tcharacters = (characters === true) ? 80 : characters|0 || 80;",
                    "",
                    "\t\tvar lines = input.split('\\n');",
                    "\t\tfor (var i = 0; i < lines.length; ++i) {",
                    "\t\t\tif (tabLen(lines[i]) <= characters)",
                    "\t\t\t\tcontinue;",
                    "",
                    "\t\t\tvar line = lines[i].split(/(\\s+)/g),",
                    "\t\t\t    len = 0;",
                    "",
                    "\t\t\tfor (var j = 0; j < line.length; ++j) {",
                    "\t\t\t\tvar tl = tabLen(line[j]);",
                    "\t\t\t\tlen += tl;",
                    "\t\t\t\tif (len > characters) {",
                    "\t\t\t\t\tline[j] = '\\n' + line[j];",
                    "\t\t\t\t\tlen = tl;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\tlines[i] = line.join('');",
                    "\t\t}",
                    "\t\treturn lines.join('\\n');",
                    "\t}",
                    "};",
                    "",
                    "// Support node modules",
                    "if (typeof module !== 'undefined' && module.exports) {",
                    "\tmodule.exports = NormalizeWhitespace;",
                    "}",
                    "",
                    "// Exit if prism is not loaded",
                    "if (typeof Prism === 'undefined') {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.plugins.NormalizeWhitespace = new NormalizeWhitespace({",
                    "\t'remove-trailing': true,",
                    "\t'remove-indent': true,",
                    "\t'left-trim': true,",
                    "\t'right-trim': true,",
                    "\t/*'break-lines': 80,",
                    "\t'indent': 2,",
                    "\t'remove-initial-line-feed': false,",
                    "\t'tabs-to-spaces': 4,",
                    "\t'spaces-to-tabs': 4*/",
                    "});",
                    "",
                    "Prism.hooks.add('before-sanity-check', function (env) {",
                    "\tvar Normalizer = Prism.plugins.NormalizeWhitespace;",
                    "",
                    "\t// Check settings",
                    "\tif (env.settings && env.settings['whitespace-normalization'] === false) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Check classes",
                    "\tif (!Prism.util.isActive(env.element, 'whitespace-normalization', true)) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Simple mode if there is no env.element",
                    "\tif ((!env.element || !env.element.parentNode) && env.code) {",
                    "\t\tenv.code = Normalizer.normalize(env.code, env.settings);",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Normal mode",
                    "\tvar pre = env.element.parentNode;",
                    "\tif (!env.code || !pre || pre.nodeName.toLowerCase() !== 'pre') {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar children = pre.childNodes,",
                    "\t    before = '',",
                    "\t    after = '',",
                    "\t    codeFound = false;",
                    "",
                    "\t// Move surrounding whitespace from the <pre> tag into the <code> tag",
                    "\tfor (var i = 0; i < children.length; ++i) {",
                    "\t\tvar node = children[i];",
                    "",
                    "\t\tif (node == env.element) {",
                    "\t\t\tcodeFound = true;",
                    "\t\t} else if (node.nodeName === \"#text\") {",
                    "\t\t\tif (codeFound) {",
                    "\t\t\t\tafter += node.nodeValue;",
                    "\t\t\t} else {",
                    "\t\t\t\tbefore += node.nodeValue;",
                    "\t\t\t}",
                    "",
                    "\t\t\tpre.removeChild(node);",
                    "\t\t\t--i;",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tif (!env.element.children.length || !Prism.plugins.KeepMarkup) {",
                    "\t\tenv.code = before + env.code + after;",
                    "\t\tenv.code = Normalizer.normalize(env.code, env.settings);",
                    "\t} else {",
                    "\t\t// Preserve markup for keep-markup plugin",
                    "\t\tvar html = before + env.element.innerHTML + after;",
                    "\t\tenv.element.innerHTML = Normalizer.normalize(html, env.settings);",
                    "\t\tenv.code = env.element.textContent;",
                    "\t}",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-normalize-whitespace.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){var i=Object.assign||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e};function e(e){this.defaults=i({},e)}function s(e){for(var n=0,t=0;t<e.length;++t)e.charCodeAt(t)==\"\\t\".charCodeAt(0)&&(n+=3);return e.length+n}e.prototype={setDefaults:function(e){this.defaults=i(this.defaults,e)},normalize:function(e,n){for(var t in n=i(this.defaults,n)){var r=t.replace(/-(\\w)/g,function(e,n){return n.toUpperCase()});\"normalize\"!==t&&\"setDefaults\"!==r&&n[t]&&this[r]&&(e=this[r].call(this,e,n[t]))}return e},leftTrim:function(e){return e.replace(/^\\s+/,\"\")},rightTrim:function(e){return e.replace(/\\s+$/,\"\")},tabsToSpaces:function(e,n){return n=0|n||4,e.replace(/\\t/g,new Array(++n).join(\" \"))},spacesToTabs:function(e,n){return n=0|n||4,e.replace(RegExp(\" {\"+n+\"}\",\"g\"),\"\\t\")},removeTrailing:function(e){return e.replace(/\\s*?$/gm,\"\")},removeInitialLineFeed:function(e){return e.replace(/^(?:\\r?\\n|\\r)/,\"\")},removeIndent:function(e){var n=e.match(/^[^\\S\\n\\r]*(?=\\S)/gm);return n&&n[0].length?(n.sort(function(e,n){return e.length-n.length}),n[0].length?e.replace(RegExp(\"^\"+n[0],\"gm\"),\"\"):e):e},indent:function(e,n){return e.replace(/^[^\\S\\n\\r]*(?=\\S)/gm,new Array(++n).join(\"\\t\")+\"$&\")},breakLines:function(e,n){n=!0===n?80:0|n||80;for(var t=e.split(\"\\n\"),r=0;r<t.length;++r)if(!(s(t[r])<=n)){for(var i=t[r].split(/(\\s+)/g),o=0,a=0;a<i.length;++a){var l=s(i[a]);n<(o+=l)&&(i[a]=\"\\n\"+i[a],o=l)}t[r]=i.join(\"\")}return t.join(\"\\n\")}},\"undefined\"!=typeof module&&module.exports&&(module.exports=e),\"undefined\"!=typeof Prism&&(Prism.plugins.NormalizeWhitespace=new e({\"remove-trailing\":!0,\"remove-indent\":!0,\"left-trim\":!0,\"right-trim\":!0}),Prism.hooks.add(\"before-sanity-check\",function(e){var n=Prism.plugins.NormalizeWhitespace;if((!e.settings||!1!==e.settings[\"whitespace-normalization\"])&&Prism.util.isActive(e.element,\"whitespace-normalization\",!0))if(e.element&&e.element.parentNode||!e.code){var t=e.element.parentNode;if(e.code&&t&&\"pre\"===t.nodeName.toLowerCase()){for(var r=t.childNodes,i=\"\",o=\"\",a=!1,l=0;l<r.length;++l){var s=r[l];s==e.element?a=!0:\"#text\"===s.nodeName&&(a?o+=s.nodeValue:i+=s.nodeValue,t.removeChild(s),--l)}if(e.element.children.length&&Prism.plugins.KeepMarkup){var c=i+e.element.innerHTML+o;e.element.innerHTML=n.normalize(c,e.settings),e.code=e.element.textContent}else e.code=i+e.code+o,e.code=n.normalize(e.code,e.settings)}}else e.code=n.normalize(e.code,e.settings)}))}();"
                ]
            }
        },
        "previewers": {
            "index.html": {},
            "prism-previewers.css": {},
            "prism-previewers.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\t!self.document || !Function.prototype.bind",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar previewers = {",
                    "\t\t// gradient must be defined before color and angle",
                    "\t\t'gradient': {",
                    "\t\t\tcreate: (function () {",
                    "",
                    "\t\t\t\t// Stores already processed gradients so that we don't",
                    "\t\t\t\t// make the conversion every time the previewer is shown",
                    "\t\t\t\tvar cache = {};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Returns a W3C-valid linear gradient",
                    "\t\t\t\t * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)",
                    "\t\t\t\t * @param {string} func Gradient function name (\"linear-gradient\")",
                    "\t\t\t\t * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CLinearGradient = function(prefix, func, values) {",
                    "\t\t\t\t\t// Default value for angle",
                    "\t\t\t\t\tvar angle = '180deg';",
                    "",
                    "\t\t\t\t\tif (/^(?:-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:deg|rad)|to\\b|top|right|bottom|left)/.test(values[0])) {",
                    "\t\t\t\t\t\tangle = values.shift();",
                    "\t\t\t\t\t\tif (angle.indexOf('to ') < 0) {",
                    "\t\t\t\t\t\t\t// Angle uses old keywords",
                    "\t\t\t\t\t\t\t// W3C syntax uses \"to\" + opposite keywords",
                    "\t\t\t\t\t\t\tif (angle.indexOf('top') >= 0) {",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom right';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom left';",
                    "\t\t\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('bottom') >= 0) {",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top right';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top left';",
                    "\t\t\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\tangle = 'to right';",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\tangle = 'to left';",
                    "\t\t\t\t\t\t\t} else if (prefix) {",
                    "\t\t\t\t\t\t\t\t// Angle is shifted by 90deg in prefixed gradients",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('deg') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = (90 - parseFloat(angle)) + 'deg';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('rad') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = (Math.PI / 2 - parseFloat(angle)) + 'rad';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\treturn func + '(' + angle + ',' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Returns a W3C-valid radial gradient",
                    "\t\t\t\t * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)",
                    "\t\t\t\t * @param {string} func Gradient function name (\"linear-gradient\")",
                    "\t\t\t\t * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CRadialGradient = function(prefix, func, values) {",
                    "\t\t\t\t\tif (values[0].indexOf('at') < 0) {",
                    "\t\t\t\t\t\t// Looks like old syntax",
                    "",
                    "\t\t\t\t\t\t// Default values",
                    "\t\t\t\t\t\tvar position = 'center';",
                    "\t\t\t\t\t\tvar shape = 'ellipse';",
                    "\t\t\t\t\t\tvar size = 'farthest-corner';",
                    "",
                    "\t\t\t\t\t\tif (/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(values[0])) {",
                    "\t\t\t\t\t\t\t// Found a position",
                    "\t\t\t\t\t\t\t// Remove angle value, if any",
                    "\t\t\t\t\t\t\tposition = values.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/, '');",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tif (/\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(values[0])) {",
                    "\t\t\t\t\t\t\t// Found a shape and/or size",
                    "\t\t\t\t\t\t\tvar shapeSizeParts = values.shift().split(/\\s+/);",
                    "\t\t\t\t\t\t\tif (shapeSizeParts[0] && (shapeSizeParts[0] === 'circle' || shapeSizeParts[0] === 'ellipse')) {",
                    "\t\t\t\t\t\t\t\tshape = shapeSizeParts.shift();",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\tif (shapeSizeParts[0]) {",
                    "\t\t\t\t\t\t\t\tsize = shapeSizeParts.shift();",
                    "\t\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\t\t// Old keywords are converted to their synonyms",
                    "\t\t\t\t\t\t\tif (size === 'cover') {",
                    "\t\t\t\t\t\t\t\tsize = 'farthest-corner';",
                    "\t\t\t\t\t\t\t} else if (size === 'contain') {",
                    "\t\t\t\t\t\t\t\tsize = 'clothest-side';",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\treturn func + '(' + shape + ' ' + size + ' at ' + position + ',' + values.join(',') + ')';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\treturn func + '(' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Converts a gradient to a W3C-valid one",
                    "\t\t\t\t * Does not support old webkit syntax (-webkit-gradient(linear...) and -webkit-gradient(radial...))",
                    "\t\t\t\t * @param {string} gradient The CSS gradient",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CGradient = function(gradient) {",
                    "\t\t\t\t\tif (cache[gradient]) {",
                    "\t\t\t\t\t\treturn cache[gradient];",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tvar parts = gradient.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/);",
                    "\t\t\t\t\t// \"\", \"-moz-\", etc.",
                    "\t\t\t\t\tvar prefix = parts && parts[1];",
                    "\t\t\t\t\t// \"linear-gradient\", \"radial-gradient\", etc.",
                    "\t\t\t\t\tvar func = parts && parts[2];",
                    "",
                    "\t\t\t\t\tvar values = gradient.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g, '').split(/\\s*,\\s*/);",
                    "",
                    "\t\t\t\t\tif (func.indexOf('linear') >= 0) {",
                    "\t\t\t\t\t\treturn cache[gradient] = convertToW3CLinearGradient(prefix, func, values);",
                    "\t\t\t\t\t} else if (func.indexOf('radial') >= 0) {",
                    "\t\t\t\t\t\treturn cache[gradient] = convertToW3CRadialGradient(prefix, func, values);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\treturn cache[gradient] = func + '(' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\treturn function () {",
                    "\t\t\t\t\tnew Prism.plugins.Previewer('gradient', function(value) {",
                    "\t\t\t\t\t\tthis.firstChild.style.backgroundImage = '';",
                    "\t\t\t\t\t\tthis.firstChild.style.backgroundImage = convertToW3CGradient(value);",
                    "\t\t\t\t\t\treturn !!this.firstChild.style.backgroundImage;",
                    "\t\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\t\tthis._elt.innerHTML = '<div></div>';",
                    "\t\t\t\t\t});",
                    "\t\t\t\t};",
                    "\t\t\t}()),",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'gradient': {",
                    "\t\t\t\t\tpattern: /(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'angle': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('angle', function(value) {",
                    "\t\t\t\t\tvar num = parseFloat(value);",
                    "\t\t\t\t\tvar unit = value.match(/[a-z]+$/i);",
                    "\t\t\t\t\tvar max, percentage;",
                    "\t\t\t\t\tif (!num || !unit) {",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tunit = unit[0];",
                    "",
                    "\t\t\t\t\tswitch(unit) {",
                    "\t\t\t\t\t\tcase 'deg':",
                    "\t\t\t\t\t\t\tmax = 360;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'grad':",
                    "\t\t\t\t\t\t\tmax = 400;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'rad':",
                    "\t\t\t\t\t\t\tmax = 2 * Math.PI;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'turn':",
                    "\t\t\t\t\t\t\tmax = 1;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tpercentage = 100 * num/max;",
                    "\t\t\t\t\tpercentage %= 100;",
                    "",
                    "\t\t\t\t\tthis[(num < 0? 'set' : 'remove') + 'Attribute']('data-negative', '');",
                    "\t\t\t\t\tthis.querySelector('circle').style.strokeDasharray = Math.abs(percentage) + ',500';",
                    "\t\t\t\t\treturn true;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' +",
                    "\t\t\t\t\t\t'<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'angle': /(?:\\b|\\B-|(?=\\B\\.))(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:deg|g?rad|turn)\\b/i",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'operator',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'color': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('color', function(value) {",
                    "\t\t\t\t\tthis.style.backgroundColor = '';",
                    "\t\t\t\t\tthis.style.backgroundColor = value;",
                    "\t\t\t\t\treturn !!this.style.backgroundColor;",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'color': [Prism.languages.css['hexcode']].concat(Prism.languages.css['color'])",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t// CSS extras is required, so css and scss are not necessary",
                    "\t\t\t\t'css': false,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': false,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'easing': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('easing', function (value) {",
                    "",
                    "\t\t\t\t\tvalue = {",
                    "\t\t\t\t\t\t'linear': '0,0,1,1',",
                    "\t\t\t\t\t\t'ease': '.25,.1,.25,1',",
                    "\t\t\t\t\t\t'ease-in': '.42,0,1,1',",
                    "\t\t\t\t\t\t'ease-out': '0,0,.58,1',",
                    "\t\t\t\t\t\t'ease-in-out':'.42,0,.58,1'",
                    "\t\t\t\t\t}[value] || value;",
                    "",
                    "\t\t\t\t\tvar p = value.match(/-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/g);",
                    "",
                    "\t\t\t\t\tif(p.length === 4) {",
                    "\t\t\t\t\t\tp = p.map(function(p, i) { return (i % 2? 1 - p : p) * 100; });",
                    "",
                    "\t\t\t\t\t\tthis.querySelector('path').setAttribute('d', 'M0,100 C' + p[0] + ',' + p[1] + ', ' + p[2] + ',' + p[3] + ', 100,0');",
                    "",
                    "\t\t\t\t\t\tvar lines = this.querySelectorAll('line');",
                    "\t\t\t\t\t\tlines[0].setAttribute('x2', p[0]);",
                    "\t\t\t\t\t\tlines[0].setAttribute('y2', p[1]);",
                    "\t\t\t\t\t\tlines[1].setAttribute('x2', p[2]);",
                    "\t\t\t\t\t\tlines[1].setAttribute('y2', p[3]);",
                    "",
                    "\t\t\t\t\t\treturn true;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\treturn false;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\">' +",
                    "\t\t\t\t\t\t'<defs>' +",
                    "\t\t\t\t\t\t'<marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\">' +",
                    "\t\t\t\t\t\t'<circle cx=\"2\" cy=\"2\" r=\"1.5\" />' +",
                    "\t\t\t\t\t\t'</marker>' +",
                    "\t\t\t\t\t\t'</defs>' +",
                    "\t\t\t\t\t\t'<path d=\"M0,100 C20,50, 40,30, 100,0\" />' +",
                    "\t\t\t\t\t\t'<line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url(#prism-previewer-easing-marker)\" marker-end=\"url(#prism-previewer-easing-marker)\" />' +",
                    "\t\t\t\t\t\t'<line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url(#prism-previewer-easing-marker)\" marker-end=\"url(#prism-previewer-easing-marker)\" />' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'easing': {",
                    "\t\t\t\t\tpattern: /\\bcubic-bezier\\((?:-?(?:\\d+(?:\\.\\d+)?|\\.\\d+),\\s*){3}-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "",
                    "\t\t'time': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('time', function(value) {",
                    "\t\t\t\t\tvar num = parseFloat(value);",
                    "\t\t\t\t\tvar unit = value.match(/[a-z]+$/i);",
                    "\t\t\t\t\tif (!num || !unit) {",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tunit = unit[0];",
                    "\t\t\t\t\tthis.querySelector('circle').style.animationDuration = 2 * num + unit;",
                    "\t\t\t\t\treturn true;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' +",
                    "\t\t\t\t\t\t'<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'time': /(?:\\b|\\B-|(?=\\B\\.))(?:\\d+(?:\\.\\d+)?|\\.\\d+)m?s\\b/i",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'operator',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns the absolute X, Y offsets for an element",
                    "\t * @param {HTMLElement} element",
                    "\t * @returns {{top: number, right: number, bottom: number, left: number, width: number, height: number}}",
                    "\t */",
                    "\tvar getOffset = function (element) {",
                    "\t\tvar elementBounds = element.getBoundingClientRect();",
                    "\t\tvar left = elementBounds.left;",
                    "\t\tvar top = elementBounds.top;",
                    "\t\tvar documentBounds = document.documentElement.getBoundingClientRect();",
                    "\t\tleft -= documentBounds.left;",
                    "\t\ttop -= documentBounds.top;",
                    "",
                    "\t\treturn {",
                    "\t\t\ttop: top,",
                    "\t\t\tright: innerWidth - left - elementBounds.width,",
                    "\t\t\tbottom: innerHeight - top - elementBounds.height,",
                    "\t\t\tleft: left,",
                    "\t\t\twidth: elementBounds.width,",
                    "\t\t\theight: elementBounds.height",
                    "\t\t};",
                    "\t};",
                    "",
                    "\tvar tokenRegexp = /(?:^|\\s)token(?=$|\\s)/;",
                    "\tvar activeRegexp = /(?:^|\\s)active(?=$|\\s)/g;",
                    "\tvar flippedRegexp = /(?:^|\\s)flipped(?=$|\\s)/g;",
                    "",
                    "\t/**",
                    "\t * Previewer constructor",
                    "\t * @param {string} type Unique previewer type",
                    "\t * @param {function} updater Function that will be called on mouseover.",
                    "\t * @param {string[]|string=} supportedLanguages Aliases of the languages this previewer must be enabled for. Defaults to \"*\", all languages.",
                    "\t * @param {function=} initializer Function that will be called on initialization.",
                    "\t * @constructor",
                    "\t */",
                    "\tvar Previewer = function (type, updater, supportedLanguages, initializer) {",
                    "\t\tthis._elt = null;",
                    "\t\tthis._type = type;",
                    "\t\tthis._clsRegexp = RegExp('(?:^|\\\\s)' + type + '(?=$|\\\\s)');",
                    "\t\tthis._token = null;",
                    "\t\tthis.updater = updater;",
                    "\t\tthis._mouseout = this.mouseout.bind(this);",
                    "\t\tthis.initializer = initializer;",
                    "",
                    "\t\tvar self = this;",
                    "",
                    "\t\tif (!supportedLanguages) {",
                    "\t\t\tsupportedLanguages = ['*'];",
                    "\t\t}",
                    "\t\tif (!Array.isArray(supportedLanguages)) {",
                    "\t\t\tsupportedLanguages = [supportedLanguages];",
                    "\t\t}",
                    "\t\tsupportedLanguages.forEach(function (lang) {",
                    "\t\t\tif (typeof lang !== 'string') {",
                    "\t\t\t\tlang = lang.lang;",
                    "\t\t\t}",
                    "\t\t\tif (!Previewer.byLanguages[lang]) {",
                    "\t\t\t\tPreviewer.byLanguages[lang] = [];",
                    "\t\t\t}",
                    "\t\t\tif (Previewer.byLanguages[lang].indexOf(self) < 0) {",
                    "\t\t\t\tPreviewer.byLanguages[lang].push(self);",
                    "\t\t\t}",
                    "\t\t});",
                    "\t\tPreviewer.byType[type] = this;",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Creates the HTML element for the previewer.",
                    "\t */",
                    "\tPreviewer.prototype.init = function () {",
                    "\t\tif (this._elt) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tthis._elt = document.createElement('div');",
                    "\t\tthis._elt.className = 'prism-previewer prism-previewer-' + this._type;",
                    "\t\tdocument.body.appendChild(this._elt);",
                    "\t\tif(this.initializer) {",
                    "\t\t\tthis.initializer();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPreviewer.prototype.isDisabled = function (token) {",
                    "\t\tdo {",
                    "\t\t\tif (token.hasAttribute && token.hasAttribute('data-previewers')) {",
                    "\t\t\t\tvar previewers = token.getAttribute('data-previewers');",
                    "\t\t\t\treturn (previewers || '').split(/\\s+/).indexOf(this._type) === -1;",
                    "\t\t\t}",
                    "\t\t} while(token = token.parentNode);",
                    "\t\treturn false;",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Checks the class name of each hovered element",
                    "\t * @param token",
                    "\t */",
                    "\tPreviewer.prototype.check = function (token) {",
                    "\t\tif (tokenRegexp.test(token.className) && this.isDisabled(token)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tdo {",
                    "\t\t\tif (tokenRegexp.test(token.className) && this._clsRegexp.test(token.className)) {",
                    "\t\t\t\tbreak;",
                    "\t\t\t}",
                    "\t\t} while(token = token.parentNode);",
                    "",
                    "\t\tif (token && token !== this._token) {",
                    "\t\t\tthis._token = token;",
                    "\t\t\tthis.show();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Called on mouseout",
                    "\t */",
                    "\tPreviewer.prototype.mouseout = function() {",
                    "\t\tthis._token.removeEventListener('mouseout', this._mouseout, false);",
                    "\t\tthis._token = null;",
                    "\t\tthis.hide();",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Shows the previewer positioned properly for the current token.",
                    "\t */",
                    "\tPreviewer.prototype.show = function () {",
                    "\t\tif (!this._elt) {",
                    "\t\t\tthis.init();",
                    "\t\t}",
                    "\t\tif (!this._token) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (this.updater.call(this._elt, this._token.textContent)) {",
                    "\t\t\tthis._token.addEventListener('mouseout', this._mouseout, false);",
                    "",
                    "\t\t\tvar offset = getOffset(this._token);",
                    "\t\t\tthis._elt.className += ' active';",
                    "",
                    "\t\t\tif (offset.top - this._elt.offsetHeight > 0) {",
                    "\t\t\t\tthis._elt.className = this._elt.className.replace(flippedRegexp, '');",
                    "\t\t\t\tthis._elt.style.top = offset.top + 'px';",
                    "\t\t\t\tthis._elt.style.bottom = '';",
                    "\t\t\t} else {",
                    "\t\t\t\tthis._elt.className +=  ' flipped';",
                    "\t\t\t\tthis._elt.style.bottom = offset.bottom + 'px';",
                    "\t\t\t\tthis._elt.style.top = '';",
                    "\t\t\t}",
                    "",
                    "\t\t\tthis._elt.style.left = offset.left + Math.min(200, offset.width / 2) + 'px';",
                    "\t\t} else {",
                    "\t\t\tthis.hide();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Hides the previewer.",
                    "\t */",
                    "\tPreviewer.prototype.hide = function () {",
                    "\t\tthis._elt.className = this._elt.className.replace(activeRegexp, '');",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Map of all registered previewers by language",
                    "\t * @type {{}}",
                    "\t */",
                    "\tPreviewer.byLanguages = {};",
                    "",
                    "\t/**",
                    "\t * Map of all registered previewers by type",
                    "\t * @type {{}}",
                    "\t */",
                    "\tPreviewer.byType = {};",
                    "",
                    "\t/**",
                    "\t * Initializes the mouseover event on the code block.",
                    "\t * @param {HTMLElement} elt The code block (env.element)",
                    "\t * @param {string} lang The language (env.language)",
                    "\t */",
                    "\tPreviewer.initEvents = function (elt, lang) {",
                    "\t\tvar previewers = [];",
                    "\t\tif (Previewer.byLanguages[lang]) {",
                    "\t\t\tpreviewers = previewers.concat(Previewer.byLanguages[lang]);",
                    "\t\t}",
                    "\t\tif (Previewer.byLanguages['*']) {",
                    "\t\t\tpreviewers = previewers.concat(Previewer.byLanguages['*']);",
                    "\t\t}",
                    "\t\telt.addEventListener('mouseover', function (e) {",
                    "\t\t\tvar target = e.target;",
                    "\t\t\tpreviewers.forEach(function (previewer) {",
                    "\t\t\t\tpreviewer.check(target);",
                    "\t\t\t});",
                    "\t\t}, false);",
                    "\t};",
                    "\tPrism.plugins.Previewer = Previewer;",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\tfor (var previewer in previewers) {",
                    "\t\t\tvar languages = previewers[previewer].languages;",
                    "\t\t\tif (env.language && languages[env.language] && !languages[env.language].initialized) {",
                    "\t\t\t\tvar lang = languages[env.language];",
                    "\t\t\t\tif (!Array.isArray(lang)) {",
                    "\t\t\t\t\tlang = [lang];",
                    "\t\t\t\t}",
                    "\t\t\t\tlang.forEach(function (lang) {",
                    "\t\t\t\t\tvar before, inside, root, skip;",
                    "\t\t\t\t\tif (lang === true) {",
                    "\t\t\t\t\t\tbefore = 'important';",
                    "\t\t\t\t\t\tinside = env.language;",
                    "\t\t\t\t\t\tlang = env.language;",
                    "\t\t\t\t\t} else {",
                    "\t\t\t\t\t\tbefore = lang.before || 'important';",
                    "\t\t\t\t\t\tinside = lang.inside || lang.lang;",
                    "\t\t\t\t\t\troot = lang.root || Prism.languages;",
                    "\t\t\t\t\t\tskip = lang.skip;",
                    "\t\t\t\t\t\tlang = env.language;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tif (!skip && Prism.languages[lang]) {",
                    "\t\t\t\t\t\tPrism.languages.insertBefore(inside, before, previewers[previewer].tokens, root);",
                    "\t\t\t\t\t\tenv.grammar = Prism.languages[lang];",
                    "",
                    "\t\t\t\t\t\tlanguages[env.language] = {initialized: true};",
                    "\t\t\t\t\t}",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "",
                    "\t// Initialize the previewers only when needed",
                    "\tPrism.hooks.add('after-highlight', function (env) {",
                    "\t\tif(Previewer.byLanguages['*'] || Previewer.byLanguages[env.language]) {",
                    "\t\t\tPreviewer.initEvents(env.element, env.language);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tfor (var previewer in previewers) {",
                    "\t\tpreviewers[previewer].create();",
                    "\t}",
                    "",
                    "}());"
                ]
            },
            "prism-previewers.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&self.document&&Function.prototype.bind){var r,s,o={gradient:{create:(r={},s=function(e){if(r[e])return r[e];var s=e.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/),t=s&&s[1],i=s&&s[2],a=e.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g,\"\").split(/\\s*,\\s*/);return 0<=i.indexOf(\"linear\")?r[e]=function(e,s,t){var i=\"180deg\";return/^(?:-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:deg|rad)|to\\b|top|right|bottom|left)/.test(t[0])&&(i=t.shift()).indexOf(\"to \")<0&&(0<=i.indexOf(\"top\")?i=0<=i.indexOf(\"left\")?\"to bottom right\":0<=i.indexOf(\"right\")?\"to bottom left\":\"to bottom\":0<=i.indexOf(\"bottom\")?i=0<=i.indexOf(\"left\")?\"to top right\":0<=i.indexOf(\"right\")?\"to top left\":\"to top\":0<=i.indexOf(\"left\")?i=\"to right\":0<=i.indexOf(\"right\")?i=\"to left\":e&&(0<=i.indexOf(\"deg\")?i=90-parseFloat(i)+\"deg\":0<=i.indexOf(\"rad\")&&(i=Math.PI/2-parseFloat(i)+\"rad\"))),s+\"(\"+i+\",\"+t.join(\",\")+\")\"}(t,i,a):0<=i.indexOf(\"radial\")?r[e]=function(e,s,t){if(t[0].indexOf(\"at\")<0){var i=\"center\",a=\"ellipse\",r=\"farthest-corner\";if(/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(t[0])&&(i=t.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/,\"\")),/\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(t[0])){var n=t.shift().split(/\\s+/);!n[0]||\"circle\"!==n[0]&&\"ellipse\"!==n[0]||(a=n.shift()),n[0]&&(r=n.shift()),\"cover\"===r?r=\"farthest-corner\":\"contain\"===r&&(r=\"clothest-side\")}return s+\"(\"+a+\" \"+r+\" at \"+i+\",\"+t.join(\",\")+\")\"}return s+\"(\"+t.join(\",\")+\")\"}(0,i,a):r[e]=i+\"(\"+a.join(\",\")+\")\"},function(){new Prism.plugins.Previewer(\"gradient\",function(e){return this.firstChild.style.backgroundImage=\"\",this.firstChild.style.backgroundImage=s(e),!!this.firstChild.style.backgroundImage},\"*\",function(){this._elt.innerHTML=\"<div></div>\"})}),tokens:{gradient:{pattern:/(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,inside:{function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,sass:[{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},angle:{create:function(){new Prism.plugins.Previewer(\"angle\",function(e){var s,t,i=parseFloat(e),a=e.match(/[a-z]+$/i);if(!i||!a)return!1;switch(a=a[0]){case\"deg\":s=360;break;case\"grad\":s=400;break;case\"rad\":s=2*Math.PI;break;case\"turn\":s=1}return t=100*i/s,t%=100,this[(i<0?\"set\":\"remove\")+\"Attribute\"](\"data-negative\",\"\"),this.querySelector(\"circle\").style.strokeDasharray=Math.abs(t)+\",500\",!0},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>'})},tokens:{angle:/(?:\\b|\\B-|(?=\\B\\.))(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:deg|g?rad|turn)\\b/i},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]},{lang:\"sass\",before:\"operator\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},color:{create:function(){new Prism.plugins.Previewer(\"color\",function(e){return this.style.backgroundColor=\"\",this.style.backgroundColor=e,!!this.style.backgroundColor})},tokens:{color:[Prism.languages.css.hexcode].concat(Prism.languages.css.color)},languages:{css:!1,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!1,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},easing:{create:function(){new Prism.plugins.Previewer(\"easing\",function(e){var s=(e={linear:\"0,0,1,1\",ease:\".25,.1,.25,1\",\"ease-in\":\".42,0,1,1\",\"ease-out\":\"0,0,.58,1\",\"ease-in-out\":\".42,0,.58,1\"}[e]||e).match(/-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/g);if(4!==s.length)return!1;s=s.map(function(e,s){return 100*(s%2?1-e:e)}),this.querySelector(\"path\").setAttribute(\"d\",\"M0,100 C\"+s[0]+\",\"+s[1]+\", \"+s[2]+\",\"+s[3]+\", 100,0\");var t=this.querySelectorAll(\"line\");return t[0].setAttribute(\"x2\",s[0]),t[0].setAttribute(\"y2\",s[1]),t[1].setAttribute(\"x2\",s[2]),t[1].setAttribute(\"y2\",s[3]),!0},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\"><defs><marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\"><circle cx=\"2\" cy=\"2\" r=\"1.5\" /></marker></defs><path d=\"M0,100 C20,50, 40,30, 100,0\" /><line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url(#prism-previewer-easing-marker)\" marker-end=\"url(#prism-previewer-easing-marker)\" /><line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url(#prism-previewer-easing-marker)\" marker-end=\"url(#prism-previewer-easing-marker)\" /></svg>'})},tokens:{easing:{pattern:/\\bcubic-bezier\\((?:-?(?:\\d+(?:\\.\\d+)?|\\.\\d+),\\s*){3}-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,inside:{function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,sass:[{lang:\"sass\",inside:\"inside\",before:\"punctuation\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},time:{create:function(){new Prism.plugins.Previewer(\"time\",function(e){var s=parseFloat(e),t=e.match(/[a-z]+$/i);return!(!s||!t)&&(t=t[0],this.querySelector(\"circle\").style.animationDuration=2*s+t,!0)},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>'})},tokens:{time:/(?:\\b|\\B-|(?=\\B\\.))(?:\\d+(?:\\.\\d+)?|\\.\\d+)m?s\\b/i},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]},{lang:\"sass\",before:\"operator\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}}},t=/(?:^|\\s)token(?=$|\\s)/,e=/(?:^|\\s)active(?=$|\\s)/g,i=/(?:^|\\s)flipped(?=$|\\s)/g,n=function(e,s,t,i){this._elt=null,this._type=e,this._clsRegexp=RegExp(\"(?:^|\\\\s)\"+e+\"(?=$|\\\\s)\"),this._token=null,this.updater=s,this._mouseout=this.mouseout.bind(this),this.initializer=i;var a=this;t||(t=[\"*\"]),Array.isArray(t)||(t=[t]),t.forEach(function(e){\"string\"!=typeof e&&(e=e.lang),n.byLanguages[e]||(n.byLanguages[e]=[]),n.byLanguages[e].indexOf(a)<0&&n.byLanguages[e].push(a)}),n.byType[e]=this};for(var a in n.prototype.init=function(){this._elt||(this._elt=document.createElement(\"div\"),this._elt.className=\"prism-previewer prism-previewer-\"+this._type,document.body.appendChild(this._elt),this.initializer&&this.initializer())},n.prototype.isDisabled=function(e){do{if(e.hasAttribute&&e.hasAttribute(\"data-previewers\"))return-1===(e.getAttribute(\"data-previewers\")||\"\").split(/\\s+/).indexOf(this._type)}while(e=e.parentNode);return!1},n.prototype.check=function(e){if(!t.test(e.className)||!this.isDisabled(e)){do{if(t.test(e.className)&&this._clsRegexp.test(e.className))break}while(e=e.parentNode);e&&e!==this._token&&(this._token=e,this.show())}},n.prototype.mouseout=function(){this._token.removeEventListener(\"mouseout\",this._mouseout,!1),this._token=null,this.hide()},n.prototype.show=function(){if(this._elt||this.init(),this._token)if(this.updater.call(this._elt,this._token.textContent)){this._token.addEventListener(\"mouseout\",this._mouseout,!1);var e=function(e){var s=e.getBoundingClientRect(),t=s.left,i=s.top,a=document.documentElement.getBoundingClientRect();return t-=a.left,{top:i-=a.top,right:innerWidth-t-s.width,bottom:innerHeight-i-s.height,left:t,width:s.width,height:s.height}}(this._token);this._elt.className+=\" active\",0<e.top-this._elt.offsetHeight?(this._elt.className=this._elt.className.replace(i,\"\"),this._elt.style.top=e.top+\"px\",this._elt.style.bottom=\"\"):(this._elt.className+=\" flipped\",this._elt.style.bottom=e.bottom+\"px\",this._elt.style.top=\"\"),this._elt.style.left=e.left+Math.min(200,e.width/2)+\"px\"}else this.hide()},n.prototype.hide=function(){this._elt.className=this._elt.className.replace(e,\"\")},n.byLanguages={},n.byType={},n.initEvents=function(e,s){var t=[];n.byLanguages[s]&&(t=t.concat(n.byLanguages[s])),n.byLanguages[\"*\"]&&(t=t.concat(n.byLanguages[\"*\"])),e.addEventListener(\"mouseover\",function(e){var s=e.target;t.forEach(function(e){e.check(s)})},!1)},Prism.plugins.Previewer=n,Prism.hooks.add(\"before-highlight\",function(r){for(var n in o){var l=o[n].languages;if(r.language&&l[r.language]&&!l[r.language].initialized){var e=l[r.language];Array.isArray(e)||(e=[e]),e.forEach(function(e){var s,t,i,a;e=(!0===e?(s=\"important\",t=r.language):(s=e.before||\"important\",t=e.inside||e.lang,i=e.root||Prism.languages,a=e.skip),r.language),!a&&Prism.languages[e]&&(Prism.languages.insertBefore(t,s,o[n].tokens,i),r.grammar=Prism.languages[e],l[r.language]={initialized:!0})})}}}),Prism.hooks.add(\"after-highlight\",function(e){(n.byLanguages[\"*\"]||n.byLanguages[e.language])&&n.initEvents(e.element,e.language)}),o)o[a].create()}}();"
                ]
            }
        },
        "remove-initial-line-feed": {
            "index.html": {},
            "prism-remove-initial-line-feed.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.hooks.add('before-sanity-check', function (env) {",
                    "\tif (env.code) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tvar clsReg = /(?:^|\\s)keep-initial-line-feed(?:\\s|$)/;",
                    "\t\tif (",
                    "\t\t\tpre && pre.nodeName.toLowerCase() === 'pre' &&",
                    "\t\t\t// Apply only if nor the <pre> or the <code> have the class",
                    "\t\t\t(!clsReg.test(pre.className) && !clsReg.test(env.element.className))",
                    "\t\t) {",
                    "\t\t\tenv.code = env.code.replace(/^(?:\\r?\\n|\\r)/, '');",
                    "\t\t}",
                    "\t}",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-remove-initial-line-feed.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&self.Prism&&self.document&&Prism.hooks.add(\"before-sanity-check\",function(e){if(e.code){var s=e.element.parentNode,n=/(?:^|\\s)keep-initial-line-feed(?:\\s|$)/;!s||\"pre\"!==s.nodeName.toLowerCase()||n.test(s.className)||n.test(e.element.className)||(e.code=e.code.replace(/^(?:\\r?\\n|\\r)/,\"\"))}});"
                ]
            }
        },
        "show-invisibles": {
            "index.html": {},
            "prism-show-invisibles.css": {},
            "prism-show-invisibles.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\ttypeof global !== 'undefined' && !global.Prism",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "",
                    "\tvar invisibles = {",
                    "\t\t'tab': /\\t/,",
                    "\t\t'crlf': /\\r\\n/,",
                    "\t\t'lf': /\\n/,",
                    "\t\t'cr': /\\r/,",
                    "\t\t'space': / /",
                    "\t};",
                    "",
                    "",
                    "\t/**",
                    "\t * Handles the recursive calling of `addInvisibles` for one token.",
                    "\t *",
                    "\t * @param {Object|Array} tokens The grammar or array which contains the token.",
                    "\t * @param {string|number} name The name or index of the token in `tokens`.",
                    "\t */",
                    "\tfunction handleToken(tokens, name) {",
                    "\t\tvar value = tokens[name];",
                    "",
                    "\t\tvar type = Prism.util.type(value);",
                    "\t\tswitch (type) {",
                    "\t\t\tcase 'RegExp':",
                    "\t\t\t\tvar inside = {};",
                    "\t\t\t\ttokens[name] = {",
                    "\t\t\t\t\tpattern: value,",
                    "\t\t\t\t\tinside: inside",
                    "\t\t\t\t};",
                    "\t\t\t\taddInvisibles(inside);",
                    "\t\t\t\tbreak;",
                    "",
                    "\t\t\tcase 'Array':",
                    "\t\t\t\tfor (var i = 0, l = value.length; i < l; i++) {",
                    "\t\t\t\t\thandleToken(value, i);",
                    "\t\t\t\t}",
                    "\t\t\t\tbreak;",
                    "",
                    "\t\t\tdefault: // 'Object'",
                    "\t\t\t\tvar inside = value.inside || (value.inside = {});",
                    "\t\t\t\taddInvisibles(inside);",
                    "\t\t\t\tbreak;",
                    "\t\t}",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Recursively adds patterns to match invisible characters to the given grammar (if not added already).",
                    "\t *",
                    "\t * @param {Object} grammar",
                    "\t */",
                    "\tfunction addInvisibles(grammar) {",
                    "\t\tif (!grammar || grammar['tab']) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// assign invisibles here to \"mark\" the grammar in case of self references",
                    "\t\tfor (var name in invisibles) {",
                    "\t\t\tif (invisibles.hasOwnProperty(name)) {",
                    "\t\t\t\tgrammar[name] = invisibles[name];",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tfor (var name in grammar) {",
                    "\t\t\tif (grammar.hasOwnProperty(name) && !invisibles[name]) {",
                    "\t\t\t\tif (name === 'rest') {",
                    "\t\t\t\t\taddInvisibles(grammar['rest']);",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\thandleToken(grammar, name);",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\taddInvisibles(env.grammar);",
                    "\t});",
                    "})();"
                ]
            },
            "prism-show-invisibles.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var i={tab:/\\t/,crlf:/\\r\\n/,lf:/\\n/,cr:/\\r/,space:/ /};Prism.hooks.add(\"before-highlight\",function(r){s(r.grammar)})}function f(r,e){var i=r[e];switch(Prism.util.type(i)){case\"RegExp\":var a={};r[e]={pattern:i,inside:a},s(a);break;case\"Array\":for(var n=0,t=i.length;n<t;n++)f(i,n);break;default:s(a=i.inside||(i.inside={}))}}function s(r){if(r&&!r.tab){for(var e in i)i.hasOwnProperty(e)&&(r[e]=i[e]);for(var e in r)r.hasOwnProperty(e)&&!i[e]&&(\"rest\"===e?s(r.rest):f(r,e))}}}();"
                ]
            }
        },
        "show-language": {
            "index.html": {},
            "prism-show-language.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tif (!Prism.plugins.toolbar) {",
                    "\t\tconsole.warn('Show Languages plugin loaded before Toolbar plugin.');",
                    "",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// The languages map is built automatically with gulp",
                    "\tvar Languages = /*languages_placeholder[*/{",
                    "\t\t\"none\": \"Plain text\",",
                    "\t\t\"html\": \"HTML\",",
                    "\t\t\"xml\": \"XML\",",
                    "\t\t\"svg\": \"SVG\",",
                    "\t\t\"mathml\": \"MathML\",",
                    "\t\t\"ssml\": \"SSML\",",
                    "\t\t\"rss\": \"RSS\",",
                    "\t\t\"css\": \"CSS\",",
                    "\t\t\"clike\": \"C-like\",",
                    "\t\t\"js\": \"JavaScript\",",
                    "\t\t\"abap\": \"ABAP\",",
                    "\t\t\"abnf\": \"ABNF\",",
                    "\t\t\"al\": \"AL\",",
                    "\t\t\"antlr4\": \"ANTLR4\",",
                    "\t\t\"g4\": \"ANTLR4\",",
                    "\t\t\"apacheconf\": \"Apache Configuration\",",
                    "\t\t\"apl\": \"APL\",",
                    "\t\t\"aql\": \"AQL\",",
                    "\t\t\"arff\": \"ARFF\",",
                    "\t\t\"asciidoc\": \"AsciiDoc\",",
                    "\t\t\"adoc\": \"AsciiDoc\",",
                    "\t\t\"aspnet\": \"ASP.NET (C#)\",",
                    "\t\t\"asm6502\": \"6502 Assembly\",",
                    "\t\t\"autohotkey\": \"AutoHotkey\",",
                    "\t\t\"autoit\": \"AutoIt\",",
                    "\t\t\"basic\": \"BASIC\",",
                    "\t\t\"bbcode\": \"BBcode\",",
                    "\t\t\"bnf\": \"BNF\",",
                    "\t\t\"rbnf\": \"RBNF\",",
                    "\t\t\"bsl\": \"BSL (1C:Enterprise)\",",
                    "\t\t\"oscript\": \"OneScript\",",
                    "\t\t\"csharp\": \"C#\",",
                    "\t\t\"cs\": \"C#\",",
                    "\t\t\"dotnet\": \"C#\",",
                    "\t\t\"cpp\": \"C++\",",
                    "\t\t\"cil\": \"CIL\",",
                    "\t\t\"cmake\": \"CMake\",",
                    "\t\t\"coffee\": \"CoffeeScript\",",
                    "\t\t\"conc\": \"Concurnas\",",
                    "\t\t\"csp\": \"Content-Security-Policy\",",
                    "\t\t\"css-extras\": \"CSS Extras\",",
                    "\t\t\"dataweave\": \"DataWeave\",",
                    "\t\t\"dax\": \"DAX\",",
                    "\t\t\"django\": \"Django/Jinja2\",",
                    "\t\t\"jinja2\": \"Django/Jinja2\",",
                    "\t\t\"dns-zone-file\": \"DNS zone file\",",
                    "\t\t\"dns-zone\": \"DNS zone file\",",
                    "\t\t\"dockerfile\": \"Docker\",",
                    "\t\t\"ebnf\": \"EBNF\",",
                    "\t\t\"editorconfig\": \"EditorConfig\",",
                    "\t\t\"ejs\": \"EJS\",",
                    "\t\t\"etlua\": \"Embedded Lua templating\",",
                    "\t\t\"erb\": \"ERB\",",
                    "\t\t\"excel-formula\": \"Excel Formula\",",
                    "\t\t\"xlsx\": \"Excel Formula\",",
                    "\t\t\"xls\": \"Excel Formula\",",
                    "\t\t\"fsharp\": \"F#\",",
                    "\t\t\"firestore-security-rules\": \"Firestore security rules\",",
                    "\t\t\"ftl\": \"FreeMarker Template Language\",",
                    "\t\t\"gml\": \"GameMaker Language\",",
                    "\t\t\"gamemakerlanguage\": \"GameMaker Language\",",
                    "\t\t\"gcode\": \"G-code\",",
                    "\t\t\"gdscript\": \"GDScript\",",
                    "\t\t\"gedcom\": \"GEDCOM\",",
                    "\t\t\"glsl\": \"GLSL\",",
                    "\t\t\"graphql\": \"GraphQL\",",
                    "\t\t\"hs\": \"Haskell\",",
                    "\t\t\"hcl\": \"HCL\",",
                    "\t\t\"hlsl\": \"HLSL\",",
                    "\t\t\"http\": \"HTTP\",",
                    "\t\t\"hpkp\": \"HTTP Public-Key-Pins\",",
                    "\t\t\"hsts\": \"HTTP Strict-Transport-Security\",",
                    "\t\t\"ichigojam\": \"IchigoJam\",",
                    "\t\t\"ignore\": \".ignore\",",
                    "\t\t\"gitignore\": \".gitignore\",",
                    "\t\t\"hgignore\": \".hgignore\",",
                    "\t\t\"npmignore\": \".npmignore\",",
                    "\t\t\"inform7\": \"Inform 7\",",
                    "\t\t\"javadoc\": \"JavaDoc\",",
                    "\t\t\"javadoclike\": \"JavaDoc-like\",",
                    "\t\t\"javastacktrace\": \"Java stack trace\",",
                    "\t\t\"jq\": \"JQ\",",
                    "\t\t\"jsdoc\": \"JSDoc\",",
                    "\t\t\"js-extras\": \"JS Extras\",",
                    "\t\t\"json\": \"JSON\",",
                    "\t\t\"webmanifest\": \"Web App Manifest\",",
                    "\t\t\"json5\": \"JSON5\",",
                    "\t\t\"jsonp\": \"JSONP\",",
                    "\t\t\"jsstacktrace\": \"JS stack trace\",",
                    "\t\t\"js-templates\": \"JS Templates\",",
                    "\t\t\"kts\": \"Kotlin Script\",",
                    "\t\t\"kt\": \"Kotlin\",",
                    "\t\t\"latex\": \"LaTeX\",",
                    "\t\t\"tex\": \"TeX\",",
                    "\t\t\"context\": \"ConTeXt\",",
                    "\t\t\"lilypond\": \"LilyPond\",",
                    "\t\t\"ly\": \"LilyPond\",",
                    "\t\t\"emacs\": \"Lisp\",",
                    "\t\t\"elisp\": \"Lisp\",",
                    "\t\t\"emacs-lisp\": \"Lisp\",",
                    "\t\t\"llvm\": \"LLVM IR\",",
                    "\t\t\"lolcode\": \"LOLCODE\",",
                    "\t\t\"md\": \"Markdown\",",
                    "\t\t\"markup-templating\": \"Markup templating\",",
                    "\t\t\"matlab\": \"MATLAB\",",
                    "\t\t\"mel\": \"MEL\",",
                    "\t\t\"mongodb\": \"MongoDB\",",
                    "\t\t\"moon\": \"MoonScript\",",
                    "\t\t\"n1ql\": \"N1QL\",",
                    "\t\t\"n4js\": \"N4JS\",",
                    "\t\t\"n4jsd\": \"N4JS\",",
                    "\t\t\"nand2tetris-hdl\": \"Nand To Tetris HDL\",",
                    "\t\t\"naniscript\": \"Naninovel Script\",",
                    "\t\t\"nani\": \"Naninovel Script\",",
                    "\t\t\"nasm\": \"NASM\",",
                    "\t\t\"neon\": \"NEON\",",
                    "\t\t\"nginx\": \"nginx\",",
                    "\t\t\"nsis\": \"NSIS\",",
                    "\t\t\"objectivec\": \"Objective-C\",",
                    "\t\t\"objc\": \"Objective-C\",",
                    "\t\t\"ocaml\": \"OCaml\",",
                    "\t\t\"opencl\": \"OpenCL\",",
                    "\t\t\"parigp\": \"PARI/GP\",",
                    "\t\t\"objectpascal\": \"Object Pascal\",",
                    "\t\t\"pcaxis\": \"PC-Axis\",",
                    "\t\t\"px\": \"PC-Axis\",",
                    "\t\t\"peoplecode\": \"PeopleCode\",",
                    "\t\t\"pcode\": \"PeopleCode\",",
                    "\t\t\"php\": \"PHP\",",
                    "\t\t\"phpdoc\": \"PHPDoc\",",
                    "\t\t\"php-extras\": \"PHP Extras\",",
                    "\t\t\"plsql\": \"PL/SQL\",",
                    "\t\t\"powerquery\": \"PowerQuery\",",
                    "\t\t\"pq\": \"PowerQuery\",",
                    "\t\t\"mscript\": \"PowerQuery\",",
                    "\t\t\"powershell\": \"PowerShell\",",
                    "\t\t\"promql\": \"PromQL\",",
                    "\t\t\"properties\": \".properties\",",
                    "\t\t\"protobuf\": \"Protocol Buffers\",",
                    "\t\t\"purebasic\": \"PureBasic\",",
                    "\t\t\"pbfasm\": \"PureBasic\",",
                    "\t\t\"purs\": \"PureScript\",",
                    "\t\t\"py\": \"Python\",",
                    "\t\t\"q\": \"Q (kdb+ database)\",",
                    "\t\t\"qml\": \"QML\",",
                    "\t\t\"rkt\": \"Racket\",",
                    "\t\t\"jsx\": \"React JSX\",",
                    "\t\t\"tsx\": \"React TSX\",",
                    "\t\t\"renpy\": \"Ren'py\",",
                    "\t\t\"rpy\": \"Ren'py\",",
                    "\t\t\"rest\": \"reST (reStructuredText)\",",
                    "\t\t\"robotframework\": \"Robot Framework\",",
                    "\t\t\"robot\": \"Robot Framework\",",
                    "\t\t\"rb\": \"Ruby\",",
                    "\t\t\"sas\": \"SAS\",",
                    "\t\t\"sass\": \"Sass (Sass)\",",
                    "\t\t\"scss\": \"Sass (Scss)\",",
                    "\t\t\"shell-session\": \"Shell session\",",
                    "\t\t\"sh-session\": \"Shell session\",",
                    "\t\t\"shellsession\": \"Shell session\",",
                    "\t\t\"sml\": \"SML\",",
                    "\t\t\"smlnj\": \"SML/NJ\",",
                    "\t\t\"solidity\": \"Solidity (Ethereum)\",",
                    "\t\t\"sol\": \"Solidity (Ethereum)\",",
                    "\t\t\"solution-file\": \"Solution file\",",
                    "\t\t\"sln\": \"Solution file\",",
                    "\t\t\"soy\": \"Soy (Closure Template)\",",
                    "\t\t\"sparql\": \"SPARQL\",",
                    "\t\t\"rq\": \"SPARQL\",",
                    "\t\t\"splunk-spl\": \"Splunk SPL\",",
                    "\t\t\"sqf\": \"SQF: Status Quo Function (Arma 3)\",",
                    "\t\t\"sql\": \"SQL\",",
                    "\t\t\"iecst\": \"Structured Text (IEC 61131-3)\",",
                    "\t\t\"t4-templating\": \"T4 templating\",",
                    "\t\t\"t4-cs\": \"T4 Text Templates (C#)\",",
                    "\t\t\"t4\": \"T4 Text Templates (C#)\",",
                    "\t\t\"t4-vb\": \"T4 Text Templates (VB)\",",
                    "\t\t\"tap\": \"TAP\",",
                    "\t\t\"tt2\": \"Template Toolkit 2\",",
                    "\t\t\"toml\": \"TOML\",",
                    "\t\t\"trig\": \"TriG\",",
                    "\t\t\"ts\": \"TypeScript\",",
                    "\t\t\"tsconfig\": \"TSConfig\",",
                    "\t\t\"uscript\": \"UnrealScript\",",
                    "\t\t\"uc\": \"UnrealScript\",",
                    "\t\t\"vbnet\": \"VB.Net\",",
                    "\t\t\"vhdl\": \"VHDL\",",
                    "\t\t\"vim\": \"vim\",",
                    "\t\t\"visual-basic\": \"Visual Basic\",",
                    "\t\t\"vba\": \"VBA\",",
                    "\t\t\"vb\": \"Visual Basic\",",
                    "\t\t\"wasm\": \"WebAssembly\",",
                    "\t\t\"wiki\": \"Wiki markup\",",
                    "\t\t\"xeoracube\": \"XeoraCube\",",
                    "\t\t\"xml-doc\": \"XML doc (.net)\",",
                    "\t\t\"xojo\": \"Xojo (REALbasic)\",",
                    "\t\t\"xquery\": \"XQuery\",",
                    "\t\t\"yaml\": \"YAML\",",
                    "\t\t\"yml\": \"YAML\",",
                    "\t\t\"yang\": \"YANG\"",
                    "\t}/*]*/;",
                    "",
                    "\tPrism.plugins.toolbar.registerButton('show-language', function (env) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t/**",
                    "\t\t * Tries to guess the name of a language given its id.",
                    "\t\t *",
                    "\t\t * @param {string} id The language id.",
                    "\t\t * @returns {string}",
                    "\t\t */",
                    "\t\tfunction guessTitle(id) {",
                    "\t\t\tif (!id) {",
                    "\t\t\t\treturn id;",
                    "\t\t\t}",
                    "\t\t\treturn (id.substring(0, 1).toUpperCase() + id.substring(1)).replace(/s(?=cript)/, 'S');",
                    "\t\t}",
                    "",
                    "\t\tvar language = pre.getAttribute('data-language') || Languages[env.language] || guessTitle(env.language);",
                    "",
                    "\t\tif (!language) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tvar element = document.createElement('span');",
                    "\t\telement.textContent = language;",
                    "",
                    "\t\treturn element;",
                    "\t});",
                    "",
                    "})();"
                ]
            },
            "prism-show-language.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document)if(Prism.plugins.toolbar){var r={none:\"Plain text\",html:\"HTML\",xml:\"XML\",svg:\"SVG\",mathml:\"MathML\",ssml:\"SSML\",rss:\"RSS\",css:\"CSS\",clike:\"C-like\",js:\"JavaScript\",abap:\"ABAP\",abnf:\"ABNF\",al:\"AL\",antlr4:\"ANTLR4\",g4:\"ANTLR4\",apacheconf:\"Apache Configuration\",apl:\"APL\",aql:\"AQL\",arff:\"ARFF\",asciidoc:\"AsciiDoc\",adoc:\"AsciiDoc\",aspnet:\"ASP.NET (C#)\",asm6502:\"6502 Assembly\",autohotkey:\"AutoHotkey\",autoit:\"AutoIt\",basic:\"BASIC\",bbcode:\"BBcode\",bnf:\"BNF\",rbnf:\"RBNF\",bsl:\"BSL (1C:Enterprise)\",oscript:\"OneScript\",csharp:\"C#\",cs:\"C#\",dotnet:\"C#\",cpp:\"C++\",cil:\"CIL\",cmake:\"CMake\",coffee:\"CoffeeScript\",conc:\"Concurnas\",csp:\"Content-Security-Policy\",\"css-extras\":\"CSS Extras\",dataweave:\"DataWeave\",dax:\"DAX\",django:\"Django/Jinja2\",jinja2:\"Django/Jinja2\",\"dns-zone-file\":\"DNS zone file\",\"dns-zone\":\"DNS zone file\",dockerfile:\"Docker\",ebnf:\"EBNF\",editorconfig:\"EditorConfig\",ejs:\"EJS\",etlua:\"Embedded Lua templating\",erb:\"ERB\",\"excel-formula\":\"Excel Formula\",xlsx:\"Excel Formula\",xls:\"Excel Formula\",fsharp:\"F#\",\"firestore-security-rules\":\"Firestore security rules\",ftl:\"FreeMarker Template Language\",gml:\"GameMaker Language\",gamemakerlanguage:\"GameMaker Language\",gcode:\"G-code\",gdscript:\"GDScript\",gedcom:\"GEDCOM\",glsl:\"GLSL\",graphql:\"GraphQL\",hs:\"Haskell\",hcl:\"HCL\",hlsl:\"HLSL\",http:\"HTTP\",hpkp:\"HTTP Public-Key-Pins\",hsts:\"HTTP Strict-Transport-Security\",ichigojam:\"IchigoJam\",ignore:\".ignore\",gitignore:\".gitignore\",hgignore:\".hgignore\",npmignore:\".npmignore\",inform7:\"Inform 7\",javadoc:\"JavaDoc\",javadoclike:\"JavaDoc-like\",javastacktrace:\"Java stack trace\",jq:\"JQ\",jsdoc:\"JSDoc\",\"js-extras\":\"JS Extras\",json:\"JSON\",webmanifest:\"Web App Manifest\",json5:\"JSON5\",jsonp:\"JSONP\",jsstacktrace:\"JS stack trace\",\"js-templates\":\"JS Templates\",kts:\"Kotlin Script\",kt:\"Kotlin\",latex:\"LaTeX\",tex:\"TeX\",context:\"ConTeXt\",lilypond:\"LilyPond\",ly:\"LilyPond\",emacs:\"Lisp\",elisp:\"Lisp\",\"emacs-lisp\":\"Lisp\",llvm:\"LLVM IR\",lolcode:\"LOLCODE\",md:\"Markdown\",\"markup-templating\":\"Markup templating\",matlab:\"MATLAB\",mel:\"MEL\",mongodb:\"MongoDB\",moon:\"MoonScript\",n1ql:\"N1QL\",n4js:\"N4JS\",n4jsd:\"N4JS\",\"nand2tetris-hdl\":\"Nand To Tetris HDL\",naniscript:\"Naninovel Script\",nani:\"Naninovel Script\",nasm:\"NASM\",neon:\"NEON\",nginx:\"nginx\",nsis:\"NSIS\",objectivec:\"Objective-C\",objc:\"Objective-C\",ocaml:\"OCaml\",opencl:\"OpenCL\",parigp:\"PARI/GP\",objectpascal:\"Object Pascal\",pcaxis:\"PC-Axis\",px:\"PC-Axis\",peoplecode:\"PeopleCode\",pcode:\"PeopleCode\",php:\"PHP\",phpdoc:\"PHPDoc\",\"php-extras\":\"PHP Extras\",plsql:\"PL/SQL\",powerquery:\"PowerQuery\",pq:\"PowerQuery\",mscript:\"PowerQuery\",powershell:\"PowerShell\",promql:\"PromQL\",properties:\".properties\",protobuf:\"Protocol Buffers\",purebasic:\"PureBasic\",pbfasm:\"PureBasic\",purs:\"PureScript\",py:\"Python\",q:\"Q (kdb+ database)\",qml:\"QML\",rkt:\"Racket\",jsx:\"React JSX\",tsx:\"React TSX\",renpy:\"Ren'py\",rpy:\"Ren'py\",rest:\"reST (reStructuredText)\",robotframework:\"Robot Framework\",robot:\"Robot Framework\",rb:\"Ruby\",sas:\"SAS\",sass:\"Sass (Sass)\",scss:\"Sass (Scss)\",\"shell-session\":\"Shell session\",\"sh-session\":\"Shell session\",shellsession:\"Shell session\",sml:\"SML\",smlnj:\"SML/NJ\",solidity:\"Solidity (Ethereum)\",sol:\"Solidity (Ethereum)\",\"solution-file\":\"Solution file\",sln:\"Solution file\",soy:\"Soy (Closure Template)\",sparql:\"SPARQL\",rq:\"SPARQL\",\"splunk-spl\":\"Splunk SPL\",sqf:\"SQF: Status Quo Function (Arma 3)\",sql:\"SQL\",iecst:\"Structured Text (IEC 61131-3)\",\"t4-templating\":\"T4 templating\",\"t4-cs\":\"T4 Text Templates (C#)\",t4:\"T4 Text Templates (C#)\",\"t4-vb\":\"T4 Text Templates (VB)\",tap:\"TAP\",tt2:\"Template Toolkit 2\",toml:\"TOML\",trig:\"TriG\",ts:\"TypeScript\",tsconfig:\"TSConfig\",uscript:\"UnrealScript\",uc:\"UnrealScript\",vbnet:\"VB.Net\",vhdl:\"VHDL\",vim:\"vim\",\"visual-basic\":\"Visual Basic\",vba:\"VBA\",vb:\"Visual Basic\",wasm:\"WebAssembly\",wiki:\"Wiki markup\",xeoracube:\"XeoraCube\",\"xml-doc\":\"XML doc (.net)\",xojo:\"Xojo (REALbasic)\",xquery:\"XQuery\",yaml:\"YAML\",yml:\"YAML\",yang:\"YANG\"};Prism.plugins.toolbar.registerButton(\"show-language\",function(e){var a=e.element.parentNode;if(a&&/pre/i.test(a.nodeName)){var s,t=a.getAttribute(\"data-language\")||r[e.language]||((s=e.language)?(s.substring(0,1).toUpperCase()+s.substring(1)).replace(/s(?=cript)/,\"S\"):s);if(t){var o=document.createElement(\"span\");return o.textContent=t,o}}})}else console.warn(\"Show Languages plugin loaded before Toolbar plugin.\")}();"
                ]
            }
        },
        "toolbar": {
            "index.html": {},
            "prism-toolbar.css": {},
            "prism-toolbar.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar callbacks = [];",
                    "\tvar map = {};",
                    "\tvar noop = function() {};",
                    "",
                    "\tPrism.plugins.toolbar = {};",
                    "",
                    "\t/**",
                    "\t * @typedef ButtonOptions",
                    "\t * @property {string} text The text displayed.",
                    "\t * @property {string} [url] The URL of the link which will be created.",
                    "\t * @property {Function} [onClick] The event listener for the `click` event of the created button.",
                    "\t * @property {string} [className] The class attribute to include with element.",
                    "\t */",
                    "",
                    "\t/**",
                    "\t * Register a button callback with the toolbar.",
                    "\t *",
                    "\t * @param {string} key",
                    "\t * @param {ButtonOptions|Function} opts",
                    "\t */",
                    "\tvar registerButton = Prism.plugins.toolbar.registerButton = function (key, opts) {",
                    "\t\tvar callback;",
                    "",
                    "\t\tif (typeof opts === 'function') {",
                    "\t\t\tcallback = opts;",
                    "\t\t} else {",
                    "\t\t\tcallback = function (env) {",
                    "\t\t\t\tvar element;",
                    "",
                    "\t\t\t\tif (typeof opts.onClick === 'function') {",
                    "\t\t\t\t\telement = document.createElement('button');",
                    "\t\t\t\t\telement.type = 'button';",
                    "\t\t\t\t\telement.addEventListener('click', function () {",
                    "\t\t\t\t\t\topts.onClick.call(this, env);",
                    "\t\t\t\t\t});",
                    "\t\t\t\t} else if (typeof opts.url === 'string') {",
                    "\t\t\t\t\telement = document.createElement('a');",
                    "\t\t\t\t\telement.href = opts.url;",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\telement = document.createElement('span');",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tif (opts.className) {",
                    "\t\t\t\t\telement.classList.add(opts.className);",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\telement.textContent = opts.text;",
                    "",
                    "\t\t\t\treturn element;",
                    "\t\t\t};",
                    "\t\t}",
                    "",
                    "\t\tif (key in map) {",
                    "\t\t\tconsole.warn('There is a button with the key \"' + key + '\" registered already.');",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tcallbacks.push(map[key] = callback);",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns the callback order of the given element.",
                    "\t *",
                    "\t * @param {HTMLElement} element",
                    "\t * @returns {string[] | undefined}",
                    "\t */",
                    "\tfunction getOrder(element) {",
                    "\t\twhile (element) {",
                    "\t\t\tvar order = element.getAttribute('data-toolbar-order');",
                    "\t\t\tif (order != null) {",
                    "\t\t\t\torder = order.trim();",
                    "\t\t\t\tif (order.length) {",
                    "\t\t\t\t\treturn order.split(/\\s*,\\s*/g);",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\treturn [];",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\telement = element.parentElement;",
                    "\t\t}",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Post-highlight Prism hook callback.",
                    "\t *",
                    "\t * @param env",
                    "\t */",
                    "\tvar hook = Prism.plugins.toolbar.hook = function (env) {",
                    "\t\t// Check if inline or actual code block (credit to line-numbers plugin)",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Autoloader rehighlights, so only do this once.",
                    "\t\tif (pre.parentNode.classList.contains('code-toolbar')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Create wrapper for <pre> to prevent scrolling toolbar with content",
                    "\t\tvar wrapper = document.createElement('div');",
                    "\t\twrapper.classList.add('code-toolbar');",
                    "\t\tpre.parentNode.insertBefore(wrapper, pre);",
                    "\t\twrapper.appendChild(pre);",
                    "",
                    "\t\t// Setup the toolbar",
                    "\t\tvar toolbar = document.createElement('div');",
                    "\t\ttoolbar.classList.add('toolbar');",
                    "",
                    "\t\t// order callbacks",
                    "\t\tvar elementCallbacks = callbacks;",
                    "\t\tvar order = getOrder(env.element);",
                    "\t\tif (order) {",
                    "\t\t\telementCallbacks = order.map(function (key) {",
                    "\t\t\t\treturn map[key] || noop;",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t\telementCallbacks.forEach(function(callback) {",
                    "\t\t\tvar element = callback(env);",
                    "",
                    "\t\t\tif (!element) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar item = document.createElement('div');",
                    "\t\t\titem.classList.add('toolbar-item');",
                    "",
                    "\t\t\titem.appendChild(element);",
                    "\t\t\ttoolbar.appendChild(item);",
                    "\t\t});",
                    "",
                    "\t\t// Add our toolbar to the currently created wrapper of <pre> tag",
                    "\t\twrapper.appendChild(toolbar);",
                    "\t};",
                    "",
                    "\tregisterButton('label', function(env) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!pre.hasAttribute('data-label')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar element, template;",
                    "\t\tvar text = pre.getAttribute('data-label');",
                    "\t\ttry {",
                    "\t\t\t// Any normal text will blow up this selector.",
                    "\t\t\ttemplate = document.querySelector('template#' + text);",
                    "\t\t} catch (e) {}",
                    "",
                    "\t\tif (template) {",
                    "\t\t\telement = template.content;",
                    "\t\t} else {",
                    "\t\t\tif (pre.hasAttribute('data-url')) {",
                    "\t\t\t\telement = document.createElement('a');",
                    "\t\t\t\telement.href = pre.getAttribute('data-url');",
                    "\t\t\t} else {",
                    "\t\t\t\telement = document.createElement('span');",
                    "\t\t\t}",
                    "",
                    "\t\t\telement.textContent = text;",
                    "\t\t}",
                    "",
                    "\t\treturn element;",
                    "\t});",
                    "",
                    "\t/**",
                    "\t * Register the toolbar with Prism.",
                    "\t */",
                    "\tPrism.hooks.add('complete', hook);",
                    "})();"
                ]
            },
            "prism-toolbar.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var i=[],l={},c=function(){};Prism.plugins.toolbar={};var e=Prism.plugins.toolbar.registerButton=function(e,n){var t;t=\"function\"==typeof n?n:function(e){var t;return\"function\"==typeof n.onClick?((t=document.createElement(\"button\")).type=\"button\",t.addEventListener(\"click\",function(){n.onClick.call(this,e)})):\"string\"==typeof n.url?(t=document.createElement(\"a\")).href=n.url:t=document.createElement(\"span\"),n.className&&t.classList.add(n.className),t.textContent=n.text,t},e in l?console.warn('There is a button with the key \"'+e+'\" registered already.'):i.push(l[e]=t)},t=Prism.plugins.toolbar.hook=function(a){var e=a.element.parentNode;if(e&&/pre/i.test(e.nodeName)&&!e.parentNode.classList.contains(\"code-toolbar\")){var t=document.createElement(\"div\");t.classList.add(\"code-toolbar\"),e.parentNode.insertBefore(t,e),t.appendChild(e);var r=document.createElement(\"div\");r.classList.add(\"toolbar\");var n=i,o=function(e){for(;e;){var t=e.getAttribute(\"data-toolbar-order\");if(null!=t)return(t=t.trim()).length?t.split(/\\s*,\\s*/g):[];e=e.parentElement}}(a.element);o&&(n=o.map(function(e){return l[e]||c})),n.forEach(function(e){var t=e(a);if(t){var n=document.createElement(\"div\");n.classList.add(\"toolbar-item\"),n.appendChild(t),r.appendChild(n)}}),t.appendChild(r)}};e(\"label\",function(e){var t=e.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&t.hasAttribute(\"data-label\")){var n,a,r=t.getAttribute(\"data-label\");try{a=document.querySelector(\"template#\"+r)}catch(e){}return a?n=a.content:(t.hasAttribute(\"data-url\")?(n=document.createElement(\"a\")).href=t.getAttribute(\"data-url\"):n=document.createElement(\"span\"),n.textContent=r),n}}),Prism.hooks.add(\"complete\",t)}}();"
                ]
            }
        },
        "treeview": {
            "index.html": {},
            "prism-treeview.css": {},
            "prism-treeview.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "Prism.languages.treeview = {",
                    "\t'treeview-part': {",
                    "\t\tpattern: /^.+/m,",
                    "\t\tinside: {",
                    "\t\t\t'entry-line': [",
                    "\t\t\t\t{",
                    "\t\t\t\t\tpattern: /\\|-- |├── /,",
                    "\t\t\t\t\talias: 'line-h'",
                    "\t\t\t\t},",
                    "\t\t\t\t{",
                    "\t\t\t\t\tpattern: /\\|   |│   /,",
                    "\t\t\t\t\talias: 'line-v'",
                    "\t\t\t\t},",
                    "\t\t\t\t{",
                    "\t\t\t\t\tpattern: /`-- |└── /,",
                    "\t\t\t\t\talias: 'line-v-last'",
                    "\t\t\t\t},",
                    "\t\t\t\t{",
                    "\t\t\t\t\tpattern: / {4}/,",
                    "\t\t\t\t\talias: 'line-v-gap'",
                    "\t\t\t\t}",
                    "\t\t\t],",
                    "\t\t\t'entry-name': {",
                    "\t\t\t\tpattern: /.*\\S.*/,",
                    "\t\t\t\tinside: {",
                    "\t\t\t\t\t// symlink",
                    "\t\t\t\t\t'operator': / -> /,",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "};",
                    "",
                    "Prism.hooks.add('wrap', function (env) {",
                    "\tif (env.language === 'treeview' && env.type === 'entry-name') {",
                    "\t\tvar classes = env.classes;",
                    "",
                    "\t\tvar folderPattern = /(^|[^\\\\])\\/\\s*$/;",
                    "\t\tif (folderPattern.test(env.content)) {",
                    "\t\t\t// folder",
                    "",
                    "\t\t\t// remove trailing /",
                    "\t\t\tenv.content = env.content.replace(folderPattern, '$1');",
                    "\t\t\tclasses.push('dir');",
                    "\t\t} else {",
                    "\t\t\t// file",
                    "",
                    "\t\t\t// remove trailing file marker",
                    "\t\t\tenv.content = env.content.replace(/(^|[^\\\\])[=*|]\\s*$/, '$1');",
                    "",
                    "\t\t\tvar parts = env.content.toLowerCase().replace(/\\s+/g, '').split('.');",
                    "\t\t\twhile (parts.length > 1) {",
                    "\t\t\t\tparts.shift();",
                    "\t\t\t\t// Ex. 'foo.min.js' would become '<span class=\"token keyword ext-min-js ext-js\">foo.min.js</span>'",
                    "\t\t\t\tclasses.push('ext-' + parts.join('-'));",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tif (env.content[0] === '.') {",
                    "\t\t\tclasses.push('dotfile');",
                    "\t\t}",
                    "\t}",
                    "});"
                ]
            },
            "prism-treeview.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "Prism.languages.treeview={\"treeview-part\":{pattern:/^.+/m,inside:{\"entry-line\":[{pattern:/\\|-- |├── /,alias:\"line-h\"},{pattern:/\\|   |│   /,alias:\"line-v\"},{pattern:/`-- |└── /,alias:\"line-v-last\"},{pattern:/ {4}/,alias:\"line-v-gap\"}],\"entry-name\":{pattern:/.*\\S.*/,inside:{operator:/ -> /}}}}},Prism.hooks.add(\"wrap\",function(e){if(\"treeview\"===e.language&&\"entry-name\"===e.type){var t=e.classes,n=/(^|[^\\\\])\\/\\s*$/;if(n.test(e.content))e.content=e.content.replace(n,\"$1\"),t.push(\"dir\");else{e.content=e.content.replace(/(^|[^\\\\])[=*|]\\s*$/,\"$1\");for(var a=e.content.toLowerCase().replace(/\\s+/g,\"\").split(\".\");1<a.length;)a.shift(),t.push(\"ext-\"+a.join(\"-\"))}\".\"===e.content[0]&&t.push(\"dotfile\")}});"
                ]
            },
            "icons": {
                "archive.svg": {},
                "audio.svg": {},
                "code.svg": {},
                "excel.svg": {},
                "file.svg": {},
                "folder.svg": {},
                "image.svg": {},
                "pdf.svg": {},
                "powerpoint.svg": {},
                "text.svg": {},
                "video.svg": {},
                "word.svg": {}
            }
        },
        "unescaped-markup": {
            "index.html": {},
            "prism-unescaped-markup.css": {},
            "prism-unescaped-markup.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill",
                    "\tif (!Element.prototype.matches) {",
                    "\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;",
                    "\t}",
                    "",
                    "",
                    "\tPrism.plugins.UnescapedMarkup = true;",
                    "",
                    "\tPrism.hooks.add('before-highlightall', function (env) {",
                    "\t\tenv.selector += ', [class*=\"lang-\"] script[type=\"text/plain\"]'",
                    "\t\t\t+ ', [class*=\"language-\"] script[type=\"text/plain\"]'",
                    "\t\t\t+ ', script[type=\"text/plain\"][class*=\"lang-\"]'",
                    "\t\t\t+ ', script[type=\"text/plain\"][class*=\"language-\"]';",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\t/** @type {HTMLElement} */",
                    "\t\tvar element = env.element;",
                    "",
                    "\t\tif (element.matches('script[type=\"text/plain\"]')) {",
                    "\t\t\t// found a <script type=\"text/plain\" ...> element",
                    "\t\t\t// we convert this element to a regular <pre><code> code block",
                    "",
                    "\t\t\tvar code = document.createElement('code');",
                    "\t\t\tvar pre = document.createElement('pre');",
                    "",
                    "\t\t\t// copy class name",
                    "\t\t\tpre.className = code.className = element.className;",
                    "",
                    "\t\t\t// copy all \"data-\" attributes",
                    "\t\t\tvar dataset = element.dataset;",
                    "\t\t\tObject.keys(dataset || {}).forEach(function (key) {",
                    "\t\t\t\tif (Object.prototype.hasOwnProperty.call(dataset, key)) {",
                    "\t\t\t\t\tpre.dataset[key] = dataset[key];",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "",
                    "\t\t\tcode.textContent = env.code = env.code.replace(/&lt;\\/script(?:>|&gt;)/gi, '</scri' + 'pt>');",
                    "",
                    "\t\t\t// change DOM",
                    "\t\t\tpre.appendChild(code);",
                    "\t\t\telement.parentNode.replaceChild(pre, element);",
                    "\t\t\tenv.element = code;",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!env.code) {",
                    "\t\t\t// no code",
                    "\t\t\tvar childNodes = element.childNodes;",
                    "\t\t\tif (childNodes.length === 1 && childNodes[0].nodeName == '#comment') {",
                    "\t\t\t\t// the only child is a comment -> use the comment's text",
                    "\t\t\t\telement.textContent = env.code = childNodes[0].textContent;",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "}());"
                ]
            },
            "prism-unescaped-markup.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&self.Prism&&self.document&&(Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),Prism.plugins.UnescapedMarkup=!0,Prism.hooks.add(\"before-highlightall\",function(e){e.selector+=', [class*=\"lang-\"] script[type=\"text/plain\"], [class*=\"language-\"] script[type=\"text/plain\"], script[type=\"text/plain\"][class*=\"lang-\"], script[type=\"text/plain\"][class*=\"language-\"]'}),Prism.hooks.add(\"before-sanity-check\",function(e){var t=e.element;if(t.matches('script[type=\"text/plain\"]')){var a=document.createElement(\"code\"),c=document.createElement(\"pre\");c.className=a.className=t.className;var s=t.dataset;return Object.keys(s||{}).forEach(function(e){Object.prototype.hasOwnProperty.call(s,e)&&(c.dataset[e]=s[e])}),a.textContent=e.code=e.code.replace(/&lt;\\/script(?:>|&gt;)/gi,\"<\\/script>\"),c.appendChild(a),t.parentNode.replaceChild(c,t),void(e.element=a)}if(!e.code){var n=t.childNodes;1===n.length&&\"#comment\"==n[0].nodeName&&(t.textContent=e.code=n[0].textContent)}}));"
                ]
            }
        },
        "wpd": {
            "index.html": {},
            "prism-wpd.css": {},
            "prism-wpd.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "if (Prism.languages.css) {",
                    "\t// check whether the selector is an advanced pattern before extending it",
                    "\tif (Prism.languages.css.selector.pattern)",
                    "\t{",
                    "\t\tPrism.languages.css.selector.inside['pseudo-class'] = /:[\\w-]+/;",
                    "\t\tPrism.languages.css.selector.inside['pseudo-element'] = /::[\\w-]+/;",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tPrism.languages.css.selector = {",
                    "\t\t\tpattern: Prism.languages.css.selector,",
                    "\t\t\tinside: {",
                    "\t\t\t\t'pseudo-class': /:[\\w-]+/,",
                    "\t\t\t\t'pseudo-element': /::[\\w-]+/",
                    "\t\t\t}",
                    "\t\t};",
                    "\t}",
                    "}",
                    "",
                    "if (Prism.languages.markup) {",
                    "\tPrism.languages.markup.tag.inside.tag.inside['tag-id'] = /[\\w-]+/;",
                    "\t",
                    "\tvar Tags = {",
                    "\t\tHTML: {",
                    "\t\t\t'a': 1, 'abbr': 1, 'acronym': 1, 'b': 1, 'basefont': 1, 'bdo': 1, 'big': 1, 'blink': 1, 'cite': 1, 'code': 1, 'dfn': 1, 'em': 1, 'kbd': 1,  'i': 1, ",
                    "\t\t\t'rp': 1, 'rt': 1, 'ruby': 1, 's': 1, 'samp': 1, 'small': 1, 'spacer': 1, 'strike': 1, 'strong': 1, 'sub': 1, 'sup': 1, 'time': 1, 'tt': 1,  'u': 1, ",
                    "\t\t\t'var': 1, 'wbr': 1, 'noframes': 1, 'summary': 1, 'command': 1, 'dt': 1, 'dd': 1, 'figure': 1, 'figcaption': 1, 'center': 1, 'section': 1, 'nav': 1,",
                    "\t\t\t'article': 1, 'aside': 1, 'hgroup': 1, 'header': 1, 'footer': 1, 'address': 1, 'noscript': 1, 'isIndex': 1, 'main': 1, 'mark': 1, 'marquee': 1,",
                    "\t\t\t'meter': 1, 'menu': 1",
                    "\t\t},",
                    "\t\tSVG: {",
                    "\t\t\t'animateColor': 1, 'animateMotion': 1, 'animateTransform': 1, 'glyph': 1, 'feBlend': 1, 'feColorMatrix': 1, 'feComponentTransfer': 1, ",
                    "\t\t\t'feFuncR': 1, 'feFuncG': 1, 'feFuncB': 1, 'feFuncA': 1, 'feComposite': 1, 'feConvolveMatrix': 1, 'feDiffuseLighting': 1, 'feDisplacementMap': 1, ",
                    "\t\t\t'feFlood': 1, 'feGaussianBlur': 1, 'feImage': 1, 'feMerge': 1, 'feMergeNode': 1, 'feMorphology': 1, 'feOffset': 1, 'feSpecularLighting': 1, ",
                    "\t\t\t'feTile': 1, 'feTurbulence': 1, 'feDistantLight': 1, 'fePointLight': 1, 'feSpotLight': 1, 'linearGradient': 1, 'radialGradient': 1, 'altGlyph': 1, ",
                    "\t\t\t'textPath': 1, 'tref': 1, 'altglyph': 1, 'textpath': 1, 'altglyphdef': 1, 'altglyphitem': 1, 'clipPath': 1, 'color-profile': 1, 'cursor': 1,",
                    "\t\t\t'font-face': 1, 'font-face-format': 1, 'font-face-name': 1, 'font-face-src': 1, 'font-face-uri': 1, 'foreignObject': 1, 'glyphRef': 1,",
                    "\t\t\t'hkern': 1, 'vkern': 1",
                    "\t\t},",
                    "\t\tMathML: {}",
                    "\t}",
                    "}",
                    "",
                    "var language;",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif ((env.type == 'tag-id'",
                    "\t\t|| (env.type == 'property' && env.content.indexOf('-') != 0)",
                    "\t\t|| (env.type == 'rule'&& env.content.indexOf('@-') != 0)",
                    "\t\t|| (env.type == 'pseudo-class'&& env.content.indexOf(':-') != 0) ",
                    "\t\t|| (env.type == 'pseudo-element'&& env.content.indexOf('::-') != 0) ",
                    "        || (env.type == 'attr-name' && env.content.indexOf('data-') != 0)",
                    "\t\t) && env.content.indexOf('<') === -1",
                    "\t) {",
                    "\t\tif (env.language == 'css'",
                    "\t\t\t|| env.language == 'scss'",
                    "\t\t\t|| env.language == 'markup'",
                    "\t\t) {",
                    "\t\t\tvar href = 'https://webplatform.github.io/docs/';",
                    "\t\t\tvar content = env.content;",
                    "",
                    "\t\t\tif (env.language == 'css' || env.language == 'scss') {",
                    "\t\t\t\thref += 'css/';",
                    "",
                    "\t\t\t\tif (env.type == 'property') {",
                    "\t\t\t\t\thref += 'properties/';",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'rule') {",
                    "\t\t\t\t\thref += 'atrules/';",
                    "\t\t\t\t\tcontent = content.substring(1);",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'pseudo-class') {",
                    "\t\t\t\t\thref += 'selectors/pseudo-classes/';",
                    "\t\t\t\t\tcontent = content.substring(1);",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'pseudo-element') {",
                    "\t\t\t\t\thref += 'selectors/pseudo-elements/';",
                    "\t\t\t\t\tcontent = content.substring(2);",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\telse if (env.language == 'markup') {",
                    "\t\t\t\tif (env.type == 'tag-id') {",
                    "\t\t\t\t\t// Check language",
                    "\t\t\t\t\tlanguage = getLanguage(env.content) || language;",
                    "",
                    "\t\t\t\t\tif (language) {",
                    "\t\t\t\t\t\thref += language + '/elements/';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\treturn; // Abort",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'attr-name') {",
                    "\t\t\t\t\tif (language) {",
                    "\t\t\t\t\t\thref += language + '/attributes/';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\treturn; // Abort",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\thref += content;",
                    "\t\t\tenv.tag = 'a';",
                    "\t\t\tenv.attributes.href = href;",
                    "\t\t\tenv.attributes.target = '_blank';",
                    "\t\t}",
                    "\t}",
                    "});",
                    "",
                    "function getLanguage(tag) {",
                    "\tvar tagL = tag.toLowerCase();",
                    "\t",
                    "\tif (Tags.HTML[tagL]) {",
                    "\t\treturn 'html';",
                    "\t}",
                    "\telse if (Tags.SVG[tag]) {",
                    "\t\treturn 'svg';",
                    "\t}",
                    "\telse if (Tags.MathML[tag]) {",
                    "\t\treturn 'mathml';",
                    "\t}",
                    "\t",
                    "\t// Not in dictionary, perform check",
                    "\tif (Tags.HTML[tagL] !== 0 && typeof document !== 'undefined') {",
                    "\t\tvar htmlInterface = (document.createElement(tag).toString().match(/\\[object HTML(.+)Element\\]/) || [])[1];",
                    "\t\t",
                    "\t\tif (htmlInterface && htmlInterface != 'Unknown') {",
                    "\t\t\tTags.HTML[tagL] = 1;",
                    "\t\t\treturn 'html';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.HTML[tagL] = 0;",
                    "\t",
                    "\tif (Tags.SVG[tag] !== 0 && typeof document !== 'undefined') {",
                    "\t\tvar svgInterface = (document.createElementNS('http://www.w3.org/2000/svg', tag).toString().match(/\\[object SVG(.+)Element\\]/) || [])[1];",
                    "\t\t",
                    "\t\tif (svgInterface && svgInterface != 'Unknown') {",
                    "\t\t\tTags.SVG[tag] = 1;",
                    "\t\t\treturn 'svg';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.SVG[tag] = 0;",
                    "\t",
                    "\t// Lame way to detect MathML, but browsers don’t expose interface names there :(",
                    "\tif (Tags.MathML[tag] !== 0) {",
                    "\t\tif (tag.indexOf('m') === 0) {",
                    "\t\t\tTags.MathML[tag] = 1;",
                    "\t\t\treturn 'mathml';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.MathML[tag] = 0;",
                    "\t",
                    "\treturn null;",
                    "}",
                    "",
                    "})();"
                ]
            },
            "prism-wpd.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){if(Prism.languages.css&&(Prism.languages.css.selector.pattern?(Prism.languages.css.selector.inside[\"pseudo-class\"]=/:[\\w-]+/,Prism.languages.css.selector.inside[\"pseudo-element\"]=/::[\\w-]+/):Prism.languages.css.selector={pattern:Prism.languages.css.selector,inside:{\"pseudo-class\":/:[\\w-]+/,\"pseudo-element\":/::[\\w-]+/}}),Prism.languages.markup){Prism.languages.markup.tag.inside.tag.inside[\"tag-id\"]=/[\\w-]+/;var s={HTML:{a:1,abbr:1,acronym:1,b:1,basefont:1,bdo:1,big:1,blink:1,cite:1,code:1,dfn:1,em:1,kbd:1,i:1,rp:1,rt:1,ruby:1,s:1,samp:1,small:1,spacer:1,strike:1,strong:1,sub:1,sup:1,time:1,tt:1,u:1,var:1,wbr:1,noframes:1,summary:1,command:1,dt:1,dd:1,figure:1,figcaption:1,center:1,section:1,nav:1,article:1,aside:1,hgroup:1,header:1,footer:1,address:1,noscript:1,isIndex:1,main:1,mark:1,marquee:1,meter:1,menu:1},SVG:{animateColor:1,animateMotion:1,animateTransform:1,glyph:1,feBlend:1,feColorMatrix:1,feComponentTransfer:1,feFuncR:1,feFuncG:1,feFuncB:1,feFuncA:1,feComposite:1,feConvolveMatrix:1,feDiffuseLighting:1,feDisplacementMap:1,feFlood:1,feGaussianBlur:1,feImage:1,feMerge:1,feMergeNode:1,feMorphology:1,feOffset:1,feSpecularLighting:1,feTile:1,feTurbulence:1,feDistantLight:1,fePointLight:1,feSpotLight:1,linearGradient:1,radialGradient:1,altGlyph:1,textPath:1,tref:1,altglyph:1,textpath:1,altglyphdef:1,altglyphitem:1,clipPath:1,\"color-profile\":1,cursor:1,\"font-face\":1,\"font-face-format\":1,\"font-face-name\":1,\"font-face-src\":1,\"font-face-uri\":1,foreignObject:1,glyphRef:1,hkern:1,vkern:1},MathML:{}}}var a;Prism.hooks.add(\"wrap\",function(e){if((\"tag-id\"==e.type||\"property\"==e.type&&0!=e.content.indexOf(\"-\")||\"rule\"==e.type&&0!=e.content.indexOf(\"@-\")||\"pseudo-class\"==e.type&&0!=e.content.indexOf(\":-\")||\"pseudo-element\"==e.type&&0!=e.content.indexOf(\"::-\")||\"attr-name\"==e.type&&0!=e.content.indexOf(\"data-\"))&&-1===e.content.indexOf(\"<\")&&(\"css\"==e.language||\"scss\"==e.language||\"markup\"==e.language)){var t=\"https://webplatform.github.io/docs/\",n=e.content;if(\"css\"==e.language||\"scss\"==e.language)t+=\"css/\",\"property\"==e.type?t+=\"properties/\":\"rule\"==e.type?(t+=\"atrules/\",n=n.substring(1)):\"pseudo-class\"==e.type?(t+=\"selectors/pseudo-classes/\",n=n.substring(1)):\"pseudo-element\"==e.type&&(t+=\"selectors/pseudo-elements/\",n=n.substring(2));else if(\"markup\"==e.language)if(\"tag-id\"==e.type){if(!(a=function(e){var t=e.toLowerCase();{if(s.HTML[t])return\"html\";if(s.SVG[e])return\"svg\";if(s.MathML[e])return\"mathml\"}if(0!==s.HTML[t]&&\"undefined\"!=typeof document){var n=(document.createElement(e).toString().match(/\\[object HTML(.+)Element\\]/)||[])[1];if(n&&\"Unknown\"!=n)return s.HTML[t]=1,\"html\"}if((s.HTML[t]=0)!==s.SVG[e]&&\"undefined\"!=typeof document){var a=(document.createElementNS(\"http://www.w3.org/2000/svg\",e).toString().match(/\\[object SVG(.+)Element\\]/)||[])[1];if(a&&\"Unknown\"!=a)return s.SVG[e]=1,\"svg\"}if((s.SVG[e]=0)!==s.MathML[e]&&0===e.indexOf(\"m\"))return s.MathML[e]=1,\"mathml\";return s.MathML[e]=0,null}(e.content)||a))return;t+=a+\"/elements/\"}else if(\"attr-name\"==e.type){if(!a)return;t+=a+\"/attributes/\"}t+=n,e.tag=\"a\",e.attributes.href=t,e.attributes.target=\"_blank\"}})}}();"
                ]
            }
        }
    },
    "themes": {
        "prism-coy.css": {},
        "prism-dark.css": {},
        "prism-funky.css": {},
        "prism-okaidia.css": {},
        "prism-solarizedlight.css": {},
        "prism-tomorrow.css": {},
        "prism-twilight.css": {},
        "prism.css": {}
    }
}