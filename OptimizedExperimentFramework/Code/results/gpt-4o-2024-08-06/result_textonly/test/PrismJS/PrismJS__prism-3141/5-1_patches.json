{
    "1/1": "To address the issue described in the bug report, we need to ensure that SQL tick marks (backticks) are correctly highlighted as strings. The bug report suggests that the current implementation does not recognize backticks as string delimiters, which is why they are not being highlighted correctly.\n\n### Bug Scenario Analysis\nThe bug scenario image and description indicate that when SQL code uses backticks to enclose identifiers or keywords, these are not being highlighted as strings. The provided example shows SQL code with backticks around column names and table aliases, which should be highlighted as strings but are not.\n\n### Bug Root Cause\nThe root cause of the issue is that the current regular expression pattern for strings in the `Prism.languages.sql` configuration does not account for backticks as valid string delimiters. The pattern only considers double quotes (`\"`) and single quotes (`'`) as string delimiters.\n\n### Bug Location\nThe bug is located in the `string` pattern definition within the `Prism.languages.sql` object in both `components/prism-sql.js` and `components/prism-sql.min.js`.\n\n### Patches\nTo fix the issue, we need to update the `string` pattern to include backticks as valid string delimiters. Here are the patches for the bug files:\n\n```javascript\n### components/prism-sql.js\n<<<<<<< SEARCH\n    'string': {\n        pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n        greedy: true,\n        lookbehind: true\n    },\n=======\n    'string': {\n        pattern: /(^|[^@\\\\])(\"|'|`)(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n        greedy: true,\n        lookbehind: true\n    },\n>>>>>>> REPLACE\n```\n\n```javascript\n### components/prism-sql.min.js\n<<<<<<< SEARCH\nstring:{pattern:/(^|[^@\\\\])(\"|\\')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,greedy:!0,lookbehind:!0},\n=======\nstring:{pattern:/(^|[^@\\\\])(\"|'|`)(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,greedy:!0,lookbehind:!0},\n>>>>>>> REPLACE\n```\n\nThese patches modify the regular expression pattern for strings to include backticks (`\\``) as valid delimiters, ensuring that SQL code using backticks is correctly highlighted as strings."
}