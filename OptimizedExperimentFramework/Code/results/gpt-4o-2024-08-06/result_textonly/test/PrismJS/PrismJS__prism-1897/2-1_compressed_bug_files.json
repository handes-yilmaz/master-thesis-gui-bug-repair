{
    "1": {
        "bug_file": "components/prism-markdown.js",
        "compressed": "NO",
        "line_numbers": 227,
        "compressed_line_numbers": 227,
        "compressed_bug_file_content": "Prism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n\t'blockquote': {\n\t\t// > ...\n\t\tpattern: /^>(?:[\\t ]*>)*/m,\n\t\talias: 'punctuation'\n\t},\n\t'code': [\n\t\t{\n\t\t\t// Prefixed by 4 spaces or 1 tab\n\t\t\tpattern: /^(?: {4}|\\t).+/m,\n\t\t\talias: 'keyword'\n\t\t},\n\t\t{\n\t\t\t// `code`\n\t\t\t// ``code``\n\t\t\tpattern: /``.+?``|`[^`\\n]+`/,\n\t\t\talias: 'keyword'\n\t\t},\n\t\t{\n\t\t\t// ```optional language\n\t\t\t// code block\n\t\t\t// ```\n\t\t\tpattern: /^```[\\s\\S]*?^```$/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'code-block': {\n\t\t\t\t\tpattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'code-language': {\n\t\t\t\t\tpattern: /^(```).+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'punctuation': /```/\n\t\t\t}\n\t\t}\n\t],\n\t'title': [\n\t\t{\n\t\t\t// title 1\n\t\t\t// =======\n\n\t\t\t// title 2\n\t\t\t// -------\n\t\t\tpattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n\t\t\talias: 'important',\n\t\t\tinside: {\n\t\t\t\tpunctuation: /==+$|--+$/\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// # title 1\n\t\t\t// ###### title 6\n\t\t\tpattern: /(^\\s*)#+.+/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'important',\n\t\t\tinside: {\n\t\t\t\tpunctuation: /^#+|#+$/\n\t\t\t}\n\t\t}\n\t],\n\t'hr': {\n\t\t// ***\n\t\t// ---\n\t\t// * * *\n\t\t// -----------\n\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t},\n\t'list': {\n\t\t// * item\n\t\t// + item\n\t\t// - item\n\t\t// 1. item\n\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t},\n\t'url-reference': {\n\t\t// [id]: http://example.com \"Optional title\"\n\t\t// [id]: http://example.com 'Optional title'\n\t\t// [id]: http://example.com (Optional title)\n\t\t// [id]: <http://example.com> \"Optional title\"\n\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n\t\tinside: {\n\t\t\t'variable': {\n\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/\n\t\t},\n\t\talias: 'url'\n\t},\n\t'bold': {\n\t\t// **strong**\n\t\t// __strong__\n\n\t\t// Allow only one line break\n\t\tpattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n\t\t}\n\t},\n\t'italic': {\n\t\t// *em*\n\t\t// _em_\n\n\t\t// Allow only one line break\n\t\tpattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'punctuation': /^[*_]|[*_]$/\n\t\t}\n\t},\n\t'strike': {\n\t\t// ~~strike through~~\n\t\t// ~strike~\n\n\t\t// Allow only one line break\n\t\tpattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'punctuation': /^~~?|~~?$/\n\t\t}\n\t},\n\t'url': {\n\t\t// [example](http://example.com \"Optional title\")\n\t\t// [example] [id]\n\t\tpattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n\t\tinside: {\n\t\t\t'variable': {\n\t\t\t\tpattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n\t\t\t}\n\t\t}\n\t}\n});\n\n['bold', 'italic', 'strike'].forEach(function (token) {\n\t['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n\t\tif (token !== inside) {\n\t\t\tPrism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];\n\t\t}\n\t});\n});\n\nPrism.hooks.add('after-tokenize', function (env) {\n\tif (env.language !== 'markdown' && env.language !== 'md') {\n\t\treturn;\n\t}\n\n\tfunction walkTokens(tokens) {\n\t\tif (!tokens || typeof tokens === 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, l = tokens.length; i < l; i++) {\n\t\t\tvar token = tokens[i];\n\n\t\t\tif (token.type !== 'code') {\n\t\t\t\twalkTokens(token.content);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar codeLang = token.content[1];\n\t\t\tvar codeBlock = token.content[3];\n\n\t\t\tif (codeLang && codeBlock &&\n\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&\n\t\t\t\ttypeof codeLang.content === 'string') {\n\n\t\t\t\t// this might be a language that Prism does not support\n\t\t\t\tvar alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase();\n\n\t\t\t\t// add alias\n\t\t\t\tif (!codeBlock.alias) {\n\t\t\t\t\tcodeBlock.alias = [alias];\n\t\t\t\t} else if (typeof codeBlock.alias === 'string') {\n\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];\n\t\t\t\t} else {\n\t\t\t\t\tcodeBlock.alias.push(alias);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalkTokens(env.tokens);\n});\n\nPrism.hooks.add('wrap', function (env) {\n\tif (env.type !== 'code-block') {\n\t\treturn;\n\t}\n\n\tvar codeLang = '';\n\tfor (var i = 0, l = env.classes.length; i < l; i++) {\n\t\tvar cls = env.classes[i];\n\t\tvar match = /language-(.+)/.exec(cls);\n\t\tif (match) {\n\t\t\tcodeLang = match[1];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar grammar = Prism.languages[codeLang];\n\n\tif (!grammar) {\n\t\treturn;\n\t}\n\n\t// reverse Prism.util.encode\n\tvar code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n\n\tenv.content = Prism.highlight(code, grammar, codeLang);\n});\n\nPrism.languages.md = Prism.languages.markdown;"
    },
    "2": {
        "bug_file": "components/prism-markdown.min.js",
        "compressed": "NO",
        "line_numbers": 1,
        "compressed_line_numbers": 1,
        "compressed_bug_file_content": "Prism.languages.markdown=Prism.languages.extend(\"markup\",{}),Prism.languages.insertBefore(\"markdown\",\"prolog\",{blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},code:[{pattern:/^(?: {4}|\\t).+/m,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\n]+`/,alias:\"keyword\"},{pattern:/^```[\\s\\S]*?^```$/m,greedy:!0,inside:{\"code-block\":{pattern:/^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,lookbehind:!0},\"code-language\":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#+.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,greedy:!0,inside:{punctuation:/^\\*\\*|^__|\\*\\*$|__$/}},italic:{pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,greedy:!0,inside:{punctuation:/^[*_]|[*_]$/}},strike:{pattern:/(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,greedy:!0,inside:{punctuation:/^~~?|~~?$/}},url:{pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,inside:{variable:{pattern:/(!?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/}}}}),[\"bold\",\"italic\",\"strike\"].forEach(function(a){[\"url\",\"bold\",\"italic\",\"strike\"].forEach(function(n){a!==n&&(Prism.languages.markdown[a].inside[n]=Prism.languages.markdown[n])})}),Prism.hooks.add(\"after-tokenize\",function(n){\"markdown\"!==n.language&&\"md\"!==n.language||!function n(a){if(a&&\"string\"!=typeof a)for(var t=0,e=a.length;t<e;t++){var r=a[t];if(\"code\"===r.type){var i=r.content[1],o=r.content[3];if(i&&o&&\"code-language\"===i.type&&\"code-block\"===o.type&&\"string\"==typeof i.content){var s=\"language-\"+i.content.trim().split(/\\s+/)[0].toLowerCase();o.alias?\"string\"==typeof o.alias?o.alias=[o.alias,s]:o.alias.push(s):o.alias=[s]}}else n(r.content)}}(n.tokens)}),Prism.hooks.add(\"wrap\",function(n){if(\"code-block\"===n.type){for(var a=\"\",t=0,e=n.classes.length;t<e;t++){var r=n.classes[t],i=/language-(.+)/.exec(r);if(i){a=i[1];break}}var o=Prism.languages[a];if(o){var s=n.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\");n.content=Prism.highlight(s,o,a)}}}),Prism.languages.md=Prism.languages.markdown;"
    }
}