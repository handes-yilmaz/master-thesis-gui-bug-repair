{
    "components/prism-markdown.js": [
        "Prism.languages.markdown = Prism.languages.extend('markup', {});",
        "Prism.languages.insertBefore('markdown', 'prolog', {",
        "\t'blockquote': {",
        "\t\t// > ...",
        "\t\tpattern: /^>(?:[\\t ]*>)*/m,",
        "\t\talias: 'punctuation'",
        "\t},",
        "\t'code': [",
        "\t\t{",
        "\t\t\t// Prefixed by 4 spaces or 1 tab",
        "\t\t\tpattern: /^(?: {4}|\\t).+/m,",
        "\t\t\talias: 'keyword'",
        "\t\t},",
        "\t\t{",
        "\t\t\t// `code`",
        "\t\t\t// ``code``",
        "\t\t\tpattern: /``.+?``|`[^`\\n]+`/,",
        "\t\t\talias: 'keyword'",
        "\t\t},",
        "\t\t{",
        "\t\t\t// ```optional language",
        "\t\t\t// code block",
        "\t\t\t// ```",
        "\t\t\tpattern: /^```[\\s\\S]*?^```$/m,",
        "\t\t\tgreedy: true,",
        "\t\t\tinside: {",
        "\t\t\t\t'code-block': {",
        "\t\t\t\t\tpattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,",
        "\t\t\t\t\tlookbehind: true",
        "\t\t\t\t},",
        "\t\t\t\t'code-language': {",
        "\t\t\t\t\tpattern: /^(```).+/,",
        "\t\t\t\t\tlookbehind: true",
        "\t\t\t\t},",
        "\t\t\t\t'punctuation': /```/",
        "\t\t\t}",
        "\t\t}",
        "\t],",
        "\t'title': [",
        "\t\t{",
        "\t\t\t// title 1",
        "\t\t\t// =======",
        "",
        "\t\t\t// title 2",
        "\t\t\t// -------",
        "\t\t\tpattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,",
        "\t\t\talias: 'important',",
        "\t\t\tinside: {",
        "\t\t\t\tpunctuation: /==+$|--+$/",
        "\t\t\t}",
        "\t\t},",
        "\t\t{",
        "\t\t\t// # title 1",
        "\t\t\t// ###### title 6",
        "\t\t\tpattern: /(^\\s*)#+.+/m,",
        "\t\t\tlookbehind: true,",
        "\t\t\talias: 'important',",
        "\t\t\tinside: {",
        "\t\t\t\tpunctuation: /^#+|#+$/",
        "\t\t\t}",
        "\t\t}",
        "\t],",
        "\t'hr': {",
        "\t\t// ***",
        "\t\t// ---",
        "\t\t// * * *",
        "\t\t// -----------",
        "\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,",
        "\t\tlookbehind: true,",
        "\t\talias: 'punctuation'",
        "\t},",
        "\t'list': {",
        "\t\t// * item",
        "\t\t// + item",
        "\t\t// - item",
        "\t\t// 1. item",
        "\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,",
        "\t\tlookbehind: true,",
        "\t\talias: 'punctuation'",
        "\t},",
        "\t'url-reference': {",
        "\t\t// [id]: http://example.com \"Optional title\"",
        "\t\t// [id]: http://example.com 'Optional title'",
        "\t\t// [id]: http://example.com (Optional title)",
        "\t\t// [id]: <http://example.com> \"Optional title\"",
        "\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,",
        "\t\tinside: {",
        "\t\t\t'variable': {",
        "\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,",
        "\t\t\t\tlookbehind: true",
        "\t\t\t},",
        "\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,",
        "\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/",
        "\t\t},",
        "\t\talias: 'url'",
        "\t},",
        "\t'bold': {",
        "\t\t// **strong**",
        "\t\t// __strong__",
        "",
        "\t\t// Allow only one line break",
        "\t\tpattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
        "\t\tlookbehind: true,",
        "\t\tgreedy: true,",
        "\t\tinside: {",
        "\t\t\t'punctuation': /^\\*\\*|^__|\\*\\*$|__$/",
        "\t\t}",
        "\t},",
        "\t'italic': {",
        "\t\t// *em*",
        "\t\t// _em_",
        "",
        "\t\t// Allow only one line break",
        "\t\tpattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
        "\t\tlookbehind: true,",
        "\t\tgreedy: true,",
        "\t\tinside: {",
        "\t\t\t'punctuation': /^[*_]|[*_]$/",
        "\t\t}",
        "\t},",
        "\t'strike': {",
        "\t\t// ~~strike through~~",
        "\t\t// ~strike~",
        "",
        "\t\t// Allow only one line break",
        "\t\tpattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
        "\t\tlookbehind: true,",
        "\t\tgreedy: true,",
        "\t\tinside: {",
        "\t\t\t'punctuation': /^~~?|~~?$/",
        "\t\t}",
        "\t},",
        "\t'url': {",
        "\t\t// [example](http://example.com \"Optional title\")",
        "\t\t// [example] [id]",
        "\t\tpattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,",
        "\t\tinside: {",
        "\t\t\t'variable': {",
        "\t\t\t\tpattern: /(!?\\[)[^\\]]+(?=\\]$)/,",
        "\t\t\t\tlookbehind: true",
        "\t\t\t},",
        "\t\t\t'string': {",
        "\t\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "});",
        "",
        "['bold', 'italic', 'strike'].forEach(function (token) {",
        "\t['url', 'bold', 'italic', 'strike'].forEach(function (inside) {",
        "\t\tif (token !== inside) {",
        "\t\t\tPrism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];",
        "\t\t}",
        "\t});",
        "});",
        "",
        "Prism.hooks.add('after-tokenize', function (env) {",
        "\tif (env.language !== 'markdown' && env.language !== 'md') {",
        "\t\treturn;",
        "\t}",
        "",
        "\tfunction walkTokens(tokens) {",
        "\t\tif (!tokens || typeof tokens === 'string') {",
        "\t\t\treturn;",
        "\t\t}",
        "",
        "\t\tfor (var i = 0, l = tokens.length; i < l; i++) {",
        "\t\t\tvar token = tokens[i];",
        "",
        "\t\t\tif (token.type !== 'code') {",
        "\t\t\t\twalkTokens(token.content);",
        "\t\t\t\tcontinue;",
        "\t\t\t}",
        "",
        "\t\t\tvar codeLang = token.content[1];",
        "\t\t\tvar codeBlock = token.content[3];",
        "",
        "\t\t\tif (codeLang && codeBlock &&",
        "\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&",
        "\t\t\t\ttypeof codeLang.content === 'string') {",
        "",
        "\t\t\t\t// this might be a language that Prism does not support",
        "\t\t\t\tvar alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase();",
        "",
        "\t\t\t\t// add alias",
        "\t\t\t\tif (!codeBlock.alias) {",
        "\t\t\t\t\tcodeBlock.alias = [alias];",
        "\t\t\t\t} else if (typeof codeBlock.alias === 'string') {",
        "\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];",
        "\t\t\t\t} else {",
        "\t\t\t\t\tcodeBlock.alias.push(alias);",
        "\t\t\t\t}",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "",
        "\twalkTokens(env.tokens);",
        "});",
        "",
        "Prism.hooks.add('wrap', function (env) {",
        "\tif (env.type !== 'code-block') {",
        "\t\treturn;",
        "\t}",
        "",
        "\tvar codeLang = '';",
        "\tfor (var i = 0, l = env.classes.length; i < l; i++) {",
        "\t\tvar cls = env.classes[i];",
        "\t\tvar match = /language-(.+)/.exec(cls);",
        "\t\tif (match) {",
        "\t\t\tcodeLang = match[1];",
        "\t\t\tbreak;",
        "\t\t}",
        "\t}",
        "",
        "\tvar grammar = Prism.languages[codeLang];",
        "",
        "\tif (!grammar) {",
        "\t\treturn;",
        "\t}",
        "",
        "\t// reverse Prism.util.encode",
        "\tvar code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');",
        "",
        "\tenv.content = Prism.highlight(code, grammar, codeLang);",
        "});",
        "",
        "Prism.languages.md = Prism.languages.markdown;"
    ]
}