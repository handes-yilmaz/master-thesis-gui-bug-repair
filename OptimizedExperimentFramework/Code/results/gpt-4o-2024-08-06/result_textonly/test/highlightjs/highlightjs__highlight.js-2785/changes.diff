diff --git a/src/languages/php.js b/src/languages/php.js
index 972083e4b..c1759b68a 100644
--- a/src/languages/php.js
+++ b/src/languages/php.js
@@ -80,88 +80,89 @@ export default function(hljs) {
     // Reserved interfaces:
     // <https://www.php.net/manual/en/reserved.interfaces.php>
     'ArrayAccess Closure Generator Iterator IteratorAggregate Serializable Throwable Traversable WeakReference ' +
-    // Reserved classes:
-    // <https://www.php.net/manual/en/reserved.classes.php>
-    'Directory __PHP_Incomplete_Class parent php_user_filter self static stdClass'
-  };
-  return {
-    aliases: ['php', 'php3', 'php4', 'php5', 'php6', 'php7', 'php8'],
-    case_insensitive: true,
-    keywords: KEYWORDS,
-    contains: [
-      hljs.HASH_COMMENT_MODE,
-      hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),
-      hljs.COMMENT(
-        '/\\*',
-        '\\*/',
-        {
-          contains: [
-            {
-              className: 'doctag',
-              begin: '@[A-Za-z]+'
-            }
-          ]
-        }
-      ),
-      hljs.COMMENT(
-        '__halt_compiler.+?;',
-        false,
-        {
-          endsWithParent: true,
-          keywords: '__halt_compiler'
-        }
-      ),
-      PREPROCESSOR,
-      {
-        className: 'keyword', begin: /\$this\b/
-      },
-      VARIABLE,
-      {
-        // swallow composed identifiers to avoid parsing them as keywords
-        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
-      },
-      {
-        className: 'function',
-        beginKeywords: 'fn function', end: /[;{]/, excludeEnd: true,
-        illegal: '[$%\\[]',
-        contains: [
-          hljs.UNDERSCORE_TITLE_MODE,
-          {
-            className: 'params',
-            begin: '\\(', end: '\\)',
-            excludeBegin: true,
-            excludeEnd: true,
-            keywords: KEYWORDS,
-            contains: [
-              'self',
-              VARIABLE,
-              hljs.C_BLOCK_COMMENT_MODE,
-              STRING,
-              NUMBER
-            ]
-          }
-        ]
-      },
-      {
-        className: 'class',
-        beginKeywords: 'class interface', end: '{', excludeEnd: true,
-        illegal: /[:\(\$"]/,
-        contains: [
-          {beginKeywords: 'extends implements'},
-          hljs.UNDERSCORE_TITLE_MODE
-        ]
-      },
-      {
-        beginKeywords: 'namespace', end: ';',
-        illegal: /[\.']/,
-        contains: [hljs.UNDERSCORE_TITLE_MODE]
-      },
-      {
-        beginKeywords: 'use', end: ';',
-        contains: [hljs.UNDERSCORE_TITLE_MODE]
-      },
-      {
-        begin: '=>' // No markup, just a relevance booster
+return {
+aliases: ['php', 'php3', 'php4', 'php5', 'php6', 'php7', 'php8'],
+case_insensitive: true,
+keywords: KEYWORDS,
+contains: [
+hljs.HASH_COMMENT_MODE,
+hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),
+hljs.COMMENT(
+'/\\*',
+'\\*/',
+{
+contains: [
+{
+className: 'doctag',
+begin: '@[A-Za-z]+'
+}
+]
+}
+),
+hljs.COMMENT(
+'__halt_compiler.+?;',
+false,
+{
+endsWithParent: true,
+keywords: '__halt_compiler'
+}
+),
+PREPROCESSOR,
+{
+className: 'keyword', begin: /\$this\b/
+},
+VARIABLE,
+{
+// swallow composed identifiers to avoid parsing them as keywords
+begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
+},
+{
+className: 'function',
+beginKeywords: 'fn function', end: /[;{]/, excludeEnd: true,
+illegal: '[$%\\[]',
+contains: [
+hljs.UNDERSCORE_TITLE_MODE,
+{
+className: 'params',
+begin: '\\(', end: '\\)',
+excludeBegin: true,
+excludeEnd: true,
+keywords: KEYWORDS,
+contains: [
+'self',
+VARIABLE,
+hljs.C_BLOCK_COMMENT_MODE,
+STRING,
+NUMBER
+]
+}
+]
+},
+{
+className: 'class',
+beginKeywords: 'class interface', end: '{', excludeEnd: true,
+illegal: /[:\(\$"]/,
+contains: [
+{beginKeywords: 'extends implements'},
+hljs.UNDERSCORE_TITLE_MODE
+]
+},
+{
+beginKeywords: 'namespace', end: ';',
+illegal: /[\.']/,
+contains: [hljs.UNDERSCORE_TITLE_MODE]
+},
+{
+beginKeywords: 'use', end: ';',
+contains: [hljs.UNDERSCORE_TITLE_MODE]
+},
+{
+begin: '=>' // No markup, just a relevance booster
+},
+STRING,
+NUMBER
+]
+};
       },
       STRING,
       NUMBER
