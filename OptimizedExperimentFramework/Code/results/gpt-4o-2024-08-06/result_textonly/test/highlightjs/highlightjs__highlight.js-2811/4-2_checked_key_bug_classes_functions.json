{
    "bug_classes": {
        "1": {
            "class_name": "SUBST (not found) ",
            "file_path": "src/languages/python.js",
            "class_details": [
                {
                    "name": "SUBST",
                    "start_line": 1,
                    "end_line": 285
                }
            ],
            "class_code": [
                "/*",
                "Language: Python",
                "Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.",
                "Website: https://www.python.org",
                "Category: common",
                "*/",
                "",
                "export default function(hljs) {",
                "  const RESERVED_WORDS = [",
                "    'and',",
                "    'as',",
                "    'assert',",
                "    'async',",
                "    'await',",
                "    'break',",
                "    'class',",
                "    'continue',",
                "    'def',",
                "    'del',",
                "    'elif',",
                "    'else',",
                "    'except',",
                "    'finally',",
                "    'for',",
                "    '',",
                "    'from',",
                "    'global',",
                "    'if',",
                "    'import',",
                "    'in',",
                "    'is',",
                "    'lambda',",
                "    'nonlocal|10',",
                "    'not',",
                "    'or',",
                "    'pass',",
                "    'raise',",
                "    'return',",
                "    'try',",
                "    'while',",
                "    'with',",
                "    'yield',",
                "  ];",
                "",
                "  const BUILT_INS = [",
                "    '__import__',",
                "    'abs',",
                "    'all',",
                "    'any',",
                "    'ascii',",
                "    'bin',",
                "    'bool',",
                "    'breakpoint',",
                "    'bytearray',",
                "    'bytes',",
                "    'callable',",
                "    'chr',",
                "    'classmethod',",
                "    'compile',",
                "    'complex',",
                "    'delattr',",
                "    'dict',",
                "    'dir',",
                "    'divmod',",
                "    'enumerate',",
                "    'eval',",
                "    'exec',",
                "    'filter',",
                "    'float',",
                "    'format',",
                "    'frozenset',",
                "    'getattr',",
                "    'globals',",
                "    'hasattr',",
                "    'hash',",
                "    'help',",
                "    'hex',",
                "    'id',",
                "    'input',",
                "    'int',",
                "    'isinstance',",
                "    'issubclass',",
                "    'iter',",
                "    'len',",
                "    'list',",
                "    'locals',",
                "    'map',",
                "    'max',",
                "    'memoryview',",
                "    'min',",
                "    'next',",
                "    'object',",
                "    'oct',",
                "    'open',",
                "    'ord',",
                "    'pow',",
                "    'print',",
                "    'property',",
                "    'range',",
                "    'repr',",
                "    'reversed',",
                "    'round',",
                "    'set',",
                "    'setattr',",
                "    'slice',",
                "    'sorted',",
                "    'staticmethod',",
                "    'str',",
                "    'sum',",
                "    'super',",
                "    'tuple',",
                "    'type',",
                "    'vars',",
                "    'zip',",
                "  ];",
                "",
                "  const LITERALS = [",
                "    '__debug__',",
                "    'Ellipsis',",
                "    'False',",
                "    'None',",
                "    'NotImplemented',",
                "    'True',",
                "  ];",
                "",
                "  const KEYWORDS = {",
                "    keyword: RESERVED_WORDS.join(' '),",
                "    built_in: BUILT_INS.join(' '),",
                "    literal: LITERALS.join(' ')",
                "  };",
                "",
                "  const PROMPT = {",
                "    className: 'meta',  begin: /^(>>>|\\.\\.\\.) /",
                "  };",
                "",
                "  const SUBST = {",
                "    className: 'subst',",
                "    begin: /\\{/, end: /\\}/,",
                "    keywords: KEYWORDS,",
                "    illegal: /#/",
                "  };",
                "",
                "  const LITERAL_BRACKET = {",
                "    begin: /\\{\\{/,",
                "    relevance: 0",
                "  };",
                "",
                "  const STRING = {",
                "    className: 'string',",
                "    contains: [hljs.BACKSLASH_ESCAPE],",
                "    variants: [",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])'/, end: /'/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])\"/, end: /\"/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])\"/, end: /\"/",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"/, end: /\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      hljs.APOS_STRING_MODE,",
                "      hljs.QUOTE_STRING_MODE",
                "    ]",
                "  };",
                "",
                "  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals",
                "  const digitpart = '[0-9](_?[0-9])*';",
                "  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;",
                "  const NUMBER = {",
                "    className: 'number', relevance: 0,",
                "    variants: [",
                "      // exponentfloat, pointfloat",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals",
                "      // optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      // Note: no leading \\b because floats can start with a decimal point",
                "      // and we don't want to mishandle e.g. `fn(.5)`,",
                "      // no trailing \\b for pointfloat because it can end with a decimal point",
                "      // and we don't want to mishandle e.g. `0..hex()`; this should be safe",
                "      // because both MUST contain a decimal point and so cannot be confused with",
                "      // the interior part of an identifier",
                "      { begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b` },",
                "      { begin: `(${pointfloat})[jJ]?` },",
                "",
                "      // decinteger, bininteger, octinteger, hexinteger",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals",
                "      // optionally \"long\" in Python 2",
                "      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals",
                "      // decinteger is optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b' },",
                "      { begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b' },",
                "",
                "      // imagnumber (digitpart-based)",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: `\\\\b(${digitpart})[jJ]\\\\b` },",
                "    ]",
                "  };",
                "",
                "  const PARAMS = {",
                "    className: 'params',",
                "    variants: [",
                "      // Exclude params at functions without params",
                "      {begin: /\\(\\s*\\)/, skip: true, className: null },",
                "      {",
                "        begin: /\\(/, end: /\\)/, excludeBegin: true, excludeEnd: true,",
                "        keywords: KEYWORDS,",
                "        contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE],",
                "      },",
                "    ],",
                "  };",
                "  SUBST.contains = [STRING, NUMBER, PROMPT];",
                "",
                "  return {",
                "    name: 'Python',",
                "    aliases: ['py', 'gyp', 'ipython'],",
                "    keywords: KEYWORDS,",
                "    illegal: /(<\\/|->|\\?)|=>/,",
                "    contains: [",
                "      PROMPT,",
                "      NUMBER,",
                "      // eat \"if\" prior to string so that it won't accidentally be",
                "      // labeled as an f-string as in:",
                "      { beginKeywords: \"if\", relevance: 0 },",
                "      STRING,",
                "      hljs.HASH_COMMENT_MODE,",
                "      {",
                "        variants: [",
                "          {className: 'function', beginKeywords: 'def'},",
                "          {className: 'class', beginKeywords: 'class'}",
                "        ],",
                "        end: /:/,",
                "        illegal: /[${=;\\n,]/,",
                "        contains: [",
                "          hljs.UNDERSCORE_TITLE_MODE,",
                "          PARAMS,",
                "          {",
                "            begin: /->/, endsWithParent: true,",
                "            keywords: 'None'",
                "          }",
                "        ]",
                "      },",
                "      {",
                "        className: 'meta',",
                "        begin: /^[\\t ]*@/, end: /$/",
                "      },",
                "      {",
                "        begin: /\\b(print|exec)\\(/ // don\u2019t highlight keywords-turned-functions in Python 3",
                "      }",
                "    ]",
                "  };",
                "}"
            ]
        },
        "2": {
            "class_name": "HASH_COMMENT_MODE (not found) ",
            "file_path": "src/languages/python.js",
            "class_details": [
                {
                    "name": "HASH_COMMENT_MODE",
                    "start_line": 1,
                    "end_line": 285
                }
            ],
            "class_code": [
                "/*",
                "Language: Python",
                "Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.",
                "Website: https://www.python.org",
                "Category: common",
                "*/",
                "",
                "export default function(hljs) {",
                "  const RESERVED_WORDS = [",
                "    'and',",
                "    'as',",
                "    'assert',",
                "    'async',",
                "    'await',",
                "    'break',",
                "    'class',",
                "    'continue',",
                "    'def',",
                "    'del',",
                "    'elif',",
                "    'else',",
                "    'except',",
                "    'finally',",
                "    'for',",
                "    '',",
                "    'from',",
                "    'global',",
                "    'if',",
                "    'import',",
                "    'in',",
                "    'is',",
                "    'lambda',",
                "    'nonlocal|10',",
                "    'not',",
                "    'or',",
                "    'pass',",
                "    'raise',",
                "    'return',",
                "    'try',",
                "    'while',",
                "    'with',",
                "    'yield',",
                "  ];",
                "",
                "  const BUILT_INS = [",
                "    '__import__',",
                "    'abs',",
                "    'all',",
                "    'any',",
                "    'ascii',",
                "    'bin',",
                "    'bool',",
                "    'breakpoint',",
                "    'bytearray',",
                "    'bytes',",
                "    'callable',",
                "    'chr',",
                "    'classmethod',",
                "    'compile',",
                "    'complex',",
                "    'delattr',",
                "    'dict',",
                "    'dir',",
                "    'divmod',",
                "    'enumerate',",
                "    'eval',",
                "    'exec',",
                "    'filter',",
                "    'float',",
                "    'format',",
                "    'frozenset',",
                "    'getattr',",
                "    'globals',",
                "    'hasattr',",
                "    'hash',",
                "    'help',",
                "    'hex',",
                "    'id',",
                "    'input',",
                "    'int',",
                "    'isinstance',",
                "    'issubclass',",
                "    'iter',",
                "    'len',",
                "    'list',",
                "    'locals',",
                "    'map',",
                "    'max',",
                "    'memoryview',",
                "    'min',",
                "    'next',",
                "    'object',",
                "    'oct',",
                "    'open',",
                "    'ord',",
                "    'pow',",
                "    'print',",
                "    'property',",
                "    'range',",
                "    'repr',",
                "    'reversed',",
                "    'round',",
                "    'set',",
                "    'setattr',",
                "    'slice',",
                "    'sorted',",
                "    'staticmethod',",
                "    'str',",
                "    'sum',",
                "    'super',",
                "    'tuple',",
                "    'type',",
                "    'vars',",
                "    'zip',",
                "  ];",
                "",
                "  const LITERALS = [",
                "    '__debug__',",
                "    'Ellipsis',",
                "    'False',",
                "    'None',",
                "    'NotImplemented',",
                "    'True',",
                "  ];",
                "",
                "  const KEYWORDS = {",
                "    keyword: RESERVED_WORDS.join(' '),",
                "    built_in: BUILT_INS.join(' '),",
                "    literal: LITERALS.join(' ')",
                "  };",
                "",
                "  const PROMPT = {",
                "    className: 'meta',  begin: /^(>>>|\\.\\.\\.) /",
                "  };",
                "",
                "  const SUBST = {",
                "    className: 'subst',",
                "    begin: /\\{/, end: /\\}/,",
                "    keywords: KEYWORDS,",
                "    illegal: /#/",
                "  };",
                "",
                "  const LITERAL_BRACKET = {",
                "    begin: /\\{\\{/,",
                "    relevance: 0",
                "  };",
                "",
                "  const STRING = {",
                "    className: 'string',",
                "    contains: [hljs.BACKSLASH_ESCAPE],",
                "    variants: [",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])'/, end: /'/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])\"/, end: /\"/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])\"/, end: /\"/",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"/, end: /\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      hljs.APOS_STRING_MODE,",
                "      hljs.QUOTE_STRING_MODE",
                "    ]",
                "  };",
                "",
                "  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals",
                "  const digitpart = '[0-9](_?[0-9])*';",
                "  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;",
                "  const NUMBER = {",
                "    className: 'number', relevance: 0,",
                "    variants: [",
                "      // exponentfloat, pointfloat",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals",
                "      // optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      // Note: no leading \\b because floats can start with a decimal point",
                "      // and we don't want to mishandle e.g. `fn(.5)`,",
                "      // no trailing \\b for pointfloat because it can end with a decimal point",
                "      // and we don't want to mishandle e.g. `0..hex()`; this should be safe",
                "      // because both MUST contain a decimal point and so cannot be confused with",
                "      // the interior part of an identifier",
                "      { begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b` },",
                "      { begin: `(${pointfloat})[jJ]?` },",
                "",
                "      // decinteger, bininteger, octinteger, hexinteger",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals",
                "      // optionally \"long\" in Python 2",
                "      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals",
                "      // decinteger is optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b' },",
                "      { begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b' },",
                "",
                "      // imagnumber (digitpart-based)",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: `\\\\b(${digitpart})[jJ]\\\\b` },",
                "    ]",
                "  };",
                "",
                "  const PARAMS = {",
                "    className: 'params',",
                "    variants: [",
                "      // Exclude params at functions without params",
                "      {begin: /\\(\\s*\\)/, skip: true, className: null },",
                "      {",
                "        begin: /\\(/, end: /\\)/, excludeBegin: true, excludeEnd: true,",
                "        keywords: KEYWORDS,",
                "        contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE],",
                "      },",
                "    ],",
                "  };",
                "  SUBST.contains = [STRING, NUMBER, PROMPT];",
                "",
                "  return {",
                "    name: 'Python',",
                "    aliases: ['py', 'gyp', 'ipython'],",
                "    keywords: KEYWORDS,",
                "    illegal: /(<\\/|->|\\?)|=>/,",
                "    contains: [",
                "      PROMPT,",
                "      NUMBER,",
                "      // eat \"if\" prior to string so that it won't accidentally be",
                "      // labeled as an f-string as in:",
                "      { beginKeywords: \"if\", relevance: 0 },",
                "      STRING,",
                "      hljs.HASH_COMMENT_MODE,",
                "      {",
                "        variants: [",
                "          {className: 'function', beginKeywords: 'def'},",
                "          {className: 'class', beginKeywords: 'class'}",
                "        ],",
                "        end: /:/,",
                "        illegal: /[${=;\\n,]/,",
                "        contains: [",
                "          hljs.UNDERSCORE_TITLE_MODE,",
                "          PARAMS,",
                "          {",
                "            begin: /->/, endsWithParent: true,",
                "            keywords: 'None'",
                "          }",
                "        ]",
                "      },",
                "      {",
                "        className: 'meta',",
                "        begin: /^[\\t ]*@/, end: /$/",
                "      },",
                "      {",
                "        begin: /\\b(print|exec)\\(/ // don\u2019t highlight keywords-turned-functions in Python 3",
                "      }",
                "    ]",
                "  };",
                "}"
            ]
        },
        "3": {
            "class_name": "  (not found) ",
            "file_path": "src/languages/python.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 285
                }
            ],
            "class_code": [
                "/*",
                "Language: Python",
                "Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.",
                "Website: https://www.python.org",
                "Category: common",
                "*/",
                "",
                "export default function(hljs) {",
                "  const RESERVED_WORDS = [",
                "    'and',",
                "    'as',",
                "    'assert',",
                "    'async',",
                "    'await',",
                "    'break',",
                "    'class',",
                "    'continue',",
                "    'def',",
                "    'del',",
                "    'elif',",
                "    'else',",
                "    'except',",
                "    'finally',",
                "    'for',",
                "    '',",
                "    'from',",
                "    'global',",
                "    'if',",
                "    'import',",
                "    'in',",
                "    'is',",
                "    'lambda',",
                "    'nonlocal|10',",
                "    'not',",
                "    'or',",
                "    'pass',",
                "    'raise',",
                "    'return',",
                "    'try',",
                "    'while',",
                "    'with',",
                "    'yield',",
                "  ];",
                "",
                "  const BUILT_INS = [",
                "    '__import__',",
                "    'abs',",
                "    'all',",
                "    'any',",
                "    'ascii',",
                "    'bin',",
                "    'bool',",
                "    'breakpoint',",
                "    'bytearray',",
                "    'bytes',",
                "    'callable',",
                "    'chr',",
                "    'classmethod',",
                "    'compile',",
                "    'complex',",
                "    'delattr',",
                "    'dict',",
                "    'dir',",
                "    'divmod',",
                "    'enumerate',",
                "    'eval',",
                "    'exec',",
                "    'filter',",
                "    'float',",
                "    'format',",
                "    'frozenset',",
                "    'getattr',",
                "    'globals',",
                "    'hasattr',",
                "    'hash',",
                "    'help',",
                "    'hex',",
                "    'id',",
                "    'input',",
                "    'int',",
                "    'isinstance',",
                "    'issubclass',",
                "    'iter',",
                "    'len',",
                "    'list',",
                "    'locals',",
                "    'map',",
                "    'max',",
                "    'memoryview',",
                "    'min',",
                "    'next',",
                "    'object',",
                "    'oct',",
                "    'open',",
                "    'ord',",
                "    'pow',",
                "    'print',",
                "    'property',",
                "    'range',",
                "    'repr',",
                "    'reversed',",
                "    'round',",
                "    'set',",
                "    'setattr',",
                "    'slice',",
                "    'sorted',",
                "    'staticmethod',",
                "    'str',",
                "    'sum',",
                "    'super',",
                "    'tuple',",
                "    'type',",
                "    'vars',",
                "    'zip',",
                "  ];",
                "",
                "  const LITERALS = [",
                "    '__debug__',",
                "    'Ellipsis',",
                "    'False',",
                "    'None',",
                "    'NotImplemented',",
                "    'True',",
                "  ];",
                "",
                "  const KEYWORDS = {",
                "    keyword: RESERVED_WORDS.join(' '),",
                "    built_in: BUILT_INS.join(' '),",
                "    literal: LITERALS.join(' ')",
                "  };",
                "",
                "  const PROMPT = {",
                "    className: 'meta',  begin: /^(>>>|\\.\\.\\.) /",
                "  };",
                "",
                "  const SUBST = {",
                "    className: 'subst',",
                "    begin: /\\{/, end: /\\}/,",
                "    keywords: KEYWORDS,",
                "    illegal: /#/",
                "  };",
                "",
                "  const LITERAL_BRACKET = {",
                "    begin: /\\{\\{/,",
                "    relevance: 0",
                "  };",
                "",
                "  const STRING = {",
                "    className: 'string',",
                "    contains: [hljs.BACKSLASH_ESCAPE],",
                "    variants: [",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])'/, end: /'/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])\"/, end: /\"/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])\"/, end: /\"/",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"/, end: /\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      hljs.APOS_STRING_MODE,",
                "      hljs.QUOTE_STRING_MODE",
                "    ]",
                "  };",
                "",
                "  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals",
                "  const digitpart = '[0-9](_?[0-9])*';",
                "  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;",
                "  const NUMBER = {",
                "    className: 'number', relevance: 0,",
                "    variants: [",
                "      // exponentfloat, pointfloat",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals",
                "      // optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      // Note: no leading \\b because floats can start with a decimal point",
                "      // and we don't want to mishandle e.g. `fn(.5)`,",
                "      // no trailing \\b for pointfloat because it can end with a decimal point",
                "      // and we don't want to mishandle e.g. `0..hex()`; this should be safe",
                "      // because both MUST contain a decimal point and so cannot be confused with",
                "      // the interior part of an identifier",
                "      { begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b` },",
                "      { begin: `(${pointfloat})[jJ]?` },",
                "",
                "      // decinteger, bininteger, octinteger, hexinteger",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals",
                "      // optionally \"long\" in Python 2",
                "      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals",
                "      // decinteger is optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b' },",
                "      { begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b' },",
                "",
                "      // imagnumber (digitpart-based)",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: `\\\\b(${digitpart})[jJ]\\\\b` },",
                "    ]",
                "  };",
                "",
                "  const PARAMS = {",
                "    className: 'params',",
                "    variants: [",
                "      // Exclude params at functions without params",
                "      {begin: /\\(\\s*\\)/, skip: true, className: null },",
                "      {",
                "        begin: /\\(/, end: /\\)/, excludeBegin: true, excludeEnd: true,",
                "        keywords: KEYWORDS,",
                "        contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE],",
                "      },",
                "    ],",
                "  };",
                "  SUBST.contains = [STRING, NUMBER, PROMPT];",
                "",
                "  return {",
                "    name: 'Python',",
                "    aliases: ['py', 'gyp', 'ipython'],",
                "    keywords: KEYWORDS,",
                "    illegal: /(<\\/|->|\\?)|=>/,",
                "    contains: [",
                "      PROMPT,",
                "      NUMBER,",
                "      // eat \"if\" prior to string so that it won't accidentally be",
                "      // labeled as an f-string as in:",
                "      { beginKeywords: \"if\", relevance: 0 },",
                "      STRING,",
                "      hljs.HASH_COMMENT_MODE,",
                "      {",
                "        variants: [",
                "          {className: 'function', beginKeywords: 'def'},",
                "          {className: 'class', beginKeywords: 'class'}",
                "        ],",
                "        end: /:/,",
                "        illegal: /[${=;\\n,]/,",
                "        contains: [",
                "          hljs.UNDERSCORE_TITLE_MODE,",
                "          PARAMS,",
                "          {",
                "            begin: /->/, endsWithParent: true,",
                "            keywords: 'None'",
                "          }",
                "        ]",
                "      },",
                "      {",
                "        className: 'meta',",
                "        begin: /^[\\t ]*@/, end: /$/",
                "      },",
                "      {",
                "        begin: /\\b(print|exec)\\(/ // don\u2019t highlight keywords-turned-functions in Python 3",
                "      }",
                "    ]",
                "  };",
                "}"
            ]
        }
    },
    "bug_functions": {
        "4": {
            "function_name": "COMMENT (not found) ",
            "file_path": "src/lib/modes.js",
            "function_details": [
                {
                    "name": "COMMENT",
                    "start_line": 1,
                    "end_line": 169
                }
            ],
            "function_code": [
                "import { inherit } from './utils.js';",
                "import * as regex from './regex.js';",
                "",
                "// Common regexps",
                "export const IDENT_RE = '[a-zA-Z]\\\\w*';",
                "export const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';",
                "export const NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';",
                "export const C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float",
                "export const BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...",
                "export const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';",
                "",
                "/**",
                "* @param { Partial<Mode> & {binary?: string | RegExp} } opts",
                "*/",
                "export const SHEBANG = (opts = {}) => {",
                "  const beginShebang = /^#![ ]*\\//;",
                "  if (opts.binary) {",
                "    opts.begin = regex.concat(",
                "      beginShebang,",
                "      /.*\\b/,",
                "      opts.binary,",
                "      /\\b.*/);",
                "  }",
                "  return inherit({",
                "    className: 'meta',",
                "    begin: beginShebang,",
                "    end: /$/,",
                "    relevance: 0,",
                "    /** @type {ModeCallback} */",
                "    \"on:begin\": (m, resp) => {",
                "      if (m.index !== 0) resp.ignoreMatch();",
                "    }",
                "  }, opts);",
                "};",
                "",
                "// Common modes",
                "export const BACKSLASH_ESCAPE = {",
                "  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0",
                "};",
                "export const APOS_STRING_MODE = {",
                "  className: 'string',",
                "  begin: '\\'',",
                "  end: '\\'',",
                "  illegal: '\\\\n',",
                "  contains: [BACKSLASH_ESCAPE]",
                "};",
                "export const QUOTE_STRING_MODE = {",
                "  className: 'string',",
                "  begin: '\"',",
                "  end: '\"',",
                "  illegal: '\\\\n',",
                "  contains: [BACKSLASH_ESCAPE]",
                "};",
                "export const PHRASAL_WORDS_MODE = {",
                "  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/",
                "};",
                "/**",
                " * Creates a comment mode",
                " *",
                " * @param {string | RegExp} begin",
                " * @param {string | RegExp} end",
                " * @param {Mode | {}} [modeOptions]",
                " * @returns {Partial<Mode>}",
                " */",
                "export const COMMENT = function(begin, end, modeOptions = {}) {",
                "  var mode = inherit(",
                "    {",
                "      className: 'comment',",
                "      begin,",
                "      end,",
                "      contains: []",
                "    },",
                "    modeOptions",
                "  );",
                "  mode.contains.push(PHRASAL_WORDS_MODE);",
                "  mode.contains.push({",
                "    className: 'doctag',",
                "    begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',",
                "    relevance: 0",
                "  });",
                "  return mode;",
                "};",
                "export const C_LINE_COMMENT_MODE = COMMENT('//', '$');",
                "export const C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');",
                "export const HASH_COMMENT_MODE = COMMENT('#', '$');",
                "export const NUMBER_MODE = {",
                "  className: 'number',",
                "  begin: NUMBER_RE,",
                "  relevance: 0",
                "};",
                "export const C_NUMBER_MODE = {",
                "  className: 'number',",
                "  begin: C_NUMBER_RE,",
                "  relevance: 0",
                "};",
                "export const BINARY_NUMBER_MODE = {",
                "  className: 'number',",
                "  begin: BINARY_NUMBER_RE,",
                "  relevance: 0",
                "};",
                "export const CSS_NUMBER_MODE = {",
                "  className: 'number',",
                "  begin: NUMBER_RE + '(' +",
                "    '%|em|ex|ch|rem' +",
                "    '|vw|vh|vmin|vmax' +",
                "    '|cm|mm|in|pt|pc|px' +",
                "    '|deg|grad|rad|turn' +",
                "    '|s|ms' +",
                "    '|Hz|kHz' +",
                "    '|dpi|dpcm|dppx' +",
                "    ')?',",
                "  relevance: 0",
                "};",
                "export const REGEXP_MODE = {",
                "  // this outer rule makes sure we actually have a WHOLE regex and not simply",
                "  // an expression such as:",
                "  //",
                "  //     3 / something",
                "  //",
                "  // (which will then blow up when regex's `illegal` sees the newline)",
                "  begin: /(?=\\/[^/\\n]*\\/)/,",
                "  contains: [{",
                "    className: 'regexp',",
                "    begin: /\\//,",
                "    end: /\\/[gimuy]*/,",
                "    illegal: /\\n/,",
                "    contains: [",
                "      BACKSLASH_ESCAPE,",
                "      {",
                "        begin: /\\[/,",
                "        end: /\\]/,",
                "        relevance: 0,",
                "        contains: [BACKSLASH_ESCAPE]",
                "      }",
                "    ]",
                "  }]",
                "};",
                "export const TITLE_MODE = {",
                "  className: 'title',",
                "  begin: IDENT_RE,",
                "  relevance: 0",
                "};",
                "export const UNDERSCORE_TITLE_MODE = {",
                "  className: 'title',",
                "  begin: UNDERSCORE_IDENT_RE,",
                "  relevance: 0",
                "};",
                "export const METHOD_GUARD = {",
                "  // excludes method names from keyword processing",
                "  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,",
                "  relevance: 0",
                "};",
                "",
                "/**",
                " * Adds end same as begin mechanics to a mode",
                " *",
                " * Your mode must include at least a single () match group as that first match",
                " * group is what is used for comparison",
                " * @param {Partial<Mode>} mode",
                " */",
                "export const END_SAME_AS_BEGIN = function(mode) {",
                "  return Object.assign(mode,",
                "    {",
                "      /** @type {ModeCallback} */",
                "      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },",
                "      /** @type {ModeCallback} */",
                "      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }",
                "    });",
                "};"
            ]
        },
        "5": {
            "function_name": "export default function (not found) ",
            "file_path": "src/languages/python.js",
            "function_details": [
                {
                    "name": "export default function",
                    "start_line": 1,
                    "end_line": 285
                }
            ],
            "function_code": [
                "/*",
                "Language: Python",
                "Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.",
                "Website: https://www.python.org",
                "Category: common",
                "*/",
                "",
                "export default function(hljs) {",
                "  const RESERVED_WORDS = [",
                "    'and',",
                "    'as',",
                "    'assert',",
                "    'async',",
                "    'await',",
                "    'break',",
                "    'class',",
                "    'continue',",
                "    'def',",
                "    'del',",
                "    'elif',",
                "    'else',",
                "    'except',",
                "    'finally',",
                "    'for',",
                "    '',",
                "    'from',",
                "    'global',",
                "    'if',",
                "    'import',",
                "    'in',",
                "    'is',",
                "    'lambda',",
                "    'nonlocal|10',",
                "    'not',",
                "    'or',",
                "    'pass',",
                "    'raise',",
                "    'return',",
                "    'try',",
                "    'while',",
                "    'with',",
                "    'yield',",
                "  ];",
                "",
                "  const BUILT_INS = [",
                "    '__import__',",
                "    'abs',",
                "    'all',",
                "    'any',",
                "    'ascii',",
                "    'bin',",
                "    'bool',",
                "    'breakpoint',",
                "    'bytearray',",
                "    'bytes',",
                "    'callable',",
                "    'chr',",
                "    'classmethod',",
                "    'compile',",
                "    'complex',",
                "    'delattr',",
                "    'dict',",
                "    'dir',",
                "    'divmod',",
                "    'enumerate',",
                "    'eval',",
                "    'exec',",
                "    'filter',",
                "    'float',",
                "    'format',",
                "    'frozenset',",
                "    'getattr',",
                "    'globals',",
                "    'hasattr',",
                "    'hash',",
                "    'help',",
                "    'hex',",
                "    'id',",
                "    'input',",
                "    'int',",
                "    'isinstance',",
                "    'issubclass',",
                "    'iter',",
                "    'len',",
                "    'list',",
                "    'locals',",
                "    'map',",
                "    'max',",
                "    'memoryview',",
                "    'min',",
                "    'next',",
                "    'object',",
                "    'oct',",
                "    'open',",
                "    'ord',",
                "    'pow',",
                "    'print',",
                "    'property',",
                "    'range',",
                "    'repr',",
                "    'reversed',",
                "    'round',",
                "    'set',",
                "    'setattr',",
                "    'slice',",
                "    'sorted',",
                "    'staticmethod',",
                "    'str',",
                "    'sum',",
                "    'super',",
                "    'tuple',",
                "    'type',",
                "    'vars',",
                "    'zip',",
                "  ];",
                "",
                "  const LITERALS = [",
                "    '__debug__',",
                "    'Ellipsis',",
                "    'False',",
                "    'None',",
                "    'NotImplemented',",
                "    'True',",
                "  ];",
                "",
                "  const KEYWORDS = {",
                "    keyword: RESERVED_WORDS.join(' '),",
                "    built_in: BUILT_INS.join(' '),",
                "    literal: LITERALS.join(' ')",
                "  };",
                "",
                "  const PROMPT = {",
                "    className: 'meta',  begin: /^(>>>|\\.\\.\\.) /",
                "  };",
                "",
                "  const SUBST = {",
                "    className: 'subst',",
                "    begin: /\\{/, end: /\\}/,",
                "    keywords: KEYWORDS,",
                "    illegal: /#/",
                "  };",
                "",
                "  const LITERAL_BRACKET = {",
                "    begin: /\\{\\{/,",
                "    relevance: 0",
                "  };",
                "",
                "  const STRING = {",
                "    className: 'string',",
                "    contains: [hljs.BACKSLASH_ESCAPE],",
                "    variants: [",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'''/, end: /'''/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/, end: /\"\"\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])'/, end: /'/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([uU]|[rR])\"/, end: /\"/,",
                "        relevance: 10",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])'/, end: /'/",
                "      },",
                "      {",
                "        begin: /([bB]|[bB][rR]|[rR][bB])\"/, end: /\"/",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])'/, end: /'/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      {",
                "        begin: /([fF][rR]|[rR][fF]|[fF])\"/, end: /\"/,",
                "        contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]",
                "      },",
                "      hljs.APOS_STRING_MODE,",
                "      hljs.QUOTE_STRING_MODE",
                "    ]",
                "  };",
                "",
                "  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals",
                "  const digitpart = '[0-9](_?[0-9])*';",
                "  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;",
                "  const NUMBER = {",
                "    className: 'number', relevance: 0,",
                "    variants: [",
                "      // exponentfloat, pointfloat",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals",
                "      // optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      // Note: no leading \\b because floats can start with a decimal point",
                "      // and we don't want to mishandle e.g. `fn(.5)`,",
                "      // no trailing \\b for pointfloat because it can end with a decimal point",
                "      // and we don't want to mishandle e.g. `0..hex()`; this should be safe",
                "      // because both MUST contain a decimal point and so cannot be confused with",
                "      // the interior part of an identifier",
                "      { begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b` },",
                "      { begin: `(${pointfloat})[jJ]?` },",
                "",
                "      // decinteger, bininteger, octinteger, hexinteger",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals",
                "      // optionally \"long\" in Python 2",
                "      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals",
                "      // decinteger is optionally imaginary",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b' },",
                "      { begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b' },",
                "      { begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b' },",
                "",
                "      // imagnumber (digitpart-based)",
                "      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals",
                "      { begin: `\\\\b(${digitpart})[jJ]\\\\b` },",
                "    ]",
                "  };",
                "",
                "  const PARAMS = {",
                "    className: 'params',",
                "    variants: [",
                "      // Exclude params at functions without params",
                "      {begin: /\\(\\s*\\)/, skip: true, className: null },",
                "      {",
                "        begin: /\\(/, end: /\\)/, excludeBegin: true, excludeEnd: true,",
                "        keywords: KEYWORDS,",
                "        contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE],",
                "      },",
                "    ],",
                "  };",
                "  SUBST.contains = [STRING, NUMBER, PROMPT];",
                "",
                "  return {",
                "    name: 'Python',",
                "    aliases: ['py', 'gyp', 'ipython'],",
                "    keywords: KEYWORDS,",
                "    illegal: /(<\\/|->|\\?)|=>/,",
                "    contains: [",
                "      PROMPT,",
                "      NUMBER,",
                "      // eat \"if\" prior to string so that it won't accidentally be",
                "      // labeled as an f-string as in:",
                "      { beginKeywords: \"if\", relevance: 0 },",
                "      STRING,",
                "      hljs.HASH_COMMENT_MODE,",
                "      {",
                "        variants: [",
                "          {className: 'function', beginKeywords: 'def'},",
                "          {className: 'class', beginKeywords: 'class'}",
                "        ],",
                "        end: /:/,",
                "        illegal: /[${=;\\n,]/,",
                "        contains: [",
                "          hljs.UNDERSCORE_TITLE_MODE,",
                "          PARAMS,",
                "          {",
                "            begin: /->/, endsWithParent: true,",
                "            keywords: 'None'",
                "          }",
                "        ]",
                "      },",
                "      {",
                "        className: 'meta',",
                "        begin: /^[\\t ]*@/, end: /$/",
                "      },",
                "      {",
                "        begin: /\\b(print|exec)\\(/ // don\u2019t highlight keywords-turned-functions in Python 3",
                "      }",
                "    ]",
                "  };",
                "}"
            ]
        }
    }
}