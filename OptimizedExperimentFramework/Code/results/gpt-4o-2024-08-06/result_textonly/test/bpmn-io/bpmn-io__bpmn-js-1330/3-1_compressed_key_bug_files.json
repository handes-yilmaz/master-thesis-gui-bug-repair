{
    "1": {
        "bug_file": "lib/features/rules/BpmnRules.js",
        "compressed": "YES",
        "line_numbers": 927,
        "compressed_line_numbers": 187,
        "compressed_bug_file_content": "import {\n\n\nimport inherits from 'inherits';\n\nimport {\n\n\nimport {\n\n\nimport {\n\n\nimport {\n\n\nimport RuleProvider from 'diagram-js/lib/features/rules/RuleProvider';\n\nimport {\n\n\n/**\n * BPMN specific modeling rule\n */\nexport default function BpmnRules(eventBus) {\n\n\n    // don't allow incoming connections on\n    // newly created boundary events\n    // to boundary events\n\n\n    // temporarily set target parent for scoping\n    // checks to work\n\n\n      // unset temporary target parent\n\n\n/**\n * Utility functions for rule checking\n */\n\n/**\n * Checks if given element can be used for starting connection.\n *\n * @param  {Element} source\n * @return {boolean}\n */\n\n\n/**\n * Can an element be dropped into the target element\n *\n * @return {boolean}\n */\n\n\n  // can move labels and groups everywhere\n\n\n  // disallow to create elements on collapsed pools\n\n\n  // allow to create new participants on\n  // existing collaboration and process diagrams\n\n\n  // allow moving DataInput / DataOutput within its original container only\n\n\n  // allow creating lanes on participants and other lanes only\n\n\n  // disallow dropping boundary events which cannot replace with intermediate event\n\n\n  // drop flow elements onto flow element containers\n  // and participants\n\n\n  // account for the fact that data associations are always\n  // rendered and moved to top (Process or Collaboration level)\n  //\n  // artifacts may be placed wherever, too\n\n\n/**\n * We treat IntermediateThrowEvents as boundary events during create,\n * this must be reflected in the rules.\n */\n\n\n  // only (re-)attach one element at a time\n\n\n  // do not attach labels\n\n\n  // only handle boundary events\n\n\n  // disallow drop on event sub processes\n\n\n  // only allow drop on non compensation activities\n\n\n  // only attach to subprocess border\n\n\n  // do not attach on receive tasks after event based gateways\n\n\n/**\n * Defines how to replace elements for a given target.\n *\n * Returns an array containing all elements which will be replaced.\n *\n * @example\n *\n *  [{ id: 'IntermediateEvent_2',\n *     type: 'bpmn:StartEvent'\n *   },\n *   { id: 'IntermediateEvent_5',\n *     type: 'bpmn:EndEvent'\n *   }]\n *\n * @param  {Array} elements\n * @param  {Object} target\n *\n * @return {Object} an object containing all elements which have to be replaced\n */\n\n\n        // replace a non-interrupting start event by a blank interrupting start event\n        // when the target is not an event sub process\n\n\n        // replace an error/escalation/compensate start event by a blank interrupting start event\n        // when the target is not an event sub process\n\n\n  // do not move selection containing lanes\n\n\n  // allow default move check to start move operation\n\n\n  // ensure we do not drop the element\n  // into source\n\n\n/**\n * Check, whether one side of the relationship\n * is a text annotation.\n */\n\n\n  // do not connect connections\n\n\n  // compensation boundary events are exception\n\n\n  // don't connect parent <-> child\n\n\n  // allow connection of associations between <!TextAnnotation> and <TextAnnotation>\n\n\n  // can connect associations where we can connect\n  // data associations, too (!)\n\n\n  // during connect user might move mouse out of canvas\n  // https://github.com/bpmn-io/bpmn-js/issues/1033\n\n\n  // return true if we can drop on the\n  // underlying flow parent\n  //\n  // at this point we are not really able to talk\n  // about connection rules (yet)\n\n\n"
    },
    "2": {
        "bug_file": "lib/features/modeling/behavior/BoundaryEventBehavior.js",
        "compressed": "NO",
        "line_numbers": 67,
        "compressed_line_numbers": 67,
        "compressed_bug_file_content": "import inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from '../../../util/ModelUtil';\n\nimport {\n  filter,\n  forEach\n} from 'min-dash';\n\n\n/**\n * BPMN specific boundary event behavior\n */\nexport default function BoundaryEventBehavior(eventBus, modeling) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  function getBoundaryEvents(element) {\n    return filter(element.attachers, function(attacher) {\n      return is(attacher, 'bpmn:BoundaryEvent');\n    });\n  }\n\n  // remove after connecting to event-based gateway\n  this.postExecute('connection.create', function(event) {\n    var source = event.context.source,\n        target = event.context.target,\n        boundaryEvents = getBoundaryEvents(target);\n\n    if (\n      is(source, 'bpmn:EventBasedGateway') &&\n      is(target, 'bpmn:ReceiveTask') &&\n      boundaryEvents.length > 0\n    ) {\n      modeling.removeElements(boundaryEvents);\n    }\n\n  });\n\n  // remove after replacing connected gateway with event-based gateway\n  this.postExecute('connection.reconnect', function(event) {\n    var oldSource = event.context.oldSource,\n        newSource = event.context.newSource;\n\n    if (is(oldSource, 'bpmn:Gateway') &&\n        is(newSource, 'bpmn:EventBasedGateway')) {\n      forEach(newSource.outgoing, function(connection) {\n        var target = connection.target,\n            attachedboundaryEvents = getBoundaryEvents(target);\n\n        if (is(target, 'bpmn:ReceiveTask') &&\n            attachedboundaryEvents.length > 0) {\n          modeling.removeElements(attachedboundaryEvents);\n        }\n      });\n    }\n  });\n}\n\nBoundaryEventBehavior.$inject = [\n  'eventBus',\n  'modeling'\n];\n\ninherits(BoundaryEventBehavior, CommandInterceptor);"
    }
}