{
    "lib/features/modeling/behavior/UnsetDefaultFlowBehavior.js": [
        "import inherits from 'inherits';",
        "",
        "import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';",
        "",
        "import {",
        "  getBusinessObject,",
        "  is",
        "} from '../../../util/ModelUtil';",
        "",
        "",
        "/**",
        " * A behavior that unsets the Default property of",
        " * sequence flow source on element delete, if the",
        " * removed element is the Gateway or Task's default flow.",
        " *",
        " * @param {EventBus} eventBus",
        " * @param {Modeling} modeling",
        " */",
        "export default function DeleteSequenceFlowBehavior(eventBus, modeling) {",
        "",
        "  CommandInterceptor.call(this, eventBus);",
        "",
        "",
        "  this.preExecute('connection.delete', function(event) {",
        "    var context = event.context,",
        "        connection = context.connection,",
        "        source = connection.source;",
        "",
        "    if (isDefaultFlow(connection, source)) {",
        "      modeling.updateProperties(source, {",
        "        'default': null",
        "      });",
        "    }",
        "  });",
        "}",
        "",
        "inherits(DeleteSequenceFlowBehavior, CommandInterceptor);",
        "",
        "DeleteSequenceFlowBehavior.$inject = [",
        "  'eventBus',",
        "  'modeling'",
        "];",
        "",
        "",
        "// helpers //////////////////////",
        "",
        "function isDefaultFlow(connection, source) {",
        "",
        "  if (!is(connection, 'bpmn:SequenceFlow')) {",
        "    return false;",
        "  }",
        "",
        "  var sourceBo = getBusinessObject(source),",
        "      sequenceFlow = getBusinessObject(connection);",
        "",
        "  return sourceBo.get('default') === sequenceFlow;",
        "}"
    ],
    "lib/features/modeling/cmd/UpdatePropertiesHandler.js": [
        "import {",
        "  reduce,",
        "  keys,",
        "  forEach,",
        "  assign",
        "} from 'min-dash';",
        "",
        "import {",
        "  getBusinessObject",
        "} from '../../../util/ModelUtil';",
        "",
        "var DEFAULT_FLOW = 'default',",
        "    ID = 'id',",
        "    DI = 'di';",
        "",
        "var NULL_DIMENSIONS = {",
        "  width: 0,",
        "  height: 0",
        "};",
        "",
        "/**",
        " * A handler that implements a BPMN 2.0 property update.",
        " *",
        " * This should be used to set simple properties on elements with",
        " * an underlying BPMN business object.",
        " *",
        " * Use respective diagram-js provided handlers if you would",
        " * like to perform automated modeling.",
        " */",
        "export default function UpdatePropertiesHandler(",
        "    elementRegistry, moddle, translate,",
        "    modeling, textRenderer) {",
        "",
        "  this._elementRegistry = elementRegistry;",
        "  this._moddle = moddle;",
        "  this._translate = translate;",
        "  this._modeling = modeling;",
        "  this._textRenderer = textRenderer;",
        "}",
        "",
        "UpdatePropertiesHandler.$inject = [",
        "  'elementRegistry',",
        "  'moddle',",
        "  'translate',",
        "  'modeling',",
        "  'textRenderer'",
        "];",
        "",
        "",
        "// api //////////////////////",
        "",
        "/**",
        " * Updates a BPMN element with a list of new properties",
        " *",
        " * @param {Object} context",
        " * @param {djs.model.Base} context.element the element to update",
        " * @param {Object} context.properties a list of properties to set on the element's",
        " *                                    businessObject (the BPMN model element)",
        " *",
        " * @return {Array<djs.model.Base>} the updated element",
        " */",
        "UpdatePropertiesHandler.prototype.execute = function(context) {",
        "",
        "  var element = context.element,",
        "      changed = [ element ],",
        "      translate = this._translate;",
        "",
        "  if (!element) {",
        "    throw new Error(translate('element required'));",
        "  }",
        "",
        "  var elementRegistry = this._elementRegistry,",
        "      ids = this._moddle.ids;",
        "",
        "  var businessObject = element.businessObject,",
        "      properties = unwrapBusinessObjects(context.properties),",
        "      oldProperties = context.oldProperties || getProperties(businessObject, properties);",
        "",
        "  if (isIdChange(properties, businessObject)) {",
        "    ids.unclaim(businessObject[ID]);",
        "",
        "    elementRegistry.updateId(element, properties[ID]);",
        "",
        "    ids.claim(properties[ID], businessObject);",
        "  }",
        "",
        "  // correctly indicate visual changes on default flow updates",
        "  if (DEFAULT_FLOW in properties) {",
        "",
        "    if (properties[DEFAULT_FLOW]) {",
        "      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));",
        "    }",
        "",
        "    if (businessObject[DEFAULT_FLOW]) {",
        "      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));",
        "    }",
        "  }",
        "",
        "  // update properties",
        "  setProperties(businessObject, properties);",
        "",
        "  // store old values",
        "  context.oldProperties = oldProperties;",
        "  context.changed = changed;",
        "",
        "  // indicate changed on objects affected by the update",
        "  return changed;",
        "};",
        "",
        "",
        "UpdatePropertiesHandler.prototype.postExecute = function(context) {",
        "  var element = context.element,",
        "      label = element.label;",
        "",
        "  var text = label && getBusinessObject(label).name;",
        "",
        "  if (!text) {",
        "    return;",
        "  }",
        "",
        "  // get layouted text bounds and resize external",
        "  // external label accordingly",
        "  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);",
        "",
        "  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);",
        "};",
        "",
        "/**",
        " * Reverts the update on a BPMN elements properties.",
        " *",
        " * @param  {Object} context",
        " *",
        " * @return {djs.model.Base} the updated element",
        " */",
        "UpdatePropertiesHandler.prototype.revert = function(context) {",
        "",
        "  var element = context.element,",
        "      properties = context.properties,",
        "      oldProperties = context.oldProperties,",
        "      businessObject = element.businessObject,",
        "      elementRegistry = this._elementRegistry,",
        "      ids = this._moddle.ids;",
        "",
        "  // update properties",
        "  setProperties(businessObject, oldProperties);",
        "",
        "  if (isIdChange(properties, businessObject)) {",
        "    ids.unclaim(properties[ID]);",
        "",
        "    elementRegistry.updateId(element, oldProperties[ID]);",
        "",
        "    ids.claim(oldProperties[ID], businessObject);",
        "  }",
        "",
        "  return context.changed;",
        "};",
        "",
        "",
        "function isIdChange(properties, businessObject) {",
        "  return ID in properties && properties[ID] !== businessObject[ID];",
        "}",
        "",
        "",
        "function getProperties(businessObject, properties) {",
        "  var propertyNames = keys(properties);",
        "",
        "  return reduce(propertyNames, function(result, key) {",
        "",
        "    // handle DI seperately",
        "    if (key !== DI) {",
        "      result[key] = businessObject.get(key);",
        "    } else {",
        "      result[key] = getDiProperties(businessObject.di, keys(properties.di));",
        "    }",
        "",
        "    return result;",
        "  }, {});",
        "}",
        "",
        "",
        "function getDiProperties(di, propertyNames) {",
        "  return reduce(propertyNames, function(result, key) {",
        "    result[key] = di.get(key);",
        "",
        "    return result;",
        "  }, {});",
        "}",
        "",
        "",
        "function setProperties(businessObject, properties) {",
        "  forEach(properties, function(value, key) {",
        "",
        "    if (key !== DI) {",
        "      businessObject.set(key, value);",
        "    } else {",
        "",
        "      // only update, if businessObject.di exists",
        "      if (businessObject.di) {",
        "        setDiProperties(businessObject.di, value);",
        "      }",
        "    }",
        "  });",
        "}",
        "",
        "",
        "function setDiProperties(di, properties) {",
        "  forEach(properties, function(value, key) {",
        "    di.set(key, value);",
        "  });",
        "}",
        "",
        "",
        "var referencePropertyNames = [ 'default' ];",
        "",
        "/**",
        " * Make sure we unwrap the actual business object",
        " * behind diagram element that may have been",
        " * passed as arguments.",
        " *",
        " * @param  {Object} properties",
        " *",
        " * @return {Object} unwrappedProps",
        " */",
        "function unwrapBusinessObjects(properties) {",
        "",
        "  var unwrappedProps = assign({}, properties);",
        "",
        "  referencePropertyNames.forEach(function(name) {",
        "    if (name in properties) {",
        "      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);",
        "    }",
        "  });",
        "",
        "  return unwrappedProps;",
        "}"
    ],
    "lib/features/modeling/Modeling.js": [
        "import inherits from 'inherits';",
        "",
        "import BaseModeling from 'diagram-js/lib/features/modeling/Modeling';",
        "",
        "import UpdatePropertiesHandler from './cmd/UpdatePropertiesHandler';",
        "import UpdateCanvasRootHandler from './cmd/UpdateCanvasRootHandler';",
        "import AddLaneHandler from './cmd/AddLaneHandler';",
        "import SplitLaneHandler from './cmd/SplitLaneHandler';",
        "import ResizeLaneHandler from './cmd/ResizeLaneHandler';",
        "import UpdateFlowNodeRefsHandler from './cmd/UpdateFlowNodeRefsHandler';",
        "import IdClaimHandler from './cmd/IdClaimHandler';",
        "import SetColorHandler from './cmd/SetColorHandler';",
        "",
        "import UpdateLabelHandler from '../label-editing/cmd/UpdateLabelHandler';",
        "",
        "",
        "/**",
        " * BPMN 2.0 modeling features activator",
        " *",
        " * @param {EventBus} eventBus",
        " * @param {ElementFactory} elementFactory",
        " * @param {CommandStack} commandStack",
        " * @param {BpmnRules} bpmnRules",
        " */",
        "export default function Modeling(",
        "    eventBus, elementFactory, commandStack,",
        "    bpmnRules) {",
        "",
        "  BaseModeling.call(this, eventBus, elementFactory, commandStack);",
        "",
        "  this._bpmnRules = bpmnRules;",
        "}",
        "",
        "inherits(Modeling, BaseModeling);",
        "",
        "Modeling.$inject = [",
        "  'eventBus',",
        "  'elementFactory',",
        "  'commandStack',",
        "  'bpmnRules'",
        "];",
        "",
        "",
        "Modeling.prototype.getHandlers = function() {",
        "  var handlers = BaseModeling.prototype.getHandlers.call(this);",
        "",
        "  handlers['element.updateProperties'] = UpdatePropertiesHandler;",
        "  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;",
        "  handlers['lane.add'] = AddLaneHandler;",
        "  handlers['lane.resize'] = ResizeLaneHandler;",
        "  handlers['lane.split'] = SplitLaneHandler;",
        "  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;",
        "  handlers['id.updateClaim'] = IdClaimHandler;",
        "  handlers['element.setColor'] = SetColorHandler;",
        "  handlers['element.updateLabel'] = UpdateLabelHandler;",
        "",
        "  return handlers;",
        "};",
        "",
        "",
        "Modeling.prototype.updateLabel = function(element, newLabel, newBounds, hints) {",
        "  this._commandStack.execute('element.updateLabel', {",
        "    element: element,",
        "    newLabel: newLabel,",
        "    newBounds: newBounds,",
        "    hints: hints || {}",
        "  });",
        "};",
        "",
        "",
        "Modeling.prototype.connect = function(source, target, attrs, hints) {",
        "",
        "  var bpmnRules = this._bpmnRules;",
        "",
        "  if (!attrs) {",
        "    attrs = bpmnRules.canConnect(source, target);",
        "  }",
        "",
        "  if (!attrs) {",
        "    return;",
        "  }",
        "",
        "  return this.createConnection(source, target, attrs, source.parent, hints);",
        "};",
        "",
        "",
        "Modeling.prototype.updateProperties = function(element, properties) {",
        "  this._commandStack.execute('element.updateProperties', {",
        "    element: element,",
        "    properties: properties",
        "  });",
        "};",
        "",
        "Modeling.prototype.resizeLane = function(laneShape, newBounds, balanced) {",
        "  this._commandStack.execute('lane.resize', {",
        "    shape: laneShape,",
        "    newBounds: newBounds,",
        "    balanced: balanced",
        "  });",
        "};",
        "",
        "Modeling.prototype.addLane = function(targetLaneShape, location) {",
        "  var context = {",
        "    shape: targetLaneShape,",
        "    location: location",
        "  };",
        "",
        "  this._commandStack.execute('lane.add', context);",
        "",
        "  return context.newLane;",
        "};",
        "",
        "Modeling.prototype.splitLane = function(targetLane, count) {",
        "  this._commandStack.execute('lane.split', {",
        "    shape: targetLane,",
        "    count: count",
        "  });",
        "};",
        "",
        "/**",
        " * Transform the current diagram into a collaboration.",
        " *",
        " * @return {djs.model.Root} the new root element",
        " */",
        "Modeling.prototype.makeCollaboration = function() {",
        "",
        "  var collaborationElement = this._create('root', {",
        "    type: 'bpmn:Collaboration'",
        "  });",
        "",
        "  var context = {",
        "    newRoot: collaborationElement",
        "  };",
        "",
        "  this._commandStack.execute('canvas.updateRoot', context);",
        "",
        "  return collaborationElement;",
        "};",
        "",
        "Modeling.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {",
        "",
        "  this._commandStack.execute('lane.updateRefs', {",
        "    flowNodeShapes: flowNodeShapes,",
        "    laneShapes: laneShapes",
        "  });",
        "};",
        "",
        "/**",
        " * Transform the current diagram into a process.",
        " *",
        " * @return {djs.model.Root} the new root element",
        " */",
        "Modeling.prototype.makeProcess = function() {",
        "",
        "  var processElement = this._create('root', {",
        "    type: 'bpmn:Process'",
        "  });",
        "",
        "  var context = {",
        "    newRoot: processElement",
        "  };",
        "",
        "  this._commandStack.execute('canvas.updateRoot', context);",
        "};",
        "",
        "",
        "Modeling.prototype.claimId = function(id, moddleElement) {",
        "  this._commandStack.execute('id.updateClaim', {",
        "    id: id,",
        "    element: moddleElement,",
        "    claiming: true",
        "  });",
        "};",
        "",
        "",
        "Modeling.prototype.unclaimId = function(id, moddleElement) {",
        "  this._commandStack.execute('id.updateClaim', {",
        "    id: id,",
        "    element: moddleElement",
        "  });",
        "};",
        "",
        "Modeling.prototype.setColor = function(elements, colors) {",
        "  if (!elements.length) {",
        "    elements = [ elements ];",
        "  }",
        "",
        "  this._commandStack.execute('element.setColor', {",
        "    elements: elements,",
        "    colors: colors",
        "  });",
        "};"
    ]
}