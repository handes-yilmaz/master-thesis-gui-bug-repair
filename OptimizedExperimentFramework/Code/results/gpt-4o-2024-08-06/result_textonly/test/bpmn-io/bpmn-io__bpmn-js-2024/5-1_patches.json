{
    "1/1": "To address the issue of correctly rendering pool/lane labels in vertical collaboration, we need to ensure that the rendering logic accounts for the `isHorizontal` property of the BPMN elements. The bug report indicates that the current implementation does not consider the pool direction when rendering, which results in incorrect diagrams.\n\n### Bug Scenario Analysis\nThe provided image in the bug report shows a BPMN diagram where the pool/lane labels are not rendered correctly when the pool is vertical. The `isHorizontal=\"false\"` property in the element's DI indicates that the pool should be rendered vertically, but the current implementation does not handle this property, leading to incorrect label orientation.\n\n### Bug Location and Fix\nThe bug is likely located in the rendering logic where the orientation of the pool/lane is determined. We need to modify the rendering logic to check the `isHorizontal` property and adjust the rendering accordingly.\n\n### Patches for Bug Code Snippets\n\n1. **File: `lib/draw/BpmnRenderer.js`**\n\n   We need to update the rendering logic to account for the `isHorizontal` property. Specifically, we should adjust the label rendering based on this property.\n\n```javascript\n### lib/draw/BpmnRenderer.js\n<<<<<<< SEARCH\nfunction drawRect(parentGfx, width, height, r, offset, attrs) {\n\n  if (isObject(offset)) {\n    attrs = offset;\n    offset = 0;\n  }\n\n  offset = offset || 0;\n\n  attrs = shapeStyle(attrs);\n\n  var rect = svgCreate('rect', {\n    x: offset,\n    y: offset,\n    width: width - offset * 2,\n    height: height - offset * 2,\n    rx: r,\n    ry: r,\n    ...attrs\n  });\n\n  svgAppend(parentGfx, rect);\n\n  return rect;\n}\n=======\nfunction drawRect(parentGfx, width, height, r, offset, attrs, isHorizontal = true) {\n\n  if (isObject(offset)) {\n    attrs = offset;\n    offset = 0;\n  }\n\n  offset = offset || 0;\n\n  attrs = shapeStyle(attrs);\n\n  var rect = svgCreate('rect', {\n    x: offset,\n    y: offset,\n    width: isHorizontal ? width - offset * 2 : height - offset * 2,\n    height: isHorizontal ? height - offset * 2 : width - offset * 2,\n    rx: r,\n    ry: r,\n    ...attrs\n  });\n\n  svgAppend(parentGfx, rect);\n\n  return rect;\n}\n>>>>>>> REPLACE\n```\n\n2. **File: `lib/features/modeling/behavior/IsHorizontalFix.js`**\n\n   The current logic sets `isHorizontal` to `true` by default. We need to ensure that this logic respects the existing `isHorizontal` property if it is already set.\n\n```javascript\n### lib/features/modeling/behavior/IsHorizontalFix.js\n<<<<<<< SEARCH\nif (isAny(bo, elementTypesToUpdate) && !di.get('isHorizontal')) {\n\n  // set attribute directly to avoid modeling#updateProperty side effects\n  di.set('isHorizontal', true);\n}\n=======\nif (isAny(bo, elementTypesToUpdate) && di.get('isHorizontal') === undefined) {\n\n  // set attribute directly to avoid modeling#updateProperty side effects\n  di.set('isHorizontal', true);\n}\n>>>>>>> REPLACE\n```\n\nThese changes ensure that the rendering logic correctly accounts for the `isHorizontal` property, allowing for proper rendering of vertical pools and lanes. The adjustments in `BpmnRenderer.js` handle the orientation of the rectangle used for rendering, while the changes in `IsHorizontalFix.js` ensure that the `isHorizontal` property is respected if it is already defined."
}