{
    "1/1": {
        "lib/features/popup-menu/ReplaceMenuProvider.js": [
            {
                "SEARCH": [
                    "// flow nodes",
                    "if (is(businessObject, 'bpmn:FlowNode')) {",
                    "entries = filter(replaceOptions.TASK, differentType);",
                    "",
                    "// collapsed SubProcess can not be replaced with itself",
                    "if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {",
                    "entries = filter(entries, function(entry) {",
                    "return entry.label !== 'Sub Process (collapsed)';",
                    "});",
                    "}",
                    "",
                    "return this._createEntries(element, entries);",
                    "}",
                    "",
                    "return [];"
                ],
                "REPLACE": [
                    "  // data object references",
                    "  if (is(businessObject, 'bpmn:DataObjectReference')) {",
                    "    entries = filter(replaceOptions.DATA_OBJECT_REFERENCE, differentType);",
                    "",
                    "    return this._createEntries(element, entries);",
                    "  }",
                    "",
                    "  // data store references",
                    "  if (is(businessObject, 'bpmn:DataStoreReference')) {",
                    "    entries = filter(replaceOptions.DATA_STORE_REFERENCE, differentType);",
                    "",
                    "    return this._createEntries(element, entries);",
                    "  }",
                    "",
                    "  // flow nodes",
                    "  if (is(businessObject, 'bpmn:FlowNode')) {",
                    "    entries = filter(replaceOptions.TASK, differentType);",
                    "",
                    "    // collapsed SubProcess can not be replaced with itself",
                    "    if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {",
                    "      entries = filter(entries, function(entry) {",
                    "        return entry.label !== 'Sub Process (collapsed)';",
                    "      });",
                    "    }",
                    "",
                    "    return this._createEntries(element, entries);",
                    "  }",
                    "",
                    "  return [];"
                ]
            }
        ]
    }
}