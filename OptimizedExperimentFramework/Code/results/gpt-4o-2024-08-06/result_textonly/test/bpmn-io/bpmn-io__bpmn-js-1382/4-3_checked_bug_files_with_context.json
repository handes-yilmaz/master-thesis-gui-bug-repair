{
    "lib/features/replace/BpmnReplace.js": [
        "import {",
        "  pick,",
        "  assign,",
        "  filter,",
        "  forEach,",
        "  isArray,",
        "  isUndefined,",
        "  has",
        "} from 'min-dash';",
        "",
        "import {",
        "  is,",
        "  getBusinessObject",
        "} from '../../util/ModelUtil';",
        "",
        "import {",
        "  isAny",
        "} from '../modeling/util/ModelingUtil';",
        "",
        "import {",
        "  isExpanded,",
        "  isEventSubProcess",
        "} from '../../util/DiUtil';",
        "",
        "import { getPropertyNames } from '../copy-paste/ModdleCopy';",
        "",
        "function copyProperties(source, target, properties) {",
        "  if (!isArray(properties)) {",
        "    properties = [ properties ];",
        "  }",
        "",
        "  forEach(properties, function(property) {",
        "    if (!isUndefined(source[property])) {",
        "      target[property] = source[property];",
        "    }",
        "  });",
        "}",
        "",
        "var CUSTOM_PROPERTIES = [",
        "  'cancelActivity',",
        "  'instantiate',",
        "  'eventGatewayType',",
        "  'triggeredByEvent',",
        "  'isInterrupting'",
        "];",
        "",
        "",
        "function toggeling(element, target) {",
        "",
        "  var oldCollapsed = (",
        "    element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element)",
        "  );",
        "",
        "  var targetCollapsed;",
        "",
        "  if (target && (has(target, 'collapsed') || has(target, 'isExpanded'))) {",
        "",
        "    // property is explicitly set so use it",
        "    targetCollapsed = (",
        "      has(target, 'collapsed') ? target.collapsed : !target.isExpanded",
        "    );",
        "  } else {",
        "",
        "    // keep old state",
        "    targetCollapsed = oldCollapsed;",
        "  }",
        "",
        "  if (oldCollapsed !== targetCollapsed) {",
        "    element.collapsed = oldCollapsed;",
        "    return true;",
        "  }",
        "",
        "  return false;",
        "}",
        "",
        "",
        "",
        "/**",
        " * This module takes care of replacing BPMN elements",
        " */",
        "export default function BpmnReplace(",
        "    bpmnFactory,",
        "    elementFactory,",
        "    moddleCopy,",
        "    modeling,",
        "    replace,",
        "    selection",
        ") {",
        "",
        "  /**",
        "   * Prepares a new business object for the replacement element",
        "   * and triggers the replace operation.",
        "   *",
        "   * @param  {djs.model.Base} element",
        "   * @param  {Object} target",
        "   * @param  {Object} [hints]",
        "   *",
        "   * @return {djs.model.Base} the newly created element",
        "   */",
        "  function replaceElement(element, target, hints) {",
        "",
        "    hints = hints || {};",
        "",
        "    var type = target.type,",
        "        oldBusinessObject = element.businessObject;",
        "",
        "    if (isSubProcess(oldBusinessObject)) {",
        "      if (type === 'bpmn:SubProcess') {",
        "        if (toggeling(element, target)) {",
        "",
        "          // expanding or collapsing process",
        "          modeling.toggleCollapse(element);",
        "",
        "          return element;",
        "        }",
        "      }",
        "    }",
        "",
        "    var newBusinessObject = bpmnFactory.create(type);",
        "",
        "    var newElement = {",
        "      type: type,",
        "      businessObject: newBusinessObject",
        "    };",
        "",
        "    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),",
        "        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),",
        "        copyProps = intersection(elementProps, newElementProps);",
        "",
        "    // initialize special properties defined in target definition",
        "    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));",
        "",
        "    var properties = filter(copyProps, function(propertyName) {",
        "",
        "      // copying event definitions, unless we replace",
        "      if (propertyName === 'eventDefinitions') {",
        "        return hasEventDefinition(element, target.eventDefinitionType);",
        "      }",
        "",
        "      // retain loop characteristics if the target element",
        "      // is not an event sub process",
        "      if (propertyName === 'loopCharacteristics') {",
        "        return !isEventSubProcess(newBusinessObject);",
        "      }",
        "",
        "      // so the applied properties from 'target' don't get lost",
        "      if (has(newBusinessObject, propertyName)) {",
        "        return false;",
        "      }",
        "",
        "      if (propertyName === 'processRef' && target.isExpanded === false) {",
        "        return false;",
        "      }",
        "",
        "      if (propertyName === 'triggeredByEvent') {",
        "        return false;",
        "      }",
        "",
        "      return true;",
        "    });",
        "",
        "    newBusinessObject = moddleCopy.copyElement(",
        "      oldBusinessObject,",
        "      newBusinessObject,",
        "      properties",
        "    );",
        "",
        "    // initialize custom BPMN extensions",
        "    if (target.eventDefinitionType) {",
        "",
        "      // only initialize with new eventDefinition",
        "      // if we did not set an event definition yet,",
        "      // i.e. because we copied it",
        "      if (!hasEventDefinition(newBusinessObject, target.eventDefinitionType)) {",
        "        newElement.eventDefinitionType = target.eventDefinitionType;",
        "        newElement.eventDefinitionAttrs = target.eventDefinitionAttrs;",
        "      }",
        "    }",
        "",
        "    if (is(oldBusinessObject, 'bpmn:Activity')) {",
        "",
        "      if (isSubProcess(oldBusinessObject)) {",
        "",
        "        // no toggeling, so keep old state",
        "        newElement.isExpanded = isExpanded(oldBusinessObject);",
        "      }",
        "",
        "      // else if property is explicitly set, use it",
        "      else if (target && has(target, 'isExpanded')) {",
        "        newElement.isExpanded = target.isExpanded;",
        "      }",
        "",
        "      // TODO: need also to respect min/max Size",
        "      // copy size, from an expanded subprocess to an expanded alternative subprocess",
        "      // except bpmn:Task, because Task is always expanded",
        "      if ((isExpanded(oldBusinessObject) && !is(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {",
        "        newElement.width = element.width;",
        "        newElement.height = element.height;",
        "      }",
        "    }",
        "",
        "    // remove children if not expanding sub process",
        "    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {",
        "      hints.moveChildren = false;",
        "    }",
        "",
        "    // transform collapsed/expanded pools",
        "    if (is(oldBusinessObject, 'bpmn:Participant')) {",
        "",
        "      // create expanded pool",
        "      if (target.isExpanded === true) {",
        "        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');",
        "      } else {",
        "",
        "        // remove children when transforming to collapsed pool",
        "        hints.moveChildren = false;",
        "      }",
        "",
        "      // apply same width and default height",
        "      newElement.width = element.width;",
        "      newElement.height = elementFactory._getDefaultSize(newBusinessObject).height;",
        "    }",
        "",
        "    newBusinessObject.name = oldBusinessObject.name;",
        "",
        "    // retain default flow's reference between inclusive <-> exclusive gateways and activities",
        "    if (",
        "      isAny(oldBusinessObject, [",
        "        'bpmn:ExclusiveGateway',",
        "        'bpmn:InclusiveGateway',",
        "        'bpmn:Activity'",
        "      ]) &&",
        "      isAny(newBusinessObject, [",
        "        'bpmn:ExclusiveGateway',",
        "        'bpmn:InclusiveGateway',",
        "        'bpmn:Activity'",
        "      ])",
        "    ) {",
        "      newBusinessObject.default = oldBusinessObject.default;",
        "    }",
        "",
        "    if (",
        "      target.host &&",
        "      !is(oldBusinessObject, 'bpmn:BoundaryEvent') &&",
        "      is(newBusinessObject, 'bpmn:BoundaryEvent')",
        "    ) {",
        "      newElement.host = target.host;",
        "    }",
        "",
        "    newElement.di = {};",
        "",
        "    // fill and stroke will be set to DI",
        "    copyProperties(oldBusinessObject.di, newElement.di, [",
        "      'fill',",
        "      'stroke'",
        "    ]);",
        "",
        "    newElement = replace.replaceElement(element, newElement, hints);",
        "",
        "    if (hints.select !== false) {",
        "      selection.select(newElement);",
        "    }",
        "",
        "    return newElement;",
        "  }",
        "",
        "  this.replaceElement = replaceElement;",
        "}",
        "",
        "BpmnReplace.$inject = [",
        "  'bpmnFactory',",
        "  'elementFactory',",
        "  'moddleCopy',",
        "  'modeling',",
        "  'replace',",
        "  'selection'",
        "];",
        "",
        "",
        "function isSubProcess(bo) {",
        "  return is(bo, 'bpmn:SubProcess');",
        "}",
        "",
        "function hasEventDefinition(element, type) {",
        "",
        "  var bo = getBusinessObject(element);",
        "",
        "  return type && bo.get('eventDefinitions').some(function(definition) {",
        "    return is(definition, type);",
        "  });",
        "}",
        "",
        "/**",
        " * Compute intersection between two arrays.",
        " */",
        "function intersection(a1, a2) {",
        "  return a1.filter(function(el) {",
        "    return a2.indexOf(el) !== -1;",
        "  });",
        "}"
    ],
    "lib/features/popup-menu/ReplaceMenuProvider.js": [
        "...",
        "export default function ReplaceMenuProvider(",
        "    popupMenu, modeling, moddle,",
        "    bpmnReplace, rules, translate) {",
        "",
        "  this._popupMenu = popupMenu;",
        "  this._modeling = modeling;",
        "  this._moddle = moddle;",
        "  this._bpmnReplace = bpmnReplace;",
        "  this._rules = rules;",
        "  this._translate = translate;",
        "",
        "  this.register();",
        "}",
        "",
        "ReplaceMenuProvider.$inject = [",
        "  'popupMenu',",
        "  'modeling',",
        "  'moddle',",
        "  'bpmnReplace',",
        "  'rules',",
        "  'translate'",
        "];",
        "",
        "",
        "/**",
        " * Register replace menu provider in the popup menu",
        " */",
        "ReplaceMenuProvider.prototype.register = function() {",
        "  this._popupMenu.registerProvider('bpmn-replace', this);",
        "};",
        "",
        "",
        "/**",
        " * Get all entries from replaceOptions for the given element and apply filters",
        " * on them. Get for example only elements, which are different from the current one.",
        " *",
        " * @param {djs.model.Base} element",
        " *",
        " * @return {Array<Object>} a list of menu entry items",
        " */",
        "ReplaceMenuProvider.prototype.getEntries = function(element) {",
        "",
        "  var businessObject = element.businessObject;",
        "",
        "  var rules = this._rules;",
        "",
        "  var entries;",
        "",
        "  if (!rules.allowed('shape.replace', { element: element })) {",
        "    return [];",
        "  }",
        "",
        "  var differentType = isDifferentType(element);",
        "",
        "  // start events outside sub processes",
        "  if (is(businessObject, 'bpmn:StartEvent') && !is(businessObject.$parent, 'bpmn:SubProcess')) {",
        "",
        "    entries = filter(replaceOptions.START_EVENT, differentType);",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // expanded/collapsed pools",
        "  if (is(businessObject, 'bpmn:Participant')) {",
        "",
        "    entries = filter(replaceOptions.PARTICIPANT, function(entry) {",
        "      return isExpanded(businessObject) !== entry.target.isExpanded;",
        "    });",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // start events inside event sub processes",
        "  if (is(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {",
        "    entries = filter(replaceOptions.EVENT_SUB_PROCESS_START_EVENT, function(entry) {",
        "",
        "      var target = entry.target;",
        "",
        "      var isInterrupting = target.isInterrupting !== false;",
        "",
        "      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting;",
        "",
        "      // filters elements which types and event definition are equal but have have different interrupting types",
        "      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;",
        "",
        "    });",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // start events inside sub processes",
        "  if (is(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)",
        "      && is(businessObject.$parent, 'bpmn:SubProcess')) {",
        "    entries = filter(replaceOptions.START_EVENT_SUB_PROCESS, differentType);",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // end events",
        "  if (is(businessObject, 'bpmn:EndEvent')) {",
        "",
        "    entries = filter(replaceOptions.END_EVENT, function(entry) {",
        "      var target = entry.target;",
        "",
        "      // hide cancel end events outside transactions",
        "      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is(businessObject.$parent, 'bpmn:Transaction')) {",
        "        return false;",
        "      }",
        "",
        "      return differentType(entry);",
        "    });",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // boundary events",
        "  if (is(businessObject, 'bpmn:BoundaryEvent')) {",
        "",
        "    entries = filter(replaceOptions.BOUNDARY_EVENT, function(entry) {",
        "",
        "      var target = entry.target;",
        "",
        "      if (target.eventDefinition == 'bpmn:CancelEventDefinition' &&",
        "         !is(businessObject.attachedToRef, 'bpmn:Transaction')) {",
        "        return false;",
        "      }",
        "      var cancelActivity = target.cancelActivity !== false;",
        "",
        "      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;",
        "",
        "      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;",
        "    });",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // intermediate events",
        "  if (is(businessObject, 'bpmn:IntermediateCatchEvent') ||",
        "      is(businessObject, 'bpmn:IntermediateThrowEvent')) {",
        "",
        "    entries = filter(replaceOptions.INTERMEDIATE_EVENT, differentType);",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // gateways",
        "  if (is(businessObject, 'bpmn:Gateway')) {",
        "",
        "    entries = filter(replaceOptions.GATEWAY, differentType);",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // transactions",
        "  if (is(businessObject, 'bpmn:Transaction')) {",
        "",
        "    entries = filter(replaceOptions.TRANSACTION, differentType);",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // expanded event sub processes",
        "  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {",
        "",
        "    entries = filter(replaceOptions.EVENT_SUB_PROCESS, differentType);",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // expanded sub processes",
        "  if (is(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {",
        "",
        "    entries = filter(replaceOptions.SUBPROCESS_EXPANDED, differentType);",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // collapsed ad hoc sub processes",
        "  if (is(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {",
        "",
        "    entries = filter(replaceOptions.TASK, function(entry) {",
        "",
        "      var target = entry.target;",
        "",
        "      var isTargetSubProcess = target.type === 'bpmn:SubProcess';",
        "",
        "      var isTargetExpanded = target.isExpanded === true;",
        "",
        "      return isDifferentType(element, target) && (!isTargetSubProcess || isTargetExpanded);",
        "    });",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  // sequence flows",
        "  if (is(businessObject, 'bpmn:SequenceFlow')) {",
        "    return this._createSequenceFlowEntries(element, replaceOptions.SEQUENCE_FLOW);",
        "  }",
        "",
        "  // flow nodes",
        "  if (is(businessObject, 'bpmn:FlowNode')) {",
        "    entries = filter(replaceOptions.TASK, differentType);",
        "",
        "    // collapsed SubProcess can not be replaced with itself",
        "    if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {",
        "      entries = filter(entries, function(entry) {",
        "        return entry.label !== 'Sub Process (collapsed)';",
        "      });",
        "    }",
        "",
        "    return this._createEntries(element, entries);",
        "  }",
        "",
        "  return [];",
        "};",
        "",
        "",
        "/**",
        " * Get a list of header items for the given element. This includes buttons",
        " * for multi instance markers and for the ad hoc marker.",
        " *",
        " * @param {djs.model.Base} element",
        " *",
        " * @return {Array<Object>} a list of menu entry items",
        " */",
        "ReplaceMenuProvider.prototype.getHeaderEntries = function(element) {",
        "",
        "  var headerEntries = [];",
        "",
        "  if (is(element, 'bpmn:Activity') && !isEventSubProcess(element)) {",
        "    headerEntries = headerEntries.concat(this._getLoopEntries(element));",
        "  }",
        "",
        "  if (is(element, 'bpmn:DataObjectReference')) {",
        "    headerEntries = headerEntries.concat(this._getDataObjectIsCollection(element));",
        "  }",
        "",
        "  if (is(element, 'bpmn:SubProcess') &&",
        "      !is(element, 'bpmn:Transaction') &&",
        "      !isEventSubProcess(element)) {",
        "    headerEntries.push(this._getAdHocEntry(element));",
        "  }",
        "",
        "  return headerEntries;",
        "};",
        "",
        "",
        "/**",
        " * Creates an array of menu entry objects for a given element and filters the replaceOptions",
        " * according to a filter function.",
        " *",
        " * @param  {djs.model.Base} element",
        " * @param  {Object} replaceOptions",
        " *",
        " * @return {Array<Object>} a list of menu items",
        " */",
        "ReplaceMenuProvider.prototype._createEntries = function(element, replaceOptions) {",
        "  var menuEntries = [];",
        "",
        "  var self = this;",
        "",
        "  forEach(replaceOptions, function(definition) {",
        "    var entry = self._createMenuEntry(definition, element);",
        "",
        "    menuEntries.push(entry);",
        "  });",
        "",
        "  return menuEntries;",
        "};",
        "",
        "/**",
        " * Creates an array of menu entry objects for a given sequence flow.",
        " *",
        " * @param  {djs.model.Base} element",
        " * @param  {Object} replaceOptions",
        "",
        " * @return {Array<Object>} a list of menu items",
        " */",
        "ReplaceMenuProvider.prototype._createSequenceFlowEntries = function(element, replaceOptions) {",
        "",
        "  var businessObject = getBusinessObject(element);",
        "",
        "  var menuEntries = [];",
        "",
        "  var modeling = this._modeling,",
        "      moddle = this._moddle;",
        "",
        "  var self = this;",
        "",
        "  forEach(replaceOptions, function(entry) {",
        "",
        "    switch (entry.actionName) {",
        "    case 'replace-with-default-flow':",
        "      if (businessObject.sourceRef.default !== businessObject &&",
        "            (is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||",
        "             is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||",
        "             is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||",
        "             is(businessObject.sourceRef, 'bpmn:Activity'))) {",
        "",
        "        menuEntries.push(self._createMenuEntry(entry, element, function() {",
        "          modeling.updateProperties(element.source, { default: businessObject });",
        "        }));",
        "      }",
        "      break;",
        "    case 'replace-with-conditional-flow':",
        "      if (!businessObject.conditionExpression && is(businessObject.sourceRef, 'bpmn:Activity')) {",
        "",
        "        menuEntries.push(self._createMenuEntry(entry, element, function() {",
        "          var conditionExpression = moddle.create('bpmn:FormalExpression', { body: '' });",
        "",
        "          modeling.updateProperties(element, { conditionExpression: conditionExpression });",
        "        }));",
        "      }",
        "      break;",
        "    default:",
        "",
        "      // default flows",
        "      if (is(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {",
        "        return menuEntries.push(self._createMenuEntry(entry, element, function() {",
        "          modeling.updateProperties(element, { conditionExpression: undefined });",
        "        }));",
        "      }",
        "",
        "      // conditional flows",
        "      if ((is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||",
        "           is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||",
        "           is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||",
        "           is(businessObject.sourceRef, 'bpmn:Activity')) &&",
        "           businessObject.sourceRef.default === businessObject) {",
        "",
        "        return menuEntries.push(self._createMenuEntry(entry, element, function() {",
        "          modeling.updateProperties(element.source, { default: undefined });",
        "        }));",
        "      }",
        "    }",
        "  });",
        "",
        "  return menuEntries;",
        "};",
        "",
        "",
        "/**",
        " * Creates and returns a single menu entry item.",
        " *",
        " * @param  {Object} definition a single replace options definition object",
        " * @param  {djs.model.Base} element",
        " * @param  {Function} [action] an action callback function which gets called when",
        " *                             the menu entry is being triggered.",
        " *",
        " * @return {Object} menu entry item",
        " */",
        "ReplaceMenuProvider.prototype._createMenuEntry = function(definition, element, action) {",
        "  var translate = this._translate;",
        "  var replaceElement = this._bpmnReplace.replaceElement;",
        "",
        "  var replaceAction = function() {",
        "    return replaceElement(element, definition.target);",
        "  };",
        "",
        "  action = action || replaceAction;",
        "",
        "  var menuEntry = {",
        "    label: translate(definition.label),",
        "    className: definition.className,",
        "    id: definition.actionName,",
        "    action: action",
        "  };",
        "",
        "  return menuEntry;",
        "};",
        "",
        "/**",
        " * Get a list of menu items containing buttons for multi instance markers",
        " *",
        " * @param  {djs.model.Base} element",
        " *",
        " * @return {Array<Object>} a list of menu items",
        " */",
        "ReplaceMenuProvider.prototype._getLoopEntries = function(element) {",
        "",
        "  var self = this;",
        "  var translate = this._translate;",
        "",
        "  function toggleLoopEntry(event, entry) {",
        "    var loopCharacteristics;",
        "",
        "    if (entry.active) {",
        "      loopCharacteristics = undefined;",
        "    } else {",
        "      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);",
        "",
        "      if (entry.options.isSequential) {",
        "        loopCharacteristics.isSequential = entry.options.isSequential;",
        "      }",
        "    }",
        "    self._modeling.updateProperties(element, { loopCharacteristics: loopCharacteristics });",
        "  }",
        "",
        "  var businessObject = getBusinessObject(element),",
        "      loopCharacteristics = businessObject.loopCharacteristics;",
        "",
        "  var isSequential,",
        "      isLoop,",
        "      isParallel;",
        "",
        "  if (loopCharacteristics) {",
        "    isSequential = loopCharacteristics.isSequential;",
        "    isLoop = loopCharacteristics.isSequential === undefined;",
        "    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;",
        "  }",
        "",
        "",
        "  var loopEntries = [",
        "    {",
        "      id: 'toggle-parallel-mi',",
        "      className: 'bpmn-icon-parallel-mi-marker',",
        "      title: translate('Parallel Multi Instance'),",
        "      active: isParallel,",
        "      action: toggleLoopEntry,",
        "      options: {",
        "        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',",
        "        isSequential: false",
        "      }",
        "    },",
        "    {",
        "      id: 'toggle-sequential-mi',",
        "      className: 'bpmn-icon-sequential-mi-marker',",
        "      title: translate('Sequential Multi Instance'),",
        "      active: isSequential,",
        "      action: toggleLoopEntry,",
        "      options: {",
        "        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',",
        "        isSequential: true",
        "      }",
        "    },",
        "    {",
        "      id: 'toggle-loop',",
        "      className: 'bpmn-icon-loop-marker',",
        "      title: translate('Loop'),",
        "      active: isLoop,",
        "      action: toggleLoopEntry,",
        "      options: {",
        "        loopCharacteristics: 'bpmn:StandardLoopCharacteristics'",
        "      }",
        "    }",
        "  ];",
        "  return loopEntries;",
        "};",
        "",
        "/**",
        " * Get a list of menu items containing buttons for multi instance markers",
        " *",
        " * @param  {djs.model.Base} element",
        " *",
        " * @return {Array<Object>} a list of menu items",
        " */",
        "ReplaceMenuProvider.prototype._getDataObjectIsCollection = function(element) {",
        "",
        "  var self = this;",
        "  var translate = this._translate;",
        "",
        "  function toggleIsCollection(event, entry) {",
        "    self._modeling.updateModdleProperties(",
        "      element,",
        "      dataObject,",
        "      { isCollection: !entry.active });",
        "  }",
        "",
        "  var dataObject = element.businessObject.dataObjectRef,",
        "      isCollection = dataObject.isCollection;",
        "",
        "  var dataObjectEntries = [",
        "    {",
        "      id: 'toggle-is-collection',",
        "      className: 'bpmn-icon-parallel-mi-marker',",
        "      title: translate('Collection'),",
        "      active: isCollection,",
        "      action: toggleIsCollection,",
        "    }",
        "  ];",
        "  return dataObjectEntries;",
        "};",
        "",
        "",
        "/**",
        " * Get the menu items containing a button for the ad hoc marker",
        " *",
        " * @param  {djs.model.Base} element",
        " *",
        " * @return {Object} a menu item",
        " */",
        "ReplaceMenuProvider.prototype._getAdHocEntry = function(element) {",
        "  var translate = this._translate;",
        "  var businessObject = getBusinessObject(element);",
        "",
        "  var isAdHoc = is(businessObject, 'bpmn:AdHocSubProcess');",
        "",
        "  var replaceElement = this._bpmnReplace.replaceElement;",
        "",
        "  var adHocEntry = {",
        "    id: 'toggle-adhoc',",
        "..."
    ]
}