{
    "1": {
        "bug_file": "lib/features/modeling/behavior/ReplaceConnectionBehavior.js",
        "compressed": "NO",
        "line_numbers": 190,
        "compressed_line_numbers": 190,
        "compressed_bug_file_content": "import {\n  forEach,\n  find,\n  matchPattern\n} from 'min-dash';\n\nimport inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from '../../../util/ModelUtil';\n\n\nexport default function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules, injector) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  var dragging = injector.get('dragging', false);\n\n  function fixConnection(connection) {\n\n    var source = connection.source,\n        target = connection.target,\n        parent = connection.parent;\n\n    // do not do anything if connection\n    // is already deleted (may happen due to other\n    // behaviors plugged-in before)\n    if (!parent) {\n      return;\n    }\n\n    var replacementType,\n        remove;\n\n    /**\n     * Check if incoming or outgoing connections\n     * can stay or could be substituted with an\n     * appropriate replacement.\n     *\n     * This holds true for SequenceFlow <> MessageFlow.\n     */\n\n    if (is(connection, 'bpmn:SequenceFlow')) {\n      if (!bpmnRules.canConnectSequenceFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectMessageFlow(source, target)) {\n        replacementType = 'bpmn:MessageFlow';\n      }\n    }\n\n    // transform message flows into sequence flows, if possible\n\n    if (is(connection, 'bpmn:MessageFlow')) {\n\n      if (!bpmnRules.canConnectMessageFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectSequenceFlow(source, target)) {\n        replacementType = 'bpmn:SequenceFlow';\n      }\n    }\n\n    if (is(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {\n      remove = true;\n    }\n\n\n    // remove invalid connection,\n    // unless it has been removed already\n    if (remove) {\n      modeling.removeConnection(connection);\n    }\n\n    // replace SequenceFlow <> MessageFlow\n\n    if (replacementType) {\n      modeling.connect(source, target, {\n        type: replacementType,\n        waypoints: connection.waypoints.slice()\n      });\n    }\n  }\n\n  function replaceReconnectedConnection(event) {\n\n    var context = event.context,\n        connection = context.connection,\n        allowed,\n        replacement;\n\n    if (context.newTarget) {\n      allowed = bpmnRules.canConnect(connection.source, context.newTarget);\n    } else {\n      allowed = bpmnRules.canConnect(context.newSource, connection.target);\n    }\n\n    if (!allowed || allowed.type === connection.type) {\n      return;\n    }\n\n    // temporarily connect old shapes with new connection\n    replacement = modeling.connect(connection.source, connection.target, {\n      type: allowed.type,\n      waypoints: connection.waypoints.slice()\n    });\n\n    // remove old connection\n    modeling.removeConnection(connection);\n\n    // replace connection in context to reconnect end/start\n    context.connection = replacement;\n\n    if (dragging) {\n      cleanDraggingSelection(connection, replacement);\n    }\n  }\n\n  // monkey-patch selection saved in dragging in order to not re-select non-existing connection\n  function cleanDraggingSelection(oldConnection, newConnection) {\n    var context = dragging.context(),\n        previousSelection = context && context.payload.previousSelection,\n        index;\n\n    // do nothing if not dragging or no selection was present\n    if (!previousSelection || !previousSelection.length) {\n      return;\n    }\n\n    index = previousSelection.indexOf(oldConnection);\n\n    if (index === -1) {\n      return;\n    }\n\n    previousSelection.splice(index, 1, newConnection);\n  }\n\n  // lifecycle hooks\n\n  this.postExecuted('elements.move', function(context) {\n\n    var closure = context.closure,\n        allConnections = closure.allConnections;\n\n    forEach(allConnections, fixConnection);\n  }, true);\n\n  this.preExecute([\n    'connection.reconnectStart',\n    'connection.reconnectEnd'\n  ], replaceReconnectedConnection);\n\n  this.postExecuted('element.updateProperties', function(event) {\n    var context = event.context,\n        properties = context.properties,\n        element = context.element,\n        businessObject = element.businessObject,\n        connection;\n\n    // remove condition expression when morphing to default flow\n    if (properties.default) {\n      connection = find(\n        element.outgoing,\n        matchPattern({ id: element.businessObject.default.id })\n      );\n\n      if (connection) {\n        modeling.updateProperties(connection, { conditionExpression: undefined });\n      }\n    }\n\n    // remove default property from source when morphing to conditional flow\n    if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {\n      modeling.updateProperties(element.source, { default: undefined });\n    }\n  });\n}\n\ninherits(ReplaceConnectionBehavior, CommandInterceptor);\n\nReplaceConnectionBehavior.$inject = [\n  'eventBus',\n  'modeling',\n  'bpmnRules',\n  'injector'\n];"
    },
    "2": {
        "bug_file": "lib/features/modeling/cmd/UpdateSemanticParentHandler.js",
        "compressed": "NO",
        "line_numbers": 34,
        "compressed_line_numbers": 34,
        "compressed_bug_file_content": "export default function UpdateSemanticParentHandler(bpmnUpdater) {\n  this._bpmnUpdater = bpmnUpdater;\n}\n\nUpdateSemanticParentHandler.$inject = [ 'bpmnUpdater' ];\n\n\nUpdateSemanticParentHandler.prototype.execute = function(context) {\n  var dataStoreBo = context.dataStoreBo,\n      newSemanticParent = context.newSemanticParent,\n      newDiParent = context.newDiParent;\n\n  context.oldSemanticParent = dataStoreBo.$parent;\n  context.oldDiParent = dataStoreBo.di.$parent;\n\n  // update semantic parent\n  this._bpmnUpdater.updateSemanticParent(dataStoreBo, newSemanticParent);\n\n  // update DI parent\n  this._bpmnUpdater.updateDiParent(dataStoreBo.di, newDiParent);\n};\n\nUpdateSemanticParentHandler.prototype.revert = function(context) {\n  var dataStoreBo = context.dataStoreBo,\n      oldSemanticParent = context.oldSemanticParent,\n      oldDiParent = context.oldDiParent;\n\n  // update semantic parent\n  this._bpmnUpdater.updateSemanticParent(dataStoreBo, oldSemanticParent);\n\n  // update DI parent\n  this._bpmnUpdater.updateDiParent(dataStoreBo.di, oldDiParent);\n};\n"
    }
}