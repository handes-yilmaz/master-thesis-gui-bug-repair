{
    "bug_classes": {
        "1": {
            "class_name": "BpmnCopyPaste (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "class_details": [
                {
                    "name": "BpmnCopyPaste",
                    "start_line": 1,
                    "end_line": 175
                }
            ],
            "class_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    copyProperties(businessObject, descriptor, 'name');",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName,",
                "        bpmnProcess;",
                "",
                "    if (",
                "      propertyName === 'processRef' &&",
                "      is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process')",
                "    ) {",
                "      bpmnProcess = bpmnFactory.create('bpmn:Process');",
                "",
                "      // return copy of process",
                "      return moddleCopy.copyElement(property, bpmnProcess);",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor, cache) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "",
                "      // relationship cannot be resolved immediately",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    // boundary events",
                "    if (descriptor.host) {",
                "",
                "      // relationship can be resolved immediately",
                "      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor, cache);",
                "",
                "    copyProperties(descriptor, newBusinessObject, [",
                "      'isExpanded',",
                "      'name'",
                "    ]);",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        },
        "2": {
            "class_name": "ModdleCopy (not found) ",
            "file_path": "lib/features/copy-paste/ModdleCopy.js",
            "class_details": [
                {
                    "name": "ModdleCopy",
                    "start_line": 1,
                    "end_line": 276
                }
            ],
            "class_code": [
                "import {",
                "  find,",
                "  forEach,",
                "  isArray,",
                "  isDefined,",
                "  isObject,",
                "  matchPattern,",
                "  reduce,",
                "  has,",
                "  sortBy",
                "} from 'min-dash';",
                "",
                "var DISALLOWED_PROPERTIES = [",
                "  'artifacts',",
                "  'dataInputAssociations',",
                "  'dataOutputAssociations',",
                "  'default',",
                "  'flowElements',",
                "  'lanes',",
                "  'incoming',",
                "  'outgoing'",
                "];",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canCopyProperties> listener",
                " *",
                " * @param {Object} context",
                " * @param {Array<string>} context.propertyNames",
                " * @param {ModdleElement} context.sourceElement",
                " * @param {ModdleElement} context.targetElement",
                " *",
                " * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow",
                " * copying.",
                " */",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canCopyProperty> listener",
                " *",
                " * @param {Object} context",
                " * @param {ModdleElement} context.parent",
                " * @param {*} context.property",
                " * @param {string} context.propertyName",
                " *",
                " * @returns {*|boolean} - Return copied property or false to disallow",
                " * copying.",
                " */",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener",
                " *",
                " * @param {Object} context",
                " * @param {ModdleElement} context.parent",
                " * @param {*} context.property",
                " * @param {string} context.propertyName",
                " *",
                " * @returns {boolean} - Return false to disallow",
                " * setting copied property.",
                " */",
                "",
                "/**",
                " * Utility for copying model properties from source element to target element.",
                " *",
                " * @param {EventBus} eventBus",
                " * @param {BpmnFactory} bpmnFactory",
                " * @param {BpmnModdle} moddle",
                " */",
                "export default function ModdleCopy(eventBus, bpmnFactory, moddle) {",
                "  this._bpmnFactory = bpmnFactory;",
                "  this._eventBus = eventBus;",
                "  this._moddle = moddle;",
                "",
                "  // copy extension elements last",
                "  eventBus.on('moddleCopy.canCopyProperties', function(context) {",
                "    var propertyNames = context.propertyNames;",
                "",
                "    if (!propertyNames || !propertyNames.length) {",
                "      return;",
                "    }",
                "",
                "    return sortBy(propertyNames, function(propertyName) {",
                "      return propertyName === 'extensionElements';",
                "    });",
                "  });",
                "",
                "  // default check whether property can be copied",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        parentDescriptor = isObject(parent) && parent.$descriptor,",
                "        propertyName = context.propertyName;",
                "",
                "    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {",
                "",
                "      // disallow copying property",
                "      return false;",
                "    }",
                "",
                "    if (propertyName &&",
                "      parentDescriptor &&",
                "      !find(parentDescriptor.properties, matchPattern({ name: propertyName }))) {",
                "",
                "      // disallow copying property",
                "      return false;",
                "    }",
                "  });",
                "",
                "  // do NOT allow to copy empty extension elements",
                "  eventBus.on('moddleCopy.canSetCopiedProperty', function(context) {",
                "    var property = context.property;",
                "",
                "    if (is(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {",
                "",
                "      // disallow setting copied property",
                "      return false;",
                "    }",
                "  });",
                "}",
                "",
                "ModdleCopy.$inject = [",
                "  'eventBus',",
                "  'bpmnFactory',",
                "  'moddle'",
                "];",
                "",
                "/**",
                " * Copy model properties of source element to target element.",
                " *",
                " * @param {ModdleElement} sourceElement",
                " * @param {ModdleElement} targetElement",
                " * @param {Array<string>} [propertyNames]",
                " *",
                " * @param {ModdleElement}",
                " */",
                "ModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames) {",
                "  var self = this;",
                "",
                "  if (propertyNames && !isArray(propertyNames)) {",
                "    propertyNames = [ propertyNames ];",
                "  }",
                "",
                "  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);",
                "",
                "  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {",
                "    propertyNames: propertyNames,",
                "    sourceElement: sourceElement,",
                "    targetElement: targetElement",
                "  });",
                "",
                "  if (canCopyProperties === false) {",
                "    return targetElement;",
                "  }",
                "",
                "  if (isArray(canCopyProperties)) {",
                "    propertyNames = canCopyProperties;",
                "  }",
                "",
                "  // copy properties",
                "  forEach(propertyNames, function(propertyName) {",
                "    var sourceProperty;",
                "",
                "    if (has(sourceElement, propertyName)) {",
                "      sourceProperty = sourceElement.get(propertyName);",
                "    }",
                "",
                "    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);",
                "",
                "    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {",
                "      parent: parent,",
                "      property: copiedProperty,",
                "      propertyName: propertyName",
                "    });",
                "",
                "    if (canSetProperty === false) {",
                "      return;",
                "    }",
                "",
                "    if (isDefined(copiedProperty)) {",
                "      targetElement.set(propertyName, copiedProperty);",
                "    }",
                "  });",
                "",
                "  return targetElement;",
                "};",
                "",
                "/**",
                " * Copy model property.",
                " *",
                " * @param {*} property",
                " * @param {ModdleElement} parent",
                " * @param {string} propertyName",
                " *",
                " * @returns {*}",
                " */",
                "ModdleCopy.prototype.copyProperty = function(property, parent, propertyName) {",
                "  var self = this;",
                "",
                "  // allow others to copy property",
                "  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {",
                "    parent: parent,",
                "    property: property,",
                "    propertyName: propertyName",
                "  });",
                "",
                "  // return if copying is NOT allowed",
                "  if (copiedProperty === false) {",
                "    return;",
                "  }",
                "",
                "  if (copiedProperty) {",
                "    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {",
                "      copiedProperty.$parent = parent;",
                "    }",
                "",
                "    return copiedProperty;",
                "  }",
                "",
                "  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);",
                "",
                "  // do NOT copy Ids and references",
                "  if (propertyDescriptor.isId || propertyDescriptor.isReference) {",
                "    return;",
                "  }",
                "",
                "  // copy arrays",
                "  if (isArray(property)) {",
                "    return reduce(property, function(childProperties, childProperty) {",
                "",
                "      // recursion",
                "      copiedProperty = self.copyProperty(childProperty, parent, propertyName);",
                "",
                "      // copying might NOT be allowed",
                "      if (copiedProperty) {",
                "        copiedProperty.$parent = parent;",
                "",
                "        return childProperties.concat(copiedProperty);",
                "      }",
                "",
                "      return childProperties;",
                "    }, []);",
                "  }",
                "",
                "  // copy model elements",
                "  if (isObject(property) && property.$type) {",
                "    if (this._moddle.getElementDescriptor(property).isGeneric) {",
                "      return;",
                "    }",
                "",
                "    copiedProperty = self._bpmnFactory.create(property.$type);",
                "",
                "    copiedProperty.$parent = parent;",
                "",
                "    // recursion",
                "    copiedProperty = self.copyElement(property, copiedProperty);",
                "",
                "    return copiedProperty;",
                "  }",
                "",
                "  // copy primitive properties",
                "  return property;",
                "};",
                "",
                "// helpers //////////",
                "",
                "export function getPropertyNames(descriptor, keepDefaultProperties) {",
                "  return reduce(descriptor.properties, function(properties, property) {",
                "",
                "    if (keepDefaultProperties && property.default) {",
                "      return properties;",
                "    }",
                "",
                "    return properties.concat(property.name);",
                "  }, []);",
                "}",
                "",
                "function is(element, type) {",
                "  return element && (typeof element.$instanceOf === 'function') && element.$instanceOf(type);",
                "}"
            ]
        },
        "3": {
            "class_name": "CreateBoundaryEventBehavior (not found) ",
            "file_path": "lib/features/modeling/behavior/CreateBoundaryEventBehavior.js",
            "class_details": [
                {
                    "name": "CreateBoundaryEventBehavior",
                    "start_line": 1,
                    "end_line": 54
                }
            ],
            "class_code": [
                "import inherits from 'inherits';",
                "",
                "import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';",
                "",
                "import { is } from '../../../util/ModelUtil';",
                "",
                "",
                "/**",
                " * BPMN specific create boundary event behavior",
                " */",
                "export default function CreateBoundaryEventBehavior(",
                "    eventBus, modeling, elementFactory,",
                "    bpmnFactory) {",
                "",
                "  CommandInterceptor.call(this, eventBus);",
                "",
                "  /**",
                "   * replace intermediate event with boundary event when",
                "   * attaching it to a shape",
                "   */",
                "",
                "  this.preExecute('shape.create', function(context) {",
                "    var shape = context.shape,",
                "        host = context.host,",
                "        businessObject,",
                "        boundaryEvent;",
                "",
                "    var attrs = {",
                "      cancelActivity: true",
                "    };",
                "",
                "    if (host && is(shape, 'bpmn:IntermediateThrowEvent')) {",
                "      attrs.attachedToRef = host.businessObject;",
                "",
                "      businessObject = bpmnFactory.create('bpmn:BoundaryEvent', attrs);",
                "",
                "      boundaryEvent = {",
                "        type: 'bpmn:BoundaryEvent',",
                "        businessObject: businessObject",
                "      };",
                "",
                "      context.shape = elementFactory.createShape(boundaryEvent);",
                "    }",
                "  }, true);",
                "}",
                "",
                "CreateBoundaryEventBehavior.$inject = [",
                "  'eventBus',",
                "  'modeling',",
                "  'elementFactory',",
                "  'bpmnFactory'",
                "];",
                "",
                "inherits(CreateBoundaryEventBehavior, CommandInterceptor);"
            ]
        }
    },
    "bug_functions": {
        "4": {
            "function_name": "copyProperties (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "function_details": [
                {
                    "name": "copyProperties",
                    "start_line": 1,
                    "end_line": 175
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    copyProperties(businessObject, descriptor, 'name');",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName,",
                "        bpmnProcess;",
                "",
                "    if (",
                "      propertyName === 'processRef' &&",
                "      is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process')",
                "    ) {",
                "      bpmnProcess = bpmnFactory.create('bpmn:Process');",
                "",
                "      // return copy of process",
                "      return moddleCopy.copyElement(property, bpmnProcess);",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor, cache) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "",
                "      // relationship cannot be resolved immediately",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    // boundary events",
                "    if (descriptor.host) {",
                "",
                "      // relationship can be resolved immediately",
                "      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor, cache);",
                "",
                "    copyProperties(descriptor, newBusinessObject, [",
                "      'isExpanded',",
                "      'name'",
                "    ]);",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        },
        "5": {
            "function_name": "copyElement (not found) ",
            "file_path": "lib/features/copy-paste/ModdleCopy.js",
            "function_details": [
                {
                    "name": "copyElement",
                    "start_line": 1,
                    "end_line": 276
                }
            ],
            "function_code": [
                "import {",
                "  find,",
                "  forEach,",
                "  isArray,",
                "  isDefined,",
                "  isObject,",
                "  matchPattern,",
                "  reduce,",
                "  has,",
                "  sortBy",
                "} from 'min-dash';",
                "",
                "var DISALLOWED_PROPERTIES = [",
                "  'artifacts',",
                "  'dataInputAssociations',",
                "  'dataOutputAssociations',",
                "  'default',",
                "  'flowElements',",
                "  'lanes',",
                "  'incoming',",
                "  'outgoing'",
                "];",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canCopyProperties> listener",
                " *",
                " * @param {Object} context",
                " * @param {Array<string>} context.propertyNames",
                " * @param {ModdleElement} context.sourceElement",
                " * @param {ModdleElement} context.targetElement",
                " *",
                " * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow",
                " * copying.",
                " */",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canCopyProperty> listener",
                " *",
                " * @param {Object} context",
                " * @param {ModdleElement} context.parent",
                " * @param {*} context.property",
                " * @param {string} context.propertyName",
                " *",
                " * @returns {*|boolean} - Return copied property or false to disallow",
                " * copying.",
                " */",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener",
                " *",
                " * @param {Object} context",
                " * @param {ModdleElement} context.parent",
                " * @param {*} context.property",
                " * @param {string} context.propertyName",
                " *",
                " * @returns {boolean} - Return false to disallow",
                " * setting copied property.",
                " */",
                "",
                "/**",
                " * Utility for copying model properties from source element to target element.",
                " *",
                " * @param {EventBus} eventBus",
                " * @param {BpmnFactory} bpmnFactory",
                " * @param {BpmnModdle} moddle",
                " */",
                "export default function ModdleCopy(eventBus, bpmnFactory, moddle) {",
                "  this._bpmnFactory = bpmnFactory;",
                "  this._eventBus = eventBus;",
                "  this._moddle = moddle;",
                "",
                "  // copy extension elements last",
                "  eventBus.on('moddleCopy.canCopyProperties', function(context) {",
                "    var propertyNames = context.propertyNames;",
                "",
                "    if (!propertyNames || !propertyNames.length) {",
                "      return;",
                "    }",
                "",
                "    return sortBy(propertyNames, function(propertyName) {",
                "      return propertyName === 'extensionElements';",
                "    });",
                "  });",
                "",
                "  // default check whether property can be copied",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        parentDescriptor = isObject(parent) && parent.$descriptor,",
                "        propertyName = context.propertyName;",
                "",
                "    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {",
                "",
                "      // disallow copying property",
                "      return false;",
                "    }",
                "",
                "    if (propertyName &&",
                "      parentDescriptor &&",
                "      !find(parentDescriptor.properties, matchPattern({ name: propertyName }))) {",
                "",
                "      // disallow copying property",
                "      return false;",
                "    }",
                "  });",
                "",
                "  // do NOT allow to copy empty extension elements",
                "  eventBus.on('moddleCopy.canSetCopiedProperty', function(context) {",
                "    var property = context.property;",
                "",
                "    if (is(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {",
                "",
                "      // disallow setting copied property",
                "      return false;",
                "    }",
                "  });",
                "}",
                "",
                "ModdleCopy.$inject = [",
                "  'eventBus',",
                "  'bpmnFactory',",
                "  'moddle'",
                "];",
                "",
                "/**",
                " * Copy model properties of source element to target element.",
                " *",
                " * @param {ModdleElement} sourceElement",
                " * @param {ModdleElement} targetElement",
                " * @param {Array<string>} [propertyNames]",
                " *",
                " * @param {ModdleElement}",
                " */",
                "ModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames) {",
                "  var self = this;",
                "",
                "  if (propertyNames && !isArray(propertyNames)) {",
                "    propertyNames = [ propertyNames ];",
                "  }",
                "",
                "  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);",
                "",
                "  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {",
                "    propertyNames: propertyNames,",
                "    sourceElement: sourceElement,",
                "    targetElement: targetElement",
                "  });",
                "",
                "  if (canCopyProperties === false) {",
                "    return targetElement;",
                "  }",
                "",
                "  if (isArray(canCopyProperties)) {",
                "    propertyNames = canCopyProperties;",
                "  }",
                "",
                "  // copy properties",
                "  forEach(propertyNames, function(propertyName) {",
                "    var sourceProperty;",
                "",
                "    if (has(sourceElement, propertyName)) {",
                "      sourceProperty = sourceElement.get(propertyName);",
                "    }",
                "",
                "    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);",
                "",
                "    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {",
                "      parent: parent,",
                "      property: copiedProperty,",
                "      propertyName: propertyName",
                "    });",
                "",
                "    if (canSetProperty === false) {",
                "      return;",
                "    }",
                "",
                "    if (isDefined(copiedProperty)) {",
                "      targetElement.set(propertyName, copiedProperty);",
                "    }",
                "  });",
                "",
                "  return targetElement;",
                "};",
                "",
                "/**",
                " * Copy model property.",
                " *",
                " * @param {*} property",
                " * @param {ModdleElement} parent",
                " * @param {string} propertyName",
                " *",
                " * @returns {*}",
                " */",
                "ModdleCopy.prototype.copyProperty = function(property, parent, propertyName) {",
                "  var self = this;",
                "",
                "  // allow others to copy property",
                "  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {",
                "    parent: parent,",
                "    property: property,",
                "    propertyName: propertyName",
                "  });",
                "",
                "  // return if copying is NOT allowed",
                "  if (copiedProperty === false) {",
                "    return;",
                "  }",
                "",
                "  if (copiedProperty) {",
                "    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {",
                "      copiedProperty.$parent = parent;",
                "    }",
                "",
                "    return copiedProperty;",
                "  }",
                "",
                "  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);",
                "",
                "  // do NOT copy Ids and references",
                "  if (propertyDescriptor.isId || propertyDescriptor.isReference) {",
                "    return;",
                "  }",
                "",
                "  // copy arrays",
                "  if (isArray(property)) {",
                "    return reduce(property, function(childProperties, childProperty) {",
                "",
                "      // recursion",
                "      copiedProperty = self.copyProperty(childProperty, parent, propertyName);",
                "",
                "      // copying might NOT be allowed",
                "      if (copiedProperty) {",
                "        copiedProperty.$parent = parent;",
                "",
                "        return childProperties.concat(copiedProperty);",
                "      }",
                "",
                "      return childProperties;",
                "    }, []);",
                "  }",
                "",
                "  // copy model elements",
                "  if (isObject(property) && property.$type) {",
                "    if (this._moddle.getElementDescriptor(property).isGeneric) {",
                "      return;",
                "    }",
                "",
                "    copiedProperty = self._bpmnFactory.create(property.$type);",
                "",
                "    copiedProperty.$parent = parent;",
                "",
                "    // recursion",
                "    copiedProperty = self.copyElement(property, copiedProperty);",
                "",
                "    return copiedProperty;",
                "  }",
                "",
                "  // copy primitive properties",
                "  return property;",
                "};",
                "",
                "// helpers //////////",
                "",
                "export function getPropertyNames(descriptor, keepDefaultProperties) {",
                "  return reduce(descriptor.properties, function(properties, property) {",
                "",
                "    if (keepDefaultProperties && property.default) {",
                "      return properties;",
                "    }",
                "",
                "    return properties.concat(property.name);",
                "  }, []);",
                "}",
                "",
                "function is(element, type) {",
                "  return element && (typeof element.$instanceOf === 'function') && element.$instanceOf(type);",
                "}"
            ]
        },
        "6": {
            "function_name": "preExecute (not found) ",
            "file_path": "lib/features/modeling/behavior/CreateBoundaryEventBehavior.js",
            "function_details": [
                {
                    "name": "preExecute",
                    "start_line": 1,
                    "end_line": 54
                }
            ],
            "function_code": [
                "import inherits from 'inherits';",
                "",
                "import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';",
                "",
                "import { is } from '../../../util/ModelUtil';",
                "",
                "",
                "/**",
                " * BPMN specific create boundary event behavior",
                " */",
                "export default function CreateBoundaryEventBehavior(",
                "    eventBus, modeling, elementFactory,",
                "    bpmnFactory) {",
                "",
                "  CommandInterceptor.call(this, eventBus);",
                "",
                "  /**",
                "   * replace intermediate event with boundary event when",
                "   * attaching it to a shape",
                "   */",
                "",
                "  this.preExecute('shape.create', function(context) {",
                "    var shape = context.shape,",
                "        host = context.host,",
                "        businessObject,",
                "        boundaryEvent;",
                "",
                "    var attrs = {",
                "      cancelActivity: true",
                "    };",
                "",
                "    if (host && is(shape, 'bpmn:IntermediateThrowEvent')) {",
                "      attrs.attachedToRef = host.businessObject;",
                "",
                "      businessObject = bpmnFactory.create('bpmn:BoundaryEvent', attrs);",
                "",
                "      boundaryEvent = {",
                "        type: 'bpmn:BoundaryEvent',",
                "        businessObject: businessObject",
                "      };",
                "",
                "      context.shape = elementFactory.createShape(boundaryEvent);",
                "    }",
                "  }, true);",
                "}",
                "",
                "CreateBoundaryEventBehavior.$inject = [",
                "  'eventBus',",
                "  'modeling',",
                "  'elementFactory',",
                "  'bpmnFactory'",
                "];",
                "",
                "inherits(CreateBoundaryEventBehavior, CommandInterceptor);"
            ]
        },
        "7": {
            "function_name": "removeProperties (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "function_details": [
                {
                    "name": "removeProperties",
                    "start_line": 1,
                    "end_line": 175
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    copyProperties(businessObject, descriptor, 'name');",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName,",
                "        bpmnProcess;",
                "",
                "    if (",
                "      propertyName === 'processRef' &&",
                "      is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process')",
                "    ) {",
                "      bpmnProcess = bpmnFactory.create('bpmn:Process');",
                "",
                "      // return copy of process",
                "      return moddleCopy.copyElement(property, bpmnProcess);",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor, cache) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "",
                "      // relationship cannot be resolved immediately",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    // boundary events",
                "    if (descriptor.host) {",
                "",
                "      // relationship can be resolved immediately",
                "      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor, cache);",
                "",
                "    copyProperties(descriptor, newBusinessObject, [",
                "      'isExpanded',",
                "      'name'",
                "    ]);",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        },
        "8": {
            "function_name": "resolveReferences (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "function_details": [
                {
                    "name": "resolveReferences",
                    "start_line": 1,
                    "end_line": 175
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    copyProperties(businessObject, descriptor, 'name');",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName,",
                "        bpmnProcess;",
                "",
                "    if (",
                "      propertyName === 'processRef' &&",
                "      is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process')",
                "    ) {",
                "      bpmnProcess = bpmnFactory.create('bpmn:Process');",
                "",
                "      // return copy of process",
                "      return moddleCopy.copyElement(property, bpmnProcess);",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor, cache) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "",
                "      // relationship cannot be resolved immediately",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    // boundary events",
                "    if (descriptor.host) {",
                "",
                "      // relationship can be resolved immediately",
                "      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor, cache);",
                "",
                "    copyProperties(descriptor, newBusinessObject, [",
                "      'isExpanded',",
                "      'name'",
                "    ]);",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        },
        "9": {
            "function_name": "ModdleCopy.prototype.copyElement (not found) ",
            "file_path": "lib/features/copy-paste/ModdleCopy.js",
            "function_details": [
                {
                    "name": "ModdleCopy.prototype.copyElement",
                    "start_line": 1,
                    "end_line": 276
                }
            ],
            "function_code": [
                "import {",
                "  find,",
                "  forEach,",
                "  isArray,",
                "  isDefined,",
                "  isObject,",
                "  matchPattern,",
                "  reduce,",
                "  has,",
                "  sortBy",
                "} from 'min-dash';",
                "",
                "var DISALLOWED_PROPERTIES = [",
                "  'artifacts',",
                "  'dataInputAssociations',",
                "  'dataOutputAssociations',",
                "  'default',",
                "  'flowElements',",
                "  'lanes',",
                "  'incoming',",
                "  'outgoing'",
                "];",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canCopyProperties> listener",
                " *",
                " * @param {Object} context",
                " * @param {Array<string>} context.propertyNames",
                " * @param {ModdleElement} context.sourceElement",
                " * @param {ModdleElement} context.targetElement",
                " *",
                " * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow",
                " * copying.",
                " */",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canCopyProperty> listener",
                " *",
                " * @param {Object} context",
                " * @param {ModdleElement} context.parent",
                " * @param {*} context.property",
                " * @param {string} context.propertyName",
                " *",
                " * @returns {*|boolean} - Return copied property or false to disallow",
                " * copying.",
                " */",
                "",
                "/**",
                " * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener",
                " *",
                " * @param {Object} context",
                " * @param {ModdleElement} context.parent",
                " * @param {*} context.property",
                " * @param {string} context.propertyName",
                " *",
                " * @returns {boolean} - Return false to disallow",
                " * setting copied property.",
                " */",
                "",
                "/**",
                " * Utility for copying model properties from source element to target element.",
                " *",
                " * @param {EventBus} eventBus",
                " * @param {BpmnFactory} bpmnFactory",
                " * @param {BpmnModdle} moddle",
                " */",
                "export default function ModdleCopy(eventBus, bpmnFactory, moddle) {",
                "  this._bpmnFactory = bpmnFactory;",
                "  this._eventBus = eventBus;",
                "  this._moddle = moddle;",
                "",
                "  // copy extension elements last",
                "  eventBus.on('moddleCopy.canCopyProperties', function(context) {",
                "    var propertyNames = context.propertyNames;",
                "",
                "    if (!propertyNames || !propertyNames.length) {",
                "      return;",
                "    }",
                "",
                "    return sortBy(propertyNames, function(propertyName) {",
                "      return propertyName === 'extensionElements';",
                "    });",
                "  });",
                "",
                "  // default check whether property can be copied",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        parentDescriptor = isObject(parent) && parent.$descriptor,",
                "        propertyName = context.propertyName;",
                "",
                "    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {",
                "",
                "      // disallow copying property",
                "      return false;",
                "    }",
                "",
                "    if (propertyName &&",
                "      parentDescriptor &&",
                "      !find(parentDescriptor.properties, matchPattern({ name: propertyName }))) {",
                "",
                "      // disallow copying property",
                "      return false;",
                "    }",
                "  });",
                "",
                "  // do NOT allow to copy empty extension elements",
                "  eventBus.on('moddleCopy.canSetCopiedProperty', function(context) {",
                "    var property = context.property;",
                "",
                "    if (is(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {",
                "",
                "      // disallow setting copied property",
                "      return false;",
                "    }",
                "  });",
                "}",
                "",
                "ModdleCopy.$inject = [",
                "  'eventBus',",
                "  'bpmnFactory',",
                "  'moddle'",
                "];",
                "",
                "/**",
                " * Copy model properties of source element to target element.",
                " *",
                " * @param {ModdleElement} sourceElement",
                " * @param {ModdleElement} targetElement",
                " * @param {Array<string>} [propertyNames]",
                " *",
                " * @param {ModdleElement}",
                " */",
                "ModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames) {",
                "  var self = this;",
                "",
                "  if (propertyNames && !isArray(propertyNames)) {",
                "    propertyNames = [ propertyNames ];",
                "  }",
                "",
                "  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);",
                "",
                "  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {",
                "    propertyNames: propertyNames,",
                "    sourceElement: sourceElement,",
                "    targetElement: targetElement",
                "  });",
                "",
                "  if (canCopyProperties === false) {",
                "    return targetElement;",
                "  }",
                "",
                "  if (isArray(canCopyProperties)) {",
                "    propertyNames = canCopyProperties;",
                "  }",
                "",
                "  // copy properties",
                "  forEach(propertyNames, function(propertyName) {",
                "    var sourceProperty;",
                "",
                "    if (has(sourceElement, propertyName)) {",
                "      sourceProperty = sourceElement.get(propertyName);",
                "    }",
                "",
                "    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);",
                "",
                "    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {",
                "      parent: parent,",
                "      property: copiedProperty,",
                "      propertyName: propertyName",
                "    });",
                "",
                "    if (canSetProperty === false) {",
                "      return;",
                "    }",
                "",
                "    if (isDefined(copiedProperty)) {",
                "      targetElement.set(propertyName, copiedProperty);",
                "    }",
                "  });",
                "",
                "  return targetElement;",
                "};",
                "",
                "/**",
                " * Copy model property.",
                " *",
                " * @param {*} property",
                " * @param {ModdleElement} parent",
                " * @param {string} propertyName",
                " *",
                " * @returns {*}",
                " */",
                "ModdleCopy.prototype.copyProperty = function(property, parent, propertyName) {",
                "  var self = this;",
                "",
                "  // allow others to copy property",
                "  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {",
                "    parent: parent,",
                "    property: property,",
                "    propertyName: propertyName",
                "  });",
                "",
                "  // return if copying is NOT allowed",
                "  if (copiedProperty === false) {",
                "    return;",
                "  }",
                "",
                "  if (copiedProperty) {",
                "    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {",
                "      copiedProperty.$parent = parent;",
                "    }",
                "",
                "    return copiedProperty;",
                "  }",
                "",
                "  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);",
                "",
                "  // do NOT copy Ids and references",
                "  if (propertyDescriptor.isId || propertyDescriptor.isReference) {",
                "    return;",
                "  }",
                "",
                "  // copy arrays",
                "  if (isArray(property)) {",
                "    return reduce(property, function(childProperties, childProperty) {",
                "",
                "      // recursion",
                "      copiedProperty = self.copyProperty(childProperty, parent, propertyName);",
                "",
                "      // copying might NOT be allowed",
                "      if (copiedProperty) {",
                "        copiedProperty.$parent = parent;",
                "",
                "        return childProperties.concat(copiedProperty);",
                "      }",
                "",
                "      return childProperties;",
                "    }, []);",
                "  }",
                "",
                "  // copy model elements",
                "  if (isObject(property) && property.$type) {",
                "    if (this._moddle.getElementDescriptor(property).isGeneric) {",
                "      return;",
                "    }",
                "",
                "    copiedProperty = self._bpmnFactory.create(property.$type);",
                "",
                "    copiedProperty.$parent = parent;",
                "",
                "    // recursion",
                "    copiedProperty = self.copyElement(property, copiedProperty);",
                "",
                "    return copiedProperty;",
                "  }",
                "",
                "  // copy primitive properties",
                "  return property;",
                "};",
                "",
                "// helpers //////////",
                "",
                "export function getPropertyNames(descriptor, keepDefaultProperties) {",
                "  return reduce(descriptor.properties, function(properties, property) {",
                "",
                "    if (keepDefaultProperties && property.default) {",
                "      return properties;",
                "    }",
                "",
                "    return properties.concat(property.name);",
                "  }, []);",
                "}",
                "",
                "function is(element, type) {",
                "  return element && (typeof element.$instanceOf === 'function') && element.$instanceOf(type);",
                "}"
            ]
        }
    }
}