{
    "bug_classes": {
        "1": {
            "class_name": "BpmnCopyPaste (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "class_details": [
                {
                    "name": "BpmnCopyPaste",
                    "start_line": 1,
                    "end_line": 155
                }
            ],
            "class_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName;",
                "",
                "    if (is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process') &&",
                "      propertyName === 'processRef') {",
                "      return bpmnFactory.create('bpmn:Process');",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor);",
                "",
                "    copyProperties(descriptor, newBusinessObject, 'isExpanded');",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        }
    },
    "bug_functions": {
        "2": {
            "function_name": "isLabel (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "function_details": [
                {
                    "name": "isLabel",
                    "start_line": 1,
                    "end_line": 155
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName;",
                "",
                "    if (is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process') &&",
                "      propertyName === 'processRef') {",
                "      return bpmnFactory.create('bpmn:Process');",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor);",
                "",
                "    copyProperties(descriptor, newBusinessObject, 'isExpanded');",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        },
        "3": {
            "function_name": "getLabel (not found) ",
            "file_path": "lib/features/label-editing/LabelUtil.js",
            "function_details": [
                {
                    "name": "getLabel",
                    "start_line": 1,
                    "end_line": 67
                }
            ],
            "function_code": [
                "import { is } from '../../util/ModelUtil';",
                "",
                "function getLabelAttr(semantic) {",
                "  if (",
                "    is(semantic, 'bpmn:FlowElement') ||",
                "    is(semantic, 'bpmn:Participant') ||",
                "    is(semantic, 'bpmn:Lane') ||",
                "    is(semantic, 'bpmn:SequenceFlow') ||",
                "    is(semantic, 'bpmn:MessageFlow') ||",
                "    is(semantic, 'bpmn:DataInput') ||",
                "    is(semantic, 'bpmn:DataOutput')",
                "  ) {",
                "    return 'name';",
                "  }",
                "",
                "  if (is(semantic, 'bpmn:TextAnnotation')) {",
                "    return 'text';",
                "  }",
                "",
                "  if (is(semantic, 'bpmn:Group')) {",
                "    return 'categoryValueRef';",
                "  }",
                "}",
                "",
                "function getCategoryValue(semantic) {",
                "  var categoryValueRef = semantic['categoryValueRef'];",
                "",
                "  if (!categoryValueRef) {",
                "    return '';",
                "  }",
                "",
                "",
                "  return categoryValueRef.value || '';",
                "}",
                "",
                "export function getLabel(element) {",
                "  var semantic = element.businessObject,",
                "      attr = getLabelAttr(semantic);",
                "",
                "  if (attr) {",
                "",
                "    if (attr === 'categoryValueRef') {",
                "",
                "      return getCategoryValue(semantic);",
                "    }",
                "",
                "    return semantic[attr] || '';",
                "  }",
                "}",
                "",
                "",
                "export function setLabel(element, text, isExternal) {",
                "  var semantic = element.businessObject,",
                "      attr = getLabelAttr(semantic);",
                "",
                "  if (attr) {",
                "",
                "    if (attr === 'categoryValueRef') {",
                "      semantic['categoryValueRef'].value = text;",
                "    } else {",
                "      semantic[attr] = text;",
                "    }",
                "",
                "  }",
                "",
                "  return element;",
                "}"
            ]
        },
        "4": {
            "function_name": "setLabel (not found) ",
            "file_path": "lib/features/label-editing/LabelUtil.js",
            "function_details": [
                {
                    "name": "setLabel",
                    "start_line": 1,
                    "end_line": 67
                }
            ],
            "function_code": [
                "import { is } from '../../util/ModelUtil';",
                "",
                "function getLabelAttr(semantic) {",
                "  if (",
                "    is(semantic, 'bpmn:FlowElement') ||",
                "    is(semantic, 'bpmn:Participant') ||",
                "    is(semantic, 'bpmn:Lane') ||",
                "    is(semantic, 'bpmn:SequenceFlow') ||",
                "    is(semantic, 'bpmn:MessageFlow') ||",
                "    is(semantic, 'bpmn:DataInput') ||",
                "    is(semantic, 'bpmn:DataOutput')",
                "  ) {",
                "    return 'name';",
                "  }",
                "",
                "  if (is(semantic, 'bpmn:TextAnnotation')) {",
                "    return 'text';",
                "  }",
                "",
                "  if (is(semantic, 'bpmn:Group')) {",
                "    return 'categoryValueRef';",
                "  }",
                "}",
                "",
                "function getCategoryValue(semantic) {",
                "  var categoryValueRef = semantic['categoryValueRef'];",
                "",
                "  if (!categoryValueRef) {",
                "    return '';",
                "  }",
                "",
                "",
                "  return categoryValueRef.value || '';",
                "}",
                "",
                "export function getLabel(element) {",
                "  var semantic = element.businessObject,",
                "      attr = getLabelAttr(semantic);",
                "",
                "  if (attr) {",
                "",
                "    if (attr === 'categoryValueRef') {",
                "",
                "      return getCategoryValue(semantic);",
                "    }",
                "",
                "    return semantic[attr] || '';",
                "  }",
                "}",
                "",
                "",
                "export function setLabel(element, text, isExternal) {",
                "  var semantic = element.businessObject,",
                "      attr = getLabelAttr(semantic);",
                "",
                "  if (attr) {",
                "",
                "    if (attr === 'categoryValueRef') {",
                "      semantic['categoryValueRef'].value = text;",
                "    } else {",
                "      semantic[attr] = text;",
                "    }",
                "",
                "  }",
                "",
                "  return element;",
                "}"
            ]
        },
        "5": {
            "function_name": "copyProperties (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "function_details": [
                {
                    "name": "copyProperties",
                    "start_line": 1,
                    "end_line": 155
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName;",
                "",
                "    if (is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process') &&",
                "      propertyName === 'processRef') {",
                "      return bpmnFactory.create('bpmn:Process');",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor);",
                "",
                "    copyProperties(descriptor, newBusinessObject, 'isExpanded');",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        },
        "6": {
            "function_name": "removeProperties (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "function_details": [
                {
                    "name": "removeProperties",
                    "start_line": 1,
                    "end_line": 155
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName;",
                "",
                "    if (is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process') &&",
                "      propertyName === 'processRef') {",
                "      return bpmnFactory.create('bpmn:Process');",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor);",
                "",
                "    copyProperties(descriptor, newBusinessObject, 'isExpanded');",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        },
        "7": {
            "function_name": "resolveReferences (not found) ",
            "file_path": "lib/features/copy-paste/BpmnCopyPaste.js",
            "function_details": [
                {
                    "name": "resolveReferences",
                    "start_line": 1,
                    "end_line": 155
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  forEach,",
                "  isArray,",
                "  isUndefined,",
                "  omit,",
                "  reduce",
                "} from 'min-dash';",
                "",
                "function copyProperties(source, target, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (!isUndefined(source[property])) {",
                "      target[property] = source[property];",
                "    }",
                "  });",
                "}",
                "",
                "function removeProperties(element, properties) {",
                "  if (!isArray(properties)) {",
                "    properties = [ properties ];",
                "  }",
                "",
                "  forEach(properties, function(property) {",
                "    if (element[property]) {",
                "      delete element[property];",
                "    }",
                "  });",
                "}",
                "",
                "var LOW_PRIORITY = 750;",
                "",
                "",
                "export default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {",
                "",
                "  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {",
                "    var descriptor = context.descriptor,",
                "        element = context.element;",
                "",
                "    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);",
                "",
                "    descriptor.type = element.type;",
                "",
                "    descriptor.di = {};",
                "",
                "    // fill and stroke will be set to DI",
                "    copyProperties(businessObject.di, descriptor.di, [",
                "      'fill',",
                "      'stroke'",
                "    ]);",
                "",
                "    copyProperties(businessObject.di, descriptor, 'isExpanded');",
                "",
                "    if (isLabel(descriptor)) {",
                "      return descriptor;",
                "    }",
                "",
                "    // default sequence flow",
                "    if (businessObject.default) {",
                "      descriptor.default = businessObject.default.id;",
                "    }",
                "  });",
                "",
                "  eventBus.on('moddleCopy.canCopyProperty', function(context) {",
                "    var parent = context.parent,",
                "        property = context.property,",
                "        propertyName = context.propertyName;",
                "",
                "    if (is(parent, 'bpmn:Participant') &&",
                "      is(property, 'bpmn:Process') &&",
                "      propertyName === 'processRef') {",
                "      return bpmnFactory.create('bpmn:Process');",
                "    }",
                "  });",
                "",
                "  var references;",
                "",
                "  function resolveReferences(descriptor) {",
                "    var businessObject = getBusinessObject(descriptor);",
                "",
                "    // default sequence flows",
                "    if (descriptor.default) {",
                "      references[ descriptor.default ] = {",
                "        element: businessObject,",
                "        property: 'default'",
                "      };",
                "    }",
                "",
                "    references = omit(references, reduce(references, function(array, reference, key) {",
                "      var element = reference.element,",
                "          property = reference.property;",
                "",
                "      if (key === descriptor.id) {",
                "        element[ property ] = businessObject;",
                "",
                "        array.push(descriptor.id);",
                "      }",
                "",
                "      return array;",
                "    }, []));",
                "  }",
                "",
                "  eventBus.on('copyPaste.pasteElements', function() {",
                "    references = {};",
                "  });",
                "",
                "  eventBus.on('copyPaste.pasteElement', function(context) {",
                "    var cache = context.cache,",
                "        descriptor = context.descriptor,",
                "        oldBusinessObject = descriptor.oldBusinessObject,",
                "        newBusinessObject;",
                "",
                "    // do NOT copy business object if external label",
                "    if (isLabel(descriptor)) {",
                "      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);",
                "",
                "      return;",
                "    }",
                "",
                "    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);",
                "",
                "    descriptor.businessObject = moddleCopy.copyElement(",
                "      oldBusinessObject,",
                "      newBusinessObject",
                "    );",
                "",
                "    // resolve references e.g. default sequence flow",
                "    resolveReferences(descriptor);",
                "",
                "    copyProperties(descriptor, newBusinessObject, 'isExpanded');",
                "",
                "    removeProperties(descriptor, 'oldBusinessObject');",
                "  });",
                "",
                "}",
                "",
                "",
                "BpmnCopyPaste.$inject = [",
                "  'bpmnFactory',",
                "  'eventBus',",
                "  'moddleCopy'",
                "];",
                "",
                "// helpers //////////",
                "",
                "function isLabel(element) {",
                "  return !!element.labelTarget;",
                "}"
            ]
        }
    }
}