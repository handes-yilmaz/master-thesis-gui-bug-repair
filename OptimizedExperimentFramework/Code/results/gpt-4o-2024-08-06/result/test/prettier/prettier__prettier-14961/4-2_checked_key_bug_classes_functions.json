{
    "bug_classes": {
        "1": {
            "class_name": "  (not found) ",
            "file_path": "src/language-html/embed/angular-attributes.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 94
                }
            ],
            "class_code": [
                "import {",
                "  getUnescapedAttributeValue,",
                "  getTextValueParts,",
                "} from \"../utils/index.js\";",
                "import { fill } from \"../../document/builders.js\";",
                "import {",
                "  formatAttributeValue,",
                "  printExpand,",
                "  shouldHugJsExpression,",
                "} from \"./utils.js\";",
                "import {",
                "  interpolationRegex as angularInterpolationRegex,",
                "  printAngularInterpolation,",
                "} from \"./angular-interpolation.js\";",
                "",
                "function createAngularPrinter({ parser }) {",
                "  return (textToDoc, print, path /*, options*/) =>",
                "    formatAttributeValue(",
                "      getUnescapedAttributeValue(path.node),",
                "      textToDoc,",
                "      {",
                "        parser,",
                "        // angular does not allow trailing comma",
                "        trailingComma: \"none\",",
                "      },",
                "      shouldHugJsExpression",
                "    );",
                "}",
                "",
                "const printNgAction = createAngularPrinter({ parser: \"__ng_action\" });",
                "const printNgBinding = createAngularPrinter({ parser: \"__ng_binding\" });",
                "const printNgDirective = createAngularPrinter({ parser: \"__ng_directive\" });",
                "",
                "function printAngularAttribute(path, options) {",
                "  if (options.parser !== \"angular\") {",
                "    return;",
                "  }",
                "",
                "  const { node } = path;",
                "  const attributeName = node.fullName;",
                "",
                "  /**",
                "   *     (click)=\"angularStatement\"",
                "   *     on-click=\"angularStatement\"",
                "   */",
                "  if (",
                "    (attributeName.startsWith(\"(\") && attributeName.endsWith(\")\")) ||",
                "    attributeName.startsWith(\"on-\")",
                "  ) {",
                "    return printNgAction;",
                "  }",
                "",
                "  /**",
                "   *     [target]=\"angularExpression\"",
                "   *     bind-target=\"angularExpression\"",
                "   *     [(target)]=\"angularExpression\"",
                "   *     bindon-target=\"angularExpression\"",
                "   */",
                "  if (",
                "    (attributeName.startsWith(\"[\") && attributeName.endsWith(\"]\")) ||",
                "    /^bind(?:on)?-/.test(attributeName) ||",
                "    // Unofficial rudimentary support for some of the most used directives of AngularJS 1.x",
                "    /^ng-(?:if|show|hide|class|style)$/.test(attributeName)",
                "  ) {",
                "    return printNgBinding;",
                "  }",
                "",
                "  /**",
                "   *     *directive=\"angularDirective\"",
                "   */",
                "  if (attributeName.startsWith(\"*\")) {",
                "    return printNgDirective;",
                "  }",
                "",
                "  const value = getUnescapedAttributeValue(node);",
                "",
                "  /**",
                "   *     i18n=\"longDescription\"",
                "   *     i18n-attr=\"longDescription\"",
                "   */",
                "  if (/^i18n(?:-.+)?$/.test(attributeName)) {",
                "    return () =>",
                "      printExpand(",
                "        fill(getTextValueParts(node, value.trim())),",
                "        !value.includes(\"@@\")",
                "      );",
                "  }",
                "",
                "  if (angularInterpolationRegex.test(value)) {",
                "    return (textToDoc) => printAngularInterpolation(value, textToDoc);",
                "  }",
                "}",
                "",
                "export default printAngularAttribute;"
            ]
        },
        "2": {
            "class_name": "  (not found) ",
            "file_path": "src/language-html/embed/angular-interpolation.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 38
                }
            ],
            "class_code": [
                "import { group, indent, line } from \"../../document/builders.js\";",
                "import { replaceEndOfLine } from \"../../document/utils.js\";",
                "import { formatAttributeValue } from \"./utils.js\";",
                "",
                "const interpolationRegex = /{{(.+?)}}/s;",
                "",
                "async function printAngularInterpolation(text, textToDoc) {",
                "  const parts = [];",
                "  for (const [index, part] of text.split(interpolationRegex).entries()) {",
                "    if (index % 2 === 0) {",
                "      parts.push(replaceEndOfLine(part));",
                "    } else {",
                "      try {",
                "        parts.push(",
                "          group([",
                "            \"{{\",",
                "            indent([",
                "              line,",
                "              await formatAttributeValue(part, textToDoc, {",
                "                parser: \"__ng_interpolation\",",
                "                __isInHtmlInterpolation: true, // to avoid unexpected `}}`",
                "                trailingComma: \"none\",",
                "              }),",
                "            ]),",
                "            line,",
                "            \"}}\",",
                "          ])",
                "        );",
                "      } catch {",
                "        parts.push(\"{{\", replaceEndOfLine(part), \"}}\");",
                "      }",
                "    }",
                "  }",
                "",
                "  return parts;",
                "}",
                "",
                "export { interpolationRegex, printAngularInterpolation };"
            ]
        }
    },
    "bug_functions": {
        "3": {
            "function_name": "createAngularPrinter (not found) ",
            "file_path": "src/language-html/embed/angular-attributes.js",
            "function_details": [
                {
                    "name": "createAngularPrinter",
                    "start_line": 1,
                    "end_line": 94
                }
            ],
            "function_code": [
                "import {",
                "  getUnescapedAttributeValue,",
                "  getTextValueParts,",
                "} from \"../utils/index.js\";",
                "import { fill } from \"../../document/builders.js\";",
                "import {",
                "  formatAttributeValue,",
                "  printExpand,",
                "  shouldHugJsExpression,",
                "} from \"./utils.js\";",
                "import {",
                "  interpolationRegex as angularInterpolationRegex,",
                "  printAngularInterpolation,",
                "} from \"./angular-interpolation.js\";",
                "",
                "function createAngularPrinter({ parser }) {",
                "  return (textToDoc, print, path /*, options*/) =>",
                "    formatAttributeValue(",
                "      getUnescapedAttributeValue(path.node),",
                "      textToDoc,",
                "      {",
                "        parser,",
                "        // angular does not allow trailing comma",
                "        trailingComma: \"none\",",
                "      },",
                "      shouldHugJsExpression",
                "    );",
                "}",
                "",
                "const printNgAction = createAngularPrinter({ parser: \"__ng_action\" });",
                "const printNgBinding = createAngularPrinter({ parser: \"__ng_binding\" });",
                "const printNgDirective = createAngularPrinter({ parser: \"__ng_directive\" });",
                "",
                "function printAngularAttribute(path, options) {",
                "  if (options.parser !== \"angular\") {",
                "    return;",
                "  }",
                "",
                "  const { node } = path;",
                "  const attributeName = node.fullName;",
                "",
                "  /**",
                "   *     (click)=\"angularStatement\"",
                "   *     on-click=\"angularStatement\"",
                "   */",
                "  if (",
                "    (attributeName.startsWith(\"(\") && attributeName.endsWith(\")\")) ||",
                "    attributeName.startsWith(\"on-\")",
                "  ) {",
                "    return printNgAction;",
                "  }",
                "",
                "  /**",
                "   *     [target]=\"angularExpression\"",
                "   *     bind-target=\"angularExpression\"",
                "   *     [(target)]=\"angularExpression\"",
                "   *     bindon-target=\"angularExpression\"",
                "   */",
                "  if (",
                "    (attributeName.startsWith(\"[\") && attributeName.endsWith(\"]\")) ||",
                "    /^bind(?:on)?-/.test(attributeName) ||",
                "    // Unofficial rudimentary support for some of the most used directives of AngularJS 1.x",
                "    /^ng-(?:if|show|hide|class|style)$/.test(attributeName)",
                "  ) {",
                "    return printNgBinding;",
                "  }",
                "",
                "  /**",
                "   *     *directive=\"angularDirective\"",
                "   */",
                "  if (attributeName.startsWith(\"*\")) {",
                "    return printNgDirective;",
                "  }",
                "",
                "  const value = getUnescapedAttributeValue(node);",
                "",
                "  /**",
                "   *     i18n=\"longDescription\"",
                "   *     i18n-attr=\"longDescription\"",
                "   */",
                "  if (/^i18n(?:-.+)?$/.test(attributeName)) {",
                "    return () =>",
                "      printExpand(",
                "        fill(getTextValueParts(node, value.trim())),",
                "        !value.includes(\"@@\")",
                "      );",
                "  }",
                "",
                "  if (angularInterpolationRegex.test(value)) {",
                "    return (textToDoc) => printAngularInterpolation(value, textToDoc);",
                "  }",
                "}",
                "",
                "export default printAngularAttribute;"
            ]
        },
        "4": {
            "function_name": "printAngularAttribute (not found) ",
            "file_path": "src/language-html/embed/angular-attributes.js",
            "function_details": [
                {
                    "name": "printAngularAttribute",
                    "start_line": 1,
                    "end_line": 94
                }
            ],
            "function_code": [
                "import {",
                "  getUnescapedAttributeValue,",
                "  getTextValueParts,",
                "} from \"../utils/index.js\";",
                "import { fill } from \"../../document/builders.js\";",
                "import {",
                "  formatAttributeValue,",
                "  printExpand,",
                "  shouldHugJsExpression,",
                "} from \"./utils.js\";",
                "import {",
                "  interpolationRegex as angularInterpolationRegex,",
                "  printAngularInterpolation,",
                "} from \"./angular-interpolation.js\";",
                "",
                "function createAngularPrinter({ parser }) {",
                "  return (textToDoc, print, path /*, options*/) =>",
                "    formatAttributeValue(",
                "      getUnescapedAttributeValue(path.node),",
                "      textToDoc,",
                "      {",
                "        parser,",
                "        // angular does not allow trailing comma",
                "        trailingComma: \"none\",",
                "      },",
                "      shouldHugJsExpression",
                "    );",
                "}",
                "",
                "const printNgAction = createAngularPrinter({ parser: \"__ng_action\" });",
                "const printNgBinding = createAngularPrinter({ parser: \"__ng_binding\" });",
                "const printNgDirective = createAngularPrinter({ parser: \"__ng_directive\" });",
                "",
                "function printAngularAttribute(path, options) {",
                "  if (options.parser !== \"angular\") {",
                "    return;",
                "  }",
                "",
                "  const { node } = path;",
                "  const attributeName = node.fullName;",
                "",
                "  /**",
                "   *     (click)=\"angularStatement\"",
                "   *     on-click=\"angularStatement\"",
                "   */",
                "  if (",
                "    (attributeName.startsWith(\"(\") && attributeName.endsWith(\")\")) ||",
                "    attributeName.startsWith(\"on-\")",
                "  ) {",
                "    return printNgAction;",
                "  }",
                "",
                "  /**",
                "   *     [target]=\"angularExpression\"",
                "   *     bind-target=\"angularExpression\"",
                "   *     [(target)]=\"angularExpression\"",
                "   *     bindon-target=\"angularExpression\"",
                "   */",
                "  if (",
                "    (attributeName.startsWith(\"[\") && attributeName.endsWith(\"]\")) ||",
                "    /^bind(?:on)?-/.test(attributeName) ||",
                "    // Unofficial rudimentary support for some of the most used directives of AngularJS 1.x",
                "    /^ng-(?:if|show|hide|class|style)$/.test(attributeName)",
                "  ) {",
                "    return printNgBinding;",
                "  }",
                "",
                "  /**",
                "   *     *directive=\"angularDirective\"",
                "   */",
                "  if (attributeName.startsWith(\"*\")) {",
                "    return printNgDirective;",
                "  }",
                "",
                "  const value = getUnescapedAttributeValue(node);",
                "",
                "  /**",
                "   *     i18n=\"longDescription\"",
                "   *     i18n-attr=\"longDescription\"",
                "   */",
                "  if (/^i18n(?:-.+)?$/.test(attributeName)) {",
                "    return () =>",
                "      printExpand(",
                "        fill(getTextValueParts(node, value.trim())),",
                "        !value.includes(\"@@\")",
                "      );",
                "  }",
                "",
                "  if (angularInterpolationRegex.test(value)) {",
                "    return (textToDoc) => printAngularInterpolation(value, textToDoc);",
                "  }",
                "}",
                "",
                "export default printAngularAttribute;"
            ]
        },
        "5": {
            "function_name": "printAngularInterpolation (not found) ",
            "file_path": "src/language-html/embed/angular-interpolation.js",
            "function_details": [
                {
                    "name": "printAngularInterpolation",
                    "start_line": 1,
                    "end_line": 38
                }
            ],
            "function_code": [
                "import { group, indent, line } from \"../../document/builders.js\";",
                "import { replaceEndOfLine } from \"../../document/utils.js\";",
                "import { formatAttributeValue } from \"./utils.js\";",
                "",
                "const interpolationRegex = /{{(.+?)}}/s;",
                "",
                "async function printAngularInterpolation(text, textToDoc) {",
                "  const parts = [];",
                "  for (const [index, part] of text.split(interpolationRegex).entries()) {",
                "    if (index % 2 === 0) {",
                "      parts.push(replaceEndOfLine(part));",
                "    } else {",
                "      try {",
                "        parts.push(",
                "          group([",
                "            \"{{\",",
                "            indent([",
                "              line,",
                "              await formatAttributeValue(part, textToDoc, {",
                "                parser: \"__ng_interpolation\",",
                "                __isInHtmlInterpolation: true, // to avoid unexpected `}}`",
                "                trailingComma: \"none\",",
                "              }),",
                "            ]),",
                "            line,",
                "            \"}}\",",
                "          ])",
                "        );",
                "      } catch {",
                "        parts.push(\"{{\", replaceEndOfLine(part), \"}}\");",
                "      }",
                "    }",
                "  }",
                "",
                "  return parts;",
                "}",
                "",
                "export { interpolationRegex, printAngularInterpolation };"
            ]
        }
    }
}