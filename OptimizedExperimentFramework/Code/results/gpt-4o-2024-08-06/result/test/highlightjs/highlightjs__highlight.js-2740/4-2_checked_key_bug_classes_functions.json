{
    "bug_classes": {
        "1": {
            "class_name": "  (not found) ",
            "file_path": "src/languages/sql.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 168
                }
            ],
            "class_code": [
                "/*",
                " Language: SQL",
                " Contributors: Nikolay Lisienko <info@neor.ru>, Heiko August <post@auge8472.de>, Travis Odom <travis.a.odom@gmail.com>, Vadimtro <vadimtro@yahoo.com>, Benjamin Auder <benjamin.auder@gmail.com>",
                " Website: https://en.wikipedia.org/wiki/SQL",
                " Category: common",
                " */",
                "",
                "export default function(hljs) {",
                "  var COMMENT_MODE = hljs.COMMENT('--', '$');",
                "  return {",
                "    name: 'SQL',",
                "    case_insensitive: true,",
                "    illegal: /[<>{}*]/,",
                "    contains: [",
                "      {",
                "        beginKeywords:",
                "          'begin end start commit rollback savepoint lock alter create drop rename call ' +",
                "          'delete do handler insert load replace select truncate update set show pragma grant ' +",
                "          'merge describe use explain help declare prepare execute deallocate release ' +",
                "          'unlock purge reset change stop analyze cache flush optimize repair kill ' +",
                "          'install uninstall checksum restore check backup revoke comment values with',",
                "        end: /;/, endsWithParent: true,",
                "        keywords: {",
                "          $pattern: /[\\w\\.]+/,",
                "          keyword:",
                "            'as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +",
                "            'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +",
                "            'all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply ' +",
                "            'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +",
                "            'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +",
                "            'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +",
                "            'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +",
                "            'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +",
                "            'bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +",
                "            'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +",
                "            'char_length character_length characters characterset charindex charset charsetform charsetid check ' +",
                "            'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +",
                "            'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +",
                "            'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +",
                "            'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +",
                "            'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +",
                "            'consider consistent constant constraint constraints constructor container content contents context ' +",
                "            'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +",
                "            'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +",
                "            'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +",
                "            'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +",
                "            'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +",
                "            'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +",
                "            'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +",
                "            'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +",
                "            'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +",
                "            'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +",
                "            'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +",
                "            'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +",
                "            'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +",
                "            'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +",
                "            'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +",
                "            'execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external ' +",
                "            'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +",
                "            'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +",
                "            'finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign ' +",
                "            'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +",
                "            'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +",
                "            'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +",
                "            'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +",
                "            'hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified ' +",
                "            'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +",
                "            'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +",
                "            'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +",
                "            'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +",
                "            'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +",
                "            'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase ' +",
                "            'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +",
                "            'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +",
                "            'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +",
                "            'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +",
                "            'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +",
                "            'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +",
                "            'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +",
                "            'minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month ' +",
                "            'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +",
                "            'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +",
                "            'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +",
                "            'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +",
                "            'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +",
                "            'noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +",
                "            'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +",
                "            'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +",
                "            'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +",
                "            'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +",
                "            'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +",
                "            'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +",
                "            'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +",
                "            'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +",
                "            'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +",
                "            'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +",
                "            'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +",
                "            'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +",
                "            'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +",
                "            'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +",
                "            'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +",
                "            'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +",
                "            'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +",
                "            'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +",
                "            'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +",
                "            'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +",
                "            'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +",
                "            'sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select ' +",
                "            'self semi sequence sequential serializable server servererror session session_user sessions_per_user set ' +",
                "            'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +",
                "            'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +",
                "            'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +",
                "            'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +",
                "            'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +",
                "            'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +",
                "            'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +",
                "            'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +",
                "            'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +",
                "            'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +",
                "            'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +",
                "            'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo ' +",
                "            'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +",
                "            'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +",
                "            'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +",
                "            'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +",
                "            'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +",
                "            'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot ' +",
                "            'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +",
                "            'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +",
                "            'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +",
                "            'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +",
                "            'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +",
                "            'wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped ' +",
                "            'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +",
                "            'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',",
                "          literal:",
                "            'true false null unknown',",
                "          built_in:",
                "            'array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number ' +",
                "            'numeric real record serial serial8 smallint text time timestamp tinyint varchar varchar2 varying void'",
                "        },",
                "        contains: [",
                "          {",
                "            className: 'string',",
                "            begin: '\\'', end: '\\'',",
                "            contains: [{begin: '\\'\\''}]",
                "          },",
                "          {",
                "            className: 'string',",
                "            begin: '\"', end: '\"',",
                "            contains: [{begin: '\"\"'}]",
                "          },",
                "          {",
                "            className: 'string',",
                "            begin: '`', end: '`'",
                "          },",
                "          hljs.C_NUMBER_MODE,",
                "          hljs.C_BLOCK_COMMENT_MODE,",
                "          COMMENT_MODE,",
                "          hljs.HASH_COMMENT_MODE",
                "        ]",
                "      },",
                "      hljs.C_BLOCK_COMMENT_MODE,",
                "      COMMENT_MODE,",
                "      hljs.HASH_COMMENT_MODE",
                "    ]",
                "  };",
                "}"
            ]
        },
        "2": {
            "class_name": "default (not found) ",
            "file_path": "src/languages/sql.js",
            "class_details": [
                {
                    "name": "default",
                    "start_line": 1,
                    "end_line": 168
                }
            ],
            "class_code": [
                "/*",
                " Language: SQL",
                " Contributors: Nikolay Lisienko <info@neor.ru>, Heiko August <post@auge8472.de>, Travis Odom <travis.a.odom@gmail.com>, Vadimtro <vadimtro@yahoo.com>, Benjamin Auder <benjamin.auder@gmail.com>",
                " Website: https://en.wikipedia.org/wiki/SQL",
                " Category: common",
                " */",
                "",
                "export default function(hljs) {",
                "  var COMMENT_MODE = hljs.COMMENT('--', '$');",
                "  return {",
                "    name: 'SQL',",
                "    case_insensitive: true,",
                "    illegal: /[<>{}*]/,",
                "    contains: [",
                "      {",
                "        beginKeywords:",
                "          'begin end start commit rollback savepoint lock alter create drop rename call ' +",
                "          'delete do handler insert load replace select truncate update set show pragma grant ' +",
                "          'merge describe use explain help declare prepare execute deallocate release ' +",
                "          'unlock purge reset change stop analyze cache flush optimize repair kill ' +",
                "          'install uninstall checksum restore check backup revoke comment values with',",
                "        end: /;/, endsWithParent: true,",
                "        keywords: {",
                "          $pattern: /[\\w\\.]+/,",
                "          keyword:",
                "            'as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +",
                "            'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +",
                "            'all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply ' +",
                "            'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +",
                "            'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +",
                "            'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +",
                "            'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +",
                "            'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +",
                "            'bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +",
                "            'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +",
                "            'char_length character_length characters characterset charindex charset charsetform charsetid check ' +",
                "            'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +",
                "            'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +",
                "            'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +",
                "            'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +",
                "            'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +",
                "            'consider consistent constant constraint constraints constructor container content contents context ' +",
                "            'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +",
                "            'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +",
                "            'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +",
                "            'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +",
                "            'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +",
                "            'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +",
                "            'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +",
                "            'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +",
                "            'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +",
                "            'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +",
                "            'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +",
                "            'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +",
                "            'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +",
                "            'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +",
                "            'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +",
                "            'execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external ' +",
                "            'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +",
                "            'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +",
                "            'finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign ' +",
                "            'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +",
                "            'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +",
                "            'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +",
                "            'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +",
                "            'hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified ' +",
                "            'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +",
                "            'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +",
                "            'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +",
                "            'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +",
                "            'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +",
                "            'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase ' +",
                "            'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +",
                "            'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +",
                "            'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +",
                "            'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +",
                "            'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +",
                "            'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +",
                "            'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +",
                "            'minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month ' +",
                "            'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +",
                "            'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +",
                "            'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +",
                "            'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +",
                "            'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +",
                "            'noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +",
                "            'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +",
                "            'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +",
                "            'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +",
                "            'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +",
                "            'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +",
                "            'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +",
                "            'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +",
                "            'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +",
                "            'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +",
                "            'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +",
                "            'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +",
                "            'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +",
                "            'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +",
                "            'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +",
                "            'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +",
                "            'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +",
                "            'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +",
                "            'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +",
                "            'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +",
                "            'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +",
                "            'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +",
                "            'sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select ' +",
                "            'self semi sequence sequential serializable server servererror session session_user sessions_per_user set ' +",
                "            'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +",
                "            'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +",
                "            'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +",
                "            'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +",
                "            'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +",
                "            'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +",
                "            'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +",
                "            'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +",
                "            'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +",
                "            'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +",
                "            'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +",
                "            'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo ' +",
                "            'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +",
                "            'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +",
                "            'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +",
                "            'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +",
                "            'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +",
                "            'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot ' +",
                "            'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +",
                "            'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +",
                "            'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +",
                "            'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +",
                "            'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +",
                "            'wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped ' +",
                "            'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +",
                "            'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',",
                "          literal:",
                "            'true false null unknown',",
                "          built_in:",
                "            'array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number ' +",
                "            'numeric real record serial serial8 smallint text time timestamp tinyint varchar varchar2 varying void'",
                "        },",
                "        contains: [",
                "          {",
                "            className: 'string',",
                "            begin: '\\'', end: '\\'',",
                "            contains: [{begin: '\\'\\''}]",
                "          },",
                "          {",
                "            className: 'string',",
                "            begin: '\"', end: '\"',",
                "            contains: [{begin: '\"\"'}]",
                "          },",
                "          {",
                "            className: 'string',",
                "            begin: '`', end: '`'",
                "          },",
                "          hljs.C_NUMBER_MODE,",
                "          hljs.C_BLOCK_COMMENT_MODE,",
                "          COMMENT_MODE,",
                "          hljs.HASH_COMMENT_MODE",
                "        ]",
                "      },",
                "      hljs.C_BLOCK_COMMENT_MODE,",
                "      COMMENT_MODE,",
                "      hljs.HASH_COMMENT_MODE",
                "    ]",
                "  };",
                "}"
            ]
        }
    },
    "bug_functions": {
        "3": {
            "function_name": "export default function (not found) ",
            "file_path": "src/languages/sql.js",
            "function_details": [
                {
                    "name": "export default function",
                    "start_line": 1,
                    "end_line": 168
                }
            ],
            "function_code": [
                "/*",
                " Language: SQL",
                " Contributors: Nikolay Lisienko <info@neor.ru>, Heiko August <post@auge8472.de>, Travis Odom <travis.a.odom@gmail.com>, Vadimtro <vadimtro@yahoo.com>, Benjamin Auder <benjamin.auder@gmail.com>",
                " Website: https://en.wikipedia.org/wiki/SQL",
                " Category: common",
                " */",
                "",
                "export default function(hljs) {",
                "  var COMMENT_MODE = hljs.COMMENT('--', '$');",
                "  return {",
                "    name: 'SQL',",
                "    case_insensitive: true,",
                "    illegal: /[<>{}*]/,",
                "    contains: [",
                "      {",
                "        beginKeywords:",
                "          'begin end start commit rollback savepoint lock alter create drop rename call ' +",
                "          'delete do handler insert load replace select truncate update set show pragma grant ' +",
                "          'merge describe use explain help declare prepare execute deallocate release ' +",
                "          'unlock purge reset change stop analyze cache flush optimize repair kill ' +",
                "          'install uninstall checksum restore check backup revoke comment values with',",
                "        end: /;/, endsWithParent: true,",
                "        keywords: {",
                "          $pattern: /[\\w\\.]+/,",
                "          keyword:",
                "            'as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +",
                "            'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +",
                "            'all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply ' +",
                "            'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +",
                "            'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +",
                "            'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +",
                "            'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +",
                "            'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +",
                "            'bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +",
                "            'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +",
                "            'char_length character_length characters characterset charindex charset charsetform charsetid check ' +",
                "            'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +",
                "            'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +",
                "            'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +",
                "            'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +",
                "            'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +",
                "            'consider consistent constant constraint constraints constructor container content contents context ' +",
                "            'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +",
                "            'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +",
                "            'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +",
                "            'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +",
                "            'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +",
                "            'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +",
                "            'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +",
                "            'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +",
                "            'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +",
                "            'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +",
                "            'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +",
                "            'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +",
                "            'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +",
                "            'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +",
                "            'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +",
                "            'execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external ' +",
                "            'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +",
                "            'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +",
                "            'finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign ' +",
                "            'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +",
                "            'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +",
                "            'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +",
                "            'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +",
                "            'hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified ' +",
                "            'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +",
                "            'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +",
                "            'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +",
                "            'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +",
                "            'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +",
                "            'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase ' +",
                "            'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +",
                "            'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +",
                "            'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +",
                "            'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +",
                "            'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +",
                "            'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +",
                "            'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +",
                "            'minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month ' +",
                "            'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +",
                "            'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +",
                "            'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +",
                "            'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +",
                "            'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +",
                "            'noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +",
                "            'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +",
                "            'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +",
                "            'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +",
                "            'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +",
                "            'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +",
                "            'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +",
                "            'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +",
                "            'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +",
                "            'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +",
                "            'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +",
                "            'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +",
                "            'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +",
                "            'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +",
                "            'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +",
                "            'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +",
                "            'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +",
                "            'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +",
                "            'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +",
                "            'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +",
                "            'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +",
                "            'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +",
                "            'sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select ' +",
                "            'self semi sequence sequential serializable server servererror session session_user sessions_per_user set ' +",
                "            'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +",
                "            'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +",
                "            'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +",
                "            'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +",
                "            'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +",
                "            'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +",
                "            'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +",
                "            'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +",
                "            'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +",
                "            'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +",
                "            'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +",
                "            'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo ' +",
                "            'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +",
                "            'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +",
                "            'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +",
                "            'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +",
                "            'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +",
                "            'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot ' +",
                "            'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +",
                "            'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +",
                "            'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +",
                "            'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +",
                "            'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +",
                "            'wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped ' +",
                "            'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +",
                "            'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',",
                "          literal:",
                "            'true false null unknown',",
                "          built_in:",
                "            'array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number ' +",
                "            'numeric real record serial serial8 smallint text time timestamp tinyint varchar varchar2 varying void'",
                "        },",
                "        contains: [",
                "          {",
                "            className: 'string',",
                "            begin: '\\'', end: '\\'',",
                "            contains: [{begin: '\\'\\''}]",
                "          },",
                "          {",
                "            className: 'string',",
                "            begin: '\"', end: '\"',",
                "            contains: [{begin: '\"\"'}]",
                "          },",
                "          {",
                "            className: 'string',",
                "            begin: '`', end: '`'",
                "          },",
                "          hljs.C_NUMBER_MODE,",
                "          hljs.C_BLOCK_COMMENT_MODE,",
                "          COMMENT_MODE,",
                "          hljs.HASH_COMMENT_MODE",
                "        ]",
                "      },",
                "      hljs.C_BLOCK_COMMENT_MODE,",
                "      COMMENT_MODE,",
                "      hljs.HASH_COMMENT_MODE",
                "    ]",
                "  };",
                "}"
            ]
        },
        "4": {
            "function_name": "highlight (not found) 2-502",
            "file_path": "src/highlight.js",
            "function_details": [
                {
                    "name": "highlight",
                    "start_line": 2,
                    "end_line": 502
                }
            ],
            "function_code": [
                "Syntax highlighting with language autodetection.",
                "https://highlightjs.org/",
                "*/",
                "",
                "// @ts-ignore",
                "import deepFreeze from 'deep-freeze-es6';",
                "import Response from './lib/response.js';",
                "import TokenTreeEmitter from './lib/token_tree.js';",
                "import * as regex from './lib/regex.js';",
                "import * as utils from './lib/utils.js';",
                "import * as MODES from './lib/modes.js';",
                "import { compileLanguage } from './lib/mode_compiler.js';",
                "import * as packageJSON from '../package.json';",
                "import { BuildVuePlugin } from \"./plugins/vue.js\";",
                "import { mergeHTMLPlugin } from \"./plugins/merge_html.js\";",
                "import * as logger from \"./lib/logger.js\";",
                "",
                "const escape = utils.escapeHTML;",
                "const inherit = utils.inherit;",
                "const NO_MATCH = Symbol(\"nomatch\");",
                "",
                "/**",
                " * @param {any} hljs - object that is extended (legacy)",
                " * @returns {HLJSApi}",
                " */",
                "const HLJS = function(hljs) {",
                "  // Global internal variables used within the highlight.js library.",
                "  /** @type {Record<string, Language>} */",
                "  const languages = Object.create(null);",
                "  /** @type {Record<string, string>} */",
                "  const aliases = Object.create(null);",
                "  /** @type {HLJSPlugin[]} */",
                "  const plugins = [];",
                "",
                "  // safe/production mode - swallows more errors, tries to keep running",
                "  // even if a single syntax or parse hits a fatal error",
                "  let SAFE_MODE = true;",
                "  const fixMarkupRe = /(^(<[^>]+>|\\t|)+|\\n)/gm;",
                "  const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";",
                "  /** @type {Language} */",
                "  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };",
                "",
                "  // Global options used when within external APIs. This is modified when",
                "  // calling the `hljs.configure` function.",
                "  /** @type HLJSOptions */",
                "  let options = {",
                "    noHighlightRe: /^(no-?highlight)$/i,",
                "    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,",
                "    classPrefix: 'hljs-',",
                "    tabReplace: null,",
                "    useBR: false,",
                "    languages: null,",
                "    // beta configuration options, subject to change, welcome to discuss",
                "    // https://github.com/highlightjs/highlight.js/issues/1086",
                "    __emitter: TokenTreeEmitter",
                "  };",
                "",
                "  /* Utility functions */",
                "",
                "  /**",
                "   * Tests a language name to see if highlighting should be skipped",
                "   * @param {string} languageName",
                "   */",
                "  function shouldNotHighlight(languageName) {",
                "    return options.noHighlightRe.test(languageName);",
                "  }",
                "",
                "  /**",
                "   * @param {HighlightedHTMLElement} block - the HTML element to determine language for",
                "   */",
                "  function blockLanguage(block) {",
                "    let classes = block.className + ' ';",
                "",
                "    classes += block.parentNode ? block.parentNode.className : '';",
                "",
                "    // language-* takes precedence over non-prefixed class names.",
                "    const match = options.languageDetectRe.exec(classes);",
                "    if (match) {",
                "      const language = getLanguage(match[1]);",
                "      if (!language) {",
                "        logger.warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));",
                "        logger.warn(\"Falling back to no-highlight mode for this block.\", block);",
                "      }",
                "      return language ? match[1] : 'no-highlight';",
                "    }",
                "",
                "    return classes",
                "      .split(/\\s+/)",
                "      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));",
                "  }",
                "",
                "  /**",
                "   * Core highlighting function.",
                "   *",
                "   * @param {string} languageName - the language to use for highlighting",
                "   * @param {string} code - the code to highlight",
                "   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail",
                "   * @param {CompiledMode} [continuation] - current continuation mode, if any",
                "   *",
                "   * @returns {HighlightResult} Result - an object that represents the result",
                "   * @property {string} language - the language name",
                "   * @property {number} relevance - the relevance score",
                "   * @property {string} value - the highlighted HTML code",
                "   * @property {string} code - the original raw code",
                "   * @property {CompiledMode} top - top of the current mode stack",
                "   * @property {boolean} illegal - indicates whether any illegal matches were found",
                "  */",
                "  function highlight(languageName, code, ignoreIllegals, continuation) {",
                "    /** @type {{ code: string, language: string, result?: any }} */",
                "    const context = {",
                "      code,",
                "      language: languageName",
                "    };",
                "    // the plugin can change the desired language or the code to be highlighted",
                "    // just be changing the object it was passed",
                "    fire(\"before:highlight\", context);",
                "",
                "    // a before plugin can usurp the result completely by providing it's own",
                "    // in which case we don't even need to call highlight",
                "    const result = context.result ?",
                "      context.result :",
                "      _highlight(context.language, context.code, ignoreIllegals, continuation);",
                "",
                "    result.code = context.code;",
                "    // the plugin can change anything in result to suite it",
                "    fire(\"after:highlight\", result);",
                "",
                "    return result;",
                "  }",
                "",
                "  /**",
                "   * private highlight that's used internally and does not fire callbacks",
                "   *",
                "   * @param {string} languageName - the language to use for highlighting",
                "   * @param {string} code - the code to highlight",
                "   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail",
                "   * @param {CompiledMode} [continuation] - current continuation mode, if any",
                "   * @returns {HighlightResult} - result of the highlight operation",
                "  */",
                "  function _highlight(languageName, code, ignoreIllegals, continuation) {",
                "    const codeToHighlight = code;",
                "",
                "    /**",
                "     * Return keyword data if a match is a keyword",
                "     * @param {CompiledMode} mode - current mode",
                "     * @param {RegExpMatchArray} match - regexp match data",
                "     * @returns {KeywordData | false}",
                "     */",
                "    function keywordData(mode, match) {",
                "      const matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];",
                "      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];",
                "    }",
                "",
                "    function processKeywords() {",
                "      if (!top.keywords) {",
                "        emitter.addText(modeBuffer);",
                "        return;",
                "      }",
                "",
                "      let lastIndex = 0;",
                "      top.keywordPatternRe.lastIndex = 0;",
                "      let match = top.keywordPatternRe.exec(modeBuffer);",
                "      let buf = \"\";",
                "",
                "      while (match) {",
                "        buf += modeBuffer.substring(lastIndex, match.index);",
                "        const data = keywordData(top, match);",
                "        if (data) {",
                "          const [kind, keywordRelevance] = data;",
                "          emitter.addText(buf);",
                "          buf = \"\";",
                "",
                "          relevance += keywordRelevance;",
                "          const cssClass = language.classNameAliases[kind] || kind;",
                "          emitter.addKeyword(match[0], cssClass);",
                "        } else {",
                "          buf += match[0];",
                "        }",
                "        lastIndex = top.keywordPatternRe.lastIndex;",
                "        match = top.keywordPatternRe.exec(modeBuffer);",
                "      }",
                "      buf += modeBuffer.substr(lastIndex);",
                "      emitter.addText(buf);",
                "    }",
                "",
                "    function processSubLanguage() {",
                "      if (modeBuffer === \"\") return;",
                "      /** @type HighlightResult */",
                "      let result = null;",
                "",
                "      if (typeof top.subLanguage === 'string') {",
                "        if (!languages[top.subLanguage]) {",
                "          emitter.addText(modeBuffer);",
                "          return;",
                "        }",
                "        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);",
                "        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result.top);",
                "      } else {",
                "        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);",
                "      }",
                "",
                "      // Counting embedded language score towards the host language may be disabled",
                "      // with zeroing the containing mode relevance. Use case in point is Markdown that",
                "      // allows XML everywhere and makes every XML snippet to have a much larger Markdown",
                "      // score.",
                "      if (top.relevance > 0) {",
                "        relevance += result.relevance;",
                "      }",
                "      emitter.addSublanguage(result.emitter, result.language);",
                "    }",
                "",
                "    function processBuffer() {",
                "      if (top.subLanguage != null) {",
                "        processSubLanguage();",
                "      } else {",
                "        processKeywords();",
                "      }",
                "      modeBuffer = '';",
                "    }",
                "",
                "    /**",
                "     * @param {Mode} mode - new mode to start",
                "     */",
                "    function startNewMode(mode) {",
                "      if (mode.className) {",
                "        emitter.openNode(language.classNameAliases[mode.className] || mode.className);",
                "      }",
                "      top = Object.create(mode, { parent: { value: top } });",
                "      return top;",
                "    }",
                "",
                "    /**",
                "     * @param {CompiledMode } mode - the mode to potentially end",
                "     * @param {RegExpMatchArray} match - the latest match",
                "     * @param {string} matchPlusRemainder - match plus remainder of content",
                "     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode",
                "     */",
                "    function endOfMode(mode, match, matchPlusRemainder) {",
                "      let matched = regex.startsWith(mode.endRe, matchPlusRemainder);",
                "",
                "      if (matched) {",
                "        if (mode[\"on:end\"]) {",
                "          const resp = new Response(mode);",
                "          mode[\"on:end\"](match, resp);",
                "          if (resp.ignore) matched = false;",
                "        }",
                "",
                "        if (matched) {",
                "          while (mode.endsParent && mode.parent) {",
                "            mode = mode.parent;",
                "          }",
                "          return mode;",
                "        }",
                "      }",
                "      // even if on:end fires an `ignore` it's still possible",
                "      // that we might trigger the end node because of a parent mode",
                "      if (mode.endsWithParent) {",
                "        return endOfMode(mode.parent, match, matchPlusRemainder);",
                "      }",
                "    }",
                "",
                "    /**",
                "     * Handle matching but then ignoring a sequence of text",
                "     *",
                "     * @param {string} lexeme - string containing full match text",
                "     */",
                "    function doIgnore(lexeme) {",
                "      if (top.matcher.regexIndex === 0) {",
                "        // no more regexs to potentially match here, so we move the cursor forward one",
                "        // space",
                "        modeBuffer += lexeme[0];",
                "        return 1;",
                "      } else {",
                "        // no need to move the cursor, we still have additional regexes to try and",
                "        // match at this very spot",
                "        resumeScanAtSamePosition = true;",
                "        return 0;",
                "      }",
                "    }",
                "",
                "    /**",
                "     * Handle the start of a new potential mode match",
                "     *",
                "     * @param {EnhancedMatch} match - the current match",
                "     * @returns {number} how far to advance the parse cursor",
                "     */",
                "    function doBeginMatch(match) {",
                "      const lexeme = match[0];",
                "      const newMode = match.rule;",
                "",
                "      const resp = new Response(newMode);",
                "      // first internal before callbacks, then the public ones",
                "      const beforeCallbacks = [newMode.__beforeBegin, newMode[\"on:begin\"]];",
                "      for (const cb of beforeCallbacks) {",
                "        if (!cb) continue;",
                "        cb(match, resp);",
                "        if (resp.ignore) return doIgnore(lexeme);",
                "      }",
                "",
                "      if (newMode && newMode.endSameAsBegin) {",
                "        newMode.endRe = regex.escape(lexeme);",
                "      }",
                "",
                "      if (newMode.skip) {",
                "        modeBuffer += lexeme;",
                "      } else {",
                "        if (newMode.excludeBegin) {",
                "          modeBuffer += lexeme;",
                "        }",
                "        processBuffer();",
                "        if (!newMode.returnBegin && !newMode.excludeBegin) {",
                "          modeBuffer = lexeme;",
                "        }",
                "      }",
                "      startNewMode(newMode);",
                "      // if (mode[\"after:begin\"]) {",
                "      //   let resp = new Response(mode);",
                "      //   mode[\"after:begin\"](match, resp);",
                "      // }",
                "      return newMode.returnBegin ? 0 : lexeme.length;",
                "    }",
                "",
                "    /**",
                "     * Handle the potential end of mode",
                "     *",
                "     * @param {RegExpMatchArray} match - the current match",
                "     */",
                "    function doEndMatch(match) {",
                "      const lexeme = match[0];",
                "      const matchPlusRemainder = codeToHighlight.substr(match.index);",
                "",
                "      const endMode = endOfMode(top, match, matchPlusRemainder);",
                "      if (!endMode) { return NO_MATCH; }",
                "",
                "      const origin = top;",
                "      if (origin.skip) {",
                "        modeBuffer += lexeme;",
                "      } else {",
                "        if (!(origin.returnEnd || origin.excludeEnd)) {",
                "          modeBuffer += lexeme;",
                "        }",
                "        processBuffer();",
                "        if (origin.excludeEnd) {",
                "          modeBuffer = lexeme;",
                "        }",
                "      }",
                "      do {",
                "        if (top.className) {",
                "          emitter.closeNode();",
                "        }",
                "        if (!top.skip && !top.subLanguage) {",
                "          relevance += top.relevance;",
                "        }",
                "        top = top.parent;",
                "      } while (top !== endMode.parent);",
                "      if (endMode.starts) {",
                "        if (endMode.endSameAsBegin) {",
                "          endMode.starts.endRe = endMode.endRe;",
                "        }",
                "        startNewMode(endMode.starts);",
                "      }",
                "      return origin.returnEnd ? 0 : lexeme.length;",
                "    }",
                "",
                "    function processContinuations() {",
                "      const list = [];",
                "      for (let current = top; current !== language; current = current.parent) {",
                "        if (current.className) {",
                "          list.unshift(current.className);",
                "        }",
                "      }",
                "      list.forEach(item => emitter.openNode(item));",
                "    }",
                "",
                "    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */",
                "    let lastMatch = {};",
                "",
                "    /**",
                "     *  Process an individual match",
                "     *",
                "     * @param {string} textBeforeMatch - text preceeding the match (since the last match)",
                "     * @param {EnhancedMatch} [match] - the match itself",
                "     */",
                "    function processLexeme(textBeforeMatch, match) {",
                "      const lexeme = match && match[0];",
                "",
                "      // add non-matched text to the current mode buffer",
                "      modeBuffer += textBeforeMatch;",
                "",
                "      if (lexeme == null) {",
                "        processBuffer();",
                "        return 0;",
                "      }",
                "",
                "      // we've found a 0 width match and we're stuck, so we need to advance",
                "      // this happens when we have badly behaved rules that have optional matchers to the degree that",
                "      // sometimes they can end up matching nothing at all",
                "      // Ref: https://github.com/highlightjs/highlight.js/issues/2140",
                "      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {",
                "        // spit the \"skipped\" character that our regex choked on back into the output sequence",
                "        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);",
                "        if (!SAFE_MODE) {",
                "          /** @type {AnnotatedError} */",
                "          const err = new Error('0 width match regex');",
                "          err.languageName = languageName;",
                "          err.badRule = lastMatch.rule;",
                "          throw err;",
                "        }",
                "        return 1;",
                "      }",
                "      lastMatch = match;",
                "",
                "      if (match.type === \"begin\") {",
                "        return doBeginMatch(match);",
                "      } else if (match.type === \"illegal\" && !ignoreIllegals) {",
                "        // illegal match, we do not continue processing",
                "        /** @type {AnnotatedError} */",
                "        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');",
                "        err.mode = top;",
                "        throw err;",
                "      } else if (match.type === \"end\") {",
                "        const processed = doEndMatch(match);",
                "        if (processed !== NO_MATCH) {",
                "          return processed;",
                "        }",
                "      }",
                "",
                "      // edge case for when illegal matches $ (end of line) which is technically",
                "      // a 0 width match but not a begin/end match so it's not caught by the",
                "      // first handler (when ignoreIllegals is true)",
                "      if (match.type === \"illegal\" && lexeme === \"\") {",
                "        // advance so we aren't stuck in an infinite loop",
                "        return 1;",
                "      }",
                "",
                "      // infinite loops are BAD, this is a last ditch catch all. if we have a",
                "      // decent number of iterations yet our index (cursor position in our",
                "      // parsing) still 3x behind our index then something is very wrong",
                "      // so we bail",
                "      if (iterations > 100000 && iterations > match.index * 3) {",
                "        const err = new Error('potential infinite loop, way more iterations than matches');",
                "        throw err;",
                "      }",
                "",
                "      /*",
                "      Why might be find ourselves here?  Only one occasion now.  An end match that was",
                "      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`",
                "      rule sets the end rule to a specific match.  Since the overall mode termination rule that's",
                "      being used to scan the text isn't recompiled that means that any match that LOOKS like",
                "      the end (but is not, because it is not an exact match to the beginning) will",
                "      end up here.  A definite end match, but when `doEndMatch` tries to \"reapply\"",
                "      the end rule and fails to match, we wind up here, and just silently ignore the end.",
                "",
                "      This causes no real harm other than stopping a few times too many.",
                "      */",
                "",
                "      modeBuffer += lexeme;",
                "      return lexeme.length;",
                "    }",
                "",
                "    const language = getLanguage(languageName);",
                "    if (!language) {",
                "      logger.error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));",
                "      throw new Error('Unknown language: \"' + languageName + '\"');",
                "    }",
                "",
                "    const md = compileLanguage(language);",
                "    let result = '';",
                "    /** @type {CompiledMode} */",
                "    let top = continuation || md;",
                "    /** @type Record<string,CompiledMode> */",
                "    const continuations = {}; // keep continuations for sub-languages",
                "    const emitter = new options.__emitter(options);",
                "    processContinuations();",
                "    let modeBuffer = '';",
                "    let relevance = 0;",
                "    let index = 0;",
                "    let iterations = 0;",
                "    let resumeScanAtSamePosition = false;",
                "",
                "    try {",
                "      top.matcher.considerAll();",
                "",
                "      for (;;) {",
                "        iterations++;",
                "        if (resumeScanAtSamePosition) {",
                "          // only regexes not matched previously will now be",
                "          // considered for a potential match",
                "          resumeScanAtSamePosition = false;",
                "        } else {",
                "          top.matcher.considerAll();",
                "        }",
                "        top.matcher.lastIndex = index;",
                "",
                "        const match = top.matcher.exec(codeToHighlight);",
                "        // console.log(\"match\", match[0], match.rule && match.rule.begin)",
                "",
                "        if (!match) break;",
                "",
                "        const beforeMatch = codeToHighlight.substring(index, match.index);",
                "        const processedCount = processLexeme(beforeMatch, match);"
            ]
        }
    }
}