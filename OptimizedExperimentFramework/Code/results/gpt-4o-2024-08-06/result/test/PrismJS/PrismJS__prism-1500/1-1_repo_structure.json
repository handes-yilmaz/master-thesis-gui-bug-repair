{
    ".editorconfig": {},
    ".gitattributes": {},
    ".gitignore": {},
    ".npmignore": {},
    ".travis.yml": {},
    "CHANGELOG.md": {},
    "CNAME": {},
    "LICENSE": {},
    "README.md": {},
    "bower.json": {},
    "code.js": {
        "classes": [],
        "functions": [],
        "text": [
            "(function(){",
            "",
            "if(!document.body.addEventListener) {",
            "\treturn;",
            "}",
            "",
            "$$('[data-src][data-type=\"text/html\"]').forEach(function(element) {",
            "\tvar src = element.getAttribute('data-src'),",
            "\t    html = element.getAttribute('data-type') === 'text/html',",
            "\t    contentProperty = html? 'innerHTML' : 'textContent';",
            "",
            "\t$u.xhr({",
            "\t\turl: src,",
            "\t\tcallback: function(xhr) {",
            "\t\t\ttry {",
            "\t\t\t\telement[contentProperty] = xhr.responseText;",
            "",
            "\t\t\t\t// Run JS",
            "",
            "\t\t\t\t$$('script', element).forEach(function (script) {",
            "\t\t\t\t\tvar after = script.nextSibling, parent = script.parentNode;",
            "\t\t\t\t\tparent.removeChild(script);",
            "\t\t\t\t\tdocument.head.appendChild(script);",
            "\t\t\t\t});",
            "\t\t\t}",
            "\t\t\tcatch (e) {}",
            "\t\t}",
            "\t});",
            "});",
            "",
            "})();",
            "",
            "/**",
            " * Table of contents",
            " */",
            "(function(){",
            "var toc = document.createElement('ol');",
            "",
            "$$('body > section > h1').forEach(function(h1) {",
            "\tvar section = h1.parentNode,",
            "\t    text = h1.textContent,",
            "\t    id = h1.id || section.id;",
            "",
            "\t// Assign id if one does not exist",
            "\tif (!id) {",
            "\t\tid = text.toLowerCase();",
            "",
            "\t\t// Replace spaces with hyphens, only keep first 10 words",
            "\t\tid = id.split(/\\s+/g, 10).join('-');",
            "",
            "\t\t// Remove non-word characters",
            "\t\tid = id.replace(/[^\\w-]/g, '');",
            "",
            "\t\tsection.id = id;",
            "\t}",
            "",
            "\t// Linkify heading text",
            "\tif (h1.children.length === 0) {",
            "\t\th1.innerHTML = '';",
            "",
            "\t\t$u.element.create('a', {",
            "\t\t\tproperties: {",
            "\t\t\t\thref: window.location.pathname + '#' + id",
            "\t\t\t},",
            "\t\t\tcontents: text,",
            "\t\t\tinside: h1",
            "\t\t});",
            "\t}",
            "",
            "\t$u.element.create('li', {",
            "\t\tcontents: {",
            "\t\t\ttag: 'a',",
            "\t\t\tproperties: {",
            "\t\t\t\thref: window.location.pathname + '#' + (h1.id || section.id)",
            "\t\t\t},",
            "\t\t\tcontents: text",
            "\t\t},",
            "\t\tinside: toc",
            "\t});",
            "});",
            "",
            "if (toc.children.length > 0) {",
            "\t$u.element.create('section', {",
            "\t\tproperties: {",
            "\t\t\tid: 'toc'",
            "\t\t},",
            "\t\tcontents: [{",
            "\t\t\ttag: 'h1',",
            "\t\t\tcontents: 'On this page'",
            "\t\t}, toc],",
            "\t\tbefore: $('body > section')",
            "\t});",
            "}",
            "",
            "})();",
            "",
            "// calc()",
            "(function(){",
            "\tif(!window.PrefixFree) return;",
            "",
            "\tif (PrefixFree.functions.indexOf('calc') == -1) {",
            "\t\tvar style = document.createElement('_').style;",
            "\t\tstyle.width = 'calc(1px + 1%)'",
            "",
            "\t\tif(!style.width) {",
            "\t\t\t// calc not supported",
            "\t\t\tvar header = $('header'),",
            "\t\t\t    footer = $('footer');",
            "",
            "\t\t\tfunction calculatePadding() {",
            "\t\t\t\theader.style.padding =",
            "\t\t\t\tfooter.style.padding = '30px ' + (innerWidth/2 - 450) + 'px';",
            "\t\t\t}",
            "",
            "\t\t\taddEventListener('resize', calculatePadding);",
            "\t\t\tcalculatePadding();",
            "\t\t}",
            "\t}",
            "})();",
            "",
            "// setTheme is intentionally global,",
            "// so it can be accessed from download.js",
            "var setTheme;",
            "(function() {",
            "var p = $u.element.create('p', {",
            "\tproperties: {",
            "\t\tid: 'theme'",
            "\t},",
            "\tcontents: {",
            "\t\ttag: 'p',",
            "\t\tcontents: 'Theme:'",
            "\t},",
            "\tafter: '.intro'",
            "});",
            "",
            "var themes = components.themes;",
            "var current = (location.search.match(/theme=([\\w-]+)/) || [])[1];",
            "",
            "if (!(current in themes)) {",
            "\tcurrent = undefined;",
            "}",
            "",
            "if (current === undefined) {",
            "\tvar stored = localStorage.getItem('theme');",
            "",
            "\tcurrent = stored in themes? stored : 'prism';",
            "}",
            "",
            "setTheme = function (id) {",
            "\tvar link = $$('link[href^=\"themes/prism\"]')[0];",
            "",
            "\tlink.href = themes.meta.path.replace(/\\{id}/g, id);",
            "\tlocalStorage.setItem('theme', id);",
            "};",
            "",
            "for (var id in themes) {",
            "",
            "\tif (id === 'meta') {",
            "\t\tcontinue;",
            "\t}",
            "",
            "\t$u.element.create('input', {",
            "\t\tproperties: {",
            "\t\t\ttype: 'radio',",
            "\t\t\tname: \"theme\",",
            "\t\t\tid: 'theme=' + id,",
            "\t\t\tchecked: current === id,",
            "\t\t\tvalue: id,",
            "\t\t\tonclick: function () {",
            "\t\t\t\tsetTheme(this.value);",
            "\t\t\t}",
            "\t\t},",
            "\t\tinside: p",
            "\t});",
            "",
            "\t$u.element.create('label', {",
            "\t\tproperties: {",
            "\t\t\thtmlFor: 'theme=' + id",
            "\t\t},",
            "\t\tcontents: themes[id].title || themes[id],",
            "\t\tinside: p",
            "\t});",
            "}",
            "",
            "setTheme(current);",
            "})();",
            "",
            "(function(){",
            "",
            "function listPlugins(ul) {",
            "\tfor (var id in components.plugins) {",
            "\t\tif (id == 'meta') {",
            "\t\t\tcontinue;",
            "\t\t}",
            "",
            "\t\tvar plugin = components.plugins[id];",
            "",
            "\t\t$u.element.create('li', {",
            "\t\t\tcontents: {",
            "\t\t\t\ttag: 'a',",
            "\t\t\t\tprop: {",
            "\t\t\t\t\thref: 'plugins/' + id",
            "\t\t\t\t},",
            "\t\t\t\tcontents: plugin.title || plugin",
            "\t\t\t},",
            "\t\t\tinside: ul",
            "\t\t});",
            "\t}",
            "}",
            "",
            "$$('.plugin-list').forEach(listPlugins);",
            "",
            "})();"
        ]
    },
    "components.js": {
        "classes": [],
        "functions": [],
        "text": [
            "var components = {\"core\":{\"meta\":{\"path\":\"components/prism-core.js\",\"option\":\"mandatory\"},\"core\":\"Core\"},\"themes\":{\"meta\":{\"path\":\"themes/{id}.css\",\"link\":\"index.html?theme={id}\",\"exclusive\":true},\"prism\":{\"title\":\"Default\",\"option\":\"default\"},\"prism-dark\":\"Dark\",\"prism-funky\":\"Funky\",\"prism-okaidia\":{\"title\":\"Okaidia\",\"owner\":\"ocodia\"},\"prism-twilight\":{\"title\":\"Twilight\",\"owner\":\"remybach\"},\"prism-coy\":{\"title\":\"Coy\",\"owner\":\"tshedor\"},\"prism-solarizedlight\":{\"title\":\"Solarized Light\",\"owner\":\"hectormatos2011 \"},\"prism-tomorrow\":{\"title\":\"Tomorrow Night\",\"owner\":\"Rosey\"}},\"languages\":{\"meta\":{\"path\":\"components/prism-{id}\",\"noCSS\":true,\"examplesPath\":\"examples/prism-{id}\",\"addCheckAll\":true},\"markup\":{\"title\":\"Markup\",\"alias\":[\"html\",\"xml\",\"svg\",\"mathml\"],\"aliasTitles\":{\"html\":\"HTML\",\"xml\":\"XML\",\"svg\":\"SVG\",\"mathml\":\"MathML\"},\"option\":\"default\"},\"css\":{\"title\":\"CSS\",\"option\":\"default\",\"peerDependencies\":\"markup\"},\"clike\":{\"title\":\"C-like\",\"option\":\"default\",\"overrideExampleHeader\":true},\"javascript\":{\"title\":\"JavaScript\",\"require\":\"clike\",\"peerDependencies\":\"markup\",\"alias\":\"js\",\"option\":\"default\"},\"abap\":{\"title\":\"ABAP\",\"owner\":\"dellagustin\"},\"actionscript\":{\"title\":\"ActionScript\",\"require\":\"javascript\",\"peerDependencies\":\"markup\",\"owner\":\"Golmote\"},\"ada\":{\"title\":\"Ada\",\"owner\":\"Lucretia\"},\"apacheconf\":{\"title\":\"Apache Configuration\",\"owner\":\"GuiTeK\"},\"apl\":{\"title\":\"APL\",\"owner\":\"ngn\"},\"applescript\":{\"title\":\"AppleScript\",\"owner\":\"Golmote\"},\"arduino\":{\"title\":\"Arduino\",\"require\":\"cpp\",\"owner\":\"eisbehr-\"},\"arff\":{\"title\":\"ARFF\",\"owner\":\"Golmote\"},\"asciidoc\":{\"title\":\"AsciiDoc\",\"owner\":\"Golmote\"},\"asm6502\":{\"title\":\"6502 Assembly\",\"owner\":\"kzurawel\"},\"aspnet\":{\"title\":\"ASP.NET (C#)\",\"require\":[\"markup\",\"csharp\"],\"owner\":\"nauzilus\"},\"autohotkey\":{\"title\":\"AutoHotkey\",\"owner\":\"aviaryan\"},\"autoit\":{\"title\":\"AutoIt\",\"owner\":\"Golmote\"},\"bash\":{\"title\":\"Bash\",\"owner\":\"zeitgeist87\"},\"basic\":{\"title\":\"BASIC\",\"owner\":\"Golmote\"},\"batch\":{\"title\":\"Batch\",\"alias\":\"shell\",\"owner\":\"Golmote\"},\"bison\":{\"title\":\"Bison\",\"require\":\"c\",\"owner\":\"Golmote\"},\"brainfuck\":{\"title\":\"Brainfuck\",\"owner\":\"Golmote\"},\"bro\":{\"title\":\"Bro\",\"owner\":\"wayward710\"},\"c\":{\"title\":\"C\",\"require\":\"clike\",\"owner\":\"zeitgeist87\"},\"csharp\":{\"title\":\"C#\",\"require\":\"clike\",\"alias\":\"dotnet\",\"owner\":\"mvalipour\"},\"cpp\":{\"title\":\"C++\",\"require\":\"c\",\"owner\":\"zeitgeist87\"},\"coffeescript\":{\"title\":\"CoffeeScript\",\"require\":\"javascript\",\"owner\":\"R-osey\"},\"clojure\":{\"title\":\"Clojure\",\"owner\":\"troglotit\"},\"crystal\":{\"title\":\"Crystal\",\"require\":\"ruby\",\"owner\":\"MakeNowJust\"},\"csp\":{\"title\":\"Content-Security-Policy\",\"owner\":\"ScottHelme\"},\"css-extras\":{\"title\":\"CSS Extras\",\"require\":\"css\",\"owner\":\"milesj\"},\"d\":{\"title\":\"D\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"dart\":{\"title\":\"Dart\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"diff\":{\"title\":\"Diff\",\"owner\":\"uranusjr\"},\"django\":{\"title\":\"Django/Jinja2\",\"require\":\"markup\",\"peerDependencies\":[\"css\",\"javascript\"],\"alias\":\"jinja2\",\"owner\":\"romanvm\"},\"docker\":{\"title\":\"Docker\",\"owner\":\"JustinBeckwith\"},\"eiffel\":{\"title\":\"Eiffel\",\"owner\":\"Conaclos\"},\"elixir\":{\"title\":\"Elixir\",\"owner\":\"Golmote\"},\"elm\":{\"title\":\"Elm\",\"owner\":\"zwilias\"},\"erb\":{\"title\":\"ERB\",\"require\":[\"ruby\",\"markup-templating\"],\"owner\":\"Golmote\"},\"erlang\":{\"title\":\"Erlang\",\"owner\":\"Golmote\"},\"fsharp\":{\"title\":\"F#\",\"require\":\"clike\",\"owner\":\"simonreynolds7\"},\"flow\":{\"title\":\"Flow\",\"require\":\"javascript\",\"owner\":\"Golmote\"},\"fortran\":{\"title\":\"Fortran\",\"owner\":\"Golmote\"},\"gedcom\":{\"title\":\"GEDCOM\",\"owner\":\"Golmote\"},\"gherkin\":{\"title\":\"Gherkin\",\"owner\":\"hason\"},\"git\":{\"title\":\"Git\",\"owner\":\"lgiraudel\"},\"glsl\":{\"title\":\"GLSL\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"go\":{\"title\":\"Go\",\"require\":\"clike\",\"owner\":\"arnehormann\"},\"graphql\":{\"title\":\"GraphQL\",\"owner\":\"Golmote\"},\"groovy\":{\"title\":\"Groovy\",\"require\":\"clike\",\"owner\":\"robfletcher\"},\"haml\":{\"title\":\"Haml\",\"require\":\"ruby\",\"peerDependencies\":[\"css\",\"coffeescript\",\"erb\",\"javascript\",\"less\",\"markdown\",\"ruby\",\"scss\",\"textile\"],\"owner\":\"Golmote\"},\"handlebars\":{\"title\":\"Handlebars\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"haskell\":{\"title\":\"Haskell\",\"owner\":\"bholst\"},\"haxe\":{\"title\":\"Haxe\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"http\":{\"title\":\"HTTP\",\"peerDependencies\":[\"javascript\",\"markup\"],\"owner\":\"danielgtaylor\"},\"hpkp\":{\"title\":\"HTTP Public-Key-Pins\",\"owner\":\"ScottHelme\"},\"hsts\":{\"title\":\"HTTP Strict-Transport-Security\",\"owner\":\"ScottHelme\"},\"ichigojam\":{\"title\":\"IchigoJam\",\"owner\":\"BlueCocoa\"},\"icon\":{\"title\":\"Icon\",\"owner\":\"Golmote\"},\"inform7\":{\"title\":\"Inform 7\",\"owner\":\"Golmote\"},\"ini\":{\"title\":\"Ini\",\"owner\":\"aviaryan\"},\"io\":{\"title\":\"Io\",\"owner\":\"AlesTsurko\"},\"j\":{\"title\":\"J\",\"owner\":\"Golmote\"},\"java\":{\"title\":\"Java\",\"require\":\"clike\",\"owner\":\"sherblot\"},\"jolie\":{\"title\":\"Jolie\",\"require\":\"clike\",\"owner\":\"thesave\"},\"json\":{\"title\":\"JSON\",\"owner\":\"CupOfTea696\"},\"julia\":{\"title\":\"Julia\",\"owner\":\"cdagnino\"},\"keyman\":{\"title\":\"Keyman\",\"owner\":\"mcdurdin\"},\"kotlin\":{\"title\":\"Kotlin\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"latex\":{\"title\":\"LaTeX\",\"owner\":\"japborst\"},\"less\":{\"title\":\"Less\",\"require\":\"css\",\"owner\":\"Golmote\"},\"liquid\":{\"title\":\"Liquid\",\"owner\":\"cinhtau\"},\"lisp\":{\"title\":\"Lisp\",\"owner\":\"JuanCaicedo\",\"alias\":[\"emacs\",\"elisp\",\"emacs-lisp\"]},\"livescript\":{\"title\":\"LiveScript\",\"owner\":\"Golmote\"},\"lolcode\":{\"title\":\"LOLCODE\",\"owner\":\"Golmote\"},\"lua\":{\"title\":\"Lua\",\"owner\":\"Golmote\"},\"makefile\":{\"title\":\"Makefile\",\"owner\":\"Golmote\"},\"markdown\":{\"title\":\"Markdown\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"markup-templating\":{\"title\":\"Markup templating\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"matlab\":{\"title\":\"MATLAB\",\"owner\":\"Golmote\"},\"mel\":{\"title\":\"MEL\",\"owner\":\"Golmote\"},\"mizar\":{\"title\":\"Mizar\",\"owner\":\"Golmote\"},\"monkey\":{\"title\":\"Monkey\",\"owner\":\"Golmote\"},\"n4js\":{\"title\":\"N4JS\",\"require\":\"javascript\",\"owner\":\"bsmith-n4\"},\"nasm\":{\"title\":\"NASM\",\"owner\":\"rbmj\"},\"nginx\":{\"title\":\"nginx\",\"owner\":\"westonganger\",\"require\":\"clike\"},\"nim\":{\"title\":\"Nim\",\"owner\":\"Golmote\"},\"nix\":{\"title\":\"Nix\",\"owner\":\"Golmote\"},\"nsis\":{\"title\":\"NSIS\",\"owner\":\"idleberg\"},\"objectivec\":{\"title\":\"Objective-C\",\"require\":\"c\",\"owner\":\"uranusjr\"},\"ocaml\":{\"title\":\"OCaml\",\"owner\":\"Golmote\"},\"opencl\":{\"title\":\"OpenCL\",\"require\":\"cpp\",\"peerDependencies\":[\"c\",\"cpp\"],\"overrideExampleHeader\":true,\"owner\":\"Milania1\"},\"oz\":{\"title\":\"Oz\",\"owner\":\"Golmote\"},\"parigp\":{\"title\":\"PARI/GP\",\"owner\":\"Golmote\"},\"parser\":{\"title\":\"Parser\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"pascal\":{\"title\":\"Pascal\",\"alias\":\"objectpascal\",\"aliasTitles\":{\"objectpascal\":\"Object Pascal\"},\"owner\":\"Golmote\"},\"perl\":{\"title\":\"Perl\",\"owner\":\"Golmote\"},\"php\":{\"title\":\"PHP\",\"require\":[\"clike\",\"markup-templating\"],\"owner\":\"milesj\"},\"php-extras\":{\"title\":\"PHP Extras\",\"require\":\"php\",\"owner\":\"milesj\"},\"plsql\":{\"title\":\"PL/SQL\",\"require\":\"sql\",\"owner\":\"Golmote\"},\"powershell\":{\"title\":\"PowerShell\",\"owner\":\"nauzilus\"},\"processing\":{\"title\":\"Processing\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"prolog\":{\"title\":\"Prolog\",\"owner\":\"Golmote\"},\"properties\":{\"title\":\".properties\",\"owner\":\"Golmote\"},\"protobuf\":{\"title\":\"Protocol Buffers\",\"require\":\"clike\",\"owner\":\"just-boris\"},\"pug\":{\"title\":\"Pug\",\"require\":\"javascript\",\"peerDependencies\":[\"coffeescript\",\"ejs\",\"handlebars\",\"hogan\",\"less\",\"livescript\",\"markdown\",\"mustache\",\"plates\",\"scss\",\"stylus\",\"swig\"],\"owner\":\"Golmote\"},\"puppet\":{\"title\":\"Puppet\",\"owner\":\"Golmote\"},\"pure\":{\"title\":\"Pure\",\"peerDependencies\":[\"c\",\"cpp\",\"fortran\",\"ats\",\"dsp\"],\"owner\":\"Golmote\"},\"python\":{\"title\":\"Python\",\"owner\":\"multipetros\"},\"q\":{\"title\":\"Q (kdb+ database)\",\"owner\":\"Golmote\"},\"qore\":{\"title\":\"Qore\",\"require\":\"clike\",\"owner\":\"temnroegg\"},\"r\":{\"title\":\"R\",\"owner\":\"Golmote\"},\"jsx\":{\"title\":\"React JSX\",\"require\":[\"markup\",\"javascript\"],\"owner\":\"vkbansal\"},\"tsx\":{\"title\":\"React TSX\",\"require\":[\"jsx\",\"typescript\"]},\"renpy\":{\"title\":\"Ren'py\",\"owner\":\"HyuchiaDiego\"},\"reason\":{\"title\":\"Reason\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"rest\":{\"title\":\"reST (reStructuredText)\",\"owner\":\"Golmote\"},\"rip\":{\"title\":\"Rip\",\"owner\":\"ravinggenius\"},\"roboconf\":{\"title\":\"Roboconf\",\"owner\":\"Golmote\"},\"ruby\":{\"title\":\"Ruby\",\"require\":\"clike\",\"owner\":\"samflores\"},\"rust\":{\"title\":\"Rust\",\"owner\":\"Golmote\"},\"sas\":{\"title\":\"SAS\",\"owner\":\"Golmote\"},\"sass\":{\"title\":\"Sass (Sass)\",\"require\":\"css\",\"owner\":\"Golmote\"},\"scss\":{\"title\":\"Sass (Scss)\",\"require\":\"css\",\"owner\":\"MoOx\"},\"scala\":{\"title\":\"Scala\",\"require\":\"java\",\"owner\":\"jozic\"},\"scheme\":{\"title\":\"Scheme\",\"owner\":\"bacchus123\"},\"smalltalk\":{\"title\":\"Smalltalk\",\"owner\":\"Golmote\"},\"smarty\":{\"title\":\"Smarty\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"sql\":{\"title\":\"SQL\",\"owner\":\"multipetros\"},\"soy\":{\"title\":\"Soy (Closure Template)\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"stylus\":{\"title\":\"Stylus\",\"owner\":\"vkbansal\"},\"swift\":{\"title\":\"Swift\",\"require\":\"clike\",\"owner\":\"chrischares\"},\"tap\":{\"title\":\"TAP\",\"owner\":\"isaacs\",\"require\":\"yaml\"},\"tcl\":{\"title\":\"Tcl\",\"owner\":\"PeterChaplin\"},\"textile\":{\"title\":\"Textile\",\"require\":\"markup\",\"peerDependencies\":\"css\",\"owner\":\"Golmote\"},\"tt2\":{\"title\":\"Template Toolkit 2\",\"require\":[\"clike\",\"markup-templating\"],\"owner\":\"gflohr\"},\"twig\":{\"title\":\"Twig\",\"require\":\"markup\",\"owner\":\"brandonkelly\"},\"typescript\":{\"title\":\"TypeScript\",\"require\":\"javascript\",\"alias\":\"ts\",\"owner\":\"vkbansal\"},\"vbnet\":{\"title\":\"VB.Net\",\"require\":\"basic\",\"owner\":\"Bigsby\"},\"velocity\":{\"title\":\"Velocity\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"verilog\":{\"title\":\"Verilog\",\"owner\":\"a-rey\"},\"vhdl\":{\"title\":\"VHDL\",\"owner\":\"a-rey\"},\"vim\":{\"title\":\"vim\",\"owner\":\"westonganger\"},\"visual-basic\":{\"title\":\"Visual Basic\",\"owner\":\"Golmote\",\"alias\":\"vb\"},\"wasm\":{\"title\":\"WebAssembly\",\"owner\":\"Golmote\"},\"wiki\":{\"title\":\"Wiki markup\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"xeora\":{\"title\":\"Xeora\",\"require\":\"markup\",\"owner\":\"freakmaxi\"},\"xojo\":{\"title\":\"Xojo (REALbasic)\",\"owner\":\"Golmote\"},\"xquery\":{\"title\":\"XQuery\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"yaml\":{\"title\":\"YAML\",\"owner\":\"hason\"}},\"plugins\":{\"meta\":{\"path\":\"plugins/{id}/prism-{id}\",\"link\":\"plugins/{id}/\"},\"line-highlight\":\"Line Highlight\",\"line-numbers\":{\"title\":\"Line Numbers\",\"owner\":\"kuba-kubula\"},\"show-invisibles\":\"Show Invisibles\",\"autolinker\":\"Autolinker\",\"wpd\":\"WebPlatform Docs\",\"custom-class\":{\"title\":\"Custom Class\",\"owner\":\"dvkndn\",\"noCSS\":true},\"file-highlight\":{\"title\":\"File Highlight\",\"noCSS\":true},\"show-language\":{\"title\":\"Show Language\",\"owner\":\"nauzilus\",\"noCSS\":true,\"require\":\"toolbar\"},\"jsonp-highlight\":{\"title\":\"JSONP Highlight\",\"noCSS\":true,\"owner\":\"nauzilus\"},\"highlight-keywords\":{\"title\":\"Highlight Keywords\",\"owner\":\"vkbansal\",\"noCSS\":true},\"remove-initial-line-feed\":{\"title\":\"Remove initial line feed\",\"owner\":\"Golmote\",\"noCSS\":true},\"previewers\":{\"title\":\"Previewers\",\"owner\":\"Golmote\"},\"autoloader\":{\"title\":\"Autoloader\",\"owner\":\"Golmote\",\"noCSS\":true},\"keep-markup\":{\"title\":\"Keep Markup\",\"owner\":\"Golmote\",\"after\":\"normalize-whitespace\",\"noCSS\":true},\"command-line\":{\"title\":\"Command Line\",\"owner\":\"chriswells0\"},\"unescaped-markup\":\"Unescaped Markup\",\"normalize-whitespace\":{\"title\":\"Normalize Whitespace\",\"owner\":\"zeitgeist87\",\"after\":\"unescaped-markup\",\"noCSS\":true},\"data-uri-highlight\":{\"title\":\"Data-URI Highlight\",\"owner\":\"Golmote\",\"noCSS\":true},\"toolbar\":{\"title\":\"Toolbar\",\"owner\":\"mAAdhaTTah\"},\"copy-to-clipboard\":{\"title\":\"Copy to Clipboard Button\",\"owner\":\"mAAdhaTTah\",\"require\":\"toolbar\",\"noCSS\":true}}};",
            "if (typeof module !== 'undefined' && module.exports) { module.exports = components; }"
        ]
    },
    "components.json": {},
    "composer.json": {},
    "download.html": {},
    "download.js": {
        "classes": [],
        "functions": [],
        "text": [
            "/**",
            " * Manage downloads",
            " */",
            "",
            "(function() {",
            "",
            "var cache = {};",
            "var form = $('form');",
            "var minified = true;",
            "",
            "var dependencies = {};",
            "",
            "var treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';",
            "var treePromise = new Promise(function(resolve) {",
            "\t$u.xhr({",
            "\t\turl: treeURL,",
            "\t\tcallback: function(xhr) {",
            "\t\t\tif (xhr.status < 400) {",
            "\t\t\t\tresolve(JSON.parse(xhr.responseText).tree);",
            "\t\t\t}",
            "\t\t}",
            "\t});",
            "});",
            "",
            "var hstr = window.location.hash.match(/(?:languages|plugins)=[-+\\w]+|themes=[-\\w]+/g);",
            "if (hstr) {",
            "\thstr.forEach(function(str) {",
            "\t\tvar kv = str.split('=', 2),",
            "\t\t    category = kv[0],",
            "\t\t    ids = kv[1].split('+');",
            "\t\tif (category !== 'meta' && category !== 'core' && components[category]) {",
            "\t\t\tfor (var id in components[category]) {",
            "\t\t\t\tif (components[category][id].option) {",
            "\t\t\t\t\tdelete components[category][id].option;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\tif (category === 'themes' && ids.length) {",
            "\t\t\t\tvar themeInput = $('#theme input[value=\"' + ids[0] + '\"]');",
            "\t\t\t\tif (themeInput) {",
            "\t\t\t\t\tthemeInput.checked = true;",
            "\t\t\t\t}",
            "\t\t\t\tsetTheme(ids[0]);",
            "\t\t\t}",
            "\t\t\tvar makeDefault = function (id) {",
            "\t\t\t\tif (id !== 'meta') {",
            "\t\t\t\t\tif (components[category][id]) {",
            "\t\t\t\t\t\tif (components[category][id].option !== 'default') {",
            "\t\t\t\t\t\t\tif (typeof components[category][id] === 'string') {",
            "\t\t\t\t\t\t\t\tcomponents[category][id] = { title: components[category][id] }",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\tcomponents[category][id].option = 'default';",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\tif (components[category][id].require) {",
            "\t\t\t\t\t\t\tvar deps = components[category][id].require;",
            "\t\t\t\t\t\t\tif ($u.type(deps) !== 'array') {",
            "\t\t\t\t\t\t\t\tdeps = [deps];",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\tdeps.forEach(makeDefault);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t};",
            "\t\t\tids.forEach(makeDefault);",
            "\t\t}",
            "\t});",
            "}",
            "",
            "// Stay compatible with old querystring feature",
            "var qstr = window.location.search.match(/(?:languages|plugins)=[-+\\w]+|themes=[-\\w]+/g);",
            "if (qstr && !hstr) {",
            "\twindow.location.hash = window.location.search.replace(/^\\?/, '');",
            "\twindow.location.search = '';",
            "}",
            "",
            "var storedTheme = localStorage.getItem('theme');",
            "",
            "for (var category in components) {",
            "\tvar all = components[category];",
            "",
            "\tall.meta.section = $u.element.create('section', {",
            "\t\tclassName: 'options',",
            "\t\tid: 'category-' + category,",
            "\t\tcontents: {",
            "\t\t\ttag: 'h1',",
            "\t\t\tcontents: category.charAt(0).toUpperCase() + category.slice(1)",
            "\t\t},",
            "\t\tinside: '#components'",
            "\t});",
            "",
            "\tif (all.meta.addCheckAll) {",
            "\t\t$u.element.create('label', {",
            "\t\t\tattributes: {",
            "\t\t\t\t'data-id': 'check-all-' + category",
            "\t\t\t},",
            "\t\t\tcontents: [",
            "\t\t\t\t{",
            "\t\t\t\t\ttag: 'input',",
            "\t\t\t\t\tproperties: {",
            "\t\t\t\t\t\ttype: 'checkbox',",
            "\t\t\t\t\t\tname: 'check-all-' + category,",
            "\t\t\t\t\t\tvalue: '',",
            "\t\t\t\t\t\tchecked: false,",
            "\t\t\t\t\t\tonclick: (function(category, all){",
            "\t\t\t\t\t\t\treturn function () {",
            "\t\t\t\t\t\t\t\tvar checkAll = this;",
            "\t\t\t\t\t\t\t\t$$('input[name=\"download-' + category + '\"]').forEach(function(input) {",
            "\t\t\t\t\t\t\t\t\tall[input.value].enabled = input.checked = checkAll.checked;",
            "\t\t\t\t\t\t\t\t});",
            "",
            "\t\t\t\t\t\t\t\tupdate(category);",
            "\t\t\t\t\t\t\t};",
            "\t\t\t\t\t\t})(category, all)",
            "\t\t\t\t\t}",
            "\t\t\t\t},",
            "\t\t\t\t'Select/unselect all'",
            "\t\t\t],",
            "\t\t\tinside: all.meta.section",
            "\t\t});",
            "\t}",
            "",
            "\tfor (var id in all) {",
            "\t\tif(id === 'meta') {",
            "\t\t\tcontinue;",
            "\t\t}",
            "",
            "\t\tvar checked = false, disabled = false;",
            "\t\tvar option = all[id].option || all.meta.option;",
            "",
            "\t\tswitch (option) {",
            "\t\t\tcase 'mandatory': disabled = true; // fallthrough",
            "\t\t\tcase 'default': checked = true;",
            "\t\t}",
            "\t\tif (category === 'themes' && storedTheme) {",
            "\t\t\tchecked = id === storedTheme;",
            "\t\t}",
            "",
            "\t\tvar filepath = all.meta.path.replace(/\\{id}/g, id);",
            "",
            "\t\tvar info = all[id] = {",
            "\t\t\ttitle: all[id].title || all[id],",
            "\t\t\tnoCSS: all[id].noCSS || all.meta.noCSS,",
            "\t\t\tnoJS: all[id].noJS || all.meta.noJS,",
            "\t\t\tenabled: checked,",
            "\t\t\trequire: $u.type(all[id].require) === 'string' ? [all[id].require] : all[id].require,",
            "\t\t\tafter: $u.type(all[id].after) === 'string' ? [all[id].after] : all[id].after,",
            "\t\t\tpeerDependencies: $u.type(all[id].peerDependencies) === 'string' ? [all[id].peerDependencies] : all[id].peerDependencies,",
            "\t\t\towner: all[id].owner,",
            "\t\t\tfiles: {",
            "\t\t\t\tminified: {",
            "\t\t\t\t\tpaths: [],",
            "\t\t\t\t\tsize: 0",
            "\t\t\t\t},",
            "\t\t\t\tdev: {",
            "\t\t\t\t\tpaths: [],",
            "\t\t\t\t\tsize: 0",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t};",
            "",
            "\t\tif (info.require) {",
            "\t\t\tinfo.require.forEach(function (v) {",
            "\t\t\t\tdependencies[v] = (dependencies[v] || []).concat(id);",
            "\t\t\t});",
            "\t\t}",
            "",
            "\t\tif (!all[id].noJS && !/\\.css$/.test(filepath)) {",
            "\t\t\tinfo.files.minified.paths.push(filepath.replace(/(\\.js)?$/, '.min.js'));",
            "\t\t\tinfo.files.dev.paths.push(filepath.replace(/(\\.js)?$/, '.js'));",
            "\t\t}",
            "",
            "",
            "\t\tif ((!all[id].noCSS && !/\\.js$/.test(filepath)) || /\\.css$/.test(filepath)) {",
            "\t\t\tvar cssFile = filepath.replace(/(\\.css)?$/, '.css');",
            "",
            "\t\t\tinfo.files.minified.paths.push(cssFile);",
            "\t\t\tinfo.files.dev.paths.push(cssFile);",
            "\t\t}",
            "",
            "\t\tvar label = $u.element.create('label', {",
            "\t\t\tattributes: {",
            "\t\t\t\t'data-id': id",
            "\t\t\t},",
            "\t\t\tcontents: [",
            "\t\t\t\t{",
            "\t\t\t\t\ttag: 'input',",
            "\t\t\t\t\tproperties: {",
            "\t\t\t\t\t\ttype: all.meta.exclusive? 'radio' : 'checkbox',",
            "\t\t\t\t\t\tname: 'download-' + category,",
            "\t\t\t\t\t\tvalue: id,",
            "\t\t\t\t\t\tchecked: checked,",
            "\t\t\t\t\t\tdisabled: disabled,",
            "\t\t\t\t\t\tonclick: (function(id, category, all){",
            "\t\t\t\t\t\t\treturn function () {",
            "\t\t\t\t\t\t\t\t$$('input[name=\"' + this.name + '\"]').forEach(function(input) {",
            "\t\t\t\t\t\t\t\t\tall[input.value].enabled = input.checked;",
            "\t\t\t\t\t\t\t\t});",
            "",
            "\t\t\t\t\t\t\t\tif (all[id].require && this.checked) {",
            "\t\t\t\t\t\t\t\t\tall[id].require.forEach(function(v) {",
            "\t\t\t\t\t\t\t\t\t\tvar input = $('label[data-id=\"' + v + '\"] > input');",
            "\t\t\t\t\t\t\t\t\t\tinput.checked = true;",
            "",
            "\t\t\t\t\t\t\t\t\t\tinput.onclick();",
            "\t\t\t\t\t\t\t\t\t});",
            "\t\t\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\t\t\tif (dependencies[id] && !this.checked) { // It’s required by others",
            "\t\t\t\t\t\t\t\t\tdependencies[id].forEach(function(dependent) {",
            "\t\t\t\t\t\t\t\t\t\tvar input = $('label[data-id=\"' + dependent + '\"] > input');",
            "\t\t\t\t\t\t\t\t\t\tinput.checked = false;",
            "",
            "\t\t\t\t\t\t\t\t\t\tinput.onclick();",
            "\t\t\t\t\t\t\t\t\t});",
            "\t\t\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\t\t\tupdate(category, id);",
            "\t\t\t\t\t\t\t};",
            "\t\t\t\t\t\t})(id, category, all)",
            "\t\t\t\t\t}",
            "\t\t\t\t},",
            "\t\t\t\tall.meta.link? {",
            "\t\t\t\t\ttag: 'a',",
            "\t\t\t\t\tproperties: {",
            "\t\t\t\t\t\thref: all.meta.link.replace(/\\{id}/g, id),",
            "\t\t\t\t\t\tclassName: 'name'",
            "\t\t\t\t\t},",
            "\t\t\t\t\tcontents: info.title",
            "\t\t\t\t} : {",
            "\t\t\t\t\ttag: 'span',",
            "\t\t\t\t\tproperties: {",
            "\t\t\t\t\t\tclassName: 'name'",
            "\t\t\t\t\t},",
            "\t\t\t\t\tcontents: info.title",
            "\t\t\t\t},",
            "\t\t\t\t' ',",
            "\t\t\t\tall[id].owner? {",
            "\t\t\t\t\ttag: 'a',",
            "\t\t\t\t\tproperties: {",
            "\t\t\t\t\t\thref: 'https://github.com/' + all[id].owner,",
            "\t\t\t\t\t\tclassName: 'owner',",
            "\t\t\t\t\t\ttarget: '_blank'",
            "\t\t\t\t\t},",
            "\t\t\t\t\tcontents: all[id].owner",
            "\t\t\t\t} : ' ',",
            "\t\t\t\t{",
            "\t\t\t\t\ttag: 'strong',",
            "\t\t\t\t\tclassName: 'filesize'",
            "\t\t\t\t}",
            "\t\t\t],",
            "\t\t\tinside: all.meta.section",
            "\t\t});",
            "",
            "\t\t// Add click events on main theme selector too.",
            "\t\t(function (label) {",
            "\t\t\tif (category === 'themes') {",
            "\t\t\t\tvar themeInput = $('#theme input[value=\"' + id + '\"]');",
            "\t\t\t\tvar input = $('input', label);",
            "\t\t\t\tif (themeInput) {",
            "\t\t\t\t\tvar themeInputOnclick = themeInput.onclick;",
            "\t\t\t\t\tthemeInput.onclick = function () {",
            "\t\t\t\t\t\tinput.checked = true;",
            "\t\t\t\t\t\tinput.onclick();",
            "\t\t\t\t\t\tthemeInputOnclick && themeInputOnclick.call(themeInput);",
            "\t\t\t\t\t};",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}(label));",
            "\t}",
            "}",
            "",
            "form.elements.compression[0].onclick =",
            "form.elements.compression[1].onclick = function() {",
            "\tminified = !!+this.value;",
            "",
            "\tgetFilesSizes();",
            "};",
            "",
            "function getFileSize(filepath) {",
            "\treturn treePromise.then(function(tree) {",
            "\t\tfor(var i=0, l=tree.length; i<l; i++) {",
            "\t\t\tif(tree[i].path === filepath) {",
            "\t\t\t\treturn tree[i].size;",
            "\t\t\t}",
            "\t\t}",
            "\t});",
            "}",
            "",
            "function getFilesSizes() {",
            "\tfor (var category in components) {",
            "\t\tvar all = components[category];",
            "",
            "\t\tfor (var id in all) {",
            "\t\t\tif(id === 'meta') {",
            "\t\t\t\tcontinue;",
            "\t\t\t}",
            "",
            "\t\t\tvar distro = all[id].files[minified? 'minified' : 'dev'],",
            "\t\t\t    files = distro.paths;",
            "",
            "\t\t\tfiles.forEach(function (filepath) {",
            "\t\t\t\tvar file = cache[filepath] = cache[filepath] || {};",
            "",
            "\t\t\t\tif(!file.size) {",
            "",
            "\t\t\t\t\t(function(category, id) {",
            "\t\t\t\t\tgetFileSize(filepath).then(function(size) {",
            "\t\t\t\t\t\tif(size) {",
            "\t\t\t\t\t\t\tfile.size = size;",
            "\t\t\t\t\t\t\tdistro.size += file.size;",
            "",
            "\t\t\t\t\t\t\tupdate(category, id);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t});",
            "\t\t\t\t\t}(category, id));",
            "\t\t\t\t}",
            "\t\t\t\telse {",
            "\t\t\t\t\tupdate(category, id);",
            "\t\t\t\t}",
            "\t\t\t});",
            "\t\t}",
            "\t}",
            "}",
            "",
            "getFilesSizes();",
            "",
            "function getFileContents(filepath) {",
            "\treturn new Promise(function(resolve, reject) {",
            "\t\t$u.xhr({",
            "\t\t\turl: filepath,",
            "\t\t\tcallback: function(xhr) {",
            "\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
            "\t\t\t\t\tresolve(xhr.responseText);",
            "\t\t\t\t} else {",
            "\t\t\t\t\treject();",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t});",
            "\t});",
            "}",
            "",
            "function prettySize(size) {",
            "\treturn Math.round(100 * size / 1024)/100 + 'KB';",
            "}",
            "",
            "function update(updatedCategory, updatedId){",
            "\t// Update total size",
            "\tvar total = {js: 0, css: 0}, updated = {js: 0, css: 0};",
            "",
            "\tfor (var category in components) {",
            "\t\tvar all = components[category];",
            "\t\tvar allChecked = true;",
            "",
            "\t\tfor (var id in all) {",
            "\t\t\tvar info = all[id];",
            "",
            "\t\t\tif (info.enabled || id == updatedId) {",
            "\t\t\t\tvar distro = info.files[minified? 'minified' : 'dev'];",
            "",
            "\t\t\t\tdistro.paths.forEach(function(path) {",
            "\t\t\t\t\tif (cache[path]) {",
            "\t\t\t\t\t\tvar file = cache[path];",
            "",
            "\t\t\t\t\t\tvar type = path.match(/\\.(\\w+)$/)[1],",
            "\t\t\t\t\t\t    size = file.size || 0;",
            "",
            "\t\t\t\t\t\tif (info.enabled) {",
            "",
            "\t\t\t\t\t\t\tif (!file.contentsPromise) {",
            "\t\t\t\t\t\t\t\tfile.contentsPromise = getFileContents(path);",
            "\t\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\t\ttotal[type] += size;",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\tif (id == updatedId) {",
            "\t\t\t\t\t\t\tupdated[type] += size;",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "\t\t\t\t});",
            "\t\t\t}",
            "\t\t\tif (id !== 'meta' && !info.enabled) {",
            "\t\t\t\tallChecked = false;",
            "\t\t\t}",
            "",
            "\t\t\t// Select main theme",
            "\t\t\tif (category === 'themes' && id === updatedId && info.enabled) {",
            "\t\t\t\tvar themeInput = $('#theme input[value=\"' + updatedId + '\"]');",
            "\t\t\t\tif (themeInput) {",
            "\t\t\t\t\tthemeInput.checked = true;",
            "\t\t\t\t}",
            "\t\t\t\tsetTheme(updatedId);",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tif (all.meta.addCheckAll) {",
            "\t\t\t$('input[name=\"check-all-' + category + '\"]').checked = allChecked;",
            "\t\t}",
            "\t}",
            "",
            "\ttotal.all = total.js + total.css;",
            "",
            "\tif (updatedId) {",
            "\t\tupdated.all = updated.js + updated.css;",
            "",
            "\t\t$u.element.prop($('label[data-id=\"' + updatedId + '\"] .filesize'), {",
            "\t\t\ttextContent: prettySize(updated.all),",
            "\t\t\ttitle: (updated.js ? Math.round(100 * updated.js / updated.all) + '% JavaScript' : '') +",
            "\t\t\t\t(updated.js && updated.css ? ' + ' : '') +",
            "\t\t\t\t(updated.css ? Math.round(100 * updated.css / updated.all) + '% CSS' : '')",
            "\t\t});",
            "\t}",
            "",
            "\t$('#filesize').textContent = prettySize(total.all);",
            "",
            "\t$u.element.prop($('#percent-js'), {",
            "\t\ttextContent: Math.round(100 * total.js / total.all) + '%',",
            "\t\ttitle: prettySize(total.js)",
            "\t});",
            "",
            "\t$u.element.prop($('#percent-css'), {",
            "\t\ttextContent: Math.round(100 * total.css / total.all) + '%',",
            "\t\ttitle: prettySize(total.css)",
            "\t});",
            "",
            "\tdelayedGenerateCode();",
            "}",
            "",
            "var timerId = 0;",
            "// \"debounce\" multiple rapid requests to generate and highlight code",
            "function delayedGenerateCode(){",
            "\tif ( timerId !== 0 ) {",
            "\t\tclearTimeout(timerId);",
            "\t}",
            "\ttimerId = setTimeout(generateCode, 500);",
            "}",
            "",
            "function getSortedComponents(components, requireName, sorted) {",
            "\tif (!sorted) {",
            "\t\tsorted = [];",
            "\t\tfor (var component in components) {",
            "\t\t\tsorted.push(component);",
            "\t\t}",
            "\t}",
            "",
            "\tvar i = 0;",
            "\twhile (i < sorted.length) {",
            "\t\tvar id = sorted[i];",
            "\t\tvar indexOfRequirement = i;",
            "\t\tvar notNow = false;",
            "\t\tfor (var requirement in components[id][requireName]) {",
            "\t\t\tindexOfRequirement = sorted.indexOf(components[id][requireName][requirement]);",
            "\t\t\tif (indexOfRequirement > i) {",
            "\t\t\t\tnotNow = true;",
            "\t\t\t\tbreak;",
            "\t\t\t}",
            "\t\t}",
            "\t\tif (notNow) {",
            "\t\t\tvar tmp = sorted[i];",
            "\t\t\tsorted[i] = sorted[indexOfRequirement];",
            "\t\t\tsorted[indexOfRequirement] = tmp;",
            "\t\t}",
            "\t\telse {",
            "\t\t\ti++;",
            "\t\t}",
            "\t}",
            "\treturn sorted;",
            "}",
            "",
            "function getSortedComponentsByRequirements(components, afterName) {",
            "\tvar sorted = getSortedComponents(components, afterName);",
            "\treturn getSortedComponents(components, \"require\", sorted);",
            "}",
            "",
            "function generateCode(){",
            "\tvar promises = [];",
            "\tvar redownload = {};",
            "",
            "\tfor (var category in components) {",
            "\t\tvar all = components[category];",
            "",
            "\t\t// In case if one component requires other, required component should go first.",
            "\t\tvar sorted = getSortedComponentsByRequirements(all, category === 'languages' ? 'peerDependencies' : 'after');",
            "",
            "\t\tfor (var i = 0; i < sorted.length; i++) {",
            "\t\t\tvar id = sorted[i];",
            "",
            "\t\t\tif(id === 'meta') {",
            "\t\t\t\tcontinue;",
            "\t\t\t}",
            "",
            "\t\t\tvar info = all[id];",
            "\t\t\tif (info.enabled) {",
            "\t\t\t\tif (category !== 'core') {",
            "\t\t\t\t\tredownload[category] = redownload[category]  || [];",
            "\t\t\t\t\tredownload[category].push(id);",
            "\t\t\t\t}",
            "\t\t\t\tinfo.files[minified? 'minified' : 'dev'].paths.forEach(function (path) {",
            "\t\t\t\t\tif (cache[path]) {",
            "\t\t\t\t\t\tvar type = path.match(/\\.(\\w+)$/)[1];",
            "",
            "\t\t\t\t\t\tpromises.push({",
            "\t\t\t\t\t\t\tcontentsPromise: cache[path].contentsPromise,",
            "\t\t\t\t\t\t\tpath: path,",
            "\t\t\t\t\t\t\ttype: type",
            "\t\t\t\t\t\t});",
            "\t\t\t\t\t}",
            "\t\t\t\t});",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\t// Hide error message if visible",
            "\tvar error = $('#download .error');",
            "\terror.style.display = '';",
            "",
            "\tPromise.all([buildCode(promises), getVersion()]).then(function(arr) {",
            "\t\tvar res = arr[0];",
            "\t\tvar version = arr[1];",
            "\t\tvar code = res.code;",
            "\t\tvar errors = res.errors;",
            "",
            "\t\tif(errors.length) {",
            "\t\t\terror.style.display = 'block';",
            "\t\t\terror.innerHTML = '';",
            "\t\t\t$u.element.contents(error, errors);",
            "\t\t}",
            "",
            "\t\tvar redownloadUrl = window.location.href.split(\"#\")[0] + \"#\";",
            "\t\tfor (var category in redownload) {",
            "\t\t\tredownloadUrl += category + \"=\" + redownload[category].join('+') + \"&\";",
            "\t\t}",
            "\t\tredownloadUrl = redownloadUrl.replace(/&$/,\"\");",
            "\t\twindow.location.replace(redownloadUrl);",
            "",
            "\t\tvar versionComment = \"/* PrismJS \" + version + \"\\n\" + redownloadUrl + \" */\";",
            "",
            "\t\tfor (var type in code) {",
            "\t\t\tvar codeElement = $('#download-' + type + ' code');",
            "",
            "\t\t\tcodeElement.textContent = versionComment + \"\\n\" + code[type];",
            "\t\t\tPrism.highlightElement(codeElement, true);",
            "",
            "\t\t\t$('#download-' + type + ' .download-button').href = 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(versionComment + \"\\n\" + code[type]);",
            "\t\t}",
            "\t});",
            "}",
            "",
            "function buildCode(promises) {",
            "\tvar i = 0,",
            "\t    l = promises.length;",
            "\tvar code = {js: '', css: ''};",
            "\tvar errors = [];",
            "",
            "\tvar f = function(resolve) {",
            "\t\tif(i < l) {",
            "\t\t\tvar p = promises[i];",
            "\t\t\tp.contentsPromise.then(function(contents) {",
            "\t\t\t\tcode[p.type] += contents + (p.type === 'js' && !/;\\s*$/.test(contents) ? ';' : '') + '\\n';",
            "\t\t\t\ti++;",
            "\t\t\t\tf(resolve);",
            "\t\t\t});",
            "\t\t\tp.contentsPromise['catch'](function() {",
            "\t\t\t\terrors.push($u.element.create({",
            "\t\t\t\t\ttag: 'p',",
            "\t\t\t\t\tprop: {",
            "\t\t\t\t\t\ttextContent: 'An error occurred while fetching the file \"' + p.path + '\".'",
            "\t\t\t\t\t}",
            "\t\t\t\t}));",
            "\t\t\t\ti++;",
            "\t\t\t\tf(resolve);",
            "\t\t\t});",
            "\t\t} else {",
            "\t\t\tresolve({code: code, errors: errors});",
            "\t\t}",
            "\t};",
            "",
            "\treturn new Promise(f);",
            "}",
            "",
            "function getVersion() {",
            "\treturn getFileContents('./package.json').then(function (jsonStr) {",
            "\t\treturn JSON.parse(jsonStr).version;",
            "\t});",
            "}",
            "",
            "})();"
        ]
    },
    "examples.html": {},
    "examples.js": {
        "classes": [],
        "functions": [],
        "text": [
            "/**",
            " * Manage examples",
            " */",
            "",
            "(function() {",
            "",
            "var examples = {};",
            "",
            "var treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';",
            "var treePromise = new Promise(function (resolve) {",
            "\t$u.xhr({",
            "\t\turl: treeURL,",
            "\t\tcallback: function (xhr) {",
            "\t\t\tif (xhr.status < 400) {",
            "\t\t\t\tresolve(JSON.parse(xhr.responseText).tree);",
            "\t\t\t}",
            "\t\t}",
            "\t});",
            "});",
            "",
            "var languages = components.languages;",
            "",
            "for (var id in languages) {",
            "\tif (id === 'meta') {",
            "\t\tcontinue;",
            "\t}",
            "",
            "\t(function (id) {",
            "\t\tvar language = languages[id];",
            "\t\tvar checked = false;",
            "",
            "\t\tif (language.option === 'default') {",
            "\t\t\tchecked = true;",
            "\t\t}",
            "",
            "\t\tlanguage.enabled = checked;",
            "\t\tlanguage.path = languages.meta.path.replace(/\\{id}/g, id) + '.js';",
            "\t\tlanguage.examplesPath = languages.meta.examplesPath.replace(/\\{id}/g, id) + '.html';",
            "",
            "\t\tfileExists(language.examplesPath).then(function (exists) {",
            "\t\t\t$u.element.create('label', {",
            "\t\t\t\tattributes: {",
            "\t\t\t\t\t'data-id': id,",
            "\t\t\t\t\t'title': !exists ? 'No examples are available for this language.' : ''",
            "\t\t\t\t},",
            "\t\t\t\tclassName: !exists ? 'unavailable' : '',",
            "\t\t\t\tcontents: [",
            "\t\t\t\t\t{",
            "\t\t\t\t\t\ttag: 'input',",
            "\t\t\t\t\t\tproperties: {",
            "\t\t\t\t\t\t\ttype: 'checkbox',",
            "\t\t\t\t\t\t\tname: 'language',",
            "\t\t\t\t\t\t\tvalue: id,",
            "\t\t\t\t\t\t\tchecked: checked && exists,",
            "\t\t\t\t\t\t\tdisabled: !exists,",
            "\t\t\t\t\t\t\tonclick: function () {",
            "\t\t\t\t\t\t\t\t$$('input[name=\"' + this.name + '\"]').forEach(function (input) {",
            "\t\t\t\t\t\t\t\t\tlanguages[input.value].enabled = input.checked;",
            "\t\t\t\t\t\t\t\t});",
            "",
            "\t\t\t\t\t\t\t\tupdate(id);",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t},",
            "\t\t\t\t\tlanguage.title",
            "\t\t\t\t],",
            "\t\t\t\tinside: '#languages'",
            "\t\t\t});",
            "\t\t\texamples[id] = $u.element.create('section', {",
            "\t\t\t\t'id': 'language-' + id,",
            "\t\t\t\t'className': 'language-' + id,",
            "\t\t\t\tinside: '#examples'",
            "\t\t\t});",
            "\t\t\tif (checked) {",
            "\t\t\t\tupdate(id);",
            "\t\t\t}",
            "\t\t});",
            "\t}(id));",
            "}",
            "",
            "function fileExists(filepath) {",
            "\treturn treePromise.then(function (tree) {",
            "\t\tfor (var i = 0, l = tree.length; i < l; i++) {",
            "\t\t\tif (tree[i].path === filepath) {",
            "\t\t\t\treturn true;",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn false;",
            "\t});",
            "}",
            "",
            "function getFileContents(filepath) {",
            "\treturn new Promise(function (resolve, reject) {",
            "\t\t$u.xhr({",
            "\t\t\turl: filepath,",
            "\t\t\tcallback: function (xhr) {",
            "\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
            "\t\t\t\t\tresolve(xhr.responseText);",
            "\t\t\t\t} else {",
            "\t\t\t\t\treject();",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t});",
            "\t});",
            "}",
            "",
            "function buildContentsHeader(id) {",
            "\tvar language = languages[id];",
            "\tvar header = '<h1>' + language.title + '</h1>';",
            "\tif (language.overrideExampleHeader) {",
            "\t\treturn header;",
            "\t}",
            "\tif (language.alias) {",
            "\t\tvar alias = language.alias;",
            "\t\tif (Prism.util.type(alias) !== 'Array') {",
            "\t\t\talias = [alias];",
            "\t\t}",
            "",
            "\t\theader += '<p>To use this language, use one of the following classes:</p>';",
            "\t\theader += '<ul><li><code class=\"language-none\">\"language-' + id + '\"</code></li>';",
            "\t\talias.forEach(function (alias) {",
            "\t\t\theader += '<li><code class=\"language-none\">\"language-' + alias + '\"</code></li>';",
            "\t\t});",
            "\t\theader += '</ul>';",
            "\t} else {",
            "\t\theader += '<p>To use this language, use the class <code class=\"language-none\">\"language-' + id + '\"</code>.</p>';",
            "\t}",
            "\tif (language.require) {",
            "\t\tvar require = language.require;",
            "\t\tif (Prism.util.type(require) !== 'Array') {",
            "\t\t\trequire = [require];",
            "\t\t}",
            "",
            "\t\theader += '<p><strong>Dependencies:</strong> The following dependencies need to be loaded before this component: ';",
            "\t\theader += require.map(function (dep) {",
            "\t\t\treturn '<code class=\"language-none\">' + dep + '</code>';",
            "\t\t}).join(', ');",
            "\t\theader += '.</p>';",
            "\t}",
            "\treturn header;",
            "}",
            "",
            "function update(id) {",
            "\tvar language = languages[id];",
            "\tif (language.enabled) {",
            "\t\tif (!language.examplesPromise) {",
            "\t\t\tlanguage.examplesPromise = getFileContents(language.examplesPath);",
            "\t\t}",
            "\t\tlanguage.examplesPromise.then(function (contents) {",
            "\t\t\texamples[id].innerHTML = buildContentsHeader(id) + contents;",
            "",
            "\t\t\tloadLanguage(id).then(function () {",
            "\t\t\t\tvar elements = examples[id].querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code');",
            "",
            "\t\t\t\tfor (var i=0, element; element = elements[i++];) {",
            "\t\t\t\t\tPrism.highlightElement(element);",
            "\t\t\t\t}",
            "\t\t\t});",
            "\t\t});",
            "\t} else {",
            "\t\texamples[id].innerHTML = '';",
            "\t}",
            "}",
            "",
            "/**",
            " * Loads a language, including all dependencies",
            " *",
            " * @param {string} lang the language to load",
            " * @type {Promise} the promise which resolves as soon as everything is loaded",
            " */",
            "function loadLanguage (lang)",
            "{",
            "\t// at first we need to fetch all dependencies for the main language",
            "\t// Note: we need to do this, even if the main language already is loaded (just to be sure..)",
            "\t//",
            "\t// We load an array of all dependencies and call recursively this function on each entry",
            "\t//",
            "\t// dependencies is now an (possibly empty) array of loading-promises",
            "\tvar dependencies = getDependenciesOfLanguage(lang).map(loadLanguage);",
            "",
            "\t// We create a promise, which will resolve, as soon as all dependencies are loaded.",
            "\t// They need to be fully loaded because the main language may extend them.",
            "\treturn Promise.all(dependencies)",
            "\t\t.then(function () {",
            "",
            "\t\t\t// If the main language itself isn't already loaded, load it now",
            "\t\t\t// and return the newly created promise (we chain the promises).",
            "\t\t\t// If the language is already loaded, just do nothing - the next .then()",
            "\t\t\t// will immediately be called",
            "\t\t\tif (!Prism.languages[lang]) {",
            "\t\t\t\treturn new Promise(function (resolve) {",
            "\t\t\t\t\t$u.script('components/prism-' + lang + '.js', resolve);",
            "\t\t\t\t});",
            "\t\t\t}",
            "\t\t});",
            "}",
            "",
            "",
            "/**",
            " * Returns all dependencies (as identifiers) of a specific language",
            " *",
            " * @param {string} lang",
            " * @returns {Array.<string>} the list of dependencies. Empty if the language has none.",
            " */",
            "function getDependenciesOfLanguage (lang)",
            "{",
            "\tif (!components.languages[lang] || !components.languages[lang].require)",
            "\t{",
            "\t\treturn [];",
            "\t}",
            "",
            "\treturn ($u.type(components.languages[lang].require) === \"array\")",
            "\t\t? components.languages[lang].require",
            "\t\t: [components.languages[lang].require];",
            "}",
            "",
            "}());"
        ]
    },
    "extending.html": {},
    "faq.html": {},
    "favicon.png": {},
    "gulpfile.js": {
        "classes": [],
        "functions": [],
        "text": [
            "var gulp   = require('gulp'),",
            "\trename = require('gulp-rename'),",
            "\tuglify = require('gulp-uglify'),",
            "\theader = require('gulp-header'),",
            "\tconcat = require('gulp-concat'),",
            "\treplace = require('gulp-replace'),",
            "\tfs = require('fs'),",
            "",
            "\tpaths  = {",
            "\t\tcomponentsFile: 'components.json',",
            "\t\tcomponentsFileJS: 'components.js',",
            "\t\tcomponents: ['components/**/*.js', '!components/index.js', '!components/**/*.min.js'],",
            "\t\tmain: [",
            "\t\t\t'components/prism-core.js',",
            "\t\t\t'components/prism-markup.js',",
            "\t\t\t'components/prism-css.js',",
            "\t\t\t'components/prism-clike.js',",
            "\t\t\t'components/prism-javascript.js',",
            "\t\t\t'plugins/file-highlight/prism-file-highlight.js'",
            "\t\t],",
            "\t\tplugins: ['plugins/**/*.js', '!plugins/**/*.min.js'],",
            "\t\tshowLanguagePlugin: 'plugins/show-language/prism-show-language.js',",
            "\t\tautoloaderPlugin: 'plugins/autoloader/prism-autoloader.js',",
            "\t\tchangelog: 'CHANGELOG.md'",
            "\t},",
            "",
            "\tcomponentsPromise = new Promise(function (resolve, reject) {",
            "\t\tfs.readFile(paths.componentsFile, {",
            "\t\t\tencoding: 'utf-8'",
            "\t\t}, function (err, data) {",
            "\t\t\tif (!err) {",
            "\t\t\t\tresolve(JSON.parse(data));",
            "\t\t\t} else {",
            "\t\t\t\treject(err);",
            "\t\t\t}",
            "\t\t});",
            "\t});",
            "",
            "gulp.task('components', function() {",
            "\treturn gulp.src(paths.components)",
            "\t\t.pipe(uglify())",
            "\t\t.pipe(rename({ suffix: '.min' }))",
            "\t\t.pipe(gulp.dest('components'));",
            "});",
            "",
            "gulp.task('build', function() {",
            "\treturn gulp.src(paths.main)",
            "\t\t.pipe(header('\\n/* **********************************************\\n' +",
            "\t\t\t'     Begin <%= file.relative %>\\n' +",
            "\t\t\t'********************************************** */\\n\\n'))",
            "\t\t.pipe(concat('prism.js'))",
            "\t\t.pipe(gulp.dest('./'));",
            "});",
            "",
            "gulp.task('plugins', ['languages-plugins'], function() {",
            "\treturn gulp.src(paths.plugins)",
            "\t\t.pipe(uglify())",
            "\t\t.pipe(rename({ suffix: '.min' }))",
            "\t\t.pipe(gulp.dest('plugins'));",
            "});",
            "",
            "gulp.task('components-json', function (cb) {",
            "\tcomponentsPromise.then(function (data) {",
            "\t\tdata = 'var components = ' + JSON.stringify(data) + ';\\n' +",
            "\t\t\t'if (typeof module !== \\'undefined\\' && module.exports) { module.exports = components; }';",
            "\t\tfs.writeFile(paths.componentsFileJS, data, cb);",
            "\t});",
            "});",
            "",
            "gulp.task('watch', function() {",
            "\tgulp.watch(paths.components, ['components', 'build']);",
            "\tgulp.watch(paths.plugins, ['plugins', 'build']);",
            "});",
            "",
            "gulp.task('languages-plugins', function (cb) {",
            "\tcomponentsPromise.then(function (data) {",
            "\t\tvar languagesMap = {};",
            "\t\tvar dependenciesMap = {};",
            "\t\tfor (var p in data.languages) {",
            "\t\t\tif (p !== 'meta') {",
            "\t\t\t\tvar title = data.languages[p].displayTitle || data.languages[p].title;",
            "\t\t\t\tvar ucfirst = p.substring(0, 1).toUpperCase() + p.substring(1);",
            "\t\t\t\tif (title !== ucfirst) {",
            "\t\t\t\t\tlanguagesMap[p] = title;",
            "\t\t\t\t}",
            "",
            "\t\t\t\tfor (var name in data.languages[p].aliasTitles) {",
            "\t\t\t\t\tlanguagesMap[name] = data.languages[p].aliasTitles[name];",
            "\t\t\t\t}",
            "",
            "\t\t\t\tif(data.languages[p].require) {",
            "\t\t\t\t\tdependenciesMap[p] = data.languages[p].require;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tvar jsonLanguagesMap = JSON.stringify(languagesMap);",
            "\t\tvar jsonDependenciesMap = JSON.stringify(dependenciesMap);",
            "",
            "\t\tvar tasks = [",
            "\t\t\t{plugin: paths.showLanguagePlugin, map: jsonLanguagesMap},",
            "\t\t\t{plugin: paths.autoloaderPlugin, map: jsonDependenciesMap}",
            "\t\t];",
            "",
            "\t\tvar cpt = 0;",
            "\t\tvar l = tasks.length;",
            "\t\tvar done = function() {",
            "\t\t\tcpt++;",
            "\t\t\tif(cpt === l) {",
            "\t\t\t\tcb && cb();",
            "\t\t\t}",
            "\t\t};",
            "",
            "\t\ttasks.forEach(function(task) {",
            "\t\t\tvar stream = gulp.src(task.plugin)",
            "\t\t\t\t.pipe(replace(",
            "\t\t\t\t\t/\\/\\*languages_placeholder\\[\\*\\/[\\s\\S]*?\\/\\*\\]\\*\\//,",
            "\t\t\t\t\t'/*languages_placeholder[*/' + task.map + '/*]*/'",
            "\t\t\t\t))",
            "\t\t\t\t.pipe(gulp.dest(task.plugin.substring(0, task.plugin.lastIndexOf('/'))));",
            "",
            "\t\t\tstream.on('error', done);",
            "\t\t\tstream.on('end', done);",
            "\t\t});",
            "\t});",
            "});",
            "",
            "gulp.task('changelog', function (cb) {",
            "\treturn gulp.src(paths.changelog)",
            "\t\t.pipe(replace(",
            "\t\t\t/#(\\d+)(?![\\d\\]])/g,",
            "\t\t\t'[#$1](https://github.com/PrismJS/prism/issues/$1)'",
            "\t\t))",
            "\t\t.pipe(replace(",
            "\t\t\t/\\[[\\da-f]+(?:, *[\\da-f]+)*\\]/g,",
            "\t\t\tfunction (match) {",
            "\t\t\t\treturn match.replace(/([\\da-f]{7})[\\da-f]*/g, '[`$1`](https://github.com/PrismJS/prism/commit/$1)');",
            "\t\t\t}",
            "\t\t))",
            "\t\t.pipe(gulp.dest('.'));",
            "});",
            "",
            "gulp.task('default', ['components', 'components-json', 'plugins', 'build']);"
        ]
    },
    "index.html": {},
    "logo.svg": {},
    "package.json": {},
    "prefixfree.min.js": {
        "classes": [],
        "functions": [],
        "text": [
            "/**",
            " * StyleFix 1.0.3 & PrefixFree 1.0.7",
            " * @author Lea Verou",
            " * MIT license",
            " */(function(){function t(e,t){return[].slice.call((t||document).querySelectorAll(e))}if(!window.addEventListener)return;var e=window.StyleFix={link:function(t){try{if(t.rel!==\"stylesheet\"||t.hasAttribute(\"data-noprefix\"))return}catch(n){return}var r=t.href||t.getAttribute(\"data-href\"),i=r.replace(/[^\\/]+$/,\"\"),s=t.parentNode,o=new XMLHttpRequest,u;o.onreadystatechange=function(){o.readyState===4&&u()};u=function(){var n=o.responseText;if(n&&t.parentNode&&(!o.status||o.status<400||o.status>600)){n=e.fix(n,!0,t);if(i){n=n.replace(/url\\(\\s*?((?:\"|')?)(.+?)\\1\\s*?\\)/gi,function(e,t,n){return/^([a-z]{3,10}:|\\/|#)/i.test(n)?e:'url(\"'+i+n+'\")'});var r=i.replace(/([\\\\\\^\\$*+[\\]?{}.=!:(|)])/g,\"\\\\$1\");n=n.replace(RegExp(\"\\\\b(behavior:\\\\s*?url\\\\('?\\\"?)\"+r,\"gi\"),\"$1\")}var u=document.createElement(\"style\");u.textContent=n;u.media=t.media;u.disabled=t.disabled;u.setAttribute(\"data-href\",t.getAttribute(\"href\"));s.insertBefore(u,t);s.removeChild(t);u.media=t.media}};try{o.open(\"GET\",r);o.send(null)}catch(n){if(typeof XDomainRequest!=\"undefined\"){o=new XDomainRequest;o.onerror=o.onprogress=function(){};o.onload=u;o.open(\"GET\",r);o.send(null)}}t.setAttribute(\"data-inprogress\",\"\")},styleElement:function(t){if(t.hasAttribute(\"data-noprefix\"))return;var n=t.disabled;t.textContent=e.fix(t.textContent,!0,t);t.disabled=n},styleAttribute:function(t){var n=t.getAttribute(\"style\");n=e.fix(n,!1,t);t.setAttribute(\"style\",n)},process:function(){t('link[rel=\"stylesheet\"]:not([data-inprogress])').forEach(StyleFix.link);t(\"style\").forEach(StyleFix.styleElement);t(\"[style]\").forEach(StyleFix.styleAttribute)},register:function(t,n){(e.fixers=e.fixers||[]).splice(n===undefined?e.fixers.length:n,0,t)},fix:function(t,n,r){for(var i=0;i<e.fixers.length;i++)t=e.fixers[i](t,n,r)||t;return t},camelCase:function(e){return e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()}).replace(\"-\",\"\")},deCamelCase:function(e){return e.replace(/[A-Z]/g,function(e){return\"-\"+e.toLowerCase()})}};(function(){setTimeout(function(){t('link[rel=\"stylesheet\"]').forEach(StyleFix.link)},10);document.addEventListener(\"DOMContentLoaded\",StyleFix.process,!1)})()})();(function(e){function t(e,t,r,i,s){e=n[e];if(e.length){var o=RegExp(t+\"(\"+e.join(\"|\")+\")\"+r,\"gi\");s=s.replace(o,i)}return s}if(!window.StyleFix||!window.getComputedStyle)return;var n=window.PrefixFree={prefixCSS:function(e,r,i){var s=n.prefix;n.functions.indexOf(\"linear-gradient\")>-1&&(e=e.replace(/(\\s|:|,)(repeating-)?linear-gradient\\(\\s*(-?\\d*\\.?\\d*)deg/ig,function(e,t,n,r){r=Math.abs(r-450)%360;return t+(n||\"\")+\"linear-gradient(\"+r+\"deg\"}));e=t(\"functions\",\"(\\\\s|:|,)\",\"\\\\s*\\\\(\",\"$1\"+s+\"$2(\",e);e=t(\"keywords\",\"(\\\\s|:)\",\"(\\\\s|;|\\\\}|$)\",\"$1\"+s+\"$2$3\",e);e=t(\"properties\",\"(^|\\\\{|\\\\s|;)\",\"\\\\s*:\",\"$1\"+s+\"$2:\",e);if(n.properties.length){var o=RegExp(\"\\\\b(\"+n.properties.join(\"|\")+\")(?!:)\",\"gi\");e=t(\"valueProperties\",\"\\\\b\",\":(.+?);\",function(e){return e.replace(o,s+\"$1\")},e)}if(r){e=t(\"selectors\",\"\",\"\\\\b\",n.prefixSelector,e);e=t(\"atrules\",\"@\",\"\\\\b\",\"@\"+s+\"$1\",e)}e=e.replace(RegExp(\"-\"+s,\"g\"),\"-\");e=e.replace(/-\\*-(?=[a-z]+)/gi,n.prefix);return e},property:function(e){return(n.properties.indexOf(e)?n.prefix:\"\")+e},value:function(e,r){e=t(\"functions\",\"(^|\\\\s|,)\",\"\\\\s*\\\\(\",\"$1\"+n.prefix+\"$2(\",e);e=t(\"keywords\",\"(^|\\\\s)\",\"(\\\\s|$)\",\"$1\"+n.prefix+\"$2$3\",e);return e},prefixSelector:function(e){return e.replace(/^:{1,2}/,function(e){return e+n.prefix})},prefixProperty:function(e,t){var r=n.prefix+e;return t?StyleFix.camelCase(r):r}};(function(){var e={},t=[],r={},i=getComputedStyle(document.documentElement,null),s=document.createElement(\"div\").style,o=function(n){if(n.charAt(0)===\"-\"){t.push(n);var r=n.split(\"-\"),i=r[1];e[i]=++e[i]||1;while(r.length>3){r.pop();var s=r.join(\"-\");u(s)&&t.indexOf(s)===-1&&t.push(s)}}},u=function(e){return StyleFix.camelCase(e)in s};if(i.length>0)for(var a=0;a<i.length;a++)o(i[a]);else for(var f in i)o(StyleFix.deCamelCase(f));var l={uses:0};for(var c in e){var h=e[c];l.uses<h&&(l={prefix:c,uses:h})}n.prefix=\"-\"+l.prefix+\"-\";n.Prefix=StyleFix.camelCase(n.prefix);n.properties=[];for(var a=0;a<t.length;a++){var f=t[a];if(f.indexOf(n.prefix)===0){var p=f.slice(n.prefix.length);u(p)||n.properties.push(p)}}n.Prefix==\"Ms\"&&!(\"transform\"in s)&&!(\"MsTransform\"in s)&&\"msTransform\"in s&&n.properties.push(\"transform\",\"transform-origin\");n.properties.sort()})();(function(){function i(e,t){r[t]=\"\";r[t]=e;return!!r[t]}var e={\"linear-gradient\":{property:\"backgroundImage\",params:\"red, teal\"},calc:{property:\"width\",params:\"1px + 5%\"},element:{property:\"backgroundImage\",params:\"#foo\"},\"cross-fade\":{property:\"backgroundImage\",params:\"url(a.png), url(b.png), 50%\"}};e[\"repeating-linear-gradient\"]=e[\"repeating-radial-gradient\"]=e[\"radial-gradient\"]=e[\"linear-gradient\"];var t={initial:\"color\",\"zoom-in\":\"cursor\",\"zoom-out\":\"cursor\",box:\"display\",flexbox:\"display\",\"inline-flexbox\":\"display\",flex:\"display\",\"inline-flex\":\"display\"};n.functions=[];n.keywords=[];var r=document.createElement(\"div\").style;for(var s in e){var o=e[s],u=o.property,a=s+\"(\"+o.params+\")\";!i(a,u)&&i(n.prefix+a,u)&&n.functions.push(s)}for(var f in t){var u=t[f];!i(f,u)&&i(n.prefix+f,u)&&n.keywords.push(f)}})();(function(){function s(e){i.textContent=e+\"{}\";return!!i.sheet.cssRules.length}var t={\":read-only\":null,\":read-write\":null,\":any-link\":null,\"::selection\":null},r={keyframes:\"name\",viewport:null,document:'regexp(\".\")'};n.selectors=[];n.atrules=[];var i=e.appendChild(document.createElement(\"style\"));for(var o in t){var u=o+(t[o]?\"(\"+t[o]+\")\":\"\");!s(u)&&s(n.prefixSelector(u))&&n.selectors.push(o)}for(var a in r){var u=a+\" \"+(r[a]||\"\");!s(\"@\"+u)&&s(\"@\"+n.prefix+u)&&n.atrules.push(a)}e.removeChild(i)})();n.valueProperties=[\"transition\",\"transition-property\"];e.className+=\" \"+n.prefix;StyleFix.register(n.prefixCSS)})(document.documentElement);"
        ]
    },
    "prism.js": {
        "classes": [],
        "functions": [],
        "text": [
            "",
            "/* **********************************************",
            "     Begin prism-core.js",
            "********************************************** */",
            "",
            "var _self = (typeof window !== 'undefined')",
            "\t? window   // if in browser",
            "\t: (",
            "\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)",
            "\t\t? self // if in worker",
            "\t\t: {}   // if in node js",
            "\t);",
            "",
            "/**",
            " * Prism: Lightweight, robust, elegant syntax highlighting",
            " * MIT license http://www.opensource.org/licenses/mit-license.php/",
            " * @author Lea Verou http://lea.verou.me",
            " */",
            "",
            "var Prism = (function(){",
            "",
            "// Private helper vars",
            "var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
            "var uniqueId = 0;",
            "",
            "var _ = _self.Prism = {",
            "\tmanual: _self.Prism && _self.Prism.manual,",
            "\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,",
            "\tutil: {",
            "\t\tencode: function (tokens) {",
            "\t\t\tif (tokens instanceof Token) {",
            "\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);",
            "\t\t\t} else if (_.util.type(tokens) === 'Array') {",
            "\t\t\t\treturn tokens.map(_.util.encode);",
            "\t\t\t} else {",
            "\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');",
            "\t\t\t}",
            "\t\t},",
            "",
            "\t\ttype: function (o) {",
            "\t\t\treturn Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];",
            "\t\t},",
            "",
            "\t\tobjId: function (obj) {",
            "\t\t\tif (!obj['__id']) {",
            "\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });",
            "\t\t\t}",
            "\t\t\treturn obj['__id'];",
            "\t\t},",
            "",
            "\t\t// Deep clone a language definition (e.g. to extend it)",
            "\t\tclone: function (o, visited) {",
            "\t\t\tvar type = _.util.type(o);",
            "\t\t\tvisited = visited || {};",
            "",
            "\t\t\tswitch (type) {",
            "\t\t\t\tcase 'Object':",
            "\t\t\t\t\tif (visited[_.util.objId(o)]) {",
            "\t\t\t\t\t\treturn visited[_.util.objId(o)];",
            "\t\t\t\t\t}",
            "\t\t\t\t\tvar clone = {};",
            "\t\t\t\t\tvisited[_.util.objId(o)] = clone;",
            "",
            "\t\t\t\t\tfor (var key in o) {",
            "\t\t\t\t\t\tif (o.hasOwnProperty(key)) {",
            "\t\t\t\t\t\t\tclone[key] = _.util.clone(o[key], visited);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\treturn clone;",
            "",
            "\t\t\t\tcase 'Array':",
            "\t\t\t\t\tif (visited[_.util.objId(o)]) {",
            "\t\t\t\t\t\treturn visited[_.util.objId(o)];",
            "\t\t\t\t\t}",
            "\t\t\t\t\tvar clone = [];",
            "\t\t\t\t\tvisited[_.util.objId(o)] = clone;",
            "",
            "\t\t\t\t\to.forEach(function (v, i) {",
            "\t\t\t\t\t\tclone[i] = _.util.clone(v, visited);",
            "\t\t\t\t\t});",
            "",
            "\t\t\t\t\treturn clone;",
            "\t\t\t}",
            "",
            "\t\t\treturn o;",
            "\t\t}",
            "\t},",
            "",
            "\tlanguages: {",
            "\t\textend: function (id, redef) {",
            "\t\t\tvar lang = _.util.clone(_.languages[id]);",
            "",
            "\t\t\tfor (var key in redef) {",
            "\t\t\t\tlang[key] = redef[key];",
            "\t\t\t}",
            "",
            "\t\t\treturn lang;",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Insert a token before another token in a language literal",
            "\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),",
            "\t\t * we cannot just provide an object, we need anobject and a key.",
            "\t\t * @param inside The key (or language id) of the parent",
            "\t\t * @param before The key to insert before. If not provided, the function appends instead.",
            "\t\t * @param insert Object with the key/value pairs to insert",
            "\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.",
            "\t\t */",
            "\t\tinsertBefore: function (inside, before, insert, root) {",
            "\t\t\troot = root || _.languages;",
            "\t\t\tvar grammar = root[inside];",
            "",
            "\t\t\tif (arguments.length == 2) {",
            "\t\t\t\tinsert = arguments[1];",
            "",
            "\t\t\t\tfor (var newToken in insert) {",
            "\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
            "\t\t\t\t\t\tgrammar[newToken] = insert[newToken];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "",
            "\t\t\t\treturn grammar;",
            "\t\t\t}",
            "",
            "\t\t\tvar ret = {};",
            "",
            "\t\t\tfor (var token in grammar) {",
            "",
            "\t\t\t\tif (grammar.hasOwnProperty(token)) {",
            "",
            "\t\t\t\t\tif (token == before) {",
            "",
            "\t\t\t\t\t\tfor (var newToken in insert) {",
            "",
            "\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
            "\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tret[token] = grammar[token];",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t\t// Update references in other language definitions",
            "\t\t\t_.languages.DFS(_.languages, function(key, value) {",
            "\t\t\t\tif (value === root[inside] && key != inside) {",
            "\t\t\t\t\tthis[key] = ret;",
            "\t\t\t\t}",
            "\t\t\t});",
            "",
            "\t\t\treturn root[inside] = ret;",
            "\t\t},",
            "",
            "\t\t// Traverse a language definition with Depth First Search",
            "\t\tDFS: function(o, callback, type, visited) {",
            "\t\t\tvisited = visited || {};",
            "\t\t\tfor (var i in o) {",
            "\t\t\t\tif (o.hasOwnProperty(i)) {",
            "\t\t\t\t\tcallback.call(o, i, o[i], type || i);",
            "",
            "\t\t\t\t\tif (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {",
            "\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;",
            "\t\t\t\t\t\t_.languages.DFS(o[i], callback, null, visited);",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {",
            "\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;",
            "\t\t\t\t\t\t_.languages.DFS(o[i], callback, i, visited);",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "\tplugins: {},",
            "",
            "\thighlightAll: function(async, callback) {",
            "\t\t_.highlightAllUnder(document, async, callback);",
            "\t},",
            "",
            "\thighlightAllUnder: function(container, async, callback) {",
            "\t\tvar env = {",
            "\t\t\tcallback: callback,",
            "\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'",
            "\t\t};",
            "",
            "\t\t_.hooks.run(\"before-highlightall\", env);",
            "",
            "\t\tvar elements = env.elements || container.querySelectorAll(env.selector);",
            "",
            "\t\tfor (var i=0, element; element = elements[i++];) {",
            "\t\t\t_.highlightElement(element, async === true, env.callback);",
            "\t\t}",
            "\t},",
            "",
            "\thighlightElement: function(element, async, callback) {",
            "\t\t// Find language",
            "\t\tvar language, grammar, parent = element;",
            "",
            "\t\twhile (parent && !lang.test(parent.className)) {",
            "\t\t\tparent = parent.parentNode;",
            "\t\t}",
            "",
            "\t\tif (parent) {",
            "\t\t\tlanguage = (parent.className.match(lang) || [,''])[1].toLowerCase();",
            "\t\t\tgrammar = _.languages[language];",
            "\t\t}",
            "",
            "\t\t// Set language on the element, if not present",
            "\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
            "",
            "\t\tif (element.parentNode) {",
            "\t\t\t// Set language on the parent, for styling",
            "\t\t\tparent = element.parentNode;",
            "",
            "\t\t\tif (/pre/i.test(parent.nodeName)) {",
            "\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tvar code = element.textContent;",
            "",
            "\t\tvar env = {",
            "\t\t\telement: element,",
            "\t\t\tlanguage: language,",
            "\t\t\tgrammar: grammar,",
            "\t\t\tcode: code",
            "\t\t};",
            "",
            "\t\t_.hooks.run('before-sanity-check', env);",
            "",
            "\t\tif (!env.code || !env.grammar) {",
            "\t\t\tif (env.code) {",
            "\t\t\t\t_.hooks.run('before-highlight', env);",
            "\t\t\t\tenv.element.textContent = env.code;",
            "\t\t\t\t_.hooks.run('after-highlight', env);",
            "\t\t\t}",
            "\t\t\t_.hooks.run('complete', env);",
            "\t\t\treturn;",
            "\t\t}",
            "",
            "\t\t_.hooks.run('before-highlight', env);",
            "",
            "\t\tif (async && _self.Worker) {",
            "\t\t\tvar worker = new Worker(_.filename);",
            "",
            "\t\t\tworker.onmessage = function(evt) {",
            "\t\t\t\tenv.highlightedCode = evt.data;",
            "",
            "\t\t\t\t_.hooks.run('before-insert', env);",
            "",
            "\t\t\t\tenv.element.innerHTML = env.highlightedCode;",
            "",
            "\t\t\t\tcallback && callback.call(env.element);",
            "\t\t\t\t_.hooks.run('after-highlight', env);",
            "\t\t\t\t_.hooks.run('complete', env);",
            "\t\t\t};",
            "",
            "\t\t\tworker.postMessage(JSON.stringify({",
            "\t\t\t\tlanguage: env.language,",
            "\t\t\t\tcode: env.code,",
            "\t\t\t\timmediateClose: true",
            "\t\t\t}));",
            "\t\t}",
            "\t\telse {",
            "\t\t\tenv.highlightedCode = _.highlight(env.code, env.grammar, env.language);",
            "",
            "\t\t\t_.hooks.run('before-insert', env);",
            "",
            "\t\t\tenv.element.innerHTML = env.highlightedCode;",
            "",
            "\t\t\tcallback && callback.call(element);",
            "",
            "\t\t\t_.hooks.run('after-highlight', env);",
            "\t\t\t_.hooks.run('complete', env);",
            "\t\t}",
            "\t},",
            "",
            "\thighlight: function (text, grammar, language) {",
            "\t\tvar env = {",
            "\t\t\tcode: text,",
            "\t\t\tgrammar: grammar,",
            "\t\t\tlanguage: language",
            "\t\t};",
            "\t\t_.hooks.run('before-tokenize', env);",
            "\t\tenv.tokens = _.tokenize(env.code, env.grammar);",
            "\t\t_.hooks.run('after-tokenize', env);",
            "\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);",
            "\t},",
            "",
            "\tmatchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {",
            "\t\tvar Token = _.Token;",
            "",
            "\t\tfor (var token in grammar) {",
            "\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {",
            "\t\t\t\tcontinue;",
            "\t\t\t}",
            "",
            "\t\t\tif (token == target) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\tvar patterns = grammar[token];",
            "\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];",
            "",
            "\t\t\tfor (var j = 0; j < patterns.length; ++j) {",
            "\t\t\t\tvar pattern = patterns[j],",
            "\t\t\t\t\tinside = pattern.inside,",
            "\t\t\t\t\tlookbehind = !!pattern.lookbehind,",
            "\t\t\t\t\tgreedy = !!pattern.greedy,",
            "\t\t\t\t\tlookbehindLength = 0,",
            "\t\t\t\t\talias = pattern.alias;",
            "",
            "\t\t\t\tif (greedy && !pattern.pattern.global) {",
            "\t\t\t\t\t// Without the global flag, lastIndex won't work",
            "\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];",
            "\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");",
            "\t\t\t\t}",
            "",
            "\t\t\t\tpattern = pattern.pattern || pattern;",
            "",
            "\t\t\t\t// Don’t cache length as it changes during the loop",
            "\t\t\t\tfor (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {",
            "",
            "\t\t\t\t\tvar str = strarr[i];",
            "",
            "\t\t\t\t\tif (strarr.length > text.length) {",
            "\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!",
            "\t\t\t\t\t\treturn;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif (str instanceof Token) {",
            "\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif (greedy && i != strarr.length - 1) {",
            "\t\t\t\t\t\tpattern.lastIndex = pos;",
            "\t\t\t\t\t\tvar match = pattern.exec(text);",
            "\t\t\t\t\t\tif (!match) {",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),",
            "\t\t\t\t\t\t    to = match.index + match[0].length,",
            "\t\t\t\t\t\t    k = i,",
            "\t\t\t\t\t\t    p = pos;",
            "",
            "\t\t\t\t\t\tfor (var len = strarr.length; k < len && (p < to || (!strarr[k].type && !strarr[k - 1].greedy)); ++k) {",
            "\t\t\t\t\t\t\tp += strarr[k].length;",
            "\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from",
            "\t\t\t\t\t\t\tif (from >= p) {",
            "\t\t\t\t\t\t\t\t++i;",
            "\t\t\t\t\t\t\t\tpos = p;",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\t// If strarr[i] is a Token, then the match starts inside another Token, which is invalid",
            "\t\t\t\t\t\tif (strarr[i] instanceof Token) {",
            "\t\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\t// Number of tokens to delete and replace with the new match",
            "\t\t\t\t\t\tdelNum = k - i;",
            "\t\t\t\t\t\tstr = text.slice(pos, p);",
            "\t\t\t\t\t\tmatch.index -= pos;",
            "\t\t\t\t\t} else {",
            "\t\t\t\t\t\tpattern.lastIndex = 0;",
            "",
            "\t\t\t\t\t\tvar match = pattern.exec(str),",
            "\t\t\t\t\t\t\tdelNum = 1;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif (!match) {",
            "\t\t\t\t\t\tif (oneshot) {",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif(lookbehind) {",
            "\t\t\t\t\t\tlookbehindLength = match[1] ? match[1].length : 0;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tvar from = match.index + lookbehindLength,",
            "\t\t\t\t\t    match = match[0].slice(lookbehindLength),",
            "\t\t\t\t\t    to = from + match.length,",
            "\t\t\t\t\t    before = str.slice(0, from),",
            "\t\t\t\t\t    after = str.slice(to);",
            "",
            "\t\t\t\t\tvar args = [i, delNum];",
            "",
            "\t\t\t\t\tif (before) {",
            "\t\t\t\t\t\t++i;",
            "\t\t\t\t\t\tpos += before.length;",
            "\t\t\t\t\t\targs.push(before);",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);",
            "",
            "\t\t\t\t\targs.push(wrapped);",
            "",
            "\t\t\t\t\tif (after) {",
            "\t\t\t\t\t\targs.push(after);",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tArray.prototype.splice.apply(strarr, args);",
            "",
            "\t\t\t\t\tif (delNum != 1)",
            "\t\t\t\t\t\t_.matchGrammar(text, strarr, grammar, i, pos, true, token);",
            "",
            "\t\t\t\t\tif (oneshot)",
            "\t\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "",
            "\ttokenize: function(text, grammar, language) {",
            "\t\tvar strarr = [text];",
            "",
            "\t\tvar rest = grammar.rest;",
            "",
            "\t\tif (rest) {",
            "\t\t\tfor (var token in rest) {",
            "\t\t\t\tgrammar[token] = rest[token];",
            "\t\t\t}",
            "",
            "\t\t\tdelete grammar.rest;",
            "\t\t}",
            "",
            "\t\t_.matchGrammar(text, strarr, grammar, 0, 0, false);",
            "",
            "\t\treturn strarr;",
            "\t},",
            "",
            "\thooks: {",
            "\t\tall: {},",
            "",
            "\t\tadd: function (name, callback) {",
            "\t\t\tvar hooks = _.hooks.all;",
            "",
            "\t\t\thooks[name] = hooks[name] || [];",
            "",
            "\t\t\thooks[name].push(callback);",
            "\t\t},",
            "",
            "\t\trun: function (name, env) {",
            "\t\t\tvar callbacks = _.hooks.all[name];",
            "",
            "\t\t\tif (!callbacks || !callbacks.length) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {",
            "\t\t\t\tcallback(env);",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "};",
            "",
            "var Token = _.Token = function(type, content, alias, matchedStr, greedy) {",
            "\tthis.type = type;",
            "\tthis.content = content;",
            "\tthis.alias = alias;",
            "\t// Copy of the full string this token was created from",
            "\tthis.length = (matchedStr || \"\").length|0;",
            "\tthis.greedy = !!greedy;",
            "};",
            "",
            "Token.stringify = function(o, language, parent) {",
            "\tif (typeof o == 'string') {",
            "\t\treturn o;",
            "\t}",
            "",
            "\tif (_.util.type(o) === 'Array') {",
            "\t\treturn o.map(function(element) {",
            "\t\t\treturn Token.stringify(element, language, o);",
            "\t\t}).join('');",
            "\t}",
            "",
            "\tvar env = {",
            "\t\ttype: o.type,",
            "\t\tcontent: Token.stringify(o.content, language, parent),",
            "\t\ttag: 'span',",
            "\t\tclasses: ['token', o.type],",
            "\t\tattributes: {},",
            "\t\tlanguage: language,",
            "\t\tparent: parent",
            "\t};",
            "",
            "\tif (o.alias) {",
            "\t\tvar aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];",
            "\t\tArray.prototype.push.apply(env.classes, aliases);",
            "\t}",
            "",
            "\t_.hooks.run('wrap', env);",
            "",
            "\tvar attributes = Object.keys(env.attributes).map(function(name) {",
            "\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';",
            "\t}).join(' ');",
            "",
            "\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';",
            "",
            "};",
            "",
            "if (!_self.document) {",
            "\tif (!_self.addEventListener) {",
            "\t\t// in Node.js",
            "\t\treturn _self.Prism;",
            "\t}",
            "",
            "\tif (!_.disableWorkerMessageHandler) {",
            "\t\t// In worker",
            "\t\t_self.addEventListener('message', function (evt) {",
            "\t\t\tvar message = JSON.parse(evt.data),",
            "\t\t\t\tlang = message.language,",
            "\t\t\t\tcode = message.code,",
            "\t\t\t\timmediateClose = message.immediateClose;",
            "",
            "\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));",
            "\t\t\tif (immediateClose) {",
            "\t\t\t\t_self.close();",
            "\t\t\t}",
            "\t\t}, false);",
            "\t}",
            "",
            "\treturn _self.Prism;",
            "}",
            "",
            "//Get current script and highlight",
            "var script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();",
            "",
            "if (script) {",
            "\t_.filename = script.src;",
            "",
            "\tif (!_.manual && !script.hasAttribute('data-manual')) {",
            "\t\tif(document.readyState !== \"loading\") {",
            "\t\t\tif (window.requestAnimationFrame) {",
            "\t\t\t\twindow.requestAnimationFrame(_.highlightAll);",
            "\t\t\t} else {",
            "\t\t\t\twindow.setTimeout(_.highlightAll, 16);",
            "\t\t\t}",
            "\t\t}",
            "\t\telse {",
            "\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);",
            "\t\t}",
            "\t}",
            "}",
            "",
            "return _self.Prism;",
            "",
            "})();",
            "",
            "if (typeof module !== 'undefined' && module.exports) {",
            "\tmodule.exports = Prism;",
            "}",
            "",
            "// hack for components to work correctly in node.js",
            "if (typeof global !== 'undefined') {",
            "\tglobal.Prism = Prism;",
            "}",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-markup.js",
            "********************************************** */",
            "",
            "Prism.languages.markup = {",
            "\t'comment': /<!--[\\s\\S]*?-->/,",
            "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
            "\t'doctype': /<!DOCTYPE[\\s\\S]+?>/i,",
            "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,",
            "\t'tag': {",
            "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'tag': {",
            "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'punctuation': /^<\\/?/,",
            "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'attr-value': {",
            "\t\t\t\tpattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'punctuation': [",
            "\t\t\t\t\t\t/^=/,",
            "\t\t\t\t\t\t{",
            "\t\t\t\t\t\t\tpattern: /(^|[^\\\\])[\"']/,",
            "\t\t\t\t\t\t\tlookbehind: true",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t]",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'punctuation': /\\/?>/,",
            "\t\t\t'attr-name': {",
            "\t\t\t\tpattern: /[^\\s>\\/]+/,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t}",
            "\t},",
            "\t'entity': /&#?[\\da-z]{1,8};/i",
            "};",
            "",
            "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
            "\tPrism.languages.markup['entity'];",
            "",
            "// Plugin to make entity title show the real entity, idea by Roman Komarov",
            "Prism.hooks.add('wrap', function(env) {",
            "",
            "\tif (env.type === 'entity') {",
            "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
            "\t}",
            "});",
            "",
            "Prism.languages.xml = Prism.languages.markup;",
            "Prism.languages.html = Prism.languages.markup;",
            "Prism.languages.mathml = Prism.languages.markup;",
            "Prism.languages.svg = Prism.languages.markup;",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-css.js",
            "********************************************** */",
            "",
            "Prism.languages.css = {",
            "\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,",
            "\t'atrule': {",
            "\t\tpattern: /@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,",
            "\t\tinside: {",
            "\t\t\t'rule': /@[\\w-]+/",
            "\t\t\t// See rest below",
            "\t\t}",
            "\t},",
            "\t'url': /url\\((?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,",
            "\t'selector': /[^{}\\s][^{};]*?(?=\\s*\\{)/,",
            "\t'string': {",
            "\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
            "\t\tgreedy: true",
            "\t},",
            "\t'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,",
            "\t'important': /\\B!important\\b/i,",
            "\t'function': /[-a-z0-9]+(?=\\()/i,",
            "\t'punctuation': /[(){};:]/",
            "};",
            "",
            "Prism.languages.css['atrule'].inside.rest = Prism.languages.css;",
            "",
            "if (Prism.languages.markup) {",
            "\tPrism.languages.insertBefore('markup', 'tag', {",
            "\t\t'style': {",
            "\t\t\tpattern: /(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.css,",
            "\t\t\talias: 'language-css',",
            "\t\t\tgreedy: true",
            "\t\t}",
            "\t});",
            "",
            "\tPrism.languages.insertBefore('inside', 'attr-value', {",
            "\t\t'style-attr': {",
            "\t\t\tpattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,",
            "\t\t\tinside: {",
            "\t\t\t\t'attr-name': {",
            "\t\t\t\t\tpattern: /^\\s*style/i,",
            "\t\t\t\t\tinside: Prism.languages.markup.tag.inside",
            "\t\t\t\t},",
            "\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,",
            "\t\t\t\t'attr-value': {",
            "\t\t\t\t\tpattern: /.+/i,",
            "\t\t\t\t\tinside: Prism.languages.css",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\talias: 'language-css'",
            "\t\t}",
            "\t}, Prism.languages.markup.tag);",
            "}",
            "",
            "/* **********************************************",
            "     Begin prism-clike.js",
            "********************************************** */",
            "",
            "Prism.languages.clike = {",
            "\t'comment': [",
            "\t\t{",
            "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
            "\t\t\tlookbehind: true",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tgreedy: true",
            "\t\t}",
            "\t],",
            "\t'string': {",
            "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
            "\t\tgreedy: true",
            "\t},",
            "\t'class-name': {",
            "\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,",
            "\t\tlookbehind: true,",
            "\t\tinside: {",
            "\t\t\tpunctuation: /[.\\\\]/",
            "\t\t}",
            "\t},",
            "\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,",
            "\t'boolean': /\\b(?:true|false)\\b/,",
            "\t'function': /[a-z0-9_]+(?=\\()/i,",
            "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
            "\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,",
            "\t'punctuation': /[{}[\\];(),.:]/",
            "};",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-javascript.js",
            "********************************************** */",
            "",
            "Prism.languages.javascript = Prism.languages.extend('clike', {",
            "\t'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,",
            "\t'number': /\\b(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,",
            "\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)",
            "\t'function': /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/i,",
            "\t'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/",
            "});",
            "",
            "Prism.languages.insertBefore('javascript', 'keyword', {",
            "\t'regex': {",
            "\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,",
            "\t\tlookbehind: true,",
            "\t\tgreedy: true",
            "\t},",
            "\t// This must be declared before keyword because we use \"function\" inside the look-forward",
            "\t'function-variable': {",
            "\t\tpattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,",
            "\t\talias: 'function'",
            "\t},",
            "\t'constant': /\\b[A-Z][A-Z\\d_]*\\b/",
            "});",
            "",
            "Prism.languages.insertBefore('javascript', 'string', {",
            "\t'template-string': {",
            "\t\tpattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'interpolation': {",
            "\t\t\t\tpattern: /\\${[^}]+}/,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'interpolation-punctuation': {",
            "\t\t\t\t\t\tpattern: /^\\${|}$/,",
            "\t\t\t\t\t\talias: 'punctuation'",
            "\t\t\t\t\t},",
            "\t\t\t\t\trest: null // See below",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'string': /[\\s\\S]+/",
            "\t\t}",
            "\t}",
            "});",
            "Prism.languages.javascript['template-string'].inside['interpolation'].inside.rest = Prism.languages.javascript;",
            "",
            "if (Prism.languages.markup) {",
            "\tPrism.languages.insertBefore('markup', 'tag', {",
            "\t\t'script': {",
            "\t\t\tpattern: /(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.javascript,",
            "\t\t\talias: 'language-javascript',",
            "\t\t\tgreedy: true",
            "\t\t}",
            "\t});",
            "}",
            "",
            "Prism.languages.js = Prism.languages.javascript;",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-file-highlight.js",
            "********************************************** */",
            "",
            "(function () {",
            "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
            "\t\treturn;",
            "\t}",
            "",
            "\tself.Prism.fileHighlight = function() {",
            "",
            "\t\tvar Extensions = {",
            "\t\t\t'js': 'javascript',",
            "\t\t\t'py': 'python',",
            "\t\t\t'rb': 'ruby',",
            "\t\t\t'ps1': 'powershell',",
            "\t\t\t'psm1': 'powershell',",
            "\t\t\t'sh': 'bash',",
            "\t\t\t'bat': 'batch',",
            "\t\t\t'h': 'c',",
            "\t\t\t'tex': 'latex'",
            "\t\t};",
            "",
            "\t\tArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {",
            "\t\t\tvar src = pre.getAttribute('data-src');",
            "",
            "\t\t\tvar language, parent = pre;",
            "\t\t\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
            "\t\t\twhile (parent && !lang.test(parent.className)) {",
            "\t\t\t\tparent = parent.parentNode;",
            "\t\t\t}",
            "",
            "\t\t\tif (parent) {",
            "\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];",
            "\t\t\t}",
            "",
            "\t\t\tif (!language) {",
            "\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];",
            "\t\t\t\tlanguage = Extensions[extension] || extension;",
            "\t\t\t}",
            "",
            "\t\t\tvar code = document.createElement('code');",
            "\t\t\tcode.className = 'language-' + language;",
            "",
            "\t\t\tpre.textContent = '';",
            "",
            "\t\t\tcode.textContent = 'Loading…';",
            "",
            "\t\t\tpre.appendChild(code);",
            "",
            "\t\t\tvar xhr = new XMLHttpRequest();",
            "",
            "\t\t\txhr.open('GET', src, true);",
            "",
            "\t\t\txhr.onreadystatechange = function () {",
            "\t\t\t\tif (xhr.readyState == 4) {",
            "",
            "\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
            "\t\t\t\t\t\tcode.textContent = xhr.responseText;",
            "",
            "\t\t\t\t\t\tPrism.highlightElement(code);",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse if (xhr.status >= 400) {",
            "\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse {",
            "\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t};",
            "",
            "\t\t\txhr.send(null);",
            "\t\t});",
            "",
            "\t\tif (Prism.plugins.toolbar) {",
            "\t\t\tPrism.plugins.toolbar.registerButton('download-file', function (env) {",
            "\t\t\t\tvar pre = env.element.parentNode;",
            "\t\t\t\tif (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {",
            "\t\t\t\t\treturn;",
            "\t\t\t\t}",
            "\t\t\t\tvar src = pre.getAttribute('data-src');",
            "\t\t\t\tvar a = document.createElement('a');",
            "\t\t\t\ta.textContent = pre.getAttribute('data-download-link-label') || 'Download';",
            "\t\t\t\ta.setAttribute('download', '');",
            "\t\t\t\ta.href = src;",
            "\t\t\t\treturn a;",
            "\t\t\t});",
            "\t\t}",
            "",
            "\t};",
            "",
            "\tdocument.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);",
            "",
            "})();"
        ]
    },
    "style.css": {},
    "test-suite.html": {},
    "test.html": {},
    "utopia.js": {
        "classes": [],
        "functions": [],
        "text": [
            "/**",
            " * Utopia: A JavaScript util library that assumes modern standards support and doesn't fix any browser bugs",
            " * @author Lea Verou (http://lea.verou.me)",
            " * MIT license (http://www.opensource.org/licenses/mit-license.php)",
            " * Last update: 2012-4-29",
            " */",
            " ",
            "function $(expr, con) {",
            "\treturn typeof expr === 'string'? (con || document).querySelector(expr) : expr;",
            "}",
            "",
            "function $$(expr, con) {",
            "\tvar elements = (con || document).querySelectorAll(expr);",
            "\t",
            "\ttry {",
            "\t\treturn Array.prototype.slice.call(elements);",
            "\t}",
            "\tcatch(e) {",
            "\t\tvar arr = Array(elements.length);",
            "\t    ",
            "\t    for (var i = elements.length; i-- > 0;) {",
            "\t\t\tarr[i] = elements[i];",
            "\t\t}",
            "\t\t",
            "\t\treturn arr;",
            "\t}",
            "}",
            "",
            "if (!Array.prototype.forEach) {",
            "\tArray.prototype.forEach = function(fn, scope) {",
            "\t\tfor (var i = 0, len = this.length; i < len; ++i) {",
            "\t\t\tfn.call(scope || this, this[i], i, this);",
            "\t\t}",
            "\t}",
            "}",
            "",
            "// Make each ID a global variable",
            "// Many browsers do this anyway (it’s in the HTML5 spec), so it ensures consistency",
            "$$('[id]').forEach(function(element) { window[element.id] = element; });",
            "",
            "// Array#splice but for strings",
            "String.prototype.splice = function(i, remove, add) {",
            "\tremove = +remove || 0;",
            "\tadd = add || '';",
            "\t",
            "\treturn this.slice(0,i) + add + this.slice(i + remove);",
            "};",
            "",
            "(function(){",
            "",
            "var _ = window.Utopia = {",
            "\t/**",
            "\t * Returns the [[Class]] of an object in lowercase (eg. array, date, regexp, string etc)",
            "\t * Caution: Results for DOM elements and collections aren't reliable.",
            "\t * @param {Object} obj",
            "\t *",
            "\t * @return {String}",
            "\t */",
            "\ttype: function(obj) {",
            "\t\tif(obj === null) { return 'null'; }",
            "",
            "\t\tif(obj === undefined) { return 'undefined'; }",
            "",
            "\t\tvar ret = Object.prototype.toString.call(obj).match(/^\\[object\\s+(.*?)\\]$/)[1];",
            "",
            "\t\tret = ret? ret.toLowerCase() : '';",
            "",
            "\t\tif(ret == 'number' && isNaN(obj)) {",
            "\t\t\treturn 'NaN';",
            "\t\t}",
            "",
            "\t\treturn ret;",
            "\t},",
            "",
            "\t/**",
            "\t * Iterate over the properties of an object. Checks whether the properties actually belong to it.",
            "\t * Can be stopped if the function explicitly returns a value that isn't null, undefined or NaN.",
            "\t * ",
            "\t * @param obj {Object} The object to iterate over",
            "\t * @param func {Function} The function used in the iteration. Can accept 2 parameters: one of the",
            "\t * \t\t\t\t\t\t\tvalue of the object and one for its name.",
            "\t * @param context {Object} Context for the above function. Default is the object being iterated.",
            "\t *",
            "\t * @return {Object} Null or the return value of func, if it broke the loop at some point.",
            "\t */",
            "\teach: function(obj, func, context) {",
            "\t\tif(!_.type(func) == 'function') {",
            "\t\t\tthrow Error('The second argument in Utopia.each() must be a function');",
            "\t\t};",
            "",
            "\t\tcontext = context || obj;",
            "",
            "\t\tfor (var i in obj) {",
            "\t\t\tif(obj.hasOwnProperty && obj.hasOwnProperty(i)) {",
            "\t\t\t\tvar ret = func.call(context, obj[i], i);",
            "",
            "\t\t\t\tif(!!ret || ret === 0 || ret === '') {",
            "\t\t\t\t\treturn ret;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\treturn null;",
            "\t},",
            "",
            "\t/**",
            "\t * Copies the properties of one object onto another.",
            "\t * When there is a collision, the later one wins",
            "\t *",
            "\t * @return {Object} destination object",
            "\t */",
            "\tmerge: function(objects) {",
            "\t\tvar ret = {};",
            "\t\t",
            "\t\tfor(var i=0; i<arguments.length; i++) {",
            "\t\t\tvar o = arguments[i];",
            "\t\t\t",
            "\t\t\tfor(var j in o) {",
            "\t\t\t\tret[j] = o[j];",
            "\t\t\t}",
            "\t\t}",
            "\t\t",
            "\t\treturn ret;",
            "\t},",
            "\t",
            "\t/**",
            "\t * Copies the properties of one or more objects onto the first one",
            "\t * When there is a collision, the first object wins",
            "\t */",
            "\tattach: function(object, objects) {",
            "\t\tfor(var i=0; i<arguments.length; i++) {",
            "\t\t\tvar o = arguments[i];",
            "\t\t\t",
            "\t\t\tfor(var j in o) {",
            "\t\t\t\tif(!(j in object)) {",
            "\t\t\t\t\tobject[j] = o[j];",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\t",
            "\t\treturn object;",
            "\t},",
            "\t",
            "\telement: {",
            "\t\t/**",
            "\t\t * Creates a new DOM element",
            "\t\t * @param options {Object} A set of key/value pairs for attributes, properties, contents, placement in the DOM etc",
            "\t\t * @return The new DOM element",
            "\t\t */",
            "\t\tcreate: function() {",
            "\t\t\tvar options;",
            "",
            "\t\t\tif(_.type(arguments[0]) === 'string') {",
            "\t\t\t\tif(_.type(arguments[1]) === 'object') {",
            "\t\t\t\t\t// Utopia.element.create('div', { ... });",
            "\t\t\t\t\toptions = arguments[1];",
            "\t\t\t\t\toptions.tag = arguments[0];",
            "\t\t\t\t}",
            "\t\t\t\telse {",
            "\t\t\t\t\t// Utopia.element.create('div', ...);",
            "\t\t\t\t\toptions = {",
            "\t\t\t\t\t\ttag: arguments[0]",
            "\t\t\t\t\t};",
            "\t\t\t\t\t",
            "\t\t\t\t\t// Utopia.element.create('div', [contents]);",
            "\t\t\t\t\tif(_.type(arguments[1]) === 'array') {",
            "\t\t\t\t\t\toptions.contents = arguments[1];",
            "\t\t\t\t\t}",
            "\t\t\t\t\t// Utopia.element.create('div', 'Text contents');",
            "\t\t\t\t\telse if(_.type(arguments[1]) === 'string' || _.type(arguments[1]) === 'number') {",
            "\t\t\t\t\t\toptions.contents = ['' + arguments[1]];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\telse {",
            "\t\t\t\toptions = arguments[0];",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\tvar namespace = options.namespace || '', element;",
            "\t\t\t",
            "\t\t\tif(namespace) {",
            "\t\t\t\telement = document.createElementNS(namespace, options.tag);",
            "\t\t\t}",
            "\t\t\telse {",
            "\t\t\t\telement = document.createElement(options.tag);",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\tif (options.className || options.id) {",
            "\t\t\t\toptions.properties = options.properties || {};",
            "\t\t\t\toptions.properties.className = options.className;",
            "\t\t\t\toptions.properties.id = options.id;",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\t// Set properties, attributes and contents",
            "\t\t\t_.element.set(element, options);",
            "\t\t\t",
            "\t\t\t// Place the element in the DOM (inside, before or after an existing element)",
            "\t\t\t// This could be a selector",
            "\t\t\tif(options.before) {",
            "\t\t\t\tvar before = $(options.before);",
            "\t\t\t\t",
            "\t\t\t\tif (before && before.parentNode) {",
            "\t\t\t\t\tbefore.parentNode.insertBefore(element, before);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\tif (options.after && element.parentNode === null) {",
            "\t\t\t\tvar after = $(options.after);",
            "\t\t\t\t",
            "\t\t\t\tif (after && after.parentNode) {",
            "\t\t\t\t\tafter.parentNode.insertBefore(element, after.nextSibling)",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\tif (options.inside && element.parentNode === null) {",
            "\t\t\t\t$(options.inside).appendChild(element);",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\treturn element;",
            "\t\t},",
            "\t\t",
            "\t\tset: function(element, options) {",
            "\t\t\t_.element.prop(element, options.properties || options.prop);",
            "\t\t\t\t\t",
            "\t\t\t_.element.attr(element, options.attributes || options.attr);",
            "\t\t\t",
            "\t\t\t_.element.contents(element, options.contents);",
            "\t",
            "\t\t\treturn element;",
            "\t\t},",
            "\t\t",
            "\t\tprop: function (element, properties) {",
            "\t\t\tif (properties) {",
            "\t\t\t\tfor (var prop in properties) {",
            "\t\t\t\t\telement[prop] = properties[prop];",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\treturn element;",
            "\t\t},",
            "\t\t",
            "\t\tattr: function (element, attributes) {",
            "\t\t\tif (attributes) {",
            "\t\t\t\tfor (attr in attributes) {",
            "\t\t\t\t\telement.setAttribute(attr, attributes[attr]);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\treturn element;",
            "\t\t},",
            "\t\t",
            "\t\t/**",
            "\t\t * Sets an element’s contents",
            "\t\t * Contents could be: One or multiple (as an array) of the following:",
            "\t\t *\t\t\t- An object literal that will be passed through Utopia.element.create",
            "\t\t *\t\t\t- A string or number, which will become a text node",
            "\t\t *\t\t\t- An existing DOM element",
            "\t\t */",
            "\t\tcontents: function (element, contents, where) {",
            "\t\t\tif(contents || contents === 0) {",
            "\t\t\t\tif (_.type(contents) !== 'array') {",
            "\t\t\t\t\tcontents = [contents];",
            "\t\t\t\t}",
            "\t\t\t\t",
            "\t\t\t\tvar firstChild = element.firstChild;",
            "\t\t\t\t",
            "\t\t\t\tfor (var i=0; i<contents.length; i++) {",
            "\t\t\t\t\tvar content = contents[i], child;",
            "\t\t\t\t\t",
            "\t\t\t\t\tswitch(_.type(content)) {",
            "\t\t\t\t\t\tcase 'string':",
            "\t\t\t\t\t\t\tif(content === '') {",
            "\t\t\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\t// fall through",
            "\t\t\t\t\t\tcase 'number':",
            "\t\t\t\t\t\t\tchild = document.createTextNode(content);",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tcase 'object':",
            "\t\t\t\t\t\t\tchild = _.element.create(content);",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tdefault:",
            "\t\t\t\t\t\t\tchild = content;",
            "",
            "\t\t\t\t\t}",
            "\t\t\t\t\t",
            "\t\t\t\t\tif(child) {",
            "\t\t\t\t\t\tif (!where || where === 'end') {",
            "\t\t\t\t\t\t\telement.appendChild(child);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\telse if (where === 'start') {",
            "\t\t\t\t\t\t\telement.insertBefore(child, firstChild);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "\t\t\t\t}\t",
            "\t\t\t}",
            "\t\t\t",
            "\t\t\treturn element;",
            "\t\t}",
            "\t},",
            "\t",
            "\telements: {",
            "\t\t// set, attr, prop, contents functions from Utopia.element, but for multiple elements",
            "\t},",
            "\t",
            "\tevent: {",
            "\t\t/**",
            "\t\t * Binds one or more events to one or more elements",
            "\t\t */",
            "\t\tbind: function(target, event, callback, traditional) {",
            "\t\t\tif(_.type(target) === 'string' || _.type(target) === 'array') {",
            "\t\t\t\tvar elements = _.type(target) === 'string'? $$(target) : target;",
            "\t\t\t\t",
            "\t\t\t\telements.forEach(function(element) {",
            "\t\t\t\t\t_.event.bind(element, event, callback, traditional);",
            "\t\t\t\t});",
            "\t\t\t}",
            "\t\t\telse if(_.type(event) === 'string') {",
            "\t\t\t\tif(traditional) {",
            "\t\t\t\t\ttarget['on' + event] = callback;",
            "\t\t\t\t}",
            "\t\t\t\telse {",
            "\t\t\t\t\ttarget.addEventListener(event, callback, false);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\telse if(_.type(event) === 'array') {",
            "\t\t\t\tfor (var i=0; i<event.length; i++) {",
            "\t\t\t\t\t_.event.bind(target, event[i], callback, arguments[2]);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\telse {",
            "\t\t\t\tfor (var name in event) {",
            "\t\t\t\t\t_.event.bind(target, name, event[name], arguments[2]);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t},",
            "\t\t",
            "\t\t/**",
            "\t\t * Fire a custom event",
            "\t\t */",
            "\t\tfire: function(target, type, properties) {",
            "\t\t\tif(_.type(target) === 'string' || _.type(target) === 'array') {",
            "\t\t\t\tvar elements = _.type(target) === 'string'? $$(target) : target;",
            "\t\t\t\t",
            "\t\t\t\telements.forEach(function(element) {",
            "\t\t\t\t\t_.event.fire(element, type, properties);",
            "\t\t\t\t});",
            "\t\t\t}",
            "\t\t\telse if (document.createEvent) {",
            "\t\t\t\tvar evt = document.createEvent(\"HTMLEvents\");",
            "\t\t",
            "\t\t\t\tevt.initEvent(type, true, true );",
            "\t\t\t\tevt.custom = true;",
            "\t\t",
            "\t\t\t\tif(properties) {",
            "\t\t\t\t\t_.attach(evt, properties);",
            "\t\t\t\t}",
            "\t\t",
            "\t\t\t\ttarget.dispatchEvent(evt);",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "\t",
            "\t/**",
            "\t * Helper for XHR requests",
            "\t */",
            "\txhr: function(o) {",
            "\t\tdocument.body.setAttribute('data-loading', '');",
            "\t\t",
            "\t\tvar xhr = new XMLHttpRequest(),",
            "\t\t\tmethod = o.method || 'GET',",
            "\t\t\tdata = o.data || '';",
            "\t\t",
            "\t\txhr.open(method, o.url + (method === 'GET' && data? '?' + data : ''), true);",
            "\t\t",
            "\t\to.headers = o.headers || {};",
            "\t\t",
            "\t\tif(method !== 'GET' && !o.headers['Content-type'] && !o.headers['Content-Type']) {",
            "\t\t\txhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");",
            "\t\t}",
            "\t\t",
            "\t\tfor (var header in o.headers) {",
            "\t\t\txhr.setRequestHeader(header, o.headers[header]);",
            "\t\t}",
            "\t\t",
            "\t\txhr.onreadystatechange = function(){",
            "\t\t\t",
            "\t\t\tif(xhr.readyState === 4) {",
            "\t\t\t\tdocument.body.removeAttribute('data-loading');",
            "\t\t\t\t",
            "\t\t\t\to.callback(xhr);",
            "\t\t\t}",
            "\t\t};",
            "\t\t",
            "\t\txhr.send(method === 'GET'? null : data);",
            "\t",
            "\t\treturn xhr;",
            "\t},",
            "\t",
            "\t/**",
            "\t * Lazy loads an external script",
            "\t */",
            "\tscript: function(url, callback, doc) {",
            "\t\tdoc = doc || document;",
            "\t\t",
            "\t\treturn _.element.create({",
            "\t\t\ttag: 'script',",
            "\t\t\tproperties: {",
            "\t\t\t\tsrc: url,",
            "\t\t\t\tasync: true,",
            "\t\t\t\tonload: callback",
            "\t\t\t},",
            "\t\t\tinside: doc.documentElement",
            "\t\t});",
            "\t},",
            "\t",
            "\t/**",
            "\t * Returns the absolute X, Y offsets for an element",
            "\t */",
            "\toffset: function(element) {",
            "\t    var left = 0, top = 0, el = element;",
            "\t    ",
            "\t    if (el.parentNode) {",
            "\t\t\tdo {",
            "\t\t\t\tleft += el.offsetLeft;",
            "\t\t\t\ttop += el.offsetTop;",
            "\t\t\t} while ((el = el.offsetParent) && el.nodeType < 9);",
            "\t\t\t",
            "\t\t\tel = element;",
            "\t\t\t",
            "\t\t\tdo {",
            "\t\t\t\tleft -= el.scrollLeft;",
            "\t\t\t\ttop -= el.scrollTop;",
            "\t\t\t} while ((el = el.parentNode) && !/body/i.test(el.nodeName));",
            "\t\t}",
            "\t",
            "\t    return {",
            "\t\t\ttop: top,",
            "\t    \tright: innerWidth - left - element.offsetWidth,",
            "\t    \tbottom: innerHeight - top - element.offsetHeight,",
            "\t    \tleft: left,",
            "\t    };",
            "\t}",
            "};",
            "",
            "['set', 'prop', 'attr', 'contents'].forEach(function(method) {",
            "\t_.elements[method] = function(elements) {",
            "\t\telements = _.type(elements) === 'string'? $$(elements) : Array.prototype.slice.call(elements);",
            "\t\t",
            "\t\tvar args = Array.prototype.slice.call(arguments);",
            "\t\targs.shift(); // Remove the elements argument",
            "\t\t",
            "\t\telements = elements.map(function(element) {",
            "\t\t\treturn _.element[method](element, args);",
            "\t\t});",
            "\t\t",
            "\t\treturn elements;",
            "\t}",
            "});",
            "",
            "})();",
            "",
            "window.$u = window.$u || Utopia;"
        ]
    },
    "components": {
        "index.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var components = require('../components.js');",
                "var peerDependentsMap = null;",
                "",
                "function getPeerDependentsMap() {",
                "\tvar peerDependentsMap = {};",
                "\tObject.keys(components.languages).forEach(function (language) {",
                "\t\tif (language === 'meta') {",
                "\t\t\treturn false;",
                "\t\t}",
                "\t\tif (components.languages[language].peerDependencies) {",
                "\t\t\tvar peerDependencies = components.languages[language].peerDependencies;",
                "\t\t\tif (!Array.isArray(peerDependencies)) {",
                "\t\t\t\tpeerDependencies = [peerDependencies];",
                "\t\t\t}",
                "\t\t\tpeerDependencies.forEach(function (peerDependency) {",
                "\t\t\t\tif (!peerDependentsMap[peerDependency]) {",
                "\t\t\t\t\tpeerDependentsMap[peerDependency] = [];",
                "\t\t\t\t}",
                "\t\t\t\tpeerDependentsMap[peerDependency].push(language);",
                "\t\t\t});",
                "\t\t}",
                "\t});",
                "\treturn peerDependentsMap;",
                "}",
                "",
                "function getPeerDependents(mainLanguage) {",
                "\tif (!peerDependentsMap) {",
                "\t\tpeerDependentsMap = getPeerDependentsMap();",
                "\t}",
                "\treturn peerDependentsMap[mainLanguage] || [];",
                "}",
                "",
                "function loadLanguages(arr, withoutDependencies) {",
                "\t// If no argument is passed, load all components",
                "\tif (!arr) {",
                "\t\tarr = Object.keys(components.languages).filter(function (language) {",
                "\t\t\treturn language !== 'meta';",
                "\t\t});",
                "\t}",
                "\tif (arr && !arr.length) {",
                "\t\treturn;",
                "\t}",
                "",
                "\tif (!Array.isArray(arr)) {",
                "\t\tarr = [arr];",
                "\t}",
                "",
                "\tarr.forEach(function (language) {",
                "\t\tif (!components.languages[language]) {",
                "\t\t\tconsole.warn('Language does not exist ' + language);",
                "\t\t\treturn;",
                "\t\t}",
                "\t\t// Load dependencies first",
                "\t\tif (!withoutDependencies && components.languages[language].require) {",
                "\t\t\tloadLanguages(components.languages[language].require);",
                "\t\t}",
                "",
                "\t\tvar pathToLanguage = './prism-' + language;",
                "\t\tdelete require.cache[require.resolve(pathToLanguage)];",
                "\t\tdelete Prism.languages[language];",
                "\t\trequire(pathToLanguage);",
                "",
                "\t\t// Reload dependents",
                "\t\tvar dependents = getPeerDependents(language).filter(function (dependent) {",
                "\t\t\t// If dependent language was already loaded,",
                "\t\t\t// we want to reload it.",
                "\t\t\tif (Prism.languages[dependent]) {",
                "\t\t\t\tdelete Prism.languages[dependent];",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t\tif (dependents.length) {",
                "\t\t\tloadLanguages(dependents, true);",
                "\t\t}",
                "\t});",
                "}",
                "",
                "module.exports = function (arr) {",
                "\t// Don't expose withoutDependencies",
                "\tloadLanguages(arr);",
                "};"
            ]
        },
        "prism-abap.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.abap = {",
                "\t'comment': /^\\*.*/m,",
                "\t'string' : /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,",
                "\t'string-template': {",
                "\t\tpattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t/* End Of Line comments should not interfere with strings when the  ",
                "\tquote character occurs within them. We assume a string being highlighted",
                "\tinside an EOL comment is more acceptable than the opposite.",
                "\t*/",
                "\t'eol-comment': {",
                "\t\tpattern: /(^|\\s)\".*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'keyword' : {",
                "\t\tpattern: /(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t/* Numbers can be only integers. Decimal or Hex appear only as strings */",
                "\t'number' : /\\b\\d+\\b/,",
                "\t/* Operators must always be surrounded by whitespace, they cannot be put ",
                "\tadjacent to operands. ",
                "\t*/",
                "\t'operator' : {",
                "\t\tpattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string-operator' : {",
                "\t\tpattern: /(\\s)&&?(?=\\s)/,",
                "\t\tlookbehind: true,",
                "\t\t/* The official editor highlights */",
                "\t\talias: \"keyword\"",
                "\t},",
                "\t'token-operator' : [{",
                "\t\t/* Special operators used to access structure components, class methods/attributes, etc. */",
                "\t\tpattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,",
                "\t\tlookbehind: true,",
                "\t\talias: \"punctuation\"",
                "\t}, {",
                "\t    /* Special tokens used do delimit string templates */",
                "\t    pattern: /[|{}]/,",
                "\t\talias: \"punctuation\"",
                "\t}],",
                "\t'punctuation' : /[,.:()]/",
                "};"
            ]
        },
        "prism-abap.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.abap={comment:/^\\*.*/m,string:/(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\"string-template\":{pattern:/([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,lookbehind:!0,alias:\"string\"},\"eol-comment\":{pattern:/(^|\\s)\".*/m,lookbehind:!0,alias:\"comment\"},keyword:{pattern:/(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,lookbehind:!0},number:/\\b\\d+\\b/,operator:{pattern:/(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,lookbehind:!0},\"string-operator\":{pattern:/(\\s)&&?(?=\\s)/,lookbehind:!0,alias:\"keyword\"},\"token-operator\":[{pattern:/(\\w)(?:->?|=>|[~|{}])(?=\\w)/,lookbehind:!0,alias:\"punctuation\"},{pattern:/[|{}]/,alias:\"punctuation\"}],punctuation:/[,.:()]/};"
            ]
        },
        "prism-actionscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.actionscript = Prism.languages.extend('javascript',  {",
                "\t'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,",
                "\t'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/",
                "});",
                "Prism.languages.actionscript['class-name'].alias = 'function';",
                "",
                "if (Prism.languages.markup) {",
                "\tPrism.languages.insertBefore('actionscript', 'string', {",
                "\t\t'xml': {",
                "\t\t\tpattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.markup",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "}"
            ]
        },
        "prism-actionscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.actionscript=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,operator:/\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/}),Prism.languages.actionscript[\"class-name\"].alias=\"function\",Prism.languages.markup&&Prism.languages.insertBefore(\"actionscript\",\"string\",{xml:{pattern:/(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,lookbehind:!0,inside:{rest:Prism.languages.markup}}});"
            ]
        },
        "prism-ada.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ada = {",
                "\t'comment': /--.*/,",
                "\t'string': /\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,",
                "\t'number': [",
                "\t\t{",
                "\t\t\tpattern: /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i",
                "\t\t}",
                "\t],",
                "\t'attr-name': /\\b'\\w+/i,",
                "\t'keyword': /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'operator': /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,",
                "\t'punctuation': /\\.\\.?|[,;():]/,",
                "\t'char': /'.'/,",
                "\t'variable': /\\b[a-z](?:[_a-z\\d])*\\b/i",
                "};"
            ]
        },
        "prism-ada.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ada={comment:/--.*/,string:/\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,number:[{pattern:/\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i},{pattern:/\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i}],\"attr-name\":/\\b'\\w+/i,keyword:/\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,\"boolean\":/\\b(?:true|false)\\b/i,operator:/<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,punctuation:/\\.\\.?|[,;():]/,\"char\":/'.'/,variable:/\\b[a-z](?:[_a-z\\d])*\\b/i};"
            ]
        },
        "prism-apacheconf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apacheconf = {",
                "\t'comment': /#.*/,",
                "\t'directive-inline': {",
                "\t\tpattern: /^(\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|AddAlt|AddAltByEncoding|AddAltByType|AddCharset|AddDefaultCharset|AddDescription|AddEncoding|AddHandler|AddIcon|AddIconByEncoding|AddIconByType|AddInputFilter|AddLanguage|AddModuleInfo|AddOutputFilter|AddOutputFilterByType|AddType|Alias|AliasMatch|Allow|AllowCONNECT|AllowEncodedSlashes|AllowMethods|AllowOverride|AllowOverrideList|Anonymous|Anonymous_LogEmail|Anonymous_MustGiveEmail|Anonymous_NoUserID|Anonymous_VerifyEmail|AsyncRequestWorkerFactor|AuthBasicAuthoritative|AuthBasicFake|AuthBasicProvider|AuthBasicUseDigestAlgorithm|AuthDBDUserPWQuery|AuthDBDUserRealmQuery|AuthDBMGroupFile|AuthDBMType|AuthDBMUserFile|AuthDigestAlgorithm|AuthDigestDomain|AuthDigestNonceLifetime|AuthDigestProvider|AuthDigestQop|AuthDigestShmemSize|AuthFormAuthoritative|AuthFormBody|AuthFormDisableNoStore|AuthFormFakeBasicAuth|AuthFormLocation|AuthFormLoginRequiredLocation|AuthFormLoginSuccessLocation|AuthFormLogoutLocation|AuthFormMethod|AuthFormMimetype|AuthFormPassword|AuthFormProvider|AuthFormSitePassphrase|AuthFormSize|AuthFormUsername|AuthGroupFile|AuthLDAPAuthorizePrefix|AuthLDAPBindAuthoritative|AuthLDAPBindDN|AuthLDAPBindPassword|AuthLDAPCharsetConfig|AuthLDAPCompareAsUser|AuthLDAPCompareDNOnServer|AuthLDAPDereferenceAliases|AuthLDAPGroupAttribute|AuthLDAPGroupAttributeIsDN|AuthLDAPInitialBindAsUser|AuthLDAPInitialBindPattern|AuthLDAPMaxSubGroupDepth|AuthLDAPRemoteUserAttribute|AuthLDAPRemoteUserIsDN|AuthLDAPSearchAsUser|AuthLDAPSubGroupAttribute|AuthLDAPSubGroupClass|AuthLDAPUrl|AuthMerging|AuthName|AuthnCacheContext|AuthnCacheEnable|AuthnCacheProvideFor|AuthnCacheSOCache|AuthnCacheTimeout|AuthnzFcgiCheckAuthnProvider|AuthnzFcgiDefineProvider|AuthType|AuthUserFile|AuthzDBDLoginToReferer|AuthzDBDQuery|AuthzDBDRedirectQuery|AuthzDBMType|AuthzSendForbiddenOnFailure|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|CacheDefaultExpire|CacheDetailHeader|CacheDirLength|CacheDirLevels|CacheDisable|CacheEnable|CacheFile|CacheHeader|CacheIgnoreCacheControl|CacheIgnoreHeaders|CacheIgnoreNoLastMod|CacheIgnoreQueryString|CacheIgnoreURLSessionIdentifiers|CacheKeyBaseURL|CacheLastModifiedFactor|CacheLock|CacheLockMaxAge|CacheLockPath|CacheMaxExpire|CacheMaxFileSize|CacheMinExpire|CacheMinFileSize|CacheNegotiatedDocs|CacheQuickHandler|CacheReadSize|CacheReadTime|CacheRoot|CacheSocache|CacheSocacheMaxSize|CacheSocacheMaxTime|CacheSocacheMinTime|CacheSocacheReadSize|CacheSocacheReadTime|CacheStaleOnError|CacheStoreExpired|CacheStoreNoStore|CacheStorePrivate|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|DeflateBufferSize|DeflateCompressionLevel|DeflateFilterNote|DeflateInflateLimitRequestBody|DeflateInflateRatioBurst|DeflateInflateRatioLimit|DeflateMemLevel|DeflateWindowSize|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|HeartbeatAddress|HeartbeatListen|HeartbeatMaxServers|HeartbeatStorage|HeartbeatStorage|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|IndexHeadInsert|IndexIgnore|IndexIgnoreReset|IndexOptions|IndexOrderDefault|IndexStyleSheet|InputSed|ISAPIAppendLogToErrors|ISAPIAppendLogToQuery|ISAPICacheFile|ISAPIFakeAsync|ISAPILogNotSupported|ISAPIReadAheadBuffer|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAPCacheEntries|LDAPCacheTTL|LDAPConnectionPoolTTL|LDAPConnectionTimeout|LDAPLibraryDebug|LDAPOpCacheEntries|LDAPOpCacheTTL|LDAPReferralHopLimit|LDAPReferrals|LDAPRetries|LDAPRetryDelay|LDAPSharedCacheFile|LDAPSharedCacheSize|LDAPTimeout|LDAPTrustedClientCert|LDAPTrustedGlobalCert|LDAPTrustedMode|LDAPVerifyServerCert|LimitInternalRecursion|LimitRequestBody|LimitRequestFields|LimitRequestFieldSize|LimitRequestLine|LimitXMLRequestBody|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|LuaHookAccessChecker|LuaHookAuthChecker|LuaHookCheckUserID|LuaHookFixups|LuaHookInsertFilter|LuaHookLog|LuaHookMapToStorage|LuaHookTranslateName|LuaHookTypeChecker|LuaInherit|LuaInputFilter|LuaMapHandler|LuaOutputFilter|LuaPackageCPath|LuaPackagePath|LuaQuickHandler|LuaRoot|LuaScope|MaxConnectionsPerChild|MaxKeepAliveRequests|MaxMemFree|MaxRangeOverlaps|MaxRangeReversals|MaxRanges|MaxRequestWorkers|MaxSpareServers|MaxSpareThreads|MaxThreads|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|ProxyAddHeaders|ProxyBadHeader|ProxyBlock|ProxyDomain|ProxyErrorOverride|ProxyExpressDBMFile|ProxyExpressDBMType|ProxyExpressEnable|ProxyFtpDirCharset|ProxyFtpEscapeWildcards|ProxyFtpListOnWildcard|ProxyHTMLBufSize|ProxyHTMLCharsetOut|ProxyHTMLDocType|ProxyHTMLEnable|ProxyHTMLEvents|ProxyHTMLExtended|ProxyHTMLFixups|ProxyHTMLInterp|ProxyHTMLLinks|ProxyHTMLMeta|ProxyHTMLStripComments|ProxyHTMLURLMap|ProxyIOBufferSize|ProxyMaxForwards|ProxyPass|ProxyPassInherit|ProxyPassInterpolateEnv|ProxyPassMatch|ProxyPassReverse|ProxyPassReverseCookieDomain|ProxyPassReverseCookiePath|ProxyPreserveHost|ProxyReceiveBufferSize|ProxyRemote|ProxyRemoteMatch|ProxyRequests|ProxySCGIInternalRedirect|ProxySCGISendfile|ProxySet|ProxySourceAddress|ProxyStatus|ProxyTimeout|ProxyVia|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIPHeader|RemoteIPInternalProxy|RemoteIPInternalProxyList|RemoteIPProxiesHeader|RemoteIPTrustedProxy|RemoteIPTrustedProxyList|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|RewriteBase|RewriteCond|RewriteEngine|RewriteMap|RewriteOptions|RewriteRule|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script|ScriptAlias|ScriptAliasMatch|ScriptInterpreterSource|ScriptLog|ScriptLogBuffer|ScriptLogLength|ScriptSock|SecureListen|SeeRequestTail|SendBufferSize|ServerAdmin|ServerAlias|ServerLimit|ServerName|ServerPath|ServerRoot|ServerSignature|ServerTokens|Session|SessionCookieName|SessionCookieName2|SessionCookieRemove|SessionCryptoCipher|SessionCryptoDriver|SessionCryptoPassphrase|SessionCryptoPassphraseFile|SessionDBDCookieName|SessionDBDCookieName2|SessionDBDCookieRemove|SessionDBDDeleteLabel|SessionDBDInsertLabel|SessionDBDPerUser|SessionDBDSelectLabel|SessionDBDUpdateLabel|SessionEnv|SessionExclude|SessionHeader|SessionInclude|SessionMaxAge|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSLCACertificateFile|SSLCACertificatePath|SSLCADNRequestFile|SSLCADNRequestPath|SSLCARevocationCheck|SSLCARevocationFile|SSLCARevocationPath|SSLCertificateChainFile|SSLCertificateFile|SSLCertificateKeyFile|SSLCipherSuite|SSLCompression|SSLCryptoDevice|SSLEngine|SSLFIPS|SSLHonorCipherOrder|SSLInsecureRenegotiation|SSLOCSPDefaultResponder|SSLOCSPEnable|SSLOCSPOverrideResponder|SSLOCSPResponderTimeout|SSLOCSPResponseMaxAge|SSLOCSPResponseTimeSkew|SSLOCSPUseRequestNonce|SSLOpenSSLConfCmd|SSLOptions|SSLPassPhraseDialog|SSLProtocol|SSLProxyCACertificateFile|SSLProxyCACertificatePath|SSLProxyCARevocationCheck|SSLProxyCARevocationFile|SSLProxyCARevocationPath|SSLProxyCheckPeerCN|SSLProxyCheckPeerExpire|SSLProxyCheckPeerName|SSLProxyCipherSuite|SSLProxyEngine|SSLProxyMachineCertificateChainFile|SSLProxyMachineCertificateFile|SSLProxyMachineCertificatePath|SSLProxyProtocol|SSLProxyVerify|SSLProxyVerifyDepth|SSLRandomSeed|SSLRenegBufferSize|SSLRequire|SSLRequireSSL|SSLSessionCache|SSLSessionCacheTimeout|SSLSessionTicketKeyFile|SSLSRPUnknownUserSeed|SSLSRPVerifierFile|SSLStaplingCache|SSLStaplingErrorCacheTimeout|SSLStaplingFakeTryLater|SSLStaplingForceURL|SSLStaplingResponderTimeout|SSLStaplingResponseMaxAge|SSLStaplingResponseTimeSkew|SSLStaplingReturnResponderErrors|SSLStaplingStandardCacheTimeout|SSLStrictSNIVHostCheck|SSLUserName|SSLUseStapling|SSLVerifyClient|SSLVerifyDepth|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|VirtualDocumentRoot|VirtualDocumentRootIP|VirtualScriptAlias|VirtualScriptAliasIP|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/mi,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property'",
                "\t},",
                "\t'directive-block': {",
                "\t\tpattern: /<\\/?\\b(?:AuthnProviderAlias|AuthzProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|RequireAll|RequireAny|RequireNone|VirtualHost)\\b *.*>/i,",
                "\t\tinside: {",
                "\t\t\t'directive-block': {",
                "\t\t\t\tpattern: /^<\\/?\\w+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/",
                "\t\t\t\t},",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\t'directive-block-parameter': {",
                "\t\t\t\tpattern: /.*[^>]/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t\t'string': {",
                "\t\t\t\t\t\tpattern: /(\"|').*\\1/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\talias: 'attr-value'",
                "\t\t\t},",
                "\t\t\t'punctuation': />/",
                "\t\t},",
                "\t\talias: 'tag'",
                "\t},",
                "\t'directive-flags': {",
                "\t\tpattern: /\\[(?:\\w,?)+\\]/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|').*\\1/,",
                "\t\tinside: {",
                "\t\t\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/",
                "\t\t}",
                "\t},",
                "\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,",
                "\t'regex': /\\^?.*\\$|\\^.*\\$?/",
                "};"
            ]
        },
        "prism-apacheconf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apacheconf={comment:/#.*/,\"directive-inline\":{pattern:/^(\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|AddAlt|AddAltByEncoding|AddAltByType|AddCharset|AddDefaultCharset|AddDescription|AddEncoding|AddHandler|AddIcon|AddIconByEncoding|AddIconByType|AddInputFilter|AddLanguage|AddModuleInfo|AddOutputFilter|AddOutputFilterByType|AddType|Alias|AliasMatch|Allow|AllowCONNECT|AllowEncodedSlashes|AllowMethods|AllowOverride|AllowOverrideList|Anonymous|Anonymous_LogEmail|Anonymous_MustGiveEmail|Anonymous_NoUserID|Anonymous_VerifyEmail|AsyncRequestWorkerFactor|AuthBasicAuthoritative|AuthBasicFake|AuthBasicProvider|AuthBasicUseDigestAlgorithm|AuthDBDUserPWQuery|AuthDBDUserRealmQuery|AuthDBMGroupFile|AuthDBMType|AuthDBMUserFile|AuthDigestAlgorithm|AuthDigestDomain|AuthDigestNonceLifetime|AuthDigestProvider|AuthDigestQop|AuthDigestShmemSize|AuthFormAuthoritative|AuthFormBody|AuthFormDisableNoStore|AuthFormFakeBasicAuth|AuthFormLocation|AuthFormLoginRequiredLocation|AuthFormLoginSuccessLocation|AuthFormLogoutLocation|AuthFormMethod|AuthFormMimetype|AuthFormPassword|AuthFormProvider|AuthFormSitePassphrase|AuthFormSize|AuthFormUsername|AuthGroupFile|AuthLDAPAuthorizePrefix|AuthLDAPBindAuthoritative|AuthLDAPBindDN|AuthLDAPBindPassword|AuthLDAPCharsetConfig|AuthLDAPCompareAsUser|AuthLDAPCompareDNOnServer|AuthLDAPDereferenceAliases|AuthLDAPGroupAttribute|AuthLDAPGroupAttributeIsDN|AuthLDAPInitialBindAsUser|AuthLDAPInitialBindPattern|AuthLDAPMaxSubGroupDepth|AuthLDAPRemoteUserAttribute|AuthLDAPRemoteUserIsDN|AuthLDAPSearchAsUser|AuthLDAPSubGroupAttribute|AuthLDAPSubGroupClass|AuthLDAPUrl|AuthMerging|AuthName|AuthnCacheContext|AuthnCacheEnable|AuthnCacheProvideFor|AuthnCacheSOCache|AuthnCacheTimeout|AuthnzFcgiCheckAuthnProvider|AuthnzFcgiDefineProvider|AuthType|AuthUserFile|AuthzDBDLoginToReferer|AuthzDBDQuery|AuthzDBDRedirectQuery|AuthzDBMType|AuthzSendForbiddenOnFailure|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|CacheDefaultExpire|CacheDetailHeader|CacheDirLength|CacheDirLevels|CacheDisable|CacheEnable|CacheFile|CacheHeader|CacheIgnoreCacheControl|CacheIgnoreHeaders|CacheIgnoreNoLastMod|CacheIgnoreQueryString|CacheIgnoreURLSessionIdentifiers|CacheKeyBaseURL|CacheLastModifiedFactor|CacheLock|CacheLockMaxAge|CacheLockPath|CacheMaxExpire|CacheMaxFileSize|CacheMinExpire|CacheMinFileSize|CacheNegotiatedDocs|CacheQuickHandler|CacheReadSize|CacheReadTime|CacheRoot|CacheSocache|CacheSocacheMaxSize|CacheSocacheMaxTime|CacheSocacheMinTime|CacheSocacheReadSize|CacheSocacheReadTime|CacheStaleOnError|CacheStoreExpired|CacheStoreNoStore|CacheStorePrivate|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|DeflateBufferSize|DeflateCompressionLevel|DeflateFilterNote|DeflateInflateLimitRequestBody|DeflateInflateRatioBurst|DeflateInflateRatioLimit|DeflateMemLevel|DeflateWindowSize|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|HeartbeatAddress|HeartbeatListen|HeartbeatMaxServers|HeartbeatStorage|HeartbeatStorage|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|IndexHeadInsert|IndexIgnore|IndexIgnoreReset|IndexOptions|IndexOrderDefault|IndexStyleSheet|InputSed|ISAPIAppendLogToErrors|ISAPIAppendLogToQuery|ISAPICacheFile|ISAPIFakeAsync|ISAPILogNotSupported|ISAPIReadAheadBuffer|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAPCacheEntries|LDAPCacheTTL|LDAPConnectionPoolTTL|LDAPConnectionTimeout|LDAPLibraryDebug|LDAPOpCacheEntries|LDAPOpCacheTTL|LDAPReferralHopLimit|LDAPReferrals|LDAPRetries|LDAPRetryDelay|LDAPSharedCacheFile|LDAPSharedCacheSize|LDAPTimeout|LDAPTrustedClientCert|LDAPTrustedGlobalCert|LDAPTrustedMode|LDAPVerifyServerCert|LimitInternalRecursion|LimitRequestBody|LimitRequestFields|LimitRequestFieldSize|LimitRequestLine|LimitXMLRequestBody|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|LuaHookAccessChecker|LuaHookAuthChecker|LuaHookCheckUserID|LuaHookFixups|LuaHookInsertFilter|LuaHookLog|LuaHookMapToStorage|LuaHookTranslateName|LuaHookTypeChecker|LuaInherit|LuaInputFilter|LuaMapHandler|LuaOutputFilter|LuaPackageCPath|LuaPackagePath|LuaQuickHandler|LuaRoot|LuaScope|MaxConnectionsPerChild|MaxKeepAliveRequests|MaxMemFree|MaxRangeOverlaps|MaxRangeReversals|MaxRanges|MaxRequestWorkers|MaxSpareServers|MaxSpareThreads|MaxThreads|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|ProxyAddHeaders|ProxyBadHeader|ProxyBlock|ProxyDomain|ProxyErrorOverride|ProxyExpressDBMFile|ProxyExpressDBMType|ProxyExpressEnable|ProxyFtpDirCharset|ProxyFtpEscapeWildcards|ProxyFtpListOnWildcard|ProxyHTMLBufSize|ProxyHTMLCharsetOut|ProxyHTMLDocType|ProxyHTMLEnable|ProxyHTMLEvents|ProxyHTMLExtended|ProxyHTMLFixups|ProxyHTMLInterp|ProxyHTMLLinks|ProxyHTMLMeta|ProxyHTMLStripComments|ProxyHTMLURLMap|ProxyIOBufferSize|ProxyMaxForwards|ProxyPass|ProxyPassInherit|ProxyPassInterpolateEnv|ProxyPassMatch|ProxyPassReverse|ProxyPassReverseCookieDomain|ProxyPassReverseCookiePath|ProxyPreserveHost|ProxyReceiveBufferSize|ProxyRemote|ProxyRemoteMatch|ProxyRequests|ProxySCGIInternalRedirect|ProxySCGISendfile|ProxySet|ProxySourceAddress|ProxyStatus|ProxyTimeout|ProxyVia|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIPHeader|RemoteIPInternalProxy|RemoteIPInternalProxyList|RemoteIPProxiesHeader|RemoteIPTrustedProxy|RemoteIPTrustedProxyList|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|RewriteBase|RewriteCond|RewriteEngine|RewriteMap|RewriteOptions|RewriteRule|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script|ScriptAlias|ScriptAliasMatch|ScriptInterpreterSource|ScriptLog|ScriptLogBuffer|ScriptLogLength|ScriptSock|SecureListen|SeeRequestTail|SendBufferSize|ServerAdmin|ServerAlias|ServerLimit|ServerName|ServerPath|ServerRoot|ServerSignature|ServerTokens|Session|SessionCookieName|SessionCookieName2|SessionCookieRemove|SessionCryptoCipher|SessionCryptoDriver|SessionCryptoPassphrase|SessionCryptoPassphraseFile|SessionDBDCookieName|SessionDBDCookieName2|SessionDBDCookieRemove|SessionDBDDeleteLabel|SessionDBDInsertLabel|SessionDBDPerUser|SessionDBDSelectLabel|SessionDBDUpdateLabel|SessionEnv|SessionExclude|SessionHeader|SessionInclude|SessionMaxAge|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSLCACertificateFile|SSLCACertificatePath|SSLCADNRequestFile|SSLCADNRequestPath|SSLCARevocationCheck|SSLCARevocationFile|SSLCARevocationPath|SSLCertificateChainFile|SSLCertificateFile|SSLCertificateKeyFile|SSLCipherSuite|SSLCompression|SSLCryptoDevice|SSLEngine|SSLFIPS|SSLHonorCipherOrder|SSLInsecureRenegotiation|SSLOCSPDefaultResponder|SSLOCSPEnable|SSLOCSPOverrideResponder|SSLOCSPResponderTimeout|SSLOCSPResponseMaxAge|SSLOCSPResponseTimeSkew|SSLOCSPUseRequestNonce|SSLOpenSSLConfCmd|SSLOptions|SSLPassPhraseDialog|SSLProtocol|SSLProxyCACertificateFile|SSLProxyCACertificatePath|SSLProxyCARevocationCheck|SSLProxyCARevocationFile|SSLProxyCARevocationPath|SSLProxyCheckPeerCN|SSLProxyCheckPeerExpire|SSLProxyCheckPeerName|SSLProxyCipherSuite|SSLProxyEngine|SSLProxyMachineCertificateChainFile|SSLProxyMachineCertificateFile|SSLProxyMachineCertificatePath|SSLProxyProtocol|SSLProxyVerify|SSLProxyVerifyDepth|SSLRandomSeed|SSLRenegBufferSize|SSLRequire|SSLRequireSSL|SSLSessionCache|SSLSessionCacheTimeout|SSLSessionTicketKeyFile|SSLSRPUnknownUserSeed|SSLSRPVerifierFile|SSLStaplingCache|SSLStaplingErrorCacheTimeout|SSLStaplingFakeTryLater|SSLStaplingForceURL|SSLStaplingResponderTimeout|SSLStaplingResponseMaxAge|SSLStaplingResponseTimeSkew|SSLStaplingReturnResponderErrors|SSLStaplingStandardCacheTimeout|SSLStrictSNIVHostCheck|SSLUserName|SSLUseStapling|SSLVerifyClient|SSLVerifyDepth|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|VirtualDocumentRoot|VirtualDocumentRootIP|VirtualScriptAlias|VirtualScriptAliasIP|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,lookbehind:!0,alias:\"property\"},\"directive-block\":{pattern:/<\\/?\\b(?:AuthnProviderAlias|AuthzProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|RequireAll|RequireAny|RequireNone|VirtualHost)\\b *.*>/i,inside:{\"directive-block\":{pattern:/^<\\/?\\w+/,inside:{punctuation:/^<\\/?/},alias:\"tag\"},\"directive-block-parameter\":{pattern:/.*[^>]/,inside:{punctuation:/:/,string:{pattern:/(\"|').*\\1/,inside:{variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/}}},alias:\"attr-value\"},punctuation:/>/},alias:\"tag\"},\"directive-flags\":{pattern:/\\[(?:\\w,?)+\\]/,alias:\"keyword\"},string:{pattern:/(\"|').*\\1/,inside:{variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/}},variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,regex:/\\^?.*\\$|\\^.*\\$?/};"
            ]
        },
        "prism-apl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apl = {",
                "\t'comment': /(?:⍝|#[! ]).*$/m,",
                "\t'string': {",
                "\t\tpattern: /'(?:[^'\\r\\n]|'')*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞))?/i,",
                "\t'statement': /:[A-Z][a-z][A-Za-z]*\\b/,",
                "\t'system-function': {",
                "\t\tpattern: /⎕[A-Z]+/i,",
                "\t\talias: 'function'",
                "\t},",
                "\t'constant': /[⍬⌾#⎕⍞]/,",
                "\t'function': /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,",
                "\t'monadic-operator': {",
                "\t\tpattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'dyadic-operator': {",
                "\t\tpattern: /[.⍣⍠⍤∘⌸@⌺]/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'assignment': {",
                "\t\tpattern: /←/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'punctuation': /[\\[;\\]()◇⋄]/,",
                "\t'dfn': {",
                "\t\tpattern: /[{}⍺⍵⍶⍹∇⍫:]/,",
                "\t\talias: 'builtin'",
                "\t}",
                "};"
            ]
        },
        "prism-apl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apl={comment:/(?:⍝|#[! ]).*$/m,string:{pattern:/'(?:[^'\\r\\n]|'')*'/,greedy:!0},number:/¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞))?/i,statement:/:[A-Z][a-z][A-Za-z]*\\b/,\"system-function\":{pattern:/⎕[A-Z]+/i,alias:\"function\"},constant:/[⍬⌾#⎕⍞]/,\"function\":/[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\"monadic-operator\":{pattern:/[\\\\\\/⌿⍀¨⍨⌶&∥]/,alias:\"operator\"},\"dyadic-operator\":{pattern:/[.⍣⍠⍤∘⌸@⌺]/,alias:\"operator\"},assignment:{pattern:/←/,alias:\"keyword\"},punctuation:/[\\[;\\]()◇⋄]/,dfn:{pattern:/[{}⍺⍵⍶⍹∇⍫:]/,alias:\"builtin\"}};"
            ]
        },
        "prism-applescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.applescript = {",
                "\t'comment': [",
                "\t\t// Allow one level of nesting",
                "\t\t/\\(\\*(?:\\(\\*[\\s\\S]*?\\*\\)|[\\s\\S])*?\\*\\)/,",
                "\t\t/--.+/,",
                "\t\t/#.+/",
                "\t],",
                "\t'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,",
                "\t'operator': [",
                "\t\t/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,",
                "\t\t/\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/",
                "\t],",
                "\t'keyword': /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,",
                "\t'class': {",
                "\t\tpattern: /\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'punctuation': /[{}():,¬«»《》]/",
                "};"
            ]
        },
        "prism-applescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.applescript={comment:[/\\(\\*(?:\\(\\*[\\s\\S]*?\\*\\)|[\\s\\S])*?\\*\\)/,/--.+/,/#.+/],string:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,operator:[/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,/\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/],keyword:/\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,\"class\":{pattern:/\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,alias:\"builtin\"},punctuation:/[{}():,¬«»《》]/};"
            ]
        },
        "prism-arduino.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arduino = Prism.languages.extend('cpp', {",
                "\t'keyword': /\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,",
                "\t'builtin': /\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|IPAddress|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/,",
                "\t'constant': /\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/",
                "});"
            ]
        },
        "prism-arduino.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arduino=Prism.languages.extend(\"cpp\",{keyword:/\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,builtin:/\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|IPAddress|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/,constant:/\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/});"
            ]
        },
        "prism-arff.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arff = {",
                "\t'comment': /%.*/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /@(?:attribute|data|end|relation)\\b/i,",
                "\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,",
                "\t'punctuation': /[{},]/",
                "};"
            ]
        },
        "prism-arff.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arff={comment:/%.*/,string:{pattern:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:/@(?:attribute|data|end|relation)\\b/i,number:/\\b\\d+(?:\\.\\d+)?\\b/,punctuation:/[{},]/};"
            ]
        },
        "prism-asciidoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar attributes = {",
                "\t\tpattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'quoted': {",
                "\t\t\t\tpattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^[$`]|[$`]$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'interpreted': {",
                "\t\t\t\tpattern: /'(?:[^'\\\\]|\\\\.)*'/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^'|'$/",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\t'variable': /\\w+(?==)/,",
                "\t\t\t'punctuation': /^\\[|\\]$|,/,",
                "\t\t\t'operator': /=/,",
                "\t\t\t// The negative look-ahead prevents blank matches",
                "\t\t\t'attr-value': /(?!^\\s+$).+/",
                "\t\t}",
                "\t};",
                "\tPrism.languages.asciidoc = {",
                "\t\t'comment-block': {",
                "\t\t\tpattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'table': {",
                "\t\t\tpattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'specifiers': {",
                "\t\t\t\t\tpattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /(^|[^\\\\])[|!]=*/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'passthrough-block': {",
                "\t\t\tpattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\++|\\++$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Literal blocks and listing blocks",
                "\t\t'literal-block': {",
                "\t\t\tpattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:-+|\\.+)|(?:-+|\\.+)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Sidebar blocks, quote blocks, example blocks and open blocks",
                "\t\t'other-block': {",
                "\t\t\tpattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// list-punctuation and list-label must appear before indented-block",
                "\t\t'list-punctuation': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'list-label': {",
                "\t\t\tpattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'indented-block': {",
                "\t\t\tpattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t'comment': /^\\/\\/.*/m,",
                "\t\t'title': {",
                "\t\t\tpattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,",
                "\t\t\talias: 'important',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t'attribute-entry': {",
                "\t\t\tpattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,",
                "\t\t\talias: 'tag'",
                "\t\t},",
                "\t\t'attributes': attributes,",
                "\t\t'hr': {",
                "\t\t\tpattern: /^'{3,}$/m,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'page-break': {",
                "\t\t\tpattern: /^<{3,}$/m,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'admonition': {",
                "\t\t\tpattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'callout': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[ \\t]*)<?\\d*>/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'symbol'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /<\\d+>/,",
                "\t\t\t\talias: 'symbol'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'macro': {",
                "\t\t\tpattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^[a-z\\d-]+(?=:)/,",
                "\t\t\t\t'punctuation': /^::?/,",
                "\t\t\t\t'attributes': {",
                "\t\t\t\t\tpattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,",
                "\t\t\t\t\tinside: attributes.inside",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'inline': {",
                "\t\t\t/*",
                "\t\t\tThe initial look-behind prevents the highlighting of escaped quoted text.",
                "",
                "\t\t\tQuoted text can be multi-line but cannot span an empty line.",
                "\t\t\tAll quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].",
                "",
                "\t\t\tFirst, we handle the constrained quotes.",
                "\t\t\tThose must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.",
                "\t\t\tThey are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#",
                "",
                "\t\t\tThen we handle the unconstrained quotes.",
                "\t\t\tThose do not have the restrictions of the constrained quotes.",
                "\t\t\tThey are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))",
                "\t\t\t */",
                "\t\t\tpattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': attributes,",
                "\t\t\t\t'url': {",
                "\t\t\t\t\tpattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'attribute-ref': {",
                "\t\t\t\t\tpattern: /^\\{.+\\}$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'variable': {",
                "\t\t\t\t\t\t\tpattern: /(^\\{)[a-z\\d,+_-]+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'operator': /^[=?!#%@$]|!(?=[:}])/,",
                "\t\t\t\t\t\t'punctuation': /^\\{|\\}$|::?/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'italic': {",
                "\t\t\t\t\tpattern: /^(['_])[\\s\\S]+\\1$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^(?:''?|__?)|(?:''?|__?)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'bold': {",
                "\t\t\t\t\tpattern: /^\\*[\\s\\S]+\\*$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\tpunctuation: /^\\*\\*?|\\*\\*?$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'replacement': {",
                "\t\t\tpattern: /\\((?:C|TM|R)\\)/,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t'entity': /&#?[\\da-z]{1,8};/i,",
                "\t\t'line-continuation': {",
                "\t\t\tpattern: /(^| )\\+$/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t};",
                "",
                "",
                "\t// Allow some nesting. There is no recursion though, so cloning should not be needed.",
                "",
                "\tattributes.inside['interpreted'].inside.rest = {",
                "\t\t'macro': Prism.languages.asciidoc['macro'],",
                "\t\t'inline': Prism.languages.asciidoc['inline'],",
                "\t\t'replacement': Prism.languages.asciidoc['replacement'],",
                "\t\t'entity': Prism.languages.asciidoc['entity']",
                "\t};",
                "",
                "\tPrism.languages.asciidoc['passthrough-block'].inside.rest = {",
                "\t\t'macro': Prism.languages.asciidoc['macro']",
                "\t};",
                "",
                "\tPrism.languages.asciidoc['literal-block'].inside.rest = {",
                "\t\t'callout': Prism.languages.asciidoc['callout']",
                "\t};",
                "",
                "\tPrism.languages.asciidoc['table'].inside.rest = {",
                "\t\t'comment-block': Prism.languages.asciidoc['comment-block'],",
                "\t\t'passthrough-block': Prism.languages.asciidoc['passthrough-block'],",
                "\t\t'literal-block': Prism.languages.asciidoc['literal-block'],",
                "\t\t'other-block': Prism.languages.asciidoc['other-block'],",
                "\t\t'list-punctuation': Prism.languages.asciidoc['list-punctuation'],",
                "\t\t'indented-block': Prism.languages.asciidoc['indented-block'],",
                "\t\t'comment': Prism.languages.asciidoc['comment'],",
                "\t\t'title': Prism.languages.asciidoc['title'],",
                "\t\t'attribute-entry': Prism.languages.asciidoc['attribute-entry'],",
                "\t\t'attributes': Prism.languages.asciidoc['attributes'],",
                "\t\t'hr': Prism.languages.asciidoc['hr'],",
                "\t\t'page-break': Prism.languages.asciidoc['page-break'],",
                "\t\t'admonition': Prism.languages.asciidoc['admonition'],",
                "\t\t'list-label': Prism.languages.asciidoc['list-label'],",
                "\t\t'callout': Prism.languages.asciidoc['callout'],",
                "\t\t'macro': Prism.languages.asciidoc['macro'],",
                "\t\t'inline': Prism.languages.asciidoc['inline'],",
                "\t\t'replacement': Prism.languages.asciidoc['replacement'],",
                "\t\t'entity': Prism.languages.asciidoc['entity'],",
                "\t\t'line-continuation': Prism.languages.asciidoc['line-continuation']",
                "\t};",
                "",
                "\tPrism.languages.asciidoc['other-block'].inside.rest = {",
                "\t\t'table': Prism.languages.asciidoc['table'],",
                "\t\t'list-punctuation': Prism.languages.asciidoc['list-punctuation'],",
                "\t\t'indented-block': Prism.languages.asciidoc['indented-block'],",
                "\t\t'comment': Prism.languages.asciidoc['comment'],",
                "\t\t'attribute-entry': Prism.languages.asciidoc['attribute-entry'],",
                "\t\t'attributes': Prism.languages.asciidoc['attributes'],",
                "\t\t'hr': Prism.languages.asciidoc['hr'],",
                "\t\t'page-break': Prism.languages.asciidoc['page-break'],",
                "\t\t'admonition': Prism.languages.asciidoc['admonition'],",
                "\t\t'list-label': Prism.languages.asciidoc['list-label'],",
                "\t\t'macro': Prism.languages.asciidoc['macro'],",
                "\t\t'inline': Prism.languages.asciidoc['inline'],",
                "\t\t'replacement': Prism.languages.asciidoc['replacement'],",
                "\t\t'entity': Prism.languages.asciidoc['entity'],",
                "\t\t'line-continuation': Prism.languages.asciidoc['line-continuation']",
                "\t};",
                "",
                "\tPrism.languages.asciidoc['title'].inside.rest = {",
                "\t\t'macro': Prism.languages.asciidoc['macro'],",
                "\t\t'inline': Prism.languages.asciidoc['inline'],",
                "\t\t'replacement': Prism.languages.asciidoc['replacement'],",
                "\t\t'entity': Prism.languages.asciidoc['entity']",
                "\t};",
                "",
                "\t// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "\tPrism.hooks.add('wrap', function(env) {",
                "\t\tif (env.type === 'entity') {",
                "\t\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t\t}",
                "\t});",
                "}(Prism));"
            ]
        },
        "prism-asciidoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var i={pattern:/(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,lookbehind:!0,inside:{quoted:{pattern:/([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,inside:{punctuation:/^[$`]|[$`]$/}},interpreted:{pattern:/'(?:[^'\\\\]|\\\\.)*'/,inside:{punctuation:/^'|'$/}},string:/\"(?:[^\"\\\\]|\\\\.)*\"/,variable:/\\w+(?==)/,punctuation:/^\\[|\\]$|,/,operator:/=/,\"attr-value\":/(?!^\\s+$).+/}};a.languages.asciidoc={\"comment-block\":{pattern:/^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,alias:\"comment\"},table:{pattern:/^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,inside:{specifiers:{pattern:/(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,alias:\"attr-value\"},punctuation:{pattern:/(^|[^\\\\])[|!]=*/,lookbehind:!0}}},\"passthrough-block\":{pattern:/^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^\\++|\\++$/}},\"literal-block\":{pattern:/^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^(?:-+|\\.+)|(?:-+|\\.+)$/}},\"other-block\":{pattern:/^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/}},\"list-punctuation\":{pattern:/(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,lookbehind:!0,alias:\"punctuation\"},\"list-label\":{pattern:/(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,lookbehind:!0,alias:\"symbol\"},\"indented-block\":{pattern:/((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,lookbehind:!0},comment:/^\\/\\/.*/m,title:{pattern:/^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,alias:\"important\",inside:{punctuation:/^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/}},\"attribute-entry\":{pattern:/^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,alias:\"tag\"},attributes:i,hr:{pattern:/^'{3,}$/m,alias:\"punctuation\"},\"page-break\":{pattern:/^<{3,}$/m,alias:\"punctuation\"},admonition:{pattern:/^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,alias:\"keyword\"},callout:[{pattern:/(^[ \\t]*)<?\\d*>/m,lookbehind:!0,alias:\"symbol\"},{pattern:/<\\d+>/,alias:\"symbol\"}],macro:{pattern:/\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:{\"function\":/^[a-z\\d-]+(?=:)/,punctuation:/^::?/,attributes:{pattern:/(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:i.inside}}},inline:{pattern:/(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,lookbehind:!0,inside:{attributes:i,url:{pattern:/^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,inside:{punctuation:/^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/}},\"attribute-ref\":{pattern:/^\\{.+\\}$/,inside:{variable:{pattern:/(^\\{)[a-z\\d,+_-]+/,lookbehind:!0},operator:/^[=?!#%@$]|!(?=[:}])/,punctuation:/^\\{|\\}$|::?/}},italic:{pattern:/^(['_])[\\s\\S]+\\1$/,inside:{punctuation:/^(?:''?|__?)|(?:''?|__?)$/}},bold:{pattern:/^\\*[\\s\\S]+\\*$/,inside:{punctuation:/^\\*\\*?|\\*\\*?$/}},punctuation:/^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/}},replacement:{pattern:/\\((?:C|TM|R)\\)/,alias:\"builtin\"},entity:/&#?[\\da-z]{1,8};/i,\"line-continuation\":{pattern:/(^| )\\+$/m,lookbehind:!0,alias:\"punctuation\"}},i.inside.interpreted.inside.rest={macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity},a.languages.asciidoc[\"passthrough-block\"].inside.rest={macro:a.languages.asciidoc.macro},a.languages.asciidoc[\"literal-block\"].inside.rest={callout:a.languages.asciidoc.callout},a.languages.asciidoc.table.inside.rest={\"comment-block\":a.languages.asciidoc[\"comment-block\"],\"passthrough-block\":a.languages.asciidoc[\"passthrough-block\"],\"literal-block\":a.languages.asciidoc[\"literal-block\"],\"other-block\":a.languages.asciidoc[\"other-block\"],\"list-punctuation\":a.languages.asciidoc[\"list-punctuation\"],\"indented-block\":a.languages.asciidoc[\"indented-block\"],comment:a.languages.asciidoc.comment,title:a.languages.asciidoc.title,\"attribute-entry\":a.languages.asciidoc[\"attribute-entry\"],attributes:a.languages.asciidoc.attributes,hr:a.languages.asciidoc.hr,\"page-break\":a.languages.asciidoc[\"page-break\"],admonition:a.languages.asciidoc.admonition,\"list-label\":a.languages.asciidoc[\"list-label\"],callout:a.languages.asciidoc.callout,macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity,\"line-continuation\":a.languages.asciidoc[\"line-continuation\"]},a.languages.asciidoc[\"other-block\"].inside.rest={table:a.languages.asciidoc.table,\"list-punctuation\":a.languages.asciidoc[\"list-punctuation\"],\"indented-block\":a.languages.asciidoc[\"indented-block\"],comment:a.languages.asciidoc.comment,\"attribute-entry\":a.languages.asciidoc[\"attribute-entry\"],attributes:a.languages.asciidoc.attributes,hr:a.languages.asciidoc.hr,\"page-break\":a.languages.asciidoc[\"page-break\"],admonition:a.languages.asciidoc.admonition,\"list-label\":a.languages.asciidoc[\"list-label\"],macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity,\"line-continuation\":a.languages.asciidoc[\"line-continuation\"]},a.languages.asciidoc.title.inside.rest={macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity},a.hooks.add(\"wrap\",function(a){\"entity\"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,\"&\"))})}(Prism);"
            ]
        },
        "prism-asm6502.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.asm6502 = {",
                "\t'comment': /;.*/,",
                "\t'directive': {",
                "\t\tpattern: /\\.\\w+(?= )/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t'opcode': {",
                "    pattern: /\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,",
                "\t\talias: 'property'",
                "\t},",
                "\t'hexnumber': {",
                "\t\tpattern: /#?\\$[\\da-f]{2,4}/i,",
                "\t\talias: 'string'",
                "\t},",
                "\t'binarynumber': {",
                "\t\tpattern: /#?%[01]+/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'decimalnumber': {",
                "\t\tpattern: /#?\\d+/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'register': {",
                "\t\tpattern: /\\b[xya]\\b/i,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-asm6502.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.asm6502={comment:/;.*/,directive:{pattern:/\\.\\w+(?= )/,alias:\"keyword\"},string:/([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,opcode:{pattern:/\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,alias:\"property\"},hexnumber:{pattern:/#?\\$[\\da-f]{2,4}/i,alias:\"string\"},binarynumber:{pattern:/#?%[01]+/,alias:\"string\"},decimalnumber:{pattern:/#?\\d+/,alias:\"string\"},register:{pattern:/\\b[xya]\\b/i,alias:\"variable\"}};"
            ]
        },
        "prism-aspnet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aspnet = Prism.languages.extend('markup', {",
                "\t'page-directive tag': {",
                "\t\tpattern: /<%\\s*@.*%>/i,",
                "\t\tinside: {",
                "\t\t\t'page-directive tag': /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,",
                "\t\t\trest: Prism.languages.markup.tag.inside",
                "\t\t}",
                "\t},",
                "\t'directive tag': {",
                "\t\tpattern: /<%.*%>/i,",
                "\t\tinside: {",
                "\t\t\t'directive tag': /<%\\s*?[$=%#:]{0,2}|%>/i,",
                "\t\t\trest: Prism.languages.csharp",
                "\t\t}",
                "\t}",
                "});",
                "// Regexp copied from prism-markup, with a negative look-ahead added",
                "Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "",
                "// match directives of attribute value foo=\"<% Bar %>\"",
                "Prism.languages.insertBefore('inside', 'punctuation', {",
                "\t'directive tag': Prism.languages.aspnet['directive tag']",
                "}, Prism.languages.aspnet.tag.inside[\"attr-value\"]);",
                "",
                "Prism.languages.insertBefore('aspnet', 'comment', {",
                "\t'asp comment': /<%--[\\s\\S]*?--%>/",
                "});",
                "",
                "// script runat=\"server\" contains csharp, not javascript",
                "Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {",
                "\t'asp script': {",
                "\t\tpattern: /(<script(?=.*runat=['\"]?server['\"]?)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,",
                "\t\tlookbehind: true,",
                "\t\tinside: Prism.languages.csharp || {}",
                "\t}",
                "});"
            ]
        },
        "prism-aspnet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aspnet=Prism.languages.extend(\"markup\",{\"page-directive tag\":{pattern:/<%\\s*@.*%>/i,inside:{\"page-directive tag\":/<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,rest:Prism.languages.markup.tag.inside}},\"directive tag\":{pattern:/<%.*%>/i,inside:{\"directive tag\":/<%\\s*?[$=%#:]{0,2}|%>/i,rest:Prism.languages.csharp}}}),Prism.languages.aspnet.tag.pattern=/<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,Prism.languages.insertBefore(\"inside\",\"punctuation\",{\"directive tag\":Prism.languages.aspnet[\"directive tag\"]},Prism.languages.aspnet.tag.inside[\"attr-value\"]),Prism.languages.insertBefore(\"aspnet\",\"comment\",{\"asp comment\":/<%--[\\s\\S]*?--%>/}),Prism.languages.insertBefore(\"aspnet\",Prism.languages.javascript?\"script\":\"tag\",{\"asp script\":{pattern:/(<script(?=.*runat=['\"]?server['\"]?)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.csharp||{}}});"
            ]
        },
        "prism-autohotkey.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl",
                "Prism.languages.autohotkey= {",
                "\t'comment': {",
                "\t\tpattern: /(^[^\";\\n]*(\"[^\"\\n]*?\"[^\"\\n]*?)*)(?:;.*$|^\\s*\\/\\*[\\s\\S]*\\n\\*\\/)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': /\"(?:[^\"\\n\\r]|\"\")*\"/m,",
                "\t'function': /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,  //function - don't use .*\\) in the end bcoz string locks it",
                "\t'tag': /^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m,  //labels",
                "\t'variable': /%\\w+%/,",
                "\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t'operator': /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,",
                "\t'punctuation': /[{}[\\]():,]/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "",
                "\t'selector': /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,",
                "",
                "\t'constant': /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|programfiles|a_programfiles|a_programs|a_programscommon|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,",
                "",
                "\t'builtin': /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|cos|dllcall|exp|fileexist|Fileopen|floor|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,",
                "",
                "\t'symbol': /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,",
                "",
                "\t'important': /#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|WinActivateForce)\\b/i,",
                "",
                "\t'keyword': /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Type|UnCheck|underline|Unicode|Unlock|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i",
                "};"
            ]
        },
        "prism-autohotkey.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autohotkey={comment:{pattern:/(^[^\";\\n]*(\"[^\"\\n]*?\"[^\"\\n]*?)*)(?:;.*$|^\\s*\\/\\*[\\s\\S]*\\n\\*\\/)/m,lookbehind:!0},string:/\"(?:[^\"\\n\\r]|\"\")*\"/m,\"function\":/[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,tag:/^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m,variable:/%\\w+%/,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,punctuation:/[{}[\\]():,]/,\"boolean\":/\\b(?:true|false)\\b/,selector:/\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,constant:/\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|programfiles|a_programfiles|a_programs|a_programscommon|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,builtin:/\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|cos|dllcall|exp|fileexist|Fileopen|floor|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,symbol:/\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,important:/#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|WinActivateForce)\\b/i,keyword:/\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Type|UnCheck|underline|Unicode|Unlock|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i};"
            ]
        },
        "prism-autoit.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autoit = {",
                "\t\"comment\": [",
                "\t\t/;.*/,",
                "\t\t{",
                "\t\t\t// The multi-line comments delimiters can actually be commented out with \";\"",
                "\t\t\tpattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t\"url\": {",
                "\t\tpattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t\"string\": {",
                "\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t\"variable\": /([%$@])\\w+\\1/",
                "\t\t}",
                "\t},",
                "\t\"directive\": {",
                "\t\tpattern: /(^\\s*)#\\w+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t\"function\": /\\b\\w+(?=\\()/,",
                "\t// Variables and macros",
                "\t\"variable\": /[$@]\\w+/,",
                "\t\"keyword\": /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,",
                "\t\"number\": /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,",
                "\t\"boolean\": /\\b(?:True|False)\\b/i,",
                "\t\"operator\": /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,",
                "\t\"punctuation\": /[\\[\\]().,:]/",
                "};"
            ]
        },
        "prism-autoit.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autoit={comment:[/;.*/,{pattern:/(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,lookbehind:!0}],url:{pattern:/(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,lookbehind:!0},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,greedy:!0,inside:{variable:/([%$@])\\w+\\1/}},directive:{pattern:/(^\\s*)#\\w+/m,lookbehind:!0,alias:\"keyword\"},\"function\":/\\b\\w+(?=\\()/,variable:/[$@]\\w+/,keyword:/\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\"boolean\":/\\b(?:True|False)\\b/i,operator:/<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,punctuation:/[\\[\\]().,:]/};"
            ]
        },
        "prism-bash.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tvar insideString = {",
                "\t\tvariable: [",
                "\t\t\t// Arithmetic Environment",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// If there is a $ sign at the beginning highlight $(( and )) as variable",
                "\t\t\t\t\tvariable: [{",
                "\t\t\t\t\t\t\tpattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/^\\$\\(\\(/",
                "\t\t\t\t\t],",
                "\t\t\t\t\tnumber: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t\t\t\t\t// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic",
                "\t\t\t\t\toperator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,",
                "\t\t\t\t\t// If there is no $ sign at the beginning highlight (( and )) as punctuation",
                "\t\t\t\t\tpunctuation: /\\(\\(?|\\)\\)?|,|;/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Command Substitution",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$\\([^)]+\\)|`[^`]+`/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tvariable: /^\\$\\(|^`|\\)$|`$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t/\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i",
                "\t\t]",
                "\t};",
                "",
                "\tPrism.languages.bash = {",
                "\t\t'shebang': {",
                "\t\t\tpattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\"{\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'string': [",
                "\t\t\t//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: insideString",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: insideString",
                "\t\t\t}",
                "\t\t],",
                "\t\t'variable': insideString.variable,",
                "\t\t// Originally based on http://ss64.com/bash/",
                "\t\t'function': {",
                "\t\t\tpattern: /(^|[\\s;|&])(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|npm|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|[\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'boolean': {",
                "\t\t\tpattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,",
                "\t\t'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/",
                "\t};",
                "",
                "\tvar inside = insideString.variable[1].inside;",
                "\tinside.string = Prism.languages.bash.string;",
                "\tinside['function'] = Prism.languages.bash['function'];",
                "\tinside.keyword = Prism.languages.bash.keyword;",
                "\tinside['boolean'] = Prism.languages.bash['boolean'];",
                "\tinside.operator = Prism.languages.bash.operator;",
                "\tinside.punctuation = Prism.languages.bash.punctuation;",
                "\t",
                "\tPrism.languages.shell = Prism.languages.bash;",
                "})(Prism);"
            ]
        },
        "prism-bash.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t={variable:[{pattern:/\\$?\\(\\([\\s\\S]+?\\)\\)/,inside:{variable:[{pattern:/(^\\$\\(\\([\\s\\S]+)\\)\\)/,lookbehind:!0},/^\\$\\(\\(/],number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,punctuation:/\\(\\(?|\\)\\)?|,|;/}},{pattern:/\\$\\([^)]+\\)|`[^`]+`/,greedy:!0,inside:{variable:/^\\$\\(|^`|\\)$|`$/}},/\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]};e.languages.bash={shebang:{pattern:/^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,alias:\"important\"},comment:{pattern:/(^|[^\"{\\\\])#.*/,lookbehind:!0},string:[{pattern:/((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,lookbehind:!0,greedy:!0,inside:t},{pattern:/([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,greedy:!0,inside:t}],variable:t.variable,\"function\":{pattern:/(^|[\\s;|&])(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|npm|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|[\\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,lookbehind:!0},\"boolean\":{pattern:/(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,lookbehind:!0},operator:/&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,punctuation:/\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/};var a=t.variable[1].inside;a.string=e.languages.bash.string,a[\"function\"]=e.languages.bash[\"function\"],a.keyword=e.languages.bash.keyword,a[\"boolean\"]=e.languages.bash[\"boolean\"],a.operator=e.languages.bash.operator,a.punctuation=e.languages.bash.punctuation,e.languages.shell=e.languages.bash}(Prism);"
            ]
        },
        "prism-basic.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.basic = {",
                "\t'comment': {",
                "\t\tpattern: /(?:!|REM\\b).+/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^REM/i",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t'keyword': /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,",
                "\t'function': /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,",
                "\t'operator': /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,",
                "\t'punctuation': /[,;:()]/",
                "};"
            ]
        },
        "prism-basic.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.basic={comment:{pattern:/(?:!|REM\\b).+/i,inside:{keyword:/^REM/i}},string:{pattern:/\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,greedy:!0},number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,keyword:/\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,\"function\":/\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,operator:/<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,punctuation:/[,;:()]/};"
            ]
        },
        "prism-batch.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar variable = /%%?[~:\\w]+%?|!\\S+!/;",
                "\tvar parameter = {",
                "\t\tpattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,",
                "\t\talias: 'attr-name',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /:/",
                "\t\t}",
                "\t};",
                "\tvar string = /\"[^\"]*\"/;",
                "\tvar number = /(?:\\b|-)\\d+\\b/;",
                "",
                "\tPrism.languages.batch = {",
                "\t\t'comment': [",
                "\t\t\t/^::.*/m,",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'label': {",
                "\t\t\tpattern: /^:.*/m,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'command': [",
                "\t\t\t{",
                "\t\t\t\t// FOR command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^for\\b|\\b(?:in|do)\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'punctuation': /[()',]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// IF command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// ELSE command",
                "\t\t\t\tpattern: /((?:^|[&()])[ \\t]*)else\\b/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^else\\b/i",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// SET command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^set\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': [",
                "\t\t\t\t\t\tvariable,",
                "\t\t\t\t\t\t/\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/",
                "\t\t\t\t\t],",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,",
                "\t\t\t\t\t'punctuation': /[()',]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Other commands",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^\\w+\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'label': {",
                "\t\t\t\t\t\tpattern: /(^\\s*):\\S+/m,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'property'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /\\^/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'operator': /[&@]/,",
                "\t\t'punctuation': /[()']/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-batch.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var r=/%%?[~:\\w]+%?|!\\S+!/,t={pattern:/\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,alias:\"attr-name\",inside:{punctuation:/:/}},n=/\"[^\"]*\"/,i=/(?:\\b|-)\\d+\\b/;e.languages.batch={comment:[/^::.*/m,{pattern:/((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0}],label:{pattern:/^:.*/m,alias:\"property\"},command:[{pattern:/((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,lookbehind:!0,inside:{keyword:/^for\\b|\\b(?:in|do)\\b/i,string:n,parameter:t,variable:r,number:i,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,lookbehind:!0,inside:{keyword:/^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,string:n,parameter:t,variable:r,number:i,operator:/\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i}},{pattern:/((?:^|[&()])[ \\t]*)else\\b/im,lookbehind:!0,inside:{keyword:/^else\\b/i}},{pattern:/((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,inside:{keyword:/^set\\b/i,string:n,parameter:t,variable:[r,/\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],number:i,operator:/[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,inside:{keyword:/^\\w+\\b/i,string:n,parameter:t,label:{pattern:/(^\\s*):\\S+/m,lookbehind:!0,alias:\"property\"},variable:r,number:i,operator:/\\^/}}],operator:/[&@]/,punctuation:/[()']/}}(Prism);"
            ]
        },
        "prism-bison.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bison = Prism.languages.extend('c', {});",
                "",
                "Prism.languages.insertBefore('bison', 'comment', {",
                "\t'bison': {",
                "\t\t// This should match all the beginning of the file",
                "\t\t// including the prologue(s), the bison declarations and",
                "\t\t// the grammar rules.",
                "\t\tpattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,",
                "\t\tinside: {",
                "\t\t\t'c': {",
                "\t\t\t\t// Allow for one level of nested braces",
                "\t\t\t\tpattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern: /^%?\\{|%?\\}$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'bison-variable': {",
                "\t\t\t\t\t\tpattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,",
                "\t\t\t\t\t\talias: 'variable',",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'punctuation': /<|>/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.c",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'comment': Prism.languages.c.comment,",
                "\t\t\t'string': Prism.languages.c.string,",
                "\t\t\t'property': /\\S+(?=:)/,",
                "\t\t\t'keyword': /%\\w+/,",
                "\t\t\t'number': {",
                "\t\t\t\tpattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /%[%?]|[|:;\\[\\]<>]/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-bison.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bison=Prism.languages.extend(\"c\",{}),Prism.languages.insertBefore(\"bison\",\"comment\",{bison:{pattern:/^[\\s\\S]*?%%[\\s\\S]*?%%/,inside:{c:{pattern:/%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,inside:{delimiter:{pattern:/^%?\\{|%?\\}$/,alias:\"punctuation\"},\"bison-variable\":{pattern:/[$@](?:<[^\\s>]+>)?[\\w$]+/,alias:\"variable\",inside:{punctuation:/<|>/}},rest:Prism.languages.c}},comment:Prism.languages.c.comment,string:Prism.languages.c.string,property:/\\S+(?=:)/,keyword:/%\\w+/,number:{pattern:/(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,lookbehind:!0},punctuation:/%[%?]|[|:;\\[\\]<>]/}}});"
            ]
        },
        "prism-brainfuck.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brainfuck = {",
                "\t'pointer': {",
                "\t\tpattern: /<|>/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'increment': {",
                "\t\tpattern: /\\+/,",
                "\t\talias: 'inserted'",
                "\t},",
                "\t'decrement': {",
                "\t\tpattern: /-/,",
                "\t\talias: 'deleted'",
                "\t},",
                "\t'branching': {",
                "\t\tpattern: /\\[|\\]/,",
                "\t\talias: 'important'",
                "\t},",
                "\t'operator': /[.,]/,",
                "\t'comment': /\\S+/",
                "};"
            ]
        },
        "prism-brainfuck.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brainfuck={pointer:{pattern:/<|>/,alias:\"keyword\"},increment:{pattern:/\\+/,alias:\"inserted\"},decrement:{pattern:/-/,alias:\"deleted\"},branching:{pattern:/\\[|\\]/,alias:\"important\"},operator:/[.,]/,comment:/\\S+/};"
            ]
        },
        "prism-bro.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bro = {",
                "",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\$])#.*/,",
                "\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'italic':  /\\b(?:TODO|FIXME|XXX)\\b/",
                "\t\t}",
                "\t},",
                "",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'boolean': /\\b[TF]\\b/,",
                "",
                "\t'function': {",
                "\t\tpattern: /(?:function|hook|event) \\w+(?:::\\w+)?/,",
                "\t\tinside: {",
                "\t\t\tkeyword: /^(?:function|hook|event)/",
                "\t\t}",
                "\t},",
                "",
                "\t'variable':\t{",
                "\t\tpattern: /(?:global|local) \\w+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /(?:global|local)/",
                "\t\t}",
                "\t},",
                "",
                "\t'builtin': /(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,",
                "",
                "\t'constant': {",
                "\t\tpattern: /const \\w+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /const/",
                "\t\t}",
                "\t},",
                "",
                "\t'keyword': /\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,",
                "",
                "\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,",
                "",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-bro.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bro={comment:{pattern:/(^|[^\\\\$])#.*/,lookbehind:!0,inside:{italic:/\\b(?:TODO|FIXME|XXX)\\b/}},string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"boolean\":/\\b[TF]\\b/,\"function\":{pattern:/(?:function|hook|event) \\w+(?:::\\w+)?/,inside:{keyword:/^(?:function|hook|event)/}},variable:{pattern:/(?:global|local) \\w+/i,inside:{keyword:/(?:global|local)/}},builtin:/(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,constant:{pattern:/const \\w+/i,inside:{keyword:/const/}},keyword:/\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-c.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.c = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,",
                "\t'operator': /-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/]/,",
                "\t'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i",
                "});",
                "",
                "Prism.languages.insertBefore('c', 'string', {",
                "\t'macro': {",
                "\t\t// allow for multiline macro definitions",
                "\t\t// spaces after the # character compile fine with gcc",
                "\t\tpattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t// highlight the path of the include statement as a string",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t// highlight macro directives as keywords",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t// highlight predefined macros as constants",
                "\t'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/",
                "});",
                "",
                "delete Prism.languages.c['class-name'];",
                "delete Prism.languages.c['boolean'];"
            ]
        },
        "prism-c.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.c=Prism.languages.extend(\"clike\",{keyword:/\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,operator:/-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/]/,number:/(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i}),Prism.languages.insertBefore(\"c\",\"string\",{macro:{pattern:/(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,alias:\"property\",inside:{string:{pattern:/(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,lookbehind:!0},directive:{pattern:/(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,lookbehind:!0,alias:\"keyword\"}}},constant:/\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/}),delete Prism.languages.c[\"class-name\"],delete Prism.languages.c[\"boolean\"];"
            ]
        },
        "prism-clike.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clike = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\tpunctuation: /[.\\\\]/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'function': /[a-z0-9_]+(?=\\()/i,",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-clike.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\"boolean\":/\\b(?:true|false)\\b/,\"function\":/[a-z0-9_]+(?=\\()/i,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-clojure.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Copied from https://github.com/jeluard/prism-clojure",
                "Prism.languages.clojure = {",
                "\tcomment: /;+.*/,",
                "\tstring: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\toperator: /(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i, //used for symbols and keywords",
                "\tkeyword: {",
                "\t\tpattern: /([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\tboolean: /\\b(?:true|false|nil)\\b/,",
                "\tnumber: /\\b[0-9A-Fa-f]+\\b/,",
                "\tpunctuation: /[{}\\[\\](),]/",
                "};"
            ]
        },
        "prism-clojure.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clojure={comment:/;+.*/,string:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,operator:/(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i,keyword:{pattern:/([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,lookbehind:!0},\"boolean\":/\\b(?:true|false|nil)\\b/,number:/\\b[0-9A-Fa-f]+\\b/,punctuation:/[{}\\[\\](),]/};"
            ]
        },
        "prism-coffeescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "// Ignore comments starting with { to privilege string interpolation highlighting",
                "var comment = /#(?!\\{).+/,",
                "    interpolation = {",
                "    \tpattern: /#\\{[^}]+\\}/,",
                "    \talias: 'variable'",
                "    };",
                "",
                "Prism.languages.coffeescript = Prism.languages.extend('javascript', {",
                "\t'comment': comment,",
                "\t'string': [",
                "",
                "\t\t// Strings are multiline",
                "\t\t{",
                "\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t{",
                "\t\t\t// Strings are multiline",
                "\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,",
                "\t'class-member': {",
                "\t\tpattern: /@(?!\\d)\\w+/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'comment', {",
                "\t'multiline-comment': {",
                "\t\tpattern: /###[\\s\\S]+?###/,",
                "\t\talias: 'comment'",
                "\t},",
                "",
                "\t// Block regexp can contain comments and interpolation",
                "\t'block-regex': {",
                "\t\tpattern: /\\/{3}[\\s\\S]*?\\/{3}/,",
                "\t\talias: 'regex',",
                "\t\tinside: {",
                "\t\t\t'comment': comment,",
                "\t\t\t'interpolation': interpolation",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'string', {",
                "\t'inline-javascript': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.javascript",
                "\t\t}",
                "\t},",
                "",
                "\t// Block strings",
                "\t'multiline-string': [",
                "\t\t{",
                "\t\t\tpattern: /'''[\\s\\S]*?'''/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\tinterpolation: interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t]",
                "",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'keyword', {",
                "\t// Object property",
                "\t'property': /(?!\\d)\\w+(?=\\s*:(?!:))/",
                "});",
                "",
                "delete Prism.languages.coffeescript['template-string'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-coffeescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=/#(?!\\{).+/,n={pattern:/#\\{[^}]+\\}/,alias:\"variable\"};e.languages.coffeescript=e.languages.extend(\"javascript\",{comment:t,string:[{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:!0},{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0,inside:{interpolation:n}}],keyword:/\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\"class-member\":{pattern:/@(?!\\d)\\w+/,alias:\"variable\"}}),e.languages.insertBefore(\"coffeescript\",\"comment\",{\"multiline-comment\":{pattern:/###[\\s\\S]+?###/,alias:\"comment\"},\"block-regex\":{pattern:/\\/{3}[\\s\\S]*?\\/{3}/,alias:\"regex\",inside:{comment:t,interpolation:n}}}),e.languages.insertBefore(\"coffeescript\",\"string\",{\"inline-javascript\":{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:\"punctuation\"},rest:e.languages.javascript}},\"multiline-string\":[{pattern:/'''[\\s\\S]*?'''/,greedy:!0,alias:\"string\"},{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\",inside:{interpolation:n}}]}),e.languages.insertBefore(\"coffeescript\",\"keyword\",{property:/(?!\\d)\\w+(?=\\s*:(?!:))/}),delete e.languages.coffeescript[\"template-string\"]}(Prism);"
            ]
        },
        "prism-core.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var _self = (typeof window !== 'undefined')",
                "\t? window   // if in browser",
                "\t: (",
                "\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)",
                "\t\t? self // if in worker",
                "\t\t: {}   // if in node js",
                "\t);",
                "",
                "/**",
                " * Prism: Lightweight, robust, elegant syntax highlighting",
                " * MIT license http://www.opensource.org/licenses/mit-license.php/",
                " * @author Lea Verou http://lea.verou.me",
                " */",
                "",
                "var Prism = (function(){",
                "",
                "// Private helper vars",
                "var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
                "var uniqueId = 0;",
                "",
                "var _ = _self.Prism = {",
                "\tmanual: _self.Prism && _self.Prism.manual,",
                "\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,",
                "\tutil: {",
                "\t\tencode: function (tokens) {",
                "\t\t\tif (tokens instanceof Token) {",
                "\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);",
                "\t\t\t} else if (_.util.type(tokens) === 'Array') {",
                "\t\t\t\treturn tokens.map(_.util.encode);",
                "\t\t\t} else {",
                "\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\ttype: function (o) {",
                "\t\t\treturn Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];",
                "\t\t},",
                "",
                "\t\tobjId: function (obj) {",
                "\t\t\tif (!obj['__id']) {",
                "\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });",
                "\t\t\t}",
                "\t\t\treturn obj['__id'];",
                "\t\t},",
                "",
                "\t\t// Deep clone a language definition (e.g. to extend it)",
                "\t\tclone: function (o, visited) {",
                "\t\t\tvar type = _.util.type(o);",
                "\t\t\tvisited = visited || {};",
                "",
                "\t\t\tswitch (type) {",
                "\t\t\t\tcase 'Object':",
                "\t\t\t\t\tif (visited[_.util.objId(o)]) {",
                "\t\t\t\t\t\treturn visited[_.util.objId(o)];",
                "\t\t\t\t\t}",
                "\t\t\t\t\tvar clone = {};",
                "\t\t\t\t\tvisited[_.util.objId(o)] = clone;",
                "",
                "\t\t\t\t\tfor (var key in o) {",
                "\t\t\t\t\t\tif (o.hasOwnProperty(key)) {",
                "\t\t\t\t\t\t\tclone[key] = _.util.clone(o[key], visited);",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\treturn clone;",
                "",
                "\t\t\t\tcase 'Array':",
                "\t\t\t\t\tif (visited[_.util.objId(o)]) {",
                "\t\t\t\t\t\treturn visited[_.util.objId(o)];",
                "\t\t\t\t\t}",
                "\t\t\t\t\tvar clone = [];",
                "\t\t\t\t\tvisited[_.util.objId(o)] = clone;",
                "",
                "\t\t\t\t\to.forEach(function (v, i) {",
                "\t\t\t\t\t\tclone[i] = _.util.clone(v, visited);",
                "\t\t\t\t\t});",
                "",
                "\t\t\t\t\treturn clone;",
                "\t\t\t}",
                "",
                "\t\t\treturn o;",
                "\t\t}",
                "\t},",
                "",
                "\tlanguages: {",
                "\t\textend: function (id, redef) {",
                "\t\t\tvar lang = _.util.clone(_.languages[id]);",
                "",
                "\t\t\tfor (var key in redef) {",
                "\t\t\t\tlang[key] = redef[key];",
                "\t\t\t}",
                "",
                "\t\t\treturn lang;",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Insert a token before another token in a language literal",
                "\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),",
                "\t\t * we cannot just provide an object, we need anobject and a key.",
                "\t\t * @param inside The key (or language id) of the parent",
                "\t\t * @param before The key to insert before. If not provided, the function appends instead.",
                "\t\t * @param insert Object with the key/value pairs to insert",
                "\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.",
                "\t\t */",
                "\t\tinsertBefore: function (inside, before, insert, root) {",
                "\t\t\troot = root || _.languages;",
                "\t\t\tvar grammar = root[inside];",
                "",
                "\t\t\tif (arguments.length == 2) {",
                "\t\t\t\tinsert = arguments[1];",
                "",
                "\t\t\t\tfor (var newToken in insert) {",
                "\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
                "\t\t\t\t\t\tgrammar[newToken] = insert[newToken];",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "",
                "\t\t\t\treturn grammar;",
                "\t\t\t}",
                "",
                "\t\t\tvar ret = {};",
                "",
                "\t\t\tfor (var token in grammar) {",
                "",
                "\t\t\t\tif (grammar.hasOwnProperty(token)) {",
                "",
                "\t\t\t\t\tif (token == before) {",
                "",
                "\t\t\t\t\t\tfor (var newToken in insert) {",
                "",
                "\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
                "\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tret[token] = grammar[token];",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t\t// Update references in other language definitions",
                "\t\t\t_.languages.DFS(_.languages, function(key, value) {",
                "\t\t\t\tif (value === root[inside] && key != inside) {",
                "\t\t\t\t\tthis[key] = ret;",
                "\t\t\t\t}",
                "\t\t\t});",
                "",
                "\t\t\treturn root[inside] = ret;",
                "\t\t},",
                "",
                "\t\t// Traverse a language definition with Depth First Search",
                "\t\tDFS: function(o, callback, type, visited) {",
                "\t\t\tvisited = visited || {};",
                "\t\t\tfor (var i in o) {",
                "\t\t\t\tif (o.hasOwnProperty(i)) {",
                "\t\t\t\t\tcallback.call(o, i, o[i], type || i);",
                "",
                "\t\t\t\t\tif (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {",
                "\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;",
                "\t\t\t\t\t\t_.languages.DFS(o[i], callback, null, visited);",
                "\t\t\t\t\t}",
                "\t\t\t\t\telse if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {",
                "\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;",
                "\t\t\t\t\t\t_.languages.DFS(o[i], callback, i, visited);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\tplugins: {},",
                "",
                "\thighlightAll: function(async, callback) {",
                "\t\t_.highlightAllUnder(document, async, callback);",
                "\t},",
                "",
                "\thighlightAllUnder: function(container, async, callback) {",
                "\t\tvar env = {",
                "\t\t\tcallback: callback,",
                "\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'",
                "\t\t};",
                "",
                "\t\t_.hooks.run(\"before-highlightall\", env);",
                "",
                "\t\tvar elements = env.elements || container.querySelectorAll(env.selector);",
                "",
                "\t\tfor (var i=0, element; element = elements[i++];) {",
                "\t\t\t_.highlightElement(element, async === true, env.callback);",
                "\t\t}",
                "\t},",
                "",
                "\thighlightElement: function(element, async, callback) {",
                "\t\t// Find language",
                "\t\tvar language, grammar, parent = element;",
                "",
                "\t\twhile (parent && !lang.test(parent.className)) {",
                "\t\t\tparent = parent.parentNode;",
                "\t\t}",
                "",
                "\t\tif (parent) {",
                "\t\t\tlanguage = (parent.className.match(lang) || [,''])[1].toLowerCase();",
                "\t\t\tgrammar = _.languages[language];",
                "\t\t}",
                "",
                "\t\t// Set language on the element, if not present",
                "\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
                "",
                "\t\tif (element.parentNode) {",
                "\t\t\t// Set language on the parent, for styling",
                "\t\t\tparent = element.parentNode;",
                "",
                "\t\t\tif (/pre/i.test(parent.nodeName)) {",
                "\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\tvar code = element.textContent;",
                "",
                "\t\tvar env = {",
                "\t\t\telement: element,",
                "\t\t\tlanguage: language,",
                "\t\t\tgrammar: grammar,",
                "\t\t\tcode: code",
                "\t\t};",
                "",
                "\t\t_.hooks.run('before-sanity-check', env);",
                "",
                "\t\tif (!env.code || !env.grammar) {",
                "\t\t\tif (env.code) {",
                "\t\t\t\t_.hooks.run('before-highlight', env);",
                "\t\t\t\tenv.element.textContent = env.code;",
                "\t\t\t\t_.hooks.run('after-highlight', env);",
                "\t\t\t}",
                "\t\t\t_.hooks.run('complete', env);",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\t_.hooks.run('before-highlight', env);",
                "",
                "\t\tif (async && _self.Worker) {",
                "\t\t\tvar worker = new Worker(_.filename);",
                "",
                "\t\t\tworker.onmessage = function(evt) {",
                "\t\t\t\tenv.highlightedCode = evt.data;",
                "",
                "\t\t\t\t_.hooks.run('before-insert', env);",
                "",
                "\t\t\t\tenv.element.innerHTML = env.highlightedCode;",
                "",
                "\t\t\t\tcallback && callback.call(env.element);",
                "\t\t\t\t_.hooks.run('after-highlight', env);",
                "\t\t\t\t_.hooks.run('complete', env);",
                "\t\t\t};",
                "",
                "\t\t\tworker.postMessage(JSON.stringify({",
                "\t\t\t\tlanguage: env.language,",
                "\t\t\t\tcode: env.code,",
                "\t\t\t\timmediateClose: true",
                "\t\t\t}));",
                "\t\t}",
                "\t\telse {",
                "\t\t\tenv.highlightedCode = _.highlight(env.code, env.grammar, env.language);",
                "",
                "\t\t\t_.hooks.run('before-insert', env);",
                "",
                "\t\t\tenv.element.innerHTML = env.highlightedCode;",
                "",
                "\t\t\tcallback && callback.call(element);",
                "",
                "\t\t\t_.hooks.run('after-highlight', env);",
                "\t\t\t_.hooks.run('complete', env);",
                "\t\t}",
                "\t},",
                "",
                "\thighlight: function (text, grammar, language) {",
                "\t\tvar env = {",
                "\t\t\tcode: text,",
                "\t\t\tgrammar: grammar,",
                "\t\t\tlanguage: language",
                "\t\t};",
                "\t\t_.hooks.run('before-tokenize', env);",
                "\t\tenv.tokens = _.tokenize(env.code, env.grammar);",
                "\t\t_.hooks.run('after-tokenize', env);",
                "\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);",
                "\t},",
                "",
                "\tmatchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {",
                "\t\tvar Token = _.Token;",
                "",
                "\t\tfor (var token in grammar) {",
                "\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {",
                "\t\t\t\tcontinue;",
                "\t\t\t}",
                "",
                "\t\t\tif (token == target) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tvar patterns = grammar[token];",
                "\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];",
                "",
                "\t\t\tfor (var j = 0; j < patterns.length; ++j) {",
                "\t\t\t\tvar pattern = patterns[j],",
                "\t\t\t\t\tinside = pattern.inside,",
                "\t\t\t\t\tlookbehind = !!pattern.lookbehind,",
                "\t\t\t\t\tgreedy = !!pattern.greedy,",
                "\t\t\t\t\tlookbehindLength = 0,",
                "\t\t\t\t\talias = pattern.alias;",
                "",
                "\t\t\t\tif (greedy && !pattern.pattern.global) {",
                "\t\t\t\t\t// Without the global flag, lastIndex won't work",
                "\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];",
                "\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");",
                "\t\t\t\t}",
                "",
                "\t\t\t\tpattern = pattern.pattern || pattern;",
                "",
                "\t\t\t\t// Don’t cache length as it changes during the loop",
                "\t\t\t\tfor (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {",
                "",
                "\t\t\t\t\tvar str = strarr[i];",
                "",
                "\t\t\t\t\tif (strarr.length > text.length) {",
                "\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!",
                "\t\t\t\t\t\treturn;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (str instanceof Token) {",
                "\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (greedy && i != strarr.length - 1) {",
                "\t\t\t\t\t\tpattern.lastIndex = pos;",
                "\t\t\t\t\t\tvar match = pattern.exec(text);",
                "\t\t\t\t\t\tif (!match) {",
                "\t\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),",
                "\t\t\t\t\t\t    to = match.index + match[0].length,",
                "\t\t\t\t\t\t    k = i,",
                "\t\t\t\t\t\t    p = pos;",
                "",
                "\t\t\t\t\t\tfor (var len = strarr.length; k < len && (p < to || (!strarr[k].type && !strarr[k - 1].greedy)); ++k) {",
                "\t\t\t\t\t\t\tp += strarr[k].length;",
                "\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from",
                "\t\t\t\t\t\t\tif (from >= p) {",
                "\t\t\t\t\t\t\t\t++i;",
                "\t\t\t\t\t\t\t\tpos = p;",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\t// If strarr[i] is a Token, then the match starts inside another Token, which is invalid",
                "\t\t\t\t\t\tif (strarr[i] instanceof Token) {",
                "\t\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\t// Number of tokens to delete and replace with the new match",
                "\t\t\t\t\t\tdelNum = k - i;",
                "\t\t\t\t\t\tstr = text.slice(pos, p);",
                "\t\t\t\t\t\tmatch.index -= pos;",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\tpattern.lastIndex = 0;",
                "",
                "\t\t\t\t\t\tvar match = pattern.exec(str),",
                "\t\t\t\t\t\t\tdelNum = 1;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (!match) {",
                "\t\t\t\t\t\tif (oneshot) {",
                "\t\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif(lookbehind) {",
                "\t\t\t\t\t\tlookbehindLength = match[1] ? match[1].length : 0;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tvar from = match.index + lookbehindLength,",
                "\t\t\t\t\t    match = match[0].slice(lookbehindLength),",
                "\t\t\t\t\t    to = from + match.length,",
                "\t\t\t\t\t    before = str.slice(0, from),",
                "\t\t\t\t\t    after = str.slice(to);",
                "",
                "\t\t\t\t\tvar args = [i, delNum];",
                "",
                "\t\t\t\t\tif (before) {",
                "\t\t\t\t\t\t++i;",
                "\t\t\t\t\t\tpos += before.length;",
                "\t\t\t\t\t\targs.push(before);",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);",
                "",
                "\t\t\t\t\targs.push(wrapped);",
                "",
                "\t\t\t\t\tif (after) {",
                "\t\t\t\t\t\targs.push(after);",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tArray.prototype.splice.apply(strarr, args);",
                "",
                "\t\t\t\t\tif (delNum != 1)",
                "\t\t\t\t\t\t_.matchGrammar(text, strarr, grammar, i, pos, true, token);",
                "",
                "\t\t\t\t\tif (oneshot)",
                "\t\t\t\t\t\tbreak;",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "",
                "\ttokenize: function(text, grammar, language) {",
                "\t\tvar strarr = [text];",
                "",
                "\t\tvar rest = grammar.rest;",
                "",
                "\t\tif (rest) {",
                "\t\t\tfor (var token in rest) {",
                "\t\t\t\tgrammar[token] = rest[token];",
                "\t\t\t}",
                "",
                "\t\t\tdelete grammar.rest;",
                "\t\t}",
                "",
                "\t\t_.matchGrammar(text, strarr, grammar, 0, 0, false);",
                "",
                "\t\treturn strarr;",
                "\t},",
                "",
                "\thooks: {",
                "\t\tall: {},",
                "",
                "\t\tadd: function (name, callback) {",
                "\t\t\tvar hooks = _.hooks.all;",
                "",
                "\t\t\thooks[name] = hooks[name] || [];",
                "",
                "\t\t\thooks[name].push(callback);",
                "\t\t},",
                "",
                "\t\trun: function (name, env) {",
                "\t\t\tvar callbacks = _.hooks.all[name];",
                "",
                "\t\t\tif (!callbacks || !callbacks.length) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {",
                "\t\t\t\tcallback(env);",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "};",
                "",
                "var Token = _.Token = function(type, content, alias, matchedStr, greedy) {",
                "\tthis.type = type;",
                "\tthis.content = content;",
                "\tthis.alias = alias;",
                "\t// Copy of the full string this token was created from",
                "\tthis.length = (matchedStr || \"\").length|0;",
                "\tthis.greedy = !!greedy;",
                "};",
                "",
                "Token.stringify = function(o, language, parent) {",
                "\tif (typeof o == 'string') {",
                "\t\treturn o;",
                "\t}",
                "",
                "\tif (_.util.type(o) === 'Array') {",
                "\t\treturn o.map(function(element) {",
                "\t\t\treturn Token.stringify(element, language, o);",
                "\t\t}).join('');",
                "\t}",
                "",
                "\tvar env = {",
                "\t\ttype: o.type,",
                "\t\tcontent: Token.stringify(o.content, language, parent),",
                "\t\ttag: 'span',",
                "\t\tclasses: ['token', o.type],",
                "\t\tattributes: {},",
                "\t\tlanguage: language,",
                "\t\tparent: parent",
                "\t};",
                "",
                "\tif (o.alias) {",
                "\t\tvar aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];",
                "\t\tArray.prototype.push.apply(env.classes, aliases);",
                "\t}",
                "",
                "\t_.hooks.run('wrap', env);",
                "",
                "\tvar attributes = Object.keys(env.attributes).map(function(name) {",
                "\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';",
                "\t}).join(' ');",
                "",
                "\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';",
                "",
                "};",
                "",
                "if (!_self.document) {",
                "\tif (!_self.addEventListener) {",
                "\t\t// in Node.js",
                "\t\treturn _self.Prism;",
                "\t}",
                "",
                "\tif (!_.disableWorkerMessageHandler) {",
                "\t\t// In worker",
                "\t\t_self.addEventListener('message', function (evt) {",
                "\t\t\tvar message = JSON.parse(evt.data),",
                "\t\t\t\tlang = message.language,",
                "\t\t\t\tcode = message.code,",
                "\t\t\t\timmediateClose = message.immediateClose;",
                "",
                "\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));",
                "\t\t\tif (immediateClose) {",
                "\t\t\t\t_self.close();",
                "\t\t\t}",
                "\t\t}, false);",
                "\t}",
                "",
                "\treturn _self.Prism;",
                "}",
                "",
                "//Get current script and highlight",
                "var script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();",
                "",
                "if (script) {",
                "\t_.filename = script.src;",
                "",
                "\tif (!_.manual && !script.hasAttribute('data-manual')) {",
                "\t\tif(document.readyState !== \"loading\") {",
                "\t\t\tif (window.requestAnimationFrame) {",
                "\t\t\t\twindow.requestAnimationFrame(_.highlightAll);",
                "\t\t\t} else {",
                "\t\t\t\twindow.setTimeout(_.highlightAll, 16);",
                "\t\t\t}",
                "\t\t}",
                "\t\telse {",
                "\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);",
                "\t\t}",
                "\t}",
                "}",
                "",
                "return _self.Prism;",
                "",
                "})();",
                "",
                "if (typeof module !== 'undefined' && module.exports) {",
                "\tmodule.exports = Prism;",
                "}",
                "",
                "// hack for components to work correctly in node.js",
                "if (typeof global !== 'undefined') {",
                "\tglobal.Prism = Prism;",
                "}"
            ]
        },
        "prism-core.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\\blang(?:uage)?-([\\w-]+)\\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,disableWorkerMessageHandler:_self.Prism&&_self.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof r?new r(e.type,n.util.encode(e.content),e.alias):\"Array\"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e,t){var r=n.util.type(e);switch(t=t||{},r){case\"Object\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a={};t[n.util.objId(e)]=a;for(var l in e)e.hasOwnProperty(l)&&(a[l]=n.util.clone(e[l],t));return a;case\"Array\":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a=[];return t[n.util.objId(e)]=a,e.forEach(function(e,r){a[r]=n.util.clone(e,t)}),a}return e}},languages:{extend:function(e,t){var r=n.util.clone(n.languages[e]);for(var a in t)r[a]=t[a];return r},insertBefore:function(e,t,r,a){a=a||n.languages;var l=a[e];if(2==arguments.length){r=arguments[1];for(var i in r)r.hasOwnProperty(i)&&(l[i]=r[i]);return l}var o={};for(var s in l)if(l.hasOwnProperty(s)){if(s==t)for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);o[s]=l[s]}return n.languages.DFS(n.languages,function(t,n){n===a[e]&&t!=e&&(this[t]=o)}),a[e]=o},DFS:function(e,t,r,a){a=a||{};for(var l in e)e.hasOwnProperty(l)&&(t.call(e,l,e[l],r||l),\"Object\"!==n.util.type(e[l])||a[n.util.objId(e[l])]?\"Array\"!==n.util.type(e[l])||a[n.util.objId(e[l])]||(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,l,a)):(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,null,a)))}},plugins:{},highlightAll:function(e,t){n.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,r){var a={callback:r,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};n.hooks.run(\"before-highlightall\",a);for(var l,i=a.elements||e.querySelectorAll(a.selector),o=0;l=i[o++];)n.highlightElement(l,t===!0,a.callback)},highlightElement:function(t,r,a){for(var l,i,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(l=(o.className.match(e)||[,\"\"])[1].toLowerCase(),i=n.languages[l]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l,t.parentNode&&(o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+l));var s=t.textContent,u={element:t,language:l,grammar:i,code:s};if(n.hooks.run(\"before-sanity-check\",u),!u.code||!u.grammar)return u.code&&(n.hooks.run(\"before-highlight\",u),u.element.textContent=u.code,n.hooks.run(\"after-highlight\",u)),n.hooks.run(\"complete\",u),void 0;if(n.hooks.run(\"before-highlight\",u),r&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(u.element),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,a&&a.call(t),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},highlight:function(e,t,a){var l={code:e,grammar:t,language:a};return n.hooks.run(\"before-tokenize\",l),l.tokens=n.tokenize(l.code,l.grammar),n.hooks.run(\"after-tokenize\",l),r.stringify(n.util.encode(l.tokens),l.language)},matchGrammar:function(e,t,r,a,l,i,o){var s=n.Token;for(var u in r)if(r.hasOwnProperty(u)&&r[u]){if(u==o)return;var g=r[u];g=\"Array\"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+\"g\")}h=h.pattern||h;for(var b=a,k=l;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){if(m&&b!=t.length-1){h.lastIndex=k;var _=h.exec(e);if(!_)break;for(var j=_.index+(d?_[1].length:0),P=_.index+_[0].length,A=b,x=k,O=t.length;O>A&&(P>x||!t[A].type&&!t[A-1].greedy);++A)x+=t[A].length,j>=x&&(++b,k=x);if(t[b]instanceof s)continue;I=A-b,w=e.slice(k,x),_.index-=k}else{h.lastIndex=0;var _=h.exec(w),I=1}if(_){d&&(p=_[1]?_[1].length:0);var j=_.index+p,_=_[0].slice(p),P=j+_.length,N=w.slice(0,j),S=w.slice(P),C=[b,I];N&&(++b,k+=N.length,C.push(N));var E=new s(u,f?n.tokenize(_,f):_,y,_,m);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(t,C),1!=I&&n.matchGrammar(e,t,r,b,k,!0,u),i)break}else if(i)break}}}}},tokenize:function(e,t){var r=[e],a=t.rest;if(a){for(var l in a)t[l]=a[l];delete t.rest}return n.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var r=n.hooks.all;r[e]=r[e]||[],r[e].push(t)},run:function(e,t){var r=n.hooks.all[e];if(r&&r.length)for(var a,l=0;a=r[l++];)a(t)}}},r=n.Token=function(e,t,n,r,a){this.type=e,this.content=t,this.alias=n,this.length=0|(r||\"\").length,this.greedy=!!a};if(r.stringify=function(e,t,a){if(\"string\"==typeof e)return e;if(\"Array\"===n.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join(\"\");var l={type:e.type,content:r.stringify(e.content,t,a),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:a};if(e.alias){var i=\"Array\"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(l.classes,i)}n.hooks.run(\"wrap\",l);var o=Object.keys(l.attributes).map(function(e){return e+'=\"'+(l.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+l.tag+' class=\"'+l.classes.join(\" \")+'\"'+(o?\" \"+o:\"\")+\">\"+l.content+\"</\"+l.tag+\">\"},!_self.document)return _self.addEventListener?(n.disableWorkerMessageHandler||_self.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),r=t.language,a=t.code,l=t.immediateClose;_self.postMessage(n.highlight(a,n.languages[r],r)),l&&_self.close()},!1),_self.Prism):_self.Prism;var a=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return a&&(n.filename=a.src,n.manual||a.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",n.highlightAll))),_self.Prism}();\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);"
            ]
        },
        "prism-cpp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cpp = Prism.languages.extend('c', {",
                "\t'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'operator': /--?|\\+\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|\\|?|\\?|\\*|\\/|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('cpp', 'keyword', {",
                "\t'class-name': {",
                "\t\tpattern: /(class\\s+)\\w+/i,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('cpp', 'string', {",
                "\t'raw-string': {",
                "\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,",
                "\t\talias: 'string',",
                "\t\tgreedy: true",
                "\t}",
                "});"
            ]
        },
        "prism-cpp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cpp=Prism.languages.extend(\"c\",{keyword:/\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\"boolean\":/\\b(?:true|false)\\b/,operator:/--?|\\+\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|\\|?|\\?|\\*|\\/|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/}),Prism.languages.insertBefore(\"cpp\",\"keyword\",{\"class-name\":{pattern:/(class\\s+)\\w+/i,lookbehind:!0}}),Prism.languages.insertBefore(\"cpp\",\"string\",{\"raw-string\":{pattern:/R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,alias:\"string\",greedy:!0}});"
            ]
        },
        "prism-crystal.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.crystal = Prism.languages.extend('ruby', {",
                "\t\tkeyword: [",
                "\t\t\t/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\tnumber: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('crystal', 'string', {",
                "\t\tattribute: {",
                "\t\t\tpattern: /@\\[.+?\\]/,",
                "\t\t\talias: 'attr-name',",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^@\\[|\\]$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\texpansion: [",
                "\t\t{",
                "\t\t\tpattern: /\\{\\{.+?\\}\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\{\\{|\\}\\}$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\{%.+?%\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\{%|%\\}$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t}",
                "\t\t]",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-crystal.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.crystal=e.languages.extend(\"ruby\",{keyword:[/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,{pattern:/(\\.\\s*)(?:is_a|responds_to)\\?/,lookbehind:!0}],number:/\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/}),e.languages.insertBefore(\"crystal\",\"string\",{attribute:{pattern:/@\\[.+?\\]/,alias:\"attr-name\",inside:{delimiter:{pattern:/^@\\[|\\]$/,alias:\"tag\"},rest:e.languages.crystal}},expansion:[{pattern:/\\{\\{.+?\\}\\}/,inside:{delimiter:{pattern:/^\\{\\{|\\}\\}$/,alias:\"tag\"},rest:e.languages.crystal}},{pattern:/\\{%.+?%\\}/,inside:{delimiter:{pattern:/^\\{%|%\\}$/,alias:\"tag\"},rest:e.languages.crystal}}]})}(Prism);"
            ]
        },
        "prism-csharp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.csharp = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'class-name': [",
                "\t\t{",
                "\t\t\t// (Foo bar, Bar baz)",
                "\t\t\tpattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// [Foo]",
                "\t\t\tpattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo : Bar",
                "\t\t\tpattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo",
                "\t\t\tpattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i",
                "});",
                "",
                "Prism.languages.insertBefore('csharp', 'class-name', {",
                "\t'generic-method': {",
                "\t\tpattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,",
                "\t\tinside: {",
                "\t\t\tfunction: /^\\w+/,",
                "\t\t\t'class-name': {",
                "\t\t\t\tpattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tpunctuation: /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\tkeyword: Prism.languages.csharp.keyword,",
                "\t\t\tpunctuation: /[<>(),.:]/",
                "\t\t}",
                "\t},",
                "\t'preprocessor': {",
                "\t\tpattern: /(^\\s*)#.*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t// highlight preprocessor directives as keywords",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.dotnet = Prism.languages.csharp;"
            ]
        },
        "prism-csharp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.csharp=Prism.languages.extend(\"clike\",{keyword:/\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,string:[{pattern:/@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,greedy:!0}],\"class-name\":[{pattern:/\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,inside:{punctuation:/\\./}},{pattern:/(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}}],number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i}),Prism.languages.insertBefore(\"csharp\",\"class-name\",{\"generic-method\":{pattern:/\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,inside:{\"function\":/^\\w+/,\"class-name\":{pattern:/\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,inside:{punctuation:/\\./}},keyword:Prism.languages.csharp.keyword,punctuation:/[<>(),.:]/}},preprocessor:{pattern:/(^\\s*)#.*/m,lookbehind:!0,alias:\"property\",inside:{directive:{pattern:/(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,lookbehind:!0,alias:\"keyword\"}}}}),Prism.languages.dotnet=Prism.languages.csharp;"
            ]
        },
        "prism-csp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/csp-cheat-sheet/",
                " *",
                " * Supports the following:",
                " *  - CSP Level 1",
                " *  - CSP Level 2",
                " *  - CSP Level 3",
                " */",
                "",
                "Prism.languages.csp = {",
                "\t'directive':  {",
                "\t\tpattern: /\\b(?:(?:base-uri|form-action|frame-ancestors|plugin-types|referrer|reflected-xss|report-to|report-uri|require-sri-for|sandbox) |(?:block-all-mixed-content|disown-opener|upgrade-insecure-requests)(?: |;)|(?:child|connect|default|font|frame|img|manifest|media|object|script|style|worker)-src )/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /'(?:self|none|strict-dynamic|(?:nonce-|sha(?:256|384|512)-)[a-zA-Z\\d+=/]+)'/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /(?:'unsafe-inline'|'unsafe-eval'|'unsafe-hashed-attributes'|\\*)/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-csp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.csp={directive:{pattern:/\\b(?:(?:base-uri|form-action|frame-ancestors|plugin-types|referrer|reflected-xss|report-to|report-uri|require-sri-for|sandbox) |(?:block-all-mixed-content|disown-opener|upgrade-insecure-requests)(?: |;)|(?:child|connect|default|font|frame|img|manifest|media|object|script|style|worker)-src )/i,alias:\"keyword\"},safe:{pattern:/'(?:self|none|strict-dynamic|(?:nonce-|sha(?:256|384|512)-)[a-zA-Z\\d+=\\/]+)'/,alias:\"selector\"},unsafe:{pattern:/(?:'unsafe-inline'|'unsafe-eval'|'unsafe-hashed-attributes'|\\*)/,alias:\"function\"}};"
            ]
        },
        "prism-css-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.css.selector = {",
                "\tpattern: /[^{}\\s][^{}]*(?=\\s*\\{)/,",
                "\tinside: {",
                "\t\t'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,",
                "\t\t'pseudo-class': /:[-\\w]+(?:\\(.*\\))?/,",
                "\t\t'class': /\\.[-:.\\w]+/,",
                "\t\t'id': /#[-:.\\w]+/,",
                "\t\t'attribute': /\\[[^\\]]+\\]/",
                "\t}",
                "};",
                "",
                "Prism.languages.insertBefore('css', 'function', {",
                "\t'hexcode': /#[\\da-f]{3,8}/i,",
                "\t'entity': /\\\\[\\da-f]{1,8}/i,",
                "\t'number': /[\\d%.]+/",
                "});"
            ]
        },
        "prism-css-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.css.selector={pattern:/[^{}\\s][^{}]*(?=\\s*\\{)/,inside:{\"pseudo-element\":/:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\"pseudo-class\":/:[-\\w]+(?:\\(.*\\))?/,\"class\":/\\.[-:.\\w]+/,id:/#[-:.\\w]+/,attribute:/\\[[^\\]]+\\]/}},Prism.languages.insertBefore(\"css\",\"function\",{hexcode:/#[\\da-f]{3,8}/i,entity:/\\\\[\\da-f]{1,8}/i,number:/[\\d%.]+/});"
            ]
        },
        "prism-css.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.css = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'atrule': {",
                "\t\tpattern: /@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,",
                "\t\tinside: {",
                "\t\t\t'rule': /@[\\w-]+/",
                "\t\t\t// See rest below",
                "\t\t}",
                "\t},",
                "\t'url': /url\\((?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,",
                "\t'selector': /[^{}\\s][^{};]*?(?=\\s*\\{)/,",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,",
                "\t'important': /\\B!important\\b/i,",
                "\t'function': /[-a-z0-9]+(?=\\()/i,",
                "\t'punctuation': /[(){};:]/",
                "};",
                "",
                "Prism.languages.css['atrule'].inside.rest = Prism.languages.css;",
                "",
                "if (Prism.languages.markup) {",
                "\tPrism.languages.insertBefore('markup', 'tag', {",
                "\t\t'style': {",
                "\t\t\tpattern: /(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.css,",
                "\t\t\talias: 'language-css',",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('inside', 'attr-value', {",
                "\t\t'style-attr': {",
                "\t\t\tpattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'attr-name': {",
                "\t\t\t\t\tpattern: /^\\s*style/i,",
                "\t\t\t\t\tinside: Prism.languages.markup.tag.inside",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,",
                "\t\t\t\t'attr-value': {",
                "\t\t\t\t\tpattern: /.+/i,",
                "\t\t\t\t\tinside: Prism.languages.css",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'language-css'",
                "\t\t}",
                "\t}, Prism.languages.markup.tag);",
                "}"
            ]
        },
        "prism-css.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,inside:{rule:/@[\\w-]+/}},url:/url\\((?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,selector:/[^{}\\s][^{};]*?(?=\\s*\\{)/,string:{pattern:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},property:/[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,important:/\\B!important\\b/i,\"function\":/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:]/},Prism.languages.css.atrule.inside.rest=Prism.languages.css,Prism.languages.markup&&(Prism.languages.insertBefore(\"markup\",\"tag\",{style:{pattern:/(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,lookbehind:!0,inside:Prism.languages.css,alias:\"language-css\",greedy:!0}}),Prism.languages.insertBefore(\"inside\",\"attr-value\",{\"style-attr\":{pattern:/\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,inside:{\"attr-name\":{pattern:/^\\s*style/i,inside:Prism.languages.markup.tag.inside},punctuation:/^\\s*=\\s*['\"]|['\"]\\s*$/,\"attr-value\":{pattern:/.+/i,inside:Prism.languages.css}},alias:\"language-css\"}},Prism.languages.markup.tag));"
            ]
        },
        "prism-d.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.d = Prism.languages.extend('clike', {",
                "\t'string': [",
                "\t\t// r\"\", x\"\"",
                "\t\t/\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/,",
                "\t\t// q\"[]\", q\"()\", q\"<>\", q\"{}\"",
                "\t\t/\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/,",
                "\t\t// q\"IDENT",
                "\t\t// ...",
                "\t\t// IDENT\"",
                "\t\t/\\bq\"([_a-zA-Z][_a-zA-Z\\d]*)(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\1\"/,",
                "\t\t// q\"//\", q\"||\", etc.",
                "\t\t/\\bq\"(.)[\\s\\S]*?\\1\"/,",
                "\t\t// Characters",
                "\t\t/'(?:\\\\'|\\\\?[^']+)'/,",
                "",
                "\t\t/([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?/",
                "\t],",
                "",
                "\t'number': [",
                "\t\t// The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator",
                "\t\t// Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"",
                "\t\t/\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]*/i,",
                "\t\t{",
                "\t\t\tpattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]*/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "",
                "\t// In order: $, keywords and special tokens, globally defined symbols",
                "\t'keyword': /\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,",
                "\t'operator': /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/",
                "});",
                "",
                "",
                "Prism.languages.d.comment = [",
                "\t// Shebang",
                "\t/^\\s*#!.+/,",
                "\t// /+ +/",
                "\t{",
                "\t\t// Allow one level of nesting",
                "\t\tpattern: /(^|[^\\\\])\\/\\+(?:\\/\\+[\\s\\S]*?\\+\\/|[\\s\\S])*?\\+\\//,",
                "\t\tlookbehind: true",
                "\t}",
                "].concat(Prism.languages.d.comment);",
                "",
                "Prism.languages.insertBefore('d', 'comment', {",
                "\t'token-string': {",
                "\t\t// Allow one level of nesting",
                "\t\tpattern: /\\bq\\{(?:\\{[^}]*\\}|[^}])*\\}/,",
                "\t\talias: 'string'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('d', 'keyword', {",
                "\t'property': /\\B@\\w*/",
                "});",
                "",
                "Prism.languages.insertBefore('d', 'function', {",
                "\t'register': {",
                "\t\t// Iasm registers",
                "\t\tpattern: /\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,",
                "\t\talias: 'variable'",
                "\t}",
                "});"
            ]
        },
        "prism-d.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.d=Prism.languages.extend(\"clike\",{string:[/\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/,/\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/,/\\bq\"([_a-zA-Z][_a-zA-Z\\d]*)(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\1\"/,/\\bq\"(.)[\\s\\S]*?\\1\"/,/'(?:\\\\'|\\\\?[^']+)'/,/([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?/],number:[/\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]*/i,{pattern:/((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]*/i,lookbehind:!0}],keyword:/\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,operator:/\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/}),Prism.languages.d.comment=[/^\\s*#!.+/,{pattern:/(^|[^\\\\])\\/\\+(?:\\/\\+[\\s\\S]*?\\+\\/|[\\s\\S])*?\\+\\//,lookbehind:!0}].concat(Prism.languages.d.comment),Prism.languages.insertBefore(\"d\",\"comment\",{\"token-string\":{pattern:/\\bq\\{(?:\\{[^}]*\\}|[^}])*\\}/,alias:\"string\"}}),Prism.languages.insertBefore(\"d\",\"keyword\",{property:/\\B@\\w*/}),Prism.languages.insertBefore(\"d\",\"function\",{register:{pattern:/\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,alias:\"variable\"}});"
            ]
        },
        "prism-dart.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dart = Prism.languages.extend('clike', {",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'keyword': [",
                "\t\t/\\b(?:async|sync|yield)\\*/,",
                "\t\t/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\b/",
                "\t],",
                "\t'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/",
                "});",
                "",
                "Prism.languages.insertBefore('dart','function',{",
                "\t'metadata': {",
                "\t\tpattern: /@\\w+/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});"
            ]
        },
        "prism-dart.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dart=Prism.languages.extend(\"clike\",{string:[{pattern:/r?(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0},{pattern:/r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],keyword:[/\\b(?:async|sync|yield)\\*/,/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\b/],operator:/\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/}),Prism.languages.insertBefore(\"dart\",\"function\",{metadata:{pattern:/@\\w+/,alias:\"symbol\"}});"
            ]
        },
        "prism-diff.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.diff = {",
                "\t'coord': [",
                "\t\t// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").",
                "\t\t/^(?:\\*{3}|-{3}|\\+{3}).*$/m,",
                "\t\t// Match \"@@ ... @@\" coord lines in unified diff.",
                "\t\t/^@@.*@@$/m,",
                "\t\t// Match coord lines in normal diff (starts with a number).",
                "\t\t/^\\d+.*$/m",
                "\t],",
                "",
                "\t// Match inserted and deleted lines. Support both +/- and >/< styles.",
                "\t'deleted': /^[-<].*$/m,",
                "\t'inserted': /^[+>].*$/m,",
                "",
                "\t// Match \"different\" lines (prefixed with \"!\") in context diff.",
                "\t'diff': {",
                "\t\t'pattern': /^!(?!!).+$/m,",
                "\t\t'alias': 'important'",
                "\t}",
                "};"
            ]
        },
        "prism-diff.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.diff={coord:[/^(?:\\*{3}|-{3}|\\+{3}).*$/m,/^@@.*@@$/m,/^\\d+.*$/m],deleted:/^[-<].*$/m,inserted:/^[+>].*$/m,diff:{pattern:/^!(?!!).+$/m,alias:\"important\"}};"
            ]
        },
        "prism-django.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.",
                "// Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.",
                "",
                "var _django_template = {",
                "\t'property': {",
                "\t\tpattern: /(?:{{|{%)[\\s\\S]*?(?:%}|}})/g,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t'keyword': /\\b(?:\\||load|verbatim|widthratio|ssi|firstof|for|url|ifchanged|csrf_token|lorem|ifnotequal|autoescape|now|templatetag|debug|cycle|ifequal|regroup|comment|filter|endfilter|if|spaceless|with|extends|block|include|else|empty|endif|endfor|as|endblock|endautoescape|endverbatim|trans|endtrans|[Tt]rue|[Ff]alse|[Nn]one|in|is|static|macro|endmacro|call|endcall|set|endset|raw|endraw)\\b/,",
                "\t\t\t'operator' : /[-+=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,",
                "\t\t\t'function': /\\b(?:_|abs|add|addslashes|attr|batch|callable|capfirst|capitalize|center|count|cut|d|date|default|default_if_none|defined|dictsort|dictsortreversed|divisibleby|e|equalto|escape|escaped|escapejs|even|filesizeformat|first|float|floatformat|force_escape|forceescape|format|get_digit|groupby|indent|int|iriencode|iterable|join|last|length|length_is|linebreaks|linebreaksbr|linenumbers|list|ljust|lower|make_list|map|mapping|number|odd|phone2numeric|pluralize|pprint|random|reject|rejectattr|removetags|replace|reverse|rjust|round|safe|safeseq|sameas|select|selectattr|sequence|slice|slugify|sort|string|stringformat|striptags|sum|time|timesince|timeuntil|title|trim|truncate|truncatechars|truncatechars_html|truncatewords|truncatewords_html|undefined|unordered_list|upper|urlencode|urlize|urlizetrunc|wordcount|wordwrap|xmlattr|yesno)\\b/,",
                "\t\t\t'important': /\\b-?\\d+(?:\\.\\d+)?\\b/,",
                "\t\t\t'variable': /\\b\\w+?\\b/,",
                "\t\t\t'punctuation' : /[[\\];(),.:]/",
                "\t\t}",
                "\t}",
                "};",
                "",
                "Prism.languages.django = Prism.languages.extend('markup', {'comment': /(?:<!--|{#)[\\s\\S]*?(?:#}|-->)/});",
                "// Updated html tag pattern to allow template tags inside html tags",
                "Prism.languages.django.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^>=]+))?)*\\s*\\/?>/i;",
                "Prism.languages.insertBefore('django', 'entity', _django_template);",
                "Prism.languages.insertBefore('inside', 'tag', _django_template, Prism.languages.django.tag);",
                "",
                "if (Prism.languages.javascript) {",
                "\t// Combine js code and template tags painting inside <script> blocks",
                "\tPrism.languages.insertBefore('inside', 'string', _django_template, Prism.languages.django.script);",
                "\tPrism.languages.django.script.inside.string.inside = _django_template;",
                "}",
                "if (Prism.languages.css) {",
                "\t// Combine css code and template tags painting inside <style> blocks",
                "\tPrism.languages.insertBefore('inside', 'atrule', {'tag': _django_template.property}, Prism.languages.django.style);",
                "\tPrism.languages.django.style.inside.string.inside = _django_template;",
                "}",
                "",
                "// Add an Jinja2 alias",
                "Prism.languages.jinja2 = Prism.languages.django;"
            ]
        },
        "prism-django.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var _django_template={property:{pattern:/(?:{{|{%)[\\s\\S]*?(?:%}|}})/g,greedy:!0,inside:{string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:/\\b(?:\\||load|verbatim|widthratio|ssi|firstof|for|url|ifchanged|csrf_token|lorem|ifnotequal|autoescape|now|templatetag|debug|cycle|ifequal|regroup|comment|filter|endfilter|if|spaceless|with|extends|block|include|else|empty|endif|endfor|as|endblock|endautoescape|endverbatim|trans|endtrans|[Tt]rue|[Ff]alse|[Nn]one|in|is|static|macro|endmacro|call|endcall|set|endset|raw|endraw)\\b/,operator:/[-+=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,\"function\":/\\b(?:_|abs|add|addslashes|attr|batch|callable|capfirst|capitalize|center|count|cut|d|date|default|default_if_none|defined|dictsort|dictsortreversed|divisibleby|e|equalto|escape|escaped|escapejs|even|filesizeformat|first|float|floatformat|force_escape|forceescape|format|get_digit|groupby|indent|int|iriencode|iterable|join|last|length|length_is|linebreaks|linebreaksbr|linenumbers|list|ljust|lower|make_list|map|mapping|number|odd|phone2numeric|pluralize|pprint|random|reject|rejectattr|removetags|replace|reverse|rjust|round|safe|safeseq|sameas|select|selectattr|sequence|slice|slugify|sort|string|stringformat|striptags|sum|time|timesince|timeuntil|title|trim|truncate|truncatechars|truncatechars_html|truncatewords|truncatewords_html|undefined|unordered_list|upper|urlencode|urlize|urlizetrunc|wordcount|wordwrap|xmlattr|yesno)\\b/,important:/\\b-?\\d+(?:\\.\\d+)?\\b/,variable:/\\b\\w+?\\b/,punctuation:/[[\\];(),.:]/}}};Prism.languages.django=Prism.languages.extend(\"markup\",{comment:/(?:<!--|{#)[\\s\\S]*?(?:#}|-->)/}),Prism.languages.django.tag.pattern=/<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^>=]+))?)*\\s*\\/?>/i,Prism.languages.insertBefore(\"django\",\"entity\",_django_template),Prism.languages.insertBefore(\"inside\",\"tag\",_django_template,Prism.languages.django.tag),Prism.languages.javascript&&(Prism.languages.insertBefore(\"inside\",\"string\",_django_template,Prism.languages.django.script),Prism.languages.django.script.inside.string.inside=_django_template),Prism.languages.css&&(Prism.languages.insertBefore(\"inside\",\"atrule\",{tag:_django_template.property},Prism.languages.django.style),Prism.languages.django.style.inside.string.inside=_django_template),Prism.languages.jinja2=Prism.languages.django;"
            ]
        },
        "prism-docker.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.docker = {",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/mi,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t'comment': /#.*/,",
                "\t'punctuation': /---|\\.\\.\\.|[:[\\]{}\\-,|>?]/",
                "};",
                "",
                "Prism.languages.dockerfile = Prism.languages.docker;"
            ]
        },
        "prism-docker.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.docker={keyword:{pattern:/(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/im,lookbehind:!0},string:/(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,comment:/#.*/,punctuation:/---|\\.\\.\\.|[:[\\]{}\\-,|>?]/},Prism.languages.dockerfile=Prism.languages.docker;"
            ]
        },
        "prism-eiffel.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.eiffel = {",
                "\t'comment': /--.*/,",
                "\t'string': [",
                "\t\t// Aligned-verbatim-strings",
                "\t\t{",
                "\t\t\tpattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// Non-aligned-verbatim-strings",
                "\t\t{",
                "\t\t\tpattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// Single-line string",
                "\t\t{",
                "\t\t\tpattern: /\"(?:%\\s+%|%.|[^%\"\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t// normal char | special char | char code",
                "\t'char': /'(?:%.|[^%'\\r\\n])+'/,",
                "\t'keyword': /\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,",
                "\t'boolean': /\\b(?:True|False)\\b/i,",
                "\t// Convention: class-names are always all upper-case characters",
                "\t'class-name': {",
                "\t\t'pattern': /\\b[A-Z][\\dA-Z_]*\\b/,",
                "\t\t'alias': 'builtin'",
                "\t},",
                "\t'number': [",
                "\t\t// hexa | octal | bin",
                "\t\t/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,",
                "\t\t// Decimal",
                "\t\t/(?:\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*|\\d(?:_*\\d)*\\.?/i",
                "\t],",
                "\t'punctuation': /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,",
                "\t'operator': /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/",
                "};"
            ]
        },
        "prism-eiffel.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.eiffel={comment:/--.*/,string:[{pattern:/\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,greedy:!0},{pattern:/\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,greedy:!0},{pattern:/\"(?:%\\s+%|%.|[^%\"\\r\\n])*\"/,greedy:!0}],\"char\":/'(?:%.|[^%'\\r\\n])+'/,keyword:/\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\"boolean\":/\\b(?:True|False)\\b/i,\"class-name\":{pattern:/\\b[A-Z][\\dA-Z_]*\\b/,alias:\"builtin\"},number:[/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,/(?:\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*|\\d(?:_*\\d)*\\.?/i],punctuation:/:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,operator:/\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/};"
            ]
        },
        "prism-elixir.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elixir = {",
                "\t'comment': {",
                "\t\tpattern: /#.*/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t// ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>",
                "\t'regex': {",
                "\t\tpattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': [",
                "\t\t{",
                "\t\t\t// ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>",
                "\t\t\tpattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Multi-line strings are allowed",
                "\t\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'atom': {",
                "\t\t// Look-behind prevents bad highlighting of the :: operator",
                "\t\tpattern: /(^|[^:]):\\w+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t// Look-ahead prevents bad highlighting of the :: operator",
                "\t'attr-name': /\\w+:(?!:)/,",
                "\t'capture': {",
                "\t\t// Look-behind prevents bad highlighting of the && operator",
                "\t\tpattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'argument': {",
                "\t\t// Look-behind prevents bad highlighting of the && operator",
                "\t\tpattern: /(^|[^&])&\\d+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'attribute': {",
                "\t\tpattern: /@\\w+/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,",
                "\t'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,",
                "\t'boolean': /\\b(?:true|false|nil)\\b/,",
                "\t'operator': [",
                "\t\t/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /([^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /([^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /<<|>>|[.,%\\[\\]{}()]/",
                "};",
                "",
                "Prism.languages.elixir.string.forEach(function(o) {",
                "\to.inside = {",
                "\t\t'interpolation': {",
                "\t\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.elixir",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "});",
                ""
            ]
        },
        "prism-elixir.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elixir={comment:{pattern:/#.*/m,lookbehind:!0},regex:{pattern:/~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0,inside:{}},{pattern:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\\w+/,lookbehind:!0,alias:\"symbol\"},\"attr-name\":/\\w+:(?!:)/,capture:{pattern:/(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,lookbehind:!0,alias:\"function\"},argument:{pattern:/(^|[^&])&\\d+/,lookbehind:!0,alias:\"variable\"},attribute:{pattern:/@\\w+/,alias:\"variable\"},number:/\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,keyword:/\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\"boolean\":/\\b(?:true|false|nil)\\b/,operator:[/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\\[\\]{}()]/},Prism.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:Prism.languages.elixir}}}});"
            ]
        },
        "prism-elm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elm = {",
                "\tcomment: /--.*|{-[\\s\\S]*?-}/,",
                "\tchar: {",
                "\t\tpattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,",
                "\t\tgreedy: true",
                "\t},",
                "\tstring: [",
                "\t\t{",
                "\t\t\t// Multiline strings are wrapped in triple \". Quotes may appear unescaped.",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\timport_statement: {",
                "\t\t// The imported or hidden names are not included in this import",
                "\t\t// statement. This is because we want to highlight those exactly like",
                "\t\t// we do for the names in the program.",
                "\t\tpattern: /^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,",
                "\t\tinside: {",
                "\t\t\tkeyword: /\\b(?:import|as|exposing)\\b/",
                "\t\t}",
                "\t},",
                "\tkeyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,",
                "\t// These are builtin variables only. Constructors are highlighted later as a constant.",
                "\tbuiltin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,",
                "\t// decimal integers and floating point numbers | hexadecimal integers",
                "\tnumber: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,",
                "\t// Most of this is needed because of the meaning of a single '.'.",
                "\t// If it stands alone freely, it is the function composition.",
                "\t// It may also be a separator between a module name and an identifier => no",
                "\t// operator. If it comes together with other special characters it is an",
                "\t// operator too.",
                "\t// Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!",
                "\t// Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ",
                "\toperator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,",
                "\t// In Elm, nearly everything is a variable, do not highlight these.",
                "\thvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,",
                "\tconstant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,",
                "\tpunctuation: /[{}[\\]|(),.:]/",
                "};"
            ]
        },
        "prism-elm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elm={comment:/--.*|{-[\\s\\S]*?-}/,\"char\":{pattern:/'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,greedy:!0},string:[{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0},{pattern:/\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,greedy:!0}],import_statement:{pattern:/^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,inside:{keyword:/\\b(?:import|as|exposing)\\b/}},keyword:/\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,builtin:/\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[+\\-\\/*=.$<>:&|^?%#@~!]{2,}|[+\\-\\/*=$<>:&|^?%#@~!]/,hvariable:/\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,constant:/\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,punctuation:/[{}[\\]|(),.:]/};"
            ]
        },
        "prism-erb.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.erb = Prism.languages.extend('ruby', {});",
                "\tPrism.languages.insertBefore('erb', 'comment', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^<%=?|%>$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar erbPattern = /<%=?[\\s\\S]+?%>/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-erb.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.erb=e.languages.extend(\"ruby\",{}),e.languages.insertBefore(\"erb\",\"comment\",{delimiter:{pattern:/^<%=?|%>$/,alias:\"punctuation\"}}),e.hooks.add(\"before-tokenize\",function(a){var n=/<%=?[\\s\\S]+?%>/g;e.languages[\"markup-templating\"].buildPlaceholders(a,\"erb\",n)}),e.hooks.add(\"after-tokenize\",function(a){e.languages[\"markup-templating\"].tokenizePlaceholders(a,\"erb\")})}(Prism);"
            ]
        },
        "prism-erlang.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.erlang = {",
                "\t'comment': /%.+/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'quoted-function': {",
                "\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'quoted-atom': {",
                "\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,",
                "\t\talias: 'atom'",
                "\t},",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,",
                "\t'number': [",
                "\t\t/\\$\\\\?./,",
                "\t\t/\\d+#[a-z0-9]+/i,",
                "\t\t/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i",
                "\t],",
                "\t'function': /\\b[a-z][\\w@]*(?=\\()/,",
                "\t'variable': {",
                "\t\t// Look-behind is used to prevent wrong highlighting of atoms containing \"@\"",
                "\t\tpattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': [",
                "\t\t/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /(^|[^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /(^|[^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'atom': /\\b[a-z][\\w@]*/,",
                "\t'punctuation': /[()[\\]{}:;,.#|]|<<|>>/",
                "",
                "};"
            ]
        },
        "prism-erlang.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.erlang={comment:/%.+/,string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},\"quoted-function\":{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,alias:\"function\"},\"quoted-atom\":{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'/,alias:\"atom\"},\"boolean\":/\\b(?:true|false)\\b/,keyword:/\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,number:[/\\$\\\\?./,/\\d+#[a-z0-9]+/i,/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],\"function\":/\\b[a-z][\\w@]*(?=\\()/,variable:{pattern:/(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,lookbehind:!0},operator:[/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],atom:/\\b[a-z][\\w@]*/,punctuation:/[()[\\]{}:;,.#|]|<<|>>/};"
            ]
        },
        "prism-flow.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.flow = Prism.languages.extend('javascript', {});",
                "",
                "\tPrism.languages.insertBefore('flow', 'keyword', {",
                "\t\t'type': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t}",
                "\t\t]",
                "\t});",
                "\tPrism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;",
                "",
                "\tPrism.languages.insertBefore('flow', 'operator', {",
                "\t\t'flow-punctuation': {",
                "\t\t\tpattern: /\\{\\||\\|\\}/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tif (Prism.util.type(Prism.languages.flow.keyword) !== 'Array') {",
                "\t\tPrism.languages.flow.keyword = [Prism.languages.flow.keyword];",
                "\t}",
                "\tPrism.languages.flow.keyword.unshift(",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t);",
                "}(Prism));"
            ]
        },
        "prism-flow.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){a.languages.flow=a.languages.extend(\"javascript\",{}),a.languages.insertBefore(\"flow\",\"keyword\",{type:[{pattern:/\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,alias:\"tag\"}]}),a.languages.flow[\"function-variable\"].pattern=/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,a.languages.insertBefore(\"flow\",\"operator\",{\"flow-punctuation\":{pattern:/\\{\\||\\|\\}/,alias:\"punctuation\"}}),\"Array\"!==a.util.type(a.languages.flow.keyword)&&(a.languages.flow.keyword=[a.languages.flow.keyword]),a.languages.flow.keyword.unshift({pattern:/(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,lookbehind:!0},{pattern:/(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,lookbehind:!0})}(Prism);"
            ]
        },
        "prism-fortran.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fortran = {",
                "\t'quoted-number': {",
                "\t\tpattern: /[BOZ](['\"])[A-F0-9]+\\1/i,",
                "\t\talias: 'number'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,",
                "\t\tinside: {",
                "\t\t\t'comment': {",
                "\t\t\t\tpattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /!.*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'boolean': /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,",
                "\t'keyword': [",
                "\t\t// Types",
                "\t\t/\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i,",
                "\t\t// END statements",
                "\t\t/\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,",
                "\t\t// Statements",
                "\t\t/\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,",
                "\t\t// Others",
                "\t\t/\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i",
                "\t],",
                "\t'operator': [",
                "\t\t/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i,",
                "\t\t{",
                "\t\t\t// Use lookbehind to prevent confusion with (/ /)",
                "\t\t\tpattern: /(^|(?!\\().)\\/(?!\\))/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /\\(\\/|\\/\\)|[(),;:&]/",
                "};"
            ]
        },
        "prism-fortran.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fortran={\"quoted-number\":{pattern:/[BOZ](['\"])[A-F0-9]+\\1/i,alias:\"number\"},string:{pattern:/(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,inside:{comment:{pattern:/(&(?:\\r\\n?|\\n)\\s*)!.*/,lookbehind:!0}}},comment:{pattern:/!.*/,greedy:!0},\"boolean\":/\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,keyword:[/\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i,/\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,/\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,/\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],operator:[/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i,{pattern:/(^|(?!\\().)\\/(?!\\))/,lookbehind:!0}],punctuation:/\\(\\/|\\/\\)|[(),;:&]/};"
            ]
        },
        "prism-fsharp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fsharp = Prism.languages.extend('clike', {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'keyword': /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,",
                "\t'string': {",
                "\t\tpattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1)B?/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': [",
                "\t\t/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/,",
                "\t\t/\\b0b[01]+(?:y|uy)?\\b/,",
                "\t\t/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,",
                "\t\t/\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/",
                "\t]",
                "});",
                "Prism.languages.insertBefore('fsharp', 'keyword', {",
                "\t'preprocessor': {",
                "\t\tpattern: /^[^\\r\\n\\S]*#.*/m,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-fsharp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fsharp=Prism.languages.extend(\"clike\",{comment:[{pattern:/(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],keyword:/\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,string:{pattern:/(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1)B?/,greedy:!0},number:[/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/,/\\b0b[01]+(?:y|uy)?\\b/,/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,/\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/]}),Prism.languages.insertBefore(\"fsharp\",\"keyword\",{preprocessor:{pattern:/^[^\\r\\n\\S]*#.*/m,alias:\"property\",inside:{directive:{pattern:/(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,lookbehind:!0,alias:\"keyword\"}}}});"
            ]
        },
        "prism-gedcom.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gedcom = {",
                "\t'line-value': {",
                "\t\t// Preceded by level, optional pointer, and tag",
                "\t\tpattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'pointer': {",
                "\t\t\t\tpattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'tag': {",
                "\t\t// Preceded by level and optional pointer",
                "\t\tpattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'level': {",
                "\t\tpattern: /(^\\s*)\\d+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'number'",
                "\t},",
                "\t'pointer': {",
                "\t\tpattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-gedcom.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gedcom={\"line-value\":{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-.\\/:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,lookbehind:!0,inside:{pointer:{pattern:/^@\\w[\\w!\"$%&'()*+,\\-.\\/:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,alias:\"variable\"}}},tag:{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-.\\/:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,lookbehind:!0,alias:\"string\"},level:{pattern:/(^\\s*)\\d+/m,lookbehind:!0,alias:\"number\"},pointer:{pattern:/@\\w[\\w!\"$%&'()*+,\\-.\\/:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,alias:\"variable\"}};"
            ]
        },
        "prism-gherkin.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gherkin = {",
                "\t'pystring': {",
                "\t\tpattern: /(\"\"\"|''')[\\s\\S]+?\\1/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'tag': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)@\\S*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'feature': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:]+(?:\\r?\\n|\\r|$))*/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'important': {",
                "\t\t\t\tpattern: /(:)[^\\r\\n]+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\tkeyword: /[^:\\r\\n]+:/",
                "\t\t}",
                "\t},",
                "\t'scenario': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'important': {",
                "\t\t\t\tpattern: /(:)[^\\r\\n]*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\tkeyword: /[^:\\r\\n]+:/",
                "\t\t}",
                "\t},",
                "\t'table-body': {",
                "\t\t// Look-behind is used to skip the table head, which has the same format as any table row",
                "\t\tpattern: /((?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*)+/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'outline': {",
                "\t\t\t\tpattern: /<[^>]+?>/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\t'td': {",
                "\t\t\t\tpattern: /\\s*[^\\s|][^|]*/,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'table-head': {",
                "\t\tpattern: /(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*/,",
                "\t\tinside: {",
                "\t\t\t'th': {",
                "\t\t\t\tpattern: /\\s*[^\\s|][^|]*/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'atrule': {",
                "\t\tpattern: /((?:\\r?\\n|\\r)[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t]+)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,",
                "\t\tinside: {",
                "\t\t\t'outline': {",
                "\t\t\t\tpattern: /<[^>]+?>/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'outline': {",
                "\t\tpattern: /<[^>]+?>/,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-gherkin.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gherkin={pystring:{pattern:/(\"\"\"|''')[\\s\\S]+?\\1/,alias:\"string\"},comment:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)#.*/,lookbehind:!0},tag:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)@\\S*/,lookbehind:!0},feature:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:]+(?:\\r?\\n|\\r|$))*/,lookbehind:!0,inside:{important:{pattern:/(:)[^\\r\\n]+/,lookbehind:!0},keyword:/[^:\\r\\n]+:/}},scenario:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/,lookbehind:!0,inside:{important:{pattern:/(:)[^\\r\\n]*/,lookbehind:!0},keyword:/[^:\\r\\n]+:/}},\"table-body\":{pattern:/((?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*)+/,lookbehind:!0,inside:{outline:{pattern:/<[^>]+?>/,alias:\"variable\"},td:{pattern:/\\s*[^\\s|][^|]*/,alias:\"string\"},punctuation:/\\|/}},\"table-head\":{pattern:/(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*/,inside:{th:{pattern:/\\s*[^\\s|][^|]*/,alias:\"variable\"},punctuation:/\\|/}},atrule:{pattern:/((?:\\r?\\n|\\r)[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t]+)/,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,inside:{outline:{pattern:/<[^>]+?>/,alias:\"variable\"}}},outline:{pattern:/<[^>]+?>/,alias:\"variable\"}};"
            ]
        },
        "prism-git.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.git = {",
                "\t/*",
                "\t * A simple one line comment like in a git status command",
                "\t * For instance:",
                "\t * $ git status",
                "\t * # On branch infinite-scroll",
                "\t * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,",
                "\t * # and have 1 and 2 different commits each, respectively.",
                "\t * nothing to commit (working directory clean)",
                "\t */",
                "\t'comment': /^#.*/m,",
                "",
                "\t/*",
                "\t * Regexp to match the changed lines in a git diff output. Check the example below.",
                "\t */",
                "\t'deleted': /^[-–].*/m,",
                "\t'inserted': /^\\+.*/m,",
                "",
                "\t/*",
                "\t * a string (double and simple quote)",
                "\t */",
                "\t'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,",
                "",
                "\t/*",
                "\t * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters",
                "\t * For instance:",
                "\t * $ git add file.txt",
                "\t */",
                "\t'command': {",
                "\t\tpattern: /^.*\\$ git .*$/m,",
                "\t\tinside: {",
                "\t\t\t/*",
                "\t\t\t * A git command can contain a parameter starting by a single or a double dash followed by a string",
                "\t\t\t * For instance:",
                "\t\t\t * $ git diff --cached",
                "\t\t\t * $ git log -p",
                "\t\t\t */",
                "\t\t\t'parameter': /\\s--?\\w+/m",
                "\t\t}",
                "\t},",
                "",
                "\t/*",
                "\t * Coordinates displayed in a git diff command",
                "\t * For instance:",
                "\t * $ git diff",
                "\t * diff --git file.txt file.txt",
                "\t * index 6214953..1d54a52 100644",
                "\t * --- file.txt",
                "\t * +++ file.txt",
                "\t * @@ -1 +1,2 @@",
                "\t * -Here's my tetx file",
                "\t * +Here's my text file",
                "\t * +And this is the second line",
                "\t */",
                "\t'coord': /^@@.*@@$/m,",
                "",
                "\t/*",
                "\t * Match a \"commit [SHA1]\" line in a git log output.",
                "\t * For instance:",
                "\t * $ git log",
                "\t * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09",
                "\t * Author: lgiraudel",
                "\t * Date:   Mon Feb 17 11:18:34 2014 +0100",
                "\t *",
                "\t *     Add of a new line",
                "\t */",
                "\t'commit_sha1': /^commit \\w{40}$/m",
                "};"
            ]
        },
        "prism-git.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.git={comment:/^#.*/m,deleted:/^[-–].*/m,inserted:/^\\+.*/m,string:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,command:{pattern:/^.*\\$ git .*$/m,inside:{parameter:/\\s--?\\w+/m}},coord:/^@@.*@@$/m,commit_sha1:/^commit \\w{40}$/m};"
            ]
        },
        "prism-glsl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.glsl = Prism.languages.extend('clike', {",
                "\t'comment': [",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t/\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/",
                "\t],",
                "\t'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,",
                "\t'keyword': /\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('glsl', 'comment', {",
                "\t'preprocessor': {",
                "\t\tpattern: /(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'builtin'",
                "\t}",
                "});"
            ]
        },
        "prism-glsl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.glsl=Prism.languages.extend(\"clike\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,/\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/],number:/(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,keyword:/\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/}),Prism.languages.insertBefore(\"glsl\",\"comment\",{preprocessor:{pattern:/(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,lookbehind:!0,alias:\"builtin\"}});"
            ]
        },
        "prism-go.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.go = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,",
                "\t'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,",
                "\t'boolean': /\\b(?:_|iota|nil|true|false)\\b/,",
                "\t'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,",
                "\t'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,",
                "\t'string': {",
                "\t\tpattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\tgreedy: true",
                "\t}",
                "});",
                "delete Prism.languages.go['class-name'];"
            ]
        },
        "prism-go.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.go=Prism.languages.extend(\"clike\",{keyword:/\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,builtin:/\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\"boolean\":/\\b(?:_|iota|nil|true|false)\\b/,operator:/[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,number:/(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,string:{pattern:/([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0}}),delete Prism.languages.go[\"class-name\"];"
            ]
        },
        "prism-graphql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.graphql = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'variable': /\\$[a-z_]\\w*/i,",
                "\t'directive': {",
                "\t\tpattern: /@[a-z_]\\w*/i,",
                "\t\talias: 'function'",
                "\t},",
                "\t'attr-name': /[a-z_]\\w*(?=\\s*:)/i,",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(fragment\\s+(?!on)[a-z_]\\w*\\s+|\\.{3}\\s*)on\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/\\b(?:query|fragment|mutation)\\b/",
                "\t],",
                "\t'operator': /!|=|\\.{3}/,",
                "\t'punctuation': /[!(){}\\[\\]:=,]/",
                "};"
            ]
        },
        "prism-graphql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.graphql={comment:/#.*/,string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},number:/(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\"boolean\":/\\b(?:true|false)\\b/,variable:/\\$[a-z_]\\w*/i,directive:{pattern:/@[a-z_]\\w*/i,alias:\"function\"},\"attr-name\":/[a-z_]\\w*(?=\\s*:)/i,keyword:[{pattern:/(fragment\\s+(?!on)[a-z_]\\w*\\s+|\\.{3}\\s*)on\\b/,lookbehind:!0},/\\b(?:query|fragment|mutation)\\b/],operator:/!|=|\\.{3}/,punctuation:/[!(){}\\[\\]:=,]/};"
            ]
        },
        "prism-groovy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.groovy = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /\\.+|[{}[\\];(),:$]/",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'string', {",
                "\t'shebang': {",
                "\t\tpattern: /#!.+/,",
                "\t\talias: 'comment'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'punctuation', {",
                "\t'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'function', {",
                "\t'annotation': {",
                "\t\talias: 'punctuation',",
                "\t\tpattern: /(^|[^.])@\\w+/,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "// Handle string interpolation",
                "Prism.hooks.add('wrap', function(env) {",
                "\tif (env.language === 'groovy' && env.type === 'string') {",
                "\t\tvar delimiter = env.content[0];",
                "",
                "\t\tif (delimiter != \"'\") {",
                "\t\t\tvar pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;",
                "\t\t\tif (delimiter === '$') {",
                "\t\t\t\tpattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;",
                "\t\t\t}",
                "",
                "\t\t\t// To prevent double HTML-encoding we have to decode env.content first",
                "\t\t\tenv.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');",
                "",
                "\t\t\tenv.content = Prism.highlight(env.content, {",
                "\t\t\t\t'expression': {",
                "\t\t\t\t\tpattern: pattern,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: Prism.languages.groovy",
                "\t\t\t\t}",
                "\t\t\t});",
                "",
                "\t\t\tenv.classes.push(delimiter === '/' ? 'regex' : 'gstring');",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-groovy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.groovy=Prism.languages.extend(\"clike\",{keyword:/\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,string:[{pattern:/(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,greedy:!0},{pattern:/([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],number:/\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,operator:{pattern:/(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,lookbehind:!0},punctuation:/\\.+|[{}[\\];(),:$]/}),Prism.languages.insertBefore(\"groovy\",\"string\",{shebang:{pattern:/#!.+/,alias:\"comment\"}}),Prism.languages.insertBefore(\"groovy\",\"punctuation\",{\"spock-block\":/\\b(?:setup|given|when|then|and|cleanup|expect|where):/}),Prism.languages.insertBefore(\"groovy\",\"function\",{annotation:{alias:\"punctuation\",pattern:/(^|[^.])@\\w+/,lookbehind:!0}}),Prism.hooks.add(\"wrap\",function(e){if(\"groovy\"===e.language&&\"string\"===e.type){var t=e.content[0];if(\"'\"!=t){var n=/([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\"$\"===t&&(n=/([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/),e.content=e.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\"),e.content=Prism.highlight(e.content,{expression:{pattern:n,lookbehind:!0,inside:Prism.languages.groovy}}),e.classes.push(\"/\"===t?\"regex\":\"gstring\")}}});"
            ]
        },
        "prism-haml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tHandle multiline code after tag",
                "\t    %foo= some |",
                "\t\t\tmultiline |",
                "\t\t\tcode |",
                "*/",
                "",
                "(function(Prism) {",
                "",
                "\tPrism.languages.haml = {",
                "\t\t// Multiline stuff should appear before the rest",
                "",
                "\t\t'multiline-comment': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "",
                "\t\t'multiline-code': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\t// See at the end of the file for known filters",
                "\t\t'filter': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'filter-name': {",
                "\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'markup': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.markup",
                "\t\t\t}",
                "\t\t},",
                "\t\t'doctype': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\t// Allows for one nested group of braces",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': [",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\t// Lookbehind tries to prevent interpolations from breaking it all",
                "\t\t\t\t\t\t// Allows for one nested group of braces",
                "\t\t\t\t\t\tpattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\t\tpattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,",
                "\t\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,",
                "\t\t\t\t\t\t\t'punctuation': /[=(),]/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /[<>]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Interpolations in plain text",
                "\t\t'interpolation': {",
                "\t\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t};",
                "",
                "\tvar filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+';",
                "",
                "\t// Non exhaustive list of available filters and associated languages",
                "\tvar filters = [",
                "\t\t'css',",
                "\t\t{filter:'coffee',language:'coffeescript'},",
                "\t\t'erb',",
                "\t\t'javascript',",
                "\t\t'less',",
                "\t\t'markdown',",
                "\t\t'ruby',",
                "\t\t'scss',",
                "\t\t'textile'",
                "\t];",
                "\tvar all_filters = {};",
                "\tfor (var i = 0, l = filters.length; i < l; i++) {",
                "\t\tvar filter = filters[i];",
                "\t\tfilter = typeof filter === 'string' ? {filter: filter, language: filter} : filter;",
                "\t\tif (Prism.languages[filter.language]) {",
                "\t\t\tall_filters['filter-' + filter.filter] = {",
                "\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'filter-name': {",
                "\t\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages[filter.language]",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tPrism.languages.insertBefore('haml', 'filter', all_filters);",
                "",
                "}(Prism));"
            ]
        },
        "prism-haml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.haml={\"multiline-comment\":{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,lookbehind:!0,alias:\"comment\"},\"multiline-code\":[{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,lookbehind:!0,inside:{rest:e.languages.ruby}}],filter:{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},markup:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,lookbehind:!0,inside:{rest:e.languages.markup}},doctype:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,lookbehind:!0},tag:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,lookbehind:!0,inside:{attributes:[{pattern:/(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,lookbehind:!0},\"attr-name\":/[\\w:-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[=(),]/}},{pattern:/\\[[^\\]]+\\]/,inside:{rest:e.languages.ruby}}],punctuation:/[<>]/}},code:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,lookbehind:!0,inside:{rest:e.languages.ruby}},interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:e.languages.ruby}},punctuation:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,lookbehind:!0}};for(var t=\"((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\",r=[\"css\",{filter:\"coffee\",language:\"coffeescript\"},\"erb\",\"javascript\",\"less\",\"markdown\",\"ruby\",\"scss\",\"textile\"],n={},a=0,i=r.length;i>a;a++){var l=r[a];l=\"string\"==typeof l?{filter:l,language:l}:l,e.languages[l.language]&&(n[\"filter-\"+l.filter]={pattern:RegExp(t.replace(\"{{filter_name}}\",l.filter)),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[l.language]}})}e.languages.insertBefore(\"haml\",\"filter\",n)}(Prism);"
            ]
        },
        "prism-handlebars.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "\tPrism.languages.handlebars = {",
                "\t\t'comment': /\\{\\{![\\s\\S]*?\\}\\}/,",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'block': {",
                "\t\t\tpattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'brackets': {",
                "\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\[|\\]/,",
                "\t\t\t\tvariable: /[\\s\\S]+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,",
                "\t\t'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/",
                "\t};",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-handlebars.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){a.languages.handlebars={comment:/\\{\\{![\\s\\S]*?\\}\\}/,delimiter:{pattern:/^\\{\\{\\{?|\\}\\}\\}?$/i,alias:\"punctuation\"},string:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\"boolean\":/\\b(?:true|false)\\b/,block:{pattern:/^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,lookbehind:!0,alias:\"keyword\"},brackets:{pattern:/\\[[^\\]]+\\]/,inside:{punctuation:/\\[|\\]/,variable:/[\\s\\S]+/}},punctuation:/[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,variable:/[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/},a.hooks.add(\"before-tokenize\",function(e){var n=/\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;a.languages[\"markup-templating\"].buildPlaceholders(e,\"handlebars\",n)}),a.hooks.add(\"after-tokenize\",function(e){a.languages[\"markup-templating\"].tokenizePlaceholders(e,\"handlebars\")})}(Prism);"
            ]
        },
        "prism-haskell.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haskell= {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'char': /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword' : /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,",
                "\t'import_statement' : {",
                "\t\t// The imported or hidden names are not included in this import",
                "\t\t// statement. This is because we want to highlight those exactly like",
                "\t\t// we do for the names in the program.",
                "\t\tpattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /\\b(?:import|qualified|as|hiding)\\b/",
                "\t\t}",
                "\t},",
                "\t// These are builtin variables only. Constructors are highlighted later as a constant.",
                "\t'builtin': /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,",
                "\t// decimal integers and floating point numbers | octal integers | hexadecimal integers",
                "\t'number' : /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,",
                "\t// Most of this is needed because of the meaning of a single '.'.",
                "\t// If it stands alone freely, it is the function composition.",
                "\t// It may also be a separator between a module name and an identifier => no",
                "\t// operator. If it comes together with other special characters it is an",
                "\t// operator too.",
                "\t'operator' : /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,",
                "\t// In Haskell, nearly everything is a variable, do not highlight these.",
                "\t'hvariable': /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,",
                "\t'constant': /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,",
                "\t'punctuation' : /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-haskell.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,lookbehind:!0},\"char\":/'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,string:{pattern:/\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,greedy:!0},keyword:/\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,import_statement:{pattern:/((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:import|qualified|as|hiding)\\b/}},builtin:/\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,hvariable:/\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,constant:/\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-haxe.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haxe = Prism.languages.extend('clike', {",
                "\t// Strings can be multi-line",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': {",
                "\t\t\t\t\t\tpattern: /^\\$\\w*/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t// The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"",
                "\t'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,",
                "\t'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/",
                "});",
                "Prism.languages.insertBefore('haxe', 'class-name', {",
                "\t'regex': {",
                "\t\tpattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,",
                "\t\tgreedy: true",
                "\t}",
                "});",
                "Prism.languages.insertBefore('haxe', 'keyword', {",
                "\t'preprocessor': {",
                "\t\tpattern: /#\\w+/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'metadata': {",
                "\t\tpattern: /@:?\\w+/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'reification': {",
                "\t\tpattern: /\\$(?:\\w+|(?=\\{))/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "Prism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;",
                "delete Prism.languages.haxe['class-name'];"
            ]
        },
        "prism-haxe.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haxe=Prism.languages.extend(\"clike\",{string:{pattern:/([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{interpolation:{pattern:/(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,lookbehind:!0,inside:{interpolation:{pattern:/^\\$\\w*/,alias:\"variable\"}}}}},keyword:/\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,operator:/\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/}),Prism.languages.insertBefore(\"haxe\",\"class-name\",{regex:{pattern:/~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,greedy:!0}}),Prism.languages.insertBefore(\"haxe\",\"keyword\",{preprocessor:{pattern:/#\\w+/,alias:\"builtin\"},metadata:{pattern:/@:?\\w+/,alias:\"symbol\"},reification:{pattern:/\\$(?:\\w+|(?=\\{))/,alias:\"variable\"}}),Prism.languages.haxe.string.inside.interpolation.inside.rest=Prism.languages.haxe,delete Prism.languages.haxe[\"class-name\"];"
            ]
        },
        "prism-hpkp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/",
                " */",
                "",
                "Prism.languages.hpkp = {",
                "\t'directive':  {",
                "\t\tpattern: /\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=/]+\"|(?:max-age|report-uri)=|report-to )/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /\\d{7,}/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /\\d{0,6}/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-hpkp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hpkp={directive:{pattern:/\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=\\/]+\"|(?:max-age|report-uri)=|report-to )/,alias:\"keyword\"},safe:{pattern:/\\d{7,}/,alias:\"selector\"},unsafe:{pattern:/\\d{0,6}/,alias:\"function\"}};"
            ]
        },
        "prism-hsts.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/",
                " */",
                "",
                "Prism.languages.hsts = {",
                "\t'directive':  {",
                "\t\tpattern: /\\b(?:max-age=|includeSubDomains|preload)/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /\\d{8,}/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /\\d{0,7}/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-hsts.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hsts={directive:{pattern:/\\b(?:max-age=|includeSubDomains|preload)/,alias:\"keyword\"},safe:{pattern:/\\d{8,}/,alias:\"selector\"},unsafe:{pattern:/\\d{0,7}/,alias:\"function\"}};"
            ]
        },
        "prism-http.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.http = {",
                "\t'request-line': {",
                "\t\tpattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,",
                "\t\tinside: {",
                "\t\t\t// HTTP Verb",
                "\t\t\tproperty: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,",
                "\t\t\t// Path or query argument",
                "\t\t\t'attr-name': /:\\w+/",
                "\t\t}",
                "\t},",
                "\t'response-status': {",
                "\t\tpattern: /^HTTP\\/1.[01] \\d+.*/m,",
                "\t\tinside: {",
                "\t\t\t// Status, e.g. 200 OK",
                "\t\t\tproperty: {",
                "                pattern: /(^HTTP\\/1.[01] )\\d+.*/i,",
                "                lookbehind: true",
                "            }",
                "\t\t}",
                "\t},",
                "\t// HTTP header name",
                "\t'header-name': {",
                "        pattern: /^[\\w-]+:(?=.)/m,",
                "        alias: 'keyword'",
                "    }",
                "};",
                "",
                "// Create a mapping of Content-Type headers to language definitions",
                "var httpLanguages = {",
                "\t'application/json': Prism.languages.javascript,",
                "\t'application/xml': Prism.languages.markup,",
                "\t'text/xml': Prism.languages.markup,",
                "\t'text/html': Prism.languages.markup",
                "};",
                "",
                "// Insert each content type parser that has its associated language",
                "// currently loaded.",
                "for (var contentType in httpLanguages) {",
                "\tif (httpLanguages[contentType]) {",
                "\t\tvar options = {};",
                "\t\toptions[contentType] = {",
                "\t\t\tpattern: new RegExp('(content-type:\\\\s*' + contentType + '[\\\\w\\\\W]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\w\\\\W]*', 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: httpLanguages[contentType]",
                "\t\t\t}",
                "\t\t};",
                "\t\tPrism.languages.insertBefore('http', 'header-name', options);",
                "\t}",
                "}"
            ]
        },
        "prism-http.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.http={\"request-line\":{pattern:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,inside:{property:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\"attr-name\":/:\\w+/}},\"response-status\":{pattern:/^HTTP\\/1.[01] \\d+.*/m,inside:{property:{pattern:/(^HTTP\\/1.[01] )\\d+.*/i,lookbehind:!0}}},\"header-name\":{pattern:/^[\\w-]+:(?=.)/m,alias:\"keyword\"}};var httpLanguages={\"application/json\":Prism.languages.javascript,\"application/xml\":Prism.languages.markup,\"text/xml\":Prism.languages.markup,\"text/html\":Prism.languages.markup};for(var contentType in httpLanguages)if(httpLanguages[contentType]){var options={};options[contentType]={pattern:new RegExp(\"(content-type:\\\\s*\"+contentType+\"[\\\\w\\\\W]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\w\\\\W]*\",\"i\"),lookbehind:!0,inside:{rest:httpLanguages[contentType]}},Prism.languages.insertBefore(\"http\",\"header-name\",options)}"
            ]
        },
        "prism-ichigojam.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// according to the offical reference (EN)",
                "// https://ichigojam.net/IchigoJam-en.html",
                "Prism.languages.ichigojam = {",
                "\t'comment': /(?:\\B'|REM)(?:[^\\n\\r]*)/i,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t'keyword': /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,",
                "\t'function': /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,",
                "\t'label': /(?:\\B@[^\\s]+)/i,",
                "\t'operator': /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,",
                "\t'punctuation': /[\\[,;:()\\]]/",
                "};"
            ]
        },
        "prism-ichigojam.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ichigojam={comment:/(?:\\B'|REM)(?:[^\\n\\r]*)/i,string:{pattern:/\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,greedy:!0},number:/\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,keyword:/\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,\"function\":/\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,label:/(?:\\B@[^\\s]+)/i,operator:/<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,punctuation:/[\\[,;:()\\]]/};"
            ]
        },
        "prism-icon.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.icon = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,",
                "\t'builtin-keyword': {",
                "\t\tpattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /\\$\\w+/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'keyword': /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,",
                "\t'operator': /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,",
                "\t'punctuation': /[\\[\\](){},;]/",
                "};"
            ]
        },
        "prism-icon.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.icon={comment:/#.*/,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,greedy:!0},number:/\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\"builtin-keyword\":{pattern:/&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,alias:\"variable\"},directive:{pattern:/\\$\\w+/,alias:\"builtin\"},keyword:/\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,\"function\":/(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,operator:/[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,punctuation:/[\\[\\](){},;]/};"
            ]
        },
        "prism-inform7.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.inform7 = {",
                "\t'string': {",
                "\t\tpattern: /\"[^\"]*\"/,",
                "\t\tinside: {",
                "\t\t\t'substitution': {",
                "\t\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern:/\\[|\\]/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'title': {",
                "\t\tpattern: /^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,",
                "\t\talias: 'important'",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?\\w*|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'verb': {",
                "\t\tpattern: /(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'property': {",
                "\t\tpattern: /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'position': {",
                "\t\tpattern: /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'type': {",
                "\t\tpattern: /(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'punctuation': /[.,:;(){}]/",
                "};",
                "",
                "Prism.languages.inform7['string'].inside['substitution'].inside.rest = Prism.languages.inform7;",
                "// We don't want the remaining text in the substitution to be highlighted as the string.",
                "Prism.languages.inform7['string'].inside['substitution'].inside.rest.text = {",
                "\tpattern: /\\S(?:\\s*\\S)*/,",
                "\talias: 'comment'",
                "};"
            ]
        },
        "prism-inform7.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.inform7={string:{pattern:/\"[^\"]*\"/,inside:{substitution:{pattern:/\\[[^\\]]+\\]/,inside:{delimiter:{pattern:/\\[|\\]/,alias:\"punctuation\"}}}}},comment:{pattern:/\\[[^\\]]+\\]/,greedy:!0},title:{pattern:/^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,alias:\"important\"},number:{pattern:/(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?\\w*|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,lookbehind:!0},verb:{pattern:/(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,lookbehind:!0,alias:\"operator\"},keyword:{pattern:/(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,lookbehind:!0},property:{pattern:/(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,lookbehind:!0,alias:\"symbol\"},position:{pattern:/(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,lookbehind:!0,alias:\"keyword\"},type:{pattern:/(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,lookbehind:!0,alias:\"variable\"},punctuation:/[.,:;(){}]/},Prism.languages.inform7.string.inside.substitution.inside.rest=Prism.languages.inform7,Prism.languages.inform7.string.inside.substitution.inside.rest.text={pattern:/\\S(?:\\s*\\S)*/,alias:\"comment\"};"
            ]
        },
        "prism-ini.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ini= {",
                "\t'comment': /^[ \\t]*;.*$/m,",
                "\t'selector': /^[ \\t]*\\[.*?\\]/m,",
                "\t'constant': /^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,",
                "\t'attr-value': {",
                "\t\tpattern: /=.*/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^[=]/",
                "\t\t}",
                "\t}",
                "};"
            ]
        },
        "prism-ini.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ini={comment:/^[ \\t]*;.*$/m,selector:/^[ \\t]*\\[.*?\\]/m,constant:/^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,\"attr-value\":{pattern:/=.*/,inside:{punctuation:/^[=]/}}};"
            ]
        },
        "prism-io.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.io = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'triple-quoted-string': {",
                "\t\tpattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,",
                "\t'builtin':/\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum|Sequence)\\b/,",
                "\t'boolean': /\\b(?:true|false|nil)\\b/,",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?/i,",
                "\t'operator': /[=!*/%+-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|(\\b(?:return|and|or|not)\\b)|@@?|\\?\\??|\\.\\./,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-io.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.io={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0},{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}],\"triple-quoted-string\":{pattern:/\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,greedy:!0,alias:\"string\"},string:{pattern:/\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0},keyword:/\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,builtin:/\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum|Sequence)\\b/,\"boolean\":/\\b(?:true|false|nil)\\b/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?/i,operator:/[=!*\\/%+-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|(\\b(?:return|and|or|not)\\b)|@@?|\\?\\??|\\.\\./,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-j.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.j = {",
                "\t'comment': /\\bNB\\..*/,",
                "\t'string': {",
                "\t\tpattern: /'(?:''|[^'\\r\\n])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,",
                "\t'verb': {",
                "\t\t// Negative look-ahead prevents bad highlighting",
                "\t\t// of ^: ;. =. =: !. !:",
                "\t\tpattern: /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'number': /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_(?!\\.))/,",
                "\t'adverb': {",
                "\t\tpattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'operator': /[=a][.:]|_\\./,",
                "\t'conjunction': {",
                "\t\tpattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'punctuation': /[()]/",
                "};"
            ]
        },
        "prism-j.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.j={comment:/\\bNB\\..*/,string:{pattern:/'(?:''|[^'\\r\\n])*'/,greedy:!0},keyword:/\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,verb:{pattern:/(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,alias:\"keyword\"},number:/\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_(?!\\.))/,adverb:{pattern:/[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,alias:\"builtin\"},operator:/[=a][.:]|_\\./,conjunction:{pattern:/&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,alias:\"variable\"},punctuation:/[()]/};"
            ]
        },
        "prism-java.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.java = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\\b/,",
                "\t'number': /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('java','function', {",
                "\t'annotation': {",
                "\t\talias: 'punctuation',",
                "\t\tpattern: /(^|[^.])@\\w+/,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('java', 'class-name', {",
                "\t'generics': {",
                "\t\tpattern: /<\\s*\\w+(?:\\.\\w+)?(?:\\s*,\\s*\\w+(?:\\.\\w+)?)*>/i,",
                "\t\talias: 'function',",
                "\t\tinside: {",
                "\t\t\tkeyword: Prism.languages.java.keyword,",
                "\t\t\tpunctuation: /[<>(),.:]/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-java.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.java=Prism.languages.extend(\"clike\",{keyword:/\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\\b/,number:/\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,operator:{pattern:/(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,lookbehind:!0}}),Prism.languages.insertBefore(\"java\",\"function\",{annotation:{alias:\"punctuation\",pattern:/(^|[^.])@\\w+/,lookbehind:!0}}),Prism.languages.insertBefore(\"java\",\"class-name\",{generics:{pattern:/<\\s*\\w+(?:\\.\\w+)?(?:\\s*,\\s*\\w+(?:\\.\\w+)?)*>/i,alias:\"function\",inside:{keyword:Prism.languages.java.keyword,punctuation:/[<>(),.:]/}}});"
            ]
        },
        "prism-javascript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javascript = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,",
                "\t'number': /\\b(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,",
                "\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)",
                "\t'function': /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/i,",
                "\t'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/",
                "});",
                "",
                "Prism.languages.insertBefore('javascript', 'keyword', {",
                "\t'regex': {",
                "\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t// This must be declared before keyword because we use \"function\" inside the look-forward",
                "\t'function-variable': {",
                "\t\tpattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,",
                "\t\talias: 'function'",
                "\t},",
                "\t'constant': /\\b[A-Z][A-Z\\d_]*\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('javascript', 'string', {",
                "\t'template-string': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\${[^}]+}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\tpattern: /^\\${|}$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: null // See below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t}",
                "});",
                "Prism.languages.javascript['template-string'].inside['interpolation'].inside.rest = Prism.languages.javascript;",
                "",
                "if (Prism.languages.markup) {",
                "\tPrism.languages.insertBefore('markup', 'tag', {",
                "\t\t'script': {",
                "\t\t\tpattern: /(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript,",
                "\t\t\talias: 'language-javascript',",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t});",
                "}",
                "",
                "Prism.languages.js = Prism.languages.javascript;"
            ]
        },
        "prism-javascript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javascript=Prism.languages.extend(\"clike\",{keyword:/\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,number:/\\b(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\"function\":/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/i,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^\\/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,lookbehind:!0,greedy:!0},\"function-variable\":{pattern:/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,alias:\"function\"},constant:/\\b[A-Z][A-Z\\d_]*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\\${[^}]+}/,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:null}},string:/[\\s\\S]+/}}}),Prism.languages.javascript[\"template-string\"].inside.interpolation.inside.rest=Prism.languages.javascript,Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:\"language-javascript\",greedy:!0}}),Prism.languages.js=Prism.languages.javascript;"
            ]
        },
        "prism-jolie.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jolie = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,",
                "\t'builtin': /\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,",
                "\t'operator': /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,",
                "\t'symbol': /[|;@]/,",
                "\t'punctuation': /[,.]/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t}",
                "});",
                "",
                "delete Prism.languages.jolie['class-name'];",
                "delete Prism.languages.jolie['function'];",
                "",
                "Prism.languages.insertBefore( 'jolie', 'keyword', {",
                "\t'function':",
                "\t{",
                "\t\tpattern: /((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'aggregates': {",
                "\t\tpattern: /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'withExtension': {",
                "\t\t\t\tpattern: /\\bwith\\s+\\w+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword' : /\\bwith\\b/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /\\w+/",
                "\t\t\t},",
                "\t\t\t'punctuation': {",
                "\t\t\t\tpattern: /,/",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'redirects': {",
                "\t\tpattern: /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': {",
                "\t\t\t\tpattern: /,/",
                "\t\t\t},",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /\\w+/",
                "\t\t\t},",
                "\t\t\t'symbol': {",
                "\t\t\t\tpattern: /=>/",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-jolie.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jolie=Prism.languages.extend(\"clike\",{keyword:/\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,builtin:/\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,operator:/-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,symbol:/[|;@]/,punctuation:/[,.]/,string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}}),delete Prism.languages.jolie[\"class-name\"],delete Prism.languages.jolie[\"function\"],Prism.languages.insertBefore(\"jolie\",\"keyword\",{\"function\":{pattern:/((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,lookbehind:!0},aggregates:{pattern:/(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,lookbehind:!0,inside:{withExtension:{pattern:/\\bwith\\s+\\w+/,inside:{keyword:/\\bwith\\b/}},\"function\":{pattern:/\\w+/},punctuation:{pattern:/,/}}},redirects:{pattern:/(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,lookbehind:!0,inside:{punctuation:{pattern:/,/},\"function\":{pattern:/\\w+/},symbol:{pattern:/=>/}}}});"
            ]
        },
        "prism-json.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.json = {",
                "\t'property': /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/i,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /-?\\d+\\.?\\d*([Ee][+-]?\\d+)?/,",
                "\t'punctuation': /[{}[\\],]/,",
                "\t'operator': /:/g,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'null': /\\bnull\\b/i",
                "};",
                "",
                "Prism.languages.jsonp = Prism.languages.json;"
            ]
        },
        "prism-json.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.json={property:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/i,string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,greedy:!0},number:/-?\\d+\\.?\\d*([Ee][+-]?\\d+)?/,punctuation:/[{}[\\],]/,operator:/:/g,\"boolean\":/\\b(?:true|false)\\b/i,\"null\":/\\bnull\\b/i},Prism.languages.jsonp=Prism.languages.json;"
            ]
        },
        "prism-jsx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "var javascript = Prism.util.clone(Prism.languages.javascript);",
                "",
                "Prism.languages.jsx = Prism.languages.extend('markup', javascript);",
                "Prism.languages.jsx.tag.pattern= /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;",
                "",
                "Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;",
                "Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;",
                "",
                "Prism.languages.insertBefore('inside', 'attr-name', {",
                "\t'spread': {",
                "\t\tpattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\.{3}|[{}.]/,",
                "\t\t\t'attr-value': /\\w+/",
                "\t\t}",
                "\t}",
                "}, Prism.languages.jsx.tag);",
                "",
                "Prism.languages.insertBefore('inside', 'attr-value',{",
                "\t'script': {",
                "\t\t// Allow for two levels of nesting",
                "\t\tpattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,",
                "\t\tinside: {",
                "\t\t\t'script-punctuation': {",
                "\t\t\t\tpattern: /^=(?={)/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.jsx",
                "\t\t},",
                "\t\t'alias': 'language-javascript'",
                "\t}",
                "}, Prism.languages.jsx.tag);",
                "",
                "// The following will handle plain text inside tags",
                "var stringifyToken = function (token) {",
                "\tif (!token) {",
                "\t\treturn '';",
                "\t}",
                "\tif (typeof token === 'string') {",
                "\t\treturn token;",
                "\t}",
                "\tif (typeof token.content === 'string') {",
                "\t\treturn token.content;",
                "\t}",
                "\treturn token.content.map(stringifyToken).join('');",
                "};",
                "",
                "var walkTokens = function (tokens) {",
                "\tvar openedTags = [];",
                "\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\tvar token = tokens[i];",
                "\t\tvar notTagNorBrace = false;",
                "",
                "\t\tif (typeof token !== 'string') {",
                "\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {",
                "\t\t\t\t// We found a tag, now find its kind",
                "",
                "\t\t\t\tif (token.content[0].content[0].content === '</') {",
                "\t\t\t\t\t// Closing tag",
                "\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {",
                "\t\t\t\t\t\t// Pop matching opening tag",
                "\t\t\t\t\t\topenedTags.pop();",
                "\t\t\t\t\t}",
                "\t\t\t\t} else {",
                "\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {",
                "\t\t\t\t\t\t// Autoclosed tag, ignore",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\t// Opening tag",
                "\t\t\t\t\t\topenedTags.push({",
                "\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),",
                "\t\t\t\t\t\t\topenedBraces: 0",
                "\t\t\t\t\t\t});",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {",
                "",
                "\t\t\t\t// Here we might have entered a JSX context inside a tag",
                "\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;",
                "",
                "\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {",
                "",
                "\t\t\t\t// Here we might have left a JSX context inside a tag",
                "\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;",
                "",
                "\t\t\t} else {",
                "\t\t\t\tnotTagNorBrace = true",
                "\t\t\t}",
                "\t\t}",
                "\t\tif (notTagNorBrace || typeof token === 'string') {",
                "\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {",
                "\t\t\t\t// Here we are inside a tag, and not inside a JSX context.",
                "\t\t\t\t// That's plain text: drop any tokens matched.",
                "\t\t\t\tvar plainText = stringifyToken(token);",
                "",
                "\t\t\t\t// And merge text with adjacent text",
                "\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {",
                "\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);",
                "\t\t\t\t\ttokens.splice(i + 1, 1);",
                "\t\t\t\t}",
                "\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {",
                "\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;",
                "\t\t\t\t\ttokens.splice(i - 1, 1);",
                "\t\t\t\t\ti--;",
                "\t\t\t\t}",
                "",
                "\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\tif (token.content && typeof token.content !== 'string') {",
                "\t\t\twalkTokens(token.content);",
                "\t\t}",
                "\t}",
                "};",
                "",
                "Prism.hooks.add('after-tokenize', function (env) {",
                "\tif (env.language !== 'jsx' && env.language !== 'tsx') {",
                "\t\treturn;",
                "\t}",
                "\twalkTokens(env.tokens);",
                "});",
                "",
                "}(Prism));"
            ]
        },
        "prism-jsx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){var n=t.util.clone(t.languages.javascript);t.languages.jsx=t.languages.extend(\"markup\",n),t.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i,t.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,t.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i,t.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,\"attr-value\":/\\w+/}}},t.languages.jsx.tag),t.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,inside:{\"script-punctuation\":{pattern:/^=(?={)/,alias:\"punctuation\"},rest:t.languages.jsx},alias:\"language-javascript\"}},t.languages.jsx.tag);var e=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(e).join(\"\"):\"\"},a=function(n){for(var s=[],g=0;g<n.length;g++){var o=n[g],i=!1;if(\"string\"!=typeof o&&(\"tag\"===o.type&&o.content[0]&&\"tag\"===o.content[0].type?\"</\"===o.content[0].content[0].content?s.length>0&&s[s.length-1].tagName===e(o.content[0].content[1])&&s.pop():\"/>\"===o.content[o.content.length-1].content||s.push({tagName:e(o.content[0].content[1]),openedBraces:0}):s.length>0&&\"punctuation\"===o.type&&\"{\"===o.content?s[s.length-1].openedBraces++:s.length>0&&s[s.length-1].openedBraces>0&&\"punctuation\"===o.type&&\"}\"===o.content?s[s.length-1].openedBraces--:i=!0),(i||\"string\"==typeof o)&&s.length>0&&0===s[s.length-1].openedBraces){var p=e(o);g<n.length-1&&(\"string\"==typeof n[g+1]||\"plain-text\"===n[g+1].type)&&(p+=e(n[g+1]),n.splice(g+1,1)),g>0&&(\"string\"==typeof n[g-1]||\"plain-text\"===n[g-1].type)&&(p=e(n[g-1])+p,n.splice(g-1,1),g--),n[g]=new t.Token(\"plain-text\",p,null,p)}o.content&&\"string\"!=typeof o.content&&a(o.content)}};t.hooks.add(\"after-tokenize\",function(t){(\"jsx\"===t.language||\"tsx\"===t.language)&&a(t.tokens)})}(Prism);"
            ]
        },
        "prism-julia.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.julia= {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2/,",
                "\t'keyword' : /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|let|local|macro|module|print|println|quote|return|try|type|typealias|using|while)\\b/,",
                "\t'boolean' : /\\b(?:true|false)\\b/,",
                "\t'number' : /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+\\.?\\d*|\\.\\d+)(?:[efp][+-]?\\d+)?j?/i,",
                "\t'operator': /[-+*^%÷&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,",
                "\t'punctuation' : /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-julia.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.julia={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},string:/(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2/,keyword:/\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|let|local|macro|module|print|println|quote|return|try|type|typealias|using|while)\\b/,\"boolean\":/\\b(?:true|false)\\b/,number:/(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+\\.?\\d*|\\.\\d+)(?:[efp][+-]?\\d+)?j?/i,operator:/[-+*^%÷&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-keyman.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.keyman = {",
                "\t'comment': /\\bc\\s.*/i,",
                "\t'function': /\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,  // virtual key",
                "\t'string': /(\"|').*?\\1/,",
                "\t'bold': [   // header statements, system stores and variable system stores",
                "\t\t/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i,",
                "\t\t/\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i",
                "\t],",
                "\t'keyword': /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,  // rule keywords",
                "\t'atrule': /\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,   // structural keywords",
                "\t'number': /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i, // U+####, x###, d### characters and numbers",
                "\t'operator': /[+>\\\\,()]/,",
                "\t'tag': /\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i   // prefixes",
                "};"
            ]
        },
        "prism-keyman.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.keyman={comment:/\\bc\\s.*/i,\"function\":/\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,string:/(\"|').*?\\1/,bold:[/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i,/\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i],keyword:/\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,atrule:/\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,number:/\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,operator:/[+>\\\\,()]/,tag:/\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i};"
            ]
        },
        "prism-kotlin.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.kotlin = Prism.languages.extend('clike', {",
                "\t\t'keyword': {",
                "\t\t\t// The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get",
                "\t\t\tpattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': [",
                "\t\t\t/\\w+(?=\\s*\\()/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.)\\w+(?=\\s*\\{)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'number': /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,",
                "\t\t'operator': /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/",
                "\t});",
                "",
                "\tdelete Prism.languages.kotlin[\"class-name\"];",
                "",
                "\tPrism.languages.insertBefore('kotlin', 'string', {",
                "\t\t'raw-string': {",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\talias: 'string'",
                "\t\t\t// See interpolation below",
                "\t\t}",
                "\t});",
                "\tPrism.languages.insertBefore('kotlin', 'keyword', {",
                "\t\t'annotation': {",
                "\t\t\tpattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,",
                "\t\t\talias: 'builtin'",
                "\t\t}",
                "\t});",
                "\tPrism.languages.insertBefore('kotlin', 'function', {",
                "\t\t'label': {",
                "\t\t\tpattern: /\\w+@|@\\w+/,",
                "\t\t\talias: 'symbol'",
                "\t\t}",
                "\t});",
                "",
                "\tvar interpolation = [",
                "\t\t{",
                "\t\t\tpattern: /\\$\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\$\\{|\\}$/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.kotlin",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\$\\w+/,",
                "\t\t\talias: 'variable'",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {",
                "\t\tinterpolation: interpolation",
                "\t};",
                "",
                "}(Prism));"
            ]
        },
        "prism-kotlin.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.kotlin=e.languages.extend(\"clike\",{keyword:{pattern:/(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,lookbehind:!0},\"function\":[/\\w+(?=\\s*\\()/,{pattern:/(\\.)\\w+(?=\\s*\\{)/,lookbehind:!0}],number:/\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,operator:/\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/}),delete e.languages.kotlin[\"class-name\"],e.languages.insertBefore(\"kotlin\",\"string\",{\"raw-string\":{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,alias:\"string\"}}),e.languages.insertBefore(\"kotlin\",\"keyword\",{annotation:{pattern:/\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,alias:\"builtin\"}}),e.languages.insertBefore(\"kotlin\",\"function\",{label:{pattern:/\\w+@|@\\w+/,alias:\"symbol\"}});var n=[{pattern:/\\$\\{[^}]+\\}/,inside:{delimiter:{pattern:/^\\$\\{|\\}$/,alias:\"variable\"},rest:e.languages.kotlin}},{pattern:/\\$\\w+/,alias:\"variable\"}];e.languages.kotlin.string.inside=e.languages.kotlin[\"raw-string\"].inside={interpolation:n}}(Prism);"
            ]
        },
        "prism-latex.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tvar funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,",
                "\t    insideEqu = {",
                "\t\t    'equation-command': {",
                "\t\t\t    pattern: funcPattern,",
                "\t\t\t    alias: 'regex'",
                "\t\t    }",
                "\t    };",
                "",
                "\tPrism.languages.latex = {",
                "\t\t'comment': /%.*/m,",
                "\t\t// the verbatim environment prints whitespace to the document",
                "\t\t'cdata':  {",
                "\t\t\tpattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/*",
                "\t\t * equations can be between $ $ or \\( \\) or \\[ \\]",
                "\t\t * (all are multiline)",
                "\t\t */",
                "\t\t'equation': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,",
                "\t\t\t\tinside: insideEqu,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: insideEqu,",
                "\t\t\t\talias: 'string'",
                "\t\t\t}",
                "\t\t],",
                "\t\t/*",
                "\t\t * arguments which are keywords or references are highlighted",
                "\t\t * as keywords",
                "\t\t */",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'url': {",
                "\t\t\tpattern: /(\\\\url\\{)[^}]+(?=\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/*",
                "\t\t * section or chapter headlines are highlighted as bold so that",
                "\t\t * they stand out more",
                "\t\t */",
                "\t\t'headline': {",
                "\t\t\tpattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'function': {",
                "\t\t\tpattern: funcPattern,",
                "\t\t\talias: 'selector'",
                "\t\t},",
                "\t\t'punctuation': /[[\\]{}&]/",
                "\t};",
                "})(Prism);"
            ]
        },
        "prism-latex.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=/\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,n={\"equation-command\":{pattern:e,alias:\"regex\"}};a.languages.latex={comment:/%.*/m,cdata:{pattern:/(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,lookbehind:!0},equation:[{pattern:/\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,inside:n,alias:\"string\"},{pattern:/(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,lookbehind:!0,inside:n,alias:\"string\"}],keyword:{pattern:/(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,lookbehind:!0},url:{pattern:/(\\\\url\\{)[^}]+(?=\\})/,lookbehind:!0},headline:{pattern:/(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,lookbehind:!0,alias:\"class-name\"},\"function\":{pattern:e,alias:\"selector\"},punctuation:/[[\\]{}&]/}}(Prism);"
            ]
        },
        "prism-less.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* FIXME :",
                " :extend() is not handled specifically : its highlighting is buggy.",
                " Mixin usage must be inside a ruleset to be highlighted.",
                " At-rules (e.g. import) containing interpolations are buggy.",
                " Detached rulesets are highlighted as at-rules.",
                " A comment before a mixin usage prevents the latter to be properly highlighted.",
                " */",
                "",
                "Prism.languages.less = Prism.languages.extend('css', {",
                "\t'comment': [",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'atrule': {",
                "\t\tpattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[:()]/",
                "\t\t}",
                "\t},",
                "\t// selectors and mixins are considered the same",
                "\t'selector': {",
                "\t\tpattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,",
                "\t\tinside: {",
                "\t\t\t// mixin parameters",
                "\t\t\t'variable': /@+[\\w-]+/",
                "\t\t}",
                "\t},",
                "",
                "\t'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,",
                "\t'punctuation': /[{}();:,]/,",
                "\t'operator': /[+\\-*\\/]/",
                "});",
                "",
                "// Invert function and punctuation positions",
                "Prism.languages.insertBefore('less', 'punctuation', {",
                "\t'function': Prism.languages.less.function",
                "});",
                "",
                "Prism.languages.insertBefore('less', 'property', {",
                "\t'variable': [",
                "\t\t// Variable declaration (the colon must be consumed!)",
                "\t\t{",
                "\t\t\tpattern: /@[\\w-]+\\s*:/,",
                "\t\t\tinside: {",
                "\t\t\t\t\"punctuation\": /:/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Variable usage",
                "\t\t/@@?[\\w-]+/",
                "\t],",
                "\t'mixin-usage': {",
                "\t\tpattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t}",
                "});"
            ]
        },
        "prism-less.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.less=Prism.languages.extend(\"css\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0}],atrule:{pattern:/@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,inside:{variable:/@+[\\w-]+/}},property:/(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,punctuation:/[{}();:,]/,operator:/[+\\-*\\/]/}),Prism.languages.insertBefore(\"less\",\"punctuation\",{\"function\":Prism.languages.less.function}),Prism.languages.insertBefore(\"less\",\"property\",{variable:[{pattern:/@[\\w-]+\\s*:/,inside:{punctuation:/:/}},/@@?[\\w-]+/],\"mixin-usage\":{pattern:/([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,lookbehind:!0,alias:\"function\"}});"
            ]
        },
        "prism-liquid.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.liquid = {",
                "\t'keyword': /\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,",
                "\t'number': /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-liquid.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.liquid={keyword:/\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,number:/\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,operator:{pattern:/(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,lookbehind:!0},\"function\":{pattern:/(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,lookbehind:!0}};"
            ]
        },
        "prism-lisp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t// Functions to construct regular expressions",
                "\t// simple form",
                "\t// e.g. (interactive ... or (interactive)",
                "\tfunction simple_form(name) {",
                "\t\treturn new RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');",
                "\t}",
                "\t// booleans and numbers",
                "\tfunction primitive(pattern) {",
                "\t\treturn new RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');",
                "\t}",
                "",
                "\t// Patterns in regular expressions",
                "",
                "\t// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html",
                "\t// & and : are excluded as they are usually used for special purposes",
                "\tvar symbol = '[-+*/_~!@$%^=<>{}\\\\w]+';",
                "\t// symbol starting with & used in function arguments",
                "\tvar marker = '&' + symbol;",
                "\t// Open parenthesis for look-behind",
                "\tvar par = '(\\\\()';",
                "\tvar endpar = '(?=\\\\))';",
                "\t// End the pattern with look-ahead space",
                "\tvar space = '(?=\\\\s)';",
                "",
                "\tvar language = {",
                "\t\t// Three or four semicolons are considered a heading.",
                "\t\t// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html",
                "\t\theading: {",
                "\t\t\tpattern: /;;;.*/,",
                "\t\t\talias: ['comment', 'title']",
                "\t\t},",
                "\t\tcomment: /;.*/,",
                "\t\tstring: {",
                "\t\t\tpattern: /\"(?:[^\"\\\\]*|\\\\.)*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\targument: /[-A-Z]+(?=[.,\\s])/,",
                "\t\t\t\tsymbol: new RegExp('`' + symbol + \"'\")",
                "\t\t\t}",
                "\t\t},",
                "\t\t'quoted-symbol': {",
                "\t\t\tpattern: new RegExp(\"#?'\" + symbol),",
                "\t\t\talias: ['variable', 'symbol']",
                "\t\t},",
                "\t\t'lisp-property': {",
                "\t\t\tpattern: new RegExp(':' + symbol),",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\tsplice: {",
                "\t\t\tpattern: new RegExp(',@?' + symbol),",
                "\t\t\talias: ['symbol', 'variable']",
                "\t\t},",
                "\t\tkeyword: [",
                "\t\t\t{",
                "\t\t\t\tpattern: new RegExp(",
                "\t\t\t\t\tpar +",
                "\t\t\t\t\t\t'(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +",
                "\t\t\t\t\t\tspace",
                "\t\t\t\t),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: new RegExp(",
                "\t\t\t\t\tpar + '(?:for|do|collect|return|finally|append|concat|in|by)' + space",
                "\t\t\t\t),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t],",
                "\t\tdeclare: {",
                "\t\t\tpattern: simple_form('declare'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\tinteractive: {",
                "\t\t\tpattern: simple_form('interactive'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\tboolean: {",
                "\t\t\tpattern: primitive('(?:t|nil)'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tnumber: {",
                "\t\t\tpattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tdefvar: {",
                "\t\t\tpattern: new RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^def[a-z]+/,",
                "\t\t\t\tvariable: new RegExp(symbol)",
                "\t\t\t}",
                "\t\t},",
                "\t\tdefun: {",
                "\t\t\tpattern: new RegExp(",
                "\t\t\t\tpar +",
                "\t\t\t\t\t'(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +",
                "\t\t\t\t\tsymbol +",
                "\t\t\t\t\t'\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^(?:cl-)?def\\S+/,",
                "\t\t\t\t// See below, this property needs to be defined later so that it can",
                "\t\t\t\t// reference the language object.",
                "\t\t\t\targuments: null,",
                "\t\t\t\tfunction: {",
                "\t\t\t\t\tpattern: new RegExp('(^\\\\s)' + symbol),",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\tpunctuation: /[()]/",
                "\t\t\t}",
                "\t\t},",
                "\t\tlambda: {",
                "\t\t\tpattern: new RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^lambda/,",
                "\t\t\t\t// See below, this property needs to be defined later so that it can",
                "\t\t\t\t// reference the language object.",
                "\t\t\t\targuments: null,",
                "\t\t\t\tpunctuation: /[()]/",
                "\t\t\t}",
                "\t\t},",
                "\t\tcar: {",
                "\t\t\tpattern: new RegExp(par + symbol),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tpunctuation: [",
                "\t\t\t// open paren, brackets, and close paren",
                "\t\t\t/(['`,]?\\(|[)\\[\\]])/,",
                "\t\t\t// cons",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)\\.(?=\\s)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t]",
                "\t};",
                "",
                "\tvar arg = {",
                "\t\t'lisp-marker': new RegExp(marker),",
                "\t\trest: {",
                "\t\t\targument: {",
                "\t\t\t\tpattern: new RegExp(symbol),",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\tvarform: {",
                "\t\t\t\tpattern: new RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tstring: language.string,",
                "\t\t\t\t\tboolean: language.boolean,",
                "\t\t\t\t\tnumber: language.number,",
                "\t\t\t\t\tsymbol: language.symbol,",
                "\t\t\t\t\tpunctuation: /[()]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tvar forms = '\\\\S+(?:\\\\s+\\\\S+)*';",
                "",
                "\tvar arglist = {",
                "\t\tpattern: new RegExp(par + '[\\\\s\\\\S]*' + endpar),",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'rest-vars': {",
                "\t\t\t\tpattern: new RegExp('&(?:rest|body)\\\\s+' + forms),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\t'other-marker-vars': {",
                "\t\t\t\tpattern: new RegExp('&(?:optional|aux)\\\\s+' + forms),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\tkeys: {",
                "\t\t\t\tpattern: new RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\targument: {",
                "\t\t\t\tpattern: new RegExp(symbol),",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\tpunctuation: /[()]/",
                "\t\t}",
                "\t};",
                "",
                "\tlanguage['lambda'].inside.arguments = arglist;",
                "\tlanguage['defun'].inside.arguments = Prism.util.clone(arglist);",
                "\tlanguage['defun'].inside.arguments.inside.sublist = arglist;",
                "",
                "\tPrism.languages.lisp = language;",
                "\tPrism.languages.elisp = language;",
                "\tPrism.languages.emacs = language;",
                "\tPrism.languages['emacs-lisp'] = language;",
                "}(Prism));"
            ]
        },
        "prism-lisp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){function n(e){return new RegExp(\"(\\\\()\"+e+\"(?=[\\\\s\\\\)])\")}function a(e){return new RegExp(\"([\\\\s([])\"+e+\"(?=[\\\\s)])\")}var t=\"[-+*/_~!@$%^=<>{}\\\\w]+\",r=\"&\"+t,i=\"(\\\\()\",s=\"(?=\\\\))\",o=\"(?=\\\\s)\",l={heading:{pattern:/;;;.*/,alias:[\"comment\",\"title\"]},comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\]*|\\\\.)*\"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\\s])/,symbol:new RegExp(\"`\"+t+\"'\")}},\"quoted-symbol\":{pattern:new RegExp(\"#?'\"+t),alias:[\"variable\",\"symbol\"]},\"lisp-property\":{pattern:new RegExp(\":\"+t),alias:\"property\"},splice:{pattern:new RegExp(\",@?\"+t),alias:[\"symbol\",\"variable\"]},keyword:[{pattern:new RegExp(i+\"(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)\"+o),lookbehind:!0},{pattern:new RegExp(i+\"(?:for|do|collect|return|finally|append|concat|in|by)\"+o),lookbehind:!0}],declare:{pattern:n(\"declare\"),lookbehind:!0,alias:\"keyword\"},interactive:{pattern:n(\"interactive\"),lookbehind:!0,alias:\"keyword\"},\"boolean\":{pattern:a(\"(?:t|nil)\"),lookbehind:!0},number:{pattern:a(\"[-+]?\\\\d+(?:\\\\.\\\\d*)?\"),lookbehind:!0},defvar:{pattern:new RegExp(i+\"def(?:var|const|custom|group)\\\\s+\"+t),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:new RegExp(t)}},defun:{pattern:new RegExp(i+\"(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+\"+t+\"\\\\s+\\\\([\\\\s\\\\S]*?\\\\)\"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\\S+/,arguments:null,\"function\":{pattern:new RegExp(\"(^\\\\s)\"+t),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:new RegExp(i+\"lambda\\\\s+\\\\((?:&?\"+t+\"\\\\s*)*\\\\)\"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:new RegExp(i+t),lookbehind:!0},punctuation:[/(['`,]?\\(|[)\\[\\]])/,{pattern:/(\\s)\\.(?=\\s)/,lookbehind:!0}]},p={\"lisp-marker\":new RegExp(r),rest:{argument:{pattern:new RegExp(t),alias:\"variable\"},varform:{pattern:new RegExp(i+t+\"\\\\s+\\\\S[\\\\s\\\\S]*\"+s),lookbehind:!0,inside:{string:l.string,\"boolean\":l.boolean,number:l.number,symbol:l.symbol,punctuation:/[()]/}}}},d=\"\\\\S+(?:\\\\s+\\\\S+)*\",u={pattern:new RegExp(i+\"[\\\\s\\\\S]*\"+s),lookbehind:!0,inside:{\"rest-vars\":{pattern:new RegExp(\"&(?:rest|body)\\\\s+\"+d),inside:p},\"other-marker-vars\":{pattern:new RegExp(\"&(?:optional|aux)\\\\s+\"+d),inside:p},keys:{pattern:new RegExp(\"&key\\\\s+\"+d+\"(?:\\\\s+&allow-other-keys)?\"),inside:p},argument:{pattern:new RegExp(t),alias:\"variable\"},punctuation:/[()]/}};l.lambda.inside.arguments=u,l.defun.inside.arguments=e.util.clone(u),l.defun.inside.arguments.inside.sublist=u,e.languages.lisp=l,e.languages.elisp=l,e.languages.emacs=l,e.languages[\"emacs-lisp\"]=l}(Prism);"
            ]
        },
        "prism-livescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.livescript = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'interpolated-string': {",
                "\t\t/* Look-behind and look-ahead prevents wrong behavior of the greedy pattern",
                "\t\t* forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */",
                "\t\tpattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^\\\\])#\\{[^}]+\\}/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t},",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /<\\[[\\s\\S]*?\\]>/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t/\\\\[^\\s,;\\])}]+/",
                "\t],",
                "\t'regex': [",
                "\t\t{",
                "\t\t\tpattern: /\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'comment': {",
                "\t\t\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'keyword': {",
                "\t\tpattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword-operator': {",
                "\t\tpattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'boolean': {",
                "\t\tpattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'argument': {",
                "\t\t// Don't match .&. nor &&",
                "\t\tpattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,",
                "\t'identifier': /[a-z_](?:-?[a-z]|[\\d_])*/i,",
                "\t'operator': [",
                "\t\t// Spaced .",
                "\t\t{",
                "\t\t\tpattern: /( )\\.(?= )/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// Full list, in order:",
                "\t\t// .= .~ .. ...",
                "\t\t// .&. .^. .<<. .>>. .>>>.",
                "\t\t// := :: ::=",
                "\t\t// &&",
                "\t\t// || |>",
                "\t\t// < << <<< <<<<",
                "\t\t// <- <-- <-! <--!",
                "\t\t// <~ <~~ <~! <~~!",
                "\t\t// <| <= <?",
                "\t\t// > >> >= >?",
                "\t\t// - -- -> -->",
                "\t\t// + ++",
                "\t\t// @ @@",
                "\t\t// % %%",
                "\t\t// * **",
                "\t\t// ! != !~=",
                "\t\t// !~> !~~>",
                "\t\t// !-> !-->",
                "\t\t// ~ ~> ~~> ~=",
                "\t\t// = ==",
                "\t\t// ^ ^^",
                "\t\t// / ?",
                "\t\t/\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/",
                "\t],",
                "\t'punctuation': /[(){}\\[\\]|.,:;`]/",
                "};",
                "",
                "Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;"
            ]
        },
        "prism-livescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.livescript={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}],\"interpolated-string\":{pattern:/(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,lookbehind:!0},interpolation:{pattern:/(^|[^\\\\])#\\{[^}]+\\}/m,lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^#\\{|\\}$/,alias:\"variable\"}}},string:/[\\s\\S]+/}},string:[{pattern:/('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},{pattern:/<\\[[\\s\\S]*?\\]>/,greedy:!0},/\\\\[^\\s,;\\])}]+/],regex:[{pattern:/\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,greedy:!0,inside:{comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}}},{pattern:/\\/(\\[.+?]|\\\\.|[^\\/\\\\\\r\\n])+\\/[gimyu]{0,5}/,greedy:!0}],keyword:{pattern:/(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,lookbehind:!0},\"keyword-operator\":{pattern:/(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,lookbehind:!0,alias:\"operator\"},\"boolean\":{pattern:/(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,lookbehind:!0},argument:{pattern:/(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,lookbehind:!0,alias:\"variable\"},number:/\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,identifier:/[a-z_](?:-?[a-z]|[\\d_])*/i,operator:[{pattern:/( )\\.(?= )/,lookbehind:!0},/\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],punctuation:/[(){}\\[\\]|.,:;`]/},Prism.languages.livescript[\"interpolated-string\"].inside.interpolation.inside.rest=Prism.languages.livescript;"
            ]
        },
        "prism-lolcode.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lolcode = {",
                "\t'comment': [",
                "\t\t/\\bOBTW\\s+[\\s\\S]*?\\s+TLDR\\b/,",
                "\t\t/\\bBTW.+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?::.|[^\"])*\"/,",
                "\t\tinside: {",
                "\t\t\t'variable': /:\\{[^}]+\\}/,",
                "\t\t\t'symbol': [",
                "\t\t\t\t/:\\([a-f\\d]+\\)/i,",
                "\t\t\t\t/:\\[[^\\]]+\\]/,",
                "\t\t\t\t/:[)>o\":]/",
                "\t\t\t]",
                "\t\t},",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\B-)?(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)/,",
                "\t'symbol': {",
                "\t\tpattern: /(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /A(?=\\s)/",
                "\t\t}",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/'Z(?=\\s|,|$)/",
                "\t],",
                "\t'boolean': {",
                "\t\tpattern: /(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': {",
                "\t\tpattern: /(^|\\s)IT(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': {",
                "\t\tpattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /\\.{3}|…|,|!/",
                "};"
            ]
        },
        "prism-lolcode.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lolcode={comment:[/\\bOBTW\\s+[\\s\\S]*?\\s+TLDR\\b/,/\\bBTW.+/],string:{pattern:/\"(?::.|[^\"])*\"/,inside:{variable:/:\\{[^}]+\\}/,symbol:[/:\\([a-f\\d]+\\)/i,/:\\[[^\\]]+\\]/,/:[)>o\":]/]},greedy:!0},number:/(?:\\B-)?(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)/,symbol:{pattern:/(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,lookbehind:!0,inside:{keyword:/A(?=\\s)/}},label:{pattern:/((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,lookbehind:!0,alias:\"string\"},\"function\":{pattern:/((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,lookbehind:!0},keyword:[{pattern:/(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,lookbehind:!0},/'Z(?=\\s|,|$)/],\"boolean\":{pattern:/(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,lookbehind:!0},variable:{pattern:/(^|\\s)IT(?=\\s|,|$)/,lookbehind:!0},operator:{pattern:/(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,lookbehind:!0},punctuation:/\\.{3}|…|,|!/};"
            ]
        },
        "prism-lua.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lua = {",
                "\t'comment': /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,",
                "\t// \\z may be used to skip the following space",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,",
                "\t'keyword': /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*(?:[({]))/,",
                "\t'operator': [",
                "\t\t/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,",
                "\t\t{",
                "\t\t\t// Match \"..\" but don't break \"...\"",
                "\t\t\tpattern: /(^|[^.])\\.\\.(?!\\.)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /[\\[\\](){},;]|\\.+|:+/",
                "};"
            ]
        },
        "prism-lua.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lua={comment:/^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,greedy:!0},number:/\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,keyword:/\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\"function\":/(?!\\d)\\w+(?=\\s*(?:[({]))/,operator:[/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\\.\\.(?!\\.)/,lookbehind:!0}],punctuation:/[\\[\\](){},;]|\\.+|:+/};"
            ]
        },
        "prism-makefile.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.makefile = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t// Built-in target names",
                "\t'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,",
                "",
                "\t// Targets",
                "\t'symbol': {",
                "\t\tpattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,",
                "\t\tinside: {",
                "\t\t\t'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/",
                "\t\t}",
                "\t},",
                "\t'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,",
                "",
                "\t'keyword': [",
                "\t\t// Directives",
                "\t\t/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,",
                "\t\t// Functions",
                "\t\t{",
                "\t\t\tpattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'operator': /(?:::|[?:+!])?=|[|@]/,",
                "\t'punctuation': /[:;(){}]/",
                "};"
            ]
        },
        "prism-makefile.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.makefile={comment:{pattern:/(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,lookbehind:!0},string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,symbol:{pattern:/^[^:=\\r\\n]+(?=\\s*:(?!=))/m,inside:{variable:/\\$+(?:[^(){}:#=\\s]+|(?=[({]))/}},variable:/\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,keyword:[/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,{pattern:/(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,lookbehind:!0}],operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/};"
            ]
        },
        "prism-markdown.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markdown = Prism.languages.extend('markup', {});",
                "Prism.languages.insertBefore('markdown', 'prolog', {",
                "\t'blockquote': {",
                "\t\t// > ...",
                "\t\tpattern: /^>(?:[\\t ]*>)*/m,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'code': [",
                "\t\t{",
                "\t\t\t// Prefixed by 4 spaces or 1 tab",
                "\t\t\tpattern: /^(?: {4}|\\t).+/m,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t{",
                "\t\t\t// `code`",
                "\t\t\t// ``code``",
                "\t\t\tpattern: /``.+?``|`[^`\\n]+`/,",
                "\t\t\talias: 'keyword'",
                "\t\t}",
                "\t],",
                "\t'title': [",
                "\t\t{",
                "\t\t\t// title 1",
                "\t\t\t// =======",
                "",
                "\t\t\t// title 2",
                "\t\t\t// -------",
                "\t\t\tpattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,",
                "\t\t\talias: 'important',",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /==+$|--+$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// # title 1",
                "\t\t\t// ###### title 6",
                "\t\t\tpattern: /(^\\s*)#+.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'important',",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /^#+|#+$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'hr': {",
                "\t\t// ***",
                "\t\t// ---",
                "\t\t// * * *",
                "\t\t// -----------",
                "\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'list': {",
                "\t\t// * item",
                "\t\t// + item",
                "\t\t// - item",
                "\t\t// 1. item",
                "\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'url-reference': {",
                "\t\t// [id]: http://example.com \"Optional title\"",
                "\t\t// [id]: http://example.com 'Optional title'",
                "\t\t// [id]: http://example.com (Optional title)",
                "\t\t// [id]: <http://example.com> \"Optional title\"",
                "\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,",
                "\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/",
                "\t\t},",
                "\t\talias: 'url'",
                "\t},",
                "\t'bold': {",
                "\t\t// **strong**",
                "\t\t// __strong__",
                "",
                "\t\t// Allow only one line break",
                "\t\tpattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^\\*\\*|^__|\\*\\*$|__$/",
                "\t\t}",
                "\t},",
                "\t'italic': {",
                "\t\t// *em*",
                "\t\t// _em_",
                "",
                "\t\t// Allow only one line break",
                "\t\tpattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^[*_]|[*_]$/",
                "\t\t}",
                "\t},",
                "\t'url': {",
                "\t\t// [example](http://example.com \"Optional title\")",
                "\t\t// [example] [id]",
                "\t\tpattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /(!?\\[)[^\\]]+(?=\\]$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.markdown['bold'].inside['url'] = Prism.languages.markdown['url'];",
                "Prism.languages.markdown['italic'].inside['url'] = Prism.languages.markdown['url'];",
                "Prism.languages.markdown['bold'].inside['italic'] = Prism.languages.markdown['italic'];",
                "Prism.languages.markdown['italic'].inside['bold'] = Prism.languages.markdown['bold'];"
            ]
        },
        "prism-markdown.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markdown=Prism.languages.extend(\"markup\",{}),Prism.languages.insertBefore(\"markdown\",\"prolog\",{blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},code:[{pattern:/^(?: {4}|\\t).+/m,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\n]+`/,alias:\"keyword\"}],title:[{pattern:/\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#+.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,inside:{punctuation:/^\\*\\*|^__|\\*\\*$|__$/}},italic:{pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,inside:{punctuation:/^[*_]|[*_]$/}},url:{pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,inside:{variable:{pattern:/(!?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/}}}}),Prism.languages.markdown.bold.inside.url=Prism.languages.markdown.url,Prism.languages.markdown.italic.inside.url=Prism.languages.markdown.url,Prism.languages.markdown.bold.inside.italic=Prism.languages.markdown.italic,Prism.languages.markdown.italic.inside.bold=Prism.languages.markdown.bold;"
            ]
        },
        "prism-markup-templating.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['markup-templating'] = {};",
                "",
                "Object.defineProperties(Prism.languages['markup-templating'], {",
                "\tbuildPlaceholders: {",
                "\t\t// Tokenize all inline templating expressions matching placeholderPattern",
                "\t\t// If the replaceFilter function is provided, it will be called with every match.",
                "\t\t// If it returns false, the match will not be replaced.",
                "\t\tvalue: function (env, language, placeholderPattern, replaceFilter) {",
                "\t\t\tif (env.language !== language) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tenv.tokenStack = [];",
                "",
                "\t\t\tenv.code = env.code.replace(placeholderPattern, function(match) {",
                "\t\t\t\tif (typeof replaceFilter === 'function' && !replaceFilter(match)) {",
                "\t\t\t\t\treturn match;",
                "\t\t\t\t}",
                "\t\t\t\tvar i = env.tokenStack.length;",
                "\t\t\t\t// Check for existing strings",
                "\t\t\t\twhile (env.code.indexOf('___' + language.toUpperCase() + i + '___') !== -1)",
                "\t\t\t\t\t++i;",
                "",
                "\t\t\t\t// Create a sparse array",
                "\t\t\t\tenv.tokenStack[i] = match;",
                "",
                "\t\t\t\treturn '___' + language.toUpperCase() + i + '___';",
                "\t\t\t});",
                "",
                "\t\t\t// Switch the grammar to markup",
                "\t\t\tenv.grammar = Prism.languages.markup;",
                "\t\t}",
                "\t},",
                "\ttokenizePlaceholders: {",
                "\t\t// Replace placeholders with proper tokens after tokenizing",
                "\t\tvalue: function (env, language) {",
                "\t\t\tif (env.language !== language || !env.tokenStack) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\t// Switch the grammar back",
                "\t\t\tenv.grammar = Prism.languages[language];",
                "",
                "\t\t\tvar j = 0;",
                "\t\t\tvar keys = Object.keys(env.tokenStack);",
                "\t\t\tvar walkTokens = function (tokens) {",
                "\t\t\t\tif (j >= keys.length) {",
                "\t\t\t\t\treturn;",
                "\t\t\t\t}",
                "\t\t\t\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\t\t\t\tvar token = tokens[i];",
                "\t\t\t\t\tif (typeof token === 'string' || (token.content && typeof token.content === 'string')) {",
                "\t\t\t\t\t\tvar k = keys[j];",
                "\t\t\t\t\t\tvar t = env.tokenStack[k];",
                "\t\t\t\t\t\tvar s = typeof token === 'string' ? token : token.content;",
                "",
                "\t\t\t\t\t\tvar index = s.indexOf('___' + language.toUpperCase() + k + '___');",
                "\t\t\t\t\t\tif (index > -1) {",
                "\t\t\t\t\t\t\t++j;",
                "\t\t\t\t\t\t\tvar before = s.substring(0, index);",
                "\t\t\t\t\t\t\tvar middle = new Prism.Token(language, Prism.tokenize(t, env.grammar, language), 'language-' + language, t);",
                "\t\t\t\t\t\t\tvar after = s.substring(index + ('___' + language.toUpperCase() + k + '___').length);",
                "\t\t\t\t\t\t\tvar replacement;",
                "\t\t\t\t\t\t\tif (before || after) {",
                "\t\t\t\t\t\t\t\treplacement = [before, middle, after].filter(function (v) { return !!v; });",
                "\t\t\t\t\t\t\t\twalkTokens(replacement);",
                "\t\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\t\treplacement = middle;",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\tif (typeof token === 'string') {",
                "\t\t\t\t\t\t\t\tArray.prototype.splice.apply(tokens, [i, 1].concat(replacement));",
                "\t\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\t\ttoken.content = replacement;",
                "\t\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\t\tif (j >= keys.length) {",
                "\t\t\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t} else if (token.content && typeof token.content !== 'string') {",
                "\t\t\t\t\t\twalkTokens(token.content);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t};",
                "",
                "\t\t\twalkTokens(env.tokens);",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-markup-templating.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"markup-templating\"]={},Object.defineProperties(Prism.languages[\"markup-templating\"],{buildPlaceholders:{value:function(e,t,n,a){e.language===t&&(e.tokenStack=[],e.code=e.code.replace(n,function(n){if(\"function\"==typeof a&&!a(n))return n;for(var r=e.tokenStack.length;-1!==e.code.indexOf(\"___\"+t.toUpperCase()+r+\"___\");)++r;return e.tokenStack[r]=n,\"___\"+t.toUpperCase()+r+\"___\"}),e.grammar=Prism.languages.markup)}},tokenizePlaceholders:{value:function(e,t){if(e.language===t&&e.tokenStack){e.grammar=Prism.languages[t];var n=0,a=Object.keys(e.tokenStack),r=function(o){if(!(n>=a.length))for(var i=0;i<o.length;i++){var g=o[i];if(\"string\"==typeof g||g.content&&\"string\"==typeof g.content){var c=a[n],s=e.tokenStack[c],l=\"string\"==typeof g?g:g.content,p=l.indexOf(\"___\"+t.toUpperCase()+c+\"___\");if(p>-1){++n;var f,u=l.substring(0,p),_=new Prism.Token(t,Prism.tokenize(s,e.grammar,t),\"language-\"+t,s),k=l.substring(p+(\"___\"+t.toUpperCase()+c+\"___\").length);if(u||k?(f=[u,_,k].filter(function(e){return!!e}),r(f)):f=_,\"string\"==typeof g?Array.prototype.splice.apply(o,[i,1].concat(f)):g.content=f,n>=a.length)break}}else g.content&&\"string\"!=typeof g.content&&r(g.content)}};r(e.tokens)}}}});"
            ]
        },
        "prism-markup.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markup = {",
                "\t'comment': /<!--[\\s\\S]*?-->/,",
                "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
                "\t'doctype': /<!DOCTYPE[\\s\\S]+?>/i,",
                "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,",
                "\t'tag': {",
                "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/,",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t/^=/,",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /(^|[^\\\\])[\"']/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\/?>/,",
                "\t\t\t'attr-name': {",
                "\t\t\t\tpattern: /[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t}",
                "\t},",
                "\t'entity': /&#?[\\da-z]{1,8};/i",
                "};",
                "",
                "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
                "\tPrism.languages.markup['entity'];",
                "",
                "// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "Prism.hooks.add('wrap', function(env) {",
                "",
                "\tif (env.type === 'entity') {",
                "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t}",
                "});",
                "",
                "Prism.languages.xml = Prism.languages.markup;",
                "Prism.languages.html = Prism.languages.markup;",
                "Prism.languages.mathml = Prism.languages.markup;",
                "Prism.languages.svg = Prism.languages.markup;"
            ]
        },
        "prism-markup.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markup={comment:/<!--[\\s\\S]*?-->/,prolog:/<\\?[\\s\\S]+?\\?>/,doctype:/<!DOCTYPE[\\s\\S]+?>/i,cdata:/<!\\[CDATA\\[[\\s\\S]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/i,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"attr-value\":{pattern:/=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\\\])[\"']/,lookbehind:!0}]}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:/&#?[\\da-z]{1,8};/i},Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add(\"wrap\",function(a){\"entity\"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,\"&\"))}),Prism.languages.xml=Prism.languages.markup,Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;"
            ]
        },
        "prism-matlab.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.matlab = {",
                "\t'comment': [",
                "\t\t/%\\{[\\s\\S]*?\\}%/,",
                "\t\t/%.+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\\B'(?:''|[^'\\r\\n])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// FIXME We could handle imaginary numbers as a whole",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,",
                "\t'keyword': /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*\\()/,",
                "\t'operator': /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,",
                "\t'punctuation': /\\.{3}|[.,;\\[\\](){}!]/",
                "};"
            ]
        },
        "prism-matlab.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.matlab={comment:[/%\\{[\\s\\S]*?\\}%/,/%.+/],string:{pattern:/\\B'(?:''|[^'\\r\\n])*'/,greedy:!0},number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,keyword:/\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\"function\":/(?!\\d)\\w+(?=\\s*\\()/,operator:/\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,punctuation:/\\.{3}|[.,;\\[\\](){}!]/};"
            ]
        },
        "prism-mel.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mel = {",
                "\t'comment': /\\/\\/.*/,",
                "\t'code': {",
                "\t\tpattern: /`(?:\\\\.|[^\\\\`\\r\\n])*`/,",
                "\t\tgreedy: true,",
                "\t\talias: 'italic',",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t\t// See rest below",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /\\$\\w+/,",
                "\t'number': /\\b0x[\\da-fA-F]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+/,",
                "\t'flag': {",
                "\t\tpattern: /-[^\\d\\W]\\w*/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'keyword': /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,",
                "\t'function': /\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,",
                "\t",
                "\t'operator': [",
                "\t\t/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /(^|[^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /(^|[^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /<<|>>|[.,:;?\\[\\](){}]/",
                "};",
                "Prism.languages.mel['code'].inside.rest = Prism.languages.mel;"
            ]
        },
        "prism-mel.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mel={comment:/\\/\\/.*/,code:{pattern:/`(?:\\\\.|[^\\\\`\\r\\n])*`/,greedy:!0,alias:\"italic\",inside:{delimiter:{pattern:/^`|`$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},variable:/\\$\\w+/,number:/\\b0x[\\da-fA-F]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+/,flag:{pattern:/-[^\\d\\W]\\w*/,alias:\"operator\"},keyword:/\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,\"function\":/\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,operator:[/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,:;?\\[\\](){}]/},Prism.languages.mel.code.inside.rest=Prism.languages.mel;"
            ]
        },
        "prism-mizar.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mizar = {",
                "\t'comment': /::.+/,",
                "\t'keyword': /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,",
                "\t'parameter': {",
                "\t\tpattern: /\\$(?:10|\\d)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'variable': /\\w+(?=:)/,",
                "\t'number': /(?:\\b|-)\\d+\\b/,",
                "\t'operator': /\\.\\.\\.|->|&|\\.?=/,",
                "\t'punctuation': /\\(#|#\\)|[,:;\\[\\](){}]/",
                "};"
            ]
        },
        "prism-mizar.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mizar={comment:/::.+/,keyword:/@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,parameter:{pattern:/\\$(?:10|\\d)/,alias:\"variable\"},variable:/\\w+(?=:)/,number:/(?:\\b|-)\\d+\\b/,operator:/\\.\\.\\.|->|&|\\.?=/,punctuation:/\\(#|#\\)|[,:;\\[\\](){}]/};"
            ]
        },
        "prism-monkey.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.monkey = {",
                "\t'string': /\"[^\"\\r\\n]*\"/,",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /^#Rem\\s+[\\s\\S]*?^#End/im,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /'.+/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'preprocessor': {",
                "\t\tpattern: /(^[ \\t]*)#.+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'function': /\\w+(?=\\()/,",
                "\t'type-char': {",
                "\t\tpattern: /(\\w)[?%#$]/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,",
                "\t'operator': /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,",
                "\t'punctuation': /[.,:;()\\[\\]]/",
                "};"
            ]
        },
        "prism-monkey.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.monkey={string:/\"[^\"\\r\\n]*\"/,comment:[{pattern:/^#Rem\\s+[\\s\\S]*?^#End/im,greedy:!0},{pattern:/'.+/,greedy:!0}],preprocessor:{pattern:/(^[ \\t]*)#.+/m,lookbehind:!0,alias:\"comment\"},\"function\":/\\w+(?=\\()/,\"type-char\":{pattern:/(\\w)[?%#$]/,lookbehind:!0,alias:\"variable\"},number:{pattern:/((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,lookbehind:!0},keyword:/\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,operator:/\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,punctuation:/[.,:;()\\[\\]]/};"
            ]
        },
        "prism-n4js.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n4js = Prism.languages.extend('javascript', {",
                "\t// Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html",
                "\t'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('n4js', 'constant', {",
                "\t// Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations",
                "\t'annotation': {",
                "\t\tpattern: /@+\\w+/,",
                "\t\talias: 'operator'",
                "\t}",
                "});",
                "",
                "Prism.languages.n4jsd=Prism.languages.n4js;"
            ]
        },
        "prism-n4js.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n4js=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/}),Prism.languages.insertBefore(\"n4js\",\"constant\",{annotation:{pattern:/@+\\w+/,alias:\"operator\"}}),Prism.languages.n4jsd=Prism.languages.n4js;"
            ]
        },
        "prism-nasm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nasm = {",
                "\t'comment': /;.*$/m,",
                "\t'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t'label': {",
                "\t\tpattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'keyword': [",
                "\t\t/\\[?BITS (?:16|32|64)\\]?/,",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*)section\\s*[a-zA-Z.]+:?/im,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/(?:extern|global)[^;\\r\\n]*/i,",
                "\t\t/(?:CPU|FLOAT|DEFAULT).*$/m",
                "\t],",
                "\t'register': {",
                "\t\tpattern: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /(?:\\b|(?=\\$))(?:0[hx][\\da-f]*\\.?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|\\d*\\.?\\d+(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,",
                "\t'operator': /[\\[\\]*+\\-\\/%<>=&|$!]/",
                "};"
            ]
        },
        "prism-nasm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nasm={comment:/;.*$/m,string:/([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,label:{pattern:/(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,lookbehind:!0,alias:\"function\"},keyword:[/\\[?BITS (?:16|32|64)\\]?/,{pattern:/(^\\s*)section\\s*[a-zA-Z.]+:?/im,lookbehind:!0},/(?:extern|global)[^;\\r\\n]*/i,/(?:CPU|FLOAT|DEFAULT).*$/m],register:{pattern:/\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,alias:\"variable\"},number:/(?:\\b|(?=\\$))(?:0[hx][\\da-f]*\\.?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|\\d*\\.?\\d+(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,operator:/[\\[\\]*+\\-\\/%<>=&|$!]/};"
            ]
        },
        "prism-nginx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nginx = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\"{\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types)\\b/i",
                "});",
                "",
                "Prism.languages.insertBefore('nginx', 'keyword', {",
                "\t'variable': /\\$[a-z_]+/i",
                "});"
            ]
        },
        "prism-nginx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nginx=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\"{\\\\])#.*/,lookbehind:!0},keyword:/\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types)\\b/i}),Prism.languages.insertBefore(\"nginx\",\"keyword\",{variable:/\\$[a-z_]+/i});"
            ]
        },
        "prism-nim.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nim = {",
                "\t'comment': /#.*/,",
                "\t// Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)",
                "\t// Character literals are handled specifically to prevent issues with numeric type suffixes",
                "\t'string': {",
                "\t\tpattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// The negative look ahead prevents wrong highlighting of the .. operator",
                "\t'number': /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,",
                "\t'keyword': /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,",
                "\t'function': {",
                "\t\tpattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,",
                "\t\tinside: {",
                "\t\t\t'operator': /\\*$/",
                "\t\t}",
                "\t},",
                "\t// We don't want to highlight operators inside backticks",
                "\t'ignore': {",
                "\t\tpattern: /`[^`\\r\\n]+`/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /`/",
                "\t\t}",
                "\t},",
                "\t'operator': {",
                "\t\t// Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)",
                "\t\t// but allow the slice operator .. to take precedence over them",
                "\t\t// One can define his own operators in Nim so all combination of operators might be an operator.",
                "\t\tpattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/",
                "};"
            ]
        },
        "prism-nim.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nim={comment:/#.*/,string:{pattern:/(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,greedy:!0},number:/\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,keyword:/\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\"function\":{pattern:/(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,inside:{operator:/\\*$/}},ignore:{pattern:/`[^`\\r\\n]+`/,inside:{punctuation:/`/}},operator:{pattern:/(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,lookbehind:!0},punctuation:/[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/};"
            ]
        },
        "prism-nix.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nix = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\t// The lookbehind ensures the ${} is not preceded by \\ or ''",
                "\t\t\t\tpattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^}]|\\{[^}]*\\})*}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'antiquotation': {",
                "\t\t\t\t\t\tpattern: /^\\$(?=\\{)/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'url': [",
                "\t\t/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,",
                "\t\t{",
                "\t\t\tpattern: /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'antiquotation': {",
                "\t\tpattern: /\\$(?=\\{)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b\\d+\\b/,",
                "\t'keyword': /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,",
                "\t'function': /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'operator': /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,",
                "\t'punctuation': /[{}()[\\].,:;]/",
                "};",
                "",
                "Prism.languages.nix.string.inside.interpolation.inside.rest = Prism.languages.nix;"
            ]
        },
        "prism-nix.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nix={comment:/\\/\\*[\\s\\S]*?\\*\\/|#.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,greedy:!0,inside:{interpolation:{pattern:/(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^}]|\\{[^}]*\\})*}/,lookbehind:!0,inside:{antiquotation:{pattern:/^\\$(?=\\{)/,alias:\"variable\"}}}}},url:[/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,{pattern:/([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,lookbehind:!0}],antiquotation:{pattern:/\\$(?=\\{)/,alias:\"variable\"},number:/\\b\\d+\\b/,keyword:/\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,\"function\":/\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,\"boolean\":/\\b(?:true|false)\\b/,operator:/[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,punctuation:/[{}()[\\].,:;]/},Prism.languages.nix.string.inside.interpolation.inside.rest=Prism.languages.nix;"
            ]
        },
        "prism-nsis.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Jan T. Sott (http://github.com/idleberg)",
                " *",
                " * Includes all commands and plug-ins shipped with NSIS 3.02",
                " */",
                " Prism.languages.nsis = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'property': /\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK((CR|CU|LM)(32|64)?|DD|PD|U)|HKEY_(CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,",
                "\t'constant': /\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,",
                "\t'variable': /\\$\\w+/i,",
                "\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t'operator': /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,",
                "\t'punctuation': /[{}[\\];(),.:]/,",
                "\t'important': {",
                "\t\tpattern: /(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/mi,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-nsis.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nsis={comment:{pattern:/(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,lookbehind:!0},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:{pattern:/(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,lookbehind:!0},property:/\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK((CR|CU|LM)(32|64)?|DD|PD|U)|HKEY_(CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,constant:/\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,variable:/\\$\\w+/i,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,punctuation:/[{}[\\];(),.:]/,important:{pattern:/(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/im,lookbehind:!0}};"
            ]
        },
        "prism-objectivec.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.objectivec = Prism.languages.extend('c', {",
                "\t'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,",
                "\t'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,",
                "\t'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/",
                "});"
            ]
        },
        "prism-objectivec.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.objectivec=Prism.languages.extend(\"c\",{keyword:/\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,string:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,operator:/-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/});"
            ]
        },
        "prism-ocaml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ocaml = {",
                "\t'comment': /\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,",
                "\t'type': {",
                "\t\tpattern: /\\B['`]\\w*/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /\\B#\\w+/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t// Custom operators are allowed",
                "\t'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,",
                "\t'punctuation': /[(){}\\[\\]|_.,:;]/",
                "};"
            ]
        },
        "prism-ocaml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ocaml={comment:/\\(\\*[\\s\\S]*?\\*\\)/,string:[{pattern:/\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0},{pattern:/(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,greedy:!0}],number:/\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,type:{pattern:/\\B['`]\\w*/,alias:\"variable\"},directive:{pattern:/\\B#\\w+/,alias:\"function\"},keyword:/\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\"boolean\":/\\b(?:false|true)\\b/,operator:/:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,punctuation:/[(){}\\[\\]|_.,:;]/};"
            ]
        },
        "prism-opencl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t/* OpenCL kernel language */",
                "\tPrism.languages.opencl = Prism.languages.extend('c', {",
                "\t\t// Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)",
                "\t\t'keyword': /\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|auto|break|case|cl_(?:image_format|mem_fence_flags)|clk_event_t|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|event_t|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|imaginary|inline|intptr_t|ndrange_t|packed|pipe|ptrdiff_t|queue_t|register|reserve_id_t|restrict|return|sampler_t|signed|size_t|sizeof|static|struct|switch|typedef|uintptr_t|uniform|union|unsigned|void|volatile|while)\\b/,",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl.lang (global-vars, opencl-dev)",
                "\t\t'function-opencl-kernel': {",
                "\t\t\tpattern: /\\b(?:abs(?:_diff)?|a?(?:cos|sin)(?:h|pi)?|add_sat|aligned|all|and|any|async(?:_work_group_copy|_work_group_strided_copy)?|atan(?:2?(?:pi)?|h)?|atom_(?:add|and|cmpxchg|dec|inc|max|min|or|sub|xchg|xor)|barrier|bitselect|cbrt|ceil|clamp|clz|copies|copysign|cross|degrees|distance|dot|endian|erf|erfc|exp(?:2|10)?|expm1|fabs|fast_(?:distance|length|normalize)|fdim|floor|fma|fmax|fmin|fract|frexp|fro|from|get_(?:global_(?:id|offset|size)|group_id|image_(?:channel_data_type|channel_order|depth|dim|height|width)|local(?:_id|_size)|num_groups|work_dim)|hadd|(?:half|native)_(?:cos|divide|exp(?:2|10)?|log(?:2|10)?|powr|recip|r?sqrt|sin|tan)|hypot|ilogb|is(?:equal|finite|greater(?:equal)?|inf|less(?:equal|greater)?|nan|normal|notequal|(?:un)?ordered)|ldexp|length|lgamma|lgamma_r|log(?:b|1p|2|10)?|mad(?:24|_hi|_sat)?|max|mem(?:_fence)?|min|mix|modf|mul24|mul_hi|nan|nextafter|normalize|pow[nr]?|prefetch|radians|read_(?:image)(?:f|h|u?i)|read_mem_fence|remainder|remquo|reqd_work_group_size|rhadd|rint|rootn|rotate|round|rsqrt|select|shuffle2?|sign|signbit|sincos|smoothstep|sqrt|step|sub_sat|tan|tanh|tanpi|tgamma|to|trunc|upsample|vec_(?:step|type_hint)|v(?:load|store)(?:_half)?(?:2|3|4|8|16)?|v(?:loada_half|storea?(?:_half)?)(?:2|3|4|8|16)?(?:_(?:rte|rtn|rtp|rtz))?|wait_group_events|work_group_size_hint|write_image(?:f|h|u?i)|write_mem_fence)\\b/,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)",
                "\t\t'constant-opencl-kernel': {",
                "\t\t\tpattern: /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF|INFINITY|(?:INT|LONG|SCHAR|SHRT|UCHAR|UINT|ULONG)_(?:MAX|MIN)|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI[24]?|SQRT(?:1_2|2))|NAN)\\b/,",
                "\t\t\talias: 'constant'",
                "\t\t}",
                "\t});",
                "",
                "\tvar attributes = {",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)",
                "\t\t'type-opencl-host': {",
                "\t\t\tpattern: /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'boolean-opencl-host': {",
                "\t\t\tpattern: /\\bCL_(?:TRUE|FALSE)\\b/,",
                "\t\t\talias: 'boolean'",
                "\t\t},",
                "\t\t// Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)",
                "\t\t'constant-opencl-host': {",
                "\t\t\tpattern: /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,",
                "\t\t\talias: 'constant'",
                "\t\t},",
                "\t\t// Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)",
                "\t\t'function-opencl-host': {",
                "\t\t\tpattern: /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,",
                "\t\t\talias: 'function'",
                "\t\t}",
                "\t};",
                "",
                "\t/* OpenCL host API */",
                "\tPrism.languages.insertBefore('c', 'keyword', attributes);",
                "\t// Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html",
                "\tattributes['type-opencl-host-c++'] = {",
                "\t\tpattern: /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,",
                "\t\talias: 'keyword'",
                "\t};",
                "\t// C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h",
                "\tPrism.languages.insertBefore('cpp', 'keyword', attributes);",
                "}(Prism));"
            ]
        },
        "prism-opencl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(E){E.languages.opencl=E.languages.extend(\"c\",{keyword:/\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|auto|break|case|cl_(?:image_format|mem_fence_flags)|clk_event_t|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|event_t|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|imaginary|inline|intptr_t|ndrange_t|packed|pipe|ptrdiff_t|queue_t|register|reserve_id_t|restrict|return|sampler_t|signed|size_t|sizeof|static|struct|switch|typedef|uintptr_t|uniform|union|unsigned|void|volatile|while)\\b/,\"function-opencl-kernel\":{pattern:/\\b(?:abs(?:_diff)?|a?(?:cos|sin)(?:h|pi)?|add_sat|aligned|all|and|any|async(?:_work_group_copy|_work_group_strided_copy)?|atan(?:2?(?:pi)?|h)?|atom_(?:add|and|cmpxchg|dec|inc|max|min|or|sub|xchg|xor)|barrier|bitselect|cbrt|ceil|clamp|clz|copies|copysign|cross|degrees|distance|dot|endian|erf|erfc|exp(?:2|10)?|expm1|fabs|fast_(?:distance|length|normalize)|fdim|floor|fma|fmax|fmin|fract|frexp|fro|from|get_(?:global_(?:id|offset|size)|group_id|image_(?:channel_data_type|channel_order|depth|dim|height|width)|local(?:_id|_size)|num_groups|work_dim)|hadd|(?:half|native)_(?:cos|divide|exp(?:2|10)?|log(?:2|10)?|powr|recip|r?sqrt|sin|tan)|hypot|ilogb|is(?:equal|finite|greater(?:equal)?|inf|less(?:equal|greater)?|nan|normal|notequal|(?:un)?ordered)|ldexp|length|lgamma|lgamma_r|log(?:b|1p|2|10)?|mad(?:24|_hi|_sat)?|max|mem(?:_fence)?|min|mix|modf|mul24|mul_hi|nan|nextafter|normalize|pow[nr]?|prefetch|radians|read_(?:image)(?:f|h|u?i)|read_mem_fence|remainder|remquo|reqd_work_group_size|rhadd|rint|rootn|rotate|round|rsqrt|select|shuffle2?|sign|signbit|sincos|smoothstep|sqrt|step|sub_sat|tan|tanh|tanpi|tgamma|to|trunc|upsample|vec_(?:step|type_hint)|v(?:load|store)(?:_half)?(?:2|3|4|8|16)?|v(?:loada_half|storea?(?:_half)?)(?:2|3|4|8|16)?(?:_(?:rte|rtn|rtp|rtz))?|wait_group_events|work_group_size_hint|write_image(?:f|h|u?i)|write_mem_fence)\\b/,alias:\"function\"},\"constant-opencl-kernel\":{pattern:/\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF|INFINITY|(?:INT|LONG|SCHAR|SHRT|UCHAR|UINT|ULONG)_(?:MAX|MIN)|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI[24]?|SQRT(?:1_2|2))|NAN)\\b/,alias:\"constant\"}});var _={\"type-opencl-host\":{pattern:/\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,alias:\"keyword\"},\"boolean-opencl-host\":{pattern:/\\bCL_(?:TRUE|FALSE)\\b/,alias:\"boolean\"},\"constant-opencl-host\":{pattern:/\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,alias:\"constant\"},\"function-opencl-host\":{pattern:/\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,alias:\"function\"}};E.languages.insertBefore(\"c\",\"keyword\",_),_[\"type-opencl-host-c++\"]={pattern:/\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,alias:\"keyword\"},E.languages.insertBefore(\"cpp\",\"keyword\",_)}(Prism);"
            ]
        },
        "prism-oz.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.oz = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|%.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'atom': {",
                "\t\tpattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,",
                "\t\tgreedy: true,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'keyword': /[$_]|\\[\\]|\\b(?:at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,",
                "\t'function': [",
                "\t\t/[a-z][A-Za-z\\d]*(?=\\()/,",
                "\t\t{",
                "\t\t\tpattern: /(\\{)[A-Z][A-Za-z\\d]*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0[bx][\\da-f]+|\\d+\\.?\\d*(?:e~?\\d+)?\\b)|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,",
                "\t'variable': /\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,",
                "\t'attr-name': /\\w+(?=:)/,",
                "\t'operator': /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,",
                "\t'punctuation': /[\\[\\](){}.:;?]/",
                "};"
            ]
        },
        "prism-oz.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.oz={comment:/\\/\\*[\\s\\S]*?\\*\\/|%.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,greedy:!0},atom:{pattern:/'(?:[^'\\\\]|\\\\[\\s\\S])*'/,greedy:!0,alias:\"builtin\"},keyword:/[$_]|\\[\\]|\\b(?:at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\"function\":[/[a-z][A-Za-z\\d]*(?=\\()/,{pattern:/(\\{)[A-Z][A-Za-z\\d]*/,lookbehind:!0}],number:/\\b(?:0[bx][\\da-f]+|\\d+\\.?\\d*(?:e~?\\d+)?\\b)|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,variable:/\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,\"attr-name\":/\\w+(?=:)/,operator:/:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,punctuation:/[\\[\\](){}.:;?]/};"
            ]
        },
        "prism-parigp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parigp = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// PARI/GP does not care about white spaces at all",
                "\t// so let's process the keywords to build an appropriate regexp",
                "\t// (e.g. \"b *r *e *a *k\", etc.)",
                "\t'keyword': (function () {",
                "\t\tvar keywords = [",
                "\t\t\t'breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x',",
                "\t\t\t'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime',",
                "\t\t\t'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if',",
                "\t\t\t'local', 'my', 'next', 'return', 'until', 'while'",
                "\t\t];",
                "\t\tkeywords = keywords.map(function (keyword) {",
                "\t\t\treturn keyword.split('').join(' *');",
                "\t\t}).join('|');",
                "\t\treturn RegExp('\\\\b(?:' + keywords + ')\\\\b');",
                "\t}()),",
                "\t'function': /\\w[\\w ]*?(?= *\\()/,",
                "\t'number': {",
                "\t\t// The lookbehind and the negative lookahead prevent from breaking the .. operator",
                "\t\tpattern: /((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,",
                "\t'punctuation': /[\\[\\]{}().,:;|]/",
                "};"
            ]
        },
        "prism-parigp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parigp={comment:/\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,greedy:!0},keyword:function(){var r=[\"breakpoint\",\"break\",\"dbg_down\",\"dbg_err\",\"dbg_up\",\"dbg_x\",\"forcomposite\",\"fordiv\",\"forell\",\"forpart\",\"forprime\",\"forstep\",\"forsubgroup\",\"forvec\",\"for\",\"iferr\",\"if\",\"local\",\"my\",\"next\",\"return\",\"until\",\"while\"];return r=r.map(function(r){return r.split(\"\").join(\" *\")}).join(\"|\"),RegExp(\"\\\\b(?:\"+r+\")\\\\b\")}(),\"function\":/\\w[\\w ]*?(?= *\\()/,number:{pattern:/((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,lookbehind:!0},operator:/\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,punctuation:/[\\[\\]{}().,:;|]/};"
            ]
        },
        "prism-parser.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parser = Prism.languages.extend('markup', {",
                "\t'keyword': {",
                "\t\tpattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': {",
                "\t\tpattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\.|:+/",
                "\t\t}",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': {",
                "\t\t\t\tpattern: /(^@)(?:GET_|SET_)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\.|:+/",
                "\t\t}",
                "\t},",
                "\t'escape': {",
                "\t\tpattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'punctuation': /[\\[\\](){};]/",
                "});",
                "Prism.languages.insertBefore('parser', 'keyword', {",
                "\t'parser-comment': {",
                "\t\tpattern: /(\\s)#.*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'expression': {",
                "\t\t// Allow for 3 levels of depth",
                "\t\tpattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,",
                "\t\tgreedy: true,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'keyword': Prism.languages.parser.keyword,",
                "\t\t\t'variable': Prism.languages.parser.variable,",
                "\t\t\t'function': Prism.languages.parser.function,",
                "\t\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t\t'number': /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,",
                "\t\t\t'escape': Prism.languages.parser.escape,",
                "\t\t\t'operator': /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,",
                "\t\t\t'punctuation': Prism.languages.parser.punctuation",
                "\t\t}",
                "\t}",
                "});",
                "Prism.languages.insertBefore('inside', 'punctuation', {",
                "\t'expression': Prism.languages.parser.expression,",
                "\t'keyword': Prism.languages.parser.keyword,",
                "\t'variable': Prism.languages.parser.variable,",
                "\t'function': Prism.languages.parser.function,",
                "\t'escape': Prism.languages.parser.escape,",
                "\t'parser-punctuation': {",
                "\t\tpattern: Prism.languages.parser.punctuation,",
                "\t\talias: 'punctuation'",
                "\t}",
                "}, Prism.languages.parser['tag'].inside['attr-value']);"
            ]
        },
        "prism-parser.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parser=Prism.languages.extend(\"markup\",{keyword:{pattern:/(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,lookbehind:!0},variable:{pattern:/(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{punctuation:/\\.|:+/}},\"function\":{pattern:/(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{keyword:{pattern:/(^@)(?:GET_|SET_)/,lookbehind:!0},punctuation:/\\.|:+/}},escape:{pattern:/\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,alias:\"builtin\"},punctuation:/[\\[\\](){};]/}),Prism.languages.insertBefore(\"parser\",\"keyword\",{\"parser-comment\":{pattern:/(\\s)#.*/,lookbehind:!0,alias:\"comment\"},expression:{pattern:/(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,greedy:!0,lookbehind:!0,inside:{string:{pattern:/(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,lookbehind:!0},keyword:Prism.languages.parser.keyword,variable:Prism.languages.parser.variable,\"function\":Prism.languages.parser.function,\"boolean\":/\\b(?:true|false)\\b/,number:/\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,escape:Prism.languages.parser.escape,operator:/[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,punctuation:Prism.languages.parser.punctuation}}}),Prism.languages.insertBefore(\"inside\",\"punctuation\",{expression:Prism.languages.parser.expression,keyword:Prism.languages.parser.keyword,variable:Prism.languages.parser.variable,\"function\":Prism.languages.parser.function,escape:Prism.languages.parser.escape,\"parser-punctuation\":{pattern:Prism.languages.parser.punctuation,alias:\"punctuation\"}},Prism.languages.parser.tag.inside[\"attr-value\"]);"
            ]
        },
        "prism-pascal.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Based on Free Pascal",
                "",
                "/* TODO",
                "\tSupport inline asm ?",
                "*/",
                "",
                "Prism.languages.pascal = {",
                "\t'comment': [",
                "\t\t/\\(\\*[\\s\\S]+?\\*\\)/,",
                "\t\t/\\{[\\s\\S]+?\\}/,",
                "\t\t/\\/\\/.*/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /(?:'(?:''|[^'\\r\\n])*'|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\t// Turbo Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Free Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Object Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Modifiers",
                "\t\t\tpattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'number': [",
                "\t\t// Hexadecimal, octal and binary",
                "\t\t/(?:[&%]\\d+|\\$[a-f\\d]+)/i,",
                "\t\t// Decimal",
                "\t\t/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i",
                "\t],",
                "\t'operator': [",
                "\t\t/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,",
                "\t\t{",
                "\t\t\tpattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.]/",
                "};",
                "",
                "Prism.languages.objectpascal = Prism.languages.pascal;"
            ]
        },
        "prism-pascal.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.pascal={comment:[/\\(\\*[\\s\\S]+?\\*\\)/,/\\{[\\s\\S]+?\\}/,/\\/\\/.*/],string:{pattern:/(?:'(?:''|[^'\\r\\n])*'|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,lookbehind:!0}],number:[/(?:[&%]\\d+|\\$[a-f\\d]+)/i,/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],operator:[/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,{pattern:/(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,lookbehind:!0}],punctuation:/\\(\\.|\\.\\)|[()\\[\\]:;,.]/},Prism.languages.objectpascal=Prism.languages.pascal;"
            ]
        },
        "prism-perl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.perl = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\t// POD",
                "\t\t\tpattern: /(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\$])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t// TODO Could be nice to handle Heredoc too.",
                "\t'string': [",
                "\t\t// q/.../",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q a...a",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q(...)",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q{...}",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q[...]",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q<...>",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// \"...\", `...`",
                "\t\t{",
                "\t\t\tpattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// '...'",
                "\t\t// FIXME Multi-line single-quoted strings are not supported as they would break variables containing '",
                "\t\t{",
                "\t\t\tpattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'regex': [",
                "\t\t// m/.../",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m a...a",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m(...)",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m{...}",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m[...]",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m<...>",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// The lookbehinds prevent -s from breaking",
                "\t\t// FIXME We don't handle change of separator like s(...)[...]",
                "\t\t// s/.../.../",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s a...a...a",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s(...)(...)",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s{...}{...}",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s[...][...]",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s<...><...>",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// /.../",
                "\t\t// The look-ahead tries to prevent two divisions on",
                "\t\t// the same line from being highlighted as regex.",
                "\t\t// This does not support multi-line regex.",
                "\t\t{",
                "\t\t\tpattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "",
                "\t// FIXME Not sure about the handling of ::, ', and #",
                "\t'variable': [",
                "\t\t// ${^POSTMATCH}",
                "\t\t/[&*$@%]\\{\\^[A-Z]+\\}/,",
                "\t\t// $^V",
                "\t\t/[&*$@%]\\^[A-Z_]/,",
                "\t\t// ${...}",
                "\t\t/[&*$@%]#?(?=\\{)/,",
                "\t\t// $foo",
                "\t\t/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i,",
                "\t\t// $1",
                "\t\t/[&*$@%]\\d+/,",
                "\t\t// $_, @_, %!",
                "\t\t// The negative lookahead prevents from breaking the %= operator",
                "\t\t/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/",
                "\t],",
                "\t'filehandle': {",
                "\t\t// <>, <FOO>, _",
                "\t\tpattern: /<(?![<=])\\S*>|\\b_\\b/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'vstring': {",
                "\t\t// v1.2, 1.2.3",
                "\t\tpattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /sub [a-z0-9_]+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /sub/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,",
                "\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,",
                "\t'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,",
                "\t'punctuation': /[{}[\\];(),:]/",
                "};"
            ]
        },
        "prism-perl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.perl={comment:[{pattern:/(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,lookbehind:!0},{pattern:/(^|[^\\\\$])#.*/,lookbehind:!0}],string:[{pattern:/\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,greedy:!0},{pattern:/(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/'(?:[^'\\\\\\r\\n]|\\\\.)*'/,greedy:!0}],regex:[{pattern:/\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,greedy:!0}],variable:[/[&*$@%]\\{\\^[A-Z]+\\}/,/[&*$@%]\\^[A-Z_]/,/[&*$@%]#?(?=\\{)/,/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i,/[&*$@%]\\d+/,/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],filehandle:{pattern:/<(?![<=])\\S*>|\\b_\\b/,alias:\"symbol\"},vstring:{pattern:/v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,alias:\"string\"},\"function\":{pattern:/sub [a-z0-9_]+/i,inside:{keyword:/sub/}},keyword:/\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,operator:/-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,punctuation:/[{}[\\];(),:]/};"
            ]
        },
        "prism-php-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.insertBefore('php', 'variable', {",
                "\t'this': /\\$this\\b/,",
                "\t'global': /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,",
                "\t'scope': {",
                "\t\tpattern: /\\b[\\w\\\\]+::/,",
                "\t\tinside: {",
                "\t\t\tkeyword: /static|self|parent/,",
                "\t\t\tpunctuation: /::|\\\\/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-php-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.insertBefore(\"php\",\"variable\",{\"this\":/\\$this\\b/,global:/\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,scope:{pattern:/\\b[\\w\\\\]+::/,inside:{keyword:/static|self|parent/,punctuation:/::|\\\\/}}});"
            ]
        },
        "prism-php.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/",
                " * Modified by Miles Johnson: http://milesj.me",
                " *",
                " * Supports the following:",
                " * \t\t- Extends clike syntax",
                " * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)",
                " * \t\t- Smarter constant and function matching",
                " *",
                " * Adds the following new token classes:",
                " * \t\tconstant, delimiter, variable, function, package",
                " */",
                "(function (Prism) {",
                "\tPrism.languages.php = Prism.languages.extend('clike', {",
                "\t\t'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,",
                "\t\t'constant': /\\b[A-Z0-9_]{2,}\\b/,",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('php', 'string', {",
                "\t\t'shell-comment': {",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'comment'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('php', 'keyword', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /\\?>|<\\?(?:php|=)?/i,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,",
                "\t\t'package': {",
                "\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\\\/",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\t// Must be defined after the function pattern",
                "\tPrism.languages.insertBefore('php', 'operator', {",
                "\t\t'property': {",
                "\t\t\tpattern: /(->)[\\w]+/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('php', 'string', {",
                "\t\t'nowdoc-string': {",
                "\t\t\tpattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,",
                "\t\t\t\t\talias: 'symbol',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'heredoc-string': {",
                "\t\t\tpattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,",
                "\t\t\t\t\talias: 'symbol',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'interpolation': null // See below",
                "\t\t\t}",
                "\t\t},",
                "\t\t'single-quoted-string': {",
                "\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'double-quoted-string': {",
                "\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': null // See below",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\t// The different types of PHP strings \"replace\" the C-like standard string",
                "\tdelete Prism.languages.php['string'];",
                "",
                "\tvar string_interpolation = {",
                "\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\trest: Prism.languages.php",
                "\t\t}",
                "\t};",
                "\tPrism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;",
                "\tPrism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tif (!/(?:<\\?php|<\\?)/ig.test(env.code)) {",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tvar phpPattern = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-php.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.php=e.languages.extend(\"clike\",{keyword:/\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,constant:/\\b[A-Z0-9_]{2,}\\b/,comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0}}),e.languages.insertBefore(\"php\",\"string\",{\"shell-comment\":{pattern:/(^|[^\\\\])#.*/,lookbehind:!0,alias:\"comment\"}}),e.languages.insertBefore(\"php\",\"keyword\",{delimiter:{pattern:/\\?>|<\\?(?:php|=)?/i,alias:\"important\"},variable:/\\$+(?:\\w+\\b|(?={))/i,\"package\":{pattern:/(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,lookbehind:!0,inside:{punctuation:/\\\\/}}}),e.languages.insertBefore(\"php\",\"operator\",{property:{pattern:/(->)[\\w]+/,lookbehind:!0}}),e.languages.insertBefore(\"php\",\"string\",{\"nowdoc-string\":{pattern:/<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<'?|[';]$/}}}},\"heredoc-string\":{pattern:/<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:null}},\"single-quoted-string\":{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0,alias:\"string\",inside:{interpolation:null}}}),delete e.languages.php.string;var n={pattern:/{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,lookbehind:!0,inside:{rest:e.languages.php}};e.languages.php[\"heredoc-string\"].inside.interpolation=n,e.languages.php[\"double-quoted-string\"].inside.interpolation=n,e.hooks.add(\"before-tokenize\",function(n){if(/(?:<\\?php|<\\?)/gi.test(n.code)){var i=/(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/gi;e.languages[\"markup-templating\"].buildPlaceholders(n,\"php\",i)}}),e.hooks.add(\"after-tokenize\",function(n){e.languages[\"markup-templating\"].tokenizePlaceholders(n,\"php\")})}(Prism);"
            ]
        },
        "prism-plsql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.plsql = Prism.languages.extend('sql', {",
                "\t'comment': [",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t/--.*/",
                "\t]",
                "});",
                "",
                "if (Prism.util.type(Prism.languages.plsql['keyword']) !== 'Array') {",
                "\tPrism.languages.plsql['keyword'] = [Prism.languages.plsql['keyword']];",
                "}",
                "Prism.languages.plsql['keyword'].unshift(",
                "\t/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i",
                ");",
                "",
                "if (Prism.util.type(Prism.languages.plsql['operator']) !== 'Array') {",
                "\tPrism.languages.plsql['operator'] = [Prism.languages.plsql['operator']];",
                "}",
                "Prism.languages.plsql['operator'].unshift(",
                "\t/:=/",
                ");"
            ]
        },
        "prism-plsql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.plsql=Prism.languages.extend(\"sql\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,/--.*/]}),\"Array\"!==Prism.util.type(Prism.languages.plsql.keyword)&&(Prism.languages.plsql.keyword=[Prism.languages.plsql.keyword]),Prism.languages.plsql.keyword.unshift(/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i),\"Array\"!==Prism.util.type(Prism.languages.plsql.operator)&&(Prism.languages.plsql.operator=[Prism.languages.plsql.operator]),Prism.languages.plsql.operator.unshift(/:=/);"
            ]
        },
        "prism-powershell.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.powershell = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^`])<#[\\s\\S]*?#>/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^`])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': {",
                "\t\t\t\t\t// Allow for one level of nesting",
                "\t\t\t\t\tpattern: /(^|[^`])\\$\\((?:\\$\\(.*?\\)|(?!\\$\\()[^\\r\\n)])*\\)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t// Populated at end of file",
                "\t\t\t\t\tinside: {}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /'(?:[^']|'')*'/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t// Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices",
                "\t// Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)",
                "\t'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,",
                "\t'boolean': /\\$(?:true|false)\\b/i,",
                "\t'variable': /\\$\\w+\\b/i,",
                "\t// Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example",
                "\t// Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }",
                "\t// Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }",
                "\t'function': [",
                "\t\t/\\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\\b/i,",
                "\t\t/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i",
                "\t],",
                "\t// per http://technet.microsoft.com/en-us/library/hh847744.aspx",
                "\t'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,",
                "\t'operator': {",
                "\t\tpattern: /(\\W?)(?:!|-(eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /[|{}[\\];(),.]/",
                "};",
                "",
                "// Variable interpolation inside strings, and nested expressions",
                "Prism.languages.powershell.string[0].inside.boolean = Prism.languages.powershell.boolean;",
                "Prism.languages.powershell.string[0].inside.variable = Prism.languages.powershell.variable;",
                "Prism.languages.powershell.string[0].inside.function.inside = Prism.languages.powershell;"
            ]
        },
        "prism-powershell.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.powershell={comment:[{pattern:/(^|[^`])<#[\\s\\S]*?#>/,lookbehind:!0},{pattern:/(^|[^`])#.*/,lookbehind:!0}],string:[{pattern:/\"(?:`[\\s\\S]|[^`\"])*\"/,greedy:!0,inside:{\"function\":{pattern:/(^|[^`])\\$\\((?:\\$\\(.*?\\)|(?!\\$\\()[^\\r\\n)])*\\)/,lookbehind:!0,inside:{}}}},{pattern:/'(?:[^']|'')*'/,greedy:!0}],namespace:/\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,\"boolean\":/\\$(?:true|false)\\b/i,variable:/\\$\\w+\\b/i,\"function\":[/\\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\\b/i,/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],keyword:/\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,operator:{pattern:/(\\W?)(?:!|-(eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,lookbehind:!0},punctuation:/[|{}[\\];(),.]/},Prism.languages.powershell.string[0].inside.boolean=Prism.languages.powershell.boolean,Prism.languages.powershell.string[0].inside.variable=Prism.languages.powershell.variable,Prism.languages.powershell.string[0].inside.function.inside=Prism.languages.powershell;"
            ]
        },
        "prism-processing.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.processing = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,",
                "\t'operator': /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/",
                "});",
                "Prism.languages.insertBefore('processing', 'number', {",
                "\t// Special case: XML is a type",
                "\t'constant': /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,",
                "\t'type': {",
                "\t\tpattern: /\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "",
                "// Spaces are allowed between function name and parenthesis",
                "Prism.languages.processing['function'].pattern = /\\w+(?=\\s*\\()/;",
                "",
                "// Class-names is not styled by default",
                "Prism.languages.processing['class-name'].alias = 'variable';"
            ]
        },
        "prism-processing.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.processing=Prism.languages.extend(\"clike\",{keyword:/\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,operator:/<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/}),Prism.languages.insertBefore(\"processing\",\"number\",{constant:/\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,type:{pattern:/\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,alias:\"variable\"}}),Prism.languages.processing[\"function\"].pattern=/\\w+(?=\\s*\\()/,Prism.languages.processing[\"class-name\"].alias=\"variable\";"
            ]
        },
        "prism-prolog.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.prolog = {",
                "\t// Syntax depends on the implementation",
                "\t'comment': [",
                "\t\t/%.+/,",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//",
                "\t],",
                "\t// Depending on the implementation, strings may allow escaped newlines and quote-escape",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'builtin': /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,",
                "\t'variable': /\\b[A-Z_]\\w*/,",
                "\t// FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?",
                "\t'function': /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,",
                "\t'number': /\\b\\d+\\.?\\d*/,",
                "\t// Custom operators are allowed",
                "\t'operator': /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,",
                "\t'punctuation': /[(){}\\[\\],]/",
                "};"
            ]
        },
        "prism-prolog.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.prolog={comment:[/%.+/,/\\/\\*[\\s\\S]*?\\*\\//],string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,variable:/\\b[A-Z_]\\w*/,\"function\":/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+\\.?\\d*/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/};"
            ]
        },
        "prism-properties.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.properties = {",
                "\t'comment': /^[ \\t]*[#!].*$/m,",
                "\t'attr-value': {",
                "\t\tpattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,",
                "\t'punctuation': /[=:]/",
                "};"
            ]
        },
        "prism-properties.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.properties={comment:/^[ \\t]*[#!].*$/m,\"attr-value\":{pattern:/(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,lookbehind:!0},\"attr-name\":/^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,punctuation:/[=:]/};"
            ]
        },
        "prism-protobuf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.protobuf = Prism.languages.extend('clike', {",
                "\tkeyword: /\\b(?:package|import|message|enum)\\b/,",
                "\tbuiltin: /\\b(?:required|repeated|optional|reserved)\\b/,",
                "\tprimitive: {",
                "\t\tpattern: /\\b(?:double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});"
            ]
        },
        "prism-protobuf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.protobuf=Prism.languages.extend(\"clike\",{keyword:/\\b(?:package|import|message|enum)\\b/,builtin:/\\b(?:required|repeated|optional|reserved)\\b/,primitive:{pattern:/\\b(?:double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b/,alias:\"symbol\"}});"
            ]
        },
        "prism-pug.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\t// TODO:",
                "\t// - Add CSS highlighting inside <style> tags",
                "\t// - Add support for multi-line code blocks",
                "\t// - Add support for interpolation #{} and !{}",
                "\t// - Add support for tag interpolation #[]",
                "\t// - Add explicit support for plain text using |",
                "\t// - Add support for markup embedded in plain text",
                "",
                "\tPrism.languages.pug = {",
                "",
                "\t\t// Multiline stuff should appear before the rest",
                "",
                "\t\t// This handles both single-line and multi-line comments",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t// All the tag-related part is in lookbehind",
                "\t\t// so that it can be highlighted by the \"tag\" pattern",
                "\t\t'multiline-script': {",
                "\t\t\tpattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// See at the end of the file for known filters",
                "\t\t'filter': {",
                "\t\t\tpattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'filter-name': {",
                "\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'multiline-plain-text': {",
                "\t\t\tpattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'markup': {",
                "\t\t\tpattern: /(^[\\t ]*)<.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.markup",
                "\t\t\t}",
                "\t\t},",
                "\t\t'doctype': {",
                "\t\t\tpattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t// This handle all conditional and loop keywords",
                "\t\t'flow-control': {",
                "\t\t\tpattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'each': {",
                "\t\t\t\t\tpattern: /^each .+? in\\b/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'keyword': /\\b(?:each|in)\\b/,",
                "\t\t\t\t\t\t'punctuation': /,/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'branch': {",
                "\t\t\t\t\tpattern: /^(?:if|unless|else|case|when|default|while)\\b/,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'mixin': [",
                "\t\t\t// Declaration",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*)mixin .+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^mixin/,",
                "\t\t\t\t\t'function': /\\w+(?=\\s*\\(|\\s*$)/,",
                "\t\t\t\t\t'punctuation': /[(),.]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Usage",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*)\\+.+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'name': {",
                "\t\t\t\t\t\tpattern: /^\\+\\w+/,",
                "\t\t\t\t\t\talias: 'function'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'rest': Prism.languages.javascript",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'script': {",
                "\t\t\tpattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'plain-text': {",
                "\t\t\tpattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\tpattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': [",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /&[^(]+\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\t\tpattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,",
                "\t\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,",
                "\t\t\t\t\t\t\t'punctuation': /[!=(),]+/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /:/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*(?:-|!?=)).+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'punctuation': /[.\\-!=|]+/",
                "\t};",
                "",
                "\tvar filter_pattern = '(^([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n))(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+';",
                "",
                "\t// Non exhaustive list of available filters and associated languages",
                "\tvar filters = [",
                "\t\t{filter:'atpl',language:'twig'},",
                "\t\t{filter:'coffee',language:'coffeescript'},",
                "\t\t'ejs',",
                "\t\t'handlebars',",
                "\t\t'hogan',",
                "\t\t'less',",
                "\t\t'livescript',",
                "\t\t'markdown',",
                "\t\t'mustache',",
                "\t\t'plates',",
                "\t\t{filter:'sass',language:'scss'},",
                "\t\t'stylus',",
                "\t\t'swig'",
                "",
                "\t];",
                "\tvar all_filters = {};",
                "\tfor (var i = 0, l = filters.length; i < l; i++) {",
                "\t\tvar filter = filters[i];",
                "\t\tfilter = typeof filter === 'string' ? {filter: filter, language: filter} : filter;",
                "\t\tif (Prism.languages[filter.language]) {",
                "\t\t\tall_filters['filter-' + filter.filter] = {",
                "\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter), 'm'),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'filter-name': {",
                "\t\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages[filter.language]",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tPrism.languages.insertBefore('pug', 'filter', all_filters);",
                "",
                "}(Prism));"
            ]
        },
        "prism-pug.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.pug={comment:{pattern:/(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,lookbehind:!0},\"multiline-script\":{pattern:/(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:{rest:e.languages.javascript}},filter:{pattern:/(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},\"multiline-plain-text\":{pattern:/(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0},markup:{pattern:/(^[\\t ]*)<.+/m,lookbehind:!0,inside:{rest:e.languages.markup}},doctype:{pattern:/((?:^|\\n)[\\t ]*)doctype(?: .+)?/,lookbehind:!0},\"flow-control\":{pattern:/(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,lookbehind:!0,inside:{each:{pattern:/^each .+? in\\b/,inside:{keyword:/\\b(?:each|in)\\b/,punctuation:/,/}},branch:{pattern:/^(?:if|unless|else|case|when|default|while)\\b/,alias:\"keyword\"},rest:e.languages.javascript}},keyword:{pattern:/(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,lookbehind:!0},mixin:[{pattern:/(^[\\t ]*)mixin .+/m,lookbehind:!0,inside:{keyword:/^mixin/,\"function\":/\\w+(?=\\s*\\(|\\s*$)/,punctuation:/[(),.]/}},{pattern:/(^[\\t ]*)\\+.+/m,lookbehind:!0,inside:{name:{pattern:/^\\+\\w+/,alias:\"function\"},rest:e.languages.javascript}}],script:{pattern:/(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,lookbehind:!0,inside:{rest:e.languages.javascript}},\"plain-text\":{pattern:/(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,lookbehind:!0},tag:{pattern:/(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,lookbehind:!0,inside:{attributes:[{pattern:/&[^(]+\\([^)]+\\)/,inside:{rest:e.languages.javascript}},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,lookbehind:!0,inside:{rest:e.languages.javascript}},\"attr-name\":/[\\w-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[!=(),]+/}}],punctuation:/:/}},code:[{pattern:/(^[\\t ]*(?:-|!?=)).+/m,lookbehind:!0,inside:{rest:e.languages.javascript}}],punctuation:/[.\\-!=|]+/};for(var t=\"(^([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n))(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\",n=[{filter:\"atpl\",language:\"twig\"},{filter:\"coffee\",language:\"coffeescript\"},\"ejs\",\"handlebars\",\"hogan\",\"less\",\"livescript\",\"markdown\",\"mustache\",\"plates\",{filter:\"sass\",language:\"scss\"},\"stylus\",\"swig\"],a={},i=0,r=n.length;r>i;i++){var s=n[i];s=\"string\"==typeof s?{filter:s,language:s}:s,e.languages[s.language]&&(a[\"filter-\"+s.filter]={pattern:RegExp(t.replace(\"{{filter_name}}\",s.filter),\"m\"),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[s.language]}})}e.languages.insertBefore(\"pug\",\"filter\",a)}(Prism);"
            ]
        },
        "prism-puppet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.puppet = {",
                "\t\t'heredoc': [",
                "\t\t\t// Matches the content of a quoted heredoc string (subject to interpolation)",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// Matches the end tag",
                "\t\t\t\t\t'punctuation': /(?=\\S).*\\S(?= *$)/",
                "\t\t\t\t\t// See interpolation below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Matches the content of an unquoted heredoc string (no interpolation)",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// Matches the end tag",
                "\t\t\t\t\t'punctuation': /(?=\\S).*\\S(?= *$)/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Matches the start tag of heredoc strings",
                "\t\t\t{",
                "\t\t\t\tpattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\tpattern: /(\\().+?(?=\\))/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'multiline-comment': {",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'regex': {",
                "\t\t\t// Must be prefixed with the keyword \"node\" or a non-word char",
                "\t\t\tpattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// Extended regexes must have the x flag. They can contain single-line comments.",
                "\t\t\t\t'extended-regex': {",
                "\t\t\t\t\tpattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'comment': /#.*/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\t// Allow for one nested level of double quotes inside interpolation",
                "\t\t\tpattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'double-quoted': {",
                "\t\t\t\t\tpattern: /^\"[\\s\\S]*\"$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t// See interpolation below",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /::/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'attr-name': /(?:\\w+|\\*)(?=\\s*=>)/,",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.)(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/",
                "\t\t],",
                "\t\t'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t// Includes words reserved for future use",
                "\t\t'keyword': /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,",
                "\t\t'datatype': {",
                "\t\t\tpattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'operator': /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,",
                "\t\t'punctuation': /[\\[\\]{}().,;]|:+/",
                "\t};",
                "",
                "\tvar interpolation = [",
                "\t\t{",
                "\t\t\t// Allow for one nested level of braces inside interpolation",
                "\t\t\tpattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'short-variable': {",
                "\t\t\t\t\t// Negative look-ahead prevent wrong highlighting of functions",
                "\t\t\t\t\tpattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'variable',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /::/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^\\$/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.puppet",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /::/",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "\tPrism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;",
                "\tPrism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;",
                "}(Prism));"
            ]
        },
        "prism-puppet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.puppet={heredoc:[{pattern:/(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,lookbehind:!0,alias:\"string\",inside:{punctuation:/(?=\\S).*\\S(?= *$)/}},{pattern:/(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,lookbehind:!0,greedy:!0,alias:\"string\",inside:{punctuation:/(?=\\S).*\\S(?= *$)/}},{pattern:/@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,alias:\"string\",inside:{punctuation:{pattern:/(\\().+?(?=\\))/,lookbehind:!0}}}],\"multiline-comment\":{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0,greedy:!0,alias:\"comment\"},regex:{pattern:/((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,lookbehind:!0,greedy:!0,inside:{\"extended-regex\":{pattern:/^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,inside:{comment:/#.*/}}}},comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0,greedy:!0},string:{pattern:/([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{\"double-quoted\":{pattern:/^\"[\\s\\S]*\"$/,inside:{}}}},variable:{pattern:/\\$(?:::)?\\w+(?:::\\w+)*/,inside:{punctuation:/::/}},\"attr-name\":/(?:\\w+|\\*)(?=\\s*=>)/,\"function\":[{pattern:/(\\.)(?!\\d)\\w+/,lookbehind:!0},/\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],number:/\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\"boolean\":/\\b(?:true|false)\\b/,keyword:/\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,datatype:{pattern:/\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,alias:\"symbol\"},operator:/=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,punctuation:/[\\[\\]{}().,;]|:+/};var n=[{pattern:/(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,lookbehind:!0,inside:{\"short-variable\":{pattern:/(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,lookbehind:!0,alias:\"variable\",inside:{punctuation:/::/}},delimiter:{pattern:/^\\$/,alias:\"variable\"},rest:e.languages.puppet}},{pattern:/(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,lookbehind:!0,alias:\"variable\",inside:{punctuation:/::/}}];e.languages.puppet.heredoc[0].inside.interpolation=n,e.languages.puppet.string.inside[\"double-quoted\"].inside.interpolation=n}(Prism);"
            ]
        },
        "prism-pure.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.pure = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/#!.+/",
                "\t\t],",
                "\t\t'inline-lang': {",
                "\t\t\tpattern: /%<[\\s\\S]+?%>/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'lang': {",
                "\t\t\t\t\tpattern: /(^%< *)-\\*-.+?-\\*-/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'comment'",
                "\t\t\t\t},",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^%<.*|%>$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': {",
                "\t\t\t// The look-behind prevents wrong highlighting of the .. operator",
                "\t\t\tpattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,",
                "\t\t'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,",
                "\t\t'special': {",
                "\t\t\tpattern: /\\b__[a-z]+__\\b/i,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t// Any combination of operator chars can be an operator",
                "\t\t'operator': /(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,",
                "\t\t// FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?",
                "\t\t'punctuation': /[(){}\\[\\];,|]/",
                "\t};",
                "",
                "\tvar inlineLanguages = [",
                "\t\t'c',",
                "\t\t{ lang: 'c++', alias: 'cpp' },",
                "\t\t'fortran',",
                "\t\t'ats',",
                "\t\t'dsp'",
                "\t];",
                "\tvar inlineLanguageRe = '%< *-\\\\*- *{lang}\\\\d* *-\\\\*-[\\\\s\\\\S]+?%>';",
                "",
                "\tinlineLanguages.forEach(function (lang) {",
                "\t\tvar alias = lang;",
                "\t\tif (typeof lang !== 'string') {",
                "\t\t\talias = lang.alias;",
                "\t\t\tlang = lang.lang;",
                "\t\t}",
                "\t\tif (Prism.languages[alias]) {",
                "\t\t\tvar o = {};",
                "\t\t\to['inline-lang-' + alias] = {",
                "\t\t\t\tpattern: RegExp(inlineLanguageRe.replace('{lang}', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,'\\\\$1')), 'i'),",
                "\t\t\t\tinside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)",
                "\t\t\t};",
                "\t\t\to['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);",
                "\t\t\tPrism.languages.insertBefore('pure', 'inline-lang', o);",
                "\t\t}",
                "\t});",
                "",
                "\t// C is the default inline language",
                "\tif (Prism.languages.c) {",
                "\t\tPrism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-pure.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0},/#!.+/],\"inline-lang\":{pattern:/%<[\\s\\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:!0,alias:\"comment\"},delimiter:{pattern:/^%<.*|%>$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},number:{pattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,lookbehind:!0},keyword:/\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\"function\":/\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,special:{pattern:/\\b__[a-z]+__\\b/i,alias:\"builtin\"},operator:/(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,punctuation:/[(){}\\[\\];,|]/};var t=[\"c\",{lang:\"c++\",alias:\"cpp\"},\"fortran\",\"ats\",\"dsp\"],a=\"%< *-\\\\*- *{lang}\\\\d* *-\\\\*-[\\\\s\\\\S]+?%>\";t.forEach(function(t){var r=t;if(\"string\"!=typeof t&&(r=t.alias,t=t.lang),e.languages[r]){var i={};i[\"inline-lang-\"+r]={pattern:RegExp(a.replace(\"{lang}\",t.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,\"\\\\$1\")),\"i\"),inside:e.util.clone(e.languages.pure[\"inline-lang\"].inside)},i[\"inline-lang-\"+r].inside.rest=e.util.clone(e.languages[r]),e.languages.insertBefore(\"pure\",\"inline-lang\",i)}}),e.languages.c&&(e.languages.pure[\"inline-lang\"].inside.rest=e.util.clone(e.languages.c))}(Prism);"
            ]
        },
        "prism-python.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.python = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'triple-quoted-string': {",
                "\t\tpattern: /(\"\"\"|''')[\\s\\S]+?\\1/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\bclass\\s+)\\w+/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\\b/,",
                "\t'builtin':/\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,",
                "\t'boolean': /\\b(?:True|False|None)\\b/,",
                "\t'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,",
                "\t'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-python.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.python={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},\"triple-quoted-string\":{pattern:/(\"\"\"|''')[\\s\\S]+?\\1/,greedy:!0,alias:\"string\"},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"function\":{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,lookbehind:!0},\"class-name\":{pattern:/(\\bclass\\s+)\\w+/i,lookbehind:!0},keyword:/\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\\b/,builtin:/\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\"boolean\":/\\b(?:True|False|None)\\b/,number:/(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-q.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.q = {",
                "\t'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t'comment': [",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.",
                "\t\t{",
                "",
                "\t\t\tpattern: /([\\t )\\]}])\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.",
                "\t\t// A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.",
                "\t\t// If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.",
                "\t\t// The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.",
                "\t\t{",
                "\t\t\tpattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// A \\ on a line by itself with no preceding matching / will comment to end of file.",
                "\t\t{",
                "\t\t\tpattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /^#!.+/m,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'symbol': /`(?::\\S+|[\\w.]*)/,",
                "\t'datetime': {",
                "\t\tpattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,",
                "\t\talias: 'number'",
                "\t},",
                "\t// The negative look-ahead prevents bad highlighting",
                "\t// of verbs 0: and 1:",
                "\t'number': /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?[hjfeb]?)/,",
                "\t'keyword': /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,",
                "\t'adverb': {",
                "\t\tpattern: /['\\/\\\\]:?|\\beach\\b/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'verb': {",
                "\t\tpattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?_~=|$&#@^]):?/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'punctuation': /[(){}\\[\\];.]/",
                "};"
            ]
        },
        "prism-q.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.q={string:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,comment:[{pattern:/([\\t )\\]}])\\/.*/,lookbehind:!0,greedy:!0},{pattern:/(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,lookbehind:!0,greedy:!0},{pattern:/^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,greedy:!0},{pattern:/^#!.+/m,greedy:!0}],symbol:/`(?::\\S+|[\\w.]*)/,datetime:{pattern:/0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,alias:\"number\"},number:/\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?[hjfeb]?)/,keyword:/\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,adverb:{pattern:/['\\/\\\\]:?|\\beach\\b/,alias:\"function\"},verb:{pattern:/(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?_~=|$&#@^]):?/,alias:\"operator\"},punctuation:/[(){}\\[\\];.]/};"
            ]
        },
        "prism-qore.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.qore = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t// Overridden to allow unescaped multi-line strings",
                "\t'string': {",
                "\t\tpattern: /(\"|')(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /\\$(?!\\d)\\w+\\b/,",
                "\t'keyword': /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,",
                "\t'number': /\\b(?:0b[01]+|0x[\\da-f]*\\.?[\\da-fp\\-]+|\\d*\\.?\\d+e?\\d*[df]|\\d*\\.?\\d+)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': /\\$?\\b(?!\\d)\\w+(?=\\()/",
                "});"
            ]
        },
        "prism-qore.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.qore=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,lookbehind:!0},string:{pattern:/(\"|')(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},variable:/\\$(?!\\d)\\w+\\b/,keyword:/\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,number:/\\b(?:0b[01]+|0x[\\da-f]*\\.?[\\da-fp\\-]+|\\d*\\.?\\d+e?\\d*[df]|\\d*\\.?\\d+)\\b/i,\"boolean\":/\\b(?:true|false)\\b/i,operator:{pattern:/(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,lookbehind:!0},\"function\":/\\$?\\b(?!\\d)\\w+(?=\\()/});"
            ]
        },
        "prism-r.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.r = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'percent-operator': {",
                "\t\t// Includes user-defined operators",
                "\t\t// and %%, %*%, %/%, %in%, %o%, %x%",
                "\t\tpattern: /%[^%\\s]*%/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'boolean': /\\b(?:TRUE|FALSE)\\b/,",
                "\t'ellipsis': /\\.\\.(?:\\.|\\d+)/,",
                "\t'number': [",
                "\t\t/\\b(?:NaN|Inf)\\b/,",
                "\t\t/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/",
                "\t],",
                "\t'keyword': /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,",
                "\t'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,",
                "\t'punctuation': /[(){}\\[\\],;]/",
                "};"
            ]
        },
        "prism-r.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.r={comment:/#.*/,string:{pattern:/(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"percent-operator\":{pattern:/%[^%\\s]*%/,alias:\"operator\"},\"boolean\":/\\b(?:TRUE|FALSE)\\b/,ellipsis:/\\.\\.(?:\\.|\\d+)/,number:[/\\b(?:NaN|Inf)\\b/,/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],keyword:/\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,operator:/->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,punctuation:/[(){}\\[\\],;]/};"
            ]
        },
        "prism-reason.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.reason = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// 'class-name' must be matched *after* 'constructor' defined below",
                "\t'class-name': /\\b[A-Z]\\w*/,",
                "\t'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,",
                "\t'operator': /\\.{3}|:[:=]|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/",
                "});",
                "Prism.languages.insertBefore('reason', 'class-name', {",
                "\t'character': {",
                "\t\tpattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'constructor': {",
                "\t\t// Negative look-ahead prevents from matching things like String.capitalize",
                "\t\tpattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /\\b[a-z]\\w*(?=::)/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});",
                "",
                "// We can't match functions property, so let's not even try.",
                "delete Prism.languages.reason.function;"
            ]
        },
        "prism-reason.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.reason=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,greedy:!0},\"class-name\":/\\b[A-Z]\\w*/,keyword:/\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,operator:/\\.{3}|:[:=]|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/}),Prism.languages.insertBefore(\"reason\",\"class-name\",{character:{pattern:/'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,alias:\"string\"},constructor:{pattern:/\\b[A-Z]\\w*\\b(?!\\s*\\.)/,alias:\"variable\"},label:{pattern:/\\b[a-z]\\w*(?=::)/,alias:\"symbol\"}}),delete Prism.languages.reason.function;"
            ]
        },
        "prism-renpy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.renpy= {",
                "\t// TODO Write tests.",
                "",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.+/,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'string': {",
                "\t\tpattern: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'function' : /[a-z_]\\w*(?=\\()/i,",
                "",
                "\t'property': /\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,",
                "",
                "\t'tag': /\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,",
                "",
                "\t'keyword' : /\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,",
                "",
                "\t'boolean' : /\\b(?:[Tt]rue|[Ff]alse)\\b/,",
                "",
                "\t'number' : /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,",
                "",
                "\t'operator' : /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,",
                "",
                "\t'punctuation' : /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-renpy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.renpy={comment:{pattern:/(^|[^\\\\])#.+/,lookbehind:!0},string:{pattern:/(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,greedy:!0},\"function\":/[a-z_]\\w*(?=\\()/i,property:/\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,tag:/\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,keyword:/\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,\"boolean\":/\\b(?:[Tt]rue|[Ff]alse)\\b/,number:/(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-rest.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rest = {",
                "\t'table': [",
                "\t\t{",
                "\t\t\tpattern: /(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1(?:[+|].+)+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\||(?:\\+[=-]+)+\\+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\s*)(?:=+ +)+=+(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1(?:=+ +)+=+(?=(?:\\r?\\n|\\r){2}|\\s*$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[=-]+/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t// Directive-like patterns",
                "",
                "\t'substitution-def': {",
                "\t\tpattern: /(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'substitution': {",
                "\t\t\t\tpattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,",
                "\t\t\t\talias: 'attr-value',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^\\||\\|$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /( +)[^:]+::/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'function',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /::$/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'link-target': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*\\.\\. )\\[[^\\]]+\\]/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\[|\\]$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^_|:$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'directive': {",
                "\t\tpattern: /(^\\s*\\.\\. )[^:]+::/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /::$/",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\t// The two alternatives try to prevent highlighting of blank comments",
                "\t\tpattern: /(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'title': [",
                "\t\t// Overlined and underlined",
                "\t\t{",
                "\t\t\tpattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,",
                "\t\t\t\t'important': /.+/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Underlined only",
                "\t\t{",
                "\t\t\tpattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,",
                "\t\t\t\t'important': /.+/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'hr': {",
                "\t\tpattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'field': {",
                "\t\tpattern: /(^\\s*):[^:\\r\\n]+:(?= )/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'attr-name'",
                "\t},",
                "\t'command-line-option': {",
                "\t\tpattern: /(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'literal-block': {",
                "\t\tpattern: /::(?:\\r?\\n|\\r){2}([ \\t]+).+(?:(?:\\r?\\n|\\r)\\1.+)*/,",
                "\t\tinside: {",
                "\t\t\t'literal-block-punctuation': {",
                "\t\t\t\tpattern: /^::/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'quoted-literal-block': {",
                "\t\tpattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,",
                "\t\tinside: {",
                "\t\t\t'literal-block-punctuation': {",
                "\t\t\t\tpattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'list-bullet': {",
                "\t\tpattern: /(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'doctest-block': {",
                "\t\tpattern: /(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^>>>/",
                "\t\t}",
                "\t},",
                "",
                "\t'inline': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'bold': {",
                "\t\t\t\t\tpattern: /(^\\*\\*).+(?=\\*\\*$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'italic': {",
                "\t\t\t\t\tpattern: /(^\\*).+(?=\\*$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'inline-literal': {",
                "\t\t\t\t\tpattern: /(^``).+(?=``$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'symbol'",
                "\t\t\t\t},",
                "\t\t\t\t'role': {",
                "\t\t\t\t\tpattern: /^:[^:]+:|:[^:]+:$/,",
                "\t\t\t\t\talias: 'function',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^:|:$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'interpreted-text': {",
                "\t\t\t\t\tpattern: /(^`).+(?=`$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'substitution': {",
                "\t\t\t\t\tpattern: /(^\\|).+(?=\\|$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\*\\*?|``?|\\|/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t'link': [",
                "\t\t{",
                "\t\t\tpattern: /\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\[|\\]_$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(?:\\b[a-z\\d](?:[_.:+]?[a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^_?`|`$|`?_?_$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t// Line block start,",
                "\t// quote attribution,",
                "\t// explicit markup start,",
                "\t// and anonymous hyperlink target shortcut (__)",
                "\t'punctuation': {",
                "\t\tpattern: /(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-rest.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rest={table:[{pattern:/(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1(?:[+|].+)+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,lookbehind:!0,inside:{punctuation:/\\||(?:\\+[=-]+)+\\+/}},{pattern:/(\\s*)(?:=+ +)+=+(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1(?:=+ +)+=+(?=(?:\\r?\\n|\\r){2}|\\s*$)/,lookbehind:!0,inside:{punctuation:/[=-]+/}}],\"substitution-def\":{pattern:/(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,lookbehind:!0,inside:{substitution:{pattern:/^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,alias:\"attr-value\",inside:{punctuation:/^\\||\\|$/}},directive:{pattern:/( +)[^:]+::/,lookbehind:!0,alias:\"function\",inside:{punctuation:/::$/}}}},\"link-target\":[{pattern:/(^\\s*\\.\\. )\\[[^\\]]+\\]/m,lookbehind:!0,alias:\"string\",inside:{punctuation:/^\\[|\\]$/}},{pattern:/(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,lookbehind:!0,alias:\"string\",inside:{punctuation:/^_|:$/}}],directive:{pattern:/(^\\s*\\.\\. )[^:]+::/m,lookbehind:!0,alias:\"function\",inside:{punctuation:/::$/}},comment:{pattern:/(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,lookbehind:!0},title:[{pattern:/^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,inside:{punctuation:/^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,important:/.+/}},{pattern:/(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,lookbehind:!0,inside:{punctuation:/[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,important:/.+/}}],hr:{pattern:/((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,lookbehind:!0,alias:\"punctuation\"},field:{pattern:/(^\\s*):[^:\\r\\n]+:(?= )/m,lookbehind:!0,alias:\"attr-name\"},\"command-line-option\":{pattern:/(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,lookbehind:!0,alias:\"symbol\"},\"literal-block\":{pattern:/::(?:\\r?\\n|\\r){2}([ \\t]+).+(?:(?:\\r?\\n|\\r)\\1.+)*/,inside:{\"literal-block-punctuation\":{pattern:/^::/,alias:\"punctuation\"}}},\"quoted-literal-block\":{pattern:/::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,inside:{\"literal-block-punctuation\":{pattern:/^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,alias:\"punctuation\"}}},\"list-bullet\":{pattern:/(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,lookbehind:!0,alias:\"punctuation\"},\"doctest-block\":{pattern:/(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,lookbehind:!0,inside:{punctuation:/^>>>/}},inline:[{pattern:/(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,lookbehind:!0,inside:{bold:{pattern:/(^\\*\\*).+(?=\\*\\*$)/,lookbehind:!0},italic:{pattern:/(^\\*).+(?=\\*$)/,lookbehind:!0},\"inline-literal\":{pattern:/(^``).+(?=``$)/,lookbehind:!0,alias:\"symbol\"},role:{pattern:/^:[^:]+:|:[^:]+:$/,alias:\"function\",inside:{punctuation:/^:|:$/}},\"interpreted-text\":{pattern:/(^`).+(?=`$)/,lookbehind:!0,alias:\"attr-value\"},substitution:{pattern:/(^\\|).+(?=\\|$)/,lookbehind:!0,alias:\"attr-value\"},punctuation:/\\*\\*?|``?|\\|/}}],link:[{pattern:/\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,alias:\"string\",inside:{punctuation:/^\\[|\\]_$/}},{pattern:/(?:\\b[a-z\\d](?:[_.:+]?[a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,alias:\"string\",inside:{punctuation:/^_?`|`$|`?_?_$/}}],punctuation:{pattern:/(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,lookbehind:!0}};"
            ]
        },
        "prism-rip.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rip = {",
                "\t'comment': /#.*/,",
                "",
                "\t'keyword': /(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,",
                "",
                "\t'builtin': /@|\\bSystem\\b/,",
                "",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "",
                "\t'date': /\\b\\d{4}-\\d{2}-\\d{2}\\b/,",
                "\t'time': /\\b\\d{2}:\\d{2}:\\d{2}\\b/,",
                "\t'datetime': /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,",
                "",
                "\t'character': /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,",
                "",
                "\t'regex': {",
                "\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/(?=\\s*($|[\\r\\n,.;})]))/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'symbol': /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /[+-]?(?:(?:\\d+\\.\\d+)|(?:\\d+))/,",
                "",
                "\t'punctuation': /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,",
                "",
                "\t'reference': /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/",
                "};"
            ]
        },
        "prism-rip.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rip={comment:/#.*/,keyword:/(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,builtin:/@|\\bSystem\\b/,\"boolean\":/\\b(?:true|false)\\b/,date:/\\b\\d{4}-\\d{2}-\\d{2}\\b/,time:/\\b\\d{2}:\\d{2}:\\d{2}\\b/,datetime:/\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,character:/\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,regex:{pattern:/(^|[^\\/])\\/(?!\\/)(\\[.+?]|\\\\.|[^\\/\\\\\\r\\n])+\\/(?=\\s*($|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0},symbol:/:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},number:/[+-]?(?:(?:\\d+\\.\\d+)|(?:\\d+))/,punctuation:/(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,reference:/[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/};"
            ]
        },
        "prism-roboconf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.roboconf = {",
                "\t'comment': /#.*/,",
                "\t'keyword': {",
                "\t\t'pattern': /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'component': {",
                "\t\tpattern: /[\\w-]+(?=[ \\t]*\\{)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'property': /[\\w.-]+(?=[ \\t]*:)/,",
                "\t'value': {",
                "\t\tpattern: /(=[ \\t]*)[^,;]+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'attr-value'",
                "\t},",
                "\t'optional': {",
                "\t\tpattern: /\\(optional\\)/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'wildcard': {",
                "\t\tpattern: /(\\.)\\*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'punctuation': /[{},.;:=]/",
                "};"
            ]
        },
        "prism-roboconf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.roboconf={comment:/#.*/,keyword:{pattern:/(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,lookbehind:!0},component:{pattern:/[\\w-]+(?=[ \\t]*\\{)/,alias:\"variable\"},property:/[\\w.-]+(?=[ \\t]*:)/,value:{pattern:/(=[ \\t]*)[^,;]+/,lookbehind:!0,alias:\"attr-value\"},optional:{pattern:/\\(optional\\)/,alias:\"builtin\"},wildcard:{pattern:/(\\.)\\*/,lookbehind:!0,alias:\"operator\"},punctuation:/[{},.;:=]/};"
            ]
        },
        "prism-ruby.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Samuel Flores",
                " *",
                " * Adds the following new token classes:",
                " * \t\tconstant, builtin, variable, symbol, regex",
                " */",
                "(function(Prism) {",
                "\tPrism.languages.ruby = Prism.languages.extend('clike', {",
                "\t\t'comment': [",
                "\t\t\t/#.*/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end/m,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/",
                "\t});",
                "",
                "\tvar interpolation = {",
                "\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.ruby",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.insertBefore('ruby', 'keyword', {",
                "\t\t'regex': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\t\tpattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t'symbol': {",
                "\t\t\tpattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('ruby', 'number', {",
                "\t\t'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,",
                "\t\t'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/",
                "\t});",
                "",
                "\tPrism.languages.ruby.string = [",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\tpattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "}(Prism));"
            ]
        },
        "prism-ruby.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.ruby=e.languages.extend(\"clike\",{comment:[/#.*/,{pattern:/^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end/m,greedy:!0}],keyword:/\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/});var n={pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"tag\"},rest:e.languages.ruby}};e.languages.insertBefore(\"ruby\",\"keyword\",{regex:[{pattern:/%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/(^|[^\\/])\\/(?!\\/)(\\[.+?]|\\\\.|[^\\/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0}],variable:/[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,lookbehind:!0}}),e.languages.insertBefore(\"ruby\",\"number\",{builtin:/\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,constant:/\\b[A-Z]\\w*(?:[?!]|\\b)/}),e.languages.ruby.string=[{pattern:/%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,greedy:!0,inside:{interpolation:n}},{pattern:/(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:n}}]}(Prism);"
            ]
        },
        "prism-rust.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tAdd support for Markdown notation inside doc comments",
                "\tAdd support for nested block comments...",
                "\tMatch closure params even when not followed by dash or brace",
                "\tAdd better support for macro definition",
                "*/",
                "",
                "Prism.languages.rust = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'char': {",
                "\t\tpattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'lifetime-annotation': {",
                "\t\tpattern: /'[^\\s>']+/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'keyword': /\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b/,",
                "",
                "\t'attribute': {",
                "\t\tpattern: /#!?\\[.+?\\]/,",
                "\t\tgreedy: true,",
                "\t\talias: 'attr-name'",
                "\t},",
                "",
                "\t'function': [",
                "\t\t/\\w+(?=\\s*\\()/,",
                "\t\t// Macros can use parens or brackets",
                "\t\t/\\w+!(?=\\s*\\(|\\[)/",
                "\t],",
                "\t'macro-rules': {",
                "\t\tpattern: /\\w+!/,",
                "\t\talias: 'function'",
                "\t},",
                "",
                "\t// Hex, oct, bin, dec numbers with visual separators and type suffix",
                "\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,",
                "",
                "\t// Closure params should not be confused with bitwise OR |",
                "\t'closure-params': {",
                "\t\tpattern: /\\|[^|]*\\|(?=\\s*[{-])/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[|:,]/,",
                "\t\t\t'operator': /[&*]/",
                "\t\t}",
                "\t},",
                "\t'punctuation': /[{}[\\];(),:]|\\.+|->/,",
                "\t'operator': /[-+*\\/%!^]=?|=[=>]?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/",
                "};"
            ]
        },
        "prism-rust.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rust={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],string:[{pattern:/b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,greedy:!0},{pattern:/b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0}],\"char\":{pattern:/b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,alias:\"string\"},\"lifetime-annotation\":{pattern:/'[^\\s>']+/,alias:\"symbol\"},keyword:/\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b/,attribute:{pattern:/#!?\\[.+?\\]/,greedy:!0,alias:\"attr-name\"},\"function\":[/\\w+(?=\\s*\\()/,/\\w+!(?=\\s*\\(|\\[)/],\"macro-rules\":{pattern:/\\w+!/,alias:\"function\"},number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\"closure-params\":{pattern:/\\|[^|]*\\|(?=\\s*[{-])/,inside:{punctuation:/[|:,]/,operator:/[&*]/}},punctuation:/[{}[\\];(),:]|\\.+|->/,operator:/[-+*\\/%!^]=?|=[=>]?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/};"
            ]
        },
        "prism-sas.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sas = {",
                "\t'datalines': {",
                "\t\tpattern: /^\\s*(?:(?:data)?lines|cards);[\\s\\S]+?(?:\\r?\\n|\\r);/im,",
                "\t\talias: 'string',",
                "\t\tinside: {",
                "\t\t\t'keyword': {",
                "\t\t\t\tpattern: /^(\\s*)(?:(?:data)?lines|cards)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /;/",
                "\t\t}",
                "\t},",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*|;\\s*)\\*.*;/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/\\/\\*[\\s\\S]+?\\*\\//",
                "\t],",
                "\t'datetime': {",
                "\t\t// '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt",
                "\t\tpattern: /'[^']+'(?:dt?|t)\\b/i,",
                "\t\talias: 'number'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:data|else|format|if|input|proc\\s\\w+|quit|run|then)\\b/i,",
                "\t// Decimal (1.2e23), hexadecimal (0c1x)",
                "\t'number': /\\b(?:[\\da-f]+x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)/i,",
                "\t'operator': /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?|\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,",
                "\t'punctuation': /[$%@.(){}\\[\\];,\\\\]/",
                "};"
            ]
        },
        "prism-sas.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sas={datalines:{pattern:/^\\s*(?:(?:data)?lines|cards);[\\s\\S]+?(?:\\r?\\n|\\r);/im,alias:\"string\",inside:{keyword:{pattern:/^(\\s*)(?:(?:data)?lines|cards)/i,lookbehind:!0},punctuation:/;/}},comment:[{pattern:/(^\\s*|;\\s*)\\*.*;/m,lookbehind:!0},/\\/\\*[\\s\\S]+?\\*\\//],datetime:{pattern:/'[^']+'(?:dt?|t)\\b/i,alias:\"number\"},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,greedy:!0},keyword:/\\b(?:data|else|format|if|input|proc\\s\\w+|quit|run|then)\\b/i,number:/\\b(?:[\\da-f]+x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)/i,operator:/\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?|\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,punctuation:/[$%@.(){}\\[\\];,\\\\]/};"
            ]
        },
        "prism-sass.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.sass = Prism.languages.extend('css', {",
                "\t\t// Sass comments don't need to be closed, only indented",
                "\t\t'comment': {",
                "\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('sass', 'atrule', {",
                "\t\t// We want to consume the whole line",
                "\t\t'atrule-line': {",
                "\t\t\t// Includes support for = and + shortcuts",
                "\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\tdelete Prism.languages.sass.atrule;",
                "",
                "",
                "\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;",
                "\tvar operator = [",
                "\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,",
                "\t\t{",
                "\t\t\tpattern: /(\\s+)-(?=\\s)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.insertBefore('sass', 'property', {",
                "\t\t// We want to consume the whole line",
                "\t\t'variable-line': {",
                "\t\t\tpattern: /^[ \\t]*\\$.+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t'variable': variable,",
                "\t\t\t\t'operator': operator",
                "\t\t\t}",
                "\t\t},",
                "\t\t// We want to consume the whole line",
                "\t\t'property-line': {",
                "\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'property': [",
                "\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t'variable': variable,",
                "\t\t\t\t'operator': operator,",
                "\t\t\t\t'important': Prism.languages.sass.important",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\tdelete Prism.languages.sass.property;",
                "\tdelete Prism.languages.sass.important;",
                "",
                "\t// Now that whole lines for other patterns are consumed,",
                "\t// what's left should be selectors",
                "\tdelete Prism.languages.sass.selector;",
                "\tPrism.languages.insertBefore('sass', 'punctuation', {",
                "\t\t'selector': {",
                "\t\t\tpattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-sass.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.sass=e.languages.extend(\"css\",{comment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,lookbehind:!0}}),e.languages.insertBefore(\"sass\",\"atrule\",{\"atrule-line\":{pattern:/^(?:[ \\t]*)[@+=].+/m,inside:{atrule:/(?:@[\\w-]+|[+=])/m}}}),delete e.languages.sass.atrule;var a=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,t=[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,{pattern:/(\\s+)-(?=\\s)/,lookbehind:!0}];e.languages.insertBefore(\"sass\",\"property\",{\"variable-line\":{pattern:/^[ \\t]*\\$.+/m,inside:{punctuation:/:/,variable:a,operator:t}},\"property-line\":{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:!0}],punctuation:/:/,variable:a,operator:t,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,delete e.languages.sass.selector,e.languages.insertBefore(\"sass\",\"punctuation\",{selector:{pattern:/([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,lookbehind:!0}})}(Prism);"
            ]
        },
        "prism-scala.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scala = Prism.languages.extend('java', {",
                "\t'keyword': /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'builtin': /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,",
                "\t'number': /\\b0x[\\da-f]*\\.?[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,",
                "\t'symbol': /'[^\\d\\s\\\\]\\w*/",
                "});",
                "delete Prism.languages.scala['class-name'];",
                "delete Prism.languages.scala['function'];"
            ]
        },
        "prism-scala.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scala=Prism.languages.extend(\"java\",{keyword:/<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,string:[{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0},{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],builtin:/\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,number:/\\b0x[\\da-f]*\\.?[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,symbol:/'[^\\d\\s\\\\]\\w*/}),delete Prism.languages.scala[\"class-name\"],delete Prism.languages.scala[\"function\"];"
            ]
        },
        "prism-scheme.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scheme = {",
                "\t'comment' : /;.*/,",
                "\t'string' :  {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'[^('\\s]*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword' : {",
                "\t\tpattern : /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)/,",
                "\t\tlookbehind : true",
                "\t},",
                "\t'builtin' : {",
                "\t\tpattern :  /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)/,",
                "\t\tlookbehind : true",
                "\t},",
                "\t'number' : {",
                "\t\tpattern: /(\\s|[()])[-+]?\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?\\b/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'boolean' : /#[tf]/,",
                "\t'operator': {",
                "\t\tpattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function' : {",
                "\t\tpattern : /(\\()[^\\s()]*(?=[\\s)])/,",
                "\t\tlookbehind : true",
                "\t},",
                "\t'punctuation' : /[()]/",
                "};"
            ]
        },
        "prism-scheme.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scheme={comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'[^('\\s]*/,greedy:!0},keyword:{pattern:/(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)/,lookbehind:!0},builtin:{pattern:/(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)/,lookbehind:!0},number:{pattern:/(\\s|[()])[-+]?\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?\\b/,lookbehind:!0},\"boolean\":/#[tf]/,operator:{pattern:/(\\()(?:[-+*%\\/]|[<>]=?|=>?)/,lookbehind:!0},\"function\":{pattern:/(\\()[^\\s()]*(?=[\\s)])/,lookbehind:!0},punctuation:/[()]/};"
            ]
        },
        "prism-scss.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scss = Prism.languages.extend('css', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'atrule': {",
                "\t\tpattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,",
                "\t\tinside: {",
                "\t\t\t'rule': /@[\\w-]+/",
                "\t\t\t// See rest below",
                "\t\t}",
                "\t},",
                "\t// url, compassified",
                "\t'url': /(?:[-a-z]+-)*url(?=\\()/i,",
                "\t// CSS selector regex is not appropriate for Sass",
                "\t// since there can be lot more things (var, @ directive, nesting..)",
                "\t// a selector must start at the end of a property or after a brace (end of other rules or nesting)",
                "\t// it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable",
                "\t// the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var",
                "\t// can \"pass\" as a selector- e.g: proper#{$erty})",
                "\t// this one was hard to do, so please be careful if you edit this one :)",
                "\t'selector': {",
                "\t\t// Initial look-ahead is used to prevent matching of blank selectors",
                "\t\tpattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|&|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,",
                "\t\tinside: {",
                "\t\t\t'parent': {",
                "\t\t\t\tpattern: /&/,",
                "\t\t\t\talias: 'important'",
                "\t\t\t},",
                "\t\t\t'placeholder': /%[-\\w]+/,",
                "\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'atrule', {",
                "\t'keyword': [",
                "\t\t/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,",
                "\t\t{",
                "\t\t\tpattern: /( +)(?:from|through)(?= )/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t]",
                "});",
                "",
                "Prism.languages.scss.property = {",
                "\tpattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/i,",
                "\tinside: {",
                "\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "\t}",
                "};",
                "",
                "Prism.languages.insertBefore('scss', 'important', {",
                "\t// var and interpolated vars",
                "\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'function', {",
                "\t'placeholder': {",
                "\t\tpattern: /%[-\\w]+/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'statement': {",
                "\t\tpattern: /\\B!(?:default|optional)\\b/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'null': /\\bnull\\b/,",
                "\t'operator': {",
                "\t\tpattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;"
            ]
        },
        "prism-scss.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scss=Prism.languages.extend(\"css\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},atrule:{pattern:/@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,inside:{rule:/@[\\w-]+/}},url:/(?:[-a-z]+-)*url(?=\\()/i,selector:{pattern:/(?=\\S)[^@;{}()]?(?:[^@;{}()]|&|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,inside:{parent:{pattern:/&/,alias:\"important\"},placeholder:/%[-\\w]+/,variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}}}),Prism.languages.insertBefore(\"scss\",\"atrule\",{keyword:[/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,{pattern:/( +)(?:from|through)(?= )/,lookbehind:!0}]}),Prism.languages.scss.property={pattern:/(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/i,inside:{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}},Prism.languages.insertBefore(\"scss\",\"important\",{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}),Prism.languages.insertBefore(\"scss\",\"function\",{placeholder:{pattern:/%[-\\w]+/,alias:\"selector\"},statement:{pattern:/\\B!(?:default|optional)\\b/i,alias:\"keyword\"},\"boolean\":/\\b(?:true|false)\\b/,\"null\":/\\bnull\\b/,operator:{pattern:/(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,lookbehind:!0}}),Prism.languages.scss.atrule.inside.rest=Prism.languages.scss;"
            ]
        },
        "prism-smalltalk.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.smalltalk = {",
                "\t'comment': /\"(?:\"\"|[^\"])+\"/,",
                "\t'string': /'(?:''|[^'])+'/,",
                "\t'symbol': /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,",
                "\t'block-arguments': {",
                "\t\tpattern: /(\\[\\s*):[^\\[|]*\\|/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'variable': /:[\\da-z]+/i,",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'temporary-variables': {",
                "\t\tpattern: /\\|[^|]+\\|/,",
                "\t\tinside: {",
                "\t\t\t'variable': /[\\da-z]+/i,",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:nil|true|false|self|super|new)\\b/,",
                "\t'character': {",
                "\t\tpattern: /\\$./,",
                "\t\talias: 'string'",
                "\t},",
                "\t'number': [",
                "\t\t/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,",
                "\t\t/\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/",
                "\t],",
                "\t'operator': /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,",
                "\t'punctuation': /[.;:?\\[\\](){}]/",
                "};"
            ]
        },
        "prism-smalltalk.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.smalltalk={comment:/\"(?:\"\"|[^\"])+\"/,string:/'(?:''|[^'])+'/,symbol:/#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\"block-arguments\":{pattern:/(\\[\\s*):[^\\[|]*\\|/,lookbehind:!0,inside:{variable:/:[\\da-z]+/i,punctuation:/\\|/}},\"temporary-variables\":{pattern:/\\|[^|]+\\|/,inside:{variable:/[\\da-z]+/i,punctuation:/\\|/}},keyword:/\\b(?:nil|true|false|self|super|new)\\b/,character:{pattern:/\\$./,alias:\"string\"},number:[/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,/\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/],operator:/[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,punctuation:/[.;:?\\[\\](){}]/};"
            ]
        },
        "prism-smarty.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tAdd support for variables inside double quoted strings",
                "\tAdd support for {php}",
                "*/",
                "",
                "(function(Prism) {",
                "",
                "\tPrism.languages.smarty = {",
                "\t\t'comment': /\\{\\*[\\s\\S]*?\\*\\}/,",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^\\{|\\}$/i,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,",
                "\t\t'variable': [",
                "\t\t\t/\\$(?!\\d)\\w+/,",
                "\t\t\t/#(?!\\d)\\w+#/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.|->)(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\[)(?!\\d)\\w+(?=\\])/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|\\s*)@?(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/^\\/?(?!\\d)\\w+/,",
                "\t\t\t/(?!\\d)\\w+(?=\\()/",
                "\t\t],",
                "\t\t'attr-name': {",
                "\t\t\t// Value is made optional because it may have already been tokenized",
                "\t\t\tpattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,",
                "\t\t\tinside: {",
                "\t\t\t\t\"variable\": {",
                "\t\t\t\t\tpattern: /(=\\s*)(?!\\d)\\w+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t\"operator\": /=/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': [",
                "\t\t\t/[\\[\\]().,:`]|->/",
                "\t\t],",
                "\t\t'operator': [",
                "\t\t\t/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,",
                "\t\t\t/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,",
                "\t\t\t/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/",
                "\t\t],",
                "\t\t'keyword': /\\b(?:false|off|on|no|true|yes)\\b/",
                "\t};",
                "",
                "\t// Comments are inserted at top so that they can",
                "\t// surround markup",
                "\tPrism.languages.insertBefore('smarty', 'tag', {",
                "\t\t'smarty-comment': {",
                "\t\t\tpattern: /\\{\\*[\\s\\S]*?\\*\\}/,",
                "\t\t\talias: ['smarty','comment']",
                "\t\t}",
                "\t});",
                "",
                "\t// Tokenize all inline Smarty expressions",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;",
                "\t\tvar smartyLitteralStart = '{literal}';",
                "\t\tvar smartyLitteralEnd = '{/literal}';",
                "\t\tvar smartyLitteralMode = false;",
                "",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {",
                "\t\t\t// Smarty tags inside {literal} block are ignored",
                "\t\t\tif(match === smartyLitteralEnd) {",
                "\t\t\t\tsmartyLitteralMode = false;",
                "\t\t\t}",
                "",
                "\t\t\tif(!smartyLitteralMode) {",
                "\t\t\t\tif(match === smartyLitteralStart) {",
                "\t\t\t\t\tsmartyLitteralMode = true;",
                "\t\t\t\t}",
                "",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t});",
                "",
                "\t// Re-insert the tokens after tokenizing",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-smarty.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.smarty={comment:/\\{\\*[\\s\\S]*?\\*\\}/,delimiter:{pattern:/^\\{|\\}$/i,alias:\"punctuation\"},string:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,number:/\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,variable:[/\\$(?!\\d)\\w+/,/#(?!\\d)\\w+#/,{pattern:/(\\.|->)(?!\\d)\\w+/,lookbehind:!0},{pattern:/(\\[)(?!\\d)\\w+(?=\\])/,lookbehind:!0}],\"function\":[{pattern:/(\\|\\s*)@?(?!\\d)\\w+/,lookbehind:!0},/^\\/?(?!\\d)\\w+/,/(?!\\d)\\w+(?=\\()/],\"attr-name\":{pattern:/\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,inside:{variable:{pattern:/(=\\s*)(?!\\d)\\w+/,lookbehind:!0},operator:/=/}},punctuation:[/[\\[\\]().,:`]|->/],operator:[/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],keyword:/\\b(?:false|off|on|no|true|yes)\\b/},e.languages.insertBefore(\"smarty\",\"tag\",{\"smarty-comment\":{pattern:/\\{\\*[\\s\\S]*?\\*\\}/,alias:[\"smarty\",\"comment\"]}}),e.hooks.add(\"before-tokenize\",function(t){var a=/\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g,n=\"{literal}\",o=\"{/literal}\",r=!1;e.languages[\"markup-templating\"].buildPlaceholders(t,\"smarty\",a,function(e){return e===o&&(r=!1),r?!1:(e===n&&(r=!0),!0)})}),e.hooks.add(\"after-tokenize\",function(t){e.languages[\"markup-templating\"].tokenizePlaceholders(t,\"smarty\")})}(Prism);"
            ]
        },
        "prism-soy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
                "\tvar numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;",
                "",
                "\tPrism.languages.soy = {",
                "\t\t'comment': [",
                "\t\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)\\/\\/.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'command-arg': {",
                "\t\t\tpattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t'parameter': {",
                "\t\t\tpattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "\t\t'keyword': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/",
                "\t\t],",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^{+\\/?|\\/?}+$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'property': /\\w+(?==)/,",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,",
                "\t\t\tinside: {",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: stringPattern,",
                "\t\t\t\t\tgreedy: true",
                "\t\t\t\t},",
                "\t\t\t\t'number': numberPattern,",
                "\t\t\t\t'punctuation': /[\\[\\].?]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: stringPattern,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'function': [",
                "\t\t\t/\\w+(?=\\()/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|[^\\S\\r\\n]*)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'number': numberPattern,",
                "\t\t'operator': /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,",
                "\t\t'punctuation': /[{}()\\[\\]|.,:]/",
                "\t};",
                "",
                "\t// Tokenize all inline Soy expressions",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tvar soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;",
                "\t\tvar soyLitteralStart = '{literal}';",
                "\t\tvar soyLitteralEnd = '{/literal}';",
                "\t\tvar soyLitteralMode = false;",
                "",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {",
                "\t\t\t// Soy tags inside {literal} block are ignored",
                "\t\t\tif (match === soyLitteralEnd) {",
                "\t\t\t\tsoyLitteralMode = false;",
                "\t\t\t}",
                "",
                "\t\t\tif (!soyLitteralMode) {",
                "\t\t\t\tif (match === soyLitteralStart) {",
                "\t\t\t\t\tsoyLitteralMode = true;",
                "\t\t\t\t}",
                "",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t});",
                "",
                "\t// Re-insert the tokens after tokenizing",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-soy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var a=/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,t=/\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;e.languages.soy={comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(\\s)\\/\\/.*/,lookbehind:!0,greedy:!0}],\"command-arg\":{pattern:/({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,lookbehind:!0,alias:\"string\",inside:{punctuation:/\\./}},parameter:{pattern:/({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,lookbehind:!0,alias:\"variable\"},keyword:[{pattern:/({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,lookbehind:!0},/\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],delimiter:{pattern:/^{+\\/?|\\/?}+$/,alias:\"punctuation\"},property:/\\w+(?==)/,variable:{pattern:/\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,inside:{string:{pattern:a,greedy:!0},number:t,punctuation:/[\\[\\].?]/}},string:{pattern:a,greedy:!0},\"function\":[/\\w+(?=\\()/,{pattern:/(\\|[^\\S\\r\\n]*)\\w+/,lookbehind:!0}],\"boolean\":/\\b(?:true|false)\\b/,number:t,operator:/\\?:?|<=?|>=?|==?|!=|[+*\\/%-]|\\b(?:and|not|or)\\b/,punctuation:/[{}()\\[\\]|.,:]/},e.hooks.add(\"before-tokenize\",function(a){var t=/{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g,n=\"{literal}\",l=\"{/literal}\",r=!1;e.languages[\"markup-templating\"].buildPlaceholders(a,\"soy\",t,function(e){return e===l&&(r=!1),r?!1:(e===n&&(r=!0),!0)})}),e.hooks.add(\"after-tokenize\",function(a){e.languages[\"markup-templating\"].tokenizePlaceholders(a,\"soy\")})}(Prism);"
            ]
        },
        "prism-sql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sql= {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string' : {",
                "\t\tpattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2/,",
                "\t\tgreedy: true,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': /@[\\w.$]+|@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,",
                "\t'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i, // Should we highlight user defined functions too?",
                "\t'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,",
                "\t'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,",
                "\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,",
                "\t'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,",
                "\t'punctuation': /[;[\\]()`,.]/",
                "};"
            ]
        },
        "prism-sql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sql={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,lookbehind:!0},string:{pattern:/(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2/,greedy:!0,lookbehind:!0},variable:/@[\\w.$]+|@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\"function\":/\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,keyword:/\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\"boolean\":/\\b(?:TRUE|FALSE|NULL)\\b/i,number:/\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,operator:/[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,punctuation:/[;[\\]()`,.]/};"
            ]
        },
        "prism-stylus.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar inside = {",
                "\t\t'url': /url\\(([\"']?).*?\\1\\)/i,",
                "\t\t'string': {",
                "\t\t\tpattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'interpolation': null, // See below",
                "\t\t'func': null, // See below",
                "\t\t'important': /\\B!(?:important|optional)\\b/i,",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'hexcode': /#[\\da-f]{3,6}/i,",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)?%?/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'operator': [",
                "\t\t\t// We want non-word chars around \"-\" because it is",
                "\t\t\t// accepted in property names.",
                "\t\t\t/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/",
                "\t\t],",
                "\t\t'punctuation': /[{}()\\[\\];:,]/",
                "\t};",
                "",
                "\tinside['interpolation'] = {",
                "\t\tpattern: /\\{[^\\r\\n}:]+\\}/,",
                "\t\talias: 'variable',",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^{|}$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: inside",
                "\t\t}",
                "\t};",
                "\tinside['func'] = {",
                "\t\tpattern: /[\\w-]+\\([^)]*\\).*/,",
                "\t\tinside: {",
                "\t\t\t'function': /^[^(]+/,",
                "\t\t\trest: inside",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.stylus = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'atrule-declaration': {",
                "\t\t\tpattern: /(^\\s*)@.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'atrule': /^@[\\w-]+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable-declaration': {",
                "\t\t\tpattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': /^\\S+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'statement': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^\\S+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// A property/value pair cannot end with a comma or a brace",
                "\t\t// It cannot have indented content unless it ended with a semicolon",
                "\t\t'property-declaration': {",
                "\t\t\tpattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'property': {",
                "\t\t\t\t\tpattern: /^[^\\s:]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'interpolation': inside.interpolation",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "",
                "",
                "\t\t// A selector can contain parentheses only as part of a pseudo-element",
                "\t\t// It can span multiple lines.",
                "\t\t// It must end with a comma or an accolade or have indented content.",
                "\t\t'selector': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': inside.interpolation,",
                "\t\t\t\t'punctuation': /[{},]/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'func': inside.func,",
                "\t\t'string': inside.string,",
                "\t\t'interpolation': inside.interpolation,",
                "\t\t'punctuation': /[{}()\\[\\];:.]/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-stylus.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var t={url:/url\\(([\"']?).*?\\1\\)/i,string:{pattern:/(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,greedy:!0},interpolation:null,func:null,important:/\\B!(?:important|optional)\\b/i,keyword:{pattern:/(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,lookbehind:!0},hexcode:/#[\\da-f]{3,6}/i,number:/\\b\\d+(?:\\.\\d+)?%?/,\"boolean\":/\\b(?:true|false)\\b/,operator:[/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],punctuation:/[{}()\\[\\];:,]/};t.interpolation={pattern:/\\{[^\\r\\n}:]+\\}/,alias:\"variable\",inside:{delimiter:{pattern:/^{|}$/,alias:\"punctuation\"},rest:t}},t.func={pattern:/[\\w-]+\\([^)]*\\).*/,inside:{\"function\":/^[^(]+/,rest:t}},n.languages.stylus={comment:{pattern:/(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},\"atrule-declaration\":{pattern:/(^\\s*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\\w-]+/,rest:t}},\"variable-declaration\":{pattern:/(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,lookbehind:!0,inside:{variable:/^\\S+/,rest:t}},statement:{pattern:/(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,lookbehind:!0,inside:{keyword:/^\\S+/,rest:t}},\"property-declaration\":{pattern:/((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,lookbehind:!0,inside:{property:{pattern:/^[^\\s:]+/,inside:{interpolation:t.interpolation}},rest:t}},selector:{pattern:/(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,lookbehind:!0,inside:{interpolation:t.interpolation,punctuation:/[{},]/}},func:t.func,string:t.string,interpolation:t.interpolation,punctuation:/[{}()\\[\\];:.]/}}(Prism);"
            ]
        },
        "prism-swift.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// issues: nested multiline comments",
                "Prism.languages.swift = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tdelimiter: {",
                "\t\t\t\t\t\tpattern: /^\\\\\\(|\\)$/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,",
                "\t'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,",
                "\t'constant': /\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,",
                "\t'atrule': /@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,",
                "\t'builtin': /\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/",
                "});",
                "Prism.languages.swift['string'].inside['interpolation'].inside.rest = Prism.languages.swift;"
            ]
        },
        "prism-swift.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.swift=Prism.languages.extend(\"clike\",{string:{pattern:/(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,inside:{delimiter:{pattern:/^\\\\\\(|\\)$/,alias:\"variable\"}}}}},keyword:/\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,number:/\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,constant:/\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,atrule:/@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,builtin:/\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/}),Prism.languages.swift.string.inside.interpolation.inside.rest=Prism.languages.swift;"
            ]
        },
        "prism-tap.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tap = {",
                "\tfail: /not ok[^#{\\n\\r]*/,",
                "\tpass: /ok[^#{\\n\\r]*/,",
                "\tpragma: /pragma [+-][a-z]+/,",
                "\tbailout: /bail out!.*/i,",
                "\tversion: /TAP version \\d+/i,",
                "\tplan: /\\d+\\.\\.\\d+(?: +#.*)?/,",
                "\tsubtest: {",
                "\t\tpattern: /# Subtest(?:: .*)?/,",
                "\t\tgreedy: true",
                "\t},",
                "\tpunctuation: /[{}]/,",
                "\tdirective: /#.*/,",
                "\tyamlish: {",
                "\t\tpattern: /(^[^\\S\\r\\n]*)---(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?[^\\S\\r\\n]*\\.\\.\\.$/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: Prism.languages.yaml,",
                "\t\talias: 'language-yaml'",
                "\t}",
                "};"
            ]
        },
        "prism-tap.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tap={fail:/not ok[^#{\\n\\r]*/,pass:/ok[^#{\\n\\r]*/,pragma:/pragma [+-][a-z]+/,bailout:/bail out!.*/i,version:/TAP version \\d+/i,plan:/\\d+\\.\\.\\d+(?: +#.*)?/,subtest:{pattern:/# Subtest(?:: .*)?/,greedy:!0},punctuation:/[{}]/,directive:/#.*/,yamlish:{pattern:/(^[^\\S\\r\\n]*)---(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?[^\\S\\r\\n]*\\.\\.\\.$/m,lookbehind:!0,inside:Prism.languages.yaml,alias:\"language-yaml\"}};"
            ]
        },
        "prism-tcl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tcl = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': [",
                "\t\t{",
                "\t\t\tpattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\$){[^}]+}/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'function': {",
                "\t\tpattern: /(^\\s*proc[ \\t]+)[^\\s]+/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'builtin': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/\\b(?:elseif|else)\\b/",
                "\t],",
                "\t'scope': {",
                "\t\tpattern: /(^\\s*)(?:global|upvar|variable)\\b/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'constant'",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,",
                "\t'punctuation': /[{}()\\[\\]]/",
                "};"
            ]
        },
        "prism-tcl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tcl={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,greedy:!0},variable:[{pattern:/(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,lookbehind:!0},{pattern:/(\\$){[^}]+}/,lookbehind:!0},{pattern:/(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,lookbehind:!0}],\"function\":{pattern:/(^\\s*proc[ \\t]+)[^\\s]+/m,lookbehind:!0},builtin:[{pattern:/(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,lookbehind:!0},/\\b(?:elseif|else)\\b/],scope:{pattern:/(^\\s*)(?:global|upvar|variable)\\b/m,lookbehind:!0,alias:\"constant\"},keyword:{pattern:/(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,lookbehind:!0},operator:/!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,punctuation:/[{}()\\[\\]]/};"
            ]
        },
        "prism-textile.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\t// We don't allow for pipes inside parentheses",
                "\t// to not break table pattern |(. foo |). bar |",
                "\tvar modifierRegex = '(?:\\\\([^|)]+\\\\)|\\\\[[^\\\\]]+\\\\]|\\\\{[^}]+\\\\})+';",
                "\tvar modifierTokens = {",
                "\t\t'css': {",
                "\t\t\tpattern: /\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.css",
                "\t\t\t}",
                "\t\t},",
                "\t\t'class-id': {",
                "\t\t\tpattern: /(\\()[^)]+(?=\\))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-value'",
                "\t\t},",
                "\t\t'lang': {",
                "\t\t\tpattern: /(\\[)[^\\]]+(?=\\])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-value'",
                "\t\t},",
                "\t\t// Anything else is punctuation (the first pattern is for row/col spans inside tables)",
                "\t\t'punctuation': /[\\\\\\/]\\d+|\\S/",
                "\t};",
                "",
                "",
                "\tPrism.languages.textile = Prism.languages.extend('markup', {",
                "\t\t'phrase': {",
                "\t\t\tpattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "",
                "\t\t\t\t// h1. Header 1",
                "\t\t\t\t'block-tag': {",
                "\t\t\t\t\tpattern: RegExp('^[a-z]\\\\w*(?:' + modifierRegex + '|[<>=()])*\\\\.'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^[a-z]\\\\w*)(?:' + modifierRegex + '|[<>=()])+(?=\\\\.)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'tag': /^[a-z]\\w*/,",
                "\t\t\t\t\t\t'punctuation': /\\.$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// # List item",
                "\t\t\t\t// * List item",
                "\t\t\t\t'list': {",
                "\t\t\t\t\tpattern: RegExp('^[*#]+(?:' + modifierRegex + ')?\\\\s+.+', 'm'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^[*#]+)' + modifierRegex),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /^[*#]+/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// | cell | cell | cell |",
                "\t\t\t\t'table': {",
                "\t\t\t\t\t// Modifiers can be applied to the row: {color:red}.|1|2|3|",
                "\t\t\t\t\t// or the cell: |{color:red}.1|2|3|",
                "\t\t\t\t\tpattern: RegExp('^(?:(?:' + modifierRegex + '|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|', 'm'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\t// Modifiers for rows after the first one are",
                "\t\t\t\t\t\t\t// preceded by a pipe and a line feed",
                "\t\t\t\t\t\t\tpattern: RegExp('(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /\\||^\\./",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t'inline': {",
                "\t\t\t\t\tpattern: RegExp('(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:' + modifierRegex + ')?.+?\\\\1'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t// Note: superscripts and subscripts are not handled specifically",
                "",
                "\t\t\t\t\t\t// *bold*, **bold**",
                "\t\t\t\t\t\t'bold': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^(\\\\*\\\\*?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// _italic_, __italic__",
                "\t\t\t\t\t\t'italic': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^(__?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// ??cite??",
                "\t\t\t\t\t\t'cite': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\\\\?\\\\?(?:' + modifierRegex + ')?).+?(?=\\\\?\\\\?)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'string'",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// @code@",
                "\t\t\t\t\t\t'code': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^@(?:' + modifierRegex + ')?).+?(?=@)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// +inserted+",
                "\t\t\t\t\t\t'inserted': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\\\\+(?:' + modifierRegex + ')?).+?(?=\\\\+)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// -deleted-",
                "\t\t\t\t\t\t'deleted': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^-(?:' + modifierRegex + ')?).+?(?=-)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// %span%",
                "\t\t\t\t\t\t'span': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^%(?:' + modifierRegex + ')?).+?(?=%)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])' + modifierRegex),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[*_%?@+\\-^~]+/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// [alias]http://example.com",
                "\t\t\t\t'link-ref': {",
                "\t\t\t\t\tpattern: /^\\[[^\\]]+\\]\\S+$/m,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'string': {",
                "\t\t\t\t\t\t\tpattern: /(\\[)[^\\]]+(?=\\])/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(\\])\\S+$/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[\\[\\]]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// \"text\":http://example.com",
                "\t\t\t\t// \"text\":link-ref",
                "\t\t\t\t'link': {",
                "\t\t\t\t\tpattern: RegExp('\"(?:' + modifierRegex + ')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'text': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\"(?:' + modifierRegex + ')?)[^\"]+(?=\")'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\")' + modifierRegex),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(:).+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[\":]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// !image.jpg!",
                "\t\t\t\t// !image.jpg(Title)!:http://example.com",
                "\t\t\t\t'image': {",
                "\t\t\t\t\tpattern: RegExp('!(?:' + modifierRegex + '|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'source': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^!(?:' + modifierRegex + '|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'url'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^!)(?:' + modifierRegex + '|[<>=()])+'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(:).+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[!:]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// Footnote[1]",
                "\t\t\t\t'footnote': {",
                "\t\t\t\t\tpattern: /\\b\\[\\d+\\]/,",
                "\t\t\t\t\talias: 'comment',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\[|\\]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// CSS(Cascading Style Sheet)",
                "\t\t\t\t'acronym': {",
                "\t\t\t\t\tpattern: /\\b[A-Z\\d]+\\([^)]+\\)/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'comment': {",
                "\t\t\t\t\t\t\tpattern: /(\\()[^)]+(?=\\))/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[()]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// Prism(C)",
                "\t\t\t\t'mark': {",
                "\t\t\t\t\tpattern: /\\b\\((?:TM|R|C)\\)/,",
                "\t\t\t\t\talias: 'comment',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation':/[()]/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tvar nestedPatterns = {",
                "\t\t'inline': Prism.languages.textile['phrase'].inside['inline'],",
                "\t\t'link': Prism.languages.textile['phrase'].inside['link'],",
                "\t\t'image': Prism.languages.textile['phrase'].inside['image'],",
                "\t\t'footnote': Prism.languages.textile['phrase'].inside['footnote'],",
                "\t\t'acronym': Prism.languages.textile['phrase'].inside['acronym'],",
                "\t\t'mark': Prism.languages.textile['phrase'].inside['mark']",
                "\t};",
                "",
                "\t// Only allow alpha-numeric HTML tags, not XML tags",
                "\tPrism.languages.textile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "",
                "\t// Allow some nesting",
                "\tPrism.languages.textile['phrase'].inside['inline'].inside['bold'].inside = nestedPatterns;",
                "\tPrism.languages.textile['phrase'].inside['inline'].inside['italic'].inside = nestedPatterns;",
                "\tPrism.languages.textile['phrase'].inside['inline'].inside['inserted'].inside = nestedPatterns;",
                "\tPrism.languages.textile['phrase'].inside['inline'].inside['deleted'].inside = nestedPatterns;",
                "\tPrism.languages.textile['phrase'].inside['inline'].inside['span'].inside = nestedPatterns;",
                "",
                "\t// Allow some styles inside table cells",
                "\tPrism.languages.textile['phrase'].inside['table'].inside['inline'] = nestedPatterns['inline'];",
                "\tPrism.languages.textile['phrase'].inside['table'].inside['link'] = nestedPatterns['link'];",
                "\tPrism.languages.textile['phrase'].inside['table'].inside['image'] = nestedPatterns['image'];",
                "\tPrism.languages.textile['phrase'].inside['table'].inside['footnote'] = nestedPatterns['footnote'];",
                "\tPrism.languages.textile['phrase'].inside['table'].inside['acronym'] = nestedPatterns['acronym'];",
                "\tPrism.languages.textile['phrase'].inside['table'].inside['mark'] = nestedPatterns['mark'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-textile.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var i=\"(?:\\\\([^|)]+\\\\)|\\\\[[^\\\\]]+\\\\]|\\\\{[^}]+\\\\})+\",n={css:{pattern:/\\{[^}]+\\}/,inside:{rest:e.languages.css}},\"class-id\":{pattern:/(\\()[^)]+(?=\\))/,lookbehind:!0,alias:\"attr-value\"},lang:{pattern:/(\\[)[^\\]]+(?=\\])/,lookbehind:!0,alias:\"attr-value\"},punctuation:/[\\\\\\/]\\d+|\\S/};e.languages.textile=e.languages.extend(\"markup\",{phrase:{pattern:/(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,lookbehind:!0,inside:{\"block-tag\":{pattern:RegExp(\"^[a-z]\\\\w*(?:\"+i+\"|[<>=()])*\\\\.\"),inside:{modifier:{pattern:RegExp(\"(^[a-z]\\\\w*)(?:\"+i+\"|[<>=()])+(?=\\\\.)\"),lookbehind:!0,inside:n},tag:/^[a-z]\\w*/,punctuation:/\\.$/}},list:{pattern:RegExp(\"^[*#]+(?:\"+i+\")?\\\\s+.+\",\"m\"),inside:{modifier:{pattern:RegExp(\"(^[*#]+)\"+i),lookbehind:!0,inside:n},punctuation:/^[*#]+/}},table:{pattern:RegExp(\"^(?:(?:\"+i+\"|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:\"+i+\"|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|\",\"m\"),inside:{modifier:{pattern:RegExp(\"(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:\"+i+\"|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)\"),lookbehind:!0,inside:n},punctuation:/\\||^\\./}},inline:{pattern:RegExp(\"(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:\"+i+\")?.+?\\\\1\"),inside:{bold:{pattern:RegExp(\"(^(\\\\*\\\\*?)(?:\"+i+\")?).+?(?=\\\\2)\"),lookbehind:!0},italic:{pattern:RegExp(\"(^(__?)(?:\"+i+\")?).+?(?=\\\\2)\"),lookbehind:!0},cite:{pattern:RegExp(\"(^\\\\?\\\\?(?:\"+i+\")?).+?(?=\\\\?\\\\?)\"),lookbehind:!0,alias:\"string\"},code:{pattern:RegExp(\"(^@(?:\"+i+\")?).+?(?=@)\"),lookbehind:!0,alias:\"keyword\"},inserted:{pattern:RegExp(\"(^\\\\+(?:\"+i+\")?).+?(?=\\\\+)\"),lookbehind:!0},deleted:{pattern:RegExp(\"(^-(?:\"+i+\")?).+?(?=-)\"),lookbehind:!0},span:{pattern:RegExp(\"(^%(?:\"+i+\")?).+?(?=%)\"),lookbehind:!0},modifier:{pattern:RegExp(\"(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])\"+i),lookbehind:!0,inside:n},punctuation:/[*_%?@+\\-^~]+/}},\"link-ref\":{pattern:/^\\[[^\\]]+\\]\\S+$/m,inside:{string:{pattern:/(\\[)[^\\]]+(?=\\])/,lookbehind:!0},url:{pattern:/(\\])\\S+$/,lookbehind:!0},punctuation:/[\\[\\]]/}},link:{pattern:RegExp('\"(?:'+i+')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),inside:{text:{pattern:RegExp('(^\"(?:'+i+')?)[^\"]+(?=\")'),lookbehind:!0},modifier:{pattern:RegExp('(^\")'+i),lookbehind:!0,inside:n},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[\":]/}},image:{pattern:RegExp(\"!(?:\"+i+\"|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?\"),inside:{source:{pattern:RegExp(\"(^!(?:\"+i+\"|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)\"),lookbehind:!0,alias:\"url\"},modifier:{pattern:RegExp(\"(^!)(?:\"+i+\"|[<>=()])+\"),lookbehind:!0,inside:n},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[!:]/}},footnote:{pattern:/\\b\\[\\d+\\]/,alias:\"comment\",inside:{punctuation:/\\[|\\]/}},acronym:{pattern:/\\b[A-Z\\d]+\\([^)]+\\)/,inside:{comment:{pattern:/(\\()[^)]+(?=\\))/,lookbehind:!0},punctuation:/[()]/}},mark:{pattern:/\\b\\((?:TM|R|C)\\)/,alias:\"comment\",inside:{punctuation:/[()]/}}}}});var t={inline:e.languages.textile.phrase.inside.inline,link:e.languages.textile.phrase.inside.link,image:e.languages.textile.phrase.inside.image,footnote:e.languages.textile.phrase.inside.footnote,acronym:e.languages.textile.phrase.inside.acronym,mark:e.languages.textile.phrase.inside.mark};e.languages.textile.tag.pattern=/<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,e.languages.textile.phrase.inside.inline.inside.bold.inside=t,e.languages.textile.phrase.inside.inline.inside.italic.inside=t,e.languages.textile.phrase.inside.inline.inside.inserted.inside=t,e.languages.textile.phrase.inside.inline.inside.deleted.inside=t,e.languages.textile.phrase.inside.inline.inside.span.inside=t,e.languages.textile.phrase.inside.table.inside.inline=t.inline,e.languages.textile.phrase.inside.table.inside.link=t.link,e.languages.textile.phrase.inside.table.inside.image=t.image,e.languages.textile.phrase.inside.table.inside.footnote=t.footnote,e.languages.textile.phrase.inside.table.inside.acronym=t.acronym,e.languages.textile.phrase.inside.table.inside.mark=t.mark}(Prism);"
            ]
        },
        "prism-tsx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var typescript = Prism.util.clone(Prism.languages.typescript);",
                "Prism.languages.tsx = Prism.languages.extend('jsx', typescript);"
            ]
        },
        "prism-tsx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var typescript=Prism.util.clone(Prism.languages.typescript);Prism.languages.tsx=Prism.languages.extend(\"jsx\",typescript);"
            ]
        },
        "prism-tt2.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "\tPrism.languages.tt2 = Prism.languages.extend('clike', {",
                "\t\tcomment: {",
                "\t\t\tpattern: /#.*|\\[%#[\\s\\S]*?%\\]/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tkeyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,",
                "\t\tpunctuation: /[[\\]{},()]/",
                "\t});",
                "",
                "\tdelete Prism.languages.tt2['operator'];",
                "\tdelete Prism.languages.tt2['variable'];",
                "\tPrism.languages.insertBefore('tt2', 'number', {",
                "\t\toperator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,",
                "\t\tvariable: {",
                "\t\t\tpattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i",
                "\t\t}",
                "\t});",
                "",
                "\tdelete Prism.languages.tt2['delimiter'];",
                "\tPrism.languages.insertBefore('tt2', 'keyword', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^(?:\\[%|%%)-?|-?%]$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('tt2', 'string', {",
                "\t\t'single-quoted-string': {",
                "\t\t\tpattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'double-quoted-string': {",
                "\t\t\tpattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\tvariable: {",
                "\t\t\t\t\tpattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\t// The different types of TT2 strings \"replace\" the C-like standard string",
                "\tdelete Prism.languages.tt2.string;",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-tt2.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.tt2=e.languages.extend(\"clike\",{comment:{pattern:/#.*|\\[%#[\\s\\S]*?%\\]/,lookbehind:!0},keyword:/\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,punctuation:/[[\\]{},()]/}),delete e.languages.tt2.operator,delete e.languages.tt2.variable,e.languages.insertBefore(\"tt2\",\"number\",{operator:/=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,variable:{pattern:/[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i}}),delete e.languages.tt2.delimiter,e.languages.insertBefore(\"tt2\",\"keyword\",{delimiter:{pattern:/^(?:\\[%|%%)-?|-?%]$/,alias:\"punctuation\"}}),e.languages.insertBefore(\"tt2\",\"string\",{\"single-quoted-string\":{pattern:/'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,greedy:!0,alias:\"string\",inside:{variable:{pattern:/\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i}}}}),delete e.languages.tt2.string,e.hooks.add(\"before-tokenize\",function(t){var a=/\\[%[\\s\\S]+?%\\]/g;e.languages[\"markup-templating\"].buildPlaceholders(t,\"tt2\",a)}),e.hooks.add(\"after-tokenize\",function(t){e.languages[\"markup-templating\"].tokenizePlaceholders(t,\"tt2\")})}(Prism);"
            ]
        },
        "prism-twig.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.twig = {",
                "\t'comment': /\\{#[\\s\\S]*?#\\}/,",
                "\t'tag': {",
                "\t\tpattern: /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,",
                "\t\tinside: {",
                "\t\t\t'ld': {",
                "\t\t\t\tpattern: /^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^(?:\\{\\{|\\{%)-?/,",
                "\t\t\t\t\t'keyword': /\\w+/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'rd': {",
                "\t\t\t\tpattern: /-?(?:%\\}|\\}\\})$/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /.*/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^['\"]|['\"]$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'keyword': /\\b(?:even|if|odd)\\b/,",
                "\t\t\t'boolean': /\\b(?:true|false|null)\\b/,",
                "\t\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,",
                "\t\t\t'operator': [",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t/[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/",
                "\t\t\t],",
                "\t\t\t'property': /\\b[a-zA-Z_]\\w*\\b/,",
                "\t\t\t'punctuation': /[()\\[\\]{}:.,]/",
                "\t\t}",
                "\t},",
                "",
                "\t// The rest can be parsed as HTML",
                "\t'other': {",
                "\t\t// We want non-blank matches",
                "\t\tpattern: /\\S(?:[\\s\\S]*\\S)?/,",
                "\t\tinside: Prism.languages.markup",
                "\t}",
                "};"
            ]
        },
        "prism-twig.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.twig={comment:/\\{#[\\s\\S]*?#\\}/,tag:{pattern:/\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,inside:{ld:{pattern:/^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,inside:{punctuation:/^(?:\\{\\{|\\{%)-?/,keyword:/\\w+/}},rd:{pattern:/-?(?:%\\}|\\}\\})$/,inside:{punctuation:/.*/}},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,inside:{punctuation:/^['\"]|['\"]$/}},keyword:/\\b(?:even|if|odd)\\b/,\"boolean\":/\\b(?:true|false|null)\\b/,number:/\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,operator:[{pattern:/(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,lookbehind:!0},/[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],property:/\\b[a-zA-Z_]\\w*\\b/,punctuation:/[()\\[\\]{}:.,]/}},other:{pattern:/\\S(?:[\\s\\S]*\\S)?/,inside:Prism.languages.markup}};"
            ]
        },
        "prism-typescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.typescript = Prism.languages.extend('javascript', {",
                "\t// From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words",
                "\t'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield|module|declare|constructor|namespace|abstract|require|type)\\b/,",
                "\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console)\\b/,",
                "});",
                "",
                "Prism.languages.ts = Prism.languages.typescript;"
            ]
        },
        "prism-typescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.typescript=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield|module|declare|constructor|namespace|abstract|require|type)\\b/,builtin:/\\b(?:string|Function|any|number|boolean|Array|symbol|console)\\b/}),Prism.languages.ts=Prism.languages.typescript;"
            ]
        },
        "prism-vbnet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vbnet = Prism.languages.extend(\"basic\", {",
                "\t'keyword': /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(?:!|REM\\b).+/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': /^REM/i",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])'.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t]",
                "});"
            ]
        },
        "prism-vbnet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vbnet=Prism.languages.extend(\"basic\",{keyword:/(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,comment:[{pattern:/(?:!|REM\\b).+/i,inside:{keyword:/^REM/i}},{pattern:/(^|[^\\\\:])'.*/,lookbehind:!0}]});"
            ]
        },
        "prism-velocity.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.velocity = Prism.languages.extend('markup', {});",
                "",
                "\tvar velocity = {",
                "\t\t'variable': {",
                "\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {} // See below",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': /\\b\\d+\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'operator': /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,",
                "\t\t'punctuation': /[(){}[\\]:,.]/",
                "\t};",
                "",
                "\tvelocity.variable.inside = {",
                "\t\t'string': velocity['string'],",
                "\t\t'function': {",
                "\t\t\tpattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': velocity['number'],",
                "\t\t'boolean': velocity['boolean'],",
                "\t\t'punctuation': velocity['punctuation']",
                "\t};",
                "",
                "\tPrism.languages.insertBefore('velocity', 'comment', {",
                "\t\t'unparsed': {",
                "\t\t\tpattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^#\\[\\[|]]#$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'velocity-comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])##.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'directive': {",
                "\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: {",
                "\t\t\t\t\tpattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /[{}]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\trest: velocity",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': velocity['variable']",
                "\t});",
                "",
                "\tPrism.languages.velocity['tag'].inside['attr-value'].inside.rest = Prism.languages.velocity;",
                "",
                "}(Prism));"
            ]
        },
        "prism-velocity.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.velocity=e.languages.extend(\"markup\",{});var n={variable:{pattern:/(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,lookbehind:!0,inside:{}},string:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},number:/\\b\\d+\\b/,\"boolean\":/\\b(?:true|false)\\b/,operator:/[=!<>]=?|[+*\\/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,punctuation:/[(){}[\\]:,.]/};n.variable.inside={string:n.string,\"function\":{pattern:/([^\\w-])[a-z][\\w-]*(?=\\()/,lookbehind:!0},number:n.number,\"boolean\":n[\"boolean\"],punctuation:n.punctuation},e.languages.insertBefore(\"velocity\",\"comment\",{unparsed:{pattern:/(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,lookbehind:!0,greedy:!0,inside:{punctuation:/^#\\[\\[|]]#$/}},\"velocity-comment\":[{pattern:/(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,lookbehind:!0,greedy:!0,alias:\"comment\"},{pattern:/(^|[^\\\\])##.*/,lookbehind:!0,greedy:!0,alias:\"comment\"}],directive:{pattern:/(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,lookbehind:!0,inside:{keyword:{pattern:/^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,inside:{punctuation:/[{}]/}},rest:n}},variable:n.variable}),e.languages.velocity.tag.inside[\"attr-value\"].inside.rest=e.languages.velocity}(Prism);"
            ]
        },
        "prism-verilog.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.verilog = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// support for any kernel function (ex: $display())",
                "\t'property': /\\B\\$\\w+\\b/,",
                "\t// support for user defined constants (ex: `define)",
                "\t'constant': /\\B`\\w+\\b/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t// support for verilog and system verilog keywords",
                "\t'keyword': /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,",
                "\t// bold highlighting for all verilog and system verilog logic blocks",
                "\t'important': /\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,",
                "\t// support for time ticks, vectors, and real numbers",
                "\t'number': /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b\\d*[._]?\\d+(?:e[-+]?\\d+)?/i,",
                "\t'operator': /[-+{}^~%*\\/?=!<>&|]+/,",
                "\t'punctuation': /[[\\];(),.:]/",
                "};"
            ]
        },
        "prism-verilog.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.verilog={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,greedy:!0},property:/\\B\\$\\w+\\b/,constant:/\\B`\\w+\\b/,\"function\":/\\w+(?=\\()/,keyword:/\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,important:/\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,number:/\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b\\d*[._]?\\d+(?:e[-+]?\\d+)?/i,operator:/[-+{}^~%*\\/?=!<>&|]+/,punctuation:/[[\\];(),.:]/};"
            ]
        },
        "prism-vhdl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vhdl = {",
                "\t'comment': /--.+/,",
                "\t// support for all logic vectors",
                "\t'vhdl-vectors': {",
                "\t\t'pattern': /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,",
                "\t\t'alias': 'number'",
                "\t},",
                "\t// support for operator overloading included",
                "\t'quoted-function': {",
                "\t\tpattern: /\"\\S+?\"(?=\\()/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'string': /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,",
                "\t'constant': /\\b(?:use|library)\\b/i,",
                "\t// support for predefined attributes included",
                "\t'keyword': /\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'function': /\\w+(?=\\()/,",
                "\t// decimal, based, physical, and exponential numbers supported",
                "\t'number': /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,",
                "\t'operator': /[<>]=?|:=|[-+*/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-vhdl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vhdl={comment:/--.+/,\"vhdl-vectors\":{pattern:/\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,alias:\"number\"},\"quoted-function\":{pattern:/\"\\S+?\"(?=\\()/,alias:\"function\"},string:/\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,constant:/\\b(?:use|library)\\b/i,keyword:/\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,\"boolean\":/\\b(?:true|false)\\b/i,\"function\":/\\w+(?=\\()/,number:/'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,operator:/[<>]=?|:=|[-+*\\/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-vim.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vim = {",
                "\t'string': /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,",
                "\t'comment': /\".*/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t'keyword': /\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,",
                "\t'builtin': /\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,",
                "\t'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,",
                "\t'operator': /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,",
                "\t'punctuation': /[{}[\\](),;:]/",
                "};"
            ]
        },
        "prism-vim.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vim={string:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,comment:/\".*/,\"function\":/\\w+(?=\\()/,keyword:/\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,builtin:/\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,operator:/\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,punctuation:/[{}[\\](),;:]/};"
            ]
        },
        "prism-visual-basic.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['visual-basic'] = {",
                "\t'comment': {",
                "\t\tpattern: /(?:['‘’]|REM\\b).*/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^REM/i",
                "\t\t}",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,",
                "\t\talias: 'comment',",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'date': {",
                "\t\tpattern: /#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))[^\\S\\r\\n]*#/i,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'number': /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,",
                "\t'boolean': /\\b(?:True|False|Nothing)\\b/i,",
                "\t'keyword': /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,",
                "\t'operator': [",
                "\t\t/[+\\-*/\\\\^<=>&#@$%!]/,",
                "\t\t{",
                "\t\t\tpattern: /([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /[{}().,:?]/",
                "};",
                "",
                "Prism.languages.vb = Prism.languages['visual-basic'];"
            ]
        },
        "prism-visual-basic.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"visual-basic\"]={comment:{pattern:/(?:['‘’]|REM\\b).*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,alias:\"comment\",greedy:!0},string:{pattern:/[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,greedy:!0},date:{pattern:/#[^\\S\\r\\n]*(?:\\d+([\\/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))[^\\S\\r\\n]*#/i,alias:\"builtin\"},number:/(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,\"boolean\":/\\b(?:True|False|Nothing)\\b/i,keyword:/\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,operator:[/[+\\-*\\/\\\\^<=>&#@$%!]/,{pattern:/([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages[\"visual-basic\"];"
            ]
        },
        "prism-wasm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wasm = {",
                "\t'comment': [",
                "\t\t/\\(;[\\s\\S]*?;\\)/,",
                "\t\t{",
                "\t\t\tpattern: /;;.*/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:align|offset)=/,",
                "\t\t\tinside: {",
                "\t\t\t\t'operator': /=/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t/\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/",
                "\t],",
                "\t'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,",
                "\t'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,",
                "\t'punctuation': /[()]/",
                "};"
            ]
        },
        "prism-wasm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wasm={comment:[/\\(;[\\s\\S]*?;\\)/,{pattern:/;;.*/,greedy:!0}],string:{pattern:/\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,greedy:!0},keyword:[{pattern:/\\b(?:align|offset)=/,inside:{operator:/=/}},{pattern:/\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,inside:{punctuation:/\\./}},/\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],variable:/\\$[\\w!#$%&'*+\\-.\\/:<=>?@\\\\^_`|~]+/i,number:/[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,punctuation:/[()]/};"
            ]
        },
        "prism-wiki.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wiki = Prism.languages.extend('markup', {",
                "\t'block-comment': {",
                "\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'heading': {",
                "\t\tpattern: /^(=+).+?\\1/m,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^=+|=+$/,",
                "\t\t\t'important': /.+/",
                "\t\t}",
                "\t},",
                "\t'emphasis': {",
                "\t\t// TODO Multi-line",
                "\t\tpattern: /('{2,5}).+?\\1/,",
                "\t\tinside: {",
                "\t\t\t'bold italic': {",
                "\t\t\t\tpattern: /(''''').+?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'bold': {",
                "\t\t\t\tpattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'italic': {",
                "\t\t\t\tpattern: /('')[^'](?:.*?[^'])?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^''+|''+$/",
                "\t\t}",
                "\t},",
                "\t'hr': {",
                "\t\tpattern: /^-{4,}/m,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'url': [",
                "\t\t/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i,",
                "\t\t/\\[\\[.+?\\]\\]|\\[.+?\\]/",
                "\t],",
                "\t'variable': [",
                "\t\t/__[A-Z]+__/,",
                "\t\t// FIXME Nested structures should be handled",
                "\t\t// {{formatnum:{{#expr:{{{3}}}}}}}",
                "\t\t/\\{{3}.+?\\}{3}/,",
                "\t\t/\\{\\{.+?\\}\\}/",
                "\t],",
                "\t'symbol': [",
                "\t\t/^#redirect/im,",
                "\t\t/~{3,5}/",
                "\t],",
                "\t// Handle table attrs:",
                "\t// {|",
                "\t// ! style=\"text-align:left;\"| Item",
                "\t// |}",
                "\t'table-tag': {",
                "\t\tpattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'table-bar': {",
                "\t\t\t\tpattern: /\\|$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.markup['tag'].inside",
                "\t\t}",
                "\t},",
                "\t'punctuation': /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m",
                "});",
                "",
                "Prism.languages.insertBefore('wiki', 'tag', {",
                "\t// Prevent highlighting inside <nowiki>, <source> and <pre> tags",
                "\t'nowiki': {",
                "\t\tpattern: /<(nowiki|pre|source)\\b[\\s\\S]*?>[\\s\\S]*?<\\/\\1>/i,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /<(?:nowiki|pre|source)\\b[\\s\\S]*?>|<\\/(?:nowiki|pre|source)>/i,",
                "\t\t\t\tinside: Prism.languages.markup['tag'].inside",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-wiki.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wiki=Prism.languages.extend(\"markup\",{\"block-comment\":{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0,alias:\"comment\"},heading:{pattern:/^(=+).+?\\1/m,inside:{punctuation:/^=+|=+$/,important:/.+/}},emphasis:{pattern:/('{2,5}).+?\\1/,inside:{\"bold italic\":{pattern:/(''''').+?(?=\\1)/,lookbehind:!0},bold:{pattern:/(''')[^'](?:.*?[^'])?(?=\\1)/,lookbehind:!0},italic:{pattern:/('')[^'](?:.*?[^'])?(?=\\1)/,lookbehind:!0},punctuation:/^''+|''+$/}},hr:{pattern:/^-{4,}/m,alias:\"punctuation\"},url:[/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i,/\\[\\[.+?\\]\\]|\\[.+?\\]/],variable:[/__[A-Z]+__/,/\\{{3}.+?\\}{3}/,/\\{\\{.+?\\}\\}/],symbol:[/^#redirect/im,/~{3,5}/],\"table-tag\":{pattern:/((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,lookbehind:!0,inside:{\"table-bar\":{pattern:/\\|$/,alias:\"punctuation\"},rest:Prism.languages.markup.tag.inside}},punctuation:/^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m}),Prism.languages.insertBefore(\"wiki\",\"tag\",{nowiki:{pattern:/<(nowiki|pre|source)\\b[\\s\\S]*?>[\\s\\S]*?<\\/\\1>/i,inside:{tag:{pattern:/<(?:nowiki|pre|source)\\b[\\s\\S]*?>|<\\/(?:nowiki|pre|source)>/i,inside:Prism.languages.markup.tag.inside}}}});"
            ]
        },
        "prism-xeora.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.xeora = Prism.languages.extend('markup', {",
                "\t\t'constant': {",
                "\t\t\tpattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[$.]/",
                "\t\t\t\t},",
                "\t\t\t\t'operator': {",
                "\t\t\t\t\tpattern: /#+|[-+*~=^@]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'function-inline': {",
                "\t\t\tpattern: /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': {",
                "\t\t\t\t\tpattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\t\tpattern: /[,.|]/",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'operator': {",
                "\t\t\t\t\t\t\tpattern: /#+|[-+*~=^@]/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$\\w:|[$:?.,|]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'function-block': {",
                "\t\t\tpattern: /\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?}:XF\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[$:{}?.,|]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-inline': {",
                "\t\t\tpattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'tag': {",
                "\t\t\t\t\t\t\tpattern: /#\\d/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-open': {",
                "\t\t\tpattern: /\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(![A-Z]+)?/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'tag': {",
                "\t\t\t\t\t\t\tpattern: /#\\d/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'attribute': {",
                "\t\t\t\t\tpattern: /![A-Z]+$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\t\tpattern: /!/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-separator': {",
                "\t\t\tpattern: /}:[-\\w.]+:{/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[:{}]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-close': {",
                "\t\t\tpattern: /}:[-\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[:{}$]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('inside', 'punctuation', {",
                "\t\t'variable': Prism.languages.xeora['function-inline'].inside['variable']",
                "\t}, Prism.languages.xeora[\"function-block\"]);",
                "",
                "\tPrism.languages.xeoracube = Prism.languages.xeora;",
                "",
                "}(Prism));"
            ]
        },
        "prism-xeora.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.xeora=n.languages.extend(\"markup\",{constant:{pattern:/\\$(?:DomainContents|PageRenderDuration)\\$/,inside:{punctuation:{pattern:/\\$/}}},variable:{pattern:/\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,inside:{punctuation:{pattern:/[$.]/},operator:{pattern:/#+|[-+*~=^@]/}}},\"function-inline\":{pattern:/\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?\\$/,inside:{variable:{pattern:/(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,inside:{punctuation:{pattern:/[,.|]/},operator:{pattern:/#+|[-+*~=^@]/}}},punctuation:{pattern:/\\$\\w:|[$:?.,|]/}},alias:\"function\"},\"function-block\":{pattern:/\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?}:XF\\$/,inside:{punctuation:{pattern:/[$:{}?.,|]/}},alias:\"function\"},\"directive-inline\":{pattern:/\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,inside:{punctuation:{pattern:/\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,inside:{tag:{pattern:/#\\d/}}}},alias:\"function\"},\"directive-block-open\":{pattern:/\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(![A-Z]+)?/,inside:{punctuation:{pattern:/\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,inside:{tag:{pattern:/#\\d/}}},attribute:{pattern:/![A-Z]+$/,inside:{punctuation:{pattern:/!/}},alias:\"keyword\"}},alias:\"function\"},\"directive-block-separator\":{pattern:/}:[-\\w.]+:{/,inside:{punctuation:{pattern:/[:{}]/}},alias:\"function\"},\"directive-block-close\":{pattern:/}:[-\\w.]+\\$/,inside:{punctuation:{pattern:/[:{}$]/}},alias:\"function\"}}),n.languages.insertBefore(\"inside\",\"punctuation\",{variable:n.languages.xeora[\"function-inline\"].inside.variable},n.languages.xeora[\"function-block\"]),n.languages.xeoracube=n.languages.xeora}(Prism);"
            ]
        },
        "prism-xojo.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.xojo = {",
                "\t'comment': {",
                "\t\tpattern: /(?:'|\\/\\/|Rem\\b).+/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^Rem/i",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[^\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': [",
                "\t\t/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t\t/&[bchou][a-z\\d]+/i",
                "\t],",
                "\t'symbol': /#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,",
                "\t'keyword': /\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,",
                "\t'operator': /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,",
                "\t'punctuation': /[.,;:()]/",
                "};"
            ]
        },
        "prism-xojo.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.xojo={comment:{pattern:/(?:'|\\/\\/|Rem\\b).+/i,inside:{keyword:/^Rem/i}},string:{pattern:/\"(?:\"\"|[^\"])*\"/,greedy:!0},number:[/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,/&[bchou][a-z\\d]+/i],symbol:/#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,keyword:/\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,operator:/<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,punctuation:/[.,;:()]/};"
            ]
        },
        "prism-xquery.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.xquery = Prism.languages.extend('markup', {",
                "\t\t'xquery-comment': {",
                "\t\t\tpattern: /\\(:[\\s\\S]*?:\\)/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: \"comment\"",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'extension': {",
                "\t\t\tpattern: /\\(#.+?#\\)/,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'variable': /\\$[\\w-:]+/,",
                "\t\t'axis': {",
                "\t\t\tpattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'keyword-operator': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,",
                "\t\t'xquery-element': {",
                "\t\t\tpattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'tag'",
                "\t\t},",
                "\t\t'xquery-attribute': {",
                "\t\t\tpattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-name'",
                "\t\t},",
                "\t\t'builtin': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,",
                "\t\t'operator': [",
                "\t\t\t/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)-(?=\\s)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'punctuation': /[[\\](){},;:/]/",
                "\t});",
                "",
                "\tPrism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {",
                "\t\t// Allow for two levels of nesting",
                "\t\tpattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,",
                "\t\tinside: {",
                "\t\t\trest: Prism.languages.xquery",
                "\t\t},",
                "\t\t'alias': 'language-xquery'",
                "\t};",
                "",
                "\t// The following will handle plain text inside tags",
                "\tvar stringifyToken = function (token) {",
                "\t\tif (typeof token === 'string') {",
                "\t\t\treturn token;",
                "\t\t}",
                "\t\tif (typeof token.content === 'string') {",
                "\t\t\treturn token.content;",
                "\t\t}",
                "\t\treturn token.content.map(stringifyToken).join('');",
                "\t};",
                "",
                "\tvar walkTokens = function (tokens) {",
                "\t\tvar openedTags = [];",
                "\t\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\t\tvar token = tokens[i];",
                "\t\t\tvar notTagNorBrace = false;",
                "",
                "\t\t\tif (typeof token !== 'string') {",
                "\t\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {",
                "\t\t\t\t\t// We found a tag, now find its kind",
                "",
                "\t\t\t\t\tif (token.content[0].content[0].content === '</') {",
                "\t\t\t\t\t\t// Closing tag",
                "\t\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {",
                "\t\t\t\t\t\t\t// Pop matching opening tag",
                "\t\t\t\t\t\t\topenedTags.pop();",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {",
                "\t\t\t\t\t\t\t// Autoclosed tag, ignore",
                "\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\t// Opening tag",
                "\t\t\t\t\t\t\topenedTags.push({",
                "\t\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),",
                "\t\t\t\t\t\t\t\topenedBraces: 0",
                "\t\t\t\t\t\t\t});",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t} else if (",
                "\t\t\t\t\topenedTags.length > 0 && token.type === 'punctuation' && token.content === '{' &&",
                "\t\t\t\t\t// Ignore `{{`",
                "\t\t\t\t\t(!tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') &&",
                "\t\t\t\t\t(!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')",
                "\t\t\t\t) {",
                "\t\t\t\t\t// Here we might have entered an XQuery expression inside a tag",
                "\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;",
                "",
                "\t\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {",
                "",
                "\t\t\t\t\t// Here we might have left an XQuery expression inside a tag",
                "\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;",
                "",
                "\t\t\t\t} else if (token.type !== 'comment') {",
                "\t\t\t\t\tnotTagNorBrace = true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t\tif (notTagNorBrace || typeof token === 'string') {",
                "\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {",
                "\t\t\t\t\t// Here we are inside a tag, and not inside an XQuery expression.",
                "\t\t\t\t\t// That's plain text: drop any tokens matched.",
                "\t\t\t\t\tvar plainText = stringifyToken(token);",
                "",
                "\t\t\t\t\t// And merge text with adjacent text",
                "\t\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {",
                "\t\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);",
                "\t\t\t\t\t\ttokens.splice(i + 1, 1);",
                "\t\t\t\t\t}",
                "\t\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {",
                "\t\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;",
                "\t\t\t\t\t\ttokens.splice(i - 1, 1);",
                "\t\t\t\t\t\ti--;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (/^\\s+$/.test(plainText)) {",
                "\t\t\t\t\t\ttokens[i] = plainText;",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t\tif (token.content && typeof token.content !== 'string') {",
                "\t\t\t\twalkTokens(token.content);",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tif (env.language !== 'xquery') {",
                "\t\t\treturn;",
                "\t\t}",
                "\t\twalkTokens(env.tokens);",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-xquery.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.xquery=e.languages.extend(\"markup\",{\"xquery-comment\":{pattern:/\\(:[\\s\\S]*?:\\)/,greedy:!0,alias:\"comment\"},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,greedy:!0},extension:{pattern:/\\(#.+?#\\)/,alias:\"symbol\"},variable:/\\$[\\w-:]+/,axis:{pattern:/(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,lookbehind:!0,alias:\"operator\"},\"keyword-operator\":{pattern:/(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,lookbehind:!0,alias:\"operator\"},keyword:{pattern:/(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,lookbehind:!0},\"function\":/[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\"xquery-element\":{pattern:/(element\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"tag\"},\"xquery-attribute\":{pattern:/(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"attr-name\"},builtin:{pattern:/(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,lookbehind:!0},number:/\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,operator:[/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,{pattern:/(\\s)-(?=\\s)/,lookbehind:!0}],punctuation:/[[\\](){},;:\\/]/}),e.languages.xquery.tag.pattern=/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,e.languages.xquery.tag.inside[\"attr-value\"].pattern=/=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,e.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation=/^=\"|\"$/,e.languages.xquery.tag.inside[\"attr-value\"].inside.expression={pattern:/{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,inside:{rest:e.languages.xquery},alias:\"language-xquery\"};var t=function(e){return\"string\"==typeof e?e:\"string\"==typeof e.content?e.content:e.content.map(t).join(\"\")},n=function(a){for(var o=[],i=0;i<a.length;i++){var r=a[i],s=!1;if(\"string\"!=typeof r&&(\"tag\"===r.type&&r.content[0]&&\"tag\"===r.content[0].type?\"</\"===r.content[0].content[0].content?o.length>0&&o[o.length-1].tagName===t(r.content[0].content[1])&&o.pop():\"/>\"===r.content[r.content.length-1].content||o.push({tagName:t(r.content[0].content[1]),openedBraces:0}):!(o.length>0&&\"punctuation\"===r.type&&\"{\"===r.content)||a[i+1]&&\"punctuation\"===a[i+1].type&&\"{\"===a[i+1].content||a[i-1]&&\"plain-text\"===a[i-1].type&&\"{\"===a[i-1].content?o.length>0&&o[o.length-1].openedBraces>0&&\"punctuation\"===r.type&&\"}\"===r.content?o[o.length-1].openedBraces--:\"comment\"!==r.type&&(s=!0):o[o.length-1].openedBraces++),(s||\"string\"==typeof r)&&o.length>0&&0===o[o.length-1].openedBraces){var l=t(r);i<a.length-1&&(\"string\"==typeof a[i+1]||\"plain-text\"===a[i+1].type)&&(l+=t(a[i+1]),a.splice(i+1,1)),i>0&&(\"string\"==typeof a[i-1]||\"plain-text\"===a[i-1].type)&&(l=t(a[i-1])+l,a.splice(i-1,1),i--),a[i]=/^\\s+$/.test(l)?l:new e.Token(\"plain-text\",l,null,l)}r.content&&\"string\"!=typeof r.content&&n(r.content)}};e.hooks.add(\"after-tokenize\",function(e){\"xquery\"===e.language&&n(e.tokens)})}(Prism);"
            ]
        },
        "prism-yaml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.yaml = {",
                "\t'scalar': {",
                "\t\tpattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'comment': /#.*/,",
                "\t'key': {",
                "\t\tpattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'atrule'",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /(^[ \\t]*)%.+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'important'",
                "\t},",
                "\t'datetime': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'number'",
                "\t},",
                "\t'boolean': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'important'",
                "\t},",
                "\t'null': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'important'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}))/m,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'tag': /![^\\s]+/,",
                "\t'important': /[&*][\\w]+/,",
                "\t'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./",
                "};"
            ]
        },
        "prism-yaml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.yaml={scalar:{pattern:/([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,lookbehind:!0,alias:\"string\"},comment:/#.*/,key:{pattern:/(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,lookbehind:!0,alias:\"atrule\"},directive:{pattern:/(^[ \\t]*)%.+/m,lookbehind:!0,alias:\"important\"},datetime:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,lookbehind:!0,alias:\"number\"},\"boolean\":{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,lookbehind:!0,alias:\"important\"},\"null\":{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,lookbehind:!0,alias:\"important\"},string:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}))/m,lookbehind:!0,greedy:!0},number:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,lookbehind:!0},tag:/![^\\s]+/,important:/[&*][\\w]+/,punctuation:/---|[:[\\]{}\\-,|>?]|\\.\\.\\./};"
            ]
        }
    },
    "img": {
        "logo-ala.png": {},
        "logo-css-tricks.png": {},
        "logo-drupal.png": {},
        "logo-mdn.png": {},
        "logo-react.png": {},
        "logo-sitepoint.png": {},
        "logo-smashing.png": {},
        "logo-stripe.png": {},
        "spectrum.png": {}
    },
    "plugins": {
        "index.html": {},
        "autolinker": {
            "index.html": {},
            "prism-autolinker.css": {},
            "prism-autolinker.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "var url = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&]+(?:\\?[\\w\\-+%~/.:#=?&!$'()*,;]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;]*)?/,",
                    "    email = /\\b\\S+@[\\w.]+[a-z]{2}/,",
                    "    linkMd = /\\[([^\\]]+)]\\(([^)]+)\\)/,",
                    "    ",
                    "\t// Tokens that may contain URLs and emails",
                    "    candidates = ['comment', 'url', 'attr-value', 'string'];",
                    "",
                    "Prism.plugins.autolinker = {",
                    "\tprocessGrammar: function (grammar) {",
                    "\t\t// Abort if grammar has already been processed",
                    "\t\tif (!grammar || grammar['url-link']) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tPrism.languages.DFS(grammar, function (key, def, type) {",
                    "\t\t\tif (candidates.indexOf(type) > -1 && Prism.util.type(def) !== 'Array') {",
                    "\t\t\t\tif (!def.pattern) {",
                    "\t\t\t\t\tdef = this[key] = {",
                    "\t\t\t\t\t\tpattern: def",
                    "\t\t\t\t\t};",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tdef.inside = def.inside || {};",
                    "",
                    "\t\t\t\tif (type == 'comment') {",
                    "\t\t\t\t\tdef.inside['md-link'] = linkMd;",
                    "\t\t\t\t}",
                    "\t\t\t\tif (type == 'attr-value') {",
                    "\t\t\t\t\tPrism.languages.insertBefore('inside', 'punctuation', { 'url-link': url }, def);",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tdef.inside['url-link'] = url;",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tdef.inside['email-link'] = email;",
                    "\t\t\t}",
                    "\t\t});",
                    "\t\tgrammar['url-link'] = url;",
                    "\t\tgrammar['email-link'] = email;",
                    "\t}",
                    "};",
                    "",
                    "Prism.hooks.add('before-highlight', function(env) {",
                    "\tPrism.plugins.autolinker.processGrammar(env.grammar);",
                    "});",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif (/-link$/.test(env.type)) {",
                    "\t\tenv.tag = 'a';",
                    "\t\t",
                    "\t\tvar href = env.content;",
                    "\t\t",
                    "\t\tif (env.type == 'email-link' && href.indexOf('mailto:') != 0) {",
                    "\t\t\thref = 'mailto:' + href;",
                    "\t\t}",
                    "\t\telse if (env.type == 'md-link') {",
                    "\t\t\t// Markdown",
                    "\t\t\tvar match = env.content.match(linkMd);",
                    "\t\t\t",
                    "\t\t\thref = match[2];",
                    "\t\t\tenv.content = match[1];",
                    "\t\t}",
                    "\t\t",
                    "\t\tenv.attributes.href = href;",
                    "\t}",
                    "",
                    "\t// Silently catch any error thrown by decodeURIComponent (#1186)",
                    "\ttry {",
                    "\t\tenv.content = decodeURIComponent(env.content);",
                    "\t} catch(e) {}",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-autolinker.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var i=/\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~\\/.:=&]+(?:\\?[\\w\\-+%~\\/.:#=?&!$'()*,;]*)?(?:#[\\w\\-+%~\\/.:#=?&!$'()*,;]*)?/,n=/\\b\\S+@[\\w.]+[a-z]{2}/,e=/\\[([^\\]]+)]\\(([^)]+)\\)/,t=[\"comment\",\"url\",\"attr-value\",\"string\"];Prism.plugins.autolinker={processGrammar:function(r){r&&!r[\"url-link\"]&&(Prism.languages.DFS(r,function(r,a,l){t.indexOf(l)>-1&&\"Array\"!==Prism.util.type(a)&&(a.pattern||(a=this[r]={pattern:a}),a.inside=a.inside||{},\"comment\"==l&&(a.inside[\"md-link\"]=e),\"attr-value\"==l?Prism.languages.insertBefore(\"inside\",\"punctuation\",{\"url-link\":i},a):a.inside[\"url-link\"]=i,a.inside[\"email-link\"]=n)}),r[\"url-link\"]=i,r[\"email-link\"]=n)}},Prism.hooks.add(\"before-highlight\",function(i){Prism.plugins.autolinker.processGrammar(i.grammar)}),Prism.hooks.add(\"wrap\",function(i){if(/-link$/.test(i.type)){i.tag=\"a\";var n=i.content;if(\"email-link\"==i.type&&0!=n.indexOf(\"mailto:\"))n=\"mailto:\"+n;else if(\"md-link\"==i.type){var t=i.content.match(e);n=t[2],i.content=t[1]}i.attributes.href=n}try{i.content=decodeURIComponent(i.content)}catch(r){}})}}();"
                ]
            }
        },
        "autoloader": {
            "index.html": {},
            "prism-autoloader.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.createElement) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// The dependencies map is built automatically with gulp",
                    "\tvar lang_dependencies = /*languages_placeholder[*/{\"javascript\":\"clike\",\"actionscript\":\"javascript\",\"arduino\":\"cpp\",\"aspnet\":[\"markup\",\"csharp\"],\"bison\":\"c\",\"c\":\"clike\",\"csharp\":\"clike\",\"cpp\":\"c\",\"coffeescript\":\"javascript\",\"crystal\":\"ruby\",\"css-extras\":\"css\",\"d\":\"clike\",\"dart\":\"clike\",\"django\":\"markup\",\"erb\":[\"ruby\",\"markup-templating\"],\"fsharp\":\"clike\",\"flow\":\"javascript\",\"glsl\":\"clike\",\"go\":\"clike\",\"groovy\":\"clike\",\"haml\":\"ruby\",\"handlebars\":\"markup-templating\",\"haxe\":\"clike\",\"java\":\"clike\",\"jolie\":\"clike\",\"kotlin\":\"clike\",\"less\":\"css\",\"markdown\":\"markup\",\"markup-templating\":\"markup\",\"n4js\":\"javascript\",\"nginx\":\"clike\",\"objectivec\":\"c\",\"opencl\":\"cpp\",\"parser\":\"markup\",\"php\":[\"clike\",\"markup-templating\"],\"php-extras\":\"php\",\"plsql\":\"sql\",\"processing\":\"clike\",\"protobuf\":\"clike\",\"pug\":\"javascript\",\"qore\":\"clike\",\"jsx\":[\"markup\",\"javascript\"],\"tsx\":[\"jsx\",\"typescript\"],\"reason\":\"clike\",\"ruby\":\"clike\",\"sass\":\"css\",\"scss\":\"css\",\"scala\":\"java\",\"smarty\":\"markup-templating\",\"soy\":\"markup-templating\",\"swift\":\"clike\",\"tap\":\"yaml\",\"textile\":\"markup\",\"tt2\":[\"clike\",\"markup-templating\"],\"twig\":\"markup\",\"typescript\":\"javascript\",\"vbnet\":\"basic\",\"velocity\":\"markup\",\"wiki\":\"markup\",\"xeora\":\"markup\",\"xquery\":\"markup\"}/*]*/;",
                    "",
                    "\tvar lang_data = {};",
                    "",
                    "\tvar ignored_language = 'none';",
                    "",
                    "\tvar script = document.getElementsByTagName('script');",
                    "\tscript = script[script.length - 1];",
                    "\tvar languages_path = 'components/';",
                    "\tif(script.hasAttribute('data-autoloader-path')) {",
                    "\t\tvar path = script.getAttribute('data-autoloader-path').trim();",
                    "\t\tif(path.length > 0 && !/^[a-z]+:\\/\\//i.test(script.src)) {",
                    "\t\t\tlanguages_path = path.replace(/\\/?$/, '/');",
                    "\t\t}",
                    "\t} else if (/[\\w-]+\\.js$/.test(script.src)) {",
                    "\t\tlanguages_path = script.src.replace(/[\\w-]+\\.js$/, 'components/');",
                    "\t}",
                    "\tvar config = Prism.plugins.autoloader = {",
                    "\t\tlanguages_path: languages_path,",
                    "\t\tuse_minified: true",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Lazy loads an external script",
                    "\t * @param {string} src",
                    "\t * @param {function=} success",
                    "\t * @param {function=} error",
                    "\t */",
                    "\tvar script = function (src, success, error) {",
                    "\t\tvar s = document.createElement('script');",
                    "\t\ts.src = src;",
                    "\t\ts.async = true;",
                    "\t\ts.onload = function() {",
                    "\t\t\tdocument.body.removeChild(s);",
                    "\t\t\tsuccess && success();",
                    "\t\t};",
                    "\t\ts.onerror = function() {",
                    "\t\t\tdocument.body.removeChild(s);",
                    "\t\t\terror && error();",
                    "\t\t};",
                    "\t\tdocument.body.appendChild(s);",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns the path to a grammar, using the language_path and use_minified config keys.",
                    "\t * @param {string} lang",
                    "\t * @returns {string}",
                    "\t */",
                    "\tvar getLanguagePath = function (lang) {",
                    "\t\treturn config.languages_path +",
                    "\t\t\t'prism-' + lang",
                    "\t\t\t+ (config.use_minified ? '.min' : '') + '.js'",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Tries to load a grammar and",
                    "\t * highlight again the given element once loaded.",
                    "\t * @param {string} lang",
                    "\t * @param {HTMLElement} elt",
                    "\t */",
                    "\tvar registerElement = function (lang, elt) {",
                    "\t\tvar data = lang_data[lang];",
                    "\t\tif (!data) {",
                    "\t\t\tdata = lang_data[lang] = {};",
                    "\t\t}",
                    "",
                    "\t\t// Look for additional dependencies defined on the <code> or <pre> tags",
                    "\t\tvar deps = elt.getAttribute('data-dependencies');",
                    "\t\tif (!deps && elt.parentNode && elt.parentNode.tagName.toLowerCase() === 'pre') {",
                    "\t\t\tdeps = elt.parentNode.getAttribute('data-dependencies');",
                    "\t\t}",
                    "",
                    "\t\tif (deps) {",
                    "\t\t\tdeps = deps.split(/\\s*,\\s*/g);",
                    "\t\t} else {",
                    "\t\t\tdeps = [];",
                    "\t\t}",
                    "",
                    "\t\tloadLanguages(deps, function () {",
                    "\t\t\tloadLanguage(lang, function () {",
                    "\t\t\t\tPrism.highlightElement(elt);",
                    "\t\t\t});",
                    "\t\t});",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Sequentially loads an array of grammars.",
                    "\t * @param {string[]|string} langs",
                    "\t * @param {function=} success",
                    "\t * @param {function=} error",
                    "\t */",
                    "\tvar loadLanguages = function (langs, success, error) {",
                    "\t\tif (typeof langs === 'string') {",
                    "\t\t\tlangs = [langs];",
                    "\t\t}",
                    "\t\tvar i = 0;",
                    "\t\tvar l = langs.length;",
                    "\t\tvar f = function () {",
                    "\t\t\tif (i < l) {",
                    "\t\t\t\tloadLanguage(langs[i], function () {",
                    "\t\t\t\t\ti++;",
                    "\t\t\t\t\tf();",
                    "\t\t\t\t}, function () {",
                    "\t\t\t\t\terror && error(langs[i]);",
                    "\t\t\t\t});",
                    "\t\t\t} else if (i === l) {",
                    "\t\t\t\tsuccess && success(langs);",
                    "\t\t\t}",
                    "\t\t};",
                    "\t\tf();",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Load a grammar with its dependencies",
                    "\t * @param {string} lang",
                    "\t * @param {function=} success",
                    "\t * @param {function=} error",
                    "\t */",
                    "\tvar loadLanguage = function (lang, success, error) {",
                    "\t\tvar load = function () {",
                    "\t\t\tvar force = false;",
                    "\t\t\t// Do we want to force reload the grammar?",
                    "\t\t\tif (lang.indexOf('!') >= 0) {",
                    "\t\t\t\tforce = true;",
                    "\t\t\t\tlang = lang.replace('!', '');",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar data = lang_data[lang];",
                    "\t\t\tif (!data) {",
                    "\t\t\t\tdata = lang_data[lang] = {};",
                    "\t\t\t}",
                    "\t\t\tif (success) {",
                    "\t\t\t\tif (!data.success_callbacks) {",
                    "\t\t\t\t\tdata.success_callbacks = [];",
                    "\t\t\t\t}",
                    "\t\t\t\tdata.success_callbacks.push(success);",
                    "\t\t\t}",
                    "\t\t\tif (error) {",
                    "\t\t\t\tif (!data.error_callbacks) {",
                    "\t\t\t\t\tdata.error_callbacks = [];",
                    "\t\t\t\t}",
                    "\t\t\t\tdata.error_callbacks.push(error);",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (!force && Prism.languages[lang]) {",
                    "\t\t\t\tlanguageSuccess(lang);",
                    "\t\t\t} else if (!force && data.error) {",
                    "\t\t\t\tlanguageError(lang);",
                    "\t\t\t} else if (force || !data.loading) {",
                    "\t\t\t\tdata.loading = true;",
                    "\t\t\t\tvar src = getLanguagePath(lang);",
                    "\t\t\t\tscript(src, function () {",
                    "\t\t\t\t\tdata.loading = false;",
                    "\t\t\t\t\tlanguageSuccess(lang);",
                    "",
                    "\t\t\t\t}, function () {",
                    "\t\t\t\t\tdata.loading = false;",
                    "\t\t\t\t\tdata.error = true;",
                    "\t\t\t\t\tlanguageError(lang);",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t};",
                    "\t\tvar dependencies = lang_dependencies[lang];",
                    "\t\tif(dependencies && dependencies.length) {",
                    "\t\t\tloadLanguages(dependencies, load);",
                    "\t\t} else {",
                    "\t\t\tload();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Runs all success callbacks for this language.",
                    "\t * @param {string} lang",
                    "\t */",
                    "\tvar languageSuccess = function (lang) {",
                    "\t\tif (lang_data[lang] && lang_data[lang].success_callbacks && lang_data[lang].success_callbacks.length) {",
                    "\t\t\tlang_data[lang].success_callbacks.forEach(function (f) {",
                    "\t\t\t\tf(lang);",
                    "\t\t\t});",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Runs all error callbacks for this language.",
                    "\t * @param {string} lang",
                    "\t */",
                    "\tvar languageError = function (lang) {",
                    "\t\tif (lang_data[lang] && lang_data[lang].error_callbacks && lang_data[lang].error_callbacks.length) {",
                    "\t\t\tlang_data[lang].error_callbacks.forEach(function (f) {",
                    "\t\t\t\tf(lang);",
                    "\t\t\t});",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "\t\tif (env.element && env.language && !env.grammar) {",
                    "\t\t\tif (env.language !== ignored_language) {",
                    "\t\t\t\tregisterElement(env.language, env.element);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-autoloader.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document&&document.createElement){var e={javascript:\"clike\",actionscript:\"javascript\",arduino:\"cpp\",aspnet:[\"markup\",\"csharp\"],bison:\"c\",c:\"clike\",csharp:\"clike\",cpp:\"c\",coffeescript:\"javascript\",crystal:\"ruby\",\"css-extras\":\"css\",d:\"clike\",dart:\"clike\",django:\"markup\",erb:[\"ruby\",\"markup-templating\"],fsharp:\"clike\",flow:\"javascript\",glsl:\"clike\",go:\"clike\",groovy:\"clike\",haml:\"ruby\",handlebars:\"markup-templating\",haxe:\"clike\",java:\"clike\",jolie:\"clike\",kotlin:\"clike\",less:\"css\",markdown:\"markup\",\"markup-templating\":\"markup\",n4js:\"javascript\",nginx:\"clike\",objectivec:\"c\",opencl:\"cpp\",parser:\"markup\",php:[\"clike\",\"markup-templating\"],\"php-extras\":\"php\",plsql:\"sql\",processing:\"clike\",protobuf:\"clike\",pug:\"javascript\",qore:\"clike\",jsx:[\"markup\",\"javascript\"],tsx:[\"jsx\",\"typescript\"],reason:\"clike\",ruby:\"clike\",sass:\"css\",scss:\"css\",scala:\"java\",smarty:\"markup-templating\",soy:\"markup-templating\",swift:\"clike\",tap:\"yaml\",textile:\"markup\",tt2:[\"clike\",\"markup-templating\"],twig:\"markup\",typescript:\"javascript\",vbnet:\"basic\",velocity:\"markup\",wiki:\"markup\",xeora:\"markup\",xquery:\"markup\"},a={},c=\"none\",t=document.getElementsByTagName(\"script\");t=t[t.length-1];var r=\"components/\";if(t.hasAttribute(\"data-autoloader-path\")){var s=t.getAttribute(\"data-autoloader-path\").trim();s.length>0&&!/^[a-z]+:\\/\\//i.test(t.src)&&(r=s.replace(/\\/?$/,\"/\"))}else/[\\w-]+\\.js$/.test(t.src)&&(r=t.src.replace(/[\\w-]+\\.js$/,\"components/\"));var i=Prism.plugins.autoloader={languages_path:r,use_minified:!0},t=function(e,a,c){var t=document.createElement(\"script\");t.src=e,t.async=!0,t.onload=function(){document.body.removeChild(t),a&&a()},t.onerror=function(){document.body.removeChild(t),c&&c()},document.body.appendChild(t)},n=function(e){return i.languages_path+\"prism-\"+e+(i.use_minified?\".min\":\"\")+\".js\"},l=function(e,c){var t=a[e];t||(t=a[e]={});var r=c.getAttribute(\"data-dependencies\");!r&&c.parentNode&&\"pre\"===c.parentNode.tagName.toLowerCase()&&(r=c.parentNode.getAttribute(\"data-dependencies\")),r=r?r.split(/\\s*,\\s*/g):[],o(r,function(){p(e,function(){Prism.highlightElement(c)})})},o=function(e,a,c){\"string\"==typeof e&&(e=[e]);var t=0,r=e.length,s=function(){r>t?p(e[t],function(){t++,s()},function(){c&&c(e[t])}):t===r&&a&&a(e)};s()},p=function(c,r,s){var i=function(){var e=!1;c.indexOf(\"!\")>=0&&(e=!0,c=c.replace(\"!\",\"\"));var i=a[c];if(i||(i=a[c]={}),r&&(i.success_callbacks||(i.success_callbacks=[]),i.success_callbacks.push(r)),s&&(i.error_callbacks||(i.error_callbacks=[]),i.error_callbacks.push(s)),!e&&Prism.languages[c])u(c);else if(!e&&i.error)m(c);else if(e||!i.loading){i.loading=!0;var l=n(c);t(l,function(){i.loading=!1,u(c)},function(){i.loading=!1,i.error=!0,m(c)})}},l=e[c];l&&l.length?o(l,i):i()},u=function(e){a[e]&&a[e].success_callbacks&&a[e].success_callbacks.length&&a[e].success_callbacks.forEach(function(a){a(e)})},m=function(e){a[e]&&a[e].error_callbacks&&a[e].error_callbacks.length&&a[e].error_callbacks.forEach(function(a){a(e)})};Prism.hooks.add(\"complete\",function(e){e.element&&e.language&&!e.grammar&&e.language!==c&&l(e.language,e.element)})}}();"
                ]
            }
        },
        "command-line": {
            "index.html": {},
            "prism-command-line.css": {},
            "prism-command-line.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\treturn;",
                    "}",
                    "",
                    "var clsReg = /\\s*\\bcommand-line\\b\\s*/;",
                    "",
                    "Prism.hooks.add('before-highlight', function (env) {",
                    "\tenv.vars = env.vars || {};",
                    "\tenv.vars['command-line'] = env.vars['command-line'] || {};",
                    "",
                    "\tif (env.vars['command-line'].complete || !env.code) {",
                    "\t\tenv.vars['command-line'].complete = true;",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Works only for <code> wrapped inside <pre> (not inline).",
                    "\tvar pre = env.element.parentNode;",
                    "\tif (!pre || !/pre/i.test(pre.nodeName) || // Abort only if neither the <pre> nor the <code> have the class",
                    "\t\t(!clsReg.test(pre.className) && !clsReg.test(env.element.className))) {",
                    "\t\tenv.vars['command-line'].complete = true;",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tif (env.element.querySelector('.command-line-prompt')) { // Abort if prompt already exists.",
                    "\t\tenv.vars['command-line'].complete = true;",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar codeLines = env.code.split('\\n');",
                    "\tenv.vars['command-line'].numberOfLines = codeLines.length;",
                    "\tenv.vars['command-line'].outputLines = [];",
                    "",
                    "\tvar outputSections = pre.getAttribute('data-output');",
                    "\tvar outputFilter = pre.getAttribute('data-filter-output');",
                    "\tif (outputSections || outputSections === '') { // The user specified the output lines. -- cwells",
                    "\t\toutputSections = outputSections.split(',');",
                    "\t\tfor (var i = 0; i < outputSections.length; i++) { // Parse the output sections into start/end ranges. -- cwells",
                    "\t\t\tvar range = outputSections[i].split('-');",
                    "\t\t\tvar outputStart = parseInt(range[0], 10);",
                    "\t\t\tvar outputEnd = (range.length === 2 ? parseInt(range[1], 10) : outputStart);",
                    "",
                    "\t\t\tif (!isNaN(outputStart) && !isNaN(outputEnd)) {",
                    "\t\t\t\tif (outputStart < 1) {",
                    "\t\t\t\t\toutputStart = 1;",
                    "\t\t\t\t}",
                    "\t\t\t\tif (outputEnd > codeLines.length) {",
                    "\t\t\t\t\toutputEnd = codeLines.length;",
                    "\t\t\t\t}",
                    "\t\t\t\t// Convert start and end to 0-based to simplify the arrays. -- cwells",
                    "\t\t\t\toutputStart--;",
                    "\t\t\t\toutputEnd--;",
                    "\t\t\t\t// Save the output line in an array and clear it in the code so it's not highlighted. -- cwells",
                    "\t\t\t\tfor (var j = outputStart; j <= outputEnd; j++) {",
                    "\t\t\t\t\tenv.vars['command-line'].outputLines[j] = codeLines[j];",
                    "\t\t\t\t\tcodeLines[j] = '';",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t} else if (outputFilter) { // Treat lines beginning with this string as output. -- cwells",
                    "\t\tfor (var i = 0; i < codeLines.length; i++) {",
                    "\t\t\tif (codeLines[i].indexOf(outputFilter) === 0) { // This line is output. -- cwells",
                    "\t\t\t\tenv.vars['command-line'].outputLines[i] = codeLines[i].slice(outputFilter.length);",
                    "\t\t\t\tcodeLines[i] = '';",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tenv.code = codeLines.join('\\n');",
                    "});",
                    "",
                    "Prism.hooks.add('before-insert', function (env) {",
                    "\tenv.vars = env.vars || {};",
                    "\tenv.vars['command-line'] = env.vars['command-line'] || {};",
                    "\tif (env.vars['command-line'].complete) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Reinsert the output lines into the highlighted code. -- cwells",
                    "\tvar codeLines = env.highlightedCode.split('\\n');",
                    "\tfor (var i = 0; i < env.vars['command-line'].outputLines.length; i++) {",
                    "\t\tif (env.vars['command-line'].outputLines.hasOwnProperty(i)) {",
                    "\t\t\tcodeLines[i] = env.vars['command-line'].outputLines[i];",
                    "\t\t}",
                    "\t}",
                    "\tenv.highlightedCode = codeLines.join('\\n');",
                    "});",
                    "",
                    "Prism.hooks.add('complete', function (env) {",
                    "\tenv.vars = env.vars || {};",
                    "\tenv.vars['command-line'] = env.vars['command-line'] || {};",
                    "\tif (env.vars['command-line'].complete) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar pre = env.element.parentNode;",
                    "\tif (clsReg.test(env.element.className)) { // Remove the class \"command-line\" from the <code>",
                    "\t\tenv.element.className = env.element.className.replace(clsReg, ' ');",
                    "\t}",
                    "\tif (!clsReg.test(pre.className)) { // Add the class \"command-line\" to the <pre>",
                    "\t\tpre.className += ' command-line';",
                    "\t}",
                    "",
                    "\tvar getAttribute = function(key, defaultValue) {",
                    "\t\treturn (pre.getAttribute(key) || defaultValue).replace(/\"/g, '&quot');",
                    "\t};",
                    "",
                    "\t// Create the \"rows\" that will become the command-line prompts. -- cwells",
                    "\tvar promptLines = new Array(env.vars['command-line'].numberOfLines + 1);",
                    "\tvar promptText = getAttribute('data-prompt', '');",
                    "\tif (promptText !== '') {",
                    "\t\tpromptLines = promptLines.join('<span data-prompt=\"' + promptText + '\"></span>');",
                    "\t} else {",
                    "\t\tvar user = getAttribute('data-user', 'user');",
                    "\t\tvar host = getAttribute('data-host', 'localhost');",
                    "\t\tpromptLines = promptLines.join('<span data-user=\"' + user + '\" data-host=\"' + host + '\"></span>');",
                    "\t}",
                    "",
                    "\t// Create the wrapper element. -- cwells",
                    "\tvar prompt = document.createElement('span');",
                    "\tprompt.className = 'command-line-prompt';",
                    "\tprompt.innerHTML = promptLines;",
                    "",
                    "\t// Remove the prompt from the output lines. -- cwells",
                    "\tfor (var i = 0; i < env.vars['command-line'].outputLines.length; i++) {",
                    "\t\tif (env.vars['command-line'].outputLines.hasOwnProperty(i)) {",
                    "\t\t\tvar node = prompt.children[i];",
                    "\t\t\tnode.removeAttribute('data-user');",
                    "\t\t\tnode.removeAttribute('data-host');",
                    "\t\t\tnode.removeAttribute('data-prompt');",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tenv.element.insertBefore(prompt, env.element.firstChild);",
                    "\tenv.vars['command-line'].complete = true;",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-command-line.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var e=/\\s*\\bcommand-line\\b\\s*/;Prism.hooks.add(\"before-highlight\",function(a){if(a.vars=a.vars||{},a.vars[\"command-line\"]=a.vars[\"command-line\"]||{},a.vars[\"command-line\"].complete||!a.code)return a.vars[\"command-line\"].complete=!0,void 0;var n=a.element.parentNode;if(!n||!/pre/i.test(n.nodeName)||!e.test(n.className)&&!e.test(a.element.className))return a.vars[\"command-line\"].complete=!0,void 0;if(a.element.querySelector(\".command-line-prompt\"))return a.vars[\"command-line\"].complete=!0,void 0;var t=a.code.split(\"\\n\");a.vars[\"command-line\"].numberOfLines=t.length,a.vars[\"command-line\"].outputLines=[];var r=n.getAttribute(\"data-output\"),s=n.getAttribute(\"data-filter-output\");if(r||\"\"===r){r=r.split(\",\");for(var o=0;o<r.length;o++){var m=r[o].split(\"-\"),i=parseInt(m[0],10),l=2===m.length?parseInt(m[1],10):i;if(!isNaN(i)&&!isNaN(l)){1>i&&(i=1),l>t.length&&(l=t.length),i--,l--;for(var d=i;l>=d;d++)a.vars[\"command-line\"].outputLines[d]=t[d],t[d]=\"\"}}}else if(s)for(var o=0;o<t.length;o++)0===t[o].indexOf(s)&&(a.vars[\"command-line\"].outputLines[o]=t[o].slice(s.length),t[o]=\"\");a.code=t.join(\"\\n\")}),Prism.hooks.add(\"before-insert\",function(e){if(e.vars=e.vars||{},e.vars[\"command-line\"]=e.vars[\"command-line\"]||{},!e.vars[\"command-line\"].complete){for(var a=e.highlightedCode.split(\"\\n\"),n=0;n<e.vars[\"command-line\"].outputLines.length;n++)e.vars[\"command-line\"].outputLines.hasOwnProperty(n)&&(a[n]=e.vars[\"command-line\"].outputLines[n]);e.highlightedCode=a.join(\"\\n\")}}),Prism.hooks.add(\"complete\",function(a){if(a.vars=a.vars||{},a.vars[\"command-line\"]=a.vars[\"command-line\"]||{},!a.vars[\"command-line\"].complete){var n=a.element.parentNode;e.test(a.element.className)&&(a.element.className=a.element.className.replace(e,\" \")),e.test(n.className)||(n.className+=\" command-line\");var t=function(e,a){return(n.getAttribute(e)||a).replace(/\"/g,\"&quot\")},r=new Array(a.vars[\"command-line\"].numberOfLines+1),s=t(\"data-prompt\",\"\");if(\"\"!==s)r=r.join('<span data-prompt=\"'+s+'\"></span>');else{var o=t(\"data-user\",\"user\"),m=t(\"data-host\",\"localhost\");r=r.join('<span data-user=\"'+o+'\" data-host=\"'+m+'\"></span>')}var i=document.createElement(\"span\");i.className=\"command-line-prompt\",i.innerHTML=r;for(var l=0;l<a.vars[\"command-line\"].outputLines.length;l++)if(a.vars[\"command-line\"].outputLines.hasOwnProperty(l)){var d=i.children[l];d.removeAttribute(\"data-user\"),d.removeAttribute(\"data-host\"),d.removeAttribute(\"data-prompt\")}a.element.insertBefore(i,a.element.firstChild),a.vars[\"command-line\"].complete=!0}})}}();"
                ]
            }
        },
        "copy-to-clipboard": {
            "index.html": {},
            "prism-copy-to-clipboard.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tif (!Prism.plugins.toolbar) {",
                    "\t\tconsole.warn('Copy to Clipboard plugin loaded before Toolbar plugin.');",
                    "",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar ClipboardJS = window.ClipboardJS || undefined;",
                    "",
                    "\tif (!ClipboardJS && typeof require === 'function') {",
                    "\t\tClipboardJS = require('clipboard');",
                    "\t}",
                    "",
                    "\tvar callbacks = [];",
                    "",
                    "\tif (!ClipboardJS) {",
                    "\t\tvar script = document.createElement('script');",
                    "\t\tvar head = document.querySelector('head');",
                    "",
                    "\t\tscript.onload = function() {",
                    "\t\t\tClipboardJS = window.ClipboardJS;",
                    "",
                    "\t\t\tif (ClipboardJS) {",
                    "\t\t\t\twhile (callbacks.length) {",
                    "\t\t\t\t\tcallbacks.pop()();",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t};",
                    "",
                    "\t\tscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js';",
                    "\t\thead.appendChild(script);",
                    "\t}",
                    "",
                    "\tPrism.plugins.toolbar.registerButton('copy-to-clipboard', function (env) {",
                    "\t\tvar linkCopy = document.createElement('a');",
                    "\t\tlinkCopy.textContent = 'Copy';",
                    "",
                    "\t\tif (!ClipboardJS) {",
                    "\t\t\tcallbacks.push(registerClipboard);",
                    "\t\t} else {",
                    "\t\t\tregisterClipboard();",
                    "\t\t}",
                    "",
                    "\t\treturn linkCopy;",
                    "",
                    "\t\tfunction registerClipboard() {",
                    "\t\t\tvar clip = new ClipboardJS(linkCopy, {",
                    "\t\t\t\t'text': function () {",
                    "\t\t\t\t\treturn env.code;",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "",
                    "\t\t\tclip.on('success', function() {",
                    "\t\t\t\tlinkCopy.textContent = 'Copied!';",
                    "",
                    "\t\t\t\tresetText();",
                    "\t\t\t});",
                    "\t\t\tclip.on('error', function () {",
                    "\t\t\t\tlinkCopy.textContent = 'Press Ctrl+C to copy';",
                    "",
                    "\t\t\t\tresetText();",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t\tfunction resetText() {",
                    "\t\t\tsetTimeout(function () {",
                    "\t\t\t\tlinkCopy.textContent = 'Copy';",
                    "\t\t\t}, 5000);",
                    "\t\t}",
                    "\t});",
                    "})();"
                ]
            },
            "prism-copy-to-clipboard.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){if(!Prism.plugins.toolbar)return console.warn(\"Copy to Clipboard plugin loaded before Toolbar plugin.\"),void 0;var o=window.ClipboardJS||void 0;o||\"function\"!=typeof require||(o=require(\"clipboard\"));var e=[];if(!o){var t=document.createElement(\"script\"),n=document.querySelector(\"head\");t.onload=function(){if(o=window.ClipboardJS)for(;e.length;)e.pop()()},t.src=\"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js\",n.appendChild(t)}Prism.plugins.toolbar.registerButton(\"copy-to-clipboard\",function(t){function n(){var e=new o(i,{text:function(){return t.code}});e.on(\"success\",function(){i.textContent=\"Copied!\",r()}),e.on(\"error\",function(){i.textContent=\"Press Ctrl+C to copy\",r()})}function r(){setTimeout(function(){i.textContent=\"Copy\"},5e3)}var i=document.createElement(\"a\");return i.textContent=\"Copy\",o?n():e.push(n),i})}}();"
                ]
            }
        },
        "custom-class": {
            "index.html": {},
            "prism-custom-class.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\t(typeof self === 'undefined' || !self.Prism) &&",
                    "\t(typeof global === 'undefined' || !global.Prism)",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "var options = {",
                    "\tclassMap: {}",
                    "};",
                    "Prism.plugins.customClass = {",
                    "\tmap: function map(cm) {",
                    "\t\toptions.classMap = cm;",
                    "\t},",
                    "\tprefix: function prefix(string) {",
                    "\t\toptions.prefixString = string;",
                    "\t}",
                    "}",
                    "",
                    "Prism.hooks.add('wrap', function (env) {",
                    "\tif (!options.classMap && !options.prefixString) {",
                    "\t\treturn;",
                    "\t}",
                    "\tenv.classes = env.classes.map(function(c) {",
                    "\t\treturn (options.prefixString || '') + (options.classMap[c] || c);",
                    "\t});",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-custom-class.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism||\"undefined\"!=typeof global&&global.Prism){var s={classMap:{}};Prism.plugins.customClass={map:function(i){s.classMap=i},prefix:function(i){s.prefixString=i}},Prism.hooks.add(\"wrap\",function(i){(s.classMap||s.prefixString)&&(i.classes=i.classes.map(function(i){return(s.prefixString||\"\")+(s.classMap[i]||i)}))})}}();"
                ]
            }
        },
        "data-uri-highlight": {
            "index.html": {},
            "prism-data-uri-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\ttypeof global !== 'undefined' && !global.Prism",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar autoLinkerProcess = function (grammar) {",
                    "\t\tif (Prism.plugins.autolinker) {",
                    "\t\t\tPrism.plugins.autolinker.processGrammar(grammar);",
                    "\t\t}",
                    "\t\treturn grammar;",
                    "\t};",
                    "\tvar dataURI = {",
                    "\t\tpattern: /(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,",
                    "\t\tlookbehind: true,",
                    "\t\tinside: {",
                    "\t\t\t'language-css': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-javascript': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-json': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-markup': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t// Tokens that may contain URLs",
                    "\tvar candidates = ['url', 'attr-value', 'string'];",
                    "",
                    "\tPrism.plugins.dataURIHighlight = {",
                    "\t\tprocessGrammar: function (grammar) {",
                    "\t\t\t// Abort if grammar has already been processed",
                    "\t\t\tif (!grammar || grammar['data-uri']) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tPrism.languages.DFS(grammar, function (key, def, type) {",
                    "\t\t\t\tif (candidates.indexOf(type) > -1 && Prism.util.type(def) !== 'Array') {",
                    "\t\t\t\t\tif (!def.pattern) {",
                    "\t\t\t\t\t\tdef = this[key] = {",
                    "\t\t\t\t\t\t\tpattern: def",
                    "\t\t\t\t\t\t};",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tdef.inside = def.inside || {};",
                    "",
                    "\t\t\t\t\tif (type == 'attr-value') {",
                    "\t\t\t\t\t\tPrism.languages.insertBefore('inside', def.inside['url-link'] ? 'url-link' : 'punctuation', {",
                    "\t\t\t\t\t\t\t'data-uri': dataURI",
                    "\t\t\t\t\t\t}, def);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\tif (def.inside['url-link']) {",
                    "\t\t\t\t\t\t\tPrism.languages.insertBefore('inside', 'url-link', {",
                    "\t\t\t\t\t\t\t\t'data-uri': dataURI",
                    "\t\t\t\t\t\t\t}, def);",
                    "\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\tdef.inside['data-uri'] = dataURI;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "\t\t\tgrammar['data-uri'] = dataURI;",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\t// Prepare the needed grammars for this code block",
                    "\t\tif (dataURI.pattern.test(env.code)) {",
                    "\t\t\tfor (var p in dataURI.inside) {",
                    "\t\t\t\tif (dataURI.inside.hasOwnProperty(p)) {",
                    "\t\t\t\t\tif (!dataURI.inside[p].inside && dataURI.inside[p].pattern.test(env.code)) {",
                    "\t\t\t\t\t\tvar lang = p.match(/^language-(.+)/)[1];",
                    "\t\t\t\t\t\tif (Prism.languages[lang]) {",
                    "\t\t\t\t\t\t\tdataURI.inside[p].inside = {",
                    "\t\t\t\t\t\t\t\trest: autoLinkerProcess(Prism.languages[lang])",
                    "\t\t\t\t\t\t\t};",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tPrism.plugins.dataURIHighlight.processGrammar(env.grammar);",
                    "\t});",
                    "}());"
                ]
            },
            "prism-data-uri-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var i=function(i){return Prism.plugins.autolinker&&Prism.plugins.autolinker.processGrammar(i),i},a={pattern:/(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,lookbehind:!0,inside:{\"language-css\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,lookbehind:!0},\"language-javascript\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,lookbehind:!0},\"language-json\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,lookbehind:!0},\"language-markup\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,lookbehind:!0}}},n=[\"url\",\"attr-value\",\"string\"];Prism.plugins.dataURIHighlight={processGrammar:function(i){i&&!i[\"data-uri\"]&&(Prism.languages.DFS(i,function(i,e,r){n.indexOf(r)>-1&&\"Array\"!==Prism.util.type(e)&&(e.pattern||(e=this[i]={pattern:e}),e.inside=e.inside||{},\"attr-value\"==r?Prism.languages.insertBefore(\"inside\",e.inside[\"url-link\"]?\"url-link\":\"punctuation\",{\"data-uri\":a},e):e.inside[\"url-link\"]?Prism.languages.insertBefore(\"inside\",\"url-link\",{\"data-uri\":a},e):e.inside[\"data-uri\"]=a)}),i[\"data-uri\"]=a)}},Prism.hooks.add(\"before-highlight\",function(n){if(a.pattern.test(n.code))for(var e in a.inside)if(a.inside.hasOwnProperty(e)&&!a.inside[e].inside&&a.inside[e].pattern.test(n.code)){var r=e.match(/^language-(.+)/)[1];Prism.languages[r]&&(a.inside[e].inside={rest:i(Prism.languages[r])})}Prism.plugins.dataURIHighlight.processGrammar(n.grammar)})}}();"
                ]
            }
        },
        "file-highlight": {
            "index.html": {},
            "prism-file-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tself.Prism.fileHighlight = function() {",
                    "",
                    "\t\tvar Extensions = {",
                    "\t\t\t'js': 'javascript',",
                    "\t\t\t'py': 'python',",
                    "\t\t\t'rb': 'ruby',",
                    "\t\t\t'ps1': 'powershell',",
                    "\t\t\t'psm1': 'powershell',",
                    "\t\t\t'sh': 'bash',",
                    "\t\t\t'bat': 'batch',",
                    "\t\t\t'h': 'c',",
                    "\t\t\t'tex': 'latex'",
                    "\t\t};",
                    "",
                    "\t\tArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {",
                    "\t\t\tvar src = pre.getAttribute('data-src');",
                    "",
                    "\t\t\tvar language, parent = pre;",
                    "\t\t\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
                    "\t\t\twhile (parent && !lang.test(parent.className)) {",
                    "\t\t\t\tparent = parent.parentNode;",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (parent) {",
                    "\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (!language) {",
                    "\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];",
                    "\t\t\t\tlanguage = Extensions[extension] || extension;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar code = document.createElement('code');",
                    "\t\t\tcode.className = 'language-' + language;",
                    "",
                    "\t\t\tpre.textContent = '';",
                    "",
                    "\t\t\tcode.textContent = 'Loading…';",
                    "",
                    "\t\t\tpre.appendChild(code);",
                    "",
                    "\t\t\tvar xhr = new XMLHttpRequest();",
                    "",
                    "\t\t\txhr.open('GET', src, true);",
                    "",
                    "\t\t\txhr.onreadystatechange = function () {",
                    "\t\t\t\tif (xhr.readyState == 4) {",
                    "",
                    "\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
                    "\t\t\t\t\t\tcode.textContent = xhr.responseText;",
                    "",
                    "\t\t\t\t\t\tPrism.highlightElement(code);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse if (xhr.status >= 400) {",
                    "\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t};",
                    "",
                    "\t\t\txhr.send(null);",
                    "\t\t});",
                    "",
                    "\t\tif (Prism.plugins.toolbar) {",
                    "\t\t\tPrism.plugins.toolbar.registerButton('download-file', function (env) {",
                    "\t\t\t\tvar pre = env.element.parentNode;",
                    "\t\t\t\tif (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {",
                    "\t\t\t\t\treturn;",
                    "\t\t\t\t}",
                    "\t\t\t\tvar src = pre.getAttribute('data-src');",
                    "\t\t\t\tvar a = document.createElement('a');",
                    "\t\t\t\ta.textContent = pre.getAttribute('data-download-link-label') || 'Download';",
                    "\t\t\t\ta.setAttribute('download', '');",
                    "\t\t\t\ta.href = src;",
                    "\t\t\t\treturn a;",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t};",
                    "",
                    "\tdocument.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);",
                    "",
                    "})();"
                ]
            },
            "prism-file-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){\"undefined\"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(){var t={js:\"javascript\",py:\"python\",rb:\"ruby\",ps1:\"powershell\",psm1:\"powershell\",sh:\"bash\",bat:\"batch\",h:\"c\",tex:\"latex\"};Array.prototype.slice.call(document.querySelectorAll(\"pre[data-src]\")).forEach(function(e){for(var a,n=e.getAttribute(\"data-src\"),r=e,o=/\\blang(?:uage)?-([\\w-]+)\\b/i;r&&!o.test(r.className);)r=r.parentNode;if(r&&(a=(e.className.match(o)||[,\"\"])[1]),!a){var s=(n.match(/\\.(\\w+)$/)||[,\"\"])[1];a=t[s]||s}var l=document.createElement(\"code\");l.className=\"language-\"+a,e.textContent=\"\",l.textContent=\"Loading…\",e.appendChild(l);var i=new XMLHttpRequest;i.open(\"GET\",n,!0),i.onreadystatechange=function(){4==i.readyState&&(i.status<400&&i.responseText?(l.textContent=i.responseText,Prism.highlightElement(l)):l.textContent=i.status>=400?\"✖ Error \"+i.status+\" while fetching file: \"+i.statusText:\"✖ Error: File does not exist or is empty\")},i.send(null)}),Prism.plugins.toolbar&&Prism.plugins.toolbar.registerButton(\"download-file\",function(t){var e=t.element.parentNode;if(e&&/pre/i.test(e.nodeName)&&e.hasAttribute(\"data-src\")&&e.hasAttribute(\"data-download-link\")){var a=e.getAttribute(\"data-src\"),n=document.createElement(\"a\");return n.textContent=e.getAttribute(\"data-download-link-label\")||\"Download\",n.setAttribute(\"download\",\"\"),n.href=a,n}})},document.addEventListener(\"DOMContentLoaded\",self.Prism.fileHighlight))}();"
                ]
            }
        },
        "highlight-keywords": {
            "index.html": {},
            "prism-highlight-keywords.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif (env.type !== \"keyword\") {",
                    "\t\treturn;",
                    "\t}",
                    "\tenv.classes.push('keyword-' + env.content);",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-highlight-keywords.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){\"undefined\"!=typeof self&&!self.Prism||\"undefined\"!=typeof global&&!global.Prism||Prism.hooks.add(\"wrap\",function(e){\"keyword\"===e.type&&e.classes.push(\"keyword-\"+e.content)})}();"
                ]
            }
        },
        "jsonp-highlight": {
            "index.html": {},
            "prism-jsonp-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "\tif ( !self.Prism || !self.document || !document.querySelectorAll || ![].filter) return;",
                    "",
                    "\tvar adapters = [];",
                    "\tfunction registerAdapter(adapter) {",
                    "\t\tif (typeof adapter === \"function\" && !getAdapter(adapter)) {",
                    "\t\t\tadapters.push(adapter);",
                    "\t\t}",
                    "\t}",
                    "\tfunction getAdapter(adapter) {",
                    "\t\tif (typeof adapter === \"function\") {",
                    "\t\t\treturn adapters.filter(function(fn) { return fn.valueOf() === adapter.valueOf()})[0];",
                    "\t\t}",
                    "\t\telse if (typeof adapter === \"string\" && adapter.length > 0) {",
                    "\t\t\treturn adapters.filter(function(fn) { return fn.name === adapter})[0];",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}",
                    "\tfunction removeAdapter(adapter) {",
                    "\t\tif (typeof adapter === \"string\")",
                    "\t\t\tadapter = getAdapter(adapter);",
                    "\t\tif (typeof adapter === \"function\") {",
                    "\t\t\tvar index = adapters.indexOf(adapter);",
                    "\t\t\tif (index >=0) {",
                    "\t\t\t\tadapters.splice(index,1);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tPrism.plugins.jsonphighlight = {",
                    "\t\tregisterAdapter: registerAdapter,",
                    "\t\tremoveAdapter: removeAdapter,",
                    "\t\thighlight: highlight",
                    "\t};",
                    "\tregisterAdapter(function github(rsp, el) {",
                    "\t\tif ( rsp && rsp.meta && rsp.data ) {",
                    "\t\t\tif ( rsp.meta.status && rsp.meta.status >= 400 ) {",
                    "\t\t\t\treturn \"Error: \" + ( rsp.data.message || rsp.meta.status );",
                    "\t\t\t}",
                    "\t\t\telse if ( typeof(rsp.data.content) === \"string\" ) {",
                    "\t\t\t\treturn typeof(atob) === \"function\"",
                    "\t\t\t\t\t? atob(rsp.data.content.replace(/\\s/g, \"\"))",
                    "\t\t\t\t\t: \"Your browser cannot decode base64\";",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t});",
                    "\tregisterAdapter(function gist(rsp, el) {",
                    "\t\tif ( rsp && rsp.meta && rsp.data && rsp.data.files ) {",
                    "\t\t\tif ( rsp.meta.status && rsp.meta.status >= 400 ) {",
                    "\t\t\t\treturn \"Error: \" + ( rsp.data.message || rsp.meta.status );",
                    "\t\t\t}",
                    "\t\t\telse {",
                    "\t\t\t\tvar filename = el.getAttribute(\"data-filename\");",
                    "\t\t\t\tif (filename == null) {",
                    "\t\t\t\t\t// Maybe in the future we can somehow render all files",
                    "\t\t\t\t\t// But the standard <script> include for gists does that nicely already,",
                    "\t\t\t\t\t// so that might be getting beyond the scope of this plugin",
                    "\t\t\t\t\tfor (var key in rsp.data.files) {",
                    "\t\t\t\t\t\tif (rsp.data.files.hasOwnProperty(key)) {",
                    "\t\t\t\t\t\t\tfilename = key;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\tif (rsp.data.files[filename] !== undefined) {",
                    "\t\t\t\t\treturn rsp.data.files[filename].content;",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\treturn \"Error: unknown or missing gist file \" + filename;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t});",
                    "\tregisterAdapter(function bitbucket(rsp, el) {",
                    "\t\treturn rsp && rsp.node && typeof(rsp.data) === \"string\"",
                    "\t\t\t? rsp.data",
                    "\t\t\t: null;",
                    "\t});",
                    "",
                    "\tvar jsonpcb = 0,",
                    "\t    loadstr = \"Loading…\";",
                    "",
                    "\tfunction highlight() {",
                    "\t\tArray.prototype.slice.call(document.querySelectorAll(\"pre[data-jsonp]\")).forEach(function(pre) {",
                    "\t\t\tpre.textContent = \"\";",
                    "",
                    "\t\t\tvar code = document.createElement(\"code\");",
                    "\t\t\tcode.textContent = loadstr;",
                    "\t\t\tpre.appendChild(code);",
                    "",
                    "\t\t\tvar adapterfn = pre.getAttribute(\"data-adapter\");",
                    "\t\t\tvar adapter = null;",
                    "\t\t\tif ( adapterfn ) {",
                    "\t\t\t\tif ( typeof(window[adapterfn]) === \"function\" ) {",
                    "\t\t\t\t\tadapter = window[adapterfn];",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tcode.textContent = \"JSONP adapter function '\" + adapterfn + \"' doesn't exist\";",
                    "\t\t\t\t\treturn;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar cb = \"prismjsonp\" + ( jsonpcb++ );",
                    "\t\t\t",
                    "\t\t\tvar uri = document.createElement(\"a\");",
                    "\t\t\tvar src = uri.href = pre.getAttribute(\"data-jsonp\");",
                    "\t\t\turi.href += ( uri.search ? \"&\" : \"?\" ) + ( pre.getAttribute(\"data-callback\") || \"callback\" ) + \"=\" + cb;",
                    "",
                    "\t\t\tvar timeout = setTimeout(function() {",
                    "\t\t\t\t// we could clean up window[cb], but if the request finally succeeds, keeping it around is a good thing",
                    "\t\t\t\tif ( code.textContent === loadstr )",
                    "\t\t\t\t\tcode.textContent = \"Timeout loading '\" + src + \"'\";",
                    "\t\t\t}, 5000);",
                    "\t\t\t",
                    "\t\t\tvar script = document.createElement(\"script\");",
                    "\t\t\tscript.src = uri.href;",
                    "",
                    "\t\t\twindow[cb] = function(rsp) {",
                    "\t\t\t\tdocument.head.removeChild(script);",
                    "\t\t\t\tclearTimeout(timeout);",
                    "\t\t\t\tdelete window[cb];",
                    "",
                    "\t\t\t\tvar data = \"\";",
                    "\t\t\t\t",
                    "\t\t\t\tif ( adapter ) {",
                    "\t\t\t\t\tdata = adapter(rsp, pre);",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tfor ( var p in adapters ) {",
                    "\t\t\t\t\t\tdata = adapters[p](rsp, pre);",
                    "\t\t\t\t\t\tif ( data !== null ) break;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tif (data === null) {",
                    "\t\t\t\t\tcode.textContent = \"Cannot parse response (perhaps you need an adapter function?)\";",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tcode.textContent = data;",
                    "\t\t\t\t\tPrism.highlightElement(code);",
                    "\t\t\t\t}",
                    "\t\t\t};",
                    "",
                    "\t\t\tdocument.head.appendChild(script);",
                    "\t\t});",
                    "\t}",
                    "",
                    "\thighlight();",
                    "})();"
                ]
            },
            "prism-jsonp-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){function t(t){\"function\"!=typeof t||e(t)||r.push(t)}function e(t){return\"function\"==typeof t?r.filter(function(e){return e.valueOf()===t.valueOf()})[0]:\"string\"==typeof t&&t.length>0?r.filter(function(e){return e.name===t})[0]:null}function n(t){if(\"string\"==typeof t&&(t=e(t)),\"function\"==typeof t){var n=r.indexOf(t);n>=0&&r.splice(n,1)}}function a(){Array.prototype.slice.call(document.querySelectorAll(\"pre[data-jsonp]\")).forEach(function(t){t.textContent=\"\";var e=document.createElement(\"code\");e.textContent=i,t.appendChild(e);var n=t.getAttribute(\"data-adapter\"),a=null;if(n){if(\"function\"!=typeof window[n])return e.textContent=\"JSONP adapter function '\"+n+\"' doesn't exist\",void 0;a=window[n]}var u=\"prismjsonp\"+o++,f=document.createElement(\"a\"),l=f.href=t.getAttribute(\"data-jsonp\");f.href+=(f.search?\"&\":\"?\")+(t.getAttribute(\"data-callback\")||\"callback\")+\"=\"+u;var s=setTimeout(function(){e.textContent===i&&(e.textContent=\"Timeout loading '\"+l+\"'\")},5e3),d=document.createElement(\"script\");d.src=f.href,window[u]=function(n){document.head.removeChild(d),clearTimeout(s),delete window[u];var o=\"\";if(a)o=a(n,t);else for(var i in r)if(o=r[i](n,t),null!==o)break;null===o?e.textContent=\"Cannot parse response (perhaps you need an adapter function?)\":(e.textContent=o,Prism.highlightElement(e))},document.head.appendChild(d)})}if(self.Prism&&self.document&&document.querySelectorAll&&[].filter){var r=[];Prism.plugins.jsonphighlight={registerAdapter:t,removeAdapter:n,highlight:a},t(function(t){if(t&&t.meta&&t.data){if(t.meta.status&&t.meta.status>=400)return\"Error: \"+(t.data.message||t.meta.status);if(\"string\"==typeof t.data.content)return\"function\"==typeof atob?atob(t.data.content.replace(/\\s/g,\"\")):\"Your browser cannot decode base64\"}return null}),t(function(t,e){if(t&&t.meta&&t.data&&t.data.files){if(t.meta.status&&t.meta.status>=400)return\"Error: \"+(t.data.message||t.meta.status);var n=e.getAttribute(\"data-filename\");if(null==n)for(var a in t.data.files)if(t.data.files.hasOwnProperty(a)){n=a;break}return void 0!==t.data.files[n]?t.data.files[n].content:\"Error: unknown or missing gist file \"+n}return null}),t(function(t){return t&&t.node&&\"string\"==typeof t.data?t.data:null});var o=0,i=\"Loading…\";a()}}();"
                ]
            }
        },
        "keep-markup": {
            "index.html": {},
            "prism-keep-markup.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.createRange) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tPrism.plugins.KeepMarkup = true;",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\tif (!env.element.children.length) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar pos = 0;",
                    "\t\tvar data = [];",
                    "\t\tvar f = function (elt, baseNode) {",
                    "\t\t\tvar o = {};",
                    "\t\t\tif (!baseNode) {",
                    "\t\t\t\t// Clone the original tag to keep all attributes",
                    "\t\t\t\to.clone = elt.cloneNode(false);",
                    "\t\t\t\to.posOpen = pos;",
                    "\t\t\t\tdata.push(o);",
                    "\t\t\t}",
                    "\t\t\tfor (var i = 0, l = elt.childNodes.length; i < l; i++) {",
                    "\t\t\t\tvar child = elt.childNodes[i];",
                    "\t\t\t\tif (child.nodeType === 1) { // element",
                    "\t\t\t\t\tf(child);",
                    "\t\t\t\t} else if(child.nodeType === 3) { // text",
                    "\t\t\t\t\tpos += child.data.length;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\tif (!baseNode) {",
                    "\t\t\t\to.posClose = pos;",
                    "\t\t\t}",
                    "\t\t};",
                    "\t\tf(env.element, true);",
                    "",
                    "\t\tif (data && data.length) {",
                    "\t\t\t// data is an array of all existing tags",
                    "\t\t\tenv.keepMarkup = data;",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('after-highlight', function (env) {",
                    "\t\tif(env.keepMarkup && env.keepMarkup.length) {",
                    "",
                    "\t\t\tvar walk = function (elt, nodeState) {",
                    "\t\t\t\tfor (var i = 0, l = elt.childNodes.length; i < l; i++) {",
                    "",
                    "\t\t\t\t\tvar child = elt.childNodes[i];",
                    "",
                    "\t\t\t\t\tif (child.nodeType === 1) { // element",
                    "\t\t\t\t\t\tif (!walk(child, nodeState)) {",
                    "\t\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t} else if (child.nodeType === 3) { // text",
                    "\t\t\t\t\t\tif(!nodeState.nodeStart && nodeState.pos + child.data.length > nodeState.node.posOpen) {",
                    "\t\t\t\t\t\t\t// We found the start position",
                    "\t\t\t\t\t\t\tnodeState.nodeStart = child;",
                    "\t\t\t\t\t\t\tnodeState.nodeStartPos = nodeState.node.posOpen - nodeState.pos;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tif(nodeState.nodeStart && nodeState.pos + child.data.length >= nodeState.node.posClose) {",
                    "\t\t\t\t\t\t\t// We found the end position",
                    "\t\t\t\t\t\t\tnodeState.nodeEnd = child;",
                    "\t\t\t\t\t\t\tnodeState.nodeEndPos = nodeState.node.posClose - nodeState.pos;",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\tnodeState.pos += child.data.length;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tif (nodeState.nodeStart && nodeState.nodeEnd) {",
                    "\t\t\t\t\t\t// Select the range and wrap it with the clone",
                    "\t\t\t\t\t\tvar range = document.createRange();",
                    "\t\t\t\t\t\trange.setStart(nodeState.nodeStart, nodeState.nodeStartPos);",
                    "\t\t\t\t\t\trange.setEnd(nodeState.nodeEnd, nodeState.nodeEndPos);",
                    "\t\t\t\t\t\tnodeState.node.clone.appendChild(range.extractContents());",
                    "\t\t\t\t\t\trange.insertNode(nodeState.node.clone);",
                    "\t\t\t\t\t\trange.detach();",
                    "",
                    "\t\t\t\t\t\t// Process is over",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\treturn true;",
                    "\t\t\t};",
                    "",
                    "\t\t\t// For each tag, we walk the DOM to reinsert it",
                    "\t\t\tenv.keepMarkup.forEach(function (node) {",
                    "\t\t\t\twalk(env.element, {",
                    "\t\t\t\t\tnode: node,",
                    "\t\t\t\t\tpos: 0",
                    "\t\t\t\t});",
                    "\t\t\t});",
                    "\t\t\t// Store new highlightedCode for later hooks calls",
                    "\t\t\tenv.highlightedCode = env.element.innerHTML;",
                    "\t\t}",
                    "\t});",
                    "}());"
                ]
            },
            "prism-keep-markup.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){\"undefined\"!=typeof self&&self.Prism&&self.document&&document.createRange&&(Prism.plugins.KeepMarkup=!0,Prism.hooks.add(\"before-highlight\",function(e){if(e.element.children.length){var n=0,o=[],t=function(e,d){var r={};d||(r.clone=e.cloneNode(!1),r.posOpen=n,o.push(r));for(var a=0,s=e.childNodes.length;s>a;a++){var l=e.childNodes[a];1===l.nodeType?t(l):3===l.nodeType&&(n+=l.data.length)}d||(r.posClose=n)};t(e.element,!0),o&&o.length&&(e.keepMarkup=o)}}),Prism.hooks.add(\"after-highlight\",function(e){if(e.keepMarkup&&e.keepMarkup.length){var n=function(e,o){for(var t=0,d=e.childNodes.length;d>t;t++){var r=e.childNodes[t];if(1===r.nodeType){if(!n(r,o))return!1}else 3===r.nodeType&&(!o.nodeStart&&o.pos+r.data.length>o.node.posOpen&&(o.nodeStart=r,o.nodeStartPos=o.node.posOpen-o.pos),o.nodeStart&&o.pos+r.data.length>=o.node.posClose&&(o.nodeEnd=r,o.nodeEndPos=o.node.posClose-o.pos),o.pos+=r.data.length);if(o.nodeStart&&o.nodeEnd){var a=document.createRange();return a.setStart(o.nodeStart,o.nodeStartPos),a.setEnd(o.nodeEnd,o.nodeEndPos),o.node.clone.appendChild(a.extractContents()),a.insertNode(o.node.clone),a.detach(),!1}}return!0};e.keepMarkup.forEach(function(o){n(e.element,{node:o,pos:0})}),e.highlightedCode=e.element.innerHTML}}))}();"
                ]
            }
        },
        "line-highlight": {
            "index.html": {},
            "prism-line-highlight.css": {},
            "prism-line-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
                    "\treturn;",
                    "}",
                    "",
                    "function $$(expr, con) {",
                    "\treturn Array.prototype.slice.call((con || document).querySelectorAll(expr));",
                    "}",
                    "",
                    "function hasClass(element, className) {",
                    "  className = \" \" + className + \" \";",
                    "  return (\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(className) > -1",
                    "}",
                    "",
                    "// Some browsers round the line-height, others don't.",
                    "// We need to test for it to position the elements properly.",
                    "var isLineHeightRounded = (function() {",
                    "\tvar res;",
                    "\treturn function() {",
                    "\t\tif(typeof res === 'undefined') {",
                    "\t\t\tvar d = document.createElement('div');",
                    "\t\t\td.style.fontSize = '13px';",
                    "\t\t\td.style.lineHeight = '1.5';",
                    "\t\t\td.style.padding = 0;",
                    "\t\t\td.style.border = 0;",
                    "\t\t\td.innerHTML = '&nbsp;<br />&nbsp;';",
                    "\t\t\tdocument.body.appendChild(d);",
                    "\t\t\t// Browsers that round the line-height should have offsetHeight === 38",
                    "\t\t\t// The others should have 39.",
                    "\t\t\tres = d.offsetHeight === 38;",
                    "\t\t\tdocument.body.removeChild(d);",
                    "\t\t}",
                    "\t\treturn res;",
                    "\t}",
                    "}());",
                    "",
                    "function highlightLines(pre, lines, classes) {",
                    "\tlines = typeof lines === 'string' ? lines : pre.getAttribute('data-line');",
                    "\t",
                    "\tvar ranges = lines.replace(/\\s+/g, '').split(','),",
                    "\t    offset = +pre.getAttribute('data-line-offset') || 0;",
                    "",
                    "\tvar parseMethod = isLineHeightRounded() ? parseInt : parseFloat;",
                    "\tvar lineHeight = parseMethod(getComputedStyle(pre).lineHeight);",
                    "\tvar hasLineNumbers = hasClass(pre, 'line-numbers');",
                    "",
                    "\tfor (var i=0, currentRange; currentRange = ranges[i++];) {",
                    "\t\tvar range = currentRange.split('-');",
                    "",
                    "\t\tvar start = +range[0],",
                    "\t\t    end = +range[1] || start;",
                    "",
                    "\t\tvar line = pre.querySelector('.line-highlight[data-range=\"' + currentRange + '\"]') || document.createElement('div');",
                    "",
                    "\t\tline.setAttribute('aria-hidden', 'true');",
                    "\t\tline.setAttribute('data-range', currentRange);",
                    "\t\tline.className = (classes || '') + ' line-highlight';",
                    "",
                    "\t\t//if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers",
                    "\t\tif(hasLineNumbers && Prism.plugins.lineNumbers) {",
                    "\t\t\tvar startNode = Prism.plugins.lineNumbers.getLine(pre, start);",
                    "\t\t\tvar endNode = Prism.plugins.lineNumbers.getLine(pre, end);",
                    "\t\t\t",
                    "\t\t\tif (startNode) {",
                    "\t\t\t\tline.style.top = startNode.offsetTop + 'px';",
                    "\t\t\t}",
                    "\t\t\t",
                    "\t\t\tif (endNode) {",
                    "\t\t\t\tline.style.height = (endNode.offsetTop - startNode.offsetTop) + endNode.offsetHeight + 'px';",
                    "\t\t\t}",
                    "\t\t} else {",
                    "\t\t\tline.setAttribute('data-start', start);",
                    "",
                    "\t\t\tif(end > start) {",
                    "\t\t\t\tline.setAttribute('data-end', end);",
                    "\t\t\t}",
                    "\t\t\t",
                    "\t\t\tline.style.top = (start - offset - 1) * lineHeight + 'px';",
                    "",
                    "\t\t\tline.textContent = new Array(end - start + 2).join(' \\n');",
                    "\t\t}",
                    "",
                    "\t\t//allow this to play nicely with the line-numbers plugin",
                    "\t\tif(hasLineNumbers) {",
                    "\t\t\t//need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning",
                    "\t\t\tpre.appendChild(line);",
                    "\t\t} else {",
                    "\t\t\t(pre.querySelector('code') || pre).appendChild(line);",
                    "\t\t}",
                    "\t}",
                    "}",
                    "",
                    "function applyHash() {",
                    "\tvar hash = location.hash.slice(1);",
                    "",
                    "\t// Remove pre-existing temporary lines",
                    "\t$$('.temporary.line-highlight').forEach(function (line) {",
                    "\t\tline.parentNode.removeChild(line);",
                    "\t});",
                    "",
                    "\tvar range = (hash.match(/\\.([\\d,-]+)$/) || [,''])[1];",
                    "",
                    "\tif (!range || document.getElementById(hash)) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar id = hash.slice(0, hash.lastIndexOf('.')),",
                    "\t    pre = document.getElementById(id);",
                    "",
                    "\tif (!pre) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tif (!pre.hasAttribute('data-line')) {",
                    "\t\tpre.setAttribute('data-line', '');",
                    "\t}",
                    "",
                    "\thighlightLines(pre, range, 'temporary ');",
                    "",
                    "\tdocument.querySelector('.temporary.line-highlight').scrollIntoView();",
                    "}",
                    "",
                    "var fakeTimer = 0; // Hack to limit the number of times applyHash() runs",
                    "",
                    "Prism.hooks.add('before-sanity-check', function(env) {",
                    "\tvar pre = env.element.parentNode;",
                    "\tvar lines = pre && pre.getAttribute('data-line');",
                    "",
                    "\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {",
                    "\t\treturn;",
                    "\t}",
                    "\t",
                    "\t/*",
                    "\t* Cleanup for other plugins (e.g. autoloader).",
                    "\t *",
                    "\t * Sometimes <code> blocks are highlighted multiple times. It is necessary",
                    "\t * to cleanup any left-over tags, because the whitespace inside of the <div>",
                    "\t * tags change the content of the <code> tag.",
                    "\t */",
                    "\tvar num = 0;",
                    "\t$$('.line-highlight', pre).forEach(function (line) {",
                    "\t\tnum += line.textContent.length;",
                    "\t\tline.parentNode.removeChild(line);",
                    "\t});",
                    "\t// Remove extra whitespace",
                    "\tif (num && /^( \\n)+$/.test(env.code.slice(-num))) {",
                    "\t\tenv.code = env.code.slice(0, -num);",
                    "\t}",
                    "});",
                    "",
                    "Prism.hooks.add('complete', function completeHook(env) {",
                    "\tvar pre = env.element.parentNode;",
                    "\tvar lines = pre && pre.getAttribute('data-line');",
                    "",
                    "\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tclearTimeout(fakeTimer);",
                    "",
                    "\tvar hasLineNumbers = Prism.plugins.lineNumbers;",
                    "\tvar isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;",
                    "",
                    "\tif (hasClass(pre, 'line-numbers') && hasLineNumbers && !isLineNumbersLoaded) {",
                    "\t\tPrism.hooks.add('line-numbers', completeHook);",
                    "\t} else {",
                    "\t\thighlightLines(pre, lines);",
                    "\t\tfakeTimer = setTimeout(applyHash, 1);",
                    "\t}",
                    "});",
                    "",
                    "\twindow.addEventListener('hashchange', applyHash);",
                    "\twindow.addEventListener('resize', function () {",
                    "\t\tvar preElements = document.querySelectorAll('pre[data-line]');",
                    "\t\tArray.prototype.forEach.call(preElements, function (pre) {",
                    "\t\t\thighlightLines(pre);",
                    "\t\t});",
                    "\t});",
                    "",
                    "})();"
                ]
            },
            "prism-line-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){function e(e,t){return Array.prototype.slice.call((t||document).querySelectorAll(e))}function t(e,t){return t=\" \"+t+\" \",(\" \"+e.className+\" \").replace(/[\\n\\t]/g,\" \").indexOf(t)>-1}function n(e,n,i){n=\"string\"==typeof n?n:e.getAttribute(\"data-line\");for(var o,l=n.replace(/\\s+/g,\"\").split(\",\"),a=+e.getAttribute(\"data-line-offset\")||0,s=r()?parseInt:parseFloat,d=s(getComputedStyle(e).lineHeight),u=t(e,\"line-numbers\"),c=0;o=l[c++];){var p=o.split(\"-\"),m=+p[0],f=+p[1]||m,h=e.querySelector('.line-highlight[data-range=\"'+o+'\"]')||document.createElement(\"div\");if(h.setAttribute(\"aria-hidden\",\"true\"),h.setAttribute(\"data-range\",o),h.className=(i||\"\")+\" line-highlight\",u&&Prism.plugins.lineNumbers){var g=Prism.plugins.lineNumbers.getLine(e,m),y=Prism.plugins.lineNumbers.getLine(e,f);g&&(h.style.top=g.offsetTop+\"px\"),y&&(h.style.height=y.offsetTop-g.offsetTop+y.offsetHeight+\"px\")}else h.setAttribute(\"data-start\",m),f>m&&h.setAttribute(\"data-end\",f),h.style.top=(m-a-1)*d+\"px\",h.textContent=new Array(f-m+2).join(\" \\n\");u?e.appendChild(h):(e.querySelector(\"code\")||e).appendChild(h)}}function i(){var t=location.hash.slice(1);e(\".temporary.line-highlight\").forEach(function(e){e.parentNode.removeChild(e)});var i=(t.match(/\\.([\\d,-]+)$/)||[,\"\"])[1];if(i&&!document.getElementById(t)){var r=t.slice(0,t.lastIndexOf(\".\")),o=document.getElementById(r);o&&(o.hasAttribute(\"data-line\")||o.setAttribute(\"data-line\",\"\"),n(o,i,\"temporary \"),document.querySelector(\".temporary.line-highlight\").scrollIntoView())}}if(\"undefined\"!=typeof self&&self.Prism&&self.document&&document.querySelector){var r=function(){var e;return function(){if(\"undefined\"==typeof e){var t=document.createElement(\"div\");t.style.fontSize=\"13px\",t.style.lineHeight=\"1.5\",t.style.padding=0,t.style.border=0,t.innerHTML=\"&nbsp;<br />&nbsp;\",document.body.appendChild(t),e=38===t.offsetHeight,document.body.removeChild(t)}return e}}(),o=0;Prism.hooks.add(\"before-sanity-check\",function(t){var n=t.element.parentNode,i=n&&n.getAttribute(\"data-line\");if(n&&i&&/pre/i.test(n.nodeName)){var r=0;e(\".line-highlight\",n).forEach(function(e){r+=e.textContent.length,e.parentNode.removeChild(e)}),r&&/^( \\n)+$/.test(t.code.slice(-r))&&(t.code=t.code.slice(0,-r))}}),Prism.hooks.add(\"complete\",function l(e){var r=e.element.parentNode,a=r&&r.getAttribute(\"data-line\");if(r&&a&&/pre/i.test(r.nodeName)){clearTimeout(o);var s=Prism.plugins.lineNumbers,d=e.plugins&&e.plugins.lineNumbers;t(r,\"line-numbers\")&&s&&!d?Prism.hooks.add(\"line-numbers\",l):(n(r,a),o=setTimeout(i,1))}}),window.addEventListener(\"hashchange\",i),window.addEventListener(\"resize\",function(){var e=document.querySelectorAll(\"pre[data-line]\");Array.prototype.forEach.call(e,function(e){n(e)})})}}();"
                ]
            }
        },
        "line-numbers": {
            "index.html": {},
            "prism-line-numbers.css": {},
            "prism-line-numbers.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Plugin name which is used as a class name for <pre> which is activating the plugin",
                    "\t * @type {String}",
                    "\t */",
                    "\tvar PLUGIN_NAME = 'line-numbers';",
                    "\t",
                    "\t/**",
                    "\t * Regular expression used for determining line breaks",
                    "\t * @type {RegExp}",
                    "\t */",
                    "\tvar NEW_LINE_EXP = /\\n(?!$)/g;",
                    "",
                    "\t/**",
                    "\t * Resizes line numbers spans according to height of line of code",
                    "\t * @param {Element} element <pre> element",
                    "\t */",
                    "\tvar _resizeElement = function (element) {",
                    "\t\tvar codeStyles = getStyles(element);",
                    "\t\tvar whiteSpace = codeStyles['white-space'];",
                    "",
                    "\t\tif (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {",
                    "\t\t\tvar codeElement = element.querySelector('code');",
                    "\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');",
                    "\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');",
                    "\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);",
                    "",
                    "\t\t\tif (!lineNumberSizer) {",
                    "\t\t\t\tlineNumberSizer = document.createElement('span');",
                    "\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';",
                    "",
                    "\t\t\t\tcodeElement.appendChild(lineNumberSizer);",
                    "\t\t\t}",
                    "",
                    "\t\t\tlineNumberSizer.style.display = 'block';",
                    "",
                    "\t\t\tcodeLines.forEach(function (line, lineNumber) {",
                    "\t\t\t\tlineNumberSizer.textContent = line || '\\n';",
                    "\t\t\t\tvar lineSize = lineNumberSizer.getBoundingClientRect().height;",
                    "\t\t\t\tlineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';",
                    "\t\t\t});",
                    "",
                    "\t\t\tlineNumberSizer.textContent = '';",
                    "\t\t\tlineNumberSizer.style.display = 'none';",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns style declarations for the element",
                    "\t * @param {Element} element",
                    "\t */",
                    "\tvar getStyles = function (element) {",
                    "\t\tif (!element) {",
                    "\t\t\treturn null;",
                    "\t\t}",
                    "",
                    "\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);",
                    "\t};",
                    "",
                    "\twindow.addEventListener('resize', function () {",
                    "\t\tArray.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "\t\tif (!env.code) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// works only for <code> wrapped inside <pre> (not inline)",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tvar clsReg = /\\s*\\bline-numbers\\b\\s*/;",
                    "\t\tif (",
                    "\t\t\t!pre || !/pre/i.test(pre.nodeName) ||",
                    "\t\t\t// Abort only if nor the <pre> nor the <code> have the class",
                    "\t\t\t(!clsReg.test(pre.className) && !clsReg.test(env.element.className))",
                    "\t\t) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (env.element.querySelector('.line-numbers-rows')) {",
                    "\t\t\t// Abort if line numbers already exists",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (clsReg.test(env.element.className)) {",
                    "\t\t\t// Remove the class 'line-numbers' from the <code>",
                    "\t\t\tenv.element.className = env.element.className.replace(clsReg, ' ');",
                    "\t\t}",
                    "\t\tif (!clsReg.test(pre.className)) {",
                    "\t\t\t// Add the class 'line-numbers' to the <pre>",
                    "\t\t\tpre.className += ' line-numbers';",
                    "\t\t}",
                    "",
                    "\t\tvar match = env.code.match(NEW_LINE_EXP);",
                    "\t\tvar linesNum = match ? match.length + 1 : 1;",
                    "\t\tvar lineNumbersWrapper;",
                    "",
                    "\t\tvar lines = new Array(linesNum + 1);",
                    "\t\tlines = lines.join('<span></span>');",
                    "",
                    "\t\tlineNumbersWrapper = document.createElement('span');",
                    "\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');",
                    "\t\tlineNumbersWrapper.className = 'line-numbers-rows';",
                    "\t\tlineNumbersWrapper.innerHTML = lines;",
                    "",
                    "\t\tif (pre.hasAttribute('data-start')) {",
                    "\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);",
                    "\t\t}",
                    "",
                    "\t\tenv.element.appendChild(lineNumbersWrapper);",
                    "",
                    "\t\t_resizeElement(pre);",
                    "",
                    "\t\tPrism.hooks.run('line-numbers', env);",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('line-numbers', function (env) {",
                    "\t\tenv.plugins = env.plugins || {};",
                    "\t\tenv.plugins.lineNumbers = true;",
                    "\t});",
                    "\t",
                    "\t/**",
                    "\t * Global exports",
                    "\t */",
                    "\tPrism.plugins.lineNumbers = {",
                    "\t\t/**",
                    "\t\t * Get node for provided line number",
                    "\t\t * @param {Element} element pre element",
                    "\t\t * @param {Number} number line number",
                    "\t\t * @return {Element|undefined}",
                    "\t\t */",
                    "\t\tgetLine: function (element, number) {",
                    "\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');",
                    "\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;",
                    "\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);",
                    "",
                    "\t\t\tif (number < lineNumberStart) {",
                    "\t\t\t\tnumber = lineNumberStart;",
                    "\t\t\t}",
                    "\t\t\tif (number > lineNumberEnd) {",
                    "\t\t\t\tnumber = lineNumberEnd;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar lineIndex = number - lineNumberStart;",
                    "",
                    "\t\t\treturn lineNumberRows.children[lineIndex];",
                    "\t\t}",
                    "\t};",
                    "",
                    "}());"
                ]
            },
            "prism-line-numbers.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var e=\"line-numbers\",t=/\\n(?!$)/g,n=function(e){var n=r(e),s=n[\"white-space\"];if(\"pre-wrap\"===s||\"pre-line\"===s){var l=e.querySelector(\"code\"),i=e.querySelector(\".line-numbers-rows\"),a=e.querySelector(\".line-numbers-sizer\"),o=l.textContent.split(t);a||(a=document.createElement(\"span\"),a.className=\"line-numbers-sizer\",l.appendChild(a)),a.style.display=\"block\",o.forEach(function(e,t){a.textContent=e||\"\\n\";var n=a.getBoundingClientRect().height;i.children[t].style.height=n+\"px\"}),a.textContent=\"\",a.style.display=\"none\"}},r=function(e){return e?window.getComputedStyle?getComputedStyle(e):e.currentStyle||null:null};window.addEventListener(\"resize\",function(){Array.prototype.forEach.call(document.querySelectorAll(\"pre.\"+e),n)}),Prism.hooks.add(\"complete\",function(e){if(e.code){var r=e.element.parentNode,s=/\\s*\\bline-numbers\\b\\s*/;if(r&&/pre/i.test(r.nodeName)&&(s.test(r.className)||s.test(e.element.className))&&!e.element.querySelector(\".line-numbers-rows\")){s.test(e.element.className)&&(e.element.className=e.element.className.replace(s,\" \")),s.test(r.className)||(r.className+=\" line-numbers\");var l,i=e.code.match(t),a=i?i.length+1:1,o=new Array(a+1);o=o.join(\"<span></span>\"),l=document.createElement(\"span\"),l.setAttribute(\"aria-hidden\",\"true\"),l.className=\"line-numbers-rows\",l.innerHTML=o,r.hasAttribute(\"data-start\")&&(r.style.counterReset=\"linenumber \"+(parseInt(r.getAttribute(\"data-start\"),10)-1)),e.element.appendChild(l),n(r),Prism.hooks.run(\"line-numbers\",e)}}}),Prism.hooks.add(\"line-numbers\",function(e){e.plugins=e.plugins||{},e.plugins.lineNumbers=!0}),Prism.plugins.lineNumbers={getLine:function(t,n){if(\"PRE\"===t.tagName&&t.classList.contains(e)){var r=t.querySelector(\".line-numbers-rows\"),s=parseInt(t.getAttribute(\"data-start\"),10)||1,l=s+(r.children.length-1);s>n&&(n=s),n>l&&(n=l);var i=n-s;return r.children[i]}}}}}();"
                ]
            }
        },
        "normalize-whitespace": {
            "demo.html": {},
            "index.html": {},
            "prism-normalize-whitespace.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "var assign = Object.assign || function (obj1, obj2) {",
                    "\tfor (var name in obj2) {",
                    "\t\tif (obj2.hasOwnProperty(name))",
                    "\t\t\tobj1[name] = obj2[name];",
                    "\t}",
                    "\treturn obj1;",
                    "}",
                    "",
                    "function NormalizeWhitespace(defaults) {",
                    "\tthis.defaults = assign({}, defaults);",
                    "}",
                    "",
                    "function toCamelCase(value) {",
                    "\treturn value.replace(/-(\\w)/g, function(match, firstChar) {",
                    "\t\treturn firstChar.toUpperCase();",
                    "\t});",
                    "}",
                    "",
                    "function tabLen(str) {",
                    "\tvar res = 0;",
                    "\tfor (var i = 0; i < str.length; ++i) {",
                    "\t\tif (str.charCodeAt(i) == '\\t'.charCodeAt(0))",
                    "\t\t\tres += 3;",
                    "\t}",
                    "\treturn str.length + res;",
                    "}",
                    "",
                    "NormalizeWhitespace.prototype = {",
                    "\tsetDefaults: function (defaults) {",
                    "\t\tthis.defaults = assign(this.defaults, defaults);",
                    "\t},",
                    "\tnormalize: function (input, settings) {",
                    "\t\tsettings = assign(this.defaults, settings);",
                    "",
                    "\t\tfor (var name in settings) {",
                    "\t\t\tvar methodName = toCamelCase(name);",
                    "\t\t\tif (name !== \"normalize\" && methodName !== 'setDefaults' &&",
                    "\t\t\t\t\tsettings[name] && this[methodName]) {",
                    "\t\t\t\tinput = this[methodName].call(this, input, settings[name]);",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\treturn input;",
                    "\t},",
                    "",
                    "\t/*",
                    "\t * Normalization methods",
                    "\t */",
                    "\tleftTrim: function (input) {",
                    "\t\treturn input.replace(/^\\s+/, '');",
                    "\t},",
                    "\trightTrim: function (input) {",
                    "\t\treturn input.replace(/\\s+$/, '');",
                    "\t},",
                    "\ttabsToSpaces: function (input, spaces) {",
                    "\t\tspaces = spaces|0 || 4;",
                    "\t\treturn input.replace(/\\t/g, new Array(++spaces).join(' '));",
                    "\t},",
                    "\tspacesToTabs: function (input, spaces) {",
                    "\t\tspaces = spaces|0 || 4;",
                    "\t\treturn input.replace(new RegExp(' {' + spaces + '}', 'g'), '\\t');",
                    "\t},",
                    "\tremoveTrailing: function (input) {",
                    "\t\treturn input.replace(/\\s*?$/gm, '');",
                    "\t},",
                    "\t// Support for deprecated plugin remove-initial-line-feed",
                    "\tremoveInitialLineFeed: function (input) {",
                    "\t\treturn input.replace(/^(?:\\r?\\n|\\r)/, '');",
                    "\t},",
                    "\tremoveIndent: function (input) {",
                    "\t\tvar indents = input.match(/^[^\\S\\n\\r]*(?=\\S)/gm);",
                    "",
                    "\t\tif (!indents || !indents[0].length)",
                    "\t\t\treturn input;",
                    "",
                    "\t\tindents.sort(function(a, b){return a.length - b.length; });",
                    "",
                    "\t\tif (!indents[0].length)",
                    "\t\t\treturn input;",
                    "",
                    "\t\treturn input.replace(new RegExp('^' + indents[0], 'gm'), '');",
                    "\t},",
                    "\tindent: function (input, tabs) {",
                    "\t\treturn input.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++tabs).join('\\t') + '$&');",
                    "\t},",
                    "\tbreakLines: function (input, characters) {",
                    "\t\tcharacters = (characters === true) ? 80 : characters|0 || 80;",
                    "",
                    "\t\tvar lines = input.split('\\n');",
                    "\t\tfor (var i = 0; i < lines.length; ++i) {",
                    "\t\t\tif (tabLen(lines[i]) <= characters)",
                    "\t\t\t\tcontinue;",
                    "",
                    "\t\t\tvar line = lines[i].split(/(\\s+)/g),",
                    "\t\t\t    len = 0;",
                    "",
                    "\t\t\tfor (var j = 0; j < line.length; ++j) {",
                    "\t\t\t\tvar tl = tabLen(line[j]);",
                    "\t\t\t\tlen += tl;",
                    "\t\t\t\tif (len > characters) {",
                    "\t\t\t\t\tline[j] = '\\n' + line[j];",
                    "\t\t\t\t\tlen = tl;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\tlines[i] = line.join('');",
                    "\t\t}",
                    "\t\treturn lines.join('\\n');",
                    "\t}",
                    "};",
                    "",
                    "// Support node modules",
                    "if (typeof module !== 'undefined' && module.exports) {",
                    "\tmodule.exports = NormalizeWhitespace;",
                    "}",
                    "",
                    "// Exit if prism is not loaded",
                    "if (typeof Prism === 'undefined') {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.plugins.NormalizeWhitespace = new NormalizeWhitespace({",
                    "\t'remove-trailing': true,",
                    "\t'remove-indent': true,",
                    "\t'left-trim': true,",
                    "\t'right-trim': true,",
                    "\t/*'break-lines': 80,",
                    "\t'indent': 2,",
                    "\t'remove-initial-line-feed': false,",
                    "\t'tabs-to-spaces': 4,",
                    "\t'spaces-to-tabs': 4*/",
                    "});",
                    "",
                    "Prism.hooks.add('before-sanity-check', function (env) {",
                    "\tvar Normalizer = Prism.plugins.NormalizeWhitespace;",
                    "",
                    "\t// Check settings",
                    "\tif (env.settings && env.settings['whitespace-normalization'] === false) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Simple mode if there is no env.element",
                    "\tif ((!env.element || !env.element.parentNode) && env.code) {",
                    "\t\tenv.code = Normalizer.normalize(env.code, env.settings);",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Normal mode",
                    "\tvar pre = env.element.parentNode;",
                    "\tvar clsReg = /\\bno-whitespace-normalization\\b/;",
                    "\tif (!env.code || !pre || pre.nodeName.toLowerCase() !== 'pre' ||",
                    "\t\t\tclsReg.test(pre.className) || clsReg.test(env.element.className))",
                    "\t\treturn;",
                    "",
                    "\tvar children = pre.childNodes,",
                    "\t    before = '',",
                    "\t    after = '',",
                    "\t    codeFound = false;",
                    "",
                    "\t// Move surrounding whitespace from the <pre> tag into the <code> tag",
                    "\tfor (var i = 0; i < children.length; ++i) {",
                    "\t\tvar node = children[i];",
                    "",
                    "\t\tif (node == env.element) {",
                    "\t\t\tcodeFound = true;",
                    "\t\t} else if (node.nodeName === \"#text\") {",
                    "\t\t\tif (codeFound) {",
                    "\t\t\t\tafter += node.nodeValue;",
                    "\t\t\t} else {",
                    "\t\t\t\tbefore += node.nodeValue;",
                    "\t\t\t}",
                    "",
                    "\t\t\tpre.removeChild(node);",
                    "\t\t\t--i;",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tif (!env.element.children.length || !Prism.plugins.KeepMarkup) {",
                    "\t\tenv.code = before + env.code + after;",
                    "\t\tenv.code = Normalizer.normalize(env.code, env.settings);",
                    "\t} else {",
                    "\t\t// Preserve markup for keep-markup plugin",
                    "\t\tvar html = before + env.element.innerHTML + after;",
                    "\t\tenv.element.innerHTML = Normalizer.normalize(html, env.settings);",
                    "\t\tenv.code = env.element.textContent;",
                    "\t}",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-normalize-whitespace.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){function e(e){this.defaults=r({},e)}function n(e){return e.replace(/-(\\w)/g,function(e,n){return n.toUpperCase()})}function t(e){for(var n=0,t=0;t<e.length;++t)e.charCodeAt(t)==\"\t\".charCodeAt(0)&&(n+=3);return e.length+n}var r=Object.assign||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e};e.prototype={setDefaults:function(e){this.defaults=r(this.defaults,e)},normalize:function(e,t){t=r(this.defaults,t);for(var i in t){var o=n(i);\"normalize\"!==i&&\"setDefaults\"!==o&&t[i]&&this[o]&&(e=this[o].call(this,e,t[i]))}return e},leftTrim:function(e){return e.replace(/^\\s+/,\"\")},rightTrim:function(e){return e.replace(/\\s+$/,\"\")},tabsToSpaces:function(e,n){return n=0|n||4,e.replace(/\\t/g,new Array(++n).join(\" \"))},spacesToTabs:function(e,n){return n=0|n||4,e.replace(new RegExp(\" {\"+n+\"}\",\"g\"),\"\t\")},removeTrailing:function(e){return e.replace(/\\s*?$/gm,\"\")},removeInitialLineFeed:function(e){return e.replace(/^(?:\\r?\\n|\\r)/,\"\")},removeIndent:function(e){var n=e.match(/^[^\\S\\n\\r]*(?=\\S)/gm);return n&&n[0].length?(n.sort(function(e,n){return e.length-n.length}),n[0].length?e.replace(new RegExp(\"^\"+n[0],\"gm\"),\"\"):e):e},indent:function(e,n){return e.replace(/^[^\\S\\n\\r]*(?=\\S)/gm,new Array(++n).join(\"\t\")+\"$&\")},breakLines:function(e,n){n=n===!0?80:0|n||80;for(var r=e.split(\"\\n\"),i=0;i<r.length;++i)if(!(t(r[i])<=n)){for(var o=r[i].split(/(\\s+)/g),a=0,s=0;s<o.length;++s){var l=t(o[s]);a+=l,a>n&&(o[s]=\"\\n\"+o[s],a=l)}r[i]=o.join(\"\")}return r.join(\"\\n\")}},\"undefined\"!=typeof module&&module.exports&&(module.exports=e),\"undefined\"!=typeof Prism&&(Prism.plugins.NormalizeWhitespace=new e({\"remove-trailing\":!0,\"remove-indent\":!0,\"left-trim\":!0,\"right-trim\":!0}),Prism.hooks.add(\"before-sanity-check\",function(e){var n=Prism.plugins.NormalizeWhitespace;if(!e.settings||e.settings[\"whitespace-normalization\"]!==!1){if((!e.element||!e.element.parentNode)&&e.code)return e.code=n.normalize(e.code,e.settings),void 0;var t=e.element.parentNode,r=/\\bno-whitespace-normalization\\b/;if(e.code&&t&&\"pre\"===t.nodeName.toLowerCase()&&!r.test(t.className)&&!r.test(e.element.className)){for(var i=t.childNodes,o=\"\",a=\"\",s=!1,l=0;l<i.length;++l){var c=i[l];c==e.element?s=!0:\"#text\"===c.nodeName&&(s?a+=c.nodeValue:o+=c.nodeValue,t.removeChild(c),--l)}if(e.element.children.length&&Prism.plugins.KeepMarkup){var u=o+e.element.innerHTML+a;e.element.innerHTML=n.normalize(u,e.settings),e.code=e.element.textContent}else e.code=o+e.code+a,e.code=n.normalize(e.code,e.settings)}}}))}();"
                ]
            }
        },
        "previewers": {
            "index.html": {},
            "prism-previewers.css": {},
            "prism-previewers.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\t!self.document || !Function.prototype.bind",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar previewers = {",
                    "\t\t// gradient must be defined before color and angle",
                    "\t\t'gradient': {",
                    "\t\t\tcreate: (function () {",
                    "",
                    "\t\t\t\t// Stores already processed gradients so that we don't",
                    "\t\t\t\t// make the conversion every time the previewer is shown",
                    "\t\t\t\tvar cache = {};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Returns a W3C-valid linear gradient",
                    "\t\t\t\t * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)",
                    "\t\t\t\t * @param {string} func Gradient function name (\"linear-gradient\")",
                    "\t\t\t\t * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CLinearGradient = function(prefix, func, values) {",
                    "\t\t\t\t\t// Default value for angle",
                    "\t\t\t\t\tvar angle = '180deg';",
                    "",
                    "\t\t\t\t\tif (/^(?:-?\\d*\\.?\\d+(?:deg|rad)|to\\b|top|right|bottom|left)/.test(values[0])) {",
                    "\t\t\t\t\t\tangle = values.shift();",
                    "\t\t\t\t\t\tif (angle.indexOf('to ') < 0) {",
                    "\t\t\t\t\t\t\t// Angle uses old keywords",
                    "\t\t\t\t\t\t\t// W3C syntax uses \"to\" + opposite keywords",
                    "\t\t\t\t\t\t\tif (angle.indexOf('top') >= 0) {",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom right';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom left';",
                    "\t\t\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('bottom') >= 0) {",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top right';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top left';",
                    "\t\t\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\tangle = 'to right';",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\tangle = 'to left';",
                    "\t\t\t\t\t\t\t} else if (prefix) {",
                    "\t\t\t\t\t\t\t\t// Angle is shifted by 90deg in prefixed gradients",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('deg') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = (90 - parseFloat(angle)) + 'deg';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('rad') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = (Math.PI / 2 - parseFloat(angle)) + 'rad';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\treturn func + '(' + angle + ',' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Returns a W3C-valid radial gradient",
                    "\t\t\t\t * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)",
                    "\t\t\t\t * @param {string} func Gradient function name (\"linear-gradient\")",
                    "\t\t\t\t * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CRadialGradient = function(prefix, func, values) {",
                    "\t\t\t\t\tif (values[0].indexOf('at') < 0) {",
                    "\t\t\t\t\t\t// Looks like old syntax",
                    "",
                    "\t\t\t\t\t\t// Default values",
                    "\t\t\t\t\t\tvar position = 'center';",
                    "\t\t\t\t\t\tvar shape = 'ellipse';",
                    "\t\t\t\t\t\tvar size = 'farthest-corner';",
                    "",
                    "\t\t\t\t\t\tif (/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(values[0])) {",
                    "\t\t\t\t\t\t\t// Found a position",
                    "\t\t\t\t\t\t\t// Remove angle value, if any",
                    "\t\t\t\t\t\t\tposition = values.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/, '');",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tif (/\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(values[0])) {",
                    "\t\t\t\t\t\t\t// Found a shape and/or size",
                    "\t\t\t\t\t\t\tvar shapeSizeParts = values.shift().split(/\\s+/);",
                    "\t\t\t\t\t\t\tif (shapeSizeParts[0] && (shapeSizeParts[0] === 'circle' || shapeSizeParts[0] === 'ellipse')) {",
                    "\t\t\t\t\t\t\t\tshape = shapeSizeParts.shift();",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\tif (shapeSizeParts[0]) {",
                    "\t\t\t\t\t\t\t\tsize = shapeSizeParts.shift();",
                    "\t\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\t\t// Old keywords are converted to their synonyms",
                    "\t\t\t\t\t\t\tif (size === 'cover') {",
                    "\t\t\t\t\t\t\t\tsize = 'farthest-corner';",
                    "\t\t\t\t\t\t\t} else if (size === 'contain') {",
                    "\t\t\t\t\t\t\t\tsize = 'clothest-side';",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\treturn func + '(' + shape + ' ' + size + ' at ' + position + ',' + values.join(',') + ')';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\treturn func + '(' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Converts a gradient to a W3C-valid one",
                    "\t\t\t\t * Does not support old webkit syntax (-webkit-gradient(linear...) and -webkit-gradient(radial...))",
                    "\t\t\t\t * @param {string} gradient The CSS gradient",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CGradient = function(gradient) {",
                    "\t\t\t\t\tif (cache[gradient]) {",
                    "\t\t\t\t\t\treturn cache[gradient];",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tvar parts = gradient.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/);",
                    "\t\t\t\t\t// \"\", \"-moz-\", etc.",
                    "\t\t\t\t\tvar prefix = parts && parts[1];",
                    "\t\t\t\t\t// \"linear-gradient\", \"radial-gradient\", etc.",
                    "\t\t\t\t\tvar func = parts && parts[2];",
                    "",
                    "\t\t\t\t\tvar values = gradient.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g, '').split(/\\s*,\\s*/);",
                    "",
                    "\t\t\t\t\tif (func.indexOf('linear') >= 0) {",
                    "\t\t\t\t\t\treturn cache[gradient] = convertToW3CLinearGradient(prefix, func, values);",
                    "\t\t\t\t\t} else if (func.indexOf('radial') >= 0) {",
                    "\t\t\t\t\t\treturn cache[gradient] = convertToW3CRadialGradient(prefix, func, values);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\treturn cache[gradient] = func + '(' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\treturn function () {",
                    "\t\t\t\t\tnew Prism.plugins.Previewer('gradient', function(value) {",
                    "\t\t\t\t\t\tthis.firstChild.style.backgroundImage = '';",
                    "\t\t\t\t\t\tthis.firstChild.style.backgroundImage = convertToW3CGradient(value);",
                    "\t\t\t\t\t\treturn !!this.firstChild.style.backgroundImage;",
                    "\t\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\t\tthis._elt.innerHTML = '<div></div>';",
                    "\t\t\t\t\t});",
                    "\t\t\t\t};",
                    "\t\t\t}()),",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'gradient': {",
                    "\t\t\t\t\tpattern: /(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'angle': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('angle', function(value) {",
                    "\t\t\t\t\tvar num = parseFloat(value);",
                    "\t\t\t\t\tvar unit = value.match(/[a-z]+$/i);",
                    "\t\t\t\t\tvar max, percentage;",
                    "\t\t\t\t\tif (!num || !unit) {",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tunit = unit[0];",
                    "",
                    "\t\t\t\t\tswitch(unit) {",
                    "\t\t\t\t\t\tcase 'deg':",
                    "\t\t\t\t\t\t\tmax = 360;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'grad':",
                    "\t\t\t\t\t\t\tmax = 400;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'rad':",
                    "\t\t\t\t\t\t\tmax = 2 * Math.PI;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'turn':",
                    "\t\t\t\t\t\t\tmax = 1;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tpercentage = 100 * num/max;",
                    "\t\t\t\t\tpercentage %= 100;",
                    "",
                    "\t\t\t\t\tthis[(num < 0? 'set' : 'remove') + 'Attribute']('data-negative', '');",
                    "\t\t\t\t\tthis.querySelector('circle').style.strokeDasharray = Math.abs(percentage) + ',500';",
                    "\t\t\t\t\treturn true;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' +",
                    "\t\t\t\t\t\t'<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'angle': /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+(?:deg|g?rad|turn)\\b/i",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'operator',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'color': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('color', function(value) {",
                    "\t\t\t\t\tthis.style.backgroundColor = '';",
                    "\t\t\t\t\tthis.style.backgroundColor = value;",
                    "\t\t\t\t\treturn !!this.style.backgroundColor;",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'color': {",
                    "\t\t\t\t\tpattern: /\\B#(?:[0-9a-f]{3}){1,2}\\b|\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B|\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'easing': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('easing', function (value) {",
                    "",
                    "\t\t\t\t\tvalue = {",
                    "\t\t\t\t\t\t'linear': '0,0,1,1',",
                    "\t\t\t\t\t\t'ease': '.25,.1,.25,1',",
                    "\t\t\t\t\t\t'ease-in': '.42,0,1,1',",
                    "\t\t\t\t\t\t'ease-out': '0,0,.58,1',",
                    "\t\t\t\t\t\t'ease-in-out':'.42,0,.58,1'",
                    "\t\t\t\t\t}[value] || value;",
                    "",
                    "\t\t\t\t\tvar p = value.match(/-?\\d*\\.?\\d+/g);",
                    "",
                    "\t\t\t\t\tif(p.length === 4) {",
                    "\t\t\t\t\t\tp = p.map(function(p, i) { return (i % 2? 1 - p : p) * 100; });",
                    "",
                    "\t\t\t\t\t\tthis.querySelector('path').setAttribute('d', 'M0,100 C' + p[0] + ',' + p[1] + ', ' + p[2] + ',' + p[3] + ', 100,0');",
                    "",
                    "\t\t\t\t\t\tvar lines = this.querySelectorAll('line');",
                    "\t\t\t\t\t\tlines[0].setAttribute('x2', p[0]);",
                    "\t\t\t\t\t\tlines[0].setAttribute('y2', p[1]);",
                    "\t\t\t\t\t\tlines[1].setAttribute('x2', p[2]);",
                    "\t\t\t\t\t\tlines[1].setAttribute('y2', p[3]);",
                    "",
                    "\t\t\t\t\t\treturn true;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\treturn false;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\">' +",
                    "\t\t\t\t\t\t'<defs>' +",
                    "\t\t\t\t\t\t'<marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\">' +",
                    "\t\t\t\t\t\t'<circle cx=\"2\" cy=\"2\" r=\"1.5\" />' +",
                    "\t\t\t\t\t\t'</marker>' +",
                    "\t\t\t\t\t\t'</defs>' +",
                    "\t\t\t\t\t\t'<path d=\"M0,100 C20,50, 40,30, 100,0\" />' +",
                    "\t\t\t\t\t\t'<line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" />' +",
                    "\t\t\t\t\t\t'<line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" />' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'easing': {",
                    "\t\t\t\t\tpattern: /\\bcubic-bezier\\((?:-?\\d*\\.?\\d+,\\s*){3}-?\\d*\\.?\\d+\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "",
                    "\t\t'time': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('time', function(value) {",
                    "\t\t\t\t\tvar num = parseFloat(value);",
                    "\t\t\t\t\tvar unit = value.match(/[a-z]+$/i);",
                    "\t\t\t\t\tif (!num || !unit) {",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tunit = unit[0];",
                    "\t\t\t\t\tthis.querySelector('circle').style.animationDuration = 2 * num + unit;",
                    "\t\t\t\t\treturn true;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' +",
                    "\t\t\t\t\t\t'<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'time': /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+m?s\\b/i",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'operator',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns the absolute X, Y offsets for an element",
                    "\t * @param {HTMLElement} element",
                    "\t * @returns {{top: number, right: number, bottom: number, left: number}}",
                    "\t */",
                    "\tvar getOffset = function (element) {",
                    "\t\tvar left = 0, top = 0, el = element;",
                    "",
                    "\t\tif (el.parentNode) {",
                    "\t\t\tdo {",
                    "\t\t\t\tleft += el.offsetLeft;",
                    "\t\t\t\ttop += el.offsetTop;",
                    "\t\t\t} while ((el = el.offsetParent) && el.nodeType < 9);",
                    "",
                    "\t\t\tel = element;",
                    "",
                    "\t\t\tdo {",
                    "\t\t\t\tleft -= el.scrollLeft;",
                    "\t\t\t\ttop -= el.scrollTop;",
                    "\t\t\t} while ((el = el.parentNode) && !/body/i.test(el.nodeName));",
                    "\t\t}",
                    "",
                    "\t\treturn {",
                    "\t\t\ttop: top,",
                    "\t\t\tright: innerWidth - left - element.offsetWidth,",
                    "\t\t\tbottom: innerHeight - top - element.offsetHeight,",
                    "\t\t\tleft: left",
                    "\t\t};",
                    "\t};",
                    "",
                    "\tvar tokenRegexp = /(?:^|\\s)token(?=$|\\s)/;",
                    "\tvar activeRegexp = /(?:^|\\s)active(?=$|\\s)/g;",
                    "\tvar flippedRegexp = /(?:^|\\s)flipped(?=$|\\s)/g;",
                    "",
                    "\t/**",
                    "\t * Previewer constructor",
                    "\t * @param {string} type Unique previewer type",
                    "\t * @param {function} updater Function that will be called on mouseover.",
                    "\t * @param {string[]|string=} supportedLanguages Aliases of the languages this previewer must be enabled for. Defaults to \"*\", all languages.",
                    "\t * @param {function=} initializer Function that will be called on initialization.",
                    "\t * @constructor",
                    "\t */",
                    "\tvar Previewer = function (type, updater, supportedLanguages, initializer) {",
                    "\t\tthis._elt = null;",
                    "\t\tthis._type = type;",
                    "\t\tthis._clsRegexp = RegExp('(?:^|\\\\s)' + type + '(?=$|\\\\s)');",
                    "\t\tthis._token = null;",
                    "\t\tthis.updater = updater;",
                    "\t\tthis._mouseout = this.mouseout.bind(this);",
                    "\t\tthis.initializer = initializer;",
                    "",
                    "\t\tvar self = this;",
                    "",
                    "\t\tif (!supportedLanguages) {",
                    "\t\t\tsupportedLanguages = ['*'];",
                    "\t\t}",
                    "\t\tif (Prism.util.type(supportedLanguages) !== 'Array') {",
                    "\t\t\tsupportedLanguages = [supportedLanguages];",
                    "\t\t}",
                    "\t\tsupportedLanguages.forEach(function (lang) {",
                    "\t\t\tif (typeof lang !== 'string') {",
                    "\t\t\t\tlang = lang.lang;",
                    "\t\t\t}",
                    "\t\t\tif (!Previewer.byLanguages[lang]) {",
                    "\t\t\t\tPreviewer.byLanguages[lang] = [];",
                    "\t\t\t}",
                    "\t\t\tif (Previewer.byLanguages[lang].indexOf(self) < 0) {",
                    "\t\t\t\tPreviewer.byLanguages[lang].push(self);",
                    "\t\t\t}",
                    "\t\t});",
                    "\t\tPreviewer.byType[type] = this;",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Creates the HTML element for the previewer.",
                    "\t */",
                    "\tPreviewer.prototype.init = function () {",
                    "\t\tif (this._elt) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tthis._elt = document.createElement('div');",
                    "\t\tthis._elt.className = 'prism-previewer prism-previewer-' + this._type;",
                    "\t\tdocument.body.appendChild(this._elt);",
                    "\t\tif(this.initializer) {",
                    "\t\t\tthis.initializer();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPreviewer.prototype.isDisabled = function (token) {",
                    "\t\tdo {",
                    "\t\t\tif (token.hasAttribute && token.hasAttribute('data-previewers')) {",
                    "\t\t\t\tvar previewers = token.getAttribute('data-previewers');",
                    "\t\t\t\treturn (previewers || '').split(/\\s+/).indexOf(this._type) === -1;",
                    "\t\t\t}",
                    "\t\t} while(token = token.parentNode);",
                    "\t\treturn false;",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Checks the class name of each hovered element",
                    "\t * @param token",
                    "\t */",
                    "\tPreviewer.prototype.check = function (token) {",
                    "\t\tif (tokenRegexp.test(token.className) && this.isDisabled(token)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tdo {",
                    "\t\t\tif (tokenRegexp.test(token.className) && this._clsRegexp.test(token.className)) {",
                    "\t\t\t\tbreak;",
                    "\t\t\t}",
                    "\t\t} while(token = token.parentNode);",
                    "",
                    "\t\tif (token && token !== this._token) {",
                    "\t\t\tthis._token = token;",
                    "\t\t\tthis.show();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Called on mouseout",
                    "\t */",
                    "\tPreviewer.prototype.mouseout = function() {",
                    "\t\tthis._token.removeEventListener('mouseout', this._mouseout, false);",
                    "\t\tthis._token = null;",
                    "\t\tthis.hide();",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Shows the previewer positioned properly for the current token.",
                    "\t */",
                    "\tPreviewer.prototype.show = function () {",
                    "\t\tif (!this._elt) {",
                    "\t\t\tthis.init();",
                    "\t\t}",
                    "\t\tif (!this._token) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (this.updater.call(this._elt, this._token.textContent)) {",
                    "\t\t\tthis._token.addEventListener('mouseout', this._mouseout, false);",
                    "",
                    "\t\t\tvar offset = getOffset(this._token);",
                    "\t\t\tthis._elt.className += ' active';",
                    "",
                    "\t\t\tif (offset.top - this._elt.offsetHeight > 0) {",
                    "\t\t\t\tthis._elt.className = this._elt.className.replace(flippedRegexp, '');",
                    "\t\t\t\tthis._elt.style.top = offset.top + 'px';",
                    "\t\t\t\tthis._elt.style.bottom = '';",
                    "\t\t\t} else {",
                    "\t\t\t\tthis._elt.className +=  ' flipped';",
                    "\t\t\t\tthis._elt.style.bottom = offset.bottom + 'px';",
                    "\t\t\t\tthis._elt.style.top = '';",
                    "\t\t\t}",
                    "",
                    "\t\t\tthis._elt.style.left = offset.left + Math.min(200, this._token.offsetWidth / 2) + 'px';",
                    "\t\t} else {",
                    "\t\t\tthis.hide();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Hides the previewer.",
                    "\t */",
                    "\tPreviewer.prototype.hide = function () {",
                    "\t\tthis._elt.className = this._elt.className.replace(activeRegexp, '');",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Map of all registered previewers by language",
                    "\t * @type {{}}",
                    "\t */",
                    "\tPreviewer.byLanguages = {};",
                    "",
                    "\t/**",
                    "\t * Map of all registered previewers by type",
                    "\t * @type {{}}",
                    "\t */",
                    "\tPreviewer.byType = {};",
                    "",
                    "\t/**",
                    "\t * Initializes the mouseover event on the code block.",
                    "\t * @param {HTMLElement} elt The code block (env.element)",
                    "\t * @param {string} lang The language (env.language)",
                    "\t */",
                    "\tPreviewer.initEvents = function (elt, lang) {",
                    "\t\tvar previewers = [];",
                    "\t\tif (Previewer.byLanguages[lang]) {",
                    "\t\t\tpreviewers = previewers.concat(Previewer.byLanguages[lang]);",
                    "\t\t}",
                    "\t\tif (Previewer.byLanguages['*']) {",
                    "\t\t\tpreviewers = previewers.concat(Previewer.byLanguages['*']);",
                    "\t\t}",
                    "\t\telt.addEventListener('mouseover', function (e) {",
                    "\t\t\tvar target = e.target;",
                    "\t\t\tpreviewers.forEach(function (previewer) {",
                    "\t\t\t\tpreviewer.check(target);",
                    "\t\t\t});",
                    "\t\t}, false);",
                    "\t};",
                    "\tPrism.plugins.Previewer = Previewer;",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\tfor (var previewer in previewers) {",
                    "\t\t\tvar languages = previewers[previewer].languages;",
                    "\t\t\tif (env.language && languages[env.language] && !languages[env.language].initialized) {",
                    "\t\t\t\tvar lang = languages[env.language];",
                    "\t\t\t\tif (Prism.util.type(lang) !== 'Array') {",
                    "\t\t\t\t\tlang = [lang];",
                    "\t\t\t\t}",
                    "\t\t\t\tlang.forEach(function (lang) {",
                    "\t\t\t\t\tvar before, inside, root, skip;",
                    "\t\t\t\t\tif (lang === true) {",
                    "\t\t\t\t\t\tbefore = 'important';",
                    "\t\t\t\t\t\tinside = env.language;",
                    "\t\t\t\t\t\tlang = env.language;",
                    "\t\t\t\t\t} else {",
                    "\t\t\t\t\t\tbefore = lang.before || 'important';",
                    "\t\t\t\t\t\tinside = lang.inside || lang.lang;",
                    "\t\t\t\t\t\troot = lang.root || Prism.languages;",
                    "\t\t\t\t\t\tskip = lang.skip;",
                    "\t\t\t\t\t\tlang = env.language;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tif (!skip && Prism.languages[lang]) {",
                    "\t\t\t\t\t\tPrism.languages.insertBefore(inside, before, previewers[previewer].tokens, root);",
                    "\t\t\t\t\t\tenv.grammar = Prism.languages[lang];",
                    "",
                    "\t\t\t\t\t\tlanguages[env.language] = {initialized: true};",
                    "\t\t\t\t\t}",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "",
                    "\t// Initialize the previewers only when needed",
                    "\tPrism.hooks.add('after-highlight', function (env) {",
                    "\t\tif(Previewer.byLanguages['*'] || Previewer.byLanguages[env.language]) {",
                    "\t\t\tPreviewer.initEvents(env.element, env.language);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tfor (var previewer in previewers) {",
                    "\t\tpreviewers[previewer].create();",
                    "\t}",
                    "",
                    "}());"
                ]
            },
            "prism-previewers.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&self.document&&Function.prototype.bind){var e={gradient:{create:function(){var e={},s=function(e,s,i){var t=\"180deg\";return/^(?:-?\\d*\\.?\\d+(?:deg|rad)|to\\b|top|right|bottom|left)/.test(i[0])&&(t=i.shift(),t.indexOf(\"to \")<0&&(t.indexOf(\"top\")>=0?t=t.indexOf(\"left\")>=0?\"to bottom right\":t.indexOf(\"right\")>=0?\"to bottom left\":\"to bottom\":t.indexOf(\"bottom\")>=0?t=t.indexOf(\"left\")>=0?\"to top right\":t.indexOf(\"right\")>=0?\"to top left\":\"to top\":t.indexOf(\"left\")>=0?t=\"to right\":t.indexOf(\"right\")>=0?t=\"to left\":e&&(t.indexOf(\"deg\")>=0?t=90-parseFloat(t)+\"deg\":t.indexOf(\"rad\")>=0&&(t=Math.PI/2-parseFloat(t)+\"rad\")))),s+\"(\"+t+\",\"+i.join(\",\")+\")\"},i=function(e,s,i){if(i[0].indexOf(\"at\")<0){var t=\"center\",a=\"ellipse\",r=\"farthest-corner\";if(/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(i[0])&&(t=i.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/,\"\")),/\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(i[0])){var n=i.shift().split(/\\s+/);!n[0]||\"circle\"!==n[0]&&\"ellipse\"!==n[0]||(a=n.shift()),n[0]&&(r=n.shift()),\"cover\"===r?r=\"farthest-corner\":\"contain\"===r&&(r=\"clothest-side\")}return s+\"(\"+a+\" \"+r+\" at \"+t+\",\"+i.join(\",\")+\")\"}return s+\"(\"+i.join(\",\")+\")\"},t=function(t){if(e[t])return e[t];var a=t.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/),r=a&&a[1],n=a&&a[2],l=t.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g,\"\").split(/\\s*,\\s*/);return e[t]=n.indexOf(\"linear\")>=0?s(r,n,l):n.indexOf(\"radial\")>=0?i(r,n,l):n+\"(\"+l.join(\",\")+\")\"};return function(){new Prism.plugins.Previewer(\"gradient\",function(e){return this.firstChild.style.backgroundImage=\"\",this.firstChild.style.backgroundImage=t(e),!!this.firstChild.style.backgroundImage},\"*\",function(){this._elt.innerHTML=\"<div></div>\"})}}(),tokens:{gradient:{pattern:/(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,inside:{\"function\":/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,sass:[{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},angle:{create:function(){new Prism.plugins.Previewer(\"angle\",function(e){var s,i,t=parseFloat(e),a=e.match(/[a-z]+$/i);if(!t||!a)return!1;switch(a=a[0]){case\"deg\":s=360;break;case\"grad\":s=400;break;case\"rad\":s=2*Math.PI;break;case\"turn\":s=1}return i=100*t/s,i%=100,this[(0>t?\"set\":\"remove\")+\"Attribute\"](\"data-negative\",\"\"),this.querySelector(\"circle\").style.strokeDasharray=Math.abs(i)+\",500\",!0},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>'})},tokens:{angle:/(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+(?:deg|g?rad|turn)\\b/i},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]},{lang:\"sass\",before:\"operator\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},color:{create:function(){new Prism.plugins.Previewer(\"color\",function(e){return this.style.backgroundColor=\"\",this.style.backgroundColor=e,!!this.style.backgroundColor})},tokens:{color:{pattern:/\\B#(?:[0-9a-f]{3}){1,2}\\b|\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B|\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,inside:{\"function\":/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},easing:{create:function(){new Prism.plugins.Previewer(\"easing\",function(e){e={linear:\"0,0,1,1\",ease:\".25,.1,.25,1\",\"ease-in\":\".42,0,1,1\",\"ease-out\":\"0,0,.58,1\",\"ease-in-out\":\".42,0,.58,1\"}[e]||e;var s=e.match(/-?\\d*\\.?\\d+/g);if(4===s.length){s=s.map(function(e,s){return 100*(s%2?1-e:e)}),this.querySelector(\"path\").setAttribute(\"d\",\"M0,100 C\"+s[0]+\",\"+s[1]+\", \"+s[2]+\",\"+s[3]+\", 100,0\");var i=this.querySelectorAll(\"line\");return i[0].setAttribute(\"x2\",s[0]),i[0].setAttribute(\"y2\",s[1]),i[1].setAttribute(\"x2\",s[2]),i[1].setAttribute(\"y2\",s[3]),!0}return!1},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\"><defs><marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\"><circle cx=\"2\" cy=\"2\" r=\"1.5\" /></marker></defs><path d=\"M0,100 C20,50, 40,30, 100,0\" /><line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url('+location.href+'#prism-previewer-easing-marker)\" marker-end=\"url('+location.href+'#prism-previewer-easing-marker)\" /><line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url('+location.href+'#prism-previewer-easing-marker)\" marker-end=\"url('+location.href+'#prism-previewer-easing-marker)\" /></svg>'})},tokens:{easing:{pattern:/\\bcubic-bezier\\((?:-?\\d*\\.?\\d+,\\s*){3}-?\\d*\\.?\\d+\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,inside:{\"function\":/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,sass:[{lang:\"sass\",inside:\"inside\",before:\"punctuation\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},time:{create:function(){new Prism.plugins.Previewer(\"time\",function(e){var s=parseFloat(e),i=e.match(/[a-z]+$/i);return s&&i?(i=i[0],this.querySelector(\"circle\").style.animationDuration=2*s+i,!0):!1},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>'})},tokens:{time:/(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+m?s\\b/i},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]},{lang:\"sass\",before:\"operator\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}}},s=function(e){var s=0,i=0,t=e;if(t.parentNode){do s+=t.offsetLeft,i+=t.offsetTop;while((t=t.offsetParent)&&t.nodeType<9);t=e;do s-=t.scrollLeft,i-=t.scrollTop;while((t=t.parentNode)&&!/body/i.test(t.nodeName))}return{top:i,right:innerWidth-s-e.offsetWidth,bottom:innerHeight-i-e.offsetHeight,left:s}},i=/(?:^|\\s)token(?=$|\\s)/,t=/(?:^|\\s)active(?=$|\\s)/g,a=/(?:^|\\s)flipped(?=$|\\s)/g,r=function(e,s,i,t){this._elt=null,this._type=e,this._clsRegexp=RegExp(\"(?:^|\\\\s)\"+e+\"(?=$|\\\\s)\"),this._token=null,this.updater=s,this._mouseout=this.mouseout.bind(this),this.initializer=t;var a=this;i||(i=[\"*\"]),\"Array\"!==Prism.util.type(i)&&(i=[i]),i.forEach(function(e){\"string\"!=typeof e&&(e=e.lang),r.byLanguages[e]||(r.byLanguages[e]=[]),r.byLanguages[e].indexOf(a)<0&&r.byLanguages[e].push(a)}),r.byType[e]=this};r.prototype.init=function(){this._elt||(this._elt=document.createElement(\"div\"),this._elt.className=\"prism-previewer prism-previewer-\"+this._type,document.body.appendChild(this._elt),this.initializer&&this.initializer())},r.prototype.isDisabled=function(e){do if(e.hasAttribute&&e.hasAttribute(\"data-previewers\")){var s=e.getAttribute(\"data-previewers\");return-1===(s||\"\").split(/\\s+/).indexOf(this._type)}while(e=e.parentNode);return!1},r.prototype.check=function(e){if(!i.test(e.className)||!this.isDisabled(e)){do if(i.test(e.className)&&this._clsRegexp.test(e.className))break;while(e=e.parentNode);e&&e!==this._token&&(this._token=e,this.show())}},r.prototype.mouseout=function(){this._token.removeEventListener(\"mouseout\",this._mouseout,!1),this._token=null,this.hide()},r.prototype.show=function(){if(this._elt||this.init(),this._token)if(this.updater.call(this._elt,this._token.textContent)){this._token.addEventListener(\"mouseout\",this._mouseout,!1);var e=s(this._token);this._elt.className+=\" active\",e.top-this._elt.offsetHeight>0?(this._elt.className=this._elt.className.replace(a,\"\"),this._elt.style.top=e.top+\"px\",this._elt.style.bottom=\"\"):(this._elt.className+=\" flipped\",this._elt.style.bottom=e.bottom+\"px\",this._elt.style.top=\"\"),this._elt.style.left=e.left+Math.min(200,this._token.offsetWidth/2)+\"px\"}else this.hide()},r.prototype.hide=function(){this._elt.className=this._elt.className.replace(t,\"\")},r.byLanguages={},r.byType={},r.initEvents=function(e,s){var i=[];r.byLanguages[s]&&(i=i.concat(r.byLanguages[s])),r.byLanguages[\"*\"]&&(i=i.concat(r.byLanguages[\"*\"])),e.addEventListener(\"mouseover\",function(e){var s=e.target;i.forEach(function(e){e.check(s)})},!1)},Prism.plugins.Previewer=r,Prism.hooks.add(\"before-highlight\",function(s){for(var i in e){var t=e[i].languages;if(s.language&&t[s.language]&&!t[s.language].initialized){var a=t[s.language];\"Array\"!==Prism.util.type(a)&&(a=[a]),a.forEach(function(a){var r,n,l,o;a===!0?(r=\"important\",n=s.language,a=s.language):(r=a.before||\"important\",n=a.inside||a.lang,l=a.root||Prism.languages,o=a.skip,a=s.language),!o&&Prism.languages[a]&&(Prism.languages.insertBefore(n,r,e[i].tokens,l),s.grammar=Prism.languages[a],t[s.language]={initialized:!0})})}}}),Prism.hooks.add(\"after-highlight\",function(e){(r.byLanguages[\"*\"]||r.byLanguages[e.language])&&r.initEvents(e.element,e.language)});for(var n in e)e[n].create()}}();"
                ]
            }
        },
        "remove-initial-line-feed": {
            "index.html": {},
            "prism-remove-initial-line-feed.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.hooks.add('before-sanity-check', function (env) {",
                    "\tif (env.code) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tvar clsReg = /\\s*\\bkeep-initial-line-feed\\b\\s*/;",
                    "\t\tif (",
                    "\t\t\tpre && pre.nodeName.toLowerCase() === 'pre' &&",
                    "\t\t\t// Apply only if nor the <pre> or the <code> have the class",
                    "\t\t\t(!clsReg.test(pre.className) && !clsReg.test(env.element.className))",
                    "\t\t) {",
                    "\t\t\tenv.code = env.code.replace(/^(?:\\r?\\n|\\r)/, '');",
                    "\t\t}",
                    "\t}",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-remove-initial-line-feed.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){\"undefined\"!=typeof self&&self.Prism&&self.document&&Prism.hooks.add(\"before-sanity-check\",function(e){if(e.code){var s=e.element.parentNode,n=/\\s*\\bkeep-initial-line-feed\\b\\s*/;!s||\"pre\"!==s.nodeName.toLowerCase()||n.test(s.className)||n.test(e.element.className)||(e.code=e.code.replace(/^(?:\\r?\\n|\\r)/,\"\"))}})}();"
                ]
            }
        },
        "show-invisibles": {
            "index.html": {},
            "prism-show-invisibles.css": {},
            "prism-show-invisibles.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.hooks.add('before-highlight', function(env) {",
                    "\tvar tokens = env.grammar;",
                    "",
                    "\tif (!tokens) return;",
                    "",
                    "\ttokens.tab = /\\t/g;",
                    "\ttokens.crlf = /\\r\\n/g;",
                    "\ttokens.lf = /\\n/g;",
                    "\ttokens.cr = /\\r/g;",
                    "\ttokens.space = / /g;",
                    "});",
                    "})();"
                ]
            },
            "prism-show-invisibles.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){\"undefined\"!=typeof self&&!self.Prism||\"undefined\"!=typeof global&&!global.Prism||Prism.hooks.add(\"before-highlight\",function(e){var f=e.grammar;f&&(f.tab=/\\t/g,f.crlf=/\\r\\n/g,f.lf=/\\n/g,f.cr=/\\r/g,f.space=/ /g)})}();"
                ]
            }
        },
        "show-language": {
            "index.html": {},
            "prism-show-language.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\treturn;",
                    "}",
                    "",
                    "if (!Prism.plugins.toolbar) {",
                    "\tconsole.warn('Show Languages plugin loaded before Toolbar plugin.');",
                    "",
                    "\treturn;",
                    "}",
                    "",
                    "// The languages map is built automatically with gulp",
                    "var Languages = /*languages_placeholder[*/{\"html\":\"HTML\",\"xml\":\"XML\",\"svg\":\"SVG\",\"mathml\":\"MathML\",\"css\":\"CSS\",\"clike\":\"C-like\",\"javascript\":\"JavaScript\",\"abap\":\"ABAP\",\"actionscript\":\"ActionScript\",\"apacheconf\":\"Apache Configuration\",\"apl\":\"APL\",\"applescript\":\"AppleScript\",\"arff\":\"ARFF\",\"asciidoc\":\"AsciiDoc\",\"asm6502\":\"6502 Assembly\",\"aspnet\":\"ASP.NET (C#)\",\"autohotkey\":\"AutoHotkey\",\"autoit\":\"AutoIt\",\"basic\":\"BASIC\",\"csharp\":\"C#\",\"cpp\":\"C++\",\"coffeescript\":\"CoffeeScript\",\"csp\":\"Content-Security-Policy\",\"css-extras\":\"CSS Extras\",\"django\":\"Django/Jinja2\",\"erb\":\"ERB\",\"fsharp\":\"F#\",\"gedcom\":\"GEDCOM\",\"glsl\":\"GLSL\",\"graphql\":\"GraphQL\",\"http\":\"HTTP\",\"hpkp\":\"HTTP Public-Key-Pins\",\"hsts\":\"HTTP Strict-Transport-Security\",\"ichigojam\":\"IchigoJam\",\"inform7\":\"Inform 7\",\"json\":\"JSON\",\"latex\":\"LaTeX\",\"livescript\":\"LiveScript\",\"lolcode\":\"LOLCODE\",\"markup-templating\":\"Markup templating\",\"matlab\":\"MATLAB\",\"mel\":\"MEL\",\"n4js\":\"N4JS\",\"nasm\":\"NASM\",\"nginx\":\"nginx\",\"nsis\":\"NSIS\",\"objectivec\":\"Objective-C\",\"ocaml\":\"OCaml\",\"opencl\":\"OpenCL\",\"parigp\":\"PARI/GP\",\"objectpascal\":\"Object Pascal\",\"php\":\"PHP\",\"php-extras\":\"PHP Extras\",\"plsql\":\"PL/SQL\",\"powershell\":\"PowerShell\",\"properties\":\".properties\",\"protobuf\":\"Protocol Buffers\",\"q\":\"Q (kdb+ database)\",\"jsx\":\"React JSX\",\"tsx\":\"React TSX\",\"renpy\":\"Ren'py\",\"rest\":\"reST (reStructuredText)\",\"sas\":\"SAS\",\"sass\":\"Sass (Sass)\",\"scss\":\"Sass (Scss)\",\"sql\":\"SQL\",\"soy\":\"Soy (Closure Template)\",\"tap\":\"TAP\",\"tt2\":\"Template Toolkit 2\",\"typescript\":\"TypeScript\",\"vbnet\":\"VB.Net\",\"vhdl\":\"VHDL\",\"vim\":\"vim\",\"visual-basic\":\"Visual Basic\",\"wasm\":\"WebAssembly\",\"wiki\":\"Wiki markup\",\"xojo\":\"Xojo (REALbasic)\",\"xquery\":\"XQuery\",\"yaml\":\"YAML\"}/*]*/;",
                    "Prism.plugins.toolbar.registerButton('show-language', function(env) {",
                    "\tvar pre = env.element.parentNode;",
                    "\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\treturn;",
                    "\t}",
                    "\tvar language = pre.getAttribute('data-language') || Languages[env.language] || (env.language && (env.language.substring(0, 1).toUpperCase() + env.language.substring(1)));",
                    "",
                    "\tif(!language) {",
                    "\t\treturn;",
                    "\t}",
                    "\tvar element = document.createElement('span');",
                    "\telement.textContent = language;",
                    "",
                    "\treturn element;",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-show-language.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){if(!Prism.plugins.toolbar)return console.warn(\"Show Languages plugin loaded before Toolbar plugin.\"),void 0;var e={html:\"HTML\",xml:\"XML\",svg:\"SVG\",mathml:\"MathML\",css:\"CSS\",clike:\"C-like\",javascript:\"JavaScript\",abap:\"ABAP\",actionscript:\"ActionScript\",apacheconf:\"Apache Configuration\",apl:\"APL\",applescript:\"AppleScript\",arff:\"ARFF\",asciidoc:\"AsciiDoc\",asm6502:\"6502 Assembly\",aspnet:\"ASP.NET (C#)\",autohotkey:\"AutoHotkey\",autoit:\"AutoIt\",basic:\"BASIC\",csharp:\"C#\",cpp:\"C++\",coffeescript:\"CoffeeScript\",csp:\"Content-Security-Policy\",\"css-extras\":\"CSS Extras\",django:\"Django/Jinja2\",erb:\"ERB\",fsharp:\"F#\",gedcom:\"GEDCOM\",glsl:\"GLSL\",graphql:\"GraphQL\",http:\"HTTP\",hpkp:\"HTTP Public-Key-Pins\",hsts:\"HTTP Strict-Transport-Security\",ichigojam:\"IchigoJam\",inform7:\"Inform 7\",json:\"JSON\",latex:\"LaTeX\",livescript:\"LiveScript\",lolcode:\"LOLCODE\",\"markup-templating\":\"Markup templating\",matlab:\"MATLAB\",mel:\"MEL\",n4js:\"N4JS\",nasm:\"NASM\",nginx:\"nginx\",nsis:\"NSIS\",objectivec:\"Objective-C\",ocaml:\"OCaml\",opencl:\"OpenCL\",parigp:\"PARI/GP\",objectpascal:\"Object Pascal\",php:\"PHP\",\"php-extras\":\"PHP Extras\",plsql:\"PL/SQL\",powershell:\"PowerShell\",properties:\".properties\",protobuf:\"Protocol Buffers\",q:\"Q (kdb+ database)\",jsx:\"React JSX\",tsx:\"React TSX\",renpy:\"Ren'py\",rest:\"reST (reStructuredText)\",sas:\"SAS\",sass:\"Sass (Sass)\",scss:\"Sass (Scss)\",sql:\"SQL\",soy:\"Soy (Closure Template)\",tap:\"TAP\",tt2:\"Template Toolkit 2\",typescript:\"TypeScript\",vbnet:\"VB.Net\",vhdl:\"VHDL\",vim:\"vim\",\"visual-basic\":\"Visual Basic\",wasm:\"WebAssembly\",wiki:\"Wiki markup\",xojo:\"Xojo (REALbasic)\",xquery:\"XQuery\",yaml:\"YAML\"};Prism.plugins.toolbar.registerButton(\"show-language\",function(a){var t=a.element.parentNode;if(t&&/pre/i.test(t.nodeName)){var s=t.getAttribute(\"data-language\")||e[a.language]||a.language&&a.language.substring(0,1).toUpperCase()+a.language.substring(1);if(s){var i=document.createElement(\"span\");return i.textContent=s,i}}})}}();"
                ]
            }
        },
        "toolbar": {
            "index.html": {},
            "prism-toolbar.css": {},
            "prism-toolbar.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar callbacks = [];",
                    "\tvar map = {};",
                    "\tvar noop = function() {};",
                    "",
                    "\tPrism.plugins.toolbar = {};",
                    "",
                    "\t/**",
                    "\t * Register a button callback with the toolbar.",
                    "\t *",
                    "\t * @param {string} key",
                    "\t * @param {Object|Function} opts",
                    "\t */",
                    "\tvar registerButton = Prism.plugins.toolbar.registerButton = function (key, opts) {",
                    "\t\tvar callback;",
                    "",
                    "\t\tif (typeof opts === 'function') {",
                    "\t\t\tcallback = opts;",
                    "\t\t} else {",
                    "\t\t\tcallback = function (env) {",
                    "\t\t\t\tvar element;",
                    "",
                    "\t\t\t\tif (typeof opts.onClick === 'function') {",
                    "\t\t\t\t\telement = document.createElement('button');",
                    "\t\t\t\t\telement.type = 'button';",
                    "\t\t\t\t\telement.addEventListener('click', function () {",
                    "\t\t\t\t\t\topts.onClick.call(this, env);",
                    "\t\t\t\t\t});",
                    "\t\t\t\t} else if (typeof opts.url === 'string') {",
                    "\t\t\t\t\telement = document.createElement('a');",
                    "\t\t\t\t\telement.href = opts.url;",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\telement = document.createElement('span');",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\telement.textContent = opts.text;",
                    "",
                    "\t\t\t\treturn element;",
                    "\t\t\t};",
                    "\t\t}",
                    "",
                    "\t\tcallbacks.push(map[key] = callback);",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Post-highlight Prism hook callback.",
                    "\t *",
                    "\t * @param env",
                    "\t */",
                    "\tvar hook = Prism.plugins.toolbar.hook = function (env) {",
                    "\t\t// Check if inline or actual code block (credit to line-numbers plugin)",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Autoloader rehighlights, so only do this once.",
                    "\t\tif (pre.parentNode.classList.contains('code-toolbar')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Create wrapper for <pre> to prevent scrolling toolbar with content",
                    "\t\tvar wrapper = document.createElement(\"div\");",
                    "\t\twrapper.classList.add(\"code-toolbar\");",
                    "\t\tpre.parentNode.insertBefore(wrapper, pre);",
                    "\t\twrapper.appendChild(pre);",
                    "",
                    "\t\t// Setup the toolbar",
                    "\t\tvar toolbar = document.createElement('div');",
                    "\t\ttoolbar.classList.add('toolbar');",
                    "",
                    "\t\tif (document.body.hasAttribute('data-toolbar-order')) {",
                    "\t\t\tcallbacks = document.body.getAttribute('data-toolbar-order').split(',').map(function(key) {",
                    "\t\t\t\treturn map[key] || noop;",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t\tcallbacks.forEach(function(callback) {",
                    "\t\t\tvar element = callback(env);",
                    "",
                    "\t\t\tif (!element) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar item = document.createElement('div');",
                    "\t\t\titem.classList.add('toolbar-item');",
                    "",
                    "\t\t\titem.appendChild(element);",
                    "\t\t\ttoolbar.appendChild(item);",
                    "\t\t});",
                    "",
                    "\t\t// Add our toolbar to the currently created wrapper of <pre> tag",
                    "\t\twrapper.appendChild(toolbar);",
                    "\t};",
                    "",
                    "\tregisterButton('label', function(env) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!pre.hasAttribute('data-label')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar element, template;",
                    "\t\tvar text = pre.getAttribute('data-label');",
                    "\t\ttry {",
                    "\t\t\t// Any normal text will blow up this selector.",
                    "\t\t\ttemplate = document.querySelector('template#' + text);",
                    "\t\t} catch (e) {}",
                    "",
                    "\t\tif (template) {",
                    "\t\t\telement = template.content;",
                    "\t\t} else {",
                    "\t\t\tif (pre.hasAttribute('data-url')) {",
                    "\t\t\t\telement = document.createElement('a');",
                    "\t\t\t\telement.href = pre.getAttribute('data-url');",
                    "\t\t\t} else {",
                    "\t\t\t\telement = document.createElement('span');",
                    "\t\t\t}",
                    "",
                    "\t\t\telement.textContent = text;",
                    "\t\t}",
                    "",
                    "\t\treturn element;",
                    "\t});",
                    "",
                    "\t/**",
                    "\t * Register the toolbar with Prism.",
                    "\t */",
                    "\tPrism.hooks.add('complete', hook);",
                    "})();"
                ]
            },
            "prism-toolbar.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var t=[],e={},n=function(){};Prism.plugins.toolbar={};var a=Prism.plugins.toolbar.registerButton=function(n,a){var o;o=\"function\"==typeof a?a:function(t){var e;return\"function\"==typeof a.onClick?(e=document.createElement(\"button\"),e.type=\"button\",e.addEventListener(\"click\",function(){a.onClick.call(this,t)})):\"string\"==typeof a.url?(e=document.createElement(\"a\"),e.href=a.url):e=document.createElement(\"span\"),e.textContent=a.text,e},t.push(e[n]=o)},o=Prism.plugins.toolbar.hook=function(a){var o=a.element.parentNode;if(o&&/pre/i.test(o.nodeName)&&!o.parentNode.classList.contains(\"code-toolbar\")){var r=document.createElement(\"div\");r.classList.add(\"code-toolbar\"),o.parentNode.insertBefore(r,o),r.appendChild(o);var i=document.createElement(\"div\");i.classList.add(\"toolbar\"),document.body.hasAttribute(\"data-toolbar-order\")&&(t=document.body.getAttribute(\"data-toolbar-order\").split(\",\").map(function(t){return e[t]||n})),t.forEach(function(t){var e=t(a);if(e){var n=document.createElement(\"div\");n.classList.add(\"toolbar-item\"),n.appendChild(e),i.appendChild(n)}}),r.appendChild(i)}};a(\"label\",function(t){var e=t.element.parentNode;if(e&&/pre/i.test(e.nodeName)&&e.hasAttribute(\"data-label\")){var n,a,o=e.getAttribute(\"data-label\");try{a=document.querySelector(\"template#\"+o)}catch(r){}return a?n=a.content:(e.hasAttribute(\"data-url\")?(n=document.createElement(\"a\"),n.href=e.getAttribute(\"data-url\")):n=document.createElement(\"span\"),n.textContent=o),n}}),Prism.hooks.add(\"complete\",o)}}();"
                ]
            }
        },
        "unescaped-markup": {
            "index.html": {},
            "prism-unescaped-markup.css": {},
            "prism-unescaped-markup.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !Prism.languages.markup) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tPrism.plugins.UnescapedMarkup = true;",
                    "",
                    "\tPrism.hooks.add('before-highlightall', function (env) {",
                    "\t\tenv.selector += \", [class*='lang-'] script[type='text/plain'], [class*='language-'] script[type='text/plain']\" +",
                    "\t\t                \", script[type='text/plain'][class*='lang-'], script[type='text/plain'][class*='language-']\";",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\tif ((env.element.matches || env.element.msMatchesSelector).call(env.element, \"script[type='text/plain']\")) {",
                    "\t\t\tvar code = document.createElement(\"code\");",
                    "\t\t\tvar pre = document.createElement(\"pre\");",
                    "",
                    "\t\t\tpre.className = code.className = env.element.className;",
                    "",
                    "\t\t\tif (env.element.dataset) {",
                    "\t\t\t\tObject.keys(env.element.dataset).forEach(function (key) {",
                    "\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(env.element.dataset, key)) {",
                    "\t\t\t\t\t\tpre.dataset[key] = env.element.dataset[key];",
                    "\t\t\t\t\t}",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "",
                    "\t\t\tenv.code = env.code.replace(/&lt;\\/script(>|&gt;)/gi, \"</scri\" + \"pt>\");",
                    "\t\t\tcode.textContent = env.code;",
                    "",
                    "\t\t\tpre.appendChild(code);",
                    "\t\t\tenv.element.parentNode.replaceChild(pre, env.element);",
                    "\t\t\tenv.element = code;",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!env.code && pre && pre.nodeName.toLowerCase() == 'pre' &&",
                    "\t\t\t\tenv.element.childNodes.length && env.element.childNodes[0].nodeName == \"#comment\") {",
                    "\t\t\tenv.element.textContent = env.code = env.element.childNodes[0].textContent;",
                    "\t\t}",
                    "\t});",
                    "}());"
                ]
            },
            "prism-unescaped-markup.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){\"undefined\"!=typeof self&&self.Prism&&self.document&&Prism.languages.markup&&(Prism.plugins.UnescapedMarkup=!0,Prism.hooks.add(\"before-highlightall\",function(e){e.selector+=\", [class*='lang-'] script[type='text/plain'], [class*='language-'] script[type='text/plain'], script[type='text/plain'][class*='lang-'], script[type='text/plain'][class*='language-']\"}),Prism.hooks.add(\"before-sanity-check\",function(e){if((e.element.matches||e.element.msMatchesSelector).call(e.element,\"script[type='text/plain']\")){var t=document.createElement(\"code\"),n=document.createElement(\"pre\");return n.className=t.className=e.element.className,e.element.dataset&&Object.keys(e.element.dataset).forEach(function(t){Object.prototype.hasOwnProperty.call(e.element.dataset,t)&&(n.dataset[t]=e.element.dataset[t])}),e.code=e.code.replace(/&lt;\\/script(>|&gt;)/gi,\"</script>\"),t.textContent=e.code,n.appendChild(t),e.element.parentNode.replaceChild(n,e.element),e.element=t,void 0}var n=e.element.parentNode;!e.code&&n&&\"pre\"==n.nodeName.toLowerCase()&&e.element.childNodes.length&&\"#comment\"==e.element.childNodes[0].nodeName&&(e.element.textContent=e.code=e.element.childNodes[0].textContent)}))}();"
                ]
            }
        },
        "wpd": {
            "index.html": {},
            "prism-wpd.css": {},
            "prism-wpd.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "if (Prism.languages.css) {",
                    "\t// check whether the selector is an advanced pattern before extending it",
                    "\tif (Prism.languages.css.selector.pattern)",
                    "\t{",
                    "\t\tPrism.languages.css.selector.inside['pseudo-class'] = /:[\\w-]+/;",
                    "\t\tPrism.languages.css.selector.inside['pseudo-element'] = /::[\\w-]+/;",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tPrism.languages.css.selector = {",
                    "\t\t\tpattern: Prism.languages.css.selector,",
                    "\t\t\tinside: {",
                    "\t\t\t\t'pseudo-class': /:[\\w-]+/,",
                    "\t\t\t\t'pseudo-element': /::[\\w-]+/",
                    "\t\t\t}",
                    "\t\t};",
                    "\t}",
                    "}",
                    "",
                    "if (Prism.languages.markup) {",
                    "\tPrism.languages.markup.tag.inside.tag.inside['tag-id'] = /[\\w-]+/;",
                    "\t",
                    "\tvar Tags = {",
                    "\t\tHTML: {",
                    "\t\t\t'a': 1, 'abbr': 1, 'acronym': 1, 'b': 1, 'basefont': 1, 'bdo': 1, 'big': 1, 'blink': 1, 'cite': 1, 'code': 1, 'dfn': 1, 'em': 1, 'kbd': 1,  'i': 1, ",
                    "\t\t\t'rp': 1, 'rt': 1, 'ruby': 1, 's': 1, 'samp': 1, 'small': 1, 'spacer': 1, 'strike': 1, 'strong': 1, 'sub': 1, 'sup': 1, 'time': 1, 'tt': 1,  'u': 1, ",
                    "\t\t\t'var': 1, 'wbr': 1, 'noframes': 1, 'summary': 1, 'command': 1, 'dt': 1, 'dd': 1, 'figure': 1, 'figcaption': 1, 'center': 1, 'section': 1, 'nav': 1,",
                    "\t\t\t'article': 1, 'aside': 1, 'hgroup': 1, 'header': 1, 'footer': 1, 'address': 1, 'noscript': 1, 'isIndex': 1, 'main': 1, 'mark': 1, 'marquee': 1,",
                    "\t\t\t'meter': 1, 'menu': 1",
                    "\t\t},",
                    "\t\tSVG: {",
                    "\t\t\t'animateColor': 1, 'animateMotion': 1, 'animateTransform': 1, 'glyph': 1, 'feBlend': 1, 'feColorMatrix': 1, 'feComponentTransfer': 1, ",
                    "\t\t\t'feFuncR': 1, 'feFuncG': 1, 'feFuncB': 1, 'feFuncA': 1, 'feComposite': 1, 'feConvolveMatrix': 1, 'feDiffuseLighting': 1, 'feDisplacementMap': 1, ",
                    "\t\t\t'feFlood': 1, 'feGaussianBlur': 1, 'feImage': 1, 'feMerge': 1, 'feMergeNode': 1, 'feMorphology': 1, 'feOffset': 1, 'feSpecularLighting': 1, ",
                    "\t\t\t'feTile': 1, 'feTurbulence': 1, 'feDistantLight': 1, 'fePointLight': 1, 'feSpotLight': 1, 'linearGradient': 1, 'radialGradient': 1, 'altGlyph': 1, ",
                    "\t\t\t'textPath': 1, 'tref': 1, 'altglyph': 1, 'textpath': 1, 'altglyphdef': 1, 'altglyphitem': 1, 'clipPath': 1, 'color-profile': 1, 'cursor': 1,",
                    "\t\t\t'font-face': 1, 'font-face-format': 1, 'font-face-name': 1, 'font-face-src': 1, 'font-face-uri': 1, 'foreignObject': 1, 'glyphRef': 1,",
                    "\t\t\t'hkern': 1, 'vkern': 1",
                    "\t\t},",
                    "\t\tMathML: {}",
                    "\t}",
                    "}",
                    "",
                    "var language;",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif ((env.type == 'tag-id'",
                    "\t\t|| (env.type == 'property' && env.content.indexOf('-') != 0)",
                    "\t\t|| (env.type == 'rule'&& env.content.indexOf('@-') != 0)",
                    "\t\t|| (env.type == 'pseudo-class'&& env.content.indexOf(':-') != 0) ",
                    "\t\t|| (env.type == 'pseudo-element'&& env.content.indexOf('::-') != 0) ",
                    "        || (env.type == 'attr-name' && env.content.indexOf('data-') != 0)",
                    "\t\t) && env.content.indexOf('<') === -1",
                    "\t) {",
                    "\t\tif (env.language == 'css'",
                    "\t\t\t|| env.language == 'scss'",
                    "\t\t\t|| env.language == 'markup'",
                    "\t\t) {",
                    "\t\t\tvar href = 'https://webplatform.github.io/docs/';",
                    "\t\t\tvar content = env.content;",
                    "",
                    "\t\t\tif (env.language == 'css' || env.language == 'scss') {",
                    "\t\t\t\thref += 'css/';",
                    "",
                    "\t\t\t\tif (env.type == 'property') {",
                    "\t\t\t\t\thref += 'properties/';",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'rule') {",
                    "\t\t\t\t\thref += 'atrules/';",
                    "\t\t\t\t\tcontent = content.substring(1);",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'pseudo-class') {",
                    "\t\t\t\t\thref += 'selectors/pseudo-classes/';",
                    "\t\t\t\t\tcontent = content.substring(1);",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'pseudo-element') {",
                    "\t\t\t\t\thref += 'selectors/pseudo-elements/';",
                    "\t\t\t\t\tcontent = content.substring(2);",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\telse if (env.language == 'markup') {",
                    "\t\t\t\tif (env.type == 'tag-id') {",
                    "\t\t\t\t\t// Check language",
                    "\t\t\t\t\tlanguage = getLanguage(env.content) || language;",
                    "",
                    "\t\t\t\t\tif (language) {",
                    "\t\t\t\t\t\thref += language + '/elements/';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\treturn; // Abort",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'attr-name') {",
                    "\t\t\t\t\tif (language) {",
                    "\t\t\t\t\t\thref += language + '/attributes/';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\treturn; // Abort",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\thref += content;",
                    "\t\t\tenv.tag = 'a';",
                    "\t\t\tenv.attributes.href = href;",
                    "\t\t\tenv.attributes.target = '_blank';",
                    "\t\t}",
                    "\t}",
                    "});",
                    "",
                    "function getLanguage(tag) {",
                    "\tvar tagL = tag.toLowerCase();",
                    "\t",
                    "\tif (Tags.HTML[tagL]) {",
                    "\t\treturn 'html';",
                    "\t}",
                    "\telse if (Tags.SVG[tag]) {",
                    "\t\treturn 'svg';",
                    "\t}",
                    "\telse if (Tags.MathML[tag]) {",
                    "\t\treturn 'mathml';",
                    "\t}",
                    "\t",
                    "\t// Not in dictionary, perform check",
                    "\tif (Tags.HTML[tagL] !== 0 && typeof document !== 'undefined') {",
                    "\t\tvar htmlInterface = (document.createElement(tag).toString().match(/\\[object HTML(.+)Element\\]/) || [])[1];",
                    "\t\t",
                    "\t\tif (htmlInterface && htmlInterface != 'Unknown') {",
                    "\t\t\tTags.HTML[tagL] = 1;",
                    "\t\t\treturn 'html';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.HTML[tagL] = 0;",
                    "\t",
                    "\tif (Tags.SVG[tag] !== 0 && typeof document !== 'undefined') {",
                    "\t\tvar svgInterface = (document.createElementNS('http://www.w3.org/2000/svg', tag).toString().match(/\\[object SVG(.+)Element\\]/) || [])[1];",
                    "\t\t",
                    "\t\tif (svgInterface && svgInterface != 'Unknown') {",
                    "\t\t\tTags.SVG[tag] = 1;",
                    "\t\t\treturn 'svg';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.SVG[tag] = 0;",
                    "\t",
                    "\t// Lame way to detect MathML, but browsers don’t expose interface names there :(",
                    "\tif (Tags.MathML[tag] !== 0) {",
                    "\t\tif (tag.indexOf('m') === 0) {",
                    "\t\t\tTags.MathML[tag] = 1;",
                    "\t\t\treturn 'mathml';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.MathML[tag] = 0;",
                    "\t",
                    "\treturn null;",
                    "}",
                    "",
                    "})();"
                ]
            },
            "prism-wpd.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){function e(e){var n=e.toLowerCase();if(t.HTML[n])return\"html\";if(t.SVG[e])return\"svg\";if(t.MathML[e])return\"mathml\";if(0!==t.HTML[n]&&\"undefined\"!=typeof document){var a=(document.createElement(e).toString().match(/\\[object HTML(.+)Element\\]/)||[])[1];if(a&&\"Unknown\"!=a)return t.HTML[n]=1,\"html\"}if(t.HTML[n]=0,0!==t.SVG[e]&&\"undefined\"!=typeof document){var s=(document.createElementNS(\"http://www.w3.org/2000/svg\",e).toString().match(/\\[object SVG(.+)Element\\]/)||[])[1];if(s&&\"Unknown\"!=s)return t.SVG[e]=1,\"svg\"}return t.SVG[e]=0,0!==t.MathML[e]&&0===e.indexOf(\"m\")?(t.MathML[e]=1,\"mathml\"):(t.MathML[e]=0,null)}if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){if(Prism.languages.css&&(Prism.languages.css.selector.pattern?(Prism.languages.css.selector.inside[\"pseudo-class\"]=/:[\\w-]+/,Prism.languages.css.selector.inside[\"pseudo-element\"]=/::[\\w-]+/):Prism.languages.css.selector={pattern:Prism.languages.css.selector,inside:{\"pseudo-class\":/:[\\w-]+/,\"pseudo-element\":/::[\\w-]+/}}),Prism.languages.markup){Prism.languages.markup.tag.inside.tag.inside[\"tag-id\"]=/[\\w-]+/;var t={HTML:{a:1,abbr:1,acronym:1,b:1,basefont:1,bdo:1,big:1,blink:1,cite:1,code:1,dfn:1,em:1,kbd:1,i:1,rp:1,rt:1,ruby:1,s:1,samp:1,small:1,spacer:1,strike:1,strong:1,sub:1,sup:1,time:1,tt:1,u:1,\"var\":1,wbr:1,noframes:1,summary:1,command:1,dt:1,dd:1,figure:1,figcaption:1,center:1,section:1,nav:1,article:1,aside:1,hgroup:1,header:1,footer:1,address:1,noscript:1,isIndex:1,main:1,mark:1,marquee:1,meter:1,menu:1},SVG:{animateColor:1,animateMotion:1,animateTransform:1,glyph:1,feBlend:1,feColorMatrix:1,feComponentTransfer:1,feFuncR:1,feFuncG:1,feFuncB:1,feFuncA:1,feComposite:1,feConvolveMatrix:1,feDiffuseLighting:1,feDisplacementMap:1,feFlood:1,feGaussianBlur:1,feImage:1,feMerge:1,feMergeNode:1,feMorphology:1,feOffset:1,feSpecularLighting:1,feTile:1,feTurbulence:1,feDistantLight:1,fePointLight:1,feSpotLight:1,linearGradient:1,radialGradient:1,altGlyph:1,textPath:1,tref:1,altglyph:1,textpath:1,altglyphdef:1,altglyphitem:1,clipPath:1,\"color-profile\":1,cursor:1,\"font-face\":1,\"font-face-format\":1,\"font-face-name\":1,\"font-face-src\":1,\"font-face-uri\":1,foreignObject:1,glyphRef:1,hkern:1,vkern:1},MathML:{}}}var n;Prism.hooks.add(\"wrap\",function(t){if((\"tag-id\"==t.type||\"property\"==t.type&&0!=t.content.indexOf(\"-\")||\"rule\"==t.type&&0!=t.content.indexOf(\"@-\")||\"pseudo-class\"==t.type&&0!=t.content.indexOf(\":-\")||\"pseudo-element\"==t.type&&0!=t.content.indexOf(\"::-\")||\"attr-name\"==t.type&&0!=t.content.indexOf(\"data-\"))&&-1===t.content.indexOf(\"<\")&&(\"css\"==t.language||\"scss\"==t.language||\"markup\"==t.language)){var a=\"https://webplatform.github.io/docs/\",s=t.content;if(\"css\"==t.language||\"scss\"==t.language)a+=\"css/\",\"property\"==t.type?a+=\"properties/\":\"rule\"==t.type?(a+=\"atrules/\",s=s.substring(1)):\"pseudo-class\"==t.type?(a+=\"selectors/pseudo-classes/\",s=s.substring(1)):\"pseudo-element\"==t.type&&(a+=\"selectors/pseudo-elements/\",s=s.substring(2));else if(\"markup\"==t.language)if(\"tag-id\"==t.type){if(n=e(t.content)||n,!n)return;a+=n+\"/elements/\"}else if(\"attr-name\"==t.type){if(!n)return;a+=n+\"/attributes/\"}a+=s,t.tag=\"a\",t.attributes.href=a,t.attributes.target=\"_blank\"}})}}();"
                ]
            }
        }
    },
    "templates": {
        "footer.html": {},
        "header-download.html": {},
        "header-main.html": {},
        "header-plugins.html": {}
    },
    "themes": {
        "prism-coy.css": {},
        "prism-dark.css": {},
        "prism-funky.css": {},
        "prism-okaidia.css": {},
        "prism-solarizedlight.css": {},
        "prism-tomorrow.css": {},
        "prism-twilight.css": {},
        "prism.css": {}
    },
    "vendor": {
        "FileSaver.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */",
                "var saveAs=saveAs||function(e){\"use strict\";if(typeof e===\"undefined\"||typeof navigator!==\"undefined\"&&/MSIE [1-9]\\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS(\"http://www.w3.org/1999/xhtml\",\"a\"),o=\"download\"in r,i=function(e){var t=new MouseEvent(\"click\");e.dispatchEvent(t)},a=/constructor/i.test(e.HTMLElement),f=/CriOS\\/[\\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},d=\"application/octet-stream\",s=1e3*40,c=function(e){var t=function(){if(typeof e===\"string\"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,s)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e[\"on\"+t[r]];if(typeof o===\"function\"){try{o.call(e,n||e)}catch(i){u(i)}}}},p=function(e){if(/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,s){if(!s){t=p(t)}var v=this,w=t.type,m=w===d,y,h=function(){l(v,\"writestart progress write writeend\".split(\" \"))},S=function(){if((f||m&&a)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,\"data:attachment/file;\");var n=e.open(t,\"_blank\");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,\"_blank\");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;i(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||\"download\",n)};if(typeof navigator!==\"undefined\"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||\"download\";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!==\"undefined\"&&self||typeof window!==\"undefined\"&&window||this.content);if(typeof module!==\"undefined\"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!==\"undefined\"&&define!==null&&define.amd!==null){define([],function(){return saveAs})}"
            ]
        },
        "jszip.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/*!",
                "",
                " JSZip - A Javascript class for generating and reading zip files",
                " <http://stuartk.com/jszip>",
                "",
                " (c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>",
                " Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.",
                "",
                " JSZip uses the library pako released under the MIT license :",
                " https://github.com/nodeca/pako/blob/master/LICENSE",
                " */",
                "!function(a){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=a();else if(\"function\"==typeof define&&define.amd)define([],a);else{var b;b=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,b.JSZip=a()}}(function(){var a;return function b(a,c,d){function e(g,h){if(!c[g]){if(!a[g]){var i=\"function\"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error(\"Cannot find module '\"+g+\"'\");throw j.code=\"MODULE_NOT_FOUND\",j}var k=c[g]={exports:{}};a[g][0].call(k.exports,function(b){var c=a[g][1][b];return e(c?c:b)},k,k.exports,b,a,c,d)}return c[g].exports}for(var f=\"function\"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){\"use strict\";var d=a(\"./utils\"),e=a(\"./support\"),f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";c.encode=function(a){for(var b,c,e,g,h,i,j,k=[],l=0,m=a.length,n=m,o=\"string\"!==d.getTypeOf(a);l<a.length;)n=m-l,o?(b=a[l++],c=m>l?a[l++]:0,e=m>l?a[l++]:0):(b=a.charCodeAt(l++),c=m>l?a.charCodeAt(l++):0,e=m>l?a.charCodeAt(l++):0),g=b>>2,h=(3&b)<<4|c>>4,i=n>1?(15&c)<<2|e>>6:64,j=n>2?63&e:64,k.push(f.charAt(g)+f.charAt(h)+f.charAt(i)+f.charAt(j));return k.join(\"\")},c.decode=function(a){var b,c,d,g,h,i,j,k=0,l=0;a=a.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");var m=3*a.length/4;a.charAt(a.length-1)===f.charAt(64)&&m--,a.charAt(a.length-2)===f.charAt(64)&&m--;var n;for(n=e.uint8array?new Uint8Array(m):new Array(m);k<a.length;)g=f.indexOf(a.charAt(k++)),h=f.indexOf(a.charAt(k++)),i=f.indexOf(a.charAt(k++)),j=f.indexOf(a.charAt(k++)),b=g<<2|h>>4,c=(15&h)<<4|i>>2,d=(3&i)<<6|j,n[l++]=b,64!==i&&(n[l++]=c),64!==j&&(n[l++]=d);return n}},{\"./support\":27,\"./utils\":29}],2:[function(a,b,c){\"use strict\";function d(a,b,c,d,e){this.compressedSize=a,this.uncompressedSize=b,this.crc32=c,this.compression=d,this.compressedContent=e}var e=a(\"./external\"),f=a(\"./stream/DataWorker\"),g=a(\"./stream/DataLengthProbe\"),h=a(\"./stream/Crc32Probe\"),g=a(\"./stream/DataLengthProbe\");d.prototype={getContentWorker:function(){var a=new f(e.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new g(\"data_length\")),b=this;return a.on(\"end\",function(){if(this.streamInfo.data_length!==b.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),a},getCompressedWorker:function(){return new f(e.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},d.createWorkerFrom=function(a,b,c){return a.pipe(new h).pipe(new g(\"uncompressedSize\")).pipe(b.compressWorker(c)).pipe(new g(\"compressedSize\")).withStreamInfo(\"compression\",b)},b.exports=d},{\"./external\":6,\"./stream/Crc32Probe\":22,\"./stream/DataLengthProbe\":23,\"./stream/DataWorker\":24}],3:[function(a,b,c){\"use strict\";var d=a(\"./stream/GenericWorker\");c.STORE={magic:\"\\x00\\x00\",compressWorker:function(a){return new d(\"STORE compression\")},uncompressWorker:function(){return new d(\"STORE decompression\")}},c.DEFLATE=a(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":25}],4:[function(a,b,c){\"use strict\";function d(){for(var a,b=[],c=0;256>c;c++){a=c;for(var d=0;8>d;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function e(a,b,c,d){var e=h,f=d+c;a=-1^a;for(var g=d;f>g;g++)a=a>>>8^e[255&(a^b[g])];return-1^a}function f(a,b,c,d){var e=h,f=d+c;a=-1^a;for(var g=d;f>g;g++)a=a>>>8^e[255&(a^b.charCodeAt(g))];return-1^a}var g=a(\"./utils\"),h=d();b.exports=function(a,b){if(\"undefined\"==typeof a||!a.length)return 0;var c=\"string\"!==g.getTypeOf(a);return c?e(0|b,a,a.length,0):f(0|b,a,a.length,0)}},{\"./utils\":29}],5:[function(a,b,c){\"use strict\";c.base64=!1,c.binary=!1,c.dir=!1,c.createFolders=!0,c.date=null,c.compression=null,c.compressionOptions=null,c.comment=null,c.unixPermissions=null,c.dosPermissions=null},{}],6:[function(a,b,c){\"use strict\";var d=a(\"es6-promise\").Promise;b.exports={Promise:d}},{\"es6-promise\":37}],7:[function(a,b,c){\"use strict\";function d(a,b){h.call(this,\"FlateWorker/\"+a),this._pako=new f[a]({raw:!0,level:b.level||-1}),this.meta={};var c=this;this._pako.onData=function(a){c.push({data:a,meta:c.meta})}}var e=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,f=a(\"pako\"),g=a(\"./utils\"),h=a(\"./stream/GenericWorker\"),i=e?\"uint8array\":\"array\";c.magic=\"\\b\\x00\",g.inherits(d,h),d.prototype.processChunk=function(a){this.meta=a.meta,this._pako.push(g.transformTo(i,a.data),!1)},d.prototype.flush=function(){h.prototype.flush.call(this),this._pako.push([],!0)},d.prototype.cleanUp=function(){h.prototype.cleanUp.call(this),this._pako=null},c.compressWorker=function(a){return new d(\"Deflate\",a)},c.uncompressWorker=function(){return new d(\"Inflate\",{})}},{\"./stream/GenericWorker\":25,\"./utils\":29,pako:38}],8:[function(a,b,c){\"use strict\";function d(a,b,c,d){f.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=b,this.zipPlatform=c,this.encodeFileName=d,this.streamFiles=a,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}var e=a(\"../utils\"),f=a(\"../stream/GenericWorker\"),g=a(\"../utf8\"),h=a(\"../crc32\"),i=a(\"../signature\"),j=function(a,b){var c,d=\"\";for(c=0;b>c;c++)d+=String.fromCharCode(255&a),a>>>=8;return d},k=function(a,b){var c=a;return a||(c=b?16893:33204),(65535&c)<<16},l=function(a,b){return 63&(a||0)},m=function(a,b,c,d,f,m){var n,o,p=a.file,q=a.compression,r=m!==g.utf8encode,s=e.transformTo(\"string\",m(p.name)),t=e.transformTo(\"string\",g.utf8encode(p.name)),u=p.comment,v=e.transformTo(\"string\",m(u)),w=e.transformTo(\"string\",g.utf8encode(u)),x=t.length!==p.name.length,y=w.length!==u.length,z=\"\",A=\"\",B=\"\",C=p.dir,D=p.date,E={crc32:0,compressedSize:0,uncompressedSize:0};b&&!c||(E.crc32=a.crc32,E.compressedSize=a.compressedSize,E.uncompressedSize=a.uncompressedSize);var F=0;b&&(F|=8),r||!x&&!y||(F|=2048);var G=0,H=0;C&&(G|=16),\"UNIX\"===f?(H=798,G|=k(p.unixPermissions,C)):(H=20,G|=l(p.dosPermissions,C)),n=D.getUTCHours(),n<<=6,n|=D.getUTCMinutes(),n<<=5,n|=D.getUTCSeconds()/2,o=D.getUTCFullYear()-1980,o<<=4,o|=D.getUTCMonth()+1,o<<=5,o|=D.getUTCDate(),x&&(A=j(1,1)+j(h(s),4)+t,z+=\"up\"+j(A.length,2)+A),y&&(B=j(1,1)+j(h(v),4)+w,z+=\"uc\"+j(B.length,2)+B);var I=\"\";I+=\"\\n\\x00\",I+=j(F,2),I+=q.magic,I+=j(n,2),I+=j(o,2),I+=j(E.crc32,4),I+=j(E.compressedSize,4),I+=j(E.uncompressedSize,4),I+=j(s.length,2),I+=j(z.length,2);var J=i.LOCAL_FILE_HEADER+I+s+z,K=i.CENTRAL_FILE_HEADER+j(H,2)+I+j(v.length,2)+\"\\x00\\x00\\x00\\x00\"+j(G,4)+j(d,4)+s+z+v;return{fileRecord:J,dirRecord:K}},n=function(a,b,c,d,f){var g=\"\",h=e.transformTo(\"string\",f(d));return g=i.CENTRAL_DIRECTORY_END+\"\\x00\\x00\\x00\\x00\"+j(a,2)+j(a,2)+j(b,4)+j(c,4)+j(h.length,2)+h},o=function(a){var b=\"\";return b=i.DATA_DESCRIPTOR+j(a.crc32,4)+j(a.compressedSize,4)+j(a.uncompressedSize,4)};e.inherits(d,f),d.prototype.push=function(a){var b=a.meta.percent||0,c=this.entriesCount,d=this._sources.length;this.accumulate?this.contentBuffer.push(a):(this.bytesWritten+=a.data.length,f.prototype.push.call(this,{data:a.data,meta:{currentFile:this.currentFile,percent:c?(b+100*(c-d-1))/c:100}}))},d.prototype.openedSource=function(a){if(this.currentSourceOffset=this.bytesWritten,this.currentFile=a.file.name,this.streamFiles&&!a.file.dir){var b=m(a,this.streamFiles,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:b.fileRecord,meta:{percent:0}})}else this.accumulate=!0},d.prototype.closedSource=function(a){this.accumulate=!1;var b=m(a,this.streamFiles,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(b.dirRecord),this.streamFiles&&!a.file.dir)this.push({data:o(a),meta:{percent:100}});else for(this.push({data:b.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},d.prototype.flush=function(){for(var a=this.bytesWritten,b=0;b<this.dirRecords.length;b++)this.push({data:this.dirRecords[b],meta:{percent:100}});var c=this.bytesWritten-a,d=n(this.dirRecords.length,c,a,this.zipComment,this.encodeFileName);this.push({data:d,meta:{percent:100}})},d.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},d.prototype.registerPrevious=function(a){this._sources.push(a);var b=this;return a.on(\"data\",function(a){b.processChunk(a)}),a.on(\"end\",function(){b.closedSource(b.previous.streamInfo),b._sources.length?b.prepareNextSource():b.end()}),a.on(\"error\",function(a){b.error(a)}),this},d.prototype.resume=function(){return f.prototype.resume.call(this)?!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0):!1},d.prototype.error=function(a){var b=this._sources;if(!f.prototype.error.call(this,a))return!1;for(var c=0;c<b.length;c++)try{b[c].error(a)}catch(a){}return!0},d.prototype.lock=function(){f.prototype.lock.call(this);for(var a=this._sources,b=0;b<a.length;b++)a[b].lock()},b.exports=d},{\"../crc32\":4,\"../signature\":20,\"../stream/GenericWorker\":25,\"../utf8\":28,\"../utils\":29}],9:[function(a,b,c){\"use strict\";var d=a(\"../compressions\"),e=a(\"./ZipFileWorker\"),f=function(a,b){var c=a||b,e=d[c];if(!e)throw new Error(c+\" is not a valid compression method !\");return e};c.generateWorker=function(a,b,c){var d=new e(b.streamFiles,c,b.platform,b.encodeFileName),g=0;try{a.forEach(function(a,c){g++;var e=f(c.options.compression,b.compression),h=c.options.compressionOptions||b.compressionOptions||{},i=c.dir,j=c.date;c._compressWorker(e,h).withStreamInfo(\"file\",{name:a,dir:i,date:j,comment:c.comment||\"\",unixPermissions:c.unixPermissions,dosPermissions:c.dosPermissions}).pipe(d)}),d.entriesCount=g}catch(h){d.error(h)}return d}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(a,b,c){\"use strict\";function d(){if(!(this instanceof d))return new d;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files={},this.comment=null,this.root=\"\",this.clone=function(){var a=new d;for(var b in this)\"function\"!=typeof this[b]&&(a[b]=this[b]);return a}}d.prototype=a(\"./object\"),d.prototype.loadAsync=a(\"./load\"),d.support=a(\"./support\"),d.defaults=a(\"./defaults\"),d.loadAsync=function(a,b){return(new d).loadAsync(a,b)},d.external=a(\"./external\"),b.exports=d},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":13,\"./support\":27}],11:[function(a,b,c){\"use strict\";function d(a){return new f.Promise(function(b,c){var d=a.decompressed.getContentWorker().pipe(new i);d.on(\"error\",function(a){c(a)}).on(\"end\",function(){d.streamInfo.crc32!==a.decompressed.crc32?c(new Error(\"Corrupted zip : CRC32 mismatch\")):b()}).resume()})}var e=a(\"./utils\"),f=a(\"./external\"),g=a(\"./utf8\"),e=a(\"./utils\"),h=a(\"./zipEntries\"),i=a(\"./stream/Crc32Probe\"),j=a(\"./nodejsUtils\");b.exports=function(a,b){var c=this;return b=e.extend(b||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:g.utf8decode}),j.isNode&&j.isStream(a)?f.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):e.prepareContent(\"the loaded zip file\",a,!0,b.optimizedBinaryString,b.base64).then(function(a){var c=new h(b);return c.load(a),c}).then(function(a){var c=[f.Promise.resolve(a)],e=a.files;if(b.checkCRC32)for(var g=0;g<e.length;g++)c.push(d(e[g]));return f.Promise.all(c)}).then(function(a){for(var d=a.shift(),e=d.files,f=0;f<e.length;f++){var g=e[f];c.file(g.fileNameStr,g.decompressed,{binary:!0,optimizedBinaryString:!0,date:g.date,dir:g.dir,comment:g.fileCommentStr.length?g.fileCommentStr:null,unixPermissions:g.unixPermissions,dosPermissions:g.dosPermissions,createFolders:b.createFolders})}return d.zipComment.length&&(c.comment=d.zipComment),c})}},{\"./external\":6,\"./nodejsUtils\":12,\"./stream/Crc32Probe\":22,\"./utf8\":28,\"./utils\":29,\"./zipEntries\":30}],12:[function(a,b,c){(function(a){\"use strict\";b.exports={isNode:\"undefined\"!=typeof a,newBuffer:function(b,c){return new a(b,c)},isBuffer:function(b){return a.isBuffer(b)},isStream:function(a){return a&&\"function\"==typeof a.on&&\"function\"==typeof a.pause&&\"function\"==typeof a.resume}}}).call(this,\"undefined\"!=typeof Buffer?Buffer:void 0)},{}],13:[function(a,b,c){\"use strict\";function d(a){return\"[object RegExp]\"===Object.prototype.toString.call(a)}var e=a(\"./utf8\"),f=a(\"./utils\"),g=a(\"./stream/GenericWorker\"),h=a(\"./stream/StreamHelper\"),i=a(\"./defaults\"),j=a(\"./compressedObject\"),k=a(\"./zipObject\"),l=a(\"./generate\"),m=a(\"./nodejsUtils\"),n=a(\"./nodejs/NodejsStreamInputAdapter\"),o=function(a,b,c){var d,e=f.getTypeOf(b);c=f.extend(c||{},i),c.date=c.date||new Date,null!==c.compression&&(c.compression=c.compression.toUpperCase()),\"string\"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(a=q(a)),c.createFolders&&(d=p(a))&&r.call(this,d,!0);var h=\"string\"===e&&c.binary===!1&&c.base64===!1;c.binary=!h;var l=b instanceof j&&0===b.uncompressedSize;(l||c.dir||!b||0===b.length)&&(c.base64=!1,c.binary=!0,b=\"\",c.compression=\"STORE\",e=\"string\");var o=null;o=b instanceof j||b instanceof g?b:m.isNode&&m.isStream(b)?new n(a,b):f.prepareContent(a,b,c.binary,c.optimizedBinaryString,c.base64);var s=new k(a,o,c);this.files[a]=s},p=function(a){\"/\"===a.slice(-1)&&(a=a.substring(0,a.length-1));var b=a.lastIndexOf(\"/\");return b>0?a.substring(0,b):\"\"},q=function(a){return\"/\"!==a.slice(-1)&&(a+=\"/\"),a},r=function(a,b){return b=\"undefined\"!=typeof b?b:i.createFolders,a=q(a),this.files[a]||o.call(this,a,null,{dir:!0,createFolders:b}),this.files[a]},s={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(a){var b,c,d;for(b in this.files)this.files.hasOwnProperty(b)&&(d=this.files[b],c=b.slice(this.root.length,b.length),c&&b.slice(0,this.root.length)===this.root&&a(c,d))},filter:function(a){var b=[];return this.forEach(function(c,d){a(c,d)&&b.push(d)}),b},file:function(a,b,c){if(1===arguments.length){if(d(a)){var e=a;return this.filter(function(a,b){return!b.dir&&e.test(a)})}var f=this.files[this.root+a];return f&&!f.dir?f:null}return a=this.root+a,o.call(this,a,b,c),this},folder:function(a){if(!a)return this;if(d(a))return this.filter(function(b,c){return c.dir&&a.test(b)});var b=this.root+a,c=r.call(this,b),e=this.clone();return e.root=c.name,e},remove:function(a){a=this.root+a;var b=this.files[a];if(b||(\"/\"!==a.slice(-1)&&(a+=\"/\"),b=this.files[a]),b&&!b.dir)delete this.files[a];else for(var c=this.filter(function(b,c){return c.name.slice(0,a.length)===a}),d=0;d<c.length;d++)delete this.files[c[d].name];return this},generate:function(a){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(a){var b,c={};try{if(c=f.extend(a||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:e.utf8encode}),c.type=c.type.toLowerCase(),c.compression=c.compression.toUpperCase(),\"binarystring\"===c.type&&(c.type=\"string\"),!c.type)throw new Error(\"No output type specified.\");f.checkSupport(c.type),\"darwin\"!==a.platform&&\"freebsd\"!==a.platform&&\"linux\"!==a.platform&&\"sunos\"!==a.platform||(a.platform=\"UNIX\"),\"win32\"===a.platform&&(a.platform=\"DOS\");var d=c.comment||this.comment||\"\";b=l.generateWorker(this,c,d)}catch(i){b=new g(\"error\"),b.error(i)}return new h(b,c.type||\"string\",c.mimeType)},generateAsync:function(a,b){return this.generateInternalStream(a).accumulate(b)},generateNodeStream:function(a,b){return a=a||{},a.type||(a.type=\"nodebuffer\"),this.generateInternalStream(a).toNodejsStream(b)}};b.exports=s},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":35,\"./nodejsUtils\":12,\"./stream/GenericWorker\":25,\"./stream/StreamHelper\":26,\"./utf8\":28,\"./utils\":29,\"./zipObject\":32}],14:[function(a,b,c){\"use strict\";function d(a){e.call(this,a);for(var b=0;b<this.data.length;b++)a[b]=255&a[b]}var e=a(\"./DataReader\"),f=a(\"../utils\");f.inherits(d,e),d.prototype.byteAt=function(a){return this.data[this.zero+a]},d.prototype.lastIndexOfSignature=function(a){for(var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.length-4;f>=0;--f)if(this.data[f]===b&&this.data[f+1]===c&&this.data[f+2]===d&&this.data[f+3]===e)return f-this.zero;return-1},d.prototype.readAndCheckSignature=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.readData(4);return b===f[0]&&c===f[1]&&d===f[2]&&e===f[3]},d.prototype.readData=function(a){if(this.checkOffset(a),0===a)return[];var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"../utils\":29,\"./DataReader\":15}],15:[function(a,b,c){\"use strict\";function d(a){this.data=a,this.length=a.length,this.index=0,this.zero=0}var e=a(\"../utils\");d.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<this.zero+a||0>a)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+a+\"). Corrupted zip ?\")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(a){},readInt:function(a){var b,c=0;for(this.checkOffset(a),b=this.index+a-1;b>=this.index;b--)c=(c<<8)+this.byteAt(b);return this.index+=a,c},readString:function(a){return e.transformTo(\"string\",this.readData(a))},readData:function(a){},lastIndexOfSignature:function(a){},readAndCheckSignature:function(a){},readDate:function(){var a=this.readInt(4);return new Date(Date.UTC((a>>25&127)+1980,(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1))}},b.exports=d},{\"../utils\":29}],16:[function(a,b,c){\"use strict\";function d(a){e.call(this,a)}var e=a(\"./Uint8ArrayReader\"),f=a(\"../utils\");f.inherits(d,e),d.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"../utils\":29,\"./Uint8ArrayReader\":18}],17:[function(a,b,c){\"use strict\";function d(a){e.call(this,a)}var e=a(\"./DataReader\"),f=a(\"../utils\");f.inherits(d,e),d.prototype.byteAt=function(a){return this.data.charCodeAt(this.zero+a)},d.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)-this.zero},d.prototype.readAndCheckSignature=function(a){var b=this.readData(4);return a===b},d.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"../utils\":29,\"./DataReader\":15}],18:[function(a,b,c){\"use strict\";function d(a){e.call(this,a)}var e=a(\"./ArrayReader\"),f=a(\"../utils\");f.inherits(d,e),d.prototype.readData=function(a){if(this.checkOffset(a),0===a)return new Uint8Array(0);var b=this.data.subarray(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"../utils\":29,\"./ArrayReader\":14}],19:[function(a,b,c){\"use strict\";var d=a(\"../utils\"),e=a(\"../support\"),f=a(\"./ArrayReader\"),g=a(\"./StringReader\"),h=a(\"./NodeBufferReader\"),i=a(\"./Uint8ArrayReader\");b.exports=function(a){var b=d.getTypeOf(a);return d.checkSupport(b),\"string\"!==b||e.uint8array?\"nodebuffer\"===b?new h(a):e.uint8array?new i(d.transformTo(\"uint8array\",a)):new f(d.transformTo(\"array\",a)):new g(a)}},{\"../support\":27,\"../utils\":29,\"./ArrayReader\":14,\"./NodeBufferReader\":16,\"./StringReader\":17,\"./Uint8ArrayReader\":18}],20:[function(a,b,c){\"use strict\";c.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",c.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",c.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",c.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",c.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",c.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],21:[function(a,b,c){\"use strict\";function d(a){e.call(this,\"ConvertWorker to \"+a),this.destType=a}var e=a(\"./GenericWorker\"),f=a(\"../utils\");f.inherits(d,e),d.prototype.processChunk=function(a){this.push({data:f.transformTo(this.destType,a.data),meta:a.meta})},b.exports=d},{\"../utils\":29,\"./GenericWorker\":25}],22:[function(a,b,c){\"use strict\";function d(){e.call(this,\"Crc32Probe\")}var e=a(\"./GenericWorker\"),f=a(\"../crc32\"),g=a(\"../utils\");g.inherits(d,e),d.prototype.processChunk=function(a){this.streamInfo.crc32=f(a.data,this.streamInfo.crc32||0),this.push(a)},b.exports=d},{\"../crc32\":4,\"../utils\":29,\"./GenericWorker\":25}],23:[function(a,b,c){\"use strict\";function d(a){f.call(this,\"DataLengthProbe for \"+a),this.propName=a,this.withStreamInfo(a,0)}var e=a(\"../utils\"),f=a(\"./GenericWorker\");e.inherits(d,f),d.prototype.processChunk=function(a){if(a){var b=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=b+a.data.length}f.prototype.processChunk.call(this,a)},b.exports=d},{\"../utils\":29,\"./GenericWorker\":25}],24:[function(a,b,c){\"use strict\";function d(a){f.call(this,\"DataWorker\");var b=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,a.then(function(a){b.dataIsReady=!0,b.data=a,b.max=a&&a.length||0,b.type=e.getTypeOf(a),b.isPaused||b._tickAndRepeat()},function(a){b.error(a)})}var e=a(\"../utils\"),f=a(\"./GenericWorker\"),g=16384;e.inherits(d,f),d.prototype.cleanUp=function(){f.prototype.cleanUp.call(this),this.data=null},d.prototype.resume=function(){return f.prototype.resume.call(this)?(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,e.delay(this._tickAndRepeat,[],this)),!0):!1},d.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(e.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},d.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var a=g,b=null,c=Math.min(this.max,this.index+a);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":b=this.data.substring(this.index,c);break;case\"uint8array\":b=this.data.subarray(this.index,c);break;case\"array\":case\"nodebuffer\":b=this.data.slice(this.index,c)}return this.index=c,this.push({data:b,meta:{percent:this.max?this.index/this.max*100:0}})},b.exports=d},{\"../utils\":29,\"./GenericWorker\":25}],25:[function(a,b,c){\"use strict\";function d(a){this.name=a||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}d.prototype={push:function(a){this.emit(\"data\",a)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(a){this.emit(\"error\",a)}return!0},error:function(a){return this.isFinished?!1:(this.isPaused?this.generatedError=a:(this.isFinished=!0,this.emit(\"error\",a),this.previous&&this.previous.error(a),this.cleanUp()),!0)},on:function(a,b){return this._listeners[a].push(b),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(a,b){if(this._listeners[a])for(var c=0;c<this._listeners[a].length;c++)this._listeners[a][c].call(this,b)},pipe:function(a){return a.registerPrevious(this)},registerPrevious:function(a){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=a.streamInfo,this.mergeStreamInfo(),this.previous=a;var b=this;return a.on(\"data\",function(a){b.processChunk(a)}),a.on(\"end\",function(){b.end()}),a.on(\"error\",function(a){b.error(a)}),this},pause:function(){return this.isPaused||this.isFinished?!1:(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;this.isPaused=!1;var a=!1;return this.generatedError&&(this.error(this.generatedError),a=!0),this.previous&&this.previous.resume(),!a},flush:function(){},processChunk:function(a){this.push(a)},withStreamInfo:function(a,b){return this.extraStreamInfo[a]=b,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var a in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(a)&&(this.streamInfo[a]=this.extraStreamInfo[a])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var a=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+a:a}},b.exports=d},{}],26:[function(a,b,c){(function(c){\"use strict\";function d(a,b,c){switch(a){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",b),c);case\"base64\":return k.encode(b);default:return h.transformTo(a,b)}}function e(a,b){var d,e=0,f=null,g=0;for(d=0;d<b.length;d++)g+=b[d].length;switch(a){case\"string\":return b.join(\"\");case\"array\":return Array.prototype.concat.apply([],b);case\"uint8array\":for(f=new Uint8Array(g),d=0;d<b.length;d++)f.set(b[d],e),e+=b[d].length;return f;case\"nodebuffer\":return c.concat(b);default:throw new Error(\"concat : unsupported type '\"+a+\"'\")}}function f(a,b){return new m.Promise(function(c,f){var g=[],h=a._internalType,i=a._outputType,j=a._mimeType;a.on(\"data\",function(a,c){g.push(a),b&&b(c)}).on(\"error\",function(a){g=[],f(a)}).on(\"end\",function(){try{var a=d(i,e(h,g),j);c(a)}catch(b){f(b)}g=[]}).resume()})}function g(a,b,c){var d=b;switch(b){case\"blob\":case\"arraybuffer\":d=\"uint8array\";break;case\"base64\":d=\"string\"}try{this._internalType=d,this._outputType=b,this._mimeType=c,h.checkSupport(d),this._worker=a.pipe(new i(d)),a.lock()}catch(e){this._worker=new j(\"error\"),this._worker.error(e)}}var h=a(\"../utils\"),i=a(\"./ConvertWorker\"),j=a(\"./GenericWorker\"),k=a(\"../base64\"),l=a(\"../nodejs/NodejsStreamOutputAdapter\"),m=a(\"../external\");g.prototype={accumulate:function(a){return f(this,a)},on:function(a,b){var c=this;return\"data\"===a?this._worker.on(a,function(a){b.call(c,a.data,a.meta)}):this._worker.on(a,function(){h.delay(b,arguments,c)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(a){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new l(this,{objectMode:\"nodebuffer\"!==this._outputType},a)}},b.exports=g}).call(this,\"undefined\"!=typeof Buffer?Buffer:void 0)},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":35,\"../utils\":29,\"./ConvertWorker\":21,\"./GenericWorker\":25}],27:[function(a,b,c){(function(b){\"use strict\";if(c.base64=!0,c.array=!0,c.string=!0,c.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,c.nodebuffer=\"undefined\"!=typeof b,c.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)c.blob=!1;else{var d=new ArrayBuffer(0);try{c.blob=0===new Blob([d],{type:\"application/zip\"}).size}catch(e){try{var f=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,g=new f;g.append(d),c.blob=0===g.getBlob(\"application/zip\").size}catch(e){c.blob=!1}}}c.nodestream=!!a(\"./nodejs/NodejsStreamOutputAdapter\").prototype}).call(this,\"undefined\"!=typeof Buffer?Buffer:void 0)},{\"./nodejs/NodejsStreamOutputAdapter\":35}],28:[function(a,b,c){\"use strict\";function d(){i.call(this,\"utf-8 decode\"),this.leftOver=null}function e(){i.call(this,\"utf-8 encode\")}for(var f=a(\"./utils\"),g=a(\"./support\"),h=a(\"./nodejsUtils\"),i=a(\"./stream/GenericWorker\"),j=new Array(256),k=0;256>k;k++)j[k]=k>=252?6:k>=248?5:k>=240?4:k>=224?3:k>=192?2:1;j[254]=j[254]=1;var l=function(a){var b,c,d,e,f,h=a.length,i=0;for(e=0;h>e;e++)c=a.charCodeAt(e),55296===(64512&c)&&h>e+1&&(d=a.charCodeAt(e+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),e++)),i+=128>c?1:2048>c?2:65536>c?3:4;for(b=g.uint8array?new Uint8Array(i):new Array(i),f=0,e=0;i>f;e++)c=a.charCodeAt(e),55296===(64512&c)&&h>e+1&&(d=a.charCodeAt(e+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),e++)),128>c?b[f++]=c:2048>c?(b[f++]=192|c>>>6,b[f++]=128|63&c):65536>c?(b[f++]=224|c>>>12,b[f++]=128|c>>>6&63,b[f++]=128|63&c):(b[f++]=240|c>>>18,b[f++]=128|c>>>12&63,b[f++]=128|c>>>6&63,b[f++]=128|63&c);return b},m=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return 0>c?b:0===c?b:c+j[a[c]]>b?c:b},n=function(a){var b,c,d,e,g=a.length,h=new Array(2*g);for(c=0,b=0;g>b;)if(d=a[b++],128>d)h[c++]=d;else if(e=j[d],e>4)h[c++]=65533,b+=e-1;else{for(d&=2===e?31:3===e?15:7;e>1&&g>b;)d=d<<6|63&a[b++],e--;e>1?h[c++]=65533:65536>d?h[c++]=d:(d-=65536,h[c++]=55296|d>>10&1023,h[c++]=56320|1023&d)}return h.length!==c&&(h.subarray?h=h.subarray(0,c):h.length=c),f.applyFromCharCode(h)};c.utf8encode=function(a){return g.nodebuffer?h.newBuffer(a,\"utf-8\"):l(a)},c.utf8decode=function(a){return g.nodebuffer?f.transformTo(\"nodebuffer\",a).toString(\"utf-8\"):(a=f.transformTo(g.uint8array?\"uint8array\":\"array\",a),n(a))},f.inherits(d,i),d.prototype.processChunk=function(a){var b=f.transformTo(g.uint8array?\"uint8array\":\"array\",a.data);if(this.leftOver&&this.leftOver.length){if(g.uint8array){var d=b;b=new Uint8Array(d.length+this.leftOver.length),b.set(this.leftOver,0),b.set(d,this.leftOver.length)}else b=this.leftOver.concat(b);this.leftOver=null}var e=m(b),h=b;e!==b.length&&(g.uint8array?(h=b.subarray(0,e),this.leftOver=b.subarray(e,b.length)):(h=b.slice(0,e),this.leftOver=b.slice(e,b.length))),this.push({data:c.utf8decode(h),meta:a.meta})},d.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:c.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},c.Utf8DecodeWorker=d,f.inherits(e,i),e.prototype.processChunk=function(a){this.push({data:c.utf8encode(a.data),meta:a.meta})},c.Utf8EncodeWorker=e},{\"./nodejsUtils\":12,\"./stream/GenericWorker\":25,\"./support\":27,\"./utils\":29}],29:[function(a,b,c){\"use strict\";function d(a){var b=null;return b=i.uint8array?new Uint8Array(a.length):new Array(a.length),f(a,b)}function e(a){return a}function f(a,b){for(var c=0;c<a.length;++c)b[c]=255&a.charCodeAt(c);return b}function g(a){var b=65536,d=c.getTypeOf(a),e=!0;if(\"uint8array\"===d?e=n.applyCanBeUsed.uint8array:\"nodebuffer\"===d&&(e=n.applyCanBeUsed.nodebuffer),e)for(;b>1;)try{return n.stringifyByChunk(a,d,b)}catch(f){b=Math.floor(b/2)}return n.stringifyByChar(a)}function h(a,b){for(var c=0;c<a.length;c++)b[c]=a[c];return b}var i=a(\"./support\"),j=a(\"./base64\"),k=a(\"./nodejsUtils\"),l=a(\"asap\"),m=a(\"./external\");c.newBlob=function(a,b){c.checkSupport(\"blob\");try{return new Blob([a],{type:b})}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;return f.append(a),f.getBlob(b)}catch(d){throw new Error(\"Bug : can't construct the Blob.\")}}};var n={stringifyByChunk:function(a,b,c){var d=[],e=0,f=a.length;if(c>=f)return String.fromCharCode.apply(null,a);for(;f>e;)\"array\"===b||\"nodebuffer\"===b?d.push(String.fromCharCode.apply(null,a.slice(e,Math.min(e+c,f)))):d.push(String.fromCharCode.apply(null,a.subarray(e,Math.min(e+c,f)))),e+=c;return d.join(\"\")},stringifyByChar:function(a){for(var b=\"\",c=0;c<a.length;c++)b+=String.fromCharCode(a[c]);return b},applyCanBeUsed:{uint8array:function(){try{return i.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(a){return!1}}(),nodebuffer:function(){try{return i.nodebuffer&&1===String.fromCharCode.apply(null,k.newBuffer(1)).length}catch(a){return!1}}()}};c.applyFromCharCode=g;var o={};o.string={string:e,array:function(a){return f(a,new Array(a.length))},arraybuffer:function(a){return o.string.uint8array(a).buffer},uint8array:function(a){return f(a,new Uint8Array(a.length))},nodebuffer:function(a){return f(a,k.newBuffer(a.length))}},o.array={string:g,array:e,arraybuffer:function(a){return new Uint8Array(a).buffer},uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return k.newBuffer(a)}},o.arraybuffer={string:function(a){return g(new Uint8Array(a));",
                "},array:function(a){return h(new Uint8Array(a),new Array(a.byteLength))},arraybuffer:e,uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return k.newBuffer(new Uint8Array(a))}},o.uint8array={string:g,array:function(a){return h(a,new Array(a.length))},arraybuffer:function(a){return a.buffer},uint8array:e,nodebuffer:function(a){return k.newBuffer(a)}},o.nodebuffer={string:g,array:function(a){return h(a,new Array(a.length))},arraybuffer:function(a){return o.nodebuffer.uint8array(a).buffer},uint8array:function(a){return h(a,new Uint8Array(a.length))},nodebuffer:e},c.transformTo=function(a,b){if(b||(b=\"\"),!a)return b;c.checkSupport(a);var d=c.getTypeOf(b),e=o[d][a](b);return e},c.getTypeOf=function(a){return\"string\"==typeof a?\"string\":\"[object Array]\"===Object.prototype.toString.call(a)?\"array\":i.nodebuffer&&k.isBuffer(a)?\"nodebuffer\":i.uint8array&&a instanceof Uint8Array?\"uint8array\":i.arraybuffer&&a instanceof ArrayBuffer?\"arraybuffer\":void 0},c.checkSupport=function(a){var b=i[a.toLowerCase()];if(!b)throw new Error(a+\" is not supported by this platform\")},c.MAX_VALUE_16BITS=65535,c.MAX_VALUE_32BITS=-1,c.pretty=function(a){var b,c,d=\"\";for(c=0;c<(a||\"\").length;c++)b=a.charCodeAt(c),d+=\"\\\\x\"+(16>b?\"0\":\"\")+b.toString(16).toUpperCase();return d},c.delay=function(a,b,c){l(function(){a.apply(c||null,b||[])})},c.inherits=function(a,b){var c=function(){};c.prototype=b.prototype,a.prototype=new c},c.extend=function(){var a,b,c={};for(a=0;a<arguments.length;a++)for(b in arguments[a])arguments[a].hasOwnProperty(b)&&\"undefined\"==typeof c[b]&&(c[b]=arguments[a][b]);return c},c.prepareContent=function(a,b,e,f,g){var h=null;return h=i.blob&&b instanceof Blob&&\"undefined\"!=typeof FileReader?new m.Promise(function(a,c){var d=new FileReader;d.onload=function(b){a(b.target.result)},d.onerror=function(a){c(a.target.error)},d.readAsArrayBuffer(b)}):m.Promise.resolve(b),h.then(function(b){var h=c.getTypeOf(b);return h?(\"arraybuffer\"===h?b=c.transformTo(\"uint8array\",b):\"string\"===h&&(g?b=j.decode(b):e&&f!==!0&&(b=d(b))),b):m.Promise.reject(new Error(\"The data of '\"+a+\"' is in an unsupported format !\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":12,\"./support\":27,asap:33}],30:[function(a,b,c){\"use strict\";function d(a){this.files=[],this.loadOptions=a}var e=a(\"./reader/readerFor\"),f=a(\"./utils\"),g=a(\"./signature\"),h=a(\"./zipEntry\"),i=(a(\"./utf8\"),a(\"./support\"));d.prototype={checkSignature:function(a){if(!this.reader.readAndCheckSignature(a)){this.reader.index-=4;var b=this.reader.readString(4);throw new Error(\"Corrupted zip or bug : unexpected signature (\"+f.pretty(b)+\", expected \"+f.pretty(a)+\")\")}},isSignature:function(a,b){var c=this.reader.index;this.reader.setIndex(a);var d=this.reader.readString(4),e=d===b;return this.reader.setIndex(c),e},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var a=this.reader.readData(this.zipCommentLength),b=i.uint8array?\"uint8array\":\"array\",c=f.transformTo(b,a);this.zipComment=this.loadOptions.decodeFileName(c)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var a,b,c,d=this.zip64EndOfCentralSize-44,e=0;d>e;)a=this.reader.readInt(2),b=this.reader.readInt(4),c=this.reader.readData(b),this.zip64ExtensibleData[a]={id:a,length:b,value:c}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var a,b;for(a=0;a<this.files.length;a++)b=this.files[a],this.reader.setIndex(b.localHeaderOffset),this.checkSignature(g.LOCAL_FILE_HEADER),b.readLocalPart(this.reader),b.handleUTF8(),b.processAttributes()},readCentralDir:function(){var a;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(g.CENTRAL_FILE_HEADER);)a=new h({zip64:this.zip64},this.loadOptions),a.readCentralPart(this.reader),this.files.push(a);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var a=this.reader.lastIndexOfSignature(g.CENTRAL_DIRECTORY_END);if(0>a){var b=!this.isSignature(0,g.LOCAL_FILE_HEADER);throw b?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip : can't find end of central directory\")}this.reader.setIndex(a);var c=a;if(this.checkSignature(g.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===f.MAX_VALUE_16BITS||this.diskWithCentralDirStart===f.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===f.MAX_VALUE_16BITS||this.centralDirRecords===f.MAX_VALUE_16BITS||this.centralDirSize===f.MAX_VALUE_32BITS||this.centralDirOffset===f.MAX_VALUE_32BITS){if(this.zip64=!0,a=this.reader.lastIndexOfSignature(g.ZIP64_CENTRAL_DIRECTORY_LOCATOR),0>a)throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(a),this.checkSignature(g.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,g.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(g.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(g.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var d=this.centralDirOffset+this.centralDirSize;this.zip64&&(d+=20,d+=12+this.zip64EndOfCentralSize);var e=c-d;if(e>0)this.isSignature(c,g.CENTRAL_FILE_HEADER)||(this.reader.zero=e);else if(0>e)throw new Error(\"Corrupted zip: missing \"+Math.abs(e)+\" bytes.\")},prepareReader:function(a){this.reader=e(a)},load:function(a){this.prepareReader(a),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},b.exports=d},{\"./reader/readerFor\":19,\"./signature\":20,\"./support\":27,\"./utf8\":28,\"./utils\":29,\"./zipEntry\":31}],31:[function(a,b,c){\"use strict\";function d(a,b){this.options=a,this.loadOptions=b}var e=a(\"./reader/readerFor\"),f=a(\"./utils\"),g=a(\"./compressedObject\"),h=a(\"./crc32\"),i=a(\"./utf8\"),j=a(\"./compressions\"),k=a(\"./support\"),l=0,m=3,n=function(a){for(var b in j)if(j.hasOwnProperty(b)&&j[b].magic===a)return j[b];return null};d.prototype={isEncrypted:function(){return 1===(1&this.bitFlag)},useUTF8:function(){return 2048===(2048&this.bitFlag)},readLocalPart:function(a){var b,c;if(a.skip(22),this.fileNameLength=a.readInt(2),c=a.readInt(2),this.fileName=a.readData(this.fileNameLength),a.skip(c),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(b=n(this.compressionMethod),null===b)throw new Error(\"Corrupted zip : compression \"+f.pretty(this.compressionMethod)+\" unknown (inner file : \"+f.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new g(this.compressedSize,this.uncompressedSize,this.crc32,b,a.readData(this.compressedSize))},readCentralPart:function(a){this.versionMadeBy=a.readInt(2),a.skip(2),this.bitFlag=a.readInt(2),this.compressionMethod=a.readString(2),this.date=a.readDate(),this.crc32=a.readInt(4),this.compressedSize=a.readInt(4),this.uncompressedSize=a.readInt(4);var b=a.readInt(2);if(this.extraFieldsLength=a.readInt(2),this.fileCommentLength=a.readInt(2),this.diskNumberStart=a.readInt(2),this.internalFileAttributes=a.readInt(2),this.externalFileAttributes=a.readInt(4),this.localHeaderOffset=a.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");a.skip(b),this.readExtraFields(a),this.parseZIP64ExtraField(a),this.fileComment=a.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var a=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),a===l&&(this.dosPermissions=63&this.externalFileAttributes),a===m&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(a){if(this.extraFields[1]){var b=e(this.extraFields[1].value);this.uncompressedSize===f.MAX_VALUE_32BITS&&(this.uncompressedSize=b.readInt(8)),this.compressedSize===f.MAX_VALUE_32BITS&&(this.compressedSize=b.readInt(8)),this.localHeaderOffset===f.MAX_VALUE_32BITS&&(this.localHeaderOffset=b.readInt(8)),this.diskNumberStart===f.MAX_VALUE_32BITS&&(this.diskNumberStart=b.readInt(4))}},readExtraFields:function(a){var b,c,d,e=a.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});a.index<e;)b=a.readInt(2),c=a.readInt(2),d=a.readData(c),this.extraFields[b]={id:b,length:c,value:d}},handleUTF8:function(){var a=k.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=i.utf8decode(this.fileName),this.fileCommentStr=i.utf8decode(this.fileComment);else{var b=this.findExtraFieldUnicodePath();if(null!==b)this.fileNameStr=b;else{var c=f.transformTo(a,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(c)}var d=this.findExtraFieldUnicodeComment();if(null!==d)this.fileCommentStr=d;else{var e=f.transformTo(a,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(e)}}},findExtraFieldUnicodePath:function(){var a=this.extraFields[28789];if(a){var b=e(a.value);return 1!==b.readInt(1)?null:h(this.fileName)!==b.readInt(4)?null:i.utf8decode(b.readData(a.length-5))}return null},findExtraFieldUnicodeComment:function(){var a=this.extraFields[25461];if(a){var b=e(a.value);return 1!==b.readInt(1)?null:h(this.fileComment)!==b.readInt(4)?null:i.utf8decode(b.readData(a.length-5))}return null}},b.exports=d},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":19,\"./support\":27,\"./utf8\":28,\"./utils\":29}],32:[function(a,b,c){\"use strict\";var d=a(\"./stream/StreamHelper\"),e=a(\"./stream/DataWorker\"),f=a(\"./utf8\"),g=a(\"./compressedObject\"),h=a(\"./stream/GenericWorker\"),i=function(a,b,c){this.name=a,this.dir=c.dir,this.date=c.date,this.comment=c.comment,this.unixPermissions=c.unixPermissions,this.dosPermissions=c.dosPermissions,this._data=b,this._dataBinary=c.binary,this.options={compression:c.compression,compressionOptions:c.compressionOptions}};i.prototype={internalStream:function(a){var b=a.toLowerCase(),c=\"string\"===b||\"text\"===b;\"binarystring\"!==b&&\"text\"!==b||(b=\"string\");var e=this._decompressWorker(),g=!this._dataBinary;return g&&!c&&(e=e.pipe(new f.Utf8EncodeWorker)),!g&&c&&(e=e.pipe(new f.Utf8DecodeWorker)),new d(e,b,\"\")},async:function(a,b){return this.internalStream(a).accumulate(b)},nodeStream:function(a,b){return this.internalStream(a||\"nodebuffer\").toNodejsStream(b)},_compressWorker:function(a,b){if(this._data instanceof g&&this._data.compression.magic===a.magic)return this._data.getCompressedWorker();var c=this._decompressWorker();return this._dataBinary||(c=c.pipe(new f.Utf8EncodeWorker)),g.createWorkerFrom(c,a,b)},_decompressWorker:function(){return this._data instanceof g?this._data.getContentWorker():this._data instanceof h?this._data:new e(this._data)}};for(var j=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],k=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},l=0;l<j.length;l++)i.prototype[j[l]]=k;b.exports=i},{\"./compressedObject\":2,\"./stream/DataWorker\":24,\"./stream/GenericWorker\":25,\"./stream/StreamHelper\":26,\"./utf8\":28}],33:[function(a,b,c){\"use strict\";function d(){if(i.length)throw i.shift()}function e(a){var b;b=h.length?h.pop():new f,b.task=a,g(b)}function f(){this.task=null}var g=a(\"./raw\"),h=[],i=[],j=g.makeRequestCallFromTimer(d);b.exports=e,f.prototype.call=function(){try{this.task.call()}catch(a){e.onerror?e.onerror(a):(i.push(a),j())}finally{this.task=null,h[h.length]=this}}},{\"./raw\":34}],34:[function(a,b,c){(function(a){\"use strict\";function c(a){h.length||(g(),i=!0),h[h.length]=a}function d(){for(;j<h.length;){var a=j;if(j+=1,h[a].call(),j>k){for(var b=0,c=h.length-j;c>b;b++)h[b]=h[b+j];h.length-=j,j=0}}h.length=0,j=0,i=!1}function e(a){var b=1,c=new l(a),d=document.createTextNode(\"\");return c.observe(d,{characterData:!0}),function(){b=-b,d.data=b}}function f(a){return function(){function b(){clearTimeout(c),clearInterval(d),a()}var c=setTimeout(b,0),d=setInterval(b,50)}}b.exports=c;var g,h=[],i=!1,j=0,k=1024,l=a.MutationObserver||a.WebKitMutationObserver;g=\"function\"==typeof l?e(d):f(d),c.requestFlush=g,c.makeRequestCallFromTimer=f}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],35:[function(a,b,c){},{}],36:[function(a,b,c){function d(){k=!1,h.length?j=h.concat(j):l=-1,j.length&&e()}function e(){if(!k){var a=setTimeout(d);k=!0;for(var b=j.length;b;){for(h=j,j=[];++l<b;)h&&h[l].run();l=-1,b=j.length}h=null,k=!1,clearTimeout(a)}}function f(a,b){this.fun=a,this.array=b}function g(){}var h,i=b.exports={},j=[],k=!1,l=-1;i.nextTick=function(a){var b=new Array(arguments.length-1);if(arguments.length>1)for(var c=1;c<arguments.length;c++)b[c-1]=arguments[c];j.push(new f(a,b)),1!==j.length||k||setTimeout(e,0)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title=\"browser\",i.browser=!0,i.env={},i.argv=[],i.version=\"\",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.binding=function(a){throw new Error(\"process.binding is not supported\")},i.cwd=function(){return\"/\"},i.chdir=function(a){throw new Error(\"process.chdir is not supported\")},i.umask=function(){return 0}},{}],37:[function(b,c,d){(function(d,e){(function(){\"use strict\";function f(a){return\"function\"==typeof a||\"object\"==typeof a&&null!==a}function g(a){return\"function\"==typeof a}function h(a){return\"object\"==typeof a&&null!==a}function i(a){U=a}function j(a){Y=a}function k(){return function(){d.nextTick(p)}}function l(){return function(){T(p)}}function m(){var a=0,b=new _(p),c=document.createTextNode(\"\");return b.observe(c,{characterData:!0}),function(){c.data=a=++a%2}}function n(){var a=new MessageChannel;return a.port1.onmessage=p,function(){a.port2.postMessage(0)}}function o(){return function(){setTimeout(p,1)}}function p(){for(var a=0;X>a;a+=2){var b=ca[a],c=ca[a+1];b(c),ca[a]=void 0,ca[a+1]=void 0}X=0}function q(){try{var a=b,c=a(\"vertx\");return T=c.runOnLoop||c.runOnContext,l()}catch(d){return o()}}function r(){}function s(){return new TypeError(\"You cannot resolve a promise with itself\")}function t(){return new TypeError(\"A promises callback cannot return that same promise.\")}function u(a){try{return a.then}catch(b){return ga.error=b,ga}}function v(a,b,c,d){try{a.call(b,c,d)}catch(e){return e}}function w(a,b,c){Y(function(a){var d=!1,e=v(c,b,function(c){d||(d=!0,b!==c?z(a,c):B(a,c))},function(b){d||(d=!0,C(a,b))},\"Settle: \"+(a._label||\" unknown promise\"));!d&&e&&(d=!0,C(a,e))},a)}function x(a,b){b._state===ea?B(a,b._result):b._state===fa?C(a,b._result):D(b,void 0,function(b){z(a,b)},function(b){C(a,b)})}function y(a,b){if(b.constructor===a.constructor)x(a,b);else{var c=u(b);c===ga?C(a,ga.error):void 0===c?B(a,b):g(c)?w(a,b,c):B(a,b)}}function z(a,b){a===b?C(a,s()):f(b)?y(a,b):B(a,b)}function A(a){a._onerror&&a._onerror(a._result),E(a)}function B(a,b){a._state===da&&(a._result=b,a._state=ea,0!==a._subscribers.length&&Y(E,a))}function C(a,b){a._state===da&&(a._state=fa,a._result=b,Y(A,a))}function D(a,b,c,d){var e=a._subscribers,f=e.length;a._onerror=null,e[f]=b,e[f+ea]=c,e[f+fa]=d,0===f&&a._state&&Y(E,a)}function E(a){var b=a._subscribers,c=a._state;if(0!==b.length){for(var d,e,f=a._result,g=0;g<b.length;g+=3)d=b[g],e=b[g+c],d?H(c,d,e,f):e(f);a._subscribers.length=0}}function F(){this.error=null}function G(a,b){try{return a(b)}catch(c){return ha.error=c,ha}}function H(a,b,c,d){var e,f,h,i,j=g(c);if(j){if(e=G(c,d),e===ha?(i=!0,f=e.error,e=null):h=!0,b===e)return void C(b,t())}else e=d,h=!0;b._state!==da||(j&&h?z(b,e):i?C(b,f):a===ea?B(b,e):a===fa&&C(b,e))}function I(a,b){try{b(function(b){z(a,b)},function(b){C(a,b)})}catch(c){C(a,c)}}function J(a,b){var c=this;c._instanceConstructor=a,c.promise=new a(r),c._validateInput(b)?(c._input=b,c.length=b.length,c._remaining=b.length,c._init(),0===c.length?B(c.promise,c._result):(c.length=c.length||0,c._enumerate(),0===c._remaining&&B(c.promise,c._result))):C(c.promise,c._validationError())}function K(a){return new ia(this,a).promise}function L(a){function b(a){z(e,a)}function c(a){C(e,a)}var d=this,e=new d(r);if(!W(a))return C(e,new TypeError(\"You must pass an array to race.\")),e;for(var f=a.length,g=0;e._state===da&&f>g;g++)D(d.resolve(a[g]),void 0,b,c);return e}function M(a){var b=this;if(a&&\"object\"==typeof a&&a.constructor===b)return a;var c=new b(r);return z(c,a),c}function N(a){var b=this,c=new b(r);return C(c,a),c}function O(){throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\")}function P(){throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\")}function Q(a){this._id=na++,this._state=void 0,this._result=void 0,this._subscribers=[],r!==a&&(g(a)||O(),this instanceof Q||P(),I(this,a))}function R(){var a;if(\"undefined\"!=typeof e)a=e;else if(\"undefined\"!=typeof self)a=self;else try{a=Function(\"return this\")()}catch(b){throw new Error(\"polyfill failed because global object is unavailable in this environment\")}var c=a.Promise;c&&\"[object Promise]\"===Object.prototype.toString.call(c.resolve())&&!c.cast||(a.Promise=oa)}var S;S=Array.isArray?Array.isArray:function(a){return\"[object Array]\"===Object.prototype.toString.call(a)};var T,U,V,W=S,X=0,Y=({}.toString,function(a,b){ca[X]=a,ca[X+1]=b,X+=2,2===X&&(U?U(p):V())}),Z=\"undefined\"!=typeof window?window:void 0,$=Z||{},_=$.MutationObserver||$.WebKitMutationObserver,aa=\"undefined\"!=typeof d&&\"[object process]\"==={}.toString.call(d),ba=\"undefined\"!=typeof Uint8ClampedArray&&\"undefined\"!=typeof importScripts&&\"undefined\"!=typeof MessageChannel,ca=new Array(1e3);V=aa?k():_?m():ba?n():void 0===Z&&\"function\"==typeof b?q():o();var da=void 0,ea=1,fa=2,ga=new F,ha=new F;J.prototype._validateInput=function(a){return W(a)},J.prototype._validationError=function(){return new Error(\"Array Methods must be provided an Array\")},J.prototype._init=function(){this._result=new Array(this.length)};var ia=J;J.prototype._enumerate=function(){for(var a=this,b=a.length,c=a.promise,d=a._input,e=0;c._state===da&&b>e;e++)a._eachEntry(d[e],e)},J.prototype._eachEntry=function(a,b){var c=this,d=c._instanceConstructor;h(a)?a.constructor===d&&a._state!==da?(a._onerror=null,c._settledAt(a._state,b,a._result)):c._willSettleAt(d.resolve(a),b):(c._remaining--,c._result[b]=a)},J.prototype._settledAt=function(a,b,c){var d=this,e=d.promise;e._state===da&&(d._remaining--,a===fa?C(e,c):d._result[b]=c),0===d._remaining&&B(e,d._result)},J.prototype._willSettleAt=function(a,b){var c=this;D(a,void 0,function(a){c._settledAt(ea,b,a)},function(a){c._settledAt(fa,b,a)})};var ja=K,ka=L,la=M,ma=N,na=0,oa=Q;Q.all=ja,Q.race=ka,Q.resolve=la,Q.reject=ma,Q._setScheduler=i,Q._setAsap=j,Q._asap=Y,Q.prototype={constructor:Q,then:function(a,b){var c=this,d=c._state;if(d===ea&&!a||d===fa&&!b)return this;var e=new this.constructor(r),f=c._result;if(d){var g=arguments[d-1];Y(function(){H(d,e,g,f)})}else D(c,e,a,b);return e},\"catch\":function(a){return this.then(null,a)}};var pa=R,qa={Promise:oa,polyfill:pa};\"function\"==typeof a&&a.amd?a(function(){return qa}):\"undefined\"!=typeof c&&c.exports?c.exports=qa:\"undefined\"!=typeof this&&(this.ES6Promise=qa),pa()}).call(this)}).call(this,b(\"_process\"),\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{_process:36}],38:[function(a,b,c){\"use strict\";var d=a(\"./lib/utils/common\").assign,e=a(\"./lib/deflate\"),f=a(\"./lib/inflate\"),g=a(\"./lib/zlib/constants\"),h={};d(h,e,f,g),b.exports=h},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(a,b,c){\"use strict\";function d(a){if(!(this instanceof d))return new d(a);this.options=i.assign({level:s,method:u,chunkSize:16384,windowBits:15,memLevel:8,strategy:t,to:\"\"},a||{});var b=this.options;b.raw&&b.windowBits>0?b.windowBits=-b.windowBits:b.gzip&&b.windowBits>0&&b.windowBits<16&&(b.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var c=h.deflateInit2(this.strm,b.level,b.method,b.windowBits,b.memLevel,b.strategy);if(c!==p)throw new Error(k[c]);if(b.header&&h.deflateSetHeader(this.strm,b.header),b.dictionary){var e;if(e=\"string\"==typeof b.dictionary?j.string2buf(b.dictionary):\"[object ArrayBuffer]\"===m.call(b.dictionary)?new Uint8Array(b.dictionary):b.dictionary,c=h.deflateSetDictionary(this.strm,e),c!==p)throw new Error(k[c]);this._dict_set=!0}}function e(a,b){var c=new d(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function f(a,b){return b=b||{},b.raw=!0,e(a,b)}function g(a,b){return b=b||{},b.gzip=!0,e(a,b)}var h=a(\"./zlib/deflate\"),i=a(\"./utils/common\"),j=a(\"./utils/strings\"),k=a(\"./zlib/messages\"),l=a(\"./zlib/zstream\"),m=Object.prototype.toString,n=0,o=4,p=0,q=1,r=2,s=-1,t=0,u=8;d.prototype.push=function(a,b){var c,d,e=this.strm,f=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?o:n,\"string\"==typeof a?e.input=j.string2buf(a):\"[object ArrayBuffer]\"===m.call(a)?e.input=new Uint8Array(a):e.input=a,e.next_in=0,e.avail_in=e.input.length;do{if(0===e.avail_out&&(e.output=new i.Buf8(f),e.next_out=0,e.avail_out=f),c=h.deflate(e,d),c!==q&&c!==p)return this.onEnd(c),this.ended=!0,!1;0!==e.avail_out&&(0!==e.avail_in||d!==o&&d!==r)||(\"string\"===this.options.to?this.onData(j.buf2binstring(i.shrinkBuf(e.output,e.next_out))):this.onData(i.shrinkBuf(e.output,e.next_out)))}while((e.avail_in>0||0===e.avail_out)&&c!==q);return d===o?(c=h.deflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===p):d===r?(this.onEnd(p),e.avail_out=0,!0):!0},d.prototype.onData=function(a){this.chunks.push(a)},d.prototype.onEnd=function(a){a===p&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Deflate=d,c.deflate=e,c.deflateRaw=f,c.gzip=g},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(a,b,c){\"use strict\";function d(a){if(!(this instanceof d))return new d(a);this.options=h.assign({chunkSize:16384,windowBits:0,to:\"\"},a||{});var b=this.options;b.raw&&b.windowBits>=0&&b.windowBits<16&&(b.windowBits=-b.windowBits,0===b.windowBits&&(b.windowBits=-15)),!(b.windowBits>=0&&b.windowBits<16)||a&&a.windowBits||(b.windowBits+=32),b.windowBits>15&&b.windowBits<48&&0===(15&b.windowBits)&&(b.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var c=g.inflateInit2(this.strm,b.windowBits);if(c!==j.Z_OK)throw new Error(k[c]);this.header=new m,g.inflateGetHeader(this.strm,this.header)}function e(a,b){var c=new d(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function f(a,b){return b=b||{},b.raw=!0,e(a,b)}var g=a(\"./zlib/inflate\"),h=a(\"./utils/common\"),i=a(\"./utils/strings\"),j=a(\"./zlib/constants\"),k=a(\"./zlib/messages\"),l=a(\"./zlib/zstream\"),m=a(\"./zlib/gzheader\"),n=Object.prototype.toString;d.prototype.push=function(a,b){var c,d,e,f,k,l,m=this.strm,o=this.options.chunkSize,p=this.options.dictionary,q=!1;if(this.ended)return!1;d=b===~~b?b:b===!0?j.Z_FINISH:j.Z_NO_FLUSH,\"string\"==typeof a?m.input=i.binstring2buf(a):\"[object ArrayBuffer]\"===n.call(a)?m.input=new Uint8Array(a):m.input=a,m.next_in=0,m.avail_in=m.input.length;do{if(0===m.avail_out&&(m.output=new h.Buf8(o),m.next_out=0,m.avail_out=o),c=g.inflate(m,j.Z_NO_FLUSH),c===j.Z_NEED_DICT&&p&&(l=\"string\"==typeof p?i.string2buf(p):\"[object ArrayBuffer]\"===n.call(p)?new Uint8Array(p):p,c=g.inflateSetDictionary(this.strm,l)),c===j.Z_BUF_ERROR&&q===!0&&(c=j.Z_OK,q=!1),c!==j.Z_STREAM_END&&c!==j.Z_OK)return this.onEnd(c),this.ended=!0,!1;m.next_out&&(0!==m.avail_out&&c!==j.Z_STREAM_END&&(0!==m.avail_in||d!==j.Z_FINISH&&d!==j.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(e=i.utf8border(m.output,m.next_out),f=m.next_out-e,k=i.buf2string(m.output,e),m.next_out=f,m.avail_out=o-f,f&&h.arraySet(m.output,m.output,e,f,0),this.onData(k)):this.onData(h.shrinkBuf(m.output,m.next_out)))),0===m.avail_in&&0===m.avail_out&&(q=!0)}while((m.avail_in>0||0===m.avail_out)&&c!==j.Z_STREAM_END);return c===j.Z_STREAM_END&&(d=j.Z_FINISH),d===j.Z_FINISH?(c=g.inflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===j.Z_OK):d===j.Z_SYNC_FLUSH?(this.onEnd(j.Z_OK),m.avail_out=0,!0):!0},d.prototype.onData=function(a){this.chunks.push(a)},d.prototype.onEnd=function(a){a===j.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=h.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Inflate=d,c.inflate=e,c.inflateRaw=f,c.ungzip=e},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(a,b,c){\"use strict\";var d=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;c.assign=function(a){for(var b=Array.prototype.slice.call(arguments,1);b.length;){var c=b.shift();if(c){if(\"object\"!=typeof c)throw new TypeError(c+\"must be non-object\");for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}}return a},c.shrinkBuf=function(a,b){return a.length===b?a:a.subarray?a.subarray(0,b):(a.length=b,a)};var e={arraySet:function(a,b,c,d,e){if(b.subarray&&a.subarray)return void a.set(b.subarray(c,c+d),e);for(var f=0;d>f;f++)a[e+f]=b[c+f]},flattenChunks:function(a){var b,c,d,e,f,g;for(d=0,b=0,c=a.length;c>b;b++)d+=a[b].length;for(g=new Uint8Array(d),e=0,b=0,c=a.length;c>b;b++)f=a[b],g.set(f,e),e+=f.length;return g}},f={arraySet:function(a,b,c,d,e){for(var f=0;d>f;f++)a[e+f]=b[c+f]},flattenChunks:function(a){return[].concat.apply([],a)}};c.setTyped=function(a){a?(c.Buf8=Uint8Array,c.Buf16=Uint16Array,c.Buf32=Int32Array,c.assign(c,e)):(c.Buf8=Array,c.Buf16=Array,c.Buf32=Array,c.assign(c,f))},c.setTyped(d)},{}],42:[function(a,b,c){\"use strict\";function d(a,b){if(65537>b&&(a.subarray&&g||!a.subarray&&f))return String.fromCharCode.apply(null,e.shrinkBuf(a,b));for(var c=\"\",d=0;b>d;d++)c+=String.fromCharCode(a[d]);return c}var e=a(\"./common\"),f=!0,g=!0;try{String.fromCharCode.apply(null,[0])}catch(h){f=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(h){g=!1}for(var i=new e.Buf8(256),j=0;256>j;j++)i[j]=j>=252?6:j>=248?5:j>=240?4:j>=224?3:j>=192?2:1;i[254]=i[254]=1,c.string2buf=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;h>f;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=128>c?1:2048>c?2:65536>c?3:4;for(b=new e.Buf8(i),g=0,f=0;i>g;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),128>c?b[g++]=c:2048>c?(b[g++]=192|c>>>6,b[g++]=128|63&c):65536>c?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},c.buf2binstring=function(a){return d(a,a.length)},c.binstring2buf=function(a){for(var b=new e.Buf8(a.length),c=0,d=b.length;d>c;c++)b[c]=a.charCodeAt(c);return b},c.buf2string=function(a,b){var c,e,f,g,h=b||a.length,j=new Array(2*h);for(e=0,c=0;h>c;)if(f=a[c++],128>f)j[e++]=f;else if(g=i[f],g>4)j[e++]=65533,c+=g-1;else{for(f&=2===g?31:3===g?15:7;g>1&&h>c;)f=f<<6|63&a[c++],g--;g>1?j[e++]=65533:65536>f?j[e++]=f:(f-=65536,j[e++]=55296|f>>10&1023,j[e++]=56320|1023&f)}return d(j,e)},c.utf8border=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return 0>c?b:0===c?b:c+i[a[c]]>b?c:b}},{\"./common\":41}],43:[function(a,b,c){\"use strict\";function d(a,b,c,d){for(var e=65535&a|0,f=a>>>16&65535|0,g=0;0!==c;){g=c>2e3?2e3:c,c-=g;do e=e+b[d++]|0,f=f+e|0;while(--g);e%=65521,f%=65521}return e|f<<16|0}b.exports=d},{}],44:[function(a,b,c){\"use strict\";b.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(a,b,c){\"use strict\";function d(){for(var a,b=[],c=0;256>c;c++){a=c;for(var d=0;8>d;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function e(a,b,c,d){var e=f,g=d+c;a^=-1;for(var h=d;g>h;h++)a=a>>>8^e[255&(a^b[h])];return-1^a}var f=d();b.exports=e},{}],46:[function(a,b,c){\"use strict\";function d(a,b){return a.msg=I[b],b}function e(a){return(a<<1)-(a>4?9:0)}function f(a){for(var b=a.length;--b>=0;)a[b]=0}function g(a){var b=a.state,c=b.pending;c>a.avail_out&&(c=a.avail_out),0!==c&&(E.arraySet(a.output,b.pending_buf,b.pending_out,c,a.next_out),a.next_out+=c,b.pending_out+=c,a.total_out+=c,a.avail_out-=c,b.pending-=c,0===b.pending&&(b.pending_out=0))}function h(a,b){F._tr_flush_block(a,a.block_start>=0?a.block_start:-1,a.strstart-a.block_start,b),a.block_start=a.strstart,g(a.strm)}function i(a,b){a.pending_buf[a.pending++]=b}function j(a,b){a.pending_buf[a.pending++]=b>>>8&255,a.pending_buf[a.pending++]=255&b}function k(a,b,c,d){var e=a.avail_in;return e>d&&(e=d),0===e?0:(a.avail_in-=e,E.arraySet(b,a.input,a.next_in,e,c),1===a.state.wrap?a.adler=G(a.adler,b,e,c):2===a.state.wrap&&(a.adler=H(a.adler,b,e,c)),a.next_in+=e,a.total_in+=e,e)}function l(a,b){var c,d,e=a.max_chain_length,f=a.strstart,g=a.prev_length,h=a.nice_match,i=a.strstart>a.w_size-la?a.strstart-(a.w_size-la):0,j=a.window,k=a.w_mask,l=a.prev,m=a.strstart+ka,n=j[f+g-1],o=j[f+g];a.prev_length>=a.good_match&&(e>>=2),h>a.lookahead&&(h=a.lookahead);do if(c=b,j[c+g]===o&&j[c+g-1]===n&&j[c]===j[f]&&j[++c]===j[f+1]){f+=2,c++;do;while(j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&m>f);if(d=ka-(m-f),f=m-ka,d>g){if(a.match_start=b,g=d,d>=h)break;n=j[f+g-1],o=j[f+g]}}while((b=l[b&k])>i&&0!==--e);return g<=a.lookahead?g:a.lookahead}function m(a){var b,c,d,e,f,g=a.w_size;do{if(e=a.window_size-a.lookahead-a.strstart,a.strstart>=g+(g-la)){E.arraySet(a.window,a.window,g,g,0),a.match_start-=g,a.strstart-=g,a.block_start-=g,c=a.hash_size,b=c;do d=a.head[--b],a.head[b]=d>=g?d-g:0;while(--c);c=g,b=c;do d=a.prev[--b],a.prev[b]=d>=g?d-g:0;while(--c);e+=g}if(0===a.strm.avail_in)break;if(c=k(a.strm,a.window,a.strstart+a.lookahead,e),a.lookahead+=c,a.lookahead+a.insert>=ja)for(f=a.strstart-a.insert,a.ins_h=a.window[f],a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+1])&a.hash_mask;a.insert&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+ja-1])&a.hash_mask,a.prev[f&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=f,f++,a.insert--,",
                "\t!(a.lookahead+a.insert<ja)););}while(a.lookahead<la&&0!==a.strm.avail_in)}function n(a,b){var c=65535;for(c>a.pending_buf_size-5&&(c=a.pending_buf_size-5);;){if(a.lookahead<=1){if(m(a),0===a.lookahead&&b===J)return ua;if(0===a.lookahead)break}a.strstart+=a.lookahead,a.lookahead=0;var d=a.block_start+c;if((0===a.strstart||a.strstart>=d)&&(a.lookahead=a.strstart-d,a.strstart=d,h(a,!1),0===a.strm.avail_out))return ua;if(a.strstart-a.block_start>=a.w_size-la&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.strstart>a.block_start&&(h(a,!1),0===a.strm.avail_out)?ua:ua}function o(a,b){for(var c,d;;){if(a.lookahead<la){if(m(a),a.lookahead<la&&b===J)return ua;if(0===a.lookahead)break}if(c=0,a.lookahead>=ja&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),0!==c&&a.strstart-c<=a.w_size-la&&(a.match_length=l(a,c)),a.match_length>=ja)if(d=F._tr_tally(a,a.strstart-a.match_start,a.match_length-ja),a.lookahead-=a.match_length,a.match_length<=a.max_lazy_match&&a.lookahead>=ja){a.match_length--;do a.strstart++,a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart;while(0!==--a.match_length);a.strstart++}else a.strstart+=a.match_length,a.match_length=0,a.ins_h=a.window[a.strstart],a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+1])&a.hash_mask;else d=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++;if(d&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=a.strstart<ja-1?a.strstart:ja-1,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function p(a,b){for(var c,d,e;;){if(a.lookahead<la){if(m(a),a.lookahead<la&&b===J)return ua;if(0===a.lookahead)break}if(c=0,a.lookahead>=ja&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),a.prev_length=a.match_length,a.prev_match=a.match_start,a.match_length=ja-1,0!==c&&a.prev_length<a.max_lazy_match&&a.strstart-c<=a.w_size-la&&(a.match_length=l(a,c),a.match_length<=5&&(a.strategy===U||a.match_length===ja&&a.strstart-a.match_start>4096)&&(a.match_length=ja-1)),a.prev_length>=ja&&a.match_length<=a.prev_length){e=a.strstart+a.lookahead-ja,d=F._tr_tally(a,a.strstart-1-a.prev_match,a.prev_length-ja),a.lookahead-=a.prev_length-1,a.prev_length-=2;do++a.strstart<=e&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart);while(0!==--a.prev_length);if(a.match_available=0,a.match_length=ja-1,a.strstart++,d&&(h(a,!1),0===a.strm.avail_out))return ua}else if(a.match_available){if(d=F._tr_tally(a,0,a.window[a.strstart-1]),d&&h(a,!1),a.strstart++,a.lookahead--,0===a.strm.avail_out)return ua}else a.match_available=1,a.strstart++,a.lookahead--}return a.match_available&&(d=F._tr_tally(a,0,a.window[a.strstart-1]),a.match_available=0),a.insert=a.strstart<ja-1?a.strstart:ja-1,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function q(a,b){for(var c,d,e,f,g=a.window;;){if(a.lookahead<=ka){if(m(a),a.lookahead<=ka&&b===J)return ua;if(0===a.lookahead)break}if(a.match_length=0,a.lookahead>=ja&&a.strstart>0&&(e=a.strstart-1,d=g[e],d===g[++e]&&d===g[++e]&&d===g[++e])){f=a.strstart+ka;do;while(d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&f>e);a.match_length=ka-(f-e),a.match_length>a.lookahead&&(a.match_length=a.lookahead)}if(a.match_length>=ja?(c=F._tr_tally(a,1,a.match_length-ja),a.lookahead-=a.match_length,a.strstart+=a.match_length,a.match_length=0):(c=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++),c&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function r(a,b){for(var c;;){if(0===a.lookahead&&(m(a),0===a.lookahead)){if(b===J)return ua;break}if(a.match_length=0,c=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++,c&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function s(a,b,c,d,e){this.good_length=a,this.max_lazy=b,this.nice_length=c,this.max_chain=d,this.func=e}function t(a){a.window_size=2*a.w_size,f(a.head),a.max_lazy_match=D[a.level].max_lazy,a.good_match=D[a.level].good_length,a.nice_match=D[a.level].nice_length,a.max_chain_length=D[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=ja-1,a.match_available=0,a.ins_h=0}function u(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=$,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new E.Buf16(2*ha),this.dyn_dtree=new E.Buf16(2*(2*fa+1)),this.bl_tree=new E.Buf16(2*(2*ga+1)),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new E.Buf16(ia+1),this.heap=new E.Buf16(2*ea+1),f(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new E.Buf16(2*ea+1),f(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function v(a){var b;return a&&a.state?(a.total_in=a.total_out=0,a.data_type=Z,b=a.state,b.pending=0,b.pending_out=0,b.wrap<0&&(b.wrap=-b.wrap),b.status=b.wrap?na:sa,a.adler=2===b.wrap?0:1,b.last_flush=J,F._tr_init(b),O):d(a,Q)}function w(a){var b=v(a);return b===O&&t(a.state),b}function x(a,b){return a&&a.state?2!==a.state.wrap?Q:(a.state.gzhead=b,O):Q}function y(a,b,c,e,f,g){if(!a)return Q;var h=1;if(b===T&&(b=6),0>e?(h=0,e=-e):e>15&&(h=2,e-=16),1>f||f>_||c!==$||8>e||e>15||0>b||b>9||0>g||g>X)return d(a,Q);8===e&&(e=9);var i=new u;return a.state=i,i.strm=a,i.wrap=h,i.gzhead=null,i.w_bits=e,i.w_size=1<<i.w_bits,i.w_mask=i.w_size-1,i.hash_bits=f+7,i.hash_size=1<<i.hash_bits,i.hash_mask=i.hash_size-1,i.hash_shift=~~((i.hash_bits+ja-1)/ja),i.window=new E.Buf8(2*i.w_size),i.head=new E.Buf16(i.hash_size),i.prev=new E.Buf16(i.w_size),i.lit_bufsize=1<<f+6,i.pending_buf_size=4*i.lit_bufsize,i.pending_buf=new E.Buf8(i.pending_buf_size),i.d_buf=i.lit_bufsize>>1,i.l_buf=3*i.lit_bufsize,i.level=b,i.strategy=g,i.method=c,w(a)}function z(a,b){return y(a,b,$,aa,ba,Y)}function A(a,b){var c,h,k,l;if(!a||!a.state||b>N||0>b)return a?d(a,Q):Q;if(h=a.state,!a.output||!a.input&&0!==a.avail_in||h.status===ta&&b!==M)return d(a,0===a.avail_out?S:Q);if(h.strm=a,c=h.last_flush,h.last_flush=b,h.status===na)if(2===h.wrap)a.adler=0,i(h,31),i(h,139),i(h,8),h.gzhead?(i(h,(h.gzhead.text?1:0)+(h.gzhead.hcrc?2:0)+(h.gzhead.extra?4:0)+(h.gzhead.name?8:0)+(h.gzhead.comment?16:0)),i(h,255&h.gzhead.time),i(h,h.gzhead.time>>8&255),i(h,h.gzhead.time>>16&255),i(h,h.gzhead.time>>24&255),i(h,9===h.level?2:h.strategy>=V||h.level<2?4:0),i(h,255&h.gzhead.os),h.gzhead.extra&&h.gzhead.extra.length&&(i(h,255&h.gzhead.extra.length),i(h,h.gzhead.extra.length>>8&255)),h.gzhead.hcrc&&(a.adler=H(a.adler,h.pending_buf,h.pending,0)),h.gzindex=0,h.status=oa):(i(h,0),i(h,0),i(h,0),i(h,0),i(h,0),i(h,9===h.level?2:h.strategy>=V||h.level<2?4:0),i(h,ya),h.status=sa);else{var m=$+(h.w_bits-8<<4)<<8,n=-1;n=h.strategy>=V||h.level<2?0:h.level<6?1:6===h.level?2:3,m|=n<<6,0!==h.strstart&&(m|=ma),m+=31-m%31,h.status=sa,j(h,m),0!==h.strstart&&(j(h,a.adler>>>16),j(h,65535&a.adler)),a.adler=1}if(h.status===oa)if(h.gzhead.extra){for(k=h.pending;h.gzindex<(65535&h.gzhead.extra.length)&&(h.pending!==h.pending_buf_size||(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending!==h.pending_buf_size));)i(h,255&h.gzhead.extra[h.gzindex]),h.gzindex++;h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),h.gzindex===h.gzhead.extra.length&&(h.gzindex=0,h.status=pa)}else h.status=pa;if(h.status===pa)if(h.gzhead.name){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.name.length?255&h.gzhead.name.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.gzindex=0,h.status=qa)}else h.status=qa;if(h.status===qa)if(h.gzhead.comment){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.comment.length?255&h.gzhead.comment.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.status=ra)}else h.status=ra;if(h.status===ra&&(h.gzhead.hcrc?(h.pending+2>h.pending_buf_size&&g(a),h.pending+2<=h.pending_buf_size&&(i(h,255&a.adler),i(h,a.adler>>8&255),a.adler=0,h.status=sa)):h.status=sa),0!==h.pending){if(g(a),0===a.avail_out)return h.last_flush=-1,O}else if(0===a.avail_in&&e(b)<=e(c)&&b!==M)return d(a,S);if(h.status===ta&&0!==a.avail_in)return d(a,S);if(0!==a.avail_in||0!==h.lookahead||b!==J&&h.status!==ta){var o=h.strategy===V?r(h,b):h.strategy===W?q(h,b):D[h.level].func(h,b);if(o!==wa&&o!==xa||(h.status=ta),o===ua||o===wa)return 0===a.avail_out&&(h.last_flush=-1),O;if(o===va&&(b===K?F._tr_align(h):b!==N&&(F._tr_stored_block(h,0,0,!1),b===L&&(f(h.head),0===h.lookahead&&(h.strstart=0,h.block_start=0,h.insert=0))),g(a),0===a.avail_out))return h.last_flush=-1,O}return b!==M?O:h.wrap<=0?P:(2===h.wrap?(i(h,255&a.adler),i(h,a.adler>>8&255),i(h,a.adler>>16&255),i(h,a.adler>>24&255),i(h,255&a.total_in),i(h,a.total_in>>8&255),i(h,a.total_in>>16&255),i(h,a.total_in>>24&255)):(j(h,a.adler>>>16),j(h,65535&a.adler)),g(a),h.wrap>0&&(h.wrap=-h.wrap),0!==h.pending?O:P)}function B(a){var b;return a&&a.state?(b=a.state.status,b!==na&&b!==oa&&b!==pa&&b!==qa&&b!==ra&&b!==sa&&b!==ta?d(a,Q):(a.state=null,b===sa?d(a,R):O)):Q}function C(a,b){var c,d,e,g,h,i,j,k,l=b.length;if(!a||!a.state)return Q;if(c=a.state,g=c.wrap,2===g||1===g&&c.status!==na||c.lookahead)return Q;for(1===g&&(a.adler=G(a.adler,b,l,0)),c.wrap=0,l>=c.w_size&&(0===g&&(f(c.head),c.strstart=0,c.block_start=0,c.insert=0),k=new E.Buf8(c.w_size),E.arraySet(k,b,l-c.w_size,c.w_size,0),b=k,l=c.w_size),h=a.avail_in,i=a.next_in,j=a.input,a.avail_in=l,a.next_in=0,a.input=b,m(c);c.lookahead>=ja;){d=c.strstart,e=c.lookahead-(ja-1);do c.ins_h=(c.ins_h<<c.hash_shift^c.window[d+ja-1])&c.hash_mask,c.prev[d&c.w_mask]=c.head[c.ins_h],c.head[c.ins_h]=d,d++;while(--e);c.strstart=d,c.lookahead=ja-1,m(c)}return c.strstart+=c.lookahead,c.block_start=c.strstart,c.insert=c.lookahead,c.lookahead=0,c.match_length=c.prev_length=ja-1,c.match_available=0,a.next_in=i,a.input=j,a.avail_in=h,c.wrap=g,O}var D,E=a(\"../utils/common\"),F=a(\"./trees\"),G=a(\"./adler32\"),H=a(\"./crc32\"),I=a(\"./messages\"),J=0,K=1,L=3,M=4,N=5,O=0,P=1,Q=-2,R=-3,S=-5,T=-1,U=1,V=2,W=3,X=4,Y=0,Z=2,$=8,_=9,aa=15,ba=8,ca=29,da=256,ea=da+1+ca,fa=30,ga=19,ha=2*ea+1,ia=15,ja=3,ka=258,la=ka+ja+1,ma=32,na=42,oa=69,pa=73,qa=91,ra=103,sa=113,ta=666,ua=1,va=2,wa=3,xa=4,ya=3;D=[new s(0,0,0,0,n),new s(4,4,8,4,o),new s(4,5,16,8,o),new s(4,6,32,32,o),new s(4,4,16,16,p),new s(8,16,32,32,p),new s(8,16,128,128,p),new s(8,32,128,256,p),new s(32,128,258,1024,p),new s(32,258,258,4096,p)],c.deflateInit=z,c.deflateInit2=y,c.deflateReset=w,c.deflateResetKeep=v,c.deflateSetHeader=x,c.deflate=A,c.deflateEnd=B,c.deflateSetDictionary=C,c.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(a,b,c){\"use strict\";function d(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}b.exports=d},{}],48:[function(a,b,c){\"use strict\";var d=30,e=12;b.exports=function(a,b){var c,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;c=a.state,f=a.next_in,B=a.input,g=f+(a.avail_in-5),h=a.next_out,C=a.output,i=h-(b-a.avail_out),j=h+(a.avail_out-257),k=c.dmax,l=c.wsize,m=c.whave,n=c.wnext,o=c.window,p=c.hold,q=c.bits,r=c.lencode,s=c.distcode,t=(1<<c.lenbits)-1,u=(1<<c.distbits)-1;a:do{15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=r[p&t];b:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,0===w)C[h++]=65535&v;else{if(!(16&w)){if(0===(64&w)){v=r[(65535&v)+(p&(1<<w)-1)];continue b}if(32&w){c.mode=e;break a}a.msg=\"invalid literal/length code\",c.mode=d;break a}x=65535&v,w&=15,w&&(w>q&&(p+=B[f++]<<q,q+=8),x+=p&(1<<w)-1,p>>>=w,q-=w),15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=s[p&u];c:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,!(16&w)){if(0===(64&w)){v=s[(65535&v)+(p&(1<<w)-1)];continue c}a.msg=\"invalid distance code\",c.mode=d;break a}if(y=65535&v,w&=15,w>q&&(p+=B[f++]<<q,q+=8,w>q&&(p+=B[f++]<<q,q+=8)),y+=p&(1<<w)-1,y>k){a.msg=\"invalid distance too far back\",c.mode=d;break a}if(p>>>=w,q-=w,w=h-i,y>w){if(w=y-w,w>m&&c.sane){a.msg=\"invalid distance too far back\",c.mode=d;break a}if(z=0,A=o,0===n){if(z+=l-w,x>w){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}else if(w>n){if(z+=l+n-w,w-=n,x>w){x-=w;do C[h++]=o[z++];while(--w);if(z=0,x>n){w=n,x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}}else if(z+=n-w,x>w){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}for(;x>2;)C[h++]=A[z++],C[h++]=A[z++],C[h++]=A[z++],x-=3;x&&(C[h++]=A[z++],x>1&&(C[h++]=A[z++]))}else{z=h-y;do C[h++]=C[z++],C[h++]=C[z++],C[h++]=C[z++],x-=3;while(x>2);x&&(C[h++]=C[z++],x>1&&(C[h++]=C[z++]))}break}}break}}while(g>f&&j>h);x=q>>3,f-=x,q-=x<<3,p&=(1<<q)-1,a.next_in=f,a.next_out=h,a.avail_in=g>f?5+(g-f):5-(f-g),a.avail_out=j>h?257+(j-h):257-(h-j),c.hold=p,c.bits=q}},{}],49:[function(a,b,c){\"use strict\";function d(a){return(a>>>24&255)+(a>>>8&65280)+((65280&a)<<8)+((255&a)<<24)}function e(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new s.Buf16(320),this.work=new s.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function f(a){var b;return a&&a.state?(b=a.state,a.total_in=a.total_out=b.total=0,a.msg=\"\",b.wrap&&(a.adler=1&b.wrap),b.mode=L,b.last=0,b.havedict=0,b.dmax=32768,b.head=null,b.hold=0,b.bits=0,b.lencode=b.lendyn=new s.Buf32(pa),b.distcode=b.distdyn=new s.Buf32(qa),b.sane=1,b.back=-1,D):G}function g(a){var b;return a&&a.state?(b=a.state,b.wsize=0,b.whave=0,b.wnext=0,f(a)):G}function h(a,b){var c,d;return a&&a.state?(d=a.state,0>b?(c=0,b=-b):(c=(b>>4)+1,48>b&&(b&=15)),b&&(8>b||b>15)?G:(null!==d.window&&d.wbits!==b&&(d.window=null),d.wrap=c,d.wbits=b,g(a))):G}function i(a,b){var c,d;return a?(d=new e,a.state=d,d.window=null,c=h(a,b),c!==D&&(a.state=null),c):G}function j(a){return i(a,sa)}function k(a){if(ta){var b;for(q=new s.Buf32(512),r=new s.Buf32(32),b=0;144>b;)a.lens[b++]=8;for(;256>b;)a.lens[b++]=9;for(;280>b;)a.lens[b++]=7;for(;288>b;)a.lens[b++]=8;for(w(y,a.lens,0,288,q,0,a.work,{bits:9}),b=0;32>b;)a.lens[b++]=5;w(z,a.lens,0,32,r,0,a.work,{bits:5}),ta=!1}a.lencode=q,a.lenbits=9,a.distcode=r,a.distbits=5}function l(a,b,c,d){var e,f=a.state;return null===f.window&&(f.wsize=1<<f.wbits,f.wnext=0,f.whave=0,f.window=new s.Buf8(f.wsize)),d>=f.wsize?(s.arraySet(f.window,b,c-f.wsize,f.wsize,0),f.wnext=0,f.whave=f.wsize):(e=f.wsize-f.wnext,e>d&&(e=d),s.arraySet(f.window,b,c-d,e,f.wnext),d-=e,d?(s.arraySet(f.window,b,c-d,d,0),f.wnext=d,f.whave=f.wsize):(f.wnext+=e,f.wnext===f.wsize&&(f.wnext=0),f.whave<f.wsize&&(f.whave+=e))),0}function m(a,b){var c,e,f,g,h,i,j,m,n,o,p,q,r,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,Aa=0,Ba=new s.Buf8(4),Ca=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!a||!a.state||!a.output||!a.input&&0!==a.avail_in)return G;c=a.state,c.mode===W&&(c.mode=X),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,o=i,p=j,xa=D;a:for(;;)switch(c.mode){case L:if(0===c.wrap){c.mode=X;break}for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(2&c.wrap&&35615===m){c.check=0,Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0),m=0,n=0,c.mode=M;break}if(c.flags=0,c.head&&(c.head.done=!1),!(1&c.wrap)||(((255&m)<<8)+(m>>8))%31){a.msg=\"incorrect header check\",c.mode=ma;break}if((15&m)!==K){a.msg=\"unknown compression method\",c.mode=ma;break}if(m>>>=4,n-=4,wa=(15&m)+8,0===c.wbits)c.wbits=wa;else if(wa>c.wbits){a.msg=\"invalid window size\",c.mode=ma;break}c.dmax=1<<wa,a.adler=c.check=1,c.mode=512&m?U:W,m=0,n=0;break;case M:for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.flags=m,(255&c.flags)!==K){a.msg=\"unknown compression method\",c.mode=ma;break}if(57344&c.flags){a.msg=\"unknown header flags set\",c.mode=ma;break}c.head&&(c.head.text=m>>8&1),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0,c.mode=N;case N:for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.time=m),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,Ba[2]=m>>>16&255,Ba[3]=m>>>24&255,c.check=u(c.check,Ba,4,0)),m=0,n=0,c.mode=O;case O:for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.xflags=255&m,c.head.os=m>>8),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0,c.mode=P;case P:if(1024&c.flags){for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length=m,c.head&&(c.head.extra_len=m),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0}else c.head&&(c.head.extra=null);c.mode=Q;case Q:if(1024&c.flags&&(q=c.length,q>i&&(q=i),q&&(c.head&&(wa=c.head.extra_len-c.length,c.head.extra||(c.head.extra=new Array(c.head.extra_len)),s.arraySet(c.head.extra,e,g,q,wa)),512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,c.length-=q),c.length))break a;c.length=0,c.mode=R;case R:if(2048&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.name+=String.fromCharCode(wa));while(wa&&i>q);if(512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.name=null);c.length=0,c.mode=S;case S:if(4096&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.comment+=String.fromCharCode(wa));while(wa&&i>q);if(512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.comment=null);c.mode=T;case T:if(512&c.flags){for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(65535&c.check)){a.msg=\"header crc mismatch\",c.mode=ma;break}m=0,n=0}c.head&&(c.head.hcrc=c.flags>>9&1,c.head.done=!0),a.adler=c.check=0,c.mode=W;break;case U:for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}a.adler=c.check=d(m),m=0,n=0,c.mode=V;case V:if(0===c.havedict)return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,F;a.adler=c.check=1,c.mode=W;case W:if(b===B||b===C)break a;case X:if(c.last){m>>>=7&n,n-=7&n,c.mode=ja;break}for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}switch(c.last=1&m,m>>>=1,n-=1,3&m){case 0:c.mode=Y;break;case 1:if(k(c),c.mode=ca,b===C){m>>>=2,n-=2;break a}break;case 2:c.mode=_;break;case 3:a.msg=\"invalid block type\",c.mode=ma}m>>>=2,n-=2;break;case Y:for(m>>>=7&n,n-=7&n;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if((65535&m)!==(m>>>16^65535)){a.msg=\"invalid stored block lengths\",c.mode=ma;break}if(c.length=65535&m,m=0,n=0,c.mode=Z,b===C)break a;case Z:c.mode=$;case $:if(q=c.length){if(q>i&&(q=i),q>j&&(q=j),0===q)break a;s.arraySet(f,e,g,q,h),i-=q,g+=q,j-=q,h+=q,c.length-=q;break}c.mode=W;break;case _:for(;14>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.nlen=(31&m)+257,m>>>=5,n-=5,c.ndist=(31&m)+1,m>>>=5,n-=5,c.ncode=(15&m)+4,m>>>=4,n-=4,c.nlen>286||c.ndist>30){a.msg=\"too many length or distance symbols\",c.mode=ma;break}c.have=0,c.mode=aa;case aa:for(;c.have<c.ncode;){for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.lens[Ca[c.have++]]=7&m,m>>>=3,n-=3}for(;c.have<19;)c.lens[Ca[c.have++]]=0;if(c.lencode=c.lendyn,c.lenbits=7,ya={bits:c.lenbits},xa=w(x,c.lens,0,19,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg=\"invalid code lengths set\",c.mode=ma;break}c.have=0,c.mode=ba;case ba:for(;c.have<c.nlen+c.ndist;){for(;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=qa);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(16>sa)m>>>=qa,n-=qa,c.lens[c.have++]=sa;else{if(16===sa){for(za=qa+2;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m>>>=qa,n-=qa,0===c.have){a.msg=\"invalid bit length repeat\",c.mode=ma;break}wa=c.lens[c.have-1],q=3+(3&m),m>>>=2,n-=2}else if(17===sa){for(za=qa+3;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qa,n-=qa,wa=0,q=3+(7&m),m>>>=3,n-=3}else{for(za=qa+7;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qa,n-=qa,wa=0,q=11+(127&m),m>>>=7,n-=7}if(c.have+q>c.nlen+c.ndist){a.msg=\"invalid bit length repeat\",c.mode=ma;break}for(;q--;)c.lens[c.have++]=wa}}if(c.mode===ma)break;if(0===c.lens[256]){a.msg=\"invalid code -- missing end-of-block\",c.mode=ma;break}if(c.lenbits=9,ya={bits:c.lenbits},xa=w(y,c.lens,0,c.nlen,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg=\"invalid literal/lengths set\",c.mode=ma;break}if(c.distbits=6,c.distcode=c.distdyn,ya={bits:c.distbits},xa=w(z,c.lens,c.nlen,c.ndist,c.distcode,0,c.work,ya),c.distbits=ya.bits,xa){a.msg=\"invalid distances set\",c.mode=ma;break}if(c.mode=ca,b===C)break a;case ca:c.mode=da;case da:if(i>=6&&j>=258){a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,v(a,p),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,c.mode===W&&(c.back=-1);break}for(c.back=0;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=qa);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(ra&&0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.lencode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=ta+qa);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=ta,n-=ta,c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,c.length=sa,0===ra){c.mode=ia;break}if(32&ra){c.back=-1,c.mode=W;break}if(64&ra){a.msg=\"invalid literal/length code\",c.mode=ma;break}c.extra=15&ra,c.mode=ea;case ea:if(c.extra){for(za=c.extra;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}c.was=c.length,c.mode=fa;case fa:for(;Aa=c.distcode[m&(1<<c.distbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=qa);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.distcode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=ta+qa);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=ta,n-=ta,c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,64&ra){a.msg=\"invalid distance code\",c.mode=ma;break}c.offset=sa,c.extra=15&ra,c.mode=ga;case ga:if(c.extra){for(za=c.extra;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.offset+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}if(c.offset>c.dmax){a.msg=\"invalid distance too far back\",c.mode=ma;break}c.mode=ha;case ha:if(0===j)break a;if(q=p-j,c.offset>q){if(q=c.offset-q,q>c.whave&&c.sane){a.msg=\"invalid distance too far back\",c.mode=ma;break}q>c.wnext?(q-=c.wnext,r=c.wsize-q):r=c.wnext-q,q>c.length&&(q=c.length),pa=c.window}else pa=f,r=h-c.offset,q=c.length;q>j&&(q=j),j-=q,c.length-=q;do f[h++]=pa[r++];while(--q);0===c.length&&(c.mode=da);break;case ia:if(0===j)break a;f[h++]=c.length,j--,c.mode=da;break;case ja:if(c.wrap){for(;32>n;){if(0===i)break a;i--,m|=e[g++]<<n,n+=8}if(p-=j,a.total_out+=p,c.total+=p,p&&(a.adler=c.check=c.flags?u(c.check,f,p,h-p):t(c.check,f,p,h-p)),p=j,(c.flags?m:d(m))!==c.check){a.msg=\"incorrect data check\",c.mode=ma;break}m=0,n=0}c.mode=ka;case ka:if(c.wrap&&c.flags){for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(4294967295&c.total)){a.msg=\"incorrect length check\",c.mode=ma;break}m=0,n=0}c.mode=la;case la:xa=E;break a;case ma:xa=H;break a;case na:return I;case oa:default:return G}return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,(c.wsize||p!==a.avail_out&&c.mode<ma&&(c.mode<ja||b!==A))&&l(a,a.output,a.next_out,p-a.avail_out)?(c.mode=na,I):(o-=a.avail_in,p-=a.avail_out,a.total_in+=o,a.total_out+=p,c.total+=p,c.wrap&&p&&(a.adler=c.check=c.flags?u(c.check,f,p,a.next_out-p):t(c.check,f,p,a.next_out-p)),a.data_type=c.bits+(c.last?64:0)+(c.mode===W?128:0)+(c.mode===ca||c.mode===Z?256:0),(0===o&&0===p||b===A)&&xa===D&&(xa=J),xa)}function n(a){if(!a||!a.state)return G;var b=a.state;return b.window&&(b.window=null),a.state=null,D}function o(a,b){var c;return a&&a.state?(c=a.state,0===(2&c.wrap)?G:(c.head=b,b.done=!1,D)):G}function p(a,b){var c,d,e,f=b.length;return a&&a.state?(c=a.state,0!==c.wrap&&c.mode!==V?G:c.mode===V&&(d=1,d=t(d,b,f,0),d!==c.check)?H:(e=l(a,b,f,f))?(c.mode=na,I):(c.havedict=1,D)):G}var q,r,s=a(\"../utils/common\"),t=a(\"./adler32\"),u=a(\"./crc32\"),v=a(\"./inffast\"),w=a(\"./inftrees\"),x=0,y=1,z=2,A=4,B=5,C=6,D=0,E=1,F=2,G=-2,H=-3,I=-4,J=-5,K=8,L=1,M=2,N=3,O=4,P=5,Q=6,R=7,S=8,T=9,U=10,V=11,W=12,X=13,Y=14,Z=15,$=16,_=17,aa=18,ba=19,ca=20,da=21,ea=22,fa=23,ga=24,ha=25,ia=26,ja=27,ka=28,la=29,ma=30,na=31,oa=32,pa=852,qa=592,ra=15,sa=ra,ta=!0;c.inflateReset=g,c.inflateReset2=h,c.inflateResetKeep=f,c.inflateInit=j,c.inflateInit2=i,c.inflate=m,c.inflateEnd=n,c.inflateGetHeader=o,c.inflateSetDictionary=p,c.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(a,b,c){\"use strict\";var d=a(\"../utils/common\"),e=15,f=852,g=592,h=0,i=1,j=2,k=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],m=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],n=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];b.exports=function(a,b,c,o,p,q,r,s){var t,u,v,w,x,y,z,A,B,C=s.bits,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=null,O=0,P=new d.Buf16(e+1),Q=new d.Buf16(e+1),R=null,S=0;for(D=0;e>=D;D++)P[D]=0;for(E=0;o>E;E++)P[b[c+E]]++;for(H=C,G=e;G>=1&&0===P[G];G--);if(H>G&&(H=G),0===G)return p[q++]=20971520,p[q++]=20971520,s.bits=1,0;for(F=1;G>F&&0===P[F];F++);for(F>H&&(H=F),K=1,D=1;e>=D;D++)if(K<<=1,K-=P[D],0>K)return-1;if(K>0&&(a===h||1!==G))return-1;for(Q[1]=0,D=1;e>D;D++)Q[D+1]=Q[D]+P[D];for(E=0;o>E;E++)0!==b[c+E]&&(r[Q[b[c+E]]++]=E);if(a===h?(N=R=r,y=19):a===i?(N=k,O-=257,R=l,S-=257,y=256):(N=m,R=n,y=-1),M=0,E=0,D=F,x=q,I=H,J=0,v=-1,L=1<<H,w=L-1,a===i&&L>f||a===j&&L>g)return 1;for(var T=0;;){T++,z=D-J,r[E]<y?(A=0,B=r[E]):r[E]>y?(A=R[S+r[E]],B=N[O+r[E]]):(A=96,B=0),t=1<<D-J,u=1<<I,F=u;do u-=t,p[x+(M>>J)+u]=z<<24|A<<16|B|0;while(0!==u);for(t=1<<D-1;M&t;)t>>=1;if(0!==t?(M&=t-1,M+=t):M=0,E++,0===--P[D]){if(D===G)break;D=b[c+r[E]]}if(D>H&&(M&w)!==v){for(0===J&&(J=H),x+=F,I=D-J,K=1<<I;G>I+J&&(K-=P[I+J],!(0>=K));)I++,K<<=1;if(L+=1<<I,a===i&&L>f||a===j&&L>g)return 1;v=M&w,p[v]=H<<24|I<<16|x-q|0}}return 0!==M&&(p[x+M]=D-J<<24|64<<16|0),s.bits=H,0}},{\"../utils/common\":41}],51:[function(a,b,c){\"use strict\";b.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(a,b,c){\"use strict\";function d(a){for(var b=a.length;--b>=0;)a[b]=0}function e(a,b,c,d,e){this.static_tree=a,this.extra_bits=b,this.extra_base=c,this.elems=d,this.max_length=e,this.has_stree=a&&a.length}function f(a,b){this.dyn_tree=a,this.max_code=0,this.stat_desc=b}function g(a){return 256>a?ia[a]:ia[256+(a>>>7)]}function h(a,b){a.pending_buf[a.pending++]=255&b,a.pending_buf[a.pending++]=b>>>8&255}function i(a,b,c){a.bi_valid>X-c?(a.bi_buf|=b<<a.bi_valid&65535,h(a,a.bi_buf),a.bi_buf=b>>X-a.bi_valid,a.bi_valid+=c-X):(a.bi_buf|=b<<a.bi_valid&65535,a.bi_valid+=c)}function j(a,b,c){i(a,c[2*b],c[2*b+1])}function k(a,b){var c=0;do c|=1&a,a>>>=1,c<<=1;while(--b>0);return c>>>1}function l(a){16===a.bi_valid?(h(a,a.bi_buf),a.bi_buf=0,a.bi_valid=0):a.bi_valid>=8&&(a.pending_buf[a.pending++]=255&a.bi_buf,a.bi_buf>>=8,a.bi_valid-=8)}function m(a,b){var c,d,e,f,g,h,i=b.dyn_tree,j=b.max_code,k=b.stat_desc.static_tree,l=b.stat_desc.has_stree,m=b.stat_desc.extra_bits,n=b.stat_desc.extra_base,o=b.stat_desc.max_length,p=0;for(f=0;W>=f;f++)a.bl_count[f]=0;for(i[2*a.heap[a.heap_max]+1]=0,c=a.heap_max+1;V>c;c++)d=a.heap[c],f=i[2*i[2*d+1]+1]+1,f>o&&(f=o,p++),i[2*d+1]=f,d>j||(a.bl_count[f]++,g=0,d>=n&&(g=m[d-n]),h=i[2*d],a.opt_len+=h*(f+g),l&&(a.static_len+=h*(k[2*d+1]+g)));if(0!==p){do{for(f=o-1;0===a.bl_count[f];)f--;a.bl_count[f]--,a.bl_count[f+1]+=2,a.bl_count[o]--,p-=2}while(p>0);for(f=o;0!==f;f--)for(d=a.bl_count[f];0!==d;)e=a.heap[--c],e>j||(i[2*e+1]!==f&&(a.opt_len+=(f-i[2*e+1])*i[2*e],i[2*e+1]=f),d--)}}function n(a,b,c){var d,e,f=new Array(W+1),g=0;for(d=1;W>=d;d++)f[d]=g=g+c[d-1]<<1;for(e=0;b>=e;e++){var h=a[2*e+1];0!==h&&(a[2*e]=k(f[h]++,h))}}function o(){var a,b,c,d,f,g=new Array(W+1);for(c=0,d=0;Q-1>d;d++)for(ka[d]=c,a=0;a<1<<ba[d];a++)ja[c++]=d;for(ja[c-1]=d,f=0,d=0;16>d;d++)for(la[d]=f,a=0;a<1<<ca[d];a++)ia[f++]=d;for(f>>=7;T>d;d++)for(la[d]=f<<7,a=0;a<1<<ca[d]-7;a++)ia[256+f++]=d;for(b=0;W>=b;b++)g[b]=0;for(a=0;143>=a;)ga[2*a+1]=8,a++,g[8]++;for(;255>=a;)ga[2*a+1]=9,a++,g[9]++;for(;279>=a;)ga[2*a+1]=7,a++,g[7]++;for(;287>=a;)ga[2*a+1]=8,a++,g[8]++;for(n(ga,S+1,g),a=0;T>a;a++)ha[2*a+1]=5,ha[2*a]=k(a,5);ma=new e(ga,ba,R+1,S,W),na=new e(ha,ca,0,T,W),oa=new e(new Array(0),da,0,U,Y)}function p(a){var b;for(b=0;S>b;b++)a.dyn_ltree[2*b]=0;for(b=0;T>b;b++)a.dyn_dtree[2*b]=0;for(b=0;U>b;b++)a.bl_tree[2*b]=0;a.dyn_ltree[2*Z]=1,a.opt_len=a.static_len=0,a.last_lit=a.matches=0}function q(a){a.bi_valid>8?h(a,a.bi_buf):a.bi_valid>0&&(a.pending_buf[a.pending++]=a.bi_buf),a.bi_buf=0,a.bi_valid=0}function r(a,b,c,d){q(a),d&&(h(a,c),h(a,~c)),G.arraySet(a.pending_buf,a.window,b,c,a.pending),a.pending+=c}function s(a,b,c,d){var e=2*b,f=2*c;return a[e]<a[f]||a[e]===a[f]&&d[b]<=d[c]}function t(a,b,c){for(var d=a.heap[c],e=c<<1;e<=a.heap_len&&(e<a.heap_len&&s(b,a.heap[e+1],a.heap[e],a.depth)&&e++,!s(b,d,a.heap[e],a.depth));)a.heap[c]=a.heap[e],c=e,e<<=1;a.heap[c]=d}function u(a,b,c){var d,e,f,h,k=0;if(0!==a.last_lit)do d=a.pending_buf[a.d_buf+2*k]<<8|a.pending_buf[a.d_buf+2*k+1],e=a.pending_buf[a.l_buf+k],k++,0===d?j(a,e,b):(f=ja[e],j(a,f+R+1,b),h=ba[f],0!==h&&(e-=ka[f],i(a,e,h)),d--,f=g(d),j(a,f,c),h=ca[f],0!==h&&(d-=la[f],i(a,d,h)));while(k<a.last_lit);j(a,Z,b)}function v(a,b){var c,d,e,f=b.dyn_tree,g=b.stat_desc.static_tree,h=b.stat_desc.has_stree,i=b.stat_desc.elems,j=-1;for(a.heap_len=0,a.heap_max=V,c=0;i>c;c++)0!==f[2*c]?(a.heap[++a.heap_len]=j=c,a.depth[c]=0):f[2*c+1]=0;for(;a.heap_len<2;)e=a.heap[++a.heap_len]=2>j?++j:0,f[2*e]=1,a.depth[e]=0,a.opt_len--,h&&(a.static_len-=g[2*e+1]);for(b.max_code=j,c=a.heap_len>>1;c>=1;c--)t(a,f,c);e=i;do c=a.heap[1],a.heap[1]=a.heap[a.heap_len--],t(a,f,1),d=a.heap[1],a.heap[--a.heap_max]=c,a.heap[--a.heap_max]=d,f[2*e]=f[2*c]+f[2*d],a.depth[e]=(a.depth[c]>=a.depth[d]?a.depth[c]:a.depth[d])+1,f[2*c+1]=f[2*d+1]=e,a.heap[1]=e++,t(a,f,1);while(a.heap_len>=2);a.heap[--a.heap_max]=a.heap[1],m(a,b),n(f,j,a.bl_count)}function w(a,b,c){var d,e,f=-1,g=b[1],h=0,i=7,j=4;for(0===g&&(i=138,j=3),b[2*(c+1)+1]=65535,d=0;c>=d;d++)e=g,g=b[2*(d+1)+1],",
                "++h<i&&e===g||(j>h?a.bl_tree[2*e]+=h:0!==e?(e!==f&&a.bl_tree[2*e]++,a.bl_tree[2*$]++):10>=h?a.bl_tree[2*_]++:a.bl_tree[2*aa]++,h=0,f=e,0===g?(i=138,j=3):e===g?(i=6,j=3):(i=7,j=4))}function x(a,b,c){var d,e,f=-1,g=b[1],h=0,k=7,l=4;for(0===g&&(k=138,l=3),d=0;c>=d;d++)if(e=g,g=b[2*(d+1)+1],!(++h<k&&e===g)){if(l>h){do j(a,e,a.bl_tree);while(0!==--h)}else 0!==e?(e!==f&&(j(a,e,a.bl_tree),h--),j(a,$,a.bl_tree),i(a,h-3,2)):10>=h?(j(a,_,a.bl_tree),i(a,h-3,3)):(j(a,aa,a.bl_tree),i(a,h-11,7));h=0,f=e,0===g?(k=138,l=3):e===g?(k=6,l=3):(k=7,l=4)}}function y(a){var b;for(w(a,a.dyn_ltree,a.l_desc.max_code),w(a,a.dyn_dtree,a.d_desc.max_code),v(a,a.bl_desc),b=U-1;b>=3&&0===a.bl_tree[2*ea[b]+1];b--);return a.opt_len+=3*(b+1)+5+5+4,b}function z(a,b,c,d){var e;for(i(a,b-257,5),i(a,c-1,5),i(a,d-4,4),e=0;d>e;e++)i(a,a.bl_tree[2*ea[e]+1],3);x(a,a.dyn_ltree,b-1),x(a,a.dyn_dtree,c-1)}function A(a){var b,c=4093624447;for(b=0;31>=b;b++,c>>>=1)if(1&c&&0!==a.dyn_ltree[2*b])return I;if(0!==a.dyn_ltree[18]||0!==a.dyn_ltree[20]||0!==a.dyn_ltree[26])return J;for(b=32;R>b;b++)if(0!==a.dyn_ltree[2*b])return J;return I}function B(a){pa||(o(),pa=!0),a.l_desc=new f(a.dyn_ltree,ma),a.d_desc=new f(a.dyn_dtree,na),a.bl_desc=new f(a.bl_tree,oa),a.bi_buf=0,a.bi_valid=0,p(a)}function C(a,b,c,d){i(a,(L<<1)+(d?1:0),3),r(a,b,c,!0)}function D(a){i(a,M<<1,3),j(a,Z,ga),l(a)}function E(a,b,c,d){var e,f,g=0;a.level>0?(a.strm.data_type===K&&(a.strm.data_type=A(a)),v(a,a.l_desc),v(a,a.d_desc),g=y(a),e=a.opt_len+3+7>>>3,f=a.static_len+3+7>>>3,e>=f&&(e=f)):e=f=c+5,e>=c+4&&-1!==b?C(a,b,c,d):a.strategy===H||f===e?(i(a,(M<<1)+(d?1:0),3),u(a,ga,ha)):(i(a,(N<<1)+(d?1:0),3),z(a,a.l_desc.max_code+1,a.d_desc.max_code+1,g+1),u(a,a.dyn_ltree,a.dyn_dtree)),p(a),d&&q(a)}function F(a,b,c){return a.pending_buf[a.d_buf+2*a.last_lit]=b>>>8&255,a.pending_buf[a.d_buf+2*a.last_lit+1]=255&b,a.pending_buf[a.l_buf+a.last_lit]=255&c,a.last_lit++,0===b?a.dyn_ltree[2*c]++:(a.matches++,b--,a.dyn_ltree[2*(ja[c]+R+1)]++,a.dyn_dtree[2*g(b)]++),a.last_lit===a.lit_bufsize-1}var G=a(\"../utils/common\"),H=4,I=0,J=1,K=2,L=0,M=1,N=2,O=3,P=258,Q=29,R=256,S=R+1+Q,T=30,U=19,V=2*S+1,W=15,X=16,Y=7,Z=256,$=16,_=17,aa=18,ba=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],ca=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],da=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],ea=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],fa=512,ga=new Array(2*(S+2));d(ga);var ha=new Array(2*T);d(ha);var ia=new Array(fa);d(ia);var ja=new Array(P-O+1);d(ja);var ka=new Array(Q);d(ka);var la=new Array(T);d(la);var ma,na,oa,pa=!1;c._tr_init=B,c._tr_stored_block=C,c._tr_flush_block=E,c._tr_tally=F,c._tr_align=D},{\"../utils/common\":41}],53:[function(a,b,c){\"use strict\";function d(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}b.exports=d},{}]},{},[10])(10)});"
            ]
        },
        "promise.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * ES6-Promises",
                " * https://github.com/jakearchibald/es6-promise",
                " */",
                "!function(){var a,b,c,d;!function(){var e={},f={};a=function(a,b,c){e[a]={deps:b,callback:c}},d=c=b=function(a){function c(b){if(\".\"!==b.charAt(0))return b;for(var c=b.split(\"/\"),d=a.split(\"/\").slice(0,-1),e=0,f=c.length;f>e;e++){var g=c[e];if(\"..\"===g)d.pop();else{if(\".\"===g)continue;d.push(g)}}return d.join(\"/\")}if(d._eak_seen=e,f[a])return f[a];if(f[a]={},!e[a])throw new Error(\"Could not find module \"+a);for(var g,h=e[a],i=h.deps,j=h.callback,k=[],l=0,m=i.length;m>l;l++)\"exports\"===i[l]?k.push(g={}):k.push(b(c(i[l])));var n=j.apply(this,k);return f[a]=g||n}}(),a(\"promise/all\",[\"./utils\",\"exports\"],function(a,b){\"use strict\";function c(a){var b=this;if(!d(a))throw new TypeError(\"You must pass an array to all.\");return new b(function(b,c){function d(a){return function(b){f(a,b)}}function f(a,c){h[a]=c,0===--i&&b(h)}var g,h=[],i=a.length;0===i&&b([]);for(var j=0;j<a.length;j++)g=a[j],g&&e(g.then)?g.then(d(j),c):f(j,g)})}var d=a.isArray,e=a.isFunction;b.all=c}),a(\"promise/asap\",[\"exports\"],function(a){\"use strict\";function b(){return function(){process.nextTick(e)}}function c(){var a=0,b=new i(e),c=document.createTextNode(\"\");return b.observe(c,{characterData:!0}),function(){c.data=a=++a%2}}function d(){return function(){j.setTimeout(e,1)}}function e(){for(var a=0;a<k.length;a++){var b=k[a],c=b[0],d=b[1];c(d)}k=[]}function f(a,b){var c=k.push([a,b]);1===c&&g()}var g,h=\"undefined\"!=typeof window?window:{},i=h.MutationObserver||h.WebKitMutationObserver,j=\"undefined\"!=typeof global?global:void 0===this?window:this,k=[];g=\"undefined\"!=typeof process&&\"[object process]\"==={}.toString.call(process)?b():i?c():d(),a.asap=f}),a(\"promise/config\",[\"exports\"],function(a){\"use strict\";function b(a,b){return 2!==arguments.length?c[a]:(c[a]=b,void 0)}var c={instrument:!1};a.config=c,a.configure=b}),a(\"promise/polyfill\",[\"./promise\",\"./utils\",\"exports\"],function(a,b,c){\"use strict\";function d(){var a;a=\"undefined\"!=typeof global?global:\"undefined\"!=typeof window&&window.document?window:self;var b=\"Promise\"in a&&\"resolve\"in a.Promise&&\"reject\"in a.Promise&&\"all\"in a.Promise&&\"race\"in a.Promise&&function(){var b;return new a.Promise(function(a){b=a}),f(b)}();b||(a.Promise=e)}var e=a.Promise,f=b.isFunction;c.polyfill=d}),a(\"promise/promise\",[\"./config\",\"./utils\",\"./all\",\"./race\",\"./resolve\",\"./reject\",\"./asap\",\"exports\"],function(a,b,c,d,e,f,g,h){\"use strict\";function i(a){if(!v(a))throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\");if(!(this instanceof i))throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");this._subscribers=[],j(a,this)}function j(a,b){function c(a){o(b,a)}function d(a){q(b,a)}try{a(c,d)}catch(e){d(e)}}function k(a,b,c,d){var e,f,g,h,i=v(c);if(i)try{e=c(d),g=!0}catch(j){h=!0,f=j}else e=d,g=!0;n(b,e)||(i&&g?o(b,e):h?q(b,f):a===D?o(b,e):a===E&&q(b,e))}function l(a,b,c,d){var e=a._subscribers,f=e.length;e[f]=b,e[f+D]=c,e[f+E]=d}function m(a,b){for(var c,d,e=a._subscribers,f=a._detail,g=0;g<e.length;g+=3)c=e[g],d=e[g+b],k(b,c,d,f);a._subscribers=null}function n(a,b){var c,d=null;try{if(a===b)throw new TypeError(\"A promises callback cannot return that same promise.\");if(u(b)&&(d=b.then,v(d)))return d.call(b,function(d){return c?!0:(c=!0,b!==d?o(a,d):p(a,d),void 0)},function(b){return c?!0:(c=!0,q(a,b),void 0)}),!0}catch(e){return c?!0:(q(a,e),!0)}return!1}function o(a,b){a===b?p(a,b):n(a,b)||p(a,b)}function p(a,b){a._state===B&&(a._state=C,a._detail=b,t.async(r,a))}function q(a,b){a._state===B&&(a._state=C,a._detail=b,t.async(s,a))}function r(a){m(a,a._state=D)}function s(a){m(a,a._state=E)}var t=a.config,u=(a.configure,b.objectOrFunction),v=b.isFunction,w=(b.now,c.all),x=d.race,y=e.resolve,z=f.reject,A=g.asap;t.async=A;var B=void 0,C=0,D=1,E=2;i.prototype={constructor:i,_state:void 0,_detail:void 0,_subscribers:void 0,then:function(a,b){var c=this,d=new this.constructor(function(){});if(this._state){var e=arguments;t.async(function(){k(c._state,d,e[c._state-1],c._detail)})}else l(this,d,a,b);return d},\"catch\":function(a){return this.then(null,a)}},i.all=w,i.race=x,i.resolve=y,i.reject=z,h.Promise=i}),a(\"promise/race\",[\"./utils\",\"exports\"],function(a,b){\"use strict\";function c(a){var b=this;if(!d(a))throw new TypeError(\"You must pass an array to race.\");return new b(function(b,c){for(var d,e=0;e<a.length;e++)d=a[e],d&&\"function\"==typeof d.then?d.then(b,c):b(d)})}var d=a.isArray;b.race=c}),a(\"promise/reject\",[\"exports\"],function(a){\"use strict\";function b(a){var b=this;return new b(function(b,c){c(a)})}a.reject=b}),a(\"promise/resolve\",[\"exports\"],function(a){\"use strict\";function b(a){if(a&&\"object\"==typeof a&&a.constructor===this)return a;var b=this;return new b(function(b){b(a)})}a.resolve=b}),a(\"promise/utils\",[\"exports\"],function(a){\"use strict\";function b(a){return c(a)||\"object\"==typeof a&&null!==a}function c(a){return\"function\"==typeof a}function d(a){return\"[object Array]\"===Object.prototype.toString.call(a)}var e=Date.now||function(){return(new Date).getTime()};a.objectOrFunction=b,a.isFunction=c,a.isArray=d,a.now=e}),b(\"promise/polyfill\").polyfill()}();"
            ]
        }
    }
}