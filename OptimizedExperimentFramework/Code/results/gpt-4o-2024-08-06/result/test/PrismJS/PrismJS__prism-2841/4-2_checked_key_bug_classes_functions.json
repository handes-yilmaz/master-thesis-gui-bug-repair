{
    "bug_classes": {
        "1": {
            "class_name": "  (not found) ",
            "file_path": "components/prism-ruby.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 106
                }
            ],
            "class_code": [
                "/**",
                " * Original by Samuel Flores",
                " *",
                " * Adds the following new token classes:",
                " *     constant, builtin, variable, symbol, regex",
                " */",
                "(function (Prism) {",
                "\tPrism.languages.ruby = Prism.languages.extend('clike', {",
                "\t\t'comment': [",
                "\t\t\t/#.*/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /^=begin\\s[\\s\\S]*?^=end/m,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'class-name': {",
                "\t\t\tpattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[.\\\\]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/",
                "\t});",
                "",
                "\tvar interpolation = {",
                "\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.ruby",
                "\t\t}",
                "\t};",
                "",
                "\tdelete Prism.languages.ruby.function;",
                "",
                "\tPrism.languages.insertBefore('ruby', 'keyword', {",
                "\t\t'regex': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(/%r/.source + '(?:' + [",
                "\t\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/.source,",
                "\t\t\t\t\t/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/.source,",
                "\t\t\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\t\t\t/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/.source,",
                "\t\t\t\t\t/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/.source,",
                "\t\t\t\t\t/<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/.source",
                "\t\t\t\t].join('|') + ')'),",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t'symbol': {",
                "\t\t\tpattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'method-definition': {",
                "\t\t\tpattern: /(\\bdef\\s+)[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /\\w+$/,",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('ruby', 'number', {",
                "\t\t'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,",
                "\t\t'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/",
                "\t});",
                "",
                "\tPrism.languages.ruby.string = [",
                "\t\t{",
                "\t\t\tpattern: RegExp(/%[qQiIwWxs]?/.source + '(?:' + [",
                "\t\t\t\t/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,",
                "\t\t\t\t/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,",
                "\t\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\t\t/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,",
                "\t\t\t\t/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,",
                "\t\t\t\t/<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source",
                "\t\t\t].join('|') + ')'),",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.rb = Prism.languages.ruby;",
                "}(Prism));"
            ]
        }
    },
    "bug_functions": {}
}