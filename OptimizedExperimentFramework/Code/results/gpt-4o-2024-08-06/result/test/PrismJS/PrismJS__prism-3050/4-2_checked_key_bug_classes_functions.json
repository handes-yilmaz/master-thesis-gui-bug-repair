{
    "bug_classes": {
        "1": {
            "class_name": "  (not found) ",
            "file_path": "components/prism-markup.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 174
                }
            ],
            "class_code": [
                "Prism.languages.markup = {",
                "\t'comment': /<!--[\\s\\S]*?-->/,",
                "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
                "\t'doctype': {",
                "\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl",
                "\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'internal-subset': {",
                "\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^<!|>$|[[\\]]/,",
                "\t\t\t'doctype-tag': /^DOCTYPE/,",
                "\t\t\t'name': /[^\\s<>'\"]+/",
                "\t\t}",
                "\t},",
                "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t'tag': {",
                "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/,",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'special-attr': [],",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\/?>/,",
                "\t\t\t'attr-name': {",
                "\t\t\t\tpattern: /[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t}",
                "\t},",
                "\t'entity': [",
                "\t\t{",
                "\t\t\tpattern: /&[\\da-z]{1,8};/i,",
                "\t\t\talias: 'named-entity'",
                "\t\t},",
                "\t\t/&#x?[\\da-f]{1,8};/i",
                "\t]",
                "};",
                "",
                "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
                "\tPrism.languages.markup['entity'];",
                "Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;",
                "",
                "// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "Prism.hooks.add('wrap', function (env) {",
                "",
                "\tif (env.type === 'entity') {",
                "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t}",
                "});",
                "",
                "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
                "\t/**",
                "\t * Adds an inlined language to markup.",
                "\t *",
                "\t * An example of an inlined language is CSS with `<style>` tags.",
                "\t *",
                "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addInlined('style', 'css');",
                "\t */",
                "\tvalue: function addInlined(tagName, lang) {",
                "\t\tvar includedCdataInside = {};",
                "\t\tincludedCdataInside['language-' + lang] = {",
                "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
                "",
                "\t\tvar inside = {",
                "\t\t\t'included-cdata': {",
                "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t\t\t\tinside: includedCdataInside",
                "\t\t\t}",
                "\t\t};",
                "\t\tinside['language-' + lang] = {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "",
                "\t\tvar def = {};",
                "\t\tdef[tagName] = {",
                "\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: inside",
                "\t\t};",
                "",
                "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
                "\t}",
                "});",
                "Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {",
                "\t/**",
                "\t * Adds an pattern to highlight languages embedded in HTML attributes.",
                "\t *",
                "\t * An example of an inlined language is CSS with `style` attributes.",
                "\t *",
                "\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addAttribute('style', 'css');",
                "\t */",
                "\tvalue: function (attrName, lang) {",
                "\t\tPrism.languages.markup.tag.inside['special-attr'].push({",
                "\t\t\tpattern: RegExp(",
                "\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,",
                "\t\t\t\t'i'",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attr-name': /^[^\\s=]+/,",
                "\t\t\t\t'attr-value': {",
                "\t\t\t\t\tpattern: /=[\\s\\S]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'value': {",
                "\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: [lang, 'language-' + lang],",
                "\t\t\t\t\t\t\tinside: Prism.languages[lang]",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t\t]",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t});",
                "\t}",
                "});",
                "",
                "Prism.languages.html = Prism.languages.markup;",
                "Prism.languages.mathml = Prism.languages.markup;",
                "Prism.languages.svg = Prism.languages.markup;",
                "",
                "Prism.languages.xml = Prism.languages.extend('markup', {});",
                "Prism.languages.ssml = Prism.languages.xml;",
                "Prism.languages.atom = Prism.languages.xml;",
                "Prism.languages.rss = Prism.languages.xml;"
            ]
        },
        "2": {
            "class_name": "Prism.languages.markup (not found) ",
            "file_path": "components/prism-markup.js",
            "class_details": [
                {
                    "name": "Prism.languages.markup",
                    "start_line": 1,
                    "end_line": 174
                }
            ],
            "class_code": [
                "Prism.languages.markup = {",
                "\t'comment': /<!--[\\s\\S]*?-->/,",
                "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
                "\t'doctype': {",
                "\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl",
                "\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'internal-subset': {",
                "\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^<!|>$|[[\\]]/,",
                "\t\t\t'doctype-tag': /^DOCTYPE/,",
                "\t\t\t'name': /[^\\s<>'\"]+/",
                "\t\t}",
                "\t},",
                "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t'tag': {",
                "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/,",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'special-attr': [],",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\/?>/,",
                "\t\t\t'attr-name': {",
                "\t\t\t\tpattern: /[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t}",
                "\t},",
                "\t'entity': [",
                "\t\t{",
                "\t\t\tpattern: /&[\\da-z]{1,8};/i,",
                "\t\t\talias: 'named-entity'",
                "\t\t},",
                "\t\t/&#x?[\\da-f]{1,8};/i",
                "\t]",
                "};",
                "",
                "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
                "\tPrism.languages.markup['entity'];",
                "Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;",
                "",
                "// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "Prism.hooks.add('wrap', function (env) {",
                "",
                "\tif (env.type === 'entity') {",
                "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t}",
                "});",
                "",
                "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
                "\t/**",
                "\t * Adds an inlined language to markup.",
                "\t *",
                "\t * An example of an inlined language is CSS with `<style>` tags.",
                "\t *",
                "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addInlined('style', 'css');",
                "\t */",
                "\tvalue: function addInlined(tagName, lang) {",
                "\t\tvar includedCdataInside = {};",
                "\t\tincludedCdataInside['language-' + lang] = {",
                "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
                "",
                "\t\tvar inside = {",
                "\t\t\t'included-cdata': {",
                "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t\t\t\tinside: includedCdataInside",
                "\t\t\t}",
                "\t\t};",
                "\t\tinside['language-' + lang] = {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "",
                "\t\tvar def = {};",
                "\t\tdef[tagName] = {",
                "\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: inside",
                "\t\t};",
                "",
                "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
                "\t}",
                "});",
                "Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {",
                "\t/**",
                "\t * Adds an pattern to highlight languages embedded in HTML attributes.",
                "\t *",
                "\t * An example of an inlined language is CSS with `style` attributes.",
                "\t *",
                "\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addAttribute('style', 'css');",
                "\t */",
                "\tvalue: function (attrName, lang) {",
                "\t\tPrism.languages.markup.tag.inside['special-attr'].push({",
                "\t\t\tpattern: RegExp(",
                "\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,",
                "\t\t\t\t'i'",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attr-name': /^[^\\s=]+/,",
                "\t\t\t\t'attr-value': {",
                "\t\t\t\t\tpattern: /=[\\s\\S]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'value': {",
                "\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: [lang, 'language-' + lang],",
                "\t\t\t\t\t\t\tinside: Prism.languages[lang]",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t\t]",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t});",
                "\t}",
                "});",
                "",
                "Prism.languages.html = Prism.languages.markup;",
                "Prism.languages.mathml = Prism.languages.markup;",
                "Prism.languages.svg = Prism.languages.markup;",
                "",
                "Prism.languages.xml = Prism.languages.extend('markup', {});",
                "Prism.languages.ssml = Prism.languages.xml;",
                "Prism.languages.atom = Prism.languages.xml;",
                "Prism.languages.rss = Prism.languages.xml;"
            ]
        }
    },
    "bug_functions": {
        "3": {
            "function_name": "addInlined (not found) ",
            "file_path": "components/prism-markup.js",
            "function_details": [
                {
                    "name": "addInlined",
                    "start_line": 1,
                    "end_line": 174
                }
            ],
            "function_code": [
                "Prism.languages.markup = {",
                "\t'comment': /<!--[\\s\\S]*?-->/,",
                "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
                "\t'doctype': {",
                "\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl",
                "\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'internal-subset': {",
                "\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^<!|>$|[[\\]]/,",
                "\t\t\t'doctype-tag': /^DOCTYPE/,",
                "\t\t\t'name': /[^\\s<>'\"]+/",
                "\t\t}",
                "\t},",
                "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t'tag': {",
                "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/,",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'special-attr': [],",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\/?>/,",
                "\t\t\t'attr-name': {",
                "\t\t\t\tpattern: /[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t}",
                "\t},",
                "\t'entity': [",
                "\t\t{",
                "\t\t\tpattern: /&[\\da-z]{1,8};/i,",
                "\t\t\talias: 'named-entity'",
                "\t\t},",
                "\t\t/&#x?[\\da-f]{1,8};/i",
                "\t]",
                "};",
                "",
                "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
                "\tPrism.languages.markup['entity'];",
                "Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;",
                "",
                "// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "Prism.hooks.add('wrap', function (env) {",
                "",
                "\tif (env.type === 'entity') {",
                "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t}",
                "});",
                "",
                "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
                "\t/**",
                "\t * Adds an inlined language to markup.",
                "\t *",
                "\t * An example of an inlined language is CSS with `<style>` tags.",
                "\t *",
                "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addInlined('style', 'css');",
                "\t */",
                "\tvalue: function addInlined(tagName, lang) {",
                "\t\tvar includedCdataInside = {};",
                "\t\tincludedCdataInside['language-' + lang] = {",
                "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
                "",
                "\t\tvar inside = {",
                "\t\t\t'included-cdata': {",
                "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t\t\t\tinside: includedCdataInside",
                "\t\t\t}",
                "\t\t};",
                "\t\tinside['language-' + lang] = {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "",
                "\t\tvar def = {};",
                "\t\tdef[tagName] = {",
                "\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: inside",
                "\t\t};",
                "",
                "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
                "\t}",
                "});",
                "Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {",
                "\t/**",
                "\t * Adds an pattern to highlight languages embedded in HTML attributes.",
                "\t *",
                "\t * An example of an inlined language is CSS with `style` attributes.",
                "\t *",
                "\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addAttribute('style', 'css');",
                "\t */",
                "\tvalue: function (attrName, lang) {",
                "\t\tPrism.languages.markup.tag.inside['special-attr'].push({",
                "\t\t\tpattern: RegExp(",
                "\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,",
                "\t\t\t\t'i'",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attr-name': /^[^\\s=]+/,",
                "\t\t\t\t'attr-value': {",
                "\t\t\t\t\tpattern: /=[\\s\\S]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'value': {",
                "\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: [lang, 'language-' + lang],",
                "\t\t\t\t\t\t\tinside: Prism.languages[lang]",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t\t]",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t});",
                "\t}",
                "});",
                "",
                "Prism.languages.html = Prism.languages.markup;",
                "Prism.languages.mathml = Prism.languages.markup;",
                "Prism.languages.svg = Prism.languages.markup;",
                "",
                "Prism.languages.xml = Prism.languages.extend('markup', {});",
                "Prism.languages.ssml = Prism.languages.xml;",
                "Prism.languages.atom = Prism.languages.xml;",
                "Prism.languages.rss = Prism.languages.xml;"
            ]
        },
        "4": {
            "function_name": "addAttribute (not found) ",
            "file_path": "components/prism-markup.js",
            "function_details": [
                {
                    "name": "addAttribute",
                    "start_line": 1,
                    "end_line": 174
                }
            ],
            "function_code": [
                "Prism.languages.markup = {",
                "\t'comment': /<!--[\\s\\S]*?-->/,",
                "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
                "\t'doctype': {",
                "\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl",
                "\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'internal-subset': {",
                "\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: null // see below",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^<!|>$|[[\\]]/,",
                "\t\t\t'doctype-tag': /^DOCTYPE/,",
                "\t\t\t'name': /[^\\s<>'\"]+/",
                "\t\t}",
                "\t},",
                "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t'tag': {",
                "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/,",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'special-attr': [],",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\/?>/,",
                "\t\t\t'attr-name': {",
                "\t\t\t\tpattern: /[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t}",
                "\t},",
                "\t'entity': [",
                "\t\t{",
                "\t\t\tpattern: /&[\\da-z]{1,8};/i,",
                "\t\t\talias: 'named-entity'",
                "\t\t},",
                "\t\t/&#x?[\\da-f]{1,8};/i",
                "\t]",
                "};",
                "",
                "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
                "\tPrism.languages.markup['entity'];",
                "Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;",
                "",
                "// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "Prism.hooks.add('wrap', function (env) {",
                "",
                "\tif (env.type === 'entity') {",
                "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t}",
                "});",
                "",
                "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
                "\t/**",
                "\t * Adds an inlined language to markup.",
                "\t *",
                "\t * An example of an inlined language is CSS with `<style>` tags.",
                "\t *",
                "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addInlined('style', 'css');",
                "\t */",
                "\tvalue: function addInlined(tagName, lang) {",
                "\t\tvar includedCdataInside = {};",
                "\t\tincludedCdataInside['language-' + lang] = {",
                "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
                "",
                "\t\tvar inside = {",
                "\t\t\t'included-cdata': {",
                "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t\t\t\tinside: includedCdataInside",
                "\t\t\t}",
                "\t\t};",
                "\t\tinside['language-' + lang] = {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "",
                "\t\tvar def = {};",
                "\t\tdef[tagName] = {",
                "\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: inside",
                "\t\t};",
                "",
                "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
                "\t}",
                "});",
                "Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {",
                "\t/**",
                "\t * Adds an pattern to highlight languages embedded in HTML attributes.",
                "\t *",
                "\t * An example of an inlined language is CSS with `style` attributes.",
                "\t *",
                "\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addAttribute('style', 'css');",
                "\t */",
                "\tvalue: function (attrName, lang) {",
                "\t\tPrism.languages.markup.tag.inside['special-attr'].push({",
                "\t\t\tpattern: RegExp(",
                "\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,",
                "\t\t\t\t'i'",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attr-name': /^[^\\s=]+/,",
                "\t\t\t\t'attr-value': {",
                "\t\t\t\t\tpattern: /=[\\s\\S]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'value': {",
                "\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: [lang, 'language-' + lang],",
                "\t\t\t\t\t\t\tinside: Prism.languages[lang]",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\tpattern: /^=/,",
                "\t\t\t\t\t\t\t\talias: 'attr-equals'",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t/\"|'/",
                "\t\t\t\t\t\t]",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t});",
                "\t}",
                "});",
                "",
                "Prism.languages.html = Prism.languages.markup;",
                "Prism.languages.mathml = Prism.languages.markup;",
                "Prism.languages.svg = Prism.languages.markup;",
                "",
                "Prism.languages.xml = Prism.languages.extend('markup', {});",
                "Prism.languages.ssml = Prism.languages.xml;",
                "Prism.languages.atom = Prism.languages.xml;",
                "Prism.languages.rss = Prism.languages.xml;"
            ]
        }
    }
}