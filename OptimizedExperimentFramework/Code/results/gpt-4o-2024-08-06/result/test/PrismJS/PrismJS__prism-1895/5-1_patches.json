{
    "1/1": "### Bug Scenario and Root Cause\n\nThe bug report indicates that numeric separators in JavaScript are not being highlighted correctly. Numeric separators, introduced in JavaScript, allow underscores to be used for grouping digits in numeric literals for better readability. The image shows examples of numeric literals using underscores, such as `1_000_000_000_000`, which are not being highlighted properly.\n\nThe root cause is likely that the current regular expression for numbers in the Prism JavaScript language definition does not account for underscores within numeric literals.\n\n### Bug Location and Analysis\n\nIn the provided code snippet from `components/prism-javascript.js`, the relevant section is the definition of the `number` pattern. The current pattern does not include support for underscores in numeric literals.\n\n### Patch\n\nTo fix the issue, we need to update the regular expression for numbers to allow underscores within numeric literals.\n\n```javascript\n### components/prism-javascript.js\n<<<<<<< SEARCH\n'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n=======\n'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+(?:_\\d+)*\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n>>>>>>> REPLACE\n```\n\n### Explanation\n\n- The updated regular expression `(?:\\b\\d+(?:_\\d+)*\\.?\\d*|\\B\\.\\d+)` allows underscores within the digits of a number. The `(?:_\\d+)*` part matches any underscores followed by digits, allowing for numeric separators.\n- This change ensures that numeric literals with underscores are correctly recognized and highlighted by Prism."
}