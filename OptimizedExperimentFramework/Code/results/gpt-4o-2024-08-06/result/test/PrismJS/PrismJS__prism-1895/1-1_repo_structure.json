{
    ".editorconfig": {},
    ".gitattributes": {},
    ".gitignore": {},
    ".npmignore": {},
    ".travis.yml": {},
    "CHANGELOG.md": {},
    "CNAME": {},
    "LICENSE": {},
    "README.md": {},
    "bower.json": {},
    "components.js": {
        "classes": [],
        "functions": [],
        "text": [
            "var components = {\"core\":{\"meta\":{\"path\":\"components/prism-core.js\",\"option\":\"mandatory\"},\"core\":\"Core\"},\"themes\":{\"meta\":{\"path\":\"themes/{id}.css\",\"link\":\"index.html?theme={id}\",\"exclusive\":true},\"prism\":{\"title\":\"Default\",\"option\":\"default\"},\"prism-dark\":\"Dark\",\"prism-funky\":\"Funky\",\"prism-okaidia\":{\"title\":\"Okaidia\",\"owner\":\"ocodia\"},\"prism-twilight\":{\"title\":\"Twilight\",\"owner\":\"remybach\"},\"prism-coy\":{\"title\":\"Coy\",\"owner\":\"tshedor\"},\"prism-solarizedlight\":{\"title\":\"Solarized Light\",\"owner\":\"hectormatos2011 \"},\"prism-tomorrow\":{\"title\":\"Tomorrow Night\",\"owner\":\"Rosey\"}},\"languages\":{\"meta\":{\"path\":\"components/prism-{id}\",\"noCSS\":true,\"examplesPath\":\"examples/prism-{id}\",\"addCheckAll\":true},\"markup\":{\"title\":\"Markup\",\"alias\":[\"html\",\"xml\",\"svg\",\"mathml\"],\"aliasTitles\":{\"html\":\"HTML\",\"xml\":\"XML\",\"svg\":\"SVG\",\"mathml\":\"MathML\"},\"option\":\"default\"},\"css\":{\"title\":\"CSS\",\"option\":\"default\",\"peerDependencies\":\"markup\"},\"clike\":{\"title\":\"C-like\",\"option\":\"default\",\"overrideExampleHeader\":true},\"javascript\":{\"title\":\"JavaScript\",\"require\":\"clike\",\"peerDependencies\":\"markup\",\"alias\":\"js\",\"option\":\"default\"},\"abap\":{\"title\":\"ABAP\",\"owner\":\"dellagustin\"},\"abnf\":{\"title\":\"Augmented Backus–Naur form\",\"owner\":\"RunDevelopment\"},\"actionscript\":{\"title\":\"ActionScript\",\"require\":\"javascript\",\"peerDependencies\":\"markup\",\"owner\":\"Golmote\"},\"ada\":{\"title\":\"Ada\",\"owner\":\"Lucretia\"},\"apacheconf\":{\"title\":\"Apache Configuration\",\"owner\":\"GuiTeK\"},\"apl\":{\"title\":\"APL\",\"owner\":\"ngn\"},\"applescript\":{\"title\":\"AppleScript\",\"owner\":\"Golmote\"},\"arduino\":{\"title\":\"Arduino\",\"require\":\"cpp\",\"owner\":\"eisbehr-\"},\"arff\":{\"title\":\"ARFF\",\"owner\":\"Golmote\"},\"asciidoc\":{\"alias\":\"adoc\",\"title\":\"AsciiDoc\",\"owner\":\"Golmote\"},\"asm6502\":{\"title\":\"6502 Assembly\",\"owner\":\"kzurawel\"},\"aspnet\":{\"title\":\"ASP.NET (C#)\",\"require\":[\"markup\",\"csharp\"],\"owner\":\"nauzilus\"},\"autohotkey\":{\"title\":\"AutoHotkey\",\"owner\":\"aviaryan\"},\"autoit\":{\"title\":\"AutoIt\",\"owner\":\"Golmote\"},\"bash\":{\"title\":\"Bash\",\"alias\":\"shell\",\"aliasTitles\":{\"shell\":\"Shell\"},\"owner\":\"zeitgeist87\"},\"basic\":{\"title\":\"BASIC\",\"owner\":\"Golmote\"},\"batch\":{\"title\":\"Batch\",\"owner\":\"Golmote\"},\"bison\":{\"title\":\"Bison\",\"require\":\"c\",\"owner\":\"Golmote\"},\"bnf\":{\"title\":\"Backus–Naur form\",\"alias\":\"rbnf\",\"aliasTitles\":{\"rbnf\":\"Routing Backus–Naur form\"},\"owner\":\"RunDevelopment\"},\"brainfuck\":{\"title\":\"Brainfuck\",\"owner\":\"Golmote\"},\"bro\":{\"title\":\"Bro\",\"owner\":\"wayward710\"},\"c\":{\"title\":\"C\",\"require\":\"clike\",\"owner\":\"zeitgeist87\"},\"csharp\":{\"title\":\"C#\",\"require\":\"clike\",\"alias\":\"dotnet\",\"owner\":\"mvalipour\"},\"cpp\":{\"title\":\"C++\",\"require\":\"c\",\"owner\":\"zeitgeist87\"},\"cil\":{\"title\":\"CIL\",\"owner\":\"sbrl\"},\"coffeescript\":{\"title\":\"CoffeeScript\",\"require\":\"javascript\",\"alias\":\"coffee\",\"owner\":\"R-osey\"},\"cmake\":{\"title\":\"CMake\",\"owner\":\"mjrogozinski\"},\"clojure\":{\"title\":\"Clojure\",\"owner\":\"troglotit\"},\"crystal\":{\"title\":\"Crystal\",\"require\":\"ruby\",\"owner\":\"MakeNowJust\"},\"csp\":{\"title\":\"Content-Security-Policy\",\"owner\":\"ScottHelme\"},\"css-extras\":{\"title\":\"CSS Extras\",\"require\":\"css\",\"owner\":\"milesj\"},\"d\":{\"title\":\"D\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"dart\":{\"title\":\"Dart\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"diff\":{\"title\":\"Diff\",\"owner\":\"uranusjr\"},\"django\":{\"title\":\"Django/Jinja2\",\"require\":\"markup-templating\",\"alias\":\"jinja2\",\"owner\":\"romanvm\"},\"docker\":{\"title\":\"Docker\",\"alias\":\"dockerfile\",\"owner\":\"JustinBeckwith\"},\"ebnf\":{\"title\":\"Extended Backus–Naur form\",\"owner\":\"RunDevelopment\"},\"eiffel\":{\"title\":\"Eiffel\",\"owner\":\"Conaclos\"},\"ejs\":{\"title\":\"EJS\",\"require\":[\"javascript\",\"markup-templating\"],\"owner\":\"RunDevelopment\"},\"elixir\":{\"title\":\"Elixir\",\"owner\":\"Golmote\"},\"elm\":{\"title\":\"Elm\",\"owner\":\"zwilias\"},\"erb\":{\"title\":\"ERB\",\"require\":[\"ruby\",\"markup-templating\"],\"owner\":\"Golmote\"},\"erlang\":{\"title\":\"Erlang\",\"owner\":\"Golmote\"},\"fsharp\":{\"title\":\"F#\",\"require\":\"clike\",\"owner\":\"simonreynolds7\"},\"flow\":{\"title\":\"Flow\",\"require\":\"javascript\",\"owner\":\"Golmote\"},\"fortran\":{\"title\":\"Fortran\",\"owner\":\"Golmote\"},\"gcode\":{\"title\":\"G-code\",\"owner\":\"RunDevelopment\"},\"gedcom\":{\"title\":\"GEDCOM\",\"owner\":\"Golmote\"},\"gherkin\":{\"title\":\"Gherkin\",\"owner\":\"hason\"},\"git\":{\"title\":\"Git\",\"owner\":\"lgiraudel\"},\"glsl\":{\"title\":\"GLSL\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"gml\":{\"title\":\"GameMaker Language\",\"alias\":\"gamemakerlanguage\",\"require\":\"clike\",\"owner\":\"LiarOnce\"},\"go\":{\"title\":\"Go\",\"require\":\"clike\",\"owner\":\"arnehormann\"},\"graphql\":{\"title\":\"GraphQL\",\"owner\":\"Golmote\"},\"groovy\":{\"title\":\"Groovy\",\"require\":\"clike\",\"owner\":\"robfletcher\"},\"haml\":{\"title\":\"Haml\",\"require\":\"ruby\",\"peerDependencies\":[\"css\",\"coffeescript\",\"erb\",\"javascript\",\"less\",\"markdown\",\"ruby\",\"scss\",\"textile\"],\"owner\":\"Golmote\"},\"handlebars\":{\"title\":\"Handlebars\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"haskell\":{\"title\":\"Haskell\",\"alias\":\"hs\",\"owner\":\"bholst\"},\"haxe\":{\"title\":\"Haxe\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"hcl\":{\"title\":\"HCL\",\"owner\":\"outsideris\"},\"http\":{\"title\":\"HTTP\",\"peerDependencies\":[\"javascript\",\"markup\"],\"owner\":\"danielgtaylor\"},\"hpkp\":{\"title\":\"HTTP Public-Key-Pins\",\"owner\":\"ScottHelme\"},\"hsts\":{\"title\":\"HTTP Strict-Transport-Security\",\"owner\":\"ScottHelme\"},\"ichigojam\":{\"title\":\"IchigoJam\",\"owner\":\"BlueCocoa\"},\"icon\":{\"title\":\"Icon\",\"owner\":\"Golmote\"},\"inform7\":{\"title\":\"Inform 7\",\"owner\":\"Golmote\"},\"ini\":{\"title\":\"Ini\",\"owner\":\"aviaryan\"},\"io\":{\"title\":\"Io\",\"owner\":\"AlesTsurko\"},\"j\":{\"title\":\"J\",\"owner\":\"Golmote\"},\"java\":{\"title\":\"Java\",\"require\":\"clike\",\"owner\":\"sherblot\"},\"javadoc\":{\"title\":\"JavaDoc\",\"require\":[\"markup\",\"java\",\"javadoclike\"],\"peerDependencies\":[\"scala\"],\"owner\":\"RunDevelopment\"},\"javadoclike\":{\"title\":\"JavaDoc-like\",\"peerDependencies\":[\"java\",\"javascript\",\"php\"],\"owner\":\"RunDevelopment\"},\"javastacktrace\":{\"title\":\"Java stack trace\",\"owner\":\"RunDevelopment\"},\"jolie\":{\"title\":\"Jolie\",\"require\":\"clike\",\"owner\":\"thesave\"},\"jsdoc\":{\"title\":\"JSDoc\",\"require\":[\"javascript\",\"javadoclike\"],\"peerDependencies\":[\"actionscript\",\"coffeescript\"],\"owner\":\"RunDevelopment\"},\"js-extras\":{\"title\":\"JS Extras\",\"require\":\"javascript\",\"peerDependencies\":[\"actionscript\",\"coffeescript\",\"flow\",\"n4js\",\"typescript\"],\"owner\":\"RunDevelopment\"},\"json\":{\"title\":\"JSON\",\"owner\":\"CupOfTea696\"},\"jsonp\":{\"title\":\"JSONP\",\"require\":\"json\",\"owner\":\"RunDevelopment\"},\"json5\":{\"title\":\"JSON5\",\"require\":\"json\",\"owner\":\"RunDevelopment\"},\"julia\":{\"title\":\"Julia\",\"owner\":\"cdagnino\"},\"keyman\":{\"title\":\"Keyman\",\"owner\":\"mcdurdin\"},\"kotlin\":{\"title\":\"Kotlin\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"latex\":{\"title\":\"LaTeX\",\"owner\":\"japborst\"},\"less\":{\"title\":\"Less\",\"require\":\"css\",\"owner\":\"Golmote\"},\"liquid\":{\"title\":\"Liquid\",\"owner\":\"cinhtau\"},\"lisp\":{\"title\":\"Lisp\",\"alias\":[\"emacs\",\"elisp\",\"emacs-lisp\"],\"owner\":\"JuanCaicedo\"},\"livescript\":{\"title\":\"LiveScript\",\"owner\":\"Golmote\"},\"lolcode\":{\"title\":\"LOLCODE\",\"owner\":\"Golmote\"},\"lua\":{\"title\":\"Lua\",\"owner\":\"Golmote\"},\"makefile\":{\"title\":\"Makefile\",\"owner\":\"Golmote\"},\"markdown\":{\"title\":\"Markdown\",\"require\":\"markup\",\"alias\":\"md\",\"owner\":\"Golmote\"},\"markup-templating\":{\"title\":\"Markup templating\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"matlab\":{\"title\":\"MATLAB\",\"owner\":\"Golmote\"},\"mel\":{\"title\":\"MEL\",\"owner\":\"Golmote\"},\"mizar\":{\"title\":\"Mizar\",\"owner\":\"Golmote\"},\"monkey\":{\"title\":\"Monkey\",\"owner\":\"Golmote\"},\"n1ql\":{\"title\":\"N1QL\",\"owner\":\"TMWilds\"},\"n4js\":{\"title\":\"N4JS\",\"require\":\"javascript\",\"peerDependencies\":[\"jsdoc\"],\"alias\":\"n4jsd\",\"owner\":\"bsmith-n4\"},\"nand2tetris-hdl\":{\"title\":\"Nand To Tetris HDL\",\"owner\":\"stephanmax\"},\"nasm\":{\"title\":\"NASM\",\"owner\":\"rbmj\"},\"nginx\":{\"title\":\"nginx\",\"owner\":\"westonganger\",\"require\":\"clike\"},\"nim\":{\"title\":\"Nim\",\"owner\":\"Golmote\"},\"nix\":{\"title\":\"Nix\",\"owner\":\"Golmote\"},\"nsis\":{\"title\":\"NSIS\",\"owner\":\"idleberg\"},\"objectivec\":{\"title\":\"Objective-C\",\"require\":\"c\",\"owner\":\"uranusjr\"},\"ocaml\":{\"title\":\"OCaml\",\"owner\":\"Golmote\"},\"opencl\":{\"title\":\"OpenCL\",\"require\":\"cpp\",\"peerDependencies\":[\"c\",\"cpp\"],\"overrideExampleHeader\":true,\"owner\":\"Milania1\"},\"oz\":{\"title\":\"Oz\",\"owner\":\"Golmote\"},\"parigp\":{\"title\":\"PARI/GP\",\"owner\":\"Golmote\"},\"parser\":{\"title\":\"Parser\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"pascal\":{\"title\":\"Pascal\",\"alias\":\"objectpascal\",\"aliasTitles\":{\"objectpascal\":\"Object Pascal\"},\"owner\":\"Golmote\"},\"perl\":{\"title\":\"Perl\",\"owner\":\"Golmote\"},\"php\":{\"title\":\"PHP\",\"require\":[\"clike\",\"markup-templating\"],\"owner\":\"milesj\"},\"phpdoc\":{\"title\":\"PHPDoc\",\"require\":[\"php\",\"javadoclike\"],\"owner\":\"RunDevelopment\"},\"php-extras\":{\"title\":\"PHP Extras\",\"require\":\"php\",\"owner\":\"milesj\"},\"plsql\":{\"title\":\"PL/SQL\",\"require\":\"sql\",\"owner\":\"Golmote\"},\"powershell\":{\"title\":\"PowerShell\",\"owner\":\"nauzilus\"},\"processing\":{\"title\":\"Processing\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"prolog\":{\"title\":\"Prolog\",\"owner\":\"Golmote\"},\"properties\":{\"title\":\".properties\",\"owner\":\"Golmote\"},\"protobuf\":{\"title\":\"Protocol Buffers\",\"require\":\"clike\",\"owner\":\"just-boris\"},\"pug\":{\"title\":\"Pug\",\"require\":[\"markup\",\"javascript\"],\"peerDependencies\":[\"coffeescript\",\"ejs\",\"handlebars\",\"less\",\"livescript\",\"markdown\",\"scss\",\"stylus\",\"twig\"],\"owner\":\"Golmote\"},\"puppet\":{\"title\":\"Puppet\",\"owner\":\"Golmote\"},\"pure\":{\"title\":\"Pure\",\"peerDependencies\":[\"c\",\"cpp\",\"fortran\"],\"owner\":\"Golmote\"},\"python\":{\"title\":\"Python\",\"alias\":\"py\",\"owner\":\"multipetros\"},\"q\":{\"title\":\"Q (kdb+ database)\",\"owner\":\"Golmote\"},\"qore\":{\"title\":\"Qore\",\"require\":\"clike\",\"owner\":\"temnroegg\"},\"r\":{\"title\":\"R\",\"owner\":\"Golmote\"},\"jsx\":{\"title\":\"React JSX\",\"require\":[\"markup\",\"javascript\"],\"peerDependencies\":[\"jsdoc\",\"js-extras\"],\"owner\":\"vkbansal\"},\"tsx\":{\"title\":\"React TSX\",\"require\":[\"jsx\",\"typescript\"]},\"renpy\":{\"title\":\"Ren'py\",\"owner\":\"HyuchiaDiego\"},\"reason\":{\"title\":\"Reason\",\"require\":\"clike\",\"owner\":\"Golmote\"},\"regex\":{\"title\":\"Regex\",\"peerDependencies\":[\"actionscript\",\"coffeescript\",\"flow\",\"javascript\",\"typescript\",\"vala\"],\"owner\":\"RunDevelopment\"},\"rest\":{\"title\":\"reST (reStructuredText)\",\"owner\":\"Golmote\"},\"rip\":{\"title\":\"Rip\",\"owner\":\"ravinggenius\"},\"roboconf\":{\"title\":\"Roboconf\",\"owner\":\"Golmote\"},\"ruby\":{\"title\":\"Ruby\",\"require\":\"clike\",\"alias\":\"rb\",\"owner\":\"samflores\"},\"rust\":{\"title\":\"Rust\",\"owner\":\"Golmote\"},\"sas\":{\"title\":\"SAS\",\"owner\":\"Golmote\"},\"sass\":{\"title\":\"Sass (Sass)\",\"require\":\"css\",\"owner\":\"Golmote\"},\"scss\":{\"title\":\"Sass (Scss)\",\"require\":\"css\",\"owner\":\"MoOx\"},\"scala\":{\"title\":\"Scala\",\"require\":\"java\",\"owner\":\"jozic\"},\"scheme\":{\"title\":\"Scheme\",\"owner\":\"bacchus123\"},\"smalltalk\":{\"title\":\"Smalltalk\",\"owner\":\"Golmote\"},\"smarty\":{\"title\":\"Smarty\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"sql\":{\"title\":\"SQL\",\"owner\":\"multipetros\"},\"soy\":{\"title\":\"Soy (Closure Template)\",\"require\":\"markup-templating\",\"owner\":\"Golmote\"},\"stylus\":{\"title\":\"Stylus\",\"owner\":\"vkbansal\"},\"swift\":{\"title\":\"Swift\",\"require\":\"clike\",\"owner\":\"chrischares\"},\"tap\":{\"title\":\"TAP\",\"owner\":\"isaacs\",\"require\":\"yaml\"},\"tcl\":{\"title\":\"Tcl\",\"owner\":\"PeterChaplin\"},\"textile\":{\"title\":\"Textile\",\"require\":\"markup\",\"peerDependencies\":\"css\",\"owner\":\"Golmote\"},\"toml\":{\"title\":\"TOML\",\"owner\":\"RunDevelopment\"},\"tt2\":{\"title\":\"Template Toolkit 2\",\"require\":[\"clike\",\"markup-templating\"],\"owner\":\"gflohr\"},\"twig\":{\"title\":\"Twig\",\"require\":\"markup\",\"owner\":\"brandonkelly\"},\"typescript\":{\"title\":\"TypeScript\",\"require\":\"javascript\",\"alias\":\"ts\",\"owner\":\"vkbansal\"},\"t4-cs\":{\"title\":\"T4 Text Templates (C#)\",\"require\":[\"t4-templating\",\"csharp\"],\"alias\":\"t4\",\"owner\":\"RunDevelopment\"},\"t4-vb\":{\"title\":\"T4 Text Templates (VB)\",\"require\":[\"t4-templating\",\"visual-basic\"],\"owner\":\"RunDevelopment\"},\"t4-templating\":{\"title\":\"T4 templating\",\"owner\":\"RunDevelopment\"},\"vala\":{\"title\":\"Vala\",\"require\":\"clike\",\"owner\":\"TemplarVolk\"},\"vbnet\":{\"title\":\"VB.Net\",\"require\":\"basic\",\"owner\":\"Bigsby\"},\"velocity\":{\"title\":\"Velocity\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"verilog\":{\"title\":\"Verilog\",\"owner\":\"a-rey\"},\"vhdl\":{\"title\":\"VHDL\",\"owner\":\"a-rey\"},\"vim\":{\"title\":\"vim\",\"owner\":\"westonganger\"},\"visual-basic\":{\"title\":\"Visual Basic\",\"alias\":\"vb\",\"owner\":\"Golmote\"},\"wasm\":{\"title\":\"WebAssembly\",\"owner\":\"Golmote\"},\"wiki\":{\"title\":\"Wiki markup\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"xeora\":{\"title\":\"Xeora\",\"require\":\"markup\",\"alias\":\"xeoracube\",\"aliasTitles\":{\"xeoracube\":\"XeoraCube\"},\"owner\":\"freakmaxi\"},\"xojo\":{\"title\":\"Xojo (REALbasic)\",\"owner\":\"Golmote\"},\"xquery\":{\"title\":\"XQuery\",\"require\":\"markup\",\"owner\":\"Golmote\"},\"yaml\":{\"title\":\"YAML\",\"alias\":\"yml\",\"owner\":\"hason\"}},\"plugins\":{\"meta\":{\"path\":\"plugins/{id}/prism-{id}\",\"link\":\"plugins/{id}/\"},\"line-highlight\":\"Line Highlight\",\"line-numbers\":{\"title\":\"Line Numbers\",\"owner\":\"kuba-kubula\"},\"show-invisibles\":{\"title\":\"Show Invisibles\",\"after\":[\"autolinker\",\"data-uri-highlight\"]},\"autolinker\":\"Autolinker\",\"wpd\":\"WebPlatform Docs\",\"custom-class\":{\"title\":\"Custom Class\",\"owner\":\"dvkndn\",\"noCSS\":true},\"file-highlight\":{\"title\":\"File Highlight\",\"noCSS\":true},\"show-language\":{\"title\":\"Show Language\",\"owner\":\"nauzilus\",\"noCSS\":true,\"require\":\"toolbar\"},\"jsonp-highlight\":{\"title\":\"JSONP Highlight\",\"noCSS\":true,\"owner\":\"nauzilus\"},\"highlight-keywords\":{\"title\":\"Highlight Keywords\",\"owner\":\"vkbansal\",\"noCSS\":true},\"remove-initial-line-feed\":{\"title\":\"Remove initial line feed\",\"owner\":\"Golmote\",\"noCSS\":true},\"previewers\":{\"title\":\"Previewers\",\"owner\":\"Golmote\"},\"autoloader\":{\"title\":\"Autoloader\",\"owner\":\"Golmote\",\"noCSS\":true},\"keep-markup\":{\"title\":\"Keep Markup\",\"owner\":\"Golmote\",\"after\":\"normalize-whitespace\",\"noCSS\":true},\"command-line\":{\"title\":\"Command Line\",\"owner\":\"chriswells0\"},\"unescaped-markup\":\"Unescaped Markup\",\"normalize-whitespace\":{\"title\":\"Normalize Whitespace\",\"owner\":\"zeitgeist87\",\"after\":\"unescaped-markup\",\"noCSS\":true},\"data-uri-highlight\":{\"title\":\"Data-URI Highlight\",\"owner\":\"Golmote\",\"noCSS\":true},\"toolbar\":{\"title\":\"Toolbar\",\"owner\":\"mAAdhaTTah\"},\"copy-to-clipboard\":{\"title\":\"Copy to Clipboard Button\",\"owner\":\"mAAdhaTTah\",\"require\":\"toolbar\",\"noCSS\":true}}};",
            "if (typeof module !== 'undefined' && module.exports) { module.exports = components; }"
        ]
    },
    "components.json": {},
    "composer.json": {},
    "download.html": {},
    "examples.html": {},
    "extending.html": {},
    "faq.html": {},
    "favicon.png": {},
    "gulpfile.js": {
        "classes": [],
        "functions": [],
        "text": [
            "const { src, dest, series, parallel, watch } = require('gulp');",
            "",
            "const rename = require('gulp-rename');",
            "const uglify = require('gulp-uglify');",
            "const header = require('gulp-header');",
            "const concat = require('gulp-concat');",
            "const replace = require('gulp-replace');",
            "const pump = require('pump');",
            "const fs = require('fs');",
            "const simpleGit = require('simple-git');",
            "const shelljs = require('shelljs');",
            "",
            "const paths = {",
            "\tcomponentsFile: 'components.json',",
            "\tcomponentsFileJS: 'components.js',",
            "\tcomponents: ['components/**/*.js', '!components/index.js', '!components/**/*.min.js'],",
            "\tmain: [",
            "\t\t'components/prism-core.js',",
            "\t\t'components/prism-markup.js',",
            "\t\t'components/prism-css.js',",
            "\t\t'components/prism-clike.js',",
            "\t\t'components/prism-javascript.js',",
            "\t\t'plugins/file-highlight/prism-file-highlight.js'",
            "\t],",
            "\tplugins: ['plugins/**/*.js', '!plugins/**/*.min.js'],",
            "\tshowLanguagePlugin: 'plugins/show-language/prism-show-language.js',",
            "\tautoloaderPlugin: 'plugins/autoloader/prism-autoloader.js',",
            "\tchangelog: 'CHANGELOG.md'",
            "};",
            "",
            "const componentsPromise = new Promise((resolve, reject) => {",
            "\tfs.readFile(paths.componentsFile, {",
            "\t\tencoding: 'utf-8'",
            "\t}, (err, data) => {",
            "\t\tif (!err) {",
            "\t\t\tresolve(JSON.parse(data));",
            "\t\t} else {",
            "\t\t\treject(err);",
            "\t\t}",
            "\t});",
            "});",
            "",
            "function inlineRegexSource() {",
            "\treturn replace(",
            "\t\t/\\/((?:[^\\n\\r[\\\\\\/]|\\\\.|\\[(?:[^\\n\\r\\\\\\]]|\\\\.)*\\])*)\\/\\.source\\b/g,",
            "\t\t(m, source) => {",
            "\t\t\t// escape backslashes",
            "\t\t\tsource = source.replace(/\\\\/g, '\\\\\\\\');",
            "\t\t\t// escape single quotes",
            "\t\t\tsource = source.replace(/'/g, \"\\\\'\");",
            "\t\t\t// unescape characters like \\\\n and \\\\t to \\n and \\t",
            "\t\t\tsource = source.replace(/(^|[^\\\\])\\\\\\\\([nrt0])/g, '$1\\\\$2');",
            "\t\t\t// wrap source in single quotes",
            "\t\t\treturn \"'\" + source + \"'\";",
            "\t\t}",
            "\t);",
            "}",
            "",
            "function minifyJS() {",
            "\treturn [",
            "\t\tinlineRegexSource(),",
            "\t\tuglify()",
            "\t];",
            "}",
            "",
            "",
            "function minifyComponents(cb) {",
            "\tpump([src(paths.components), ...minifyJS(), rename({ suffix: '.min' }), dest('components')], cb);",
            "}",
            "function minifyPlugins(cb) {",
            "\tpump([src(paths.plugins), ...minifyJS(), rename({ suffix: '.min' }), dest('plugins')], cb);",
            "}",
            "function build(cb) {",
            "\tpump([src(paths.main), header(`",
            "/* **********************************************",
            "     Begin <%= file.relative %>",
            "********************************************** */",
            "",
            "`), concat('prism.js'), dest('./')], cb);",
            "}",
            "",
            "function componentsJsonToJs(cb) {",
            "\tcomponentsPromise.then(data => {",
            "\t\tconst js = `var components = ${JSON.stringify(data)};",
            "if (typeof module !== 'undefined' && module.exports) { module.exports = components; }`;",
            "\t\tfs.writeFile(paths.componentsFileJS, js, cb);",
            "\t});",
            "}",
            "",
            "function watchComponentsAndPlugins() {",
            "\twatch(paths.components, parallel(minifyComponents, build));",
            "\twatch(paths.plugins, parallel(minifyPlugins, build));",
            "}",
            "",
            "function languagePlugins(cb) {",
            "\tcomponentsPromise.then(data => {",
            "\t\tconst languagesMap = {};",
            "\t\tconst dependenciesMap = {};",
            "\t\tconst aliasMap = {};",
            "",
            "\t\t/**",
            "\t\t * Tries to guess the name of a language given its id.",
            "\t\t *",
            "\t\t * From `prism-show-language.js`.",
            "\t\t *",
            "\t\t * @param {string} id The language id.",
            "\t\t * @returns {string}",
            "\t\t */",
            "\t\tfunction guessTitle(id) {",
            "\t\t\tif (!id) {",
            "\t\t\t\treturn id;",
            "\t\t\t}",
            "\t\t\treturn (id.substring(0, 1).toUpperCase() + id.substring(1)).replace(/s(?=cript)/, 'S');",
            "\t\t}",
            "",
            "\t\tfunction addLanguageTitle(key, title) {",
            "\t\t\tif (!languagesMap[key] && guessTitle(key) !== title) {",
            "\t\t\t\tlanguagesMap[key] = title;",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tfor (const id in data.languages) {",
            "\t\t\tif (id !== 'meta') {",
            "\t\t\t\tconst language = data.languages[id];",
            "\t\t\t\tconst title = language.displayTitle || language.title;",
            "",
            "\t\t\t\taddLanguageTitle(id, title);",
            "",
            "\t\t\t\tfor (const name in language.aliasTitles) {",
            "\t\t\t\t\taddLanguageTitle(name, language.aliasTitles[name]);",
            "\t\t\t\t}",
            "",
            "\t\t\t\tif (language.alias) {",
            "\t\t\t\t\tif (typeof language.alias === 'string') {",
            "\t\t\t\t\t\taliasMap[language.alias] = id;",
            "\t\t\t\t\t\taddLanguageTitle(language.alias, title);",
            "\t\t\t\t\t} else {",
            "\t\t\t\t\t\tlanguage.alias.forEach(function (alias) {",
            "\t\t\t\t\t\t\taliasMap[alias] = id;",
            "\t\t\t\t\t\t\taddLanguageTitle(alias, title);",
            "\t\t\t\t\t\t});",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "",
            "\t\t\t\tif (language.require) {",
            "\t\t\t\t\tdependenciesMap[id] = language.require;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tconst jsonLanguagesMap = JSON.stringify(languagesMap);",
            "\t\tconst jsonDependenciesMap = JSON.stringify(dependenciesMap);",
            "\t\tconst jsonAliasMap = JSON.stringify(aliasMap);",
            "",
            "\t\tconst tasks = [",
            "\t\t\t{",
            "\t\t\t\tplugin: paths.showLanguagePlugin,",
            "\t\t\t\tmaps: { languages: jsonLanguagesMap}",
            "\t\t\t},",
            "\t\t\t{",
            "\t\t\t\tplugin: paths.autoloaderPlugin,",
            "\t\t\t\tmaps: { aliases: jsonAliasMap, dependencies: jsonDependenciesMap }",
            "\t\t\t}",
            "\t\t];",
            "",
            "\t\tlet cpt = 0;",
            "\t\tconst l = tasks.length;",
            "\t\tconst done = () => {",
            "\t\t\tcpt++;",
            "\t\t\tif (cpt === l) {",
            "\t\t\t\tcb && cb();",
            "\t\t\t}",
            "\t\t};",
            "",
            "\t\tfor (const task of tasks) {",
            "\t\t\tconst stream = src(task.plugin)",
            "\t\t\t\t.pipe(replace(",
            "\t\t\t\t\t/\\/\\*(\\w+)_placeholder\\[\\*\\/[\\s\\S]*?\\/\\*\\]\\*\\//g,",
            "\t\t\t\t\t(m, mapName) => `/*${mapName}_placeholder[*/${task.maps[mapName]}/*]*/`",
            "\t\t\t\t))",
            "\t\t\t\t.pipe(dest(task.plugin.substring(0, task.plugin.lastIndexOf('/'))));",
            "",
            "\t\t\tstream.on('error', done);",
            "\t\t\tstream.on('end', done);",
            "\t\t}",
            "\t});",
            "}",
            "",
            "const ISSUE_RE = /#(\\d+)(?![\\d\\]])/g;",
            "const ISSUE_SUB = '[#$1](https://github.com/PrismJS/prism/issues/$1)';",
            "",
            "function linkify(cb) {",
            "\treturn pump([",
            "\t\tsrc(paths.changelog),",
            "\t\treplace(ISSUE_RE, ISSUE_SUB),",
            "\t\treplace(",
            "\t\t\t/\\[[\\da-f]+(?:, *[\\da-f]+)*\\]/g,",
            "\t\t\tm => m.replace(/([\\da-f]{7})[\\da-f]*/g, '[`$1`](https://github.com/PrismJS/prism/commit/$1)')",
            "\t\t),",
            "\t\tdest('.')",
            "\t], cb);",
            "}",
            "",
            "const COMMIT_RE = /^([\\da-z]{8})\\s(.*)/;",
            "",
            "function changes(cb) {",
            "\tconst tag = shelljs.exec('git describe --abbrev=0 --tags', { silent: true }).stdout;",
            "\tconst commits = shelljs",
            "\t\t.exec(",
            "\t\t\t`git log ${tag.trim()}..HEAD --oneline`,",
            "\t\t\t{ silent: true }",
            "\t\t)",
            "\t\t.stdout.split('\\n')",
            "\t\t.map(line => line.trim())",
            "\t\t.filter(line => line !== '')",
            "\t\t.map(line => {",
            "\t\t\tconst [,hash, msg] = COMMIT_RE.exec(line);",
            "\t\t\treturn `* ${msg.replace(ISSUE_RE, ISSUE_SUB)} [\\`${hash}\\`](https://github.com/PrismJS/prism/commit/${hash})`",
            "\t\t})",
            "\t\t.join('\\n');",
            "",
            "\tconst changes = `## Unreleased",
            "",
            "${commits}",
            "",
            "### New components",
            "",
            "### Updated components",
            "",
            "### Updated plugins",
            "",
            "### Updated themes",
            "",
            "### Other changes",
            "",
            "* __Website__`;",
            "",
            "\tconsole.log(changes);",
            "\tcb();",
            "}",
            "",
            "const components = minifyComponents;",
            "const plugins = series(languagePlugins, minifyPlugins);",
            "",
            "function gitChanges(cb) {",
            "\tconst git = simpleGit(__dirname);",
            "",
            "\tgit.status((err, res) => {",
            "\t\tif (err) {",
            "\t\t\tcb(new Error(`Something went wrong!\\n${err}`));",
            "\t\t} else if (res.files.length > 0) {",
            "\t\t\tconsole.log(res);",
            "\t\t\tcb(new Error('There are changes in the file system. Did you forget to run gulp?'));",
            "\t\t} else {",
            "\t\t\tcb();",
            "\t\t}",
            "\t});",
            "}",
            "",
            "",
            "exports.watch = watchComponentsAndPlugins;",
            "exports.default = parallel(components, plugins, componentsJsonToJs, build);",
            "exports.premerge = gitChanges;",
            "exports.linkify = linkify;",
            "exports.changes = changes;"
        ]
    },
    "index.html": {},
    "logo.svg": {},
    "package-lock.json": {},
    "package.json": {},
    "prism.js": {
        "classes": [],
        "functions": [],
        "text": [
            "",
            "/* **********************************************",
            "     Begin prism-core.js",
            "********************************************** */",
            "",
            "var _self = (typeof window !== 'undefined')",
            "\t? window   // if in browser",
            "\t: (",
            "\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)",
            "\t\t? self // if in worker",
            "\t\t: {}   // if in node js",
            "\t);",
            "",
            "/**",
            " * Prism: Lightweight, robust, elegant syntax highlighting",
            " * MIT license http://www.opensource.org/licenses/mit-license.php/",
            " * @author Lea Verou http://lea.verou.me",
            " */",
            "",
            "var Prism = (function (_self){",
            "",
            "// Private helper vars",
            "var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
            "var uniqueId = 0;",
            "",
            "var _ = {",
            "\tmanual: _self.Prism && _self.Prism.manual,",
            "\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,",
            "\tutil: {",
            "\t\tencode: function (tokens) {",
            "\t\t\tif (tokens instanceof Token) {",
            "\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);",
            "\t\t\t} else if (Array.isArray(tokens)) {",
            "\t\t\t\treturn tokens.map(_.util.encode);",
            "\t\t\t} else {",
            "\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');",
            "\t\t\t}",
            "\t\t},",
            "",
            "\t\ttype: function (o) {",
            "\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);",
            "\t\t},",
            "",
            "\t\tobjId: function (obj) {",
            "\t\t\tif (!obj['__id']) {",
            "\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });",
            "\t\t\t}",
            "\t\t\treturn obj['__id'];",
            "\t\t},",
            "",
            "\t\t// Deep clone a language definition (e.g. to extend it)",
            "\t\tclone: function deepClone(o, visited) {",
            "\t\t\tvar clone, id, type = _.util.type(o);",
            "\t\t\tvisited = visited || {};",
            "",
            "\t\t\tswitch (type) {",
            "\t\t\t\tcase 'Object':",
            "\t\t\t\t\tid = _.util.objId(o);",
            "\t\t\t\t\tif (visited[id]) {",
            "\t\t\t\t\t\treturn visited[id];",
            "\t\t\t\t\t}",
            "\t\t\t\t\tclone = {};",
            "\t\t\t\t\tvisited[id] = clone;",
            "",
            "\t\t\t\t\tfor (var key in o) {",
            "\t\t\t\t\t\tif (o.hasOwnProperty(key)) {",
            "\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\treturn clone;",
            "",
            "\t\t\t\tcase 'Array':",
            "\t\t\t\t\tid = _.util.objId(o);",
            "\t\t\t\t\tif (visited[id]) {",
            "\t\t\t\t\t\treturn visited[id];",
            "\t\t\t\t\t}",
            "\t\t\t\t\tclone = [];",
            "\t\t\t\t\tvisited[id] = clone;",
            "",
            "\t\t\t\t\to.forEach(function (v, i) {",
            "\t\t\t\t\t\tclone[i] = deepClone(v, visited);",
            "\t\t\t\t\t});",
            "",
            "\t\t\t\t\treturn clone;",
            "",
            "\t\t\t\tdefault:",
            "\t\t\t\t\treturn o;",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "",
            "\tlanguages: {",
            "\t\textend: function (id, redef) {",
            "\t\t\tvar lang = _.util.clone(_.languages[id]);",
            "",
            "\t\t\tfor (var key in redef) {",
            "\t\t\t\tlang[key] = redef[key];",
            "\t\t\t}",
            "",
            "\t\t\treturn lang;",
            "\t\t},",
            "",
            "\t\t/**",
            "\t\t * Insert a token before another token in a language literal",
            "\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),",
            "\t\t * we cannot just provide an object, we need an object and a key.",
            "\t\t * @param inside The key (or language id) of the parent",
            "\t\t * @param before The key to insert before.",
            "\t\t * @param insert Object with the key/value pairs to insert",
            "\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.",
            "\t\t */",
            "\t\tinsertBefore: function (inside, before, insert, root) {",
            "\t\t\troot = root || _.languages;",
            "\t\t\tvar grammar = root[inside];",
            "\t\t\tvar ret = {};",
            "",
            "\t\t\tfor (var token in grammar) {",
            "\t\t\t\tif (grammar.hasOwnProperty(token)) {",
            "",
            "\t\t\t\t\tif (token == before) {",
            "\t\t\t\t\t\tfor (var newToken in insert) {",
            "\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
            "\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\t// Do not insert token which also occur in insert. See #1525",
            "\t\t\t\t\tif (!insert.hasOwnProperty(token)) {",
            "\t\t\t\t\t\tret[token] = grammar[token];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t\tvar old = root[inside];",
            "\t\t\troot[inside] = ret;",
            "",
            "\t\t\t// Update references in other language definitions",
            "\t\t\t_.languages.DFS(_.languages, function(key, value) {",
            "\t\t\t\tif (value === old && key != inside) {",
            "\t\t\t\t\tthis[key] = ret;",
            "\t\t\t\t}",
            "\t\t\t});",
            "",
            "\t\t\treturn ret;",
            "\t\t},",
            "",
            "\t\t// Traverse a language definition with Depth First Search",
            "\t\tDFS: function DFS(o, callback, type, visited) {",
            "\t\t\tvisited = visited || {};",
            "",
            "\t\t\tvar objId = _.util.objId;",
            "",
            "\t\t\tfor (var i in o) {",
            "\t\t\t\tif (o.hasOwnProperty(i)) {",
            "\t\t\t\t\tcallback.call(o, i, o[i], type || i);",
            "",
            "\t\t\t\t\tvar property = o[i],",
            "\t\t\t\t\t    propertyType = _.util.type(property);",
            "",
            "\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {",
            "\t\t\t\t\t\tvisited[objId(property)] = true;",
            "\t\t\t\t\t\tDFS(property, callback, null, visited);",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse if (propertyType === 'Array' && !visited[objId(property)]) {",
            "\t\t\t\t\t\tvisited[objId(property)] = true;",
            "\t\t\t\t\t\tDFS(property, callback, i, visited);",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "\tplugins: {},",
            "",
            "\thighlightAll: function(async, callback) {",
            "\t\t_.highlightAllUnder(document, async, callback);",
            "\t},",
            "",
            "\thighlightAllUnder: function(container, async, callback) {",
            "\t\tvar env = {",
            "\t\t\tcallback: callback,",
            "\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'",
            "\t\t};",
            "",
            "\t\t_.hooks.run(\"before-highlightall\", env);",
            "",
            "\t\tvar elements = env.elements || container.querySelectorAll(env.selector);",
            "",
            "\t\tfor (var i=0, element; element = elements[i++];) {",
            "\t\t\t_.highlightElement(element, async === true, env.callback);",
            "\t\t}",
            "\t},",
            "",
            "\thighlightElement: function(element, async, callback) {",
            "\t\t// Find language",
            "\t\tvar language = 'none', grammar, parent = element;",
            "",
            "\t\twhile (parent && !lang.test(parent.className)) {",
            "\t\t\tparent = parent.parentNode;",
            "\t\t}",
            "",
            "\t\tif (parent) {",
            "\t\t\tlanguage = (parent.className.match(lang) || [,'none'])[1].toLowerCase();",
            "\t\t\tgrammar = _.languages[language];",
            "\t\t}",
            "",
            "\t\t// Set language on the element, if not present",
            "\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
            "",
            "\t\tif (element.parentNode) {",
            "\t\t\t// Set language on the parent, for styling",
            "\t\t\tparent = element.parentNode;",
            "",
            "\t\t\tif (/pre/i.test(parent.nodeName)) {",
            "\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\tvar code = element.textContent;",
            "",
            "\t\tvar env = {",
            "\t\t\telement: element,",
            "\t\t\tlanguage: language,",
            "\t\t\tgrammar: grammar,",
            "\t\t\tcode: code",
            "\t\t};",
            "",
            "\t\tvar insertHighlightedCode = function (highlightedCode) {",
            "\t\t\tenv.highlightedCode = highlightedCode;",
            "",
            "\t\t\t_.hooks.run('before-insert', env);",
            "",
            "\t\t\tenv.element.innerHTML = env.highlightedCode;",
            "",
            "\t\t\t_.hooks.run('after-highlight', env);",
            "\t\t\t_.hooks.run('complete', env);",
            "\t\t\tcallback && callback.call(env.element);",
            "\t\t}",
            "",
            "\t\t_.hooks.run('before-sanity-check', env);",
            "",
            "\t\tif (!env.code) {",
            "\t\t\t_.hooks.run('complete', env);",
            "\t\t\treturn;",
            "\t\t}",
            "",
            "\t\t_.hooks.run('before-highlight', env);",
            "",
            "\t\tif (!env.grammar) {",
            "\t\t\tinsertHighlightedCode(_.util.encode(env.code));",
            "\t\t\treturn;",
            "\t\t}",
            "",
            "\t\tif (async && _self.Worker) {",
            "\t\t\tvar worker = new Worker(_.filename);",
            "",
            "\t\t\tworker.onmessage = function(evt) {",
            "\t\t\t\tinsertHighlightedCode(evt.data);",
            "\t\t\t};",
            "",
            "\t\t\tworker.postMessage(JSON.stringify({",
            "\t\t\t\tlanguage: env.language,",
            "\t\t\t\tcode: env.code,",
            "\t\t\t\timmediateClose: true",
            "\t\t\t}));",
            "\t\t}",
            "\t\telse {",
            "\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));",
            "\t\t}",
            "\t},",
            "",
            "\thighlight: function (text, grammar, language) {",
            "\t\tvar env = {",
            "\t\t\tcode: text,",
            "\t\t\tgrammar: grammar,",
            "\t\t\tlanguage: language",
            "\t\t};",
            "\t\t_.hooks.run('before-tokenize', env);",
            "\t\tenv.tokens = _.tokenize(env.code, env.grammar);",
            "\t\t_.hooks.run('after-tokenize', env);",
            "\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);",
            "\t},",
            "",
            "\tmatchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {",
            "\t\tfor (var token in grammar) {",
            "\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {",
            "\t\t\t\tcontinue;",
            "\t\t\t}",
            "",
            "\t\t\tif (token == target) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\tvar patterns = grammar[token];",
            "\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];",
            "",
            "\t\t\tfor (var j = 0; j < patterns.length; ++j) {",
            "\t\t\t\tvar pattern = patterns[j],",
            "\t\t\t\t\tinside = pattern.inside,",
            "\t\t\t\t\tlookbehind = !!pattern.lookbehind,",
            "\t\t\t\t\tgreedy = !!pattern.greedy,",
            "\t\t\t\t\tlookbehindLength = 0,",
            "\t\t\t\t\talias = pattern.alias;",
            "",
            "\t\t\t\tif (greedy && !pattern.pattern.global) {",
            "\t\t\t\t\t// Without the global flag, lastIndex won't work",
            "\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];",
            "\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");",
            "\t\t\t\t}",
            "",
            "\t\t\t\tpattern = pattern.pattern || pattern;",
            "",
            "\t\t\t\t// Don’t cache length as it changes during the loop",
            "\t\t\t\tfor (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {",
            "",
            "\t\t\t\t\tvar str = strarr[i];",
            "",
            "\t\t\t\t\tif (strarr.length > text.length) {",
            "\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!",
            "\t\t\t\t\t\treturn;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif (str instanceof Token) {",
            "\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif (greedy && i != strarr.length - 1) {",
            "\t\t\t\t\t\tpattern.lastIndex = pos;",
            "\t\t\t\t\t\tvar match = pattern.exec(text);",
            "\t\t\t\t\t\tif (!match) {",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),",
            "\t\t\t\t\t\t    to = match.index + match[0].length,",
            "\t\t\t\t\t\t    k = i,",
            "\t\t\t\t\t\t    p = pos;",
            "",
            "\t\t\t\t\t\tfor (var len = strarr.length; k < len && (p < to || (!strarr[k].type && !strarr[k - 1].greedy)); ++k) {",
            "\t\t\t\t\t\t\tp += strarr[k].length;",
            "\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from",
            "\t\t\t\t\t\t\tif (from >= p) {",
            "\t\t\t\t\t\t\t\t++i;",
            "\t\t\t\t\t\t\t\tpos = p;",
            "\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\t// If strarr[i] is a Token, then the match starts inside another Token, which is invalid",
            "\t\t\t\t\t\tif (strarr[i] instanceof Token) {",
            "\t\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\t// Number of tokens to delete and replace with the new match",
            "\t\t\t\t\t\tdelNum = k - i;",
            "\t\t\t\t\t\tstr = text.slice(pos, p);",
            "\t\t\t\t\t\tmatch.index -= pos;",
            "\t\t\t\t\t} else {",
            "\t\t\t\t\t\tpattern.lastIndex = 0;",
            "",
            "\t\t\t\t\t\tvar match = pattern.exec(str),",
            "\t\t\t\t\t\t\tdelNum = 1;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif (!match) {",
            "\t\t\t\t\t\tif (oneshot) {",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\t}",
            "",
            "\t\t\t\t\t\tcontinue;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tif(lookbehind) {",
            "\t\t\t\t\t\tlookbehindLength = match[1] ? match[1].length : 0;",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tvar from = match.index + lookbehindLength,",
            "\t\t\t\t\t    match = match[0].slice(lookbehindLength),",
            "\t\t\t\t\t    to = from + match.length,",
            "\t\t\t\t\t    before = str.slice(0, from),",
            "\t\t\t\t\t    after = str.slice(to);",
            "",
            "\t\t\t\t\tvar args = [i, delNum];",
            "",
            "\t\t\t\t\tif (before) {",
            "\t\t\t\t\t\t++i;",
            "\t\t\t\t\t\tpos += before.length;",
            "\t\t\t\t\t\targs.push(before);",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);",
            "",
            "\t\t\t\t\targs.push(wrapped);",
            "",
            "\t\t\t\t\tif (after) {",
            "\t\t\t\t\t\targs.push(after);",
            "\t\t\t\t\t}",
            "",
            "\t\t\t\t\tArray.prototype.splice.apply(strarr, args);",
            "",
            "\t\t\t\t\tif (delNum != 1)",
            "\t\t\t\t\t\t_.matchGrammar(text, strarr, grammar, i, pos, true, token);",
            "",
            "\t\t\t\t\tif (oneshot)",
            "\t\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "",
            "\ttokenize: function(text, grammar) {",
            "\t\tvar strarr = [text];",
            "",
            "\t\tvar rest = grammar.rest;",
            "",
            "\t\tif (rest) {",
            "\t\t\tfor (var token in rest) {",
            "\t\t\t\tgrammar[token] = rest[token];",
            "\t\t\t}",
            "",
            "\t\t\tdelete grammar.rest;",
            "\t\t}",
            "",
            "\t\t_.matchGrammar(text, strarr, grammar, 0, 0, false);",
            "",
            "\t\treturn strarr;",
            "\t},",
            "",
            "\thooks: {",
            "\t\tall: {},",
            "",
            "\t\tadd: function (name, callback) {",
            "\t\t\tvar hooks = _.hooks.all;",
            "",
            "\t\t\thooks[name] = hooks[name] || [];",
            "",
            "\t\t\thooks[name].push(callback);",
            "\t\t},",
            "",
            "\t\trun: function (name, env) {",
            "\t\t\tvar callbacks = _.hooks.all[name];",
            "",
            "\t\t\tif (!callbacks || !callbacks.length) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {",
            "\t\t\t\tcallback(env);",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "",
            "\tToken: Token",
            "};",
            "",
            "_self.Prism = _;",
            "",
            "function Token(type, content, alias, matchedStr, greedy) {",
            "\tthis.type = type;",
            "\tthis.content = content;",
            "\tthis.alias = alias;",
            "\t// Copy of the full string this token was created from",
            "\tthis.length = (matchedStr || \"\").length|0;",
            "\tthis.greedy = !!greedy;",
            "}",
            "",
            "Token.stringify = function(o, language) {",
            "\tif (typeof o == 'string') {",
            "\t\treturn o;",
            "\t}",
            "",
            "\tif (Array.isArray(o)) {",
            "\t\treturn o.map(function(element) {",
            "\t\t\treturn Token.stringify(element, language);",
            "\t\t}).join('');",
            "\t}",
            "",
            "\tvar env = {",
            "\t\ttype: o.type,",
            "\t\tcontent: Token.stringify(o.content, language),",
            "\t\ttag: 'span',",
            "\t\tclasses: ['token', o.type],",
            "\t\tattributes: {},",
            "\t\tlanguage: language",
            "\t};",
            "",
            "\tif (o.alias) {",
            "\t\tvar aliases = Array.isArray(o.alias) ? o.alias : [o.alias];",
            "\t\tArray.prototype.push.apply(env.classes, aliases);",
            "\t}",
            "",
            "\t_.hooks.run('wrap', env);",
            "",
            "\tvar attributes = Object.keys(env.attributes).map(function(name) {",
            "\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';",
            "\t}).join(' ');",
            "",
            "\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';",
            "};",
            "",
            "if (!_self.document) {",
            "\tif (!_self.addEventListener) {",
            "\t\t// in Node.js",
            "\t\treturn _;",
            "\t}",
            "",
            "\tif (!_.disableWorkerMessageHandler) {",
            "\t\t// In worker",
            "\t\t_self.addEventListener('message', function (evt) {",
            "\t\t\tvar message = JSON.parse(evt.data),",
            "\t\t\t\tlang = message.language,",
            "\t\t\t\tcode = message.code,",
            "\t\t\t\timmediateClose = message.immediateClose;",
            "",
            "\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));",
            "\t\t\tif (immediateClose) {",
            "\t\t\t\t_self.close();",
            "\t\t\t}",
            "\t\t}, false);",
            "\t}",
            "",
            "\treturn _;",
            "}",
            "",
            "//Get current script and highlight",
            "var script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();",
            "",
            "if (script) {",
            "\t_.filename = script.src;",
            "",
            "\tif (!_.manual && !script.hasAttribute('data-manual')) {",
            "\t\tif(document.readyState !== \"loading\") {",
            "\t\t\tif (window.requestAnimationFrame) {",
            "\t\t\t\twindow.requestAnimationFrame(_.highlightAll);",
            "\t\t\t} else {",
            "\t\t\t\twindow.setTimeout(_.highlightAll, 16);",
            "\t\t\t}",
            "\t\t}",
            "\t\telse {",
            "\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);",
            "\t\t}",
            "\t}",
            "}",
            "",
            "return _;",
            "",
            "})(_self);",
            "",
            "if (typeof module !== 'undefined' && module.exports) {",
            "\tmodule.exports = Prism;",
            "}",
            "",
            "// hack for components to work correctly in node.js",
            "if (typeof global !== 'undefined') {",
            "\tglobal.Prism = Prism;",
            "}",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-markup.js",
            "********************************************** */",
            "",
            "Prism.languages.markup = {",
            "\t'comment': /<!--[\\s\\S]*?-->/,",
            "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
            "\t'doctype': /<!DOCTYPE[\\s\\S]+?>/i,",
            "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,",
            "\t'tag': {",
            "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'tag': {",
            "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'punctuation': /^<\\/?/,",
            "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'attr-value': {",
            "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'punctuation': [",
            "\t\t\t\t\t\t/^=/,",
            "\t\t\t\t\t\t{",
            "\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,",
            "\t\t\t\t\t\t\tlookbehind: true",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t]",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'punctuation': /\\/?>/,",
            "\t\t\t'attr-name': {",
            "\t\t\t\tpattern: /[^\\s>\\/]+/,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
            "\t\t\t\t}",
            "\t\t\t}",
            "",
            "\t\t}",
            "\t},",
            "\t'entity': /&#?[\\da-z]{1,8};/i",
            "};",
            "",
            "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
            "\tPrism.languages.markup['entity'];",
            "",
            "// Plugin to make entity title show the real entity, idea by Roman Komarov",
            "Prism.hooks.add('wrap', function(env) {",
            "",
            "\tif (env.type === 'entity') {",
            "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
            "\t}",
            "});",
            "",
            "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
            "\t/**",
            "\t * Adds an inlined language to markup.",
            "\t *",
            "\t * An example of an inlined language is CSS with `<style>` tags.",
            "\t *",
            "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
            "\t * case insensitive.",
            "\t * @param {string} lang The language key.",
            "\t * @example",
            "\t * addInlined('style', 'css');",
            "\t */",
            "\tvalue: function addInlined(tagName, lang) {",
            "\t\tvar includedCdataInside = {};",
            "\t\tincludedCdataInside['language-' + lang] = {",
            "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages[lang]",
            "\t\t};",
            "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
            "",
            "\t\tvar inside = {",
            "\t\t\t'included-cdata': {",
            "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
            "\t\t\t\tinside: includedCdataInside",
            "\t\t\t}",
            "\t\t};",
            "\t\tinside['language-' + lang] = {",
            "\t\t\tpattern: /[\\s\\S]+/,",
            "\t\t\tinside: Prism.languages[lang]",
            "\t\t};",
            "",
            "\t\tvar def = {};",
            "\t\tdef[tagName] = {",
            "\t\t\tpattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),",
            "\t\t\tlookbehind: true,",
            "\t\t\tgreedy: true,",
            "\t\t\tinside: inside",
            "\t\t};",
            "",
            "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
            "\t}",
            "});",
            "",
            "Prism.languages.xml = Prism.languages.extend('markup', {});",
            "Prism.languages.html = Prism.languages.markup;",
            "Prism.languages.mathml = Prism.languages.markup;",
            "Prism.languages.svg = Prism.languages.markup;",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-css.js",
            "********************************************** */",
            "",
            "(function (Prism) {",
            "",
            "\tvar string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
            "",
            "\tPrism.languages.css = {",
            "\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,",
            "\t\t'atrule': {",
            "\t\t\tpattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,",
            "\t\t\tinside: {",
            "\t\t\t\t'rule': /@[\\w-]+/",
            "\t\t\t\t// See rest below",
            "\t\t\t}",
            "\t\t},",
            "\t\t'url': {",
            "\t\t\tpattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),",
            "\t\t\tinside: {",
            "\t\t\t\t'function': /^url/i,",
            "\t\t\t\t'punctuation': /^\\(|\\)$/",
            "\t\t\t}",
            "\t\t},",
            "\t\t'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),",
            "\t\t'string': {",
            "\t\t\tpattern: string,",
            "\t\t\tgreedy: true",
            "\t\t},",
            "\t\t'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,",
            "\t\t'important': /!important\\b/i,",
            "\t\t'function': /[-a-z0-9]+(?=\\()/i,",
            "\t\t'punctuation': /[(){};:,]/",
            "\t};",
            "",
            "\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;",
            "",
            "\tvar markup = Prism.languages.markup;",
            "\tif (markup) {",
            "\t\tmarkup.tag.addInlined('style', 'css');",
            "",
            "\t\tPrism.languages.insertBefore('inside', 'attr-value', {",
            "\t\t\t'style-attr': {",
            "\t\t\t\tpattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'attr-name': {",
            "\t\t\t\t\t\tpattern: /^\\s*style/i,",
            "\t\t\t\t\t\tinside: markup.tag.inside",
            "\t\t\t\t\t},",
            "\t\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,",
            "\t\t\t\t\t'attr-value': {",
            "\t\t\t\t\t\tpattern: /.+/i,",
            "\t\t\t\t\t\tinside: Prism.languages.css",
            "\t\t\t\t\t}",
            "\t\t\t\t},",
            "\t\t\t\talias: 'language-css'",
            "\t\t\t}",
            "\t\t}, markup.tag);",
            "\t}",
            "",
            "}(Prism));",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-clike.js",
            "********************************************** */",
            "",
            "Prism.languages.clike = {",
            "\t'comment': [",
            "\t\t{",
            "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
            "\t\t\tlookbehind: true",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tgreedy: true",
            "\t\t}",
            "\t],",
            "\t'string': {",
            "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
            "\t\tgreedy: true",
            "\t},",
            "\t'class-name': {",
            "\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,",
            "\t\tlookbehind: true,",
            "\t\tinside: {",
            "\t\t\tpunctuation: /[.\\\\]/",
            "\t\t}",
            "\t},",
            "\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,",
            "\t'boolean': /\\b(?:true|false)\\b/,",
            "\t'function': /\\w+(?=\\()/,",
            "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
            "\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,",
            "\t'punctuation': /[{}[\\];(),.:]/",
            "};",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-javascript.js",
            "********************************************** */",
            "",
            "Prism.languages.javascript = Prism.languages.extend('clike', {",
            "\t'class-name': [",
            "\t\tPrism.languages.clike['class-name'],",
            "\t\t{",
            "\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,",
            "\t\t\tlookbehind: true",
            "\t\t}",
            "\t],",
            "\t'keyword': [",
            "\t\t{",
            "\t\t\tpattern: /((?:^|})\\s*)(?:catch|finally)\\b/,",
            "\t\t\tlookbehind: true",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,",
            "\t\t\tlookbehind: true",
            "\t\t},",
            "\t],",
            "\t'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,",
            "\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)",
            "\t'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,",
            "\t'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/",
            "});",
            "",
            "Prism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;",
            "",
            "Prism.languages.insertBefore('javascript', 'keyword', {",
            "\t'regex': {",
            "\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,",
            "\t\tlookbehind: true,",
            "\t\tgreedy: true",
            "\t},",
            "\t// This must be declared before keyword because we use \"function\" inside the look-forward",
            "\t'function-variable': {",
            "\t\tpattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,",
            "\t\talias: 'function'",
            "\t},",
            "\t'parameter': [",
            "\t\t{",
            "\t\t\tpattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t},",
            "\t\t{",
            "\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,",
            "\t\t\tlookbehind: true,",
            "\t\t\tinside: Prism.languages.javascript",
            "\t\t}",
            "\t],",
            "\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
            "});",
            "",
            "Prism.languages.insertBefore('javascript', 'string', {",
            "\t'template-string': {",
            "\t\tpattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|[^\\\\`])*`/,",
            "\t\tgreedy: true,",
            "\t\tinside: {",
            "\t\t\t'interpolation': {",
            "\t\t\t\tpattern: /\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,",
            "\t\t\t\tinside: {",
            "\t\t\t\t\t'interpolation-punctuation': {",
            "\t\t\t\t\t\tpattern: /^\\${|}$/,",
            "\t\t\t\t\t\talias: 'punctuation'",
            "\t\t\t\t\t},",
            "\t\t\t\t\trest: Prism.languages.javascript",
            "\t\t\t\t}",
            "\t\t\t},",
            "\t\t\t'string': /[\\s\\S]+/",
            "\t\t}",
            "\t}",
            "});",
            "",
            "if (Prism.languages.markup) {",
            "\tPrism.languages.markup.tag.addInlined('script', 'javascript');",
            "}",
            "",
            "Prism.languages.js = Prism.languages.javascript;",
            "",
            "",
            "/* **********************************************",
            "     Begin prism-file-highlight.js",
            "********************************************** */",
            "",
            "(function () {",
            "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
            "\t\treturn;",
            "\t}",
            "",
            "\t/**",
            "\t * @param {Element} [container=document]",
            "\t */",
            "\tself.Prism.fileHighlight = function(container) {",
            "\t\tcontainer = container || document;",
            "",
            "\t\tvar Extensions = {",
            "\t\t\t'js': 'javascript',",
            "\t\t\t'py': 'python',",
            "\t\t\t'rb': 'ruby',",
            "\t\t\t'ps1': 'powershell',",
            "\t\t\t'psm1': 'powershell',",
            "\t\t\t'sh': 'bash',",
            "\t\t\t'bat': 'batch',",
            "\t\t\t'h': 'c',",
            "\t\t\t'tex': 'latex'",
            "\t\t};",
            "",
            "\t\tArray.prototype.slice.call(container.querySelectorAll('pre[data-src]')).forEach(function (pre) {",
            "\t\t\t// ignore if already loaded",
            "\t\t\tif (pre.hasAttribute('data-src-loaded')) {",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "",
            "\t\t\t// load current",
            "\t\t\tvar src = pre.getAttribute('data-src');",
            "",
            "\t\t\tvar language, parent = pre;",
            "\t\t\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
            "\t\t\twhile (parent && !lang.test(parent.className)) {",
            "\t\t\t\tparent = parent.parentNode;",
            "\t\t\t}",
            "",
            "\t\t\tif (parent) {",
            "\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];",
            "\t\t\t}",
            "",
            "\t\t\tif (!language) {",
            "\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];",
            "\t\t\t\tlanguage = Extensions[extension] || extension;",
            "\t\t\t}",
            "",
            "\t\t\tvar code = document.createElement('code');",
            "\t\t\tcode.className = 'language-' + language;",
            "",
            "\t\t\tpre.textContent = '';",
            "",
            "\t\t\tcode.textContent = 'Loading…';",
            "",
            "\t\t\tpre.appendChild(code);",
            "",
            "\t\t\tvar xhr = new XMLHttpRequest();",
            "",
            "\t\t\txhr.open('GET', src, true);",
            "",
            "\t\t\txhr.onreadystatechange = function () {",
            "\t\t\t\tif (xhr.readyState == 4) {",
            "",
            "\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
            "\t\t\t\t\t\tcode.textContent = xhr.responseText;",
            "",
            "\t\t\t\t\t\tPrism.highlightElement(code);",
            "\t\t\t\t\t\t// mark as loaded",
            "\t\t\t\t\t\tpre.setAttribute('data-src-loaded', '');",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse if (xhr.status >= 400) {",
            "\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse {",
            "\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t};",
            "",
            "\t\t\txhr.send(null);",
            "\t\t});",
            "",
            "\t\tif (Prism.plugins.toolbar) {",
            "\t\t\tPrism.plugins.toolbar.registerButton('download-file', function (env) {",
            "\t\t\t\tvar pre = env.element.parentNode;",
            "\t\t\t\tif (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {",
            "\t\t\t\t\treturn;",
            "\t\t\t\t}",
            "\t\t\t\tvar src = pre.getAttribute('data-src');",
            "\t\t\t\tvar a = document.createElement('a');",
            "\t\t\t\ta.textContent = pre.getAttribute('data-download-link-label') || 'Download';",
            "\t\t\t\ta.setAttribute('download', '');",
            "\t\t\t\ta.href = src;",
            "\t\t\t\treturn a;",
            "\t\t\t});",
            "\t\t}",
            "",
            "\t};",
            "",
            "\tdocument.addEventListener('DOMContentLoaded', function () {",
            "\t\t// execute inside handler, for dropping Event as argument",
            "\t\tself.Prism.fileHighlight();",
            "\t});",
            "",
            "})();"
        ]
    },
    "style.css": {},
    "test-suite.html": {},
    "test.html": {},
    "components": {
        "index.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var components = require('../components.js');",
                "var peerDependentsMap = null;",
                "",
                "function getPeerDependentsMap() {",
                "\tvar peerDependentsMap = {};",
                "\tObject.keys(components.languages).forEach(function (language) {",
                "\t\tif (language === 'meta') {",
                "\t\t\treturn false;",
                "\t\t}",
                "\t\tif (components.languages[language].peerDependencies) {",
                "\t\t\tvar peerDependencies = components.languages[language].peerDependencies;",
                "\t\t\tif (!Array.isArray(peerDependencies)) {",
                "\t\t\t\tpeerDependencies = [peerDependencies];",
                "\t\t\t}",
                "\t\t\tpeerDependencies.forEach(function (peerDependency) {",
                "\t\t\t\tif (!peerDependentsMap[peerDependency]) {",
                "\t\t\t\t\tpeerDependentsMap[peerDependency] = [];",
                "\t\t\t\t}",
                "\t\t\t\tpeerDependentsMap[peerDependency].push(language);",
                "\t\t\t});",
                "\t\t}",
                "\t});",
                "\treturn peerDependentsMap;",
                "}",
                "",
                "function getPeerDependents(mainLanguage) {",
                "\tif (!peerDependentsMap) {",
                "\t\tpeerDependentsMap = getPeerDependentsMap();",
                "\t}",
                "\treturn peerDependentsMap[mainLanguage] || [];",
                "}",
                "",
                "function loadLanguages(arr, withoutDependencies) {",
                "\t// If no argument is passed, load all components",
                "\tif (!arr) {",
                "\t\tarr = Object.keys(components.languages).filter(function (language) {",
                "\t\t\treturn language !== 'meta';",
                "\t\t});",
                "\t}",
                "\tif (arr && !arr.length) {",
                "\t\treturn;",
                "\t}",
                "",
                "\tif (!Array.isArray(arr)) {",
                "\t\tarr = [arr];",
                "\t}",
                "",
                "\tarr.forEach(function (language) {",
                "\t\tif (!components.languages[language]) {",
                "\t\t\tconsole.warn('Language does not exist ' + language);",
                "\t\t\treturn;",
                "\t\t}",
                "\t\t// Load dependencies first",
                "\t\tif (!withoutDependencies && components.languages[language].require) {",
                "\t\t\tloadLanguages(components.languages[language].require);",
                "\t\t}",
                "",
                "\t\tvar pathToLanguage = './prism-' + language;",
                "\t\tdelete require.cache[require.resolve(pathToLanguage)];",
                "\t\tdelete Prism.languages[language];",
                "\t\trequire(pathToLanguage);",
                "",
                "\t\t// Reload dependents",
                "\t\tvar dependents = getPeerDependents(language).filter(function (dependent) {",
                "\t\t\t// If dependent language was already loaded,",
                "\t\t\t// we want to reload it.",
                "\t\t\tif (Prism.languages[dependent]) {",
                "\t\t\t\tdelete Prism.languages[dependent];",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t\tif (dependents.length) {",
                "\t\t\tloadLanguages(dependents, true);",
                "\t\t}",
                "\t});",
                "}",
                "",
                "module.exports = function (arr) {",
                "\t// Don't expose withoutDependencies",
                "\tloadLanguages(arr);",
                "};"
            ]
        },
        "prism-abap.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.abap = {",
                "\t'comment': /^\\*.*/m,",
                "\t'string' : /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,",
                "\t'string-template': {",
                "\t\tpattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t/* End Of Line comments should not interfere with strings when the  ",
                "\tquote character occurs within them. We assume a string being highlighted",
                "\tinside an EOL comment is more acceptable than the opposite.",
                "\t*/",
                "\t'eol-comment': {",
                "\t\tpattern: /(^|\\s)\".*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'keyword' : {",
                "\t\tpattern: /(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t/* Numbers can be only integers. Decimal or Hex appear only as strings */",
                "\t'number' : /\\b\\d+\\b/,",
                "\t/* Operators must always be surrounded by whitespace, they cannot be put ",
                "\tadjacent to operands. ",
                "\t*/",
                "\t'operator' : {",
                "\t\tpattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string-operator' : {",
                "\t\tpattern: /(\\s)&&?(?=\\s)/,",
                "\t\tlookbehind: true,",
                "\t\t/* The official editor highlights */",
                "\t\talias: \"keyword\"",
                "\t},",
                "\t'token-operator' : [{",
                "\t\t/* Special operators used to access structure components, class methods/attributes, etc. */",
                "\t\tpattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,",
                "\t\tlookbehind: true,",
                "\t\talias: \"punctuation\"",
                "\t}, {",
                "\t    /* Special tokens used do delimit string templates */",
                "\t    pattern: /[|{}]/,",
                "\t\talias: \"punctuation\"",
                "\t}],",
                "\t'punctuation' : /[,.:()]/",
                "};"
            ]
        },
        "prism-abap.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.abap={comment:/^\\*.*/m,string:/(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\"string-template\":{pattern:/([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,lookbehind:!0,alias:\"string\"},\"eol-comment\":{pattern:/(^|\\s)\".*/m,lookbehind:!0,alias:\"comment\"},keyword:{pattern:/(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,lookbehind:!0},number:/\\b\\d+\\b/,operator:{pattern:/(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,lookbehind:!0},\"string-operator\":{pattern:/(\\s)&&?(?=\\s)/,lookbehind:!0,alias:\"keyword\"},\"token-operator\":[{pattern:/(\\w)(?:->?|=>|[~|{}])(?=\\w)/,lookbehind:!0,alias:\"punctuation\"},{pattern:/[|{}]/,alias:\"punctuation\"}],punctuation:/[,.:()]/};"
            ]
        },
        "prism-abnf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar coreRules = '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';",
                "",
                "\tPrism.languages.abnf = {",
                "\t\t'comment': /;.*/,",
                "\t\t'string': {",
                "\t\t\tpattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^%[is]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'range': {",
                "\t\t\tpattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,",
                "\t\t\talias: 'number'",
                "\t\t},",
                "\t\t'terminal': {",
                "\t\t\tpattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,",
                "\t\t\talias: 'number'",
                "\t\t},",
                "\t\t'repetition': {",
                "\t\t\tpattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'definition': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^>\\r\\n]*>)(?=\\s*=)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /<|>/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'core-rule': {",
                "\t\t\tpattern: RegExp('(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])', 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: ['rule', 'constant'],",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /<|>/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'rule': {",
                "\t\t\tpattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^>\\r\\n]*>/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /<|>/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'operator': /=\\/?|\\//,",
                "\t\t'punctuation': /[()\\[\\]]/",
                "\t};",
                "",
                "})(Prism);"
            ]
        },
        "prism-abnf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var i=\"(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)\";Prism.languages.abnf={comment:/;.*/,string:{pattern:/(?:%[is])?\"[^\"\\n\\r]*\"/,greedy:!0,inside:{punctuation:/^%[is]/}},range:{pattern:/%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,alias:\"number\"},terminal:{pattern:/%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,alias:\"number\"},repetition:{pattern:/(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,lookbehind:!0,alias:\"operator\"},definition:{pattern:/(^[ \\t]*)(?:[a-z][\\w-]*|<[^>\\r\\n]*>)(?=\\s*=)/m,lookbehind:!0,alias:\"keyword\",inside:{punctuation:/<|>/}},\"core-rule\":{pattern:RegExp(\"(?:(^|[^<\\\\w-])\"+i+\"|<\"+i+\">)(?![\\\\w-])\",\"i\"),lookbehind:!0,alias:[\"rule\",\"constant\"],inside:{punctuation:/<|>/}},rule:{pattern:/(^|[^<\\w-])[a-z][\\w-]*|<[^>\\r\\n]*>/i,lookbehind:!0,inside:{punctuation:/<|>/}},operator:/=\\/?|\\//,punctuation:/[()\\[\\]]/}}();"
            ]
        },
        "prism-actionscript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.actionscript = Prism.languages.extend('javascript',  {",
                "\t'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,",
                "\t'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/",
                "});",
                "Prism.languages.actionscript['class-name'].alias = 'function';",
                "",
                "if (Prism.languages.markup) {",
                "\tPrism.languages.insertBefore('actionscript', 'string', {",
                "\t\t'xml': {",
                "\t\t\tpattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.markup",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "}"
            ]
        },
        "prism-actionscript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.actionscript=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,operator:/\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/}),Prism.languages.actionscript[\"class-name\"].alias=\"function\",Prism.languages.markup&&Prism.languages.insertBefore(\"actionscript\",\"string\",{xml:{pattern:/(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,lookbehind:!0,inside:{rest:Prism.languages.markup}}});"
            ]
        },
        "prism-ada.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ada = {",
                "\t'comment': /--.*/,",
                "\t'string': /\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,",
                "\t'number': [",
                "\t\t{",
                "\t\t\tpattern: /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i",
                "\t\t}",
                "\t],",
                "\t'attr-name': /\\b'\\w+/i,",
                "\t'keyword': /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'operator': /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,",
                "\t'punctuation': /\\.\\.?|[,;():]/,",
                "\t'char': /'.'/,",
                "\t'variable': /\\b[a-z](?:[_a-z\\d])*\\b/i",
                "};"
            ]
        },
        "prism-ada.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ada={comment:/--.*/,string:/\"(?:\"\"|[^\"\\r\\f\\n])*\"/i,number:[{pattern:/\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i},{pattern:/\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i}],\"attr-name\":/\\b'\\w+/i,keyword:/\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,boolean:/\\b(?:true|false)\\b/i,operator:/<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,punctuation:/\\.\\.?|[,;():]/,char:/'.'/,variable:/\\b[a-z](?:[_a-z\\d])*\\b/i};"
            ]
        },
        "prism-apacheconf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apacheconf = {",
                "\t'comment': /#.*/,",
                "\t'directive-inline': {",
                "\t\tpattern: /(^\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|Type|UserFile|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferSize|BufferedLogs|CGIDScriptTimeout|CGIMapExtension|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DTracePrivileges|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtFilterDefine|ExtFilterOptions|ExtendedStatus|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|KeepAlive|KeepAliveTimeout|KeptBodySize|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|LanguagePriority|Limit(?:InternalRecursion|Request(?:Body|FieldSize|Fields|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|MMapFile|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|ModMimeUsePathInfo|ModemStandard|MultiviewsMatch|Mutex|NWSSLTrustedCerts|NWSSLUpgradeable|NameVirtualHost|NoProxy|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|RLimitCPU|RLimitMEM|RLimitNPROC|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|SSIETag|SSIEndTag|SSIErrorMsg|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|SRPUnknownUserSeed|SRPVerifierFile|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UseStapling|UserName|VerifyClient|VerifyDepth)|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadStackSize|ThreadsPerChild|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property'",
                "\t},",
                "\t'directive-block': {",
                "\t\tpattern: /<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b *.*>/i,",
                "\t\tinside: {",
                "\t\t\t'directive-block': {",
                "\t\t\t\tpattern: /^<\\/?\\w+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/",
                "\t\t\t\t},",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\t'directive-block-parameter': {",
                "\t\t\t\tpattern: /.*[^>]/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t\t'string': {",
                "\t\t\t\t\t\tpattern: /(\"|').*\\1/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\talias: 'attr-value'",
                "\t\t\t},",
                "\t\t\t'punctuation': />/",
                "\t\t},",
                "\t\talias: 'tag'",
                "\t},",
                "\t'directive-flags': {",
                "\t\tpattern: /\\[(?:\\w,?)+\\]/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|').*\\1/,",
                "\t\tinside: {",
                "\t\t\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/",
                "\t\t}",
                "\t},",
                "\t'variable': /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,",
                "\t'regex': /\\^?.*\\$|\\^.*\\$?/",
                "};"
            ]
        },
        "prism-apacheconf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apacheconf={comment:/#.*/,\"directive-inline\":{pattern:/(^\\s*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|Type|UserFile|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferSize|BufferedLogs|CGIDScriptTimeout|CGIMapExtension|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DTracePrivileges|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtFilterDefine|ExtFilterOptions|ExtendedStatus|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|KeepAlive|KeepAliveTimeout|KeptBodySize|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|LanguagePriority|Limit(?:InternalRecursion|Request(?:Body|FieldSize|Fields|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|MMapFile|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|ModMimeUsePathInfo|ModemStandard|MultiviewsMatch|Mutex|NWSSLTrustedCerts|NWSSLUpgradeable|NameVirtualHost|NoProxy|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|RLimitCPU|RLimitMEM|RLimitNPROC|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|SSIETag|SSIEndTag|SSIErrorMsg|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|SRPUnknownUserSeed|SRPVerifierFile|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UseStapling|UserName|VerifyClient|VerifyDepth)|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadStackSize|ThreadsPerChild|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,lookbehind:!0,alias:\"property\"},\"directive-block\":{pattern:/<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b *.*>/i,inside:{\"directive-block\":{pattern:/^<\\/?\\w+/,inside:{punctuation:/^<\\/?/},alias:\"tag\"},\"directive-block-parameter\":{pattern:/.*[^>]/,inside:{punctuation:/:/,string:{pattern:/(\"|').*\\1/,inside:{variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/}}},alias:\"attr-value\"},punctuation:/>/},alias:\"tag\"},\"directive-flags\":{pattern:/\\[(?:\\w,?)+\\]/,alias:\"keyword\"},string:{pattern:/(\"|').*\\1/,inside:{variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/}},variable:/[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,regex:/\\^?.*\\$|\\^.*\\$?/};"
            ]
        },
        "prism-apl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apl = {",
                "\t'comment': /(?:⍝|#[! ]).*$/m,",
                "\t'string': {",
                "\t\tpattern: /'(?:[^'\\r\\n]|'')*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞))?/i,",
                "\t'statement': /:[A-Z][a-z][A-Za-z]*\\b/,",
                "\t'system-function': {",
                "\t\tpattern: /⎕[A-Z]+/i,",
                "\t\talias: 'function'",
                "\t},",
                "\t'constant': /[⍬⌾#⎕⍞]/,",
                "\t'function': /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,",
                "\t'monadic-operator': {",
                "\t\tpattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'dyadic-operator': {",
                "\t\tpattern: /[.⍣⍠⍤∘⌸@⌺]/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'assignment': {",
                "\t\tpattern: /←/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'punctuation': /[\\[;\\]()◇⋄]/,",
                "\t'dfn': {",
                "\t\tpattern: /[{}⍺⍵⍶⍹∇⍫:]/,",
                "\t\talias: 'builtin'",
                "\t}",
                "};"
            ]
        },
        "prism-apl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.apl={comment:/(?:⍝|#[! ]).*$/m,string:{pattern:/'(?:[^'\\r\\n]|'')*'/,greedy:!0},number:/¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:\\d*\\.?\\d+(?:e[+¯]?\\d+)?|¯|∞))?/i,statement:/:[A-Z][a-z][A-Za-z]*\\b/,\"system-function\":{pattern:/⎕[A-Z]+/i,alias:\"function\"},constant:/[⍬⌾#⎕⍞]/,function:/[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\"monadic-operator\":{pattern:/[\\\\\\/⌿⍀¨⍨⌶&∥]/,alias:\"operator\"},\"dyadic-operator\":{pattern:/[.⍣⍠⍤∘⌸@⌺]/,alias:\"operator\"},assignment:{pattern:/←/,alias:\"keyword\"},punctuation:/[\\[;\\]()◇⋄]/,dfn:{pattern:/[{}⍺⍵⍶⍹∇⍫:]/,alias:\"builtin\"}};"
            ]
        },
        "prism-applescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.applescript = {",
                "\t'comment': [",
                "\t\t// Allow one level of nesting",
                "\t\t/\\(\\*(?:\\(\\*[\\s\\S]*?\\*\\)|[\\s\\S])*?\\*\\)/,",
                "\t\t/--.+/,",
                "\t\t/#.+/",
                "\t],",
                "\t'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,",
                "\t'operator': [",
                "\t\t/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,",
                "\t\t/\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/",
                "\t],",
                "\t'keyword': /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,",
                "\t'class': {",
                "\t\tpattern: /\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'punctuation': /[{}():,¬«»《》]/",
                "};"
            ]
        },
        "prism-applescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.applescript={comment:[/\\(\\*(?:\\(\\*[\\s\\S]*?\\*\\)|[\\s\\S])*?\\*\\)/,/--.+/,/#.+/],string:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,operator:[/[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,/\\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\\b/],keyword:/\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,class:{pattern:/\\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\\b/,alias:\"builtin\"},punctuation:/[{}():,¬«»《》]/};"
            ]
        },
        "prism-arduino.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arduino = Prism.languages.extend('cpp', {",
                "\t'keyword': /\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,",
                "\t'builtin': /\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|IPAddress|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/,",
                "\t'constant': /\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/",
                "});"
            ]
        },
        "prism-arduino.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arduino=Prism.languages.extend(\"cpp\",{keyword:/\\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\\b/,builtin:/\\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|IPAddress|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\\b/,constant:/\\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\\b/});"
            ]
        },
        "prism-arff.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arff = {",
                "\t'comment': /%.*/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /@(?:attribute|data|end|relation)\\b/i,",
                "\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,",
                "\t'punctuation': /[{},]/",
                "};"
            ]
        },
        "prism-arff.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.arff={comment:/%.*/,string:{pattern:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:/@(?:attribute|data|end|relation)\\b/i,number:/\\b\\d+(?:\\.\\d+)?\\b/,punctuation:/[{},]/};"
            ]
        },
        "prism-asciidoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar attributes = {",
                "\t\tpattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'quoted': {",
                "\t\t\t\tpattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^[$`]|[$`]$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'interpreted': {",
                "\t\t\t\tpattern: /'(?:[^'\\\\]|\\\\.)*'/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^'|'$/",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\t'variable': /\\w+(?==)/,",
                "\t\t\t'punctuation': /^\\[|\\]$|,/,",
                "\t\t\t'operator': /=/,",
                "\t\t\t// The negative look-ahead prevents blank matches",
                "\t\t\t'attr-value': /(?!^\\s+$).+/",
                "\t\t}",
                "\t};",
                "",
                "\tvar asciidoc = Prism.languages.asciidoc = {",
                "\t\t'comment-block': {",
                "\t\t\tpattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'table': {",
                "\t\t\tpattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'specifiers': {",
                "\t\t\t\t\tpattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /(^|[^\\\\])[|!]=*/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'passthrough-block': {",
                "\t\t\tpattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\++|\\++$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Literal blocks and listing blocks",
                "\t\t'literal-block': {",
                "\t\t\tpattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:-+|\\.+)|(?:-+|\\.+)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Sidebar blocks, quote blocks, example blocks and open blocks",
                "\t\t'other-block': {",
                "\t\t\tpattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// list-punctuation and list-label must appear before indented-block",
                "\t\t'list-punctuation': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'list-label': {",
                "\t\t\tpattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'indented-block': {",
                "\t\t\tpattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t'comment': /^\\/\\/.*/m,",
                "\t\t'title': {",
                "\t\t\tpattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,",
                "\t\t\talias: 'important',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t'attribute-entry': {",
                "\t\t\tpattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,",
                "\t\t\talias: 'tag'",
                "\t\t},",
                "\t\t'attributes': attributes,",
                "\t\t'hr': {",
                "\t\t\tpattern: /^'{3,}$/m,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'page-break': {",
                "\t\t\tpattern: /^<{3,}$/m,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'admonition': {",
                "\t\t\tpattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'callout': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[ \\t]*)<?\\d*>/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'symbol'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /<\\d+>/,",
                "\t\t\t\talias: 'symbol'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'macro': {",
                "\t\t\tpattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^[a-z\\d-]+(?=:)/,",
                "\t\t\t\t'punctuation': /^::?/,",
                "\t\t\t\t'attributes': {",
                "\t\t\t\t\tpattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,",
                "\t\t\t\t\tinside: attributes.inside",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'inline': {",
                "\t\t\t/*",
                "\t\t\tThe initial look-behind prevents the highlighting of escaped quoted text.",
                "",
                "\t\t\tQuoted text can be multi-line but cannot span an empty line.",
                "\t\t\tAll quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].",
                "",
                "\t\t\tFirst, we handle the constrained quotes.",
                "\t\t\tThose must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.",
                "\t\t\tThey are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#",
                "",
                "\t\t\tThen we handle the unconstrained quotes.",
                "\t\t\tThose do not have the restrictions of the constrained quotes.",
                "\t\t\tThey are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))",
                "\t\t\t */",
                "\t\t\tpattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': attributes,",
                "\t\t\t\t'url': {",
                "\t\t\t\t\tpattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'attribute-ref': {",
                "\t\t\t\t\tpattern: /^\\{.+\\}$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'variable': {",
                "\t\t\t\t\t\t\tpattern: /(^\\{)[a-z\\d,+_-]+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'operator': /^[=?!#%@$]|!(?=[:}])/,",
                "\t\t\t\t\t\t'punctuation': /^\\{|\\}$|::?/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'italic': {",
                "\t\t\t\t\tpattern: /^(['_])[\\s\\S]+\\1$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^(?:''?|__?)|(?:''?|__?)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'bold': {",
                "\t\t\t\t\tpattern: /^\\*[\\s\\S]+\\*$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\tpunctuation: /^\\*\\*?|\\*\\*?$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'replacement': {",
                "\t\t\tpattern: /\\((?:C|TM|R)\\)/,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t'entity': /&#?[\\da-z]{1,8};/i,",
                "\t\t'line-continuation': {",
                "\t\t\tpattern: /(^| )\\+$/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t};",
                "",
                "",
                "\t// Allow some nesting. There is no recursion though, so cloning should not be needed.",
                "",
                "\tfunction copyFromAsciiDoc(keys) {",
                "\t\tkeys = keys.split(' ');",
                "",
                "\t\tvar o = {};",
                "\t\tfor (var i = 0, l = keys.length; i < l; i++) {",
                "\t\t\to[keys[i]] = asciidoc[keys[i]];",
                "\t\t}",
                "\t\treturn o;",
                "\t}",
                "",
                "\tattributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');",
                "",
                "\tasciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');",
                "",
                "\tasciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');",
                "",
                "\tasciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');",
                "",
                "\tasciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');",
                "",
                "\tasciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');",
                "",
                "",
                "\t// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "\tPrism.hooks.add('wrap', function (env) {",
                "\t\tif (env.type === 'entity') {",
                "\t\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.adoc = Prism.languages.asciidoc;",
                "}(Prism));"
            ]
        },
        "prism-asciidoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){var n={pattern:/(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,lookbehind:!0,inside:{quoted:{pattern:/([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,inside:{punctuation:/^[$`]|[$`]$/}},interpreted:{pattern:/'(?:[^'\\\\]|\\\\.)*'/,inside:{punctuation:/^'|'$/}},string:/\"(?:[^\"\\\\]|\\\\.)*\"/,variable:/\\w+(?==)/,punctuation:/^\\[|\\]$|,/,operator:/=/,\"attr-value\":/(?!^\\s+$).+/}},a=t.languages.asciidoc={\"comment-block\":{pattern:/^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,alias:\"comment\"},table:{pattern:/^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,inside:{specifiers:{pattern:/(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,alias:\"attr-value\"},punctuation:{pattern:/(^|[^\\\\])[|!]=*/,lookbehind:!0}}},\"passthrough-block\":{pattern:/^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^\\++|\\++$/}},\"literal-block\":{pattern:/^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^(?:-+|\\.+)|(?:-+|\\.+)$/}},\"other-block\":{pattern:/^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,inside:{punctuation:/^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/}},\"list-punctuation\":{pattern:/(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,lookbehind:!0,alias:\"punctuation\"},\"list-label\":{pattern:/(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,lookbehind:!0,alias:\"symbol\"},\"indented-block\":{pattern:/((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,lookbehind:!0},comment:/^\\/\\/.*/m,title:{pattern:/^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,alias:\"important\",inside:{punctuation:/^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/}},\"attribute-entry\":{pattern:/^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,alias:\"tag\"},attributes:n,hr:{pattern:/^'{3,}$/m,alias:\"punctuation\"},\"page-break\":{pattern:/^<{3,}$/m,alias:\"punctuation\"},admonition:{pattern:/^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,alias:\"keyword\"},callout:[{pattern:/(^[ \\t]*)<?\\d*>/m,lookbehind:!0,alias:\"symbol\"},{pattern:/<\\d+>/,alias:\"symbol\"}],macro:{pattern:/\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:{function:/^[a-z\\d-]+(?=:)/,punctuation:/^::?/,attributes:{pattern:/(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:n.inside}}},inline:{pattern:/(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,lookbehind:!0,inside:{attributes:n,url:{pattern:/^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,inside:{punctuation:/^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/}},\"attribute-ref\":{pattern:/^\\{.+\\}$/,inside:{variable:{pattern:/(^\\{)[a-z\\d,+_-]+/,lookbehind:!0},operator:/^[=?!#%@$]|!(?=[:}])/,punctuation:/^\\{|\\}$|::?/}},italic:{pattern:/^(['_])[\\s\\S]+\\1$/,inside:{punctuation:/^(?:''?|__?)|(?:''?|__?)$/}},bold:{pattern:/^\\*[\\s\\S]+\\*$/,inside:{punctuation:/^\\*\\*?|\\*\\*?$/}},punctuation:/^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/}},replacement:{pattern:/\\((?:C|TM|R)\\)/,alias:\"builtin\"},entity:/&#?[\\da-z]{1,8};/i,\"line-continuation\":{pattern:/(^| )\\+$/m,lookbehind:!0,alias:\"punctuation\"}};function i(t){for(var n={},i=0,e=(t=t.split(\" \")).length;i<e;i++)n[t[i]]=a[t[i]];return n}n.inside.interpreted.inside.rest=i(\"macro inline replacement entity\"),a[\"passthrough-block\"].inside.rest=i(\"macro\"),a[\"literal-block\"].inside.rest=i(\"callout\"),a.table.inside.rest=i(\"comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation\"),a[\"other-block\"].inside.rest=i(\"table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation\"),a.title.inside.rest=i(\"macro inline replacement entity\"),t.hooks.add(\"wrap\",function(t){\"entity\"===t.type&&(t.attributes.title=t.content.replace(/&amp;/,\"&\"))}),t.languages.adoc=t.languages.asciidoc}(Prism);"
            ]
        },
        "prism-asm6502.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.asm6502 = {",
                "\t'comment': /;.*/,",
                "\t'directive': {",
                "\t\tpattern: /\\.\\w+(?= )/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t'opcode': {",
                "    pattern: /\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,",
                "\t\talias: 'property'",
                "\t},",
                "\t'hexnumber': {",
                "\t\tpattern: /#?\\$[\\da-f]{2,4}/i,",
                "\t\talias: 'string'",
                "\t},",
                "\t'binarynumber': {",
                "\t\tpattern: /#?%[01]+/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'decimalnumber': {",
                "\t\tpattern: /#?\\d+/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'register': {",
                "\t\tpattern: /\\b[xya]\\b/i,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-asm6502.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.asm6502={comment:/;.*/,directive:{pattern:/\\.\\w+(?= )/,alias:\"keyword\"},string:/([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,opcode:{pattern:/\\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\\b/,alias:\"property\"},hexnumber:{pattern:/#?\\$[\\da-f]{2,4}/i,alias:\"string\"},binarynumber:{pattern:/#?%[01]+/,alias:\"string\"},decimalnumber:{pattern:/#?\\d+/,alias:\"string\"},register:{pattern:/\\b[xya]\\b/i,alias:\"variable\"}};"
            ]
        },
        "prism-aspnet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aspnet = Prism.languages.extend('markup', {",
                "\t'page-directive tag': {",
                "\t\tpattern: /<%\\s*@.*%>/i,",
                "\t\tinside: {",
                "\t\t\t'page-directive tag': /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,",
                "\t\t\trest: Prism.languages.markup.tag.inside",
                "\t\t}",
                "\t},",
                "\t'directive tag': {",
                "\t\tpattern: /<%.*%>/i,",
                "\t\tinside: {",
                "\t\t\t'directive tag': /<%\\s*?[$=%#:]{0,2}|%>/i,",
                "\t\t\trest: Prism.languages.csharp",
                "\t\t}",
                "\t}",
                "});",
                "// Regexp copied from prism-markup, with a negative look-ahead added",
                "Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "",
                "// match directives of attribute value foo=\"<% Bar %>\"",
                "Prism.languages.insertBefore('inside', 'punctuation', {",
                "\t'directive tag': Prism.languages.aspnet['directive tag']",
                "}, Prism.languages.aspnet.tag.inside[\"attr-value\"]);",
                "",
                "Prism.languages.insertBefore('aspnet', 'comment', {",
                "\t'asp comment': /<%--[\\s\\S]*?--%>/",
                "});",
                "",
                "// script runat=\"server\" contains csharp, not javascript",
                "Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {",
                "\t'asp script': {",
                "\t\tpattern: /(<script(?=.*runat=['\"]?server['\"]?)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,",
                "\t\tlookbehind: true,",
                "\t\tinside: Prism.languages.csharp || {}",
                "\t}",
                "});"
            ]
        },
        "prism-aspnet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.aspnet=Prism.languages.extend(\"markup\",{\"page-directive tag\":{pattern:/<%\\s*@.*%>/i,inside:{\"page-directive tag\":/<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,rest:Prism.languages.markup.tag.inside}},\"directive tag\":{pattern:/<%.*%>/i,inside:{\"directive tag\":/<%\\s*?[$=%#:]{0,2}|%>/i,rest:Prism.languages.csharp}}}),Prism.languages.aspnet.tag.pattern=/<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,Prism.languages.insertBefore(\"inside\",\"punctuation\",{\"directive tag\":Prism.languages.aspnet[\"directive tag\"]},Prism.languages.aspnet.tag.inside[\"attr-value\"]),Prism.languages.insertBefore(\"aspnet\",\"comment\",{\"asp comment\":/<%--[\\s\\S]*?--%>/}),Prism.languages.insertBefore(\"aspnet\",Prism.languages.javascript?\"script\":\"tag\",{\"asp script\":{pattern:/(<script(?=.*runat=['\"]?server['\"]?)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.csharp||{}}});"
            ]
        },
        "prism-autohotkey.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl",
                "Prism.languages.autohotkey= {",
                "\t'comment': {",
                "\t\tpattern: /(^[^\";\\n]*(\"[^\"\\n]*?\"[^\"\\n]*?)*)(?:;.*$|^\\s*\\/\\*[\\s\\S]*\\n\\*\\/)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': /\"(?:[^\"\\n\\r]|\"\")*\"/m,",
                "\t'function': /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,  //function - don't use .*\\) in the end bcoz string locks it",
                "\t'tag': /^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m,  //labels",
                "\t'variable': /%\\w+%/,",
                "\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t'operator': /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,",
                "\t'punctuation': /[{}[\\]():,]/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "",
                "\t'selector': /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,",
                "",
                "\t'constant': /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|programfiles|a_programfiles|a_programs|a_programscommon|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,",
                "",
                "\t'builtin': /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|cos|dllcall|exp|fileexist|Fileopen|floor|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,",
                "",
                "\t'symbol': /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,",
                "",
                "\t'important': /#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|WinActivateForce)\\b/i,",
                "",
                "\t'keyword': /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Type|UnCheck|underline|Unicode|Unlock|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i",
                "};"
            ]
        },
        "prism-autohotkey.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autohotkey={comment:{pattern:/(^[^\";\\n]*(\"[^\"\\n]*?\"[^\"\\n]*?)*)(?:;.*$|^\\s*\\/\\*[\\s\\S]*\\n\\*\\/)/m,lookbehind:!0},string:/\"(?:[^\"\\n\\r]|\"\")*\"/m,function:/[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+?(?=\\()/m,tag:/^[ \\t]*[^\\s:]+?(?=:(?:[^:]|$))/m,variable:/%\\w+%/,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,punctuation:/[{}[\\]():,]/,boolean:/\\b(?:true|false)\\b/,selector:/\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,constant:/\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|programfiles|a_programfiles|a_programs|a_programscommon|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\\b/i,builtin:/\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|cos|dllcall|exp|fileexist|Fileopen|floor|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\\b/i,symbol:/\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,important:/#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|WinActivateForce)\\b/i,keyword:/\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Type|UnCheck|underline|Unicode|Unlock|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i};"
            ]
        },
        "prism-autoit.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autoit = {",
                "\t\"comment\": [",
                "\t\t/;.*/,",
                "\t\t{",
                "\t\t\t// The multi-line comments delimiters can actually be commented out with \";\"",
                "\t\t\tpattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t\"url\": {",
                "\t\tpattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t\"string\": {",
                "\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t\"variable\": /([%$@])\\w+\\1/",
                "\t\t}",
                "\t},",
                "\t\"directive\": {",
                "\t\tpattern: /(^\\s*)#\\w+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t\"function\": /\\b\\w+(?=\\()/,",
                "\t// Variables and macros",
                "\t\"variable\": /[$@]\\w+/,",
                "\t\"keyword\": /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,",
                "\t\"number\": /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,",
                "\t\"boolean\": /\\b(?:True|False)\\b/i,",
                "\t\"operator\": /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,",
                "\t\"punctuation\": /[\\[\\]().,:]/",
                "};"
            ]
        },
        "prism-autoit.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.autoit={comment:[/;.*/,{pattern:/(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,lookbehind:!0}],url:{pattern:/(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,lookbehind:!0},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,greedy:!0,inside:{variable:/([%$@])\\w+\\1/}},directive:{pattern:/(^\\s*)#\\w+/m,lookbehind:!0,alias:\"keyword\"},function:/\\b\\w+(?=\\()/,variable:/[$@]\\w+/,keyword:/\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,boolean:/\\b(?:True|False)\\b/i,operator:/<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,punctuation:/[\\[\\]().,:]/};"
            ]
        },
        "prism-bash.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tvar insideString = {",
                "\t\tvariable: [",
                "\t\t\t// Arithmetic Environment",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// If there is a $ sign at the beginning highlight $(( and )) as variable",
                "\t\t\t\t\tvariable: [{",
                "\t\t\t\t\t\t\tpattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t/^\\$\\(\\(/",
                "\t\t\t\t\t],",
                "\t\t\t\t\tnumber: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t\t\t\t\t// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic",
                "\t\t\t\t\toperator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,",
                "\t\t\t\t\t// If there is no $ sign at the beginning highlight (( and )) as punctuation",
                "\t\t\t\t\tpunctuation: /\\(\\(?|\\)\\)?|,|;/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Command Substitution",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$\\([^)]+\\)|`[^`]+`/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tvariable: /^\\$\\(|^`|\\)$|`$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t/\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i",
                "\t\t]",
                "\t};",
                "",
                "\tPrism.languages.bash = {",
                "\t\t'shebang': {",
                "\t\t\tpattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,",
                "\t\t\talias: 'important'",
                "\t\t},",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\"{\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'string': [",
                "\t\t\t//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: insideString",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: insideString",
                "\t\t\t}",
                "\t\t],",
                "\t\t'variable': insideString.variable,",
                "\t\t// Originally based on http://ss64.com/bash/",
                "\t\t'function': {",
                "\t\t\tpattern: /(^|[\\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'boolean': {",
                "\t\t\tpattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,",
                "\t\t'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/",
                "\t};",
                "",
                "\tvar inside = insideString.variable[1].inside;",
                "\tinside.string = Prism.languages.bash.string;",
                "\tinside['function'] = Prism.languages.bash['function'];",
                "\tinside.keyword = Prism.languages.bash.keyword;",
                "\tinside['boolean'] = Prism.languages.bash['boolean'];",
                "\tinside.operator = Prism.languages.bash.operator;",
                "\tinside.punctuation = Prism.languages.bash.punctuation;",
                "",
                "\tPrism.languages.shell = Prism.languages.bash;",
                "})(Prism);"
            ]
        },
        "prism-bash.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var a={variable:[{pattern:/\\$?\\(\\([\\s\\S]+?\\)\\)/,inside:{variable:[{pattern:/(^\\$\\(\\([\\s\\S]+)\\)\\)/,lookbehind:!0},/^\\$\\(\\(/],number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,punctuation:/\\(\\(?|\\)\\)?|,|;/}},{pattern:/\\$\\([^)]+\\)|`[^`]+`/,greedy:!0,inside:{variable:/^\\$\\(|^`|\\)$|`$/}},/\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]};e.languages.bash={shebang:{pattern:/^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,alias:\"important\"},comment:{pattern:/(^|[^\"{\\\\])#.*/,lookbehind:!0},string:[{pattern:/((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,lookbehind:!0,greedy:!0,inside:a},{pattern:/([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,greedy:!0,inside:a}],variable:a.variable,function:{pattern:/(^|[\\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,lookbehind:!0},boolean:{pattern:/(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,lookbehind:!0},operator:/&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,punctuation:/\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/};var t=a.variable[1].inside;t.string=e.languages.bash.string,t.function=e.languages.bash.function,t.keyword=e.languages.bash.keyword,t.boolean=e.languages.bash.boolean,t.operator=e.languages.bash.operator,t.punctuation=e.languages.bash.punctuation,e.languages.shell=e.languages.bash}(Prism);"
            ]
        },
        "prism-basic.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.basic = {",
                "\t'comment': {",
                "\t\tpattern: /(?:!|REM\\b).+/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^REM/i",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t'keyword': /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,",
                "\t'function': /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,",
                "\t'operator': /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,",
                "\t'punctuation': /[,;:()]/",
                "};"
            ]
        },
        "prism-basic.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.basic={comment:{pattern:/(?:!|REM\\b).+/i,inside:{keyword:/^REM/i}},string:{pattern:/\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,greedy:!0},number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,keyword:/\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,function:/\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,operator:/<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,punctuation:/[,;:()]/};"
            ]
        },
        "prism-batch.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar variable = /%%?[~:\\w]+%?|!\\S+!/;",
                "\tvar parameter = {",
                "\t\tpattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,",
                "\t\talias: 'attr-name',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /:/",
                "\t\t}",
                "\t};",
                "\tvar string = /\"[^\"]*\"/;",
                "\tvar number = /(?:\\b|-)\\d+\\b/;",
                "",
                "\tPrism.languages.batch = {",
                "\t\t'comment': [",
                "\t\t\t/^::.*/m,",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'label': {",
                "\t\t\tpattern: /^:.*/m,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'command': [",
                "\t\t\t{",
                "\t\t\t\t// FOR command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^for\\b|\\b(?:in|do)\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'punctuation': /[()',]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// IF command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// ELSE command",
                "\t\t\t\tpattern: /((?:^|[&()])[ \\t]*)else\\b/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^else\\b/i",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// SET command",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^set\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'variable': [",
                "\t\t\t\t\t\tvariable,",
                "\t\t\t\t\t\t/\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/",
                "\t\t\t\t\t],",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,",
                "\t\t\t\t\t'punctuation': /[()',]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Other commands",
                "\t\t\t\tpattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^\\w+\\b/i,",
                "\t\t\t\t\t'string': string,",
                "\t\t\t\t\t'parameter': parameter,",
                "\t\t\t\t\t'label': {",
                "\t\t\t\t\t\tpattern: /(^\\s*):\\S+/m,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'property'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'variable': variable,",
                "\t\t\t\t\t'number': number,",
                "\t\t\t\t\t'operator': /\\^/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'operator': /[&@]/,",
                "\t\t'punctuation': /[()']/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-batch.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var r=/%%?[~:\\w]+%?|!\\S+!/,t={pattern:/\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,alias:\"attr-name\",inside:{punctuation:/:/}},n=/\"[^\"]*\"/,i=/(?:\\b|-)\\d+\\b/;Prism.languages.batch={comment:[/^::.*/m,{pattern:/((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0}],label:{pattern:/^:.*/m,alias:\"property\"},command:[{pattern:/((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,lookbehind:!0,inside:{keyword:/^for\\b|\\b(?:in|do)\\b/i,string:n,parameter:t,variable:r,number:i,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,lookbehind:!0,inside:{keyword:/^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,string:n,parameter:t,variable:r,number:i,operator:/\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i}},{pattern:/((?:^|[&()])[ \\t]*)else\\b/im,lookbehind:!0,inside:{keyword:/^else\\b/i}},{pattern:/((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,inside:{keyword:/^set\\b/i,string:n,parameter:t,variable:[r,/\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],number:i,operator:/[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,inside:{keyword:/^\\w+\\b/i,string:n,parameter:t,label:{pattern:/(^\\s*):\\S+/m,lookbehind:!0,alias:\"property\"},variable:r,number:i,operator:/\\^/}}],operator:/[&@]/,punctuation:/[()']/}}();"
            ]
        },
        "prism-bison.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bison = Prism.languages.extend('c', {});",
                "",
                "Prism.languages.insertBefore('bison', 'comment', {",
                "\t'bison': {",
                "\t\t// This should match all the beginning of the file",
                "\t\t// including the prologue(s), the bison declarations and",
                "\t\t// the grammar rules.",
                "\t\tpattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,",
                "\t\tinside: {",
                "\t\t\t'c': {",
                "\t\t\t\t// Allow for one level of nested braces",
                "\t\t\t\tpattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern: /^%?\\{|%?\\}$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'bison-variable': {",
                "\t\t\t\t\t\tpattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,",
                "\t\t\t\t\t\talias: 'variable',",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'punctuation': /<|>/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.c",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'comment': Prism.languages.c.comment,",
                "\t\t\t'string': Prism.languages.c.string,",
                "\t\t\t'property': /\\S+(?=:)/,",
                "\t\t\t'keyword': /%\\w+/,",
                "\t\t\t'number': {",
                "\t\t\t\tpattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /%[%?]|[|:;\\[\\]<>]/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-bison.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bison=Prism.languages.extend(\"c\",{}),Prism.languages.insertBefore(\"bison\",\"comment\",{bison:{pattern:/^[\\s\\S]*?%%[\\s\\S]*?%%/,inside:{c:{pattern:/%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,inside:{delimiter:{pattern:/^%?\\{|%?\\}$/,alias:\"punctuation\"},\"bison-variable\":{pattern:/[$@](?:<[^\\s>]+>)?[\\w$]+/,alias:\"variable\",inside:{punctuation:/<|>/}},rest:Prism.languages.c}},comment:Prism.languages.c.comment,string:Prism.languages.c.string,property:/\\S+(?=:)/,keyword:/%\\w+/,number:{pattern:/(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,lookbehind:!0},punctuation:/%[%?]|[|:;\\[\\]<>]/}}});"
            ]
        },
        "prism-bnf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bnf = {",
                "\t'string': {",
                "\t\tpattern: /\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/",
                "\t},",
                "\t'definition': {",
                "\t\tpattern: /<[^<>\\r\\n\\t]+>(?=\\s*::=)/,",
                "\t\talias: ['rule', 'keyword'],",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^<|>$/",
                "\t\t}",
                "\t},",
                "\t'rule': {",
                "\t\tpattern: /<[^<>\\r\\n\\t]+>/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^<|>$/",
                "\t\t}",
                "\t},",
                "\t'operator': /::=|[|()[\\]{}*+?]|\\.{3}/",
                "};",
                "",
                "Prism.languages.rbnf = Prism.languages.bnf;"
            ]
        },
        "prism-bnf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bnf={string:{pattern:/\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/},definition:{pattern:/<[^<>\\r\\n\\t]+>(?=\\s*::=)/,alias:[\"rule\",\"keyword\"],inside:{punctuation:/^<|>$/}},rule:{pattern:/<[^<>\\r\\n\\t]+>/,inside:{punctuation:/^<|>$/}},operator:/::=|[|()[\\]{}*+?]|\\.{3}/},Prism.languages.rbnf=Prism.languages.bnf;"
            ]
        },
        "prism-brainfuck.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brainfuck = {",
                "\t'pointer': {",
                "\t\tpattern: /<|>/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'increment': {",
                "\t\tpattern: /\\+/,",
                "\t\talias: 'inserted'",
                "\t},",
                "\t'decrement': {",
                "\t\tpattern: /-/,",
                "\t\talias: 'deleted'",
                "\t},",
                "\t'branching': {",
                "\t\tpattern: /\\[|\\]/,",
                "\t\talias: 'important'",
                "\t},",
                "\t'operator': /[.,]/,",
                "\t'comment': /\\S+/",
                "};"
            ]
        },
        "prism-brainfuck.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.brainfuck={pointer:{pattern:/<|>/,alias:\"keyword\"},increment:{pattern:/\\+/,alias:\"inserted\"},decrement:{pattern:/-/,alias:\"deleted\"},branching:{pattern:/\\[|\\]/,alias:\"important\"},operator:/[.,]/,comment:/\\S+/};"
            ]
        },
        "prism-bro.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bro = {",
                "",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\$])#.*/,",
                "\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'italic':  /\\b(?:TODO|FIXME|XXX)\\b/",
                "\t\t}",
                "\t},",
                "",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'boolean': /\\b[TF]\\b/,",
                "",
                "\t'function': {",
                "\t\tpattern: /(?:function|hook|event) \\w+(?:::\\w+)?/,",
                "\t\tinside: {",
                "\t\t\tkeyword: /^(?:function|hook|event)/",
                "\t\t}",
                "\t},",
                "",
                "\t'variable':\t{",
                "\t\tpattern: /(?:global|local) \\w+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /(?:global|local)/",
                "\t\t}",
                "\t},",
                "",
                "\t'builtin': /(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,",
                "",
                "\t'constant': {",
                "\t\tpattern: /const \\w+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /const/",
                "\t\t}",
                "\t},",
                "",
                "\t'keyword': /\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,",
                "",
                "\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,",
                "",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-bro.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.bro={comment:{pattern:/(^|[^\\\\$])#.*/,lookbehind:!0,inside:{italic:/\\b(?:TODO|FIXME|XXX)\\b/}},string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},boolean:/\\b[TF]\\b/,function:{pattern:/(?:function|hook|event) \\w+(?:::\\w+)?/,inside:{keyword:/^(?:function|hook|event)/}},variable:{pattern:/(?:global|local) \\w+/i,inside:{keyword:/(?:global|local)/}},builtin:/(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,constant:{pattern:/const \\w+/i,inside:{keyword:/const/}},keyword:/\\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\\b/,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-c.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.c = Prism.languages.extend('clike', {",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:enum|struct)\\s+)\\w+/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,",
                "\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,",
                "\t'number': /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i",
                "});",
                "",
                "Prism.languages.insertBefore('c', 'string', {",
                "\t'macro': {",
                "\t\t// allow for multiline macro definitions",
                "\t\t// spaces after the # character compile fine with gcc",
                "\t\tpattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t// highlight the path of the include statement as a string",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t// highlight macro directives as keywords",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t// highlight predefined macros as constants",
                "\t'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/",
                "});",
                "",
                "delete Prism.languages.c['boolean'];"
            ]
        },
        "prism-c.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.c=Prism.languages.extend(\"clike\",{\"class-name\":{pattern:/(\\b(?:enum|struct)\\s+)\\w+/,lookbehind:!0},keyword:/\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,operator:/>>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,number:/(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i}),Prism.languages.insertBefore(\"c\",\"string\",{macro:{pattern:/(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,alias:\"property\",inside:{string:{pattern:/(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,lookbehind:!0},directive:{pattern:/(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,lookbehind:!0,alias:\"keyword\"}}},constant:/\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/}),delete Prism.languages.c.boolean;"
            ]
        },
        "prism-cil.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cil = {",
                "\t'comment': /\\/\\/.*/,",
                "\t",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t",
                "\t'directive': {",
                "\t\tpattern: /(^|\\W)\\.[a-z]+(?=\\s)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'class-name'",
                "\t},",
                "\t",
                "\t// Actually an assembly reference",
                "\t'variable': /\\[[\\w\\.]+\\]/,",
                "\t",
                "\t",
                "\t'keyword': /\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|iant|idispatch|implements|import|initonly|instance|u?int(?:8|16|32|64)?|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,",
                "\t",
                "\t'function': /\\b(?:(?:constrained|unaligned|volatile|readonly|tail|no)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.[0-9]+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.[0-9]+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|ldvirtftn|castclass|beq(?:\\.s)?|mkrefany|localloc|ckfinite|rethrow|ldtoken|ldsflda|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stloc|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|clt|cgt|ceq|box|and|or|br)\\b/,",
                "\t",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'number': /\\b-?(?:0x[0-9a-fA-F]+|[0-9]+)(?:\\.[0-9a-fA-F]+)?\\b/i,",
                "\t",
                "\t'punctuation': /[{}[\\];(),:=]|IL_[0-9A-Za-z]+/",
                "}"
            ]
        },
        "prism-cil.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cil={comment:/\\/\\/.*/,string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},directive:{pattern:/(^|\\W)\\.[a-z]+(?=\\s)/,lookbehind:!0,alias:\"class-name\"},variable:/\\[[\\w\\.]+\\]/,keyword:/\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|iant|idispatch|implements|import|initonly|instance|u?int(?:8|16|32|64)?|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,function:/\\b(?:(?:constrained|unaligned|volatile|readonly|tail|no)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.[0-9]+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.[0-9]+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|ldvirtftn|castclass|beq(?:\\.s)?|mkrefany|localloc|ckfinite|rethrow|ldtoken|ldsflda|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stloc|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|clt|cgt|ceq|box|and|or|br)\\b/,boolean:/\\b(?:true|false)\\b/,number:/\\b-?(?:0x[0-9a-fA-F]+|[0-9]+)(?:\\.[0-9a-fA-F]+)?\\b/i,punctuation:/[{}[\\];(),:=]|IL_[0-9A-Za-z]+/};"
            ]
        },
        "prism-clike.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clike = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\tpunctuation: /[.\\\\]/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,",
                "\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-clike.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,boolean:/\\b(?:true|false)\\b/,function:/\\w+(?=\\()/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-clojure.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Copied from https://github.com/jeluard/prism-clojure",
                "Prism.languages.clojure = {",
                "\tcomment: /;+.*/,",
                "\tstring: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\toperator: /(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i, //used for symbols and keywords",
                "\tkeyword: {",
                "\t\tpattern: /([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\tboolean: /\\b(?:true|false|nil)\\b/,",
                "\tnumber: /\\b[0-9A-Fa-f]+\\b/,",
                "\tpunctuation: /[{}\\[\\](),]/",
                "};"
            ]
        },
        "prism-clojure.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.clojure={comment:/;+.*/,string:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,operator:/(?:::|[:|'])\\b[a-z][\\w*+!?-]*\\b/i,keyword:{pattern:/([^\\w+*'?-])(?:def|if|do|let|\\.\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\.|new|set!|def\\-|defn|defn\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\*|\\+|\\-|\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[^\\w+*'?-])/,lookbehind:!0},boolean:/\\b(?:true|false|nil)\\b/,number:/\\b[0-9A-Fa-f]+\\b/,punctuation:/[{}\\[\\](),]/};"
            ]
        },
        "prism-cmake.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cmake = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\${(?:[^{}$]|\\${[^{}$]*})*}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\${|}/,",
                "\t\t\t\t\t'variable': /\\w+/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'variable': /\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:CTEST_CUSTOM_(?:MAXIMUM_(?:(?:FAIL|PASS)ED_TEST_OUTPUT_SIZE|NUMBER_OF_(?:ERROR|WARNING)S)|ERROR_(?:P(?:OST|RE)_CONTEXT|EXCEPTION|MATCH)|P(?:OST|RE)_MEMCHECK|WARNING_(?:EXCEPTION|MATCH)|(?:MEMCHECK|TESTS)_IGNORE|P(?:OST|RE)_TEST|COVERAGE_EXCLUDE)|ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,",
                "\t'property': /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ARCHIVE_OUTPUT_NAME|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEBUG_POSTFIX|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,",
                "\t'keyword': /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,",
                "\t'boolean': /\\b(?:ON|OFF|TRUE|FALSE)\\b/,",
                "\t'namespace': /\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,",
                "\t'operator': /\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,",
                "\t'inserted': {",
                "\t\tpattern: /\\b\\w+::\\w+\\b/,",
                "\t\talias: 'class-name'",
                "\t},",
                "\t'number': /\\b\\d+(?:\\.\\d+)*\\b/,",
                "\t'function': /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,",
                "\t'punctuation': /[()>}]|\\$[<{]/",
                "};"
            ]
        },
        "prism-cmake.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cmake={comment:/#.*/,string:{pattern:/\"(?:[^\\\\\"]|\\\\.)*\"/,greedy:!0,inside:{interpolation:{pattern:/\\${(?:[^{}$]|\\${[^{}$]*})*}/,inside:{punctuation:/\\${|}/,variable:/\\w+/}}}},variable:/\\b(?:CMAKE_\\w+|\\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:CTEST_CUSTOM_(?:MAXIMUM_(?:(?:FAIL|PASS)ED_TEST_OUTPUT_SIZE|NUMBER_OF_(?:ERROR|WARNING)S)|ERROR_(?:P(?:OST|RE)_CONTEXT|EXCEPTION|MATCH)|P(?:OST|RE)_MEMCHECK|WARNING_(?:EXCEPTION|MATCH)|(?:MEMCHECK|TESTS)_IGNORE|P(?:OST|RE)_TEST|COVERAGE_EXCLUDE)|ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,property:/\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ARCHIVE_OUTPUT_NAME|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEBUG_POSTFIX|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,keyword:/\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,boolean:/\\b(?:ON|OFF|TRUE|FALSE)\\b/,namespace:/\\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\\b/,operator:/\\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\\b/,inserted:{pattern:/\\b\\w+::\\w+\\b/,alias:\"class-name\"},number:/\\b\\d+(?:\\.\\d+)*\\b/,function:/\\b[a-z_]\\w*(?=\\s*\\()\\b/i,punctuation:/[()>}]|\\$[<{]/};"
            ]
        },
        "prism-coffeescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "// Ignore comments starting with { to privilege string interpolation highlighting",
                "var comment = /#(?!\\{).+/,",
                "    interpolation = {",
                "    \tpattern: /#\\{[^}]+\\}/,",
                "    \talias: 'variable'",
                "    };",
                "",
                "Prism.languages.coffeescript = Prism.languages.extend('javascript', {",
                "\t'comment': comment,",
                "\t'string': [",
                "",
                "\t\t// Strings are multiline",
                "\t\t{",
                "\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t{",
                "\t\t\t// Strings are multiline",
                "\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,",
                "\t'class-member': {",
                "\t\tpattern: /@(?!\\d)\\w+/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'comment', {",
                "\t'multiline-comment': {",
                "\t\tpattern: /###[\\s\\S]+?###/,",
                "\t\talias: 'comment'",
                "\t},",
                "",
                "\t// Block regexp can contain comments and interpolation",
                "\t'block-regex': {",
                "\t\tpattern: /\\/{3}[\\s\\S]*?\\/{3}/,",
                "\t\talias: 'regex',",
                "\t\tinside: {",
                "\t\t\t'comment': comment,",
                "\t\t\t'interpolation': interpolation",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'string', {",
                "\t'inline-javascript': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.javascript",
                "\t\t}",
                "\t},",
                "",
                "\t// Block strings",
                "\t'multiline-string': [",
                "\t\t{",
                "\t\t\tpattern: /'''[\\s\\S]*?'''/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\tinterpolation: interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t]",
                "",
                "});",
                "",
                "Prism.languages.insertBefore('coffeescript', 'keyword', {",
                "\t// Object property",
                "\t'property': /(?!\\d)\\w+(?=\\s*:(?!:))/",
                "});",
                "",
                "delete Prism.languages.coffeescript['template-string'];",
                "",
                "Prism.languages.coffee = Prism.languages.coffeescript;",
                "}(Prism));"
            ]
        },
        "prism-coffeescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=/#(?!\\{).+/,n={pattern:/#\\{[^}]+\\}/,alias:\"variable\"};e.languages.coffeescript=e.languages.extend(\"javascript\",{comment:t,string:[{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:!0},{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0,inside:{interpolation:n}}],keyword:/\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\"class-member\":{pattern:/@(?!\\d)\\w+/,alias:\"variable\"}}),e.languages.insertBefore(\"coffeescript\",\"comment\",{\"multiline-comment\":{pattern:/###[\\s\\S]+?###/,alias:\"comment\"},\"block-regex\":{pattern:/\\/{3}[\\s\\S]*?\\/{3}/,alias:\"regex\",inside:{comment:t,interpolation:n}}}),e.languages.insertBefore(\"coffeescript\",\"string\",{\"inline-javascript\":{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:\"punctuation\"},rest:e.languages.javascript}},\"multiline-string\":[{pattern:/'''[\\s\\S]*?'''/,greedy:!0,alias:\"string\"},{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\",inside:{interpolation:n}}]}),e.languages.insertBefore(\"coffeescript\",\"keyword\",{property:/(?!\\d)\\w+(?=\\s*:(?!:))/}),delete e.languages.coffeescript[\"template-string\"],e.languages.coffee=e.languages.coffeescript}(Prism);"
            ]
        },
        "prism-core.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var _self = (typeof window !== 'undefined')",
                "\t? window   // if in browser",
                "\t: (",
                "\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)",
                "\t\t? self // if in worker",
                "\t\t: {}   // if in node js",
                "\t);",
                "",
                "/**",
                " * Prism: Lightweight, robust, elegant syntax highlighting",
                " * MIT license http://www.opensource.org/licenses/mit-license.php/",
                " * @author Lea Verou http://lea.verou.me",
                " */",
                "",
                "var Prism = (function (_self){",
                "",
                "// Private helper vars",
                "var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
                "var uniqueId = 0;",
                "",
                "var _ = {",
                "\tmanual: _self.Prism && _self.Prism.manual,",
                "\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,",
                "\tutil: {",
                "\t\tencode: function (tokens) {",
                "\t\t\tif (tokens instanceof Token) {",
                "\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);",
                "\t\t\t} else if (Array.isArray(tokens)) {",
                "\t\t\t\treturn tokens.map(_.util.encode);",
                "\t\t\t} else {",
                "\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\ttype: function (o) {",
                "\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);",
                "\t\t},",
                "",
                "\t\tobjId: function (obj) {",
                "\t\t\tif (!obj['__id']) {",
                "\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });",
                "\t\t\t}",
                "\t\t\treturn obj['__id'];",
                "\t\t},",
                "",
                "\t\t// Deep clone a language definition (e.g. to extend it)",
                "\t\tclone: function deepClone(o, visited) {",
                "\t\t\tvar clone, id, type = _.util.type(o);",
                "\t\t\tvisited = visited || {};",
                "",
                "\t\t\tswitch (type) {",
                "\t\t\t\tcase 'Object':",
                "\t\t\t\t\tid = _.util.objId(o);",
                "\t\t\t\t\tif (visited[id]) {",
                "\t\t\t\t\t\treturn visited[id];",
                "\t\t\t\t\t}",
                "\t\t\t\t\tclone = {};",
                "\t\t\t\t\tvisited[id] = clone;",
                "",
                "\t\t\t\t\tfor (var key in o) {",
                "\t\t\t\t\t\tif (o.hasOwnProperty(key)) {",
                "\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\treturn clone;",
                "",
                "\t\t\t\tcase 'Array':",
                "\t\t\t\t\tid = _.util.objId(o);",
                "\t\t\t\t\tif (visited[id]) {",
                "\t\t\t\t\t\treturn visited[id];",
                "\t\t\t\t\t}",
                "\t\t\t\t\tclone = [];",
                "\t\t\t\t\tvisited[id] = clone;",
                "",
                "\t\t\t\t\to.forEach(function (v, i) {",
                "\t\t\t\t\t\tclone[i] = deepClone(v, visited);",
                "\t\t\t\t\t});",
                "",
                "\t\t\t\t\treturn clone;",
                "",
                "\t\t\t\tdefault:",
                "\t\t\t\t\treturn o;",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "",
                "\tlanguages: {",
                "\t\textend: function (id, redef) {",
                "\t\t\tvar lang = _.util.clone(_.languages[id]);",
                "",
                "\t\t\tfor (var key in redef) {",
                "\t\t\t\tlang[key] = redef[key];",
                "\t\t\t}",
                "",
                "\t\t\treturn lang;",
                "\t\t},",
                "",
                "\t\t/**",
                "\t\t * Insert a token before another token in a language literal",
                "\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),",
                "\t\t * we cannot just provide an object, we need an object and a key.",
                "\t\t * @param inside The key (or language id) of the parent",
                "\t\t * @param before The key to insert before.",
                "\t\t * @param insert Object with the key/value pairs to insert",
                "\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.",
                "\t\t */",
                "\t\tinsertBefore: function (inside, before, insert, root) {",
                "\t\t\troot = root || _.languages;",
                "\t\t\tvar grammar = root[inside];",
                "\t\t\tvar ret = {};",
                "",
                "\t\t\tfor (var token in grammar) {",
                "\t\t\t\tif (grammar.hasOwnProperty(token)) {",
                "",
                "\t\t\t\t\tif (token == before) {",
                "\t\t\t\t\t\tfor (var newToken in insert) {",
                "\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {",
                "\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\t// Do not insert token which also occur in insert. See #1525",
                "\t\t\t\t\tif (!insert.hasOwnProperty(token)) {",
                "\t\t\t\t\t\tret[token] = grammar[token];",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t\tvar old = root[inside];",
                "\t\t\troot[inside] = ret;",
                "",
                "\t\t\t// Update references in other language definitions",
                "\t\t\t_.languages.DFS(_.languages, function(key, value) {",
                "\t\t\t\tif (value === old && key != inside) {",
                "\t\t\t\t\tthis[key] = ret;",
                "\t\t\t\t}",
                "\t\t\t});",
                "",
                "\t\t\treturn ret;",
                "\t\t},",
                "",
                "\t\t// Traverse a language definition with Depth First Search",
                "\t\tDFS: function DFS(o, callback, type, visited) {",
                "\t\t\tvisited = visited || {};",
                "",
                "\t\t\tvar objId = _.util.objId;",
                "",
                "\t\t\tfor (var i in o) {",
                "\t\t\t\tif (o.hasOwnProperty(i)) {",
                "\t\t\t\t\tcallback.call(o, i, o[i], type || i);",
                "",
                "\t\t\t\t\tvar property = o[i],",
                "\t\t\t\t\t    propertyType = _.util.type(property);",
                "",
                "\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {",
                "\t\t\t\t\t\tvisited[objId(property)] = true;",
                "\t\t\t\t\t\tDFS(property, callback, null, visited);",
                "\t\t\t\t\t}",
                "\t\t\t\t\telse if (propertyType === 'Array' && !visited[objId(property)]) {",
                "\t\t\t\t\t\tvisited[objId(property)] = true;",
                "\t\t\t\t\t\tDFS(property, callback, i, visited);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\tplugins: {},",
                "",
                "\thighlightAll: function(async, callback) {",
                "\t\t_.highlightAllUnder(document, async, callback);",
                "\t},",
                "",
                "\thighlightAllUnder: function(container, async, callback) {",
                "\t\tvar env = {",
                "\t\t\tcallback: callback,",
                "\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'",
                "\t\t};",
                "",
                "\t\t_.hooks.run(\"before-highlightall\", env);",
                "",
                "\t\tvar elements = env.elements || container.querySelectorAll(env.selector);",
                "",
                "\t\tfor (var i=0, element; element = elements[i++];) {",
                "\t\t\t_.highlightElement(element, async === true, env.callback);",
                "\t\t}",
                "\t},",
                "",
                "\thighlightElement: function(element, async, callback) {",
                "\t\t// Find language",
                "\t\tvar language = 'none', grammar, parent = element;",
                "",
                "\t\twhile (parent && !lang.test(parent.className)) {",
                "\t\t\tparent = parent.parentNode;",
                "\t\t}",
                "",
                "\t\tif (parent) {",
                "\t\t\tlanguage = (parent.className.match(lang) || [,'none'])[1].toLowerCase();",
                "\t\t\tgrammar = _.languages[language];",
                "\t\t}",
                "",
                "\t\t// Set language on the element, if not present",
                "\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
                "",
                "\t\tif (element.parentNode) {",
                "\t\t\t// Set language on the parent, for styling",
                "\t\t\tparent = element.parentNode;",
                "",
                "\t\t\tif (/pre/i.test(parent.nodeName)) {",
                "\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\tvar code = element.textContent;",
                "",
                "\t\tvar env = {",
                "\t\t\telement: element,",
                "\t\t\tlanguage: language,",
                "\t\t\tgrammar: grammar,",
                "\t\t\tcode: code",
                "\t\t};",
                "",
                "\t\tvar insertHighlightedCode = function (highlightedCode) {",
                "\t\t\tenv.highlightedCode = highlightedCode;",
                "",
                "\t\t\t_.hooks.run('before-insert', env);",
                "",
                "\t\t\tenv.element.innerHTML = env.highlightedCode;",
                "",
                "\t\t\t_.hooks.run('after-highlight', env);",
                "\t\t\t_.hooks.run('complete', env);",
                "\t\t\tcallback && callback.call(env.element);",
                "\t\t}",
                "",
                "\t\t_.hooks.run('before-sanity-check', env);",
                "",
                "\t\tif (!env.code) {",
                "\t\t\t_.hooks.run('complete', env);",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\t_.hooks.run('before-highlight', env);",
                "",
                "\t\tif (!env.grammar) {",
                "\t\t\tinsertHighlightedCode(_.util.encode(env.code));",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tif (async && _self.Worker) {",
                "\t\t\tvar worker = new Worker(_.filename);",
                "",
                "\t\t\tworker.onmessage = function(evt) {",
                "\t\t\t\tinsertHighlightedCode(evt.data);",
                "\t\t\t};",
                "",
                "\t\t\tworker.postMessage(JSON.stringify({",
                "\t\t\t\tlanguage: env.language,",
                "\t\t\t\tcode: env.code,",
                "\t\t\t\timmediateClose: true",
                "\t\t\t}));",
                "\t\t}",
                "\t\telse {",
                "\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));",
                "\t\t}",
                "\t},",
                "",
                "\thighlight: function (text, grammar, language) {",
                "\t\tvar env = {",
                "\t\t\tcode: text,",
                "\t\t\tgrammar: grammar,",
                "\t\t\tlanguage: language",
                "\t\t};",
                "\t\t_.hooks.run('before-tokenize', env);",
                "\t\tenv.tokens = _.tokenize(env.code, env.grammar);",
                "\t\t_.hooks.run('after-tokenize', env);",
                "\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);",
                "\t},",
                "",
                "\tmatchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {",
                "\t\tfor (var token in grammar) {",
                "\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {",
                "\t\t\t\tcontinue;",
                "\t\t\t}",
                "",
                "\t\t\tif (token == target) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tvar patterns = grammar[token];",
                "\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];",
                "",
                "\t\t\tfor (var j = 0; j < patterns.length; ++j) {",
                "\t\t\t\tvar pattern = patterns[j],",
                "\t\t\t\t\tinside = pattern.inside,",
                "\t\t\t\t\tlookbehind = !!pattern.lookbehind,",
                "\t\t\t\t\tgreedy = !!pattern.greedy,",
                "\t\t\t\t\tlookbehindLength = 0,",
                "\t\t\t\t\talias = pattern.alias;",
                "",
                "\t\t\t\tif (greedy && !pattern.pattern.global) {",
                "\t\t\t\t\t// Without the global flag, lastIndex won't work",
                "\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];",
                "\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");",
                "\t\t\t\t}",
                "",
                "\t\t\t\tpattern = pattern.pattern || pattern;",
                "",
                "\t\t\t\t// Don’t cache length as it changes during the loop",
                "\t\t\t\tfor (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {",
                "",
                "\t\t\t\t\tvar str = strarr[i];",
                "",
                "\t\t\t\t\tif (strarr.length > text.length) {",
                "\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!",
                "\t\t\t\t\t\treturn;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (str instanceof Token) {",
                "\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (greedy && i != strarr.length - 1) {",
                "\t\t\t\t\t\tpattern.lastIndex = pos;",
                "\t\t\t\t\t\tvar match = pattern.exec(text);",
                "\t\t\t\t\t\tif (!match) {",
                "\t\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),",
                "\t\t\t\t\t\t    to = match.index + match[0].length,",
                "\t\t\t\t\t\t    k = i,",
                "\t\t\t\t\t\t    p = pos;",
                "",
                "\t\t\t\t\t\tfor (var len = strarr.length; k < len && (p < to || (!strarr[k].type && !strarr[k - 1].greedy)); ++k) {",
                "\t\t\t\t\t\t\tp += strarr[k].length;",
                "\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from",
                "\t\t\t\t\t\t\tif (from >= p) {",
                "\t\t\t\t\t\t\t\t++i;",
                "\t\t\t\t\t\t\t\tpos = p;",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\t// If strarr[i] is a Token, then the match starts inside another Token, which is invalid",
                "\t\t\t\t\t\tif (strarr[i] instanceof Token) {",
                "\t\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\t// Number of tokens to delete and replace with the new match",
                "\t\t\t\t\t\tdelNum = k - i;",
                "\t\t\t\t\t\tstr = text.slice(pos, p);",
                "\t\t\t\t\t\tmatch.index -= pos;",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\tpattern.lastIndex = 0;",
                "",
                "\t\t\t\t\t\tvar match = pattern.exec(str),",
                "\t\t\t\t\t\t\tdelNum = 1;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (!match) {",
                "\t\t\t\t\t\tif (oneshot) {",
                "\t\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tcontinue;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif(lookbehind) {",
                "\t\t\t\t\t\tlookbehindLength = match[1] ? match[1].length : 0;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tvar from = match.index + lookbehindLength,",
                "\t\t\t\t\t    match = match[0].slice(lookbehindLength),",
                "\t\t\t\t\t    to = from + match.length,",
                "\t\t\t\t\t    before = str.slice(0, from),",
                "\t\t\t\t\t    after = str.slice(to);",
                "",
                "\t\t\t\t\tvar args = [i, delNum];",
                "",
                "\t\t\t\t\tif (before) {",
                "\t\t\t\t\t\t++i;",
                "\t\t\t\t\t\tpos += before.length;",
                "\t\t\t\t\t\targs.push(before);",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);",
                "",
                "\t\t\t\t\targs.push(wrapped);",
                "",
                "\t\t\t\t\tif (after) {",
                "\t\t\t\t\t\targs.push(after);",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tArray.prototype.splice.apply(strarr, args);",
                "",
                "\t\t\t\t\tif (delNum != 1)",
                "\t\t\t\t\t\t_.matchGrammar(text, strarr, grammar, i, pos, true, token);",
                "",
                "\t\t\t\t\tif (oneshot)",
                "\t\t\t\t\t\tbreak;",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "",
                "\ttokenize: function(text, grammar) {",
                "\t\tvar strarr = [text];",
                "",
                "\t\tvar rest = grammar.rest;",
                "",
                "\t\tif (rest) {",
                "\t\t\tfor (var token in rest) {",
                "\t\t\t\tgrammar[token] = rest[token];",
                "\t\t\t}",
                "",
                "\t\t\tdelete grammar.rest;",
                "\t\t}",
                "",
                "\t\t_.matchGrammar(text, strarr, grammar, 0, 0, false);",
                "",
                "\t\treturn strarr;",
                "\t},",
                "",
                "\thooks: {",
                "\t\tall: {},",
                "",
                "\t\tadd: function (name, callback) {",
                "\t\t\tvar hooks = _.hooks.all;",
                "",
                "\t\t\thooks[name] = hooks[name] || [];",
                "",
                "\t\t\thooks[name].push(callback);",
                "\t\t},",
                "",
                "\t\trun: function (name, env) {",
                "\t\t\tvar callbacks = _.hooks.all[name];",
                "",
                "\t\t\tif (!callbacks || !callbacks.length) {",
                "\t\t\t\treturn;",
                "\t\t\t}",
                "",
                "\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {",
                "\t\t\t\tcallback(env);",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "",
                "\tToken: Token",
                "};",
                "",
                "_self.Prism = _;",
                "",
                "function Token(type, content, alias, matchedStr, greedy) {",
                "\tthis.type = type;",
                "\tthis.content = content;",
                "\tthis.alias = alias;",
                "\t// Copy of the full string this token was created from",
                "\tthis.length = (matchedStr || \"\").length|0;",
                "\tthis.greedy = !!greedy;",
                "}",
                "",
                "Token.stringify = function(o, language) {",
                "\tif (typeof o == 'string') {",
                "\t\treturn o;",
                "\t}",
                "",
                "\tif (Array.isArray(o)) {",
                "\t\treturn o.map(function(element) {",
                "\t\t\treturn Token.stringify(element, language);",
                "\t\t}).join('');",
                "\t}",
                "",
                "\tvar env = {",
                "\t\ttype: o.type,",
                "\t\tcontent: Token.stringify(o.content, language),",
                "\t\ttag: 'span',",
                "\t\tclasses: ['token', o.type],",
                "\t\tattributes: {},",
                "\t\tlanguage: language",
                "\t};",
                "",
                "\tif (o.alias) {",
                "\t\tvar aliases = Array.isArray(o.alias) ? o.alias : [o.alias];",
                "\t\tArray.prototype.push.apply(env.classes, aliases);",
                "\t}",
                "",
                "\t_.hooks.run('wrap', env);",
                "",
                "\tvar attributes = Object.keys(env.attributes).map(function(name) {",
                "\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';",
                "\t}).join(' ');",
                "",
                "\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';",
                "};",
                "",
                "if (!_self.document) {",
                "\tif (!_self.addEventListener) {",
                "\t\t// in Node.js",
                "\t\treturn _;",
                "\t}",
                "",
                "\tif (!_.disableWorkerMessageHandler) {",
                "\t\t// In worker",
                "\t\t_self.addEventListener('message', function (evt) {",
                "\t\t\tvar message = JSON.parse(evt.data),",
                "\t\t\t\tlang = message.language,",
                "\t\t\t\tcode = message.code,",
                "\t\t\t\timmediateClose = message.immediateClose;",
                "",
                "\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));",
                "\t\t\tif (immediateClose) {",
                "\t\t\t\t_self.close();",
                "\t\t\t}",
                "\t\t}, false);",
                "\t}",
                "",
                "\treturn _;",
                "}",
                "",
                "//Get current script and highlight",
                "var script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();",
                "",
                "if (script) {",
                "\t_.filename = script.src;",
                "",
                "\tif (!_.manual && !script.hasAttribute('data-manual')) {",
                "\t\tif(document.readyState !== \"loading\") {",
                "\t\t\tif (window.requestAnimationFrame) {",
                "\t\t\t\twindow.requestAnimationFrame(_.highlightAll);",
                "\t\t\t} else {",
                "\t\t\t\twindow.setTimeout(_.highlightAll, 16);",
                "\t\t\t}",
                "\t\t}",
                "\t\telse {",
                "\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);",
                "\t\t}",
                "\t}",
                "}",
                "",
                "return _;",
                "",
                "})(_self);",
                "",
                "if (typeof module !== 'undefined' && module.exports) {",
                "\tmodule.exports = Prism;",
                "}",
                "",
                "// hack for components to work correctly in node.js",
                "if (typeof global !== 'undefined') {",
                "\tglobal.Prism = Prism;",
                "}"
            ]
        },
        "prism-core.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(g){var c=/\\blang(?:uage)?-([\\w-]+)\\b/i,a=0,C={manual:g.Prism&&g.Prism.manual,disableWorkerMessageHandler:g.Prism&&g.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof M?new M(e.type,C.util.encode(e.content),e.alias):Array.isArray(e)?e.map(C.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++a}),e.__id},clone:function n(e,t){var r,a,i=C.util.type(e);switch(t=t||{},i){case\"Object\":if(a=C.util.objId(e),t[a])return t[a];for(var l in r={},t[a]=r,e)e.hasOwnProperty(l)&&(r[l]=n(e[l],t));return r;case\"Array\":return a=C.util.objId(e),t[a]?t[a]:(r=[],t[a]=r,e.forEach(function(e,a){r[a]=n(e,t)}),r);default:return e}}},languages:{extend:function(e,a){var n=C.util.clone(C.languages[e]);for(var t in a)n[t]=a[t];return n},insertBefore:function(n,e,a,t){var r=(t=t||C.languages)[n],i={};for(var l in r)if(r.hasOwnProperty(l)){if(l==e)for(var o in a)a.hasOwnProperty(o)&&(i[o]=a[o]);a.hasOwnProperty(l)||(i[l]=r[l])}var s=t[n];return t[n]=i,C.languages.DFS(C.languages,function(e,a){a===s&&e!=n&&(this[e]=i)}),i},DFS:function e(a,n,t,r){r=r||{};var i=C.util.objId;for(var l in a)if(a.hasOwnProperty(l)){n.call(a,l,a[l],t||l);var o=a[l],s=C.util.type(o);\"Object\"!==s||r[i(o)]?\"Array\"!==s||r[i(o)]||(r[i(o)]=!0,e(o,n,l,r)):(r[i(o)]=!0,e(o,n,null,r))}}},plugins:{},highlightAll:function(e,a){C.highlightAllUnder(document,e,a)},highlightAllUnder:function(e,a,n){var t={callback:n,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};C.hooks.run(\"before-highlightall\",t);for(var r,i=t.elements||e.querySelectorAll(t.selector),l=0;r=i[l++];)C.highlightElement(r,!0===a,t.callback)},highlightElement:function(e,a,n){for(var t,r=\"none\",i=e;i&&!c.test(i.className);)i=i.parentNode;i&&(r=(i.className.match(c)||[,\"none\"])[1].toLowerCase(),t=C.languages[r]),e.className=e.className.replace(c,\"\").replace(/\\s+/g,\" \")+\" language-\"+r,e.parentNode&&(i=e.parentNode,/pre/i.test(i.nodeName)&&(i.className=i.className.replace(c,\"\").replace(/\\s+/g,\" \")+\" language-\"+r));var l={element:e,language:r,grammar:t,code:e.textContent},o=function(e){l.highlightedCode=e,C.hooks.run(\"before-insert\",l),l.element.innerHTML=l.highlightedCode,C.hooks.run(\"after-highlight\",l),C.hooks.run(\"complete\",l),n&&n.call(l.element)};if(C.hooks.run(\"before-sanity-check\",l),l.code)if(C.hooks.run(\"before-highlight\",l),l.grammar)if(a&&g.Worker){var s=new Worker(C.filename);s.onmessage=function(e){o(e.data)},s.postMessage(JSON.stringify({language:l.language,code:l.code,immediateClose:!0}))}else o(C.highlight(l.code,l.grammar,l.language));else o(C.util.encode(l.code));else C.hooks.run(\"complete\",l)},highlight:function(e,a,n){var t={code:e,grammar:a,language:n};return C.hooks.run(\"before-tokenize\",t),t.tokens=C.tokenize(t.code,t.grammar),C.hooks.run(\"after-tokenize\",t),M.stringify(C.util.encode(t.tokens),t.language)},matchGrammar:function(e,a,n,t,r,i,l){for(var o in n)if(n.hasOwnProperty(o)&&n[o]){if(o==l)return;var s=n[o];s=\"Array\"===C.util.type(s)?s:[s];for(var g=0;g<s.length;++g){var c=s[g],u=c.inside,h=!!c.lookbehind,f=!!c.greedy,d=0,m=c.alias;if(f&&!c.pattern.global){var p=c.pattern.toString().match(/[imuy]*$/)[0];c.pattern=RegExp(c.pattern.source,p+\"g\")}c=c.pattern||c;for(var y=t,v=r;y<a.length;v+=a[y].length,++y){var k=a[y];if(a.length>e.length)return;if(!(k instanceof M)){if(f&&y!=a.length-1){if(c.lastIndex=v,!(x=c.exec(e)))break;for(var b=x.index+(h?x[1].length:0),w=x.index+x[0].length,A=y,P=v,O=a.length;A<O&&(P<w||!a[A].type&&!a[A-1].greedy);++A)(P+=a[A].length)<=b&&(++y,v=P);if(a[y]instanceof M)continue;N=A-y,k=e.slice(v,P),x.index-=v}else{c.lastIndex=0;var x=c.exec(k),N=1}if(x){h&&(d=x[1]?x[1].length:0);w=(b=x.index+d)+(x=x[0].slice(d)).length;var j=k.slice(0,b),S=k.slice(w),E=[y,N];j&&(++y,v+=j.length,E.push(j));var _=new M(o,u?C.tokenize(x,u):x,m,x,f);if(E.push(_),S&&E.push(S),Array.prototype.splice.apply(a,E),1!=N&&C.matchGrammar(e,a,n,y,v,!0,o),i)break}else if(i)break}}}}},tokenize:function(e,a){var n=[e],t=a.rest;if(t){for(var r in t)a[r]=t[r];delete a.rest}return C.matchGrammar(e,n,a,0,0,!1),n},hooks:{all:{},add:function(e,a){var n=C.hooks.all;n[e]=n[e]||[],n[e].push(a)},run:function(e,a){var n=C.hooks.all[e];if(n&&n.length)for(var t,r=0;t=n[r++];)t(a)}},Token:M};function M(e,a,n,t,r){this.type=e,this.content=a,this.alias=n,this.length=0|(t||\"\").length,this.greedy=!!r}if(g.Prism=C,M.stringify=function(e,a){if(\"string\"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return M.stringify(e,a)}).join(\"\");var n={type:e.type,content:M.stringify(e.content,a),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:a};if(e.alias){var t=Array.isArray(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(n.classes,t)}C.hooks.run(\"wrap\",n);var r=Object.keys(n.attributes).map(function(e){return e+'=\"'+(n.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+n.tag+' class=\"'+n.classes.join(\" \")+'\"'+(r?\" \"+r:\"\")+\">\"+n.content+\"</\"+n.tag+\">\"},!g.document)return g.addEventListener&&(C.disableWorkerMessageHandler||g.addEventListener(\"message\",function(e){var a=JSON.parse(e.data),n=a.language,t=a.code,r=a.immediateClose;g.postMessage(C.highlight(t,C.languages[n],n)),r&&g.close()},!1)),C;var e=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return e&&(C.filename=e.src,C.manual||e.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(C.highlightAll):window.setTimeout(C.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",C.highlightAll))),C}(_self);\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);"
            ]
        },
        "prism-cpp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cpp = Prism.languages.extend('c', {",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('cpp', 'string', {",
                "\t'raw-string': {",
                "\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,",
                "\t\talias: 'string',",
                "\t\tgreedy: true",
                "\t}",
                "});"
            ]
        },
        "prism-cpp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.cpp=Prism.languages.extend(\"c\",{\"class-name\":{pattern:/(\\b(?:class|enum|struct)\\s+)\\w+/,lookbehind:!0},keyword:/\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,boolean:/\\b(?:true|false)\\b/,operator:/>>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/}),Prism.languages.insertBefore(\"cpp\",\"string\",{\"raw-string\":{pattern:/R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,alias:\"string\",greedy:!0}});"
            ]
        },
        "prism-crystal.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.crystal = Prism.languages.extend('ruby', {",
                "\t\tkeyword: [",
                "\t\t\t/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\tnumber: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('crystal', 'string', {",
                "\t\tattribute: {",
                "\t\t\tpattern: /@\\[.+?\\]/,",
                "\t\t\talias: 'attr-name',",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^@\\[|\\]$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\texpansion: [",
                "\t\t{",
                "\t\t\tpattern: /\\{\\{.+?\\}\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\{\\{|\\}\\}$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\{%.+?%\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\{%|%\\}$/,",
                "\t\t\t\t\talias: 'tag'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.crystal",
                "\t\t\t}",
                "\t\t}",
                "\t\t]",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-crystal.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.crystal=e.languages.extend(\"ruby\",{keyword:[/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,{pattern:/(\\.\\s*)(?:is_a|responds_to)\\?/,lookbehind:!0}],number:/\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/}),e.languages.insertBefore(\"crystal\",\"string\",{attribute:{pattern:/@\\[.+?\\]/,alias:\"attr-name\",inside:{delimiter:{pattern:/^@\\[|\\]$/,alias:\"tag\"},rest:e.languages.crystal}},expansion:[{pattern:/\\{\\{.+?\\}\\}/,inside:{delimiter:{pattern:/^\\{\\{|\\}\\}$/,alias:\"tag\"},rest:e.languages.crystal}},{pattern:/\\{%.+?%\\}/,inside:{delimiter:{pattern:/^\\{%|%\\}$/,alias:\"tag\"},rest:e.languages.crystal}}]})}(Prism);"
            ]
        },
        "prism-csharp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.csharp = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'class-name': [",
                "\t\t{",
                "\t\t\t// (Foo bar, Bar baz)",
                "\t\t\tpattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// [Foo]",
                "\t\t\tpattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo : Bar",
                "\t\t\tpattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo",
                "\t\t\tpattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,",
                "\t'operator': />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,",
                "\t'punctuation': /\\?\\.?|::|[{}[\\];(),.:]/",
                "});",
                "",
                "Prism.languages.insertBefore('csharp', 'class-name', {",
                "\t'generic-method': {",
                "\t\tpattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,",
                "\t\tinside: {",
                "\t\t\tfunction: /^\\w+/,",
                "\t\t\t'class-name': {",
                "\t\t\t\tpattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tpunctuation: /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\tkeyword: Prism.languages.csharp.keyword,",
                "\t\t\tpunctuation: /[<>(),.:]/",
                "\t\t}",
                "\t},",
                "\t'preprocessor': {",
                "\t\tpattern: /(^\\s*)#.*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t// highlight preprocessor directives as keywords",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.dotnet = Prism.languages.csharp;"
            ]
        },
        "prism-csharp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.csharp=Prism.languages.extend(\"clike\",{keyword:/\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,string:[{pattern:/@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,greedy:!0}],\"class-name\":[{pattern:/\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,inside:{punctuation:/\\./}},{pattern:/(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}}],number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,operator:/>>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,punctuation:/\\?\\.?|::|[{}[\\];(),.:]/}),Prism.languages.insertBefore(\"csharp\",\"class-name\",{\"generic-method\":{pattern:/\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,inside:{function:/^\\w+/,\"class-name\":{pattern:/\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,inside:{punctuation:/\\./}},keyword:Prism.languages.csharp.keyword,punctuation:/[<>(),.:]/}},preprocessor:{pattern:/(^\\s*)#.*/m,lookbehind:!0,alias:\"property\",inside:{directive:{pattern:/(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,lookbehind:!0,alias:\"keyword\"}}}}),Prism.languages.dotnet=Prism.languages.csharp;"
            ]
        },
        "prism-csp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/csp-cheat-sheet/",
                " *",
                " * Supports the following:",
                " *  - CSP Level 1",
                " *  - CSP Level 2",
                " *  - CSP Level 3",
                " */",
                "",
                "Prism.languages.csp = {",
                "\t'directive':  {",
                "\t\tpattern: /\\b(?:(?:base-uri|form-action|frame-ancestors|plugin-types|referrer|reflected-xss|report-to|report-uri|require-sri-for|sandbox) |(?:block-all-mixed-content|disown-opener|upgrade-insecure-requests)(?: |;)|(?:child|connect|default|font|frame|img|manifest|media|object|script|style|worker)-src )/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /'(?:self|none|strict-dynamic|(?:nonce-|sha(?:256|384|512)-)[a-zA-Z\\d+=/]+)'/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /(?:'unsafe-inline'|'unsafe-eval'|'unsafe-hashed-attributes'|\\*)/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-csp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.csp={directive:{pattern:/\\b(?:(?:base-uri|form-action|frame-ancestors|plugin-types|referrer|reflected-xss|report-to|report-uri|require-sri-for|sandbox) |(?:block-all-mixed-content|disown-opener|upgrade-insecure-requests)(?: |;)|(?:child|connect|default|font|frame|img|manifest|media|object|script|style|worker)-src )/i,alias:\"keyword\"},safe:{pattern:/'(?:self|none|strict-dynamic|(?:nonce-|sha(?:256|384|512)-)[a-zA-Z\\d+=/]+)'/,alias:\"selector\"},unsafe:{pattern:/(?:'unsafe-inline'|'unsafe-eval'|'unsafe-hashed-attributes'|\\*)/,alias:\"function\"}};"
            ]
        },
        "prism-css-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.css.selector = {",
                "\tpattern: Prism.languages.css.selector,",
                "\tinside: {",
                "\t\t'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,",
                "\t\t'pseudo-class': /:[-\\w]+/,",
                "\t\t'class': /\\.[-:.\\w]+/,",
                "\t\t'id': /#[-:.\\w]+/,",
                "\t\t'attribute': {",
                "\t\t\tpattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\[|\\]$/,",
                "\t\t\t\t'case-sensitivity': {",
                "\t\t\t\t\tpattern: /(\\s)[si]$/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\t'namespace': {",
                "\t\t\t\t\tpattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\|$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'attribute': {",
                "\t\t\t\t\tpattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'value': [",
                "\t\t\t\t\t/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'operator': /[|~*^$]?=/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'n-th': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'number': /[\\dn]+/,",
                "\t\t\t\t\t'operator': /[+-]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'punctuation': /[()]/",
                "\t}",
                "};",
                "",
                "Prism.languages.insertBefore('css', 'property', {",
                "\t'variable': {",
                "\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('css', 'function', {",
                "\t'operator': {",
                "\t\tpattern: /(\\s)[+\\-*\\/](?=\\s)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'hexcode': /#[\\da-f]{3,8}/i,",
                "\t'entity': /\\\\[\\da-f]{1,8}/i,",
                "\t'unit': {",
                "\t\tpattern: /(\\d)(?:%|[a-z]+)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'number': /-?[\\d.]+/",
                "});"
            ]
        },
        "prism-css-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.css.selector={pattern:Prism.languages.css.selector,inside:{\"pseudo-element\":/:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\"pseudo-class\":/:[-\\w]+/,class:/\\.[-:.\\w]+/,id:/#[-:.\\w]+/,attribute:{pattern:/\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,greedy:!0,inside:{punctuation:/^\\[|\\]$/,\"case-sensitivity\":{pattern:/(\\s)[si]$/i,lookbehind:!0,alias:\"keyword\"},namespace:{pattern:/^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,lookbehind:!0,inside:{punctuation:/\\|$/}},attribute:{pattern:/^(\\s*)[-\\w\\xA0-\\uFFFF]+/,lookbehind:!0},value:[/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,{pattern:/(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,lookbehind:!0}],operator:/[|~*^$]?=/}},\"n-th\":[{pattern:/(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,lookbehind:!0,inside:{number:/[\\dn]+/,operator:/[+-]/}},{pattern:/(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,lookbehind:!0}],punctuation:/[()]/}},Prism.languages.insertBefore(\"css\",\"property\",{variable:{pattern:/(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,lookbehind:!0}}),Prism.languages.insertBefore(\"css\",\"function\",{operator:{pattern:/(\\s)[+\\-*\\/](?=\\s)/,lookbehind:!0},hexcode:/#[\\da-f]{3,8}/i,entity:/\\\\[\\da-f]{1,8}/i,unit:{pattern:/(\\d)(?:%|[a-z]+)/,lookbehind:!0},number:/-?[\\d.]+/});"
            ]
        },
        "prism-css.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
                "",
                "\tPrism.languages.css = {",
                "\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t'atrule': {",
                "\t\t\tpattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,",
                "\t\t\tinside: {",
                "\t\t\t\t'rule': /@[\\w-]+/",
                "\t\t\t\t// See rest below",
                "\t\t\t}",
                "\t\t},",
                "\t\t'url': {",
                "\t\t\tpattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /^url/i,",
                "\t\t\t\t'punctuation': /^\\(|\\)$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),",
                "\t\t'string': {",
                "\t\t\tpattern: string,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,",
                "\t\t'important': /!important\\b/i,",
                "\t\t'function': /[-a-z0-9]+(?=\\()/i,",
                "\t\t'punctuation': /[(){};:,]/",
                "\t};",
                "",
                "\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;",
                "",
                "\tvar markup = Prism.languages.markup;",
                "\tif (markup) {",
                "\t\tmarkup.tag.addInlined('style', 'css');",
                "",
                "\t\tPrism.languages.insertBefore('inside', 'attr-value', {",
                "\t\t\t'style-attr': {",
                "\t\t\t\tpattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'attr-name': {",
                "\t\t\t\t\t\tpattern: /^\\s*style/i,",
                "\t\t\t\t\t\tinside: markup.tag.inside",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,",
                "\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\tpattern: /.+/i,",
                "\t\t\t\t\t\tinside: Prism.languages.css",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\talias: 'language-css'",
                "\t\t\t}",
                "\t\t}, markup.tag);",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-css.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(s){var t=/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;s.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,inside:{rule:/@[\\w-]+/}},url:{pattern:RegExp(\"url\\\\((?:\"+t.source+\"|[^\\n\\r()]*)\\\\)\",\"i\"),inside:{function:/^url/i,punctuation:/^\\(|\\)$/}},selector:RegExp(\"[^{}\\\\s](?:[^{};\\\"']|\"+t.source+\")*?(?=\\\\s*\\\\{)\"),string:{pattern:t,greedy:!0},property:/[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,important:/!important\\b/i,function:/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:,]/},s.languages.css.atrule.inside.rest=s.languages.css;var e=s.languages.markup;e&&(e.tag.addInlined(\"style\",\"css\"),s.languages.insertBefore(\"inside\",\"attr-value\",{\"style-attr\":{pattern:/\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,inside:{\"attr-name\":{pattern:/^\\s*style/i,inside:e.tag.inside},punctuation:/^\\s*=\\s*['\"]|['\"]\\s*$/,\"attr-value\":{pattern:/.+/i,inside:s.languages.css}},alias:\"language-css\"}},e.tag))}(Prism);"
            ]
        },
        "prism-d.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.d = Prism.languages.extend('clike', {",
                "\t'string': [",
                "\t\t// r\"\", x\"\"",
                "\t\t/\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/,",
                "\t\t// q\"[]\", q\"()\", q\"<>\", q\"{}\"",
                "\t\t/\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/,",
                "\t\t// q\"IDENT",
                "\t\t// ...",
                "\t\t// IDENT\"",
                "\t\t/\\bq\"([_a-zA-Z][_a-zA-Z\\d]*)(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\1\"/,",
                "\t\t// q\"//\", q\"||\", etc.",
                "\t\t/\\bq\"(.)[\\s\\S]*?\\1\"/,",
                "\t\t// Characters",
                "\t\t/'(?:\\\\'|\\\\?[^']+)'/,",
                "",
                "\t\t/([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?/",
                "\t],",
                "",
                "\t'number': [",
                "\t\t// The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator",
                "\t\t// Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"",
                "\t\t/\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]*/i,",
                "\t\t{",
                "\t\t\tpattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]*/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "",
                "\t// In order: $, keywords and special tokens, globally defined symbols",
                "\t'keyword': /\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,",
                "\t'operator': /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/",
                "});",
                "",
                "",
                "Prism.languages.d.comment = [",
                "\t// Shebang",
                "\t/^\\s*#!.+/,",
                "\t// /+ +/",
                "\t{",
                "\t\t// Allow one level of nesting",
                "\t\tpattern: /(^|[^\\\\])\\/\\+(?:\\/\\+[\\s\\S]*?\\+\\/|[\\s\\S])*?\\+\\//,",
                "\t\tlookbehind: true",
                "\t}",
                "].concat(Prism.languages.d.comment);",
                "",
                "Prism.languages.insertBefore('d', 'comment', {",
                "\t'token-string': {",
                "\t\t// Allow one level of nesting",
                "\t\tpattern: /\\bq\\{(?:\\{[^}]*\\}|[^}])*\\}/,",
                "\t\talias: 'string'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('d', 'keyword', {",
                "\t'property': /\\B@\\w*/",
                "});",
                "",
                "Prism.languages.insertBefore('d', 'function', {",
                "\t'register': {",
                "\t\t// Iasm registers",
                "\t\tpattern: /\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,",
                "\t\talias: 'variable'",
                "\t}",
                "});"
            ]
        },
        "prism-d.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.d=Prism.languages.extend(\"clike\",{string:[/\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/,/\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/,/\\bq\"([_a-zA-Z][_a-zA-Z\\d]*)(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\1\"/,/\\bq\"(.)[\\s\\S]*?\\1\"/,/'(?:\\\\'|\\\\?[^']+)'/,/([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?/],number:[/\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]*/i,{pattern:/((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]*/i,lookbehind:!0}],keyword:/\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,operator:/\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/}),Prism.languages.d.comment=[/^\\s*#!.+/,{pattern:/(^|[^\\\\])\\/\\+(?:\\/\\+[\\s\\S]*?\\+\\/|[\\s\\S])*?\\+\\//,lookbehind:!0}].concat(Prism.languages.d.comment),Prism.languages.insertBefore(\"d\",\"comment\",{\"token-string\":{pattern:/\\bq\\{(?:\\{[^}]*\\}|[^}])*\\}/,alias:\"string\"}}),Prism.languages.insertBefore(\"d\",\"keyword\",{property:/\\B@\\w*/}),Prism.languages.insertBefore(\"d\",\"function\",{register:{pattern:/\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,alias:\"variable\"}});"
            ]
        },
        "prism-dart.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dart = Prism.languages.extend('clike', {",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'keyword': [",
                "\t\t/\\b(?:async|sync|yield)\\*/,",
                "\t\t/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\b/",
                "\t],",
                "\t'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/",
                "});",
                "",
                "Prism.languages.insertBefore('dart','function',{",
                "\t'metadata': {",
                "\t\tpattern: /@\\w+/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});"
            ]
        },
        "prism-dart.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.dart=Prism.languages.extend(\"clike\",{string:[{pattern:/r?(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0},{pattern:/r?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],keyword:[/\\b(?:async|sync|yield)\\*/,/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\b/],operator:/\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/}),Prism.languages.insertBefore(\"dart\",\"function\",{metadata:{pattern:/@\\w+/,alias:\"symbol\"}});"
            ]
        },
        "prism-diff.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.diff = {",
                "\t'coord': [",
                "\t\t// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").",
                "\t\t/^(?:\\*{3}|-{3}|\\+{3}).*$/m,",
                "\t\t// Match \"@@ ... @@\" coord lines in unified diff.",
                "\t\t/^@@.*@@$/m,",
                "\t\t// Match coord lines in normal diff (starts with a number).",
                "\t\t/^\\d+.*$/m",
                "\t],",
                "",
                "\t// Match inserted and deleted lines. Support both +/- and >/< styles.",
                "\t'deleted': /^[-<].*$/m,",
                "\t'inserted': /^[+>].*$/m,",
                "",
                "\t// Match \"different\" lines (prefixed with \"!\") in context diff.",
                "\t'diff': {",
                "\t\t'pattern': /^!(?!!).+$/m,",
                "\t\t'alias': 'important'",
                "\t}",
                "};"
            ]
        },
        "prism-diff.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.diff={coord:[/^(?:\\*{3}|-{3}|\\+{3}).*$/m,/^@@.*@@$/m,/^\\d+.*$/m],deleted:/^[-<].*$/m,inserted:/^[+>].*$/m,diff:{pattern:/^!(?!!).+$/m,alias:\"important\"}};"
            ]
        },
        "prism-django.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.",
                "// Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.",
                "",
                "(function (Prism) {",
                "",
                "\tPrism.languages.django = {",
                "\t\t'comment': /^{#[\\s\\S]*?#}$/,",
                "\t\t'tag': {",
                "\t\t\tpattern: /(^{%[+-]?\\s*)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^{[{%][+-]?|[+-]?[}%]}$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'filter': {",
                "\t\t\tpattern: /(\\|)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'test': {",
                "\t\t\tpattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'function': /\\b[a-z_]\\w+(?=\\s*\\()/i,",
                "\t\t'keyword': /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,",
                "\t\t'operator': /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,",
                "\t\t'boolean': /[Tt]rue|[Ff]alse|[Nn]one/,",
                "\t\t'variable': /\\b\\w+?\\b/,",
                "\t\t'punctuation': /[{}[\\](),.:;]/",
                "\t};",
                "",
                "",
                "\tvar pattern = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g;",
                "\tvar markupTemplating = Prism.languages['markup-templating'];",
                "",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tmarkupTemplating.buildPlaceholders(env, 'django', pattern);",
                "\t});",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tmarkupTemplating.tokenizePlaceholders(env, 'django');",
                "\t});",
                "",
                "\t// Add an Jinja2 alias",
                "\tPrism.languages.jinja2 = Prism.languages.django;",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tmarkupTemplating.buildPlaceholders(env, 'jinja2', pattern);",
                "\t});",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tmarkupTemplating.tokenizePlaceholders(env, 'jinja2');",
                "\t});",
                "",
                "})(Prism);"
            ]
        },
        "prism-django.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.django={comment:/^{#[\\s\\S]*?#}$/,tag:{pattern:/(^{%[+-]?\\s*)\\w+/,lookbehind:!0,alias:\"keyword\"},delimiter:{pattern:/^{[{%][+-]?|[+-]?[}%]}$/,alias:\"punctuation\"},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},filter:{pattern:/(\\|)\\w+/,lookbehind:!0,alias:\"function\"},test:{pattern:/(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,lookbehind:!0,alias:\"function\"},function:/\\b[a-z_]\\w+(?=\\s*\\()/i,keyword:/\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,operator:/[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,number:/\\b\\d+(?:\\.\\d+)?\\b/,boolean:/[Tt]rue|[Ff]alse|[Nn]one/,variable:/\\b\\w+?\\b/,punctuation:/[{}[\\](),.:;]/};var n=/{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g,o=e.languages[\"markup-templating\"];e.hooks.add(\"before-tokenize\",function(e){o.buildPlaceholders(e,\"django\",n)}),e.hooks.add(\"after-tokenize\",function(e){o.tokenizePlaceholders(e,\"django\")}),e.languages.jinja2=e.languages.django,e.hooks.add(\"before-tokenize\",function(e){o.buildPlaceholders(e,\"jinja2\",n)}),e.hooks.add(\"after-tokenize\",function(e){o.tokenizePlaceholders(e,\"jinja2\")})}(Prism);"
            ]
        },
        "prism-docker.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.docker = {",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/mi,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t'comment': /#.*/,",
                "\t'punctuation': /---|\\.\\.\\.|[:[\\]{}\\-,|>?]/",
                "};",
                "",
                "Prism.languages.dockerfile = Prism.languages.docker;"
            ]
        },
        "prism-docker.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.docker={keyword:{pattern:/(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/im,lookbehind:!0},string:/(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,comment:/#.*/,punctuation:/---|\\.\\.\\.|[:[\\]{}\\-,|>?]/},Prism.languages.dockerfile=Prism.languages.docker;"
            ]
        },
        "prism-ebnf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ebnf = {",
                "\t'comment': /\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t'string': {",
                "\t\tpattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'special': {",
                "\t\tpattern: /\\?[^?\\r\\n]*\\?/,",
                "\t\tgreedy: true,",
                "\t\talias: 'class-name'",
                "\t},",
                "",
                "\t'definition': {",
                "\t\tpattern: /^(\\s*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,",
                "\t\tlookbehind: true,",
                "\t\talias: ['rule', 'keyword']",
                "\t},",
                "\t'rule': /[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*/i,",
                "",
                "\t'punctuation': /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,",
                "\t'operator': /[-=|*/!]/",
                "};"
            ]
        },
        "prism-ebnf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ebnf={comment:/\\(\\*[\\s\\S]*?\\*\\)/,string:{pattern:/\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,greedy:!0},special:{pattern:/\\?[^?\\r\\n]*\\?/,greedy:!0,alias:\"class-name\"},definition:{pattern:/^(\\s*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,lookbehind:!0,alias:[\"rule\",\"keyword\"]},rule:/[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*/i,punctuation:/\\([:/]|[:/]\\)|[.,;()[\\]{}]/,operator:/[-=|*/!]/};"
            ]
        },
        "prism-eiffel.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.eiffel = {",
                "\t'comment': /--.*/,",
                "\t'string': [",
                "\t\t// Aligned-verbatim-strings",
                "\t\t{",
                "\t\t\tpattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// Non-aligned-verbatim-strings",
                "\t\t{",
                "\t\t\tpattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// Single-line string",
                "\t\t{",
                "\t\t\tpattern: /\"(?:%\\s+%|%.|[^%\"\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t// normal char | special char | char code",
                "\t'char': /'(?:%.|[^%'\\r\\n])+'/,",
                "\t'keyword': /\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,",
                "\t'boolean': /\\b(?:True|False)\\b/i,",
                "\t// Convention: class-names are always all upper-case characters",
                "\t'class-name': {",
                "\t\t'pattern': /\\b[A-Z][\\dA-Z_]*\\b/,",
                "\t\t'alias': 'builtin'",
                "\t},",
                "\t'number': [",
                "\t\t// hexa | octal | bin",
                "\t\t/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,",
                "\t\t// Decimal",
                "\t\t/(?:\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*|\\d(?:_*\\d)*\\.?/i",
                "\t],",
                "\t'punctuation': /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,",
                "\t'operator': /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/",
                "};"
            ]
        },
        "prism-eiffel.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.eiffel={comment:/--.*/,string:[{pattern:/\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,greedy:!0},{pattern:/\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,greedy:!0},{pattern:/\"(?:%\\s+%|%.|[^%\"\\r\\n])*\"/,greedy:!0}],char:/'(?:%.|[^%'\\r\\n])+'/,keyword:/\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,boolean:/\\b(?:True|False)\\b/i,\"class-name\":{pattern:/\\b[A-Z][\\dA-Z_]*\\b/,alias:\"builtin\"},number:[/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,/(?:\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*|\\d(?:_*\\d)*\\.?/i],punctuation:/:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,operator:/\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/};"
            ]
        },
        "prism-ejs.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.ejs = {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^<%[-_=]?|[-_]?%>$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'comment': /^#[\\s\\S]*/,",
                "\t\t'language-javascript': {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-ejs.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){a.languages.ejs={delimiter:{pattern:/^<%[-_=]?|[-_]?%>$/,alias:\"punctuation\"},comment:/^#[\\s\\S]*/,\"language-javascript\":{pattern:/[\\s\\S]+/,inside:a.languages.javascript}},a.hooks.add(\"before-tokenize\",function(e){a.languages[\"markup-templating\"].buildPlaceholders(e,\"ejs\",/<%(?!%)[\\s\\S]+?%>/g)}),a.hooks.add(\"after-tokenize\",function(e){a.languages[\"markup-templating\"].tokenizePlaceholders(e,\"ejs\")})}(Prism);"
            ]
        },
        "prism-elixir.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elixir = {",
                "\t'comment': {",
                "\t\tpattern: /#.*/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t// ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>",
                "\t'regex': {",
                "\t\tpattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': [",
                "\t\t{",
                "\t\t\t// ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>",
                "\t\t\tpattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Multi-line strings are allowed",
                "\t\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// See interpolation below",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'atom': {",
                "\t\t// Look-behind prevents bad highlighting of the :: operator",
                "\t\tpattern: /(^|[^:]):\\w+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t// Look-ahead prevents bad highlighting of the :: operator",
                "\t'attr-name': /\\w+:(?!:)/,",
                "\t'capture': {",
                "\t\t// Look-behind prevents bad highlighting of the && operator",
                "\t\tpattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'argument': {",
                "\t\t// Look-behind prevents bad highlighting of the && operator",
                "\t\tpattern: /(^|[^&])&\\d+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'attribute': {",
                "\t\tpattern: /@\\w+/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,",
                "\t'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,",
                "\t'boolean': /\\b(?:true|false|nil)\\b/,",
                "\t'operator': [",
                "\t\t/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /([^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /([^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /<<|>>|[.,%\\[\\]{}()]/",
                "};",
                "",
                "Prism.languages.elixir.string.forEach(function(o) {",
                "\to.inside = {",
                "\t\t'interpolation': {",
                "\t\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.elixir",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "});",
                ""
            ]
        },
        "prism-elixir.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elixir={comment:{pattern:/#.*/m,lookbehind:!0},regex:{pattern:/~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0,inside:{}},{pattern:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\\w+/,lookbehind:!0,alias:\"symbol\"},\"attr-name\":/\\w+:(?!:)/,capture:{pattern:/(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,lookbehind:!0,alias:\"function\"},argument:{pattern:/(^|[^&])&\\d+/,lookbehind:!0,alias:\"variable\"},attribute:{pattern:/@\\w+/,alias:\"variable\"},number:/\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,keyword:/\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,boolean:/\\b(?:true|false|nil)\\b/,operator:[/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\\[\\]{}()]/},Prism.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:Prism.languages.elixir}}}});"
            ]
        },
        "prism-elm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elm = {",
                "\tcomment: /--.*|{-[\\s\\S]*?-}/,",
                "\tchar: {",
                "\t\tpattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,",
                "\t\tgreedy: true",
                "\t},",
                "\tstring: [",
                "\t\t{",
                "\t\t\t// Multiline strings are wrapped in triple \". Quotes may appear unescaped.",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\timport_statement: {",
                "\t\t// The imported or hidden names are not included in this import",
                "\t\t// statement. This is because we want to highlight those exactly like",
                "\t\t// we do for the names in the program.",
                "\t\tpattern: /^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,",
                "\t\tinside: {",
                "\t\t\tkeyword: /\\b(?:import|as|exposing)\\b/",
                "\t\t}",
                "\t},",
                "\tkeyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,",
                "\t// These are builtin variables only. Constructors are highlighted later as a constant.",
                "\tbuiltin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,",
                "\t// decimal integers and floating point numbers | hexadecimal integers",
                "\tnumber: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,",
                "\t// Most of this is needed because of the meaning of a single '.'.",
                "\t// If it stands alone freely, it is the function composition.",
                "\t// It may also be a separator between a module name and an identifier => no",
                "\t// operator. If it comes together with other special characters it is an",
                "\t// operator too.",
                "\t// Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!",
                "\t// Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ",
                "\toperator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,",
                "\t// In Elm, nearly everything is a variable, do not highlight these.",
                "\thvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,",
                "\tconstant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,",
                "\tpunctuation: /[{}[\\]|(),.:]/",
                "};"
            ]
        },
        "prism-elm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.elm={comment:/--.*|{-[\\s\\S]*?-}/,char:{pattern:/'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,greedy:!0},string:[{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0},{pattern:/\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,greedy:!0}],import_statement:{pattern:/^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,inside:{keyword:/\\b(?:import|as|exposing)\\b/}},keyword:/\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,builtin:/\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,hvariable:/\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,constant:/\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,punctuation:/[{}[\\]|(),.:]/};"
            ]
        },
        "prism-erb.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.erb = Prism.languages.extend('ruby', {});",
                "\tPrism.languages.insertBefore('erb', 'comment', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^<%=?|%>$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-erb.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.erb=n.languages.extend(\"ruby\",{}),n.languages.insertBefore(\"erb\",\"comment\",{delimiter:{pattern:/^<%=?|%>$/,alias:\"punctuation\"}}),n.hooks.add(\"before-tokenize\",function(e){n.languages[\"markup-templating\"].buildPlaceholders(e,\"erb\",/<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm)}),n.hooks.add(\"after-tokenize\",function(e){n.languages[\"markup-templating\"].tokenizePlaceholders(e,\"erb\")})}(Prism);"
            ]
        },
        "prism-erlang.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.erlang = {",
                "\t'comment': /%.+/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'quoted-function': {",
                "\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'quoted-atom': {",
                "\t\tpattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,",
                "\t\talias: 'atom'",
                "\t},",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,",
                "\t'number': [",
                "\t\t/\\$\\\\?./,",
                "\t\t/\\d+#[a-z0-9]+/i,",
                "\t\t/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i",
                "\t],",
                "\t'function': /\\b[a-z][\\w@]*(?=\\()/,",
                "\t'variable': {",
                "\t\t// Look-behind is used to prevent wrong highlighting of atoms containing \"@\"",
                "\t\tpattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': [",
                "\t\t/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /(^|[^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /(^|[^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'atom': /\\b[a-z][\\w@]*/,",
                "\t'punctuation': /[()[\\]{}:;,.#|]|<<|>>/",
                "",
                "};"
            ]
        },
        "prism-erlang.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.erlang={comment:/%.+/,string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},\"quoted-function\":{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,alias:\"function\"},\"quoted-atom\":{pattern:/'(?:\\\\.|[^\\\\'\\r\\n])+'/,alias:\"atom\"},boolean:/\\b(?:true|false)\\b/,keyword:/\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,number:[/\\$\\\\?./,/\\d+#[a-z0-9]+/i,/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],function:/\\b[a-z][\\w@]*(?=\\()/,variable:{pattern:/(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,lookbehind:!0},operator:[/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],atom:/\\b[a-z][\\w@]*/,punctuation:/[()[\\]{}:;,.#|]|<<|>>/};"
            ]
        },
        "prism-flow.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.flow = Prism.languages.extend('javascript', {});",
                "",
                "\tPrism.languages.insertBefore('flow', 'keyword', {",
                "\t\t'type': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t}",
                "\t\t]",
                "\t});",
                "\tPrism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;",
                "\tdelete Prism.languages.flow['parameter'];",
                "",
                "\tPrism.languages.insertBefore('flow', 'operator', {",
                "\t\t'flow-punctuation': {",
                "\t\t\tpattern: /\\{\\||\\|\\}/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tif (!Array.isArray(Prism.languages.flow.keyword)) {",
                "\t\tPrism.languages.flow.keyword = [Prism.languages.flow.keyword];",
                "\t}",
                "\tPrism.languages.flow.keyword.unshift(",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t);",
                "}(Prism));"
            ]
        },
        "prism-flow.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){a.languages.flow=a.languages.extend(\"javascript\",{}),a.languages.insertBefore(\"flow\",\"keyword\",{type:[{pattern:/\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,alias:\"tag\"}]}),a.languages.flow[\"function-variable\"].pattern=/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,delete a.languages.flow.parameter,a.languages.insertBefore(\"flow\",\"operator\",{\"flow-punctuation\":{pattern:/\\{\\||\\|\\}/,alias:\"punctuation\"}}),Array.isArray(a.languages.flow.keyword)||(a.languages.flow.keyword=[a.languages.flow.keyword]),a.languages.flow.keyword.unshift({pattern:/(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,lookbehind:!0},{pattern:/(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,lookbehind:!0})}(Prism);"
            ]
        },
        "prism-fortran.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fortran = {",
                "\t'quoted-number': {",
                "\t\tpattern: /[BOZ](['\"])[A-F0-9]+\\1/i,",
                "\t\talias: 'number'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,",
                "\t\tinside: {",
                "\t\t\t'comment': {",
                "\t\t\t\tpattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /!.*/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'boolean': /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,",
                "\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,",
                "\t'keyword': [",
                "\t\t// Types",
                "\t\t/\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i,",
                "\t\t// END statements",
                "\t\t/\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,",
                "\t\t// Statements",
                "\t\t/\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,",
                "\t\t// Others",
                "\t\t/\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i",
                "\t],",
                "\t'operator': [",
                "\t\t/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i,",
                "\t\t{",
                "\t\t\t// Use lookbehind to prevent confusion with (/ /)",
                "\t\t\tpattern: /(^|(?!\\().)\\/(?!\\))/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /\\(\\/|\\/\\)|[(),;:&]/",
                "};"
            ]
        },
        "prism-fortran.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fortran={\"quoted-number\":{pattern:/[BOZ](['\"])[A-F0-9]+\\1/i,alias:\"number\"},string:{pattern:/(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,inside:{comment:{pattern:/(&(?:\\r\\n?|\\n)\\s*)!.*/,lookbehind:!0}}},comment:{pattern:/!.*/,greedy:!0},boolean:/\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,keyword:[/\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i,/\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,/\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,/\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],operator:[/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i,{pattern:/(^|(?!\\().)\\/(?!\\))/,lookbehind:!0}],punctuation:/\\(\\/|\\/\\)|[(),;:&]/};"
            ]
        },
        "prism-fsharp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fsharp = Prism.languages.extend('clike', {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?|'(?:[^\\\\']|\\\\.)'B?/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'operator': /->|\\*/,",
                "\t\t\t'punctuation': /\\./",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,",
                "\t'number': [",
                "\t\t/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/,",
                "\t\t/\\b0b[01]+(?:y|uy)?\\b/,",
                "\t\t/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,",
                "\t\t/\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/",
                "\t],",
                "\t'operator': /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/",
                "});",
                "Prism.languages.insertBefore('fsharp', 'keyword', {",
                "\t'preprocessor': {",
                "\t\tpattern: /^[^\\r\\n\\S]*#.*/m,",
                "\t\talias: 'property',",
                "\t\tinside: {",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'keyword'",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});",
                "Prism.languages.insertBefore('fsharp', 'punctuation', {",
                "\t'computation-expression': {",
                "\t\tpattern: /[_a-z]\\w*(?=\\s*\\{)/i,",
                "\t\talias: 'keyword'",
                "\t}",
                "});",
                "Prism.languages.insertBefore('fsharp', 'string', {",
                "\t'annotation': {",
                "\t\tpattern: /\\[<.+?>\\]/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^\\[<|>\\]$/,",
                "\t\t\t'class-name': {",
                "\t\t\t\tpattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'annotation-content': {",
                "\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\tinside: Prism.languages.fsharp",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-fsharp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.fsharp=Prism.languages.extend(\"clike\",{comment:[{pattern:/(^|[^\\\\])\\(\\*[\\s\\S]*?\\*\\)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],string:{pattern:/(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?|'(?:[^\\\\']|\\\\.)'B?/,greedy:!0},\"class-name\":{pattern:/(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,lookbehind:!0,inside:{operator:/->|\\*/,punctuation:/\\./}},keyword:/\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\\b/,number:[/\\b0x[\\da-fA-F]+(?:un|lf|LF)?\\b/,/\\b0b[01]+(?:y|uy)?\\b/,/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,/\\b\\d+(?:[IlLsy]|u[lsy]?|UL)?\\b/],operator:/([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/}),Prism.languages.insertBefore(\"fsharp\",\"keyword\",{preprocessor:{pattern:/^[^\\r\\n\\S]*#.*/m,alias:\"property\",inside:{directive:{pattern:/(\\s*#)\\b(?:else|endif|if|light|line|nowarn)\\b/,lookbehind:!0,alias:\"keyword\"}}}}),Prism.languages.insertBefore(\"fsharp\",\"punctuation\",{\"computation-expression\":{pattern:/[_a-z]\\w*(?=\\s*\\{)/i,alias:\"keyword\"}}),Prism.languages.insertBefore(\"fsharp\",\"string\",{annotation:{pattern:/\\[<.+?>\\]/,inside:{punctuation:/^\\[<|>\\]$/,\"class-name\":{pattern:/^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,lookbehind:!0},\"annotation-content\":{pattern:/[\\s\\S]+/,inside:Prism.languages.fsharp}}}});"
            ]
        },
        "prism-gcode.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gcode = {",
                "\t'comment': /;.*|\\B\\(.*?\\)\\B/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[^\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b[GM]\\d+(?:\\.\\d+)?\\b/,",
                "\t'property': /\\b[A-Z]/,",
                "\t'checksum': {",
                "\t\tpattern: /\\*\\d+/,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t// T0:0:0",
                "\t'punctuation': /:/",
                "};"
            ]
        },
        "prism-gcode.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gcode={comment:/;.*|\\B\\(.*?\\)\\B/,string:{pattern:/\"(?:\"\"|[^\"])*\"/,greedy:!0},keyword:/\\b[GM]\\d+(?:\\.\\d+)?\\b/,property:/\\b[A-Z]/,checksum:{pattern:/\\*\\d+/,alias:\"punctuation\"},punctuation:/:/};"
            ]
        },
        "prism-gedcom.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gedcom = {",
                "\t'line-value': {",
                "\t\t// Preceded by level, optional pointer, and tag",
                "\t\tpattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'pointer': {",
                "\t\t\t\tpattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'tag': {",
                "\t\t// Preceded by level and optional pointer",
                "\t\tpattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'level': {",
                "\t\tpattern: /(^\\s*)\\d+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'number'",
                "\t},",
                "\t'pointer': {",
                "\t\tpattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-gedcom.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gedcom={\"line-value\":{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,lookbehind:!0,inside:{pointer:{pattern:/^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,alias:\"variable\"}}},tag:{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,lookbehind:!0,alias:\"string\"},level:{pattern:/(^\\s*)\\d+/m,lookbehind:!0,alias:\"number\"},pointer:{pattern:/@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,alias:\"variable\"}};"
            ]
        },
        "prism-gherkin.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gherkin = {",
                "\t'pystring': {",
                "\t\tpattern: /(\"\"\"|''')[\\s\\S]+?\\1/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'tag': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)@\\S*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'feature': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:]+(?:\\r?\\n|\\r|$))*/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'important': {",
                "\t\t\t\tpattern: /(:)[^\\r\\n]+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\tkeyword: /[^:\\r\\n]+:/",
                "\t\t}",
                "\t},",
                "\t'scenario': {",
                "\t\tpattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'important': {",
                "\t\t\t\tpattern: /(:)[^\\r\\n]*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\tkeyword: /[^:\\r\\n]+:/",
                "\t\t}",
                "\t},",
                "\t'table-body': {",
                "\t\t// Look-behind is used to skip the table head, which has the same format as any table row",
                "\t\tpattern: /((?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*)+/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'outline': {",
                "\t\t\t\tpattern: /<[^>]+?>/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\t'td': {",
                "\t\t\t\tpattern: /\\s*[^\\s|][^|]*/,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'table-head': {",
                "\t\tpattern: /(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*/,",
                "\t\tinside: {",
                "\t\t\t'th': {",
                "\t\t\t\tpattern: /\\s*[^\\s|][^|]*/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'atrule': {",
                "\t\tpattern: /((?:\\r?\\n|\\r)[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t]+)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,",
                "\t\tinside: {",
                "\t\t\t'outline': {",
                "\t\t\t\tpattern: /<[^>]+?>/,",
                "\t\t\t\talias: 'variable'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'outline': {",
                "\t\tpattern: /<[^>]+?>/,",
                "\t\talias: 'variable'",
                "\t}",
                "};"
            ]
        },
        "prism-gherkin.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gherkin={pystring:{pattern:/(\"\"\"|''')[\\s\\S]+?\\1/,alias:\"string\"},comment:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)#.*/,lookbehind:!0},tag:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)@\\S*/,lookbehind:!0},feature:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:]+(?:\\r?\\n|\\r|$))*/,lookbehind:!0,inside:{important:{pattern:/(:)[^\\r\\n]+/,lookbehind:!0},keyword:/[^:\\r\\n]+:/}},scenario:{pattern:/((?:^|\\r?\\n|\\r)[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\\-ho\\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/,lookbehind:!0,inside:{important:{pattern:/(:)[^\\r\\n]*/,lookbehind:!0},keyword:/[^:\\r\\n]+:/}},\"table-body\":{pattern:/((?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*)+/,lookbehind:!0,inside:{outline:{pattern:/<[^>]+?>/,alias:\"variable\"},td:{pattern:/\\s*[^\\s|][^|]*/,alias:\"string\"},punctuation:/\\|/}},\"table-head\":{pattern:/(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|[^\\r\\n]*/,inside:{th:{pattern:/\\s*[^\\s|][^|]*/,alias:\"variable\"},punctuation:/\\|/}},atrule:{pattern:/((?:\\r?\\n|\\r)[ \\t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t]+)/,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,inside:{outline:{pattern:/<[^>]+?>/,alias:\"variable\"}}},outline:{pattern:/<[^>]+?>/,alias:\"variable\"}};"
            ]
        },
        "prism-git.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.git = {",
                "\t/*",
                "\t * A simple one line comment like in a git status command",
                "\t * For instance:",
                "\t * $ git status",
                "\t * # On branch infinite-scroll",
                "\t * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,",
                "\t * # and have 1 and 2 different commits each, respectively.",
                "\t * nothing to commit (working directory clean)",
                "\t */",
                "\t'comment': /^#.*/m,",
                "",
                "\t/*",
                "\t * Regexp to match the changed lines in a git diff output. Check the example below.",
                "\t */",
                "\t'deleted': /^[-–].*/m,",
                "\t'inserted': /^\\+.*/m,",
                "",
                "\t/*",
                "\t * a string (double and simple quote)",
                "\t */",
                "\t'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,",
                "",
                "\t/*",
                "\t * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters",
                "\t * For instance:",
                "\t * $ git add file.txt",
                "\t */",
                "\t'command': {",
                "\t\tpattern: /^.*\\$ git .*$/m,",
                "\t\tinside: {",
                "\t\t\t/*",
                "\t\t\t * A git command can contain a parameter starting by a single or a double dash followed by a string",
                "\t\t\t * For instance:",
                "\t\t\t * $ git diff --cached",
                "\t\t\t * $ git log -p",
                "\t\t\t */",
                "\t\t\t'parameter': /\\s--?\\w+/m",
                "\t\t}",
                "\t},",
                "",
                "\t/*",
                "\t * Coordinates displayed in a git diff command",
                "\t * For instance:",
                "\t * $ git diff",
                "\t * diff --git file.txt file.txt",
                "\t * index 6214953..1d54a52 100644",
                "\t * --- file.txt",
                "\t * +++ file.txt",
                "\t * @@ -1 +1,2 @@",
                "\t * -Here's my tetx file",
                "\t * +Here's my text file",
                "\t * +And this is the second line",
                "\t */",
                "\t'coord': /^@@.*@@$/m,",
                "",
                "\t/*",
                "\t * Match a \"commit [SHA1]\" line in a git log output.",
                "\t * For instance:",
                "\t * $ git log",
                "\t * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09",
                "\t * Author: lgiraudel",
                "\t * Date:   Mon Feb 17 11:18:34 2014 +0100",
                "\t *",
                "\t *     Add of a new line",
                "\t */",
                "\t'commit_sha1': /^commit \\w{40}$/m",
                "};"
            ]
        },
        "prism-git.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.git={comment:/^#.*/m,deleted:/^[-–].*/m,inserted:/^\\+.*/m,string:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,command:{pattern:/^.*\\$ git .*$/m,inside:{parameter:/\\s--?\\w+/m}},coord:/^@@.*@@$/m,commit_sha1:/^commit \\w{40}$/m};"
            ]
        },
        "prism-glsl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.glsl = Prism.languages.extend('clike', {",
                "\t'comment': [",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t/\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/",
                "\t],",
                "\t'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,",
                "\t'keyword': /\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('glsl', 'comment', {",
                "\t'preprocessor': {",
                "\t\tpattern: /(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'builtin'",
                "\t}",
                "});"
            ]
        },
        "prism-glsl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.glsl=Prism.languages.extend(\"clike\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,/\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/],number:/(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,keyword:/\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/}),Prism.languages.insertBefore(\"glsl\",\"comment\",{preprocessor:{pattern:/(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,lookbehind:!0,alias:\"builtin\"}});"
            ]
        },
        "prism-gml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend('clike', {",
                "\t'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,",
                "\t'keyword': /\\b(?:if|else|switch|case|default|break|for|repeat|while|do|until|continue|exit|return|globalvar|var|enum)\\b/,",
                "\t'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at|xor|not)\\b/,",
                "\t'constant': /\\b(self|other|all|noone|global|local|undefined|pointer_(?:invalid|null)|action_(?:stop|restart|continue|reverse)|pi|GM_build_date|GM_version|timezone_(?:local|utc)|gamespeed_(?:fps|microseconds)|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|pre|post)|keypress|keyrelease|trigger|(?:left|right|middle|no)_button|(?:left|right|middle)_press|(?:left|right|middle)_release|mouse_(?:enter|leave|wheel_up|wheel_down)|global_(?:left|right|middle)_button|global_(?:left|right|middle)_press|global_(?:left|right|middle)_release|joystick(?:1|2)_(?:left|right|up|down|button1|button2|button3|button4|button5|button6|button7|button8)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|step_(?:normal|begin|end)|gui|gui_begin|gui_end)|vk_(?:nokey|anykey|enter|return|shift|control|alt|escape|space|backspace|tab|pause|printscreen|left|right|up|down|home|end|delete|insert|pageup|pagedown|f\\d|numpad\\d|divide|multiply|subtract|add|decimal|lshift|lcontrol|lalt|rshift|rcontrol|ralt)|mb_(?:any|none|left|right|middle)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|purple|red|silver|teal|white|yellow|orange)|fa_(?:left|center|right|top|middle|bottom|readonly|hidden|sysfile|volumeid|directory|archive)|pr_(?:pointlist|linelist|linestrip|trianglelist|trianglestrip|trianglefan)|bm_(?:complex|normal|add|max|subtract|zero|one|src_colour|inv_src_colour|src_color|inv_src_color|src_alpha|inv_src_alpha|dest_alpha|inv_dest_alpha|dest_colour|inv_dest_colour|dest_color|inv_dest_color|src_alpha_sat)|audio_(?:falloff_(?:none|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|exponent_distance|exponent_distance_clamped)|old_system|new_system|mono|stereo|3d)|cr_(?:default|none|arrow|cross|beam|size_nesw|size_ns|size_nwse|size_we|uparrow|hourglass|drag|appstart|handpoint|size_all)|spritespeed_framesper(?:second|gameframe)|asset_(?:object|unknown|sprite|sound|room|path|script|font|timeline|tiles|shader)|ds_type_(?:map|list|stack|queue|grid|priority)|ef_(?:explosion|ring|ellipse|firework|smoke|smokeup|star|spark|flare|cloud|rain|snow)|pt_shape_(?:pixel|disk|square|line|star|circle|ring|sphere|flare|spark|explosion|cloud|smoke|snow)|ps_(?:distr|shape)_(?:linear|gaussian|invgaussian|rectangle|ellipse|diamond|line)|ty_(?:real|string)|dll_(?:cdel|cdecl|stdcall)|matrix_(?:view|projection|world)|os_(?:win32|windows|macosx|ios|android|linux|unknown|winphone|win8native|psvita|ps4|xboxone|ps3|uwp)|browser_(?:not_a_browser|unknown|ie|firefox|chrome|safari|safari_mobile|opera|tizen|windows_store|ie_mobile)|device_ios_(?:unknown|iphone|iphone_retina|ipad|ipad_retina|iphone5|iphone6|iphone6plus)|device_(?:emulator|tablet)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|of_challenge_(?:win|lose|tie)|leaderboard_type_(?:number|time_mins_secs)|cmpfunc_(?:never|less|equal|lessequal|greater|notequal|greaterequal|always)|cull_(?:noculling|clockwise|counterclockwise)|lighttype_(?:dir|point)|iap_(?:ev_storeload|ev_product|ev_purchase|ev_consume|ev_restore|storeload_ok|storeload_failed|status_uninitialised|status_unavailable|status_loading|status_available|status_processing|status_restoring|failed|unavailable|available|purchased|canceled|refunded)|fb_login_(?:default|fallback_to_webview|no_fallback_to_webview|forcing_webview|use_system_account|forcing_safari)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|reaction_force_x|reaction_force_y|reaction_torque|motor_speed|angle|motor_torque|max_motor_torque|translation|speed|motor_force|max_motor_force|length_1|length_2|damping_ratio|frequency|lower_angle_limit|upper_angle_limit|angle_limits|max_length|max_torque|max_force)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_particle_flag_(?:water|zombie|wall|spring|elastic|viscous|powder|tensile|colourmixing|colormixing)|phy_particle_group_flag_(?:solid|rigid)|phy_particle_data_flag_(?:typeflags|position|velocity|colour|color|category)|achievement_(?:our_info|friends_info|leaderboard_info|info|filter_(?:all_players|friends_only|favorites_only)|type_challenge|type_score_challenge|pic_loaded|show_(?:ui|profile|leaderboard|achievement|bank|friend_picker|purchase_prompt))|network_(?:socket_(?:tcp|udp|bluetooth)|type_(?:connect|disconnect|data|non_blocking_connect)|config_(?:connect_timeout|use_non_blocking_socket|enable_reliable_udp|disable_reliable_udp))|buffer_(?:fixed|grow|wrap|fast|vbuffer|network|u8|s8|u16|s16|u32|s32|u64|f16|f32|f64|bool|text|string|seek_start|seek_relative|seek_end|generalerror|outofspace|outofbounds|invalidtype)|gp_(?:face\\d|shoulderl|shoulderr|shoulderlb|shoulderrb|select|start|stickl|stickr|padu|padd|padl|padr|axislh|axislv|axisrh|axisrv)|ov_(?:friends|community|players|settings|gamegroup|achievements)|lb_sort_(?:none|ascending|descending)|lb_disp_(?:none|numeric|time_sec|time_ms)|ugc_(?:result_success|filetype_(?:community|microtrans)|visibility_(?:public|friends_only|private)|query_RankedBy(?:Vote|PublicationDate|Trend|NumTimesReported|TotalVotesAsc|VotesUp|TextSearch)|query_(?:AcceptedForGameRankedByAcceptanceDate|FavoritedByFriendsRankedByPublicationDate|CreatedByFriendsRankedByPublicationDate|NotYetRated)|sortorder_CreationOrder(?:Desc|Asc)|sortorder_(?:TitleAsc|LastUpdatedDesc|SubscriptionDateDesc|VoteScoreDesc|ForModeration)|list_(?:Published|VotedOn|VotedUp|VotedDown|WillVoteLater|Favorited|Subscribed|UsedOrPlayed|Followed)|match_(?:Items|Items_Mtx|Items_ReadyToUse|Collections|Artwork|Videos|Screenshots|AllGuides|WebGuides|IntegratedGuides|UsableInGame|ControllerBindings))|vertex_usage_(?:position|colour|color|normal|texcoord|textcoord|blendweight|blendindices|psize|tangent|binormal|fog|depth|sample)|vertex_type_(?:float\\d|colour|color|ubyte4)|layerelementtype_(?:undefined|background|instance|oldtilemap|sprite|tilemap|particlesystem|tile)|tile_(?:rotate|flip|mirror|index_mask)|input_type|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|(obj|scr|spr|rm)\\w+)\\b/,",
                "\t'variable': /\\b(x|y|(?:x|y)(?:previous|start)|(?:h|v)speed|direction|speed|friction|gravity|gravity_direction|path_(?:index|position|positionprevious|speed|scale|orientation|endaction)|object_index|id|solid|persistent|mask_index|instance_(?:count|id)|alarm|timeline_(?:index|position|speed|running|loop)|visible|sprite_(?:index|width|height|xoffset|yoffset)|image_(?:number|index|speed|depth|xscale|yscale|angle|alpha|blend)|bbox_(?:left|right|top|bottom)|layer|phy_(?:rotation|(?:position|linear_velocity|speed|com|collision|col_normal)_(?:x|y)|angular_(?:velocity|damping)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|working_directory|webgl_enabled|view_(?:(?:y|x|w|h)view|(?:y|x|w|h)port|(?:v|h)(?:speed|border)|visible|surface_id|object|enabled|current|angle)|undefined|transition_(?:steps|kind|color)|temp_directory|show_(?:score|lives|health)|secure_mode|score|room_(?:width|speed|persistent|last|height|first|caption)|room|pointer_(?:null|invalid)|os_(?:version|type|device|browser)|mouse_(?:y|x|lastbutton|button)|lives|keyboard_(?:string|lastkey|lastchar|key)|iap_data|health|gamemaker_(?:version|registered|pro)|game_(?:save|project|display)_(?:id|name)|fps_real|fps|event_(?:type|object|number|action)|error_(?:occurred|last)|display_aa|delta_time|debug_mode|cursor_sprite|current_(?:year|weekday|time|second|month|minute|hour|day)|caption_(?:score|lives|health)|browser_(?:width|height)|background_(?:yscale|y|xscale|x|width|vtiled|vspeed|visible|showcolour|showcolor|index|htiled|hspeed|height|foreground|colour|color|blend|alpha)|async_load|application_surface|argument(?:_relitive|_count|\\d)|argument|global|local|self|other)\\b/",
                "});"
            ]
        },
        "prism-gml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.gamemakerlanguage=Prism.languages.gml=Prism.languages.extend(\"clike\",{number:/(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]*/i,keyword:/\\b(?:if|else|switch|case|default|break|for|repeat|while|do|until|continue|exit|return|globalvar|var|enum)\\b/,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at|xor|not)\\b/,constant:/\\b(self|other|all|noone|global|local|undefined|pointer_(?:invalid|null)|action_(?:stop|restart|continue|reverse)|pi|GM_build_date|GM_version|timezone_(?:local|utc)|gamespeed_(?:fps|microseconds)|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|pre|post)|keypress|keyrelease|trigger|(?:left|right|middle|no)_button|(?:left|right|middle)_press|(?:left|right|middle)_release|mouse_(?:enter|leave|wheel_up|wheel_down)|global_(?:left|right|middle)_button|global_(?:left|right|middle)_press|global_(?:left|right|middle)_release|joystick(?:1|2)_(?:left|right|up|down|button1|button2|button3|button4|button5|button6|button7|button8)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|step_(?:normal|begin|end)|gui|gui_begin|gui_end)|vk_(?:nokey|anykey|enter|return|shift|control|alt|escape|space|backspace|tab|pause|printscreen|left|right|up|down|home|end|delete|insert|pageup|pagedown|f\\d|numpad\\d|divide|multiply|subtract|add|decimal|lshift|lcontrol|lalt|rshift|rcontrol|ralt)|mb_(?:any|none|left|right|middle)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|purple|red|silver|teal|white|yellow|orange)|fa_(?:left|center|right|top|middle|bottom|readonly|hidden|sysfile|volumeid|directory|archive)|pr_(?:pointlist|linelist|linestrip|trianglelist|trianglestrip|trianglefan)|bm_(?:complex|normal|add|max|subtract|zero|one|src_colour|inv_src_colour|src_color|inv_src_color|src_alpha|inv_src_alpha|dest_alpha|inv_dest_alpha|dest_colour|inv_dest_colour|dest_color|inv_dest_color|src_alpha_sat)|audio_(?:falloff_(?:none|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|exponent_distance|exponent_distance_clamped)|old_system|new_system|mono|stereo|3d)|cr_(?:default|none|arrow|cross|beam|size_nesw|size_ns|size_nwse|size_we|uparrow|hourglass|drag|appstart|handpoint|size_all)|spritespeed_framesper(?:second|gameframe)|asset_(?:object|unknown|sprite|sound|room|path|script|font|timeline|tiles|shader)|ds_type_(?:map|list|stack|queue|grid|priority)|ef_(?:explosion|ring|ellipse|firework|smoke|smokeup|star|spark|flare|cloud|rain|snow)|pt_shape_(?:pixel|disk|square|line|star|circle|ring|sphere|flare|spark|explosion|cloud|smoke|snow)|ps_(?:distr|shape)_(?:linear|gaussian|invgaussian|rectangle|ellipse|diamond|line)|ty_(?:real|string)|dll_(?:cdel|cdecl|stdcall)|matrix_(?:view|projection|world)|os_(?:win32|windows|macosx|ios|android|linux|unknown|winphone|win8native|psvita|ps4|xboxone|ps3|uwp)|browser_(?:not_a_browser|unknown|ie|firefox|chrome|safari|safari_mobile|opera|tizen|windows_store|ie_mobile)|device_ios_(?:unknown|iphone|iphone_retina|ipad|ipad_retina|iphone5|iphone6|iphone6plus)|device_(?:emulator|tablet)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|of_challenge_(?:win|lose|tie)|leaderboard_type_(?:number|time_mins_secs)|cmpfunc_(?:never|less|equal|lessequal|greater|notequal|greaterequal|always)|cull_(?:noculling|clockwise|counterclockwise)|lighttype_(?:dir|point)|iap_(?:ev_storeload|ev_product|ev_purchase|ev_consume|ev_restore|storeload_ok|storeload_failed|status_uninitialised|status_unavailable|status_loading|status_available|status_processing|status_restoring|failed|unavailable|available|purchased|canceled|refunded)|fb_login_(?:default|fallback_to_webview|no_fallback_to_webview|forcing_webview|use_system_account|forcing_safari)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|reaction_force_x|reaction_force_y|reaction_torque|motor_speed|angle|motor_torque|max_motor_torque|translation|speed|motor_force|max_motor_force|length_1|length_2|damping_ratio|frequency|lower_angle_limit|upper_angle_limit|angle_limits|max_length|max_torque|max_force)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_particle_flag_(?:water|zombie|wall|spring|elastic|viscous|powder|tensile|colourmixing|colormixing)|phy_particle_group_flag_(?:solid|rigid)|phy_particle_data_flag_(?:typeflags|position|velocity|colour|color|category)|achievement_(?:our_info|friends_info|leaderboard_info|info|filter_(?:all_players|friends_only|favorites_only)|type_challenge|type_score_challenge|pic_loaded|show_(?:ui|profile|leaderboard|achievement|bank|friend_picker|purchase_prompt))|network_(?:socket_(?:tcp|udp|bluetooth)|type_(?:connect|disconnect|data|non_blocking_connect)|config_(?:connect_timeout|use_non_blocking_socket|enable_reliable_udp|disable_reliable_udp))|buffer_(?:fixed|grow|wrap|fast|vbuffer|network|u8|s8|u16|s16|u32|s32|u64|f16|f32|f64|bool|text|string|seek_start|seek_relative|seek_end|generalerror|outofspace|outofbounds|invalidtype)|gp_(?:face\\d|shoulderl|shoulderr|shoulderlb|shoulderrb|select|start|stickl|stickr|padu|padd|padl|padr|axislh|axislv|axisrh|axisrv)|ov_(?:friends|community|players|settings|gamegroup|achievements)|lb_sort_(?:none|ascending|descending)|lb_disp_(?:none|numeric|time_sec|time_ms)|ugc_(?:result_success|filetype_(?:community|microtrans)|visibility_(?:public|friends_only|private)|query_RankedBy(?:Vote|PublicationDate|Trend|NumTimesReported|TotalVotesAsc|VotesUp|TextSearch)|query_(?:AcceptedForGameRankedByAcceptanceDate|FavoritedByFriendsRankedByPublicationDate|CreatedByFriendsRankedByPublicationDate|NotYetRated)|sortorder_CreationOrder(?:Desc|Asc)|sortorder_(?:TitleAsc|LastUpdatedDesc|SubscriptionDateDesc|VoteScoreDesc|ForModeration)|list_(?:Published|VotedOn|VotedUp|VotedDown|WillVoteLater|Favorited|Subscribed|UsedOrPlayed|Followed)|match_(?:Items|Items_Mtx|Items_ReadyToUse|Collections|Artwork|Videos|Screenshots|AllGuides|WebGuides|IntegratedGuides|UsableInGame|ControllerBindings))|vertex_usage_(?:position|colour|color|normal|texcoord|textcoord|blendweight|blendindices|psize|tangent|binormal|fog|depth|sample)|vertex_type_(?:float\\d|colour|color|ubyte4)|layerelementtype_(?:undefined|background|instance|oldtilemap|sprite|tilemap|particlesystem|tile)|tile_(?:rotate|flip|mirror|index_mask)|input_type|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|(obj|scr|spr|rm)\\w+)\\b/,variable:/\\b(x|y|(?:x|y)(?:previous|start)|(?:h|v)speed|direction|speed|friction|gravity|gravity_direction|path_(?:index|position|positionprevious|speed|scale|orientation|endaction)|object_index|id|solid|persistent|mask_index|instance_(?:count|id)|alarm|timeline_(?:index|position|speed|running|loop)|visible|sprite_(?:index|width|height|xoffset|yoffset)|image_(?:number|index|speed|depth|xscale|yscale|angle|alpha|blend)|bbox_(?:left|right|top|bottom)|layer|phy_(?:rotation|(?:position|linear_velocity|speed|com|collision|col_normal)_(?:x|y)|angular_(?:velocity|damping)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|working_directory|webgl_enabled|view_(?:(?:y|x|w|h)view|(?:y|x|w|h)port|(?:v|h)(?:speed|border)|visible|surface_id|object|enabled|current|angle)|undefined|transition_(?:steps|kind|color)|temp_directory|show_(?:score|lives|health)|secure_mode|score|room_(?:width|speed|persistent|last|height|first|caption)|room|pointer_(?:null|invalid)|os_(?:version|type|device|browser)|mouse_(?:y|x|lastbutton|button)|lives|keyboard_(?:string|lastkey|lastchar|key)|iap_data|health|gamemaker_(?:version|registered|pro)|game_(?:save|project|display)_(?:id|name)|fps_real|fps|event_(?:type|object|number|action)|error_(?:occurred|last)|display_aa|delta_time|debug_mode|cursor_sprite|current_(?:year|weekday|time|second|month|minute|hour|day)|caption_(?:score|lives|health)|browser_(?:width|height)|background_(?:yscale|y|xscale|x|width|vtiled|vspeed|visible|showcolour|showcolor|index|htiled|hspeed|height|foreground|colour|color|blend|alpha)|async_load|application_surface|argument(?:_relitive|_count|\\d)|argument|global|local|self|other)\\b/});"
            ]
        },
        "prism-go.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.go = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,",
                "\t'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,",
                "\t'boolean': /\\b(?:_|iota|nil|true|false)\\b/,",
                "\t'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,",
                "\t'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,",
                "\t'string': {",
                "\t\tpattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\tgreedy: true",
                "\t}",
                "});",
                "delete Prism.languages.go['class-name'];"
            ]
        },
        "prism-go.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.go=Prism.languages.extend(\"clike\",{keyword:/\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,builtin:/\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,boolean:/\\b(?:_|iota|nil|true|false)\\b/,operator:/[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,number:/(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,string:{pattern:/([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0}}),delete Prism.languages.go[\"class-name\"];"
            ]
        },
        "prism-graphql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.graphql = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'variable': /\\$[a-z_]\\w*/i,",
                "\t'directive': {",
                "\t\tpattern: /@[a-z_]\\w*/i,",
                "\t\talias: 'function'",
                "\t},",
                "\t'attr-name': {",
                "\t\tpattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'fragment': {",
                "\t\tpattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'keyword': /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,",
                "\t'operator': /[!=|]|\\.{3}/,",
                "\t'punctuation': /[!(){}\\[\\]:=,]/,",
                "\t'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/",
                "};"
            ]
        },
        "prism-graphql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.graphql={comment:/#.*/,string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},number:/(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,boolean:/\\b(?:true|false)\\b/,variable:/\\$[a-z_]\\w*/i,directive:{pattern:/@[a-z_]\\w*/i,alias:\"function\"},\"attr-name\":{pattern:/[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,greedy:!0},\"class-name\":{pattern:/(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,lookbehind:!0},fragment:{pattern:/(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,lookbehind:!0,alias:\"function\"},keyword:/\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,operator:/[!=|]|\\.{3}/,punctuation:/[!(){}\\[\\]:=,]/,constant:/\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/};"
            ]
        },
        "prism-groovy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.groovy = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /\\.+|[{}[\\];(),:$]/",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'string', {",
                "\t'shebang': {",
                "\t\tpattern: /#!.+/,",
                "\t\talias: 'comment'",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'punctuation', {",
                "\t'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/",
                "});",
                "",
                "Prism.languages.insertBefore('groovy', 'function', {",
                "\t'annotation': {",
                "\t\talias: 'punctuation',",
                "\t\tpattern: /(^|[^.])@\\w+/,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "// Handle string interpolation",
                "Prism.hooks.add('wrap', function(env) {",
                "\tif (env.language === 'groovy' && env.type === 'string') {",
                "\t\tvar delimiter = env.content[0];",
                "",
                "\t\tif (delimiter != \"'\") {",
                "\t\t\tvar pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;",
                "\t\t\tif (delimiter === '$') {",
                "\t\t\t\tpattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;",
                "\t\t\t}",
                "",
                "\t\t\t// To prevent double HTML-encoding we have to decode env.content first",
                "\t\t\tenv.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');",
                "",
                "\t\t\tenv.content = Prism.highlight(env.content, {",
                "\t\t\t\t'expression': {",
                "\t\t\t\t\tpattern: pattern,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: Prism.languages.groovy",
                "\t\t\t\t}",
                "\t\t\t});",
                "",
                "\t\t\tenv.classes.push(delimiter === '/' ? 'regex' : 'gstring');",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-groovy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.groovy=Prism.languages.extend(\"clike\",{keyword:/\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,string:[{pattern:/(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,greedy:!0},{pattern:/([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],number:/\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,operator:{pattern:/(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,lookbehind:!0},punctuation:/\\.+|[{}[\\];(),:$]/}),Prism.languages.insertBefore(\"groovy\",\"string\",{shebang:{pattern:/#!.+/,alias:\"comment\"}}),Prism.languages.insertBefore(\"groovy\",\"punctuation\",{\"spock-block\":/\\b(?:setup|given|when|then|and|cleanup|expect|where):/}),Prism.languages.insertBefore(\"groovy\",\"function\",{annotation:{alias:\"punctuation\",pattern:/(^|[^.])@\\w+/,lookbehind:!0}}),Prism.hooks.add(\"wrap\",function(e){if(\"groovy\"===e.language&&\"string\"===e.type){var t=e.content[0];if(\"'\"!=t){var n=/([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\"$\"===t&&(n=/([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/),e.content=e.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\"),e.content=Prism.highlight(e.content,{expression:{pattern:n,lookbehind:!0,inside:Prism.languages.groovy}}),e.classes.push(\"/\"===t?\"regex\":\"gstring\")}}});"
            ]
        },
        "prism-haml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tHandle multiline code after tag",
                "\t    %foo= some |",
                "\t\t\tmultiline |",
                "\t\t\tcode |",
                "*/",
                "",
                "(function(Prism) {",
                "",
                "\tPrism.languages.haml = {",
                "\t\t// Multiline stuff should appear before the rest",
                "",
                "\t\t'multiline-comment': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "",
                "\t\t'multiline-code': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "",
                "\t\t// See at the end of the file for known filters",
                "\t\t'filter': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'filter-name': {",
                "\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'markup': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.markup",
                "\t\t\t}",
                "\t\t},",
                "\t\t'doctype': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\t// Allows for one nested group of braces",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': [",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\t// Lookbehind tries to prevent interpolations from breaking it all",
                "\t\t\t\t\t\t// Allows for one nested group of braces",
                "\t\t\t\t\t\tpattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\t\tpattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,",
                "\t\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,",
                "\t\t\t\t\t\t\t'punctuation': /[=(),]/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /[<>]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t},",
                "\t\t// Interpolations in plain text",
                "\t\t'interpolation': {",
                "\t\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': {",
                "\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t};",
                "",
                "\tvar filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+';",
                "",
                "\t// Non exhaustive list of available filters and associated languages",
                "\tvar filters = [",
                "\t\t'css',",
                "\t\t{filter:'coffee',language:'coffeescript'},",
                "\t\t'erb',",
                "\t\t'javascript',",
                "\t\t'less',",
                "\t\t'markdown',",
                "\t\t'ruby',",
                "\t\t'scss',",
                "\t\t'textile'",
                "\t];",
                "\tvar all_filters = {};",
                "\tfor (var i = 0, l = filters.length; i < l; i++) {",
                "\t\tvar filter = filters[i];",
                "\t\tfilter = typeof filter === 'string' ? {filter: filter, language: filter} : filter;",
                "\t\tif (Prism.languages[filter.language]) {",
                "\t\t\tall_filters['filter-' + filter.filter] = {",
                "\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'filter-name': {",
                "\t\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages[filter.language]",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tPrism.languages.insertBefore('haml', 'filter', all_filters);",
                "",
                "}(Prism));"
            ]
        },
        "prism-haml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.haml={\"multiline-comment\":{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,lookbehind:!0,alias:\"comment\"},\"multiline-code\":[{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,lookbehind:!0,inside:{rest:e.languages.ruby}}],filter:{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},markup:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,lookbehind:!0,inside:{rest:e.languages.markup}},doctype:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,lookbehind:!0},tag:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,lookbehind:!0,inside:{attributes:[{pattern:/(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,lookbehind:!0},\"attr-name\":/[\\w:-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[=(),]/}},{pattern:/\\[[^\\]]+\\]/,inside:{rest:e.languages.ruby}}],punctuation:/[<>]/}},code:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,lookbehind:!0,inside:{rest:e.languages.ruby}},interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:e.languages.ruby}},punctuation:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,lookbehind:!0}};for(var t=[\"css\",{filter:\"coffee\",language:\"coffeescript\"},\"erb\",\"javascript\",\"less\",\"markdown\",\"ruby\",\"scss\",\"textile\"],r={},n=0,a=t.length;n<a;n++){var i=t[n];i=\"string\"==typeof i?{filter:i,language:i}:i,e.languages[i.language]&&(r[\"filter-\"+i.filter]={pattern:RegExp(\"((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\".replace(\"{{filter_name}}\",i.filter)),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[i.language]}})}e.languages.insertBefore(\"haml\",\"filter\",r)}(Prism);"
            ]
        },
        "prism-handlebars.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "\tPrism.languages.handlebars = {",
                "\t\t'comment': /\\{\\{![\\s\\S]*?\\}\\}/,",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'block': {",
                "\t\t\tpattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'brackets': {",
                "\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\[|\\]/,",
                "\t\t\t\tvariable: /[\\s\\S]+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,",
                "\t\t'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/",
                "\t};",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-handlebars.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.handlebars={comment:/\\{\\{![\\s\\S]*?\\}\\}/,delimiter:{pattern:/^\\{\\{\\{?|\\}\\}\\}?$/i,alias:\"punctuation\"},string:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,boolean:/\\b(?:true|false)\\b/,block:{pattern:/^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,lookbehind:!0,alias:\"keyword\"},brackets:{pattern:/\\[[^\\]]+\\]/,inside:{punctuation:/\\[|\\]/,variable:/[\\s\\S]+/}},punctuation:/[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,variable:/[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/},e.hooks.add(\"before-tokenize\",function(a){e.languages[\"markup-templating\"].buildPlaceholders(a,\"handlebars\",/\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g)}),e.hooks.add(\"after-tokenize\",function(a){e.languages[\"markup-templating\"].tokenizePlaceholders(a,\"handlebars\")})}(Prism);"
            ]
        },
        "prism-haskell.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haskell = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'char': /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,",
                "\t'import_statement': {",
                "\t\t// The imported or hidden names are not included in this import",
                "\t\t// statement. This is because we want to highlight those exactly like",
                "\t\t// we do for the names in the program.",
                "\t\tpattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /\\b(?:import|qualified|as|hiding)\\b/",
                "\t\t}",
                "\t},",
                "\t// These are builtin variables only. Constructors are highlighted later as a constant.",
                "\t'builtin': /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,",
                "\t// decimal integers and floating point numbers | octal integers | hexadecimal integers",
                "\t'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,",
                "\t// Most of this is needed because of the meaning of a single '.'.",
                "\t// If it stands alone freely, it is the function composition.",
                "\t// It may also be a separator between a module name and an identifier => no",
                "\t// operator. If it comes together with other special characters it is an",
                "\t// operator too.",
                "\t'operator': /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,",
                "\t// In Haskell, nearly everything is a variable, do not highlight these.",
                "\t'hvariable': /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,",
                "\t'constant': /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};",
                "",
                "Prism.languages.hs = Prism.languages.haskell;"
            ]
        },
        "prism-haskell.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,lookbehind:!0},char:/'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,string:{pattern:/\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,greedy:!0},keyword:/\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,import_statement:{pattern:/((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:import|qualified|as|hiding)\\b/}},builtin:/\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,hvariable:/\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,constant:/\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,punctuation:/[{}[\\];(),.:]/},Prism.languages.hs=Prism.languages.haskell;"
            ]
        },
        "prism-haxe.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haxe = Prism.languages.extend('clike', {",
                "\t// Strings can be multi-line",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': {",
                "\t\t\t\t\t\tpattern: /^\\$\\w*/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t// The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"",
                "\t'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,",
                "\t'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/",
                "});",
                "Prism.languages.insertBefore('haxe', 'class-name', {",
                "\t'regex': {",
                "\t\tpattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,",
                "\t\tgreedy: true",
                "\t}",
                "});",
                "Prism.languages.insertBefore('haxe', 'keyword', {",
                "\t'preprocessor': {",
                "\t\tpattern: /#\\w+/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'metadata': {",
                "\t\tpattern: /@:?\\w+/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'reification': {",
                "\t\tpattern: /\\$(?:\\w+|(?=\\{))/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "Prism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;",
                "delete Prism.languages.haxe['class-name'];"
            ]
        },
        "prism-haxe.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.haxe=Prism.languages.extend(\"clike\",{string:{pattern:/([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{interpolation:{pattern:/(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,lookbehind:!0,inside:{interpolation:{pattern:/^\\$\\w*/,alias:\"variable\"}}}}},keyword:/\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,operator:/\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/}),Prism.languages.insertBefore(\"haxe\",\"class-name\",{regex:{pattern:/~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,greedy:!0}}),Prism.languages.insertBefore(\"haxe\",\"keyword\",{preprocessor:{pattern:/#\\w+/,alias:\"builtin\"},metadata:{pattern:/@:?\\w+/,alias:\"symbol\"},reification:{pattern:/\\$(?:\\w+|(?=\\{))/,alias:\"variable\"}}),Prism.languages.haxe.string.inside.interpolation.inside.rest=Prism.languages.haxe,delete Prism.languages.haxe[\"class-name\"];"
            ]
        },
        "prism-hcl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hcl = {",
                "\t'comment': /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t'heredoc': {",
                "\t\tpattern: /<<-?(\\w+)[\\s\\S]*?^\\s*\\1/m,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(?:resource|data)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+{)/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'type': {",
                "\t\t\t\t\tpattern: /(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(?:provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?={)/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'type': {",
                "\t\t\t\t\tpattern: /(provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /[\\w-]+(?=\\s+{)/",
                "\t\t}",
                "\t],",
                "\t'property': [",
                "\t\t/[\\w-\\.]+(?=\\s*=(?!=))/,",
                "\t\t/\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/,",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'type': {",
                "\t\t\t\t\t\tpattern: /(\\b(?:terraform|var|self|count|module|path|data|local)\\b\\.)[\\w\\*]+/i,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'keyword': /\\b(?:terraform|var|self|count|module|path|data|local)\\b/i,",
                "\t\t\t\t\t'function': /\\w+(?=\\()/,",
                "\t\t\t\t\t'string': {",
                "\t\t\t\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\t\t\t\tgreedy: true,",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'number': /\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,",
                "\t\t\t\t\t'punctuation': /[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/,",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t}",
                "\t},",
                "\t'number': /\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'punctuation': /[=\\[\\]{}]/,",
                "};"
            ]
        },
        "prism-hcl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hcl={comment:/(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,heredoc:{pattern:/<<-?(\\w+)[\\s\\S]*?^\\s*\\1/m,greedy:!0,alias:\"string\"},keyword:[{pattern:/(?:resource|data)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+{)/i,inside:{type:{pattern:/(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,lookbehind:!0,alias:\"variable\"}}},{pattern:/(?:provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?={)/i,inside:{type:{pattern:/(provider|provisioner|variable|output|module|backend)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,lookbehind:!0,alias:\"variable\"}}},{pattern:/[\\w-]+(?=\\s+{)/}],property:[/[\\w-\\.]+(?=\\s*=(?!=))/,/\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/],string:{pattern:/\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,greedy:!0,inside:{interpolation:{pattern:/(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,lookbehind:!0,inside:{type:{pattern:/(\\b(?:terraform|var|self|count|module|path|data|local)\\b\\.)[\\w\\*]+/i,lookbehind:!0,alias:\"variable\"},keyword:/\\b(?:terraform|var|self|count|module|path|data|local)\\b/i,function:/\\w+(?=\\()/,string:{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0},number:/\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,punctuation:/[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/}}}},number:/\\b0x[\\da-f]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?/i,boolean:/\\b(?:true|false)\\b/i,punctuation:/[=\\[\\]{}]/};"
            ]
        },
        "prism-hpkp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/",
                " */",
                "",
                "Prism.languages.hpkp = {",
                "\t'directive': {",
                "\t\tpattern: /\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=/]+\"|(?:max-age|report-uri)=|report-to )/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /\\d{7,}/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /\\d{1,6}/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-hpkp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hpkp={directive:{pattern:/\\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256=\"[a-zA-Z\\d+=/]+\"|(?:max-age|report-uri)=|report-to )/,alias:\"keyword\"},safe:{pattern:/\\d{7,}/,alias:\"selector\"},unsafe:{pattern:/\\d{1,6}/,alias:\"function\"}};"
            ]
        },
        "prism-hsts.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Scott Helme.",
                " *",
                " * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/",
                " */",
                "",
                "Prism.languages.hsts = {",
                "\t'directive': {",
                "\t\tpattern: /\\b(?:max-age=|includeSubDomains|preload)/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'safe': {",
                "\t\tpattern: /\\d{8,}/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'unsafe': {",
                "\t\tpattern: /\\d{1,7}/,",
                "\t\talias: 'function'",
                "\t}",
                "};"
            ]
        },
        "prism-hsts.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.hsts={directive:{pattern:/\\b(?:max-age=|includeSubDomains|preload)/,alias:\"keyword\"},safe:{pattern:/\\d{8,}/,alias:\"selector\"},unsafe:{pattern:/\\d{1,7}/,alias:\"function\"}};"
            ]
        },
        "prism-http.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.http = {",
                "\t\t'request-line': {",
                "\t\t\tpattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t// HTTP Verb",
                "\t\t\t\t'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,",
                "\t\t\t\t// Path or query argument",
                "\t\t\t\t'attr-name': /:\\w+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'response-status': {",
                "\t\t\tpattern: /^HTTP\\/1.[01] \\d+.*/m,",
                "\t\t\tinside: {",
                "\t\t\t\t// Status, e.g. 200 OK",
                "\t\t\t\t'property': {",
                "\t\t\t\t\tpattern: /(^HTTP\\/1.[01] )\\d+.*/i,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t// HTTP header name",
                "\t\t'header-name': {",
                "\t\t\tpattern: /^[\\w-]+:(?=.)/m,",
                "\t\t\talias: 'keyword'",
                "\t\t}",
                "\t};",
                "",
                "\t// Create a mapping of Content-Type headers to language definitions",
                "\tvar langs = Prism.languages;",
                "\tvar httpLanguages = {",
                "\t\t'application/javascript': langs.javascript,",
                "\t\t'application/json': langs.json || langs.javascript,",
                "\t\t'application/xml': langs.xml,",
                "\t\t'text/xml': langs.xml,",
                "\t\t'text/html': langs.html,",
                "\t\t'text/css': langs.css",
                "\t};",
                "",
                "\t// Declare which types can also be suffixes",
                "\tvar suffixTypes = {",
                "\t\t'application/json': true,",
                "\t\t'application/xml': true",
                "\t};",
                "",
                "\t/**",
                "\t * Returns a pattern for the given content type which matches it and any type which has it as a suffix.",
                "\t *",
                "\t * @param {string} contentType",
                "\t * @returns {string}",
                "\t */",
                "\tfunction getSuffixPattern(contentType) {",
                "\t\tvar suffix = contentType.replace(/^[a-z]+\\//, '');",
                "\t\tvar suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';",
                "\t\treturn '(?:' + contentType + '|' + suffixPattern + ')';",
                "\t}",
                "",
                "\t// Insert each content type parser that has its associated language",
                "\t// currently loaded.",
                "\tvar options;",
                "\tfor (var contentType in httpLanguages) {",
                "\t\tif (httpLanguages[contentType]) {",
                "\t\t\toptions = options || {};",
                "",
                "\t\t\tvar pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;",
                "\t\t\toptions[contentType] = {",
                "\t\t\t\tpattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\trest: httpLanguages[contentType]",
                "\t\t\t\t}",
                "\t\t\t};",
                "\t\t}",
                "\t}",
                "\tif (options) {",
                "\t\tPrism.languages.insertBefore('http', 'header-name', options);",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-http.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){t.languages.http={\"request-line\":{pattern:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,inside:{property:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\"attr-name\":/:\\w+/}},\"response-status\":{pattern:/^HTTP\\/1.[01] \\d+.*/m,inside:{property:{pattern:/(^HTTP\\/1.[01] )\\d+.*/i,lookbehind:!0}}},\"header-name\":{pattern:/^[\\w-]+:(?=.)/m,alias:\"keyword\"}};var a,e,n,i=t.languages,s={\"application/javascript\":i.javascript,\"application/json\":i.json||i.javascript,\"application/xml\":i.xml,\"text/xml\":i.xml,\"text/html\":i.html,\"text/css\":i.css},p={\"application/json\":!0,\"application/xml\":!0};for(var r in s)if(s[r]){a=a||{};var T=p[r]?(void 0,n=(e=r).replace(/^[a-z]+\\//,\"\"),\"(?:\"+e+\"|\\\\w+/(?:[\\\\w.-]+\\\\+)+\"+n+\"(?![+\\\\w.-]))\"):r;a[r]={pattern:RegExp(\"(content-type:\\\\s*\"+T+\"[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*\",\"i\"),lookbehind:!0,inside:{rest:s[r]}}}a&&t.languages.insertBefore(\"http\",\"header-name\",a)}(Prism);"
            ]
        },
        "prism-ichigojam.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// according to the offical reference (EN)",
                "// https://ichigojam.net/IchigoJam-en.html",
                "Prism.languages.ichigojam = {",
                "\t'comment': /(?:\\B'|REM)(?:[^\\n\\r]*)/i,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t'keyword': /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,",
                "\t'function': /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,",
                "\t'label': /(?:\\B@[^\\s]+)/i,",
                "\t'operator': /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,",
                "\t'punctuation': /[\\[,;:()\\]]/",
                "};"
            ]
        },
        "prism-ichigojam.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ichigojam={comment:/(?:\\B'|REM)(?:[^\\n\\r]*)/i,string:{pattern:/\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^_ +\\-.A-Z\\d])*\"/i,greedy:!0},number:/\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,keyword:/\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,function:/\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,label:/(?:\\B@[^\\s]+)/i,operator:/<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,punctuation:/[\\[,;:()\\]]/};"
            ]
        },
        "prism-icon.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.icon = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,",
                "\t'builtin-keyword': {",
                "\t\tpattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /\\$\\w+/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'keyword': /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,",
                "\t'operator': /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,",
                "\t'punctuation': /[\\[\\](){},;]/",
                "};"
            ]
        },
        "prism-icon.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.icon={comment:/#.*/,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,greedy:!0},number:/\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\"builtin-keyword\":{pattern:/&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,alias:\"variable\"},directive:{pattern:/\\$\\w+/,alias:\"builtin\"},keyword:/\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,function:/(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,operator:/[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,punctuation:/[\\[\\](){},;]/};"
            ]
        },
        "prism-inform7.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.inform7 = {",
                "\t'string': {",
                "\t\tpattern: /\"[^\"]*\"/,",
                "\t\tinside: {",
                "\t\t\t'substitution': {",
                "\t\t\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern:/\\[|\\]/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\tpattern: /\\[[^\\]]+\\]/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'title': {",
                "\t\tpattern: /^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,",
                "\t\talias: 'important'",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?\\w*|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'verb': {",
                "\t\tpattern: /(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'property': {",
                "\t\tpattern: /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'position': {",
                "\t\tpattern: /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'type': {",
                "\t\tpattern: /(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'punctuation': /[.,:;(){}]/",
                "};",
                "",
                "Prism.languages.inform7['string'].inside['substitution'].inside.rest = Prism.languages.inform7;",
                "// We don't want the remaining text in the substitution to be highlighted as the string.",
                "Prism.languages.inform7['string'].inside['substitution'].inside.rest.text = {",
                "\tpattern: /\\S(?:\\s*\\S)*/,",
                "\talias: 'comment'",
                "};"
            ]
        },
        "prism-inform7.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.inform7={string:{pattern:/\"[^\"]*\"/,inside:{substitution:{pattern:/\\[[^\\]]+\\]/,inside:{delimiter:{pattern:/\\[|\\]/,alias:\"punctuation\"}}}}},comment:{pattern:/\\[[^\\]]+\\]/,greedy:!0},title:{pattern:/^[ \\t]*(?:volume|book|part(?! of)|chapter|section|table)\\b.+/im,alias:\"important\"},number:{pattern:/(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?\\w*|\\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\\b(?!-)/i,lookbehind:!0},verb:{pattern:/(^|[^-])\\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\\b(?!-)/i,lookbehind:!0,alias:\"operator\"},keyword:{pattern:/(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,lookbehind:!0},property:{pattern:/(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,lookbehind:!0,alias:\"symbol\"},position:{pattern:/(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,lookbehind:!0,alias:\"keyword\"},type:{pattern:/(^|[^-])\\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,lookbehind:!0,alias:\"variable\"},punctuation:/[.,:;(){}]/},Prism.languages.inform7.string.inside.substitution.inside.rest=Prism.languages.inform7,Prism.languages.inform7.string.inside.substitution.inside.rest.text={pattern:/\\S(?:\\s*\\S)*/,alias:\"comment\"};"
            ]
        },
        "prism-ini.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ini= {",
                "\t'comment': /^[ \\t]*[;#].*$/m,",
                "\t'selector': /^[ \\t]*\\[.*?\\]/m,",
                "\t'constant': /^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,",
                "\t'attr-value': {",
                "\t\tpattern: /=.*/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^[=]/",
                "\t\t}",
                "\t}",
                "};"
            ]
        },
        "prism-ini.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ini={comment:/^[ \\t]*[;#].*$/m,selector:/^[ \\t]*\\[.*?\\]/m,constant:/^[ \\t]*[^\\s=]+?(?=[ \\t]*=)/m,\"attr-value\":{pattern:/=.*/,inside:{punctuation:/^[=]/}}};"
            ]
        },
        "prism-io.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.io = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'triple-quoted-string': {",
                "\t\tpattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,",
                "\t'builtin':/\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum|Sequence)\\b/,",
                "\t'boolean': /\\b(?:true|false|nil)\\b/,",
                "\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?/i,",
                "\t'operator': /[=!*/%+-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|(\\b(?:return|and|or|not)\\b)|@@?|\\?\\??|\\.\\./,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-io.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.io={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0},{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}],\"triple-quoted-string\":{pattern:/\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,greedy:!0,alias:\"string\"},string:{pattern:/\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0},keyword:/\\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,builtin:/\\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum|Sequence)\\b/,boolean:/\\b(?:true|false|nil)\\b/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e-?\\d+)?/i,operator:/[=!*/%+-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|(\\b(?:return|and|or|not)\\b)|@@?|\\?\\??|\\.\\./,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-j.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.j = {",
                "\t'comment': /\\bNB\\..*/,",
                "\t'string': {",
                "\t\tpattern: /'(?:''|[^'\\r\\n])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,",
                "\t'verb': {",
                "\t\t// Negative look-ahead prevents bad highlighting",
                "\t\t// of ^: ;. =. =: !. !:",
                "\t\tpattern: /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'number': /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_(?!\\.))/,",
                "\t'adverb': {",
                "\t\tpattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'operator': /[=a][.:]|_\\./,",
                "\t'conjunction': {",
                "\t\tpattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'punctuation': /[()]/",
                "};"
            ]
        },
        "prism-j.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.j={comment:/\\bNB\\..*/,string:{pattern:/'(?:''|[^'\\r\\n])*'/,greedy:!0},keyword:/\\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,verb:{pattern:/(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,alias:\"keyword\"},number:/\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:[ejpx]|ad|ar)_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_(?!\\.))/,adverb:{pattern:/[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,alias:\"builtin\"},operator:/[=a][.:]|_\\./,conjunction:{pattern:/&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,alias:\"variable\"},punctuation:/[()]/};"
            ]
        },
        "prism-java.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/;",
                "",
                "\t// based on the java naming conventions",
                "\tvar className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;",
                "",
                "\tPrism.languages.java = Prism.languages.extend('clike', {",
                "\t\t'class-name': [",
                "\t\t\tclassName,",
                "",
                "\t\t\t// variables and parameters",
                "\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)",
                "\t\t\t/\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/",
                "\t\t],",
                "\t\t'keyword': keywords,",
                "\t\t'function': [",
                "\t\t\tPrism.languages.clike.function,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\:\\:)[a-z_]\\w*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,",
                "\t\t'operator': {",
                "\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('java', 'class-name', {",
                "\t\t'annotation': {",
                "\t\t\talias: 'punctuation',",
                "\t\t\tpattern: /(^|[^.])@\\w+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'namespace': {",
                "\t\t\tpattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./,",
                "\t\t\t}",
                "\t\t},",
                "\t\t'generics': {",
                "\t\t\tpattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,",
                "\t\t\tinside: {",
                "\t\t\t\t'class-name': className,",
                "\t\t\t\t'keyword': keywords,",
                "\t\t\t\t'punctuation': /[<>(),.:]/,",
                "\t\t\t\t'operator': /[?&|]/",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "}(Prism));"
            ]
        },
        "prism-java.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=/\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/,a=/\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;e.languages.java=e.languages.extend(\"clike\",{\"class-name\":[a,/\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],keyword:t,function:[e.languages.clike.function,{pattern:/(\\:\\:)[a-z_]\\w*/,lookbehind:!0}],number:/\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0}}),e.languages.insertBefore(\"java\",\"class-name\",{annotation:{alias:\"punctuation\",pattern:/(^|[^.])@\\w+/,lookbehind:!0},namespace:{pattern:/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,lookbehind:!0,inside:{punctuation:/\\./}},generics:{pattern:/<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,inside:{\"class-name\":a,keyword:t,punctuation:/[<>(),.:]/,operator:/[?&|]/}}})}(Prism);"
            ]
        },
        "prism-javadoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar codeLines = {",
                "\t\t'code': {",
                "\t\t\tpattern: /(^(\\s*(?:\\*\\s*)*)).*[^*\\s].+$/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.java,",
                "\t\t\talias: 'language-java'",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.javadoc = Prism.languages.extend('javadoclike', {});",
                "\tPrism.languages.insertBefore('javadoc', 'keyword', {",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@(?:exception|throws|see|link|linkplain|value)\\s+(?:[a-z\\d]+\\.)*)[A-Z](?:\\w*[a-z]\\w*)?(?:\\.[A-Z](?:\\w*[a-z]\\w*)?)*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// @param <T> the first generic type parameter",
                "\t\t\t\tpattern: /(@param\\s+)<[A-Z]\\w*>/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /[.<>]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'namespace': {",
                "\t\t\tpattern: /(@(?:exception|throws|see|link|linkplain)\\s+)(?:[a-z\\d]+\\.)+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code-section': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\{@code\\s+)(?:[^{}]|\\{[^{}]*\\})+?(?=\\s*\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: codeLines",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(<(code|tt)>\\s*)[\\s\\S]+?(?=\\s*<\\/\\2>)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: codeLines",
                "\t\t\t}",
                "\t\t],",
                "\t\t'tag': Prism.languages.markup.tag,",
                "\t});",
                "",
                "\tPrism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);",
                "}(Prism));"
            ]
        },
        "prism-javadoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e={code:{pattern:/(^(\\s*(?:\\*\\s*)*)).*[^*\\s].+$/m,lookbehind:!0,inside:a.languages.java,alias:\"language-java\"}};a.languages.javadoc=a.languages.extend(\"javadoclike\",{}),a.languages.insertBefore(\"javadoc\",\"keyword\",{\"class-name\":[{pattern:/(@(?:exception|throws|see|link|linkplain|value)\\s+(?:[a-z\\d]+\\.)*)[A-Z](?:\\w*[a-z]\\w*)?(?:\\.[A-Z](?:\\w*[a-z]\\w*)?)*/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/(@param\\s+)<[A-Z]\\w*>/,lookbehind:!0,inside:{punctuation:/[.<>]/}}],namespace:{pattern:/(@(?:exception|throws|see|link|linkplain)\\s+)(?:[a-z\\d]+\\.)+/,lookbehind:!0,inside:{punctuation:/\\./}},\"code-section\":[{pattern:/(\\{@code\\s+)(?:[^{}]|\\{[^{}]*\\})+?(?=\\s*\\})/,lookbehind:!0,inside:e},{pattern:/(<(code|tt)>\\s*)[\\s\\S]+?(?=\\s*<\\/\\2>)/,lookbehind:!0,inside:e}],tag:a.languages.markup.tag}),a.languages.javadoclike.addSupport(\"java\",a.languages.javadoc)}(Prism);"
            ]
        },
        "prism-javadoclike.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar javaDocLike = Prism.languages.javadoclike = {",
                "\t\t'parameter': {",
                "\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\t// keywords are the first word in a line preceded be an `@` or surrounded by curly braces.",
                "\t\t\t// @word, {@word}",
                "\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'punctuation': /[{}]/",
                "\t};",
                "",
                "",
                "\t/**",
                "\t * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.",
                "\t *",
                "\t * @param {string} lang the language add doc comment support to.",
                "\t * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.",
                "\t */",
                "\tfunction docCommentSupport(lang, callback) {",
                "\t\tvar tokenName = 'doc-comment';",
                "",
                "\t\tvar grammar = Prism.languages[lang];",
                "\t\tif (!grammar) {",
                "\t\t\treturn;",
                "\t\t}",
                "\t\tvar token = grammar[tokenName];",
                "",
                "\t\tif (!token) {",
                "\t\t\t// add doc comment: /** */",
                "\t\t\tvar definition = {};",
                "\t\t\tdefinition[tokenName] = {",
                "\t\t\t\tpattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t};",
                "",
                "\t\t\tgrammar = Prism.languages.insertBefore(lang, 'comment', definition);",
                "\t\t\ttoken = grammar[tokenName];",
                "\t\t}",
                "",
                "\t\tif (token instanceof RegExp) { // convert regex to object",
                "\t\t\ttoken = grammar[tokenName] = { pattern: token };",
                "\t\t}",
                "",
                "\t\tif (Array.isArray(token)) {",
                "\t\t\tfor (var i = 0, l = token.length; i < l; i++) {",
                "\t\t\t\tif (token[i] instanceof RegExp) {",
                "\t\t\t\t\ttoken[i] = { pattern: token[i] };",
                "\t\t\t\t}",
                "\t\t\t\tcallback(token[i]);",
                "\t\t\t}",
                "\t\t} else {",
                "\t\t\tcallback(token);",
                "\t\t}",
                "\t}",
                "",
                "\t/**",
                "\t * Adds doc-comment support to the given languages for the given documentation language.",
                "\t *",
                "\t * @param {string[]|string} languages",
                "\t * @param {Object} docLanguage",
                "\t */",
                "\tfunction addSupport(languages, docLanguage) {",
                "\t\tif (typeof languages === 'string') {",
                "\t\t\tlanguages = [languages];",
                "\t\t}",
                "",
                "\t\tlanguages.forEach(function (lang) {",
                "\t\t\tdocCommentSupport(lang, function (pattern) {",
                "\t\t\t\tif (!pattern.inside) {",
                "\t\t\t\t\tpattern.inside = {};",
                "\t\t\t\t}",
                "\t\t\t\tpattern.inside.rest = docLanguage;",
                "\t\t\t});",
                "\t\t});",
                "\t}",
                "",
                "\tObject.defineProperty(javaDocLike, 'addSupport', { value: addSupport });",
                "",
                "\tjavaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);",
                "",
                "}(Prism));"
            ]
        },
        "prism-javadoclike.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(p){var a=p.languages.javadoclike={parameter:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,lookbehind:!0},keyword:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(a,\"addSupport\",{value:function(a,e){\"string\"==typeof a&&(a=[a]),a.forEach(function(a){!function(a,e){var n=\"doc-comment\",t=p.languages[a];if(t){var r=t[n];if(!r){var i={\"doc-comment\":{pattern:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,alias:\"comment\"}};r=(t=p.languages.insertBefore(a,\"comment\",i))[n]}if(r instanceof RegExp&&(r=t[n]={pattern:r}),Array.isArray(r))for(var o=0,s=r.length;o<s;o++)r[o]instanceof RegExp&&(r[o]={pattern:r[o]}),e(r[o]);else e(r)}}(a,function(a){a.inside||(a.inside={}),a.inside.rest=e})})}}),a.addSupport([\"java\",\"javascript\",\"php\"],a)}(Prism);"
            ]
        },
        "prism-javascript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javascript = Prism.languages.extend('clike', {",
                "\t'class-name': [",
                "\t\tPrism.languages.clike['class-name'],",
                "\t\t{",
                "\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /((?:^|})\\s*)(?:catch|finally)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t],",
                "\t'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,",
                "\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)",
                "\t'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,",
                "\t'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/",
                "});",
                "",
                "Prism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;",
                "",
                "Prism.languages.insertBefore('javascript', 'keyword', {",
                "\t'regex': {",
                "\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t// This must be declared before keyword because we use \"function\" inside the look-forward",
                "\t'function-variable': {",
                "\t\tpattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'parameter': [",
                "\t\t{",
                "\t\t\tpattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages.javascript",
                "\t\t}",
                "\t],",
                "\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('javascript', 'string', {",
                "\t'template-string': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|[^\\\\`])*`/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\tpattern: /^\\${|}$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "if (Prism.languages.markup) {",
                "\tPrism.languages.markup.tag.addInlined('script', 'javascript');",
                "}",
                "",
                "Prism.languages.js = Prism.languages.javascript;"
            ]
        },
        "prism-javascript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\\s*)(?:catch|finally)\\b/,lookbehind:!0},{pattern:/(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,lookbehind:!0}],number:/\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,function:/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,lookbehind:!0,greedy:!0},\"function-variable\":{pattern:/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,alias:\"function\"},parameter:[{pattern:/(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,inside:Prism.languages.javascript},{pattern:/(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|[^\\\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.markup.tag.addInlined(\"script\",\"javascript\"),Prism.languages.js=Prism.languages.javascript;"
            ]
        },
        "prism-javastacktrace.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javastacktrace = {",
                "",
                "\t// java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]",
                "\t// Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]",
                "\t// Caused by: com.example.myproject.MyProjectServletException",
                "\t// Caused by: MidLevelException: LowLevelException",
                "\t// Suppressed: Resource$CloseFailException: Resource ID = 0",
                "\t'summary': {",
                "\t\tpattern: /^[\\t ]*(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?:\\:.*)?$/m,",
                "\t\tinside: {",
                "\t\t\t'keyword': {",
                "\t\t\t\tpattern: /^(\\s*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "",
                "\t\t\t// the current thread if the summary starts with 'Exception in thread'",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /^(\\s*)\"[^\"]*\"/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'exceptions': {",
                "\t\t\t\tpattern: /^(:?\\s*)[\\w$.]+(?=:|$)/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'class-name': /[\\w$]+(?=$|:)/,",
                "\t\t\t\t\t'namespace': /[a-z]\\w*/,",
                "\t\t\t\t\t'punctuation': /[.:]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'message': {",
                "\t\t\t\tpattern: /(:\\s*)\\S.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t'punctuation': /[:]/",
                "\t\t}",
                "\t},",
                "",
                "\t// at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)",
                "\t// at org.hsqldb.jdbc.Util.throwError(Unknown Source) here could be some notes",
                "\t// at Util.<init>(Unknown Source)",
                "\t'stack-frame': {",
                "\t\tpattern: /^[\\t ]*at [\\w$.]+(?:<init>)?\\([^()]*\\)/m,",
                "\t\tinside: {",
                "\t\t\t'keyword': {",
                "\t\t\t\tpattern: /^(\\s*)at/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'source': [",
                "\t\t\t\t// (Main.java:15)",
                "\t\t\t\t// (Main.scala:15)",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\()\\w+.\\w+:\\d+(?=\\))/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'file': /^\\w+\\.\\w+/,",
                "\t\t\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t\t\t'line-number': {",
                "\t\t\t\t\t\t\tpattern: /\\d+/,",
                "\t\t\t\t\t\t\talias: 'number'",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t// (Unknown Source)",
                "\t\t\t\t// (Native Method)",
                "\t\t\t\t// (...something...)",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\()[^()]*(?=\\))/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'keyword': /^(?:Unknown Source|Native Method)$/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t],",
                "\t\t\t'class-name': /[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,",
                "\t\t\t'function': /(?:<init>|[\\w$]+)(?=\\()/,",
                "\t\t\t'namespace': /[a-z]\\w*/,",
                "\t\t\t'punctuation': /[.()]/",
                "\t\t}",
                "\t},",
                "",
                "\t// ... 32 more",
                "\t// ... 32 common frames omitted",
                "\t'more': {",
                "\t\tpattern: /^[\\t ]*\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\.{3}/,",
                "\t\t\t'number': /\\d+/,",
                "\t\t\t'keyword': /\\b[a-z]+(?: [a-z]+)*\\b/",
                "\t\t}",
                "\t}",
                "",
                "};"
            ]
        },
        "prism-javastacktrace.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.javastacktrace={summary:{pattern:/^[\\t ]*(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?:\\:.*)?$/m,inside:{keyword:{pattern:/^(\\s*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,lookbehind:!0},string:{pattern:/^(\\s*)\"[^\"]*\"/,lookbehind:!0},exceptions:{pattern:/^(:?\\s*)[\\w$.]+(?=:|$)/,lookbehind:!0,inside:{\"class-name\":/[\\w$]+(?=$|:)/,namespace:/[a-z]\\w*/,punctuation:/[.:]/}},message:{pattern:/(:\\s*)\\S.*/,lookbehind:!0,alias:\"string\"},punctuation:/[:]/}},\"stack-frame\":{pattern:/^[\\t ]*at [\\w$.]+(?:<init>)?\\([^()]*\\)/m,inside:{keyword:{pattern:/^(\\s*)at/,lookbehind:!0},source:[{pattern:/(\\()\\w+.\\w+:\\d+(?=\\))/,lookbehind:!0,inside:{file:/^\\w+\\.\\w+/,punctuation:/:/,\"line-number\":{pattern:/\\d+/,alias:\"number\"}}},{pattern:/(\\()[^()]*(?=\\))/,lookbehind:!0,inside:{keyword:/^(?:Unknown Source|Native Method)$/}}],\"class-name\":/[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,function:/(?:<init>|[\\w$]+)(?=\\()/,namespace:/[a-z]\\w*/,punctuation:/[.()]/}},more:{pattern:/^[\\t ]*\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,inside:{punctuation:/\\.{3}/,number:/\\d+/,keyword:/\\b[a-z]+(?: [a-z]+)*\\b/}}};"
            ]
        },
        "prism-jolie.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jolie = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,",
                "\t'builtin': /\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,",
                "\t'operator': /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,",
                "\t'symbol': /[|;@]/,",
                "\t'punctuation': /[,.]/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t}",
                "});",
                "",
                "delete Prism.languages.jolie['class-name'];",
                "",
                "Prism.languages.insertBefore( 'jolie', 'keyword', {",
                "\t'function':",
                "\t{",
                "\t\tpattern: /((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'aggregates': {",
                "\t\tpattern: /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'withExtension': {",
                "\t\t\t\tpattern: /\\bwith\\s+\\w+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword' : /\\bwith\\b/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /\\w+/",
                "\t\t\t},",
                "\t\t\t'punctuation': {",
                "\t\t\t\tpattern: /,/",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'redirects': {",
                "\t\tpattern: /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': {",
                "\t\t\t\tpattern: /,/",
                "\t\t\t},",
                "\t\t\t'function': {",
                "\t\t\t\tpattern: /\\w+/",
                "\t\t\t},",
                "\t\t\t'symbol': {",
                "\t\t\t\tpattern: /=>/",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-jolie.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jolie=Prism.languages.extend(\"clike\",{keyword:/\\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\\b/,builtin:/\\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\\b/,number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,operator:/-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[:?\\/%^]/,symbol:/[|;@]/,punctuation:/[,.]/,string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}}),delete Prism.languages.jolie[\"class-name\"],Prism.languages.insertBefore(\"jolie\",\"keyword\",{function:{pattern:/((?:\\b(?:outputPort|inputPort|in|service|courier)\\b|@)\\s*)\\w+/,lookbehind:!0},aggregates:{pattern:/(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,lookbehind:!0,inside:{withExtension:{pattern:/\\bwith\\s+\\w+/,inside:{keyword:/\\bwith\\b/}},function:{pattern:/\\w+/},punctuation:{pattern:/,/}}},redirects:{pattern:/(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,lookbehind:!0,inside:{punctuation:{pattern:/,/},function:{pattern:/\\w+/},symbol:{pattern:/=>/}}}});"
            ]
        },
        "prism-js-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.insertBefore('javascript', 'function-variable', {",
                "\t\t'method-variable': {",
                "\t\t\tpattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: ['function-variable', 'method', 'function', 'property-access']",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('javascript', 'function', {",
                "\t\t'method': {",
                "\t\t\tpattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: ['function', 'property-access']",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('javascript', 'constant', {",
                "\t\t'known-class-name': [",
                "\t\t\t{",
                "\t\t\t\t// standard built-ins",
                "\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",
                "\t\t\t\tpattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,",
                "\t\t\t\talias: 'class-name'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// errors",
                "\t\t\t\tpattern: /\\b(?:[A-Z]\\w*)Error\\b/,",
                "\t\t\t\talias: 'class-name'",
                "\t\t\t}",
                "\t\t]",
                "\t});",
                "",
                "\tPrism.languages.javascript['keyword'].unshift(",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:as|default|export|from|import)\\b/,",
                "\t\t\talias: 'module'",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\bnull\\b/,",
                "\t\t\talias: ['null', 'nil']",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\bundefined\\b/,",
                "\t\t\talias: 'nil'",
                "\t\t}",
                "\t);",
                "",
                "\tPrism.languages.insertBefore('javascript', 'operator', {",
                "\t\t'spread': {",
                "\t\t\tpattern: /\\.{3}/,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'arrow': {",
                "\t\t\tpattern: /=>/,",
                "\t\t\talias: 'operator'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('javascript', 'punctuation', {",
                "\t\t'property-access': {",
                "\t\t\tpattern: /(\\.\\s*)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'maybe-class-name': {",
                "\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'dom': {",
                "\t\t\t// this contains only a few commonly used DOM variables",
                "\t\t\tpattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "\t\t'console': {",
                "\t\t\tpattern: /\\bconsole(?=\\s*\\.)/,",
                "\t\t\talias: 'class-name'",
                "\t\t}",
                "\t});",
                "",
                "",
                "\t// add 'maybe-class-name' to tokens which might be a class name",
                "\tvar maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];",
                "",
                "\tfor (var i = 0; i < maybeClassNameTokens.length; i++) {",
                "\t\tvar token = maybeClassNameTokens[i];",
                "\t\tvar value = Prism.languages.javascript[token];",
                "",
                "\t\t// convert regex to object",
                "\t\tif (Prism.util.type(value) === 'RegExp') {",
                "\t\t\tvalue = Prism.languages.javascript[token] = {",
                "\t\t\t\tpattern: value",
                "\t\t\t};",
                "\t\t}",
                "",
                "\t\t// keep in mind that we don't support arrays",
                "",
                "\t\tvar inside = value.inside || {};",
                "\t\tvalue.inside = inside;",
                "",
                "\t\tinside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-js-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){a.languages.insertBefore(\"javascript\",\"function-variable\",{\"method-variable\":{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript[\"function-variable\"].pattern.source),lookbehind:!0,alias:[\"function-variable\",\"method\",\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"function\",{method:{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript.function.source),lookbehind:!0,alias:[\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"constant\",{\"known-class-name\":[{pattern:/\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,alias:\"class-name\"},{pattern:/\\b(?:[A-Z]\\w*)Error\\b/,alias:\"class-name\"}]}),a.languages.javascript.keyword.unshift({pattern:/\\b(?:as|default|export|from|import)\\b/,alias:\"module\"},{pattern:/\\bnull\\b/,alias:[\"null\",\"nil\"]},{pattern:/\\bundefined\\b/,alias:\"nil\"}),a.languages.insertBefore(\"javascript\",\"operator\",{spread:{pattern:/\\.{3}/,alias:\"operator\"},arrow:{pattern:/=>/,alias:\"operator\"}}),a.languages.insertBefore(\"javascript\",\"punctuation\",{\"property-access\":{pattern:/(\\.\\s*)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,lookbehind:!0},\"maybe-class-name\":{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,lookbehind:!0},dom:{pattern:/\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,alias:\"variable\"},console:{pattern:/\\bconsole(?=\\s*\\.)/,alias:\"class-name\"}});for(var e=[\"function\",\"function-variable\",\"method\",\"method-variable\",\"property-access\"],t=0;t<e.length;t++){var n=e[t],r=a.languages.javascript[n];\"RegExp\"===a.util.type(r)&&(r=a.languages.javascript[n]={pattern:r});var s=r.inside||{};(r.inside=s)[\"maybe-class-name\"]=/^[A-Z][\\s\\S]*/}}(Prism);"
            ]
        },
        "prism-jsdoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar javascript = Prism.languages.javascript;",
                "",
                "\tvar type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;",
                "\tvar parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';",
                "",
                "\tPrism.languages.jsdoc = Prism.languages.extend('javadoclike', {",
                "\t\t'parameter': {",
                "\t\t\t// @param {string} foo - foo bar",
                "\t\t\tpattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('jsdoc', 'keyword', {",
                "\t\t'optional-parameter': {",
                "\t\t\t// @param {string} [baz.foo=\"bar\"] foo bar",
                "\t\t\tpattern: RegExp(parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'parameter': {",
                "\t\t\t\t\tpattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'code': {",
                "\t\t\t\t\tpattern: /(=)[\\s\\S]*(?=\\]$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: javascript,",
                "\t\t\t\t\talias: 'language-javascript'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /[=[\\]]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp('(@[a-z]+\\\\s+)' + type),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /[.,:?=<>|{}()[\\]]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /\\./",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'example': {",
                "\t\t\tpattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'code': {",
                "\t\t\t\t\tpattern: /^(\\s*(?:\\*\\s*)?).+$/m,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\tinside: javascript,",
                "\t\t\t\t\talias: 'language-javascript'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);",
                "",
                "}(Prism));"
            ]
        },
        "prism-jsdoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=a.languages.javascript,n=\"{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}\",s=\"(@(?:param|arg|argument|property)\\\\s+(?:\"+n+\"\\\\s+)?)\";a.languages.jsdoc=a.languages.extend(\"javadoclike\",{parameter:{pattern:RegExp(s+\"[$\\\\w\\\\xA0-\\\\uFFFF.]+(?=\\\\s|$)\"),lookbehind:!0,inside:{punctuation:/\\./}}}),a.languages.insertBefore(\"jsdoc\",\"keyword\",{\"optional-parameter\":{pattern:RegExp(s+\"\\\\[[$\\\\w\\\\xA0-\\\\uFFFF.]+(?:=[^[\\\\]]+)?\\\\](?=\\\\s|$)\"),lookbehind:!0,inside:{parameter:{pattern:/(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,lookbehind:!0,inside:{punctuation:/\\./}},code:{pattern:/(=)[\\s\\S]*(?=\\]$)/,lookbehind:!0,inside:e,alias:\"language-javascript\"},punctuation:/[=[\\]]/}},\"class-name\":[{pattern:RegExp(\"(@[a-z]+\\\\s+)\"+n),lookbehind:!0,inside:{punctuation:/[.,:?=<>|{}()[\\]]/}},{pattern:/(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,lookbehind:!0,inside:{punctuation:/\\./}}],example:{pattern:/(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,lookbehind:!0,inside:{code:{pattern:/^(\\s*(?:\\*\\s*)?).+$/m,lookbehind:!0,inside:e,alias:\"language-javascript\"}}}}),a.languages.javadoclike.addSupport(\"javascript\",a.languages.jsdoc)}(Prism);"
            ]
        },
        "prism-json.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.json = {",
                "\t'property': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t'number': /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,",
                "\t'punctuation': /[{}[\\],]/,",
                "\t'operator': /:/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'null': {",
                "\t\tpattern: /\\bnull\\b/,",
                "\t\talias: 'keyword'",
                "\t}",
                "};"
            ]
        },
        "prism-json.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.json={property:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,greedy:!0},string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,greedy:!0},comment:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,number:/-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,punctuation:/[{}[\\],]/,operator:/:/,boolean:/\\b(?:true|false)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"}};"
            ]
        },
        "prism-json5.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar string = /(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/",
                "",
                "\tPrism.languages.json5 = Prism.languages.extend('json', {",
                "\t\t'property': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(string.source + '(?=\\\\s*:)'),",
                "\t\t\t\tgreedy: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*:)/,",
                "\t\t\t\talias: 'unquoted'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'string': {",
                "\t\t\tpattern: string,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': /[+-]?(?:NaN|Infinity|0x[a-fA-F\\d]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?)/",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-json5.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var e=/(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/;n.languages.json5=n.languages.extend(\"json\",{property:[{pattern:RegExp(e.source+\"(?=\\\\s*:)\"),greedy:!0},{pattern:/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*:)/,alias:\"unquoted\"}],string:{pattern:e,greedy:!0},number:/[+-]?(?:NaN|Infinity|0x[a-fA-F\\d]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?)/})}(Prism);"
            ]
        },
        "prism-jsonp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jsonp = Prism.languages.extend('json', {",
                "\t'punctuation': /[{}[\\]();,.]/",
                "});",
                "",
                "Prism.languages.insertBefore('jsonp', 'punctuation', {",
                "\t'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/",
                "});"
            ]
        },
        "prism-jsonp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.jsonp=Prism.languages.extend(\"json\",{punctuation:/[{}[\\]();,.]/}),Prism.languages.insertBefore(\"jsonp\",\"punctuation\",{function:/[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/});"
            ]
        },
        "prism-jsx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "var javascript = Prism.util.clone(Prism.languages.javascript);",
                "",
                "Prism.languages.jsx = Prism.languages.extend('markup', javascript);",
                "Prism.languages.jsx.tag.pattern= /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;",
                "",
                "Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;",
                "Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;",
                "Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;",
                "",
                "Prism.languages.insertBefore('inside', 'attr-name', {",
                "\t'spread': {",
                "\t\tpattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\.{3}|[{}.]/,",
                "\t\t\t'attr-value': /\\w+/",
                "\t\t}",
                "\t}",
                "}, Prism.languages.jsx.tag);",
                "",
                "Prism.languages.insertBefore('inside', 'attr-value',{",
                "\t'script': {",
                "\t\t// Allow for two levels of nesting",
                "\t\tpattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,",
                "\t\tinside: {",
                "\t\t\t'script-punctuation': {",
                "\t\t\t\tpattern: /^=(?={)/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.jsx",
                "\t\t},",
                "\t\t'alias': 'language-javascript'",
                "\t}",
                "}, Prism.languages.jsx.tag);",
                "",
                "// The following will handle plain text inside tags",
                "var stringifyToken = function (token) {",
                "\tif (!token) {",
                "\t\treturn '';",
                "\t}",
                "\tif (typeof token === 'string') {",
                "\t\treturn token;",
                "\t}",
                "\tif (typeof token.content === 'string') {",
                "\t\treturn token.content;",
                "\t}",
                "\treturn token.content.map(stringifyToken).join('');",
                "};",
                "",
                "var walkTokens = function (tokens) {",
                "\tvar openedTags = [];",
                "\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\tvar token = tokens[i];",
                "\t\tvar notTagNorBrace = false;",
                "",
                "\t\tif (typeof token !== 'string') {",
                "\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {",
                "\t\t\t\t// We found a tag, now find its kind",
                "",
                "\t\t\t\tif (token.content[0].content[0].content === '</') {",
                "\t\t\t\t\t// Closing tag",
                "\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {",
                "\t\t\t\t\t\t// Pop matching opening tag",
                "\t\t\t\t\t\topenedTags.pop();",
                "\t\t\t\t\t}",
                "\t\t\t\t} else {",
                "\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {",
                "\t\t\t\t\t\t// Autoclosed tag, ignore",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\t// Opening tag",
                "\t\t\t\t\t\topenedTags.push({",
                "\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),",
                "\t\t\t\t\t\t\topenedBraces: 0",
                "\t\t\t\t\t\t});",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {",
                "",
                "\t\t\t\t// Here we might have entered a JSX context inside a tag",
                "\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;",
                "",
                "\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {",
                "",
                "\t\t\t\t// Here we might have left a JSX context inside a tag",
                "\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;",
                "",
                "\t\t\t} else {",
                "\t\t\t\tnotTagNorBrace = true",
                "\t\t\t}",
                "\t\t}",
                "\t\tif (notTagNorBrace || typeof token === 'string') {",
                "\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {",
                "\t\t\t\t// Here we are inside a tag, and not inside a JSX context.",
                "\t\t\t\t// That's plain text: drop any tokens matched.",
                "\t\t\t\tvar plainText = stringifyToken(token);",
                "",
                "\t\t\t\t// And merge text with adjacent text",
                "\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {",
                "\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);",
                "\t\t\t\t\ttokens.splice(i + 1, 1);",
                "\t\t\t\t}",
                "\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {",
                "\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;",
                "\t\t\t\t\ttokens.splice(i - 1, 1);",
                "\t\t\t\t\ti--;",
                "\t\t\t\t}",
                "",
                "\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\tif (token.content && typeof token.content !== 'string') {",
                "\t\t\twalkTokens(token.content);",
                "\t\t}",
                "\t}",
                "};",
                "",
                "Prism.hooks.add('after-tokenize', function (env) {",
                "\tif (env.language !== 'jsx' && env.language !== 'tsx') {",
                "\t\treturn;",
                "\t}",
                "\twalkTokens(env.tokens);",
                "});",
                "",
                "}(Prism));"
            ]
        },
        "prism-jsx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(i){var t=i.util.clone(i.languages.javascript);i.languages.jsx=i.languages.extend(\"markup\",t),i.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i,i.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,i.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i,i.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,i.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,\"attr-value\":/\\w+/}}},i.languages.jsx.tag),i.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,inside:{\"script-punctuation\":{pattern:/^=(?={)/,alias:\"punctuation\"},rest:i.languages.jsx},alias:\"language-javascript\"}},i.languages.jsx.tag);var o=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(o).join(\"\"):\"\"},p=function(t){for(var n=[],e=0;e<t.length;e++){var a=t[e],s=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<n.length&&n[n.length-1].tagName===o(a.content[0].content[1])&&n.pop():\"/>\"===a.content[a.content.length-1].content||n.push({tagName:o(a.content[0].content[1]),openedBraces:0}):0<n.length&&\"punctuation\"===a.type&&\"{\"===a.content?n[n.length-1].openedBraces++:0<n.length&&0<n[n.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?n[n.length-1].openedBraces--:s=!0),(s||\"string\"==typeof a)&&0<n.length&&0===n[n.length-1].openedBraces){var g=o(a);e<t.length-1&&(\"string\"==typeof t[e+1]||\"plain-text\"===t[e+1].type)&&(g+=o(t[e+1]),t.splice(e+1,1)),0<e&&(\"string\"==typeof t[e-1]||\"plain-text\"===t[e-1].type)&&(g=o(t[e-1])+g,t.splice(e-1,1),e--),t[e]=new i.Token(\"plain-text\",g,null,g)}a.content&&\"string\"!=typeof a.content&&p(a.content)}};i.hooks.add(\"after-tokenize\",function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||p(t.tokens)})}(Prism);"
            ]
        },
        "prism-julia.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.julia= {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2/,",
                "\t'keyword' : /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|let|local|macro|module|print|println|quote|return|try|type|typealias|using|while)\\b/,",
                "\t'boolean' : /\\b(?:true|false)\\b/,",
                "\t'number' : /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+\\.?\\d*|\\.\\d+)(?:[efp][+-]?\\d+)?j?/i,",
                "\t'operator': /[-+*^%÷&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,",
                "\t'punctuation' : /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-julia.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.julia={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},string:/(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2/,keyword:/\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|let|local|macro|module|print|println|quote|return|try|type|typealias|using|while)\\b/,boolean:/\\b(?:true|false)\\b/,number:/(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+\\.?\\d*|\\.\\d+)(?:[efp][+-]?\\d+)?j?/i,operator:/[-+*^%÷&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-keyman.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.keyman = {",
                "\t'comment': /\\bc\\s.*/i,",
                "\t'function': /\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,  // virtual key",
                "\t'string': /(\"|').*?\\1/,",
                "\t'bold': [   // header statements, system stores and variable system stores",
                "\t\t/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i,",
                "\t\t/\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i",
                "\t],",
                "\t'keyword': /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,  // rule keywords",
                "\t'atrule': /\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,   // structural keywords",
                "\t'number': /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i, // U+####, x###, d### characters and numbers",
                "\t'operator': /[+>\\\\,()]/,",
                "\t'tag': /\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i   // prefixes",
                "};"
            ]
        },
        "prism-keyman.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.keyman={comment:/\\bc\\s.*/i,function:/\\[\\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\\s+)*(?:[TKU]_[\\w?]+|\".+?\"|'.+?')\\s*\\]/i,string:/(\"|').*?\\1/,bold:[/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\\b/i,/\\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\\b/i],keyword:/\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\\b/i,atrule:/\\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\\b/i,number:/\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,operator:/[+>\\\\,()]/,tag:/\\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i};"
            ]
        },
        "prism-kotlin.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.kotlin = Prism.languages.extend('clike', {",
                "\t\t'keyword': {",
                "\t\t\t// The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get",
                "\t\t\tpattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': [",
                "\t\t\t/\\w+(?=\\s*\\()/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.)\\w+(?=\\s*\\{)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'number': /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,",
                "\t\t'operator': /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/",
                "\t});",
                "",
                "\tdelete Prism.languages.kotlin[\"class-name\"];",
                "",
                "\tPrism.languages.insertBefore('kotlin', 'string', {",
                "\t\t'raw-string': {",
                "\t\t\tpattern: /(\"\"\"|''')[\\s\\S]*?\\1/,",
                "\t\t\talias: 'string'",
                "\t\t\t// See interpolation below",
                "\t\t}",
                "\t});",
                "\tPrism.languages.insertBefore('kotlin', 'keyword', {",
                "\t\t'annotation': {",
                "\t\t\tpattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,",
                "\t\t\talias: 'builtin'",
                "\t\t}",
                "\t});",
                "\tPrism.languages.insertBefore('kotlin', 'function', {",
                "\t\t'label': {",
                "\t\t\tpattern: /\\w+@|@\\w+/,",
                "\t\t\talias: 'symbol'",
                "\t\t}",
                "\t});",
                "",
                "\tvar interpolation = [",
                "\t\t{",
                "\t\t\tpattern: /\\$\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\tdelimiter: {",
                "\t\t\t\t\tpattern: /^\\$\\{|\\}$/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.kotlin",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\$\\w+/,",
                "\t\t\talias: 'variable'",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {",
                "\t\tinterpolation: interpolation",
                "\t};",
                "",
                "}(Prism));"
            ]
        },
        "prism-kotlin.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.kotlin=e.languages.extend(\"clike\",{keyword:{pattern:/(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,lookbehind:!0},function:[/\\w+(?=\\s*\\()/,{pattern:/(\\.)\\w+(?=\\s*\\{)/,lookbehind:!0}],number:/\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,operator:/\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/}),delete e.languages.kotlin[\"class-name\"],e.languages.insertBefore(\"kotlin\",\"string\",{\"raw-string\":{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,alias:\"string\"}}),e.languages.insertBefore(\"kotlin\",\"keyword\",{annotation:{pattern:/\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,alias:\"builtin\"}}),e.languages.insertBefore(\"kotlin\",\"function\",{label:{pattern:/\\w+@|@\\w+/,alias:\"symbol\"}});var n=[{pattern:/\\$\\{[^}]+\\}/,inside:{delimiter:{pattern:/^\\$\\{|\\}$/,alias:\"variable\"},rest:e.languages.kotlin}},{pattern:/\\$\\w+/,alias:\"variable\"}];e.languages.kotlin.string.inside=e.languages.kotlin[\"raw-string\"].inside={interpolation:n}}(Prism);"
            ]
        },
        "prism-latex.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tvar funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,",
                "\t    insideEqu = {",
                "\t\t    'equation-command': {",
                "\t\t\t    pattern: funcPattern,",
                "\t\t\t    alias: 'regex'",
                "\t\t    }",
                "\t    };",
                "",
                "\tPrism.languages.latex = {",
                "\t\t'comment': /%.*/m,",
                "\t\t// the verbatim environment prints whitespace to the document",
                "\t\t'cdata':  {",
                "\t\t\tpattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/*",
                "\t\t * equations can be between $ $ or \\( \\) or \\[ \\]",
                "\t\t * (all are multiline)",
                "\t\t */",
                "\t\t'equation': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,",
                "\t\t\t\tinside: insideEqu,",
                "\t\t\t\talias: 'string'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: insideEqu,",
                "\t\t\t\talias: 'string'",
                "\t\t\t}",
                "\t\t],",
                "\t\t/*",
                "\t\t * arguments which are keywords or references are highlighted",
                "\t\t * as keywords",
                "\t\t */",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'url': {",
                "\t\t\tpattern: /(\\\\url\\{)[^}]+(?=\\})/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/*",
                "\t\t * section or chapter headlines are highlighted as bold so that",
                "\t\t * they stand out more",
                "\t\t */",
                "\t\t'headline': {",
                "\t\t\tpattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'function': {",
                "\t\t\tpattern: funcPattern,",
                "\t\t\talias: 'selector'",
                "\t\t},",
                "\t\t'punctuation': /[[\\]{}&]/",
                "\t};",
                "})(Prism);"
            ]
        },
        "prism-latex.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=/\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,n={\"equation-command\":{pattern:e,alias:\"regex\"}};Prism.languages.latex={comment:/%.*/m,cdata:{pattern:/(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,lookbehind:!0},equation:[{pattern:/\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,inside:n,alias:\"string\"},{pattern:/(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,lookbehind:!0,inside:n,alias:\"string\"}],keyword:{pattern:/(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,lookbehind:!0},url:{pattern:/(\\\\url\\{)[^}]+(?=\\})/,lookbehind:!0},headline:{pattern:/(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,lookbehind:!0,alias:\"class-name\"},function:{pattern:e,alias:\"selector\"},punctuation:/[[\\]{}&]/}}();"
            ]
        },
        "prism-less.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* FIXME :",
                " :extend() is not handled specifically : its highlighting is buggy.",
                " Mixin usage must be inside a ruleset to be highlighted.",
                " At-rules (e.g. import) containing interpolations are buggy.",
                " Detached rulesets are highlighted as at-rules.",
                " A comment before a mixin usage prevents the latter to be properly highlighted.",
                " */",
                "",
                "Prism.languages.less = Prism.languages.extend('css', {",
                "\t'comment': [",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'atrule': {",
                "\t\tpattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[:()]/",
                "\t\t}",
                "\t},",
                "\t// selectors and mixins are considered the same",
                "\t'selector': {",
                "\t\tpattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,",
                "\t\tinside: {",
                "\t\t\t// mixin parameters",
                "\t\t\t'variable': /@+[\\w-]+/",
                "\t\t}",
                "\t},",
                "",
                "\t'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,",
                "\t'operator': /[+\\-*\\/]/",
                "});",
                "",
                "Prism.languages.insertBefore('less', 'property', {",
                "\t'variable': [",
                "\t\t// Variable declaration (the colon must be consumed!)",
                "\t\t{",
                "\t\t\tpattern: /@[\\w-]+\\s*:/,",
                "\t\t\tinside: {",
                "\t\t\t\t\"punctuation\": /:/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Variable usage",
                "\t\t/@@?[\\w-]+/",
                "\t],",
                "\t'mixin-usage': {",
                "\t\tpattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t}",
                "});"
            ]
        },
        "prism-less.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.less=Prism.languages.extend(\"css\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0}],atrule:{pattern:/@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,inside:{variable:/@+[\\w-]+/}},property:/(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,operator:/[+\\-*\\/]/}),Prism.languages.insertBefore(\"less\",\"property\",{variable:[{pattern:/@[\\w-]+\\s*:/,inside:{punctuation:/:/}},/@@?[\\w-]+/],\"mixin-usage\":{pattern:/([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,lookbehind:!0,alias:\"function\"}});"
            ]
        },
        "prism-liquid.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.liquid = {",
                "\t'keyword': /\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,",
                "\t'number': /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-liquid.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.liquid={keyword:/\\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\\b/,number:/\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,operator:{pattern:/(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,lookbehind:!0},function:{pattern:/(^|[\\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\\s;|&])/,lookbehind:!0}};"
            ]
        },
        "prism-lisp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t// Functions to construct regular expressions",
                "\t// simple form",
                "\t// e.g. (interactive ... or (interactive)",
                "\tfunction simple_form(name) {",
                "\t\treturn RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');",
                "\t}",
                "\t// booleans and numbers",
                "\tfunction primitive(pattern) {",
                "\t\treturn RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');",
                "\t}",
                "",
                "\t// Patterns in regular expressions",
                "",
                "\t// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html",
                "\t// & and : are excluded as they are usually used for special purposes",
                "\tvar symbol = '[-+*/_~!@$%^=<>{}\\\\w]+';",
                "\t// symbol starting with & used in function arguments",
                "\tvar marker = '&' + symbol;",
                "\t// Open parenthesis for look-behind",
                "\tvar par = '(\\\\()';",
                "\tvar endpar = '(?=\\\\))';",
                "\t// End the pattern with look-ahead space",
                "\tvar space = '(?=\\\\s)';",
                "",
                "\tvar language = {",
                "\t\t// Three or four semicolons are considered a heading.",
                "\t\t// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html",
                "\t\theading: {",
                "\t\t\tpattern: /;;;.*/,",
                "\t\t\talias: ['comment', 'title']",
                "\t\t},",
                "\t\tcomment: /;.*/,",
                "\t\tstring: {",
                "\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\targument: /[-A-Z]+(?=[.,\\s])/,",
                "\t\t\t\tsymbol: RegExp('`' + symbol + \"'\")",
                "\t\t\t}",
                "\t\t},",
                "\t\t'quoted-symbol': {",
                "\t\t\tpattern: RegExp(\"#?'\" + symbol),",
                "\t\t\talias: ['variable', 'symbol']",
                "\t\t},",
                "\t\t'lisp-property': {",
                "\t\t\tpattern: RegExp(':' + symbol),",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\tsplice: {",
                "\t\t\tpattern: RegExp(',@?' + symbol),",
                "\t\t\talias: ['symbol', 'variable']",
                "\t\t},",
                "\t\tkeyword: [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(",
                "\t\t\t\t\tpar +",
                "\t\t\t\t\t\t'(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +",
                "\t\t\t\t\t\tspace",
                "\t\t\t\t),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp(",
                "\t\t\t\t\tpar + '(?:for|do|collect|return|finally|append|concat|in|by)' + space",
                "\t\t\t\t),",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t],",
                "\t\tdeclare: {",
                "\t\t\tpattern: simple_form('declare'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\tinteractive: {",
                "\t\t\tpattern: simple_form('interactive'),",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\tboolean: {",
                "\t\t\tpattern: primitive('(?:t|nil)'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tnumber: {",
                "\t\t\tpattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tdefvar: {",
                "\t\t\tpattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^def[a-z]+/,",
                "\t\t\t\tvariable: RegExp(symbol)",
                "\t\t\t}",
                "\t\t},",
                "\t\tdefun: {",
                "\t\t\tpattern: RegExp(",
                "\t\t\t\tpar +",
                "\t\t\t\t\t'(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +",
                "\t\t\t\t\tsymbol +",
                "\t\t\t\t\t'\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'",
                "\t\t\t),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^(?:cl-)?def\\S+/,",
                "\t\t\t\t// See below, this property needs to be defined later so that it can",
                "\t\t\t\t// reference the language object.",
                "\t\t\t\targuments: null,",
                "\t\t\t\tfunction: {",
                "\t\t\t\t\tpattern: RegExp('(^\\\\s)' + symbol),",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\tpunctuation: /[()]/",
                "\t\t\t}",
                "\t\t},",
                "\t\tlambda: {",
                "\t\t\tpattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^lambda/,",
                "\t\t\t\t// See below, this property needs to be defined later so that it can",
                "\t\t\t\t// reference the language object.",
                "\t\t\t\targuments: null,",
                "\t\t\t\tpunctuation: /[()]/",
                "\t\t\t}",
                "\t\t},",
                "\t\tcar: {",
                "\t\t\tpattern: RegExp(par + symbol),",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tpunctuation: [",
                "\t\t\t// open paren, brackets, and close paren",
                "\t\t\t/(['`,]?\\(|[)\\[\\]])/,",
                "\t\t\t// cons",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)\\.(?=\\s)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t]",
                "\t};",
                "",
                "\tvar arg = {",
                "\t\t'lisp-marker': RegExp(marker),",
                "\t\trest: {",
                "\t\t\targument: {",
                "\t\t\t\tpattern: RegExp(symbol),",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\tvarform: {",
                "\t\t\t\tpattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tstring: language.string,",
                "\t\t\t\t\tboolean: language.boolean,",
                "\t\t\t\t\tnumber: language.number,",
                "\t\t\t\t\tsymbol: language.symbol,",
                "\t\t\t\t\tpunctuation: /[()]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tvar forms = '\\\\S+(?:\\\\s+\\\\S+)*';",
                "",
                "\tvar arglist = {",
                "\t\tpattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'rest-vars': {",
                "\t\t\t\tpattern: RegExp('&(?:rest|body)\\\\s+' + forms),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\t'other-marker-vars': {",
                "\t\t\t\tpattern: RegExp('&(?:optional|aux)\\\\s+' + forms),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\tkeys: {",
                "\t\t\t\tpattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),",
                "\t\t\t\tinside: arg",
                "\t\t\t},",
                "\t\t\targument: {",
                "\t\t\t\tpattern: RegExp(symbol),",
                "\t\t\t\talias: 'variable'",
                "\t\t\t},",
                "\t\t\tpunctuation: /[()]/",
                "\t\t}",
                "\t};",
                "",
                "\tlanguage['lambda'].inside.arguments = arglist;",
                "\tlanguage['defun'].inside.arguments = Prism.util.clone(arglist);",
                "\tlanguage['defun'].inside.arguments.inside.sublist = arglist;",
                "",
                "\tPrism.languages.lisp = language;",
                "\tPrism.languages.elisp = language;",
                "\tPrism.languages.emacs = language;",
                "\tPrism.languages['emacs-lisp'] = language;",
                "}(Prism));"
            ]
        },
        "prism-lisp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){function n(e){return RegExp(\"(\\\\()\"+e+\"(?=[\\\\s\\\\)])\")}function a(e){return RegExp(\"([\\\\s([])\"+e+\"(?=[\\\\s)])\")}var t=\"[-+*/_~!@$%^=<>{}\\\\w]+\",r=\"(\\\\()\",i=\"(?=\\\\))\",s=\"(?=\\\\s)\",o={heading:{pattern:/;;;.*/,alias:[\"comment\",\"title\"]},comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\\s])/,symbol:RegExp(\"`\"+t+\"'\")}},\"quoted-symbol\":{pattern:RegExp(\"#?'\"+t),alias:[\"variable\",\"symbol\"]},\"lisp-property\":{pattern:RegExp(\":\"+t),alias:\"property\"},splice:{pattern:RegExp(\",@?\"+t),alias:[\"symbol\",\"variable\"]},keyword:[{pattern:RegExp(r+\"(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)\"+s),lookbehind:!0},{pattern:RegExp(r+\"(?:for|do|collect|return|finally|append|concat|in|by)\"+s),lookbehind:!0}],declare:{pattern:n(\"declare\"),lookbehind:!0,alias:\"keyword\"},interactive:{pattern:n(\"interactive\"),lookbehind:!0,alias:\"keyword\"},boolean:{pattern:a(\"(?:t|nil)\"),lookbehind:!0},number:{pattern:a(\"[-+]?\\\\d+(?:\\\\.\\\\d*)?\"),lookbehind:!0},defvar:{pattern:RegExp(r+\"def(?:var|const|custom|group)\\\\s+\"+t),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(t)}},defun:{pattern:RegExp(r+\"(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+\"+t+\"\\\\s+\\\\([\\\\s\\\\S]*?\\\\)\"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\\S+/,arguments:null,function:{pattern:RegExp(\"(^\\\\s)\"+t),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(r+\"lambda\\\\s+\\\\((?:&?\"+t+\"\\\\s*)*\\\\)\"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(r+t),lookbehind:!0},punctuation:[/(['`,]?\\(|[)\\[\\]])/,{pattern:/(\\s)\\.(?=\\s)/,lookbehind:!0}]},l={\"lisp-marker\":RegExp(\"&[-+*/_~!@$%^=<>{}\\\\w]+\"),rest:{argument:{pattern:RegExp(t),alias:\"variable\"},varform:{pattern:RegExp(r+t+\"\\\\s+\\\\S[\\\\s\\\\S]*\"+i),lookbehind:!0,inside:{string:o.string,boolean:o.boolean,number:o.number,symbol:o.symbol,punctuation:/[()]/}}}},p=\"\\\\S+(?:\\\\s+\\\\S+)*\",d={pattern:RegExp(r+\"[\\\\s\\\\S]*\"+i),lookbehind:!0,inside:{\"rest-vars\":{pattern:RegExp(\"&(?:rest|body)\\\\s+\"+p),inside:l},\"other-marker-vars\":{pattern:RegExp(\"&(?:optional|aux)\\\\s+\"+p),inside:l},keys:{pattern:RegExp(\"&key\\\\s+\"+p+\"(?:\\\\s+&allow-other-keys)?\"),inside:l},argument:{pattern:RegExp(t),alias:\"variable\"},punctuation:/[()]/}};o.lambda.inside.arguments=d,o.defun.inside.arguments=e.util.clone(d),o.defun.inside.arguments.inside.sublist=d,e.languages.lisp=o,e.languages.elisp=o,e.languages.emacs=o,e.languages[\"emacs-lisp\"]=o}(Prism);"
            ]
        },
        "prism-livescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.livescript = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'interpolated-string': {",
                "\t\t/* Look-behind and look-ahead prevents wrong behavior of the greedy pattern",
                "\t\t* forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */",
                "\t\tpattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /(^|[^\\\\])#\\{[^}]+\\}/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation-punctuation': {",
                "\t\t\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t},",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /<\\[[\\s\\S]*?\\]>/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t/\\\\[^\\s,;\\])}]+/",
                "\t],",
                "\t'regex': [",
                "\t\t{",
                "\t\t\tpattern: /\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'comment': {",
                "\t\t\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'keyword': {",
                "\t\tpattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword-operator': {",
                "\t\tpattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'boolean': {",
                "\t\tpattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'argument': {",
                "\t\t// Don't match .&. nor &&",
                "\t\tpattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,",
                "\t'identifier': /[a-z_](?:-?[a-z]|[\\d_])*/i,",
                "\t'operator': [",
                "\t\t// Spaced .",
                "\t\t{",
                "\t\t\tpattern: /( )\\.(?= )/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t// Full list, in order:",
                "\t\t// .= .~ .. ...",
                "\t\t// .&. .^. .<<. .>>. .>>>.",
                "\t\t// := :: ::=",
                "\t\t// &&",
                "\t\t// || |>",
                "\t\t// < << <<< <<<<",
                "\t\t// <- <-- <-! <--!",
                "\t\t// <~ <~~ <~! <~~!",
                "\t\t// <| <= <?",
                "\t\t// > >> >= >?",
                "\t\t// - -- -> -->",
                "\t\t// + ++",
                "\t\t// @ @@",
                "\t\t// % %%",
                "\t\t// * **",
                "\t\t// ! != !~=",
                "\t\t// !~> !~~>",
                "\t\t// !-> !-->",
                "\t\t// ~ ~> ~~> ~=",
                "\t\t// = ==",
                "\t\t// ^ ^^",
                "\t\t// / ?",
                "\t\t/\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/",
                "\t],",
                "\t'punctuation': /[(){}\\[\\]|.,:;`]/",
                "};",
                "",
                "Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;"
            ]
        },
        "prism-livescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.livescript={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}],\"interpolated-string\":{pattern:/(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,lookbehind:!0},interpolation:{pattern:/(^|[^\\\\])#\\{[^}]+\\}/m,lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^#\\{|\\}$/,alias:\"variable\"}}},string:/[\\s\\S]+/}},string:[{pattern:/('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},{pattern:/<\\[[\\s\\S]*?\\]>/,greedy:!0},/\\\\[^\\s,;\\])}]+/],regex:[{pattern:/\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,greedy:!0,inside:{comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}}},{pattern:/\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}/,greedy:!0}],keyword:{pattern:/(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,lookbehind:!0},\"keyword-operator\":{pattern:/(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,lookbehind:!0,alias:\"operator\"},boolean:{pattern:/(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,lookbehind:!0},argument:{pattern:/(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,lookbehind:!0,alias:\"variable\"},number:/\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,identifier:/[a-z_](?:-?[a-z]|[\\d_])*/i,operator:[{pattern:/( )\\.(?= )/,lookbehind:!0},/\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],punctuation:/[(){}\\[\\]|.,:;`]/},Prism.languages.livescript[\"interpolated-string\"].inside.interpolation.inside.rest=Prism.languages.livescript;"
            ]
        },
        "prism-lolcode.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lolcode = {",
                "\t'comment': [",
                "\t\t/\\bOBTW\\s+[\\s\\S]*?\\s+TLDR\\b/,",
                "\t\t/\\bBTW.+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?::.|[^\"])*\"/,",
                "\t\tinside: {",
                "\t\t\t'variable': /:\\{[^}]+\\}/,",
                "\t\t\t'symbol': [",
                "\t\t\t\t/:\\([a-f\\d]+\\)/i,",
                "\t\t\t\t/:\\[[^\\]]+\\]/,",
                "\t\t\t\t/:[)>o\":]/",
                "\t\t\t]",
                "\t\t},",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /(?:\\B-)?(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)/,",
                "\t'symbol': {",
                "\t\tpattern: /(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'keyword': /A(?=\\s)/",
                "\t\t}",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/'Z(?=\\s|,|$)/",
                "\t],",
                "\t'boolean': {",
                "\t\tpattern: /(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': {",
                "\t\tpattern: /(^|\\s)IT(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': {",
                "\t\tpattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /\\.{3}|…|,|!/",
                "};"
            ]
        },
        "prism-lolcode.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lolcode={comment:[/\\bOBTW\\s+[\\s\\S]*?\\s+TLDR\\b/,/\\bBTW.+/],string:{pattern:/\"(?::.|[^\"])*\"/,inside:{variable:/:\\{[^}]+\\}/,symbol:[/:\\([a-f\\d]+\\)/i,/:\\[[^\\]]+\\]/,/:[)>o\":]/]},greedy:!0},number:/(?:\\B-)?(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)/,symbol:{pattern:/(^|\\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\\s|,|$)/,lookbehind:!0,inside:{keyword:/A(?=\\s)/}},label:{pattern:/((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,lookbehind:!0,alias:\"string\"},function:{pattern:/((?:^|\\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\\w*/,lookbehind:!0},keyword:[{pattern:/(^|\\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\\?|YA RLY|NO WAI|OIC|MEBBE|WTF\\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\\s|,|$)/,lookbehind:!0},/'Z(?=\\s|,|$)/],boolean:{pattern:/(^|\\s)(?:WIN|FAIL)(?=\\s|,|$)/,lookbehind:!0},variable:{pattern:/(^|\\s)IT(?=\\s|,|$)/,lookbehind:!0},operator:{pattern:/(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\\s|,|$)/,lookbehind:!0},punctuation:/\\.{3}|…|,|!/};"
            ]
        },
        "prism-lua.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lua = {",
                "\t'comment': /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,",
                "\t// \\z may be used to skip the following space",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,",
                "\t'keyword': /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*(?:[({]))/,",
                "\t'operator': [",
                "\t\t/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,",
                "\t\t{",
                "\t\t\t// Match \"..\" but don't break \"...\"",
                "\t\t\tpattern: /(^|[^.])\\.\\.(?!\\.)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /[\\[\\](){},;]|\\.+|:+/",
                "};"
            ]
        },
        "prism-lua.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.lua={comment:/^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,greedy:!0},number:/\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,keyword:/\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,function:/(?!\\d)\\w+(?=\\s*(?:[({]))/,operator:[/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\\.\\.(?!\\.)/,lookbehind:!0}],punctuation:/[\\[\\](){},;]|\\.+|:+/};"
            ]
        },
        "prism-makefile.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.makefile = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t// Built-in target names",
                "\t'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,",
                "",
                "\t// Targets",
                "\t'symbol': {",
                "\t\tpattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,",
                "\t\tinside: {",
                "\t\t\t'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/",
                "\t\t}",
                "\t},",
                "\t'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,",
                "",
                "\t'keyword': [",
                "\t\t// Directives",
                "\t\t/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,",
                "\t\t// Functions",
                "\t\t{",
                "\t\t\tpattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'operator': /(?:::|[?:+!])?=|[|@]/,",
                "\t'punctuation': /[:;(){}]/",
                "};"
            ]
        },
        "prism-makefile.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.makefile={comment:{pattern:/(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,lookbehind:!0},string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,symbol:{pattern:/^[^:=\\r\\n]+(?=\\s*:(?!=))/m,inside:{variable:/\\$+(?:[^(){}:#=\\s]+|(?=[({]))/}},variable:/\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,keyword:[/-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,{pattern:/(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,lookbehind:!0}],operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/};"
            ]
        },
        "prism-markdown.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markdown = Prism.languages.extend('markup', {});",
                "Prism.languages.insertBefore('markdown', 'prolog', {",
                "\t'blockquote': {",
                "\t\t// > ...",
                "\t\tpattern: /^>(?:[\\t ]*>)*/m,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'code': [",
                "\t\t{",
                "\t\t\t// Prefixed by 4 spaces or 1 tab",
                "\t\t\tpattern: /^(?: {4}|\\t).+/m,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t{",
                "\t\t\t// `code`",
                "\t\t\t// ``code``",
                "\t\t\tpattern: /``.+?``|`[^`\\n]+`/,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t{",
                "\t\t\t// ```optional language",
                "\t\t\t// code block",
                "\t\t\t// ```",
                "\t\t\tpattern: /^```[\\s\\S]*?^```$/m,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'code-block': {",
                "\t\t\t\t\tpattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'code-language': {",
                "\t\t\t\t\tpattern: /^(```).+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /```/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'title': [",
                "\t\t{",
                "\t\t\t// title 1",
                "\t\t\t// =======",
                "",
                "\t\t\t// title 2",
                "\t\t\t// -------",
                "\t\t\tpattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,",
                "\t\t\talias: 'important',",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /==+$|--+$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// # title 1",
                "\t\t\t// ###### title 6",
                "\t\t\tpattern: /(^\\s*)#+.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'important',",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /^#+|#+$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'hr': {",
                "\t\t// ***",
                "\t\t// ---",
                "\t\t// * * *",
                "\t\t// -----------",
                "\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'list': {",
                "\t\t// * item",
                "\t\t// + item",
                "\t\t// - item",
                "\t\t// 1. item",
                "\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'url-reference': {",
                "\t\t// [id]: http://example.com \"Optional title\"",
                "\t\t// [id]: http://example.com 'Optional title'",
                "\t\t// [id]: http://example.com (Optional title)",
                "\t\t// [id]: <http://example.com> \"Optional title\"",
                "\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,",
                "\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/",
                "\t\t},",
                "\t\talias: 'url'",
                "\t},",
                "\t'bold': {",
                "\t\t// **strong**",
                "\t\t// __strong__",
                "",
                "\t\t// Allow only one line break",
                "\t\tpattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^\\*\\*|^__|\\*\\*$|__$/",
                "\t\t}",
                "\t},",
                "\t'italic': {",
                "\t\t// *em*",
                "\t\t// _em_",
                "",
                "\t\t// Allow only one line break",
                "\t\tpattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^[*_]|[*_]$/",
                "\t\t}",
                "\t},",
                "\t'strike': {",
                "\t\t// ~~strike through~~",
                "\t\t// ~strike~",
                "",
                "\t\t// Allow only one line break",
                "\t\tpattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^~~?|~~?$/",
                "\t\t}",
                "\t},",
                "\t'url': {",
                "\t\t// [example](http://example.com \"Optional title\")",
                "\t\t// [example] [id]",
                "\t\tpattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,",
                "\t\tinside: {",
                "\t\t\t'variable': {",
                "\t\t\t\tpattern: /(!?\\[)[^\\]]+(?=\\]$)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});",
                "",
                "['bold', 'italic', 'strike'].forEach(function (token) {",
                "\t['url', 'bold', 'italic', 'strike'].forEach(function (inside) {",
                "\t\tif (token !== inside) {",
                "\t\t\tPrism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];",
                "\t\t}",
                "\t});",
                "});",
                "",
                "Prism.hooks.add('after-tokenize', function (env) {",
                "\tif (env.language !== 'markdown' && env.language !== 'md') {",
                "\t\treturn;",
                "\t}",
                "",
                "\tfunction walkTokens(tokens) {",
                "\t\tif (!tokens || typeof tokens === 'string') {",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tfor (var i = 0, l = tokens.length; i < l; i++) {",
                "\t\t\tvar token = tokens[i];",
                "",
                "\t\t\tif (token.type !== 'code') {",
                "\t\t\t\twalkTokens(token.content);",
                "\t\t\t\tcontinue;",
                "\t\t\t}",
                "",
                "\t\t\tvar codeLang = token.content[1];",
                "\t\t\tvar codeBlock = token.content[3];",
                "",
                "\t\t\tif (codeLang && codeBlock &&",
                "\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&",
                "\t\t\t\ttypeof codeLang.content === 'string') {",
                "",
                "\t\t\t\t// this might be a language that Prism does not support",
                "\t\t\t\tvar alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase();",
                "",
                "\t\t\t\t// add alias",
                "\t\t\t\tif (!codeBlock.alias) {",
                "\t\t\t\t\tcodeBlock.alias = [alias];",
                "\t\t\t\t} else if (typeof codeBlock.alias === 'string') {",
                "\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];",
                "\t\t\t\t} else {",
                "\t\t\t\t\tcodeBlock.alias.push(alias);",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\twalkTokens(env.tokens);",
                "});",
                "",
                "Prism.hooks.add('wrap', function (env) {",
                "\tif (env.type !== 'code-block') {",
                "\t\treturn;",
                "\t}",
                "",
                "\tvar codeLang = '';",
                "\tfor (var i = 0, l = env.classes.length; i < l; i++) {",
                "\t\tvar cls = env.classes[i];",
                "\t\tvar match = /language-(.+)/.exec(cls);",
                "\t\tif (match) {",
                "\t\t\tcodeLang = match[1];",
                "\t\t\tbreak;",
                "\t\t}",
                "\t}",
                "",
                "\tvar grammar = Prism.languages[codeLang];",
                "",
                "\tif (!grammar) {",
                "\t\treturn;",
                "\t}",
                "",
                "\t// reverse Prism.util.encode",
                "\tvar code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');",
                "",
                "\tenv.content = Prism.highlight(code, grammar, codeLang);",
                "});",
                "",
                "Prism.languages.md = Prism.languages.markdown;"
            ]
        },
        "prism-markdown.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markdown=Prism.languages.extend(\"markup\",{}),Prism.languages.insertBefore(\"markdown\",\"prolog\",{blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},code:[{pattern:/^(?: {4}|\\t).+/m,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\n]+`/,alias:\"keyword\"},{pattern:/^```[\\s\\S]*?^```$/m,greedy:!0,inside:{\"code-block\":{pattern:/^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,lookbehind:!0},\"code-language\":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#+.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,greedy:!0,inside:{punctuation:/^\\*\\*|^__|\\*\\*$|__$/}},italic:{pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,greedy:!0,inside:{punctuation:/^[*_]|[*_]$/}},strike:{pattern:/(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,greedy:!0,inside:{punctuation:/^~~?|~~?$/}},url:{pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,inside:{variable:{pattern:/(!?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/}}}}),[\"bold\",\"italic\",\"strike\"].forEach(function(a){[\"url\",\"bold\",\"italic\",\"strike\"].forEach(function(n){a!==n&&(Prism.languages.markdown[a].inside[n]=Prism.languages.markdown[n])})}),Prism.hooks.add(\"after-tokenize\",function(n){\"markdown\"!==n.language&&\"md\"!==n.language||!function n(a){if(a&&\"string\"!=typeof a)for(var t=0,e=a.length;t<e;t++){var r=a[t];if(\"code\"===r.type){var i=r.content[1],o=r.content[3];if(i&&o&&\"code-language\"===i.type&&\"code-block\"===o.type&&\"string\"==typeof i.content){var s=\"language-\"+i.content.trim().split(/\\s+/)[0].toLowerCase();o.alias?\"string\"==typeof o.alias?o.alias=[o.alias,s]:o.alias.push(s):o.alias=[s]}}else n(r.content)}}(n.tokens)}),Prism.hooks.add(\"wrap\",function(n){if(\"code-block\"===n.type){for(var a=\"\",t=0,e=n.classes.length;t<e;t++){var r=n.classes[t],i=/language-(.+)/.exec(r);if(i){a=i[1];break}}var o=Prism.languages[a];if(o){var s=n.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\");n.content=Prism.highlight(s,o,a)}}}),Prism.languages.md=Prism.languages.markdown;"
            ]
        },
        "prism-markup-templating.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t/**",
                "\t * Returns the placeholder for the given language id and index.",
                "\t *",
                "\t * @param {string} language",
                "\t * @param {string|number} index",
                "\t * @returns {string}",
                "\t */",
                "\tfunction getPlaceholder(language, index) {",
                "\t\treturn '___' + language.toUpperCase() + index + '___';",
                "\t}",
                "",
                "\tObject.defineProperties(Prism.languages['markup-templating'] = {}, {",
                "\t\tbuildPlaceholders: {",
                "\t\t\t/**",
                "\t\t\t * Tokenize all inline templating expressions matching `placeholderPattern`.",
                "\t\t\t *",
                "\t\t\t * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns",
                "\t\t\t * `true` will be replaced.",
                "\t\t\t *",
                "\t\t\t * @param {object} env The environment of the `before-tokenize` hook.",
                "\t\t\t * @param {string} language The language id.",
                "\t\t\t * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.",
                "\t\t\t * @param {(match: string) => boolean} [replaceFilter]",
                "\t\t\t */",
                "\t\t\tvalue: function (env, language, placeholderPattern, replaceFilter) {",
                "\t\t\t\tif (env.language !== language) {",
                "\t\t\t\t\treturn;",
                "\t\t\t\t}",
                "",
                "\t\t\t\tvar tokenStack = env.tokenStack = [];",
                "",
                "\t\t\t\tenv.code = env.code.replace(placeholderPattern, function (match) {",
                "\t\t\t\t\tif (typeof replaceFilter === 'function' && !replaceFilter(match)) {",
                "\t\t\t\t\t\treturn match;",
                "\t\t\t\t\t}",
                "\t\t\t\t\tvar i = tokenStack.length;",
                "\t\t\t\t\tvar placeholder;",
                "",
                "\t\t\t\t\t// Check for existing strings",
                "\t\t\t\t\twhile (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1)",
                "\t\t\t\t\t\t++i;",
                "",
                "\t\t\t\t\t// Create a sparse array",
                "\t\t\t\t\ttokenStack[i] = match;",
                "",
                "\t\t\t\t\treturn placeholder;",
                "\t\t\t\t});",
                "",
                "\t\t\t\t// Switch the grammar to markup",
                "\t\t\t\tenv.grammar = Prism.languages.markup;",
                "\t\t\t}",
                "\t\t},",
                "\t\ttokenizePlaceholders: {",
                "\t\t\t/**",
                "\t\t\t * Replace placeholders with proper tokens after tokenizing.",
                "\t\t\t *",
                "\t\t\t * @param {object} env The environment of the `after-tokenize` hook.",
                "\t\t\t * @param {string} language The language id.",
                "\t\t\t */",
                "\t\t\tvalue: function (env, language) {",
                "\t\t\t\tif (env.language !== language || !env.tokenStack) {",
                "\t\t\t\t\treturn;",
                "\t\t\t\t}",
                "",
                "\t\t\t\t// Switch the grammar back",
                "\t\t\t\tenv.grammar = Prism.languages[language];",
                "",
                "\t\t\t\tvar j = 0;",
                "\t\t\t\tvar keys = Object.keys(env.tokenStack);",
                "",
                "\t\t\t\tfunction walkTokens(tokens) {",
                "\t\t\t\t\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\t\t\t\t\t// all placeholders are replaced already",
                "\t\t\t\t\t\tif (j >= keys.length) {",
                "\t\t\t\t\t\t\tbreak;",
                "\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\tvar token = tokens[i];",
                "\t\t\t\t\t\tif (typeof token === 'string' || (token.content && typeof token.content === 'string')) {",
                "\t\t\t\t\t\t\tvar k = keys[j];",
                "\t\t\t\t\t\t\tvar t = env.tokenStack[k];",
                "\t\t\t\t\t\t\tvar s = typeof token === 'string' ? token : token.content;",
                "\t\t\t\t\t\t\tvar placeholder = getPlaceholder(language, k);",
                "",
                "\t\t\t\t\t\t\tvar index = s.indexOf(placeholder);",
                "\t\t\t\t\t\t\tif (index > -1) {",
                "\t\t\t\t\t\t\t\t++j;",
                "",
                "\t\t\t\t\t\t\t\tvar before = s.substring(0, index);",
                "\t\t\t\t\t\t\t\tvar middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);",
                "\t\t\t\t\t\t\t\tvar after = s.substring(index + placeholder.length);",
                "",
                "\t\t\t\t\t\t\t\tvar replacement = [];",
                "\t\t\t\t\t\t\t\tif (before) {",
                "\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([before]));",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t\treplacement.push(middle);",
                "\t\t\t\t\t\t\t\tif (after) {",
                "\t\t\t\t\t\t\t\t\treplacement.push.apply(replacement, walkTokens([after]));",
                "\t\t\t\t\t\t\t\t}",
                "",
                "\t\t\t\t\t\t\t\tif (typeof token === 'string') {",
                "\t\t\t\t\t\t\t\t\ttokens.splice.apply(tokens, [i, 1].concat(replacement));",
                "\t\t\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\t\t\ttoken.content = replacement;",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t} else if (token.content /* && typeof token.content !== 'string' */) {",
                "\t\t\t\t\t\t\twalkTokens(token.content);",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\treturn tokens;",
                "\t\t\t\t}",
                "",
                "\t\t\t\twalkTokens(env.tokens);",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-markup-templating.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(h){function v(e,n){return\"___\"+e.toUpperCase()+n+\"___\"}Object.defineProperties(h.languages[\"markup-templating\"]={},{buildPlaceholders:{value:function(a,r,e,o){if(a.language===r){var c=a.tokenStack=[];a.code=a.code.replace(e,function(e){if(\"function\"==typeof o&&!o(e))return e;for(var n,t=c.length;-1!==a.code.indexOf(n=v(r,t));)++t;return c[t]=e,n}),a.grammar=h.languages.markup}}},tokenizePlaceholders:{value:function(p,k){if(p.language===k&&p.tokenStack){p.grammar=h.languages[k];var m=0,d=Object.keys(p.tokenStack);!function e(n){for(var t=0;t<n.length&&!(m>=d.length);t++){var a=n[t];if(\"string\"==typeof a||a.content&&\"string\"==typeof a.content){var r=d[m],o=p.tokenStack[r],c=\"string\"==typeof a?a:a.content,i=v(k,r),u=c.indexOf(i);if(-1<u){++m;var g=c.substring(0,u),l=new h.Token(k,h.tokenize(o,p.grammar),\"language-\"+k,o),s=c.substring(u+i.length),f=[];g&&f.push.apply(f,e([g])),f.push(l),s&&f.push.apply(f,e([s])),\"string\"==typeof a?n.splice.apply(n,[t,1].concat(f)):a.content=f}}else a.content&&e(a.content)}return n}(p.tokens)}}}})}(Prism);"
            ]
        },
        "prism-markup.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markup = {",
                "\t'comment': /<!--[\\s\\S]*?-->/,",
                "\t'prolog': /<\\?[\\s\\S]+?\\?>/,",
                "\t'doctype': /<!DOCTYPE[\\s\\S]+?>/i,",
                "\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,",
                "\t'tag': {",
                "\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^<\\/?/,",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'attr-value': {",
                "\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': [",
                "\t\t\t\t\t\t/^=/,",
                "\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t]",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'punctuation': /\\/?>/,",
                "\t\t\t'attr-name': {",
                "\t\t\t\tpattern: /[^\\s>\\/]+/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t}",
                "\t},",
                "\t'entity': /&#?[\\da-z]{1,8};/i",
                "};",
                "",
                "Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =",
                "\tPrism.languages.markup['entity'];",
                "",
                "// Plugin to make entity title show the real entity, idea by Roman Komarov",
                "Prism.hooks.add('wrap', function(env) {",
                "",
                "\tif (env.type === 'entity') {",
                "\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');",
                "\t}",
                "});",
                "",
                "Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {",
                "\t/**",
                "\t * Adds an inlined language to markup.",
                "\t *",
                "\t * An example of an inlined language is CSS with `<style>` tags.",
                "\t *",
                "\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as",
                "\t * case insensitive.",
                "\t * @param {string} lang The language key.",
                "\t * @example",
                "\t * addInlined('style', 'css');",
                "\t */",
                "\tvalue: function addInlined(tagName, lang) {",
                "\t\tvar includedCdataInside = {};",
                "\t\tincludedCdataInside['language-' + lang] = {",
                "\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;",
                "",
                "\t\tvar inside = {",
                "\t\t\t'included-cdata': {",
                "\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,",
                "\t\t\t\tinside: includedCdataInside",
                "\t\t\t}",
                "\t\t};",
                "\t\tinside['language-' + lang] = {",
                "\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\tinside: Prism.languages[lang]",
                "\t\t};",
                "",
                "\t\tvar def = {};",
                "\t\tdef[tagName] = {",
                "\t\t\tpattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: inside",
                "\t\t};",
                "",
                "\t\tPrism.languages.insertBefore('markup', 'cdata', def);",
                "\t}",
                "});",
                "",
                "Prism.languages.xml = Prism.languages.extend('markup', {});",
                "Prism.languages.html = Prism.languages.markup;",
                "Prism.languages.mathml = Prism.languages.markup;",
                "Prism.languages.svg = Prism.languages.markup;"
            ]
        },
        "prism-markup.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.markup={comment:/<!--[\\s\\S]*?-->/,prolog:/<\\?[\\s\\S]+?\\?>/,doctype:/<!DOCTYPE[\\s\\S]+?>/i,cdata:/<!\\[CDATA\\[[\\s\\S]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/i,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\\s*)[\"']|[\"']$/,lookbehind:!0}]}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:/&#?[\\da-z]{1,8};/i},Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add(\"wrap\",function(a){\"entity\"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,\"&\"))}),Object.defineProperty(Prism.languages.markup.tag,\"addInlined\",{value:function(a,e){var s={};s[\"language-\"+e]={pattern:/(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,lookbehind:!0,inside:Prism.languages[e]},s.cdata=/^<!\\[CDATA\\[|\\]\\]>$/i;var n={\"included-cdata\":{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,inside:s}};n[\"language-\"+e]={pattern:/[\\s\\S]+/,inside:Prism.languages[e]};var i={};i[a]={pattern:RegExp(\"(<__[\\\\s\\\\S]*?>)(?:<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\s*|[\\\\s\\\\S])*?(?=<\\\\/__>)\".replace(/__/g,a),\"i\"),lookbehind:!0,greedy:!0,inside:n},Prism.languages.insertBefore(\"markup\",\"cdata\",i)}}),Prism.languages.xml=Prism.languages.extend(\"markup\",{}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;"
            ]
        },
        "prism-matlab.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.matlab = {",
                "\t'comment': [",
                "\t\t/%\\{[\\s\\S]*?\\}%/,",
                "\t\t/%.+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\\B'(?:''|[^'\\r\\n])*'/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// FIXME We could handle imaginary numbers as a whole",
                "\t'number': /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,",
                "\t'keyword': /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,",
                "\t'function': /(?!\\d)\\w+(?=\\s*\\()/,",
                "\t'operator': /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,",
                "\t'punctuation': /\\.{3}|[.,;\\[\\](){}!]/",
                "};"
            ]
        },
        "prism-matlab.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.matlab={comment:[/%\\{[\\s\\S]*?\\}%/,/%.+/],string:{pattern:/\\B'(?:''|[^'\\r\\n])*'/,greedy:!0},number:/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,keyword:/\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,function:/(?!\\d)\\w+(?=\\s*\\()/,operator:/\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,punctuation:/\\.{3}|[.,;\\[\\](){}!]/};"
            ]
        },
        "prism-mel.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mel = {",
                "\t'comment': /\\/\\/.*/,",
                "\t'code': {",
                "\t\tpattern: /`(?:\\\\.|[^\\\\`\\r\\n])*`/,",
                "\t\tgreedy: true,",
                "\t\talias: 'italic',",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^`|`$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t\t// See rest below",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /\\$\\w+/,",
                "\t'number': /\\b0x[\\da-fA-F]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+/,",
                "\t'flag': {",
                "\t\tpattern: /-[^\\d\\W]\\w*/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'keyword': /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,",
                "\t'function': /\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,",
                "\t",
                "\t'operator': [",
                "\t\t/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/,",
                "\t\t{",
                "\t\t\t// We don't want to match <<",
                "\t\t\tpattern: /(^|[^<])<(?!<)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// We don't want to match >>",
                "\t\t\tpattern: /(^|[^>])>(?!>)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /<<|>>|[.,:;?\\[\\](){}]/",
                "};",
                "Prism.languages.mel['code'].inside.rest = Prism.languages.mel;"
            ]
        },
        "prism-mel.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mel={comment:/\\/\\/.*/,code:{pattern:/`(?:\\\\.|[^\\\\`\\r\\n])*`/,greedy:!0,alias:\"italic\",inside:{delimiter:{pattern:/^`|`$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},variable:/\\$\\w+/,number:/\\b0x[\\da-fA-F]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+/,flag:{pattern:/-[^\\d\\W]\\w*/,alias:\"operator\"},keyword:/\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,function:/\\w+(?=\\()|\\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,operator:[/\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,:;?\\[\\](){}]/},Prism.languages.mel.code.inside.rest=Prism.languages.mel;"
            ]
        },
        "prism-mizar.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mizar = {",
                "\t'comment': /::.+/,",
                "\t'keyword': /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,",
                "\t'parameter': {",
                "\t\tpattern: /\\$(?:10|\\d)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'variable': /\\w+(?=:)/,",
                "\t'number': /(?:\\b|-)\\d+\\b/,",
                "\t'operator': /\\.\\.\\.|->|&|\\.?=/,",
                "\t'punctuation': /\\(#|#\\)|[,:;\\[\\](){}]/",
                "};"
            ]
        },
        "prism-mizar.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.mizar={comment:/::.+/,keyword:/@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\\b/,parameter:{pattern:/\\$(?:10|\\d)/,alias:\"variable\"},variable:/\\w+(?=:)/,number:/(?:\\b|-)\\d+\\b/,operator:/\\.\\.\\.|->|&|\\.?=/,punctuation:/\\(#|#\\)|[,:;\\[\\](){}]/};"
            ]
        },
        "prism-monkey.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.monkey = {",
                "\t'string': /\"[^\"\\r\\n]*\"/,",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /^#Rem\\s+[\\s\\S]*?^#End/im,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /'.+/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'preprocessor': {",
                "\t\tpattern: /(^[ \\t]*)#.+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'function': /\\w+(?=\\()/,",
                "\t'type-char': {",
                "\t\tpattern: /(\\w)[?%#$]/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,",
                "\t'operator': /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,",
                "\t'punctuation': /[.,:;()\\[\\]]/",
                "};"
            ]
        },
        "prism-monkey.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.monkey={string:/\"[^\"\\r\\n]*\"/,comment:[{pattern:/^#Rem\\s+[\\s\\S]*?^#End/im,greedy:!0},{pattern:/'.+/,greedy:!0}],preprocessor:{pattern:/(^[ \\t]*)#.+/m,lookbehind:!0,alias:\"comment\"},function:/\\w+(?=\\()/,\"type-char\":{pattern:/(\\w)[?%#$]/,lookbehind:!0,alias:\"variable\"},number:{pattern:/((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,lookbehind:!0},keyword:/\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,operator:/\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,punctuation:/[.,:;()\\[\\]]/};"
            ]
        },
        "prism-n1ql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n1ql = {",
                "\t'comment': /\\/\\*[\\s\\S]*?(?:$|\\*\\/)/,",
                "\t'parameter': /\\$[\\w.]+/,",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,",
                "\t\tgreedy: true,",
                "\t},",
                "\t'identifier': {",
                "\t\tpattern: /`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,",
                "\t\tgreedy: true,",
                "\t},",
                "\t'function': /\\b(?:ABS|ACOS|ARRAY_AGG|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|BASE64|BASE64_DECODE|BASE64_ENCODE|BITAND|BITCLEAR|BITNOT|BITOR|BITSET|BITSHIFT|BITTEST|BITXOR|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONTAINS|CONTAINS_TOKEN|CONTAINS_TOKEN_LIKE|CONTAINS_TOKEN_REGEXP|COS|COUNT|CURL|DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODED_SIZE|ENCODE_JSON|EXP|FLOOR|GREATEST|HAS_TOKEN|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|ISARRAY|ISATOM|ISBOOLEAN|ISNUMBER|ISOBJECT|ISSTRING|IsBitSET|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSINGIF|NANIF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|NULLIF|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_PAIRS|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POLY_LENGTH|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUFFIXES|SUM|TAN|TITLE|TOARRAY|TOATOM|TOBOOLEAN|TOKENS|TOKENS|TONUMBER|TOOBJECT|TOSTRING|TRIM|TRUNC|TYPE|UPPER|WEEKDAY_MILLIS|WEEKDAY_STR)(?=\\s*\\()/i,",
                "\t'keyword': /\\b(?:ALL|ALTER|ANALYZE|AS|ASC|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|CONNECT|CONTINUE|CORRELATE|COVER|CREATE|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FLATTEN|FOR|FORCE|FROM|FUNCTION|GRANT|GROUP|GSI|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LAST|LEFT|LET|LETTING|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NULL|NUMBER|OBJECT|OFFSET|ON|OPTION|ORDER|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROCEDURE|PUBLIC|RAW|REALM|REDUCE|RENAME|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|SATISFIES|SCHEMA|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TO|TRANSACTION|TRIGGER|TRUNCATE|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WITH|WORK|XOR)\\b/i,",
                "\t'boolean': /\\b(?:TRUE|FALSE)\\b/i,",
                "\t'number': /(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,",
                "\t'operator': /[-+*\\/=%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,",
                "\t'punctuation': /[;[\\](),.{}:]/",
                "};"
            ]
        },
        "prism-n1ql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n1ql={comment:/\\/\\*[\\s\\S]*?(?:$|\\*\\/)/,parameter:/\\$[\\w.]+/,string:{pattern:/([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,greedy:!0},identifier:{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,greedy:!0},function:/\\b(?:ABS|ACOS|ARRAY_AGG|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|BASE64|BASE64_DECODE|BASE64_ENCODE|BITAND|BITCLEAR|BITNOT|BITOR|BITSET|BITSHIFT|BITTEST|BITXOR|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONTAINS|CONTAINS_TOKEN|CONTAINS_TOKEN_LIKE|CONTAINS_TOKEN_REGEXP|COS|COUNT|CURL|DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODED_SIZE|ENCODE_JSON|EXP|FLOOR|GREATEST|HAS_TOKEN|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|ISARRAY|ISATOM|ISBOOLEAN|ISNUMBER|ISOBJECT|ISSTRING|IsBitSET|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSINGIF|NANIF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|NULLIF|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_PAIRS|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POLY_LENGTH|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUFFIXES|SUM|TAN|TITLE|TOARRAY|TOATOM|TOBOOLEAN|TOKENS|TOKENS|TONUMBER|TOOBJECT|TOSTRING|TRIM|TRUNC|TYPE|UPPER|WEEKDAY_MILLIS|WEEKDAY_STR)(?=\\s*\\()/i,keyword:/\\b(?:ALL|ALTER|ANALYZE|AS|ASC|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|CONNECT|CONTINUE|CORRELATE|COVER|CREATE|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FLATTEN|FOR|FORCE|FROM|FUNCTION|GRANT|GROUP|GSI|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LAST|LEFT|LET|LETTING|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NULL|NUMBER|OBJECT|OFFSET|ON|OPTION|ORDER|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROCEDURE|PUBLIC|RAW|REALM|REDUCE|RENAME|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|SATISFIES|SCHEMA|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TO|TRANSACTION|TRIGGER|TRUNCATE|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WITH|WORK|XOR)\\b/i,boolean:/\\b(?:TRUE|FALSE)\\b/i,number:/(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,operator:/[-+*\\/=%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,punctuation:/[;[\\](),.{}:]/};"
            ]
        },
        "prism-n4js.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n4js = Prism.languages.extend('javascript', {",
                "\t// Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html",
                "\t'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/",
                "});",
                "",
                "Prism.languages.insertBefore('n4js', 'constant', {",
                "\t// Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations",
                "\t'annotation': {",
                "\t\tpattern: /@+\\w+/,",
                "\t\talias: 'operator'",
                "\t}",
                "});",
                "",
                "Prism.languages.n4jsd=Prism.languages.n4js;"
            ]
        },
        "prism-n4js.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.n4js=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/}),Prism.languages.insertBefore(\"n4js\",\"constant\",{annotation:{pattern:/@+\\w+/,alias:\"operator\"}}),Prism.languages.n4jsd=Prism.languages.n4js;"
            ]
        },
        "prism-nand2tetris-hdl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['nand2tetris-hdl'] = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,",
                "\t'keyword': /\\b(?:CHIP|IN|OUT|PARTS|BUILTIN|CLOCKED)\\b/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'function': /[A-Za-z][A-Za-z0-9]*(?=\\()/,",
                "\t'number': /\\b\\d+\\b/,",
                "\t'operator': /=|\\.\\./,",
                "\t'punctuation': /[{}[\\];(),:]/",
                "};"
            ]
        },
        "prism-nand2tetris-hdl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"nand2tetris-hdl\"]={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,keyword:/\\b(?:CHIP|IN|OUT|PARTS|BUILTIN|CLOCKED)\\b/,boolean:/\\b(?:true|false)\\b/,function:/[A-Za-z][A-Za-z0-9]*(?=\\()/,number:/\\b\\d+\\b/,operator:/=|\\.\\./,punctuation:/[{}[\\];(),:]/};"
            ]
        },
        "prism-nasm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nasm = {",
                "\t'comment': /;.*$/m,",
                "\t'string': /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t'label': {",
                "\t\tpattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function'",
                "\t},",
                "\t'keyword': [",
                "\t\t/\\[?BITS (?:16|32|64)\\]?/,",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*)section\\s*[a-zA-Z.]+:?/im,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/(?:extern|global)[^;\\r\\n]*/i,",
                "\t\t/(?:CPU|FLOAT|DEFAULT).*$/m",
                "\t],",
                "\t'register': {",
                "\t\tpattern: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /(?:\\b|(?=\\$))(?:0[hx][\\da-f]*\\.?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|\\d*\\.?\\d+(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,",
                "\t'operator': /[\\[\\]*+\\-\\/%<>=&|$!]/",
                "};"
            ]
        },
        "prism-nasm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nasm={comment:/;.*$/m,string:/([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,label:{pattern:/(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,lookbehind:!0,alias:\"function\"},keyword:[/\\[?BITS (?:16|32|64)\\]?/,{pattern:/(^\\s*)section\\s*[a-zA-Z.]+:?/im,lookbehind:!0},/(?:extern|global)[^;\\r\\n]*/i,/(?:CPU|FLOAT|DEFAULT).*$/m],register:{pattern:/\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\\b/i,alias:\"variable\"},number:/(?:\\b|(?=\\$))(?:0[hx][\\da-f]*\\.?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|\\d*\\.?\\d+(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,operator:/[\\[\\]*+\\-\\/%<>=&|$!]/};"
            ]
        },
        "prism-nginx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nginx = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\"{\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'keyword': /\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types|ssl_session_tickets|ssl_stapling|ssl_stapling_verify|ssl_ecdh_curve|ssl_trusted_certificate|more_set_headers|ssl_early_data)\\b/i",
                "});",
                "",
                "Prism.languages.insertBefore('nginx', 'keyword', {",
                "\t'variable': /\\$[a-z_]+/i",
                "});"
            ]
        },
        "prism-nginx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nginx=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\"{\\\\])#.*/,lookbehind:!0},keyword:/\\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types|ssl_session_tickets|ssl_stapling|ssl_stapling_verify|ssl_ecdh_curve|ssl_trusted_certificate|more_set_headers|ssl_early_data)\\b/i}),Prism.languages.insertBefore(\"nginx\",\"keyword\",{variable:/\\$[a-z_]+/i});"
            ]
        },
        "prism-nim.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nim = {",
                "\t'comment': /#.*/,",
                "\t// Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)",
                "\t// Character literals are handled specifically to prevent issues with numeric type suffixes",
                "\t'string': {",
                "\t\tpattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// The negative look ahead prevents wrong highlighting of the .. operator",
                "\t'number': /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,",
                "\t'keyword': /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,",
                "\t'function': {",
                "\t\tpattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,",
                "\t\tinside: {",
                "\t\t\t'operator': /\\*$/",
                "\t\t}",
                "\t},",
                "\t// We don't want to highlight operators inside backticks",
                "\t'ignore': {",
                "\t\tpattern: /`[^`\\r\\n]+`/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /`/",
                "\t\t}",
                "\t},",
                "\t'operator': {",
                "\t\t// Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)",
                "\t\t// but allow the slice operator .. to take precedence over them",
                "\t\t// One can define his own operators in Nim so all combination of operators might be an operator.",
                "\t\tpattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/",
                "};"
            ]
        },
        "prism-nim.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nim={comment:/#.*/,string:{pattern:/(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,greedy:!0},number:/\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,keyword:/\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,function:{pattern:/(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,inside:{operator:/\\*$/}},ignore:{pattern:/`[^`\\r\\n]+`/,inside:{punctuation:/`/}},operator:{pattern:/(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,lookbehind:!0},punctuation:/[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/};"
            ]
        },
        "prism-nix.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nix = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|#.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\t// The lookbehind ensures the ${} is not preceded by \\ or ''",
                "\t\t\t\tpattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^}]|\\{[^}]*\\})*}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'antiquotation': {",
                "\t\t\t\t\t\tpattern: /^\\$(?=\\{)/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'url': [",
                "\t\t/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,",
                "\t\t{",
                "\t\t\tpattern: /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'antiquotation': {",
                "\t\tpattern: /\\$(?=\\{)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'number': /\\b\\d+\\b/,",
                "\t'keyword': /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,",
                "\t'function': /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'operator': /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,",
                "\t'punctuation': /[{}()[\\].,:;]/",
                "};",
                "",
                "Prism.languages.nix.string.inside.interpolation.inside.rest = Prism.languages.nix;"
            ]
        },
        "prism-nix.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nix={comment:/\\/\\*[\\s\\S]*?\\*\\/|#.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,greedy:!0,inside:{interpolation:{pattern:/(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^}]|\\{[^}]*\\})*}/,lookbehind:!0,inside:{antiquotation:{pattern:/^\\$(?=\\{)/,alias:\"variable\"}}}}},url:[/\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,{pattern:/([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,lookbehind:!0}],antiquotation:{pattern:/\\$(?=\\{)/,alias:\"variable\"},number:/\\b\\d+\\b/,keyword:/\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,function:/\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,boolean:/\\b(?:true|false)\\b/,operator:/[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,punctuation:/[{}()[\\].,:;]/},Prism.languages.nix.string.inside.interpolation.inside.rest=Prism.languages.nix;"
            ]
        },
        "prism-nsis.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Jan T. Sott (http://github.com/idleberg)",
                " *",
                " * Includes all commands and plug-ins shipped with NSIS 3.02",
                " */",
                " Prism.languages.nsis = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'property': /\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK((CR|CU|LM)(32|64)?|DD|PD|U)|HKEY_(CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,",
                "\t'constant': /\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,",
                "\t'variable': /\\$\\w+/i,",
                "\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,",
                "\t'operator': /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,",
                "\t'punctuation': /[{}[\\];(),.:]/,",
                "\t'important': {",
                "\t\tpattern: /(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/mi,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-nsis.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.nsis={comment:{pattern:/(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,lookbehind:!0},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},keyword:{pattern:/(^\\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\\b/m,lookbehind:!0},property:/\\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK((CR|CU|LM)(32|64)?|DD|PD|U)|HKEY_(CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\\b/,constant:/\\${[\\w\\.:\\^-]+}|\\$\\([\\w\\.:\\^-]+\\)/i,variable:/\\$\\w+/i,number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,punctuation:/[{}[\\];(),.:]/,important:{pattern:/(^\\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/im,lookbehind:!0}};"
            ]
        },
        "prism-objectivec.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.objectivec = Prism.languages.extend('c', {",
                "\t'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,",
                "\t'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,",
                "\t'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/",
                "});",
                "",
                "delete Prism.languages.objectivec['class-name'];"
            ]
        },
        "prism-objectivec.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.objectivec=Prism.languages.extend(\"c\",{keyword:/\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,string:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,operator:/-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/}),delete Prism.languages.objectivec[\"class-name\"];"
            ]
        },
        "prism-ocaml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ocaml = {",
                "\t'comment': /\\(\\*[\\s\\S]*?\\*\\)/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,",
                "\t'type': {",
                "\t\tpattern: /\\B['`]\\w*/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /\\B#\\w+/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,",
                "\t'boolean': /\\b(?:false|true)\\b/,",
                "\t// Custom operators are allowed",
                "\t'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,",
                "\t'punctuation': /[(){}\\[\\]|_.,:;]/",
                "};"
            ]
        },
        "prism-ocaml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.ocaml={comment:/\\(\\*[\\s\\S]*?\\*\\)/,string:[{pattern:/\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0},{pattern:/(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,greedy:!0}],number:/\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,type:{pattern:/\\B['`]\\w*/,alias:\"variable\"},directive:{pattern:/\\B#\\w+/,alias:\"function\"},keyword:/\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,boolean:/\\b(?:false|true)\\b/,operator:/:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,punctuation:/[(){}\\[\\]|_.,:;]/};"
            ]
        },
        "prism-opencl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t/* OpenCL kernel language */",
                "\tPrism.languages.opencl = Prism.languages.extend('c', {",
                "\t\t// Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)",
                "\t\t'keyword': /\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|auto|break|case|cl_(?:image_format|mem_fence_flags)|clk_event_t|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|event_t|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|imaginary|inline|intptr_t|ndrange_t|packed|pipe|ptrdiff_t|queue_t|register|reserve_id_t|restrict|return|sampler_t|signed|size_t|sizeof|static|struct|switch|typedef|uintptr_t|uniform|union|unsigned|void|volatile|while)\\b/,",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl.lang (global-vars, opencl-dev)",
                "\t\t'function-opencl-kernel': {",
                "\t\t\tpattern: /\\b(?:abs(?:_diff)?|a?(?:cos|sin)(?:h|pi)?|add_sat|aligned|all|and|any|async(?:_work_group_copy|_work_group_strided_copy)?|atan(?:2?(?:pi)?|h)?|atom_(?:add|and|cmpxchg|dec|inc|max|min|or|sub|xchg|xor)|barrier|bitselect|cbrt|ceil|clamp|clz|copies|copysign|cross|degrees|distance|dot|endian|erf|erfc|exp(?:2|10)?|expm1|fabs|fast_(?:distance|length|normalize)|fdim|floor|fma|fmax|fmin|fract|frexp|fro|from|get_(?:global_(?:id|offset|size)|group_id|image_(?:channel_data_type|channel_order|depth|dim|height|width)|local(?:_id|_size)|num_groups|work_dim)|hadd|(?:half|native)_(?:cos|divide|exp(?:2|10)?|log(?:2|10)?|powr|recip|r?sqrt|sin|tan)|hypot|ilogb|is(?:equal|finite|greater(?:equal)?|inf|less(?:equal|greater)?|nan|normal|notequal|(?:un)?ordered)|ldexp|length|lgamma|lgamma_r|log(?:b|1p|2|10)?|mad(?:24|_hi|_sat)?|max|mem(?:_fence)?|min|mix|modf|mul24|mul_hi|nan|nextafter|normalize|pow[nr]?|prefetch|radians|read_(?:image)(?:f|h|u?i)|read_mem_fence|remainder|remquo|reqd_work_group_size|rhadd|rint|rootn|rotate|round|rsqrt|select|shuffle2?|sign|signbit|sincos|smoothstep|sqrt|step|sub_sat|tan|tanh|tanpi|tgamma|to|trunc|upsample|vec_(?:step|type_hint)|v(?:load|store)(?:_half)?(?:2|3|4|8|16)?|v(?:loada_half|storea?(?:_half)?)(?:2|3|4|8|16)?(?:_(?:rte|rtn|rtp|rtz))?|wait_group_events|work_group_size_hint|write_image(?:f|h|u?i)|write_mem_fence)\\b/,",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)",
                "\t\t'constant-opencl-kernel': {",
                "\t\t\tpattern: /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF|INFINITY|(?:INT|LONG|SCHAR|SHRT|UCHAR|UINT|ULONG)_(?:MAX|MIN)|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI[24]?|SQRT(?:1_2|2))|NAN)\\b/,",
                "\t\t\talias: 'constant'",
                "\t\t}",
                "\t});",
                "",
                "\tvar attributes = {",
                "\t\t// Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)",
                "\t\t'type-opencl-host': {",
                "\t\t\tpattern: /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,",
                "\t\t\talias: 'keyword'",
                "\t\t},",
                "\t\t'boolean-opencl-host': {",
                "\t\t\tpattern: /\\bCL_(?:TRUE|FALSE)\\b/,",
                "\t\t\talias: 'boolean'",
                "\t\t},",
                "\t\t// Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)",
                "\t\t'constant-opencl-host': {",
                "\t\t\tpattern: /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,",
                "\t\t\talias: 'constant'",
                "\t\t},",
                "\t\t// Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)",
                "\t\t'function-opencl-host': {",
                "\t\t\tpattern: /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,",
                "\t\t\talias: 'function'",
                "\t\t}",
                "\t};",
                "",
                "\t/* OpenCL host API */",
                "\tPrism.languages.insertBefore('c', 'keyword', attributes);",
                "\t// Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html",
                "\tattributes['type-opencl-host-c++'] = {",
                "\t\tpattern: /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,",
                "\t\talias: 'keyword'",
                "\t};",
                "\t// C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h",
                "\tPrism.languages.insertBefore('cpp', 'keyword', attributes);",
                "}(Prism));"
            ]
        },
        "prism-opencl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(E){E.languages.opencl=E.languages.extend(\"c\",{keyword:/\\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|auto|break|case|cl_(?:image_format|mem_fence_flags)|clk_event_t|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|event_t|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|imaginary|inline|intptr_t|ndrange_t|packed|pipe|ptrdiff_t|queue_t|register|reserve_id_t|restrict|return|sampler_t|signed|size_t|sizeof|static|struct|switch|typedef|uintptr_t|uniform|union|unsigned|void|volatile|while)\\b/,\"function-opencl-kernel\":{pattern:/\\b(?:abs(?:_diff)?|a?(?:cos|sin)(?:h|pi)?|add_sat|aligned|all|and|any|async(?:_work_group_copy|_work_group_strided_copy)?|atan(?:2?(?:pi)?|h)?|atom_(?:add|and|cmpxchg|dec|inc|max|min|or|sub|xchg|xor)|barrier|bitselect|cbrt|ceil|clamp|clz|copies|copysign|cross|degrees|distance|dot|endian|erf|erfc|exp(?:2|10)?|expm1|fabs|fast_(?:distance|length|normalize)|fdim|floor|fma|fmax|fmin|fract|frexp|fro|from|get_(?:global_(?:id|offset|size)|group_id|image_(?:channel_data_type|channel_order|depth|dim|height|width)|local(?:_id|_size)|num_groups|work_dim)|hadd|(?:half|native)_(?:cos|divide|exp(?:2|10)?|log(?:2|10)?|powr|recip|r?sqrt|sin|tan)|hypot|ilogb|is(?:equal|finite|greater(?:equal)?|inf|less(?:equal|greater)?|nan|normal|notequal|(?:un)?ordered)|ldexp|length|lgamma|lgamma_r|log(?:b|1p|2|10)?|mad(?:24|_hi|_sat)?|max|mem(?:_fence)?|min|mix|modf|mul24|mul_hi|nan|nextafter|normalize|pow[nr]?|prefetch|radians|read_(?:image)(?:f|h|u?i)|read_mem_fence|remainder|remquo|reqd_work_group_size|rhadd|rint|rootn|rotate|round|rsqrt|select|shuffle2?|sign|signbit|sincos|smoothstep|sqrt|step|sub_sat|tan|tanh|tanpi|tgamma|to|trunc|upsample|vec_(?:step|type_hint)|v(?:load|store)(?:_half)?(?:2|3|4|8|16)?|v(?:loada_half|storea?(?:_half)?)(?:2|3|4|8|16)?(?:_(?:rte|rtn|rtp|rtz))?|wait_group_events|work_group_size_hint|write_image(?:f|h|u?i)|write_mem_fence)\\b/,alias:\"function\"},\"constant-opencl-kernel\":{pattern:/\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF|INFINITY|(?:INT|LONG|SCHAR|SHRT|UCHAR|UINT|ULONG)_(?:MAX|MIN)|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI[24]?|SQRT(?:1_2|2))|NAN)\\b/,alias:\"constant\"}});var _={\"type-opencl-host\":{pattern:/\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,alias:\"keyword\"},\"boolean-opencl-host\":{pattern:/\\bCL_(?:TRUE|FALSE)\\b/,alias:\"boolean\"},\"constant-opencl-host\":{pattern:/\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,alias:\"constant\"},\"function-opencl-host\":{pattern:/\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,alias:\"function\"}};E.languages.insertBefore(\"c\",\"keyword\",_),_[\"type-opencl-host-c++\"]={pattern:/\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\\b/,alias:\"keyword\"},E.languages.insertBefore(\"cpp\",\"keyword\",_)}(Prism);"
            ]
        },
        "prism-oz.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.oz = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|%.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'atom': {",
                "\t\tpattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,",
                "\t\tgreedy: true,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'keyword': /[$_]|\\[\\]|\\b(?:at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,",
                "\t'function': [",
                "\t\t/[a-z][A-Za-z\\d]*(?=\\()/,",
                "\t\t{",
                "\t\t\tpattern: /(\\{)[A-Z][A-Za-z\\d]*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'number': /\\b(?:0[bx][\\da-f]+|\\d+\\.?\\d*(?:e~?\\d+)?\\b)|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,",
                "\t'variable': /\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,",
                "\t'attr-name': /\\w+(?=:)/,",
                "\t'operator': /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,",
                "\t'punctuation': /[\\[\\](){}.:;?]/",
                "};"
            ]
        },
        "prism-oz.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.oz={comment:/\\/\\*[\\s\\S]*?\\*\\/|%.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,greedy:!0},atom:{pattern:/'(?:[^'\\\\]|\\\\[\\s\\S])*'/,greedy:!0,alias:\"builtin\"},keyword:/[$_]|\\[\\]|\\b(?:at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,function:[/[a-z][A-Za-z\\d]*(?=\\()/,{pattern:/(\\{)[A-Z][A-Za-z\\d]*/,lookbehind:!0}],number:/\\b(?:0[bx][\\da-f]+|\\d+\\.?\\d*(?:e~?\\d+)?\\b)|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,variable:/\\b[A-Z][A-Za-z\\d]*|`(?:[^`\\\\]|\\\\.)+`/,\"attr-name\":/\\w+(?=:)/,operator:/:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,punctuation:/[\\[\\](){}.:;?]/};"
            ]
        },
        "prism-parigp.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parigp = {",
                "\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// PARI/GP does not care about white spaces at all",
                "\t// so let's process the keywords to build an appropriate regexp",
                "\t// (e.g. \"b *r *e *a *k\", etc.)",
                "\t'keyword': (function () {",
                "\t\tvar keywords = [",
                "\t\t\t'breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x',",
                "\t\t\t'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime',",
                "\t\t\t'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if',",
                "\t\t\t'local', 'my', 'next', 'return', 'until', 'while'",
                "\t\t];",
                "\t\tkeywords = keywords.map(function (keyword) {",
                "\t\t\treturn keyword.split('').join(' *');",
                "\t\t}).join('|');",
                "\t\treturn RegExp('\\\\b(?:' + keywords + ')\\\\b');",
                "\t}()),",
                "\t'function': /\\w[\\w ]*?(?= *\\()/,",
                "\t'number': {",
                "\t\t// The lookbehind and the negative lookahead prevent from breaking the .. operator",
                "\t\tpattern: /((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,",
                "\t'punctuation': /[\\[\\]{}().,:;|]/",
                "};"
            ]
        },
        "prism-parigp.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.parigp={comment:/\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,greedy:!0},keyword:function(){var r=[\"breakpoint\",\"break\",\"dbg_down\",\"dbg_err\",\"dbg_up\",\"dbg_x\",\"forcomposite\",\"fordiv\",\"forell\",\"forpart\",\"forprime\",\"forstep\",\"forsubgroup\",\"forvec\",\"for\",\"iferr\",\"if\",\"local\",\"my\",\"next\",\"return\",\"until\",\"while\"];return r=r.map(function(r){return r.split(\"\").join(\" *\")}).join(\"|\"),RegExp(\"\\\\b(?:\"+r+\")\\\\b\")}(),function:/\\w[\\w ]*?(?= *\\()/,number:{pattern:/((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,lookbehind:!0},operator:/\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,punctuation:/[\\[\\]{}().,:;|]/};"
            ]
        },
        "prism-parser.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar parser = Prism.languages.parser = Prism.languages.extend('markup', {",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\.|:+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'function': {",
                "\t\t\tpattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': {",
                "\t\t\t\t\tpattern: /(^@)(?:GET_|SET_)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\.|:+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'escape': {",
                "\t\t\tpattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t'punctuation': /[\\[\\](){};]/",
                "\t});",
                "",
                "\tparser = Prism.languages.insertBefore('parser', 'keyword', {",
                "\t\t'parser-comment': {",
                "\t\t\tpattern: /(\\s)#.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'expression': {",
                "\t\t\t// Allow for 3 levels of depth",
                "\t\t\tpattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,",
                "\t\t\tgreedy: true,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'keyword': parser.keyword,",
                "\t\t\t\t'variable': parser.variable,",
                "\t\t\t\t'function': parser.function,",
                "\t\t\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t\t\t'number': /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,",
                "\t\t\t\t'escape': parser.escape,",
                "\t\t\t\t'operator': /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,",
                "\t\t\t\t'punctuation': parser.punctuation",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tparser = Prism.languages.insertBefore('inside', 'punctuation', {",
                "\t\t'expression': parser.expression,",
                "\t\t'keyword': parser.keyword,",
                "\t\t'variable': parser.variable,",
                "\t\t'function': parser.function,",
                "\t\t'escape': parser.escape,",
                "\t\t'parser-punctuation': {",
                "\t\t\tpattern: parser.punctuation,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t}, parser['tag'].inside['attr-value']);",
                "",
                "}(Prism));"
            ]
        },
        "prism-parser.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n=e.languages.parser=e.languages.extend(\"markup\",{keyword:{pattern:/(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,lookbehind:!0},variable:{pattern:/(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{punctuation:/\\.|:+/}},function:{pattern:/(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{keyword:{pattern:/(^@)(?:GET_|SET_)/,lookbehind:!0},punctuation:/\\.|:+/}},escape:{pattern:/\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,alias:\"builtin\"},punctuation:/[\\[\\](){};]/});n=e.languages.insertBefore(\"parser\",\"keyword\",{\"parser-comment\":{pattern:/(\\s)#.*/,lookbehind:!0,alias:\"comment\"},expression:{pattern:/(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,greedy:!0,lookbehind:!0,inside:{string:{pattern:/(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,lookbehind:!0},keyword:n.keyword,variable:n.variable,function:n.function,boolean:/\\b(?:true|false)\\b/,number:/\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,escape:n.escape,operator:/[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,punctuation:n.punctuation}}}),n=e.languages.insertBefore(\"inside\",\"punctuation\",{expression:n.expression,keyword:n.keyword,variable:n.variable,function:n.function,escape:n.escape,\"parser-punctuation\":{pattern:n.punctuation,alias:\"punctuation\"}},n.tag.inside[\"attr-value\"])}(Prism);"
            ]
        },
        "prism-pascal.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// Based on Free Pascal",
                "",
                "/* TODO",
                "\tSupport inline asm ?",
                "*/",
                "",
                "Prism.languages.pascal = {",
                "\t'comment': [",
                "\t\t/\\(\\*[\\s\\S]+?\\*\\)/,",
                "\t\t/\\{[\\s\\S]+?\\}/,",
                "\t\t/\\/\\/.*/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /(?:'(?:''|[^'\\r\\n])*'|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\t// Turbo Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Free Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Object Pascal",
                "\t\t\tpattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Modifiers",
                "\t\t\tpattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'number': [",
                "\t\t// Hexadecimal, octal and binary",
                "\t\t/(?:[&%]\\d+|\\$[a-f\\d]+)/i,",
                "\t\t// Decimal",
                "\t\t/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i",
                "\t],",
                "\t'operator': [",
                "\t\t/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,",
                "\t\t{",
                "\t\t\tpattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /\\(\\.|\\.\\)|[()\\[\\]:;,.]/",
                "};",
                "",
                "Prism.languages.objectpascal = Prism.languages.pascal;"
            ]
        },
        "prism-pascal.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.pascal={comment:[/\\(\\*[\\s\\S]+?\\*\\)/,/\\{[\\s\\S]+?\\}/,/\\/\\/.*/],string:{pattern:/(?:'(?:''|[^'\\r\\n])*'|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,lookbehind:!0}],number:[/(?:[&%]\\d+|\\$[a-f\\d]+)/i,/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],operator:[/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,{pattern:/(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,lookbehind:!0}],punctuation:/\\(\\.|\\.\\)|[()\\[\\]:;,.]/},Prism.languages.objectpascal=Prism.languages.pascal;"
            ]
        },
        "prism-perl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.perl = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\t// POD",
                "\t\t\tpattern: /(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\$])#.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t// TODO Could be nice to handle Heredoc too.",
                "\t'string': [",
                "\t\t// q/.../",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q a...a",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q(...)",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q{...}",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q[...]",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// q<...>",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// \"...\", `...`",
                "\t\t{",
                "\t\t\tpattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// '...'",
                "\t\t// FIXME Multi-line single-quoted strings are not supported as they would break variables containing '",
                "\t\t{",
                "\t\t\tpattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'regex': [",
                "\t\t// m/.../",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m a...a",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m(...)",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m{...}",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m[...]",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// m<...>",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "",
                "\t\t// The lookbehinds prevent -s from breaking",
                "\t\t// FIXME We don't handle change of separator like s(...)[...]",
                "\t\t// s/.../.../",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s a...a...a",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s(...)(...)",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s{...}{...}",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s[...][...]",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// s<...><...>",
                "\t\t{",
                "\t\t\tpattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t",
                "\t\t// /.../",
                "\t\t// The look-ahead tries to prevent two divisions on",
                "\t\t// the same line from being highlighted as regex.",
                "\t\t// This does not support multi-line regex.",
                "\t\t{",
                "\t\t\tpattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "",
                "\t// FIXME Not sure about the handling of ::, ', and #",
                "\t'variable': [",
                "\t\t// ${^POSTMATCH}",
                "\t\t/[&*$@%]\\{\\^[A-Z]+\\}/,",
                "\t\t// $^V",
                "\t\t/[&*$@%]\\^[A-Z_]/,",
                "\t\t// ${...}",
                "\t\t/[&*$@%]#?(?=\\{)/,",
                "\t\t// $foo",
                "\t\t/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i,",
                "\t\t// $1",
                "\t\t/[&*$@%]\\d+/,",
                "\t\t// $_, @_, %!",
                "\t\t// The negative lookahead prevents from breaking the %= operator",
                "\t\t/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/",
                "\t],",
                "\t'filehandle': {",
                "\t\t// <>, <FOO>, _",
                "\t\tpattern: /<(?![<=])\\S*>|\\b_\\b/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'vstring': {",
                "\t\t// v1.2, 1.2.3",
                "\t\tpattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /sub [a-z0-9_]+/i,",
                "\t\tinside: {",
                "\t\t\tkeyword: /sub/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,",
                "\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,",
                "\t'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,",
                "\t'punctuation': /[{}[\\];(),:]/",
                "};"
            ]
        },
        "prism-perl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.perl={comment:[{pattern:/(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,lookbehind:!0},{pattern:/(^|[^\\\\$])#.*/,lookbehind:!0}],string:[{pattern:/\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,greedy:!0},{pattern:/\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,greedy:!0},{pattern:/(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/'(?:[^'\\\\\\r\\n]|\\\\.)*'/,greedy:!0}],regex:[{pattern:/\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,greedy:!0},{pattern:/\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,greedy:!0}],variable:[/[&*$@%]\\{\\^[A-Z]+\\}/,/[&*$@%]\\^[A-Z_]/,/[&*$@%]#?(?=\\{)/,/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i,/[&*$@%]\\d+/,/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],filehandle:{pattern:/<(?![<=])\\S*>|\\b_\\b/,alias:\"symbol\"},vstring:{pattern:/v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,alias:\"string\"},function:{pattern:/sub [a-z0-9_]+/i,inside:{keyword:/sub/}},keyword:/\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,operator:/-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,punctuation:/[{}[\\];(),:]/};"
            ]
        },
        "prism-php-extras.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.insertBefore('php', 'variable', {",
                "\t'this': /\\$this\\b/,",
                "\t'global': /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,",
                "\t'scope': {",
                "\t\tpattern: /\\b[\\w\\\\]+::/,",
                "\t\tinside: {",
                "\t\t\tkeyword: /static|self|parent/,",
                "\t\t\tpunctuation: /::|\\\\/",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-php-extras.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.insertBefore(\"php\",\"variable\",{this:/\\$this\\b/,global:/\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,scope:{pattern:/\\b[\\w\\\\]+::/,inside:{keyword:/static|self|parent/,punctuation:/::|\\\\/}}});"
            ]
        },
        "prism-php.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/",
                " * Modified by Miles Johnson: http://milesj.me",
                " *",
                " * Supports the following:",
                " * \t\t- Extends clike syntax",
                " * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)",
                " * \t\t- Smarter constant and function matching",
                " *",
                " * Adds the following new token classes:",
                " * \t\tconstant, delimiter, variable, function, package",
                " */",
                "(function (Prism) {",
                "\tPrism.languages.php = Prism.languages.extend('clike', {",
                "\t\t'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,",
                "\t\t'boolean': {",
                "\t\t\tpattern: /\\b(?:false|true)\\b/i,",
                "\t\t\talias: 'constant'",
                "\t\t},",
                "\t\t'constant': [",
                "\t\t\t/\\b[A-Z_][A-Z0-9_]*\\b/,",
                "\t\t\t/\\b(?:null)\\b/i,",
                "\t\t],",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('php', 'string', {",
                "\t\t'shell-comment': {",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'comment'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('php', 'comment', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,",
                "\t\t\talias: 'important'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('php', 'keyword', {",
                "\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,",
                "\t\t'package': {",
                "\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\\\/",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\t// Must be defined after the function pattern",
                "\tPrism.languages.insertBefore('php', 'operator', {",
                "\t\t'property': {",
                "\t\t\tpattern: /(->)[\\w]+/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tvar string_interpolation = {",
                "\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\trest: Prism.languages.php",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.insertBefore('php', 'string', {",
                "\t\t'nowdoc-string': {",
                "\t\t\tpattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,",
                "\t\t\t\t\talias: 'symbol',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'heredoc-string': {",
                "\t\t\tpattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,",
                "\t\t\t\t\talias: 'symbol',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'interpolation': string_interpolation // See below",
                "\t\t\t}",
                "\t\t},",
                "\t\t'single-quoted-string': {",
                "\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'double-quoted-string': {",
                "\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': string_interpolation // See below",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\t// The different types of PHP strings \"replace\" the C-like standard string",
                "\tdelete Prism.languages.php['string'];",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tif (!/<\\?/.test(env.code)) {",
                "\t\t\treturn;",
                "\t\t}",
                "",
                "\t\tvar phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-php.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.php=n.languages.extend(\"clike\",{keyword:/\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,boolean:{pattern:/\\b(?:false|true)\\b/i,alias:\"constant\"},constant:[/\\b[A-Z_][A-Z0-9_]*\\b/,/\\b(?:null)\\b/i],comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0}}),n.languages.insertBefore(\"php\",\"string\",{\"shell-comment\":{pattern:/(^|[^\\\\])#.*/,lookbehind:!0,alias:\"comment\"}}),n.languages.insertBefore(\"php\",\"comment\",{delimiter:{pattern:/\\?>$|^<\\?(?:php(?=\\s)|=)?/i,alias:\"important\"}}),n.languages.insertBefore(\"php\",\"keyword\",{variable:/\\$+(?:\\w+\\b|(?={))/i,package:{pattern:/(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,lookbehind:!0,inside:{punctuation:/\\\\/}}}),n.languages.insertBefore(\"php\",\"operator\",{property:{pattern:/(->)[\\w]+/,lookbehind:!0}});var e={pattern:/{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,lookbehind:!0,inside:{rest:n.languages.php}};n.languages.insertBefore(\"php\",\"string\",{\"nowdoc-string\":{pattern:/<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<'?|[';]$/}}}},\"heredoc-string\":{pattern:/<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:e}},\"single-quoted-string\":{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0,alias:\"string\",inside:{interpolation:e}}}),delete n.languages.php.string,n.hooks.add(\"before-tokenize\",function(e){if(/<\\?/.test(e.code)){n.languages[\"markup-templating\"].buildPlaceholders(e,\"php\",/<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi)}}),n.hooks.add(\"after-tokenize\",function(e){n.languages[\"markup-templating\"].tokenizePlaceholders(e,\"php\")})}(Prism);"
            ]
        },
        "prism-phpdoc.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar typeExpression = /(?:[a-zA-Z]\\w*|[|\\\\[\\]])+/.source;",
                "",
                "\tPrism.languages.phpdoc = Prism.languages.extend('javadoclike', {",
                "\t\t'parameter': {",
                "\t\t\tpattern: RegExp('(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' + typeExpression + '\\\\s+)?)\\\\$\\\\w+'),",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('phpdoc', 'keyword', {",
                "\t\t'class-name': [",
                "\t\t\t{",
                "\t\t\t\tpattern: RegExp('(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' + typeExpression),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,",
                "\t\t\t\t\t'punctuation': /[|\\\\[\\]()]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t});",
                "",
                "\tPrism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc);",
                "",
                "}(Prism));"
            ]
        },
        "prism-phpdoc.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(a){var e=\"(?:[a-zA-Z]\\\\w*|[|\\\\\\\\[\\\\]])+\";a.languages.phpdoc=a.languages.extend(\"javadoclike\",{parameter:{pattern:RegExp(\"(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:\"+e+\"\\\\s+)?)\\\\$\\\\w+\"),lookbehind:!0}}),a.languages.insertBefore(\"phpdoc\",\"keyword\",{\"class-name\":[{pattern:RegExp(\"(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)\"+e),lookbehind:!0,inside:{keyword:/\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,punctuation:/[|\\\\[\\]()]/}}]}),a.languages.javadoclike.addSupport(\"php\",a.languages.phpdoc)}(Prism);"
            ]
        },
        "prism-plsql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar plsql = Prism.languages.plsql = Prism.languages.extend('sql', {",
                "\t\t'comment': [",
                "\t\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t/--.*/",
                "\t\t]",
                "\t});",
                "",
                "\tvar keyword = plsql['keyword'];",
                "\tif (!Array.isArray(keyword)) {",
                "\t\tkeyword = plsql['keyword'] = [keyword];",
                "\t}",
                "\tkeyword.unshift(",
                "\t\t/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i",
                "\t);",
                "",
                "\tvar operator = plsql['operator'];",
                "\tif (!Array.isArray(operator)) {",
                "\t\toperator = plsql['operator'] = [operator];",
                "\t}",
                "\toperator.unshift(",
                "\t\t/:=/",
                "\t);",
                "",
                "}(Prism));"
            ]
        },
        "prism-plsql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(E){var A=E.languages.plsql=E.languages.extend(\"sql\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,/--.*/]}),T=A.keyword;Array.isArray(T)||(T=A.keyword=[T]),T.unshift(/\\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\\b/i);var R=A.operator;Array.isArray(R)||(R=A.operator=[R]),R.unshift(/:=/)}(Prism);"
            ]
        },
        "prism-powershell.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar powershell = Prism.languages.powershell = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^`])<#[\\s\\S]*?#>/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^`])#.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'string': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'function': {",
                "\t\t\t\t\t\t// Allow for one level of nesting",
                "\t\t\t\t\t\tpattern: /(^|[^`])\\$\\((?:\\$\\(.*?\\)|(?!\\$\\()[^\\r\\n)])*\\)/,",
                "\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t// Populated at end of file",
                "\t\t\t\t\t\tinside: {}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /'(?:[^']|'')*'/,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t// Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices",
                "\t\t// Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)",
                "\t\t'namespace': /\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,",
                "\t\t'boolean': /\\$(?:true|false)\\b/i,",
                "\t\t'variable': /\\$\\w+\\b/i,",
                "\t\t// Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example",
                "\t\t// Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }",
                "\t\t// Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }",
                "\t\t'function': [",
                "\t\t\t/\\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\\b/i,",
                "\t\t\t/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i",
                "\t\t],",
                "\t\t// per http://technet.microsoft.com/en-us/library/hh847744.aspx",
                "\t\t'keyword': /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,",
                "\t\t'operator': {",
                "\t\t\tpattern: /(\\W?)(?:!|-(eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'punctuation': /[|{}[\\];(),.]/",
                "\t};",
                "",
                "\t// Variable interpolation inside strings, and nested expressions",
                "\tvar stringInside = powershell.string[0].inside;",
                "\tstringInside.boolean = powershell.boolean;",
                "\tstringInside.variable = powershell.variable;",
                "\tstringInside.function.inside = powershell;",
                "",
                "}(Prism));"
            ]
        },
        "prism-powershell.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var t=Prism.languages.powershell={comment:[{pattern:/(^|[^`])<#[\\s\\S]*?#>/,lookbehind:!0},{pattern:/(^|[^`])#.*/,lookbehind:!0}],string:[{pattern:/\"(?:`[\\s\\S]|[^`\"])*\"/,greedy:!0,inside:{function:{pattern:/(^|[^`])\\$\\((?:\\$\\(.*?\\)|(?!\\$\\()[^\\r\\n)])*\\)/,lookbehind:!0,inside:{}}}},{pattern:/'(?:[^']|'')*'/,greedy:!0}],namespace:/\\[[a-z](?:\\[(?:\\[[^\\]]*]|[^\\[\\]])*]|[^\\[\\]])*]/i,boolean:/\\$(?:true|false)\\b/i,variable:/\\$\\w+\\b/i,function:[/\\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\\b/i,/\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i],keyword:/\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,operator:{pattern:/(\\W?)(?:!|-(eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,lookbehind:!0},punctuation:/[|{}[\\];(),.]/},o=t.string[0].inside;o.boolean=t.boolean,o.variable=t.variable,o.function.inside=t}();"
            ]
        },
        "prism-processing.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.processing = Prism.languages.extend('clike', {",
                "\t'keyword': /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,",
                "\t'operator': /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/",
                "});",
                "Prism.languages.insertBefore('processing', 'number', {",
                "\t// Special case: XML is a type",
                "\t'constant': /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,",
                "\t'type': {",
                "\t\tpattern: /\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,",
                "\t\talias: 'variable'",
                "\t}",
                "});",
                "",
                "// Spaces are allowed between function name and parenthesis",
                "Prism.languages.processing['function'].pattern = /\\w+(?=\\s*\\()/;",
                "",
                "// Class-names is not styled by default",
                "Prism.languages.processing['class-name'].alias = 'variable';"
            ]
        },
        "prism-processing.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.processing=Prism.languages.extend(\"clike\",{keyword:/\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,operator:/<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/}),Prism.languages.insertBefore(\"processing\",\"number\",{constant:/\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,type:{pattern:/\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,alias:\"variable\"}}),Prism.languages.processing.function.pattern=/\\w+(?=\\s*\\()/,Prism.languages.processing[\"class-name\"].alias=\"variable\";"
            ]
        },
        "prism-prolog.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.prolog = {",
                "\t// Syntax depends on the implementation",
                "\t'comment': [",
                "\t\t/%.+/,",
                "\t\t/\\/\\*[\\s\\S]*?\\*\\//",
                "\t],",
                "\t// Depending on the implementation, strings may allow escaped newlines and quote-escape",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'builtin': /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,",
                "\t'variable': /\\b[A-Z_]\\w*/,",
                "\t// FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?",
                "\t'function': /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,",
                "\t'number': /\\b\\d+\\.?\\d*/,",
                "\t// Custom operators are allowed",
                "\t'operator': /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,",
                "\t'punctuation': /[(){}\\[\\],]/",
                "};"
            ]
        },
        "prism-prolog.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.prolog={comment:[/%.+/,/\\/\\*[\\s\\S]*?\\*\\//],string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,variable:/\\b[A-Z_]\\w*/,function:/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+\\.?\\d*/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/};"
            ]
        },
        "prism-properties.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.properties = {",
                "\t'comment': /^[ \\t]*[#!].*$/m,",
                "\t'attr-value': {",
                "\t\tpattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,",
                "\t'punctuation': /[=:]/",
                "};"
            ]
        },
        "prism-properties.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.properties={comment:/^[ \\t]*[#!].*$/m,\"attr-value\":{pattern:/(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?: *[=:] *| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,lookbehind:!0},\"attr-name\":/^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+?(?= *[=:] *| )/m,punctuation:/[=:]/};"
            ]
        },
        "prism-protobuf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.protobuf = Prism.languages.extend('clike', {",
                "\tkeyword: /\\b(?:package|import|message|enum)\\b/,",
                "\tbuiltin: /\\b(?:required|repeated|optional|reserved)\\b/,",
                "\tprimitive: {",
                "\t\tpattern: /\\b(?:double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});"
            ]
        },
        "prism-protobuf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.protobuf=Prism.languages.extend(\"clike\",{keyword:/\\b(?:package|import|message|enum)\\b/,builtin:/\\b(?:required|repeated|optional|reserved)\\b/,primitive:{pattern:/\\b(?:double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b/,alias:\"symbol\"}});"
            ]
        },
        "prism-pug.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\t// TODO:",
                "\t// - Add CSS highlighting inside <style> tags",
                "\t// - Add support for multi-line code blocks",
                "\t// - Add support for interpolation #{} and !{}",
                "\t// - Add support for tag interpolation #[]",
                "\t// - Add explicit support for plain text using |",
                "\t// - Add support for markup embedded in plain text",
                "",
                "\tPrism.languages.pug = {",
                "",
                "\t\t// Multiline stuff should appear before the rest",
                "",
                "\t\t// This handles both single-line and multi-line comments",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t// All the tag-related part is in lookbehind",
                "\t\t// so that it can be highlighted by the \"tag\" pattern",
                "\t\t'multiline-script': {",
                "\t\t\tpattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// See at the end of the file for known filters",
                "\t\t'filter': {",
                "\t\t\tpattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'filter-name': {",
                "\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'multiline-plain-text': {",
                "\t\t\tpattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'markup': {",
                "\t\t\tpattern: /(^[\\t ]*)<.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.markup",
                "\t\t\t}",
                "\t\t},",
                "\t\t'doctype': {",
                "\t\t\tpattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "",
                "\t\t// This handle all conditional and loop keywords",
                "\t\t'flow-control': {",
                "\t\t\tpattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'each': {",
                "\t\t\t\t\tpattern: /^each .+? in\\b/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'keyword': /\\b(?:each|in)\\b/,",
                "\t\t\t\t\t\t'punctuation': /,/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'branch': {",
                "\t\t\t\t\tpattern: /^(?:if|unless|else|case|when|default|while)\\b/,",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'mixin': [",
                "\t\t\t// Declaration",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*)mixin .+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'keyword': /^mixin/,",
                "\t\t\t\t\t'function': /\\w+(?=\\s*\\(|\\s*$)/,",
                "\t\t\t\t\t'punctuation': /[(),.]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Usage",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*)\\+.+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'name': {",
                "\t\t\t\t\t\tpattern: /^\\+\\w+/,",
                "\t\t\t\t\t\talias: 'function'",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'rest': Prism.languages.javascript",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'script': {",
                "\t\t\tpattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'plain-text': {",
                "\t\t\tpattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'tag': {",
                "\t\t\tpattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'attributes': [",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /&[^(]+\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /\\([^)]+\\)/,",
                "\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\t\tpattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,",
                "\t\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t\t},",
                "\t\t\t\t\t\t\t'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,",
                "\t\t\t\t\t\t\t'punctuation': /[!=(),]+/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /:/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'code': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^[\\t ]*(?:-|!?=)).+/m,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\trest: Prism.languages.javascript",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'punctuation': /[.\\-!=|]+/",
                "\t};",
                "",
                "\tvar filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source;",
                "",
                "\t// Non exhaustive list of available filters and associated languages",
                "\tvar filters = [",
                "\t\t{filter:'atpl',language:'twig'},",
                "\t\t{filter:'coffee',language:'coffeescript'},",
                "\t\t'ejs',",
                "\t\t'handlebars',",
                "\t\t'less',",
                "\t\t'livescript',",
                "\t\t'markdown',",
                "\t\t{filter:'sass',language:'scss'},",
                "\t\t'stylus'",
                "\t];",
                "\tvar all_filters = {};",
                "\tfor (var i = 0, l = filters.length; i < l; i++) {",
                "\t\tvar filter = filters[i];",
                "\t\tfilter = typeof filter === 'string' ? {filter: filter, language: filter} : filter;",
                "\t\tif (Prism.languages[filter.language]) {",
                "\t\t\tall_filters['filter-' + filter.filter] = {",
                "\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter), 'm'),",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'filter-name': {",
                "\t\t\t\t\t\tpattern: /^:[\\w-]+/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages[filter.language]",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "",
                "\tPrism.languages.insertBefore('pug', 'filter', all_filters);",
                "",
                "}(Prism));"
            ]
        },
        "prism-pug.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.pug={comment:{pattern:/(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,lookbehind:!0},\"multiline-script\":{pattern:/(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:{rest:e.languages.javascript}},filter:{pattern:/(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},\"multiline-plain-text\":{pattern:/(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0},markup:{pattern:/(^[\\t ]*)<.+/m,lookbehind:!0,inside:{rest:e.languages.markup}},doctype:{pattern:/((?:^|\\n)[\\t ]*)doctype(?: .+)?/,lookbehind:!0},\"flow-control\":{pattern:/(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,lookbehind:!0,inside:{each:{pattern:/^each .+? in\\b/,inside:{keyword:/\\b(?:each|in)\\b/,punctuation:/,/}},branch:{pattern:/^(?:if|unless|else|case|when|default|while)\\b/,alias:\"keyword\"},rest:e.languages.javascript}},keyword:{pattern:/(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,lookbehind:!0},mixin:[{pattern:/(^[\\t ]*)mixin .+/m,lookbehind:!0,inside:{keyword:/^mixin/,function:/\\w+(?=\\s*\\(|\\s*$)/,punctuation:/[(),.]/}},{pattern:/(^[\\t ]*)\\+.+/m,lookbehind:!0,inside:{name:{pattern:/^\\+\\w+/,alias:\"function\"},rest:e.languages.javascript}}],script:{pattern:/(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,lookbehind:!0,inside:{rest:e.languages.javascript}},\"plain-text\":{pattern:/(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,lookbehind:!0},tag:{pattern:/(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,lookbehind:!0,inside:{attributes:[{pattern:/&[^(]+\\([^)]+\\)/,inside:{rest:e.languages.javascript}},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,lookbehind:!0,inside:{rest:e.languages.javascript}},\"attr-name\":/[\\w-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[!=(),]+/}}],punctuation:/:/}},code:[{pattern:/(^[\\t ]*(?:-|!?=)).+/m,lookbehind:!0,inside:{rest:e.languages.javascript}}],punctuation:/[.\\-!=|]+/};for(var t=[{filter:\"atpl\",language:\"twig\"},{filter:\"coffee\",language:\"coffeescript\"},\"ejs\",\"handlebars\",\"less\",\"livescript\",\"markdown\",{filter:\"sass\",language:\"scss\"},\"stylus\"],n={},a=0,i=t.length;a<i;a++){var r=t[a];r=\"string\"==typeof r?{filter:r,language:r}:r,e.languages[r.language]&&(n[\"filter-\"+r.filter]={pattern:RegExp(\"(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\\\2[\\t ]+.+|\\\\s*?(?=\\r?\\n|\\r)))+\".replace(\"{{filter_name}}\",r.filter),\"m\"),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[r.language]}})}e.languages.insertBefore(\"pug\",\"filter\",n)}(Prism);"
            ]
        },
        "prism-puppet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.puppet = {",
                "\t\t'heredoc': [",
                "\t\t\t// Matches the content of a quoted heredoc string (subject to interpolation)",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// Matches the end tag",
                "\t\t\t\t\t'punctuation': /(?=\\S).*\\S(?= *$)/",
                "\t\t\t\t\t// See interpolation below",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Matches the content of an unquoted heredoc string (no interpolation)",
                "\t\t\t{",
                "\t\t\t\tpattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t// Matches the end tag",
                "\t\t\t\t\t'punctuation': /(?=\\S).*\\S(?= *$)/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t// Matches the start tag of heredoc strings",
                "\t\t\t{",
                "\t\t\t\tpattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,",
                "\t\t\t\talias: 'string',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\tpattern: /(\\().+?(?=\\))/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t],",
                "\t\t'multiline-comment': {",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'comment'",
                "\t\t},",
                "\t\t'regex': {",
                "\t\t\t// Must be prefixed with the keyword \"node\" or a non-word char",
                "\t\t\tpattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t// Extended regexes must have the x flag. They can contain single-line comments.",
                "\t\t\t\t'extended-regex': {",
                "\t\t\t\t\tpattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'comment': /#.*/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\t// Allow for one nested level of double quotes inside interpolation",
                "\t\t\tpattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'double-quoted': {",
                "\t\t\t\t\tpattern: /^\"[\\s\\S]*\"$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t// See interpolation below",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /::/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'attr-name': /(?:\\w+|\\*)(?=\\s*=>)/,",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.)(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/",
                "\t\t],",
                "\t\t'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t// Includes words reserved for future use",
                "\t\t'keyword': /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,",
                "\t\t'datatype': {",
                "\t\t\tpattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'operator': /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,",
                "\t\t'punctuation': /[\\[\\]{}().,;]|:+/",
                "\t};",
                "",
                "\tvar interpolation = [",
                "\t\t{",
                "\t\t\t// Allow for one nested level of braces inside interpolation",
                "\t\t\tpattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'short-variable': {",
                "\t\t\t\t\t// Negative look-ahead prevent wrong highlighting of functions",
                "\t\t\t\t\tpattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'variable',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /::/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^\\$/,",
                "\t\t\t\t\talias: 'variable'",
                "\t\t\t\t},",
                "\t\t\t\trest: Prism.languages.puppet",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /::/",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "\tPrism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;",
                "\tPrism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;",
                "}(Prism));"
            ]
        },
        "prism-puppet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.puppet={heredoc:[{pattern:/(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,lookbehind:!0,alias:\"string\",inside:{punctuation:/(?=\\S).*\\S(?= *$)/}},{pattern:/(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,lookbehind:!0,greedy:!0,alias:\"string\",inside:{punctuation:/(?=\\S).*\\S(?= *$)/}},{pattern:/@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,alias:\"string\",inside:{punctuation:{pattern:/(\\().+?(?=\\))/,lookbehind:!0}}}],\"multiline-comment\":{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0,greedy:!0,alias:\"comment\"},regex:{pattern:/((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,lookbehind:!0,greedy:!0,inside:{\"extended-regex\":{pattern:/^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,inside:{comment:/#.*/}}}},comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0,greedy:!0},string:{pattern:/([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{\"double-quoted\":{pattern:/^\"[\\s\\S]*\"$/,inside:{}}}},variable:{pattern:/\\$(?:::)?\\w+(?:::\\w+)*/,inside:{punctuation:/::/}},\"attr-name\":/(?:\\w+|\\*)(?=\\s*=>)/,function:[{pattern:/(\\.)(?!\\d)\\w+/,lookbehind:!0},/\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],number:/\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,boolean:/\\b(?:true|false)\\b/,keyword:/\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,datatype:{pattern:/\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,alias:\"symbol\"},operator:/=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,punctuation:/[\\[\\]{}().,;]|:+/};var n=[{pattern:/(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,lookbehind:!0,inside:{\"short-variable\":{pattern:/(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,lookbehind:!0,alias:\"variable\",inside:{punctuation:/::/}},delimiter:{pattern:/^\\$/,alias:\"variable\"},rest:e.languages.puppet}},{pattern:/(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,lookbehind:!0,alias:\"variable\",inside:{punctuation:/::/}}];e.languages.puppet.heredoc[0].inside.interpolation=n,e.languages.puppet.string.inside[\"double-quoted\"].inside.interpolation=n}(Prism);"
            ]
        },
        "prism-pure.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.pure = {",
                "\t\t'comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/#!.+/",
                "\t\t],",
                "\t\t'inline-lang': {",
                "\t\t\tpattern: /%<[\\s\\S]+?%>/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'lang': {",
                "\t\t\t\t\tpattern: /(^%< *)-\\*-.+?-\\*-/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'comment'",
                "\t\t\t\t},",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: /^%<.*|%>$/,",
                "\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': {",
                "\t\t\t// The look-behind prevents wrong highlighting of the .. operator",
                "\t\t\tpattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,",
                "\t\t'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,",
                "\t\t'special': {",
                "\t\t\tpattern: /\\b__[a-z]+__\\b/i,",
                "\t\t\talias: 'builtin'",
                "\t\t},",
                "\t\t// Any combination of operator chars can be an operator",
                "\t\t'operator': /(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,",
                "\t\t// FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?",
                "\t\t'punctuation': /[(){}\\[\\];,|]/",
                "\t};",
                "",
                "\tvar inlineLanguages = [",
                "\t\t'c',",
                "\t\t{ lang: 'c++', alias: 'cpp' },",
                "\t\t'fortran'",
                "\t];",
                "\tvar inlineLanguageRe = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;",
                "",
                "\tinlineLanguages.forEach(function (lang) {",
                "\t\tvar alias = lang;",
                "\t\tif (typeof lang !== 'string') {",
                "\t\t\talias = lang.alias;",
                "\t\t\tlang = lang.lang;",
                "\t\t}",
                "\t\tif (Prism.languages[alias]) {",
                "\t\t\tvar o = {};",
                "\t\t\to['inline-lang-' + alias] = {",
                "\t\t\t\tpattern: RegExp(inlineLanguageRe.replace('{lang}', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,'\\\\$1')), 'i'),",
                "\t\t\t\tinside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)",
                "\t\t\t};",
                "\t\t\to['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);",
                "\t\t\tPrism.languages.insertBefore('pure', 'inline-lang', o);",
                "\t\t}",
                "\t});",
                "",
                "\t// C is the default inline language",
                "\tif (Prism.languages.c) {",
                "\t\tPrism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);",
                "\t}",
                "",
                "}(Prism));"
            ]
        },
        "prism-pure.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(r){r.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0},/#!.+/],\"inline-lang\":{pattern:/%<[\\s\\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:!0,alias:\"comment\"},delimiter:{pattern:/^%<.*|%>$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},number:{pattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,lookbehind:!0},keyword:/\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,function:/\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,special:{pattern:/\\b__[a-z]+__\\b/i,alias:\"builtin\"},operator:/(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,punctuation:/[(){}\\[\\];,|]/};[\"c\",{lang:\"c++\",alias:\"cpp\"},\"fortran\"].forEach(function(e){var t=e;if(\"string\"!=typeof e&&(t=e.alias,e=e.lang),r.languages[t]){var a={};a[\"inline-lang-\"+t]={pattern:RegExp(\"%< *-\\\\*- *{lang}\\\\d* *-\\\\*-[\\\\s\\\\S]+?%>\".replace(\"{lang}\",e.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,\"\\\\$1\")),\"i\"),inside:r.util.clone(r.languages.pure[\"inline-lang\"].inside)},a[\"inline-lang-\"+t].inside.rest=r.util.clone(r.languages[t]),r.languages.insertBefore(\"pure\",\"inline-lang\",a)}}),r.languages.c&&(r.languages.pure[\"inline-lang\"].inside.rest=r.util.clone(r.languages.c))}(Prism);"
            ]
        },
        "prism-python.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.python = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string-interpolation': {",
                "\t\tpattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\t// \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"",
                "\t\t\t\tpattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'format-spec': {",
                "\t\t\t\t\t\tpattern: /(:)[^:(){}]+(?=}$)/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t},",
                "\t\t\t\t\t'conversion-option': {",
                "\t\t\t\t\t\tpattern: /![sra](?=[:}]$)/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: null",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t},",
                "\t'triple-quoted-string': {",
                "\t\tpattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'class-name': {",
                "\t\tpattern: /(\\bclass\\s+)\\w+/i,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'decorator': {",
                "\t\tpattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,",
                "\t\tlookbehind: true,",
                "\t\talias: ['annotation', 'punctuation'],",
                "\t\tinside: {",
                "\t\t\t'punctuation': /\\./",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,",
                "\t'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,",
                "\t'boolean': /\\b(?:True|False|None)\\b/,",
                "\t'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,",
                "\t'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};",
                "",
                "Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;",
                "",
                "Prism.languages.py = Prism.languages.python;"
            ]
        },
        "prism-python.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.python={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},\"string-interpolation\":{pattern:/(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,lookbehind:!0,inside:{\"format-spec\":{pattern:/(:)[^:(){}]+(?=}$)/,lookbehind:!0},\"conversion-option\":{pattern:/![sra](?=[:}]$)/,alias:\"punctuation\"},rest:null}},string:/[\\s\\S]+/}},\"triple-quoted-string\":{pattern:/(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,greedy:!0,alias:\"string\"},string:{pattern:/(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,greedy:!0},function:{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,lookbehind:!0},\"class-name\":{pattern:/(\\bclass\\s+)\\w+/i,lookbehind:!0},decorator:{pattern:/(^\\s*)@\\w+(?:\\.\\w+)*/i,lookbehind:!0,alias:[\"annotation\",\"punctuation\"],inside:{punctuation:/\\./}},keyword:/\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,builtin:/\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,boolean:/\\b(?:True|False|None)\\b/,number:/(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\\];(),.:]/},Prism.languages.python[\"string-interpolation\"].inside.interpolation.inside.rest=Prism.languages.python,Prism.languages.py=Prism.languages.python;"
            ]
        },
        "prism-q.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.q = {",
                "\t'string': /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,",
                "\t'comment': [",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.",
                "\t\t{",
                "",
                "\t\t\tpattern: /([\\t )\\]}])\\/.*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.",
                "\t\t// A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.",
                "\t\t// If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.",
                "\t\t// The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.",
                "\t\t{",
                "\t\t\tpattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t// From http://code.kx.com/wiki/Reference/Slash:",
                "\t\t// A \\ on a line by itself with no preceding matching / will comment to end of file.",
                "\t\t{",
                "\t\t\tpattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /^#!.+/m,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'symbol': /`(?::\\S+|[\\w.]*)/,",
                "\t'datetime': {",
                "\t\tpattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,",
                "\t\talias: 'number'",
                "\t},",
                "\t// The negative look-ahead prevents bad highlighting",
                "\t// of verbs 0: and 1:",
                "\t'number': /\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?[hjfeb]?)/,",
                "\t'keyword': /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,",
                "\t'adverb': {",
                "\t\tpattern: /['\\/\\\\]:?|\\beach\\b/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'verb': {",
                "\t\tpattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?_~=|$&#@^]):?/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'punctuation': /[(){}\\[\\];.]/",
                "};"
            ]
        },
        "prism-q.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.q={string:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,comment:[{pattern:/([\\t )\\]}])\\/.*/,lookbehind:!0,greedy:!0},{pattern:/(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,lookbehind:!0,greedy:!0},{pattern:/^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,greedy:!0},{pattern:/^#!.+/m,greedy:!0}],symbol:/`(?::\\S+|[\\w.]*)/,datetime:{pattern:/0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,alias:\"number\"},number:/\\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\\da-fA-F]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?[hjfeb]?)/,keyword:/\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,adverb:{pattern:/['\\/\\\\]:?|\\beach\\b/,alias:\"function\"},verb:{pattern:/(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?_~=|$&#@^]):?/,alias:\"operator\"},punctuation:/[(){}\\[\\];.]/};"
            ]
        },
        "prism-qore.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.qore = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t// Overridden to allow unescaped multi-line strings",
                "\t'string': {",
                "\t\tpattern: /(\"|')(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': /\\$(?!\\d)\\w+\\b/,",
                "\t'keyword': /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,",
                "\t'number': /\\b(?:0b[01]+|0x[\\da-f]*\\.?[\\da-fp\\-]+|\\d*\\.?\\d+e?\\d*[df]|\\d*\\.?\\d+)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'operator': {",
                "\t\tpattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': /\\$?\\b(?!\\d)\\w+(?=\\()/",
                "});"
            ]
        },
        "prism-qore.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.qore=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,lookbehind:!0},string:{pattern:/(\"|')(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},variable:/\\$(?!\\d)\\w+\\b/,keyword:/\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,number:/\\b(?:0b[01]+|0x[\\da-f]*\\.?[\\da-fp\\-]+|\\d*\\.?\\d+e?\\d*[df]|\\d*\\.?\\d+)\\b/i,boolean:/\\b(?:true|false)\\b/i,operator:{pattern:/(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,lookbehind:!0},function:/\\$?\\b(?!\\d)\\w+(?=\\()/});"
            ]
        },
        "prism-r.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.r = {",
                "\t'comment': /#.*/,",
                "\t'string': {",
                "\t\tpattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'percent-operator': {",
                "\t\t// Includes user-defined operators",
                "\t\t// and %%, %*%, %/%, %in%, %o%, %x%",
                "\t\tpattern: /%[^%\\s]*%/,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'boolean': /\\b(?:TRUE|FALSE)\\b/,",
                "\t'ellipsis': /\\.\\.(?:\\.|\\d+)/,",
                "\t'number': [",
                "\t\t/\\b(?:NaN|Inf)\\b/,",
                "\t\t/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/",
                "\t],",
                "\t'keyword': /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,",
                "\t'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,",
                "\t'punctuation': /[(){}\\[\\],;]/",
                "};"
            ]
        },
        "prism-r.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.r={comment:/#.*/,string:{pattern:/(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"percent-operator\":{pattern:/%[^%\\s]*%/,alias:\"operator\"},boolean:/\\b(?:TRUE|FALSE)\\b/,ellipsis:/\\.\\.(?:\\.|\\d+)/,number:[/\\b(?:NaN|Inf)\\b/,/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],keyword:/\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,operator:/->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,punctuation:/[(){}\\[\\],;]/};"
            ]
        },
        "prism-reason.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.reason = Prism.languages.extend('clike', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// 'class-name' must be matched *after* 'constructor' defined below",
                "\t'class-name': /\\b[A-Z]\\w*/,",
                "\t'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,",
                "\t'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/",
                "});",
                "Prism.languages.insertBefore('reason', 'class-name', {",
                "\t'character': {",
                "\t\tpattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'constructor': {",
                "\t\t// Negative look-ahead prevents from matching things like String.capitalize",
                "\t\tpattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'label': {",
                "\t\tpattern: /\\b[a-z]\\w*(?=::)/,",
                "\t\talias: 'symbol'",
                "\t}",
                "});",
                "",
                "// We can't match functions property, so let's not even try.",
                "delete Prism.languages.reason.function;"
            ]
        },
        "prism-reason.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.reason=Prism.languages.extend(\"clike\",{comment:{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,greedy:!0},\"class-name\":/\\b[A-Z]\\w*/,keyword:/\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,operator:/\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/}),Prism.languages.insertBefore(\"reason\",\"class-name\",{character:{pattern:/'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,alias:\"string\"},constructor:{pattern:/\\b[A-Z]\\w*\\b(?!\\s*\\.)/,alias:\"variable\"},label:{pattern:/\\b[a-z]\\w*(?=::)/,alias:\"symbol\"}}),delete Prism.languages.reason.function;"
            ]
        },
        "prism-regex.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tvar specialEscape = {",
                "\t\tpattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,",
                "\t\talias: 'escape'",
                "\t};",
                "\tvar escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/",
                "\tvar charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i",
                "",
                "\tvar rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';",
                "\tvar range = RegExp(rangeChar + '-' + rangeChar);",
                "",
                "\t// the name of a capturing group",
                "\tvar groupName = {",
                "\t\tpattern: /(<|')[^<>']+(?=[>']$)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'variable'",
                "\t};",
                "",
                "\tvar backreference = [",
                "\t\t/\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape",
                "\t\t{",
                "\t\t\tpattern: /\\\\k<[^<>']+>/,",
                "\t\t\tinside: {",
                "\t\t\t\t'group-name': groupName",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.regex = {",
                "\t\t'charset': {",
                "\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'charset-negation': {",
                "\t\t\t\t\tpattern: /(^\\[)\\^/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t},",
                "\t\t\t\t'charset-punctuation': /^\\[|\\]$/,",
                "\t\t\t\t'range': {",
                "\t\t\t\t\tpattern: range,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'escape': escape,",
                "\t\t\t\t\t\t'range-punctuation': /-/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'special-escape': specialEscape,",
                "\t\t\t\t'charclass': charClass,",
                "\t\t\t\t'backreference': backreference,",
                "\t\t\t\t'escape': escape",
                "\t\t\t}",
                "\t\t},",
                "\t\t'special-escape': specialEscape,",
                "\t\t'charclass': charClass,",
                "\t\t'backreference': backreference,",
                "\t\t'anchor': /[$^]|\\\\[ABbGZz]/,",
                "\t\t'escape': escape,",
                "\t\t'group': [",
                "\t\t\t{",
                "\t\t\t\t// https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html",
                "\t\t\t\t// https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs",
                "",
                "\t\t\t\t// (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)",
                "\t\t\t\tpattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'group-name': groupName",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t/\\)/",
                "\t\t],",
                "\t\t'quantifier': /[+*?]|\\{(?:\\d+,?\\d*)\\}/,",
                "\t\t'alternation': /\\|/",
                "\t};",
                "",
                "",
                "\t[",
                "\t\t'actionscript',",
                "\t\t'coffescript',",
                "\t\t'flow',",
                "\t\t'javascript',",
                "\t\t'typescript',",
                "\t\t'vala'",
                "\t].forEach(function (lang) {",
                "\t\tvar grammar = Prism.languages[lang];",
                "\t\tif (grammar) {",
                "\t\t\tgrammar['regex'].inside = {",
                "\t\t\t\t'regex-flags': /[a-z]+$/,",
                "\t\t\t\t'regex-delimiter': /^\\/|\\/$/,",
                "\t\t\t\t'language-regex': {",
                "\t\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\t\tinside: Prism.languages.regex",
                "\t\t\t\t}",
                "\t\t\t};",
                "\t\t}",
                "\t});",
                "",
                "}(Prism))"
            ]
        },
        "prism-regex.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var e={pattern:/\\\\[\\\\(){}[\\]^$+*?|.]/,alias:\"escape\"},a=/\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/,r=/\\\\[wsd]|\\.|\\\\p{[^{}]+}/i,i=\"(?:[^\\\\\\\\-]|\"+a.source+\")\",s=RegExp(i+\"-\"+i),t={pattern:/(<|')[^<>']+(?=[>']$)/,lookbehind:!0,alias:\"variable\"},c=[/\\\\(?![123][0-7]{2})[1-9]/,{pattern:/\\\\k<[^<>']+>/,inside:{\"group-name\":t}}];n.languages.regex={charset:{pattern:/((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,lookbehind:!0,inside:{\"charset-negation\":{pattern:/(^\\[)\\^/,lookbehind:!0},\"charset-punctuation\":/^\\[|\\]$/,range:{pattern:s,inside:{escape:a,\"range-punctuation\":/-/}},\"special-escape\":e,charclass:r,backreference:c,escape:a}},\"special-escape\":e,charclass:r,backreference:c,anchor:/[$^]|\\\\[ABbGZz]/,escape:a,group:[{pattern:/\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,inside:{\"group-name\":t}},/\\)/],quantifier:/[+*?]|\\{(?:\\d+,?\\d*)\\}/,alternation:/\\|/},[\"actionscript\",\"coffescript\",\"flow\",\"javascript\",\"typescript\",\"vala\"].forEach(function(e){var a=n.languages[e];a&&(a.regex.inside={\"regex-flags\":/[a-z]+$/,\"regex-delimiter\":/^\\/|\\/$/,\"language-regex\":{pattern:/[\\s\\S]+/,inside:n.languages.regex}})})}(Prism);"
            ]
        },
        "prism-renpy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.renpy= {",
                "\t// TODO Write tests.",
                "",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.+/,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'string': {",
                "\t\tpattern: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'function' : /[a-z_]\\w*(?=\\()/i,",
                "",
                "\t'property': /\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,",
                "",
                "\t'tag': /\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,",
                "",
                "\t'keyword' : /\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,",
                "",
                "\t'boolean' : /\\b(?:[Tt]rue|[Ff]alse)\\b/,",
                "",
                "\t'number' : /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,",
                "",
                "\t'operator' : /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,",
                "",
                "\t'punctuation' : /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-renpy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.renpy={comment:{pattern:/(^|[^\\\\])#.+/,lookbehind:!0},string:{pattern:/(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,greedy:!0},function:/[a-z_]\\w*(?=\\()/i,property:/\\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\\b/,tag:/\\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\\b|\\$/,keyword:/\\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\\b/,boolean:/\\b(?:[Tt]rue|[Ff]alse)\\b/,number:/(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not|with|at)\\b/,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-rest.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rest = {",
                "\t'table': [",
                "\t\t{",
                "\t\t\tpattern: /(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1(?:[+|].+)+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\||(?:\\+[=-]+)+\\+/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\s*)(?:=+ +)+=+(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1(?:=+ +)+=+(?=(?:\\r?\\n|\\r){2}|\\s*$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[=-]+/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t// Directive-like patterns",
                "",
                "\t'substitution-def': {",
                "\t\tpattern: /(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'substitution': {",
                "\t\t\t\tpattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,",
                "\t\t\t\talias: 'attr-value',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^\\||\\|$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'directive': {",
                "\t\t\t\tpattern: /( +)[^:]+::/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\talias: 'function',",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /::$/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'link-target': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*\\.\\. )\\[[^\\]]+\\]/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\[|\\]$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^_|:$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'directive': {",
                "\t\tpattern: /(^\\s*\\.\\. )[^:]+::/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'function',",
                "\t\tinside: {",
                "\t\t\t'punctuation': /::$/",
                "\t\t}",
                "\t},",
                "\t'comment': {",
                "\t\t// The two alternatives try to prevent highlighting of blank comments",
                "\t\tpattern: /(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,",
                "\t\tlookbehind: true",
                "\t},",
                "",
                "\t'title': [",
                "\t\t// Overlined and underlined",
                "\t\t{",
                "\t\t\tpattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,",
                "\t\t\t\t'important': /.+/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// Underlined only",
                "\t\t{",
                "\t\t\tpattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,",
                "\t\t\t\t'important': /.+/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'hr': {",
                "\t\tpattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'field': {",
                "\t\tpattern: /(^\\s*):[^:\\r\\n]+:(?= )/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'attr-name'",
                "\t},",
                "\t'command-line-option': {",
                "\t\tpattern: /(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'literal-block': {",
                "\t\tpattern: /::(?:\\r?\\n|\\r){2}([ \\t]+).+(?:(?:\\r?\\n|\\r)\\1.+)*/,",
                "\t\tinside: {",
                "\t\t\t'literal-block-punctuation': {",
                "\t\t\t\tpattern: /^::/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'quoted-literal-block': {",
                "\t\tpattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,",
                "\t\tinside: {",
                "\t\t\t'literal-block-punctuation': {",
                "\t\t\t\tpattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'list-bullet': {",
                "\t\tpattern: /(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'doctest-block': {",
                "\t\tpattern: /(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^>>>/",
                "\t\t}",
                "\t},",
                "",
                "\t'inline': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'bold': {",
                "\t\t\t\t\tpattern: /(^\\*\\*).+(?=\\*\\*$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'italic': {",
                "\t\t\t\t\tpattern: /(^\\*).+(?=\\*$)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t'inline-literal': {",
                "\t\t\t\t\tpattern: /(^``).+(?=``$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'symbol'",
                "\t\t\t\t},",
                "\t\t\t\t'role': {",
                "\t\t\t\t\tpattern: /^:[^:]+:|:[^:]+:$/,",
                "\t\t\t\t\talias: 'function',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /^:|:$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'interpreted-text': {",
                "\t\t\t\t\tpattern: /(^`).+(?=`$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'substitution': {",
                "\t\t\t\t\tpattern: /(^\\|).+(?=\\|$)/,",
                "\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\talias: 'attr-value'",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': /\\*\\*?|``?|\\|/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t'link': [",
                "\t\t{",
                "\t\t\tpattern: /\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^\\[|\\]_$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(?:\\b[a-z\\d](?:[_.:+]?[a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^_?`|`$|`?_?_$/",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "",
                "\t// Line block start,",
                "\t// quote attribution,",
                "\t// explicit markup start,",
                "\t// and anonymous hyperlink target shortcut (__)",
                "\t'punctuation': {",
                "\t\tpattern: /(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,",
                "\t\tlookbehind: true",
                "\t}",
                "};"
            ]
        },
        "prism-rest.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rest={table:[{pattern:/(\\s*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1(?:[+|].+)+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/,lookbehind:!0,inside:{punctuation:/\\||(?:\\+[=-]+)+\\+/}},{pattern:/(\\s*)(?:=+ +)+=+(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1(?:=+ +)+=+(?=(?:\\r?\\n|\\r){2}|\\s*$)/,lookbehind:!0,inside:{punctuation:/[=-]+/}}],\"substitution-def\":{pattern:/(^\\s*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,lookbehind:!0,inside:{substitution:{pattern:/^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,alias:\"attr-value\",inside:{punctuation:/^\\||\\|$/}},directive:{pattern:/( +)[^:]+::/,lookbehind:!0,alias:\"function\",inside:{punctuation:/::$/}}}},\"link-target\":[{pattern:/(^\\s*\\.\\. )\\[[^\\]]+\\]/m,lookbehind:!0,alias:\"string\",inside:{punctuation:/^\\[|\\]$/}},{pattern:/(^\\s*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,lookbehind:!0,alias:\"string\",inside:{punctuation:/^_|:$/}}],directive:{pattern:/(^\\s*\\.\\. )[^:]+::/m,lookbehind:!0,alias:\"function\",inside:{punctuation:/::$/}},comment:{pattern:/(^\\s*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,lookbehind:!0},title:[{pattern:/^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,inside:{punctuation:/^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,important:/.+/}},{pattern:/(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,lookbehind:!0,inside:{punctuation:/[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,important:/.+/}}],hr:{pattern:/((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,lookbehind:!0,alias:\"punctuation\"},field:{pattern:/(^\\s*):[^:\\r\\n]+:(?= )/m,lookbehind:!0,alias:\"attr-name\"},\"command-line-option\":{pattern:/(^\\s*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,lookbehind:!0,alias:\"symbol\"},\"literal-block\":{pattern:/::(?:\\r?\\n|\\r){2}([ \\t]+).+(?:(?:\\r?\\n|\\r)\\1.+)*/,inside:{\"literal-block-punctuation\":{pattern:/^::/,alias:\"punctuation\"}}},\"quoted-literal-block\":{pattern:/::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,inside:{\"literal-block-punctuation\":{pattern:/^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,alias:\"punctuation\"}}},\"list-bullet\":{pattern:/(^\\s*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,lookbehind:!0,alias:\"punctuation\"},\"doctest-block\":{pattern:/(^\\s*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,lookbehind:!0,inside:{punctuation:/^>>>/}},inline:[{pattern:/(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s).*?[^\\s]\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,lookbehind:!0,inside:{bold:{pattern:/(^\\*\\*).+(?=\\*\\*$)/,lookbehind:!0},italic:{pattern:/(^\\*).+(?=\\*$)/,lookbehind:!0},\"inline-literal\":{pattern:/(^``).+(?=``$)/,lookbehind:!0,alias:\"symbol\"},role:{pattern:/^:[^:]+:|:[^:]+:$/,alias:\"function\",inside:{punctuation:/^:|:$/}},\"interpreted-text\":{pattern:/(^`).+(?=`$)/,lookbehind:!0,alias:\"attr-value\"},substitution:{pattern:/(^\\|).+(?=\\|$)/,lookbehind:!0,alias:\"attr-value\"},punctuation:/\\*\\*?|``?|\\|/}}],link:[{pattern:/\\[[^\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,alias:\"string\",inside:{punctuation:/^\\[|\\]_$/}},{pattern:/(?:\\b[a-z\\d](?:[_.:+]?[a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,alias:\"string\",inside:{punctuation:/^_?`|`$|`?_?_$/}}],punctuation:{pattern:/(^\\s*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,lookbehind:!0}};"
            ]
        },
        "prism-rip.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rip = {",
                "\t'comment': /#.*/,",
                "",
                "\t'keyword': /(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,",
                "",
                "\t'builtin': /@|\\bSystem\\b/,",
                "",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "",
                "\t'date': /\\b\\d{4}-\\d{2}-\\d{2}\\b/,",
                "\t'time': /\\b\\d{2}:\\d{2}:\\d{2}\\b/,",
                "\t'datetime': /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,",
                "",
                "\t'character': /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,",
                "",
                "\t'regex': {",
                "\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/(?=\\s*($|[\\r\\n,.;})]))/,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "",
                "\t'symbol': /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,",
                "\t'string': {",
                "\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': /[+-]?(?:(?:\\d+\\.\\d+)|(?:\\d+))/,",
                "",
                "\t'punctuation': /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,",
                "",
                "\t'reference': /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/",
                "};"
            ]
        },
        "prism-rip.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rip={comment:/#.*/,keyword:/(?:=>|->)|\\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\\b/,builtin:/@|\\bSystem\\b/,boolean:/\\b(?:true|false)\\b/,date:/\\b\\d{4}-\\d{2}-\\d{2}\\b/,time:/\\b\\d{2}:\\d{2}:\\d{2}\\b/,datetime:/\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,character:/\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,regex:{pattern:/(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/(?=\\s*($|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0},symbol:/:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},number:/[+-]?(?:(?:\\d+\\.\\d+)|(?:\\d+))/,punctuation:/(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,reference:/[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/};"
            ]
        },
        "prism-roboconf.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.roboconf = {",
                "\t'comment': /#.*/,",
                "\t'keyword': {",
                "\t\t'pattern': /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'component': {",
                "\t\tpattern: /[\\w-]+(?=[ \\t]*\\{)/,",
                "\t\talias: 'variable'",
                "\t},",
                "\t'property': /[\\w.-]+(?=[ \\t]*:)/,",
                "\t'value': {",
                "\t\tpattern: /(=[ \\t]*)[^,;]+/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'attr-value'",
                "\t},",
                "\t'optional': {",
                "\t\tpattern: /\\(optional\\)/,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'wildcard': {",
                "\t\tpattern: /(\\.)\\*/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'operator'",
                "\t},",
                "\t'punctuation': /[{},.;:=]/",
                "};"
            ]
        },
        "prism-roboconf.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.roboconf={comment:/#.*/,keyword:{pattern:/(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,lookbehind:!0},component:{pattern:/[\\w-]+(?=[ \\t]*\\{)/,alias:\"variable\"},property:/[\\w.-]+(?=[ \\t]*:)/,value:{pattern:/(=[ \\t]*)[^,;]+/,lookbehind:!0,alias:\"attr-value\"},optional:{pattern:/\\(optional\\)/,alias:\"builtin\"},wildcard:{pattern:/(\\.)\\*/,lookbehind:!0,alias:\"operator\"},punctuation:/[{},.;:=]/};"
            ]
        },
        "prism-ruby.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/**",
                " * Original by Samuel Flores",
                " *",
                " * Adds the following new token classes:",
                " * \t\tconstant, builtin, variable, symbol, regex",
                " */",
                "(function(Prism) {",
                "\tPrism.languages.ruby = Prism.languages.extend('clike', {",
                "\t\t'comment': [",
                "\t\t\t/#.*/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /^=begin\\s[\\s\\S]*?^=end/m,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/",
                "\t});",
                "",
                "\tvar interpolation = {",
                "\t\tpattern: /#\\{[^}]+\\}/,",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^#\\{|\\}$/,",
                "\t\t\t\talias: 'tag'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.ruby",
                "\t\t}",
                "\t};",
                "",
                "\tdelete Prism.languages.ruby.function;",
                "",
                "\tPrism.languages.insertBefore('ruby', 'keyword', {",
                "\t\t'regex': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\t\tpattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'interpolation': interpolation",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t'symbol': {",
                "\t\t\tpattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'method-definition': {",
                "\t\t\tpattern: /(\\bdef\\s+)[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'function': /\\w+$/,",
                "\t\t\t\trest: Prism.languages.ruby",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('ruby', 'number', {",
                "\t\t'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,",
                "\t\t'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/",
                "\t});",
                "",
                "\tPrism.languages.ruby.string = [",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// Here we need to specifically allow interpolation",
                "\t\t\tpattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': interpolation",
                "\t\t\t}",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.rb = Prism.languages.ruby;",
                "}(Prism));"
            ]
        },
        "prism-ruby.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.ruby=e.languages.extend(\"clike\",{comment:[/#.*/,{pattern:/^=begin\\s[\\s\\S]*?^=end/m,greedy:!0}],keyword:/\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/});var n={pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"tag\"},rest:e.languages.ruby}};delete e.languages.ruby.function,e.languages.insertBefore(\"ruby\",\"keyword\",{regex:[{pattern:/%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0}],variable:/[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,lookbehind:!0},\"method-definition\":{pattern:/(\\bdef\\s+)[\\w.]+/,lookbehind:!0,inside:{function:/\\w+$/,rest:e.languages.ruby}}}),e.languages.insertBefore(\"ruby\",\"number\",{builtin:/\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,constant:/\\b[A-Z]\\w*(?:[?!]|\\b)/}),e.languages.ruby.string=[{pattern:/%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,greedy:!0,inside:{interpolation:n}},{pattern:/(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:n}}],e.languages.rb=e.languages.ruby}(Prism);"
            ]
        },
        "prism-rust.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tAdd support for Markdown notation inside doc comments",
                "\tAdd support for nested block comments...",
                "\tMatch closure params even when not followed by dash or brace",
                "\tAdd better support for macro definition",
                "*/",
                "",
                "Prism.languages.rust = {",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'char': {",
                "\t\tpattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'lifetime-annotation': {",
                "\t\tpattern: /'[^\\s>']+/,",
                "\t\talias: 'symbol'",
                "\t},",
                "\t'keyword': /\\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,",
                "",
                "\t'attribute': {",
                "\t\tpattern: /#!?\\[.+?\\]/,",
                "\t\tgreedy: true,",
                "\t\talias: 'attr-name'",
                "\t},",
                "",
                "\t'function': [",
                "\t\t/\\w+(?=\\s*\\()/,",
                "\t\t// Macros can use parens or brackets",
                "\t\t/\\w+!(?=\\s*\\(|\\[)/",
                "\t],",
                "\t'macro-rules': {",
                "\t\tpattern: /\\w+!/,",
                "\t\talias: 'function'",
                "\t},",
                "",
                "\t// Hex, oct, bin, dec numbers with visual separators and type suffix",
                "\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,",
                "",
                "\t// Closure params should not be confused with bitwise OR |",
                "\t'closure-params': {",
                "\t\tpattern: /\\|[^|]*\\|(?=\\s*[{-])/,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /[|:,]/,",
                "\t\t\t'operator': /[&*]/",
                "\t\t}",
                "\t},",
                "\t'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,",
                "\t'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/",
                "};"
            ]
        },
        "prism-rust.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.rust={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],string:[{pattern:/b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,greedy:!0},{pattern:/b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0}],char:{pattern:/b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,alias:\"string\"},\"lifetime-annotation\":{pattern:/'[^\\s>']+/,alias:\"symbol\"},keyword:/\\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,attribute:{pattern:/#!?\\[.+?\\]/,greedy:!0,alias:\"attr-name\"},function:[/\\w+(?=\\s*\\()/,/\\w+!(?=\\s*\\(|\\[)/],\"macro-rules\":{pattern:/\\w+!/,alias:\"function\"},number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\"closure-params\":{pattern:/\\|[^|]*\\|(?=\\s*[{-])/,inside:{punctuation:/[|:,]/,operator:/[&*]/}},punctuation:/->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,operator:/[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/};"
            ]
        },
        "prism-sas.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sas = {",
                "\t'datalines': {",
                "\t\tpattern: /^\\s*(?:(?:data)?lines|cards);[\\s\\S]+?(?:\\r?\\n|\\r);/im,",
                "\t\talias: 'string',",
                "\t\tinside: {",
                "\t\t\t'keyword': {",
                "\t\t\t\tpattern: /^(\\s*)(?:(?:data)?lines|cards)/i,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /;/",
                "\t\t}",
                "\t},",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*|;\\s*)\\*.*;/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/\\/\\*[\\s\\S]+?\\*\\//",
                "\t],",
                "\t'datetime': {",
                "\t\t// '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt",
                "\t\tpattern: /'[^']+'(?:dt?|t)\\b/i,",
                "\t\talias: 'number'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': /\\b(?:data|else|format|if|input|proc\\s\\w+|quit|run|then|libname|set|output|options)\\b/i,",
                "\t// Decimal (1.2e23), hexadecimal (0c1x)",
                "\t'number': /\\b(?:[\\da-f]+x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)/i,",
                "\t'operator': /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?|\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,",
                "\t'punctuation': /[$%@.(){}\\[\\];,\\\\]/",
                "};"
            ]
        },
        "prism-sas.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sas={datalines:{pattern:/^\\s*(?:(?:data)?lines|cards);[\\s\\S]+?(?:\\r?\\n|\\r);/im,alias:\"string\",inside:{keyword:{pattern:/^(\\s*)(?:(?:data)?lines|cards)/i,lookbehind:!0},punctuation:/;/}},comment:[{pattern:/(^\\s*|;\\s*)\\*.*;/m,lookbehind:!0},/\\/\\*[\\s\\S]+?\\*\\//],datetime:{pattern:/'[^']+'(?:dt?|t)\\b/i,alias:\"number\"},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,greedy:!0},keyword:/\\b(?:data|else|format|if|input|proc\\s\\w+|quit|run|then|libname|set|output|options)\\b/i,number:/\\b(?:[\\da-f]+x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)/i,operator:/\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?|\\b(?:eq|ne|gt|lt|ge|le|in|not)\\b/i,punctuation:/[$%@.(){}\\[\\];,\\\\]/};"
            ]
        },
        "prism-sass.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.sass = Prism.languages.extend('css', {",
                "\t\t// Sass comments don't need to be closed, only indented",
                "\t\t'comment': {",
                "\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('sass', 'atrule', {",
                "\t\t// We want to consume the whole line",
                "\t\t'atrule-line': {",
                "\t\t\t// Includes support for = and + shortcuts",
                "\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\tdelete Prism.languages.sass.atrule;",
                "",
                "",
                "\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;",
                "\tvar operator = [",
                "\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,",
                "\t\t{",
                "\t\t\tpattern: /(\\s+)-(?=\\s)/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t];",
                "",
                "\tPrism.languages.insertBefore('sass', 'property', {",
                "\t\t// We want to consume the whole line",
                "\t\t'variable-line': {",
                "\t\t\tpattern: /^[ \\t]*\\$.+/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t'variable': variable,",
                "\t\t\t\t'operator': operator",
                "\t\t\t}",
                "\t\t},",
                "\t\t// We want to consume the whole line",
                "\t\t'property-line': {",
                "\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,",
                "\t\t\tinside: {",
                "\t\t\t\t'property': [",
                "\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,",
                "\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t}",
                "\t\t\t\t],",
                "\t\t\t\t'punctuation': /:/,",
                "\t\t\t\t'variable': variable,",
                "\t\t\t\t'operator': operator,",
                "\t\t\t\t'important': Prism.languages.sass.important",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "\tdelete Prism.languages.sass.property;",
                "\tdelete Prism.languages.sass.important;",
                "",
                "\t// Now that whole lines for other patterns are consumed,",
                "\t// what's left should be selectors",
                "\tPrism.languages.insertBefore('sass', 'punctuation', {",
                "\t\t'selector': {",
                "\t\t\tpattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-sass.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.sass=e.languages.extend(\"css\",{comment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,lookbehind:!0}}),e.languages.insertBefore(\"sass\",\"atrule\",{\"atrule-line\":{pattern:/^(?:[ \\t]*)[@+=].+/m,inside:{atrule:/(?:@[\\w-]+|[+=])/m}}}),delete e.languages.sass.atrule;var t=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,a=[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,{pattern:/(\\s+)-(?=\\s)/,lookbehind:!0}];e.languages.insertBefore(\"sass\",\"property\",{\"variable-line\":{pattern:/^[ \\t]*\\$.+/m,inside:{punctuation:/:/,variable:t,operator:a}},\"property-line\":{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:a,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore(\"sass\",\"punctuation\",{selector:{pattern:/([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,lookbehind:!0}})}(Prism);"
            ]
        },
        "prism-scala.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scala = Prism.languages.extend('java', {",
                "\t'keyword': /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,",
                "\t'string': [",
                "\t\t{",
                "\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'builtin': /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,",
                "\t'number': /\\b0x[\\da-f]*\\.?[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,",
                "\t'symbol': /'[^\\d\\s\\\\]\\w*/",
                "});",
                "delete Prism.languages.scala['class-name'];",
                "delete Prism.languages.scala['function'];"
            ]
        },
        "prism-scala.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scala=Prism.languages.extend(\"java\",{keyword:/<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,string:[{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0},{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],builtin:/\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,number:/\\b0x[\\da-f]*\\.?[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,symbol:/'[^\\d\\s\\\\]\\w*/}),delete Prism.languages.scala[\"class-name\"],delete Prism.languages.scala.function;"
            ]
        },
        "prism-scheme.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scheme = {",
                "\t'comment': /;.*/,",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'character': {",
                "\t\tpattern: /#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,",
                "\t\talias: 'string'",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'builtin': {",
                "\t\tpattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /([\\s()])[-+]?\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?\\b/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'boolean': /#[tf]/,",
                "\t'operator': {",
                "\t\tpattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': {",
                "\t\tpattern: /(\\()[^()'\\s]+(?=[()\\s)]|$)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'punctuation': /[()']/",
                "};"
            ]
        },
        "prism-scheme.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scheme={comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,greedy:!0},character:{pattern:/#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,alias:\"string\"},keyword:{pattern:/(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,lookbehind:!0},builtin:{pattern:/(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,lookbehind:!0},number:{pattern:/([\\s()])[-+]?\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?\\b/,lookbehind:!0},boolean:/#[tf]/,operator:{pattern:/(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,lookbehind:!0},function:{pattern:/(\\()[^()'\\s]+(?=[()\\s)]|$)/,lookbehind:!0},punctuation:/[()']/};"
            ]
        },
        "prism-scss.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scss = Prism.languages.extend('css', {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'atrule': {",
                "\t\tpattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,",
                "\t\tinside: {",
                "\t\t\t'rule': /@[\\w-]+/",
                "\t\t\t// See rest below",
                "\t\t}",
                "\t},",
                "\t// url, compassified",
                "\t'url': /(?:[-a-z]+-)*url(?=\\()/i,",
                "\t// CSS selector regex is not appropriate for Sass",
                "\t// since there can be lot more things (var, @ directive, nesting..)",
                "\t// a selector must start at the end of a property or after a brace (end of other rules or nesting)",
                "\t// it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable",
                "\t// the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var",
                "\t// can \"pass\" as a selector- e.g: proper#{$erty})",
                "\t// this one was hard to do, so please be careful if you edit this one :)",
                "\t'selector': {",
                "\t\t// Initial look-ahead is used to prevent matching of blank selectors",
                "\t\tpattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,",
                "\t\tinside: {",
                "\t\t\t'parent': {",
                "\t\t\t\tpattern: /&/,",
                "\t\t\t\talias: 'important'",
                "\t\t\t},",
                "\t\t\t'placeholder': /%[-\\w]+/,",
                "\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "\t\t}",
                "\t},",
                "\t'property': {",
                "\t\tpattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,",
                "\t\tinside: {",
                "\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'atrule', {",
                "\t'keyword': [",
                "\t\t/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,",
                "\t\t{",
                "\t\t\tpattern: /( +)(?:from|through)(?= )/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t]",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'important', {",
                "\t// var and interpolated vars",
                "\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/",
                "});",
                "",
                "Prism.languages.insertBefore('scss', 'function', {",
                "\t'placeholder': {",
                "\t\tpattern: /%[-\\w]+/,",
                "\t\talias: 'selector'",
                "\t},",
                "\t'statement': {",
                "\t\tpattern: /\\B!(?:default|optional)\\b/i,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'boolean': /\\b(?:true|false)\\b/,",
                "\t'null': {",
                "\t\tpattern: /\\bnull\\b/,",
                "\t\talias: 'keyword'",
                "\t},",
                "\t'operator': {",
                "\t\tpattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,",
                "\t\tlookbehind: true",
                "\t}",
                "});",
                "",
                "Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;"
            ]
        },
        "prism-scss.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.scss=Prism.languages.extend(\"css\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},atrule:{pattern:/@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,inside:{rule:/@[\\w-]+/}},url:/(?:[-a-z]+-)*url(?=\\()/i,selector:{pattern:/(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,inside:{parent:{pattern:/&/,alias:\"important\"},placeholder:/%[-\\w]+/,variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}},property:{pattern:/(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,inside:{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}}}),Prism.languages.insertBefore(\"scss\",\"atrule\",{keyword:[/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,{pattern:/( +)(?:from|through)(?= )/,lookbehind:!0}]}),Prism.languages.insertBefore(\"scss\",\"important\",{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}),Prism.languages.insertBefore(\"scss\",\"function\",{placeholder:{pattern:/%[-\\w]+/,alias:\"selector\"},statement:{pattern:/\\B!(?:default|optional)\\b/i,alias:\"keyword\"},boolean:/\\b(?:true|false)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"},operator:{pattern:/(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,lookbehind:!0}}),Prism.languages.scss.atrule.inside.rest=Prism.languages.scss;"
            ]
        },
        "prism-smalltalk.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.smalltalk = {",
                "\t'comment': /\"(?:\"\"|[^\"])*\"/,",
                "\t'string': /'(?:''|[^'])*'/,",
                "\t'symbol': /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,",
                "\t'block-arguments': {",
                "\t\tpattern: /(\\[\\s*):[^\\[|]*\\|/,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'variable': /:[\\da-z]+/i,",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'temporary-variables': {",
                "\t\tpattern: /\\|[^|]+\\|/,",
                "\t\tinside: {",
                "\t\t\t'variable': /[\\da-z]+/i,",
                "\t\t\t'punctuation': /\\|/",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:nil|true|false|self|super|new)\\b/,",
                "\t'character': {",
                "\t\tpattern: /\\$./,",
                "\t\talias: 'string'",
                "\t},",
                "\t'number': [",
                "\t\t/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,",
                "\t\t/\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/",
                "\t],",
                "\t'operator': /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,",
                "\t'punctuation': /[.;:?\\[\\](){}]/",
                "};"
            ]
        },
        "prism-smalltalk.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.smalltalk={comment:/\"(?:\"\"|[^\"])*\"/,string:/'(?:''|[^'])*'/,symbol:/#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\"block-arguments\":{pattern:/(\\[\\s*):[^\\[|]*\\|/,lookbehind:!0,inside:{variable:/:[\\da-z]+/i,punctuation:/\\|/}},\"temporary-variables\":{pattern:/\\|[^|]+\\|/,inside:{variable:/[\\da-z]+/i,punctuation:/\\|/}},keyword:/\\b(?:nil|true|false|self|super|new)\\b/,character:{pattern:/\\$./,alias:\"string\"},number:[/\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,/\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/],operator:/[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,punctuation:/[.;:?\\[\\](){}]/};"
            ]
        },
        "prism-smarty.js": {
            "classes": [],
            "functions": [],
            "text": [
                "/* TODO",
                "\tAdd support for variables inside double quoted strings",
                "\tAdd support for {php}",
                "*/",
                "",
                "(function(Prism) {",
                "",
                "\tPrism.languages.smarty = {",
                "\t\t'comment': /\\{\\*[\\s\\S]*?\\*\\}/,",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^\\{|\\}$/i,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,",
                "\t\t'variable': [",
                "\t\t\t/\\$(?!\\d)\\w+/,",
                "\t\t\t/#(?!\\d)\\w+#/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\.|->)(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\[)(?!\\d)\\w+(?=\\])/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'function': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|\\s*)@?(?!\\d)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/^\\/?(?!\\d)\\w+/,",
                "\t\t\t/(?!\\d)\\w+(?=\\()/",
                "\t\t],",
                "\t\t'attr-name': {",
                "\t\t\t// Value is made optional because it may have already been tokenized",
                "\t\t\tpattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,",
                "\t\t\tinside: {",
                "\t\t\t\t\"variable\": {",
                "\t\t\t\t\tpattern: /(=\\s*)(?!\\d)\\w+/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t\"operator\": /=/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'punctuation': [",
                "\t\t\t/[\\[\\]().,:`]|->/",
                "\t\t],",
                "\t\t'operator': [",
                "\t\t\t/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,",
                "\t\t\t/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,",
                "\t\t\t/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/",
                "\t\t],",
                "\t\t'keyword': /\\b(?:false|off|on|no|true|yes)\\b/",
                "\t};",
                "",
                "\t// Tokenize all inline Smarty expressions",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;",
                "\t\tvar smartyLitteralStart = '{literal}';",
                "\t\tvar smartyLitteralEnd = '{/literal}';",
                "\t\tvar smartyLitteralMode = false;",
                "",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {",
                "\t\t\t// Smarty tags inside {literal} block are ignored",
                "\t\t\tif(match === smartyLitteralEnd) {",
                "\t\t\t\tsmartyLitteralMode = false;",
                "\t\t\t}",
                "",
                "\t\t\tif(!smartyLitteralMode) {",
                "\t\t\t\tif(match === smartyLitteralStart) {",
                "\t\t\t\t\tsmartyLitteralMode = true;",
                "\t\t\t\t}",
                "",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t});",
                "",
                "\t// Re-insert the tokens after tokenizing",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-smarty.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.smarty={comment:/\\{\\*[\\s\\S]*?\\*\\}/,delimiter:{pattern:/^\\{|\\}$/i,alias:\"punctuation\"},string:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,number:/\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,variable:[/\\$(?!\\d)\\w+/,/#(?!\\d)\\w+#/,{pattern:/(\\.|->)(?!\\d)\\w+/,lookbehind:!0},{pattern:/(\\[)(?!\\d)\\w+(?=\\])/,lookbehind:!0}],function:[{pattern:/(\\|\\s*)@?(?!\\d)\\w+/,lookbehind:!0},/^\\/?(?!\\d)\\w+/,/(?!\\d)\\w+(?=\\()/],\"attr-name\":{pattern:/\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,inside:{variable:{pattern:/(=\\s*)(?!\\d)\\w+/,lookbehind:!0},operator:/=/}},punctuation:[/[\\[\\]().,:`]|->/],operator:[/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],keyword:/\\b(?:false|off|on|no|true|yes)\\b/},n.hooks.add(\"before-tokenize\",function(e){var t=!1;n.languages[\"markup-templating\"].buildPlaceholders(e,\"smarty\",/\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g,function(e){return\"{/literal}\"===e&&(t=!1),!t&&(\"{literal}\"===e&&(t=!0),!0)})}),n.hooks.add(\"after-tokenize\",function(e){n.languages[\"markup-templating\"].tokenizePlaceholders(e,\"smarty\")})}(Prism);"
            ]
        },
        "prism-soy.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;",
                "\tvar numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;",
                "",
                "\tPrism.languages.soy = {",
                "\t\t'comment': [",
                "\t\t\t/\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)\\/\\/.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'command-arg': {",
                "\t\t\tpattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t'parameter': {",
                "\t\t\tpattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'variable'",
                "\t\t},",
                "\t\t'keyword': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t/\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/",
                "\t\t],",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^{+\\/?|\\/?}+$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t},",
                "\t\t'property': /\\w+(?==)/,",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,",
                "\t\t\tinside: {",
                "\t\t\t\t'string': {",
                "\t\t\t\t\tpattern: stringPattern,",
                "\t\t\t\t\tgreedy: true",
                "\t\t\t\t},",
                "\t\t\t\t'number': numberPattern,",
                "\t\t\t\t'punctuation': /[\\[\\].?]/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: stringPattern,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'function': [",
                "\t\t\t/\\w+(?=\\()/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\|[^\\S\\r\\n]*)\\w+/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'number': numberPattern,",
                "\t\t'operator': /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,",
                "\t\t'punctuation': /[{}()\\[\\]|.,:]/",
                "\t};",
                "",
                "\t// Tokenize all inline Soy expressions",
                "\tPrism.hooks.add('before-tokenize', function (env) {",
                "\t\tvar soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;",
                "\t\tvar soyLitteralStart = '{literal}';",
                "\t\tvar soyLitteralEnd = '{/literal}';",
                "\t\tvar soyLitteralMode = false;",
                "",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {",
                "\t\t\t// Soy tags inside {literal} block are ignored",
                "\t\t\tif (match === soyLitteralEnd) {",
                "\t\t\t\tsoyLitteralMode = false;",
                "\t\t\t}",
                "",
                "\t\t\tif (!soyLitteralMode) {",
                "\t\t\t\tif (match === soyLitteralStart) {",
                "\t\t\t\t\tsoyLitteralMode = true;",
                "\t\t\t\t}",
                "",
                "\t\t\t\treturn true;",
                "\t\t\t}",
                "\t\t\treturn false;",
                "\t\t});",
                "\t});",
                "",
                "\t// Re-insert the tokens after tokenizing",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-soy.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){var e=/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,a=/\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;t.languages.soy={comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(\\s)\\/\\/.*/,lookbehind:!0,greedy:!0}],\"command-arg\":{pattern:/({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,lookbehind:!0,alias:\"string\",inside:{punctuation:/\\./}},parameter:{pattern:/({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,lookbehind:!0,alias:\"variable\"},keyword:[{pattern:/({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,lookbehind:!0},/\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],delimiter:{pattern:/^{+\\/?|\\/?}+$/,alias:\"punctuation\"},property:/\\w+(?==)/,variable:{pattern:/\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,inside:{string:{pattern:e,greedy:!0},number:a,punctuation:/[\\[\\].?]/}},string:{pattern:e,greedy:!0},function:[/\\w+(?=\\()/,{pattern:/(\\|[^\\S\\r\\n]*)\\w+/,lookbehind:!0}],boolean:/\\b(?:true|false)\\b/,number:a,operator:/\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,punctuation:/[{}()\\[\\]|.,:]/},t.hooks.add(\"before-tokenize\",function(e){var a=!1;t.languages[\"markup-templating\"].buildPlaceholders(e,\"soy\",/{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g,function(e){return\"{/literal}\"===e&&(a=!1),!a&&(\"{literal}\"===e&&(a=!0),!0)})}),t.hooks.add(\"after-tokenize\",function(e){t.languages[\"markup-templating\"].tokenizePlaceholders(e,\"soy\")})}(Prism);"
            ]
        },
        "prism-sql.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sql = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'variable': [",
                "\t\t{",
                "\t\t\tpattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t/@[\\w.$]+/",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,",
                "\t\tgreedy: true,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i, // Should we highlight user defined functions too?",
                "\t'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,",
                "\t'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,",
                "\t'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,",
                "\t'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,",
                "\t'punctuation': /[;[\\]()`,.]/",
                "};"
            ]
        },
        "prism-sql.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.sql={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,lookbehind:!0},variable:[{pattern:/@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,greedy:!0},/@[\\w.$]+/],string:{pattern:/(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,greedy:!0,lookbehind:!0},function:/\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,keyword:/\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,boolean:/\\b(?:TRUE|FALSE|NULL)\\b/i,number:/\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,operator:/[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,punctuation:/[;[\\]()`,.]/};"
            ]
        },
        "prism-stylus.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tvar inside = {",
                "\t\t'url': /url\\(([\"']?).*?\\1\\)/i,",
                "\t\t'string': {",
                "\t\t\tpattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'interpolation': null, // See below",
                "\t\t'func': null, // See below",
                "\t\t'important': /\\B!(?:important|optional)\\b/i,",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'hexcode': /#[\\da-f]{3,6}/i,",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)?%?/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'operator': [",
                "\t\t\t// We want non-word chars around \"-\" because it is",
                "\t\t\t// accepted in property names.",
                "\t\t\t/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/",
                "\t\t],",
                "\t\t'punctuation': /[{}()\\[\\];:,]/",
                "\t};",
                "",
                "\tinside['interpolation'] = {",
                "\t\tpattern: /\\{[^\\r\\n}:]+\\}/,",
                "\t\talias: 'variable',",
                "\t\tinside: {",
                "\t\t\t'delimiter': {",
                "\t\t\t\tpattern: /^{|}$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: inside",
                "\t\t}",
                "\t};",
                "\tinside['func'] = {",
                "\t\tpattern: /[\\w-]+\\([^)]*\\).*/,",
                "\t\tinside: {",
                "\t\t\t'function': /^[^(]+/,",
                "\t\t\trest: inside",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.languages.stylus = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'atrule-declaration': {",
                "\t\t\tpattern: /(^\\s*)@.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'atrule': /^@[\\w-]+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable-declaration': {",
                "\t\t\tpattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': /^\\S+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'statement': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: /^\\S+/,",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t// A property/value pair cannot end with a comma or a brace",
                "\t\t// It cannot have indented content unless it ended with a semicolon",
                "\t\t'property-declaration': {",
                "\t\t\tpattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'property': {",
                "\t\t\t\t\tpattern: /^[^\\s:]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'interpolation': inside.interpolation",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\trest: inside",
                "\t\t\t}",
                "\t\t},",
                "",
                "",
                "",
                "\t\t// A selector can contain parentheses only as part of a pseudo-element",
                "\t\t// It can span multiple lines.",
                "\t\t// It must end with a comma or an accolade or have indented content.",
                "\t\t'selector': {",
                "\t\t\tpattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'interpolation': inside.interpolation,",
                "\t\t\t\t'punctuation': /[{},]/",
                "\t\t\t}",
                "\t\t},",
                "",
                "\t\t'func': inside.func,",
                "\t\t'string': inside.string,",
                "\t\t'interpolation': inside.interpolation,",
                "\t\t'punctuation': /[{}()\\[\\];:.]/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-stylus.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){var t={url:/url\\(([\"']?).*?\\1\\)/i,string:{pattern:/(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,greedy:!0},interpolation:null,func:null,important:/\\B!(?:important|optional)\\b/i,keyword:{pattern:/(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,lookbehind:!0},hexcode:/#[\\da-f]{3,6}/i,number:/\\b\\d+(?:\\.\\d+)?%?/,boolean:/\\b(?:true|false)\\b/,operator:[/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],punctuation:/[{}()\\[\\];:,]/};t.interpolation={pattern:/\\{[^\\r\\n}:]+\\}/,alias:\"variable\",inside:{delimiter:{pattern:/^{|}$/,alias:\"punctuation\"},rest:t}},t.func={pattern:/[\\w-]+\\([^)]*\\).*/,inside:{function:/^[^(]+/,rest:t}},n.languages.stylus={comment:{pattern:/(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},\"atrule-declaration\":{pattern:/(^\\s*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\\w-]+/,rest:t}},\"variable-declaration\":{pattern:/(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,lookbehind:!0,inside:{variable:/^\\S+/,rest:t}},statement:{pattern:/(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,lookbehind:!0,inside:{keyword:/^\\S+/,rest:t}},\"property-declaration\":{pattern:/((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,lookbehind:!0,inside:{property:{pattern:/^[^\\s:]+/,inside:{interpolation:t.interpolation}},rest:t}},selector:{pattern:/(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,lookbehind:!0,inside:{interpolation:t.interpolation,punctuation:/[{},]/}},func:t.func,string:t.string,interpolation:t.interpolation,punctuation:/[{}()\\[\\];:.]/}}(Prism);"
            ]
        },
        "prism-swift.js": {
            "classes": [],
            "functions": [],
            "text": [
                "// issues: nested multiline comments",
                "Prism.languages.swift = Prism.languages.extend('clike', {",
                "\t'string': {",
                "\t\tpattern: /(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\tdelimiter: {",
                "\t\t\t\t\t\tpattern: /^\\\\\\(|\\)$/,",
                "\t\t\t\t\t\talias: 'variable'",
                "\t\t\t\t\t}",
                "\t\t\t\t\t// See rest below",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t},",
                "\t'keyword': /\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,",
                "\t'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,",
                "\t'constant': /\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,",
                "\t'atrule': /@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,",
                "\t'builtin': /\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/",
                "});",
                "Prism.languages.swift['string'].inside['interpolation'].inside.rest = Prism.languages.swift;"
            ]
        },
        "prism-swift.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.swift=Prism.languages.extend(\"clike\",{string:{pattern:/(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,inside:{delimiter:{pattern:/^\\\\\\(|\\)$/,alias:\"variable\"}}}}},keyword:/\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,number:/\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,constant:/\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,atrule:/@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,builtin:/\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/}),Prism.languages.swift.string.inside.interpolation.inside.rest=Prism.languages.swift;"
            ]
        },
        "prism-t4-cs.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.t4 = Prism.languages['t4-cs'] = Prism.languages['t4-templating'].createT4('csharp');"
            ]
        },
        "prism-t4-cs.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.t4=Prism.languages[\"t4-cs\"]=Prism.languages[\"t4-templating\"].createT4(\"csharp\");"
            ]
        },
        "prism-t4-templating.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tfunction createBlock(prefix, inside, contentAlias) {",
                "\t\treturn {",
                "\t\t\tpattern: RegExp('<#' + prefix + '[\\\\s\\\\S]*?#>'),",
                "\t\t\talias: 'block',",
                "\t\t\tinside: {",
                "\t\t\t\t'delimiter': {",
                "\t\t\t\t\tpattern: RegExp('^<#' + prefix + '|#>$'),",
                "\t\t\t\t\talias: 'important'",
                "\t\t\t\t},",
                "\t\t\t\t'content': {",
                "\t\t\t\t\tpattern: /[\\s\\S]+/,",
                "\t\t\t\t\tinside: inside,",
                "\t\t\t\t\talias: contentAlias",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t};",
                "\t}",
                "",
                "\tfunction createT4(insideLang) {",
                "\t\tvar grammar = Prism.languages[insideLang];",
                "\t\tvar className = 'language-' + insideLang;",
                "",
                "\t\treturn {",
                "\t\t\t'block': {",
                "\t\t\t\tpattern: /<#[\\s\\S]+?#>/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'directive': createBlock('@', {",
                "\t\t\t\t\t\t'attr-value': {",
                "\t\t\t\t\t\t\tpattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,",
                "\t\t\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t\t\t'punctuation': /^=|^[\"']|[\"']$/",
                "\t\t\t\t\t\t\t}",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'keyword': /\\w+(?=\\s)/,",
                "\t\t\t\t\t\t'attr-name': /\\w+/",
                "\t\t\t\t\t}),",
                "\t\t\t\t\t'expression': createBlock('=', grammar, className),",
                "\t\t\t\t\t'class-feature': createBlock('\\\\+', grammar, className),",
                "\t\t\t\t\t'standard': createBlock('', grammar, className)",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t};",
                "\t}",
                "",
                "\tPrism.languages['t4-templating'] = Object.defineProperty({}, 'createT4', { value: createT4 });",
                "",
                "}(Prism));"
            ]
        },
        "prism-t4-templating.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){function i(e,t,a){return{pattern:RegExp(\"<#\"+e+\"[\\\\s\\\\S]*?#>\"),alias:\"block\",inside:{delimiter:{pattern:RegExp(\"^<#\"+e+\"|#>$\"),alias:\"important\"},content:{pattern:/[\\s\\S]+/,inside:t,alias:a}}}}n.languages[\"t4-templating\"]=Object.defineProperty({},\"createT4\",{value:function(e){var t=n.languages[e],a=\"language-\"+e;return{block:{pattern:/<#[\\s\\S]+?#>/,inside:{directive:i(\"@\",{\"attr-value\":{pattern:/=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,inside:{punctuation:/^=|^[\"']|[\"']$/}},keyword:/\\w+(?=\\s)/,\"attr-name\":/\\w+/}),expression:i(\"=\",t,a),\"class-feature\":i(\"\\\\+\",t,a),standard:i(\"\",t,a)}}}}})}(Prism);"
            ]
        },
        "prism-t4-vb.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['t4-vb'] = Prism.languages['t4-templating'].createT4('visual-basic');"
            ]
        },
        "prism-t4-vb.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"t4-vb\"]=Prism.languages[\"t4-templating\"].createT4(\"visual-basic\");"
            ]
        },
        "prism-tap.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tap = {",
                "\tfail: /not ok[^#{\\n\\r]*/,",
                "\tpass: /ok[^#{\\n\\r]*/,",
                "\tpragma: /pragma [+-][a-z]+/,",
                "\tbailout: /bail out!.*/i,",
                "\tversion: /TAP version \\d+/i,",
                "\tplan: /\\d+\\.\\.\\d+(?: +#.*)?/,",
                "\tsubtest: {",
                "\t\tpattern: /# Subtest(?:: .*)?/,",
                "\t\tgreedy: true",
                "\t},",
                "\tpunctuation: /[{}]/,",
                "\tdirective: /#.*/,",
                "\tyamlish: {",
                "\t\tpattern: /(^[^\\S\\r\\n]*)---(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?[^\\S\\r\\n]*\\.\\.\\.$/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: Prism.languages.yaml,",
                "\t\talias: 'language-yaml'",
                "\t}",
                "};"
            ]
        },
        "prism-tap.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tap={fail:/not ok[^#{\\n\\r]*/,pass:/ok[^#{\\n\\r]*/,pragma:/pragma [+-][a-z]+/,bailout:/bail out!.*/i,version:/TAP version \\d+/i,plan:/\\d+\\.\\.\\d+(?: +#.*)?/,subtest:{pattern:/# Subtest(?:: .*)?/,greedy:!0},punctuation:/[{}]/,directive:/#.*/,yamlish:{pattern:/(^[^\\S\\r\\n]*)---(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?[^\\S\\r\\n]*\\.\\.\\.$/m,lookbehind:!0,inside:Prism.languages.yaml,alias:\"language-yaml\"}};"
            ]
        },
        "prism-tcl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tcl = {",
                "\t'comment': {",
                "\t\tpattern: /(^|[^\\\\])#.*/,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'variable': [",
                "\t\t{",
                "\t\t\tpattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(\\$){[^}]+}/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'function': {",
                "\t\tpattern: /(^\\s*proc[ \\t]+)[^\\s]+/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'builtin': [",
                "\t\t{",
                "\t\t\tpattern: /(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t/\\b(?:elseif|else)\\b/",
                "\t],",
                "\t'scope': {",
                "\t\tpattern: /(^\\s*)(?:global|upvar|variable)\\b/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'constant'",
                "\t},",
                "\t'keyword': {",
                "\t\tpattern: /(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'operator': /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,",
                "\t'punctuation': /[{}()\\[\\]]/",
                "};"
            ]
        },
        "prism-tcl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.tcl={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,greedy:!0},variable:[{pattern:/(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,lookbehind:!0},{pattern:/(\\$){[^}]+}/,lookbehind:!0},{pattern:/(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,lookbehind:!0}],function:{pattern:/(^\\s*proc[ \\t]+)[^\\s]+/m,lookbehind:!0},builtin:[{pattern:/(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,lookbehind:!0},/\\b(?:elseif|else)\\b/],scope:{pattern:/(^\\s*)(?:global|upvar|variable)\\b/m,lookbehind:!0,alias:\"constant\"},keyword:{pattern:/(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,lookbehind:!0},operator:/!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,punctuation:/[{}()\\[\\]]/};"
            ]
        },
        "prism-textile.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\t// We don't allow for pipes inside parentheses",
                "\t// to not break table pattern |(. foo |). bar |",
                "\tvar modifierRegex = /(?:\\([^|)]+\\)|\\[[^\\]]+\\]|\\{[^}]+\\})+/.source;",
                "\tvar modifierTokens = {",
                "\t\t'css': {",
                "\t\t\tpattern: /\\{[^}]+\\}/,",
                "\t\t\tinside: {",
                "\t\t\t\trest: Prism.languages.css",
                "\t\t\t}",
                "\t\t},",
                "\t\t'class-id': {",
                "\t\t\tpattern: /(\\()[^)]+(?=\\))/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-value'",
                "\t\t},",
                "\t\t'lang': {",
                "\t\t\tpattern: /(\\[)[^\\]]+(?=\\])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-value'",
                "\t\t},",
                "\t\t// Anything else is punctuation (the first pattern is for row/col spans inside tables)",
                "\t\t'punctuation': /[\\\\\\/]\\d+|\\S/",
                "\t};",
                "",
                "",
                "\tvar textile = Prism.languages.textile = Prism.languages.extend('markup', {",
                "\t\t'phrase': {",
                "\t\t\tpattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "",
                "\t\t\t\t// h1. Header 1",
                "\t\t\t\t'block-tag': {",
                "\t\t\t\t\tpattern: RegExp('^[a-z]\\\\w*(?:' + modifierRegex + '|[<>=()])*\\\\.'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^[a-z]\\\\w*)(?:' + modifierRegex + '|[<>=()])+(?=\\\\.)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'tag': /^[a-z]\\w*/,",
                "\t\t\t\t\t\t'punctuation': /\\.$/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// # List item",
                "\t\t\t\t// * List item",
                "\t\t\t\t'list': {",
                "\t\t\t\t\tpattern: RegExp('^[*#]+(?:' + modifierRegex + ')?\\\\s+.+', 'm'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^[*#]+)' + modifierRegex),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /^[*#]+/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// | cell | cell | cell |",
                "\t\t\t\t'table': {",
                "\t\t\t\t\t// Modifiers can be applied to the row: {color:red}.|1|2|3|",
                "\t\t\t\t\t// or the cell: |{color:red}.1|2|3|",
                "\t\t\t\t\tpattern: RegExp('^(?:(?:' + modifierRegex + '|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|', 'm'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\t// Modifiers for rows after the first one are",
                "\t\t\t\t\t\t\t// preceded by a pipe and a line feed",
                "\t\t\t\t\t\t\tpattern: RegExp('(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /\\||^\\./",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t'inline': {",
                "\t\t\t\t\tpattern: RegExp('(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:' + modifierRegex + ')?.+?\\\\1'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t// Note: superscripts and subscripts are not handled specifically",
                "",
                "\t\t\t\t\t\t// *bold*, **bold**",
                "\t\t\t\t\t\t'bold': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^(\\\\*\\\\*?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// _italic_, __italic__",
                "\t\t\t\t\t\t'italic': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^(__?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// ??cite??",
                "\t\t\t\t\t\t'cite': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\\\\?\\\\?(?:' + modifierRegex + ')?).+?(?=\\\\?\\\\?)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'string'",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// @code@",
                "\t\t\t\t\t\t'code': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^@(?:' + modifierRegex + ')?).+?(?=@)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// +inserted+",
                "\t\t\t\t\t\t'inserted': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\\\\+(?:' + modifierRegex + ')?).+?(?=\\\\+)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// -deleted-",
                "\t\t\t\t\t\t'deleted': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^-(?:' + modifierRegex + ')?).+?(?=-)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t// %span%",
                "\t\t\t\t\t\t'span': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^%(?:' + modifierRegex + ')?).+?(?=%)'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])' + modifierRegex),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[*_%?@+\\-^~]+/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// [alias]http://example.com",
                "\t\t\t\t'link-ref': {",
                "\t\t\t\t\tpattern: /^\\[[^\\]]+\\]\\S+$/m,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'string': {",
                "\t\t\t\t\t\t\tpattern: /(\\[)[^\\]]+(?=\\])/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(\\])\\S+$/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[\\[\\]]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// \"text\":http://example.com",
                "\t\t\t\t// \"text\":link-ref",
                "\t\t\t\t'link': {",
                "\t\t\t\t\tpattern: RegExp('\"(?:' + modifierRegex + ')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'text': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\"(?:' + modifierRegex + ')?)[^\"]+(?=\")'),",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^\")' + modifierRegex),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(:).+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[\":]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// !image.jpg!",
                "\t\t\t\t// !image.jpg(Title)!:http://example.com",
                "\t\t\t\t'image': {",
                "\t\t\t\t\tpattern: RegExp('!(?:' + modifierRegex + '|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?'),",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'source': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^!(?:' + modifierRegex + '|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\talias: 'url'",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'modifier': {",
                "\t\t\t\t\t\t\tpattern: RegExp('(^!)(?:' + modifierRegex + '|[<>=()])+'),",
                "\t\t\t\t\t\t\tlookbehind: true,",
                "\t\t\t\t\t\t\tinside: modifierTokens",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'url': {",
                "\t\t\t\t\t\t\tpattern: /(:).+/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[!:]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// Footnote[1]",
                "\t\t\t\t'footnote': {",
                "\t\t\t\t\tpattern: /\\b\\[\\d+\\]/,",
                "\t\t\t\t\talias: 'comment',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /\\[|\\]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// CSS(Cascading Style Sheet)",
                "\t\t\t\t'acronym': {",
                "\t\t\t\t\tpattern: /\\b[A-Z\\d]+\\([^)]+\\)/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'comment': {",
                "\t\t\t\t\t\t\tpattern: /(\\()[^)]+(?=\\))/,",
                "\t\t\t\t\t\t\tlookbehind: true",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'punctuation': /[()]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "",
                "\t\t\t\t// Prism(C)",
                "\t\t\t\t'mark': {",
                "\t\t\t\t\tpattern: /\\b\\((?:TM|R|C)\\)/,",
                "\t\t\t\t\talias: 'comment',",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /[()]/",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\tvar phraseInside = textile['phrase'].inside;",
                "\tvar nestedPatterns = {",
                "\t\t'inline': phraseInside['inline'],",
                "\t\t'link': phraseInside['link'],",
                "\t\t'image': phraseInside['image'],",
                "\t\t'footnote': phraseInside['footnote'],",
                "\t\t'acronym': phraseInside['acronym'],",
                "\t\t'mark': phraseInside['mark']",
                "\t};",
                "",
                "\t// Only allow alpha-numeric HTML tags, not XML tags",
                "\ttextile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "",
                "\t// Allow some nesting",
                "\tvar phraseInlineInside = phraseInside['inline'].inside;",
                "\tphraseInlineInside['bold'].inside = nestedPatterns;",
                "\tphraseInlineInside['italic'].inside = nestedPatterns;",
                "\tphraseInlineInside['inserted'].inside = nestedPatterns;",
                "\tphraseInlineInside['deleted'].inside = nestedPatterns;",
                "\tphraseInlineInside['span'].inside = nestedPatterns;",
                "",
                "\t// Allow some styles inside table cells",
                "\tvar phraseTableInside = phraseInside['table'].inside;",
                "\tphraseTableInside['inline'] = nestedPatterns['inline'];",
                "\tphraseTableInside['link'] = nestedPatterns['link'];",
                "\tphraseTableInside['image'] = nestedPatterns['image'];",
                "\tphraseTableInside['footnote'] = nestedPatterns['footnote'];",
                "\tphraseTableInside['acronym'] = nestedPatterns['acronym'];",
                "\tphraseTableInside['mark'] = nestedPatterns['mark'];",
                "",
                "}(Prism));"
            ]
        },
        "prism-textile.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var n=\"(?:\\\\([^|)]+\\\\)|\\\\[[^\\\\]]+\\\\]|\\\\{[^}]+\\\\})+\",i={css:{pattern:/\\{[^}]+\\}/,inside:{rest:e.languages.css}},\"class-id\":{pattern:/(\\()[^)]+(?=\\))/,lookbehind:!0,alias:\"attr-value\"},lang:{pattern:/(\\[)[^\\]]+(?=\\])/,lookbehind:!0,alias:\"attr-value\"},punctuation:/[\\\\\\/]\\d+|\\S/},t=e.languages.textile=e.languages.extend(\"markup\",{phrase:{pattern:/(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,lookbehind:!0,inside:{\"block-tag\":{pattern:RegExp(\"^[a-z]\\\\w*(?:\"+n+\"|[<>=()])*\\\\.\"),inside:{modifier:{pattern:RegExp(\"(^[a-z]\\\\w*)(?:\"+n+\"|[<>=()])+(?=\\\\.)\"),lookbehind:!0,inside:i},tag:/^[a-z]\\w*/,punctuation:/\\.$/}},list:{pattern:RegExp(\"^[*#]+(?:\"+n+\")?\\\\s+.+\",\"m\"),inside:{modifier:{pattern:RegExp(\"(^[*#]+)\"+n),lookbehind:!0,inside:i},punctuation:/^[*#]+/}},table:{pattern:RegExp(\"^(?:(?:\"+n+\"|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:\"+n+\"|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|\",\"m\"),inside:{modifier:{pattern:RegExp(\"(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:\"+n+\"|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)\"),lookbehind:!0,inside:i},punctuation:/\\||^\\./}},inline:{pattern:RegExp(\"(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:\"+n+\")?.+?\\\\1\"),inside:{bold:{pattern:RegExp(\"(^(\\\\*\\\\*?)(?:\"+n+\")?).+?(?=\\\\2)\"),lookbehind:!0},italic:{pattern:RegExp(\"(^(__?)(?:\"+n+\")?).+?(?=\\\\2)\"),lookbehind:!0},cite:{pattern:RegExp(\"(^\\\\?\\\\?(?:\"+n+\")?).+?(?=\\\\?\\\\?)\"),lookbehind:!0,alias:\"string\"},code:{pattern:RegExp(\"(^@(?:\"+n+\")?).+?(?=@)\"),lookbehind:!0,alias:\"keyword\"},inserted:{pattern:RegExp(\"(^\\\\+(?:\"+n+\")?).+?(?=\\\\+)\"),lookbehind:!0},deleted:{pattern:RegExp(\"(^-(?:\"+n+\")?).+?(?=-)\"),lookbehind:!0},span:{pattern:RegExp(\"(^%(?:\"+n+\")?).+?(?=%)\"),lookbehind:!0},modifier:{pattern:RegExp(\"(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])\"+n),lookbehind:!0,inside:i},punctuation:/[*_%?@+\\-^~]+/}},\"link-ref\":{pattern:/^\\[[^\\]]+\\]\\S+$/m,inside:{string:{pattern:/(\\[)[^\\]]+(?=\\])/,lookbehind:!0},url:{pattern:/(\\])\\S+$/,lookbehind:!0},punctuation:/[\\[\\]]/}},link:{pattern:RegExp('\"(?:'+n+')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),inside:{text:{pattern:RegExp('(^\"(?:'+n+')?)[^\"]+(?=\")'),lookbehind:!0},modifier:{pattern:RegExp('(^\")'+n),lookbehind:!0,inside:i},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[\":]/}},image:{pattern:RegExp(\"!(?:\"+n+\"|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?\"),inside:{source:{pattern:RegExp(\"(^!(?:\"+n+\"|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)\"),lookbehind:!0,alias:\"url\"},modifier:{pattern:RegExp(\"(^!)(?:\"+n+\"|[<>=()])+\"),lookbehind:!0,inside:i},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[!:]/}},footnote:{pattern:/\\b\\[\\d+\\]/,alias:\"comment\",inside:{punctuation:/\\[|\\]/}},acronym:{pattern:/\\b[A-Z\\d]+\\([^)]+\\)/,inside:{comment:{pattern:/(\\()[^)]+(?=\\))/,lookbehind:!0},punctuation:/[()]/}},mark:{pattern:/\\b\\((?:TM|R|C)\\)/,alias:\"comment\",inside:{punctuation:/[()]/}}}}}),a=t.phrase.inside,o={inline:a.inline,link:a.link,image:a.image,footnote:a.footnote,acronym:a.acronym,mark:a.mark};t.tag.pattern=/<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;var r=a.inline.inside;r.bold.inside=o,r.italic.inside=o,r.inserted.inside=o,r.deleted.inside=o,r.span.inside=o;var d=a.table.inside;d.inline=o.inline,d.link=o.link,d.image=o.image,d.footnote=o.footnote,d.acronym=o.acronym,d.mark=o.mark}(Prism);"
            ]
        },
        "prism-toml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\t// pattern: /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\.|[^\\\\\"\\r\\n])*\")/",
                "\tvar key = \"(?:[\\\\w-]+|'[^'\\n\\r]*'|\\\"(?:\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\")\";",
                "",
                "\tPrism.languages.toml = {",
                "\t\t'comment': {",
                "\t\t\tpattern: /#.*/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'table': {",
                "\t\t\tpattern: RegExp(\"(\\\\[\\\\s*)\" + key + \"(?:\\\\s*\\\\.\\\\s*\" + key + \")*(?=\\\\s*\\\\])\"),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'class-name'",
                "\t\t},",
                "\t\t'key': {",
                "\t\t\tpattern: RegExp(\"(^\\\\s*|[{,]\\\\s*)\" + key + \"(?:\\\\s*\\\\.\\\\s*\" + key + \")*(?=\\\\s*=)\", \"m\"),",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'property'",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'date': [",
                "\t\t\t{",
                "\t\t\t\t// Offset Date-Time, Local Date-Time, Local Date",
                "\t\t\t\tpattern: /\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?/i,",
                "\t\t\t\talias: 'number'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\t// Local Time",
                "\t\t\t\tpattern: /\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/i,",
                "\t\t\t\talias: 'number'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'number': /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?(?:inf|nan)\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'punctuation': /[.,=[\\]{}]/",
                "\t};",
                "}(Prism));"
            ]
        },
        "prism-toml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){var d=\"(?:[\\\\w-]+|'[^'\\n\\r]*'|\\\"(?:\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\")\";Prism.languages.toml={comment:{pattern:/#.*/,greedy:!0},table:{pattern:RegExp(\"(\\\\[\\\\s*)\"+d+\"(?:\\\\s*\\\\.\\\\s*\"+d+\")*(?=\\\\s*\\\\])\"),lookbehind:!0,greedy:!0,alias:\"class-name\"},key:{pattern:RegExp(\"(^\\\\s*|[{,]\\\\s*)\"+d+\"(?:\\\\s*\\\\.\\\\s*\"+d+\")*(?=\\\\s*=)\",\"m\"),lookbehind:!0,greedy:!0,alias:\"property\"},string:{pattern:/\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},date:[{pattern:/\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?/i,alias:\"number\"},{pattern:/\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/i,alias:\"number\"}],number:/(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?(?:inf|nan)\\b/,boolean:/\\b(?:true|false)\\b/,punctuation:/[.,=[\\]{}]/}}();"
            ]
        },
        "prism-tsx.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var typescript = Prism.util.clone(Prism.languages.typescript);",
                "Prism.languages.tsx = Prism.languages.extend('jsx', typescript);"
            ]
        },
        "prism-tsx.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "var typescript=Prism.util.clone(Prism.languages.typescript);Prism.languages.tsx=Prism.languages.extend(\"jsx\",typescript);"
            ]
        },
        "prism-tt2.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "",
                "\tPrism.languages.tt2 = Prism.languages.extend('clike', {",
                "\t\tcomment: {",
                "\t\t\tpattern: /#.*|\\[%#[\\s\\S]*?%\\]/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\tkeyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,",
                "\t\tpunctuation: /[[\\]{},()]/",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('tt2', 'number', {",
                "\t\toperator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,",
                "\t\tvariable: {",
                "\t\t\tpattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('tt2', 'keyword', {",
                "\t\t'delimiter': {",
                "\t\t\tpattern: /^(?:\\[%|%%)-?|-?%]$/,",
                "\t\t\talias: 'punctuation'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('tt2', 'string', {",
                "\t\t'single-quoted-string': {",
                "\t\t\tpattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string'",
                "\t\t},",
                "\t\t'double-quoted-string': {",
                "\t\t\tpattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: 'string',",
                "\t\t\tinside: {",
                "\t\t\t\tvariable: {",
                "\t\t\t\t\tpattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t});",
                "",
                "\t// The different types of TT2 strings \"replace\" the C-like standard string",
                "\tdelete Prism.languages.tt2.string;",
                "",
                "\tPrism.hooks.add('before-tokenize', function(env) {",
                "\t\tvar tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;",
                "\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);",
                "\t});",
                "",
                "\tPrism.hooks.add('after-tokenize', function(env) {",
                "\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-tt2.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(t){t.languages.tt2=t.languages.extend(\"clike\",{comment:{pattern:/#.*|\\[%#[\\s\\S]*?%\\]/,lookbehind:!0},keyword:/\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,punctuation:/[[\\]{},()]/}),t.languages.insertBefore(\"tt2\",\"number\",{operator:/=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,variable:{pattern:/[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i}}),t.languages.insertBefore(\"tt2\",\"keyword\",{delimiter:{pattern:/^(?:\\[%|%%)-?|-?%]$/,alias:\"punctuation\"}}),t.languages.insertBefore(\"tt2\",\"string\",{\"single-quoted-string\":{pattern:/'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,greedy:!0,alias:\"string\",inside:{variable:{pattern:/\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i}}}}),delete t.languages.tt2.string,t.hooks.add(\"before-tokenize\",function(e){t.languages[\"markup-templating\"].buildPlaceholders(e,\"tt2\",/\\[%[\\s\\S]+?%\\]/g)}),t.hooks.add(\"after-tokenize\",function(e){t.languages[\"markup-templating\"].tokenizePlaceholders(e,\"tt2\")})}(Prism);"
            ]
        },
        "prism-twig.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.twig = {",
                "\t'comment': /\\{#[\\s\\S]*?#\\}/,",
                "\t'tag': {",
                "\t\tpattern: /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,",
                "\t\tinside: {",
                "\t\t\t'ld': {",
                "\t\t\t\tpattern: /^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^(?:\\{\\{|\\{%)-?/,",
                "\t\t\t\t\t'keyword': /\\w+/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'rd': {",
                "\t\t\t\tpattern: /-?(?:%\\}|\\}\\})$/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /.+/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': {",
                "\t\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'punctuation': /^['\"]|['\"]$/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'keyword': /\\b(?:even|if|odd)\\b/,",
                "\t\t\t'boolean': /\\b(?:true|false|null)\\b/,",
                "\t\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,",
                "\t\t\t'operator': [",
                "\t\t\t\t{",
                "\t\t\t\t\tpattern: /(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,",
                "\t\t\t\t\tlookbehind: true",
                "\t\t\t\t},",
                "\t\t\t\t/[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/",
                "\t\t\t],",
                "\t\t\t'property': /\\b[a-zA-Z_]\\w*\\b/,",
                "\t\t\t'punctuation': /[()\\[\\]{}:.,]/",
                "\t\t}",
                "\t},",
                "",
                "\t// The rest can be parsed as HTML",
                "\t'other': {",
                "\t\t// We want non-blank matches",
                "\t\tpattern: /\\S(?:[\\s\\S]*\\S)?/,",
                "\t\tinside: Prism.languages.markup",
                "\t}",
                "};"
            ]
        },
        "prism-twig.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.twig={comment:/\\{#[\\s\\S]*?#\\}/,tag:{pattern:/\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,inside:{ld:{pattern:/^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,inside:{punctuation:/^(?:\\{\\{|\\{%)-?/,keyword:/\\w+/}},rd:{pattern:/-?(?:%\\}|\\}\\})$/,inside:{punctuation:/.+/}},string:{pattern:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,inside:{punctuation:/^['\"]|['\"]$/}},keyword:/\\b(?:even|if|odd)\\b/,boolean:/\\b(?:true|false|null)\\b/,number:/\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,operator:[{pattern:/(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,lookbehind:!0},/[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],property:/\\b[a-zA-Z_]\\w*\\b/,punctuation:/[()\\[\\]{}:.,]/}},other:{pattern:/\\S(?:[\\s\\S]*\\S)?/,inside:Prism.languages.markup}};"
            ]
        },
        "prism-typescript.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.typescript = Prism.languages.extend('javascript', {",
                "\t// From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words",
                "\t'keyword': /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,",
                "\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,",
                "});",
                "",
                "Prism.languages.ts = Prism.languages.typescript;"
            ]
        },
        "prism-typescript.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.typescript=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,builtin:/\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/}),Prism.languages.ts=Prism.languages.typescript;"
            ]
        },
        "prism-vala.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vala = Prism.languages.extend('clike', {",
                "\t// Classes copied from prism-csharp",
                "\t'class-name': [",
                "\t\t{",
                "\t\t\t// (Foo bar, Bar baz)",
                "\t\t\tpattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// [Foo]",
                "\t\t\tpattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo : Bar",
                "\t\t\tpattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\t// class Foo",
                "\t\t\tpattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tpunctuation: /\\./",
                "\t\t\t}",
                "\t\t}",
                "\t],",
                "\t'constant': /\\b[A-Z0-9_]+\\b/,",
                "\t'function': /\\w+(?=\\s*\\()/,",
                "\t'keyword': /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,",
                "\t'number': /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,",
                "\t'operator': /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "});",
                "",
                "Prism.languages.insertBefore('vala','string', {",
                "\t'raw-string': {",
                "\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,",
                "\t\tgreedy: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'template-string': {",
                "\t\tpattern: /@\"[\\s\\S]*?\"/,",
                "\t\tgreedy: true,",
                "\t\tinside: {",
                "\t\t\t'interpolation': {",
                "\t\t\t\tpattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,",
                "\t\t\t\tinside: {",
                "\t\t\t\t\t'delimiter': {",
                "\t\t\t\t\t\tpattern: /^\\$\\(?|\\)$/,",
                "\t\t\t\t\t\talias: 'punctuation'",
                "\t\t\t\t\t},",
                "\t\t\t\t\trest: Prism.languages.vala",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t'string': /[\\s\\S]+/",
                "\t\t}",
                "\t}",
                "});",
                "",
                "Prism.languages.insertBefore('vala', 'keyword', {",
                "\t'regex': {",
                "\t\tpattern: /\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*($|[\\r\\n,.;})\\]]))/,",
                "\t\tgreedy: true",
                "\t}",
                "});"
            ]
        },
        "prism-vala.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vala=Prism.languages.extend(\"clike\",{\"class-name\":[{pattern:/\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,inside:{punctuation:/\\./}},{pattern:/(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}}],constant:/\\b[A-Z0-9_]+\\b/,function:/\\w+(?=\\s*\\()/,keyword:/\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,number:/(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,operator:/\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,punctuation:/[{}[\\];(),.:]/}),Prism.languages.insertBefore(\"vala\",\"string\",{\"raw-string\":{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\"},\"template-string\":{pattern:/@\"[\\s\\S]*?\"/,greedy:!0,inside:{interpolation:{pattern:/\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,inside:{delimiter:{pattern:/^\\$\\(?|\\)$/,alias:\"punctuation\"},rest:Prism.languages.vala}},string:/[\\s\\S]+/}}}),Prism.languages.insertBefore(\"vala\",\"keyword\",{regex:{pattern:/\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*($|[\\r\\n,.;})\\]]))/,greedy:!0}});"
            ]
        },
        "prism-vbnet.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vbnet = Prism.languages.extend(\"basic\", {",
                "\t'keyword': /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,",
                "\t'comment': [",
                "\t\t{",
                "\t\t\tpattern: /(?:!|REM\\b).+/i,",
                "\t\t\tinside: {",
                "\t\t\t\t'keyword': /^REM/i",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /(^|[^\\\\:])'.*/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t]",
                "});"
            ]
        },
        "prism-vbnet.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vbnet=Prism.languages.extend(\"basic\",{keyword:/(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,comment:[{pattern:/(?:!|REM\\b).+/i,inside:{keyword:/^REM/i}},{pattern:/(^|[^\\\\:])'.*/,lookbehind:!0}]});"
            ]
        },
        "prism-velocity.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "\tPrism.languages.velocity = Prism.languages.extend('markup', {});",
                "",
                "\tvar velocity = {",
                "\t\t'variable': {",
                "\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {} // See below",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'number': /\\b\\d+\\b/,",
                "\t\t'boolean': /\\b(?:true|false)\\b/,",
                "\t\t'operator': /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,",
                "\t\t'punctuation': /[(){}[\\]:,.]/",
                "\t};",
                "",
                "\tvelocity.variable.inside = {",
                "\t\t'string': velocity['string'],",
                "\t\t'function': {",
                "\t\t\tpattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': velocity['number'],",
                "\t\t'boolean': velocity['boolean'],",
                "\t\t'punctuation': velocity['punctuation']",
                "\t};",
                "",
                "\tPrism.languages.insertBefore('velocity', 'comment', {",
                "\t\t'unparsed': {",
                "\t\t\tpattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,",
                "\t\t\tlookbehind: true,",
                "\t\t\tgreedy: true,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /^#\\[\\[|]]#$/",
                "\t\t\t}",
                "\t\t},",
                "\t\t'velocity-comment': [",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t},",
                "\t\t\t{",
                "\t\t\t\tpattern: /(^|[^\\\\])##.*/,",
                "\t\t\t\tlookbehind: true,",
                "\t\t\t\tgreedy: true,",
                "\t\t\t\talias: 'comment'",
                "\t\t\t}",
                "\t\t],",
                "\t\t'directive': {",
                "\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,",
                "\t\t\tlookbehind: true,",
                "\t\t\tinside: {",
                "\t\t\t\tkeyword: {",
                "\t\t\t\t\tpattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': /[{}]/",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\trest: velocity",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': velocity['variable']",
                "\t});",
                "",
                "\tPrism.languages.velocity['tag'].inside['attr-value'].inside.rest = Prism.languages.velocity;",
                "",
                "}(Prism));"
            ]
        },
        "prism-velocity.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(e){e.languages.velocity=e.languages.extend(\"markup\",{});var n={variable:{pattern:/(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,lookbehind:!0,inside:{}},string:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},number:/\\b\\d+\\b/,boolean:/\\b(?:true|false)\\b/,operator:/[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,punctuation:/[(){}[\\]:,.]/};n.variable.inside={string:n.string,function:{pattern:/([^\\w-])[a-z][\\w-]*(?=\\()/,lookbehind:!0},number:n.number,boolean:n.boolean,punctuation:n.punctuation},e.languages.insertBefore(\"velocity\",\"comment\",{unparsed:{pattern:/(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,lookbehind:!0,greedy:!0,inside:{punctuation:/^#\\[\\[|]]#$/}},\"velocity-comment\":[{pattern:/(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,lookbehind:!0,greedy:!0,alias:\"comment\"},{pattern:/(^|[^\\\\])##.*/,lookbehind:!0,greedy:!0,alias:\"comment\"}],directive:{pattern:/(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,lookbehind:!0,inside:{keyword:{pattern:/^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,inside:{punctuation:/[{}]/}},rest:n}},variable:n.variable}),e.languages.velocity.tag.inside[\"attr-value\"].inside.rest=e.languages.velocity}(Prism);"
            ]
        },
        "prism-verilog.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.verilog = {",
                "\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t// support for any kernel function (ex: $display())",
                "\t'property': /\\B\\$\\w+\\b/,",
                "\t// support for user defined constants (ex: `define)",
                "\t'constant': /\\B`\\w+\\b/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t// support for verilog and system verilog keywords",
                "\t'keyword': /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,",
                "\t// bold highlighting for all verilog and system verilog logic blocks",
                "\t'important': /\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,",
                "\t// support for time ticks, vectors, and real numbers",
                "\t'number': /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b\\d*[._]?\\d+(?:e[-+]?\\d+)?/i,",
                "\t'operator': /[-+{}^~%*\\/?=!<>&|]+/,",
                "\t'punctuation': /[[\\];(),.:]/",
                "};"
            ]
        },
        "prism-verilog.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.verilog={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,greedy:!0},property:/\\B\\$\\w+\\b/,constant:/\\B`\\w+\\b/,function:/\\w+(?=\\()/,keyword:/\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,important:/\\b(?:always_latch|always_comb|always_ff|always)\\b ?@?/,number:/\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b\\d*[._]?\\d+(?:e[-+]?\\d+)?/i,operator:/[-+{}^~%*\\/?=!<>&|]+/,punctuation:/[[\\];(),.:]/};"
            ]
        },
        "prism-vhdl.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vhdl = {",
                "\t'comment': /--.+/,",
                "\t// support for all logic vectors",
                "\t'vhdl-vectors': {",
                "\t\t'pattern': /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,",
                "\t\t'alias': 'number'",
                "\t},",
                "\t// support for operator overloading included",
                "\t'quoted-function': {",
                "\t\tpattern: /\"\\S+?\"(?=\\()/,",
                "\t\talias: 'function'",
                "\t},",
                "\t'string': /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,",
                "\t'constant': /\\b(?:use|library)\\b/i,",
                "\t// support for predefined attributes included",
                "\t'keyword': /\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,",
                "\t'boolean': /\\b(?:true|false)\\b/i,",
                "\t'function': /\\w+(?=\\()/,",
                "\t// decimal, based, physical, and exponential numbers supported",
                "\t'number': /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,",
                "\t'operator': /[<>]=?|:=|[-+*/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,",
                "\t'punctuation': /[{}[\\];(),.:]/",
                "};"
            ]
        },
        "prism-vhdl.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vhdl={comment:/--.+/,\"vhdl-vectors\":{pattern:/\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,alias:\"number\"},\"quoted-function\":{pattern:/\"\\S+?\"(?=\\()/,alias:\"function\"},string:/\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,constant:/\\b(?:use|library)\\b/i,keyword:/\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,boolean:/\\b(?:true|false)\\b/i,function:/\\w+(?=\\()/,number:/'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,operator:/[<>]=?|:=|[-+*/&=]|\\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\\b/i,punctuation:/[{}[\\];(),.:]/};"
            ]
        },
        "prism-vim.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vim = {",
                "\t'string': /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,",
                "\t'comment': /\".*/,",
                "\t'function': /\\w+(?=\\()/,",
                "\t'keyword': /\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,",
                "\t'builtin': /\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,",
                "\t'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,",
                "\t'operator': /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,",
                "\t'punctuation': /[{}[\\](),;:]/",
                "};"
            ]
        },
        "prism-vim.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.vim={string:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,comment:/\".*/,function:/\\w+(?=\\()/,keyword:/\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,builtin:/\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,operator:/\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,punctuation:/[{}[\\](),;:]/};"
            ]
        },
        "prism-visual-basic.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages['visual-basic'] = {",
                "\t'comment': {",
                "\t\tpattern: /(?:['‘’]|REM\\b).*/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^REM/i",
                "\t\t}",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,",
                "\t\talias: 'comment',",
                "\t\tgreedy: true",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,",
                "\t\tgreedy: true",
                "\t},",
                "\t'date': {",
                "\t\tpattern: /#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))[^\\S\\r\\n]*#/i,",
                "\t\talias: 'builtin'",
                "\t},",
                "\t'number': /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,",
                "\t'boolean': /\\b(?:True|False|Nothing)\\b/i,",
                "\t'keyword': /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,",
                "\t'operator': [",
                "\t\t/[+\\-*/\\\\^<=>&#@$%!]/,",
                "\t\t{",
                "\t\t\tpattern: /([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,",
                "\t\t\tlookbehind: true",
                "\t\t}",
                "\t],",
                "\t'punctuation': /[{}().,:?]/",
                "};",
                "",
                "Prism.languages.vb = Prism.languages['visual-basic'];"
            ]
        },
        "prism-visual-basic.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages[\"visual-basic\"]={comment:{pattern:/(?:['‘’]|REM\\b).*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,alias:\"comment\",greedy:!0},string:{pattern:/[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,greedy:!0},date:{pattern:/#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))[^\\S\\r\\n]*#/i,alias:\"builtin\"},number:/(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,boolean:/\\b(?:True|False|Nothing)\\b/i,keyword:/\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,operator:[/[+\\-*/\\\\^<=>&#@$%!]/,{pattern:/([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages[\"visual-basic\"];"
            ]
        },
        "prism-wasm.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wasm = {",
                "\t'comment': [",
                "\t\t/\\(;[\\s\\S]*?;\\)/,",
                "\t\t{",
                "\t\t\tpattern: /;;.*/,",
                "\t\t\tgreedy: true",
                "\t\t}",
                "\t],",
                "\t'string': {",
                "\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'keyword': [",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:align|offset)=/,",
                "\t\t\tinside: {",
                "\t\t\t\t'operator': /=/",
                "\t\t\t}",
                "\t\t},",
                "\t\t{",
                "\t\t\tpattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': /\\./",
                "\t\t\t}",
                "\t\t},",
                "\t\t/\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/",
                "\t],",
                "\t'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,",
                "\t'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,",
                "\t'punctuation': /[()]/",
                "};"
            ]
        },
        "prism-wasm.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wasm={comment:[/\\(;[\\s\\S]*?;\\)/,{pattern:/;;.*/,greedy:!0}],string:{pattern:/\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,greedy:!0},keyword:[{pattern:/\\b(?:align|offset)=/,inside:{operator:/=/}},{pattern:/\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,inside:{punctuation:/\\./}},/\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],variable:/\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,number:/[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,punctuation:/[()]/};"
            ]
        },
        "prism-wiki.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wiki = Prism.languages.extend('markup', {",
                "\t'block-comment': {",
                "\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,",
                "\t\tlookbehind: true,",
                "\t\talias: 'comment'",
                "\t},",
                "\t'heading': {",
                "\t\tpattern: /^(=+).+?\\1/m,",
                "\t\tinside: {",
                "\t\t\t'punctuation': /^=+|=+$/,",
                "\t\t\t'important': /.+/",
                "\t\t}",
                "\t},",
                "\t'emphasis': {",
                "\t\t// TODO Multi-line",
                "\t\tpattern: /('{2,5}).+?\\1/,",
                "\t\tinside: {",
                "\t\t\t'bold italic': {",
                "\t\t\t\tpattern: /(''''').+?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'bold': {",
                "\t\t\t\tpattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'italic': {",
                "\t\t\t\tpattern: /('')[^'](?:.*?[^'])?(?=\\1)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t},",
                "\t\t\t'punctuation': /^''+|''+$/",
                "\t\t}",
                "\t},",
                "\t'hr': {",
                "\t\tpattern: /^-{4,}/m,",
                "\t\talias: 'punctuation'",
                "\t},",
                "\t'url': [",
                "\t\t/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i,",
                "\t\t/\\[\\[.+?\\]\\]|\\[.+?\\]/",
                "\t],",
                "\t'variable': [",
                "\t\t/__[A-Z]+__/,",
                "\t\t// FIXME Nested structures should be handled",
                "\t\t// {{formatnum:{{#expr:{{{3}}}}}}}",
                "\t\t/\\{{3}.+?\\}{3}/,",
                "\t\t/\\{\\{.+?\\}\\}/",
                "\t],",
                "\t'symbol': [",
                "\t\t/^#redirect/im,",
                "\t\t/~{3,5}/",
                "\t],",
                "\t// Handle table attrs:",
                "\t// {|",
                "\t// ! style=\"text-align:left;\"| Item",
                "\t// |}",
                "\t'table-tag': {",
                "\t\tpattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,",
                "\t\tlookbehind: true,",
                "\t\tinside: {",
                "\t\t\t'table-bar': {",
                "\t\t\t\tpattern: /\\|$/,",
                "\t\t\t\talias: 'punctuation'",
                "\t\t\t},",
                "\t\t\trest: Prism.languages.markup['tag'].inside",
                "\t\t}",
                "\t},",
                "\t'punctuation': /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m",
                "});",
                "",
                "Prism.languages.insertBefore('wiki', 'tag', {",
                "\t// Prevent highlighting inside <nowiki>, <source> and <pre> tags",
                "\t'nowiki': {",
                "\t\tpattern: /<(nowiki|pre|source)\\b[\\s\\S]*?>[\\s\\S]*?<\\/\\1>/i,",
                "\t\tinside: {",
                "\t\t\t'tag': {",
                "\t\t\t\tpattern: /<(?:nowiki|pre|source)\\b[\\s\\S]*?>|<\\/(?:nowiki|pre|source)>/i,",
                "\t\t\t\tinside: Prism.languages.markup['tag'].inside",
                "\t\t\t}",
                "\t\t}",
                "\t}",
                "});"
            ]
        },
        "prism-wiki.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.wiki=Prism.languages.extend(\"markup\",{\"block-comment\":{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0,alias:\"comment\"},heading:{pattern:/^(=+).+?\\1/m,inside:{punctuation:/^=+|=+$/,important:/.+/}},emphasis:{pattern:/('{2,5}).+?\\1/,inside:{\"bold italic\":{pattern:/(''''').+?(?=\\1)/,lookbehind:!0},bold:{pattern:/(''')[^'](?:.*?[^'])?(?=\\1)/,lookbehind:!0},italic:{pattern:/('')[^'](?:.*?[^'])?(?=\\1)/,lookbehind:!0},punctuation:/^''+|''+$/}},hr:{pattern:/^-{4,}/m,alias:\"punctuation\"},url:[/ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:RFC|PMID) +\\d+/i,/\\[\\[.+?\\]\\]|\\[.+?\\]/],variable:[/__[A-Z]+__/,/\\{{3}.+?\\}{3}/,/\\{\\{.+?\\}\\}/],symbol:[/^#redirect/im,/~{3,5}/],\"table-tag\":{pattern:/((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,lookbehind:!0,inside:{\"table-bar\":{pattern:/\\|$/,alias:\"punctuation\"},rest:Prism.languages.markup.tag.inside}},punctuation:/^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m}),Prism.languages.insertBefore(\"wiki\",\"tag\",{nowiki:{pattern:/<(nowiki|pre|source)\\b[\\s\\S]*?>[\\s\\S]*?<\\/\\1>/i,inside:{tag:{pattern:/<(?:nowiki|pre|source)\\b[\\s\\S]*?>|<\\/(?:nowiki|pre|source)>/i,inside:Prism.languages.markup.tag.inside}}}});"
            ]
        },
        "prism-xeora.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function(Prism) {",
                "\tPrism.languages.xeora = Prism.languages.extend('markup', {",
                "\t\t'constant': {",
                "\t\t\tpattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'variable': {",
                "\t\t\tpattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[$.]/",
                "\t\t\t\t},",
                "\t\t\t\t'operator': {",
                "\t\t\t\t\tpattern: /#+|[-+*~=^@]/",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t'function-inline': {",
                "\t\t\tpattern: /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'variable': {",
                "\t\t\t\t\tpattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\t\tpattern: /[,.|]/",
                "\t\t\t\t\t\t},",
                "\t\t\t\t\t\t'operator': {",
                "\t\t\t\t\t\t\tpattern: /#+|[-+*~=^@]/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$\\w:|[$:?.,|]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'function-block': {",
                "\t\t\tpattern: /\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?}:XF\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[$:{}?.,|]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-inline': {",
                "\t\t\tpattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'tag': {",
                "\t\t\t\t\t\t\tpattern: /#\\d/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-open': {",
                "\t\t\tpattern: /\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(![A-Z]+)?/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'tag': {",
                "\t\t\t\t\t\t\tpattern: /#\\d/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t},",
                "\t\t\t\t'attribute': {",
                "\t\t\t\t\tpattern: /![A-Z]+$/,",
                "\t\t\t\t\tinside: {",
                "\t\t\t\t\t\t'punctuation': {",
                "\t\t\t\t\t\t\tpattern: /!/",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t},",
                "\t\t\t\t\talias: 'keyword'",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-separator': {",
                "\t\t\tpattern: /}:[-\\w.]+:{/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[:{}]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t},",
                "\t\t'directive-block-close': {",
                "\t\t\tpattern: /}:[-\\w.]+\\$/,",
                "\t\t\tinside: {",
                "\t\t\t\t'punctuation': {",
                "\t\t\t\t\tpattern: /[:{}$]/",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\talias: 'function'",
                "\t\t}",
                "\t});",
                "",
                "\tPrism.languages.insertBefore('inside', 'punctuation', {",
                "\t\t'variable': Prism.languages.xeora['function-inline'].inside['variable']",
                "\t}, Prism.languages.xeora[\"function-block\"]);",
                "",
                "\tPrism.languages.xeoracube = Prism.languages.xeora;",
                "",
                "}(Prism));"
            ]
        },
        "prism-xeora.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(n){n.languages.xeora=n.languages.extend(\"markup\",{constant:{pattern:/\\$(?:DomainContents|PageRenderDuration)\\$/,inside:{punctuation:{pattern:/\\$/}}},variable:{pattern:/\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,inside:{punctuation:{pattern:/[$.]/},operator:{pattern:/#+|[-+*~=^@]/}}},\"function-inline\":{pattern:/\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?\\$/,inside:{variable:{pattern:/(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,inside:{punctuation:{pattern:/[,.|]/},operator:{pattern:/#+|[-+*~=^@]/}}},punctuation:{pattern:/\\$\\w:|[$:?.,|]/}},alias:\"function\"},\"function-block\":{pattern:/\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?}:XF\\$/,inside:{punctuation:{pattern:/[$:{}?.,|]/}},alias:\"function\"},\"directive-inline\":{pattern:/\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\/\\w.]+\\$/,inside:{punctuation:{pattern:/\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,inside:{tag:{pattern:/#\\d/}}}},alias:\"function\"},\"directive-block-open\":{pattern:/\\$\\w+:{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+])?:[-\\w.]+:{(![A-Z]+)?/,inside:{punctuation:{pattern:/\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,inside:{tag:{pattern:/#\\d/}}},attribute:{pattern:/![A-Z]+$/,inside:{punctuation:{pattern:/!/}},alias:\"keyword\"}},alias:\"function\"},\"directive-block-separator\":{pattern:/}:[-\\w.]+:{/,inside:{punctuation:{pattern:/[:{}]/}},alias:\"function\"},\"directive-block-close\":{pattern:/}:[-\\w.]+\\$/,inside:{punctuation:{pattern:/[:{}$]/}},alias:\"function\"}}),n.languages.insertBefore(\"inside\",\"punctuation\",{variable:n.languages.xeora[\"function-inline\"].inside.variable},n.languages.xeora[\"function-block\"]),n.languages.xeoracube=n.languages.xeora}(Prism);"
            ]
        },
        "prism-xojo.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.xojo = {",
                "\t'comment': {",
                "\t\tpattern: /(?:'|\\/\\/|Rem\\b).+/i,",
                "\t\tinside: {",
                "\t\t\t'keyword': /^Rem/i",
                "\t\t}",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /\"(?:\"\"|[^\"])*\"/,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': [",
                "\t\t/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,",
                "\t\t/&[bchou][a-z\\d]+/i",
                "\t],",
                "\t'symbol': /#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,",
                "\t'keyword': /\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,",
                "\t'operator': /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,",
                "\t'punctuation': /[.,;:()]/",
                "};"
            ]
        },
        "prism-xojo.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.xojo={comment:{pattern:/(?:'|\\/\\/|Rem\\b).+/i,inside:{keyword:/^Rem/i}},string:{pattern:/\"(?:\"\"|[^\"])*\"/,greedy:!0},number:[/(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,/&[bchou][a-z\\d]+/i],symbol:/#(?:If|Else|ElseIf|Endif|Pragma)\\b/i,keyword:/\\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\\b/i,operator:/<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\\b/i,punctuation:/[.,;:()]/};"
            ]
        },
        "prism-xquery.js": {
            "classes": [],
            "functions": [],
            "text": [
                "(function (Prism) {",
                "",
                "\tPrism.languages.xquery = Prism.languages.extend('markup', {",
                "\t\t'xquery-comment': {",
                "\t\t\tpattern: /\\(:[\\s\\S]*?:\\)/,",
                "\t\t\tgreedy: true,",
                "\t\t\talias: \"comment\"",
                "\t\t},",
                "\t\t'string': {",
                "\t\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,",
                "\t\t\tgreedy: true",
                "\t\t},",
                "\t\t'extension': {",
                "\t\t\tpattern: /\\(#.+?#\\)/,",
                "\t\t\talias: 'symbol'",
                "\t\t},",
                "\t\t'variable': /\\$[\\w-:]+/,",
                "\t\t'axis': {",
                "\t\t\tpattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'keyword-operator': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'operator'",
                "\t\t},",
                "\t\t'keyword': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'function': /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,",
                "\t\t'xquery-element': {",
                "\t\t\tpattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'tag'",
                "\t\t},",
                "\t\t'xquery-attribute': {",
                "\t\t\tpattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,",
                "\t\t\tlookbehind: true,",
                "\t\t\talias: 'attr-name'",
                "\t\t},",
                "\t\t'builtin': {",
                "\t\t\tpattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,",
                "\t\t\tlookbehind: true",
                "\t\t},",
                "\t\t'number': /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,",
                "\t\t'operator': [",
                "\t\t\t/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,",
                "\t\t\t{",
                "\t\t\t\tpattern: /(\\s)-(?=\\s)/,",
                "\t\t\t\tlookbehind: true",
                "\t\t\t}",
                "\t\t],",
                "\t\t'punctuation': /[[\\](){},;:/]/",
                "\t});",
                "",
                "\tPrism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;",
                "\tPrism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {",
                "\t\t// Allow for two levels of nesting",
                "\t\tpattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,",
                "\t\tinside: {",
                "\t\t\trest: Prism.languages.xquery",
                "\t\t},",
                "\t\t'alias': 'language-xquery'",
                "\t};",
                "",
                "\t// The following will handle plain text inside tags",
                "\tvar stringifyToken = function (token) {",
                "\t\tif (typeof token === 'string') {",
                "\t\t\treturn token;",
                "\t\t}",
                "\t\tif (typeof token.content === 'string') {",
                "\t\t\treturn token.content;",
                "\t\t}",
                "\t\treturn token.content.map(stringifyToken).join('');",
                "\t};",
                "",
                "\tvar walkTokens = function (tokens) {",
                "\t\tvar openedTags = [];",
                "\t\tfor (var i = 0; i < tokens.length; i++) {",
                "\t\t\tvar token = tokens[i];",
                "\t\t\tvar notTagNorBrace = false;",
                "",
                "\t\t\tif (typeof token !== 'string') {",
                "\t\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {",
                "\t\t\t\t\t// We found a tag, now find its kind",
                "",
                "\t\t\t\t\tif (token.content[0].content[0].content === '</') {",
                "\t\t\t\t\t\t// Closing tag",
                "\t\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {",
                "\t\t\t\t\t\t\t// Pop matching opening tag",
                "\t\t\t\t\t\t\topenedTags.pop();",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {",
                "\t\t\t\t\t\t\t// Autoclosed tag, ignore",
                "\t\t\t\t\t\t} else {",
                "\t\t\t\t\t\t\t// Opening tag",
                "\t\t\t\t\t\t\topenedTags.push({",
                "\t\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),",
                "\t\t\t\t\t\t\t\topenedBraces: 0",
                "\t\t\t\t\t\t\t});",
                "\t\t\t\t\t\t}",
                "\t\t\t\t\t}",
                "\t\t\t\t} else if (",
                "\t\t\t\t\topenedTags.length > 0 && token.type === 'punctuation' && token.content === '{' &&",
                "\t\t\t\t\t// Ignore `{{`",
                "\t\t\t\t\t(!tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') &&",
                "\t\t\t\t\t(!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')",
                "\t\t\t\t) {",
                "\t\t\t\t\t// Here we might have entered an XQuery expression inside a tag",
                "\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;",
                "",
                "\t\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {",
                "",
                "\t\t\t\t\t// Here we might have left an XQuery expression inside a tag",
                "\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;",
                "",
                "\t\t\t\t} else if (token.type !== 'comment') {",
                "\t\t\t\t\tnotTagNorBrace = true",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t\tif (notTagNorBrace || typeof token === 'string') {",
                "\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {",
                "\t\t\t\t\t// Here we are inside a tag, and not inside an XQuery expression.",
                "\t\t\t\t\t// That's plain text: drop any tokens matched.",
                "\t\t\t\t\tvar plainText = stringifyToken(token);",
                "",
                "\t\t\t\t\t// And merge text with adjacent text",
                "\t\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {",
                "\t\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);",
                "\t\t\t\t\t\ttokens.splice(i + 1, 1);",
                "\t\t\t\t\t}",
                "\t\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {",
                "\t\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;",
                "\t\t\t\t\t\ttokens.splice(i - 1, 1);",
                "\t\t\t\t\t\ti--;",
                "\t\t\t\t\t}",
                "",
                "\t\t\t\t\tif (/^\\s+$/.test(plainText)) {",
                "\t\t\t\t\t\ttokens[i] = plainText;",
                "\t\t\t\t\t} else {",
                "\t\t\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "",
                "\t\t\tif (token.content && typeof token.content !== 'string') {",
                "\t\t\t\twalkTokens(token.content);",
                "\t\t\t}",
                "\t\t}",
                "\t};",
                "",
                "\tPrism.hooks.add('after-tokenize', function (env) {",
                "\t\tif (env.language !== 'xquery') {",
                "\t\t\treturn;",
                "\t\t}",
                "\t\twalkTokens(env.tokens);",
                "\t});",
                "",
                "}(Prism));"
            ]
        },
        "prism-xquery.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "!function(r){r.languages.xquery=r.languages.extend(\"markup\",{\"xquery-comment\":{pattern:/\\(:[\\s\\S]*?:\\)/,greedy:!0,alias:\"comment\"},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,greedy:!0},extension:{pattern:/\\(#.+?#\\)/,alias:\"symbol\"},variable:/\\$[\\w-:]+/,axis:{pattern:/(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,lookbehind:!0,alias:\"operator\"},\"keyword-operator\":{pattern:/(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,lookbehind:!0,alias:\"operator\"},keyword:{pattern:/(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,lookbehind:!0},function:/[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\"xquery-element\":{pattern:/(element\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"tag\"},\"xquery-attribute\":{pattern:/(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,lookbehind:!0,alias:\"attr-name\"},builtin:{pattern:/(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,lookbehind:!0},number:/\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,operator:[/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,{pattern:/(\\s)-(?=\\s)/,lookbehind:!0}],punctuation:/[[\\](){},;:/]/}),r.languages.xquery.tag.pattern=/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,r.languages.xquery.tag.inside[\"attr-value\"].pattern=/=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,r.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation=/^=\"|\"$/,r.languages.xquery.tag.inside[\"attr-value\"].inside.expression={pattern:/{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,inside:{rest:r.languages.xquery},alias:\"language-xquery\"};var s=function(e){return\"string\"==typeof e?e:\"string\"==typeof e.content?e.content:e.content.map(s).join(\"\")},l=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n],o=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<t.length&&t[t.length-1].tagName===s(a.content[0].content[1])&&t.pop():\"/>\"===a.content[a.content.length-1].content||t.push({tagName:s(a.content[0].content[1]),openedBraces:0}):!(0<t.length&&\"punctuation\"===a.type&&\"{\"===a.content)||e[n+1]&&\"punctuation\"===e[n+1].type&&\"{\"===e[n+1].content||e[n-1]&&\"plain-text\"===e[n-1].type&&\"{\"===e[n-1].content?0<t.length&&0<t[t.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?t[t.length-1].openedBraces--:\"comment\"!==a.type&&(o=!0):t[t.length-1].openedBraces++),(o||\"string\"==typeof a)&&0<t.length&&0===t[t.length-1].openedBraces){var i=s(a);n<e.length-1&&(\"string\"==typeof e[n+1]||\"plain-text\"===e[n+1].type)&&(i+=s(e[n+1]),e.splice(n+1,1)),0<n&&(\"string\"==typeof e[n-1]||\"plain-text\"===e[n-1].type)&&(i=s(e[n-1])+i,e.splice(n-1,1),n--),/^\\s+$/.test(i)?e[n]=i:e[n]=new r.Token(\"plain-text\",i,null,i)}a.content&&\"string\"!=typeof a.content&&l(a.content)}};r.hooks.add(\"after-tokenize\",function(e){\"xquery\"===e.language&&l(e.tokens)})}(Prism);"
            ]
        },
        "prism-yaml.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.yaml = {",
                "\t'scalar': {",
                "\t\tpattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'string'",
                "\t},",
                "\t'comment': /#.*/,",
                "\t'key': {",
                "\t\tpattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,",
                "\t\tlookbehind: true,",
                "\t\talias: 'atrule'",
                "\t},",
                "\t'directive': {",
                "\t\tpattern: /(^[ \\t]*)%.+/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'important'",
                "\t},",
                "\t'datetime': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,",
                "\t\tlookbehind: true,",
                "\t\talias: 'number'",
                "\t},",
                "\t'boolean': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'important'",
                "\t},",
                "\t'null': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,",
                "\t\tlookbehind: true,",
                "\t\talias: 'important'",
                "\t},",
                "\t'string': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,",
                "\t\tlookbehind: true,",
                "\t\tgreedy: true",
                "\t},",
                "\t'number': {",
                "\t\tpattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,",
                "\t\tlookbehind: true",
                "\t},",
                "\t'tag': /![^\\s]+/,",
                "\t'important': /[&*][\\w]+/,",
                "\t'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./",
                "};",
                "",
                "Prism.languages.yml = Prism.languages.yaml;"
            ]
        },
        "prism-yaml.min.js": {
            "classes": [],
            "functions": [],
            "text": [
                "Prism.languages.yaml={scalar:{pattern:/([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,lookbehind:!0,alias:\"string\"},comment:/#.*/,key:{pattern:/(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,lookbehind:!0,alias:\"atrule\"},directive:{pattern:/(^[ \\t]*)%.+/m,lookbehind:!0,alias:\"important\"},datetime:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,lookbehind:!0,alias:\"number\"},boolean:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,lookbehind:!0,alias:\"important\"},null:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,lookbehind:!0,alias:\"important\"},string:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,lookbehind:!0,greedy:!0},number:{pattern:/([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,lookbehind:!0},tag:/![^\\s]+/,important:/[&*][\\w]+/,punctuation:/---|[:[\\]{}\\-,|>?]|\\.\\.\\./},Prism.languages.yml=Prism.languages.yaml;"
            ]
        }
    },
    "img": {
        "logo-ala.png": {},
        "logo-css-tricks.png": {},
        "logo-drupal.png": {},
        "logo-mdn.png": {},
        "logo-react.png": {},
        "logo-sitepoint.png": {},
        "logo-smashing.png": {},
        "logo-stripe.png": {},
        "spectrum.png": {}
    },
    "plugins": {
        "index.html": {},
        "autolinker": {
            "index.html": {},
            "prism-autolinker.css": {},
            "prism-autolinker.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "var url = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&@]+(?:\\?[\\w\\-+%~/.:=?&!$'()*,;@]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;@]*)?/,",
                    "    email = /\\b\\S+@[\\w.]+[a-z]{2}/,",
                    "    linkMd = /\\[([^\\]]+)]\\(([^)]+)\\)/,",
                    "",
                    "\t// Tokens that may contain URLs and emails",
                    "    candidates = ['comment', 'url', 'attr-value', 'string'];",
                    "",
                    "Prism.plugins.autolinker = {",
                    "\tprocessGrammar: function (grammar) {",
                    "\t\t// Abort if grammar has already been processed",
                    "\t\tif (!grammar || grammar['url-link']) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tPrism.languages.DFS(grammar, function (key, def, type) {",
                    "\t\t\tif (candidates.indexOf(type) > -1 && !Array.isArray(def)) {",
                    "\t\t\t\tif (!def.pattern) {",
                    "\t\t\t\t\tdef = this[key] = {",
                    "\t\t\t\t\t\tpattern: def",
                    "\t\t\t\t\t};",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tdef.inside = def.inside || {};",
                    "",
                    "\t\t\t\tif (type == 'comment') {",
                    "\t\t\t\t\tdef.inside['md-link'] = linkMd;",
                    "\t\t\t\t}",
                    "\t\t\t\tif (type == 'attr-value') {",
                    "\t\t\t\t\tPrism.languages.insertBefore('inside', 'punctuation', { 'url-link': url }, def);",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tdef.inside['url-link'] = url;",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tdef.inside['email-link'] = email;",
                    "\t\t\t}",
                    "\t\t});",
                    "\t\tgrammar['url-link'] = url;",
                    "\t\tgrammar['email-link'] = email;",
                    "\t}",
                    "};",
                    "",
                    "Prism.hooks.add('before-highlight', function(env) {",
                    "\tPrism.plugins.autolinker.processGrammar(env.grammar);",
                    "});",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif (/-link$/.test(env.type)) {",
                    "\t\tenv.tag = 'a';",
                    "",
                    "\t\tvar href = env.content;",
                    "",
                    "\t\tif (env.type == 'email-link' && href.indexOf('mailto:') != 0) {",
                    "\t\t\thref = 'mailto:' + href;",
                    "\t\t}",
                    "\t\telse if (env.type == 'md-link') {",
                    "\t\t\t// Markdown",
                    "\t\t\tvar match = env.content.match(linkMd);",
                    "",
                    "\t\t\thref = match[2];",
                    "\t\t\tenv.content = match[1];",
                    "\t\t}",
                    "",
                    "\t\tenv.attributes.href = href;",
                    "",
                    "\t\t// Silently catch any error thrown by decodeURIComponent (#1186)",
                    "\t\ttry {",
                    "\t\t\tenv.content = decodeURIComponent(env.content);",
                    "\t\t} catch(e) {}",
                    "\t}",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-autolinker.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var t=/\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&@]+(?:\\?[\\w\\-+%~/.:=?&!$'()*,;@]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;@]*)?/,r=/\\b\\S+@[\\w.]+[a-z]{2}/,a=/\\[([^\\]]+)]\\(([^)]+)\\)/,l=[\"comment\",\"url\",\"attr-value\",\"string\"];Prism.plugins.autolinker={processGrammar:function(i){i&&!i[\"url-link\"]&&(Prism.languages.DFS(i,function(i,n,e){-1<l.indexOf(e)&&!Array.isArray(n)&&(n.pattern||(n=this[i]={pattern:n}),n.inside=n.inside||{},\"comment\"==e&&(n.inside[\"md-link\"]=a),\"attr-value\"==e?Prism.languages.insertBefore(\"inside\",\"punctuation\",{\"url-link\":t},n):n.inside[\"url-link\"]=t,n.inside[\"email-link\"]=r)}),i[\"url-link\"]=t,i[\"email-link\"]=r)}},Prism.hooks.add(\"before-highlight\",function(i){Prism.plugins.autolinker.processGrammar(i.grammar)}),Prism.hooks.add(\"wrap\",function(i){if(/-link$/.test(i.type)){i.tag=\"a\";var n=i.content;if(\"email-link\"==i.type&&0!=n.indexOf(\"mailto:\"))n=\"mailto:\"+n;else if(\"md-link\"==i.type){var e=i.content.match(a);n=e[2],i.content=e[1]}i.attributes.href=n;try{i.content=decodeURIComponent(i.content)}catch(i){}}})}}();"
                ]
            }
        },
        "autoloader": {
            "index.html": {},
            "prism-autoloader.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.createElement) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// The dependencies map is built automatically with gulp",
                    "\tvar lang_dependencies = /*dependencies_placeholder[*/{\"javascript\":\"clike\",\"actionscript\":\"javascript\",\"arduino\":\"cpp\",\"aspnet\":[\"markup\",\"csharp\"],\"bison\":\"c\",\"c\":\"clike\",\"csharp\":\"clike\",\"cpp\":\"c\",\"coffeescript\":\"javascript\",\"crystal\":\"ruby\",\"css-extras\":\"css\",\"d\":\"clike\",\"dart\":\"clike\",\"django\":\"markup-templating\",\"ejs\":[\"javascript\",\"markup-templating\"],\"erb\":[\"ruby\",\"markup-templating\"],\"fsharp\":\"clike\",\"flow\":\"javascript\",\"glsl\":\"clike\",\"gml\":\"clike\",\"go\":\"clike\",\"groovy\":\"clike\",\"haml\":\"ruby\",\"handlebars\":\"markup-templating\",\"haxe\":\"clike\",\"java\":\"clike\",\"javadoc\":[\"markup\",\"java\",\"javadoclike\"],\"jolie\":\"clike\",\"jsdoc\":[\"javascript\",\"javadoclike\"],\"js-extras\":\"javascript\",\"jsonp\":\"json\",\"json5\":\"json\",\"kotlin\":\"clike\",\"less\":\"css\",\"markdown\":\"markup\",\"markup-templating\":\"markup\",\"n4js\":\"javascript\",\"nginx\":\"clike\",\"objectivec\":\"c\",\"opencl\":\"cpp\",\"parser\":\"markup\",\"php\":[\"clike\",\"markup-templating\"],\"phpdoc\":[\"php\",\"javadoclike\"],\"php-extras\":\"php\",\"plsql\":\"sql\",\"processing\":\"clike\",\"protobuf\":\"clike\",\"pug\":[\"markup\",\"javascript\"],\"qore\":\"clike\",\"jsx\":[\"markup\",\"javascript\"],\"tsx\":[\"jsx\",\"typescript\"],\"reason\":\"clike\",\"ruby\":\"clike\",\"sass\":\"css\",\"scss\":\"css\",\"scala\":\"java\",\"smarty\":\"markup-templating\",\"soy\":\"markup-templating\",\"swift\":\"clike\",\"tap\":\"yaml\",\"textile\":\"markup\",\"tt2\":[\"clike\",\"markup-templating\"],\"twig\":\"markup\",\"typescript\":\"javascript\",\"t4-cs\":[\"t4-templating\",\"csharp\"],\"t4-vb\":[\"t4-templating\",\"visual-basic\"],\"vala\":\"clike\",\"vbnet\":\"basic\",\"velocity\":\"markup\",\"wiki\":\"markup\",\"xeora\":\"markup\",\"xquery\":\"markup\"}/*]*/;",
                    "",
                    "\tvar lang_aliases = /*aliases_placeholder[*/{\"html\":\"markup\",\"xml\":\"markup\",\"svg\":\"markup\",\"mathml\":\"markup\",\"js\":\"javascript\",\"adoc\":\"asciidoc\",\"shell\":\"bash\",\"rbnf\":\"bnf\",\"dotnet\":\"csharp\",\"coffee\":\"coffeescript\",\"jinja2\":\"django\",\"dockerfile\":\"docker\",\"gamemakerlanguage\":\"gml\",\"hs\":\"haskell\",\"emacs\":\"lisp\",\"elisp\":\"lisp\",\"emacs-lisp\":\"lisp\",\"md\":\"markdown\",\"n4jsd\":\"n4js\",\"objectpascal\":\"pascal\",\"py\":\"python\",\"rb\":\"ruby\",\"ts\":\"typescript\",\"t4\":\"t4-cs\",\"vb\":\"visual-basic\",\"xeoracube\":\"xeora\",\"yml\":\"yaml\"}/*]*/;",
                    "",
                    "\tvar lang_data = {};",
                    "",
                    "\tvar ignored_language = 'none';",
                    "",
                    "\tvar script = document.getElementsByTagName('script');",
                    "\tscript = script[script.length - 1];",
                    "\tvar languages_path = 'components/';",
                    "\tif(script.hasAttribute('data-autoloader-path')) {",
                    "\t\tvar path = script.getAttribute('data-autoloader-path').trim();",
                    "\t\tif(path.length > 0 && !/^[a-z]+:\\/\\//i.test(script.src)) {",
                    "\t\t\tlanguages_path = path.replace(/\\/?$/, '/');",
                    "\t\t}",
                    "\t} else if (/[\\w-]+\\.js$/.test(script.src)) {",
                    "\t\tlanguages_path = script.src.replace(/[\\w-]+\\.js$/, 'components/');",
                    "\t}",
                    "\tvar config = Prism.plugins.autoloader = {",
                    "\t\tlanguages_path: languages_path,",
                    "\t\tuse_minified: true",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Lazy loads an external script",
                    "\t * @param {string} src",
                    "\t * @param {function=} success",
                    "\t * @param {function=} error",
                    "\t */",
                    "\tvar addScript = function (src, success, error) {",
                    "\t\tvar s = document.createElement('script');",
                    "\t\ts.src = src;",
                    "\t\ts.async = true;",
                    "\t\ts.onload = function() {",
                    "\t\t\tdocument.body.removeChild(s);",
                    "\t\t\tsuccess && success();",
                    "\t\t};",
                    "\t\ts.onerror = function() {",
                    "\t\t\tdocument.body.removeChild(s);",
                    "\t\t\terror && error();",
                    "\t\t};",
                    "\t\tdocument.body.appendChild(s);",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns the path to a grammar, using the language_path and use_minified config keys.",
                    "\t * @param {string} lang",
                    "\t * @returns {string}",
                    "\t */",
                    "\tvar getLanguagePath = function (lang) {",
                    "\t\treturn config.languages_path +",
                    "\t\t\t'prism-' + lang",
                    "\t\t\t+ (config.use_minified ? '.min' : '') + '.js'",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Tries to load a grammar and",
                    "\t * highlight again the given element once loaded.",
                    "\t * @param {string} lang",
                    "\t * @param {HTMLElement} elt",
                    "\t */",
                    "\tvar registerElement = function (lang, elt) {",
                    "\t\tif (lang in lang_aliases) {",
                    "\t\t\tlang = lang_aliases[lang];",
                    "\t\t}",
                    "",
                    "\t\tvar data = lang_data[lang];",
                    "\t\tif (!data) {",
                    "\t\t\tdata = lang_data[lang] = {};",
                    "\t\t}",
                    "",
                    "\t\t// Look for additional dependencies defined on the <code> or <pre> tags",
                    "\t\tvar deps = elt.getAttribute('data-dependencies');",
                    "\t\tif (!deps && elt.parentNode && elt.parentNode.tagName.toLowerCase() === 'pre') {",
                    "\t\t\tdeps = elt.parentNode.getAttribute('data-dependencies');",
                    "\t\t}",
                    "",
                    "\t\tif (deps) {",
                    "\t\t\tdeps = deps.split(/\\s*,\\s*/g);",
                    "\t\t} else {",
                    "\t\t\tdeps = [];",
                    "\t\t}",
                    "",
                    "\t\tloadLanguages(deps, function () {",
                    "\t\t\tloadLanguage(lang, function () {",
                    "\t\t\t\tPrism.highlightElement(elt);",
                    "\t\t\t});",
                    "\t\t});",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Sequentially loads an array of grammars.",
                    "\t * @param {string[]|string} langs",
                    "\t * @param {function=} success",
                    "\t * @param {function=} error",
                    "\t */",
                    "\tvar loadLanguages = function (langs, success, error) {",
                    "\t\tif (typeof langs === 'string') {",
                    "\t\t\tlangs = [langs];",
                    "\t\t}",
                    "\t\tvar i = 0;",
                    "\t\tvar l = langs.length;",
                    "\t\tvar f = function () {",
                    "\t\t\tif (i < l) {",
                    "\t\t\t\tloadLanguage(langs[i], function () {",
                    "\t\t\t\t\ti++;",
                    "\t\t\t\t\tf();",
                    "\t\t\t\t}, function () {",
                    "\t\t\t\t\terror && error(langs[i]);",
                    "\t\t\t\t});",
                    "\t\t\t} else if (i === l) {",
                    "\t\t\t\tsuccess && success(langs);",
                    "\t\t\t}",
                    "\t\t};",
                    "\t\tf();",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Load a grammar with its dependencies",
                    "\t * @param {string} lang",
                    "\t * @param {function=} success",
                    "\t * @param {function=} error",
                    "\t */",
                    "\tvar loadLanguage = function (lang, success, error) {",
                    "\t\tvar force = lang.indexOf('!') >= 0;",
                    "",
                    "\t\tlang = lang.replace('!', '');",
                    "\t\tlang = lang_aliases[lang] || lang;",
                    "",
                    "\t\tvar load = function () {",
                    "\t\t\tvar data = lang_data[lang];",
                    "\t\t\tif (!data) {",
                    "\t\t\t\tdata = lang_data[lang] = {};",
                    "\t\t\t}",
                    "\t\t\tif (success) {",
                    "\t\t\t\tif (!data.success_callbacks) {",
                    "\t\t\t\t\tdata.success_callbacks = [];",
                    "\t\t\t\t}",
                    "\t\t\t\tdata.success_callbacks.push(success);",
                    "\t\t\t}",
                    "\t\t\tif (error) {",
                    "\t\t\t\tif (!data.error_callbacks) {",
                    "\t\t\t\t\tdata.error_callbacks = [];",
                    "\t\t\t\t}",
                    "\t\t\t\tdata.error_callbacks.push(error);",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (!force && Prism.languages[lang]) {",
                    "\t\t\t\tlanguageSuccess(lang);",
                    "\t\t\t} else if (!force && data.error) {",
                    "\t\t\t\tlanguageError(lang);",
                    "\t\t\t} else if (force || !data.loading) {",
                    "\t\t\t\tdata.loading = true;",
                    "\t\t\t\tvar src = getLanguagePath(lang);",
                    "\t\t\t\taddScript(src, function () {",
                    "\t\t\t\t\tdata.loading = false;",
                    "\t\t\t\t\tlanguageSuccess(lang);",
                    "",
                    "\t\t\t\t}, function () {",
                    "\t\t\t\t\tdata.loading = false;",
                    "\t\t\t\t\tdata.error = true;",
                    "\t\t\t\t\tlanguageError(lang);",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t};",
                    "",
                    "\t\tvar dependencies = lang_dependencies[lang];",
                    "\t\tif(dependencies && dependencies.length) {",
                    "\t\t\tloadLanguages(dependencies, load);",
                    "\t\t} else {",
                    "\t\t\tload();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Runs all success callbacks for this language.",
                    "\t * @param {string} lang",
                    "\t */",
                    "\tvar languageSuccess = function (lang) {",
                    "\t\tif (lang_data[lang] && lang_data[lang].success_callbacks && lang_data[lang].success_callbacks.length) {",
                    "\t\t\tlang_data[lang].success_callbacks.forEach(function (f) {",
                    "\t\t\t\tf(lang);",
                    "\t\t\t});",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Runs all error callbacks for this language.",
                    "\t * @param {string} lang",
                    "\t */",
                    "\tvar languageError = function (lang) {",
                    "\t\tif (lang_data[lang] && lang_data[lang].error_callbacks && lang_data[lang].error_callbacks.length) {",
                    "\t\t\tlang_data[lang].error_callbacks.forEach(function (f) {",
                    "\t\t\t\tf(lang);",
                    "\t\t\t});",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "\t\tif (env.element && env.language && !env.grammar) {",
                    "\t\t\tif (env.language !== ignored_language) {",
                    "\t\t\t\tregisterElement(env.language, env.element);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "",
                    "}());"
                ]
            },
            "prism-autoloader.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document&&document.createElement){var i={javascript:\"clike\",actionscript:\"javascript\",arduino:\"cpp\",aspnet:[\"markup\",\"csharp\"],bison:\"c\",c:\"clike\",csharp:\"clike\",cpp:\"c\",coffeescript:\"javascript\",crystal:\"ruby\",\"css-extras\":\"css\",d:\"clike\",dart:\"clike\",django:\"markup-templating\",ejs:[\"javascript\",\"markup-templating\"],erb:[\"ruby\",\"markup-templating\"],fsharp:\"clike\",flow:\"javascript\",glsl:\"clike\",gml:\"clike\",go:\"clike\",groovy:\"clike\",haml:\"ruby\",handlebars:\"markup-templating\",haxe:\"clike\",java:\"clike\",javadoc:[\"markup\",\"java\",\"javadoclike\"],jolie:\"clike\",jsdoc:[\"javascript\",\"javadoclike\"],\"js-extras\":\"javascript\",jsonp:\"json\",json5:\"json\",kotlin:\"clike\",less:\"css\",markdown:\"markup\",\"markup-templating\":\"markup\",n4js:\"javascript\",nginx:\"clike\",objectivec:\"c\",opencl:\"cpp\",parser:\"markup\",php:[\"clike\",\"markup-templating\"],phpdoc:[\"php\",\"javadoclike\"],\"php-extras\":\"php\",plsql:\"sql\",processing:\"clike\",protobuf:\"clike\",pug:[\"markup\",\"javascript\"],qore:\"clike\",jsx:[\"markup\",\"javascript\"],tsx:[\"jsx\",\"typescript\"],reason:\"clike\",ruby:\"clike\",sass:\"css\",scss:\"css\",scala:\"java\",smarty:\"markup-templating\",soy:\"markup-templating\",swift:\"clike\",tap:\"yaml\",textile:\"markup\",tt2:[\"clike\",\"markup-templating\"],twig:\"markup\",typescript:\"javascript\",\"t4-cs\":[\"t4-templating\",\"csharp\"],\"t4-vb\":[\"t4-templating\",\"visual-basic\"],vala:\"clike\",vbnet:\"basic\",velocity:\"markup\",wiki:\"markup\",xeora:\"markup\",xquery:\"markup\"},l={html:\"markup\",xml:\"markup\",svg:\"markup\",mathml:\"markup\",js:\"javascript\",adoc:\"asciidoc\",shell:\"bash\",rbnf:\"bnf\",dotnet:\"csharp\",coffee:\"coffeescript\",jinja2:\"django\",dockerfile:\"docker\",gamemakerlanguage:\"gml\",hs:\"haskell\",emacs:\"lisp\",elisp:\"lisp\",\"emacs-lisp\":\"lisp\",md:\"markdown\",n4jsd:\"n4js\",objectpascal:\"pascal\",py:\"python\",rb:\"ruby\",ts:\"typescript\",t4:\"t4-cs\",vb:\"visual-basic\",xeoracube:\"xeora\",yml:\"yaml\"},n={},a=document.getElementsByTagName(\"script\"),e=\"components/\";if((a=a[a.length-1]).hasAttribute(\"data-autoloader-path\")){var c=a.getAttribute(\"data-autoloader-path\").trim();0<c.length&&!/^[a-z]+:\\/\\//i.test(a.src)&&(e=c.replace(/\\/?$/,\"/\"))}else/[\\w-]+\\.js$/.test(a.src)&&(e=a.src.replace(/[\\w-]+\\.js$/,\"components/\"));var p=Prism.plugins.autoloader={languages_path:e,use_minified:!0},o=function(a,e,c){\"string\"==typeof a&&(a=[a]);var s=0,t=a.length,r=function(){s<t?u(a[s],function(){s++,r()},function(){c&&c(a[s])}):s===t&&e&&e(a)};r()},u=function(e,c,s){var t=0<=e.indexOf(\"!\");e=e.replace(\"!\",\"\");var a=function(){var a=n[e];if(a||(a=n[e]={}),c&&(a.success_callbacks||(a.success_callbacks=[]),a.success_callbacks.push(c)),s&&(a.error_callbacks||(a.error_callbacks=[]),a.error_callbacks.push(s)),!t&&Prism.languages[e])m(e);else if(!t&&a.error)k(e);else if(t||!a.loading){a.loading=!0,function(a,e,c){var s=document.createElement(\"script\");s.src=a,s.async=!0,s.onload=function(){document.body.removeChild(s),e&&e()},s.onerror=function(){document.body.removeChild(s),c&&c()},document.body.appendChild(s)}(function(a){return p.languages_path+\"prism-\"+a+(p.use_minified?\".min\":\"\")+\".js\"}(e),function(){a.loading=!1,m(e)},function(){a.loading=!1,a.error=!0,k(e)})}},r=i[e=l[e]||e];r&&r.length?o(r,a):a()},m=function(e){n[e]&&n[e].success_callbacks&&n[e].success_callbacks.length&&n[e].success_callbacks.forEach(function(a){a(e)})},k=function(e){n[e]&&n[e].error_callbacks&&n[e].error_callbacks.length&&n[e].error_callbacks.forEach(function(a){a(e)})};Prism.hooks.add(\"complete\",function(a){a.element&&a.language&&!a.grammar&&\"none\"!==a.language&&function(a,e){a in l&&(a=l[a]);var c=n[a];c||(c=n[a]={});var s=e.getAttribute(\"data-dependencies\");!s&&e.parentNode&&\"pre\"===e.parentNode.tagName.toLowerCase()&&(s=e.parentNode.getAttribute(\"data-dependencies\")),s=s?s.split(/\\s*,\\s*/g):[],o(s,function(){u(a,function(){Prism.highlightElement(e)})})}(a.language,a.element)})}}();"
                ]
            }
        },
        "command-line": {
            "index.html": {},
            "prism-command-line.css": {},
            "prism-command-line.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\treturn;",
                    "}",
                    "",
                    "var clsReg = /(?:^|\\s)command-line(?:\\s|$)/;",
                    "",
                    "Prism.hooks.add('before-highlight', function (env) {",
                    "\tvar vars = env.vars = env.vars || {};",
                    "\tvar commandLine = vars['command-line'] = vars['command-line'] || {};",
                    "",
                    "\tif (commandLine.complete || !env.code) {",
                    "\t\tcommandLine.complete = true;",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Works only for <code> wrapped inside <pre> (not inline).",
                    "\tvar pre = env.element.parentNode;",
                    "\tif (!pre || !/pre/i.test(pre.nodeName) || // Abort only if neither the <pre> nor the <code> have the class",
                    "\t\t(!clsReg.test(pre.className) && !clsReg.test(env.element.className))) {",
                    "\t\tcommandLine.complete = true;",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tif (env.element.querySelector('.command-line-prompt')) { // Abort if prompt already exists.",
                    "\t\tcommandLine.complete = true;",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar codeLines = env.code.split('\\n');",
                    "\tcommandLine.numberOfLines = codeLines.length;",
                    "\tvar outputLines = commandLine.outputLines = [];",
                    "",
                    "\tvar outputSections = pre.getAttribute('data-output');",
                    "\tvar outputFilter = pre.getAttribute('data-filter-output');",
                    "\tif (outputSections || outputSections === '') { // The user specified the output lines. -- cwells",
                    "\t\toutputSections = outputSections.split(',');",
                    "\t\tfor (var i = 0; i < outputSections.length; i++) { // Parse the output sections into start/end ranges. -- cwells",
                    "\t\t\tvar range = outputSections[i].split('-');",
                    "\t\t\tvar outputStart = parseInt(range[0], 10);",
                    "\t\t\tvar outputEnd = (range.length === 2 ? parseInt(range[1], 10) : outputStart);",
                    "",
                    "\t\t\tif (!isNaN(outputStart) && !isNaN(outputEnd)) {",
                    "\t\t\t\tif (outputStart < 1) {",
                    "\t\t\t\t\toutputStart = 1;",
                    "\t\t\t\t}",
                    "\t\t\t\tif (outputEnd > codeLines.length) {",
                    "\t\t\t\t\toutputEnd = codeLines.length;",
                    "\t\t\t\t}",
                    "\t\t\t\t// Convert start and end to 0-based to simplify the arrays. -- cwells",
                    "\t\t\t\toutputStart--;",
                    "\t\t\t\toutputEnd--;",
                    "\t\t\t\t// Save the output line in an array and clear it in the code so it's not highlighted. -- cwells",
                    "\t\t\t\tfor (var j = outputStart; j <= outputEnd; j++) {",
                    "\t\t\t\t\toutputLines[j] = codeLines[j];",
                    "\t\t\t\t\tcodeLines[j] = '';",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t} else if (outputFilter) { // Treat lines beginning with this string as output. -- cwells",
                    "\t\tfor (var i = 0; i < codeLines.length; i++) {",
                    "\t\t\tif (codeLines[i].indexOf(outputFilter) === 0) { // This line is output. -- cwells",
                    "\t\t\t\toutputLines[i] = codeLines[i].slice(outputFilter.length);",
                    "\t\t\t\tcodeLines[i] = '';",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tenv.code = codeLines.join('\\n');",
                    "});",
                    "",
                    "Prism.hooks.add('before-insert', function (env) {",
                    "\tvar vars = env.vars = env.vars || {};",
                    "\tvar commandLine = vars['command-line'] = vars['command-line'] || {};",
                    "\tif (commandLine.complete) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Reinsert the output lines into the highlighted code. -- cwells",
                    "\tvar codeLines = env.highlightedCode.split('\\n');",
                    "\tfor (var i = 0, l = (commandLine.outputLines || []).length; i < l; i++) {",
                    "\t\tif (commandLine.outputLines.hasOwnProperty(i)) {",
                    "\t\t\tcodeLines[i] = commandLine.outputLines[i];",
                    "\t\t}",
                    "\t}",
                    "\tenv.highlightedCode = codeLines.join('\\n');",
                    "});",
                    "",
                    "Prism.hooks.add('complete', function (env) {",
                    "\tvar vars = env.vars = env.vars || {};",
                    "\tvar commandLine = vars['command-line'] = vars['command-line'] || {};",
                    "\tif (commandLine.complete) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar pre = env.element.parentNode;",
                    "\tif (clsReg.test(env.element.className)) { // Remove the class \"command-line\" from the <code>",
                    "\t\tenv.element.className = env.element.className.replace(clsReg, ' ');",
                    "\t}",
                    "\tif (!clsReg.test(pre.className)) { // Add the class \"command-line\" to the <pre>",
                    "\t\tpre.className += ' command-line';",
                    "\t}",
                    "",
                    "\tvar getAttribute = function(key, defaultValue) {",
                    "\t\treturn (pre.getAttribute(key) || defaultValue).replace(/\"/g, '&quot');",
                    "\t};",
                    "",
                    "\t// Create the \"rows\" that will become the command-line prompts. -- cwells",
                    "\tvar promptLines = new Array((commandLine.numberOfLines || 0) + 1);",
                    "\tvar promptText = getAttribute('data-prompt', '');",
                    "\tif (promptText !== '') {",
                    "\t\tpromptLines = promptLines.join('<span data-prompt=\"' + promptText + '\"></span>');",
                    "\t} else {",
                    "\t\tvar user = getAttribute('data-user', 'user');",
                    "\t\tvar host = getAttribute('data-host', 'localhost');",
                    "\t\tpromptLines = promptLines.join('<span data-user=\"' + user + '\" data-host=\"' + host + '\"></span>');",
                    "\t}",
                    "",
                    "\t// Create the wrapper element. -- cwells",
                    "\tvar prompt = document.createElement('span');",
                    "\tprompt.className = 'command-line-prompt';",
                    "\tprompt.innerHTML = promptLines;",
                    "",
                    "\t// Remove the prompt from the output lines. -- cwells",
                    "\tfor (var i = 0, l = (commandLine.outputLines || []).length; i < l; i++) {",
                    "\t\tif (commandLine.outputLines.hasOwnProperty(i)) {",
                    "\t\t\tvar node = prompt.children[i];",
                    "\t\t\tnode.removeAttribute('data-user');",
                    "\t\t\tnode.removeAttribute('data-host');",
                    "\t\t\tnode.removeAttribute('data-prompt');",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tenv.element.insertBefore(prompt, env.element.firstChild);",
                    "\tcommandLine.complete = true;",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-command-line.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var u=/(?:^|\\s)command-line(?:\\s|$)/;Prism.hooks.add(\"before-highlight\",function(e){var t=e.vars=e.vars||{},a=t[\"command-line\"]=t[\"command-line\"]||{};if(!a.complete&&e.code){var n=e.element.parentNode;if(n&&/pre/i.test(n.nodeName)&&(u.test(n.className)||u.test(e.element.className)))if(e.element.querySelector(\".command-line-prompt\"))a.complete=!0;else{var r=e.code.split(\"\\n\");a.numberOfLines=r.length;var s=a.outputLines=[],o=n.getAttribute(\"data-output\"),i=n.getAttribute(\"data-filter-output\");if(o||\"\"===o){o=o.split(\",\");for(var l=0;l<o.length;l++){var m=o[l].split(\"-\"),p=parseInt(m[0],10),d=2===m.length?parseInt(m[1],10):p;if(!isNaN(p)&&!isNaN(d)){p<1&&(p=1),d>r.length&&(d=r.length),d--;for(var c=--p;c<=d;c++)s[c]=r[c],r[c]=\"\"}}}else if(i)for(l=0;l<r.length;l++)0===r[l].indexOf(i)&&(s[l]=r[l].slice(i.length),r[l]=\"\");e.code=r.join(\"\\n\")}else a.complete=!0}else a.complete=!0}),Prism.hooks.add(\"before-insert\",function(e){var t=e.vars=e.vars||{},a=t[\"command-line\"]=t[\"command-line\"]||{};if(!a.complete){for(var n=e.highlightedCode.split(\"\\n\"),r=0,s=(a.outputLines||[]).length;r<s;r++)a.outputLines.hasOwnProperty(r)&&(n[r]=a.outputLines[r]);e.highlightedCode=n.join(\"\\n\")}}),Prism.hooks.add(\"complete\",function(e){var t=e.vars=e.vars||{},a=t[\"command-line\"]=t[\"command-line\"]||{};if(!a.complete){var n=e.element.parentNode;u.test(e.element.className)&&(e.element.className=e.element.className.replace(u,\" \")),u.test(n.className)||(n.className+=\" command-line\");var r=function(e,t){return(n.getAttribute(e)||t).replace(/\"/g,\"&quot\")},s=new Array((a.numberOfLines||0)+1),o=r(\"data-prompt\",\"\");if(\"\"!==o)s=s.join('<span data-prompt=\"'+o+'\"></span>');else{var i=r(\"data-user\",\"user\"),l=r(\"data-host\",\"localhost\");s=s.join('<span data-user=\"'+i+'\" data-host=\"'+l+'\"></span>')}var m=document.createElement(\"span\");m.className=\"command-line-prompt\",m.innerHTML=s;for(var p=0,d=(a.outputLines||[]).length;p<d;p++)if(a.outputLines.hasOwnProperty(p)){var c=m.children[p];c.removeAttribute(\"data-user\"),c.removeAttribute(\"data-host\"),c.removeAttribute(\"data-prompt\")}e.element.insertBefore(m,e.element.firstChild),a.complete=!0}})}}();"
                ]
            }
        },
        "copy-to-clipboard": {
            "index.html": {},
            "prism-copy-to-clipboard.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tif (!Prism.plugins.toolbar) {",
                    "\t\tconsole.warn('Copy to Clipboard plugin loaded before Toolbar plugin.');",
                    "",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar ClipboardJS = window.ClipboardJS || undefined;",
                    "",
                    "\tif (!ClipboardJS && typeof require === 'function') {",
                    "\t\tClipboardJS = require('clipboard');",
                    "\t}",
                    "",
                    "\tvar callbacks = [];",
                    "",
                    "\tif (!ClipboardJS) {",
                    "\t\tvar script = document.createElement('script');",
                    "\t\tvar head = document.querySelector('head');",
                    "",
                    "\t\tscript.onload = function() {",
                    "\t\t\tClipboardJS = window.ClipboardJS;",
                    "",
                    "\t\t\tif (ClipboardJS) {",
                    "\t\t\t\twhile (callbacks.length) {",
                    "\t\t\t\t\tcallbacks.pop()();",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t};",
                    "",
                    "\t\tscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js';",
                    "\t\thead.appendChild(script);",
                    "\t}",
                    "",
                    "\tPrism.plugins.toolbar.registerButton('copy-to-clipboard', function (env) {",
                    "\t\tvar linkCopy = document.createElement('a');",
                    "\t\tlinkCopy.textContent = 'Copy';",
                    "",
                    "\t\tif (!ClipboardJS) {",
                    "\t\t\tcallbacks.push(registerClipboard);",
                    "\t\t} else {",
                    "\t\t\tregisterClipboard();",
                    "\t\t}",
                    "",
                    "\t\treturn linkCopy;",
                    "",
                    "\t\tfunction registerClipboard() {",
                    "\t\t\tvar clip = new ClipboardJS(linkCopy, {",
                    "\t\t\t\t'text': function () {",
                    "\t\t\t\t\treturn env.code;",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "",
                    "\t\t\tclip.on('success', function() {",
                    "\t\t\t\tlinkCopy.textContent = 'Copied!';",
                    "",
                    "\t\t\t\tresetText();",
                    "\t\t\t});",
                    "\t\t\tclip.on('error', function () {",
                    "\t\t\t\tlinkCopy.textContent = 'Press Ctrl+C to copy';",
                    "",
                    "\t\t\t\tresetText();",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t\tfunction resetText() {",
                    "\t\t\tsetTimeout(function () {",
                    "\t\t\t\tlinkCopy.textContent = 'Copy';",
                    "\t\t\t}, 5000);",
                    "\t\t}",
                    "\t});",
                    "})();"
                ]
            },
            "prism-copy-to-clipboard.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document)if(Prism.plugins.toolbar){var r=window.ClipboardJS||void 0;r||\"function\"!=typeof require||(r=require(\"clipboard\"));var i=[];if(!r){var o=document.createElement(\"script\"),e=document.querySelector(\"head\");o.onload=function(){if(r=window.ClipboardJS)for(;i.length;)i.pop()()},o.src=\"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js\",e.appendChild(o)}Prism.plugins.toolbar.registerButton(\"copy-to-clipboard\",function(e){var t=document.createElement(\"a\");return t.textContent=\"Copy\",r?o():i.push(o),t;function o(){var o=new r(t,{text:function(){return e.code}});o.on(\"success\",function(){t.textContent=\"Copied!\",n()}),o.on(\"error\",function(){t.textContent=\"Press Ctrl+C to copy\",n()})}function n(){setTimeout(function(){t.textContent=\"Copy\"},5e3)}})}else console.warn(\"Copy to Clipboard plugin loaded before Toolbar plugin.\")}();"
                ]
            }
        },
        "custom-class": {
            "index.html": {},
            "prism-custom-class.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\t(typeof self === 'undefined' || !self.Prism) &&",
                    "\t(typeof global === 'undefined' || !global.Prism)",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "/**",
                    " * @callback ClassMapper",
                    " * @param {string} className",
                    " * @param {string} language",
                    " * @returns {string}",
                    " */",
                    "/**",
                    " * @typedef CustomClassOptions",
                    " * @property {ClassMapper} classMap",
                    " * @property {string} prefixString",
                    " */",
                    "",
                    "/** @type {ClassMapper} */",
                    "var defaultClassMap = function (className) { return className; };",
                    "",
                    "/** @type {CustomClassOptions} */",
                    "var options = {",
                    "\tclassMap: defaultClassMap,",
                    "\tprefixString: ''",
                    "};",
                    "",
                    "Prism.plugins.customClass = {",
                    "\t/**",
                    "\t * Maps all class names using the given object or map function.",
                    "\t *",
                    "\t * This does not affect the prefix.",
                    "\t *",
                    "\t * @param {Object<string, string> | ClassMapper} classMap",
                    "\t */",
                    "\tmap: function map(classMap) {",
                    "\t\tif (typeof classMap === 'function') {",
                    "\t\t\toptions.classMap = classMap;",
                    "\t\t} else {",
                    "\t\t\toptions.classMap = function (className) {",
                    "\t\t\t\treturn classMap[className] || className;",
                    "\t\t\t};",
                    "\t\t}",
                    "\t},",
                    "\t/**",
                    "\t * Adds the given prefix to all class names.",
                    "\t *",
                    "\t * @param {string} string",
                    "\t */",
                    "\tprefix: function prefix(string) {",
                    "\t\toptions.prefixString = string;",
                    "\t}",
                    "}",
                    "",
                    "Prism.hooks.add('wrap', function (env) {",
                    "\tif (options.classMap === defaultClassMap && !options.prefixString) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tenv.classes = env.classes.map(function (c) {",
                    "\t\treturn options.prefixString + options.classMap(c, env.language);",
                    "\t});",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-custom-class.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism||\"undefined\"!=typeof global&&global.Prism){var n=function(n){return n},s={classMap:n,prefixString:\"\"};Prism.plugins.customClass={map:function(i){s.classMap=\"function\"==typeof i?i:function(n){return i[n]||n}},prefix:function(n){s.prefixString=n}},Prism.hooks.add(\"wrap\",function(i){(s.classMap!==n||s.prefixString)&&(i.classes=i.classes.map(function(n){return s.prefixString+s.classMap(n,i.language)}))})}}();"
                ]
            }
        },
        "data-uri-highlight": {
            "index.html": {},
            "prism-data-uri-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\ttypeof global !== 'undefined' && !global.Prism",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar autoLinkerProcess = function (grammar) {",
                    "\t\tif (Prism.plugins.autolinker) {",
                    "\t\t\tPrism.plugins.autolinker.processGrammar(grammar);",
                    "\t\t}",
                    "\t\treturn grammar;",
                    "\t};",
                    "\tvar dataURI = {",
                    "\t\tpattern: /(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,",
                    "\t\tlookbehind: true,",
                    "\t\tinside: {",
                    "\t\t\t'language-css': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-javascript': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-json': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t},",
                    "\t\t\t'language-markup': {",
                    "\t\t\t\tpattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,",
                    "\t\t\t\tlookbehind: true",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t// Tokens that may contain URLs",
                    "\tvar candidates = ['url', 'attr-value', 'string'];",
                    "",
                    "\tPrism.plugins.dataURIHighlight = {",
                    "\t\tprocessGrammar: function (grammar) {",
                    "\t\t\t// Abort if grammar has already been processed",
                    "\t\t\tif (!grammar || grammar['data-uri']) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tPrism.languages.DFS(grammar, function (key, def, type) {",
                    "\t\t\t\tif (candidates.indexOf(type) > -1 && !Array.isArray(def)) {",
                    "\t\t\t\t\tif (!def.pattern) {",
                    "\t\t\t\t\t\tdef = this[key] = {",
                    "\t\t\t\t\t\t\tpattern: def",
                    "\t\t\t\t\t\t};",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tdef.inside = def.inside || {};",
                    "",
                    "\t\t\t\t\tif (type == 'attr-value') {",
                    "\t\t\t\t\t\tPrism.languages.insertBefore('inside', def.inside['url-link'] ? 'url-link' : 'punctuation', {",
                    "\t\t\t\t\t\t\t'data-uri': dataURI",
                    "\t\t\t\t\t\t}, def);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\tif (def.inside['url-link']) {",
                    "\t\t\t\t\t\t\tPrism.languages.insertBefore('inside', 'url-link', {",
                    "\t\t\t\t\t\t\t\t'data-uri': dataURI",
                    "\t\t\t\t\t\t\t}, def);",
                    "\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\tdef.inside['data-uri'] = dataURI;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t});",
                    "\t\t\tgrammar['data-uri'] = dataURI;",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\t// Prepare the needed grammars for this code block",
                    "\t\tif (dataURI.pattern.test(env.code)) {",
                    "\t\t\tfor (var p in dataURI.inside) {",
                    "\t\t\t\tif (dataURI.inside.hasOwnProperty(p)) {",
                    "\t\t\t\t\tif (!dataURI.inside[p].inside && dataURI.inside[p].pattern.test(env.code)) {",
                    "\t\t\t\t\t\tvar lang = p.match(/^language-(.+)/)[1];",
                    "\t\t\t\t\t\tif (Prism.languages[lang]) {",
                    "\t\t\t\t\t\t\tdataURI.inside[p].inside = {",
                    "\t\t\t\t\t\t\t\trest: autoLinkerProcess(Prism.languages[lang])",
                    "\t\t\t\t\t\t\t};",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tPrism.plugins.dataURIHighlight.processGrammar(env.grammar);",
                    "\t});",
                    "}());"
                ]
            },
            "prism-data-uri-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var r={pattern:/(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,lookbehind:!0,inside:{\"language-css\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,lookbehind:!0},\"language-javascript\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,lookbehind:!0},\"language-json\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,lookbehind:!0},\"language-markup\":{pattern:/(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,lookbehind:!0}}},e=[\"url\",\"attr-value\",\"string\"];Prism.plugins.dataURIHighlight={processGrammar:function(i){i&&!i[\"data-uri\"]&&(Prism.languages.DFS(i,function(i,a,n){-1<e.indexOf(n)&&!Array.isArray(a)&&(a.pattern||(a=this[i]={pattern:a}),a.inside=a.inside||{},\"attr-value\"==n?Prism.languages.insertBefore(\"inside\",a.inside[\"url-link\"]?\"url-link\":\"punctuation\",{\"data-uri\":r},a):a.inside[\"url-link\"]?Prism.languages.insertBefore(\"inside\",\"url-link\",{\"data-uri\":r},a):a.inside[\"data-uri\"]=r)}),i[\"data-uri\"]=r)}},Prism.hooks.add(\"before-highlight\",function(i){if(r.pattern.test(i.code))for(var a in r.inside)if(r.inside.hasOwnProperty(a)&&!r.inside[a].inside&&r.inside[a].pattern.test(i.code)){var n=a.match(/^language-(.+)/)[1];Prism.languages[n]&&(r.inside[a].inside={rest:(e=Prism.languages[n],Prism.plugins.autolinker&&Prism.plugins.autolinker.processGrammar(e),e)})}var e;Prism.plugins.dataURIHighlight.processGrammar(i.grammar)})}}();"
                ]
            }
        },
        "file-highlight": {
            "index.html": {},
            "prism-file-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * @param {Element} [container=document]",
                    "\t */",
                    "\tself.Prism.fileHighlight = function(container) {",
                    "\t\tcontainer = container || document;",
                    "",
                    "\t\tvar Extensions = {",
                    "\t\t\t'js': 'javascript',",
                    "\t\t\t'py': 'python',",
                    "\t\t\t'rb': 'ruby',",
                    "\t\t\t'ps1': 'powershell',",
                    "\t\t\t'psm1': 'powershell',",
                    "\t\t\t'sh': 'bash',",
                    "\t\t\t'bat': 'batch',",
                    "\t\t\t'h': 'c',",
                    "\t\t\t'tex': 'latex'",
                    "\t\t};",
                    "",
                    "\t\tArray.prototype.slice.call(container.querySelectorAll('pre[data-src]')).forEach(function (pre) {",
                    "\t\t\t// ignore if already loaded",
                    "\t\t\tif (pre.hasAttribute('data-src-loaded')) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\t// load current",
                    "\t\t\tvar src = pre.getAttribute('data-src');",
                    "",
                    "\t\t\tvar language, parent = pre;",
                    "\t\t\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;",
                    "\t\t\twhile (parent && !lang.test(parent.className)) {",
                    "\t\t\t\tparent = parent.parentNode;",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (parent) {",
                    "\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (!language) {",
                    "\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];",
                    "\t\t\t\tlanguage = Extensions[extension] || extension;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar code = document.createElement('code');",
                    "\t\t\tcode.className = 'language-' + language;",
                    "",
                    "\t\t\tpre.textContent = '';",
                    "",
                    "\t\t\tcode.textContent = 'Loading…';",
                    "",
                    "\t\t\tpre.appendChild(code);",
                    "",
                    "\t\t\tvar xhr = new XMLHttpRequest();",
                    "",
                    "\t\t\txhr.open('GET', src, true);",
                    "",
                    "\t\t\txhr.onreadystatechange = function () {",
                    "\t\t\t\tif (xhr.readyState == 4) {",
                    "",
                    "\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {",
                    "\t\t\t\t\t\tcode.textContent = xhr.responseText;",
                    "",
                    "\t\t\t\t\t\tPrism.highlightElement(code);",
                    "\t\t\t\t\t\t// mark as loaded",
                    "\t\t\t\t\t\tpre.setAttribute('data-src-loaded', '');",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse if (xhr.status >= 400) {",
                    "\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t};",
                    "",
                    "\t\t\txhr.send(null);",
                    "\t\t});",
                    "",
                    "\t\tif (Prism.plugins.toolbar) {",
                    "\t\t\tPrism.plugins.toolbar.registerButton('download-file', function (env) {",
                    "\t\t\t\tvar pre = env.element.parentNode;",
                    "\t\t\t\tif (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {",
                    "\t\t\t\t\treturn;",
                    "\t\t\t\t}",
                    "\t\t\t\tvar src = pre.getAttribute('data-src');",
                    "\t\t\t\tvar a = document.createElement('a');",
                    "\t\t\t\ta.textContent = pre.getAttribute('data-download-link-label') || 'Download';",
                    "\t\t\t\ta.setAttribute('download', '');",
                    "\t\t\t\ta.href = src;",
                    "\t\t\t\treturn a;",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t};",
                    "",
                    "\tdocument.addEventListener('DOMContentLoaded', function () {",
                    "\t\t// execute inside handler, for dropping Event as argument",
                    "\t\tself.Prism.fileHighlight();",
                    "\t});",
                    "",
                    "})();"
                ]
            },
            "prism-file-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(t){t=t||document;var i={js:\"javascript\",py:\"python\",rb:\"ruby\",ps1:\"powershell\",psm1:\"powershell\",sh:\"bash\",bat:\"batch\",h:\"c\",tex:\"latex\"};Array.prototype.slice.call(t.querySelectorAll(\"pre[data-src]\")).forEach(function(t){if(!t.hasAttribute(\"data-src-loaded\")){for(var e,a=t.getAttribute(\"data-src\"),n=t,r=/\\blang(?:uage)?-([\\w-]+)\\b/i;n&&!r.test(n.className);)n=n.parentNode;if(n&&(e=(t.className.match(r)||[,\"\"])[1]),!e){var s=(a.match(/\\.(\\w+)$/)||[,\"\"])[1];e=i[s]||s}var o=document.createElement(\"code\");o.className=\"language-\"+e,t.textContent=\"\",o.textContent=\"Loading…\",t.appendChild(o);var l=new XMLHttpRequest;l.open(\"GET\",a,!0),l.onreadystatechange=function(){4==l.readyState&&(l.status<400&&l.responseText?(o.textContent=l.responseText,Prism.highlightElement(o),t.setAttribute(\"data-src-loaded\",\"\")):400<=l.status?o.textContent=\"✖ Error \"+l.status+\" while fetching file: \"+l.statusText:o.textContent=\"✖ Error: File does not exist or is empty\")},l.send(null)}}),Prism.plugins.toolbar&&Prism.plugins.toolbar.registerButton(\"download-file\",function(t){var e=t.element.parentNode;if(e&&/pre/i.test(e.nodeName)&&e.hasAttribute(\"data-src\")&&e.hasAttribute(\"data-download-link\")){var a=e.getAttribute(\"data-src\"),n=document.createElement(\"a\");return n.textContent=e.getAttribute(\"data-download-link-label\")||\"Download\",n.setAttribute(\"download\",\"\"),n.href=a,n}})},document.addEventListener(\"DOMContentLoaded\",function(){self.Prism.fileHighlight()}));"
                ]
            }
        },
        "highlight-keywords": {
            "index.html": {},
            "prism-highlight-keywords.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif (env.type !== \"keyword\") {",
                    "\t\treturn;",
                    "\t}",
                    "\tenv.classes.push('keyword-' + env.content);",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-highlight-keywords.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&!self.Prism||\"undefined\"!=typeof global&&!global.Prism||Prism.hooks.add(\"wrap\",function(e){\"keyword\"===e.type&&e.classes.push(\"keyword-\"+e.content)});"
                ]
            }
        },
        "jsonp-highlight": {
            "index.html": {},
            "prism-jsonp-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "\tif (!self.Prism || !self.document || !document.querySelectorAll || ![].filter) return;",
                    "",
                    "\t/**",
                    "\t * @callback Adapter",
                    "\t * @param {any} response",
                    "\t * @param {HTMLPreElement} [pre]",
                    "\t * @returns {string}",
                    "\t */",
                    "",
                    "\t/**",
                    "\t * The list of adapter which will be used if `data-adapter` is not specified.",
                    "\t *",
                    "\t * @type {Array.<{adapter: Adapter, name: string}>}",
                    "\t */",
                    "\tvar adapters = [];",
                    "",
                    "\t/**",
                    "\t * Adds a new function to the list of adapters.",
                    "\t *",
                    "\t * If the given adapter is already registered or not a function or there is an adapter with the given name already,",
                    "\t * nothing will happen.",
                    "\t *",
                    "\t * @param {Adapter} adapter The adapter to be registered.",
                    "\t * @param {string} [name] The name of the adapter. Defaults to the function name of `adapter`.",
                    "\t */",
                    "\tfunction registerAdapter(adapter, name) {",
                    "\t\tname = name || adapter.name;",
                    "\t\tif (typeof adapter === \"function\" && !getAdapter(adapter) && !getAdapter(name)) {",
                    "\t\t\tadapters.push({ adapter: adapter, name: name });",
                    "\t\t}",
                    "\t}",
                    "\t/**",
                    "\t * Returns the given adapter itself, if registered, or a registered adapter with the given name.",
                    "\t *",
                    "\t * If no fitting adapter is registered, `null` will be returned.",
                    "\t *",
                    "\t * @param {string|Function} adapter The adapter itself or the name of an adapter.",
                    "\t * @returns {Adapter} A registered adapter or `null`.",
                    "\t */",
                    "\tfunction getAdapter(adapter) {",
                    "\t\tif (typeof adapter === \"function\") {",
                    "\t\t\tfor (var i = 0, item; item = adapters[i++];) {",
                    "\t\t\t\tif (item.adapter.valueOf() === adapter.valueOf()) {",
                    "\t\t\t\t\treturn item.adapter;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\telse if (typeof adapter === \"string\") {",
                    "\t\t\tfor (var i = 0, item; item = adapters[i++];) {",
                    "\t\t\t\tif (item.name === adapter) {",
                    "\t\t\t\t\treturn item.adapter;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}",
                    "\t/**",
                    "\t * Remove the given adapter or the first registered adapter with the given name from the list of",
                    "\t * registered adapters.",
                    "\t *",
                    "\t * @param {string|Function} adapter The adapter itself or the name of an adapter.",
                    "\t */",
                    "\tfunction removeAdapter(adapter) {",
                    "\t\tif (typeof adapter === \"string\") {",
                    "\t\t\tadapter = getAdapter(adapter);",
                    "\t\t}",
                    "\t\tif (typeof adapter === \"function\") {",
                    "\t\t\tvar index = adapters.map(function (item) { return item.adapter; }).indexOf(adapter);",
                    "\t\t\tif (index >= 0) {",
                    "\t\t\t\tadapters.splice(index, 1);",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tregisterAdapter(function github(rsp, el) {",
                    "\t\tif (rsp && rsp.meta && rsp.data) {",
                    "\t\t\tif (rsp.meta.status && rsp.meta.status >= 400) {",
                    "\t\t\t\treturn \"Error: \" + (rsp.data.message || rsp.meta.status);",
                    "\t\t\t}",
                    "\t\t\telse if (typeof (rsp.data.content) === \"string\") {",
                    "\t\t\t\treturn typeof (atob) === \"function\"",
                    "\t\t\t\t\t? atob(rsp.data.content.replace(/\\s/g, \"\"))",
                    "\t\t\t\t\t: \"Your browser cannot decode base64\";",
                    "\t\t\t}",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}, 'github');",
                    "\tregisterAdapter(function gist(rsp, el) {",
                    "\t\tif (rsp && rsp.meta && rsp.data && rsp.data.files) {",
                    "\t\t\tif (rsp.meta.status && rsp.meta.status >= 400) {",
                    "\t\t\t\treturn \"Error: \" + (rsp.data.message || rsp.meta.status);",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar files = rsp.data.files;",
                    "\t\t\tvar filename = el.getAttribute(\"data-filename\");",
                    "\t\t\tif (filename == null) {",
                    "\t\t\t\t// Maybe in the future we can somehow render all files",
                    "\t\t\t\t// But the standard <script> include for gists does that nicely already,",
                    "\t\t\t\t// so that might be getting beyond the scope of this plugin",
                    "\t\t\t\tfor (var key in files) {",
                    "\t\t\t\t\tif (files.hasOwnProperty(key)) {",
                    "\t\t\t\t\t\tfilename = key;",
                    "\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\tif (files[filename] !== undefined) {",
                    "\t\t\t\treturn files[filename].content;",
                    "\t\t\t}",
                    "\t\t\treturn \"Error: unknown or missing gist file \" + filename;",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}, 'gist');",
                    "\tregisterAdapter(function bitbucket(rsp, el) {",
                    "\t\tif (rsp && rsp.node && typeof (rsp.data) === \"string\") {",
                    "\t\t\treturn rsp.data;",
                    "\t\t}",
                    "\t\treturn null;",
                    "\t}, 'bitbucket');",
                    "",
                    "\tvar jsonpcb = 0,",
                    "\t\tloadMsg = \"Loading\\u2026\";",
                    "",
                    "\t/**",
                    "\t * Highlights all `pre` elements with an `data-jsonp` by requesting the specified JSON and using the specified adapter",
                    "\t * or a registered adapter to extract the code to highlight from the response. The highlighted code will be inserted",
                    "\t * into the `pre` element.",
                    "\t */",
                    "\tfunction highlight() {",
                    "\t\tArray.prototype.slice.call(document.querySelectorAll(\"pre[data-jsonp]\")).forEach(function (pre) {",
                    "\t\t\tpre.textContent = \"\";",
                    "",
                    "\t\t\tvar code = document.createElement(\"code\");",
                    "\t\t\tcode.textContent = loadMsg;",
                    "\t\t\tpre.appendChild(code);",
                    "",
                    "\t\t\tvar adapterName = pre.getAttribute(\"data-adapter\");",
                    "\t\t\tvar adapter = null;",
                    "\t\t\tif (adapterName) {",
                    "\t\t\t\tif (typeof window[adapterName] === \"function\") {",
                    "\t\t\t\t\tadapter = window[adapterName];",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tcode.textContent = \"JSONP adapter function '\" + adapterName + \"' doesn't exist\";",
                    "\t\t\t\t\treturn;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar cb = \"prismjsonp\" + jsonpcb++;",
                    "",
                    "\t\t\tvar uri = document.createElement(\"a\");",
                    "\t\t\tvar src = uri.href = pre.getAttribute(\"data-jsonp\");",
                    "\t\t\turi.href += (uri.search ? \"&\" : \"?\") + (pre.getAttribute(\"data-callback\") || \"callback\") + \"=\" + cb;",
                    "",
                    "\t\t\tvar timeout = setTimeout(function () {",
                    "\t\t\t\t// we could clean up window[cb], but if the request finally succeeds, keeping it around is a good thing",
                    "\t\t\t\tif (code.textContent === loadMsg) {",
                    "\t\t\t\t\tcode.textContent = \"Timeout loading '\" + src + \"'\";",
                    "\t\t\t\t}",
                    "\t\t\t}, 5000);",
                    "",
                    "\t\t\tvar script = document.createElement(\"script\");",
                    "\t\t\tscript.src = uri.href;",
                    "",
                    "\t\t\twindow[cb] = function (rsp) {",
                    "\t\t\t\tdocument.head.removeChild(script);",
                    "\t\t\t\tclearTimeout(timeout);",
                    "\t\t\t\tdelete window[cb];",
                    "",
                    "\t\t\t\tvar data = \"\";",
                    "",
                    "\t\t\t\tif (adapter) {",
                    "\t\t\t\t\tdata = adapter(rsp, pre);",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tfor (var p in adapters) {",
                    "\t\t\t\t\t\tdata = adapters[p].adapter(rsp, pre);",
                    "\t\t\t\t\t\tif (data !== null) {",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tif (data === null) {",
                    "\t\t\t\t\tcode.textContent = \"Cannot parse response (perhaps you need an adapter function?)\";",
                    "\t\t\t\t}",
                    "\t\t\t\telse {",
                    "\t\t\t\t\tcode.textContent = data;",
                    "\t\t\t\t\tPrism.highlightElement(code);",
                    "\t\t\t\t}",
                    "\t\t\t};",
                    "",
                    "\t\t\tdocument.head.appendChild(script);",
                    "\t\t});",
                    "\t}",
                    "",
                    "\tPrism.plugins.jsonphighlight = {",
                    "\t\tregisterAdapter: registerAdapter,",
                    "\t\tremoveAdapter: removeAdapter,",
                    "\t\thighlight: highlight",
                    "\t};",
                    "",
                    "\thighlight();",
                    "})();"
                ]
            },
            "prism-jsonp-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(self.Prism&&self.document&&document.querySelectorAll&&[].filter){var d=[];t(function(t,e){if(t&&t.meta&&t.data){if(t.meta.status&&400<=t.meta.status)return\"Error: \"+(t.data.message||t.meta.status);if(\"string\"==typeof t.data.content)return\"function\"==typeof atob?atob(t.data.content.replace(/\\s/g,\"\")):\"Your browser cannot decode base64\"}return null},\"github\"),t(function(t,e){if(t&&t.meta&&t.data&&t.data.files){if(t.meta.status&&400<=t.meta.status)return\"Error: \"+(t.data.message||t.meta.status);var n=t.data.files,a=e.getAttribute(\"data-filename\");if(null==a)for(var r in n)if(n.hasOwnProperty(r)){a=r;break}return void 0!==n[a]?n[a].content:\"Error: unknown or missing gist file \"+a}return null},\"gist\"),t(function(t,e){return t&&t.node&&\"string\"==typeof t.data?t.data:null},\"bitbucket\");var s=0,l=\"Loading…\";Prism.plugins.jsonphighlight={registerAdapter:t,removeAdapter:function(t){if(\"string\"==typeof t&&(t=n(t)),\"function\"==typeof t){var e=d.map(function(t){return t.adapter}).indexOf(t);0<=e&&d.splice(e,1)}},highlight:e},e()}function t(t,e){e=e||t.name,\"function\"!=typeof t||n(t)||n(e)||d.push({adapter:t,name:e})}function n(t){if(\"function\"==typeof t){for(var e=0;n=d[e++];)if(n.adapter.valueOf()===t.valueOf())return n.adapter}else if(\"string\"==typeof t){var n;for(e=0;n=d[e++];)if(n.name===t)return n.adapter}return null}function e(){Array.prototype.slice.call(document.querySelectorAll(\"pre[data-jsonp]\")).forEach(function(a){a.textContent=\"\";var r=document.createElement(\"code\");r.textContent=l,a.appendChild(r);var t=a.getAttribute(\"data-adapter\"),o=null;if(t){if(\"function\"!=typeof window[t])return void(r.textContent=\"JSONP adapter function '\"+t+\"' doesn't exist\");o=window[t]}var i=\"prismjsonp\"+s++,e=document.createElement(\"a\"),n=e.href=a.getAttribute(\"data-jsonp\");e.href+=(e.search?\"&\":\"?\")+(a.getAttribute(\"data-callback\")||\"callback\")+\"=\"+i;var u=setTimeout(function(){r.textContent===l&&(r.textContent=\"Timeout loading '\"+n+\"'\")},5e3),f=document.createElement(\"script\");f.src=e.href,window[i]=function(t){document.head.removeChild(f),clearTimeout(u),delete window[i];var e=\"\";if(o)e=o(t,a);else for(var n in d)if(null!==(e=d[n].adapter(t,a)))break;null===e?r.textContent=\"Cannot parse response (perhaps you need an adapter function?)\":(r.textContent=e,Prism.highlightElement(r))},document.head.appendChild(f)})}}();"
                ]
            }
        },
        "keep-markup": {
            "index.html": {},
            "prism-keep-markup.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function (self, document) {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.createRange) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tPrism.plugins.KeepMarkup = true;",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\tif (!env.element.children.length) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar pos = 0;",
                    "\t\tvar data = [];",
                    "\t\tvar f = function (elt, baseNode) {",
                    "\t\t\tvar o = {};",
                    "\t\t\tif (!baseNode) {",
                    "\t\t\t\t// Clone the original tag to keep all attributes",
                    "\t\t\t\to.clone = elt.cloneNode(false);",
                    "\t\t\t\to.posOpen = pos;",
                    "\t\t\t\tdata.push(o);",
                    "\t\t\t}",
                    "\t\t\tfor (var i = 0, l = elt.childNodes.length; i < l; i++) {",
                    "\t\t\t\tvar child = elt.childNodes[i];",
                    "\t\t\t\tif (child.nodeType === 1) { // element",
                    "\t\t\t\t\tf(child);",
                    "\t\t\t\t} else if(child.nodeType === 3) { // text",
                    "\t\t\t\t\tpos += child.data.length;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\tif (!baseNode) {",
                    "\t\t\t\to.posClose = pos;",
                    "\t\t\t}",
                    "\t\t};",
                    "\t\tf(env.element, true);",
                    "",
                    "\t\tif (data && data.length) {",
                    "\t\t\t// data is an array of all existing tags",
                    "\t\t\tenv.keepMarkup = data;",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('after-highlight', function (env) {",
                    "\t\tif(env.keepMarkup && env.keepMarkup.length) {",
                    "",
                    "\t\t\tvar walk = function (elt, nodeState) {",
                    "\t\t\t\tfor (var i = 0, l = elt.childNodes.length; i < l; i++) {",
                    "",
                    "\t\t\t\t\tvar child = elt.childNodes[i];",
                    "",
                    "\t\t\t\t\tif (child.nodeType === 1) { // element",
                    "\t\t\t\t\t\tif (!walk(child, nodeState)) {",
                    "\t\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t} else if (child.nodeType === 3) { // text",
                    "\t\t\t\t\t\tif(!nodeState.nodeStart && nodeState.pos + child.data.length > nodeState.node.posOpen) {",
                    "\t\t\t\t\t\t\t// We found the start position",
                    "\t\t\t\t\t\t\tnodeState.nodeStart = child;",
                    "\t\t\t\t\t\t\tnodeState.nodeStartPos = nodeState.node.posOpen - nodeState.pos;",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tif(nodeState.nodeStart && nodeState.pos + child.data.length >= nodeState.node.posClose) {",
                    "\t\t\t\t\t\t\t// We found the end position",
                    "\t\t\t\t\t\t\tnodeState.nodeEnd = child;",
                    "\t\t\t\t\t\t\tnodeState.nodeEndPos = nodeState.node.posClose - nodeState.pos;",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\tnodeState.pos += child.data.length;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tif (nodeState.nodeStart && nodeState.nodeEnd) {",
                    "\t\t\t\t\t\t// Select the range and wrap it with the clone",
                    "\t\t\t\t\t\tvar range = document.createRange();",
                    "\t\t\t\t\t\trange.setStart(nodeState.nodeStart, nodeState.nodeStartPos);",
                    "\t\t\t\t\t\trange.setEnd(nodeState.nodeEnd, nodeState.nodeEndPos);",
                    "\t\t\t\t\t\tnodeState.node.clone.appendChild(range.extractContents());",
                    "\t\t\t\t\t\trange.insertNode(nodeState.node.clone);",
                    "\t\t\t\t\t\trange.detach();",
                    "",
                    "\t\t\t\t\t\t// Process is over",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\treturn true;",
                    "\t\t\t};",
                    "",
                    "\t\t\t// For each tag, we walk the DOM to reinsert it",
                    "\t\t\tenv.keepMarkup.forEach(function (node) {",
                    "\t\t\t\twalk(env.element, {",
                    "\t\t\t\t\tnode: node,",
                    "\t\t\t\t\tpos: 0",
                    "\t\t\t\t});",
                    "\t\t\t});",
                    "\t\t\t// Store new highlightedCode for later hooks calls",
                    "\t\t\tenv.highlightedCode = env.element.innerHTML;",
                    "\t\t}",
                    "\t});",
                    "}(self, document));"
                ]
            },
            "prism-keep-markup.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(e,s){void 0!==e&&e.Prism&&e.document&&s.createRange&&(Prism.plugins.KeepMarkup=!0,Prism.hooks.add(\"before-highlight\",function(e){if(e.element.children.length){var a=0,s=[],p=function(e,n){var o={};n||(o.clone=e.cloneNode(!1),o.posOpen=a,s.push(o));for(var t=0,d=e.childNodes.length;t<d;t++){var r=e.childNodes[t];1===r.nodeType?p(r):3===r.nodeType&&(a+=r.data.length)}n||(o.posClose=a)};p(e.element,!0),s&&s.length&&(e.keepMarkup=s)}}),Prism.hooks.add(\"after-highlight\",function(n){if(n.keepMarkup&&n.keepMarkup.length){var a=function(e,n){for(var o=0,t=e.childNodes.length;o<t;o++){var d=e.childNodes[o];if(1===d.nodeType){if(!a(d,n))return!1}else 3===d.nodeType&&(!n.nodeStart&&n.pos+d.data.length>n.node.posOpen&&(n.nodeStart=d,n.nodeStartPos=n.node.posOpen-n.pos),n.nodeStart&&n.pos+d.data.length>=n.node.posClose&&(n.nodeEnd=d,n.nodeEndPos=n.node.posClose-n.pos),n.pos+=d.data.length);if(n.nodeStart&&n.nodeEnd){var r=s.createRange();return r.setStart(n.nodeStart,n.nodeStartPos),r.setEnd(n.nodeEnd,n.nodeEndPos),n.node.clone.appendChild(r.extractContents()),r.insertNode(n.node.clone),r.detach(),!1}}return!0};n.keepMarkup.forEach(function(e){a(n.element,{node:e,pos:0})}),n.highlightedCode=n.element.innerHTML}}))}(self,document);"
                ]
            }
        },
        "line-highlight": {
            "index.html": {},
            "prism-line-highlight.css": {},
            "prism-line-highlight.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tfunction $$(expr, con) {",
                    "\t\treturn Array.prototype.slice.call((con || document).querySelectorAll(expr));",
                    "\t}",
                    "",
                    "\tfunction hasClass(element, className) {",
                    "\t\tclassName = \" \" + className + \" \";",
                    "\t\treturn (\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(className) > -1",
                    "\t}",
                    "",
                    "\tfunction callFunction(func) {",
                    "\t\tfunc();",
                    "\t}",
                    "",
                    "\t// Some browsers round the line-height, others don't.",
                    "\t// We need to test for it to position the elements properly.",
                    "\tvar isLineHeightRounded = (function () {",
                    "\t\tvar res;",
                    "\t\treturn function () {",
                    "\t\t\tif (typeof res === 'undefined') {",
                    "\t\t\t\tvar d = document.createElement('div');",
                    "\t\t\t\td.style.fontSize = '13px';",
                    "\t\t\t\td.style.lineHeight = '1.5';",
                    "\t\t\t\td.style.padding = 0;",
                    "\t\t\t\td.style.border = 0;",
                    "\t\t\t\td.innerHTML = '&nbsp;<br />&nbsp;';",
                    "\t\t\t\tdocument.body.appendChild(d);",
                    "\t\t\t\t// Browsers that round the line-height should have offsetHeight === 38",
                    "\t\t\t\t// The others should have 39.",
                    "\t\t\t\tres = d.offsetHeight === 38;",
                    "\t\t\t\tdocument.body.removeChild(d);",
                    "\t\t\t}",
                    "\t\t\treturn res;",
                    "\t\t}",
                    "\t}());",
                    "",
                    "\t/**",
                    "\t * Highlights the lines of the given pre.",
                    "\t *",
                    "\t * This function is split into a DOM measuring and mutate phase to improve performance.",
                    "\t * The returned function mutates the DOM when called.",
                    "\t *",
                    "\t * @param {HTMLElement} pre",
                    "\t * @param {string} [lines]",
                    "\t * @param {string} [classes='']",
                    "\t * @returns {() => void}",
                    "\t */",
                    "\tfunction highlightLines(pre, lines, classes) {",
                    "\t\tlines = typeof lines === 'string' ? lines : pre.getAttribute('data-line');",
                    "",
                    "\t\tvar ranges = lines.replace(/\\s+/g, '').split(',');",
                    "\t\tvar offset = +pre.getAttribute('data-line-offset') || 0;",
                    "",
                    "\t\tvar parseMethod = isLineHeightRounded() ? parseInt : parseFloat;",
                    "\t\tvar lineHeight = parseMethod(getComputedStyle(pre).lineHeight);",
                    "\t\tvar hasLineNumbers = hasClass(pre, 'line-numbers');",
                    "\t\tvar parentElement = hasLineNumbers ? pre : pre.querySelector('code') || pre;",
                    "\t\tvar mutateActions = /** @type {(() => void)[]} */ ([]);",
                    "",
                    "\t\tranges.forEach(function (currentRange) {",
                    "\t\t\tvar range = currentRange.split('-');",
                    "",
                    "\t\t\tvar start = +range[0];",
                    "\t\t\tvar end = +range[1] || start;",
                    "",
                    "\t\t\tvar line = pre.querySelector('.line-highlight[data-range=\"' + currentRange + '\"]') || document.createElement('div');",
                    "",
                    "\t\t\tmutateActions.push(function () {",
                    "\t\t\t\tline.setAttribute('aria-hidden', 'true');",
                    "\t\t\t\tline.setAttribute('data-range', currentRange);",
                    "\t\t\t\tline.className = (classes || '') + ' line-highlight';",
                    "\t\t\t});",
                    "",
                    "\t\t\t// if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers",
                    "\t\t\tif (hasLineNumbers && Prism.plugins.lineNumbers) {",
                    "\t\t\t\tvar startNode = Prism.plugins.lineNumbers.getLine(pre, start);",
                    "\t\t\t\tvar endNode = Prism.plugins.lineNumbers.getLine(pre, end);",
                    "",
                    "\t\t\t\tif (startNode) {",
                    "\t\t\t\t\tvar top = startNode.offsetTop + 'px';",
                    "\t\t\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t\t\tline.style.top = top;",
                    "\t\t\t\t\t});",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\tif (endNode) {",
                    "\t\t\t\t\tvar height = (endNode.offsetTop - startNode.offsetTop) + endNode.offsetHeight + 'px';",
                    "\t\t\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t\t\tline.style.height = height;",
                    "\t\t\t\t\t});",
                    "\t\t\t\t}",
                    "\t\t\t} else {",
                    "\t\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t\tline.setAttribute('data-start', start);",
                    "",
                    "\t\t\t\t\tif (end > start) {",
                    "\t\t\t\t\t\tline.setAttribute('data-end', end);",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tline.style.top = (start - offset - 1) * lineHeight + 'px';",
                    "",
                    "\t\t\t\t\tline.textContent = new Array(end - start + 2).join(' \\n');",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "",
                    "\t\t\tmutateActions.push(function () {",
                    "\t\t\t\t// allow this to play nicely with the line-numbers plugin",
                    "\t\t\t\t// need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning",
                    "\t\t\t\tparentElement.appendChild(line);",
                    "\t\t\t});",
                    "\t\t});",
                    "",
                    "\t\treturn function () {",
                    "\t\t\tmutateActions.forEach(callFunction);",
                    "\t\t};",
                    "\t}",
                    "",
                    "\tfunction applyHash() {",
                    "\t\tvar hash = location.hash.slice(1);",
                    "",
                    "\t\t// Remove pre-existing temporary lines",
                    "\t\t$$('.temporary.line-highlight').forEach(function (line) {",
                    "\t\t\tline.parentNode.removeChild(line);",
                    "\t\t});",
                    "",
                    "\t\tvar range = (hash.match(/\\.([\\d,-]+)$/) || [, ''])[1];",
                    "",
                    "\t\tif (!range || document.getElementById(hash)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar id = hash.slice(0, hash.lastIndexOf('.')),",
                    "\t\t\tpre = document.getElementById(id);",
                    "",
                    "\t\tif (!pre) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!pre.hasAttribute('data-line')) {",
                    "\t\t\tpre.setAttribute('data-line', '');",
                    "\t\t}",
                    "",
                    "\t\tvar mutateDom = highlightLines(pre, range, 'temporary ');",
                    "\t\tmutateDom();",
                    "",
                    "\t\tdocument.querySelector('.temporary.line-highlight').scrollIntoView();",
                    "\t}",
                    "",
                    "\tvar fakeTimer = 0; // Hack to limit the number of times applyHash() runs",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tvar lines = pre && pre.getAttribute('data-line');",
                    "",
                    "\t\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t/*",
                    "\t\t * Cleanup for other plugins (e.g. autoloader).",
                    "\t\t *",
                    "\t\t * Sometimes <code> blocks are highlighted multiple times. It is necessary",
                    "\t\t * to cleanup any left-over tags, because the whitespace inside of the <div>",
                    "\t\t * tags change the content of the <code> tag.",
                    "\t\t */",
                    "\t\tvar num = 0;",
                    "\t\t$$('.line-highlight', pre).forEach(function (line) {",
                    "\t\t\tnum += line.textContent.length;",
                    "\t\t\tline.parentNode.removeChild(line);",
                    "\t\t});",
                    "\t\t// Remove extra whitespace",
                    "\t\tif (num && /^( \\n)+$/.test(env.code.slice(-num))) {",
                    "\t\t\tenv.code = env.code.slice(0, -num);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('complete', function completeHook(env) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tvar lines = pre && pre.getAttribute('data-line');",
                    "",
                    "\t\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tclearTimeout(fakeTimer);",
                    "",
                    "\t\tvar hasLineNumbers = Prism.plugins.lineNumbers;",
                    "\t\tvar isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;",
                    "",
                    "\t\tif (hasClass(pre, 'line-numbers') && hasLineNumbers && !isLineNumbersLoaded) {",
                    "\t\t\tPrism.hooks.add('line-numbers', completeHook);",
                    "\t\t} else {",
                    "\t\t\tvar mutateDom = highlightLines(pre, lines);",
                    "\t\t\tmutateDom();",
                    "\t\t\tfakeTimer = setTimeout(applyHash, 1);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\twindow.addEventListener('hashchange', applyHash);",
                    "\twindow.addEventListener('resize', function () {",
                    "\t\tvar actions = [];",
                    "\t\t$$('pre[data-line]').forEach(function (pre) {",
                    "\t\t\tactions.push(highlightLines(pre));",
                    "\t\t});",
                    "\t\tactions.forEach(callFunction);",
                    "\t});",
                    "",
                    "})();"
                ]
            },
            "prism-line-highlight.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document&&document.querySelector){var t,n=function(){if(void 0===t){var e=document.createElement(\"div\");e.style.fontSize=\"13px\",e.style.lineHeight=\"1.5\",e.style.padding=0,e.style.border=0,e.innerHTML=\"&nbsp;<br />&nbsp;\",document.body.appendChild(e),t=38===e.offsetHeight,document.body.removeChild(e)}return t},a=0;Prism.hooks.add(\"before-sanity-check\",function(e){var t=e.element.parentNode,n=t&&t.getAttribute(\"data-line\");if(t&&n&&/pre/i.test(t.nodeName)){var i=0;r(\".line-highlight\",t).forEach(function(e){i+=e.textContent.length,e.parentNode.removeChild(e)}),i&&/^( \\n)+$/.test(e.code.slice(-i))&&(e.code=e.code.slice(0,-i))}}),Prism.hooks.add(\"complete\",function e(t){var n=t.element.parentNode,i=n&&n.getAttribute(\"data-line\");if(n&&i&&/pre/i.test(n.nodeName)){clearTimeout(a);var r=Prism.plugins.lineNumbers,o=t.plugins&&t.plugins.lineNumbers;if(l(n,\"line-numbers\")&&r&&!o)Prism.hooks.add(\"line-numbers\",e);else s(n,i)(),a=setTimeout(u,1)}}),window.addEventListener(\"hashchange\",u),window.addEventListener(\"resize\",function(){var t=[];r(\"pre[data-line]\").forEach(function(e){t.push(s(e))}),t.forEach(i)})}function r(e,t){return Array.prototype.slice.call((t||document).querySelectorAll(e))}function l(e,t){return t=\" \"+t+\" \",-1<(\" \"+e.className+\" \").replace(/[\\n\\t]/g,\" \").indexOf(t)}function i(e){e()}function s(u,e,d){var t=(e=\"string\"==typeof e?e:u.getAttribute(\"data-line\")).replace(/\\s+/g,\"\").split(\",\"),c=+u.getAttribute(\"data-line-offset\")||0,f=(n()?parseInt:parseFloat)(getComputedStyle(u).lineHeight),h=l(u,\"line-numbers\"),p=h?u:u.querySelector(\"code\")||u,m=[];return t.forEach(function(e){var t=e.split(\"-\"),n=+t[0],i=+t[1]||n,r=u.querySelector('.line-highlight[data-range=\"'+e+'\"]')||document.createElement(\"div\");if(m.push(function(){r.setAttribute(\"aria-hidden\",\"true\"),r.setAttribute(\"data-range\",e),r.className=(d||\"\")+\" line-highlight\"}),h&&Prism.plugins.lineNumbers){var o=Prism.plugins.lineNumbers.getLine(u,n),a=Prism.plugins.lineNumbers.getLine(u,i);if(o){var l=o.offsetTop+\"px\";m.push(function(){r.style.top=l})}if(a){var s=a.offsetTop-o.offsetTop+a.offsetHeight+\"px\";m.push(function(){r.style.height=s})}}else m.push(function(){r.setAttribute(\"data-start\",n),n<i&&r.setAttribute(\"data-end\",i),r.style.top=(n-c-1)*f+\"px\",r.textContent=new Array(i-n+2).join(\" \\n\")});m.push(function(){p.appendChild(r)})}),function(){m.forEach(i)}}function u(){var e=location.hash.slice(1);r(\".temporary.line-highlight\").forEach(function(e){e.parentNode.removeChild(e)});var t=(e.match(/\\.([\\d,-]+)$/)||[,\"\"])[1];if(t&&!document.getElementById(e)){var n=e.slice(0,e.lastIndexOf(\".\")),i=document.getElementById(n);if(i)i.hasAttribute(\"data-line\")||i.setAttribute(\"data-line\",\"\"),s(i,t,\"temporary \")(),document.querySelector(\".temporary.line-highlight\").scrollIntoView()}}}();"
                ]
            }
        },
        "line-numbers": {
            "index.html": {},
            "prism-line-numbers.css": {},
            "prism-line-numbers.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Plugin name which is used as a class name for <pre> which is activating the plugin",
                    "\t * @type {String}",
                    "\t */",
                    "\tvar PLUGIN_NAME = 'line-numbers';",
                    "",
                    "\t/**",
                    "\t * Regular expression used for determining line breaks",
                    "\t * @type {RegExp}",
                    "\t */",
                    "\tvar NEW_LINE_EXP = /\\n(?!$)/g;",
                    "",
                    "\t/**",
                    "\t * Resizes line numbers spans according to height of line of code",
                    "\t * @param {Element} element <pre> element",
                    "\t */",
                    "\tvar _resizeElement = function (element) {",
                    "\t\tvar codeStyles = getStyles(element);",
                    "\t\tvar whiteSpace = codeStyles['white-space'];",
                    "",
                    "\t\tif (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {",
                    "\t\t\tvar codeElement = element.querySelector('code');",
                    "\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');",
                    "\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');",
                    "\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);",
                    "",
                    "\t\t\tif (!lineNumberSizer) {",
                    "\t\t\t\tlineNumberSizer = document.createElement('span');",
                    "\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';",
                    "",
                    "\t\t\t\tcodeElement.appendChild(lineNumberSizer);",
                    "\t\t\t}",
                    "",
                    "\t\t\tlineNumberSizer.style.display = 'block';",
                    "",
                    "\t\t\tcodeLines.forEach(function (line, lineNumber) {",
                    "\t\t\t\tlineNumberSizer.textContent = line || '\\n';",
                    "\t\t\t\tvar lineSize = lineNumberSizer.getBoundingClientRect().height;",
                    "\t\t\t\tlineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';",
                    "\t\t\t});",
                    "",
                    "\t\t\tlineNumberSizer.textContent = '';",
                    "\t\t\tlineNumberSizer.style.display = 'none';",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns style declarations for the element",
                    "\t * @param {Element} element",
                    "\t */",
                    "\tvar getStyles = function (element) {",
                    "\t\tif (!element) {",
                    "\t\t\treturn null;",
                    "\t\t}",
                    "",
                    "\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);",
                    "\t};",
                    "",
                    "\twindow.addEventListener('resize', function () {",
                    "\t\tArray.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('complete', function (env) {",
                    "\t\tif (!env.code) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar code = env.element;",
                    "\t\tvar pre = code.parentNode;",
                    "",
                    "\t\t// works only for <code> wrapped inside <pre> (not inline)",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Abort if line numbers already exists",
                    "\t\tif (code.querySelector('.line-numbers-rows')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar addLineNumbers = false;",
                    "\t\tvar lineNumbersRegex = /(?:^|\\s)line-numbers(?:\\s|$)/;",
                    "",
                    "\t\tfor (var element = code; element; element = element.parentNode) {",
                    "\t\t\tif (lineNumbersRegex.test(element.className)) {",
                    "\t\t\t\taddLineNumbers = true;",
                    "\t\t\t\tbreak;",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class",
                    "\t\tif (!addLineNumbers) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Remove the class 'line-numbers' from the <code>",
                    "\t\tcode.className = code.className.replace(lineNumbersRegex, ' ');",
                    "\t\t// Add the class 'line-numbers' to the <pre>",
                    "\t\tif (!lineNumbersRegex.test(pre.className)) {",
                    "\t\t\tpre.className += ' line-numbers';",
                    "\t\t}",
                    "",
                    "\t\tvar match = env.code.match(NEW_LINE_EXP);",
                    "\t\tvar linesNum = match ? match.length + 1 : 1;",
                    "\t\tvar lineNumbersWrapper;",
                    "",
                    "\t\tvar lines = new Array(linesNum + 1).join('<span></span>');",
                    "",
                    "\t\tlineNumbersWrapper = document.createElement('span');",
                    "\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');",
                    "\t\tlineNumbersWrapper.className = 'line-numbers-rows';",
                    "\t\tlineNumbersWrapper.innerHTML = lines;",
                    "",
                    "\t\tif (pre.hasAttribute('data-start')) {",
                    "\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);",
                    "\t\t}",
                    "",
                    "\t\tenv.element.appendChild(lineNumbersWrapper);",
                    "",
                    "\t\t_resizeElement(pre);",
                    "",
                    "\t\tPrism.hooks.run('line-numbers', env);",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('line-numbers', function (env) {",
                    "\t\tenv.plugins = env.plugins || {};",
                    "\t\tenv.plugins.lineNumbers = true;",
                    "\t});",
                    "",
                    "\t/**",
                    "\t * Global exports",
                    "\t */",
                    "\tPrism.plugins.lineNumbers = {",
                    "\t\t/**",
                    "\t\t * Get node for provided line number",
                    "\t\t * @param {Element} element pre element",
                    "\t\t * @param {Number} number line number",
                    "\t\t * @return {Element|undefined}",
                    "\t\t */",
                    "\t\tgetLine: function (element, number) {",
                    "\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');",
                    "\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;",
                    "\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);",
                    "",
                    "\t\t\tif (number < lineNumberStart) {",
                    "\t\t\t\tnumber = lineNumberStart;",
                    "\t\t\t}",
                    "\t\t\tif (number > lineNumberEnd) {",
                    "\t\t\t\tnumber = lineNumberEnd;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar lineIndex = number - lineNumberStart;",
                    "",
                    "\t\t\treturn lineNumberRows.children[lineIndex];",
                    "\t\t}",
                    "\t};",
                    "",
                    "}());"
                ]
            },
            "prism-line-numbers.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var l=\"line-numbers\",c=/\\n(?!$)/g,m=function(e){var t=a(e)[\"white-space\"];if(\"pre-wrap\"===t||\"pre-line\"===t){var n=e.querySelector(\"code\"),r=e.querySelector(\".line-numbers-rows\"),s=e.querySelector(\".line-numbers-sizer\"),i=n.textContent.split(c);s||((s=document.createElement(\"span\")).className=\"line-numbers-sizer\",n.appendChild(s)),s.style.display=\"block\",i.forEach(function(e,t){s.textContent=e||\"\\n\";var n=s.getBoundingClientRect().height;r.children[t].style.height=n+\"px\"}),s.textContent=\"\",s.style.display=\"none\"}},a=function(e){return e?window.getComputedStyle?getComputedStyle(e):e.currentStyle||null:null};window.addEventListener(\"resize\",function(){Array.prototype.forEach.call(document.querySelectorAll(\"pre.\"+l),m)}),Prism.hooks.add(\"complete\",function(e){if(e.code){var t=e.element,n=t.parentNode;if(n&&/pre/i.test(n.nodeName)&&!t.querySelector(\".line-numbers-rows\")){for(var r=!1,s=/(?:^|\\s)line-numbers(?:\\s|$)/,i=t;i;i=i.parentNode)if(s.test(i.className)){r=!0;break}if(r){t.className=t.className.replace(s,\" \"),s.test(n.className)||(n.className+=\" line-numbers\");var l,a=e.code.match(c),o=a?a.length+1:1,u=new Array(o+1).join(\"<span></span>\");(l=document.createElement(\"span\")).setAttribute(\"aria-hidden\",\"true\"),l.className=\"line-numbers-rows\",l.innerHTML=u,n.hasAttribute(\"data-start\")&&(n.style.counterReset=\"linenumber \"+(parseInt(n.getAttribute(\"data-start\"),10)-1)),e.element.appendChild(l),m(n),Prism.hooks.run(\"line-numbers\",e)}}}}),Prism.hooks.add(\"line-numbers\",function(e){e.plugins=e.plugins||{},e.plugins.lineNumbers=!0}),Prism.plugins.lineNumbers={getLine:function(e,t){if(\"PRE\"===e.tagName&&e.classList.contains(l)){var n=e.querySelector(\".line-numbers-rows\"),r=parseInt(e.getAttribute(\"data-start\"),10)||1,s=r+(n.children.length-1);t<r&&(t=r),s<t&&(t=s);var i=t-r;return n.children[i]}}}}}();"
                ]
            }
        },
        "normalize-whitespace": {
            "demo.html": {},
            "index.html": {},
            "prism-normalize-whitespace.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "var assign = Object.assign || function (obj1, obj2) {",
                    "\tfor (var name in obj2) {",
                    "\t\tif (obj2.hasOwnProperty(name))",
                    "\t\t\tobj1[name] = obj2[name];",
                    "\t}",
                    "\treturn obj1;",
                    "}",
                    "",
                    "function NormalizeWhitespace(defaults) {",
                    "\tthis.defaults = assign({}, defaults);",
                    "}",
                    "",
                    "function toCamelCase(value) {",
                    "\treturn value.replace(/-(\\w)/g, function(match, firstChar) {",
                    "\t\treturn firstChar.toUpperCase();",
                    "\t});",
                    "}",
                    "",
                    "function tabLen(str) {",
                    "\tvar res = 0;",
                    "\tfor (var i = 0; i < str.length; ++i) {",
                    "\t\tif (str.charCodeAt(i) == '\\t'.charCodeAt(0))",
                    "\t\t\tres += 3;",
                    "\t}",
                    "\treturn str.length + res;",
                    "}",
                    "",
                    "NormalizeWhitespace.prototype = {",
                    "\tsetDefaults: function (defaults) {",
                    "\t\tthis.defaults = assign(this.defaults, defaults);",
                    "\t},",
                    "\tnormalize: function (input, settings) {",
                    "\t\tsettings = assign(this.defaults, settings);",
                    "",
                    "\t\tfor (var name in settings) {",
                    "\t\t\tvar methodName = toCamelCase(name);",
                    "\t\t\tif (name !== \"normalize\" && methodName !== 'setDefaults' &&",
                    "\t\t\t\t\tsettings[name] && this[methodName]) {",
                    "\t\t\t\tinput = this[methodName].call(this, input, settings[name]);",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\treturn input;",
                    "\t},",
                    "",
                    "\t/*",
                    "\t * Normalization methods",
                    "\t */",
                    "\tleftTrim: function (input) {",
                    "\t\treturn input.replace(/^\\s+/, '');",
                    "\t},",
                    "\trightTrim: function (input) {",
                    "\t\treturn input.replace(/\\s+$/, '');",
                    "\t},",
                    "\ttabsToSpaces: function (input, spaces) {",
                    "\t\tspaces = spaces|0 || 4;",
                    "\t\treturn input.replace(/\\t/g, new Array(++spaces).join(' '));",
                    "\t},",
                    "\tspacesToTabs: function (input, spaces) {",
                    "\t\tspaces = spaces|0 || 4;",
                    "\t\treturn input.replace(RegExp(' {' + spaces + '}', 'g'), '\\t');",
                    "\t},",
                    "\tremoveTrailing: function (input) {",
                    "\t\treturn input.replace(/\\s*?$/gm, '');",
                    "\t},",
                    "\t// Support for deprecated plugin remove-initial-line-feed",
                    "\tremoveInitialLineFeed: function (input) {",
                    "\t\treturn input.replace(/^(?:\\r?\\n|\\r)/, '');",
                    "\t},",
                    "\tremoveIndent: function (input) {",
                    "\t\tvar indents = input.match(/^[^\\S\\n\\r]*(?=\\S)/gm);",
                    "",
                    "\t\tif (!indents || !indents[0].length)",
                    "\t\t\treturn input;",
                    "",
                    "\t\tindents.sort(function(a, b){return a.length - b.length; });",
                    "",
                    "\t\tif (!indents[0].length)",
                    "\t\t\treturn input;",
                    "",
                    "\t\treturn input.replace(RegExp('^' + indents[0], 'gm'), '');",
                    "\t},",
                    "\tindent: function (input, tabs) {",
                    "\t\treturn input.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++tabs).join('\\t') + '$&');",
                    "\t},",
                    "\tbreakLines: function (input, characters) {",
                    "\t\tcharacters = (characters === true) ? 80 : characters|0 || 80;",
                    "",
                    "\t\tvar lines = input.split('\\n');",
                    "\t\tfor (var i = 0; i < lines.length; ++i) {",
                    "\t\t\tif (tabLen(lines[i]) <= characters)",
                    "\t\t\t\tcontinue;",
                    "",
                    "\t\t\tvar line = lines[i].split(/(\\s+)/g),",
                    "\t\t\t    len = 0;",
                    "",
                    "\t\t\tfor (var j = 0; j < line.length; ++j) {",
                    "\t\t\t\tvar tl = tabLen(line[j]);",
                    "\t\t\t\tlen += tl;",
                    "\t\t\t\tif (len > characters) {",
                    "\t\t\t\t\tline[j] = '\\n' + line[j];",
                    "\t\t\t\t\tlen = tl;",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\tlines[i] = line.join('');",
                    "\t\t}",
                    "\t\treturn lines.join('\\n');",
                    "\t}",
                    "};",
                    "",
                    "// Support node modules",
                    "if (typeof module !== 'undefined' && module.exports) {",
                    "\tmodule.exports = NormalizeWhitespace;",
                    "}",
                    "",
                    "// Exit if prism is not loaded",
                    "if (typeof Prism === 'undefined') {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.plugins.NormalizeWhitespace = new NormalizeWhitespace({",
                    "\t'remove-trailing': true,",
                    "\t'remove-indent': true,",
                    "\t'left-trim': true,",
                    "\t'right-trim': true,",
                    "\t/*'break-lines': 80,",
                    "\t'indent': 2,",
                    "\t'remove-initial-line-feed': false,",
                    "\t'tabs-to-spaces': 4,",
                    "\t'spaces-to-tabs': 4*/",
                    "});",
                    "",
                    "Prism.hooks.add('before-sanity-check', function (env) {",
                    "\tvar Normalizer = Prism.plugins.NormalizeWhitespace;",
                    "",
                    "\t// Check settings",
                    "\tif (env.settings && env.settings['whitespace-normalization'] === false) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Simple mode if there is no env.element",
                    "\tif ((!env.element || !env.element.parentNode) && env.code) {",
                    "\t\tenv.code = Normalizer.normalize(env.code, env.settings);",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t// Normal mode",
                    "\tvar pre = env.element.parentNode;",
                    "\tvar clsReg = /(?:^|\\s)no-whitespace-normalization(?:\\s|$)/;",
                    "\tif (!env.code || !pre || pre.nodeName.toLowerCase() !== 'pre' ||",
                    "\t\t\tclsReg.test(pre.className) || clsReg.test(env.element.className))",
                    "\t\treturn;",
                    "",
                    "\tvar children = pre.childNodes,",
                    "\t    before = '',",
                    "\t    after = '',",
                    "\t    codeFound = false;",
                    "",
                    "\t// Move surrounding whitespace from the <pre> tag into the <code> tag",
                    "\tfor (var i = 0; i < children.length; ++i) {",
                    "\t\tvar node = children[i];",
                    "",
                    "\t\tif (node == env.element) {",
                    "\t\t\tcodeFound = true;",
                    "\t\t} else if (node.nodeName === \"#text\") {",
                    "\t\t\tif (codeFound) {",
                    "\t\t\t\tafter += node.nodeValue;",
                    "\t\t\t} else {",
                    "\t\t\t\tbefore += node.nodeValue;",
                    "\t\t\t}",
                    "",
                    "\t\t\tpre.removeChild(node);",
                    "\t\t\t--i;",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tif (!env.element.children.length || !Prism.plugins.KeepMarkup) {",
                    "\t\tenv.code = before + env.code + after;",
                    "\t\tenv.code = Normalizer.normalize(env.code, env.settings);",
                    "\t} else {",
                    "\t\t// Preserve markup for keep-markup plugin",
                    "\t\tvar html = before + env.element.innerHTML + after;",
                    "\t\tenv.element.innerHTML = Normalizer.normalize(html, env.settings);",
                    "\t\tenv.code = env.element.textContent;",
                    "\t}",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-normalize-whitespace.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){var i=Object.assign||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e};function e(e){this.defaults=i({},e)}function l(e){for(var n=0,t=0;t<e.length;++t)e.charCodeAt(t)==\"\\t\".charCodeAt(0)&&(n+=3);return e.length+n}e.prototype={setDefaults:function(e){this.defaults=i(this.defaults,e)},normalize:function(e,n){for(var t in n=i(this.defaults,n)){var r=t.replace(/-(\\w)/g,function(e,n){return n.toUpperCase()});\"normalize\"!==t&&\"setDefaults\"!==r&&n[t]&&this[r]&&(e=this[r].call(this,e,n[t]))}return e},leftTrim:function(e){return e.replace(/^\\s+/,\"\")},rightTrim:function(e){return e.replace(/\\s+$/,\"\")},tabsToSpaces:function(e,n){return n=0|n||4,e.replace(/\\t/g,new Array(++n).join(\" \"))},spacesToTabs:function(e,n){return n=0|n||4,e.replace(RegExp(\" {\"+n+\"}\",\"g\"),\"\\t\")},removeTrailing:function(e){return e.replace(/\\s*?$/gm,\"\")},removeInitialLineFeed:function(e){return e.replace(/^(?:\\r?\\n|\\r)/,\"\")},removeIndent:function(e){var n=e.match(/^[^\\S\\n\\r]*(?=\\S)/gm);return n&&n[0].length?(n.sort(function(e,n){return e.length-n.length}),n[0].length?e.replace(RegExp(\"^\"+n[0],\"gm\"),\"\"):e):e},indent:function(e,n){return e.replace(/^[^\\S\\n\\r]*(?=\\S)/gm,new Array(++n).join(\"\\t\")+\"$&\")},breakLines:function(e,n){n=!0===n?80:0|n||80;for(var t=e.split(\"\\n\"),r=0;r<t.length;++r)if(!(l(t[r])<=n)){for(var i=t[r].split(/(\\s+)/g),o=0,a=0;a<i.length;++a){var s=l(i[a]);n<(o+=s)&&(i[a]=\"\\n\"+i[a],o=s)}t[r]=i.join(\"\")}return t.join(\"\\n\")}},\"undefined\"!=typeof module&&module.exports&&(module.exports=e),\"undefined\"!=typeof Prism&&(Prism.plugins.NormalizeWhitespace=new e({\"remove-trailing\":!0,\"remove-indent\":!0,\"left-trim\":!0,\"right-trim\":!0}),Prism.hooks.add(\"before-sanity-check\",function(e){var n=Prism.plugins.NormalizeWhitespace;if(!e.settings||!1!==e.settings[\"whitespace-normalization\"])if(e.element&&e.element.parentNode||!e.code){var t=e.element.parentNode,r=/(?:^|\\s)no-whitespace-normalization(?:\\s|$)/;if(e.code&&t&&\"pre\"===t.nodeName.toLowerCase()&&!r.test(t.className)&&!r.test(e.element.className)){for(var i=t.childNodes,o=\"\",a=\"\",s=!1,l=0;l<i.length;++l){var c=i[l];c==e.element?s=!0:\"#text\"===c.nodeName&&(s?a+=c.nodeValue:o+=c.nodeValue,t.removeChild(c),--l)}if(e.element.children.length&&Prism.plugins.KeepMarkup){var u=o+e.element.innerHTML+a;e.element.innerHTML=n.normalize(u,e.settings),e.code=e.element.textContent}else e.code=o+e.code+a,e.code=n.normalize(e.code,e.settings)}}else e.code=n.normalize(e.code,e.settings)}))}();"
                ]
            }
        },
        "previewers": {
            "index.html": {},
            "prism-previewers.css": {},
            "prism-previewers.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\t!self.document || !Function.prototype.bind",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar previewers = {",
                    "\t\t// gradient must be defined before color and angle",
                    "\t\t'gradient': {",
                    "\t\t\tcreate: (function () {",
                    "",
                    "\t\t\t\t// Stores already processed gradients so that we don't",
                    "\t\t\t\t// make the conversion every time the previewer is shown",
                    "\t\t\t\tvar cache = {};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Returns a W3C-valid linear gradient",
                    "\t\t\t\t * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)",
                    "\t\t\t\t * @param {string} func Gradient function name (\"linear-gradient\")",
                    "\t\t\t\t * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CLinearGradient = function(prefix, func, values) {",
                    "\t\t\t\t\t// Default value for angle",
                    "\t\t\t\t\tvar angle = '180deg';",
                    "",
                    "\t\t\t\t\tif (/^(?:-?\\d*\\.?\\d+(?:deg|rad)|to\\b|top|right|bottom|left)/.test(values[0])) {",
                    "\t\t\t\t\t\tangle = values.shift();",
                    "\t\t\t\t\t\tif (angle.indexOf('to ') < 0) {",
                    "\t\t\t\t\t\t\t// Angle uses old keywords",
                    "\t\t\t\t\t\t\t// W3C syntax uses \"to\" + opposite keywords",
                    "\t\t\t\t\t\t\tif (angle.indexOf('top') >= 0) {",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom right';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom left';",
                    "\t\t\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to bottom';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('bottom') >= 0) {",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top right';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top left';",
                    "\t\t\t\t\t\t\t\t} else {",
                    "\t\t\t\t\t\t\t\t\tangle = 'to top';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('left') >= 0) {",
                    "\t\t\t\t\t\t\t\tangle = 'to right';",
                    "\t\t\t\t\t\t\t} else if (angle.indexOf('right') >= 0) {",
                    "\t\t\t\t\t\t\t\tangle = 'to left';",
                    "\t\t\t\t\t\t\t} else if (prefix) {",
                    "\t\t\t\t\t\t\t\t// Angle is shifted by 90deg in prefixed gradients",
                    "\t\t\t\t\t\t\t\tif (angle.indexOf('deg') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = (90 - parseFloat(angle)) + 'deg';",
                    "\t\t\t\t\t\t\t\t} else if (angle.indexOf('rad') >= 0) {",
                    "\t\t\t\t\t\t\t\t\tangle = (Math.PI / 2 - parseFloat(angle)) + 'rad';",
                    "\t\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\treturn func + '(' + angle + ',' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Returns a W3C-valid radial gradient",
                    "\t\t\t\t * @param {string} prefix Vendor prefix if any (\"-moz-\", \"-webkit-\", etc.)",
                    "\t\t\t\t * @param {string} func Gradient function name (\"linear-gradient\")",
                    "\t\t\t\t * @param {string[]} values Array of the gradient function parameters ([\"0deg\", \"red 0%\", \"blue 100%\"])",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CRadialGradient = function(prefix, func, values) {",
                    "\t\t\t\t\tif (values[0].indexOf('at') < 0) {",
                    "\t\t\t\t\t\t// Looks like old syntax",
                    "",
                    "\t\t\t\t\t\t// Default values",
                    "\t\t\t\t\t\tvar position = 'center';",
                    "\t\t\t\t\t\tvar shape = 'ellipse';",
                    "\t\t\t\t\t\tvar size = 'farthest-corner';",
                    "",
                    "\t\t\t\t\t\tif (/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(values[0])) {",
                    "\t\t\t\t\t\t\t// Found a position",
                    "\t\t\t\t\t\t\t// Remove angle value, if any",
                    "\t\t\t\t\t\t\tposition = values.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/, '');",
                    "\t\t\t\t\t\t}",
                    "\t\t\t\t\t\tif (/\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(values[0])) {",
                    "\t\t\t\t\t\t\t// Found a shape and/or size",
                    "\t\t\t\t\t\t\tvar shapeSizeParts = values.shift().split(/\\s+/);",
                    "\t\t\t\t\t\t\tif (shapeSizeParts[0] && (shapeSizeParts[0] === 'circle' || shapeSizeParts[0] === 'ellipse')) {",
                    "\t\t\t\t\t\t\t\tshape = shapeSizeParts.shift();",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t\tif (shapeSizeParts[0]) {",
                    "\t\t\t\t\t\t\t\tsize = shapeSizeParts.shift();",
                    "\t\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\t\t// Old keywords are converted to their synonyms",
                    "\t\t\t\t\t\t\tif (size === 'cover') {",
                    "\t\t\t\t\t\t\t\tsize = 'farthest-corner';",
                    "\t\t\t\t\t\t\t} else if (size === 'contain') {",
                    "\t\t\t\t\t\t\t\tsize = 'clothest-side';",
                    "\t\t\t\t\t\t\t}",
                    "\t\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\t\treturn func + '(' + shape + ' ' + size + ' at ' + position + ',' + values.join(',') + ')';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\treturn func + '(' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\t/**",
                    "\t\t\t\t * Converts a gradient to a W3C-valid one",
                    "\t\t\t\t * Does not support old webkit syntax (-webkit-gradient(linear...) and -webkit-gradient(radial...))",
                    "\t\t\t\t * @param {string} gradient The CSS gradient",
                    "\t\t\t\t */",
                    "\t\t\t\tvar convertToW3CGradient = function(gradient) {",
                    "\t\t\t\t\tif (cache[gradient]) {",
                    "\t\t\t\t\t\treturn cache[gradient];",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tvar parts = gradient.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/);",
                    "\t\t\t\t\t// \"\", \"-moz-\", etc.",
                    "\t\t\t\t\tvar prefix = parts && parts[1];",
                    "\t\t\t\t\t// \"linear-gradient\", \"radial-gradient\", etc.",
                    "\t\t\t\t\tvar func = parts && parts[2];",
                    "",
                    "\t\t\t\t\tvar values = gradient.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g, '').split(/\\s*,\\s*/);",
                    "",
                    "\t\t\t\t\tif (func.indexOf('linear') >= 0) {",
                    "\t\t\t\t\t\treturn cache[gradient] = convertToW3CLinearGradient(prefix, func, values);",
                    "\t\t\t\t\t} else if (func.indexOf('radial') >= 0) {",
                    "\t\t\t\t\t\treturn cache[gradient] = convertToW3CRadialGradient(prefix, func, values);",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\treturn cache[gradient] = func + '(' + values.join(',') + ')';",
                    "\t\t\t\t};",
                    "",
                    "\t\t\t\treturn function () {",
                    "\t\t\t\t\tnew Prism.plugins.Previewer('gradient', function(value) {",
                    "\t\t\t\t\t\tthis.firstChild.style.backgroundImage = '';",
                    "\t\t\t\t\t\tthis.firstChild.style.backgroundImage = convertToW3CGradient(value);",
                    "\t\t\t\t\t\treturn !!this.firstChild.style.backgroundImage;",
                    "\t\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\t\tthis._elt.innerHTML = '<div></div>';",
                    "\t\t\t\t\t});",
                    "\t\t\t\t};",
                    "\t\t\t}()),",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'gradient': {",
                    "\t\t\t\t\tpattern: /(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'angle': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('angle', function(value) {",
                    "\t\t\t\t\tvar num = parseFloat(value);",
                    "\t\t\t\t\tvar unit = value.match(/[a-z]+$/i);",
                    "\t\t\t\t\tvar max, percentage;",
                    "\t\t\t\t\tif (!num || !unit) {",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tunit = unit[0];",
                    "",
                    "\t\t\t\t\tswitch(unit) {",
                    "\t\t\t\t\t\tcase 'deg':",
                    "\t\t\t\t\t\t\tmax = 360;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'grad':",
                    "\t\t\t\t\t\t\tmax = 400;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'rad':",
                    "\t\t\t\t\t\t\tmax = 2 * Math.PI;",
                    "\t\t\t\t\t\t\tbreak;",
                    "\t\t\t\t\t\tcase 'turn':",
                    "\t\t\t\t\t\t\tmax = 1;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tpercentage = 100 * num/max;",
                    "\t\t\t\t\tpercentage %= 100;",
                    "",
                    "\t\t\t\t\tthis[(num < 0? 'set' : 'remove') + 'Attribute']('data-negative', '');",
                    "\t\t\t\t\tthis.querySelector('circle').style.strokeDasharray = Math.abs(percentage) + ',500';",
                    "\t\t\t\t\treturn true;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' +",
                    "\t\t\t\t\t\t'<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'angle': /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+(?:deg|g?rad|turn)\\b/i",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'operator',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'func',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'color': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('color', function(value) {",
                    "\t\t\t\t\tthis.style.backgroundColor = '';",
                    "\t\t\t\t\tthis.style.backgroundColor = value;",
                    "\t\t\t\t\treturn !!this.style.backgroundColor;",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'color': {",
                    "\t\t\t\t\tpattern: /\\B#(?:[0-9a-f]{3}){1,2}\\b|\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B|\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "\t\t'easing': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('easing', function (value) {",
                    "",
                    "\t\t\t\t\tvalue = {",
                    "\t\t\t\t\t\t'linear': '0,0,1,1',",
                    "\t\t\t\t\t\t'ease': '.25,.1,.25,1',",
                    "\t\t\t\t\t\t'ease-in': '.42,0,1,1',",
                    "\t\t\t\t\t\t'ease-out': '0,0,.58,1',",
                    "\t\t\t\t\t\t'ease-in-out':'.42,0,.58,1'",
                    "\t\t\t\t\t}[value] || value;",
                    "",
                    "\t\t\t\t\tvar p = value.match(/-?\\d*\\.?\\d+/g);",
                    "",
                    "\t\t\t\t\tif(p.length === 4) {",
                    "\t\t\t\t\t\tp = p.map(function(p, i) { return (i % 2? 1 - p : p) * 100; });",
                    "",
                    "\t\t\t\t\t\tthis.querySelector('path').setAttribute('d', 'M0,100 C' + p[0] + ',' + p[1] + ', ' + p[2] + ',' + p[3] + ', 100,0');",
                    "",
                    "\t\t\t\t\t\tvar lines = this.querySelectorAll('line');",
                    "\t\t\t\t\t\tlines[0].setAttribute('x2', p[0]);",
                    "\t\t\t\t\t\tlines[0].setAttribute('y2', p[1]);",
                    "\t\t\t\t\t\tlines[1].setAttribute('x2', p[2]);",
                    "\t\t\t\t\t\tlines[1].setAttribute('y2', p[3]);",
                    "",
                    "\t\t\t\t\t\treturn true;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\treturn false;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\">' +",
                    "\t\t\t\t\t\t'<defs>' +",
                    "\t\t\t\t\t\t'<marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\">' +",
                    "\t\t\t\t\t\t'<circle cx=\"2\" cy=\"2\" r=\"1.5\" />' +",
                    "\t\t\t\t\t\t'</marker>' +",
                    "\t\t\t\t\t\t'</defs>' +",
                    "\t\t\t\t\t\t'<path d=\"M0,100 C20,50, 40,30, 100,0\" />' +",
                    "\t\t\t\t\t\t'<line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" />' +",
                    "\t\t\t\t\t\t'<line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url(' + location.href + '#prism-previewer-easing-marker)\" marker-end=\"url(' + location.href + '#prism-previewer-easing-marker)\" />' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'easing': {",
                    "\t\t\t\t\tpattern: /\\bcubic-bezier\\((?:-?\\d*\\.?\\d+,\\s*){3}-?\\d*\\.?\\d+\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,",
                    "\t\t\t\t\tinside: {",
                    "\t\t\t\t\t\t'function': /[\\w-]+(?=\\()/,",
                    "\t\t\t\t\t\t'punctuation': /[(),]/",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t},",
                    "",
                    "\t\t'time': {",
                    "\t\t\tcreate: function () {",
                    "\t\t\t\tnew Prism.plugins.Previewer('time', function(value) {",
                    "\t\t\t\t\tvar num = parseFloat(value);",
                    "\t\t\t\t\tvar unit = value.match(/[a-z]+$/i);",
                    "\t\t\t\t\tif (!num || !unit) {",
                    "\t\t\t\t\t\treturn false;",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\tunit = unit[0];",
                    "\t\t\t\t\tthis.querySelector('circle').style.animationDuration = 2 * num + unit;",
                    "\t\t\t\t\treturn true;",
                    "\t\t\t\t}, '*', function () {",
                    "\t\t\t\t\tthis._elt.innerHTML = '<svg viewBox=\"0 0 64 64\">' +",
                    "\t\t\t\t\t\t'<circle r=\"16\" cy=\"32\" cx=\"32\"></circle>' +",
                    "\t\t\t\t\t\t'</svg>';",
                    "\t\t\t\t});",
                    "\t\t\t},",
                    "\t\t\ttokens: {",
                    "\t\t\t\t'time': /(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+m?s\\b/i",
                    "\t\t\t},",
                    "\t\t\tlanguages: {",
                    "\t\t\t\t'css': true,",
                    "\t\t\t\t'less': true,",
                    "\t\t\t\t'markup': {",
                    "\t\t\t\t\tlang: 'markup',",
                    "\t\t\t\t\tbefore: 'punctuation',",
                    "\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\troot: Prism.languages.markup && Prism.languages.markup['tag'].inside['attr-value']",
                    "\t\t\t\t},",
                    "\t\t\t\t'sass': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['property-line']",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'sass',",
                    "\t\t\t\t\t\tbefore: 'operator',",
                    "\t\t\t\t\t\tinside: 'inside',",
                    "\t\t\t\t\t\troot: Prism.languages.sass && Prism.languages.sass['variable-line']",
                    "\t\t\t\t\t}",
                    "\t\t\t\t],",
                    "\t\t\t\t'scss': true,",
                    "\t\t\t\t'stylus': [",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['property-declaration'].inside",
                    "\t\t\t\t\t},",
                    "\t\t\t\t\t{",
                    "\t\t\t\t\t\tlang: 'stylus',",
                    "\t\t\t\t\t\tbefore: 'hexcode',",
                    "\t\t\t\t\t\tinside: 'rest',",
                    "\t\t\t\t\t\troot: Prism.languages.stylus && Prism.languages.stylus['variable-declaration'].inside",
                    "\t\t\t\t\t}",
                    "\t\t\t\t]",
                    "\t\t\t}",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Returns the absolute X, Y offsets for an element",
                    "\t * @param {HTMLElement} element",
                    "\t * @returns {{top: number, right: number, bottom: number, left: number, width: number, height: number}}",
                    "\t */",
                    "\tvar getOffset = function (element) {",
                    "\t\tvar elementBounds = element.getBoundingClientRect();",
                    "\t\tvar left = elementBounds.left;",
                    "\t\tvar top = elementBounds.top;",
                    "\t\tvar documentBounds = document.documentElement.getBoundingClientRect();",
                    "\t\tleft -= documentBounds.left;",
                    "\t\ttop -= documentBounds.top;",
                    "",
                    "\t\treturn {",
                    "\t\t\ttop: top,",
                    "\t\t\tright: innerWidth - left - elementBounds.width,",
                    "\t\t\tbottom: innerHeight - top - elementBounds.height,",
                    "\t\t\tleft: left,",
                    "\t\t\twidth: elementBounds.width,",
                    "\t\t\theight: elementBounds.height",
                    "\t\t};",
                    "\t};",
                    "",
                    "\tvar tokenRegexp = /(?:^|\\s)token(?=$|\\s)/;",
                    "\tvar activeRegexp = /(?:^|\\s)active(?=$|\\s)/g;",
                    "\tvar flippedRegexp = /(?:^|\\s)flipped(?=$|\\s)/g;",
                    "",
                    "\t/**",
                    "\t * Previewer constructor",
                    "\t * @param {string} type Unique previewer type",
                    "\t * @param {function} updater Function that will be called on mouseover.",
                    "\t * @param {string[]|string=} supportedLanguages Aliases of the languages this previewer must be enabled for. Defaults to \"*\", all languages.",
                    "\t * @param {function=} initializer Function that will be called on initialization.",
                    "\t * @constructor",
                    "\t */",
                    "\tvar Previewer = function (type, updater, supportedLanguages, initializer) {",
                    "\t\tthis._elt = null;",
                    "\t\tthis._type = type;",
                    "\t\tthis._clsRegexp = RegExp('(?:^|\\\\s)' + type + '(?=$|\\\\s)');",
                    "\t\tthis._token = null;",
                    "\t\tthis.updater = updater;",
                    "\t\tthis._mouseout = this.mouseout.bind(this);",
                    "\t\tthis.initializer = initializer;",
                    "",
                    "\t\tvar self = this;",
                    "",
                    "\t\tif (!supportedLanguages) {",
                    "\t\t\tsupportedLanguages = ['*'];",
                    "\t\t}",
                    "\t\tif (!Array.isArray(supportedLanguages)) {",
                    "\t\t\tsupportedLanguages = [supportedLanguages];",
                    "\t\t}",
                    "\t\tsupportedLanguages.forEach(function (lang) {",
                    "\t\t\tif (typeof lang !== 'string') {",
                    "\t\t\t\tlang = lang.lang;",
                    "\t\t\t}",
                    "\t\t\tif (!Previewer.byLanguages[lang]) {",
                    "\t\t\t\tPreviewer.byLanguages[lang] = [];",
                    "\t\t\t}",
                    "\t\t\tif (Previewer.byLanguages[lang].indexOf(self) < 0) {",
                    "\t\t\t\tPreviewer.byLanguages[lang].push(self);",
                    "\t\t\t}",
                    "\t\t});",
                    "\t\tPreviewer.byType[type] = this;",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Creates the HTML element for the previewer.",
                    "\t */",
                    "\tPreviewer.prototype.init = function () {",
                    "\t\tif (this._elt) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tthis._elt = document.createElement('div');",
                    "\t\tthis._elt.className = 'prism-previewer prism-previewer-' + this._type;",
                    "\t\tdocument.body.appendChild(this._elt);",
                    "\t\tif(this.initializer) {",
                    "\t\t\tthis.initializer();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tPreviewer.prototype.isDisabled = function (token) {",
                    "\t\tdo {",
                    "\t\t\tif (token.hasAttribute && token.hasAttribute('data-previewers')) {",
                    "\t\t\t\tvar previewers = token.getAttribute('data-previewers');",
                    "\t\t\t\treturn (previewers || '').split(/\\s+/).indexOf(this._type) === -1;",
                    "\t\t\t}",
                    "\t\t} while(token = token.parentNode);",
                    "\t\treturn false;",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Checks the class name of each hovered element",
                    "\t * @param token",
                    "\t */",
                    "\tPreviewer.prototype.check = function (token) {",
                    "\t\tif (tokenRegexp.test(token.className) && this.isDisabled(token)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "\t\tdo {",
                    "\t\t\tif (tokenRegexp.test(token.className) && this._clsRegexp.test(token.className)) {",
                    "\t\t\t\tbreak;",
                    "\t\t\t}",
                    "\t\t} while(token = token.parentNode);",
                    "",
                    "\t\tif (token && token !== this._token) {",
                    "\t\t\tthis._token = token;",
                    "\t\t\tthis.show();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Called on mouseout",
                    "\t */",
                    "\tPreviewer.prototype.mouseout = function() {",
                    "\t\tthis._token.removeEventListener('mouseout', this._mouseout, false);",
                    "\t\tthis._token = null;",
                    "\t\tthis.hide();",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Shows the previewer positioned properly for the current token.",
                    "\t */",
                    "\tPreviewer.prototype.show = function () {",
                    "\t\tif (!this._elt) {",
                    "\t\t\tthis.init();",
                    "\t\t}",
                    "\t\tif (!this._token) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (this.updater.call(this._elt, this._token.textContent)) {",
                    "\t\t\tthis._token.addEventListener('mouseout', this._mouseout, false);",
                    "",
                    "\t\t\tvar offset = getOffset(this._token);",
                    "\t\t\tthis._elt.className += ' active';",
                    "",
                    "\t\t\tif (offset.top - this._elt.offsetHeight > 0) {",
                    "\t\t\t\tthis._elt.className = this._elt.className.replace(flippedRegexp, '');",
                    "\t\t\t\tthis._elt.style.top = offset.top + 'px';",
                    "\t\t\t\tthis._elt.style.bottom = '';",
                    "\t\t\t} else {",
                    "\t\t\t\tthis._elt.className +=  ' flipped';",
                    "\t\t\t\tthis._elt.style.bottom = offset.bottom + 'px';",
                    "\t\t\t\tthis._elt.style.top = '';",
                    "\t\t\t}",
                    "",
                    "\t\t\tthis._elt.style.left = offset.left + Math.min(200, offset.width / 2) + 'px';",
                    "\t\t} else {",
                    "\t\t\tthis.hide();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Hides the previewer.",
                    "\t */",
                    "\tPreviewer.prototype.hide = function () {",
                    "\t\tthis._elt.className = this._elt.className.replace(activeRegexp, '');",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Map of all registered previewers by language",
                    "\t * @type {{}}",
                    "\t */",
                    "\tPreviewer.byLanguages = {};",
                    "",
                    "\t/**",
                    "\t * Map of all registered previewers by type",
                    "\t * @type {{}}",
                    "\t */",
                    "\tPreviewer.byType = {};",
                    "",
                    "\t/**",
                    "\t * Initializes the mouseover event on the code block.",
                    "\t * @param {HTMLElement} elt The code block (env.element)",
                    "\t * @param {string} lang The language (env.language)",
                    "\t */",
                    "\tPreviewer.initEvents = function (elt, lang) {",
                    "\t\tvar previewers = [];",
                    "\t\tif (Previewer.byLanguages[lang]) {",
                    "\t\t\tpreviewers = previewers.concat(Previewer.byLanguages[lang]);",
                    "\t\t}",
                    "\t\tif (Previewer.byLanguages['*']) {",
                    "\t\t\tpreviewers = previewers.concat(Previewer.byLanguages['*']);",
                    "\t\t}",
                    "\t\telt.addEventListener('mouseover', function (e) {",
                    "\t\t\tvar target = e.target;",
                    "\t\t\tpreviewers.forEach(function (previewer) {",
                    "\t\t\t\tpreviewer.check(target);",
                    "\t\t\t});",
                    "\t\t}, false);",
                    "\t};",
                    "\tPrism.plugins.Previewer = Previewer;",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\tfor (var previewer in previewers) {",
                    "\t\t\tvar languages = previewers[previewer].languages;",
                    "\t\t\tif (env.language && languages[env.language] && !languages[env.language].initialized) {",
                    "\t\t\t\tvar lang = languages[env.language];",
                    "\t\t\t\tif (!Array.isArray(lang)) {",
                    "\t\t\t\t\tlang = [lang];",
                    "\t\t\t\t}",
                    "\t\t\t\tlang.forEach(function (lang) {",
                    "\t\t\t\t\tvar before, inside, root, skip;",
                    "\t\t\t\t\tif (lang === true) {",
                    "\t\t\t\t\t\tbefore = 'important';",
                    "\t\t\t\t\t\tinside = env.language;",
                    "\t\t\t\t\t\tlang = env.language;",
                    "\t\t\t\t\t} else {",
                    "\t\t\t\t\t\tbefore = lang.before || 'important';",
                    "\t\t\t\t\t\tinside = lang.inside || lang.lang;",
                    "\t\t\t\t\t\troot = lang.root || Prism.languages;",
                    "\t\t\t\t\t\tskip = lang.skip;",
                    "\t\t\t\t\t\tlang = env.language;",
                    "\t\t\t\t\t}",
                    "",
                    "\t\t\t\t\tif (!skip && Prism.languages[lang]) {",
                    "\t\t\t\t\t\tPrism.languages.insertBefore(inside, before, previewers[previewer].tokens, root);",
                    "\t\t\t\t\t\tenv.grammar = Prism.languages[lang];",
                    "",
                    "\t\t\t\t\t\tlanguages[env.language] = {initialized: true};",
                    "\t\t\t\t\t}",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "\t\t}",
                    "\t});",
                    "",
                    "\t// Initialize the previewers only when needed",
                    "\tPrism.hooks.add('after-highlight', function (env) {",
                    "\t\tif(Previewer.byLanguages['*'] || Previewer.byLanguages[env.language]) {",
                    "\t\t\tPreviewer.initEvents(env.element, env.language);",
                    "\t\t}",
                    "\t});",
                    "",
                    "\tfor (var previewer in previewers) {",
                    "\t\tpreviewers[previewer].create();",
                    "\t}",
                    "",
                    "}());"
                ]
            },
            "prism-previewers.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&self.document&&Function.prototype.bind){var r,s,o={gradient:{create:(r={},s=function(e){if(r[e])return r[e];var s=e.match(/^(\\b|\\B-[a-z]{1,10}-)((?:repeating-)?(?:linear|radial)-gradient)/),i=s&&s[1],t=s&&s[2],a=e.replace(/^(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\(|\\)$/g,\"\").split(/\\s*,\\s*/);return 0<=t.indexOf(\"linear\")?r[e]=function(e,s,i){var t=\"180deg\";return/^(?:-?\\d*\\.?\\d+(?:deg|rad)|to\\b|top|right|bottom|left)/.test(i[0])&&(t=i.shift()).indexOf(\"to \")<0&&(0<=t.indexOf(\"top\")?t=0<=t.indexOf(\"left\")?\"to bottom right\":0<=t.indexOf(\"right\")?\"to bottom left\":\"to bottom\":0<=t.indexOf(\"bottom\")?t=0<=t.indexOf(\"left\")?\"to top right\":0<=t.indexOf(\"right\")?\"to top left\":\"to top\":0<=t.indexOf(\"left\")?t=\"to right\":0<=t.indexOf(\"right\")?t=\"to left\":e&&(0<=t.indexOf(\"deg\")?t=90-parseFloat(t)+\"deg\":0<=t.indexOf(\"rad\")&&(t=Math.PI/2-parseFloat(t)+\"rad\"))),s+\"(\"+t+\",\"+i.join(\",\")+\")\"}(i,t,a):0<=t.indexOf(\"radial\")?r[e]=function(e,s,i){if(i[0].indexOf(\"at\")<0){var t=\"center\",a=\"ellipse\",r=\"farthest-corner\";if(/\\bcenter|top|right|bottom|left\\b|^\\d+/.test(i[0])&&(t=i.shift().replace(/\\s*-?\\d+(?:rad|deg)\\s*/,\"\")),/\\bcircle|ellipse|closest|farthest|contain|cover\\b/.test(i[0])){var n=i.shift().split(/\\s+/);!n[0]||\"circle\"!==n[0]&&\"ellipse\"!==n[0]||(a=n.shift()),n[0]&&(r=n.shift()),\"cover\"===r?r=\"farthest-corner\":\"contain\"===r&&(r=\"clothest-side\")}return s+\"(\"+a+\" \"+r+\" at \"+t+\",\"+i.join(\",\")+\")\"}return s+\"(\"+i.join(\",\")+\")\"}(0,t,a):r[e]=t+\"(\"+a.join(\",\")+\")\"},function(){new Prism.plugins.Previewer(\"gradient\",function(e){return this.firstChild.style.backgroundImage=\"\",this.firstChild.style.backgroundImage=s(e),!!this.firstChild.style.backgroundImage},\"*\",function(){this._elt.innerHTML=\"<div></div>\"})}),tokens:{gradient:{pattern:/(?:\\b|\\B-[a-z]{1,10}-)(?:repeating-)?(?:linear|radial)-gradient\\((?:(?:rgb|hsl)a?\\(.+?\\)|[^\\)])+\\)/gi,inside:{function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,sass:[{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},angle:{create:function(){new Prism.plugins.Previewer(\"angle\",function(e){var s,i,t=parseFloat(e),a=e.match(/[a-z]+$/i);if(!t||!a)return!1;switch(a=a[0]){case\"deg\":s=360;break;case\"grad\":s=400;break;case\"rad\":s=2*Math.PI;break;case\"turn\":s=1}return i=100*t/s,i%=100,this[(t<0?\"set\":\"remove\")+\"Attribute\"](\"data-negative\",\"\"),this.querySelector(\"circle\").style.strokeDasharray=Math.abs(i)+\",500\",!0},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>'})},tokens:{angle:/(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+(?:deg|g?rad|turn)\\b/i},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]},{lang:\"sass\",before:\"operator\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"func\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},color:{create:function(){new Prism.plugins.Previewer(\"color\",function(e){return this.style.backgroundColor=\"\",this.style.backgroundColor=e,!!this.style.backgroundColor})},tokens:{color:{pattern:/\\B#(?:[0-9a-f]{3}){1,2}\\b|\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B|\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,inside:{function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},easing:{create:function(){new Prism.plugins.Previewer(\"easing\",function(e){var s=(e={linear:\"0,0,1,1\",ease:\".25,.1,.25,1\",\"ease-in\":\".42,0,1,1\",\"ease-out\":\"0,0,.58,1\",\"ease-in-out\":\".42,0,.58,1\"}[e]||e).match(/-?\\d*\\.?\\d+/g);if(4!==s.length)return!1;s=s.map(function(e,s){return 100*(s%2?1-e:e)}),this.querySelector(\"path\").setAttribute(\"d\",\"M0,100 C\"+s[0]+\",\"+s[1]+\", \"+s[2]+\",\"+s[3]+\", 100,0\");var i=this.querySelectorAll(\"line\");return i[0].setAttribute(\"x2\",s[0]),i[0].setAttribute(\"y2\",s[1]),i[1].setAttribute(\"x2\",s[2]),i[1].setAttribute(\"y2\",s[3]),!0},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"-20 -20 140 140\" width=\"100\" height=\"100\"><defs><marker id=\"prism-previewer-easing-marker\" viewBox=\"0 0 4 4\" refX=\"2\" refY=\"2\" markerUnits=\"strokeWidth\"><circle cx=\"2\" cy=\"2\" r=\"1.5\" /></marker></defs><path d=\"M0,100 C20,50, 40,30, 100,0\" /><line x1=\"0\" y1=\"100\" x2=\"20\" y2=\"50\" marker-start=\"url('+location.href+'#prism-previewer-easing-marker)\" marker-end=\"url('+location.href+'#prism-previewer-easing-marker)\" /><line x1=\"100\" y1=\"0\" x2=\"40\" y2=\"30\" marker-start=\"url('+location.href+'#prism-previewer-easing-marker)\" marker-end=\"url('+location.href+'#prism-previewer-easing-marker)\" /></svg>'})},tokens:{easing:{pattern:/\\bcubic-bezier\\((?:-?\\d*\\.?\\d+,\\s*){3}-?\\d*\\.?\\d+\\)\\B|\\b(?:linear|ease(?:-in)?(?:-out)?)(?=\\s|[;}]|$)/i,inside:{function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}},languages:{css:!0,less:!0,sass:[{lang:\"sass\",inside:\"inside\",before:\"punctuation\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]},{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}},time:{create:function(){new Prism.plugins.Previewer(\"time\",function(e){var s=parseFloat(e),i=e.match(/[a-z]+$/i);return!(!s||!i)&&(i=i[0],this.querySelector(\"circle\").style.animationDuration=2*s+i,!0)},\"*\",function(){this._elt.innerHTML='<svg viewBox=\"0 0 64 64\"><circle r=\"16\" cy=\"32\" cx=\"32\"></circle></svg>'})},tokens:{time:/(?:\\b|\\B-|(?=\\B\\.))\\d*\\.?\\d+m?s\\b/i},languages:{css:!0,less:!0,markup:{lang:\"markup\",before:\"punctuation\",inside:\"inside\",root:Prism.languages.markup&&Prism.languages.markup.tag.inside[\"attr-value\"]},sass:[{lang:\"sass\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"property-line\"]},{lang:\"sass\",before:\"operator\",inside:\"inside\",root:Prism.languages.sass&&Prism.languages.sass[\"variable-line\"]}],scss:!0,stylus:[{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"property-declaration\"].inside},{lang:\"stylus\",before:\"hexcode\",inside:\"rest\",root:Prism.languages.stylus&&Prism.languages.stylus[\"variable-declaration\"].inside}]}}},i=/(?:^|\\s)token(?=$|\\s)/,e=/(?:^|\\s)active(?=$|\\s)/g,t=/(?:^|\\s)flipped(?=$|\\s)/g,n=function(e,s,i,t){this._elt=null,this._type=e,this._clsRegexp=RegExp(\"(?:^|\\\\s)\"+e+\"(?=$|\\\\s)\"),this._token=null,this.updater=s,this._mouseout=this.mouseout.bind(this),this.initializer=t;var a=this;i||(i=[\"*\"]),Array.isArray(i)||(i=[i]),i.forEach(function(e){\"string\"!=typeof e&&(e=e.lang),n.byLanguages[e]||(n.byLanguages[e]=[]),n.byLanguages[e].indexOf(a)<0&&n.byLanguages[e].push(a)}),n.byType[e]=this};for(var a in n.prototype.init=function(){this._elt||(this._elt=document.createElement(\"div\"),this._elt.className=\"prism-previewer prism-previewer-\"+this._type,document.body.appendChild(this._elt),this.initializer&&this.initializer())},n.prototype.isDisabled=function(e){do{if(e.hasAttribute&&e.hasAttribute(\"data-previewers\"))return-1===(e.getAttribute(\"data-previewers\")||\"\").split(/\\s+/).indexOf(this._type)}while(e=e.parentNode);return!1},n.prototype.check=function(e){if(!i.test(e.className)||!this.isDisabled(e)){do{if(i.test(e.className)&&this._clsRegexp.test(e.className))break}while(e=e.parentNode);e&&e!==this._token&&(this._token=e,this.show())}},n.prototype.mouseout=function(){this._token.removeEventListener(\"mouseout\",this._mouseout,!1),this._token=null,this.hide()},n.prototype.show=function(){if(this._elt||this.init(),this._token)if(this.updater.call(this._elt,this._token.textContent)){this._token.addEventListener(\"mouseout\",this._mouseout,!1);var e=function(e){var s=e.getBoundingClientRect(),i=s.left,t=s.top,a=document.documentElement.getBoundingClientRect();return i-=a.left,{top:t-=a.top,right:innerWidth-i-s.width,bottom:innerHeight-t-s.height,left:i,width:s.width,height:s.height}}(this._token);this._elt.className+=\" active\",0<e.top-this._elt.offsetHeight?(this._elt.className=this._elt.className.replace(t,\"\"),this._elt.style.top=e.top+\"px\",this._elt.style.bottom=\"\"):(this._elt.className+=\" flipped\",this._elt.style.bottom=e.bottom+\"px\",this._elt.style.top=\"\"),this._elt.style.left=e.left+Math.min(200,e.width/2)+\"px\"}else this.hide()},n.prototype.hide=function(){this._elt.className=this._elt.className.replace(e,\"\")},n.byLanguages={},n.byType={},n.initEvents=function(e,s){var i=[];n.byLanguages[s]&&(i=i.concat(n.byLanguages[s])),n.byLanguages[\"*\"]&&(i=i.concat(n.byLanguages[\"*\"])),e.addEventListener(\"mouseover\",function(e){var s=e.target;i.forEach(function(e){e.check(s)})},!1)},Prism.plugins.Previewer=n,Prism.hooks.add(\"before-highlight\",function(r){for(var n in o){var l=o[n].languages;if(r.language&&l[r.language]&&!l[r.language].initialized){var e=l[r.language];Array.isArray(e)||(e=[e]),e.forEach(function(e){var s,i,t,a;e=(!0===e?(s=\"important\",i=r.language):(s=e.before||\"important\",i=e.inside||e.lang,t=e.root||Prism.languages,a=e.skip),r.language),!a&&Prism.languages[e]&&(Prism.languages.insertBefore(i,s,o[n].tokens,t),r.grammar=Prism.languages[e],l[r.language]={initialized:!0})})}}}),Prism.hooks.add(\"after-highlight\",function(e){(n.byLanguages[\"*\"]||n.byLanguages[e.language])&&n.initEvents(e.element,e.language)}),o)o[a].create()}}();"
                ]
            }
        },
        "remove-initial-line-feed": {
            "index.html": {},
            "prism-remove-initial-line-feed.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function() {",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\treturn;",
                    "}",
                    "",
                    "Prism.hooks.add('before-sanity-check', function (env) {",
                    "\tif (env.code) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tvar clsReg = /(?:^|\\s)keep-initial-line-feed(?:\\s|$)/;",
                    "\t\tif (",
                    "\t\t\tpre && pre.nodeName.toLowerCase() === 'pre' &&",
                    "\t\t\t// Apply only if nor the <pre> or the <code> have the class",
                    "\t\t\t(!clsReg.test(pre.className) && !clsReg.test(env.element.className))",
                    "\t\t) {",
                    "\t\t\tenv.code = env.code.replace(/^(?:\\r?\\n|\\r)/, '');",
                    "\t\t}",
                    "\t}",
                    "});",
                    "",
                    "}());"
                ]
            },
            "prism-remove-initial-line-feed.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&self.Prism&&self.document&&Prism.hooks.add(\"before-sanity-check\",function(e){if(e.code){var s=e.element.parentNode,n=/(?:^|\\s)keep-initial-line-feed(?:\\s|$)/;!s||\"pre\"!==s.nodeName.toLowerCase()||n.test(s.className)||n.test(e.element.className)||(e.code=e.code.replace(/^(?:\\r?\\n|\\r)/,\"\"))}});"
                ]
            }
        },
        "show-invisibles": {
            "index.html": {},
            "prism-show-invisibles.css": {},
            "prism-show-invisibles.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (",
                    "\t\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\t\ttypeof global !== 'undefined' && !global.Prism",
                    "\t) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "",
                    "\tvar invisibles = {",
                    "\t\t'tab': /\\t/,",
                    "\t\t'crlf': /\\r\\n/,",
                    "\t\t'lf': /\\n/,",
                    "\t\t'cr': /\\r/,",
                    "\t\t'space': / /",
                    "\t};",
                    "",
                    "",
                    "\t/**",
                    "\t * Handles the recursive calling of `addInvisibles` for one token.",
                    "\t *",
                    "\t * @param {Object|Array} tokens The grammar or array which contains the token.",
                    "\t * @param {string|number} name The name or index of the token in `tokens`.",
                    "\t */",
                    "\tfunction handleToken(tokens, name) {",
                    "\t\tvar value = tokens[name];",
                    "",
                    "\t\tvar type = Prism.util.type(value);",
                    "\t\tswitch (type) {",
                    "\t\t\tcase 'RegExp':",
                    "\t\t\t\tvar inside = {};",
                    "\t\t\t\ttokens[name] = {",
                    "\t\t\t\t\tpattern: value,",
                    "\t\t\t\t\tinside: inside",
                    "\t\t\t\t};",
                    "\t\t\t\taddInvisibles(inside);",
                    "\t\t\t\tbreak;",
                    "",
                    "\t\t\tcase 'Array':",
                    "\t\t\t\tfor (var i = 0, l = value.length; i < l; i++) {",
                    "\t\t\t\t\thandleToken(value, i);",
                    "\t\t\t\t}",
                    "\t\t\t\tbreak;",
                    "",
                    "\t\t\tdefault: // 'Object'",
                    "\t\t\t\tvar inside = value.inside || (value.inside = {});",
                    "\t\t\t\taddInvisibles(inside);",
                    "\t\t\t\tbreak;",
                    "\t\t}",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Recursively adds patterns to match invisible characters to the given grammar (if not added already).",
                    "\t *",
                    "\t * @param {Object} grammar",
                    "\t */",
                    "\tfunction addInvisibles(grammar) {",
                    "\t\tif (!grammar || grammar['tab']) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// assign invisibles here to \"mark\" the grammar in case of self references",
                    "\t\tfor (var name in invisibles) {",
                    "\t\t\tif (invisibles.hasOwnProperty(name)) {",
                    "\t\t\t\tgrammar[name] = invisibles[name];",
                    "\t\t\t}",
                    "\t\t}",
                    "",
                    "\t\tfor (var name in grammar) {",
                    "\t\t\tif (grammar.hasOwnProperty(name) && !invisibles[name]) {",
                    "\t\t\t\tif (name === 'rest') {",
                    "\t\t\t\t\taddInvisibles(grammar['rest']);",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\thandleToken(grammar, name);",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t}",
                    "\t}",
                    "",
                    "\tPrism.hooks.add('before-highlight', function (env) {",
                    "\t\taddInvisibles(env.grammar);",
                    "\t});",
                    "})();"
                ]
            },
            "prism-show-invisibles.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){var i={tab:/\\t/,crlf:/\\r\\n/,lf:/\\n/,cr:/\\r/,space:/ /};Prism.hooks.add(\"before-highlight\",function(r){s(r.grammar)})}function f(r,e){var i=r[e];switch(Prism.util.type(i)){case\"RegExp\":var a={};r[e]={pattern:i,inside:a},s(a);break;case\"Array\":for(var n=0,t=i.length;n<t;n++)f(i,n);break;default:s(a=i.inside||(i.inside={}))}}function s(r){if(r&&!r.tab){for(var e in i)i.hasOwnProperty(e)&&(r[e]=i[e]);for(var e in r)r.hasOwnProperty(e)&&!i[e]&&(\"rest\"===e?s(r.rest):f(r,e))}}}();"
                ]
            }
        },
        "show-language": {
            "index.html": {},
            "prism-show-language.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\treturn;",
                    "}",
                    "",
                    "if (!Prism.plugins.toolbar) {",
                    "\tconsole.warn('Show Languages plugin loaded before Toolbar plugin.');",
                    "",
                    "\treturn;",
                    "}",
                    "",
                    "// The languages map is built automatically with gulp",
                    "var Languages = /*languages_placeholder[*/{\"html\":\"HTML\",\"xml\":\"XML\",\"svg\":\"SVG\",\"mathml\":\"MathML\",\"css\":\"CSS\",\"clike\":\"C-like\",\"js\":\"JavaScript\",\"abap\":\"ABAP\",\"abnf\":\"Augmented Backus–Naur form\",\"apacheconf\":\"Apache Configuration\",\"apl\":\"APL\",\"arff\":\"ARFF\",\"asciidoc\":\"AsciiDoc\",\"adoc\":\"AsciiDoc\",\"asm6502\":\"6502 Assembly\",\"aspnet\":\"ASP.NET (C#)\",\"autohotkey\":\"AutoHotkey\",\"autoit\":\"AutoIt\",\"shell\":\"Bash\",\"basic\":\"BASIC\",\"bnf\":\"Backus–Naur form\",\"rbnf\":\"Routing Backus–Naur form\",\"csharp\":\"C#\",\"dotnet\":\"C#\",\"cpp\":\"C++\",\"cil\":\"CIL\",\"coffee\":\"CoffeeScript\",\"cmake\":\"CMake\",\"csp\":\"Content-Security-Policy\",\"css-extras\":\"CSS Extras\",\"django\":\"Django/Jinja2\",\"jinja2\":\"Django/Jinja2\",\"dockerfile\":\"Docker\",\"ebnf\":\"Extended Backus–Naur form\",\"ejs\":\"EJS\",\"erb\":\"ERB\",\"fsharp\":\"F#\",\"gcode\":\"G-code\",\"gedcom\":\"GEDCOM\",\"glsl\":\"GLSL\",\"gml\":\"GameMaker Language\",\"gamemakerlanguage\":\"GameMaker Language\",\"graphql\":\"GraphQL\",\"hs\":\"Haskell\",\"hcl\":\"HCL\",\"http\":\"HTTP\",\"hpkp\":\"HTTP Public-Key-Pins\",\"hsts\":\"HTTP Strict-Transport-Security\",\"ichigojam\":\"IchigoJam\",\"inform7\":\"Inform 7\",\"javadoc\":\"JavaDoc\",\"javadoclike\":\"JavaDoc-like\",\"javastacktrace\":\"Java stack trace\",\"jsdoc\":\"JSDoc\",\"js-extras\":\"JS Extras\",\"json\":\"JSON\",\"jsonp\":\"JSONP\",\"json5\":\"JSON5\",\"latex\":\"LaTeX\",\"emacs\":\"Lisp\",\"elisp\":\"Lisp\",\"emacs-lisp\":\"Lisp\",\"lolcode\":\"LOLCODE\",\"md\":\"Markdown\",\"markup-templating\":\"Markup templating\",\"matlab\":\"MATLAB\",\"mel\":\"MEL\",\"n1ql\":\"N1QL\",\"n4js\":\"N4JS\",\"n4jsd\":\"N4JS\",\"nand2tetris-hdl\":\"Nand To Tetris HDL\",\"nasm\":\"NASM\",\"nginx\":\"nginx\",\"nsis\":\"NSIS\",\"objectivec\":\"Objective-C\",\"ocaml\":\"OCaml\",\"opencl\":\"OpenCL\",\"parigp\":\"PARI/GP\",\"objectpascal\":\"Object Pascal\",\"php\":\"PHP\",\"phpdoc\":\"PHPDoc\",\"php-extras\":\"PHP Extras\",\"plsql\":\"PL/SQL\",\"powershell\":\"PowerShell\",\"properties\":\".properties\",\"protobuf\":\"Protocol Buffers\",\"py\":\"Python\",\"q\":\"Q (kdb+ database)\",\"jsx\":\"React JSX\",\"tsx\":\"React TSX\",\"renpy\":\"Ren'py\",\"rest\":\"reST (reStructuredText)\",\"rb\":\"Ruby\",\"sas\":\"SAS\",\"sass\":\"Sass (Sass)\",\"scss\":\"Sass (Scss)\",\"sql\":\"SQL\",\"soy\":\"Soy (Closure Template)\",\"tap\":\"TAP\",\"toml\":\"TOML\",\"tt2\":\"Template Toolkit 2\",\"ts\":\"TypeScript\",\"t4-cs\":\"T4 Text Templates (C#)\",\"t4\":\"T4 Text Templates (C#)\",\"t4-vb\":\"T4 Text Templates (VB)\",\"t4-templating\":\"T4 templating\",\"vbnet\":\"VB.Net\",\"vhdl\":\"VHDL\",\"vim\":\"vim\",\"visual-basic\":\"Visual Basic\",\"vb\":\"Visual Basic\",\"wasm\":\"WebAssembly\",\"wiki\":\"Wiki markup\",\"xeoracube\":\"XeoraCube\",\"xojo\":\"Xojo (REALbasic)\",\"xquery\":\"XQuery\",\"yaml\":\"YAML\",\"yml\":\"YAML\"}/*]*/;",
                    "",
                    "Prism.plugins.toolbar.registerButton('show-language', function(env) {",
                    "\tvar pre = env.element.parentNode;",
                    "\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\t/**",
                    "\t * Tries to guess the name of a language given its id.",
                    "\t *",
                    "\t * @param {string} id The language id.",
                    "\t * @returns {string}",
                    "\t */",
                    "\tfunction guessTitle(id) {",
                    "\t\tif (!id) {",
                    "\t\t\treturn id;",
                    "\t\t}",
                    "\t\treturn (id.substring(0, 1).toUpperCase() + id.substring(1)).replace(/s(?=cript)/, 'S');",
                    "\t}",
                    "",
                    "\tvar language = pre.getAttribute('data-language') || Languages[env.language] || guessTitle(env.language);",
                    "",
                    "\tif(!language) {",
                    "\t\treturn;",
                    "\t}",
                    "\tvar element = document.createElement('span');",
                    "\telement.textContent = language;",
                    "",
                    "\treturn element;",
                    "});",
                    "",
                    "})();"
                ]
            },
            "prism-show-language.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document)if(Prism.plugins.toolbar){var r={html:\"HTML\",xml:\"XML\",svg:\"SVG\",mathml:\"MathML\",css:\"CSS\",clike:\"C-like\",js:\"JavaScript\",abap:\"ABAP\",abnf:\"Augmented Backus–Naur form\",apacheconf:\"Apache Configuration\",apl:\"APL\",arff:\"ARFF\",asciidoc:\"AsciiDoc\",adoc:\"AsciiDoc\",asm6502:\"6502 Assembly\",aspnet:\"ASP.NET (C#)\",autohotkey:\"AutoHotkey\",autoit:\"AutoIt\",shell:\"Bash\",basic:\"BASIC\",bnf:\"Backus–Naur form\",rbnf:\"Routing Backus–Naur form\",csharp:\"C#\",dotnet:\"C#\",cpp:\"C++\",cil:\"CIL\",coffee:\"CoffeeScript\",cmake:\"CMake\",csp:\"Content-Security-Policy\",\"css-extras\":\"CSS Extras\",django:\"Django/Jinja2\",jinja2:\"Django/Jinja2\",dockerfile:\"Docker\",ebnf:\"Extended Backus–Naur form\",ejs:\"EJS\",erb:\"ERB\",fsharp:\"F#\",gcode:\"G-code\",gedcom:\"GEDCOM\",glsl:\"GLSL\",gml:\"GameMaker Language\",gamemakerlanguage:\"GameMaker Language\",graphql:\"GraphQL\",hs:\"Haskell\",hcl:\"HCL\",http:\"HTTP\",hpkp:\"HTTP Public-Key-Pins\",hsts:\"HTTP Strict-Transport-Security\",ichigojam:\"IchigoJam\",inform7:\"Inform 7\",javadoc:\"JavaDoc\",javadoclike:\"JavaDoc-like\",javastacktrace:\"Java stack trace\",jsdoc:\"JSDoc\",\"js-extras\":\"JS Extras\",json:\"JSON\",jsonp:\"JSONP\",json5:\"JSON5\",latex:\"LaTeX\",emacs:\"Lisp\",elisp:\"Lisp\",\"emacs-lisp\":\"Lisp\",lolcode:\"LOLCODE\",md:\"Markdown\",\"markup-templating\":\"Markup templating\",matlab:\"MATLAB\",mel:\"MEL\",n1ql:\"N1QL\",n4js:\"N4JS\",n4jsd:\"N4JS\",\"nand2tetris-hdl\":\"Nand To Tetris HDL\",nasm:\"NASM\",nginx:\"nginx\",nsis:\"NSIS\",objectivec:\"Objective-C\",ocaml:\"OCaml\",opencl:\"OpenCL\",parigp:\"PARI/GP\",objectpascal:\"Object Pascal\",php:\"PHP\",phpdoc:\"PHPDoc\",\"php-extras\":\"PHP Extras\",plsql:\"PL/SQL\",powershell:\"PowerShell\",properties:\".properties\",protobuf:\"Protocol Buffers\",py:\"Python\",q:\"Q (kdb+ database)\",jsx:\"React JSX\",tsx:\"React TSX\",renpy:\"Ren'py\",rest:\"reST (reStructuredText)\",rb:\"Ruby\",sas:\"SAS\",sass:\"Sass (Sass)\",scss:\"Sass (Scss)\",sql:\"SQL\",soy:\"Soy (Closure Template)\",tap:\"TAP\",toml:\"TOML\",tt2:\"Template Toolkit 2\",ts:\"TypeScript\",\"t4-cs\":\"T4 Text Templates (C#)\",t4:\"T4 Text Templates (C#)\",\"t4-vb\":\"T4 Text Templates (VB)\",\"t4-templating\":\"T4 templating\",vbnet:\"VB.Net\",vhdl:\"VHDL\",vim:\"vim\",\"visual-basic\":\"Visual Basic\",vb:\"Visual Basic\",wasm:\"WebAssembly\",wiki:\"Wiki markup\",xeoracube:\"XeoraCube\",xojo:\"Xojo (REALbasic)\",xquery:\"XQuery\",yaml:\"YAML\",yml:\"YAML\"};Prism.plugins.toolbar.registerButton(\"show-language\",function(e){var a=e.element.parentNode;if(a&&/pre/i.test(a.nodeName)){var s,t=a.getAttribute(\"data-language\")||r[e.language]||((s=e.language)?(s.substring(0,1).toUpperCase()+s.substring(1)).replace(/s(?=cript)/,\"S\"):s);if(t){var o=document.createElement(\"span\");return o.textContent=t,o}}})}else console.warn(\"Show Languages plugin loaded before Toolbar plugin.\")}();"
                ]
            }
        },
        "toolbar": {
            "index.html": {},
            "prism-toolbar.css": {},
            "prism-toolbar.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar callbacks = [];",
                    "\tvar map = {};",
                    "\tvar noop = function() {};",
                    "",
                    "\tPrism.plugins.toolbar = {};",
                    "",
                    "\t/**",
                    "\t * @typedef ButtonOptions",
                    "\t * @property {string} text The text displayed.",
                    "\t * @property {string} [url] The URL of the link which will be created.",
                    "\t * @property {Function} [onClick] The event listener for the `click` event of the created button.",
                    "\t */",
                    "",
                    "\t/**",
                    "\t * Register a button callback with the toolbar.",
                    "\t *",
                    "\t * @param {string} key",
                    "\t * @param {ButtonOptions|Function} opts",
                    "\t */",
                    "\tvar registerButton = Prism.plugins.toolbar.registerButton = function (key, opts) {",
                    "\t\tvar callback;",
                    "",
                    "\t\tif (typeof opts === 'function') {",
                    "\t\t\tcallback = opts;",
                    "\t\t} else {",
                    "\t\t\tcallback = function (env) {",
                    "\t\t\t\tvar element;",
                    "",
                    "\t\t\t\tif (typeof opts.onClick === 'function') {",
                    "\t\t\t\t\telement = document.createElement('button');",
                    "\t\t\t\t\telement.type = 'button';",
                    "\t\t\t\t\telement.addEventListener('click', function () {",
                    "\t\t\t\t\t\topts.onClick.call(this, env);",
                    "\t\t\t\t\t});",
                    "\t\t\t\t} else if (typeof opts.url === 'string') {",
                    "\t\t\t\t\telement = document.createElement('a');",
                    "\t\t\t\t\telement.href = opts.url;",
                    "\t\t\t\t} else {",
                    "\t\t\t\t\telement = document.createElement('span');",
                    "\t\t\t\t}",
                    "",
                    "\t\t\t\telement.textContent = opts.text;",
                    "",
                    "\t\t\t\treturn element;",
                    "\t\t\t};",
                    "\t\t}",
                    "",
                    "\t\tif (key in map) {",
                    "\t\t\tconsole.warn('There is a button with the key \"' + key + '\" registered already.');",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tcallbacks.push(map[key] = callback);",
                    "\t};",
                    "",
                    "\t/**",
                    "\t * Post-highlight Prism hook callback.",
                    "\t *",
                    "\t * @param env",
                    "\t */",
                    "\tvar hook = Prism.plugins.toolbar.hook = function (env) {",
                    "\t\t// Check if inline or actual code block (credit to line-numbers plugin)",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Autoloader rehighlights, so only do this once.",
                    "\t\tif (pre.parentNode.classList.contains('code-toolbar')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\t// Create wrapper for <pre> to prevent scrolling toolbar with content",
                    "\t\tvar wrapper = document.createElement(\"div\");",
                    "\t\twrapper.classList.add(\"code-toolbar\");",
                    "\t\tpre.parentNode.insertBefore(wrapper, pre);",
                    "\t\twrapper.appendChild(pre);",
                    "",
                    "\t\t// Setup the toolbar",
                    "\t\tvar toolbar = document.createElement('div');",
                    "\t\ttoolbar.classList.add('toolbar');",
                    "",
                    "\t\tif (document.body.hasAttribute('data-toolbar-order')) {",
                    "\t\t\tcallbacks = document.body.getAttribute('data-toolbar-order').split(',').map(function(key) {",
                    "\t\t\t\treturn map[key] || noop;",
                    "\t\t\t});",
                    "\t\t}",
                    "",
                    "\t\tcallbacks.forEach(function(callback) {",
                    "\t\t\tvar element = callback(env);",
                    "",
                    "\t\t\tif (!element) {",
                    "\t\t\t\treturn;",
                    "\t\t\t}",
                    "",
                    "\t\t\tvar item = document.createElement('div');",
                    "\t\t\titem.classList.add('toolbar-item');",
                    "",
                    "\t\t\titem.appendChild(element);",
                    "\t\t\ttoolbar.appendChild(item);",
                    "\t\t});",
                    "",
                    "\t\t// Add our toolbar to the currently created wrapper of <pre> tag",
                    "\t\twrapper.appendChild(toolbar);",
                    "\t};",
                    "",
                    "\tregisterButton('label', function(env) {",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!pre || !/pre/i.test(pre.nodeName)) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tif (!pre.hasAttribute('data-label')) {",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar element, template;",
                    "\t\tvar text = pre.getAttribute('data-label');",
                    "\t\ttry {",
                    "\t\t\t// Any normal text will blow up this selector.",
                    "\t\t\ttemplate = document.querySelector('template#' + text);",
                    "\t\t} catch (e) {}",
                    "",
                    "\t\tif (template) {",
                    "\t\t\telement = template.content;",
                    "\t\t} else {",
                    "\t\t\tif (pre.hasAttribute('data-url')) {",
                    "\t\t\t\telement = document.createElement('a');",
                    "\t\t\t\telement.href = pre.getAttribute('data-url');",
                    "\t\t\t} else {",
                    "\t\t\t\telement = document.createElement('span');",
                    "\t\t\t}",
                    "",
                    "\t\t\telement.textContent = text;",
                    "\t\t}",
                    "",
                    "\t\treturn element;",
                    "\t});",
                    "",
                    "\t/**",
                    "\t * Register the toolbar with Prism.",
                    "\t */",
                    "\tPrism.hooks.add('complete', hook);",
                    "})();"
                ]
            },
            "prism-toolbar.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var r=[],i={},n=function(){};Prism.plugins.toolbar={};var t=Prism.plugins.toolbar.registerButton=function(t,n){var e;e=\"function\"==typeof n?n:function(t){var e;return\"function\"==typeof n.onClick?((e=document.createElement(\"button\")).type=\"button\",e.addEventListener(\"click\",function(){n.onClick.call(this,t)})):\"string\"==typeof n.url?(e=document.createElement(\"a\")).href=n.url:e=document.createElement(\"span\"),e.textContent=n.text,e},t in i?console.warn('There is a button with the key \"'+t+'\" registered already.'):r.push(i[t]=e)},e=Prism.plugins.toolbar.hook=function(a){var t=a.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&!t.parentNode.classList.contains(\"code-toolbar\")){var e=document.createElement(\"div\");e.classList.add(\"code-toolbar\"),t.parentNode.insertBefore(e,t),e.appendChild(t);var o=document.createElement(\"div\");o.classList.add(\"toolbar\"),document.body.hasAttribute(\"data-toolbar-order\")&&(r=document.body.getAttribute(\"data-toolbar-order\").split(\",\").map(function(t){return i[t]||n})),r.forEach(function(t){var e=t(a);if(e){var n=document.createElement(\"div\");n.classList.add(\"toolbar-item\"),n.appendChild(e),o.appendChild(n)}}),e.appendChild(o)}};t(\"label\",function(t){var e=t.element.parentNode;if(e&&/pre/i.test(e.nodeName)&&e.hasAttribute(\"data-label\")){var n,a,o=e.getAttribute(\"data-label\");try{a=document.querySelector(\"template#\"+o)}catch(t){}return a?n=a.content:(e.hasAttribute(\"data-url\")?(n=document.createElement(\"a\")).href=e.getAttribute(\"data-url\"):n=document.createElement(\"span\"),n.textContent=o),n}}),Prism.hooks.add(\"complete\",e)}}();"
                ]
            }
        },
        "unescaped-markup": {
            "index.html": {},
            "prism-unescaped-markup.css": {},
            "prism-unescaped-markup.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function () {",
                    "",
                    "\tif (typeof self === 'undefined' || !self.Prism || !self.document || !Prism.languages.markup) {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tPrism.plugins.UnescapedMarkup = true;",
                    "",
                    "\tPrism.hooks.add('before-highlightall', function (env) {",
                    "\t\tenv.selector += \", [class*='lang-'] script[type='text/plain'], [class*='language-'] script[type='text/plain']\" +",
                    "\t\t                \", script[type='text/plain'][class*='lang-'], script[type='text/plain'][class*='language-']\";",
                    "\t});",
                    "",
                    "\tPrism.hooks.add('before-sanity-check', function (env) {",
                    "\t\tif ((env.element.matches || env.element.msMatchesSelector).call(env.element, \"script[type='text/plain']\")) {",
                    "\t\t\tvar code = document.createElement(\"code\");",
                    "\t\t\tvar pre = document.createElement(\"pre\");",
                    "",
                    "\t\t\tpre.className = code.className = env.element.className;",
                    "",
                    "\t\t\tif (env.element.dataset) {",
                    "\t\t\t\tObject.keys(env.element.dataset).forEach(function (key) {",
                    "\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(env.element.dataset, key)) {",
                    "\t\t\t\t\t\tpre.dataset[key] = env.element.dataset[key];",
                    "\t\t\t\t\t}",
                    "\t\t\t\t});",
                    "\t\t\t}",
                    "",
                    "\t\t\tenv.code = env.code.replace(/&lt;\\/script(>|&gt;)/gi, \"</scri\" + \"pt>\");",
                    "\t\t\tcode.textContent = env.code;",
                    "",
                    "\t\t\tpre.appendChild(code);",
                    "\t\t\tenv.element.parentNode.replaceChild(pre, env.element);",
                    "\t\t\tenv.element = code;",
                    "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tvar pre = env.element.parentNode;",
                    "\t\tif (!env.code && pre && pre.nodeName.toLowerCase() == 'pre' &&",
                    "\t\t\t\tenv.element.childNodes.length && env.element.childNodes[0].nodeName == \"#comment\") {",
                    "\t\t\tenv.element.textContent = env.code = env.element.childNodes[0].textContent;",
                    "\t\t}",
                    "\t});",
                    "}());"
                ]
            },
            "prism-unescaped-markup.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "\"undefined\"!=typeof self&&self.Prism&&self.document&&Prism.languages.markup&&(Prism.plugins.UnescapedMarkup=!0,Prism.hooks.add(\"before-highlightall\",function(e){e.selector+=\", [class*='lang-'] script[type='text/plain'], [class*='language-'] script[type='text/plain'], script[type='text/plain'][class*='lang-'], script[type='text/plain'][class*='language-']\"}),Prism.hooks.add(\"before-sanity-check\",function(t){if((t.element.matches||t.element.msMatchesSelector).call(t.element,\"script[type='text/plain']\")){var e=document.createElement(\"code\");return(a=document.createElement(\"pre\")).className=e.className=t.element.className,t.element.dataset&&Object.keys(t.element.dataset).forEach(function(e){Object.prototype.hasOwnProperty.call(t.element.dataset,e)&&(a.dataset[e]=t.element.dataset[e])}),t.code=t.code.replace(/&lt;\\/script(>|&gt;)/gi,\"<\\/script>\"),e.textContent=t.code,a.appendChild(e),t.element.parentNode.replaceChild(a,t.element),void(t.element=e)}var a=t.element.parentNode;!t.code&&a&&\"pre\"==a.nodeName.toLowerCase()&&t.element.childNodes.length&&\"#comment\"==t.element.childNodes[0].nodeName&&(t.element.textContent=t.code=t.element.childNodes[0].textContent)}));"
                ]
            }
        },
        "wpd": {
            "index.html": {},
            "prism-wpd.css": {},
            "prism-wpd.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "(function(){",
                    "",
                    "if (",
                    "\ttypeof self !== 'undefined' && !self.Prism ||",
                    "\ttypeof global !== 'undefined' && !global.Prism",
                    ") {",
                    "\treturn;",
                    "}",
                    "",
                    "if (Prism.languages.css) {",
                    "\t// check whether the selector is an advanced pattern before extending it",
                    "\tif (Prism.languages.css.selector.pattern)",
                    "\t{",
                    "\t\tPrism.languages.css.selector.inside['pseudo-class'] = /:[\\w-]+/;",
                    "\t\tPrism.languages.css.selector.inside['pseudo-element'] = /::[\\w-]+/;",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tPrism.languages.css.selector = {",
                    "\t\t\tpattern: Prism.languages.css.selector,",
                    "\t\t\tinside: {",
                    "\t\t\t\t'pseudo-class': /:[\\w-]+/,",
                    "\t\t\t\t'pseudo-element': /::[\\w-]+/",
                    "\t\t\t}",
                    "\t\t};",
                    "\t}",
                    "}",
                    "",
                    "if (Prism.languages.markup) {",
                    "\tPrism.languages.markup.tag.inside.tag.inside['tag-id'] = /[\\w-]+/;",
                    "\t",
                    "\tvar Tags = {",
                    "\t\tHTML: {",
                    "\t\t\t'a': 1, 'abbr': 1, 'acronym': 1, 'b': 1, 'basefont': 1, 'bdo': 1, 'big': 1, 'blink': 1, 'cite': 1, 'code': 1, 'dfn': 1, 'em': 1, 'kbd': 1,  'i': 1, ",
                    "\t\t\t'rp': 1, 'rt': 1, 'ruby': 1, 's': 1, 'samp': 1, 'small': 1, 'spacer': 1, 'strike': 1, 'strong': 1, 'sub': 1, 'sup': 1, 'time': 1, 'tt': 1,  'u': 1, ",
                    "\t\t\t'var': 1, 'wbr': 1, 'noframes': 1, 'summary': 1, 'command': 1, 'dt': 1, 'dd': 1, 'figure': 1, 'figcaption': 1, 'center': 1, 'section': 1, 'nav': 1,",
                    "\t\t\t'article': 1, 'aside': 1, 'hgroup': 1, 'header': 1, 'footer': 1, 'address': 1, 'noscript': 1, 'isIndex': 1, 'main': 1, 'mark': 1, 'marquee': 1,",
                    "\t\t\t'meter': 1, 'menu': 1",
                    "\t\t},",
                    "\t\tSVG: {",
                    "\t\t\t'animateColor': 1, 'animateMotion': 1, 'animateTransform': 1, 'glyph': 1, 'feBlend': 1, 'feColorMatrix': 1, 'feComponentTransfer': 1, ",
                    "\t\t\t'feFuncR': 1, 'feFuncG': 1, 'feFuncB': 1, 'feFuncA': 1, 'feComposite': 1, 'feConvolveMatrix': 1, 'feDiffuseLighting': 1, 'feDisplacementMap': 1, ",
                    "\t\t\t'feFlood': 1, 'feGaussianBlur': 1, 'feImage': 1, 'feMerge': 1, 'feMergeNode': 1, 'feMorphology': 1, 'feOffset': 1, 'feSpecularLighting': 1, ",
                    "\t\t\t'feTile': 1, 'feTurbulence': 1, 'feDistantLight': 1, 'fePointLight': 1, 'feSpotLight': 1, 'linearGradient': 1, 'radialGradient': 1, 'altGlyph': 1, ",
                    "\t\t\t'textPath': 1, 'tref': 1, 'altglyph': 1, 'textpath': 1, 'altglyphdef': 1, 'altglyphitem': 1, 'clipPath': 1, 'color-profile': 1, 'cursor': 1,",
                    "\t\t\t'font-face': 1, 'font-face-format': 1, 'font-face-name': 1, 'font-face-src': 1, 'font-face-uri': 1, 'foreignObject': 1, 'glyphRef': 1,",
                    "\t\t\t'hkern': 1, 'vkern': 1",
                    "\t\t},",
                    "\t\tMathML: {}",
                    "\t}",
                    "}",
                    "",
                    "var language;",
                    "",
                    "Prism.hooks.add('wrap', function(env) {",
                    "\tif ((env.type == 'tag-id'",
                    "\t\t|| (env.type == 'property' && env.content.indexOf('-') != 0)",
                    "\t\t|| (env.type == 'rule'&& env.content.indexOf('@-') != 0)",
                    "\t\t|| (env.type == 'pseudo-class'&& env.content.indexOf(':-') != 0) ",
                    "\t\t|| (env.type == 'pseudo-element'&& env.content.indexOf('::-') != 0) ",
                    "        || (env.type == 'attr-name' && env.content.indexOf('data-') != 0)",
                    "\t\t) && env.content.indexOf('<') === -1",
                    "\t) {",
                    "\t\tif (env.language == 'css'",
                    "\t\t\t|| env.language == 'scss'",
                    "\t\t\t|| env.language == 'markup'",
                    "\t\t) {",
                    "\t\t\tvar href = 'https://webplatform.github.io/docs/';",
                    "\t\t\tvar content = env.content;",
                    "",
                    "\t\t\tif (env.language == 'css' || env.language == 'scss') {",
                    "\t\t\t\thref += 'css/';",
                    "",
                    "\t\t\t\tif (env.type == 'property') {",
                    "\t\t\t\t\thref += 'properties/';",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'rule') {",
                    "\t\t\t\t\thref += 'atrules/';",
                    "\t\t\t\t\tcontent = content.substring(1);",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'pseudo-class') {",
                    "\t\t\t\t\thref += 'selectors/pseudo-classes/';",
                    "\t\t\t\t\tcontent = content.substring(1);",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'pseudo-element') {",
                    "\t\t\t\t\thref += 'selectors/pseudo-elements/';",
                    "\t\t\t\t\tcontent = content.substring(2);",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\telse if (env.language == 'markup') {",
                    "\t\t\t\tif (env.type == 'tag-id') {",
                    "\t\t\t\t\t// Check language",
                    "\t\t\t\t\tlanguage = getLanguage(env.content) || language;",
                    "",
                    "\t\t\t\t\tif (language) {",
                    "\t\t\t\t\t\thref += language + '/elements/';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\treturn; // Abort",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t\telse if (env.type == 'attr-name') {",
                    "\t\t\t\t\tif (language) {",
                    "\t\t\t\t\t\thref += language + '/attributes/';",
                    "\t\t\t\t\t}",
                    "\t\t\t\t\telse {",
                    "\t\t\t\t\t\treturn; // Abort",
                    "\t\t\t\t\t}",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "",
                    "\t\t\thref += content;",
                    "\t\t\tenv.tag = 'a';",
                    "\t\t\tenv.attributes.href = href;",
                    "\t\t\tenv.attributes.target = '_blank';",
                    "\t\t}",
                    "\t}",
                    "});",
                    "",
                    "function getLanguage(tag) {",
                    "\tvar tagL = tag.toLowerCase();",
                    "\t",
                    "\tif (Tags.HTML[tagL]) {",
                    "\t\treturn 'html';",
                    "\t}",
                    "\telse if (Tags.SVG[tag]) {",
                    "\t\treturn 'svg';",
                    "\t}",
                    "\telse if (Tags.MathML[tag]) {",
                    "\t\treturn 'mathml';",
                    "\t}",
                    "\t",
                    "\t// Not in dictionary, perform check",
                    "\tif (Tags.HTML[tagL] !== 0 && typeof document !== 'undefined') {",
                    "\t\tvar htmlInterface = (document.createElement(tag).toString().match(/\\[object HTML(.+)Element\\]/) || [])[1];",
                    "\t\t",
                    "\t\tif (htmlInterface && htmlInterface != 'Unknown') {",
                    "\t\t\tTags.HTML[tagL] = 1;",
                    "\t\t\treturn 'html';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.HTML[tagL] = 0;",
                    "\t",
                    "\tif (Tags.SVG[tag] !== 0 && typeof document !== 'undefined') {",
                    "\t\tvar svgInterface = (document.createElementNS('http://www.w3.org/2000/svg', tag).toString().match(/\\[object SVG(.+)Element\\]/) || [])[1];",
                    "\t\t",
                    "\t\tif (svgInterface && svgInterface != 'Unknown') {",
                    "\t\t\tTags.SVG[tag] = 1;",
                    "\t\t\treturn 'svg';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.SVG[tag] = 0;",
                    "\t",
                    "\t// Lame way to detect MathML, but browsers don’t expose interface names there :(",
                    "\tif (Tags.MathML[tag] !== 0) {",
                    "\t\tif (tag.indexOf('m') === 0) {",
                    "\t\t\tTags.MathML[tag] = 1;",
                    "\t\t\treturn 'mathml';",
                    "\t\t}",
                    "\t}",
                    "\t",
                    "\tTags.MathML[tag] = 0;",
                    "\t",
                    "\treturn null;",
                    "}",
                    "",
                    "})();"
                ]
            },
            "prism-wpd.min.js": {
                "classes": [],
                "functions": [],
                "text": [
                    "!function(){if((\"undefined\"==typeof self||self.Prism)&&(\"undefined\"==typeof global||global.Prism)){if(Prism.languages.css&&(Prism.languages.css.selector.pattern?(Prism.languages.css.selector.inside[\"pseudo-class\"]=/:[\\w-]+/,Prism.languages.css.selector.inside[\"pseudo-element\"]=/::[\\w-]+/):Prism.languages.css.selector={pattern:Prism.languages.css.selector,inside:{\"pseudo-class\":/:[\\w-]+/,\"pseudo-element\":/::[\\w-]+/}}),Prism.languages.markup){Prism.languages.markup.tag.inside.tag.inside[\"tag-id\"]=/[\\w-]+/;var s={HTML:{a:1,abbr:1,acronym:1,b:1,basefont:1,bdo:1,big:1,blink:1,cite:1,code:1,dfn:1,em:1,kbd:1,i:1,rp:1,rt:1,ruby:1,s:1,samp:1,small:1,spacer:1,strike:1,strong:1,sub:1,sup:1,time:1,tt:1,u:1,var:1,wbr:1,noframes:1,summary:1,command:1,dt:1,dd:1,figure:1,figcaption:1,center:1,section:1,nav:1,article:1,aside:1,hgroup:1,header:1,footer:1,address:1,noscript:1,isIndex:1,main:1,mark:1,marquee:1,meter:1,menu:1},SVG:{animateColor:1,animateMotion:1,animateTransform:1,glyph:1,feBlend:1,feColorMatrix:1,feComponentTransfer:1,feFuncR:1,feFuncG:1,feFuncB:1,feFuncA:1,feComposite:1,feConvolveMatrix:1,feDiffuseLighting:1,feDisplacementMap:1,feFlood:1,feGaussianBlur:1,feImage:1,feMerge:1,feMergeNode:1,feMorphology:1,feOffset:1,feSpecularLighting:1,feTile:1,feTurbulence:1,feDistantLight:1,fePointLight:1,feSpotLight:1,linearGradient:1,radialGradient:1,altGlyph:1,textPath:1,tref:1,altglyph:1,textpath:1,altglyphdef:1,altglyphitem:1,clipPath:1,\"color-profile\":1,cursor:1,\"font-face\":1,\"font-face-format\":1,\"font-face-name\":1,\"font-face-src\":1,\"font-face-uri\":1,foreignObject:1,glyphRef:1,hkern:1,vkern:1},MathML:{}}}var a;Prism.hooks.add(\"wrap\",function(e){if((\"tag-id\"==e.type||\"property\"==e.type&&0!=e.content.indexOf(\"-\")||\"rule\"==e.type&&0!=e.content.indexOf(\"@-\")||\"pseudo-class\"==e.type&&0!=e.content.indexOf(\":-\")||\"pseudo-element\"==e.type&&0!=e.content.indexOf(\"::-\")||\"attr-name\"==e.type&&0!=e.content.indexOf(\"data-\"))&&-1===e.content.indexOf(\"<\")&&(\"css\"==e.language||\"scss\"==e.language||\"markup\"==e.language)){var t=\"https://webplatform.github.io/docs/\",n=e.content;if(\"css\"==e.language||\"scss\"==e.language)t+=\"css/\",\"property\"==e.type?t+=\"properties/\":\"rule\"==e.type?(t+=\"atrules/\",n=n.substring(1)):\"pseudo-class\"==e.type?(t+=\"selectors/pseudo-classes/\",n=n.substring(1)):\"pseudo-element\"==e.type&&(t+=\"selectors/pseudo-elements/\",n=n.substring(2));else if(\"markup\"==e.language)if(\"tag-id\"==e.type){if(!(a=function(e){var t=e.toLowerCase();{if(s.HTML[t])return\"html\";if(s.SVG[e])return\"svg\";if(s.MathML[e])return\"mathml\"}if(0!==s.HTML[t]&&\"undefined\"!=typeof document){var n=(document.createElement(e).toString().match(/\\[object HTML(.+)Element\\]/)||[])[1];if(n&&\"Unknown\"!=n)return s.HTML[t]=1,\"html\"}if((s.HTML[t]=0)!==s.SVG[e]&&\"undefined\"!=typeof document){var a=(document.createElementNS(\"http://www.w3.org/2000/svg\",e).toString().match(/\\[object SVG(.+)Element\\]/)||[])[1];if(a&&\"Unknown\"!=a)return s.SVG[e]=1,\"svg\"}if((s.SVG[e]=0)!==s.MathML[e]&&0===e.indexOf(\"m\"))return s.MathML[e]=1,\"mathml\";return s.MathML[e]=0,null}(e.content)||a))return;t+=a+\"/elements/\"}else if(\"attr-name\"==e.type){if(!a)return;t+=a+\"/attributes/\"}t+=n,e.tag=\"a\",e.attributes.href=t,e.attributes.target=\"_blank\"}})}}();"
                ]
            }
        }
    },
    "templates": {
        "footer.html": {},
        "header-download.html": {},
        "header-main.html": {},
        "header-plugins.html": {}
    },
    "themes": {
        "prism-coy.css": {},
        "prism-dark.css": {},
        "prism-funky.css": {},
        "prism-okaidia.css": {},
        "prism-solarizedlight.css": {},
        "prism-tomorrow.css": {},
        "prism-twilight.css": {},
        "prism.css": {}
    }
}