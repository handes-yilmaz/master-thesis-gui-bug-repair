{
    "1": {
        "bug_file": "src/js/components/Calendar/Calendar.js",
        "compressed": "NO",
        "line_numbers": 281,
        "compressed_line_numbers": 281,
        "compressed_bug_file_content": "import React, { Component } from 'react';\n// import { findDOMNode } from 'react-dom';\nimport { compose } from 'recompose';\n\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Keyboard } from '../Keyboard';\nimport { Heading } from '../Heading';\nimport { Text } from '../Text';\n\nimport { withTheme } from '../hocs';\n\nimport StyledCalendar, {\n  StyledDay, StyledDayContainer, StyledWeek, StyledWeeks, StyledWeeksContainer,\n} from './StyledCalendar';\nimport doc from './doc';\nimport {\n  addDays, addMonths, betweenDates, daysApart, sameDay,\n  subtractDays, subtractMonths, withinDates,\n} from './utils';\n\nconst buildStartEnd = (reference, firstDayOfWeek) => {\n  let start = new Date(reference);\n  start.setDate(1); // first of month\n  start = subtractDays(start, start.getDay() - firstDayOfWeek); // beginning of week\n  const end = addDays(start, (7 * 5) + 6); // 5 weeks to end of week\n  return { start, end };\n};\n\nconst buildState = (props) => {\n  const { date, dates, firstDayOfWeek } = props;\n  let reference;\n  if (date) {\n    reference = new Date(date);\n  } else if (dates && dates.length > 0) {\n    if (typeof dates[0] === 'string') {\n      reference = new Date(dates[0]);\n    } else if (Array.isArray(dates[0])) {\n      reference = new Date(dates[0][0]);\n    } else {\n      reference = new Date();\n    }\n  } else {\n    reference = new Date();\n  }\n  return {\n    ...buildStartEnd(reference, firstDayOfWeek),\n    reference,\n    active: new Date(reference),\n  };\n};\n\nclass Calendar extends Component {\n  static defaultProps = {\n    firstDayOfWeek: 0,\n    size: 'medium',\n    locale: 'en-US',\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { reference } = prevState;\n    if (!reference) {\n      return buildState(nextProps);\n    }\n    return null;\n  }\n\n  state = {}\n\n  // componentDidUpdate() {\n  //   if (this.setFocus) {\n  //     this.setFocus = false;\n  //     // if (this.activeRef) {\n  //     //   findDOMNode(this.activeRef).focus();\n  //     // }\n  //   }\n  // }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  setReference = (reference) => {\n    const { bounds, firstDayOfWeek } = this.props;\n    const { start, end } = this.state;\n    if (betweenDates(reference, bounds)) {\n      const nextStartEnd = buildStartEnd(reference, firstDayOfWeek);\n      const nextState = {\n        reference,\n        active: undefined,\n      };\n      if (nextStartEnd.start.getTime() < start.getTime()) {\n        nextState.start = nextStartEnd.start;\n        nextState.slide = {\n          direction: 'down',\n          weeks: daysApart(start, nextStartEnd.start) / 7,\n        };\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() =>\n          this.setState({ end: nextStartEnd.end, slide: undefined }), 1000);\n      } else if (nextStartEnd.end.getTime() > end.getTime()) {\n        nextState.end = nextStartEnd.end;\n        nextState.slide = {\n          direction: 'up',\n          weeks: daysApart(nextStartEnd.end, end) / 7,\n        };\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() =>\n          this.setState({ start: nextStartEnd.start, slide: undefined }), 1000);\n      }\n      this.setState(nextState);\n    }\n  }\n\n  setActive = (active) => {\n    const { bounds } = this.props;\n    const { start, reference, end } = this.state;\n    if (betweenDates(active, bounds)) {\n      const nextState = { active };\n      if (active.getTime() < start.getTime()) {\n        nextState.start = subtractDays(start, 7);\n        nextState.end = subtractDays(end, 7);\n      } else if (active.getTime() > end.getTime()) {\n        nextState.start = addDays(start, 7);\n        nextState.end = addDays(end, 7);\n      }\n      if (active.getMonth() !== reference.getMonth()) {\n        nextState.reference = new Date(active);\n      }\n      this.setFocus = true;\n      this.setState(nextState);\n    }\n  }\n\n  onClickDay = dateString => () => {\n    const { onSelect } = this.props;\n    this.setState({ active: new Date(dateString) });\n    if (onSelect) {\n      onSelect(dateString);\n    }\n  };\n\n  render() {\n    const {\n      bounds, date, dates, disabled, firstDayOfWeek, locale, onSelect, size,\n      theme, ...rest\n    } = this.props;\n    const { active, start, reference, end, slide } = this.state;\n\n    const previousMonth = subtractMonths(reference, 1);\n    const nextMonth = addMonths(reference, 1);\n\n    const weeks = [];\n    let day = new Date(start);\n    let days;\n\n    while (day.getTime() < end.getTime()) {\n      if (day.getDay() === firstDayOfWeek) {\n        if (days) {\n          weeks.push((\n            <StyledWeek key={day.getTime()} theme={theme}>{days}</StyledWeek>\n          ));\n        }\n        days = [];\n      }\n\n      const dateString = day.toISOString();\n      let content = day.getDate();\n      const isActive = active && sameDay(day, active);\n      let selected = false;\n      let inRange = false;\n      let background;\n\n      const selectedState = withinDates(day, date || dates);\n      if (selectedState === 2) {\n        selected = true;\n      } else if (selectedState === 1) {\n        inRange = true;\n      }\n      const dayDisabled = withinDates(day, disabled);\n      if (selected) {\n        background = 'brand';\n        content = <Text weight='bold'>{content}</Text>;\n      } else if (inRange) {\n        background = { color: 'brand', opacity: 'weak' };\n      }\n\n      days.push(\n        <StyledDayContainer key={day.getTime()} size={size} theme={theme}>\n          <Button\n            ref={(ref) => {\n              if (isActive) this.activeRef = ref;\n            }}\n            a11yTitle={day.toDateString()}\n            plain={true}\n            active={isActive}\n            hoverIndicator={!dayDisabled}\n            onClick={dayDisabled ? undefined : this.onClickDay(dateString)}\n          >\n            <StyledDay\n              background={background}\n              otherMonth={day.getMonth() !== reference.getMonth()}\n              size={size}\n              theme={theme}\n            >\n              {content}\n            </StyledDay>\n          </Button>\n        </StyledDayContainer>\n      );\n      day = addDays(day, 1);\n    }\n    weeks.push((\n      <StyledWeek key={day.getTime()} theme={theme}>{days}</StyledWeek>\n    ));\n\n    const PreviousIcon = size === 'small' ? (\n      theme.calendar.icons.small.previous\n    ) : (\n      theme.calendar.icons.previous\n    );\n\n    const NextIcon = size === 'small' ? (\n      theme.calendar.icons.small.next\n    ) : (\n      theme.calendar.icons.next\n    );\n\n    return (\n      <StyledCalendar size={size} theme={theme} {...rest}>\n        <Keyboard\n          onUp={(event) => {\n            event.preventDefault();\n            this.setActive(addDays(active, -7));\n          }}\n          onDown={(event) => {\n            event.preventDefault();\n            this.setActive(addDays(active, 7));\n          }}\n          onLeft={() => this.setActive(addDays(active, -1))}\n          onRight={() => this.setActive(addDays(active, 1))}\n        >\n          <Box>\n            <Box direction='row' justify='between' align='center'>\n              <Heading level={3} size={size} margin='none'>\n                {reference.toLocaleDateString(locale, { month: 'long', year: 'numeric' })}\n              </Heading>\n              <Box direction='row' align='center'>\n                <Button\n                  a11yTitle={previousMonth.toLocaleDateString(locale, { month: 'long', year: 'numeric' })}\n                  icon={<PreviousIcon size={size !== 'small' ? size : undefined} />}\n                  onClick={(onSelect && betweenDates(previousMonth, bounds)) ?\n                    () => this.setReference(previousMonth) : undefined}\n                />\n                <Button\n                  a11yTitle={nextMonth.toLocaleDateString(locale, { month: 'long', year: 'numeric' })}\n                  icon={<NextIcon size={size !== 'small' ? size : undefined} />}\n                  onClick={(onSelect && betweenDates(nextMonth, bounds)) ?\n                    () => this.setReference(nextMonth) : undefined}\n                />\n              </Box>\n            </Box>\n            <StyledWeeksContainer size={size} theme={theme}>\n              <StyledWeeks slide={slide} size={size} theme={theme}>\n                {weeks}\n              </StyledWeeks>\n            </StyledWeeksContainer>\n          </Box>\n        </Keyboard>\n      </StyledCalendar>\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  doc(Calendar);\n}\n\nexport default compose(\n  withTheme,\n)(Calendar);"
    },
    "2": {
        "bug_file": "src/js/components/Calendar/utils.js",
        "compressed": "NO",
        "line_numbers": 90,
        "compressed_line_numbers": 90,
        "compressed_bug_file_content": "\n// Utility functions for the Calendar.\n// Just what's needed to avoid having to include a dependency like momentjs.\n\nconst DAY_MILLISECONDS = 24 * 60 * 60 * 1000;\n\nexport const addDays = (date, days) =>\n  (new Date(date.getTime() + (DAY_MILLISECONDS * days)));\n\nexport const subtractDays = (date, days) => addDays(date, -days);\n\nexport const addMonths = (date, months) => {\n  const result = new Date(date);\n  const years = Math.floor((date.getMonth() + months) / 12);\n  result.setFullYear(date.getFullYear() + years);\n  result.setMonth((date.getMonth() + months) % 12);\n  return result;\n};\n\nexport const subtractMonths = (date, months) => addMonths(date, -months);\n\nexport const sameDay = (date1, date2) => (\n  date1.getFullYear() === date2.getFullYear() &&\n  date1.getMonth() === date2.getMonth() &&\n  date1.getDate() === date2.getDate()\n);\n\nexport const sameDayOrAfter = (date1, date2) =>\n  (date1.getFullYear() > date2.getFullYear() ||\n    (date1.getFullYear() === date2.getFullYear() && (\n      date1.getMonth() > date2.getMonth() || (\n        date1.getMonth() === date2.getMonth() && (date1.getDate() >= date2.getDate())\n      )\n    ))\n  );\n\nexport const sameDayOrBefore = (date1, date2) =>\n  (date1.getFullYear() < date2.getFullYear() ||\n    (date1.getFullYear() === date2.getFullYear() && (\n      date1.getMonth() < date2.getMonth() || (\n        date1.getMonth() === date2.getMonth() && (date1.getDate() <= date2.getDate())\n      )\n    ))\n  );\n\nexport const daysApart = (date1, date2) =>\n  Math.floor((date1.getTime() - date2.getTime()) / DAY_MILLISECONDS);\n\n// betweenDates takes and array of two elements and checks if the\n// supplied date lies between them, inclusive.\n// returns 2 if exact match to one end, 1 if between, undefined otherwise\nexport const betweenDates = (date, dates) => {\n  let result;\n  if (dates) {\n    const [from, to] = dates.map(d => new Date(d));\n    if (sameDay(date, from) || sameDay(date, to)) {\n      result = 2;\n    } else if (sameDayOrAfter(date, from) && sameDayOrBefore(date, to)) {\n      result = 1;\n    }\n  } else {\n    result = 1;\n  }\n  return result;\n};\n\n// withinDates takes and array of string dates or 2 element arrays and\n// checks whether the supplied date matches any string or is between\n// any dates in arrays.\n// returns 2 if exact match, 1 if between, undefined otherwise\nexport const withinDates = (date, dates) => {\n  let result;\n  if (dates) {\n    if (Array.isArray(dates)) {\n      dates.some((d) => {\n        if (typeof d === 'string') {\n          if (sameDay(date, new Date(d))) {\n            result = 2;\n          }\n        } else {\n          result = betweenDates(date, d);\n        }\n        return result;\n      });\n    } else if (sameDay(date, new Date(dates))) {\n      result = 2;\n    }\n  }\n  return result;\n};"
    },
    "3": {
        "bug_file": "src/js/components/Calendar/StyledCalendar.js",
        "compressed": "NO",
        "line_numbers": 68,
        "compressed_line_numbers": 68,
        "compressed_bug_file_content": "import styled, { css, keyframes } from 'styled-components';\nimport { backgroundStyle, parseMetricToNum } from '../../utils';\n\nconst sizeStyle = (props) => {\n  const data = props.theme.calendar[props.size];\n  return css`\n    font-size: ${data.fontSize};\n    line-height: ${data.lineHeight};\n    width: ${props.theme.global.size[props.size]};\n  `;\n};\n\nconst StyledCalendar = styled.div`\n  ${props => sizeStyle(props)}\n`;\n\nexport const StyledWeeksContainer = styled.div`\n  overflow: hidden;\n  ${props => `height: ${parseMetricToNum(props.theme.calendar[props.size].daySize) * 6}px;`}\n`;\n\nconst slideStyle = (props) => {\n  const { slide: { direction, weeks }, size, theme } = props;\n  const { daySize, slideDuration } = theme.calendar[size];\n  const amount = parseMetricToNum(daySize) * weeks;\n  return css`\n    animation ${keyframes`\n      from { transform: translateY(${direction === 'down' ? `-${amount}px` : '0'}) }\n      to { transform: translateY(${direction === 'up' ? `-${amount}px` : '0'}) }`}\n      ${slideDuration} forwards;\n  `;\n};\n\nexport const StyledWeeks = styled.div`\n  position: relative;\n  ${props => props.slide && slideStyle(props)}\n`;\n\nexport const StyledWeek = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-justify: between;\n`;\n\nexport const StyledDayContainer = styled.div`\n  flex: 0 0;\n`;\n\nconst daySizeStyle = (props) => {\n  const data = props.theme.calendar[props.size];\n  return css`\n    width: ${data.daySize};\n    height: ${data.daySize};\n  `;\n};\n\nexport const StyledDay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${props => daySizeStyle(props)}\n  ${props => props.background && backgroundStyle(props.background, props.theme)}\n  ${props => props.otherMonth && 'opacity: 0.5;'}\n`;\n\nexport default StyledCalendar.extend`\n  ${props => props.theme.calendar && props.theme.calendar.extend}\n`;"
    }
}