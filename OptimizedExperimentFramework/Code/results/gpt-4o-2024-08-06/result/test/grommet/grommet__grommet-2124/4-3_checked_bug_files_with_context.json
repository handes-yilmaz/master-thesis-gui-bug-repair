{
    "src/js/components/Calendar/Calendar.js": [
        "import React, { Component } from 'react';",
        "// import { findDOMNode } from 'react-dom';",
        "import { compose } from 'recompose';",
        "",
        "import { Box } from '../Box';",
        "import { Button } from '../Button';",
        "import { Keyboard } from '../Keyboard';",
        "import { Heading } from '../Heading';",
        "import { Text } from '../Text';",
        "",
        "import { withTheme } from '../hocs';",
        "",
        "import StyledCalendar, {",
        "  StyledDay, StyledDayContainer, StyledWeek, StyledWeeks, StyledWeeksContainer,",
        "} from './StyledCalendar';",
        "import doc from './doc';",
        "import {",
        "  addDays, addMonths, betweenDates, daysApart, sameDay,",
        "  subtractDays, subtractMonths, withinDates,",
        "} from './utils';",
        "",
        "const buildStartEnd = (reference, firstDayOfWeek) => {",
        "  let start = new Date(reference);",
        "  start.setDate(1); // first of month",
        "  start = subtractDays(start, start.getDay() - firstDayOfWeek); // beginning of week",
        "  const end = addDays(start, (7 * 5) + 6); // 5 weeks to end of week",
        "  return { start, end };",
        "};",
        "",
        "const buildState = (props) => {",
        "  const { date, dates, firstDayOfWeek } = props;",
        "  let reference;",
        "  if (date) {",
        "    reference = new Date(date);",
        "  } else if (dates && dates.length > 0) {",
        "    if (typeof dates[0] === 'string') {",
        "      reference = new Date(dates[0]);",
        "    } else if (Array.isArray(dates[0])) {",
        "      reference = new Date(dates[0][0]);",
        "    } else {",
        "      reference = new Date();",
        "    }",
        "  } else {",
        "    reference = new Date();",
        "  }",
        "  return {",
        "    ...buildStartEnd(reference, firstDayOfWeek),",
        "    reference,",
        "    active: new Date(reference),",
        "  };",
        "};",
        "",
        "class Calendar extends Component {",
        "  static defaultProps = {",
        "    firstDayOfWeek: 0,",
        "    size: 'medium',",
        "    locale: 'en-US',",
        "  }",
        "",
        "  static getDerivedStateFromProps(nextProps, prevState) {",
        "    const { reference } = prevState;",
        "    if (!reference) {",
        "      return buildState(nextProps);",
        "    }",
        "    return null;",
        "  }",
        "",
        "  state = {}",
        "",
        "  // componentDidUpdate() {",
        "  //   if (this.setFocus) {",
        "  //     this.setFocus = false;",
        "  //     // if (this.activeRef) {",
        "  //     //   findDOMNode(this.activeRef).focus();",
        "  //     // }",
        "  //   }",
        "  // }",
        "",
        "  componentWillUnmount() {",
        "    clearTimeout(this.timer);",
        "  }",
        "",
        "  setReference = (reference) => {",
        "    const { bounds, firstDayOfWeek } = this.props;",
        "    const { start, end } = this.state;",
        "    if (betweenDates(reference, bounds)) {",
        "      const nextStartEnd = buildStartEnd(reference, firstDayOfWeek);",
        "      const nextState = {",
        "        reference,",
        "        active: undefined,",
        "      };",
        "      if (nextStartEnd.start.getTime() < start.getTime()) {",
        "        nextState.start = nextStartEnd.start;",
        "        nextState.slide = {",
        "          direction: 'down',",
        "          weeks: daysApart(start, nextStartEnd.start) / 7,",
        "        };",
        "        clearTimeout(this.timer);",
        "        this.timer = setTimeout(() =>",
        "          this.setState({ end: nextStartEnd.end, slide: undefined }), 1000);",
        "      } else if (nextStartEnd.end.getTime() > end.getTime()) {",
        "        nextState.end = nextStartEnd.end;",
        "        nextState.slide = {",
        "          direction: 'up',",
        "          weeks: daysApart(nextStartEnd.end, end) / 7,",
        "        };",
        "        clearTimeout(this.timer);",
        "        this.timer = setTimeout(() =>",
        "          this.setState({ start: nextStartEnd.start, slide: undefined }), 1000);",
        "      }",
        "      this.setState(nextState);",
        "    }",
        "  }",
        "",
        "  setActive = (active) => {",
        "    const { bounds } = this.props;",
        "    const { start, reference, end } = this.state;",
        "    if (betweenDates(active, bounds)) {",
        "      const nextState = { active };",
        "      if (active.getTime() < start.getTime()) {",
        "        nextState.start = subtractDays(start, 7);",
        "        nextState.end = subtractDays(end, 7);",
        "      } else if (active.getTime() > end.getTime()) {",
        "        nextState.start = addDays(start, 7);",
        "        nextState.end = addDays(end, 7);",
        "      }",
        "      if (active.getMonth() !== reference.getMonth()) {",
        "        nextState.reference = new Date(active);",
        "      }",
        "      this.setFocus = true;",
        "      this.setState(nextState);",
        "    }",
        "  }",
        "",
        "  onClickDay = dateString => () => {",
        "    const { onSelect } = this.props;",
        "    this.setState({ active: new Date(dateString) });",
        "    if (onSelect) {",
        "      onSelect(dateString);",
        "    }",
        "  };",
        "",
        "  render() {",
        "    const {",
        "      bounds, date, dates, disabled, firstDayOfWeek, locale, onSelect, size,",
        "      theme, ...rest",
        "    } = this.props;",
        "    const { active, start, reference, end, slide } = this.state;",
        "",
        "    const previousMonth = subtractMonths(reference, 1);",
        "    const nextMonth = addMonths(reference, 1);",
        "",
        "    const weeks = [];",
        "    let day = new Date(start);",
        "    let days;",
        "",
        "    while (day.getTime() < end.getTime()) {",
        "      if (day.getDay() === firstDayOfWeek) {",
        "        if (days) {",
        "          weeks.push((",
        "            <StyledWeek key={day.getTime()} theme={theme}>{days}</StyledWeek>",
        "          ));",
        "        }",
        "        days = [];",
        "      }",
        "",
        "      const dateString = day.toISOString();",
        "      let content = day.getDate();",
        "      const isActive = active && sameDay(day, active);",
        "      let selected = false;",
        "      let inRange = false;",
        "      let background;",
        "",
        "      const selectedState = withinDates(day, date || dates);",
        "      if (selectedState === 2) {",
        "        selected = true;",
        "      } else if (selectedState === 1) {",
        "        inRange = true;",
        "      }",
        "      const dayDisabled = withinDates(day, disabled);",
        "      if (selected) {",
        "        background = 'brand';",
        "        content = <Text weight='bold'>{content}</Text>;",
        "      } else if (inRange) {",
        "        background = { color: 'brand', opacity: 'weak' };",
        "      }",
        "",
        "      days.push(",
        "        <StyledDayContainer key={day.getTime()} size={size} theme={theme}>",
        "          <Button",
        "            ref={(ref) => {",
        "              if (isActive) this.activeRef = ref;",
        "            }}",
        "            a11yTitle={day.toDateString()}",
        "            plain={true}",
        "            active={isActive}",
        "            hoverIndicator={!dayDisabled}",
        "            onClick={dayDisabled ? undefined : this.onClickDay(dateString)}",
        "          >",
        "            <StyledDay",
        "              background={background}",
        "              otherMonth={day.getMonth() !== reference.getMonth()}",
        "              size={size}",
        "              theme={theme}",
        "            >",
        "              {content}",
        "            </StyledDay>",
        "          </Button>",
        "        </StyledDayContainer>",
        "      );",
        "      day = addDays(day, 1);",
        "    }",
        "    weeks.push((",
        "      <StyledWeek key={day.getTime()} theme={theme}>{days}</StyledWeek>",
        "    ));",
        "",
        "    const PreviousIcon = size === 'small' ? (",
        "      theme.calendar.icons.small.previous",
        "    ) : (",
        "      theme.calendar.icons.previous",
        "    );",
        "",
        "    const NextIcon = size === 'small' ? (",
        "      theme.calendar.icons.small.next",
        "    ) : (",
        "      theme.calendar.icons.next",
        "    );",
        "",
        "    return (",
        "      <StyledCalendar size={size} theme={theme} {...rest}>",
        "        <Keyboard",
        "          onUp={(event) => {",
        "            event.preventDefault();",
        "            this.setActive(addDays(active, -7));",
        "          }}",
        "          onDown={(event) => {",
        "            event.preventDefault();",
        "            this.setActive(addDays(active, 7));",
        "          }}",
        "          onLeft={() => this.setActive(addDays(active, -1))}",
        "          onRight={() => this.setActive(addDays(active, 1))}",
        "        >",
        "          <Box>",
        "            <Box direction='row' justify='between' align='center'>",
        "              <Heading level={3} size={size} margin='none'>",
        "                {reference.toLocaleDateString(locale, { month: 'long', year: 'numeric' })}",
        "              </Heading>",
        "              <Box direction='row' align='center'>",
        "                <Button",
        "                  a11yTitle={previousMonth.toLocaleDateString(locale, { month: 'long', year: 'numeric' })}",
        "                  icon={<PreviousIcon size={size !== 'small' ? size : undefined} />}",
        "                  onClick={(onSelect && betweenDates(previousMonth, bounds)) ?",
        "                    () => this.setReference(previousMonth) : undefined}",
        "                />",
        "                <Button",
        "                  a11yTitle={nextMonth.toLocaleDateString(locale, { month: 'long', year: 'numeric' })}",
        "                  icon={<NextIcon size={size !== 'small' ? size : undefined} />}",
        "                  onClick={(onSelect && betweenDates(nextMonth, bounds)) ?",
        "                    () => this.setReference(nextMonth) : undefined}",
        "                />",
        "              </Box>",
        "            </Box>",
        "            <StyledWeeksContainer size={size} theme={theme}>",
        "              <StyledWeeks slide={slide} size={size} theme={theme}>",
        "                {weeks}",
        "              </StyledWeeks>",
        "            </StyledWeeksContainer>",
        "          </Box>",
        "        </Keyboard>",
        "      </StyledCalendar>",
        "    );",
        "  }",
        "}",
        "",
        "if (process.env.NODE_ENV !== 'production') {",
        "  doc(Calendar);",
        "}",
        "",
        "export default compose(",
        "  withTheme,",
        ")(Calendar);"
    ],
    "src/js/components/Calendar/StyledCalendar.js": [
        "import styled, { css, keyframes } from 'styled-components';",
        "import { backgroundStyle, parseMetricToNum } from '../../utils';",
        "",
        "const sizeStyle = (props) => {",
        "  const data = props.theme.calendar[props.size];",
        "  return css`",
        "    font-size: ${data.fontSize};",
        "    line-height: ${data.lineHeight};",
        "    width: ${props.theme.global.size[props.size]};",
        "  `;",
        "};",
        "",
        "const StyledCalendar = styled.div`",
        "  ${props => sizeStyle(props)}",
        "`;",
        "",
        "export const StyledWeeksContainer = styled.div`",
        "  overflow: hidden;",
        "  ${props => `height: ${parseMetricToNum(props.theme.calendar[props.size].daySize) * 6}px;`}",
        "`;",
        "",
        "const slideStyle = (props) => {",
        "  const { slide: { direction, weeks }, size, theme } = props;",
        "  const { daySize, slideDuration } = theme.calendar[size];",
        "  const amount = parseMetricToNum(daySize) * weeks;",
        "  return css`",
        "    animation ${keyframes`",
        "      from { transform: translateY(${direction === 'down' ? `-${amount}px` : '0'}) }",
        "      to { transform: translateY(${direction === 'up' ? `-${amount}px` : '0'}) }`}",
        "      ${slideDuration} forwards;",
        "  `;",
        "};",
        "",
        "export const StyledWeeks = styled.div`",
        "  position: relative;",
        "  ${props => props.slide && slideStyle(props)}",
        "`;",
        "",
        "export const StyledWeek = styled.div`",
        "  display: flex;",
        "  flex-direction: row;",
        "  flex-justify: between;",
        "`;",
        "",
        "export const StyledDayContainer = styled.div`",
        "  flex: 0 0;",
        "`;",
        "",
        "const daySizeStyle = (props) => {",
        "  const data = props.theme.calendar[props.size];",
        "  return css`",
        "    width: ${data.daySize};",
        "    height: ${data.daySize};",
        "  `;",
        "};",
        "",
        "export const StyledDay = styled.div`",
        "  display: flex;",
        "  justify-content: center;",
        "  align-items: center;",
        "  ${props => daySizeStyle(props)}",
        "  ${props => props.background && backgroundStyle(props.background, props.theme)}",
        "  ${props => props.otherMonth && 'opacity: 0.5;'}",
        "`;",
        "",
        "export default StyledCalendar.extend`",
        "  ${props => props.theme.calendar && props.theme.calendar.extend}",
        "`;"
    ],
    "src/js/components/Calendar/utils.js": [
        "",
        "// Utility functions for the Calendar.",
        "// Just what's needed to avoid having to include a dependency like momentjs.",
        "",
        "const DAY_MILLISECONDS = 24 * 60 * 60 * 1000;",
        "",
        "export const addDays = (date, days) =>",
        "  (new Date(date.getTime() + (DAY_MILLISECONDS * days)));",
        "",
        "export const subtractDays = (date, days) => addDays(date, -days);",
        "",
        "export const addMonths = (date, months) => {",
        "  const result = new Date(date);",
        "  const years = Math.floor((date.getMonth() + months) / 12);",
        "  result.setFullYear(date.getFullYear() + years);",
        "  result.setMonth((date.getMonth() + months) % 12);",
        "  return result;",
        "};",
        "",
        "export const subtractMonths = (date, months) => addMonths(date, -months);",
        "",
        "export const sameDay = (date1, date2) => (",
        "  date1.getFullYear() === date2.getFullYear() &&",
        "  date1.getMonth() === date2.getMonth() &&",
        "  date1.getDate() === date2.getDate()",
        ");",
        "",
        "export const sameDayOrAfter = (date1, date2) =>",
        "  (date1.getFullYear() > date2.getFullYear() ||",
        "    (date1.getFullYear() === date2.getFullYear() && (",
        "      date1.getMonth() > date2.getMonth() || (",
        "        date1.getMonth() === date2.getMonth() && (date1.getDate() >= date2.getDate())",
        "      )",
        "    ))",
        "  );",
        "",
        "export const sameDayOrBefore = (date1, date2) =>",
        "  (date1.getFullYear() < date2.getFullYear() ||",
        "    (date1.getFullYear() === date2.getFullYear() && (",
        "      date1.getMonth() < date2.getMonth() || (",
        "        date1.getMonth() === date2.getMonth() && (date1.getDate() <= date2.getDate())",
        "      )",
        "    ))",
        "  );",
        "",
        "export const daysApart = (date1, date2) =>",
        "  Math.floor((date1.getTime() - date2.getTime()) / DAY_MILLISECONDS);",
        "",
        "// betweenDates takes and array of two elements and checks if the",
        "// supplied date lies between them, inclusive.",
        "// returns 2 if exact match to one end, 1 if between, undefined otherwise",
        "export const betweenDates = (date, dates) => {",
        "  let result;",
        "  if (dates) {",
        "    const [from, to] = dates.map(d => new Date(d));",
        "    if (sameDay(date, from) || sameDay(date, to)) {",
        "      result = 2;",
        "    } else if (sameDayOrAfter(date, from) && sameDayOrBefore(date, to)) {",
        "      result = 1;",
        "    }",
        "  } else {",
        "    result = 1;",
        "  }",
        "  return result;",
        "};",
        "",
        "// withinDates takes and array of string dates or 2 element arrays and",
        "// checks whether the supplied date matches any string or is between",
        "// any dates in arrays.",
        "// returns 2 if exact match, 1 if between, undefined otherwise",
        "export const withinDates = (date, dates) => {",
        "  let result;",
        "  if (dates) {",
        "    if (Array.isArray(dates)) {",
        "      dates.some((d) => {",
        "        if (typeof d === 'string') {",
        "          if (sameDay(date, new Date(d))) {",
        "            result = 2;",
        "          }",
        "        } else {",
        "          result = betweenDates(date, d);",
        "        }",
        "        return result;",
        "      });",
        "    } else if (sameDay(date, new Date(dates))) {",
        "      result = 2;",
        "    }",
        "  }",
        "  return result;",
        "};"
    ]
}