{
    "1": {
        "bug_file": "src/js/components/PageHeader/PageHeader.js",
        "compressed": "NO",
        "line_numbers": 100,
        "compressed_line_numbers": 100,
        "compressed_bug_file_content": "import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport { Box } from '../Box';\nimport { Header } from '../Header';\nimport { Heading } from '../Heading';\nimport { Grid } from '../Grid';\nimport { Paragraph } from '../Paragraph';\nimport { ResponsiveContext } from '../../contexts/ResponsiveContext';\n\nconst sizeStyle = (size, feature, theme) => {\n  const style = {\n    ...theme.pageHeader[feature],\n    ...((size && theme.pageHeader.size[size]?.[feature]) ??\n      theme.pageHeader[feature]),\n  };\n\n  return style;\n};\n\nconst PageHeader = forwardRef(\n  (\n    {\n      actions,\n      gridProps: gridPropsProp,\n      parent,\n      responsive,\n      size,\n      subtitle,\n      title,\n      ...rest\n    },\n    ref,\n  ) => {\n    const theme = useContext(ThemeContext);\n    const breakpoint = useContext(ResponsiveContext);\n\n    let actionsProps = { ...theme.pageHeader.actions };\n    let gridProps = theme.pageHeader[breakpoint] || theme.pageHeader.medium;\n\n    if (\n      responsive &&\n      theme.pageHeader.responsive.breakpoints.includes(breakpoint)\n    ) {\n      gridProps = { ...gridProps, ...theme.pageHeader.responsive };\n      actionsProps = {\n        ...actionsProps,\n        ...theme.pageHeader.responsive.actions,\n      };\n    }\n\n    const { areas, columns, gap, rows } = gridProps;\n\n    return (\n      <Header\n        ref={ref}\n        direction=\"column\"\n        gap=\"none\"\n        pad={sizeStyle(size, 'pad', theme)}\n        {...rest}\n      >\n        <Grid\n          columns={columns}\n          rows={rows}\n          areas={areas}\n          gap={gap}\n          fill=\"horizontal\"\n          {...gridPropsProp}\n        >\n          <Box gridArea=\"parent\" {...theme.pageHeader.parent}>\n            {parent}\n          </Box>\n          <Box gridArea=\"title\">\n            {typeof title === 'string' ? (\n              <Heading {...sizeStyle(size, 'title', theme)}>{title}</Heading>\n            ) : (\n              title\n            )}\n          </Box>\n          <Box gridArea=\"subtitle\">\n            {typeof subtitle === 'string' ? (\n              <Paragraph {...sizeStyle(size, 'subtitle', theme)}>\n                {subtitle}\n              </Paragraph>\n            ) : (\n              subtitle\n            )}\n          </Box>\n          <Box gridArea=\"actions\" {...actionsProps}>\n            {actions}\n          </Box>\n        </Grid>\n      </Header>\n    );\n  },\n);\n\nPageHeader.displayName = 'PageHeader';\n\nexport { PageHeader };"
    },
    "2": {
        "bug_file": "src/js/components/PageHeader/index.js",
        "compressed": "NO",
        "line_numbers": 1,
        "compressed_line_numbers": 1,
        "compressed_bug_file_content": "export { PageHeader } from './PageHeader';"
    },
    "3": {
        "bug_file": "src/js/components/PageHeader/propTypes.js",
        "compressed": "NO",
        "line_numbers": 18,
        "compressed_line_numbers": 18,
        "compressed_bug_file_content": "import PropTypes from 'prop-types';\nimport { genericProps } from '../../utils/general-prop-types';\nimport { GridPropTypes } from '../Grid/propTypes';\n\nlet PropType = {};\nif (process.env.NODE_ENV !== 'production') {\n  PropType = {\n    ...genericProps,\n    actions: PropTypes.element,\n    gridProps: GridPropTypes,\n    parent: PropTypes.element,\n    responsive: PropTypes.bool,\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n    subtitle: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  };\n}\nexport const PageHeaderPropTypes = PropType;"
    },
    "4": {
        "bug_file": "src/js/components/PageHeader/__tests__/PageHeader-test.tsx",
        "compressed": "NO",
        "line_numbers": 82,
        "compressed_line_numbers": 82,
        "compressed_bug_file_content": "import React from 'react';\nimport { render } from '@testing-library/react';\nimport 'jest-styled-components';\n\nimport { Grommet } from '../../Grommet';\nimport { Anchor } from '../../Anchor';\nimport { Box } from '../../Box';\nimport { Button } from '../../Button';\nimport { PageHeader } from '..';\n\nconst sizes = ['small', 'medium', 'large'];\n\ndescribe('PageHeader', () => {\n  test('basic', () => {\n    const { asFragment } = render(\n      <Grommet>\n        <PageHeader\n          title=\"Grommet\"\n          subtitle={`Grommet helps you build responsive and accessible \n          mobile-first projects for the web with an easy to use component \n          library.`}\n          actions={<Button label=\"Get Started\" primary />}\n          parent={<Anchor label=\"Parent Page\" />}\n        />\n      </Grommet>,\n    );\n\n    expect(asFragment()).toMatchSnapshot();\n  });\n\n  sizes.forEach((size?: any) => {\n    test(`size - ${size}`, () => {\n      const { asFragment } = render(\n        <Grommet>\n          <PageHeader\n            title=\"Grommet\"\n            subtitle={`Grommet helps you build responsive and accessible \n            mobile-first projects for the web with an easy to use component \n            library.`}\n            actions={<Button label=\"Get Started\" primary />}\n            parent={<Anchor label=\"Parent Page\" />}\n            size={size}\n          />\n        </Grommet>,\n      );\n\n      expect(asFragment()).toMatchSnapshot();\n    });\n  });\n\n  test('custom theme', () => {\n    const customTheme = {\n      pageHeader: {\n        medium: {\n          areas: [\n            ['parent', 'parent'],\n            ['title', 'null'],\n            ['subtitle', 'null'],\n            ['actions', 'actions'],\n          ],\n        },\n      },\n    };\n\n    const { asFragment } = render(\n      <Grommet theme={customTheme}>\n        <PageHeader\n          title=\"Permissions\"\n          subtitle=\"View and assign permissions.\"\n          actions={\n            <Box alignSelf=\"start\">\n              <Button label=\"Edit\" primary />\n            </Box>\n          }\n          parent={<Anchor label=\"Settings\" />}\n        />\n      </Grommet>,\n    );\n\n    expect(asFragment()).toMatchSnapshot();\n  });\n});"
    },
    "5": {
        "bug_file": "src/js/components/PageHeader/stories/Custom.js",
        "compressed": "NO",
        "line_numbers": 50,
        "compressed_line_numbers": 50,
        "compressed_bug_file_content": "import React from 'react';\n\nimport {\n  Anchor,\n  Box,\n  Button,\n  grommet,\n  Grommet,\n  PageHeader,\n  Page,\n  PageContent,\n} from 'grommet';\nimport { deepMerge } from 'grommet/utils';\nimport { FormPrevious } from 'grommet-icons';\n\nconst customTheme = deepMerge(grommet, {\n  pageHeader: {\n    medium: {\n      areas: [\n        ['parent', 'parent'],\n        ['title', 'null'],\n        ['subtitle', 'null'],\n        ['actions', 'actions'],\n      ],\n    },\n  },\n});\n\nexport const Custom = () => (\n  <Grommet theme={customTheme}>\n    <Page>\n      <PageContent>\n        <PageHeader\n          title=\"Permissions\"\n          subtitle=\"View and assign permissions.\"\n          actions={\n            <Box alignSelf=\"start\">\n              <Button label=\"Edit\" primary />\n            </Box>\n          }\n          parent={<Anchor icon={<FormPrevious />} label=\"Settings\" />}\n        />\n      </PageContent>\n    </Page>\n  </Grommet>\n);\n\nexport default {\n  title: 'Layout/PageHeader/Custom Themed/Custom',\n};"
    },
    "6": {
        "bug_file": "src/js/components/PageHeader/stories/Simple.js",
        "compressed": "NO",
        "line_numbers": 25,
        "compressed_line_numbers": 25,
        "compressed_bug_file_content": "import React from 'react';\n\nimport { Anchor, Button, PageHeader, Page, PageContent } from 'grommet';\n\nexport const Simple = () => (\n  // Uncomment <Grommet> lines when using outside of storybook\n  // <Grommet theme={...}>\n  <Page>\n    <PageContent>\n      <PageHeader\n        title=\"Grommet\"\n        subtitle={`Grommet helps you build responsive and accessible \n          mobile-first projects for the web with an easy to use component \n          library.`}\n        actions={<Button label=\"Get Started\" primary />}\n        parent={<Anchor label=\"Parent Page\" />}\n      />\n    </PageContent>\n  </Page>\n  // </Grommet>\n);\n\nexport default {\n  title: 'Layout/PageHeader/Simple',\n};"
    },
    "7": {
        "bug_file": "src/js/components/PageHeader/stories/Responsive.js",
        "compressed": "NO",
        "line_numbers": 25,
        "compressed_line_numbers": 25,
        "compressed_bug_file_content": "import React from 'react';\n\nimport { Anchor, Button, PageHeader, Page, PageContent } from 'grommet';\n\nexport const Responsive = () => (\n  // Uncomment <Grommet> lines when using outside of storybook\n  // <Grommet theme={...}>\n  <Page>\n    <PageContent>\n      <PageHeader\n        title=\"Grommet\"\n        subtitle={`Responsive allows PageHeader layout to switch to a \n        single column at responsive breakpoints specified in the theme.`}\n        actions={<Button label=\"Get Started\" primary />}\n        parent={<Anchor label=\"Parent Page\" />}\n        responsive\n      />\n    </PageContent>\n  </Page>\n  // </Grommet>\n);\n\nexport default {\n  title: 'Layout/PageHeader/Responsive',\n};"
    },
    "8": {
        "bug_file": "src/js/components/PageHeader/stories/MultipleActions.js",
        "compressed": "NO",
        "line_numbers": 81,
        "compressed_line_numbers": 81,
        "compressed_bug_file_content": "import React, { useContext } from 'react';\n\nimport {\n  Anchor,\n  Box,\n  Button,\n  Menu,\n  PageHeader,\n  Page,\n  PageContent,\n  ResponsiveContext,\n} from 'grommet';\nimport { More } from 'grommet-icons';\n\nconst actions = [\n  {\n    label: 'Get Started',\n    primary: true,\n  },\n  {\n    label: 'Follow',\n    secondary: true,\n  },\n  {\n    label: 'File Issue',\n    secondary: true,\n  },\n];\n\nconst controls = {\n  small: (\n    <Menu\n      dropAlign={{ top: 'bottom', right: 'right' }}\n      items={actions.map((action) => ({ label: action.label }))}\n      icon={<More />}\n    />\n  ),\n  medium: (\n    <>\n      <Button {...actions[0]} />\n      <Menu\n        dropAlign={{ top: 'bottom', right: 'right' }}\n        items={actions.slice(1)}\n        icon={<More />}\n      />\n    </>\n  ),\n  large: actions.map((action) => <Button {...action} />),\n};\n\nexport const MultipleActions = () => {\n  const size = useContext(ResponsiveContext);\n\n  return (\n    // Uncomment <Grommet> lines when using outside of storybook\n    // <Grommet theme={...}>\n    <Page>\n      <PageContent>\n        <PageHeader\n          title=\"Grommet\"\n          subtitle={`Grommet helps you build responsive and accessible \n          mobile-first projects for the web with an easy to use component \n          library.`}\n          actions={\n            <Box direction=\"row\" gap=\"small\" align=\"center\">\n              {controls[size]}\n            </Box>\n          }\n          parent={<Anchor label=\"Parent Page\" />}\n        />\n      </PageContent>\n    </Page>\n    // </Grommet>\n  );\n};\n\nMultipleActions.storyName = 'Multiple Actions';\n\nexport default {\n  title: 'Layout/PageHeader/Multiple Actions',\n};"
    },
    "9": {
        "bug_file": "src/js/components/Heading/StyledHeading.js",
        "compressed": "NO",
        "line_numbers": 96,
        "compressed_line_numbers": 96,
        "compressed_bug_file_content": "import styled, { css } from 'styled-components';\n\nimport {\n  breakpointStyle,\n  genericStyles,\n  normalizeColor,\n  textAlignStyle,\n} from '../../utils';\nimport { defaultProps } from '../../default-props';\n\nconst sizeStyle = (props) => {\n  // size is a combination of the level and size properties\n  const size = props.size || 'medium';\n  const headingTheme = props.theme.heading;\n  const levelStyle = headingTheme.level[props.level];\n  if (levelStyle) {\n    const data = levelStyle[size];\n    const styles = [\n      css`\n        font-size: ${data ? data.size : size};\n        line-height: ${data ? data.height : 'normal'};\n        max-width: ${(props.fillProp && 'none') ||\n        (data && data.maxWidth) ||\n        levelStyle.medium.maxWidth};\n        font-weight: ${props.weight ||\n        levelStyle.font.weight ||\n        headingTheme.weight};\n      `,\n    ];\n    if (props.responsive && headingTheme.responsiveBreakpoint) {\n      const breakpoint =\n        props.theme.global.breakpoints[headingTheme.responsiveBreakpoint];\n      if (breakpoint) {\n        const responsiveData = headingTheme.level[props.level + 1]\n          ? headingTheme.level[props.level + 1][size]\n          : headingTheme.level[props.level][size];\n        if (responsiveData) {\n          styles.push(\n            breakpointStyle(\n              breakpoint,\n              `\n            font-size: ${responsiveData.size};\n            line-height: ${responsiveData.height};\n            max-width: ${(props.fillProp && 'none') || responsiveData.maxWidth};\n          `,\n            ),\n          );\n        }\n      }\n    }\n    return styles;\n  }\n  console.warn(`Heading level ${props.level} is not defined in your theme.`);\n\n  return '';\n};\n\nconst fontFamily = (props) => {\n  const { font } = props.theme.heading.level[props.level] || {};\n  if (font && font.family) {\n    return css`\n      font-family: ${font.family};\n    `;\n  }\n  return props.theme.heading.font\n    ? css`\n        font-family: ${props.theme.heading.font.family};\n      `\n    : '';\n};\n\nconst truncateStyle = `\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst colorStyle = css`\n  color: ${(props) =>\n    normalizeColor(props.colorProp || props.theme.heading.color, props.theme)};\n`;\n\nconst StyledHeading = styled.h1`\n  ${genericStyles}\n  ${(props) => fontFamily(props)}\n  ${(props) => sizeStyle(props)}\n  ${(props) => props.textAlign && textAlignStyle}\n  ${(props) => props.truncate && truncateStyle}\n  ${(props) => (props.colorProp || props.theme.heading.color) && colorStyle}\n  ${(props) => props.theme.heading && props.theme.heading.extend}\n`;\n\nStyledHeading.defaultProps = {};\nObject.setPrototypeOf(StyledHeading.defaultProps, defaultProps);\n\nexport { StyledHeading };"
    }
}