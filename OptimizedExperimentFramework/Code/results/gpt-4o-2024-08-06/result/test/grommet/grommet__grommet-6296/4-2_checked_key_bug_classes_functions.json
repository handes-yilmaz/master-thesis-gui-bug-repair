{
    "bug_classes": {
        "1": {
            "class_name": "PageHeader (not found) ",
            "file_path": "src/js/components/PageHeader/PageHeader.js",
            "class_details": [
                {
                    "name": "PageHeader",
                    "start_line": 1,
                    "end_line": 100
                }
            ],
            "class_code": [
                "import React, { forwardRef, useContext } from 'react';",
                "import { ThemeContext } from 'styled-components';",
                "",
                "import { Box } from '../Box';",
                "import { Header } from '../Header';",
                "import { Heading } from '../Heading';",
                "import { Grid } from '../Grid';",
                "import { Paragraph } from '../Paragraph';",
                "import { ResponsiveContext } from '../../contexts/ResponsiveContext';",
                "",
                "const sizeStyle = (size, feature, theme) => {",
                "  const style = {",
                "    ...theme.pageHeader[feature],",
                "    ...((size && theme.pageHeader.size[size]?.[feature]) ??",
                "      theme.pageHeader[feature]),",
                "  };",
                "",
                "  return style;",
                "};",
                "",
                "const PageHeader = forwardRef(",
                "  (",
                "    {",
                "      actions,",
                "      gridProps: gridPropsProp,",
                "      parent,",
                "      responsive,",
                "      size,",
                "      subtitle,",
                "      title,",
                "      ...rest",
                "    },",
                "    ref,",
                "  ) => {",
                "    const theme = useContext(ThemeContext);",
                "    const breakpoint = useContext(ResponsiveContext);",
                "",
                "    let actionsProps = { ...theme.pageHeader.actions };",
                "    let gridProps = theme.pageHeader[breakpoint] || theme.pageHeader.medium;",
                "",
                "    if (",
                "      responsive &&",
                "      theme.pageHeader.responsive.breakpoints.includes(breakpoint)",
                "    ) {",
                "      gridProps = { ...gridProps, ...theme.pageHeader.responsive };",
                "      actionsProps = {",
                "        ...actionsProps,",
                "        ...theme.pageHeader.responsive.actions,",
                "      };",
                "    }",
                "",
                "    const { areas, columns, gap, rows } = gridProps;",
                "",
                "    return (",
                "      <Header",
                "        ref={ref}",
                "        direction=\"column\"",
                "        gap=\"none\"",
                "        pad={sizeStyle(size, 'pad', theme)}",
                "        {...rest}",
                "      >",
                "        <Grid",
                "          columns={columns}",
                "          rows={rows}",
                "          areas={areas}",
                "          gap={gap}",
                "          fill=\"horizontal\"",
                "          {...gridPropsProp}",
                "        >",
                "          <Box gridArea=\"parent\" {...theme.pageHeader.parent}>",
                "            {parent}",
                "          </Box>",
                "          <Box gridArea=\"title\">",
                "            {typeof title === 'string' ? (",
                "              <Heading {...sizeStyle(size, 'title', theme)}>{title}</Heading>",
                "            ) : (",
                "              title",
                "            )}",
                "          </Box>",
                "          <Box gridArea=\"subtitle\">",
                "            {typeof subtitle === 'string' ? (",
                "              <Paragraph {...sizeStyle(size, 'subtitle', theme)}>",
                "                {subtitle}",
                "              </Paragraph>",
                "            ) : (",
                "              subtitle",
                "            )}",
                "          </Box>",
                "          <Box gridArea=\"actions\" {...actionsProps}>",
                "            {actions}",
                "          </Box>",
                "        </Grid>",
                "      </Header>",
                "    );",
                "  },",
                ");",
                "",
                "PageHeader.displayName = 'PageHeader';",
                "",
                "export { PageHeader };"
            ]
        },
        "2": {
            "class_name": "StyledHeading (not found) ",
            "file_path": "src/js/components/Heading/StyledHeading.js",
            "class_details": [
                {
                    "name": "StyledHeading",
                    "start_line": 1,
                    "end_line": 96
                }
            ],
            "class_code": [
                "import styled, { css } from 'styled-components';",
                "",
                "import {",
                "  breakpointStyle,",
                "  genericStyles,",
                "  normalizeColor,",
                "  textAlignStyle,",
                "} from '../../utils';",
                "import { defaultProps } from '../../default-props';",
                "",
                "const sizeStyle = (props) => {",
                "  // size is a combination of the level and size properties",
                "  const size = props.size || 'medium';",
                "  const headingTheme = props.theme.heading;",
                "  const levelStyle = headingTheme.level[props.level];",
                "  if (levelStyle) {",
                "    const data = levelStyle[size];",
                "    const styles = [",
                "      css`",
                "        font-size: ${data ? data.size : size};",
                "        line-height: ${data ? data.height : 'normal'};",
                "        max-width: ${(props.fillProp && 'none') ||",
                "        (data && data.maxWidth) ||",
                "        levelStyle.medium.maxWidth};",
                "        font-weight: ${props.weight ||",
                "        levelStyle.font.weight ||",
                "        headingTheme.weight};",
                "      `,",
                "    ];",
                "    if (props.responsive && headingTheme.responsiveBreakpoint) {",
                "      const breakpoint =",
                "        props.theme.global.breakpoints[headingTheme.responsiveBreakpoint];",
                "      if (breakpoint) {",
                "        const responsiveData = headingTheme.level[props.level + 1]",
                "          ? headingTheme.level[props.level + 1][size]",
                "          : headingTheme.level[props.level][size];",
                "        if (responsiveData) {",
                "          styles.push(",
                "            breakpointStyle(",
                "              breakpoint,",
                "              `",
                "            font-size: ${responsiveData.size};",
                "            line-height: ${responsiveData.height};",
                "            max-width: ${(props.fillProp && 'none') || responsiveData.maxWidth};",
                "          `,",
                "            ),",
                "          );",
                "        }",
                "      }",
                "    }",
                "    return styles;",
                "  }",
                "  console.warn(`Heading level ${props.level} is not defined in your theme.`);",
                "",
                "  return '';",
                "};",
                "",
                "const fontFamily = (props) => {",
                "  const { font } = props.theme.heading.level[props.level] || {};",
                "  if (font && font.family) {",
                "    return css`",
                "      font-family: ${font.family};",
                "    `;",
                "  }",
                "  return props.theme.heading.font",
                "    ? css`",
                "        font-family: ${props.theme.heading.font.family};",
                "      `",
                "    : '';",
                "};",
                "",
                "const truncateStyle = `",
                "  white-space: nowrap;",
                "  overflow: hidden;",
                "  text-overflow: ellipsis;",
                "`;",
                "",
                "const colorStyle = css`",
                "  color: ${(props) =>",
                "    normalizeColor(props.colorProp || props.theme.heading.color, props.theme)};",
                "`;",
                "",
                "const StyledHeading = styled.h1`",
                "  ${genericStyles}",
                "  ${(props) => fontFamily(props)}",
                "  ${(props) => sizeStyle(props)}",
                "  ${(props) => props.textAlign && textAlignStyle}",
                "  ${(props) => props.truncate && truncateStyle}",
                "  ${(props) => (props.colorProp || props.theme.heading.color) && colorStyle}",
                "  ${(props) => props.theme.heading && props.theme.heading.extend}",
                "`;",
                "",
                "StyledHeading.defaultProps = {};",
                "Object.setPrototypeOf(StyledHeading.defaultProps, defaultProps);",
                "",
                "export { StyledHeading };"
            ]
        }
    },
    "bug_functions": {
        "3": {
            "function_name": "PageHeader (not found) ",
            "file_path": "src/js/components/PageHeader/PageHeader.js",
            "function_details": [
                {
                    "name": "PageHeader",
                    "start_line": 1,
                    "end_line": 100
                }
            ],
            "function_code": [
                "import React, { forwardRef, useContext } from 'react';",
                "import { ThemeContext } from 'styled-components';",
                "",
                "import { Box } from '../Box';",
                "import { Header } from '../Header';",
                "import { Heading } from '../Heading';",
                "import { Grid } from '../Grid';",
                "import { Paragraph } from '../Paragraph';",
                "import { ResponsiveContext } from '../../contexts/ResponsiveContext';",
                "",
                "const sizeStyle = (size, feature, theme) => {",
                "  const style = {",
                "    ...theme.pageHeader[feature],",
                "    ...((size && theme.pageHeader.size[size]?.[feature]) ??",
                "      theme.pageHeader[feature]),",
                "  };",
                "",
                "  return style;",
                "};",
                "",
                "const PageHeader = forwardRef(",
                "  (",
                "    {",
                "      actions,",
                "      gridProps: gridPropsProp,",
                "      parent,",
                "      responsive,",
                "      size,",
                "      subtitle,",
                "      title,",
                "      ...rest",
                "    },",
                "    ref,",
                "  ) => {",
                "    const theme = useContext(ThemeContext);",
                "    const breakpoint = useContext(ResponsiveContext);",
                "",
                "    let actionsProps = { ...theme.pageHeader.actions };",
                "    let gridProps = theme.pageHeader[breakpoint] || theme.pageHeader.medium;",
                "",
                "    if (",
                "      responsive &&",
                "      theme.pageHeader.responsive.breakpoints.includes(breakpoint)",
                "    ) {",
                "      gridProps = { ...gridProps, ...theme.pageHeader.responsive };",
                "      actionsProps = {",
                "        ...actionsProps,",
                "        ...theme.pageHeader.responsive.actions,",
                "      };",
                "    }",
                "",
                "    const { areas, columns, gap, rows } = gridProps;",
                "",
                "    return (",
                "      <Header",
                "        ref={ref}",
                "        direction=\"column\"",
                "        gap=\"none\"",
                "        pad={sizeStyle(size, 'pad', theme)}",
                "        {...rest}",
                "      >",
                "        <Grid",
                "          columns={columns}",
                "          rows={rows}",
                "          areas={areas}",
                "          gap={gap}",
                "          fill=\"horizontal\"",
                "          {...gridPropsProp}",
                "        >",
                "          <Box gridArea=\"parent\" {...theme.pageHeader.parent}>",
                "            {parent}",
                "          </Box>",
                "          <Box gridArea=\"title\">",
                "            {typeof title === 'string' ? (",
                "              <Heading {...sizeStyle(size, 'title', theme)}>{title}</Heading>",
                "            ) : (",
                "              title",
                "            )}",
                "          </Box>",
                "          <Box gridArea=\"subtitle\">",
                "            {typeof subtitle === 'string' ? (",
                "              <Paragraph {...sizeStyle(size, 'subtitle', theme)}>",
                "                {subtitle}",
                "              </Paragraph>",
                "            ) : (",
                "              subtitle",
                "            )}",
                "          </Box>",
                "          <Box gridArea=\"actions\" {...actionsProps}>",
                "            {actions}",
                "          </Box>",
                "        </Grid>",
                "      </Header>",
                "    );",
                "  },",
                ");",
                "",
                "PageHeader.displayName = 'PageHeader';",
                "",
                "export { PageHeader };"
            ]
        }
    }
}