{
    "1": {
        "bug_file": "src/js/components/Select/Select.js",
        "compressed": "NO",
        "line_numbers": 157,
        "compressed_line_numbers": 157,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport styled from 'styled-components';\n\nimport { Box } from '../Box';\nimport { DropButton } from '../DropButton';\nimport { Keyboard } from '../Keyboard';\nimport { TextInput } from '../TextInput';\n\nimport { withForwardRef, withTheme } from '../hocs';\n\nimport SelectContainer from './SelectContainer';\nimport doc from './doc';\n\nconst SelectTextInput = styled(TextInput)`cursor: pointer;`;\n\nclass Select extends Component {\n  static defaultProps = {\n    closeOnChange: true,\n    dropAlign: { top: 'bottom', left: 'left' },\n    messages: { multiple: 'multiple' },\n  }\n\n  state = { open: false }\n\n  onOpen = () => {\n    const { onOpen } = this.props;\n    this.setState({ open: true }, () => {\n      if (onOpen) {\n        onOpen();\n      }\n    });\n  }\n\n  onClose = () => {\n    const { onClose } = this.props;\n    this.setState({ open: false }, () => {\n      if (onClose) {\n        onClose();\n      }\n    });\n  }\n\n  render() {\n    const {\n      a11yTitle,\n      children,\n      closeOnChange,\n      disabled,\n      dropAlign,\n      dropTarget,\n      forwardRef,\n      messages,\n      onChange,\n      onClose,\n      placeholder,\n      plain,\n      size,\n      theme,\n      value,\n      ...rest\n    } = this.props;\n    const { open } = this.state;\n\n    const onSelectChange = (event, ...args) => {\n      if (closeOnChange) {\n        this.onClose();\n      }\n      if (onChange) {\n        onChange(event, ...args);\n      }\n    };\n\n    const SelectIcon = theme.select.icons.down;\n    let selectValue;\n    let textValue;\n    if (!React.isValidElement(value)) {\n      if (Array.isArray(value)) {\n        if (value.length > 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value;\n          } else {\n            textValue = messages.multiple;\n          }\n        } else if (value.length === 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value[0];\n          } else {\n            textValue = value[0];\n          }\n        } else {\n          textValue = '';\n        }\n      } else {\n        textValue = value;\n      }\n    } else {\n      selectValue = value;\n    }\n\n    return (\n      <Keyboard onDown={this.onOpen} onUp={this.onOpen}>\n        <DropButton\n          ref={forwardRef}\n          disabled={disabled}\n          dropAlign={dropAlign}\n          dropTarget={dropTarget}\n          {...rest}\n          open={open}\n          onOpen={this.onOpen}\n          onClose={this.onClose}\n          a11yTitle={`${a11yTitle}${typeof value === 'string' ? `, ${value}` : ''}`}\n          dropContent={<SelectContainer {...this.props} onChange={onSelectChange} />}\n        >\n          <Box\n            align='center'\n            border={!plain ? 'all' : undefined}\n            direction='row'\n            justify='between'\n          >\n            <Box direction='row' flex={true} basis='auto'>\n              {selectValue || (\n                <SelectTextInput\n                  ref={(ref) => { this.inputRef = ref; }}\n                  {...rest}\n                  tabIndex='-1'\n                  type='text'\n                  placeholder={placeholder}\n                  plain={true}\n                  readOnly={true}\n                  value={textValue}\n                  size={size}\n                />\n              )}\n            </Box>\n            <Box\n              margin={{ horizontal: 'small' }}\n              flex={false}\n              style={{ minWidth: 'auto' }}\n            >\n              <SelectIcon color='brand' size={size} />\n            </Box>\n          </Box>\n        </DropButton>\n      </Keyboard>\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  doc(Select);\n}\n\nexport default compose(\n  withTheme,\n  withForwardRef,\n)(Select);"
    },
    "2": {
        "bug_file": "src/js/components/Select/stories/components/icons/ArrowDown.js",
        "compressed": "NO",
        "line_numbers": 9,
        "compressed_line_numbers": 9,
        "compressed_bug_file_content": "import React from 'react';\n\nconst ArrowDown = props => (\n  <svg width='10' height='20' fill='rgba(0, 0, 0, 0.54)' {...props}>\n    <path d='m0,7.5l5,5l5,-5l-10,0z' />\n  </svg>\n);\n\nexport default ArrowDown;"
    },
    "3": {
        "bug_file": "src/js/themes/dark.js",
        "compressed": "NO",
        "line_numbers": 91,
        "compressed_line_numbers": 91,
        "compressed_bug_file_content": "import { rgba } from 'polished';\nimport { css } from 'styled-components';\n\nimport { colorForName, deepFreeze } from '../utils';\n\nconst brandColor = '#FFCA58';\nconst accentColors = ['#FD6FFF', '#60EB9F', '#60EBE1', '#FFCA58'];\nconst neutralColors = ['#EB6060', '#01C781', '#6095EB', '#FFB200'];\nconst statusColors = {\n  critical: '#FF3333',\n  error: '#FF3333',\n  warning: '#F7E464',\n  ok: '#7DD892',\n  unknown: '#a8a8a8',\n  disabled: '#a8a8a8',\n};\nconst lightColors = ['#333333', '#444444', '#555555', '#666666', '#777777', '#999999'];\nconst darkColors = ['#F6F6F6', '#EEEEEE', '#DDDDDD', '#CCCCCC', '#BBBBBB', '#AAAAAA'];\nconst backgroundColor = '#111111';\nconst textColor = '#eeeeee';\nconst borderColor = 'rgba(255, 255, 255, 0.33)';\nconst focusColor = accentColors[0];\nconst activeColor = rgba('#666666', 0.5);\n\nconst colors = {\n  active: activeColor,\n  accent: accentColors,\n  background: backgroundColor,\n  black: '#000000',\n  border: borderColor,\n  brand: brandColor,\n  dark: darkColors,\n  darkBackground: {\n    text: textColor,\n  },\n  focus: focusColor,\n  light: lightColors,\n  lightBackground: {\n    text: '#000000',\n  },\n  neutral: neutralColors,\n  placeholder: '#AAAAAA',\n  status: statusColors,\n  text: textColor,\n  white: '#FFFFFF',\n};\n\nconst colorArray = (array, prefix) =>\n  array.forEach((color, index) => {\n    colors[`${prefix}-${index + 1}`] = color;\n  });\n\ncolorArray(accentColors, 'accent');\ncolorArray(darkColors, 'dark');\ncolorArray(lightColors, 'light');\ncolorArray(neutralColors, 'neutral');\nObject.keys(statusColors).forEach((color) => {\n  colors[`status-${color}`] = statusColors[color];\n});\n\nexport default deepFreeze({\n  global: {\n    colors,\n    focus: {\n      border: {\n        color: css`${props => colorForName('focus', props.theme)}`,\n        width: '2px',\n      },\n    },\n    hover: {\n      backgroundColor: css`${props => props.theme.global.colors.active}`,\n      textColor: '#FFFFFF',\n    },\n    input: {\n      border: {\n        width: '1px',\n        radius: '4px',\n        color: css`${props => props.theme.global.colors.border}`,\n      },\n      weight: 700,\n    },\n  },\n  icon: {\n    color: textColor,\n    colors,\n  },\n  layer: {\n    backgroundColor,\n    overlayBackgroundColor: 'rgba(48, 48, 48, 0.5)',\n  },\n});"
    }
}