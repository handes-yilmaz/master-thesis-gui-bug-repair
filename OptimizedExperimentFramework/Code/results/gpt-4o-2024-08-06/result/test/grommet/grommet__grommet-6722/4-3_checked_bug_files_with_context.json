{
    "src/js/components/NameValueList/NameValueList.js": [
        "import React, { forwardRef, useContext, useMemo } from 'react';",
        "import { ThemeContext } from 'styled-components';",
        "import { Grid } from '../Grid';",
        "import { ResponsiveContext } from '../../contexts/ResponsiveContext';",
        "import { NameValueListContext } from './NameValueListContext';",
        "",
        "const NameValueList = forwardRef(",
        "  (",
        "    {",
        "      align,",
        "      layout = 'column',",
        "      nameProps,",
        "      pairProps = { direction: 'row' },",
        "      valueProps,",
        "      ...rest",
        "    },",
        "    ref,",
        "  ) => {",
        "    const size = useContext(ResponsiveContext);",
        "    const theme = useContext(ThemeContext);",
        "",
        "    // If layout is grid, valueWidth sets the max width of the column.",
        "    // Grid will 'fit' as many columns of valueWidth per row as container's",
        "    // width allows.",
        "    let columns;",
        "    const valueWidth = valueProps?.width || theme.nameValueList.value.width;",
        "    const nameWidth = nameProps?.width || theme.nameValueList.name.width;",
        "    if (size === 'small' || layout === 'grid')",
        "      columns = {",
        "        count: 'fit',",
        "        size: !Array.isArray(valueWidth) ? ['auto', valueWidth] : valueWidth,",
        "      };",
        "    else if (layout === 'column' && pairProps.direction === 'row')",
        "      columns = [",
        "        nameWidth,",
        "        !Array.isArray(valueWidth) ? ['auto', valueWidth] : valueWidth,",
        "      ];",
        "    else columns = [valueWidth];",
        "",
        "    let { gap } = theme.nameValueList;",
        "    if (",
        "      (pairProps.direction === 'column' || size === 'small') &&",
        "      theme.nameValueList.pair?.column?.gap",
        "    ) {",
        "      gap = theme.nameValueList.pair.column.gap;",
        "    }",
        "",
        "    const listContextValue = useMemo(",
        "      () => ({ nameProps, pairProps, valueProps }),",
        "      [nameProps, pairProps, valueProps],",
        "    );",
        "",
        "    return (",
        "      <NameValueListContext.Provider value={listContextValue}>",
        "        <Grid",
        "          as=\"dl\"",
        "          ref={ref}",
        "          columns={columns}",
        "          gap={gap}",
        "          margin=\"none\" // override browser default margin for dl",
        "          {...rest}",
        "        />",
        "      </NameValueListContext.Provider>",
        "    );",
        "  },",
        ");",
        "",
        "NameValueList.displayName = 'NameValueList';",
        "",
        "export { NameValueList };"
    ],
    "src/js/components/NameValuePair/NameValuePair.js": [
        "import React, { Fragment, useContext } from 'react';",
        "import { ThemeContext } from 'styled-components';",
        "import { Box } from '../Box';",
        "import { Text } from '../Text';",
        "import { ResponsiveContext } from '../../contexts/ResponsiveContext';",
        "import { NameValueListContext } from '../NameValueList/NameValueListContext';",
        "",
        "const NameValuePair = ({ children, name: nameProp }) => {",
        "  const { nameProps, pairProps, valueProps } = useContext(NameValueListContext);",
        "  const size = useContext(ResponsiveContext);",
        "  const theme = useContext(ThemeContext);",
        "  const direction = pairProps?.direction;",
        "",
        "  const column =",
        "    direction === 'column' ||",
        "    direction === 'column-reverse' ||",
        "    size === 'small';",
        "",
        "  const Container = column ? Box : Fragment;",
        "",
        "  const nameAlign = size !== 'small' ? nameProps?.align : undefined;",
        "  const valueAlign = size !== 'small' ? valueProps?.align : undefined;",
        "  // using margin to act as gap",
        "  // <dl> elements must only directly contain",
        "  // properly-ordered <dt> and <dd> groups",
        "  let valueGap;",
        "  if (column && theme.nameValuePair?.column?.gap)",
        "    valueGap = { bottom: theme.nameValuePair.column.gap };",
        "",
        "  let name;",
        "  if (typeof nameProp === 'string' || typeof nameProp === 'number')",
        "    name = (",
        "      <Text",
        "        as=\"dt\"",
        "        margin={valueGap}",
        "        textAlign={nameAlign}",
        "        {...theme.nameValuePair.name}",
        "      >",
        "        {nameProp}",
        "      </Text>",
        "    );",
        "  else",
        "    name = (",
        "      <Box as=\"dt\" align={nameAlign}>",
        "        {nameProp}",
        "      </Box>",
        "    );",
        "",
        "  let value;",
        "  if (typeof children === 'string' || typeof children === 'number')",
        "    value = (",
        "      // override browser default margin for dd",
        "      <Text",
        "        as=\"dd\"",
        "        margin=\"none\"",
        "        textAlign={valueAlign}",
        "        {...theme.nameValuePair.value}",
        "      >",
        "        {children}",
        "      </Text>",
        "    );",
        "  else",
        "    value = (",
        "      // override browser default margin for dd",
        "      <Box margin=\"none\" as=\"dd\" align={valueAlign}>",
        "        {children}",
        "      </Box>",
        "    );",
        "",
        "  const first = direction !== 'column-reverse' ? name : value;",
        "  const second = direction !== 'column-reverse' ? value : name;",
        "",
        "  return (",
        "    <Container>",
        "      {first}",
        "      {second}",
        "    </Container>",
        "  );",
        "};",
        "",
        "export { NameValuePair };"
    ]
}