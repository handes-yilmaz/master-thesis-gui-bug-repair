{
    "src/js/components/Data/Data.js": [
        "import React, { useContext, useEffect, useMemo, useState } from 'react';",
        "import { AnnounceContext } from '../../contexts';",
        "import { Box } from '../Box';",
        "import { DataFilters } from '../DataFilters';",
        "import { DataSearch } from '../DataSearch';",
        "import { DataSummary } from '../DataSummary';",
        "import { DataView } from '../DataView';",
        "import { Toolbar } from '../Toolbar';",
        "import { DataContext } from '../../contexts/DataContext';",
        "import { DataPropTypes } from './propTypes';",
        "import { MessageContext } from '../../contexts/MessageContext';",
        "import { filter } from './filter';",
        "",
        "const defaultDefaultView = { search: '' };",
        "",
        "const normalizeView = (viewProp, views) =>",
        "  (typeof viewProp === 'string' && views?.find((v) => v.name === viewProp)) ||",
        "  (typeof viewProp === 'object' && viewProp);",
        "",
        "export const Data = ({",
        "  children,",
        "  data: dataProp = [],",
        "  defaultView = defaultDefaultView,",
        "  filteredTotal,",
        "  id = 'data',",
        "  messages,",
        "  onView,",
        "  properties,",
        "  toolbar,",
        "  total,",
        "  updateOn = 'submit',",
        "  view: viewProp,",
        "  views,",
        "  ...rest",
        "}) => {",
        "  const [view, setView] = useState(",
        "    normalizeView(viewProp || defaultView, views),",
        "  );",
        "  useEffect(",
        "    () => setView(normalizeView(viewProp || defaultView, views)),",
        "    [defaultView, viewProp, views],",
        "  );",
        "  const [toolbarKeys, setToolbarKeys] = useState([]);",
        "",
        "  const result = useMemo(() => {",
        "    if (onView)",
        "      // caller is filtering",
        "      return {",
        "        data: dataProp,",
        "        total,",
        "        filteredTotal: filteredTotal ?? dataProp?.length ?? 0,",
        "      };",
        "    return filter(dataProp, view, properties);",
        "  }, [dataProp, filteredTotal, onView, properties, total, view]);",
        "",
        "  const announce = useContext(AnnounceContext);",
        "  const { format } = useContext(MessageContext);",
        "  // Announce to screen readers when search or filters are",
        "  // applied and affect the underlying result set",
        "  useEffect(() => {",
        "    let messageId;",
        "    if (result.total !== result.filteredTotal) {",
        "      if (result.filteredTotal === 1) messageId = 'dataSummary.filteredSingle';",
        "      else messageId = 'dataSummary.filtered';",
        "    } else if (result.total === 1) messageId = 'dataSummary.totalSingle';",
        "    else messageId = 'dataSummary.total';",
        "",
        "    // helps account for cases like 0 results of 1 item",
        "    const items = format({",
        "      id: result.total === 1 ? 'dataSummary.itemsSingle' : 'dataSummary.items',",
        "      messages: messages?.dataSummary,",
        "    });",
        "",
        "    announce(",
        "      format({",
        "        id: messageId,",
        "        messages: messages?.dataSummary,",
        "        values: {",
        "          filteredTotal: result.filteredTotal,",
        "          total: result.total,",
        "          items,",
        "        },",
        "      }),",
        "    );",
        "  }, [",
        "    announce,",
        "    format,",
        "    messages?.dataSummary,",
        "    result.filteredTotal,",
        "    result.total,",
        "  ]);",
        "",
        "  // what we use for DataContext value",
        "  const contextValue = useMemo(() => {",
        "    const value = {",
        "      id,",
        "      messages,",
        "      properties,",
        "      updateOn,",
        "      view,",
        "      views,",
        "      ...result,",
        "    };",
        "",
        "    value.clearFilters = () => {",
        "      const nextView = defaultView;",
        "      setView(nextView);",
        "      if (onView) onView(nextView);",
        "    };",
        "",
        "    value.onView = (nextView) => {",
        "      setView(nextView);",
        "      if (onView) onView(nextView);",
        "    };",
        "",
        "    value.addToolbarKey = (key) => {",
        "      setToolbarKeys((prevKeys) => {",
        "        if (prevKeys.includes(key)) return prevKeys;",
        "        return [...prevKeys, key];",
        "      });",
        "    };",
        "    value.toolbarKeys = toolbarKeys;",
        "",
        "    return value;",
        "  }, [",
        "    defaultView,",
        "    id,",
        "    messages,",
        "    onView,",
        "    properties,",
        "    result,",
        "    toolbarKeys,",
        "    updateOn,",
        "    view,",
        "    views,",
        "  ]);",
        "",
        "  let toolbarContent;",
        "  if (toolbar) {",
        "    toolbarContent = [",
        "      <Toolbar key=\"toolbar\">",
        "        {(toolbar === true || toolbar === 'search') && <DataSearch />}",
        "        {(toolbar === true || toolbar === 'view') && <DataView />}",
        "        {(toolbar === true || toolbar === 'filters') && <DataFilters drop />}",
        "      </Toolbar>,",
        "      <DataSummary key=\"summary\" />,",
        "    ];",
        "  }",
        "",
        "  return (",
        "    <DataContext.Provider value={contextValue}>",
        "      <Box id={id} flex={false} {...rest}>",
        "        {toolbarContent}",
        "        {children}",
        "      </Box>",
        "    </DataContext.Provider>",
        "  );",
        "};",
        "",
        "Data.propTypes = DataPropTypes;"
    ],
    "src/js/components/DataFilters/DataFilters.js": [
        "import React, { Children, useContext, useMemo, useState } from 'react';",
        "import { Filter } from 'grommet-icons/icons/Filter';",
        "import { Close } from 'grommet-icons/icons/Close';",
        "import { Box } from '../Box';",
        "import { Button } from '../Button';",
        "import { DataFilter } from '../DataFilter';",
        "import { DataForm } from '../Data/DataForm';",
        "import { DataSort } from '../DataSort';",
        "import { DropButton } from '../DropButton';",
        "import { Header } from '../Header';",
        "import { Heading } from '../Heading';",
        "import { Layer } from '../Layer';",
        "import { DataContext } from '../../contexts/DataContext';",
        "import { MessageContext } from '../../contexts/MessageContext';",
        "import { DataFiltersPropTypes } from './propTypes';",
        "",
        "const dropProps = {",
        "  align: { top: 'bottom', right: 'right' },",
        "};",
        "",
        "const layerProps = {",
        "  full: 'vertical',",
        "  position: 'right',",
        "};",
        "",
        "export const DataFilters = ({ drop, children, heading, layer, ...rest }) => {",
        "  const {",
        "    clearFilters,",
        "    id: dataId,",
        "    messages,",
        "    properties,",
        "    unfilteredData,",
        "    view,",
        "  } = useContext(DataContext);",
        "  const { format } = useContext(MessageContext);",
        "  const [showContent, setShowContent] = useState();",
        "  // touched is a map of form field name to its value, it only has fields that",
        "  // were changed as part of the DataForm here. This is so we can track based",
        "  // on what's inside DataFilters as opposed to trying to track from the view",
        "  // object.",
        "  const [touched, setTouched] = useState({});",
        "  const controlled = useMemo(() => drop || layer, [drop, layer]);",
        "  // generate the badge value based on touched fields that have a value",
        "  const badge = useMemo(",
        "    () =>",
        "      (controlled && Object.keys(touched).filter((k) => touched[k]).length) ||",
        "      undefined,",
        "    [controlled, touched],",
        "  );",
        "",
        "  const clearControl = badge && (",
        "    <Box flex={false} margin={{ start: 'small' }}>",
        "      <Button",
        "        label={format({",
        "          id: 'dataFilters.clear',",
        "          messages: messages?.dataFilters,",
        "        })}",
        "        onClick={() => {",
        "          setTouched({});",
        "          clearFilters();",
        "        }}",
        "      />",
        "    </Box>",
        "  );",
        "",
        "  let content = children;",
        "  if (Children.count(children) === 0) {",
        "    let filtersFor;",
        "    if (!properties && unfilteredData && unfilteredData.length)",
        "      // build from a piece of data, ignore object values",
        "      filtersFor = Object.keys(unfilteredData[0]).filter(",
        "        (k) => typeof unfilteredData[0][k] !== 'object',",
        "      );",
        "    else if (Array.isArray(properties)) filtersFor = properties;",
        "    else if (typeof properties === 'object')",
        "      filtersFor = Object.keys(properties);",
        "    else filtersFor = [];",
        "    content = filtersFor.map((property) => (",
        "      <DataFilter key={property} property={property} />",
        "    ));",
        "    if (view?.sort) {",
        "      content.push(<DataSort key=\"_sort\" />);",
        "    }",
        "  }",
        "",
        "  content = (",
        "    <DataForm",
        "      pad={controlled ? 'medium' : undefined}",
        "      onDone={() => setShowContent(false)}",
        "      onTouched={",
        "        controlled",
        "          ? (currentTouched) =>",
        "              // we merge this with our prior state to handle the case where the",
        "              // user opens and closes the drop multiple times and we want to",
        "              // track both new changes and prior changes.",
        "              setTouched((prevTouched) => ({",
        "                ...prevTouched,",
        "                ...currentTouched,",
        "              }))",
        "          : undefined",
        "      }",
        "      {...(!controlled ? rest : { fill: 'vertical' })}",
        "    >",
        "      {layer && (",
        "        <Header>",
        "          <Heading margin=\"none\" level={2}>",
        "            {heading ||",
        "              format({",
        "                id: 'dataFilters.heading',",
        "                messages: messages?.dataFilters,",
        "              })}",
        "          </Heading>",
        "          {!controlled && clearControl}",
        "          <Button",
        "            icon={<Close />}",
        "            hoverIndicator",
        "            onClick={() => setShowContent(undefined)}",
        "          />",
        "        </Header>",
        "      )}",
        "      {content}",
        "    </DataForm>",
        "  );",
        "",
        "  if (!controlled) return content;",
        "",
        "  const tip = format({",
        "    id: badge",
        "      ? `dataFilters.openSet.${badge === 1 ? 'singular' : 'plural'}`",
        "      : 'dataFilters.open',",
        "    messages: messages?.dataFilters,",
        "    values: { number: badge },",
        "  });",
        "",
        "  let control;",
        "  if (drop) {",
        "    control = (",
        "      <DropButton",
        "        id={`${dataId}--filters-control`}",
        "        tip={tip}",
        "        aria-label={tip}",
        "        kind=\"toolbar\"",
        "        icon={<Filter />}",
        "        hoverIndicator",
        "        dropProps={dropProps}",
        "        dropContent={content}",
        "        badge={badge}",
        "        open={showContent}",
        "        onOpen={() => setShowContent(undefined)}",
        "        onClose={() => setShowContent(undefined)}",
        "      />",
        "    );",
        "  } else if (layer) {",
        "    control = (",
        "      <Button",
        "        id={`${dataId}--filters-control`}",
        "        tip={tip}",
        "        aria-label={tip}",
        "        kind=\"toolbar\"",
        "        hoverIndicator",
        "        icon={<Filter />}",
        "        badge={badge}",
        "        onClick={() => setShowContent(true)}",
        "      />",
        "    );",
        "  }",
        "",
        "  return (",
        "    <Box flex={false} direction=\"row\" {...rest}>",
        "      {control}",
        "      {clearControl}",
        "      {layer && showContent && (",
        "        <Layer",
        "          id={`${dataId}--filters-layer`}",
        "          {...(typeof layer === 'object' ? layer : layerProps)}",
        "          onClickOutside={() => setShowContent(undefined)}",
        "          onEsc={() => setShowContent(undefined)}",
        "        >",
        "          {content}",
        "        </Layer>",
        "      )}",
        "    </Box>",
        "  );",
        "};",
        "",
        "DataFilters.propTypes = DataFiltersPropTypes;"
    ]
}