{
    "1": {
        "bug_file": "src/js/components/Select/Select.js",
        "compressed": "NO",
        "line_numbers": 147,
        "compressed_line_numbers": 147,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport styled from 'styled-components';\n\nimport { Box } from '../Box';\nimport { DropButton } from '../DropButton';\nimport { Keyboard } from '../Keyboard';\nimport { TextInput } from '../TextInput';\n\nimport { withForwardRef, withTheme } from '../hocs';\n\nimport SelectContainer from './SelectContainer';\nimport doc from './doc';\n\nconst SelectTextInput = styled(TextInput)`cursor: pointer;`;\n\nclass Select extends Component {\n  static defaultProps = {\n    dropAlign: { top: 'bottom', left: 'left' },\n    messages: { multiple: 'multiple' },\n  }\n\n  state = { open: false }\n\n  onOpen = () => {\n    this.setState({ open: true });\n  }\n\n  onClose = () => {\n    const { onClose } = this.props;\n    this.setState({ open: false });\n    if (onClose) {\n      onClose();\n    }\n  }\n\n  render() {\n    const {\n      a11yTitle,\n      children,\n      disabled,\n      dropAlign,\n      dropTarget,\n      forwardRef,\n      messages,\n      onChange,\n      onClose,\n      placeholder,\n      plain,\n      size,\n      theme,\n      value,\n      ...rest\n    } = this.props;\n    const { open } = this.state;\n\n    const onSelectChange = (event, ...args) => {\n      this.onClose();\n      if (onChange) {\n        onChange(event, ...args);\n      }\n    };\n\n    const SelectIcon = theme.select.icons.down;\n    let selectValue;\n    let textValue;\n    if (!React.isValidElement(value)) {\n      if (Array.isArray(value)) {\n        if (value.length > 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value;\n          } else {\n            textValue = messages.multiple;\n          }\n        } else if (value.length === 1) {\n          if (React.isValidElement(value[0])) {\n            selectValue = value[0];\n          } else {\n            textValue = value[0];\n          }\n        } else {\n          textValue = '';\n        }\n      } else {\n        textValue = value;\n      }\n    } else {\n      selectValue = value;\n    }\n\n    return (\n      <Keyboard onDown={this.onOpen} onUp={this.onOpen}>\n        <DropButton\n          ref={forwardRef}\n          disabled={disabled}\n          dropAlign={dropAlign}\n          dropTarget={dropTarget}\n          {...rest}\n          open={open}\n          onOpen={this.onOpen}\n          onClose={this.onClose}\n          a11yTitle={`${a11yTitle}${typeof value === 'string' ? `, ${value}` : ''}`}\n          dropContent={<SelectContainer {...this.props} onChange={onSelectChange} />}\n        >\n          <Box\n            align='center'\n            border={!plain ? 'all' : undefined}\n            direction='row'\n            justify='between'\n          >\n            <Box direction='row' flex={true}>\n              {selectValue || (\n                <SelectTextInput\n                  ref={(ref) => { this.inputRef = ref; }}\n                  {...rest}\n                  tabIndex='-1'\n                  type='text'\n                  placeholder={placeholder}\n                  plain={true}\n                  readOnly={true}\n                  value={textValue}\n                  size={size}\n                />\n              )}\n            </Box>\n            <Box\n              margin={{ horizontal: 'small' }}\n              flex={false}\n              style={{ minWidth: 'auto' }}\n            >\n              <SelectIcon color='brand' size={size} />\n            </Box>\n          </Box>\n        </DropButton>\n      </Keyboard>\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  doc(Select);\n}\n\nexport default compose(\n  withTheme,\n  withForwardRef,\n)(Select);"
    },
    "2": {
        "bug_file": "src/js/components/Select/SelectContainer.js",
        "compressed": "NO",
        "line_numbers": 190,
        "compressed_line_numbers": 190,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\nimport { debounce } from '../../utils';\n\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\n\nclass SelectContainer extends Component {\n  state = {\n    activeIndex: -1, // for tracking keyboard interaction\n    search: '',\n  }\n  static defaultProps = {\n    value: '',\n  }\n  optionsRef = {}\n\n  componentDidMount() {\n    const { onSearch } = this.props;\n    // timeout need to send the operation through event loop and allow time to the portal\n    // to be available\n    setTimeout(() => {\n      if (onSearch) {\n        findDOMNode(this.searchRef).querySelector('input').focus();\n      } else if (this.selectRef) {\n        findDOMNode(this.selectRef).focus();\n      }\n    }, 0);\n  }\n\n  componentDidUpdate() {\n    const { activeIndex } = this.state;\n    const buttonNode = findDOMNode(this.optionsRef[activeIndex]);\n    if (activeIndex >= 0 && buttonNode && buttonNode.scrollIntoView) {\n      buttonNode.scrollIntoView();\n    }\n  }\n\n  onInput = (event) => {\n    this.setState(\n      { search: event.target.value },\n      () => this.onSearch(this.state.search)\n    );\n  }\n\n  onSearch = debounce(search => this.props.onSearch(search), 150)\n\n  selectOption = (option, index) => {\n    const { multiple, onChange, options, selected } = this.props;\n\n    if (onChange) {\n      let nextValue = option;\n      let nextSelected = index;\n      if (multiple) {\n        nextValue = [];\n        nextSelected = [];\n        let removed = false;\n        (selected || []).forEach((selectedIndex) => {\n          if (selectedIndex === index) {\n            removed = true;\n          } else {\n            nextValue.push(options[selectedIndex]);\n            nextSelected.push(selectedIndex);\n          }\n        });\n        if (!removed) {\n          nextValue.push(option);\n          nextSelected.push(index);\n        }\n      }\n\n      onChange({\n        target: findDOMNode(this.inputRef),\n        option,\n        value: nextValue,\n        selected: nextSelected,\n      });\n    }\n  }\n\n  onNextOption = (event) => {\n    const { options } = this.props;\n    const { activeIndex } = this.state;\n    event.preventDefault();\n    const index = Math.min(activeIndex + 1, options.length - 1);\n    this.setState({ activeIndex: index });\n  }\n\n  onPreviousOption = (event) => {\n    const { activeIndex } = this.state;\n    event.preventDefault();\n    const index = Math.max(activeIndex - 1, 0);\n    this.setState({ activeIndex: index });\n  }\n\n  onSelectOption = (event) => {\n    const { options } = this.props;\n    const { activeIndex } = this.state;\n    if (activeIndex >= 0) {\n      event.preventDefault(); // prevent submitting forms\n      this.selectOption(options[activeIndex], activeIndex);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      dropBackground,\n      id,\n      name,\n      onKeyDown,\n      onSearch,\n      options,\n      searchPlaceholder,\n      selected,\n      value,\n    } = this.props;\n    const { activeIndex, search } = this.state;\n\n    return (\n      <Keyboard\n        onEnter={this.onSelectOption}\n        onUp={this.onPreviousOption}\n        onDown={this.onNextOption}\n        onKeyDown={onKeyDown}\n      >\n        <Box\n          id={id ? `${id}__select-drop` : undefined}\n          background={dropBackground}\n        >\n          {onSearch ? (\n            <Box pad='xsmall'>\n              <TextInput\n                focusIndicator={true}\n                size='small'\n                ref={(ref) => { this.searchRef = ref; }}\n                type='search'\n                value={search}\n                placeholder={searchPlaceholder}\n                onInput={this.onInput}\n              />\n            </Box>\n          ) : undefined}\n\n          <Box\n            flex={false}\n            role='menubar'\n            tabIndex='-1'\n            ref={(ref) => { this.selectRef = ref; }}\n          >\n            <InfiniteScroll items={options} step={20}>\n              {(option, index) => (\n                <Button\n                  role='menuitem'\n                  ref={(ref) => { this.optionsRef[index] = ref; }}\n                  active={\n                    selected === index ||\n                    (Array.isArray(selected) && selected.indexOf(index) !== -1) ||\n                    activeIndex === index ||\n                    (option && option === value) ||\n                    (option && Array.isArray(value) && value.indexOf(option) !== -1)\n                  }\n                  key={`option_${name || ''}_${index}`}\n                  onClick={() => this.selectOption(option, index)}\n                  hoverIndicator='background'\n                >\n                  {children ? children(option, index, options) : (\n                    <Box align='start' pad='small'>\n                      <Text margin='none'>\n                        {(option !== null && option !== undefined) ?\n                          option.toString() : undefined}\n                      </Text>\n                    </Box>\n                  )}\n                </Button>\n              )}\n            </InfiniteScroll>\n          </Box>\n        </Box>\n      </Keyboard>\n    );\n  }\n}\n\nexport default SelectContainer;"
    },
    "3": {
        "bug_file": "src/js/components/Select/index.js",
        "compressed": "NO",
        "line_numbers": 5,
        "compressed_line_numbers": 5,
        "compressed_bug_file_content": "import Select from './Select';\n\nexport { default as Select } from './Select';\n\nexport default Select;"
    },
    "4": {
        "bug_file": "src/js/components/TextInput/TextInput.js",
        "compressed": "NO",
        "line_numbers": 276,
        "compressed_line_numbers": 276,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport { compose } from 'recompose';\n\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Keyboard } from '../Keyboard';\nimport { Drop } from '../Drop';\nimport { withAnnounce, withForwardRef, withTheme } from '../hocs';\n\nimport StyledTextInput, {\n  StyledTextInputContainer,\n  StyledSuggestions,\n} from './StyledTextInput';\nimport doc from './doc';\n\nfunction renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n  return suggestion;\n}\n\nfunction stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n    return suggestion.value;\n  }\n  return suggestion;\n}\n\nclass TextInput extends Component {\n  static defaultProps = {\n    dropAlign: { top: 'bottom', left: 'left' },\n    messages: {\n      enterSelect: '(Press Enter to Select)',\n      suggestionsCount: 'suggestions available',\n      suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n      suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate',\n    },\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { forwardRef } = nextProps;\n    const { inputRef } = prevState;\n    const nextInputRef = forwardRef || inputRef;\n    if (nextInputRef !== inputRef) {\n      return { inputRef: nextInputRef };\n    }\n    return null;\n  }\n\n  state = {\n    activeSuggestionIndex: -1,\n    inputRef: React.createRef(),\n    showDrop: false,\n  }\n\n  announce = (message, mode) => {\n    const { announce, suggestions } = this.props;\n    if (suggestions && suggestions.length > 0) {\n      announce(message, mode);\n    }\n  }\n\n  announceSuggestionsCount = () => {\n    const { suggestions, messages: { suggestionsCount } } = this.props;\n    this.announce(`${suggestions.length} ${suggestionsCount}`);\n  }\n\n  announceSuggestionsExist = () => {\n    const { messages: { suggestionsExist } } = this.props;\n    this.announce(suggestionsExist);\n  }\n\n  announceSuggestionsIsOpen = () => {\n    const { messages: { suggestionIsOpen } } = this.props;\n    this.announce(suggestionIsOpen);\n  }\n\n  announceSuggestion(index) {\n    const { suggestions, messages: { enterSelect } } = this.props;\n    if (suggestions && suggestions.length > 0) {\n      const labelMessage = stringLabel(suggestions[index]);\n      this.announce(`${labelMessage} ${enterSelect}`);\n    }\n  }\n\n  resetSuggestions = () => {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length) {\n      this.setState({\n        activeSuggestionIndex: -1,\n        showDrop: true,\n        selectedSuggestionIndex: -1,\n      }, this.announceSuggestionsCount);\n    }\n  }\n\n  getSelectedSuggestionIndex = () => {\n    const { suggestions, value } = this.props;\n    const suggestionValues = suggestions.map((suggestion) => {\n      if (typeof suggestion === 'object') {\n        return suggestion.value;\n      }\n      return suggestion;\n    });\n    return suggestionValues.indexOf(value);\n  }\n\n  onShowSuggestions = () => {\n    // Get values of suggestions, so we can highlight selected suggestion\n    const selectedSuggestionIndex = this.getSelectedSuggestionIndex();\n\n    this.setState({\n      showDrop: true,\n      activeSuggestionIndex: -1,\n      selectedSuggestionIndex,\n    }, this.announceSuggestionsIsOpen);\n  }\n\n  onNextSuggestion = (event) => {\n    const { suggestions } = this.props;\n    const { activeSuggestionIndex, showDrop } = this.state;\n    if (suggestions && suggestions.length > 0) {\n      if (!showDrop) {\n        this.onShowSuggestions();\n      } else {\n        event.preventDefault();\n        const index = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n        this.setState({ activeSuggestionIndex: index }, () => this.announceSuggestion(index));\n      }\n    }\n  }\n\n  onPreviousSuggestion = (event) => {\n    const { suggestions } = this.props;\n    const { activeSuggestionIndex, showDrop } = this.state;\n    if (suggestions && suggestions.length > 0 && showDrop) {\n      event.preventDefault();\n      const index = Math.max(activeSuggestionIndex - 1, 0);\n      this.setState({ activeSuggestionIndex: index }, () => this.announceSuggestion(index));\n    }\n  }\n\n  onClickSuggestion = (suggestion) => {\n    const { onSelect } = this.props;\n    const { inputRef } = this.state;\n    this.setState({ showDrop: false });\n    if (onSelect) {\n      onSelect({ target: inputRef.current, suggestion });\n    }\n  }\n\n  onSuggestionSelect = (event) => {\n    const { onSelect, suggestions } = this.props;\n    const { activeSuggestionIndex, inputRef } = this.state;\n    this.setState({ showDrop: false });\n    if (activeSuggestionIndex >= 0) {\n      event.preventDefault(); // prevent submitting forms\n      const suggestion = suggestions[activeSuggestionIndex];\n      if (onSelect) {\n        onSelect({ target: inputRef.current, suggestion });\n      }\n    }\n  }\n\n  onDropClose = () => {\n    this.setState({ showDrop: false });\n  }\n\n  renderSuggestions = () => {\n    const { suggestions, theme } = this.props;\n    const { activeSuggestionIndex, selectedSuggestionIndex } = this.state;\n    let items;\n    if (suggestions && suggestions.length > 0) {\n      items = suggestions.map((suggestion, index) => (\n        <li key={`${stringLabel(suggestion)}-${index}`}>\n          <Button\n            active={\n              activeSuggestionIndex === index ||\n              selectedSuggestionIndex === index\n            }\n            fill={true}\n            hoverIndicator='background'\n            onClick={() => this.onClickSuggestion(suggestion)}\n          >\n            <Box align='start' pad='small'>\n              {renderLabel(suggestion)}\n            </Box>\n          </Button>\n        </li>\n      ));\n    }\n\n    return (\n      <StyledSuggestions theme={theme}>\n        {items}\n      </StyledSuggestions>\n    );\n  }\n\n  render() {\n    const {\n      defaultValue, dropAlign, dropTarget, id, plain, value, onFocus, onInput, onKeyDown,\n      ...rest\n    } = this.props;\n    delete rest.onInput; // se we can manage in onInputChange()\n    const { inputRef, showDrop } = this.state;\n    // needed so that styled components does not invoke\n    // onSelect when text input is clicked\n    delete rest.onSelect;\n    let drop;\n    if (showDrop) {\n      drop = (\n        <Drop\n          id={id ? `text-input-drop__${id}` : undefined}\n          align={dropAlign}\n          responsive={false}\n          target={dropTarget || inputRef.current}\n          onClickOutside={() => this.setState({ showDrop: false })}\n          onEsc={() => this.setState({ showDrop: false })}\n        >\n          {this.renderSuggestions()}\n        </Drop>\n      );\n    }\n    return (\n      <StyledTextInputContainer plain={plain}>\n        <Keyboard\n          onEnter={this.onSuggestionSelect}\n          onEsc={this.onDropClose}\n          onTab={this.onDropClose}\n          onUp={this.onPreviousSuggestion}\n          onDown={this.onNextSuggestion}\n          onKeyDown={onKeyDown}\n        >\n          <StyledTextInput\n            id={id}\n            innerRef={inputRef}\n            autoComplete='off'\n            plain={plain}\n            {...rest}\n            defaultValue={renderLabel(defaultValue)}\n            value={renderLabel(value)}\n            onFocus={(event) => {\n              this.announceSuggestionsExist();\n              if (onFocus) {\n                onFocus(event);\n              }\n            }}\n            onInput={(event) => {\n              this.resetSuggestions();\n              if (onInput) {\n                onInput(event);\n              }\n            }}\n          />\n        </Keyboard>\n        {drop}\n      </StyledTextInputContainer>\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  doc(TextInput);\n}\n\nexport default compose(\n  withTheme,\n  withAnnounce,\n  withForwardRef,\n)(TextInput);"
    }
}