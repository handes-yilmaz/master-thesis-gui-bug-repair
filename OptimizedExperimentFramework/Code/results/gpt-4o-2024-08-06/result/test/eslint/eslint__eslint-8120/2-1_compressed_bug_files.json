{
    "1": {
        "bug_file": "lib/rules/no-unused-vars.js",
        "compressed": "YES",
        "line_numbers": 604,
        "compressed_line_numbers": 256,
        "compressed_bug_file_content": "/**\n * @fileoverview Rule to flag declared but unused variables\n * @author Ilya Volodin\n */\n\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n\n        /**\n         * Determines if a given variable is being exported from a module.\n         * @param {Variable} variable - EScope variable object.\n         * @returns {boolean} True if the variable is exported, false if not.\n         * @private\n         */\n\n\n        /**\n         * Determines if a variable has a sibling rest property\n         * @param {Variable} variable - EScope variable object.\n         * @returns {boolean} True if the variable is exported, false if not.\n         * @private\n         */\n\n\n        /**\n         * Determines if a reference is a read operation.\n         * @param {Reference} ref - An escope Reference\n         * @returns {boolean} whether the given reference represents a read operation\n         * @private\n         */\n\n\n        /**\n         * Determine if an identifier is referencing an enclosing function name.\n         * @param {Reference} ref - The reference to check.\n         * @param {ASTNode[]} nodes - The candidate function nodes.\n         * @returns {boolean} True if it's a self-reference, false if not.\n         * @private\n         */\n\n\n        /**\n         * Checks the position of given nodes.\n         *\n         * @param {ASTNode} inner - A node which is expected as inside.\n         * @param {ASTNode} outer - A node which is expected as outside.\n         * @returns {boolean} `true` if the `inner` node exists in the `outer` node.\n         * @private\n         */\n\n\n        /**\n         * If a given reference is left-hand side of an assignment, this gets\n         * the right-hand side node of the assignment.\n         *\n         * In the following cases, this returns null.\n         *\n         * - The reference is not the LHS of an assignment expression.\n         * - The reference is inside of a loop.\n         * - The reference is inside of a function scope which is different from\n         *   the declaration.\n         *\n         * @param {escope.Reference} ref - A reference to check.\n         * @param {ASTNode} prevRhsNode - The previous RHS node.\n         * @returns {ASTNode|null} The RHS node or null.\n         * @private\n         */\n\n\n            /*\n             * Inherits the previous node if this reference is in the node.\n             * This is for `a = a + a`-like code.\n             */\n\n\n        /**\n         * Checks whether a given function node is stored to somewhere or not.\n         * If the function node is stored, the function can be used later.\n         *\n         * @param {ASTNode} funcNode - A function node to check.\n         * @param {ASTNode} rhsNode - The RHS node of the previous assignment.\n         * @returns {boolean} `true` if under the following conditions:\n         *      - the funcNode is assigned to a variable.\n         *      - the funcNode is bound as an argument of a function call.\n         *      - the function is bound to a property and the object satisfies above conditions.\n         * @private\n         */\n\n\n                            /*\n                             * If it encountered statements, this is a complex pattern.\n                             * Since analyzeing complex patterns is hard, this returns `true` to avoid false positive.\n                             */\n\n\n        /**\n         * Checks whether a given Identifier node exists inside of a function node which can be used later.\n         *\n         * \"can be used later\" means:\n         * - the function is assigned to a variable.\n         * - the function is bound to a property and the object can be used later.\n         * - the function is bound as an argument of a function call.\n         *\n         * If a reference exists in a function which can be used later, the reference is read when the function is called.\n         *\n         * @param {ASTNode} id - An Identifier node to check.\n         * @param {ASTNode} rhsNode - The RHS node of the previous assignment.\n         * @returns {boolean} `true` if the `id` node exists inside of a function node which can be used later.\n         * @private\n         */\n\n\n        /**\n         * Checks whether a given reference is a read to update itself or not.\n         *\n         * @param {escope.Reference} ref - A reference to check.\n         * @param {ASTNode} rhsNode - The RHS node of the previous assignment.\n         * @returns {boolean} The reference is a read to update itself.\n         * @private\n         */\n\n\n                // self update. e.g. `a += 1`, `a++`\n\n\n                // in RHS of an assignment for itself. e.g. `a = a + 1`\n\n\n        /**\n         * Determine if an identifier is used either in for-in loops.\n         *\n         * @param {Reference} ref - The reference to check.\n         * @returns {boolean} whether reference is used in the for-in loops\n         * @private\n         */\n\n\n            // \"for (var ...) { return; }\"\n\n\n            // \"for (...) { return; }\"\n\n\n            // \"for (...) return;\"\n\n\n            // For empty loop body\n\n\n        /**\n         * Determines if the variable is used.\n         * @param {Variable} variable - The variable to check.\n         * @returns {boolean} True if the variable is used\n         * @private\n         */\n\n\n        /**\n         * Checks whether the given variable is the last parameter in the non-ignored parameters.\n         *\n         * @param {escope.Variable} variable - The variable to check.\n         * @returns {boolean} `true` if the variable is the last.\n         */\n\n\n            // This is the last.\n\n\n            // if all parameters preceded by this variable are ignored and unused, this is the last.\n\n\n        /**\n         * Gets an array of variables without read references.\n         * @param {Scope} scope - an escope Scope object.\n         * @param {Variable[]} unusedVars - an array that saving result.\n         * @returns {Variable[]} unused variables of the scope and descendant scopes.\n         * @private\n         */\n\n\n                    // skip a variable of class itself name in the class scope\n\n\n                    // skip function expression names and variables marked with markVariableAsUsed()\n\n\n                    // skip implicit \"arguments\" variable\n\n\n                    // explicit global variables don't have definitions.\n\n\n                        // skip catch variables\n\n\n                            // skip ignored parameters\n\n\n                            // skip any setter argument\n\n\n                            // if \"args\" option is \"none\", skip any parameter\n\n\n                            // skip ignored parameters\n\n\n                            // if \"args\" option is \"after-used\", skip all but the last parameter\n\n\n                            // skip ignored variables\n\n\n        /**\n         * Gets the index of a given variable name in a given comment.\n         * @param {escope.Variable} variable - A variable to get.\n         * @param {ASTNode} comment - A comment node which includes the variable name.\n         * @returns {number} The index of the variable name's location.\n         * @private\n         */\n\n\n            // To ignore the first text \"global\".\n\n\n            // Search a given variable name.\n\n\n        /**\n         * Creates the correct location of a given variables.\n         * The location is at its name string in a `/*global` comment.\n         *\n         * @param {escope.Variable} variable - A variable to get its location.\n         * @returns {{line: number, column: number}} The location object for the variable.\n         * @private\n         */\n\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n\n"
    }
}