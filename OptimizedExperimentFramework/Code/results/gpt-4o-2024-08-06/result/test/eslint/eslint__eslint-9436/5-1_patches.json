{
    "1/1": "To address the issue described in the bug report, we need to adjust the error range reported by the `no-constant-condition` rule in ESLint. The current implementation reports the entire statement or expression, but it should only highlight the constant condition itself.\n\n### Bug Scenario Analysis\n\nThe bug scenario image shows that the entire `if` statement and the entire `something(true ? 1 : 0);` expression are underlined, indicating the error range is too broad. The expected behavior is to underline only the constant condition, such as the word \"true\".\n\n### Bug Root Cause\n\nThe root cause is in the `reportIfConstant` function, which reports the entire node when a constant condition is detected. We need to adjust the reporting to focus only on the constant part of the condition.\n\n### Bug Fix\n\nWe will modify the `reportIfConstant` function to report only the constant condition part of the node.\n\n```javascript\n### lib/rules/no-constant-condition.js\n<<<<<<< SEARCH\n        function reportIfConstant(node) {\n            if (node.test && isConstant(node.test, true)) {\n                context.report({ node, message: \"Unexpected constant condition.\" });\n            }\n        }\n=======\n        function reportIfConstant(node) {\n            if (node.test && isConstant(node.test, true)) {\n                context.report({\n                    node: node.test,\n                    message: \"Unexpected constant condition.\"\n                });\n            }\n        }\n>>>>>>> REPLACE\n```\n\n### Explanation\n\n- **Original Code**: The `context.report` function was called with the entire `node`, which includes the whole statement or expression.\n- **Modified Code**: The `context.report` function is now called with `node.test`, which specifically targets the constant condition part of the node. This change ensures that only the constant condition is highlighted in the error report."
}