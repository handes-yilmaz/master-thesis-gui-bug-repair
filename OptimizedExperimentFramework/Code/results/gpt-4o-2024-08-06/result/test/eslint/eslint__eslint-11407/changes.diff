diff --git a/lib/rules/implicit-arrow-linebreak.js b/lib/rules/implicit-arrow-linebreak.js
index ad0d70da6..f3feacfce 100644
--- a/lib/rules/implicit-arrow-linebreak.js
+++ b/lib/rules/implicit-arrow-linebreak.js
@@ -112,15 +112,13 @@ module.exports = {
             while (currentArrow) {
                 if (!isParenthesised(sourceCode, followingBody)) {
                     parenthesesFixes.push(
-                        fixer.insertTextAfter(currentArrow, " (")
+                        fixer.insertTextAfter(currentArrow, "(")
                     );
 
                     const paramsToken = sourceCode.getTokenBefore(currentArrow, token =>
                         isOpeningParenToken(token) || token.type === "Identifier");
 
-                    const whiteSpaces = " ".repeat(paramsToken.loc.start.column);
-
-                    closingParentheses = `\n${whiteSpaces})${closingParentheses}`;
+                    closingParentheses = `)${closingParentheses}`;
                 }
 
                 currentArrow = sourceCode.getTokenAfter(currentArrow, isArrowToken);
@@ -152,34 +150,12 @@ module.exports = {
                     comment.loc.start.line < arrowBody.loc.start.line);
 
                 if (comments.length) {
-
-                    // If the grandparent is not a variable declarator
-                    if (
-                        arrowBody.parent &&
-                        arrowBody.parent.parent &&
-                        arrowBody.parent.parent.type !== "VariableDeclarator"
-                    ) {
-
-                        // If any arrow functions follow, return the necessary parens fixes.
-                        if (sourceCode.getTokenAfter(arrowToken, isArrowToken) && arrowBody.parent.parent.type !== "VariableDeclarator") {
-                            return addParentheses(fixer, arrowToken, arrowBody);
-                        }
-
-                        // If any arrow functions precede, the necessary fixes have already been returned, so return null.
-                        if (sourceCode.getTokenBefore(arrowToken, isArrowToken) && arrowBody.parent.parent.type !== "VariableDeclarator") {
-                            return null;
-                        }
-                    }
-
                     const firstToken = findFirstToken(node);
-
                     const commentText = formatComments(comments, firstToken.loc.start.column);
-
                     const commentBeforeExpression = fixer.insertTextBeforeRange(
                         firstToken.range,
                         commentText
                     );
-
                     return [placeBesides, commentBeforeExpression];
                 }
 
