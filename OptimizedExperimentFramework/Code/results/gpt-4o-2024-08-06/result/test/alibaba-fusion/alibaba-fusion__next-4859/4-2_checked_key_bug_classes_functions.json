{
    "bug_classes": {
        "1": {
            "class_name": "CascaderSelect (not found) 18-518",
            "file_path": "components/cascader-select/cascader-select.tsx",
            "class_details": [
                {
                    "name": "CascaderSelect",
                    "start_line": 18,
                    "end_line": 518
                }
            ],
            "class_code": [
                "    CascaderSelectDataItem,",
                "    CascaderSelectProps,",
                "    CascaderSelectState,",
                "    CascaderSelectVisibleChangeType,",
                "} from './types';",
                "import type { Popup } from '../overlay';",
                "",
                "const { bindCtx } = func;",
                "const { pickOthers } = obj;",
                "const { getStyle } = dom;",
                "",
                "type normalizeValueResult<T> = T extends NonNullable<T>",
                "    ? T extends unknown[]",
                "        ? NonNullable<T>",
                "        : [NonNullable<T>]",
                "    : [];",
                "",
                "const normalizeValue = <T,>(value: T): normalizeValueResult<T> => {",
                "    if (value) {",
                "        if (Array.isArray(value)) {",
                "            return value as normalizeValueResult<T>;",
                "        }",
                "",
                "        return [value] as normalizeValueResult<T>;",
                "    }",
                "",
                "    return [] as normalizeValueResult<T>;",
                "};",
                "",
                "export type CascaderSelectPropsWithDefault = ClassPropsWithDefault<",
                "    CascaderSelectProps,",
                "    typeof CascaderSelect.defaultProps",
                ">;",
                "",
                "/**",
                " * CascaderSelect",
                " */",
                "class CascaderSelect extends Component<CascaderSelectProps, CascaderSelectState> {",
                "    static displayName = 'CascaderSelect';",
                "    static propTypes = {",
                "        prefix: PropTypes.string,",
                "        pure: PropTypes.bool,",
                "        className: PropTypes.string,",
                "        size: PropTypes.oneOf(['small', 'medium', 'large']),",
                "        placeholder: PropTypes.string,",
                "        disabled: PropTypes.bool,",
                "        hasArrow: PropTypes.bool,",
                "        hasBorder: PropTypes.bool,",
                "        hasClear: PropTypes.bool,",
                "        label: PropTypes.node,",
                "        readOnly: PropTypes.bool,",
                "        dataSource: PropTypes.arrayOf(PropTypes.object),",
                "        defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                "        value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),",
                "        onChange: PropTypes.func,",
                "        defaultExpandedValue: PropTypes.arrayOf(PropTypes.string),",
                "        expandedValue: PropTypes.arrayOf(PropTypes.string),",
                "        expandTriggerType: PropTypes.oneOf(['click', 'hover']),",
                "        onExpand: PropTypes.func,",
                "        useVirtual: PropTypes.bool,",
                "        multiple: PropTypes.bool,",
                "        changeOnSelect: PropTypes.bool,",
                "        canOnlyCheckLeaf: PropTypes.bool,",
                "        checkStrictly: PropTypes.bool,",
                "        listStyle: PropTypes.object,",
                "        listClassName: PropTypes.string,",
                "        displayRender: PropTypes.func,",
                "        itemRender: PropTypes.func,",
                "        showSearch: PropTypes.bool,",
                "        filter: PropTypes.func,",
                "        onSearch: PropTypes.func,",
                "        resultRender: PropTypes.func,",
                "        resultAutoWidth: PropTypes.bool,",
                "        notFoundContent: PropTypes.node,",
                "        locale: PropTypes.object,",
                "        loadData: PropTypes.func,",
                "        header: PropTypes.node,",
                "        footer: PropTypes.node,",
                "        defaultVisible: PropTypes.bool,",
                "        visible: PropTypes.bool,",
                "        onVisibleChange: PropTypes.func,",
                "        popupStyle: PropTypes.object,",
                "        popupClassName: PropTypes.string,",
                "        popupContainer: PropTypes.any,",
                "        popupProps: PropTypes.object,",
                "        followTrigger: PropTypes.bool,",
                "        isPreview: PropTypes.bool,",
                "        renderPreview: PropTypes.func,",
                "        immutable: PropTypes.bool,",
                "    };",
                "",
                "    static defaultProps = {",
                "        prefix: 'next-',",
                "        pure: false,",
                "        size: 'medium',",
                "        disabled: false,",
                "        hasArrow: true,",
                "        hasBorder: true,",
                "        hasClear: false,",
                "        dataSource: [],",
                "        defaultValue: null,",
                "        expandTriggerType: 'click',",
                "        onExpand: () => {},",
                "        useVirtual: false,",
                "        multiple: false,",
                "        changeOnSelect: false,",
                "        canOnlyCheckLeaf: false,",
                "        checkStrictly: false,",
                "        showSearch: false,",
                "        filter: (searchValue: string, path: Array<{ label: string; value: string }>) => {",
                "            return path.some(",
                "                item =>",
                "                    String(item.label).toLowerCase().indexOf(String(searchValue).toLowerCase()) > -1",
                "            );",
                "        },",
                "        resultRender: (searchValue: string, path: Array<{ label: string; value: string }>) => {",
                "            const parts: ReactNode[] = [];",
                "            path.forEach((item, i) => {",
                "                const reExp = searchValue.replace(/[-.+*?^$()[\\]{}|\\\\]/g, v => `\\\\${v}`);",
                "",
                "                const re = new RegExp(reExp, 'gi');",
                "                const others = item.label.split(re);",
                "                const matches = item.label.match(re);",
                "",
                "                others.forEach((other, j) => {",
                "                    if (other) {",
                "                        parts.push(other);",
                "                    }",
                "                    if (j < others.length - 1) {",
                "                        parts.push(<em key={`${i}-${j}`}>{matches![j]}</em>);",
                "                    }",
                "                });",
                "                if (i < path.length - 1) {",
                "                    parts.push(' / ');",
                "                }",
                "            });",
                "            return <span>{parts}</span>;",
                "        },",
                "        resultAutoWidth: true,",
                "        defaultVisible: false,",
                "        onVisibleChange: () => {},",
                "        popupProps: {},",
                "        immutable: false,",
                "        locale: zhCN.Select,",
                "    };",
                "",
                "    readonly props: CascaderSelectPropsWithDefault;",
                "    _valueDataCache: Record<string, CascaderSelectDataItem>;",
                "    _v2n: Record<string, CascaderSelectDataItem>;",
                "    _p2n: Record<string, CascaderSelectDataItem>;",
                "    select: InstanceType<typeof Select>;",
                "    cascader: InstanceType<typeof Cascader>;",
                "    popup: InstanceType<typeof Popup>;",
                "    cascaderHeight: string | number;",
                "",
                "    constructor(props: CascaderSelectProps) {",
                "        super(props);",
                "",
                "        this.state = {",
                "            value: normalizeValue('value' in props ? props.value : props.defaultValue),",
                "            searchValue: '',",
                "            visible: typeof props.visible === 'undefined' ? props.defaultVisible! : props.visible,",
                "        };",
                "",
                "        // 缓存选中值数据",
                "        this._valueDataCache = {};",
                "",
                "        bindCtx(this, [",
                "            'handleVisibleChange',",
                "            'handleAfterOpen',",
                "            'handleSelect',",
                "            'handleChange',",
                "            'handleClear',",
                "            'handleRemove',",
                "            'handleSearch',",
                "            'getPopup',",
                "            'saveSelectRef',",
                "            'saveCascaderRef',",
                "            'handleKeyDown',",
                "        ]);",
                "    }",
                "",
                "    static getDerivedStateFromProps(props: CascaderSelectPropsWithDefault) {",
                "        const st: Partial<CascaderSelectState> = {};",
                "",
                "        if ('value' in props) {",
                "            st.value = normalizeValue(props.value);",
                "        }",
                "        if ('visible' in props) {",
                "            st.visible = props.visible;",
                "        }",
                "",
                "        return st;",
                "    }",
                "",
                "    /**",
                "     * 使组件获得焦点",
                "     * @public",
                "     */",
                "    focus() {",
                "        this.select && this.select.focusInput();",
                "    }",
                "",
                "    updateCache(dataSource: CascaderDataItem[]) {",
                "        this._v2n = {};",
                "        this._p2n = {};",
                "        const loop = (data: CascaderDataItem[], prefix = '0') =>",
                "            data.forEach((item, index) => {",
                "                const { value, children } = item;",
                "                const pos = `${prefix}-${index}`;",
                "                this._v2n[value] = this._p2n[pos] = { ...item, pos };",
                "",
                "                if (children && children.length) {",
                "                    loop(children, pos);",
                "                }",
                "            });",
                "",
                "        loop(dataSource);",
                "    }",
                "",
                "    flatValue(value: string[]) {",
                "        const getDepth = (v: string) => {",
                "            const pos = this.getPos(v);",
                "            if (!pos) {",
                "                return 0;",
                "            }",
                "            return pos.split('-').length;",
                "        };",
                "        const newValue = value.slice(0).sort((prev, next) => {",
                "            return getDepth(prev) - getDepth(next);",
                "        });",
                "",
                "        for (let i = 0; i < newValue.length; i++) {",
                "            for (let j = 0; j < newValue.length; j++) {",
                "                if (",
                "                    i !== j &&",
                "                    this.isDescendantOrSelf(this.getPos(newValue[i]), this.getPos(newValue[j]))",
                "                ) {",
                "                    newValue.splice(j, 1);",
                "                    j--;",
                "                }",
                "            }",
                "        }",
                "",
                "        return newValue;",
                "    }",
                "",
                "    isDescendantOrSelf(",
                "        currentPos: string | undefined | null,",
                "        targetPos: string | undefined | null",
                "    ) {",
                "        if (!currentPos || !targetPos) {",
                "            return false;",
                "        }",
                "",
                "        const currentNums = currentPos.split('-');",
                "        const targetNums = targetPos.split('-');",
                "",
                "        return (",
                "            currentNums.length <= targetNums.length &&",
                "            currentNums.every((num, index) => {",
                "                return num === targetNums[index];",
                "            })",
                "        );",
                "    }",
                "",
                "    getValue(pos: string) {",
                "        return this._p2n[pos] ? this._p2n[pos].value : null;",
                "    }",
                "",
                "    getPos(value: string) {",
                "        return this._v2n[value] ? this._v2n[value].pos : null;",
                "    }",
                "",
                "    getData(value: string[]) {",
                "        return value.map(v => this._v2n[v] || this._valueDataCache[v]);",
                "    }",
                "",
                "    getLabelPath(data: CascaderSelectDataItem) {",
                "        const nums = data.pos.split('-');",
                "        return nums.slice(1).reduce(",
                "            (ret, num, index) => {",
                "                const p = nums.slice(0, index + 2).join('-');",
                "                ret.push(this._p2n[p].label);",
                "                return ret;",
                "            },",
                "            [] as CascaderSelectDataItem['label'][]",
                "        );",
                "    }",
                "",
                "    getSingleData(value: string | string[]) {",
                "        if (!value.length) {",
                "            return null;",
                "        }",
                "",
                "        if (Array.isArray(value)) value = value[0];",
                "",
                "        let data = this._v2n[value];",
                "",
                "        if (data) {",
                "            const labelPath = this.getLabelPath(data);",
                "            const displayRender = this.props.displayRender || (labels => labels.join(' / '));",
                "",
                "            data = {",
                "                ...data,",
                "                label: displayRender(labelPath, data),",
                "            };",
                "",
                "            this._valueDataCache[value] = data;",
                "            this.refreshValueDataCache(value);",
                "        } else {",
                "            data = this._valueDataCache[value];",
                "        }",
                "",
                "        return (",
                "            data || {",
                "                value,",
                "            }",
                "        );",
                "    }",
                "",
                "    getMultipleData(value: string[]) {",
                "        if (!value.length) {",
                "            return null;",
                "        }",
                "",
                "        const { checkStrictly, canOnlyCheckLeaf, displayRender } = this.props;",
                "        const flatValue = checkStrictly || canOnlyCheckLeaf ? value : this.flatValue(value);",
                "        let data = flatValue.map(v => {",
                "            let item = this._v2n[v];",
                "",
                "            if (item) {",
                "                this._valueDataCache[v] = item;",
                "            } else {",
                "                item = this._valueDataCache[v];",
                "            }",
                "",
                "            return item || { value: v };",
                "        });",
                "",
                "        if (displayRender) {",
                "            data = data.map(item => {",
                "                if (!item.pos || !(item.value in this._v2n)) {",
                "                    return item;",
                "                }",
                "",
                "                const labelPath = this.getLabelPath(item);",
                "                const newItem = {",
                "                    ...item,",
                "                    label: displayRender(labelPath, item),",
                "                };",
                "",
                "                this._valueDataCache[item.value] = newItem;",
                "",
                "                return newItem;",
                "            });",
                "        }",
                "",
                "        return data;",
                "    }",
                "",
                "    getIndeterminate(value: string[]) {",
                "        const indeterminate: Array<string> = [];",
                "",
                "        const positions: string[] = value.map(this.getPos.bind(this));",
                "        positions.forEach(pos => {",
                "            if (!pos) {",
                "                return false;",
                "            }",
                "            const nums = pos.split('-');",
                "            for (let i = nums.length; i > 2; i--) {",
                "                const parentPos = nums.slice(0, i - 1).join('-');",
                "                const parentValue = this.getValue(parentPos) as string;",
                "                if (indeterminate.indexOf(parentValue) === -1) {",
                "                    indeterminate.push(parentValue);",
                "                }",
                "            }",
                "        });",
                "",
                "        return indeterminate;",
                "    }",
                "",
                "    saveSelectRef(ref: InstanceType<typeof Select>) {",
                "        this.select = ref;",
                "    }",
                "",
                "    saveCascaderRef(ref: InstanceType<typeof Cascader>) {",
                "        this.cascader = ref;",
                "    }",
                "",
                "    completeValue(value: string[]) {",
                "        const newValue = [];",
                "",
                "        const flatValue = this.flatValue(value).reverse();",
                "        const ps = Object.keys(this._p2n);",
                "        for (let i = 0; i < ps.length; i++) {",
                "            for (let j = 0; j < flatValue.length; j++) {",
                "                const v = flatValue[j];",
                "                if (this.isDescendantOrSelf(this.getPos(v), ps[i])) {",
                "                    newValue.push(this.getValue(ps[i]) as string);",
                "                    ps.splice(i, 1);",
                "                    i--;",
                "                    break;",
                "                }",
                "            }",
                "        }",
                "",
                "        return newValue;",
                "    }",
                "",
                "    isLeaf(data: CascaderSelectDataItem) {",
                "        return !(",
                "            (data.children && data.children.length) ||",
                "            (!!this.props.loadData && !data.isLeaf)",
                "        );",
                "    }",
                "",
                "    handleVisibleChange(visible: boolean, type?: CascaderSelectVisibleChangeType) {",
                "        const { searchValue } = this.state;",
                "        if (!('visible' in this.props)) {",
                "            this.setState({",
                "                visible,",
                "            });",
                "        }",
                "",
                "        if (!visible && searchValue) {",
                "            this.setState({",
                "                searchValue: '',",
                "            });",
                "        }",
                "",
                "        if (['fromCascader', 'keyboard'].indexOf(type!) !== -1 && !visible) {",
                "            // 这里需要延迟下，showSearch 的情况下通过手动设置 menuProps={{focusable: true}} 回车 focus 会有延迟",
                "            setTimeout(() => this.select.focusInput(), 0);",
                "        }",
                "",
                "        this.props.onVisibleChange(visible, type);",
                "    }",
                "",
                "    handleKeyDown(e: KeyboardEvent<HTMLElement>) {",
                "        const { onKeyDown } = this.props;",
                "        const { visible } = this.state;",
                "",
                "        if (onKeyDown) {",
                "            onKeyDown(e);",
                "        }",
                "",
                "        if (!visible) {",
                "            switch (e.keyCode) {",
                "                case KEYCODE.UP:",
                "                case KEYCODE.DOWN: {",
                "                    e.preventDefault();",
                "                    this.handleVisibleChange(true, 'keyboard');",
                "                    break;",
                "                }",
                "                // no default",
                "            }",
                "            return;",
                "        }",
                "",
                "        switch (e.keyCode) {",
                "            case KEYCODE.UP:",
                "            case KEYCODE.DOWN:",
                "                this.cascader.setFocusValue();",
                "                e.preventDefault();",
                "                break;",
                "            default:",
                "                break;",
                "        }",
                "    }",
                "",
                "    getPopup(ref: InstanceType<typeof Popup>) {",
                "        this.popup = ref;",
                "        if (typeof this.props.popupProps.ref === 'function') {",
                "            this.props.popupProps.ref(ref);",
                "        }",
                "    }",
                "",
                "    handleAfterOpen() {",
                "        if (!this.popup) {",
                "            return;",
                "        }",
                "",
                "        const { prefix, popupProps } = this.props;",
                "        const { v2 = false } = popupProps;",
                "        if (!v2) {",
                "            // @ts-expect-error 待 overlay 技术升级完成",
                "            const dropDownNode = this.popup.getInstance().overlay.getInstance().getContentNode();",
                "            const cascaderNode = dropDownNode.querySelector(`.${prefix}cascader`) as HTMLElement;",
                "            if (cascaderNode) {",
                "                this.cascaderHeight = getStyle(cascaderNode, 'height');",
                "            }",
                "        }",
                "",
                "        if (typeof popupProps.afterOpen === 'function') {",
                "            popupProps.afterOpen();",
                "        }",
                "    }",
                "",
                "    handleSelect(value: unknown, data: CascaderSelectDataItem) {",
                "        const { multiple, changeOnSelect } = this.props;"
            ]
        }
    },
    "bug_functions": {
        "2": {
            "function_name": "  (not found) ",
            "file_path": "components/cascader-select/main.scss",
            "function_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 35
                }
            ],
            "function_code": [
                "@import \"../core/index-noreset.scss\";",
                "@import \"./scss/variable\";",
                "",
                "#{$cascader-select-prefix} {",
                "    @include box-sizing;",
                "",
                "    &-dropdown {",
                "        @include box-sizing;",
                "",
                "        border: $popup-local-border-width $popup-local-border-style $popup-local-border-color;",
                "        border-radius: $popup-local-corner;",
                "        box-shadow: $popup-local-shadow;",
                "",
                "        .#{$css-prefix}cascader {",
                "            display: block;",
                "            border: none;",
                "            box-shadow: none;",
                "        }",
                "    }",
                "",
                "    &-not-found {",
                "        padding: 0;",
                "        border: none;",
                "        box-shadow: none;",
                "        overflow: auto;",
                "        color: $color-text1-2;",
                "",
                "        .#{$css-prefix}menu-item:hover {",
                "            color: $color-text1-2;",
                "            /* TODO */",
                "            background: $color-white;",
                "            cursor: default;",
                "        }",
                "    }",
                "}"
            ]
        }
    }
}