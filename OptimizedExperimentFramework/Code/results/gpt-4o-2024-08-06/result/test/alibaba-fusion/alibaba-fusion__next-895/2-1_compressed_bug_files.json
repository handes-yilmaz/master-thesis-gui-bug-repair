{
    "1": {
        "bug_file": "src/nav/nav.jsx",
        "compressed": "NO",
        "line_numbers": 287,
        "compressed_line_numbers": 287,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ConfigProvider from '../config-provider';\nimport Menu from '../menu';\n\n/**\n * Nav\n * @description 继承自 `Menu` 的能力请查看 `Menu` 文档\n */\nclass Nav extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        pure: PropTypes.bool,\n        rtl: PropTypes.bool,\n        className: PropTypes.string,\n        style: PropTypes.object,\n        /**\n         * 导航项和子导航\n         */\n        children: PropTypes.node,\n        /**\n         * 导航类型\n         * @enumdesc 普通, 主要, 次要, 线形\n         */\n        type: PropTypes.oneOf(['normal', 'primary', 'secondary', 'line']),\n        /**\n         * 导航布局\n         * @enumdesc 水平, 垂直\n         */\n        direction: PropTypes.oneOf(['hoz', 'ver']),\n        /**\n         * 横向导航条 items 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效\n         */\n        hozAlign: PropTypes.oneOf(['left', 'right']),\n        /**\n         * 设置组件选中状态的 active 边方向\n         * @enumdesc 无, 上, 下, 左, 右\n         * @default 当 direction 为 'hoz' 时，默认值为 'bottom'，当 direction 为 'ver' 时，默认值为 'left'\n         */\n        activeDirection: PropTypes.oneOf([\n            null,\n            'top',\n            'bottom',\n            'left',\n            'right',\n        ]),\n        /**\n         * 子导航打开的模式（水平导航只支持弹出）\n         * @eumdesc 行内, 弹出\n         */\n        mode: PropTypes.oneOf(['inline', 'popup']),\n        /**\n         * 子导航打开的触发方式\n         */\n        triggerType: PropTypes.oneOf(['click', 'hover']),\n        /**\n         * 内联子导航缩进距离\n         */\n        inlineIndent: PropTypes.number,\n        /**\n         * 初始展开所有的子导航，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效\n         */\n        defaultOpenAll: PropTypes.bool,\n        /**\n         * 内联子导航的展开模式，同时可以展开一个同级子导航还是多个同级子导航，该属性仅在 mode 为 inline 时生效\n         * @eumdesc 一个, 多个\n         */\n        openMode: PropTypes.oneOf(['single', 'multiple']),\n        /**\n         * 当前选中导航项的 key 值\n         */\n        selectedKeys: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n        /**\n         * 初始选中导航项的 key 值\n         */\n        defaultSelectedKeys: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.array,\n        ]),\n        /**\n         * 选中或取消选中导航项触发的回调函数\n         * @param {Array} selectedKeys 选中的所有导航项的 key\n         * @param {Object} item 选中或取消选中的导航项\n         * @param {Object} extra 额外参数\n         * @param {Boolean} extra.select 是否是选中\n         * @param {Array} extra.key 导航项的 key\n         * @param {Object} extra.label 导航项的文本\n         * @param {Array} extra.keyPath 导航项 key 的路径\n         */\n        onSelect: PropTypes.func,\n        /**\n         * 弹出子导航的对齐方式（水平导航只支持 follow ）\n         * @eumdesc Item 顶端对齐, Nav 顶端对齐\n         */\n        popupAlign: PropTypes.oneOf(['follow', 'outside']),\n        /**\n         * 弹出子导航的自定义类名\n         */\n        popupClassName: PropTypes.string,\n        /**\n         * 是否只显示图标\n         */\n        iconOnly: PropTypes.bool,\n        /**\n         * 是否显示右侧的箭头（仅在 iconOnly=true 时生效）\n         */\n        hasArrow: PropTypes.bool,\n        /**\n         * 是否有 ToolTips （仅在 iconOnly=true 时生效）\n         */\n        hasTooltip: PropTypes.bool,\n        /**\n         * 自定义导航头部\n         */\n        header: PropTypes.node,\n        /**\n         * 自定义导航尾部\n         */\n        footer: PropTypes.node,\n        /**\n         * 是否开启嵌入式模式，一般用于Layout的布局中，开启后没有默认背景、外层border、box-shadow，可以配合`<Nav style={{lineHeight: '100px'}}>` 自定义高度\n         */\n        embeddable: PropTypes.bool,\n        popupProps: PropTypes.object,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        pure: false,\n        type: 'normal',\n        direction: 'ver',\n        hozAlign: 'left',\n        mode: 'inline',\n        triggerType: 'click',\n        inlineIndent: 20,\n        defaultOpenAll: false,\n        openMode: 'multiple',\n        defaultSelectedKeys: [],\n        popupAlign: 'follow',\n        hasTooltip: false,\n        embeddable: false,\n        hasArrow: true,\n        popupProps: {},\n    };\n\n    static childContextTypes = {\n        prefix: PropTypes.string,\n        mode: PropTypes.string,\n        iconOnly: PropTypes.bool,\n        hasTooltip: PropTypes.bool,\n        hasArrow: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.getMenuRef = this.getMenuRef.bind(this);\n    }\n\n    getChildContext() {\n        const {\n            prefix,\n            direction,\n            mode,\n            iconOnly,\n            hasTooltip,\n            hasArrow,\n        } = this.props;\n\n        return {\n            prefix,\n            mode: direction === 'hoz' ? 'popup' : mode,\n            iconOnly,\n            hasTooltip,\n            hasArrow,\n        };\n    }\n\n    getMenuRef(ref) {\n        this.menu = ref;\n    }\n\n    render() {\n        // eslint-disable-next-line\n        const {\n            prefix,\n            className,\n            style,\n            children,\n            type,\n            direction,\n            activeDirection,\n            mode,\n            triggerType,\n            inlineIndent,\n            openMode,\n            popupAlign,\n            popupClassName,\n            iconOnly,\n            hasArrow,\n            hasTooltip,\n            embeddable,\n            popupProps,\n            rtl,\n            ...others\n        } = this.props;\n\n        let realActiveDirection = activeDirection;\n        if (\n            realActiveDirection &&\n            ((direction === 'hoz' &&\n                (realActiveDirection === 'left' ||\n                    realActiveDirection === 'right')) ||\n                (direction === 'ver' &&\n                    (realActiveDirection === 'top' ||\n                        realActiveDirection === 'bottom')))\n        ) {\n            realActiveDirection = null;\n        }\n\n        if (!iconOnly && realActiveDirection === undefined) {\n            realActiveDirection =\n                direction === 'hoz'\n                    ? 'bottom'\n                    : type === 'line'\n                    ? 'right'\n                    : 'left';\n        }\n\n        const cls = classNames({\n            [`${prefix}nav`]: true,\n            [`${prefix}${type}`]: type,\n            [`${prefix}active`]: realActiveDirection,\n            [`${prefix}${realActiveDirection}`]: realActiveDirection,\n            [`${prefix}icon-only`]: iconOnly,\n            [`${prefix}no-arrow`]: !hasArrow,\n            [`${prefix}nav-embeddable`]: embeddable,\n            [className]: !!className,\n        });\n        const newStyle = iconOnly ? { ...style, width: '60px' } : style;\n\n        const props = {\n            prefix,\n            direction,\n            openMode,\n            triggerType,\n            mode: direction === 'hoz' ? 'popup' : mode,\n            popupAlign: direction === 'hoz' ? 'follow' : popupAlign,\n            inlineIndent: iconOnly ? 0 : inlineIndent,\n            hasSelectedIcon: false,\n            popupAutoWidth: true,\n            selectMode: 'single',\n            itemClassName: `${prefix}nav-item`,\n            popupClassName: classNames({\n                [cls\n                    .replace(`${prefix}icon-only`, '')\n                    .replace(`${prefix}nav-embeddable`, '')]: mode === 'popup',\n                [`${prefix}icon-only`]: iconOnly && mode === 'inline',\n                [popupClassName]: !!popupClassName,\n            }),\n            popupProps: popupItemProps => {\n                return {\n                    offset:\n                        direction === 'hoz' && popupItemProps.level === 1\n                            ? [0, 2]\n                            : [-2, 0],\n                    ...popupProps,\n                };\n            },\n        };\n\n        return (\n            <Menu\n                className={cls}\n                style={newStyle}\n                {...props}\n                {...others}\n                ref={this.getMenuRef}\n            >\n                {children}\n            </Menu>\n        );\n    }\n}\n\nexport default ConfigProvider.config(Nav);"
    },
    "2": {
        "bug_file": "src/nav/item.jsx",
        "compressed": "NO",
        "line_numbers": 66,
        "compressed_line_numbers": 66,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Menu from '../menu';\nimport Icon from '../icon';\nimport Balloon from '../balloon';\n\nconst { Tooltip } = Balloon;\n\n/**\n * Nav.Item\n * @description 继承自 `Menu.Item` 的能力请查看 `Menu.Item` 文档\n */\nclass Item extends Component {\n    static menuChildType = 'item';\n\n    static propTypes = {\n        /**\n         * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type=\"icon type\" />`\n         */\n        icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n        /**\n         * 导航内容\n         */\n        children: PropTypes.node,\n        parentMode: PropTypes.oneOf(['inline', 'popup']),\n    };\n\n    static contextTypes = {\n        prefix: PropTypes.string,\n        iconOnly: PropTypes.bool,\n        hasTooltip: PropTypes.bool,\n    };\n\n    render() {\n        const { prefix, iconOnly, hasTooltip } = this.context;\n        const { icon, children, ...others } = this.props;\n        let iconEl =\n            typeof icon === 'string' ? (\n                <Icon className={`${prefix}nav-icon`} type={icon} />\n            ) : (\n                icon\n            );\n        if (iconOnly && !iconEl) {\n            iconEl = <span className={`${prefix}nav-icon-placeholder`} />;\n        }\n\n        const item = (\n            <Menu.Item {...others}>\n                {iconEl}\n                {children}\n            </Menu.Item>\n        );\n\n        if (iconOnly && hasTooltip && others.parentMode !== 'popup') {\n            return (\n                <Tooltip align=\"r\" trigger={item}>\n                    {children}\n                </Tooltip>\n            );\n        }\n\n        return item;\n    }\n}\n\nexport default Item;"
    },
    "3": {
        "bug_file": "src/nav/style.js",
        "compressed": "NO",
        "line_numbers": 4,
        "compressed_line_numbers": 4,
        "compressed_bug_file_content": "import '../animate/style.js';\nimport '../menu/style.js';\nimport '../balloon/style.js';\nimport './main.scss';"
    }
}