{
    "1": {
        "bug_file": "src/table/util.js",
        "compressed": "NO",
        "line_numbers": 119,
        "compressed_line_numbers": 119,
        "compressed_bug_file_content": "import classnames from 'classnames';\n\nconst blackList = [\n    'defaultProps',\n    'propTypes',\n    'contextTypes',\n    'childContextTypes',\n    'displayName',\n    'getDerivedStateFromProps',\n];\n\nexport const statics = (Target, Component) => {\n    Object.keys(Component).forEach(property => {\n        if (blackList.indexOf(property) === -1) {\n            Target[property] = Component[property];\n        }\n    });\n};\n\nexport const fetchDataByPath = (object, path) => {\n    if (!object || !path) {\n        return false;\n    }\n    path = path.toString();\n    const field = path.split('.');\n    let val, key;\n    if (field.length) {\n        key = field[0];\n        // lists[1].name\n        if (key.indexOf('[') >= 0) {\n            key = key.match(/(.*)\\[(.*)\\]/);\n            if (key) {\n                val = object[key[1]][key[2]];\n            }\n        } else {\n            val = object[field[0]];\n        }\n        if (val) {\n            for (let colIndex = 1; colIndex < field.length; colIndex++) {\n                val = val[field[colIndex]];\n                if (typeof val === 'undefined') {\n                    break;\n                }\n            }\n        }\n    }\n    return val;\n};\n\n/**\n * @param {Array} lockChildren\n * @param {String} dir 'left', 'right'\n */\nexport const setStickyStyle = (\n    lockChildren,\n    flatenChildren,\n    dir,\n    offsetArr = [],\n    prefix\n) => {\n    const len = flatenChildren.length;\n\n    flatenChildren.forEach((col, index) => {\n        const isLeftLast = dir === 'left' && index === len - 1;\n        const isRightFirst = dir === 'right' && index === 0;\n        const style = {\n            position: 'sticky',\n        };\n        const offset = offsetArr[index];\n\n        if (offset > -1) {\n            style[dir] = offset;\n        }\n\n        col.className = classnames(col.className, {\n            [`${prefix}table-fix-${dir}`]: true,\n            [`${prefix}table-fix-left-last`]: isLeftLast,\n            [`${prefix}table-fix-right-first`]: isRightFirst,\n        });\n        col.style = { ...col.style, ...style };\n        col.cellStyle = style;\n    });\n\n    const setOffset = (col, index, dir) => {\n        const style = {\n            position: 'sticky',\n        };\n        const offset = offsetArr[index];\n\n        if (offset > -1) {\n            style[dir] = offset;\n        }\n\n        col.className = classnames(col.className, {\n            [`${prefix}table-fix-${dir}`]: true,\n            [`${prefix}table-fix-left-last`]: dir === 'left',\n            [`${prefix}table-fix-right-first`]: dir === 'right',\n        });\n        col.style = { ...col.style, ...style };\n        col.cellStyle = style;\n    };\n\n    // for multiple header\n    // const flatenlen = offsetArr.length;\n    const loop = (arr, i) => {\n        dir === 'right' && arr.reverse();\n        arr.forEach((child, j) => {\n            const p = dir === 'right' ? i - j : i + j;\n            if (child.children) {\n                // 合并单元格的节点\n                loop(child.children, p);\n                setOffset(child, p, dir);\n            }\n        });\n        dir === 'right' && arr.reverse();\n    };\n\n    loop(lockChildren, dir === 'left' ? 0 : len - 1);\n};"
    },
    "2": {
        "bug_file": "src/table/index.jsx",
        "compressed": "NO",
        "line_numbers": 122,
        "compressed_line_numbers": 122,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Base from './base';\nimport tree from './tree';\nimport fixed from './fixed';\nimport selection from './selection';\nimport expanded from './expanded';\nimport virtual from './virtual';\nimport lock from './lock';\nimport stickyLock from './new-lock';\nimport list from './list';\nimport sticky from './sticky';\nimport ListHeader from './list-header';\nimport ListFooter from './list-footer';\nimport { env } from '../util';\n\nconst { ieVersion } = env;\n\nconst ORDER_LIST = [fixed, lock, selection, expanded, tree, virtual, list, sticky];\nconst Table = ORDER_LIST.reduce((ret, current) => {\n    ret = current(ret);\n    return ret;\n}, Base);\n\nlock._typeMark = 'lock';\nexpanded._typeMark = 'expanded';\n\nconst StickyLockTable = ORDER_LIST.reduce((ret, current) => {\n    const newLock = !ieVersion;\n    if (current._typeMark === 'lock') {\n        ret = newLock ? stickyLock(ret) : lock(ret);\n    } else if (current._typeMark === 'expanded') {\n        ret = newLock ? expanded(ret, true) : expanded(ret);\n    } else {\n        ret = current(ret);\n    }\n    return ret;\n}, Base);\n\nTable.Base = Base;\nTable.fixed = fixed;\nTable.lock = lock;\nTable.selection = selection;\nTable.expanded = expanded;\nTable.tree = tree;\nTable.virtual = virtual;\nTable.list = list;\nTable.sticky = sticky;\n\nTable.GroupHeader = ListHeader;\nTable.GroupFooter = ListFooter;\n\nTable.StickyLock = StickyLockTable;\n\nexport default ConfigProvider.config(Table, {\n    componentName: 'Table',\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('expandedRowKeys' in props) {\n            deprecated('expandedRowKeys', 'openRowKeys', 'Table');\n\n            const { expandedRowKeys, ...others } = props;\n            props = { openRowKeys: expandedRowKeys, ...others };\n        }\n        if ('onExpandedChange' in props) {\n            deprecated('onExpandedChange', 'onRowOpen', 'Table');\n\n            const { onExpandedChange, ...others } = props;\n            props = { onRowOpen: onExpandedChange, ...others };\n        }\n        if ('isLoading' in props) {\n            deprecated('isLoading', 'loading', 'Table');\n\n            const { isLoading, ...others } = props;\n            props = { loading: isLoading, ...others };\n        }\n        if ('indentSize' in props) {\n            deprecated('indentSize', 'indent', 'Table');\n\n            const { indentSize, ...others } = props;\n            props = { indent: indentSize, ...others };\n        }\n        if ('optimization' in props) {\n            deprecated('optimization', 'pure', 'Table');\n\n            const { optimization, ...others } = props;\n            props = { pure: optimization, ...others };\n        }\n\n        if ('getRowClassName' in props) {\n            deprecated('getRowClassName', 'getRowProps', 'Table');\n\n            const { getRowClassName, getRowProps, ...others } = props;\n            if (getRowClassName) {\n                const newGetRowProps = (...args) => {\n                    return {\n                        className: getRowClassName(...args),\n                        ...(getRowProps ? getRowProps(...args) : {}),\n                    };\n                };\n\n                props = { getRowProps: newGetRowProps, ...others };\n            } else {\n                props = { getRowProps, ...others };\n            }\n        }\n\n        if ('getRowProps' in props) {\n            deprecated('getRowProps', 'rowProps', 'Table in 1.15.0');\n\n            const { getRowProps, ...others } = props;\n            props = { rowProps: getRowProps, ...others };\n        }\n\n        if ('getCellProps' in props) {\n            deprecated('getCellProps', 'cellProps', 'Table in 1.15.0');\n\n            const { getCellProps, ...others } = props;\n            props = { cellProps: getCellProps, ...others };\n        }\n\n        return props;\n    },\n});"
    }
}