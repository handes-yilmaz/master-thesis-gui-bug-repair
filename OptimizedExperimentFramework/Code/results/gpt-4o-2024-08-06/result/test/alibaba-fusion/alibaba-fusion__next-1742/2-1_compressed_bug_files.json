{
    "1": {
        "bug_file": "src/cascader/cascader.jsx",
        "compressed": "YES",
        "line_numbers": 889,
        "compressed_line_numbers": 123,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Menu from '../menu';\nimport { func, obj, dom } from '../util';\nimport CascaderMenu from './menu';\nimport CascaderMenuItem from './item';\nimport {\n\n\n/**\n * Cascader\n */\nexport default class Cascader extends Component {\n\n\n        /**\n         * 数据源，结构可参考下方说明\n         */\n\n        /**\n         * （非受控）默认值\n         */\n\n\n        /**\n         * （受控）当前值\n         */\n\n\n        /**\n         * 选中值改变时触发的回调函数\n         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n         * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.selectedPath 单选时选中的数据的路径\n         * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n         * @param {Object} extra.currentData 多选时当前操作的数据\n         * @param {Array} extra.checkedData 多选时所有被选中的数据\n         * @param {Array} extra.indeterminateData 多选时半选的数据\n         */\n\n\n        /**\n         * （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置\n         */\n\n        /**\n         * （受控）当前展开值\n         */\n\n        /**\n         * 展开触发的方式\n         */\n\n        /**\n         * 展开时触发的回调函数\n         * @param {Array} expandedValue 各列展开值的数组\n         */\n\n        /**\n         * 是否开启虚拟滚动\n         */\n\n        /**\n         * 是否多选\n         */\n\n        /**\n         * 单选时是否只能选中叶子节点\n         */\n\n        /**\n         * 多选时是否只能选中叶子节点\n         */\n\n        /**\n         * 父子节点是否选中不关联\n         */\n\n        /**\n         * 每列列表样式对象\n         */\n\n        /**\n         * 每列列表类名\n         */\n\n        /**\n         * 每列列表项渲染函数\n         * @param {Object} data 数据\n         * @return {ReactNode} 列表项内容\n         */\n\n        /**\n         * 异步加载数据函数\n         * @param {Object} data 当前点击异步加载的数据\n         * @param {Object} source 当前点击数据，source是原始对象\n         */\n\n\n        // TODO loadData\n\n\n    /*eslint-disable max-statements*/\n\n\n    /*eslint-enable*/\n\n\n    /*eslint-disable max-statements*/\n\n\n                        // eslint-disable-next-line max-depth\n\n                            // eslint-disable-next-line max-depth\n\n\n                            // eslint-disable-next-line max-depth\n\n                                // eslint-disable-next-line max-depth\n\n\n"
    },
    "2": {
        "bug_file": "src/cascader/index.jsx",
        "compressed": "NO",
        "line_numbers": 26,
        "compressed_line_numbers": 26,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Cascader from './cascader';\n\nexport default ConfigProvider.config(Cascader, {\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('expandTrigger' in props) {\n            deprecated('expandTrigger', 'expandTriggerType', 'Cascader');\n            const { expandTrigger, ...others } = props;\n            props = { expandTriggerType: expandTrigger, ...others };\n        }\n\n        if ('showItemCount' in props) {\n            deprecated(\n                'showItemCount',\n                'listStyle | listClassName',\n                'Cascader'\n            );\n        }\n        if ('labelWidth' in props) {\n            deprecated('labelWidth', 'listStyle | listClassName', 'Cascader');\n        }\n\n        return props;\n    },\n    exportNames: ['setFocusValue'],\n});"
    },
    "3": {
        "bug_file": "src/cascader/utils.js",
        "compressed": "NO",
        "line_numbers": 215,
        "compressed_line_numbers": 215,
        "compressed_bug_file_content": "/* eslint-disable valid-jsdoc */\nexport function normalizeToArray(values) {\n    if (values !== undefined && values !== null) {\n        if (Array.isArray(values)) {\n            return [...values];\n        }\n\n        return [values];\n    }\n\n    return [];\n}\n\n/**\n * 判断子节点是否是选中状态，如果 checkable={false} 则向下递归，\n * @param {Node} child\n * @param {Array} checkedValues\n */\nexport function isNodeChecked(node, checkedValues) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(c => isNodeChecked(c, checkedValues))\n        );\n    }\n    return checkedValues.indexOf(node.value) > -1;\n}\n\n/**\n * 遍历所有可用的子节点\n * @param {Node}\n * @param {Function} callback\n */\nexport function forEachEnableNode(node, callback = () => {}) {\n    if (node.disabled || node.checkboxDisabled) return;\n    // eslint-disable-next-line callback-return\n    callback(node);\n    if (node.children && node.children.length > 0) {\n        node.children.forEach(child => forEachEnableNode(child, callback));\n    }\n}\n/**\n * 判断节点是否禁用checked\n * @param {Node} node\n * @returns {Boolean}\n */\nexport function isNodeDisabledChecked(node) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        );\n    }\n\n    return false;\n}\n\n/**\n * 递归获取一个 checkable = {true} 的父节点，当 checkable={false} 时继续往上查找\n * @param {Node} node\n * @param {Map} _p2n\n * @return {Node}\n */\nexport function getCheckableParentNode(node, _p2n) {\n    let parentPos = node.pos.split(['-']);\n    if (parentPos.length === 2) return node;\n    parentPos.splice(parentPos.length - 1, 1);\n    parentPos = parentPos.join('-');\n    const parentNode = _p2n[parentPos];\n    if (parentNode.disabled || parentNode.checkboxDisabled) return false;\n    /* istanbul ignore next */\n    if (parentNode.checkable === false) {\n        return getCheckableParentNode(parentNode, _p2n);\n    }\n\n    return parentNode;\n}\n/**\n * 过滤子节点\n * @param {Array} values\n * @param {Object} _v2n\n */\nexport function filterChildValue(values, _v2n, _p2n) {\n    const newValues = [];\n    values.forEach(value => {\n        const node = getCheckableParentNode(_v2n[value], _p2n);\n        if (\n            !node ||\n            node.checkable === false ||\n            node === _v2n[value] ||\n            values.indexOf(node.value) === -1\n        ) {\n            newValues.push(value);\n        }\n    });\n    return newValues;\n}\n\nexport function filterParentValue(values, _v2n) {\n    const newValues = [];\n\n    for (let i = 0; i < values.length; i++) {\n        const node = _v2n[values[i]];\n        if (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        ) {\n            newValues.push(values[i]);\n        }\n    }\n\n    return newValues;\n}\n\nexport function isDescendantOrSelf(currentPos, targetPos) {\n    if (!currentPos || !targetPos) {\n        return false;\n    }\n\n    const currentNums = currentPos.split('-');\n    const targetNums = targetPos.split('-');\n\n    return (\n        currentNums.length <= targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\nexport function isSiblingOrSelf(currentPos, targetPos) {\n    const currentNums = currentPos.split('-').slice(0, -1);\n    const targetNums = targetPos.split('-').slice(0, -1);\n\n    return (\n        currentNums.length === targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\n// eslint-disable-next-line max-statements\nexport function getAllCheckedValues(checkedValues, _v2n, _p2n) {\n    checkedValues = normalizeToArray(checkedValues);\n    const filteredValues = checkedValues.filter(value => !!_v2n[value]);\n    const flatValues = [\n        ...filterChildValue(filteredValues, _v2n, _p2n),\n        ...filteredValues.filter(\n            value => _v2n[value].disabled || _v2n[value].checkboxDisabled\n        ),\n    ];\n    const removeValue = child => {\n        if (child.disabled || child.checkboxDisabled) return;\n        if (\n            child.checkable === false &&\n            child.children &&\n            child.children.length > 0\n        ) {\n            return child.children.forEach(removeValue);\n        }\n        flatValues.splice(flatValues.indexOf(child.value), 1);\n    };\n\n    const addParentValue = (i, parent) => flatValues.splice(i, 0, parent.value);\n\n    const values = [...flatValues];\n    for (let i = 0; i < values.length; i++) {\n        const pos = _v2n[values[i]].pos;\n        const nums = pos.split('-');\n        if (nums.length === 2) {\n            break;\n        }\n        for (let j = nums.length - 2; j > 0; j--) {\n            const parentPos = nums.slice(0, j + 1).join('-');\n            const parent = _p2n[parentPos];\n            if (\n                parent.checkable === false ||\n                parent.disabled ||\n                parent.checkboxDisabled\n            )\n                continue;\n            const parentChecked = parent.children.every(child =>\n                isNodeChecked(child, flatValues)\n            );\n            if (parentChecked) {\n                parent.children.forEach(removeValue);\n                addParentValue(i, parent);\n            } else {\n                break;\n            }\n        }\n    }\n\n    const newValues = [];\n    flatValues.forEach(value => {\n        if (_v2n[value].disabled || _v2n[value].checkboxDisabled) {\n            newValues.push(value);\n            return;\n        }\n        forEachEnableNode(_v2n[value], node => {\n            if (node.checkable === false) return;\n            newValues.push(node.value);\n        });\n    });\n\n    return newValues;\n}"
    }
}