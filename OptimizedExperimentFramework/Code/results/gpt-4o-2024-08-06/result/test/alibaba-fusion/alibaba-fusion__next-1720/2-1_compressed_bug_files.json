{
    "1": {
        "bug_file": "src/search/Search.jsx",
        "compressed": "NO",
        "line_numbers": 383,
        "compressed_line_numbers": 383,
        "compressed_bug_file_content": "import React, { isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport Input from '../input';\nimport Select from '../select';\nimport Button from '../button';\nimport Icon from '../icon';\nimport { obj, func, KEYCODE } from '../util';\nimport zhCN from '../locale/zh-cn';\n\nconst Group = Input.Group;\nconst AutoComplete = Select.AutoComplete;\n\n/**\n * Search\n * @description 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api\n */\nclass Search extends React.Component {\n    static propTypes = {\n        /**\n         * 样式前缀\n         */\n        prefix: PropTypes.string,\n        /**\n         * 形状\n         */\n        shape: PropTypes.oneOf(['normal', 'simple']),\n        /**\n         * 类型 shape=normal: primary/secondary; shape=simple: normal/dark;\n         */\n        type: PropTypes.oneOf(['primary', 'secondary', 'normal', 'dark']),\n        /**\n         * 大小\n         * @enumdesc '大', '小'\n         */\n        size: PropTypes.oneOf(['large', 'medium']),\n        /**\n         * 搜索框默认值\n         */\n        defaultValue: PropTypes.string,\n        /**\n         * 搜索框数值\n         */\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        /**\n         * 输入关键字时的回掉\n         * @param {Object} value 输入值\n         */\n        onChange: PropTypes.func,\n        /**\n         * 点击搜索按钮触发的回调\n         * @param {String} value 输入值\n         * @param {String} filterValue 选项值\n         */\n        onSearch: PropTypes.func,\n        /**\n         * 选择器默认值\n         */\n        defaultFilterValue: PropTypes.string,\n        /**\n         * 选择器\n         */\n        filter: PropTypes.array,\n        /**\n         * 选择器值\n         */\n        filterValue: PropTypes.string,\n        /**\n         * 选择器发生变化时回调\n         * @param {Object} filter value\n         */\n        onFilterChange: PropTypes.func,\n        /**\n         * 搜索框下拉联想列表\n         */\n        dataSource: PropTypes.array,\n        /**\n         * 默认提示\n         */\n        placeholder: PropTypes.string,\n        /**\n         * button 的内容\n         */\n        searchText: PropTypes.node,\n        /**\n         * 自定义样式\n         */\n        style: PropTypes.object,\n        /**\n         * 样式名称\n         */\n        className: PropTypes.string,\n        /**\n         * 选择器的props\n         */\n        filterProps: PropTypes.object,\n        /**\n         * 按钮的额外属性\n         */\n        buttonProps: PropTypes.object,\n        /**\n         * 自定义渲染的的下拉框\n         */\n        popupContent: PropTypes.node,\n        /**\n         * 是否跟随滚动\n         */\n        followTrigger: PropTypes.bool,\n        /**\n         * 自定义渲染的的下拉框\n         */\n        visible: PropTypes.bool,\n        /**\n         * 是否显示清除按钮\n         */\n        hasClear: PropTypes.bool,\n        /**\n         * 是否显示搜索按钮\n         */\n        hasIcon: PropTypes.bool,\n        /**\n         * 是否禁用\n         */\n        disabled: PropTypes.bool,\n        locale: PropTypes.object,\n        rtl: PropTypes.bool,\n        /**\n         * 可配置的icons，包括 search 等\n         */\n        icons: PropTypes.object,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        shape: 'normal',\n        type: 'normal',\n        size: 'medium',\n        hasIcon: true,\n        filter: [],\n        locale: zhCN.Search,\n        buttonProps: {},\n        onChange: func.noop,\n        onSearch: func.noop,\n        onFilterChange: func.noop,\n        hasClear: false,\n        disabled: false,\n        icons: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        const value = 'value' in props ? props.value : props.defaultValue;\n        const filterValue =\n            'filterValue' in props\n                ? props.filterValue\n                : props.defaultFilterValue;\n\n        this.state = {\n            value: typeof value === 'undefined' ? '' : value,\n            filterValue,\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const nextState = {};\n        if ('value' in nextProps && nextProps.value !== prevState.value) {\n            const value = nextProps.value;\n            nextState.value =\n                value === undefined || value === null ? '' : nextProps.value;\n        }\n\n        if (\n            'filterValue' in nextProps &&\n            nextProps.filterValue !== prevState.filterValue\n        ) {\n            const filterValue = nextProps.filterValue;\n            nextState.filterValue =\n                filterValue === undefined ? '' : filterValue;\n        }\n\n        if (Object.keys(nextState).length > 0) {\n            return nextState;\n        }\n\n        return null;\n    }\n\n    onChange = (value, ...argv) => {\n        if (!('value' in this.props)) {\n            this.setState({ value });\n        }\n\n        this.props.onChange(value, ...argv);\n    };\n\n    onSearch = () => {\n        if (this.props.disabled) {\n            return;\n        }\n        this.props.onSearch(this.state.value, this.state.filterValue);\n    };\n\n    onFilterChange = filterValue => {\n        if (!('filterValue' in this.props)) {\n            this.setState({ filterValue });\n        }\n\n        this.props.onFilterChange(filterValue);\n    };\n\n    onKeyDown = e => {\n        if (this.props.disabled) {\n            return;\n        }\n        if (e.keyCode !== KEYCODE.ENTER) {\n            return;\n        }\n        this.onSearch();\n    };\n    render() {\n        const {\n            shape,\n            filter,\n            hasIcon,\n            disabled,\n            placeholder,\n            type,\n            className,\n            style,\n            size,\n            prefix,\n            searchText,\n            dataSource,\n            filterProps,\n            buttonProps,\n            popupContent,\n            followTrigger,\n            hasClear,\n            visible,\n            locale,\n            rtl,\n            icons,\n            ...others\n        } = this.props;\n\n        const cls = classNames({\n            [`${prefix}search`]: true,\n            [`${prefix}search-${shape}`]: true,\n            [`${prefix}${type}`]: type,\n            [`${prefix}${size}`]: size,\n            [className]: !!className,\n        });\n\n        let searchIcon = null,\n            filterSelect = null,\n            searchBtn = null,\n            iconsSearch = icons.search;\n\n        if (!isValidElement(icons.search) && icons.search) {\n            iconsSearch = <span>{icons.search}</span>;\n        }\n\n        if (shape === 'simple') {\n            const cls = classNames({\n                [`${prefix}search-icon`]: true,\n                [buttonProps.className]: !!buttonProps.className,\n                [`${prefix}search-symbol-icon`]: !iconsSearch,\n            });\n            hasIcon &&\n                (searchIcon = React.cloneElement(\n                    iconsSearch || <Icon type=\"search\" />,\n                    {\n                        role: 'button',\n                        'aria-disabled': disabled,\n                        'aria-label': locale.buttonText,\n                        ...buttonProps,\n                        className: cls,\n                        onClick: this.onSearch,\n                        onKeyDown: this.onKeyDown,\n                    }\n                ));\n        } else {\n            const cls = classNames({\n                [`${prefix}search-btn`]: true,\n                [buttonProps.className]: !!buttonProps.className,\n            });\n            searchBtn = (\n                <Button\n                    tabIndex=\"0\"\n                    aria-disabled={disabled}\n                    aria-label={locale.buttonText}\n                    className={cls}\n                    disabled={disabled}\n                    {...buttonProps}\n                    onClick={this.onSearch}\n                    onKeyDown={this.onKeyDown}\n                >\n                    {hasIcon\n                        ? iconsSearch || (\n                              <Icon\n                                  type=\"search\"\n                                  className={`${prefix}search-symbol-icon`}\n                              />\n                          )\n                        : null}\n                    {searchText ? (\n                        <span className={`${prefix}search-btn-text`}>\n                            {searchText}\n                        </span>\n                    ) : null}\n                </Button>\n            );\n        }\n\n        if (filter.length > 0) {\n            filterSelect = (\n                <Select\n                    {...filterProps}\n                    followTrigger={followTrigger}\n                    hasBorder={false}\n                    dataSource={filter}\n                    size={size}\n                    disabled={disabled}\n                    value={this.state.filterValue}\n                    onChange={this.onFilterChange}\n                />\n            );\n        }\n\n        const othersAttributes = obj.pickOthers(Search.propTypes, others);\n        if (visible !== undefined) {\n            // 受控属性 visible 不能直接写在组件上\n            othersAttributes.visible = Boolean(visible);\n        }\n        const dataAttr = obj.pickAttrsWith(others, 'data-');\n\n        const left = (\n            <Group\n                addonBefore={filterSelect}\n                className={`${prefix}search-left`}\n                addonBeforeClassName={`${prefix}search-left-addon`}\n            >\n                <AutoComplete\n                    aria-label={locale.buttonText}\n                    {...othersAttributes}\n                    followTrigger={followTrigger}\n                    role=\"searchbox\"\n                    hasClear={hasClear}\n                    className={`${prefix}search-input`}\n                    size={size}\n                    placeholder={placeholder}\n                    dataSource={dataSource}\n                    innerAfter={searchIcon}\n                    onPressEnter={this.onSearch}\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    popupContent={popupContent}\n                    disabled={disabled}\n                />\n            </Group>\n        );\n\n        return (\n            <span\n                className={cls}\n                style={style}\n                {...dataAttr}\n                dir={rtl ? 'rtl' : undefined}\n            >\n                {searchBtn ? (\n                    <Group addonAfter={searchBtn}>{left}</Group>\n                ) : (\n                    left\n                )}\n            </span>\n        );\n    }\n}\n\nexport default polyfill(Search);"
    },
    "2": {
        "bug_file": "src/search/index.jsx",
        "compressed": "NO",
        "line_numbers": 25,
        "compressed_line_numbers": 25,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Search from './Search';\n\nexport default ConfigProvider.config(Search, {\n    transfrom: /* istanbul ignore next */ (props, deprecated) => {\n        const { onInputFocus, overlayVisible, combox, ...others } = this.props;\n\n        const newprops = others;\n\n        if (onInputFocus) {\n            deprecated('onInputFocus', 'onFocus', 'Search');\n            newprops.onFocus = onInputFocus;\n        }\n        if ('overlayVisible' in this.props) {\n            deprecated('overlayVisible', 'visible', 'Search');\n            newprops.visible = overlayVisible;\n        }\n        if (combox) {\n            deprecated('combox', 'popupContent', 'Search');\n            newprops.popupContent = combox;\n        }\n\n        return newprops;\n    },\n});"
    }
}