{
    "1/1": {
        "src/number-picker/index.jsx": [
            {
                "SEARCH": [
                    "upStep(val) {",
                    "const {step, min} = this.props;",
                    "const precisionFactor = this.getPrecisionFactor();",
                    "let result;",
                    "if (typeof val === 'number') {",
                    "result = (precisionFactor * val + precisionFactor * step) / precisionFactor;",
                    "} else {",
                    "result = min === -Infinity ? step : min;",
                    "}",
                    "return result;",
                    "}",
                    "",
                    "downStep(val) {",
                    "const {step, min} = this.props;",
                    "const precisionFactor = this.getPrecisionFactor();",
                    "let result;",
                    "if (typeof val === 'number') {",
                    "result = (precisionFactor * val - precisionFactor * step) / precisionFactor;",
                    "",
                    "// in chrome browser: 0.3 - 0.2 = 0.09999999999, we should creact to 0.1",
                    "const precision = this.getPrecision();",
                    "if (precision > 0) {",
                    "result = Number(Number(result).toFixed(precision));",
                    "}",
                    "} else {",
                    "result = min === -Infinity ? -step : min;",
                    "}",
                    "return result;",
                    "}"
                ],
                "REPLACE": [
                    "    upStep(val) {",
                    "        const {step, min} = this.props;",
                    "        const precisionFactor = this.getPrecisionFactor();",
                    "        let result;",
                    "        if (typeof val === 'number') {",
                    "            result = (precisionFactor * val + precisionFactor * step) / precisionFactor;",
                    "            result = Number(result.toFixed(this.getPrecision()));",
                    "        } else {",
                    "            result = min === -Infinity ? step : min;",
                    "        }",
                    "        return result;",
                    "    }",
                    "",
                    "    downStep(val) {",
                    "        const {step, min} = this.props;",
                    "        const precisionFactor = this.getPrecisionFactor();",
                    "        let result;",
                    "        if (typeof val === 'number') {",
                    "            result = (precisionFactor * val - precisionFactor * step) / precisionFactor;",
                    "            result = Number(result.toFixed(this.getPrecision()));",
                    "        } else {",
                    "            result = min === -Infinity ? -step : min;",
                    "        }",
                    "        return result;",
                    "    }"
                ]
            }
        ]
    }
}