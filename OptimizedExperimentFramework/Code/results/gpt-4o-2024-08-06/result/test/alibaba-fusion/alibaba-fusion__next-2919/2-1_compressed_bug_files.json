{
    "1": {
        "bug_file": "src/tab/index.jsx",
        "compressed": "NO",
        "line_numbers": 52,
        "compressed_line_numbers": 52,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Tab from './tab';\nimport Item from './tabs/tab-item';\n\nTab.Item = Item;\n\nTab.TabPane = ConfigProvider.config(Item, {\n    transform: (props, deprecated) => {\n        deprecated('Tab.TabPane', 'Tab.Item', 'Tab');\n        return props;\n    },\n});\n\nexport default ConfigProvider.config(Tab, {\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('type' in props) {\n            deprecated('type', 'shape', 'Tab');\n            const { type, ...others } = props;\n            props = { shape: type, ...others };\n        }\n        if ('resDirection' in props) {\n            const { resDirection, ...others } = props;\n\n            let excessMode;\n            if (resDirection === 'horizontal') {\n                deprecated(\n                    'resDirection=horizontal',\n                    'excessMode=slide',\n                    'Tab'\n                );\n\n                excessMode = 'slide';\n            } else if (resDirection === 'vertical') {\n                deprecated(\n                    'resDirection=vertical',\n                    'excessMode=dropdown',\n                    'Tab'\n                );\n\n                excessMode = 'dropdown';\n            }\n            props = { excessMode, ...others };\n        }\n        if ('tabBarExtraContent' in props) {\n            deprecated('tabBarExtraContent', 'extra', 'Tab');\n            const { tabBarExtraContent, ...others } = props;\n            props = { extra: tabBarExtraContent, ...others };\n        }\n\n        return props;\n    },\n});"
    },
    "2": {
        "bug_file": "src/tab/style.js",
        "compressed": "NO",
        "line_numbers": 4,
        "compressed_line_numbers": 4,
        "compressed_bug_file_content": "import '../icon/style.js';\nimport '../overlay/style.js';\nimport '../menu/style.js';\nimport './main.scss';"
    },
    "3": {
        "bug_file": "src/tab/tabs/content.jsx",
        "compressed": "NO",
        "line_numbers": 52,
        "compressed_line_numbers": 52,
        "compressed_bug_file_content": "import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nclass TabContent extends PureComponent {\n    static propTypes = {\n        prefix: PropTypes.string,\n        activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        lazyLoad: PropTypes.bool,\n        children: PropTypes.any,\n    };\n\n    render() {\n        const {\n            prefix,\n            activeKey,\n            lazyLoad,\n            unmountInactiveTabs,\n            children,\n            className,\n            ...others\n        } = this.props;\n        const formatChildren = [];\n        React.Children.forEach(children, child => {\n            /* eslint-disable eqeqeq */\n            const active = activeKey == child.key;\n            formatChildren.push(\n                React.cloneElement(child, {\n                    prefix,\n                    active,\n                    lazyLoad,\n                    unmountInactiveTabs,\n                })\n            );\n        });\n\n        const classNames = classnames(\n            {\n                [`${prefix}tabs-content`]: true,\n            },\n            className\n        );\n\n        return (\n            <div {...others} className={classNames}>\n                {formatChildren}\n            </div>\n        );\n    }\n}\n\nexport default TabContent;"
    },
    "4": {
        "bug_file": "src/tab/tabs/nav.jsx",
        "compressed": "YES",
        "line_numbers": 620,
        "compressed_line_numbers": 41,
        "compressed_bug_file_content": "import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Icon from '../../icon';\nimport Overlay from '../../overlay';\nimport Menu from '../../menu';\nimport Animate from '../../animate';\nimport { events, KEYCODE, dom, obj } from '../../util';\nimport { triggerEvents, getOffsetLT, getOffsetWH, isTransformSupported } from './utils';\n\n\n        // 此处通过延时处理，屏蔽动画带来的定位不准确问题（由于要支持ie9，因此无法使用transitionend）\n\n\n    /**\n     * The key method about move\n     * @param {number} target position to slide to\n     * @param {bool} checkSlideBtn need to check the slide button status or not\n     * @param {bool} setActive need to check the active status or not\n     */\n\n\n        // target should not be great than 0, i.e. should not over slide to left-most\n\n        // when need to slide, should not slide to exceed right-most\n\n\n            // needs move\n\n\n            // active tab covers wrapper right edge\n\n\n            // active tab covers wrapper left edge\n\n\n        // TEMP: 这里会受 Animate 影响，re-render 过程中 this.nav 实际上指向的是上次的 tabList 元素，建议暂时关闭 animation 解决\n\n\nexport default Nav;\n"
    },
    "5": {
        "bug_file": "src/tab/tabs/tab-item.jsx",
        "compressed": "NO",
        "line_numbers": 68,
        "compressed_line_numbers": 68,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\n\n/** Tab.Item */\nclass TabItem extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        /**\n         * 选项卡标题\n         */\n        title: PropTypes.node,\n        /**\n         * 单个选项卡是否可关闭\n         */\n        closeable: PropTypes.bool,\n        /**\n         * 选项卡是否被禁用\n         */\n        disabled: PropTypes.bool,\n        active: PropTypes.bool,\n        lazyLoad: PropTypes.bool,\n        unmountInactiveTabs: PropTypes.bool,\n        children: PropTypes.any,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        closeable: false,\n    };\n\n    render() {\n        const {\n            prefix,\n            active,\n            lazyLoad,\n            unmountInactiveTabs,\n            children,\n        } = this.props;\n\n        this._actived = this._actived || active;\n        if (lazyLoad && !this._actived) {\n            return null;\n        }\n\n        if (unmountInactiveTabs && !active) {\n            return null;\n        }\n\n        const cls = classnames({\n            [`${prefix}tabs-tabpane`]: true,\n            [`${active ? 'active' : 'hidden'}`]: true,\n        });\n\n        return (\n            <div\n                role=\"tabpanel\"\n                aria-hidden={active ? 'false' : 'true'}\n                className={cls}\n            >\n                {children}\n            </div>\n        );\n    }\n}\n\nexport default polyfill(TabItem);"
    }
}