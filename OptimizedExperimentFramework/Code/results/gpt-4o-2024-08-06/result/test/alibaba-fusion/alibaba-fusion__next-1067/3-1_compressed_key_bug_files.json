{
    "1": {
        "bug_file": "src/slider/slider.jsx",
        "compressed": "NO",
        "line_numbers": 266,
        "compressed_line_numbers": 266,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { obj } from '../util';\nimport InnerSlider from './slick/inner-slider';\nimport ConfigProvider from '../config-provider';\n\n/**\n * Slider\n */\nexport default class Slider extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        rtl: PropTypes.bool,\n        /**\n         * 自定义传入的样式\n         */\n        className: PropTypes.any,\n        /**\n         * 是否使用自适应高度\n         */\n        adaptiveHeight: PropTypes.bool,\n        /**\n         * 动效类型，默认是'slide'\n         */\n        animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n        /**\n         * 是否显示箭头\n         */\n        arrows: PropTypes.bool,\n        /**\n         * 导航箭头大小 可选值: 'medium', 'large'\n         */\n        arrowSize: PropTypes.oneOf(['medium', 'large']),\n        /**\n         * 导航箭头位置 可选值: 'inner', 'outer'\n         */\n        arrowPosition: PropTypes.oneOf(['inner', 'outer']),\n        /**\n         * 导航箭头的方向 可选值: 'hoz', 'ver'\n         */\n        arrowDirection: PropTypes.oneOf(['hoz', 'ver']),\n        /**\n         * 是否自动播放\n         */\n        autoplay: PropTypes.bool,\n        /**\n         * 自动播放的速度\n         */\n        autoplaySpeed: PropTypes.number,\n        /**\n         * 向后箭头\n         */\n        nextArrow: PropTypes.element,\n        /**\n         * 向前箭头\n         */\n        prevArrow: PropTypes.element,\n        /**\n         * 是否启用居中模式\n         */\n        centerMode: PropTypes.bool,\n        /**\n         * 是否显示导航锚点\n         */\n        dots: PropTypes.bool,\n        /**\n         * 导航锚点位置\n         */\n        dotsDirection: PropTypes.oneOf(['hoz', 'ver']),\n        dotsClass: PropTypes.string,\n        /**\n         * 自定义导航锚点\n         */\n        dotRender: PropTypes.func,\n        /**\n         * 是否可拖拽\n         */\n        draggable: PropTypes.bool,\n        /**\n         * 是否使用无穷循环模式\n         */\n        infinite: PropTypes.bool,\n        /**\n         * 初始被激活的轮播图\n         */\n        defaultActiveIndex: PropTypes.number,\n        /**\n         * 是否启用懒加载\n         */\n        lazyLoad: PropTypes.bool,\n        slide: PropTypes.string,\n        /**\n         * 轮播方向\n         */\n        slideDirection: PropTypes.oneOf(['hoz', 'ver']),\n        /**\n         * 同时展示的图片数量\n         */\n        slidesToShow: PropTypes.number,\n        /**\n         * 同时滑动的图片数量\n         */\n        slidesToScroll: PropTypes.number,\n        /**\n         * 轮播速度\n         */\n        speed: PropTypes.number,\n        /**\n         * 跳转到指定的轮播图（受控）\n         */\n        activeIndex: PropTypes.number,\n        /**\n         * 锚点导航触发方式\n         */\n        triggerType: PropTypes.oneOf(['click', 'hover']),\n        /**\n         * 轮播切换的回调函数\n         * @param {Number} index 幻灯片的索引\n         */\n        onChange: PropTypes.func,\n        onBeforeChange: PropTypes.func, // 兼容 0.x onBeforeChange\n        children: PropTypes.any,\n        /**\n         * 自定义传入的class\n         */\n        style: PropTypes.object,\n        /**\n         * Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览\n         */\n        centerPadding: PropTypes.string,\n        /**\n         * CSS3 Animation Easing,默认‘ease’\n         */\n        cssEase: PropTypes.string, // used\n        edgeFriction: PropTypes.number, // 非无限轮播滑动到边缘时的阻力\n        /**\n         * 多图轮播时，点击选中后自动居中\n         */\n        focusOnSelect: PropTypes.bool,\n        pauseOnHover: PropTypes.bool, // 鼠标经过时停止播放\n        swipe: PropTypes.bool,\n        swipeToSlide: PropTypes.bool,\n        touchMove: PropTypes.bool,\n        touchThreshold: PropTypes.number,\n        useCSS: PropTypes.bool,\n        variableWidth: PropTypes.bool, // used\n        waitForAnimate: PropTypes.bool,\n        edgeEvent: PropTypes.any,\n        swipeEvent: PropTypes.any,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        animation: 'slide',\n        arrowSize: 'medium',\n        arrowPosition: 'inner',\n        vertical: false,\n        verticalSwiping: false,\n        dots: true,\n        dotsDirection: 'hoz',\n        arrows: true,\n        arrowDirection: 'hoz',\n        infinite: true,\n        autoplay: false,\n        autoplaySpeed: 3000,\n        speed: 600,\n        adaptiveHeight: false,\n        centerMode: false,\n        centerPadding: '50px', // Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览\n        cssEase: 'ease',\n        draggable: true,\n        edgeFriction: 0.35,\n        focusOnSelect: false,\n        defaultActiveIndex: 0,\n        lazyLoad: false,\n        pauseOnHover: false,\n        rtl: false,\n        slide: 'div',\n        slideDirection: 'hoz',\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        swipe: true,\n        swipeToSlide: false, // Allow users to drag or swipe directly to a slide irrespective of slidesToScroll\n        touchMove: true, // 移动端touch\n        touchThreshold: 5,\n        useCSS: true,\n        variableWidth: false,\n        waitForAnimate: true,\n        onChange: () => {},\n        onBeforeChange: () => {},\n        edgeEvent: null,\n        swipeEvent: null,\n        nextArrow: null, // nextArrow, prevArrow are react components\n        prevArrow: null,\n        style: null,\n        dotsRender: null,\n        triggerType: 'click',\n    };\n\n    resize = () => {\n        // export api\n        this.innerSlider.onWindowResized();\n    };\n\n    render() {\n        const {\n            prefix,\n            arrowPosition,\n            slideDirection,\n            style,\n            className,\n            children,\n        } = this.props;\n\n        const sliderProps = obj.pickOthers(\n            ['className', 'style', 'slideDirection'],\n            this.props\n        );\n        const slideCount = React.Children.count(children);\n\n        if (slideCount === 0) {\n            // 没有 item 时不显示 slider\n            return null;\n        } else if (slideCount === 1) {\n            // 单个 item 时不显示箭头和控制器\n            sliderProps.arrows = false;\n            sliderProps.autoplay = false;\n            sliderProps.draggable = false;\n        }\n\n        const clazz = classNames(\n            [\n                `${prefix}slick`,\n                `${prefix}slick-${arrowPosition}`,\n                `${prefix}slick-${slideDirection}`,\n            ],\n            className\n        );\n\n        if (slideDirection === 'ver') {\n            // 向下传递时使用 vertical 属性\n            sliderProps.vertical = true;\n            sliderProps.verticalSwiping = true;\n        }\n\n        return (\n            <ConfigProvider rtl={false}>\n                <div\n                    dir=\"ltr\"\n                    className={clazz}\n                    style={style}\n                    {...obj.pickOthers(\n                        { ...Slider.propTypes, ...InnerSlider.propTypes },\n                        sliderProps\n                    )}\n                >\n                    <InnerSlider\n                        ref={InnerSlider => (this.innerSlider = InnerSlider)}\n                        {...sliderProps}\n                    />\n                </div>\n            </ConfigProvider>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/slider/slick/arrow.jsx",
        "compressed": "NO",
        "line_numbers": 143,
        "compressed_line_numbers": 143,
        "compressed_bug_file_content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../../icon';\nimport { obj, func } from '../../util';\n\n/**\n * slider arrow\n * 左右控制箭头\n */\n\nconst { noop } = func;\n\nexport default class Arrow extends Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        rtl: PropTypes.bool,\n        type: PropTypes.oneOf(['prev', 'next']).isRequired,\n        centerMode: PropTypes.bool,\n        currentSlide: PropTypes.number,\n        infinite: PropTypes.bool,\n        clickHandler: PropTypes.func,\n        slideCount: PropTypes.number,\n        slidesToShow: PropTypes.number,\n        arrow: PropTypes.element,\n        arrowSize: PropTypes.string,\n        arrowPosition: PropTypes.string,\n        arrowDirection: PropTypes.oneOf(['hoz', 'ver']),\n        onMouseEnter: PropTypes.func,\n        onMouseLeave: PropTypes.func,\n        children: PropTypes.node,\n    };\n\n    static defaultProps = {\n        onMouseEnter: noop,\n        onMouseLeave: noop,\n    };\n\n    static isDisabled(props) {\n        const {\n            infinite,\n            type,\n            centerMode,\n            currentSlide,\n            slideCount,\n            slidesToShow,\n        } = props;\n\n        if (infinite) {\n            return false;\n        }\n\n        // 下一个 index 大于总数？？\n        if (slideCount <= slidesToShow) {\n            return true;\n        }\n\n        // 向前箭头：当前是第 0 个\n        if (type === 'prev') {\n            return currentSlide <= 0;\n        }\n\n        if (centerMode && currentSlide >= slideCount - 1) {\n            // 向后箭头：居中模式，当前 index 大于最大 index\n            return true;\n        } else if (currentSlide >= slideCount - slidesToShow) {\n            // 向后箭头：普通模式，当前 index 大于 总数 - 下一个 index ？？？\n            return true;\n        }\n\n        return false;\n    }\n\n    static ARROW_ICON_TYPES = {\n        hoz: { prev: 'arrow-left', next: 'arrow-right' },\n        ver: { prev: 'arrow-up', next: 'arrow-down' },\n    };\n\n    handleClick(options, e) {\n        e && e.preventDefault();\n\n        // TODO hack\n        if (options.message === 'prev') {\n            options.message = 'previous';\n        }\n\n        this.props.clickHandler(options, e);\n    }\n\n    render() {\n        const {\n            prefix,\n            type,\n            arrowSize,\n            arrowPosition,\n            arrowDirection,\n            onMouseEnter,\n            onMouseLeave,\n            children,\n        } = this.props;\n\n        const others = obj.pickOthers(Arrow.propTypes, this.props);\n        const iconType = Arrow.ARROW_ICON_TYPES[arrowDirection][type];\n        const disabled = Arrow.isDisabled(this.props);\n\n        const arrowClazz = classNames(\n            [\n                `${prefix}slick-arrow`,\n                `${prefix}slick-${type}`,\n                arrowPosition,\n                arrowSize,\n                arrowDirection,\n            ],\n            { disabled }\n        );\n\n        const arrowProps = {\n            ...others,\n            key: type,\n            'data-role': 'none',\n            className: arrowClazz,\n            style: { display: 'block' },\n            onClick: disabled\n                ? null\n                : this.handleClick.bind(this, { message: type }),\n            onMouseEnter: disabled ? null : onMouseEnter,\n            onMouseLeave: disabled ? null : onMouseLeave,\n        };\n\n        if (children) {\n            return React.cloneElement(\n                React.Children.only(children),\n                arrowProps\n            );\n        } else {\n            return (\n                <button type=\"button\" role=\"button\" {...arrowProps}>\n                    <Icon type={iconType} />\n                </button>\n            );\n        }\n    }\n}"
    }
}