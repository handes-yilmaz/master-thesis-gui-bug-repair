{
    "1/1": "### Bug Scenario Description and Root Cause\n\nThe bug report describes an issue with a tree component where the selection state of a node does not toggle correctly. When a node is selected, the `extra.selected` parameter should toggle between `true` and `false` with each click, but it remains `false` after the first click. The expected behavior is for the selection state and corresponding CSS styles to toggle between `true` and `false` with each click.\n\n### Bug Location Analysis\n\nThe issue likely resides in the handling of the selection state within the `TreeNode` component. Specifically, the `handleSelect` method in `src/tree/view/tree-node.jsx` is responsible for toggling the selection state. The problem may be due to incorrect state management or event handling logic that fails to update the selection state properly.\n\n### Patch Generation\n\nTo fix the issue, we need to ensure that the selection state toggles correctly. This involves checking the logic in the `handleSelect` method and ensuring that the state is updated appropriately.\n\n```javascript\n### src/tree/view/tree-node.jsx\n<<<<<<< SEARCH\nhandleSelect(e) {\n    e.preventDefault();\n\n    const { root, selected, eventKey } = this.props;\n    root.handleSelect(!selected, eventKey, this, e);\n}\n=======\nhandleSelect(e) {\n    e.preventDefault();\n\n    const { root, eventKey } = this.props;\n    const selected = !this.props.selected; // Toggle the selected state\n    root.handleSelect(selected, eventKey, this, e);\n}\n>>>>>>> REPLACE\n```\n\n### Explanation\n\n- **Original Code**: The `handleSelect` method uses the `selected` prop directly, which may not reflect the current state after the first toggle.\n- **Modified Code**: The `selected` state is explicitly toggled using `!this.props.selected` to ensure that the state changes with each click, allowing the selection state to toggle correctly between `true` and `false`."
}