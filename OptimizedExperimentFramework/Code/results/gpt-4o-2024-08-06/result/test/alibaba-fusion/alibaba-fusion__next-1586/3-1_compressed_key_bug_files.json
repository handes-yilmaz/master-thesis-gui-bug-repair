{
    "1": {
        "bug_file": "src/tree/view/tree-node.jsx",
        "compressed": "YES",
        "line_numbers": 595,
        "compressed_line_numbers": 60,
        "compressed_bug_file_content": "import React, { Component, Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from '../../icon';\nimport Checkbox from '../../checkbox';\nimport Animate from '../../animate';\nimport { func, obj, KEYCODE } from '../../util';\nimport TreeNodeInput from './tree-node-input';\n\n\n/**\n * Tree.Node\n */\nexport default class TreeNode extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 节点文本内容\n         */\n\n        /**\n         * 单独设置是否支持选中，覆盖 Tree 的 selectable\n         */\n\n        /**\n         * 单独设置是否出现复选框，覆盖 Tree 的 checkable\n         */\n\n        /**\n         * 单独设置是否支持编辑，覆盖 Tree 的 editable\n         */\n\n        /**\n         * 单独设置是否支持拖拽，覆盖 Tree 的 draggable\n         */\n\n        /**\n         * 是否禁止节点响应\n         */\n\n        /**\n         * 是否禁止勾选节点复选框\n         */\n\n        /**\n         * 是否是叶子节点，设置loadData时生效\n         */\n\n\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n\n\n        // remove aria keys\n\n\n"
    },
    "2": {
        "bug_file": "src/tree/view/util.js",
        "compressed": "NO",
        "line_numbers": 215,
        "compressed_line_numbers": 215,
        "compressed_bug_file_content": "/* eslint-disable valid-jsdoc */\nexport function normalizeToArray(keys) {\n    if (keys !== undefined && keys !== null) {\n        if (Array.isArray(keys)) {\n            return [...keys];\n        }\n\n        return [keys];\n    }\n\n    return [];\n}\n\n/**\n * 判断子节点是否是选中状态，如果 checkable={false} 则向下递归，\n * @param {Node} child\n * @param {Array} checkedKeys\n */\nexport function isNodeChecked(node, checkedKeys) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(c => isNodeChecked(c, checkedKeys))\n        );\n    }\n    return checkedKeys.indexOf(node.key) > -1;\n}\n\n/**\n * 遍历所有可用的子节点\n * @param {Node}\n * @param {Function} callback\n */\nexport function forEachEnableNode(node, callback = () => {}) {\n    if (node.disabled || node.checkboxDisabled) return;\n    // eslint-disable-next-line callback-return\n    callback(node);\n    if (node.children && node.children.length > 0) {\n        node.children.forEach(child => forEachEnableNode(child, callback));\n    }\n}\n/**\n * 判断节点是否禁用checked\n * @param {Node} node\n * @returns {Boolean}\n */\nexport function isNodeDisabledChecked(node) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        );\n    }\n\n    return false;\n}\n\n/**\n * 递归获取一个 checkable = {true} 的父节点，当 checkable={false} 时继续往上查找\n * @param {Node} node\n * @param {Map} _p2n\n * @return {Node}\n */\nexport function getCheckableParentNode(node, _p2n) {\n    let parentPos = node.pos.split(['-']);\n    if (parentPos.length === 2) return node;\n    parentPos.splice(parentPos.length - 1, 1);\n    parentPos = parentPos.join('-');\n    const parentNode = _p2n[parentPos];\n    if (parentNode.disabled || parentNode.checkboxDisabled) return false;\n    /* istanbul ignore next */\n    if (parentNode.checkable === false) {\n        return getCheckableParentNode(parentNode, _p2n);\n    }\n\n    return parentNode;\n}\n/**\n * 过滤子节点\n * @param {Array} keys\n * @param {Object} _k2n\n */\nexport function filterChildKey(keys, _k2n, _p2n) {\n    const newKeys = [];\n    keys.forEach(key => {\n        const node = getCheckableParentNode(_k2n[key], _p2n);\n        if (\n            !node ||\n            node.checkable === false ||\n            node === _k2n[key] ||\n            keys.indexOf(node.key) === -1\n        ) {\n            newKeys.push(key);\n        }\n    });\n    return newKeys;\n}\n\nexport function filterParentKey(keys, _k2n) {\n    const newKeys = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        const node = _k2n[keys[i]];\n        if (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        ) {\n            newKeys.push(keys[i]);\n        }\n    }\n\n    return newKeys;\n}\n\nexport function isDescendantOrSelf(currentPos, targetPos) {\n    if (!currentPos || !targetPos) {\n        return false;\n    }\n\n    const currentNums = currentPos.split('-');\n    const targetNums = targetPos.split('-');\n\n    return (\n        currentNums.length <= targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\nexport function isSiblingOrSelf(currentPos, targetPos) {\n    const currentNums = currentPos.split('-').slice(0, -1);\n    const targetNums = targetPos.split('-').slice(0, -1);\n\n    return (\n        currentNums.length === targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\n// eslint-disable-next-line max-statements\nexport function getAllCheckedKeys(checkedKeys, _k2n, _p2n) {\n    checkedKeys = normalizeToArray(checkedKeys);\n    const filteredKeys = checkedKeys.filter(key => !!_k2n[key]);\n    const flatKeys = [\n        ...filterChildKey(filteredKeys, _k2n, _p2n),\n        ...filteredKeys.filter(\n            key => _k2n[key].disabled || _k2n[key].checkboxDisabled\n        ),\n    ];\n    const removeKey = child => {\n        if (child.disabled || child.checkboxDisabled) return;\n        if (\n            child.checkable === false &&\n            child.children &&\n            child.children.length > 0\n        ) {\n            return child.children.forEach(removeKey);\n        }\n        flatKeys.splice(flatKeys.indexOf(child.key), 1);\n    };\n\n    const addParentKey = (i, parent) => flatKeys.splice(i, 0, parent.key);\n\n    const keys = [...flatKeys];\n    for (let i = 0; i < keys.length; i++) {\n        const pos = _k2n[keys[i]].pos;\n        const nums = pos.split('-');\n        if (nums.length === 2) {\n            break;\n        }\n        for (let j = nums.length - 2; j > 0; j--) {\n            const parentPos = nums.slice(0, j + 1).join('-');\n            const parent = _p2n[parentPos];\n            if (\n                parent.checkable === false ||\n                parent.disabled ||\n                parent.checkboxDisabled\n            )\n                continue;\n            const parentChecked = parent.children.every(child =>\n                isNodeChecked(child, flatKeys)\n            );\n            if (parentChecked) {\n                parent.children.forEach(removeKey);\n                addParentKey(i, parent);\n            } else {\n                break;\n            }\n        }\n    }\n\n    const newKeys = [];\n    flatKeys.forEach(key => {\n        if (_k2n[key].disabled || _k2n[key].checkboxDisabled) {\n            newKeys.push(key);\n            return;\n        }\n        forEachEnableNode(_k2n[key], node => {\n            if (node.checkable === false) return;\n            newKeys.push(node.key);\n        });\n    });\n\n    return newKeys;\n}"
    },
    "3": {
        "bug_file": "src/tree/index.jsx",
        "compressed": "NO",
        "line_numbers": 9,
        "compressed_line_numbers": 9,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Tree from './view/tree';\nimport TreeNode from './view/tree-node';\n\nTree.Node = TreeNode;\n\nexport default ConfigProvider.config(Tree, {\n    exportNames: ['setFocusKey'],\n});"
    },
    "4": {
        "bug_file": "src/tree/view/tree.jsx",
        "compressed": "YES",
        "line_numbers": 1132,
        "compressed_line_numbers": 246,
        "compressed_bug_file_content": "/* eslint-disable max-depth */\nimport React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { func, dom, obj, KEYCODE } from '../../util';\nimport TreeNode from './tree-node';\nimport {\n\n\n/**\n * Tree\n */\nexport default class Tree extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 数据源，该属性优先级高于 children\n         */\n\n        /**\n         * 是否显示树的线\n         */\n\n        /**\n         * 是否支持选中节点\n         */\n\n        /**\n         * （用于受控）当前选中节点 key 的数组\n         */\n\n        /**\n         * （用于非受控）默认选中节点 key 的数组\n         */\n\n        /**\n         * 选中或取消选中节点时触发的回调函数\n         * @param {Array} selectedKeys 选中节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.selectedNodes 选中节点的数组\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.selected 当前操作是否是选中\n         */\n\n        /**\n         * 是否支持多选\n         */\n\n        /**\n         * 是否支持勾选节点的复选框\n         */\n\n        /**\n         * （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象\n         */\n\n\n        /**\n         * （用于非受控）默认勾选复选框节点 key 的数组\n         */\n\n        /**\n         * 勾选节点复选框是否完全受控（父子节点选中状态不再关联）\n         */\n\n        /**\n         * 定义选中时回填的方式\n         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点\n         */\n\n        /**\n         * 勾选或取消勾选复选框时触发的回调函数\n         * @param {Array} checkedKeys 勾选复选框节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Array} extra.checkedNodes 勾选复选框节点的数组\n         * @param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组\n         * @param {Array} extra.indeterminateKeys 半选复选框节点 key 的数组\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.checked 当前操作是否是勾选\n         */\n\n        /**\n         * （用于受控）当前展开的节点 key 的数组\n         */\n\n        /**\n         * （用于非受控）默认展开的节点 key 的数组\n         */\n\n        /**\n         * 是否默认展开所有节点\n         */\n\n        /**\n         * 是否自动展开父节点，建议受控时设置为false\n         */\n\n        /**\n         * 展开或收起节点时触发的回调函数\n         * @param {Array} expandedKeys 展开的节点key的数组\n         * @param {Object} extra 额外参数\n         * @param {Object} extra.node 当前操作的节点\n         * @param {Boolean} extra.expanded 当前操作是否是展开\n         */\n\n        /**\n         * 是否支持编辑节点内容\n         */\n\n        /**\n         * 编辑节点内容完成时触发的回调函数\n         * @param {String} key 编辑节点的 key\n         * @param {String} label 编辑节点完成时节点的文本\n         * @param {Object} node 当前编辑的节点\n         */\n\n        /**\n         * 是否支持拖拽节点\n         */\n\n        /**\n         * 开始拖拽节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 拖拽的节点\n         */\n\n        /**\n         * 拖拽节点进入目标节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         * @param {Array} info.expandedKeys 当前展开的节点key的数组\n         */\n\n        /**\n         * 拖拽节点在目标节点上移动的时候触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点离开目标节点时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点拖拽结束时触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         */\n\n        /**\n         * 拖拽节点放入目标节点内或前后触发的回调函数\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 目标节点\n         * @param {Object} info.dragNode 拖拽的节点\n         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组\n         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后\n         */\n\n        /**\n         * 节点是否可被作为拖拽的目标节点\n         * @param {Object} info 拖拽信息\n         * @param {Object} info.node 目标节点\n         * @param {Object} info.dragNode 拖拽的节点\n         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组\n         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后\n         * @return {Boolean} 是否可以被当作目标节点\n         */\n\n        /**\n         * 异步加载数据的函数\n         * @param {Object} node 被点击展开的节点\n         */\n\n        /**\n         * 按需筛选高亮节点\n         * @param {Object} node 待筛选的节点\n         * @return {Boolean} 是否被筛选中\n         */\n\n        /**\n         * 右键点击节点时触发的回调函数\n         * @param {Object} info 信息对象\n         * @param {Object} info.event 事件对象\n         * @param {Object} info.node 点击的节点\n         */\n\n        /**\n         * 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)\n         */\n\n        /**\n         * 设置节点是否占满一行\n         */\n\n        /**\n         * 是否开启展开收起动画\n         */\n\n        /**\n         * 当前获得焦点的子菜单或菜单项 key 值\n         */\n\n        /**\n         * 渲染子节点\n         * @param {Array<ReactNode>} nodes 所有的子节点\n         * @return {ReactNode} 返回节点\n         */\n\n\n    /* istanbul ignore next */\n\n\n    /*eslint-disable max-statements*/\n\n\n    // eslint-disable-next-line max-statements\n\n\n        // ps.forEach(p => {\n        //     if (this._p2n[p].checkable !== false && !this._p2n[p].disabled && isDescendantOrSelf(pos, p)) {\n        //         this.processKey(checkedKeys, this._p2n[p].key, check);\n        //     }\n        // });\n\n\n                        // eslint-disable-next-line max-depth\n\n\n                        // eslint-disable-next-line max-depth\n\n\n    /*eslint-enable*/\n\n\n"
    }
}