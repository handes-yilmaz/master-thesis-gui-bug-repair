{
    "1": {
        "bug_file": "src/date-picker2/panels/time-panel.jsx",
        "compressed": "NO",
        "line_numbers": 91,
        "compressed_line_numbers": 91,
        "compressed_bug_file_content": "import React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport * as PT from 'prop-types';\nimport TimePickerPanel from '../../time-picker2/panel';\nimport SharedPT from '../prop-types';\nimport { func } from '../../util';\n\nconst DECADE_TIME_FORMAT = 'HH:mm:ss';\n\nclass TimePanel extends React.PureComponent {\n    static propTypes = {\n        rtl: PT.bool,\n        prefix: PT.string,\n        locale: PT.object,\n        value: SharedPT.date,\n        timePanelProps: PT.object,\n        defaultValue: SharedPT.value,\n        onSelect: PT.func,\n    };\n\n    formater = v => {\n        const { timePanelProps = {} } = this.props;\n        const { showHour, showMinute, showSecond } = this.getShow();\n\n        let fmt;\n        if ('format' in timePanelProps) {\n            fmt = timePanelProps.format;\n        } else {\n            const fmtArr = [];\n\n            showHour && fmtArr.push('HH');\n            showMinute && fmtArr.push('mm');\n            showSecond && fmtArr.push('ss');\n\n            fmt = fmtArr.join(':');\n        }\n\n        return typeof fmt === 'function' ? fmt(v) : v.format(fmt);\n    };\n\n    getShow = () => {\n        const { timePanelProps: props = {} } = this.props;\n\n        const fmt = props.format || DECADE_TIME_FORMAT;\n\n        let showHour;\n        let showMinute;\n        let showSecond;\n\n        if (typeof fmt === 'string') {\n            showHour = fmt.indexOf('H') > -1;\n            showSecond = fmt.indexOf('s') > -1;\n            showMinute = fmt.indexOf('m') > -1;\n        }\n\n        return {\n            showHour: 'showHour' in props ? props.showHour : showHour,\n            showMinute: 'showMinute' in props ? props.showMinute : showMinute,\n            showSecond: 'showSecond' in props ? props.showSecond : showSecond,\n        };\n    };\n\n    onSelect = v => {\n        func.invoke(this.props, 'onSelect', [v]);\n    };\n\n    render() {\n        const { prefix, rtl, locale, timePanelProps = {}, value } = this.props;\n        const { showHour, showMinute, showSecond } = this.getShow();\n\n        return (\n            <div dir={rtl ? 'rtl' : undefined} className={`${prefix}date-time-picker-wrapper ${prefix}calendar2-panel`}>\n                <div className={`${prefix}calendar2-header`}>\n                    <div className={`${prefix}calendar2-header-text-field`}>{value ? this.formater(value) : null}</div>\n                </div>\n                <TimePickerPanel\n                    prefix={prefix}\n                    locale={locale}\n                    onSelect={this.onSelect}\n                    showHour={showHour}\n                    showSecond={showSecond}\n                    showMinute={showMinute}\n                    {...timePanelProps}\n                    value={value}\n                />\n            </div>\n        );\n    }\n}\n\nexport default polyfill(TimePanel);"
    },
    "2": {
        "bug_file": "src/date-picker2/util.js",
        "compressed": "NO",
        "line_numbers": 21,
        "compressed_line_numbers": 21,
        "compressed_bug_file_content": "import { DATE_INPUT_TYPE } from './constant';\n\nexport function setTime(targetVal, sourceVal) {\n    if (sourceVal && targetVal) {\n        return targetVal\n            .hour(sourceVal.hour())\n            .minute(sourceVal.minute())\n            .second(sourceVal.second())\n            .millisecond(sourceVal.millisecond());\n    }\n    return targetVal;\n}\n\nexport function switchInputType(inputType) {\n    const { BEGIN, END } = DATE_INPUT_TYPE;\n    return inputType === BEGIN ? END : BEGIN;\n}\n\nexport function mode2unit(mode) {\n    return mode === 'date' ? 'day' : mode;\n}"
    },
    "3": {
        "bug_file": "src/date-picker2/index.jsx",
        "compressed": "NO",
        "line_numbers": 79,
        "compressed_line_numbers": 79,
        "compressed_bug_file_content": "import React from 'react';\nimport ConfigProvider from '../config-provider';\nimport Picker from './picker';\nimport { DATE_PICKER_MODE } from './constant';\n\nconst { DATE, WEEK, MONTH, QUARTER, YEAR } = DATE_PICKER_MODE;\nconst MODE2FORMAT = {\n    [DATE]: 'YYYY-MM-DD',\n    [WEEK]: 'YYYY-wo',\n    [MONTH]: 'YYYY-MM',\n    [QUARTER]: 'YYYY-[Q]Q',\n    [YEAR]: 'YYYY',\n};\n\n/* istanbul ignore next */\nconst transform = (props, deprecated) => {\n    const { footerRender, onVisibleMonthChange, defaultVisibleMonth, ranges, ...newProps } = props;\n    const mode = props.mode || DATE;\n\n    if ('footerRender' in props) {\n        deprecated('footerRender', 'extraFooterRender', 'DatePicker');\n        newProps.extraFooterRender = footerRender;\n    }\n\n    if (onVisibleMonthChange) {\n        deprecated('onVisibleMonthChange', 'onPanelChange', 'DatePicker');\n        newProps.onPanelChange = onVisibleMonthChange;\n    }\n\n    if (defaultVisibleMonth) {\n        deprecated('defaultVisibleMonth', 'defaultPanelValue', 'DatePicker');\n        newProps.defaultPanelValue = onVisibleMonthChange;\n    }\n\n    if ('ranges' in props) {\n        deprecated('ranges', 'preset: PT.oneOfType([PT.array, PT.object])', 'DatePicker');\n        newProps.preset = ranges;\n    }\n\n    if ([WEEK, MONTH, QUARTER, YEAR].includes(mode)) {\n        delete newProps.showTime;\n    } else if (typeof props.showTime === 'object') {\n        deprecated('showTime: object', 'showTime && timePanelProps', 'DatePicker');\n        newProps.timePanelProps = props.showTime;\n        newProps.showTime = true;\n    }\n\n    if (!newProps.format) {\n        newProps.format = MODE2FORMAT[mode] + (newProps.showTime ? ' HH:mm:ss' : '');\n    }\n\n    return newProps;\n};\n\nconst ConfigPicker = ConfigProvider.config(Picker, {\n    componentName: 'DatePicker2',\n    transform,\n});\nconst generatePicker = mode => React.forwardRef((props, ref) => <ConfigPicker ref={ref} {...props} mode={mode} />);\n\nconst DatePicker2 = generatePicker();\nDatePicker2.displayName = 'DatePicker2';\n\nDatePicker2.MonthPicker = generatePicker(MONTH);\nDatePicker2.MonthPicker.displayName = 'MonthPicker2';\n\nDatePicker2.YearPicker = generatePicker(YEAR);\nDatePicker2.YearPicker.displayName = 'YearPicker2';\n\nDatePicker2.WeekPicker = generatePicker(WEEK);\nDatePicker2.WeekPicker.displayName = 'WeekPicker2';\n\nDatePicker2.QuarterPicker = generatePicker(QUARTER);\nDatePicker2.QuarterPicker.displayName = 'QuarterPicker2';\n\nDatePicker2.RangePicker = React.forwardRef((props, ref) => <ConfigPicker ref={ref} {...props} type=\"range\" />);\nDatePicker2.RangePicker.displayName = 'RangePicker2';\n\nexport default DatePicker2;"
    },
    "4": {
        "bug_file": "src/date-picker2/panels/date-input.jsx",
        "compressed": "NO",
        "line_numbers": 233,
        "compressed_line_numbers": 233,
        "compressed_bug_file_content": "import React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport * as PT from 'prop-types';\nimport classnames from 'classnames';\nimport SharedPT from '../prop-types';\nimport { DATE_INPUT_TYPE, DATE_PICKER_MODE } from '../constant';\nimport { func, datejs, obj } from '../../util';\n\nimport Input from '../../input';\nimport Icon from '../../icon';\n\nconst { DATE, WEEK, MONTH, QUARTER, YEAR } = DATE_PICKER_MODE;\n\nclass DateInput extends React.Component {\n    static propTypes = {\n        prefix: PT.string,\n        rtl: PT.bool,\n        locale: PT.object,\n        value: SharedPT.inputValue,\n        inputType: SharedPT.inputType,\n        format: SharedPT.format,\n        isRange: PT.bool,\n        hasClear: PT.bool,\n        onInputTypeChange: PT.func,\n        autoFocus: PT.bool,\n        readOnly: SharedPT.readOnly,\n        placeholder: SharedPT.placeholder,\n        size: SharedPT.size,\n        focus: PT.bool,\n        hasBorder: PT.bool,\n        separator: PT.node,\n        disabled: SharedPT.disabled,\n        inputProps: PT.object,\n        dateInputAriaLabel: SharedPT.ariaLabel,\n        label: PT.node,\n    };\n\n    static defaultProps = {\n        autoFocus: false,\n        readOnly: false,\n        hasClear: true,\n        separator: '-',\n        hasBorder: true,\n        size: 'medium',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.prefixCls = `${props.prefix}date-picker2-input`;\n    }\n\n    setInputRef = (el, index) => {\n        if (this.props.isRange) {\n            if (!this.input) {\n                this.input = [];\n            }\n            this.input[index] = el;\n        } else {\n            this.input = el;\n        }\n    };\n\n    setValue = v => {\n        const { isRange, inputType, value } = this.props;\n        let newVal = v;\n\n        if (isRange) {\n            newVal = [...value];\n            newVal[inputType] = v;\n        }\n\n        return newVal;\n    };\n\n    formatter = v => {\n        const { format } = this.props;\n        return typeof format === 'function' ? format(v) : v.format(format);\n    };\n\n    onInput = (v, e, eventType) => {\n        v = this.setValue(v);\n\n        if (eventType === 'clear') {\n            v = null;\n            e.stopPropagation();\n        }\n\n        func.invoke(this.props, 'onInput', [v, eventType]);\n    };\n\n    handleTypeChange = inputType => {\n        if (inputType !== this.props.inputType) {\n            func.invoke(this.props, 'onInputTypeChange', [inputType]);\n        }\n    };\n\n    getPlaceholder = () => {\n        const { locale, isRange, mode } = this.props;\n        const {\n            placeholder,\n            selectDate,\n            monthPlaceholder,\n            weekPlaceholder,\n            yearPlaceholder,\n            startPlaceholder,\n            quarterPlaceholder,\n            endPlaceholder,\n        } = locale;\n        const mode2placeholder = {\n            [DATE]: selectDate,\n            [WEEK]: weekPlaceholder,\n            [MONTH]: monthPlaceholder,\n            [QUARTER]: quarterPlaceholder,\n            [YEAR]: yearPlaceholder,\n        };\n\n        let holder = this.props.placeholder;\n\n        holder = holder || (isRange ? [startPlaceholder, endPlaceholder] : mode2placeholder[mode] || placeholder);\n\n        if (isRange && !Array.isArray(holder)) {\n            holder = Array(2).fill(holder);\n        }\n\n        return holder;\n    };\n\n    render() {\n        const { onInput, setInputRef, handleTypeChange, prefixCls } = this;\n        const {\n            autoFocus,\n            readOnly,\n            isRange,\n            value,\n            prefix,\n            hasClear,\n            inputType,\n            size,\n            focus,\n            hasBorder,\n            separator,\n            disabled,\n            inputProps,\n            dateInputAriaLabel,\n            state,\n            label,\n            ...restProps\n        } = this.props;\n\n        const placeholder = this.getPlaceholder();\n        const htmlSize = String(Math.max(this.formatter(datejs('2020-12-12 24:00:00')).length, hasBorder ? 12 : 8));\n\n        const sharedProps = {\n            ...obj.pickProps(restProps, Input),\n            ...inputProps,\n            size,\n            htmlSize,\n            readOnly,\n            hasBorder: false,\n            onChange: onInput,\n        };\n\n        let rangeProps;\n        if (isRange) {\n            rangeProps = [DATE_INPUT_TYPE.BEGIN, DATE_INPUT_TYPE.END].map(idx => {\n                const _disabled = Array.isArray(disabled) ? disabled[idx] : disabled;\n\n                return {\n                    ...sharedProps,\n                    autoFocus,\n                    placeholder: placeholder[idx],\n                    value: value[idx] || '',\n                    'aria-label': Array.isArray(dateInputAriaLabel) ? dateInputAriaLabel[idx] : dateInputAriaLabel,\n                    disabled: _disabled,\n                    ref: ref => setInputRef(ref, idx),\n                    onFocus: _disabled ? undefined : () => handleTypeChange(idx),\n                    className: classnames({\n                        [`${prefixCls}-active`]: inputType === idx,\n                    }),\n                };\n            });\n        }\n\n        const className = classnames(\n            [prefixCls, `${prefixCls}-${size}`, `${prefixCls}-${isRange ? 'range' : 'date'}`],\n            {\n                [`${prefixCls}-focus`]: focus,\n                [`${prefixCls}-noborder`]: !hasBorder,\n                [`${prefixCls}-disabled`]: isRange && Array.isArray(disabled) ? disabled.every(v => v) : disabled,\n            }\n        );\n\n        const calendarIcon = <Icon type=\"calendar\" className={`${prefix}date-picker2-symbol-calendar-icon`} />;\n\n        return (\n            <div className={className}>\n                {isRange ? (\n                    <React.Fragment>\n                        <Input\n                            {...rangeProps[0]}\n                            label={label}\n                            autoFocus={autoFocus} // eslint-disable-line jsx-a11y/no-autofocus\n                        />\n                        <div className={`${prefixCls}-separator`}>{separator}</div>\n                        <Input\n                            {...rangeProps[1]}\n                            state={state}\n                            hasClear={!state && hasClear}\n                            hint={state ? null : calendarIcon}\n                        />\n                    </React.Fragment>\n                ) : (\n                    <Input\n                        {...sharedProps}\n                        label={label}\n                        state={state}\n                        disabled={disabled}\n                        hasClear={!state && hasClear}\n                        placeholder={placeholder}\n                        autoFocus={autoFocus} // eslint-disable-line jsx-a11y/no-autofocus\n                        ref={setInputRef}\n                        aria-label={dateInputAriaLabel}\n                        value={value || ''}\n                        hint={state ? null : calendarIcon}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default polyfill(DateInput);"
    }
}