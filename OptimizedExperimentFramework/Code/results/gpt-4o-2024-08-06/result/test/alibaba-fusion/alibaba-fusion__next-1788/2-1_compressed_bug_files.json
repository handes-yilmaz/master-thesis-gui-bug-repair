{
    "1": {
        "bug_file": "src/input/input.jsx",
        "compressed": "NO",
        "line_numbers": 405,
        "compressed_line_numbers": 405,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { obj, func } from '../util';\nimport Base from './base';\nimport Group from './group';\n\n// preventDefault here can stop onBlur to keep focus state\nfunction preventDefault(e) {\n    e.preventDefault();\n}\n\n/** Input */\nexport default class Input extends Base {\n    static propTypes = {\n        ...Base.propTypes,\n        /**\n         * label\n         */\n        label: PropTypes.node,\n        /**\n         * 是否出现clear按钮\n         */\n        hasClear: PropTypes.bool,\n        /**\n         * 是否有边框\n         */\n        hasBorder: PropTypes.bool,\n        /**\n         * 状态\n         * @enumdesc 错误, 校验中, 成功, 警告\n         */\n        state: PropTypes.oneOf(['error', 'loading', 'success', 'warning']),\n        /**\n         * 尺寸\n         * @enumdesc 小, 中, 大\n         */\n        size: PropTypes.oneOf(['small', 'medium', 'large']),\n        /**\n         * 按下回车的回调\n         */\n        onPressEnter: PropTypes.func,\n\n        onClear: PropTypes.func,\n        /**\n         * 原生type\n         */\n        htmlType: PropTypes.string,\n        htmlSize: PropTypes.string,\n        /**\n         * 水印 (Icon的type类型，和hasClear占用一个地方)\n         */\n        hint: PropTypes.string,\n        /**\n         * 文字前附加内容\n         */\n        innerBefore: PropTypes.node,\n        /**\n         * 文字后附加内容\n         */\n        innerAfter: PropTypes.node,\n        /**\n         * 输入框前附加内容\n         */\n        addonBefore: PropTypes.node,\n        /**\n         * 输入框后附加内容\n         */\n        addonAfter: PropTypes.node,\n        /**\n         * 输入框前附加文字\n         */\n        addonTextBefore: PropTypes.node,\n        /**\n         * 输入框后附加文字\n         */\n        addonTextAfter: PropTypes.node,\n        /**\n         * (原生input支持)\n         */\n        autoComplete: PropTypes.string,\n        /**\n         * 自动聚焦(原生input支持)\n         */\n        autoFocus: PropTypes.bool,\n        inputRender: PropTypes.func,\n        extra: PropTypes.node,\n        innerBeforeClassName: PropTypes.string,\n        innerAfterClassName: PropTypes.string,\n        /**\n         * 是否为预览态\n         */\n        isPreview: PropTypes.bool,\n        /**\n         * 预览态模式下渲染的内容\n         * @param {number} value 评分值\n         */\n        renderPreview: PropTypes.func,\n    };\n\n    static defaultProps = {\n        ...Base.defaultProps,\n        size: 'medium',\n        autoComplete: 'off',\n        hasBorder: true,\n        isPreview: false,\n        onPressEnter: func.noop,\n        inputRender: el => el,\n    };\n\n    constructor(props) {\n        super(props);\n\n        let value;\n        if ('value' in props) {\n            value = props.value;\n        } else {\n            value = props.defaultValue;\n        }\n\n        this.state = {\n            value: typeof value === 'undefined' ? '' : value,\n        };\n    }\n\n    // `Enter` was considered to be two chars in chrome , but one char in ie.\n    // so we make all `Enter` to be two chars\n    getValueLength(value) {\n        const nv = `${value}`;\n        let strLen = this.props.getValueLength(nv);\n        if (typeof strLen !== 'number') {\n            strLen = nv.length;\n        }\n\n        return strLen;\n    }\n\n    renderControl() {\n        const {\n            hasClear,\n            readOnly,\n            state,\n            prefix,\n            hint,\n            extra,\n            locale,\n        } = this.props;\n\n        const lenWrap = this.renderLength();\n\n        let stateWrap = null;\n        if (state === 'success') {\n            stateWrap = <Icon type=\"success-filling\" />;\n        } else if (state === 'loading') {\n            stateWrap = <Icon type=\"loading\" />;\n        } else if (state === 'warning') {\n            stateWrap = <Icon type=\"warning\" />;\n        }\n\n        let clearWrap = null;\n        const showClear = hasClear && !readOnly && !!`${this.state.value}`;\n\n        if (hint || showClear) {\n            let hintIcon = null;\n            if (hint) {\n                hintIcon = (\n                    <Icon type={hint} className={`${prefix}input-hint`} />\n                );\n            } else {\n                hintIcon = (\n                    <Icon\n                        type=\"delete-filling\"\n                        role=\"button\"\n                        tabIndex=\"0\"\n                        className={`${prefix}input-hint`}\n                        aria-label={locale.clear}\n                        onClick={this.onClear.bind(this)}\n                        onMouseDown={preventDefault}\n                        onKeyDown={this.handleKeyDownFromClear}\n                    />\n                );\n            }\n\n            clearWrap = (\n                <span className={`${prefix}input-hint-wrap`}>\n                    {hasClear && hint ? (\n                        <Icon\n                            type=\"delete-filling\"\n                            role=\"button\"\n                            tabIndex=\"0\"\n                            className={`${prefix}input-clear`}\n                            aria-label={locale.clear}\n                            onClick={this.onClear.bind(this)}\n                            onMouseDown={preventDefault}\n                            onKeyDown={this.handleKeyDownFromClear}\n                        />\n                    ) : null}\n                    {hintIcon}\n                </span>\n            );\n        }\n\n        if (state === 'loading') {\n            clearWrap = null;\n        }\n\n        return clearWrap || lenWrap || stateWrap || extra ? (\n            <span className={`${prefix}input-control`}>\n                {clearWrap}\n                {lenWrap}\n                {stateWrap}\n                {extra}\n            </span>\n        ) : null;\n    }\n\n    renderLabel() {\n        const { label, prefix, id } = this.props;\n        return label ? (\n            <label className={`${prefix}input-label`} htmlFor={id}>\n                {label}\n            </label>\n        ) : null;\n    }\n\n    renderInner(inner, cls) {\n        return inner ? <span className={cls}>{inner}</span> : null;\n    }\n\n    handleKeyDown = e => {\n        if (e.keyCode === 13) {\n            this.props.onPressEnter(e);\n        }\n\n        this.onKeyDown(e);\n    };\n\n    handleKeyDownFromClear = e => {\n        if (e.keyCode === 13) {\n            this.onClear(e);\n        }\n    };\n\n    onClear(e) {\n        if (this.props.disabled) {\n            return;\n        }\n\n        // 非受控模式清空内部数据\n        if (!('value' in this.props)) {\n            this.setState({\n                value: '',\n            });\n        }\n        this.props.onChange('', e, 'clear');\n        this.focus();\n    }\n\n    render() {\n        const {\n            size,\n            htmlType,\n            htmlSize,\n            autoComplete,\n            autoFocus,\n            disabled,\n            style,\n            innerBefore,\n            innerAfter,\n            innerBeforeClassName,\n            innerAfterClassName,\n            className,\n            hasBorder,\n            prefix,\n            isPreview,\n            renderPreview,\n            addonBefore,\n            addonAfter,\n            addonTextBefore,\n            addonTextAfter,\n            inputRender,\n            rtl,\n        } = this.props;\n\n        const hasAddon =\n            addonBefore || addonAfter || addonTextBefore || addonTextAfter;\n        const cls = classNames(this.getClass(), {\n            [`${prefix}${size}`]: true,\n            [`${prefix}hidden`]: this.props.htmlType === 'hidden',\n            [`${prefix}noborder`]: !hasBorder || this.props.htmlType === 'file',\n            [`${prefix}input-group-auto-width`]: hasAddon,\n            [className]: !!className && !hasAddon,\n        });\n\n        const innerCls = `${prefix}input-inner`;\n        const innerBeforeCls = classNames({\n            [innerCls]: true,\n            [`${prefix}before`]: true,\n            [innerBeforeClassName]: innerBeforeClassName,\n        });\n        const innerAfterCls = classNames({\n            [innerCls]: true,\n            [`${prefix}after`]: true,\n            [innerAfterClassName]: innerAfterClassName,\n        });\n        const previewCls = classNames({\n            [`${prefix}form-preview`]: true,\n            [className]: !!className,\n        });\n\n        const props = this.getProps();\n        // custom data attributes are assigned to the top parent node\n        // data-类自定义数据属性分配到顶层node节点\n        const dataProps = obj.pickAttrsWith(this.props, 'data-');\n        // Custom props are transparently transmitted to the core input node by default\n        // 自定义属性默认透传到核心node节点：input\n        const others = obj.pickOthers(\n            Object.assign({}, dataProps, Input.propTypes),\n            this.props\n        );\n\n        if (isPreview) {\n            const { value } = props;\n            const { label } = this.props;\n            if (typeof renderPreview === 'function') {\n                return (\n                    <div {...others} className={previewCls}>\n                        {renderPreview(value, this.props)}\n                    </div>\n                );\n            }\n            return (\n                <div {...others} className={previewCls}>\n                    {addonBefore || addonTextBefore}\n                    {label}\n                    {innerBefore}\n                    {value}\n                    {innerAfter}\n                    {addonAfter || addonTextAfter}\n                </div>\n            );\n        }\n\n        const inputEl = (\n            <input\n                {...others}\n                {...props}\n                height=\"100%\"\n                type={htmlType}\n                size={htmlSize}\n                autoFocus={autoFocus}\n                autoComplete={autoComplete}\n                onKeyDown={this.handleKeyDown}\n                ref={this.saveRef}\n            />\n        );\n\n        const inputWrap = (\n            <span\n                {...dataProps}\n                dir={rtl ? 'rtl' : undefined}\n                className={cls}\n                style={hasAddon ? undefined : style}\n            >\n                {this.renderLabel()}\n                {this.renderInner(innerBefore, innerBeforeCls)}\n                {inputRender(inputEl)}\n                {this.renderInner(innerAfter, innerAfterCls)}\n                {this.renderControl()}\n            </span>\n        );\n\n        const groupCls = classNames({\n            [`${prefix}input-group-text`]: true,\n            [`${prefix}${size}`]: !!size,\n            [`${prefix}disabled`]: disabled,\n        });\n\n        const addonBeforeCls = classNames({\n            [groupCls]: addonTextBefore,\n        });\n        const addonAfterCls = classNames({\n            [groupCls]: addonTextAfter,\n        });\n\n        if (hasAddon) {\n            return (\n                <Group\n                    {...dataProps}\n                    className={className}\n                    style={style}\n                    addonBefore={addonBefore || addonTextBefore}\n                    addonBeforeClassName={addonBeforeCls}\n                    addonAfter={addonAfter || addonTextAfter}\n                    addonAfterClassName={addonAfterCls}\n                >\n                    {inputWrap}\n                </Group>\n            );\n        }\n\n        return inputWrap;\n    }\n}"
    },
    "2": {
        "bug_file": "types/input/index.d.ts",
        "compressed": "NO",
        "line_numbers": 340,
        "compressed_line_numbers": 340,
        "compressed_bug_file_content": "/// <reference types=\"react\" />\n\nimport * as React from 'react';\nimport CommonProps from '../util';\n\ninterface HTMLAttributesWeak extends React.InputHTMLAttributes<HTMLElement> {\n    defaultValue?: any;\n    onChange?: any;\n    onKeyDown?: any;\n    size?: any;\n}\n\nexport interface TextAreaProps extends HTMLAttributesWeak, CommonProps {\n    /**\n     * 当前值\n     */\n    value?: string | number;\n\n    /**\n     * 初始化值\n     */\n    defaultValue?: string | number;\n\n    /**\n     * 发生改变的时候触发的回调\n     */\n    onChange?: (value: string, e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n\n    /**\n     * 键盘按下的时候触发的回调\n     */\n    onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>, opts: {}) => void;\n\n    /**\n     * 禁用状态\n     */\n    disabled?: boolean;\n\n    /**\n     * 最大长度\n     */\n    maxLength?: number;\n\n    /**\n     * 是否展现最大长度样式\n     */\n    hasLimitHint?: boolean;\n\n    /**\n     * 当设置了maxLength时，是否截断超出字符串\n     */\n    cutString?: boolean;\n\n    /**\n     * 只读\n     */\n    readOnly?: boolean;\n\n    /**\n     * onChange返回会自动去除头尾空字符\n     */\n    trim?: boolean;\n\n    /**\n     * 输入提示\n     */\n    placeholder?: string;\n\n    /**\n     * 获取焦点时候触发的回调\n     */\n    onFocus?: () => void;\n\n    /**\n     * 失去焦点时候触发的回调\n     */\n    onBlur?: () => void;\n\n    /**\n     * 自定义字符串计算长度方式\n     */\n    getValueLength?: (value: string) => number;\n\n    /**\n     * 自定义class\n     */\n    className?: string;\n\n    /**\n     * 自定义内联样式\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * 原生type\n     */\n    htmlType?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n\n    /**\n     * 状态\n     */\n    state?: 'error' | 'warning';\n\n    /**\n     * 是否有边框\n     */\n    hasBorder?: boolean;\n\n    /**\n     * 自动高度 true / {minRows: 2, maxRows: 4}\n     */\n    autoHeight?: boolean | {};\n\n    /**\n     * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)\n     */\n    rows?: number;\n}\n\nexport class TextArea extends React.Component<TextAreaProps, any> {}\n\nexport interface GroupProps extends React.HTMLAttributes<HTMLElement>, CommonProps {\n    /**\n     * 样式前缀\n     */\n    prefix?: string;\n\n    /**\n     * 输入框前附加内容\n     */\n    addonBefore?: React.ReactNode;\n\n    /**\n     * 输入框前附加内容css\n     */\n    addonBeforeClassName?: string;\n\n    /**\n     * 输入框后附加内容\n     */\n    addonAfter?: React.ReactNode;\n\n    /**\n     * 输入框后额外css\n     */\n    addonAfterClassName?: string;\n\n    /**\n     * rtl\n     */\n    rtl?: boolean;\n}\n\nexport class Group extends React.Component<GroupProps, any> {}\n\nexport interface InputProps extends HTMLAttributesWeak, CommonProps {\n    /**\n     * 当前值\n     */\n    value?: string | number;\n\n    /**\n     * 初始化值\n     */\n    defaultValue?: string | number;\n\n    /**\n     * 发生改变的时候触发的回调\n     */\n    onChange?: (value: string, e: React.ChangeEvent<HTMLInputElement>) => void;\n\n    /**\n     * 键盘按下的时候触发的回调\n     */\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>, opts: {}) => void;\n\n    /**\n     * 禁用状态\n     */\n    disabled?: boolean;\n\n    /**\n     * 最大长度\n     */\n    maxLength?: number;\n\n    /**\n     * 是否展现最大长度样式\n     */\n    hasLimitHint?: boolean;\n\n    /**\n     * 当设置了maxLength时，是否截断超出字符串\n     */\n    cutString?: boolean;\n\n    /**\n     * 只读\n     */\n    readOnly?: boolean;\n\n    /**\n     * onChange返回会自动去除头尾空字符\n     */\n    trim?: boolean;\n\n    /**\n     * 输入提示\n     */\n    placeholder?: string;\n\n    /**\n     * 获取焦点时候触发的回调\n     */\n    onFocus?: () => void;\n\n    /**\n     * 失去焦点时候触发的回调\n     */\n    onBlur?: () => void;\n\n    /**\n     * 自定义字符串计算长度方式\n     */\n    getValueLength?: (value: string) => number;\n\n    /**\n     * 自定义class\n     */\n    className?: string;\n\n    /**\n     * 自定义内联样式\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * 原生type\n     */\n    htmlType?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n\n    /**\n     * 状态\n     */\n    state?: 'error' | 'loading' | 'success' | 'warning';\n\n    /**\n     * label\n     */\n    label?: React.ReactNode;\n\n    /**\n     * 是否出现clear按钮\n     */\n    hasClear?: boolean;\n\n    /**\n     * 是否有边框\n     */\n    hasBorder?: boolean;\n\n    /**\n     * 尺寸\n     */\n    size?: 'small' | 'medium' | 'large';\n\n    /**\n     * 按下回车的回调\n     */\n    onPressEnter?: () => void;\n\n    /**\n     * 水印 (Icon的type类型，和hasClear占用一个地方)\n     */\n    hint?: string;\n\n    /**\n     * 文字前附加内容\n     */\n    innerBefore?: React.ReactNode;\n\n    /**\n     * 文字后附加内容\n     */\n    innerAfter?: React.ReactNode;\n\n    /**\n     * 输入框前附加内容\n     */\n    addonBefore?: React.ReactNode;\n\n    /**\n     * 输入框后附加内容\n     */\n    addonAfter?: React.ReactNode;\n\n    /**\n     * 输入框前附加文字\n     */\n    addonTextBefore?: React.ReactNode;\n\n    /**\n     * 输入框后附加文字\n     */\n    addonTextAfter?: React.ReactNode;\n\n    /**\n     * (原生input支持)\n     */\n    autoComplete?: string;\n\n    /**\n     * 自动聚焦(原生input支持)\n     */\n    autoFocus?: boolean;\n}\nexport interface PasswordProps extends InputProps {\n    /**\n     * 是否展示切换按钮\n     */\n    showToggle?: boolean;\n}\nexport class Password extends React.Component<PasswordProps, any> {}\n\nexport default class Input extends React.Component<InputProps, any> {\n    static TextArea: typeof TextArea;\n    static Group: typeof Group;\n    static Password: typeof Password;\n}\n"
    },
    "3": {
        "bug_file": "src/input/textarea.jsx",
        "compressed": "NO",
        "line_numbers": 308,
        "compressed_line_numbers": 308,
        "compressed_bug_file_content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { obj, env } from '../util';\nimport Base from './base';\n\nfunction onNextFrame(cb) {\n    if (window.requestAnimationFrame) {\n        return window.requestAnimationFrame(cb);\n    }\n    return window.setTimeout(cb, 1);\n}\n\nfunction clearNextFrameAction(nextFrameId) {\n    if (window.cancelAnimationFrame) {\n        window.cancelAnimationFrame(nextFrameId);\n    } else {\n        window.clearTimeout(nextFrameId);\n    }\n}\n\n// safari in mac\nconst isMacSafari =\n    typeof navigator !== 'undefined' && navigator && navigator.userAgent\n        ? navigator.userAgent.match(/^((?!chrome|android|windows).)*safari/i)\n        : false;\n\nconst hiddenStyle = {\n    visibility: 'hidden',\n    position: 'absolute',\n    zIndex: '-1000',\n    top: '-1000px',\n    overflowY: 'hidden',\n    left: 0,\n    right: 0,\n};\n\n/**\n * Input.TextArea\n * @order 2\n */\nexport default class TextArea extends Base {\n    static propTypes = {\n        ...Base.propTypes,\n        /**\n         * 是否有边框\n         */\n        hasBorder: PropTypes.bool,\n        /**\n         * 状态\n         * @enumdesc 错误\n         */\n        state: PropTypes.oneOf(['error', 'warning']),\n        /**\n         * 自动高度 true / {minRows: 2, maxRows: 4}\n         */\n        autoHeight: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n        /**\n         * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)\n         */\n        rows: PropTypes.number,\n        /**\n         * 是否为预览态\n         */\n        isPreview: PropTypes.bool,\n        /**\n         * 预览态模式下渲染的内容\n         * @param {number} value 评分值\n         */\n        renderPreview: PropTypes.func,\n    };\n\n    static defaultProps = {\n        ...Base.defaultProps,\n        hasBorder: true,\n        isPreview: false,\n        rows: 4,\n        autoHeight: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        let value;\n        if ('value' in props) {\n            value = props.value;\n        } else {\n            value = props.defaultValue;\n        }\n\n        this.state = {\n            value: typeof value === 'undefined' ? '' : value,\n        };\n    }\n\n    componentDidMount() {\n        const autoHeight = this.props.autoHeight;\n        if (autoHeight) {\n            if (typeof autoHeight === 'object') {\n                /* eslint-disable react/no-did-mount-set-state */\n                this.setState(\n                    this._getMinMaxHeight(autoHeight, this.state.value)\n                );\n            } else {\n                this.setState({\n                    height: this._getHeight(this.state.value),\n                    overflowY: 'hidden',\n                });\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.autoHeight && this.props.value !== prevProps.value) {\n            this._resizeTextArea(this.props.value);\n        }\n    }\n\n    _getMinMaxHeight({ minRows, maxRows }, value) {\n        const node = ReactDOM.findDOMNode(this.helpRef);\n        node.setAttribute('rows', minRows);\n        const minHeight = node.clientHeight;\n\n        node.setAttribute('rows', maxRows);\n        const maxHeight = node.clientHeight;\n\n        node.setAttribute('rows', '1');\n        const height = this._getHeight(value);\n\n        return {\n            minHeight,\n            maxHeight,\n            height,\n            overflowY: height <= maxHeight ? 'hidden' : undefined,\n        };\n    }\n\n    _getHeight(value) {\n        const node = ReactDOM.findDOMNode(this.helpRef);\n        node.value = value;\n\n        return node.scrollHeight;\n    }\n\n    _resizeTextArea = value => {\n        if (this.nextFrameActionId) {\n            clearNextFrameAction(this.nextFrameActionId);\n        }\n        this.nextFrameActionId = onNextFrame(() => {\n            const height = this._getHeight(value);\n            const maxHeight = this.state.maxHeight\n                ? this.state.maxHeight\n                : Infinity;\n\n            this.setState({\n                height: this._getHeight(value),\n                overflowY: height <= maxHeight ? 'hidden' : undefined,\n            });\n        });\n    };\n\n    ieHack(value) {\n        // Fix: textarea dit not support maxLength in ie9\n        /* istanbul ignore if */\n        if (env.ieVersion === 9 && this.props.maxLength) {\n            const maxLength = parseInt(this.props.maxLength);\n            const len = this.getValueLength(value, true);\n            if (len > maxLength && this.props.cutString) {\n                value = value.replace(/\\n/g, '\\n\\n');\n                value = value.substr(0, maxLength);\n                value = value.replace(/\\n\\n/g, '\\n');\n            }\n        }\n\n        this.props.autoHeight && this._resizeTextArea(value);\n\n        return value;\n    }\n\n    /**\n     * value.length !== maxLength  in ie/safari(mac) while value has `Enter`\n     * about maxLength compute: `Enter` was considered to be one char(\\n) in chrome , but two chars(\\r\\n) in ie/safari(mac).\n     * so while value has `Enter`, we should let display length + 1\n     */\n    getValueLength(value) {\n        const { maxLength, cutString } = this.props;\n\n        const nv = `${value}`;\n        let strLen = this.props.getValueLength(nv);\n        if (typeof strLen !== 'number') {\n            strLen = nv.length;\n        }\n\n        /* istanbul ignore if */\n        if (env.ieVersion || isMacSafari) {\n            strLen = strLen + nv.split('\\n').length - 1;\n            if (strLen > maxLength && cutString) {\n                strLen = maxLength;\n            }\n        }\n\n        return strLen;\n    }\n\n    saveTextAreaRef(textArea) {\n        this.inputRef = textArea;\n    }\n\n    saveHelpRef(ref) {\n        this.helpRef = ref;\n    }\n\n    render() {\n        const {\n            rows,\n            style,\n            className,\n            autoHeight,\n            isPreview,\n            renderPreview,\n            prefix,\n            rtl,\n            hasBorder,\n        } = this.props;\n\n        const cls = classNames(this.getClass(), {\n            [`${prefix}input-textarea`]: true,\n            [`${prefix}noborder`]: !hasBorder,\n            [className]: !!className,\n        });\n\n        const props = this.getProps();\n        // custom data attributes are assigned to the top parent node\n        // data-类自定义数据属性分配到顶层node节点\n        const dataProps = obj.pickAttrsWith(this.props, 'data-');\n        // Custom props are transparently transmitted to the core input node by default\n        // 自定义属性默认透传到核心node节点：input\n        const others = obj.pickOthers(\n            Object.assign({}, dataProps, TextArea.propTypes),\n            this.props\n        );\n\n        const textareStyle = {\n            ...props.style,\n            height: this.state.height,\n            minHeight: this.state.minHeight,\n            maxHeight: this.state.maxHeight,\n            overflowY: this.state.overflowY,\n        };\n\n        const previewCls = classNames({\n            [`${prefix}input-textarea`]: true,\n            [`${prefix}form-preview`]: true,\n            [className]: !!className,\n        });\n\n        const wrapStyle = autoHeight\n            ? { ...style, position: 'relative' }\n            : style;\n\n        if (isPreview) {\n            const { value } = props;\n            if ('renderPreview' in this.props) {\n                return (\n                    <div {...others} className={previewCls}>\n                        {renderPreview(value, this.props)}\n                    </div>\n                );\n            }\n            return (\n                <div {...others} className={previewCls}>\n                    {value.split('\\n').map((data, i) => (\n                        <p key={`p-${i}`}>{data}</p>\n                    ))}\n                </div>\n            );\n        }\n\n        return (\n            <span\n                className={cls}\n                style={wrapStyle}\n                dir={rtl ? 'rtl' : undefined}\n                {...dataProps}\n            >\n                <textarea\n                    {...others}\n                    {...props}\n                    data-real\n                    rows={rows}\n                    style={textareStyle}\n                    ref={this.saveRef.bind(this)}\n                    onKeyDown={this.onKeyDown.bind(this)}\n                />\n                {autoHeight ? (\n                    <textarea\n                        data-fake\n                        ref={this.saveHelpRef.bind(this)}\n                        style={{ ...props.style, ...hiddenStyle }}\n                        rows=\"1\"\n                    />\n                ) : null}\n                {this.renderControl()}\n            </span>\n        );\n    }\n}"
    }
}