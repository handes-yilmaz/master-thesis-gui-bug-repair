{
    "1": {
        "bug_file": "src/form/form.jsx",
        "compressed": "NO",
        "line_numbers": 289,
        "compressed_line_numbers": 289,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { obj, func } from '../util';\nimport Field from '../field';\nimport RGrid from '../responsive-grid';\n\nfunction pickerDefined(obj) {\n    const newObj = {};\n    Object.keys(obj).forEach(i => {\n        if (typeof obj[i] !== 'undefined') {\n            newObj[i] = obj[i];\n        }\n    });\n    return newObj;\n}\n\nfunction preventDefault(e) {\n    e.preventDefault();\n}\nconst getNewChildren = (children, props) => {\n    const { size, device, labelAlign, labelTextAlign, labelCol, wrapperCol, responsive, colon } = props;\n\n    return React.Children.map(children, child => {\n        if (obj.isReactFragment(child)) {\n            return getNewChildren(child.props.children, props);\n        }\n\n        if (child && ['function', 'object'].indexOf(typeof child.type) > -1 && child.type._typeMark === 'form_item') {\n            const childrenProps = {\n                labelCol: child.props.labelCol ? child.props.labelCol : labelCol,\n                wrapperCol: child.props.wrapperCol ? child.props.wrapperCol : wrapperCol,\n                labelAlign: child.props.labelAlign ? child.props.labelAlign : device === 'phone' ? 'top' : labelAlign,\n                labelTextAlign: child.props.labelTextAlign ? child.props.labelTextAlign : labelTextAlign,\n                colon: 'colon' in child.props ? child.props.colon : colon,\n                size: child.props.size ? child.props.size : size,\n                responsive: responsive,\n            };\n            return React.cloneElement(child, pickerDefined(childrenProps));\n        }\n        return child;\n    });\n};\n\n/** Form */\nexport default class Form extends React.Component {\n    static propTypes = {\n        /**\n         * 样式前缀\n         */\n        prefix: PropTypes.string,\n        /**\n         * 内联表单\n         */\n        inline: PropTypes.bool,\n        /**\n         * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。\n         * @enumdesc 大, 中, 小\n         */\n        size: PropTypes.oneOf(['large', 'medium', 'small']),\n        /**\n         * 单个 Item 中表单类组件宽度是否是100%\n         */\n        fullWidth: PropTypes.bool,\n        /**\n         * 标签的位置, 如果不设置 labelCol 和 wrapperCol 那么默认是标签在上\n         * @enumdesc 上, 左, 内\n         */\n        labelAlign: PropTypes.oneOf(['top', 'left', 'inset']),\n        /**\n         * 标签的左右对齐方式\n         * @enumdesc 左, 右\n         */\n        labelTextAlign: PropTypes.oneOf(['left', 'right']),\n        /**\n         * field 实例, 传 false 会禁用 field\n         */\n        field: PropTypes.any,\n        /**\n         * 保存 Form 自动生成的 field 对象\n         */\n        saveField: PropTypes.func,\n        /**\n         * 控制第一级 Item 的 labelCol\n         */\n        labelCol: PropTypes.object,\n        /**\n         * 控制第一级 Item 的 wrapperCol\n         */\n        wrapperCol: PropTypes.object,\n        /**\n         * form内有 `htmlType=\"submit\"` 的元素的时候会触发\n         */\n        onSubmit: PropTypes.func,\n        /**\n         * 子元素\n         */\n        children: PropTypes.any,\n        /**\n         * 扩展class\n         */\n        className: PropTypes.string,\n        /**\n         * 自定义内联样式\n         */\n        style: PropTypes.object,\n        /**\n         * 表单数值\n         */\n        value: PropTypes.object,\n        /**\n         * 表单变化回调\n         * @param {Object} values 表单数据\n         * @param {Object} item 详细\n         * @param {String} item.name 变化的组件名\n         * @param {String} item.value 变化的数据\n         * @param {Object} item.field field 实例\n         */\n        onChange: PropTypes.func,\n        /**\n         * 设置标签类型\n         */\n        component: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        fieldOptions: PropTypes.object,\n        rtl: PropTypes.bool,\n        /**\n         * 预设屏幕宽度\n         */\n        device: PropTypes.oneOf(['phone', 'tablet', 'desktop']),\n        /**\n         * 是否开启内置的响应式布局 （使用ResponsiveGrid）\n         * @version 1.19\n         */\n        responsive: PropTypes.bool,\n        /**\n         * 是否开启预览态\n         * @version 1.19\n         */\n        isPreview: PropTypes.bool,\n        /**\n         * 是否使用 label 替换校验信息的 name 字段\n         * @version 1.20\n         */\n        useLabelForErrorMessage: PropTypes.bool,\n        /**\n         * 表示是否显示 label 后面的冒号\n         * @version 1.22\n         */\n        colon: PropTypes.bool,\n        /**\n         * 是否禁用表单\n         */\n        disabled: PropTypes.bool,\n        // 在 responsive模式下，透传给 ResponsiveGrid的， 表示 每个 cell 之间的间距， [bottom&top, right&left]\n        gap: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        onSubmit: preventDefault,\n        size: 'medium',\n        labelAlign: 'left',\n        onChange: func.noop,\n        component: 'form',\n        saveField: func.noop,\n        device: 'desktop',\n        colon: false,\n        disabled: false,\n    };\n\n    static childContextTypes = {\n        _formField: PropTypes.object,\n        _formSize: PropTypes.string,\n        _formDisabled: PropTypes.bool,\n        _formPreview: PropTypes.bool,\n        _formFullWidth: PropTypes.bool,\n        _formLabelForErrorMessage: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this._formField = null;\n        if (props.field !== false) {\n            const options = {\n                ...props.fieldOptions,\n                onChange: this.onChange,\n            };\n\n            if (props.field) {\n                this._formField = props.field;\n                const onChange = this._formField.options.onChange;\n                options.onChange = func.makeChain(onChange, this.onChange);\n                this._formField.setOptions && this._formField.setOptions(options);\n            } else {\n                if ('value' in props) {\n                    options.values = props.value;\n                }\n\n                this._formField = new Field(this, options);\n            }\n\n            if (props.locale && props.locale.Validate) {\n                this._formField.setOptions({ messages: props.locale.Validate });\n            }\n\n            props.saveField(this._formField);\n        }\n    }\n\n    getChildContext() {\n        return {\n            _formField: this.props.field ? this.props.field : this._formField,\n            _formSize: this.props.size,\n            _formDisabled: this.props.disabled,\n            _formPreview: this.props.isPreview,\n            _formFullWidth: this.props.fullWidth,\n            _formLabelForErrorMessage: this.props.useLabelForErrorMessage,\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const props = this.props;\n\n        if (this._formField) {\n            if ('value' in props && props.value !== prevProps.value) {\n                this._formField.setValues(props.value);\n            }\n            if ('error' in props && props.error !== prevProps.error) {\n                this._formField.setValues(props.error);\n            }\n        }\n    }\n\n    onChange = (name, value) => {\n        this.props.onChange(this._formField.getValues(), {\n            name,\n            value,\n            field: this._formField,\n        });\n    };\n\n    render() {\n        const {\n            className,\n            inline,\n            size,\n            device,\n            labelAlign,\n            labelTextAlign,\n            onSubmit,\n            children,\n            labelCol,\n            wrapperCol,\n            style,\n            prefix,\n            rtl,\n            isPreview,\n            component: Tag,\n            responsive,\n            gap,\n            colon,\n        } = this.props;\n\n        const formClassName = classNames({\n            [`${prefix}form`]: true,\n            [`${prefix}inline`]: inline, // 内联\n            [`${prefix}${size}`]: size,\n            [`${prefix}form-responsive-grid`]: responsive,\n            [`${prefix}form-preview`]: isPreview,\n            [className]: !!className,\n        });\n\n        const newChildren = getNewChildren(children, this.props);\n\n        return (\n            <Tag\n                role=\"grid\"\n                {...obj.pickOthers(Form.propTypes, this.props)}\n                className={formClassName}\n                style={style}\n                dir={rtl ? 'rtl' : undefined}\n                onSubmit={onSubmit}\n            >\n                {responsive ? <RGrid gap={gap}>{newChildren}</RGrid> : newChildren}\n            </Tag>\n        );\n    }\n}"
    },
    "2": {
        "bug_file": "src/form/index.jsx",
        "compressed": "NO",
        "line_numbers": 36,
        "compressed_line_numbers": 36,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport Form from './form';\nimport Item from './item';\nimport Submit from './submit';\nimport Reset from './reset';\nimport Error from './error';\n\nForm.Item = ConfigProvider.config(Item, {\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('validateStatus' in props) {\n            deprecated('validateStatus', 'validateState', 'Form.Item');\n\n            const { validateStatus, ...others } = props;\n            props = { validateState: validateStatus, ...others };\n        }\n\n        return props;\n    },\n});\nForm.Submit = Submit;\nForm.Reset = Reset;\nForm.Error = Error;\n\nexport default ConfigProvider.config(Form, {\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('direction' in props) {\n            deprecated('direction', 'inline', 'Form');\n            const { direction, ...others } = props;\n            if (direction === 'hoz') {\n                props = { inline: true, ...others };\n            }\n        }\n\n        return props;\n    },\n});"
    },
    "3": {
        "bug_file": "src/form/item.jsx",
        "compressed": "YES",
        "line_numbers": 514,
        "compressed_line_numbers": 235,
        "compressed_bug_file_content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Grid from '../grid';\nimport RGrid from '../responsive-grid';\nimport { obj } from '../util';\nimport Error from './error';\nimport { getFieldInitCfg } from './enhance';\n\n\n/** Form.Item\n *  @description 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid\n *  @order 1\n */\nexport default class Item extends React.Component {\n\n        /**\n         * 样式前缀\n         */\n\n\n        /**\n         * label 标签的文本\n         */\n\n        /**\n         * label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效\n         */\n\n        /**\n         * 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol\n         */\n\n        /**\n         * 自定义提示信息，如不设置，则会根据校验规则自动生成.\n         */\n\n        /**\n         * 字段名，默认赋值给第一个子元素\n         */\n\n        /**\n         * 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面\n         */\n\n        /**\n         * 校验状态，如不设置，则会根据校验规则自动生成\n         * @enumdesc 失败, 成功, 校验中, 警告\n         */\n\n        /**\n         * 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持\n         */\n\n        /**\n         * 自定义内联样式\n         */\n\n\n        /**\n         * node 或者 function(values)\n         */\n\n        /**\n         * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。\n         */\n\n        /**\n         * 单个 Item 中表单类组件宽度是否是100%\n         */\n\n        /**\n         * 标签的位置, 如果不设置 labelCol 和 wrapperCol 那么默认是标签在上\n         * @enumdesc 上, 左, 内\n         */\n\n        /**\n         * 标签的左右对齐方式\n         * @enumdesc 左, 右\n         */\n\n        /**\n         * 扩展class\n         */\n\n        /**\n         * [表单校验] 不能为空\n         */\n\n        /**\n         * required 的星号是否显示\n         */\n\n        /**\n         * required 自定义错误信息\n         */\n\n        /**\n         * required 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...\n         */\n\n        /**\n         * [表单校验] 最小值\n         */\n\n        /**\n         * [表单校验] 最大值\n         */\n\n        /**\n         * min/max 自定义错误信息\n         */\n\n        /**\n         * min/max 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...\n         */\n\n        /**\n         * [表单校验] 字符串最小长度 / 数组最小个数\n         */\n\n        /**\n         * [表单校验] 字符串最大长度 / 数组最大个数\n         */\n\n        /**\n         * minLength/maxLength 自定义错误信息\n         */\n\n        /**\n         * minLength/maxLength 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...\n         */\n\n        /**\n         * [表单校验] 字符串精确长度 / 数组精确个数\n         */\n\n        /**\n         * length 自定义错误信息\n         */\n\n        /**\n         * length 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...\n         */\n\n        /**\n         * 正则校验\n         */\n\n        /**\n         * pattern 自定义错误信息\n         */\n\n        /**\n         * pattern 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...\n         */\n\n        /**\n         * [表单校验] 四种常用的 pattern\n         */\n\n        /**\n         * format 自定义错误信息\n         */\n\n        /**\n         * format 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...\n         */\n\n        /**\n         * [表单校验] 自定义校验函数\n         */\n\n        /**\n         * validator 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...\n         */\n\n        /**\n         * 是否修改数据时自动触发校验\n         */\n\n        /**\n         * 预设屏幕宽度\n         */\n\n\n        /**\n         * 在响应式布局模式下，表单项占多少列\n         */\n\n        /**\n         * 在响应式布局下，且label在左边时，label的宽度是多少\n         */\n\n        /**\n         * 是否开启预览态\n         */\n\n        /**\n         * 预览态模式下渲染的内容\n         * @param {any} value 根据包裹的组件的 value 类型而决定\n         */\n\n        /**\n         * 是否使用 label 替换校验信息的 name 字段\n         */\n\n        /**\n         * 表示是否显示 label 后面的冒号\n         */\n\n        /**\n         * 是否禁用表单\n         */\n\n        /**\n         * 子元素的 value 名称\n         */\n\n\n    /**\n     * 从子元素里面提取表单组件. TODO: 2.x 中改为只获取一个元素\n     */\n\n\n            // get first name\n\n\n                // 自己直接使用 field.init 会在 props 上面留下 data-meta\n                // name 挪到 FormItem 上面，默认把第一个元素当做 Form 组件\n\n\n        // 垂直模式并且左对齐才用到\n\n\n"
    },
    "4": {
        "bug_file": "src/form/enhance.jsx",
        "compressed": "NO",
        "line_numbers": 116,
        "compressed_line_numbers": 116,
        "compressed_bug_file_content": "function getCfgFromProps(props, type) {\n    if (type in props) {\n        return props[type];\n    }\n\n    return undefined;\n}\n\nfunction getRule(ruleName, props) {\n    return {\n        [ruleName]: props[ruleName],\n        message: getCfgFromProps(props, `${ruleName}Message`),\n        trigger: getCfgFromProps(props, `${ruleName}Trigger`),\n    };\n}\n\nfunction getValueName(props, displayName) {\n    if (props.valueName) {\n        return props.valueName;\n    }\n\n    if (typeof displayName === 'string') {\n        // Next Components are all wrappered by configProvider\n        const componentName = displayName.replace(/Config\\(/g, '').replace(/\\)/g, '');\n        if (['Switch', 'Checkbox', 'Radio'].indexOf(componentName) !== -1) {\n            return 'checked';\n        }\n    }\n\n    return 'value';\n}\n\nexport function getRules(props, labelForErrorMessage) {\n    const result = [];\n\n    // required\n    if (props.required) {\n        result.push(getRule('required', props));\n    }\n\n    const maxLength = Number(props.maxLength);\n    const minLength = Number(props.minLength);\n    if (minLength || maxLength) {\n        result.push({\n            minLength,\n            maxLength,\n            // minLengthMessage maxLengthMessage had been deprected, please use minmaxLength. TODO: removed in 2.0\n            message:\n                getCfgFromProps(props, 'minmaxLengthMessage') ||\n                getCfgFromProps(props, 'minLengthMessage') ||\n                getCfgFromProps(props, 'maxLengthMessage'),\n            trigger:\n                getCfgFromProps(props, 'minmaxLengthTrigger') ||\n                getCfgFromProps(props, 'minLengthTrigger') ||\n                getCfgFromProps(props, 'maxLengthTrigger'),\n        });\n    }\n\n    // length\n    if (props.length) {\n        result.push(getRule('length', props));\n    }\n\n    // pattern\n    if (props.pattern) {\n        result.push(getRule('pattern', props));\n    }\n\n    // format\n    if (['number', 'tel', 'url', 'email'].indexOf(props.format) > -1) {\n        result.push(getRule('format', props));\n    }\n\n    const max = Number(props.max);\n    const min = Number(props.min);\n    // max min\n    if (max || min) {\n        result.push({\n            min,\n            max,\n            // minMessage maxMessage had been deprected, please use minmaxLength. TODO: removed in 2.0\n            message:\n                getCfgFromProps(props, 'minmaxMessage') ||\n                getCfgFromProps(props, 'minMessage') ||\n                getCfgFromProps(props, 'maxMessage'),\n            trigger:\n                getCfgFromProps(props, 'minmaxTrigger') ||\n                getCfgFromProps(props, 'minTrigger') ||\n                getCfgFromProps(props, 'maxTrigger'),\n        });\n    }\n\n    if (props.validator && typeof props.validator === 'function') {\n        result.push({\n            validator: props.validator,\n            trigger: getCfgFromProps(props, 'validatorTrigger'),\n        });\n    }\n\n    if (labelForErrorMessage) {\n        result.forEach(r => {\n            r.aliasName = labelForErrorMessage;\n        });\n    }\n\n    return result;\n}\n\nexport function getFieldInitCfg(props, displayName, labelForErrorMessage) {\n    return {\n        valueName: getValueName(props, displayName),\n        trigger: props.trigger ? props.trigger : 'onChange',\n        autoValidate: props.autoValidate,\n        rules: getRules(props, labelForErrorMessage),\n    };\n}"
    }
}