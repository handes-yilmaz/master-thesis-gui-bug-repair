{
    "1": {
        "bug_file": "src/tree-select/index.jsx",
        "compressed": "NO",
        "line_numbers": 20,
        "compressed_line_numbers": 20,
        "compressed_bug_file_content": "import ConfigProvider from '../config-provider';\nimport TreeSelect from './tree-select';\n\nexport default ConfigProvider.config(TreeSelect, {\n    transform: /* istanbul ignore next */ (props, deprecated) => {\n        if ('shape' in props) {\n            deprecated('shape', 'hasBorder', 'TreeSelect');\n            const { shape, ...others } = props;\n            props = { hasBorder: shape !== 'arrow-only', ...others };\n        }\n\n        if ('container' in props) {\n            deprecated('container', 'popupContainer', 'TreeSelect');\n            const { container, ...others } = props;\n            props = { popupContainer: container, ...others };\n        }\n\n        return props;\n    },\n});"
    },
    "2": {
        "bug_file": "src/tree-select/tree-select.jsx",
        "compressed": "YES",
        "line_numbers": 850,
        "compressed_line_numbers": 186,
        "compressed_bug_file_content": "import React, {\n\n\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Select from '../select';\nimport Tree from '../tree';\nimport {\n\n\nimport { func, obj, KEYCODE } from '../util';\n\n\n/**\n * TreeSelect\n */\nexport default class TreeSelect extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 选择框大小\n         */\n\n        /**\n         * 选择框占位符\n         */\n\n        /**\n         * 是否禁用\n         */\n\n        /**\n         * 是否有下拉箭头\n         */\n\n        /**\n         * 是否有边框\n         */\n\n        /**\n         * 是否有清空按钮\n         */\n\n        /**\n         * 自定义内联 label\n         */\n\n        /**\n         * 是否只读，只读模式下可以展开弹层但不能选择\n         */\n\n        /**\n         * 下拉框是否与选择器对齐\n         */\n\n        /**\n         * 数据源，该属性优先级高于 children\n         */\n\n        /**\n         * （受控）当前值\n         */\n\n\n        /**\n         * （非受控）默认值\n         */\n\n\n        /**\n         * 选中值改变时触发的回调函数\n         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n         * @param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n         */\n\n        /**\n         * 是否显示搜索框\n         */\n\n        /**\n         * 在搜索框中输入时触发的回调函数\n         * @param {String} keyword 输入的关键字\n         */\n\n\n        /**\n         * 无数据时显示内容\n         */\n\n        /**\n         * 是否支持多选\n         */\n\n        /**\n         * 下拉框中的树是否支持勾选节点的复选框\n         */\n\n        /**\n         * 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）\n         */\n\n        /**\n         * 定义选中时回填的方式\n         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点\n         */\n\n        /**\n         * 下拉框中的树是否默认展开所有节点\n         */\n\n        /**\n         * 下拉框中的树默认展开节点key的数组\n         */\n\n        /**\n         * 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](https://fusion.design/component/tree)\n         * @param {ReactElement} node 被点击展开的节点\n         */\n\n        /**\n         * 透传到 Tree 的属性对象\n         */\n\n        /**\n         * 初始下拉框是否显示\n         */\n\n        /**\n         * 当前下拉框是否显示\n         */\n\n        /**\n         * 下拉框显示或关闭时触发事件的回调函数\n         * @param {Boolean} visible 是否显示\n         * @param {String} type 触发显示关闭的操作类型\n         */\n\n        /**\n         * 下拉框自定义样式对象\n         */\n\n        /**\n         * 下拉框样式自定义类名\n         */\n\n        /**\n         * 下拉框挂载的容器节点\n         */\n\n        /**\n         * 透传到 Popup 的属性对象\n         */\n\n        /**\n         * 是否跟随滚动\n         */\n\n        /**\n         * 是否为预览态\n         */\n\n        /**\n         * 预览态模式下渲染的内容\n         * @param {Array<data>} value 选择值 { label: , value:}\n         */\n\n\n        // 单选时点击清空按钮\n\n\n    /*eslint-disable max-statements*/\n\n\n            // eslint-disable-next-line\n\n\n                // eslint-disable-next-line\n\n\n    /*eslint-enable*/\n\n\n"
    },
    "3": {
        "bug_file": "src/tree/view/tree-node.jsx",
        "compressed": "YES",
        "line_numbers": 595,
        "compressed_line_numbers": 60,
        "compressed_bug_file_content": "import React, { Component, Children } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from '../../icon';\nimport Checkbox from '../../checkbox';\nimport Animate from '../../animate';\nimport { func, obj, KEYCODE } from '../../util';\nimport TreeNodeInput from './tree-node-input';\n\n\n/**\n * Tree.Node\n */\nexport default class TreeNode extends Component {\n\n\n        /**\n         * 树节点\n         */\n\n        /**\n         * 节点文本内容\n         */\n\n        /**\n         * 单独设置是否支持选中，覆盖 Tree 的 selectable\n         */\n\n        /**\n         * 单独设置是否出现复选框，覆盖 Tree 的 checkable\n         */\n\n        /**\n         * 单独设置是否支持编辑，覆盖 Tree 的 editable\n         */\n\n        /**\n         * 单独设置是否支持拖拽，覆盖 Tree 的 draggable\n         */\n\n        /**\n         * 是否禁止节点响应\n         */\n\n        /**\n         * 是否禁止勾选节点复选框\n         */\n\n        /**\n         * 是否是叶子节点，设置loadData时生效\n         */\n\n\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n\n\n        // remove aria keys\n\n\n"
    },
    "4": {
        "bug_file": "src/tree/view/util.js",
        "compressed": "NO",
        "line_numbers": 215,
        "compressed_line_numbers": 215,
        "compressed_bug_file_content": "/* eslint-disable valid-jsdoc */\nexport function normalizeToArray(keys) {\n    if (keys !== undefined && keys !== null) {\n        if (Array.isArray(keys)) {\n            return [...keys];\n        }\n\n        return [keys];\n    }\n\n    return [];\n}\n\n/**\n * 判断子节点是否是选中状态，如果 checkable={false} 则向下递归，\n * @param {Node} child\n * @param {Array} checkedKeys\n */\nexport function isNodeChecked(node, checkedKeys) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(c => isNodeChecked(c, checkedKeys))\n        );\n    }\n    return checkedKeys.indexOf(node.key) > -1;\n}\n\n/**\n * 遍历所有可用的子节点\n * @param {Node}\n * @param {Function} callback\n */\nexport function forEachEnableNode(node, callback = () => {}) {\n    if (node.disabled || node.checkboxDisabled) return;\n    // eslint-disable-next-line callback-return\n    callback(node);\n    if (node.children && node.children.length > 0) {\n        node.children.forEach(child => forEachEnableNode(child, callback));\n    }\n}\n/**\n * 判断节点是否禁用checked\n * @param {Node} node\n * @returns {Boolean}\n */\nexport function isNodeDisabledChecked(node) {\n    if (node.disabled || node.checkboxDisabled) return true;\n    /* istanbul ignore next */\n    if (node.checkable === false) {\n        return (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        );\n    }\n\n    return false;\n}\n\n/**\n * 递归获取一个 checkable = {true} 的父节点，当 checkable={false} 时继续往上查找\n * @param {Node} node\n * @param {Map} _p2n\n * @return {Node}\n */\nexport function getCheckableParentNode(node, _p2n) {\n    let parentPos = node.pos.split(['-']);\n    if (parentPos.length === 2) return node;\n    parentPos.splice(parentPos.length - 1, 1);\n    parentPos = parentPos.join('-');\n    const parentNode = _p2n[parentPos];\n    if (parentNode.disabled || parentNode.checkboxDisabled) return false;\n    /* istanbul ignore next */\n    if (parentNode.checkable === false) {\n        return getCheckableParentNode(parentNode, _p2n);\n    }\n\n    return parentNode;\n}\n/**\n * 过滤子节点\n * @param {Array} keys\n * @param {Object} _k2n\n */\nexport function filterChildKey(keys, _k2n, _p2n) {\n    const newKeys = [];\n    keys.forEach(key => {\n        const node = getCheckableParentNode(_k2n[key], _p2n);\n        if (\n            !node ||\n            node.checkable === false ||\n            node === _k2n[key] ||\n            keys.indexOf(node.key) === -1\n        ) {\n            newKeys.push(key);\n        }\n    });\n    return newKeys;\n}\n\nexport function filterParentKey(keys, _k2n) {\n    const newKeys = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        const node = _k2n[keys[i]];\n        if (\n            !node.children ||\n            node.children.length === 0 ||\n            node.children.every(isNodeDisabledChecked)\n        ) {\n            newKeys.push(keys[i]);\n        }\n    }\n\n    return newKeys;\n}\n\nexport function isDescendantOrSelf(currentPos, targetPos) {\n    if (!currentPos || !targetPos) {\n        return false;\n    }\n\n    const currentNums = currentPos.split('-');\n    const targetNums = targetPos.split('-');\n\n    return (\n        currentNums.length <= targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\nexport function isSiblingOrSelf(currentPos, targetPos) {\n    const currentNums = currentPos.split('-').slice(0, -1);\n    const targetNums = targetPos.split('-').slice(0, -1);\n\n    return (\n        currentNums.length === targetNums.length &&\n        currentNums.every((num, index) => {\n            return num === targetNums[index];\n        })\n    );\n}\n\n// eslint-disable-next-line max-statements\nexport function getAllCheckedKeys(checkedKeys, _k2n, _p2n) {\n    checkedKeys = normalizeToArray(checkedKeys);\n    const filteredKeys = checkedKeys.filter(key => !!_k2n[key]);\n    const flatKeys = [\n        ...filterChildKey(filteredKeys, _k2n, _p2n),\n        ...filteredKeys.filter(\n            key => _k2n[key].disabled || _k2n[key].checkboxDisabled\n        ),\n    ];\n    const removeKey = child => {\n        if (child.disabled || child.checkboxDisabled) return;\n        if (\n            child.checkable === false &&\n            child.children &&\n            child.children.length > 0\n        ) {\n            return child.children.forEach(removeKey);\n        }\n        flatKeys.splice(flatKeys.indexOf(child.key), 1);\n    };\n\n    const addParentKey = (i, parent) => flatKeys.splice(i, 0, parent.key);\n\n    const keys = [...flatKeys];\n    for (let i = 0; i < keys.length; i++) {\n        const pos = _k2n[keys[i]].pos;\n        const nums = pos.split('-');\n        if (nums.length === 2) {\n            break;\n        }\n        for (let j = nums.length - 2; j > 0; j--) {\n            const parentPos = nums.slice(0, j + 1).join('-');\n            const parent = _p2n[parentPos];\n            if (\n                parent.checkable === false ||\n                parent.disabled ||\n                parent.checkboxDisabled\n            )\n                continue;\n            const parentChecked = parent.children.every(child =>\n                isNodeChecked(child, flatKeys)\n            );\n            if (parentChecked) {\n                parent.children.forEach(removeKey);\n                addParentKey(i, parent);\n            } else {\n                break;\n            }\n        }\n    }\n\n    const newKeys = [];\n    flatKeys.forEach(key => {\n        if (_k2n[key].disabled || _k2n[key].checkboxDisabled) {\n            newKeys.push(key);\n            return;\n        }\n        forEachEnableNode(_k2n[key], node => {\n            if (node.checkable === false) return;\n            newKeys.push(node.key);\n        });\n    });\n\n    return newKeys;\n}"
    }
}