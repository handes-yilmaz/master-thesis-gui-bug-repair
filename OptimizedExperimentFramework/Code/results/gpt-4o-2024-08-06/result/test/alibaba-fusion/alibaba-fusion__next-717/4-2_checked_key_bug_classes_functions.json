{
    "bug_classes": {
        "1": {
            "class_name": "Select (not found) 10-510",
            "file_path": "src/select/select.jsx",
            "class_details": [
                {
                    "name": "Select",
                    "start_line": 10,
                    "end_line": 510
                }
            ],
            "class_code": [
                "import { isNull, getValueDataSource, valueToSelectKey } from './util';",
                "",
                "const { bindCtx, noop } = func;",
                "const isIE9 = env.ieVersion === 9;",
                "",
                "/**",
                " * 无障碍化注意事项:",
                " * 1. Select 无搜索情况下，不应该让 Input 可focus，此时外层wrap必须可focus，并且需要相应focus事件让外边框发生变化",
                " */",
                "",
                "// 自定义弹层：1. 不需要关心Menu的点击事件 2. 不需要关心dataSource变化",
                "",
                "/**",
                " * Select",
                " */",
                "class Select extends Base {",
                "    static propTypes = {",
                "        ...Base.propTypes,",
                "        /**",
                "         * 选择器模式",
                "         */",
                "        mode: PropTypes.oneOf(['single', 'multiple', 'tag']),",
                "        /**",
                "         * 当前值，用于受控模式",
                "         */",
                "        value: PropTypes.any,",
                "        /**",
                "         * 初始的默认值",
                "         */",
                "        defaultValue: PropTypes.any,",
                "        /**",
                "         * Select发生改变时触发的回调",
                "         * @param {*} value 选中的值",
                "         * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'tag'",
                "         * @param {*} item 选中的值的对象数据 (useDetailValue=false有效)",
                "         */",
                "        onChange: PropTypes.func,",
                "        /**",
                "         * 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)",
                "         */",
                "        dataSource: PropTypes.arrayOf(",
                "            PropTypes.oneOfType([",
                "                PropTypes.shape({",
                "                    value: PropTypes.any,",
                "                    label: PropTypes.any,",
                "                    disabled: PropTypes.bool,",
                "                    children: PropTypes.array,",
                "                }),",
                "                PropTypes.bool,",
                "                PropTypes.number,",
                "                PropTypes.string,",
                "            ])",
                "        ),",
                "        /**",
                "         * 是否有边框",
                "         */",
                "        hasBorder: PropTypes.bool,",
                "        /**",
                "         * 是否有下拉箭头",
                "         */",
                "        hasArrow: PropTypes.bool,",
                "        /**",
                "         * 展开后是否能搜索（tag 模式下固定为true）",
                "         */",
                "        showSearch: PropTypes.bool,",
                "        /**",
                "         * 当搜索框值变化时回调",
                "         * @param {String} value 数据",
                "         */",
                "        onSearch: PropTypes.func,",
                "        /**",
                "         * 当搜索框值被清空时候的回调",
                "         * @param {String} actionType 触发的方式, 'select'(选择清空), 'popupClose'(弹窗关闭清空)",
                "         */",
                "        onSearchClear: PropTypes.func,",
                "        /**",
                "         * 多选模式下是否有全选功能",
                "         */",
                "        hasSelectAll: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),",
                "        /**",
                "         * 填充到选择框里的值的 key\b\b",
                "         */",
                "        fillProps: PropTypes.string,",
                "        /**",
                "         * onChange 返回的 value 使用 dataSource 的对象",
                "         */",
                "        useDetailValue: PropTypes.bool,",
                "        /**",
                "         * dataSource 变化的时是否保留已选的内容",
                "         */",
                "        cacheValue: PropTypes.bool,",
                "        /**",
                "         * 渲染 Select 展现内容的方法",
                "         * @param {Object} item 渲染节点的item",
                "         * @return {ReactNode} 展现内容",
                "         * @default item => item.label \\|\\| item.value",
                "         */",
                "        valueRender: PropTypes.func,",
                "        /**",
                "         * 渲染 MenuItem 内容的方法",
                "         * @param {Object} item 渲染节点的item",
                "         * @param {String} searchValue 搜索关键字（如果开启搜索）",
                "         * @return {ReactNode} item node",
                "         */",
                "        itemRender: PropTypes.func,",
                "        /**",
                "         * 弹层内容为空的文案",
                "         */",
                "        notFoundContent: PropTypes.node,",
                "        style: PropTypes.object,",
                "        /**",
                "         * 受控搜索值，一般不需要设置",
                "         * @type {[type]}",
                "         */",
                "        searchValue: PropTypes.string,",
                "        /**",
                "         * tag最多显示的字符数",
                "         * @type {[type]}",
                "         */",
                "        maxTagTextLength: PropTypes.number,",
                "        /**",
                "         * 最多显示多少个 tag",
                "         * @type {[type]}",
                "         */",
                "        maxTagCount: PropTypes.number,",
                "        /**",
                "         * 选择后是否立即隐藏菜单 (mode=multiple/tag 模式生效)",
                "         */",
                "        hiddenSelected: PropTypes.bool,",
                "        /**",
                "         * tag 删除回调",
                "         * @param {object} item 渲染节点的item",
                "         */",
                "        onRemove: PropTypes.func,",
                "        /**",
                "         * 焦点事件",
                "         */",
                "        onFocus: PropTypes.func,",
                "        /**",
                "         * 是否自动高亮第一个选项",
                "         */",
                "        // highlightFirstItem: PropTypes.bool,",
                "        /**",
                "         * 失去焦点事件",
                "         */",
                "        onBlur: PropTypes.func,",
                "        onKeyDown: PropTypes.func,",
                "    };",
                "",
                "    static defaultProps = {",
                "        ...Base.defaultProps,",
                "        mode: 'single',",
                "        showSearch: false,",
                "        cacheValue: true,",
                "        onSearch: noop,",
                "        onSearchClear: noop,",
                "        hasArrow: true,",
                "        onRemove: noop,",
                "        // highlightFirstItem: true,",
                "        valueRender: item => {",
                "            return item.label || item.value;",
                "        },",
                "        onKeyDown: noop,",
                "        onFocus: noop,",
                "        onBlur: noop,",
                "    };",
                "",
                "    static displayName = 'Select';",
                "",
                "    constructor(props) {",
                "        super(props);",
                "",
                "        // @extend Base state",
                "        Object.assign(this.state, {",
                "            // search keyword",
                "            searchValue: 'searchValue' in props ? props.searchValue : '',",
                "        });",
                "",
                "        // because dataSource maybe updated while select a item, so we should cache choosen value's item",
                "        this.valueDataSource = {",
                "            valueDS: [], // [{value,label}]",
                "            mapValueDS: {}, // {value: {value,label}}",
                "        };",
                "",
                "        bindCtx(this, [",
                "            'handleMenuSelect',",
                "            'handleItemClick',",
                "            'handleSearch',",
                "            'handleSearchKeyDown',",
                "            'handleSelectAll',",
                "        ]);",
                "    }",
                "",
                "    componentWillMount() {",
                "        this.dataStore.setOptions({",
                "            key: this.state.searchValue,",
                "            addonKey: this.props.mode === 'tag', // tag 模式手动输入的数据",
                "        });",
                "",
                "        super.componentWillMount();",
                "",
                "        // 根据value和计算后的dataSource，更新value对应的详细数据valueDataSource",
                "        if (typeof this.state.value !== 'undefined') {",
                "            this.valueDataSource = getValueDataSource(",
                "                this.state.value,",
                "                this.valueDataSource.mapValueDS,",
                "                this.dataStore.getMapDS()",
                "            );",
                "        }",
                "",
                "        if (isIE9) {",
                "            this.ie9Hack();",
                "        }",
                "    }",
                "",
                "    componentWillReceiveProps(nextProps) {",
                "        if ('searchValue' in nextProps) {",
                "            this.dataStore.setOptions({ key: nextProps.searchValue });",
                "            this.setState({",
                "                searchValue:",
                "                    typeof nextProps.searchValue === 'undefined'",
                "                        ? ''",
                "                        : nextProps.searchValue,",
                "            });",
                "        }",
                "        if (this.props.mode !== nextProps.mode) {",
                "            this.dataStore.setOptions({",
                "                addonKey: nextProps.mode === 'tag',",
                "            });",
                "        }",
                "",
                "        this.dataStore.setOptions({",
                "            filter: nextProps.filter,",
                "            filterLocal: nextProps.filterLocal,",
                "        });",
                "",
                "        if (",
                "            nextProps.children !== this.props.children ||",
                "            nextProps.dataSource !== this.props.dataSource",
                "        ) {",
                "            const dataSource = this.setDataSource(nextProps);",
                "            this.setState({",
                "                dataSource,",
                "            });",
                "",
                "            // 远程数据有更新，并且还有搜索框",
                "            if (",
                "                nextProps.showSearch &&",
                "                !nextProps.filterLocal &&",
                "                !nextProps.popupContent",
                "            ) {",
                "                this.setFirstHightLightKeyForMenu();",
                "            }",
                "        }",
                "",
                "        if ('value' in nextProps) {",
                "            this.setState({",
                "                value: nextProps.value,",
                "            });",
                "",
                "            this.valueDataSource = getValueDataSource(",
                "                nextProps.value,",
                "                this.valueDataSource.mapValueDS,",
                "                this.dataStore.getMapDS()",
                "            );",
                "            this.updateSelectAllYet(this.valueDataSource.value);",
                "        } else if (",
                "            'defaultValue' in nextProps &&",
                "            nextProps.defaultValue === this.valueDataSource.value &&",
                "            (nextProps.children !== this.props.children ||",
                "                nextProps.dataSource !== this.props.dataSource)",
                "        ) {",
                "            //has defaultValue and value not changed and dataSource changed",
                "            this.valueDataSource = getValueDataSource(",
                "                nextProps.defaultValue,",
                "                this.valueDataSource.mapValueDS,",
                "                this.dataStore.getMapDS()",
                "            );",
                "        }",
                "",
                "        if ('visible' in nextProps) {",
                "            this.setState({",
                "                visible: nextProps.visible,",
                "            });",
                "        }",
                "    }",
                "",
                "    componentDidMount() {",
                "        if (isIE9) {",
                "            this.ie9Hack();",
                "        }",
                "        super.componentDidMount();",
                "    }",
                "",
                "    // ie9 下 table-cell 布局不支持宽度超出隐藏",
                "    ie9Hack() {",
                "        try {",
                "            const width = this.selectDOM.currentStyle.width;",
                "            this.setState({",
                "                fixWidth: width !== 'auto',",
                "            });",
                "        } catch (e) {",
                "            //",
                "        }",
                "    }",
                "",
                "    componentDidUpdate(prevProps, prevState) {",
                "        const props = this.props;",
                "        // 随着输入自动伸展",
                "        if (",
                "            /tag|multiple/.test(props.mode) &&",
                "            prevState.searchValue !== this.state.searchValue",
                "        ) {",
                "            this.syncWidth();",
                "        } else {",
                "            return super.componentDidUpdate(prevProps, prevState);",
                "        }",
                "    }",
                "",
                "    useDetailValue() {",
                "        const { popupContent, useDetailValue, dataSource } = this.props;",
                "        return useDetailValue || (popupContent && !dataSource);",
                "    }",
                "",
                "    hasSearch() {",
                "        const { showSearch, mode } = this.props;",
                "        return showSearch || mode === 'tag';",
                "    }",
                "",
                "    /**",
                "     * Menu.Item onSelect",
                "     * @private",
                "     * @param  {Array<string>} keys",
                "     * @",
                "     */",
                "    handleMenuSelect(keys) {",
                "        const { mode, readOnly, disabled } = this.props;",
                "",
                "        if (readOnly || disabled) {",
                "            return false;",
                "        }",
                "",
                "        const isSingle = mode === 'single';",
                "",
                "        if (isSingle) {",
                "            // 单选",
                "            return this.handleSingleSelect(keys[0], 'itemClick');",
                "        } else {",
                "            // 正常多选",
                "            return this.handleMultipleSelect(keys, 'itemClick');",
                "        }",
                "    }",
                "",
                "    handleItemClick() {",
                "        this.focusInput();",
                "    }",
                "",
                "    /**",
                "     * 单选模式",
                "     */",
                "    handleSingleSelect(key, triggerType) {",
                "        const { cacheValue } = this.props;",
                "        // get data only from dataStore while cacheValue=false",
                "        const itemObj = getValueDataSource(",
                "            key,",
                "            cacheValue ? this.valueDataSource.mapValueDS : {},",
                "            this.dataStore.getMapDS()",
                "        );",
                "        this.valueDataSource = itemObj;",
                "",
                "        this.setVisible(false, triggerType);",
                "",
                "        if (this.useDetailValue()) {",
                "            return this.handleChange(itemObj.valueDS, triggerType);",
                "        } else {",
                "            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);",
                "        }",
                "",
                "        this.setState({",
                "            highlightKey: key,",
                "        });",
                "",
                "        // 清空搜索",
                "        if (!('searchValue' in this.props) && this.state.searchValue) {",
                "            this.handleSearchClear(triggerType);",
                "        }",
                "    }",
                "",
                "    /**",
                "     * 多选模式 multiple/tag",
                "     */",
                "    handleMultipleSelect(keys, triggerType) {",
                "        const itemObj = getValueDataSource(",
                "            keys,",
                "            this.valueDataSource.mapValueDS,",
                "            this.dataStore.getMapDS()",
                "        );",
                "",
                "        const { cacheValue, mode, hiddenSelected } = this.props;",
                "",
                "        // cache those value maybe not exists in dataSource",
                "        if (cacheValue || mode === 'tag') {",
                "            this.valueDataSource = itemObj;",
                "        }",
                "",
                "        if (hiddenSelected) {",
                "            this.setVisible(false, triggerType);",
                "        }",
                "",
                "        if (this.useDetailValue()) {",
                "            this.handleChange(itemObj.valueDS, triggerType);",
                "        } else {",
                "            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);",
                "        }",
                "",
                "        this.updateSelectAllYet(itemObj.value);",
                "",
                "        // 清空搜索",
                "        if (!('searchValue' in this.props) && this.state.searchValue) {",
                "            // 因为 SearchValue 被 clear 后会重新渲染 Menu，所以在 Overlay 检测 safeNode 的时候 e.target 可能会找不到导致弹窗关闭",
                "            setTimeout(() => {",
                "                this.handleSearchClear(triggerType);",
                "            });",
                "        }",
                "    }",
                "",
                "    updateSelectAllYet(value) {",
                "        // multiple mode",
                "        // is current state select all or not",
                "        this.selectAllYet = false;",
                "        if (this.props.hasSelectAll && Array.isArray(value)) {",
                "            const selectAllValues = this.dataStore",
                "                .getEnableDS()",
                "                .map(item => item.value);",
                "",
                "            if (selectAllValues.length <= value.length) {",
                "                this.selectAllYet = true;",
                "",
                "                selectAllValues.forEach(val => {",
                "                    if (value.indexOf(val) === -1) {",
                "                        this.selectAllYet = false;",
                "                        return;",
                "                    }",
                "                });",
                "            }",
                "        }",
                "    }",
                "",
                "    handleSearchValue(value) {",
                "        if (this.state.searchValue === value) {",
                "            return;",
                "        }",
                "",
                "        const { filterLocal } = this.props;",
                "",
                "        if (filterLocal) {",
                "            if (!('searchValue' in this.props)) {",
                "                this.setState({",
                "                    searchValue: value,",
                "                    dataSource: this.dataStore.updateByKey(value),",
                "                });",
                "                this.setFirstHightLightKeyForMenu();",
                "            }",
                "        } else if (!('searchValue' in this.props)) {",
                "            this.setState({",
                "                searchValue: value,",
                "            });",
                "        }",
                "    }",
                "",
                "    /**",
                "     * Handle search input change event",
                "     * @param {Event} e change Event",
                "     */",
                "    handleSearch(value) {",
                "        this.handleSearchValue(value);",
                "",
                "        // inputing should trigger popup open",
                "        if (!this.state.visible && value) {",
                "            this.setVisible(true);",
                "        }",
                "",
                "        this.props.onSearch(value);",
                "    }",
                "",
                "    handleSearchClear(triggerType) {",
                "        this.handleSearchValue('');",
                "        this.props.onSearchClear(triggerType);",
                "    }",
                "",
                "    // 搜索框 keyDown 事件",
                "    handleSearchKeyDown(e) {",
                "        const {",
                "            popupContent,",
                "            onKeyDown,",
                "            showSearch,",
                "            mode,",
                "            hasClear,",
                "            onToggleHighlightItem,",
                "        } = this.props;",
                ""
            ]
        },
        "2": {
            "class_name": "DataStore (not found) ",
            "file_path": "src/select/data-store.js",
            "class_details": [
                {
                    "name": "DataStore",
                    "start_line": 1,
                    "end_line": 96
                }
            ],
            "class_code": [
                "import {",
                "    filter,",
                "    parseDataSourceFromChildren,",
                "    normalizeDataSource,",
                "    flattingDataSource,",
                "    filterDataSource,",
                "} from './util';",
                "",
                "/**",
                " * manage dataSource for menu list",
                " */",
                "class DataStore {",
                "    constructor(options) {",
                "        this.options = {",
                "            filter,",
                "            key: undefined,",
                "            addonKey: false,",
                "            filterLocal: true,",
                "            ...options,",
                "        };",
                "",
                "        // origin data",
                "        this.dataSource = [];",
                "        // current data for menu display",
                "        this.menuDataSource = [];",
                "        // key=>value map for menuDataSource",
                "        this.mapDataSource = {};",
                "        // current data can be select (not disabled) on menu",
                "        this.enabledDataSource = [];",
                "    }",
                "",
                "    setOptions(options) {",
                "        Object.assign(this.options, options);",
                "    }",
                "",
                "    updateByDS(dataSource, isChildren = false) {",
                "        this.dataSource = isChildren",
                "            ? parseDataSourceFromChildren(dataSource)",
                "            : normalizeDataSource(dataSource);",
                "        return this.updateAll();",
                "    }",
                "",
                "    updateByKey(key) {",
                "        if (key === this.options.key) {",
                "            return this.getMenuDS();",
                "        }",
                "",
                "        this.options.key = key;",
                "        return this.updateAll();",
                "    }",
                "",
                "    getOriginDS() {",
                "        return this.dataSource;",
                "    }",
                "",
                "    getMenuDS() {",
                "        return this.menuDataSource;",
                "    }",
                "",
                "    getFlattenDS() {",
                "        return this.flattenDataSource;",
                "    }",
                "",
                "    getEnableDS() {",
                "        return this.enabledDataSource;",
                "    }",
                "",
                "    getMapDS() {",
                "        return this.mapDataSource;",
                "    }",
                "",
                "    updateAll() {",
                "        const { key, filter, filterLocal } = this.options;",
                "        this.menuDataSource = filterDataSource(",
                "            this.dataSource,",
                "            filterLocal ? key : '',",
                "            filter,",
                "            this.options.addonKey",
                "        );",
                "",
                "        this.flattenDataSource = flattingDataSource(this.menuDataSource);",
                "",
                "        this.mapDataSource = {};",
                "        this.flattenDataSource.forEach(item => {",
                "            this.mapDataSource[`${item.value}`] = item;",
                "        });",
                "",
                "        this.enabledDataSource = this.flattenDataSource.filter(",
                "            item => !item.disabled",
                "        );",
                "",
                "        return this.menuDataSource;",
                "    }",
                "}",
                "",
                "export default DataStore;"
            ]
        },
        "3": {
            "class_name": "getValueDataSource (not found) ",
            "file_path": "src/select/util.js",
            "class_details": [
                {
                    "name": "getValueDataSource",
                    "start_line": 1,
                    "end_line": 363
                }
            ],
            "class_code": [
                "import { Children } from 'react';",
                "",
                "/**",
                " * util module",
                " */",
                "",
                "/**",
                " * 是否是单选模式",
                " * @param {string} mode",
                " * @return {boolean} is single mode",
                " */",
                "export function isSingle(mode) {",
                "    return !mode || mode === 'single' || mode === 'combobox';",
                "}",
                "",
                "/**",
                " * 在 Select 中，认为 null 和 undefined 都是空值",
                " * @param {*} n any object",
                " * @return {boolean}",
                " */",
                "export function isNull(n) {",
                "    return n === null || n === undefined;",
                "}",
                "",
                "/**",
                " * 将字符串中的正则表达式关键字符添加转义",
                " * @param {string} str",
                " * @return {string}",
                " */",
                "export function escapeForReg(str) {",
                "    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');",
                "}",
                "",
                "/**",
                " * filter by key",
                " * @param {string} key filter key",
                " * @param {object} item item object",
                " * @return {boolean} it's filtered",
                " */",
                "export function filter(key, item) {",
                "    const _key = escapeForReg(`${key}`);",
                "    const regExp = new RegExp(`(${_key})`, 'ig');",
                "",
                "    return regExp.test(`${item.value}`) || regExp.test(`${item.label}`);",
                "}",
                "",
                "/**",
                " * loop map",
                " * @param {Array} dataSource",
                " * @param {function} callback",
                " * @return {Array}",
                " * ----",
                " * @callback ~loopCallback",
                " * @param {object} option",
                " */",
                "export function loopMap(dataSource, callback) {",
                "    const result = [];",
                "    dataSource.forEach(option => {",
                "        if (option.children) {",
                "            const children = loopMap(option.children, callback);",
                "            children.length &&",
                "                result.push({",
                "                    ...option,",
                "                    children,",
                "                });",
                "        } else {",
                "            // eslint-disable-next-line callback-return",
                "            const tmp = callback(option);",
                "            tmp && result.push(tmp);",
                "        }",
                "    });",
                "",
                "    return result;",
                "}",
                "",
                "/**",
                " * Parse dataSource from MenuItem",
                " * @static",
                " * @param {Array<Element>} children",
                " * @param {number} [deep=0] recursion deep level",
                " */",
                "export function parseDataSourceFromChildren(children, deep = 0) {",
                "    const source = [];",
                "",
                "    Children.forEach(children, (child, index) => {",
                "        if (!child) {",
                "            return;",
                "        }",
                "        const { type, props: childProps } = child;",
                "        const item2 = { deep };",
                "",
                "        let isOption = false;",
                "        let isOptionGroup = false;",
                "",
                "        if (",
                "            (typeof type === 'function' &&",
                "                type._typeMark === 'next_select_option') ||",
                "            type === 'option'",
                "        ) {",
                "            isOption = true;",
                "        }",
                "        if (",
                "            (typeof type === 'function' &&",
                "                type._typeMark === 'next_select_option_group') ||",
                "            type === 'optgroup'",
                "        ) {",
                "            isOptionGroup = true;",
                "        }",
                "",
                "        if (!isOption && !isOptionGroup) {",
                "            return;",
                "        }",
                "",
                "        if (isOption) {",
                "            // option",
                "            // If children is a string, it can be used as value",
                "            const isStrChild = typeof childProps.children === 'string';",
                "            // value > key > string children > index",
                "            item2.value =",
                "                'value' in childProps",
                "                    ? childProps.value",
                "                    : 'key' in childProps",
                "                    ? childProps.key",
                "                    : isStrChild",
                "                    ? childProps.children",
                "                    : `${index}`;",
                "",
                "            item2.label =",
                "                childProps.label || childProps.children || `${item2.value}`;",
                "            item2.title = childProps.title;",
                "            childProps.disabled === true && (item2.disabled = true);",
                "            // You can put your extra data here, and use it in `itemRender` or `labelRender`",
                "            Object.assign(item2, childProps['data-extra'] || {});",
                "        } else if (isOptionGroup && deep < 1) {",
                "            // option group",
                "            item2.label = childProps.label || 'Group';",
                "            // parse children nodes",
                "            item2.children = parseDataSourceFromChildren(",
                "                childProps.children,",
                "                deep + 1",
                "            );",
                "        }",
                "",
                "        source.push(item2);",
                "    });",
                "",
                "    return source;",
                "}",
                "",
                "/**",
                " * Normalize dataSource",
                " * @static",
                " * @param {Array} dataSource",
                " * @param {number} [deep=0] recursion deep level",
                " * ----",
                " * value priority: value > 'index'",
                " * label priority: label > 'value' > 'index'",
                " * disabled: disabled === true",
                " */",
                "export function normalizeDataSource(dataSource, deep = 0) {",
                "    const source = [];",
                "",
                "    dataSource.forEach((item, index) => {",
                "        // enable array of basic type",
                "        if (/string|boolean|number/.test(typeof item)) {",
                "            item = { label: `${item}`, value: item };",
                "        }",
                "",
                "        // filter off addon item",
                "        if (item.__isAddon) {",
                "            return;",
                "        }",
                "",
                "        const item2 = { deep };",
                "        // deep < 1: only 2 level allowed",
                "        if (Array.isArray(item.children) && deep < 1) {",
                "            // handle group",
                "            item2.label = item.label || item.value || `Group ${index}`;",
                "            // parse children",
                "            item2.children = normalizeDataSource(item.children, deep + 1);",
                "        } else {",
                "            const { value, label, title, disabled, ...others } = item;",
                "            item2.value = !isNull(value) ? value : `${index}`;",
                "            item2.label = label || `${item2.value}`;",
                "            item2.title = title;",
                "            disabled === true && (item2.disabled = true);",
                "",
                "            Object.assign(item2, others);",
                "        }",
                "",
                "        source.push(item2);",
                "    });",
                "",
                "    return source;",
                "}",
                "",
                "/**",
                " * Get flatten dataSource",
                " * @static",
                " * @param  {Array} dataSource structured dataSource",
                " * @return {Array}",
                " */",
                "export function flattingDataSource(dataSource) {",
                "    const source = [];",
                "",
                "    dataSource.forEach(item => {",
                "        if (Array.isArray(item.children)) {",
                "            source.push(...flattingDataSource(item.children));",
                "        } else {",
                "            source.push(item);",
                "        }",
                "    });",
                "",
                "    return source;",
                "}",
                "",
                "export function filterDataSource(dataSource, key, filter, addonKey) {",
                "    if (!Array.isArray(dataSource)) {",
                "        return [];",
                "    }",
                "    if (typeof key === 'undefined' || key === null) {",
                "        return [].concat(dataSource);",
                "    }",
                "",
                "    let addKey = true;",
                "    const menuDataSource = loopMap(dataSource, option => {",
                "        if (key === `${option.value}`) {",
                "            addKey = false;",
                "        }",
                "        return filter(key, option) && !option.__isAddon && option;",
                "    });",
                "",
                "    // if key not in menuDataSource, add key to dataSource",
                "    if (addonKey && key && addKey) {",
                "        menuDataSource.unshift({",
                "            value: key,",
                "            label: key,",
                "            title: key,",
                "            __isAddon: true,",
                "        });",
                "    }",
                "",
                "    return menuDataSource;",
                "}",
                "",
                "function getKeyItemByValue(value, valueMap) {",
                "    let item;",
                "",
                "    if (typeof value === 'object' && value.hasOwnProperty('value')) {",
                "        item = value;",
                "    } else {",
                "        item = valueMap[`${value}`] || {",
                "            value,",
                "            label: value,",
                "        };",
                "    }",
                "",
                "    return item;",
                "}",
                "",
                "/**",
                " * compute valueDataSource by new value",
                " * @param {Array/String} value 数据",
                " * @param {Object} mapValueDS   上个value的缓存数据 value => {value,label} 的映射关系表",
                " * @param {*} mapMenuDS  通过 dataSource 建立 value => {value,label} 的映射关系表",
                " * @returns {Object} value: [value]; valueDS: [{value,label}]; mapValueDS: {value: {value,label}}",
                " */",
                "export function getValueDataSource(value, mapValueDS, mapMenuDS) {",
                "    if (isNull(value)) {",
                "        return {};",
                "    }",
                "",
                "    const newValue = [];",
                "    const newValueDS = [];",
                "    const newMapValueDS = {};",
                "    const _newMapDS = Object.assign({}, mapValueDS, mapMenuDS);",
                "",
                "    if (Array.isArray(value)) {",
                "        value.forEach(v => {",
                "            const item = getKeyItemByValue(v, _newMapDS);",
                "",
                "            newValueDS.push(item);",
                "            newMapValueDS[`${item.value}`] = item;",
                "            newValue.push(item.value);",
                "        });",
                "",
                "        return {",
                "            value: newValue, // [value]",
                "            valueDS: newValueDS, // [{value,label}]",
                "            mapValueDS: newMapValueDS, // {value: {value,label}}",
                "        };",
                "    } else {",
                "        const item = getKeyItemByValue(value, _newMapDS);",
                "",
                "        return {",
                "            value: item.value,",
                "            valueDS: item,",
                "            mapValueDS: {",
                "                [`${item.value}`]: item,",
                "            },",
                "        };",
                "    }",
                "}",
                "",
                "/**",
                " * Get flatten dataSource",
                " * @static",
                " * @param  {any} value structured dataSource",
                " * @return {String}",
                " */",
                "export function valueToSelectKey(value) {",
                "    let val;",
                "    if (typeof value === 'object' && value.hasOwnProperty('value')) {",
                "        val = value.value;",
                "    } else {",
                "        val = value;",
                "    }",
                "    return `${val}`;",
                "}",
                "",
                "/**",
                " * UP Down 改进双向链表方法",
                " */",
                "// function DoubleLinkList(element){",
                "//     this.prev = null;",
                "//     this.next = null;",
                "//     this.element = element;",
                "// }",
                "//",
                "// export function mapDoubleLinkList(dataSource){",
                "//",
                "//     const mapDS = {};",
                "//     let doubleLink = null;",
                "//",
                "//     let head = null;",
                "//     let tail = null;",
                "//",
                "//     function  append(element) {",
                "//         if (!doubleLink) {",
                "//             doubleLink = new DoubleLinkList(element);",
                "//             head = doubleLink;",
                "//             tail = doubleLink;",
                "//             return doubleLink;",
                "//         }",
                "//",
                "//         const node = new DoubleLinkList(element);",
                "//         tail.next = node;",
                "//         node.prev = tail;",
                "//         tail = node;",
                "//",
                "//         return tail;",
                "//     }",
                "//",
                "//     dataSource.forEach((item => {",
                "//         if (item.disabled) {",
                "//             return;",
                "//         }",
                "//         mapDS[`${item.value}`] = append(item);",
                "//     }));",
                "//",
                "//     return mapDS;",
                "// }",
                "//"
            ]
        }
    },
    "bug_functions": {
        "4": {
            "function_name": "getValueDataSource (not found) ",
            "file_path": "src/select/util.js",
            "function_details": [
                {
                    "name": "getValueDataSource",
                    "start_line": 1,
                    "end_line": 363
                }
            ],
            "function_code": [
                "import { Children } from 'react';",
                "",
                "/**",
                " * util module",
                " */",
                "",
                "/**",
                " * 是否是单选模式",
                " * @param {string} mode",
                " * @return {boolean} is single mode",
                " */",
                "export function isSingle(mode) {",
                "    return !mode || mode === 'single' || mode === 'combobox';",
                "}",
                "",
                "/**",
                " * 在 Select 中，认为 null 和 undefined 都是空值",
                " * @param {*} n any object",
                " * @return {boolean}",
                " */",
                "export function isNull(n) {",
                "    return n === null || n === undefined;",
                "}",
                "",
                "/**",
                " * 将字符串中的正则表达式关键字符添加转义",
                " * @param {string} str",
                " * @return {string}",
                " */",
                "export function escapeForReg(str) {",
                "    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');",
                "}",
                "",
                "/**",
                " * filter by key",
                " * @param {string} key filter key",
                " * @param {object} item item object",
                " * @return {boolean} it's filtered",
                " */",
                "export function filter(key, item) {",
                "    const _key = escapeForReg(`${key}`);",
                "    const regExp = new RegExp(`(${_key})`, 'ig');",
                "",
                "    return regExp.test(`${item.value}`) || regExp.test(`${item.label}`);",
                "}",
                "",
                "/**",
                " * loop map",
                " * @param {Array} dataSource",
                " * @param {function} callback",
                " * @return {Array}",
                " * ----",
                " * @callback ~loopCallback",
                " * @param {object} option",
                " */",
                "export function loopMap(dataSource, callback) {",
                "    const result = [];",
                "    dataSource.forEach(option => {",
                "        if (option.children) {",
                "            const children = loopMap(option.children, callback);",
                "            children.length &&",
                "                result.push({",
                "                    ...option,",
                "                    children,",
                "                });",
                "        } else {",
                "            // eslint-disable-next-line callback-return",
                "            const tmp = callback(option);",
                "            tmp && result.push(tmp);",
                "        }",
                "    });",
                "",
                "    return result;",
                "}",
                "",
                "/**",
                " * Parse dataSource from MenuItem",
                " * @static",
                " * @param {Array<Element>} children",
                " * @param {number} [deep=0] recursion deep level",
                " */",
                "export function parseDataSourceFromChildren(children, deep = 0) {",
                "    const source = [];",
                "",
                "    Children.forEach(children, (child, index) => {",
                "        if (!child) {",
                "            return;",
                "        }",
                "        const { type, props: childProps } = child;",
                "        const item2 = { deep };",
                "",
                "        let isOption = false;",
                "        let isOptionGroup = false;",
                "",
                "        if (",
                "            (typeof type === 'function' &&",
                "                type._typeMark === 'next_select_option') ||",
                "            type === 'option'",
                "        ) {",
                "            isOption = true;",
                "        }",
                "        if (",
                "            (typeof type === 'function' &&",
                "                type._typeMark === 'next_select_option_group') ||",
                "            type === 'optgroup'",
                "        ) {",
                "            isOptionGroup = true;",
                "        }",
                "",
                "        if (!isOption && !isOptionGroup) {",
                "            return;",
                "        }",
                "",
                "        if (isOption) {",
                "            // option",
                "            // If children is a string, it can be used as value",
                "            const isStrChild = typeof childProps.children === 'string';",
                "            // value > key > string children > index",
                "            item2.value =",
                "                'value' in childProps",
                "                    ? childProps.value",
                "                    : 'key' in childProps",
                "                    ? childProps.key",
                "                    : isStrChild",
                "                    ? childProps.children",
                "                    : `${index}`;",
                "",
                "            item2.label =",
                "                childProps.label || childProps.children || `${item2.value}`;",
                "            item2.title = childProps.title;",
                "            childProps.disabled === true && (item2.disabled = true);",
                "            // You can put your extra data here, and use it in `itemRender` or `labelRender`",
                "            Object.assign(item2, childProps['data-extra'] || {});",
                "        } else if (isOptionGroup && deep < 1) {",
                "            // option group",
                "            item2.label = childProps.label || 'Group';",
                "            // parse children nodes",
                "            item2.children = parseDataSourceFromChildren(",
                "                childProps.children,",
                "                deep + 1",
                "            );",
                "        }",
                "",
                "        source.push(item2);",
                "    });",
                "",
                "    return source;",
                "}",
                "",
                "/**",
                " * Normalize dataSource",
                " * @static",
                " * @param {Array} dataSource",
                " * @param {number} [deep=0] recursion deep level",
                " * ----",
                " * value priority: value > 'index'",
                " * label priority: label > 'value' > 'index'",
                " * disabled: disabled === true",
                " */",
                "export function normalizeDataSource(dataSource, deep = 0) {",
                "    const source = [];",
                "",
                "    dataSource.forEach((item, index) => {",
                "        // enable array of basic type",
                "        if (/string|boolean|number/.test(typeof item)) {",
                "            item = { label: `${item}`, value: item };",
                "        }",
                "",
                "        // filter off addon item",
                "        if (item.__isAddon) {",
                "            return;",
                "        }",
                "",
                "        const item2 = { deep };",
                "        // deep < 1: only 2 level allowed",
                "        if (Array.isArray(item.children) && deep < 1) {",
                "            // handle group",
                "            item2.label = item.label || item.value || `Group ${index}`;",
                "            // parse children",
                "            item2.children = normalizeDataSource(item.children, deep + 1);",
                "        } else {",
                "            const { value, label, title, disabled, ...others } = item;",
                "            item2.value = !isNull(value) ? value : `${index}`;",
                "            item2.label = label || `${item2.value}`;",
                "            item2.title = title;",
                "            disabled === true && (item2.disabled = true);",
                "",
                "            Object.assign(item2, others);",
                "        }",
                "",
                "        source.push(item2);",
                "    });",
                "",
                "    return source;",
                "}",
                "",
                "/**",
                " * Get flatten dataSource",
                " * @static",
                " * @param  {Array} dataSource structured dataSource",
                " * @return {Array}",
                " */",
                "export function flattingDataSource(dataSource) {",
                "    const source = [];",
                "",
                "    dataSource.forEach(item => {",
                "        if (Array.isArray(item.children)) {",
                "            source.push(...flattingDataSource(item.children));",
                "        } else {",
                "            source.push(item);",
                "        }",
                "    });",
                "",
                "    return source;",
                "}",
                "",
                "export function filterDataSource(dataSource, key, filter, addonKey) {",
                "    if (!Array.isArray(dataSource)) {",
                "        return [];",
                "    }",
                "    if (typeof key === 'undefined' || key === null) {",
                "        return [].concat(dataSource);",
                "    }",
                "",
                "    let addKey = true;",
                "    const menuDataSource = loopMap(dataSource, option => {",
                "        if (key === `${option.value}`) {",
                "            addKey = false;",
                "        }",
                "        return filter(key, option) && !option.__isAddon && option;",
                "    });",
                "",
                "    // if key not in menuDataSource, add key to dataSource",
                "    if (addonKey && key && addKey) {",
                "        menuDataSource.unshift({",
                "            value: key,",
                "            label: key,",
                "            title: key,",
                "            __isAddon: true,",
                "        });",
                "    }",
                "",
                "    return menuDataSource;",
                "}",
                "",
                "function getKeyItemByValue(value, valueMap) {",
                "    let item;",
                "",
                "    if (typeof value === 'object' && value.hasOwnProperty('value')) {",
                "        item = value;",
                "    } else {",
                "        item = valueMap[`${value}`] || {",
                "            value,",
                "            label: value,",
                "        };",
                "    }",
                "",
                "    return item;",
                "}",
                "",
                "/**",
                " * compute valueDataSource by new value",
                " * @param {Array/String} value 数据",
                " * @param {Object} mapValueDS   上个value的缓存数据 value => {value,label} 的映射关系表",
                " * @param {*} mapMenuDS  通过 dataSource 建立 value => {value,label} 的映射关系表",
                " * @returns {Object} value: [value]; valueDS: [{value,label}]; mapValueDS: {value: {value,label}}",
                " */",
                "export function getValueDataSource(value, mapValueDS, mapMenuDS) {",
                "    if (isNull(value)) {",
                "        return {};",
                "    }",
                "",
                "    const newValue = [];",
                "    const newValueDS = [];",
                "    const newMapValueDS = {};",
                "    const _newMapDS = Object.assign({}, mapValueDS, mapMenuDS);",
                "",
                "    if (Array.isArray(value)) {",
                "        value.forEach(v => {",
                "            const item = getKeyItemByValue(v, _newMapDS);",
                "",
                "            newValueDS.push(item);",
                "            newMapValueDS[`${item.value}`] = item;",
                "            newValue.push(item.value);",
                "        });",
                "",
                "        return {",
                "            value: newValue, // [value]",
                "            valueDS: newValueDS, // [{value,label}]",
                "            mapValueDS: newMapValueDS, // {value: {value,label}}",
                "        };",
                "    } else {",
                "        const item = getKeyItemByValue(value, _newMapDS);",
                "",
                "        return {",
                "            value: item.value,",
                "            valueDS: item,",
                "            mapValueDS: {",
                "                [`${item.value}`]: item,",
                "            },",
                "        };",
                "    }",
                "}",
                "",
                "/**",
                " * Get flatten dataSource",
                " * @static",
                " * @param  {any} value structured dataSource",
                " * @return {String}",
                " */",
                "export function valueToSelectKey(value) {",
                "    let val;",
                "    if (typeof value === 'object' && value.hasOwnProperty('value')) {",
                "        val = value.value;",
                "    } else {",
                "        val = value;",
                "    }",
                "    return `${val}`;",
                "}",
                "",
                "/**",
                " * UP Down 改进双向链表方法",
                " */",
                "// function DoubleLinkList(element){",
                "//     this.prev = null;",
                "//     this.next = null;",
                "//     this.element = element;",
                "// }",
                "//",
                "// export function mapDoubleLinkList(dataSource){",
                "//",
                "//     const mapDS = {};",
                "//     let doubleLink = null;",
                "//",
                "//     let head = null;",
                "//     let tail = null;",
                "//",
                "//     function  append(element) {",
                "//         if (!doubleLink) {",
                "//             doubleLink = new DoubleLinkList(element);",
                "//             head = doubleLink;",
                "//             tail = doubleLink;",
                "//             return doubleLink;",
                "//         }",
                "//",
                "//         const node = new DoubleLinkList(element);",
                "//         tail.next = node;",
                "//         node.prev = tail;",
                "//         tail = node;",
                "//",
                "//         return tail;",
                "//     }",
                "//",
                "//     dataSource.forEach((item => {",
                "//         if (item.disabled) {",
                "//             return;",
                "//         }",
                "//         mapDS[`${item.value}`] = append(item);",
                "//     }));",
                "//",
                "//     return mapDS;",
                "// }",
                "//"
            ]
        }
    }
}