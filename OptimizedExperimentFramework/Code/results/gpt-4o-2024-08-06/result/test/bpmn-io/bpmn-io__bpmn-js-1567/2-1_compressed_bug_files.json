{
    "1": {
        "bug_file": "lib/features/drilldown/DrilldownBreadcrumbs.js",
        "compressed": "NO",
        "line_numbers": 71,
        "compressed_line_numbers": 71,
        "compressed_bug_file_content": "import { domify, classes } from 'min-dom';\n\nimport { escapeHTML } from 'diagram-js/lib/util/EscapeUtil';\nimport { getBusinessObject, is } from '../../util/ModelUtil';\nimport { planeId } from '../../util/DrilldownUtil';\n\nvar OPEN_CLASS = 'bjs-breadcrumbs-shown';\n\n\n/**\n * Adds Overlays that allow switching planes on collapsed subprocesses.\n *\n * @param {eventBus} eventBus\n * @param {elementRegistry} elementRegistry\n * @param {overlays} overlays\n * @param {canvas} canvas\n */\nexport default function DrilldownBreadcrumbs(eventBus, elementRegistry, overlays, canvas) {\n  var breadcrumbs = domify('<ul class=\"bjs-breadcrumbs\"></ul>');\n  var container = canvas.getContainer();\n  var containerClasses = classes(container);\n  container.appendChild(breadcrumbs);\n\n  function updateBreadcrumbs(element) {\n    var parents = getParentChain(element);\n\n    var path = parents.map(function(el) {\n      var title = escapeHTML(el.name || el.id);\n      var link = domify('<li><span class=\"bjs-crumb\"><a title=\"' + title + '\">' + title + '</a></span></li>');\n\n      link.addEventListener('click', function() {\n        canvas.setRootElement(canvas.findRoot(planeId(el)) || canvas.findRoot(el.id));\n      });\n\n      return link;\n    });\n\n    breadcrumbs.innerHTML = '';\n\n    // show breadcrumbs and expose state to .djs-container\n    var visible = path.length > 1;\n    containerClasses.toggle(OPEN_CLASS, visible);\n\n    path.forEach(function(el) {\n      breadcrumbs.appendChild(el);\n    });\n  }\n\n  eventBus.on('root.set', function(event) {\n    updateBreadcrumbs(event.element);\n  });\n\n}\n\nDrilldownBreadcrumbs.$inject = [ 'eventBus', 'elementRegistry', 'overlays', 'canvas' ];\n\n\n// helpers\nfunction getParentChain(child) {\n  var bo = getBusinessObject(child);\n\n  var parents = [];\n\n  for (var element = bo; element; element = element.$parent) {\n    if (is(element, 'bpmn:SubProcess') || is(element, 'bpmn:Process')) {\n      parents.push(element);\n    }\n  }\n\n  return parents.reverse();\n}"
    },
    "2": {
        "bug_file": "lib/features/drilldown/DrilldownOverlayBehavior.js",
        "compressed": "NO",
        "line_numbers": 181,
        "compressed_line_numbers": 181,
        "compressed_bug_file_content": "import inherits from 'inherits';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../util/ModelUtil';\nimport { classes, domify } from 'min-dom';\nimport { planeId } from '../../util/DrilldownUtil';\n\nvar LOW_PRIORITY = 250;\nvar ARROW_DOWN_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.81801948,3.50735931 L10.4996894,9.1896894 L10.5,4 L12,4 L12,12 L4,12 L4,10.5 L9.6896894,10.4996894 L3.75735931,4.56801948 C3.46446609,4.27512627 3.46446609,3.80025253 3.75735931,3.50735931 C4.05025253,3.21446609 4.52512627,3.21446609 4.81801948,3.50735931 Z\"/></svg>';\n\nvar EMPTY_MARKER = 'bjs-drilldown-empty';\n\nexport default function DrilldownOverlayBehavior(\n    canvas, eventBus, elementRegistry, overlays\n) {\n  CommandInterceptor.call(this, eventBus);\n\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._overlays = overlays;\n\n  var self = this;\n\n  this.executed('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    // Add overlay to the collapsed shape\n    if (self.canDrillDown(shape)) {\n      self.addOverlay(shape);\n    } else {\n      self.removeOverlay(shape);\n    }\n  }, true);\n\n\n  this.reverted('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    // Add overlay to the collapsed shape\n    if (self.canDrillDown(shape)) {\n      self.addOverlay(shape);\n    } else {\n      self.removeOverlay(shape);\n    }\n  }, true);\n\n\n  this.executed(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,\n    function(context) {\n      var oldParent = context.oldParent,\n          newParent = context.newParent || context.parent,\n          shape = context.shape;\n\n      // Add overlay to the collapsed shape\n      if (self.canDrillDown(shape)) {\n        self.addOverlay(shape);\n      }\n\n      self.updateDrilldownOverlay(oldParent);\n      self.updateDrilldownOverlay(newParent);\n      self.updateDrilldownOverlay(shape);\n    }, true);\n\n\n  this.reverted(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,\n    function(context) {\n      var oldParent = context.oldParent,\n          newParent = context.newParent || context.parent,\n          shape = context.shape;\n\n      // Add overlay to the collapsed shape\n      if (self.canDrillDown(shape)) {\n        self.addOverlay(shape);\n      }\n\n      self.updateDrilldownOverlay(oldParent);\n      self.updateDrilldownOverlay(newParent);\n      self.updateDrilldownOverlay(shape);\n    }, true);\n\n\n  eventBus.on('import.done', function() {\n    elementRegistry.filter(function(e) {\n      return self.canDrillDown(e);\n    }).map(function(el) {\n      self.addOverlay(el);\n    });\n  });\n\n}\n\ninherits(DrilldownOverlayBehavior, CommandInterceptor);\n\nDrilldownOverlayBehavior.prototype.updateDrilldownOverlay = function(shape) {\n  var canvas = this._canvas;\n\n  if (!shape) {\n    return;\n  }\n\n  var root = canvas.findRoot(shape);\n  if (root) {\n    this.updateOverlayVisibility(root);\n  }\n};\n\n\nDrilldownOverlayBehavior.prototype.canDrillDown = function(element) {\n  var canvas = this._canvas;\n  return is(element, 'bpmn:SubProcess') && canvas.findRoot(planeId(element));\n};\n\n/**\n * Updates visibility of the drilldown overlay. If the plane has no elements,\n * the drilldown will be only shown when the element is selected.\n *\n * @param {djs.model.Shape|djs.model.Root} element collapsed shape or root element\n */\nDrilldownOverlayBehavior.prototype.updateOverlayVisibility = function(element) {\n  var overlays = this._overlays;\n\n  var bo = element.businessObject;\n\n  var overlay = overlays.get({ element: bo.id, type: 'drilldown' })[0];\n\n  if (!overlay) {\n    return;\n  }\n\n  var hasContent = bo && bo.flowElements && bo.flowElements.length;\n  classes(overlay.html).toggle(EMPTY_MARKER, !hasContent);\n};\n\n/**\n * Attaches a drilldown button to the given element. We assume that the plane has\n * the same id as the element.\n *\n * @param {djs.model.Shape} element collapsed shape\n */\nDrilldownOverlayBehavior.prototype.addOverlay = function(element) {\n  var canvas = this._canvas;\n  var overlays = this._overlays;\n\n  var existingOverlays = overlays.get({ element: element, type: 'drilldown' });\n  if (existingOverlays.length) {\n    this.removeOverlay(element);\n  }\n\n  var button = domify('<button class=\"bjs-drilldown\">' + ARROW_DOWN_SVG + '</button>');\n\n  button.addEventListener('click', function() {\n    canvas.setRootElement(canvas.findRoot(planeId(element)));\n  });\n\n  overlays.add(element, 'drilldown', {\n    position: {\n      bottom: -7,\n      right: -8\n    },\n    html: button\n  });\n\n  this.updateOverlayVisibility(element);\n};\n\nDrilldownOverlayBehavior.prototype.removeOverlay = function(element) {\n  var overlays = this._overlays;\n\n  overlays.remove({\n    element: element,\n    type: 'drilldown'\n  });\n};\n\nDrilldownOverlayBehavior.$inject = [\n  'canvas',\n  'eventBus',\n  'elementRegistry',\n  'overlays'\n];"
    },
    "3": {
        "bug_file": "lib/util/DrilldownUtil.js",
        "compressed": "NO",
        "line_numbers": 29,
        "compressed_line_numbers": 29,
        "compressed_bug_file_content": "import { is } from './ModelUtil';\n\n\nexport var planePostfix = '_plane';\n\n/**\n * Returns the ID of the plane associated with an element.\n *\n * @param  {djs.model.Base|ModdleElement} element\n * @returns {String} id of the associated plane\n */\nexport function planeId(element) {\n  if (is(element, 'bpmn:SubProcess')) {\n    return element.id + planePostfix;\n  }\n\n  return element.id;\n}\n\n/**\n * Returns returns the plane ID for a given ID, as if it was associated with a\n * subprocess.\n *\n * @param {String} shape ID\n * @returns\n */\nexport function asPlaneId(string) {\n  return string + planePostfix;\n}"
    },
    "4": {
        "bug_file": "lib/features/modeling/cmd/UpdateCanvasRootHandler.js",
        "compressed": "NO",
        "line_numbers": 85,
        "compressed_line_numbers": 85,
        "compressed_bug_file_content": "import {\n  add as collectionAdd,\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\nimport { getDi } from '../../../util/ModelUtil';\n\n\nexport default function UpdateCanvasRootHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\n\nUpdateCanvasRootHandler.$inject = [\n  'canvas',\n  'modeling'\n];\n\n\nUpdateCanvasRootHandler.prototype.execute = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = canvas.getRootElement(),\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = oldRootBusinessObject.$parent,\n      diPlane = getDi(oldRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(newRoot);\n  canvas.removeRootElement(oldRoot);\n\n  // (2) update root elements\n  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = bpmnDefinitions;\n\n  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = null;\n\n  // (3) wire di\n  oldRoot.di = null;\n\n  diPlane.bpmnElement = newRootBusinessObject;\n  newRoot.di = diPlane;\n\n  context.oldRoot = oldRoot;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n};\n\n\nUpdateCanvasRootHandler.prototype.revert = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = context.oldRoot,\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = newRootBusinessObject.$parent,\n      diPlane = getDi(newRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(oldRoot);\n  canvas.removeRootElement(newRoot);\n\n  // (2) update root elements\n  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = null;\n\n  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = bpmnDefinitions;\n\n  // (3) wire di\n  newRoot.di = null;\n\n  diPlane.bpmnElement = oldRootBusinessObject;\n  oldRoot.di = diPlane;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n};"
    },
    "5": {
        "bug_file": "lib/features/modeling/behavior/RootElementReferenceBehavior.js",
        "compressed": "NO",
        "line_numbers": 185,
        "compressed_line_numbers": 185,
        "compressed_bug_file_content": "import inherits from 'inherits';\n\nimport {\n  find,\n  isArray,\n  matchPattern,\n  some\n} from 'min-dash';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\nimport {\n  getBusinessObject,\n  is\n} from '../../../util/ModelUtil';\n\nimport { isAny } from '../util/ModelingUtil';\n\nimport { hasEventDefinition } from '../../../util/DiUtil';\n\nvar LOW_PRIORITY = 500;\n\n\n/**\n * Add referenced root elements (error, escalation, message, signal) if they don't exist.\n * Copy referenced root elements on copy & paste.\n */\nexport default function RootElementReferenceBehavior(\n    bpmnjs, eventBus, injector, moddleCopy, bpmnFactory\n) {\n  injector.invoke(CommandInterceptor, this);\n\n  function canHaveRootElementReference(element) {\n    return isAny(element, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ]) ||\n      hasAnyEventDefinition(element, [\n        'bpmn:ErrorEventDefinition',\n        'bpmn:EscalationEventDefinition',\n        'bpmn:MessageEventDefinition',\n        'bpmn:SignalEventDefinition'\n      ]);\n  }\n\n  function hasRootElement(rootElement) {\n    var definitions = bpmnjs.getDefinitions(),\n        rootElements = definitions.get('rootElements');\n\n    return !!find(rootElements, matchPattern({ id: rootElement.id }));\n  }\n\n  function getRootElementReferencePropertyName(eventDefinition) {\n    if (is(eventDefinition, 'bpmn:ErrorEventDefinition')) {\n      return 'errorRef';\n    } else if (is(eventDefinition, 'bpmn:EscalationEventDefinition')) {\n      return 'escalationRef';\n    } else if (is(eventDefinition, 'bpmn:MessageEventDefinition')) {\n      return 'messageRef';\n    } else if (is(eventDefinition, 'bpmn:SignalEventDefinition')) {\n      return 'signalRef';\n    }\n  }\n\n  function getRootElement(businessObject) {\n    if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {\n      return businessObject.get('messageRef');\n    }\n\n    var eventDefinitions = businessObject.get('eventDefinitions'),\n        eventDefinition = eventDefinitions[ 0 ];\n\n    return eventDefinition.get(getRootElementReferencePropertyName(eventDefinition));\n  }\n\n  function setRootElement(businessObject, rootElement) {\n    if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {\n      return businessObject.set('messageRef', rootElement);\n    }\n\n    var eventDefinitions = businessObject.get('eventDefinitions'),\n        eventDefinition = eventDefinitions[ 0 ];\n\n    return eventDefinition.set(getRootElementReferencePropertyName(eventDefinition), rootElement);\n  }\n\n  // create shape\n  this.executed('shape.create', function(context) {\n    var shape = context.shape;\n\n    if (!canHaveRootElementReference(shape)) {\n      return;\n    }\n\n    var businessObject = getBusinessObject(shape),\n        rootElement = getRootElement(businessObject),\n        rootElements;\n\n    if (rootElement && !hasRootElement(rootElement)) {\n      rootElements = bpmnjs.getDefinitions().get('rootElements');\n\n      // add root element\n      collectionAdd(rootElements, rootElement);\n\n      context.addedRootElement = rootElement;\n    }\n  }, true);\n\n  this.reverted('shape.create', function(context) {\n    var addedRootElement = context.addedRootElement;\n\n    if (!addedRootElement) {\n      return;\n    }\n\n    var rootElements = bpmnjs.getDefinitions().get('rootElements');\n\n    // remove root element\n    collectionRemove(rootElements, addedRootElement);\n  }, true);\n\n  eventBus.on('copyPaste.copyElement', function(context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n\n    if (!canHaveRootElementReference(element)) {\n      return;\n    }\n\n    var businessObject = getBusinessObject(element),\n        rootElement = getRootElement(businessObject);\n\n    if (rootElement) {\n      descriptor.referencedRootElement = rootElement;\n    }\n  });\n\n  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        businessObject = descriptor.businessObject;\n\n    if (!canHaveRootElementReference(businessObject)) {\n      return;\n    }\n\n    var referencedRootElement = descriptor.referencedRootElement;\n\n    if (!referencedRootElement) {\n      return;\n    }\n\n    if (!hasRootElement(referencedRootElement)) {\n      referencedRootElement = moddleCopy.copyElement(\n        referencedRootElement,\n        bpmnFactory.create(referencedRootElement.$type)\n      );\n    }\n\n    setRootElement(businessObject, referencedRootElement);\n  });\n}\n\nRootElementReferenceBehavior.$inject = [\n  'bpmnjs',\n  'eventBus',\n  'injector',\n  'moddleCopy',\n  'bpmnFactory'\n];\n\ninherits(RootElementReferenceBehavior, CommandInterceptor);\n\n// helpers //////////\n\nfunction hasAnyEventDefinition(element, types) {\n  if (!isArray(types)) {\n    types = [ types ];\n  }\n\n  return some(types, function(type) {\n    return hasEventDefinition(element, type);\n  });\n}"
    },
    "6": {
        "bug_file": "lib/core/index.js",
        "compressed": "NO",
        "line_numbers": 9,
        "compressed_line_numbers": 9,
        "compressed_bug_file_content": "import DrawModule from '../draw';\nimport ImportModule from '../import';\n\nexport default {\n  __depends__: [\n    DrawModule,\n    ImportModule\n  ]\n};"
    }
}