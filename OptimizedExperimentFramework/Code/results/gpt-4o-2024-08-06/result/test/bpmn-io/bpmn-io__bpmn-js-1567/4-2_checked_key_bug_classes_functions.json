{
    "bug_classes": {
        "1": {
            "class_name": "DrilldownBreadcrumbs (not found) ",
            "file_path": "lib/features/drilldown/DrilldownBreadcrumbs.js",
            "class_details": [
                {
                    "name": "DrilldownBreadcrumbs",
                    "start_line": 1,
                    "end_line": 71
                }
            ],
            "class_code": [
                "import { domify, classes } from 'min-dom';",
                "",
                "import { escapeHTML } from 'diagram-js/lib/util/EscapeUtil';",
                "import { getBusinessObject, is } from '../../util/ModelUtil';",
                "import { planeId } from '../../util/DrilldownUtil';",
                "",
                "var OPEN_CLASS = 'bjs-breadcrumbs-shown';",
                "",
                "",
                "/**",
                " * Adds Overlays that allow switching planes on collapsed subprocesses.",
                " *",
                " * @param {eventBus} eventBus",
                " * @param {elementRegistry} elementRegistry",
                " * @param {overlays} overlays",
                " * @param {canvas} canvas",
                " */",
                "export default function DrilldownBreadcrumbs(eventBus, elementRegistry, overlays, canvas) {",
                "  var breadcrumbs = domify('<ul class=\"bjs-breadcrumbs\"></ul>');",
                "  var container = canvas.getContainer();",
                "  var containerClasses = classes(container);",
                "  container.appendChild(breadcrumbs);",
                "",
                "  function updateBreadcrumbs(element) {",
                "    var parents = getParentChain(element);",
                "",
                "    var path = parents.map(function(el) {",
                "      var title = escapeHTML(el.name || el.id);",
                "      var link = domify('<li><span class=\"bjs-crumb\"><a title=\"' + title + '\">' + title + '</a></span></li>');",
                "",
                "      link.addEventListener('click', function() {",
                "        canvas.setRootElement(canvas.findRoot(planeId(el)) || canvas.findRoot(el.id));",
                "      });",
                "",
                "      return link;",
                "    });",
                "",
                "    breadcrumbs.innerHTML = '';",
                "",
                "    // show breadcrumbs and expose state to .djs-container",
                "    var visible = path.length > 1;",
                "    containerClasses.toggle(OPEN_CLASS, visible);",
                "",
                "    path.forEach(function(el) {",
                "      breadcrumbs.appendChild(el);",
                "    });",
                "  }",
                "",
                "  eventBus.on('root.set', function(event) {",
                "    updateBreadcrumbs(event.element);",
                "  });",
                "",
                "}",
                "",
                "DrilldownBreadcrumbs.$inject = [ 'eventBus', 'elementRegistry', 'overlays', 'canvas' ];",
                "",
                "",
                "// helpers",
                "function getParentChain(child) {",
                "  var bo = getBusinessObject(child);",
                "",
                "  var parents = [];",
                "",
                "  for (var element = bo; element; element = element.$parent) {",
                "    if (is(element, 'bpmn:SubProcess') || is(element, 'bpmn:Process')) {",
                "      parents.push(element);",
                "    }",
                "  }",
                "",
                "  return parents.reverse();",
                "}"
            ]
        },
        "2": {
            "class_name": "DrilldownOverlayBehavior (not found) ",
            "file_path": "lib/features/drilldown/DrilldownOverlayBehavior.js",
            "class_details": [
                {
                    "name": "DrilldownOverlayBehavior",
                    "start_line": 1,
                    "end_line": 181
                }
            ],
            "class_code": [
                "import inherits from 'inherits';",
                "",
                "import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';",
                "import { is } from '../../util/ModelUtil';",
                "import { classes, domify } from 'min-dom';",
                "import { planeId } from '../../util/DrilldownUtil';",
                "",
                "var LOW_PRIORITY = 250;",
                "var ARROW_DOWN_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.81801948,3.50735931 L10.4996894,9.1896894 L10.5,4 L12,4 L12,12 L4,12 L4,10.5 L9.6896894,10.4996894 L3.75735931,4.56801948 C3.46446609,4.27512627 3.46446609,3.80025253 3.75735931,3.50735931 C4.05025253,3.21446609 4.52512627,3.21446609 4.81801948,3.50735931 Z\"/></svg>';",
                "",
                "var EMPTY_MARKER = 'bjs-drilldown-empty';",
                "",
                "export default function DrilldownOverlayBehavior(",
                "    canvas, eventBus, elementRegistry, overlays",
                ") {",
                "  CommandInterceptor.call(this, eventBus);",
                "",
                "  this._canvas = canvas;",
                "  this._eventBus = eventBus;",
                "  this._elementRegistry = elementRegistry;",
                "  this._overlays = overlays;",
                "",
                "  var self = this;",
                "",
                "  this.executed('shape.toggleCollapse', LOW_PRIORITY, function(context) {",
                "    var shape = context.shape;",
                "",
                "    // Add overlay to the collapsed shape",
                "    if (self.canDrillDown(shape)) {",
                "      self.addOverlay(shape);",
                "    } else {",
                "      self.removeOverlay(shape);",
                "    }",
                "  }, true);",
                "",
                "",
                "  this.reverted('shape.toggleCollapse', LOW_PRIORITY, function(context) {",
                "    var shape = context.shape;",
                "",
                "    // Add overlay to the collapsed shape",
                "    if (self.canDrillDown(shape)) {",
                "      self.addOverlay(shape);",
                "    } else {",
                "      self.removeOverlay(shape);",
                "    }",
                "  }, true);",
                "",
                "",
                "  this.executed(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,",
                "    function(context) {",
                "      var oldParent = context.oldParent,",
                "          newParent = context.newParent || context.parent,",
                "          shape = context.shape;",
                "",
                "      // Add overlay to the collapsed shape",
                "      if (self.canDrillDown(shape)) {",
                "        self.addOverlay(shape);",
                "      }",
                "",
                "      self.updateDrilldownOverlay(oldParent);",
                "      self.updateDrilldownOverlay(newParent);",
                "      self.updateDrilldownOverlay(shape);",
                "    }, true);",
                "",
                "",
                "  this.reverted(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,",
                "    function(context) {",
                "      var oldParent = context.oldParent,",
                "          newParent = context.newParent || context.parent,",
                "          shape = context.shape;",
                "",
                "      // Add overlay to the collapsed shape",
                "      if (self.canDrillDown(shape)) {",
                "        self.addOverlay(shape);",
                "      }",
                "",
                "      self.updateDrilldownOverlay(oldParent);",
                "      self.updateDrilldownOverlay(newParent);",
                "      self.updateDrilldownOverlay(shape);",
                "    }, true);",
                "",
                "",
                "  eventBus.on('import.done', function() {",
                "    elementRegistry.filter(function(e) {",
                "      return self.canDrillDown(e);",
                "    }).map(function(el) {",
                "      self.addOverlay(el);",
                "    });",
                "  });",
                "",
                "}",
                "",
                "inherits(DrilldownOverlayBehavior, CommandInterceptor);",
                "",
                "DrilldownOverlayBehavior.prototype.updateDrilldownOverlay = function(shape) {",
                "  var canvas = this._canvas;",
                "",
                "  if (!shape) {",
                "    return;",
                "  }",
                "",
                "  var root = canvas.findRoot(shape);",
                "  if (root) {",
                "    this.updateOverlayVisibility(root);",
                "  }",
                "};",
                "",
                "",
                "DrilldownOverlayBehavior.prototype.canDrillDown = function(element) {",
                "  var canvas = this._canvas;",
                "  return is(element, 'bpmn:SubProcess') && canvas.findRoot(planeId(element));",
                "};",
                "",
                "/**",
                " * Updates visibility of the drilldown overlay. If the plane has no elements,",
                " * the drilldown will be only shown when the element is selected.",
                " *",
                " * @param {djs.model.Shape|djs.model.Root} element collapsed shape or root element",
                " */",
                "DrilldownOverlayBehavior.prototype.updateOverlayVisibility = function(element) {",
                "  var overlays = this._overlays;",
                "",
                "  var bo = element.businessObject;",
                "",
                "  var overlay = overlays.get({ element: bo.id, type: 'drilldown' })[0];",
                "",
                "  if (!overlay) {",
                "    return;",
                "  }",
                "",
                "  var hasContent = bo && bo.flowElements && bo.flowElements.length;",
                "  classes(overlay.html).toggle(EMPTY_MARKER, !hasContent);",
                "};",
                "",
                "/**",
                " * Attaches a drilldown button to the given element. We assume that the plane has",
                " * the same id as the element.",
                " *",
                " * @param {djs.model.Shape} element collapsed shape",
                " */",
                "DrilldownOverlayBehavior.prototype.addOverlay = function(element) {",
                "  var canvas = this._canvas;",
                "  var overlays = this._overlays;",
                "",
                "  var existingOverlays = overlays.get({ element: element, type: 'drilldown' });",
                "  if (existingOverlays.length) {",
                "    this.removeOverlay(element);",
                "  }",
                "",
                "  var button = domify('<button class=\"bjs-drilldown\">' + ARROW_DOWN_SVG + '</button>');",
                "",
                "  button.addEventListener('click', function() {",
                "    canvas.setRootElement(canvas.findRoot(planeId(element)));",
                "  });",
                "",
                "  overlays.add(element, 'drilldown', {",
                "    position: {",
                "      bottom: -7,",
                "      right: -8",
                "    },",
                "    html: button",
                "  });",
                "",
                "  this.updateOverlayVisibility(element);",
                "};",
                "",
                "DrilldownOverlayBehavior.prototype.removeOverlay = function(element) {",
                "  var overlays = this._overlays;",
                "",
                "  overlays.remove({",
                "    element: element,",
                "    type: 'drilldown'",
                "  });",
                "};",
                "",
                "DrilldownOverlayBehavior.$inject = [",
                "  'canvas',",
                "  'eventBus',",
                "  'elementRegistry',",
                "  'overlays'",
                "];"
            ]
        },
        "3": {
            "class_name": "UpdateCanvasRootHandler (not found) ",
            "file_path": "lib/features/modeling/cmd/UpdateCanvasRootHandler.js",
            "class_details": [
                {
                    "name": "UpdateCanvasRootHandler",
                    "start_line": 1,
                    "end_line": 85
                }
            ],
            "class_code": [
                "import {",
                "  add as collectionAdd,",
                "  remove as collectionRemove",
                "} from 'diagram-js/lib/util/Collections';",
                "",
                "import { getDi } from '../../../util/ModelUtil';",
                "",
                "",
                "export default function UpdateCanvasRootHandler(canvas, modeling) {",
                "  this._canvas = canvas;",
                "  this._modeling = modeling;",
                "}",
                "",
                "UpdateCanvasRootHandler.$inject = [",
                "  'canvas',",
                "  'modeling'",
                "];",
                "",
                "",
                "UpdateCanvasRootHandler.prototype.execute = function(context) {",
                "",
                "  var canvas = this._canvas;",
                "",
                "  var newRoot = context.newRoot,",
                "      newRootBusinessObject = newRoot.businessObject,",
                "      oldRoot = canvas.getRootElement(),",
                "      oldRootBusinessObject = oldRoot.businessObject,",
                "      bpmnDefinitions = oldRootBusinessObject.$parent,",
                "      diPlane = getDi(oldRoot);",
                "",
                "  // (1) replace process old <> new root",
                "  canvas.setRootElement(newRoot);",
                "  canvas.removeRootElement(oldRoot);",
                "",
                "  // (2) update root elements",
                "  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);",
                "  newRootBusinessObject.$parent = bpmnDefinitions;",
                "",
                "  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);",
                "  oldRootBusinessObject.$parent = null;",
                "",
                "  // (3) wire di",
                "  oldRoot.di = null;",
                "",
                "  diPlane.bpmnElement = newRootBusinessObject;",
                "  newRoot.di = diPlane;",
                "",
                "  context.oldRoot = oldRoot;",
                "",
                "  // TODO(nikku): return changed elements?",
                "  // return [ newRoot, oldRoot ];",
                "};",
                "",
                "",
                "UpdateCanvasRootHandler.prototype.revert = function(context) {",
                "",
                "  var canvas = this._canvas;",
                "",
                "  var newRoot = context.newRoot,",
                "      newRootBusinessObject = newRoot.businessObject,",
                "      oldRoot = context.oldRoot,",
                "      oldRootBusinessObject = oldRoot.businessObject,",
                "      bpmnDefinitions = newRootBusinessObject.$parent,",
                "      diPlane = getDi(newRoot);",
                "",
                "  // (1) replace process old <> new root",
                "  canvas.setRootElement(oldRoot);",
                "  canvas.removeRootElement(newRoot);",
                "",
                "  // (2) update root elements",
                "  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);",
                "  newRootBusinessObject.$parent = null;",
                "",
                "  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);",
                "  oldRootBusinessObject.$parent = bpmnDefinitions;",
                "",
                "  // (3) wire di",
                "  newRoot.di = null;",
                "",
                "  diPlane.bpmnElement = oldRootBusinessObject;",
                "  oldRoot.di = diPlane;",
                "",
                "  // TODO(nikku): return changed elements?",
                "  // return [ newRoot, oldRoot ];",
                "};"
            ]
        }
    },
    "bug_functions": {
        "4": {
            "function_name": "updateBreadcrumbs (not found) ",
            "file_path": "lib/features/drilldown/DrilldownBreadcrumbs.js",
            "function_details": [
                {
                    "name": "updateBreadcrumbs",
                    "start_line": 1,
                    "end_line": 71
                }
            ],
            "function_code": [
                "import { domify, classes } from 'min-dom';",
                "",
                "import { escapeHTML } from 'diagram-js/lib/util/EscapeUtil';",
                "import { getBusinessObject, is } from '../../util/ModelUtil';",
                "import { planeId } from '../../util/DrilldownUtil';",
                "",
                "var OPEN_CLASS = 'bjs-breadcrumbs-shown';",
                "",
                "",
                "/**",
                " * Adds Overlays that allow switching planes on collapsed subprocesses.",
                " *",
                " * @param {eventBus} eventBus",
                " * @param {elementRegistry} elementRegistry",
                " * @param {overlays} overlays",
                " * @param {canvas} canvas",
                " */",
                "export default function DrilldownBreadcrumbs(eventBus, elementRegistry, overlays, canvas) {",
                "  var breadcrumbs = domify('<ul class=\"bjs-breadcrumbs\"></ul>');",
                "  var container = canvas.getContainer();",
                "  var containerClasses = classes(container);",
                "  container.appendChild(breadcrumbs);",
                "",
                "  function updateBreadcrumbs(element) {",
                "    var parents = getParentChain(element);",
                "",
                "    var path = parents.map(function(el) {",
                "      var title = escapeHTML(el.name || el.id);",
                "      var link = domify('<li><span class=\"bjs-crumb\"><a title=\"' + title + '\">' + title + '</a></span></li>');",
                "",
                "      link.addEventListener('click', function() {",
                "        canvas.setRootElement(canvas.findRoot(planeId(el)) || canvas.findRoot(el.id));",
                "      });",
                "",
                "      return link;",
                "    });",
                "",
                "    breadcrumbs.innerHTML = '';",
                "",
                "    // show breadcrumbs and expose state to .djs-container",
                "    var visible = path.length > 1;",
                "    containerClasses.toggle(OPEN_CLASS, visible);",
                "",
                "    path.forEach(function(el) {",
                "      breadcrumbs.appendChild(el);",
                "    });",
                "  }",
                "",
                "  eventBus.on('root.set', function(event) {",
                "    updateBreadcrumbs(event.element);",
                "  });",
                "",
                "}",
                "",
                "DrilldownBreadcrumbs.$inject = [ 'eventBus', 'elementRegistry', 'overlays', 'canvas' ];",
                "",
                "",
                "// helpers",
                "function getParentChain(child) {",
                "  var bo = getBusinessObject(child);",
                "",
                "  var parents = [];",
                "",
                "  for (var element = bo; element; element = element.$parent) {",
                "    if (is(element, 'bpmn:SubProcess') || is(element, 'bpmn:Process')) {",
                "      parents.push(element);",
                "    }",
                "  }",
                "",
                "  return parents.reverse();",
                "}"
            ]
        },
        "5": {
            "function_name": "execute (not found) ",
            "file_path": "lib/features/modeling/cmd/UpdateCanvasRootHandler.js",
            "function_details": [
                {
                    "name": "execute",
                    "start_line": 1,
                    "end_line": 85
                }
            ],
            "function_code": [
                "import {",
                "  add as collectionAdd,",
                "  remove as collectionRemove",
                "} from 'diagram-js/lib/util/Collections';",
                "",
                "import { getDi } from '../../../util/ModelUtil';",
                "",
                "",
                "export default function UpdateCanvasRootHandler(canvas, modeling) {",
                "  this._canvas = canvas;",
                "  this._modeling = modeling;",
                "}",
                "",
                "UpdateCanvasRootHandler.$inject = [",
                "  'canvas',",
                "  'modeling'",
                "];",
                "",
                "",
                "UpdateCanvasRootHandler.prototype.execute = function(context) {",
                "",
                "  var canvas = this._canvas;",
                "",
                "  var newRoot = context.newRoot,",
                "      newRootBusinessObject = newRoot.businessObject,",
                "      oldRoot = canvas.getRootElement(),",
                "      oldRootBusinessObject = oldRoot.businessObject,",
                "      bpmnDefinitions = oldRootBusinessObject.$parent,",
                "      diPlane = getDi(oldRoot);",
                "",
                "  // (1) replace process old <> new root",
                "  canvas.setRootElement(newRoot);",
                "  canvas.removeRootElement(oldRoot);",
                "",
                "  // (2) update root elements",
                "  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);",
                "  newRootBusinessObject.$parent = bpmnDefinitions;",
                "",
                "  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);",
                "  oldRootBusinessObject.$parent = null;",
                "",
                "  // (3) wire di",
                "  oldRoot.di = null;",
                "",
                "  diPlane.bpmnElement = newRootBusinessObject;",
                "  newRoot.di = diPlane;",
                "",
                "  context.oldRoot = oldRoot;",
                "",
                "  // TODO(nikku): return changed elements?",
                "  // return [ newRoot, oldRoot ];",
                "};",
                "",
                "",
                "UpdateCanvasRootHandler.prototype.revert = function(context) {",
                "",
                "  var canvas = this._canvas;",
                "",
                "  var newRoot = context.newRoot,",
                "      newRootBusinessObject = newRoot.businessObject,",
                "      oldRoot = context.oldRoot,",
                "      oldRootBusinessObject = oldRoot.businessObject,",
                "      bpmnDefinitions = newRootBusinessObject.$parent,",
                "      diPlane = getDi(newRoot);",
                "",
                "  // (1) replace process old <> new root",
                "  canvas.setRootElement(oldRoot);",
                "  canvas.removeRootElement(newRoot);",
                "",
                "  // (2) update root elements",
                "  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);",
                "  newRootBusinessObject.$parent = null;",
                "",
                "  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);",
                "  oldRootBusinessObject.$parent = bpmnDefinitions;",
                "",
                "  // (3) wire di",
                "  newRoot.di = null;",
                "",
                "  diPlane.bpmnElement = oldRootBusinessObject;",
                "  oldRoot.di = diPlane;",
                "",
                "  // TODO(nikku): return changed elements?",
                "  // return [ newRoot, oldRoot ];",
                "};"
            ]
        },
        "6": {
            "function_name": "revert (not found) ",
            "file_path": "lib/features/modeling/cmd/UpdateCanvasRootHandler.js",
            "function_details": [
                {
                    "name": "revert",
                    "start_line": 1,
                    "end_line": 85
                }
            ],
            "function_code": [
                "import {",
                "  add as collectionAdd,",
                "  remove as collectionRemove",
                "} from 'diagram-js/lib/util/Collections';",
                "",
                "import { getDi } from '../../../util/ModelUtil';",
                "",
                "",
                "export default function UpdateCanvasRootHandler(canvas, modeling) {",
                "  this._canvas = canvas;",
                "  this._modeling = modeling;",
                "}",
                "",
                "UpdateCanvasRootHandler.$inject = [",
                "  'canvas',",
                "  'modeling'",
                "];",
                "",
                "",
                "UpdateCanvasRootHandler.prototype.execute = function(context) {",
                "",
                "  var canvas = this._canvas;",
                "",
                "  var newRoot = context.newRoot,",
                "      newRootBusinessObject = newRoot.businessObject,",
                "      oldRoot = canvas.getRootElement(),",
                "      oldRootBusinessObject = oldRoot.businessObject,",
                "      bpmnDefinitions = oldRootBusinessObject.$parent,",
                "      diPlane = getDi(oldRoot);",
                "",
                "  // (1) replace process old <> new root",
                "  canvas.setRootElement(newRoot);",
                "  canvas.removeRootElement(oldRoot);",
                "",
                "  // (2) update root elements",
                "  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);",
                "  newRootBusinessObject.$parent = bpmnDefinitions;",
                "",
                "  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);",
                "  oldRootBusinessObject.$parent = null;",
                "",
                "  // (3) wire di",
                "  oldRoot.di = null;",
                "",
                "  diPlane.bpmnElement = newRootBusinessObject;",
                "  newRoot.di = diPlane;",
                "",
                "  context.oldRoot = oldRoot;",
                "",
                "  // TODO(nikku): return changed elements?",
                "  // return [ newRoot, oldRoot ];",
                "};",
                "",
                "",
                "UpdateCanvasRootHandler.prototype.revert = function(context) {",
                "",
                "  var canvas = this._canvas;",
                "",
                "  var newRoot = context.newRoot,",
                "      newRootBusinessObject = newRoot.businessObject,",
                "      oldRoot = context.oldRoot,",
                "      oldRootBusinessObject = oldRoot.businessObject,",
                "      bpmnDefinitions = newRootBusinessObject.$parent,",
                "      diPlane = getDi(newRoot);",
                "",
                "  // (1) replace process old <> new root",
                "  canvas.setRootElement(oldRoot);",
                "  canvas.removeRootElement(newRoot);",
                "",
                "  // (2) update root elements",
                "  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);",
                "  newRootBusinessObject.$parent = null;",
                "",
                "  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);",
                "  oldRootBusinessObject.$parent = bpmnDefinitions;",
                "",
                "  // (3) wire di",
                "  newRoot.di = null;",
                "",
                "  diPlane.bpmnElement = oldRootBusinessObject;",
                "  oldRoot.di = diPlane;",
                "",
                "  // TODO(nikku): return changed elements?",
                "  // return [ newRoot, oldRoot ];",
                "};"
            ]
        },
        "7": {
            "function_name": "updateDrilldownOverlay (not found) ",
            "file_path": "lib/features/drilldown/DrilldownOverlayBehavior.js",
            "function_details": [
                {
                    "name": "updateDrilldownOverlay",
                    "start_line": 1,
                    "end_line": 181
                }
            ],
            "function_code": [
                "import inherits from 'inherits';",
                "",
                "import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';",
                "import { is } from '../../util/ModelUtil';",
                "import { classes, domify } from 'min-dom';",
                "import { planeId } from '../../util/DrilldownUtil';",
                "",
                "var LOW_PRIORITY = 250;",
                "var ARROW_DOWN_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.81801948,3.50735931 L10.4996894,9.1896894 L10.5,4 L12,4 L12,12 L4,12 L4,10.5 L9.6896894,10.4996894 L3.75735931,4.56801948 C3.46446609,4.27512627 3.46446609,3.80025253 3.75735931,3.50735931 C4.05025253,3.21446609 4.52512627,3.21446609 4.81801948,3.50735931 Z\"/></svg>';",
                "",
                "var EMPTY_MARKER = 'bjs-drilldown-empty';",
                "",
                "export default function DrilldownOverlayBehavior(",
                "    canvas, eventBus, elementRegistry, overlays",
                ") {",
                "  CommandInterceptor.call(this, eventBus);",
                "",
                "  this._canvas = canvas;",
                "  this._eventBus = eventBus;",
                "  this._elementRegistry = elementRegistry;",
                "  this._overlays = overlays;",
                "",
                "  var self = this;",
                "",
                "  this.executed('shape.toggleCollapse', LOW_PRIORITY, function(context) {",
                "    var shape = context.shape;",
                "",
                "    // Add overlay to the collapsed shape",
                "    if (self.canDrillDown(shape)) {",
                "      self.addOverlay(shape);",
                "    } else {",
                "      self.removeOverlay(shape);",
                "    }",
                "  }, true);",
                "",
                "",
                "  this.reverted('shape.toggleCollapse', LOW_PRIORITY, function(context) {",
                "    var shape = context.shape;",
                "",
                "    // Add overlay to the collapsed shape",
                "    if (self.canDrillDown(shape)) {",
                "      self.addOverlay(shape);",
                "    } else {",
                "      self.removeOverlay(shape);",
                "    }",
                "  }, true);",
                "",
                "",
                "  this.executed(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,",
                "    function(context) {",
                "      var oldParent = context.oldParent,",
                "          newParent = context.newParent || context.parent,",
                "          shape = context.shape;",
                "",
                "      // Add overlay to the collapsed shape",
                "      if (self.canDrillDown(shape)) {",
                "        self.addOverlay(shape);",
                "      }",
                "",
                "      self.updateDrilldownOverlay(oldParent);",
                "      self.updateDrilldownOverlay(newParent);",
                "      self.updateDrilldownOverlay(shape);",
                "    }, true);",
                "",
                "",
                "  this.reverted(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,",
                "    function(context) {",
                "      var oldParent = context.oldParent,",
                "          newParent = context.newParent || context.parent,",
                "          shape = context.shape;",
                "",
                "      // Add overlay to the collapsed shape",
                "      if (self.canDrillDown(shape)) {",
                "        self.addOverlay(shape);",
                "      }",
                "",
                "      self.updateDrilldownOverlay(oldParent);",
                "      self.updateDrilldownOverlay(newParent);",
                "      self.updateDrilldownOverlay(shape);",
                "    }, true);",
                "",
                "",
                "  eventBus.on('import.done', function() {",
                "    elementRegistry.filter(function(e) {",
                "      return self.canDrillDown(e);",
                "    }).map(function(el) {",
                "      self.addOverlay(el);",
                "    });",
                "  });",
                "",
                "}",
                "",
                "inherits(DrilldownOverlayBehavior, CommandInterceptor);",
                "",
                "DrilldownOverlayBehavior.prototype.updateDrilldownOverlay = function(shape) {",
                "  var canvas = this._canvas;",
                "",
                "  if (!shape) {",
                "    return;",
                "  }",
                "",
                "  var root = canvas.findRoot(shape);",
                "  if (root) {",
                "    this.updateOverlayVisibility(root);",
                "  }",
                "};",
                "",
                "",
                "DrilldownOverlayBehavior.prototype.canDrillDown = function(element) {",
                "  var canvas = this._canvas;",
                "  return is(element, 'bpmn:SubProcess') && canvas.findRoot(planeId(element));",
                "};",
                "",
                "/**",
                " * Updates visibility of the drilldown overlay. If the plane has no elements,",
                " * the drilldown will be only shown when the element is selected.",
                " *",
                " * @param {djs.model.Shape|djs.model.Root} element collapsed shape or root element",
                " */",
                "DrilldownOverlayBehavior.prototype.updateOverlayVisibility = function(element) {",
                "  var overlays = this._overlays;",
                "",
                "  var bo = element.businessObject;",
                "",
                "  var overlay = overlays.get({ element: bo.id, type: 'drilldown' })[0];",
                "",
                "  if (!overlay) {",
                "    return;",
                "  }",
                "",
                "  var hasContent = bo && bo.flowElements && bo.flowElements.length;",
                "  classes(overlay.html).toggle(EMPTY_MARKER, !hasContent);",
                "};",
                "",
                "/**",
                " * Attaches a drilldown button to the given element. We assume that the plane has",
                " * the same id as the element.",
                " *",
                " * @param {djs.model.Shape} element collapsed shape",
                " */",
                "DrilldownOverlayBehavior.prototype.addOverlay = function(element) {",
                "  var canvas = this._canvas;",
                "  var overlays = this._overlays;",
                "",
                "  var existingOverlays = overlays.get({ element: element, type: 'drilldown' });",
                "  if (existingOverlays.length) {",
                "    this.removeOverlay(element);",
                "  }",
                "",
                "  var button = domify('<button class=\"bjs-drilldown\">' + ARROW_DOWN_SVG + '</button>');",
                "",
                "  button.addEventListener('click', function() {",
                "    canvas.setRootElement(canvas.findRoot(planeId(element)));",
                "  });",
                "",
                "  overlays.add(element, 'drilldown', {",
                "    position: {",
                "      bottom: -7,",
                "      right: -8",
                "    },",
                "    html: button",
                "  });",
                "",
                "  this.updateOverlayVisibility(element);",
                "};",
                "",
                "DrilldownOverlayBehavior.prototype.removeOverlay = function(element) {",
                "  var overlays = this._overlays;",
                "",
                "  overlays.remove({",
                "    element: element,",
                "    type: 'drilldown'",
                "  });",
                "};",
                "",
                "DrilldownOverlayBehavior.$inject = [",
                "  'canvas',",
                "  'eventBus',",
                "  'elementRegistry',",
                "  'overlays'",
                "];"
            ]
        }
    }
}