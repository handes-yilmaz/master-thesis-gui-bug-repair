{
    "1": {
        "bug_file": "lib/features/replace/ReplaceOptions.js",
        "compressed": "YES",
        "line_numbers": 820,
        "compressed_line_numbers": 67,
        "compressed_bug_file_content": "export var START_EVENT = [\n\n\nexport var START_EVENT_SUB_PROCESS = [\n\n\nexport var INTERMEDIATE_EVENT = [\n\n\nexport var END_EVENT = [\n\n\nexport var GATEWAY = [\n\n\n  // Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194\n  // {\n  //   label: 'Event based instantiating Gateway',\n  //   actionName: 'replace-with-exclusive-event-based-gateway',\n  //   className: 'bpmn-icon-exclusive-event-based',\n  //   target: {\n  //     type: 'bpmn:EventBasedGateway'\n  //   },\n  //   options: {\n  //     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }\n  //   }\n  // },\n  // {\n  //   label: 'Parallel Event based instantiating Gateway',\n  //   actionName: 'replace-with-parallel-event-based-instantiate-gateway',\n  //   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',\n  //   target: {\n  //     type: 'bpmn:EventBasedGateway'\n  //   },\n  //   options: {\n  //     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }\n  //   }\n  // }\n\n\nexport var SUBPROCESS_EXPANDED = [\n\n\nexport var TRANSACTION = [\n\n\nexport var EVENT_SUB_PROCESS = [\n\n\nexport var TASK = [\n\n\nexport var BOUNDARY_EVENT = [\n\n\nexport var EVENT_SUB_PROCESS_START_EVENT = [\n\n\nexport var SEQUENCE_FLOW = [\n\n\nexport var PARTICIPANT = [\n\n\n    // TODO(@janstuemmel): maybe design new icon\n\n\n"
    },
    "2": {
        "bug_file": "lib/features/popup-menu/ReplaceMenuProvider.js",
        "compressed": "YES",
        "line_numbers": 546,
        "compressed_line_numbers": 163,
        "compressed_bug_file_content": "import {\n\n\nimport {\n\n\nimport {\n\n\nimport {\n\n\nimport * as replaceOptions from '../replace/ReplaceOptions';\n\n\n/**\n * This module is an element agnostic replace menu provider for the popup menu.\n */\nexport default function ReplaceMenuProvider(\n\n\n/**\n * Register replace menu provider in the popup menu\n */\n\n\n/**\n * Get all entries from replaceOptions for the given element and apply filters\n * on them. Get for example only elements, which are different from the current one.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\n\n\n  // start events outside sub processes\n\n\n  // expanded/collapsed pools\n\n\n  // start events inside event sub processes\n\n\n      // filters elements which types and event definition are equal but have have different interrupting types\n\n\n  // start events inside sub processes\n\n\n  // end events\n\n\n      // hide cancel end events outside transactions\n\n\n  // boundary events\n\n\n  // intermediate events\n\n\n  // gateways\n\n\n  // transactions\n\n\n  // expanded event sub processes\n\n\n  // expanded sub processes\n\n\n  // collapsed ad hoc sub processes\n\n\n  // sequence flows\n\n\n  // flow nodes\n\n\n    // collapsed SubProcess can not be replaced with itself\n\n\n/**\n * Get a list of header items for the given element. This includes buttons\n * for multi instance markers and for the ad hoc marker.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\n\n\n/**\n * Creates an array of menu entry objects for a given element and filters the replaceOptions\n * according to a filter function.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n *\n * @return {Array<Object>} a list of menu items\n */\n\n\n/**\n * Creates an array of menu entry objects for a given sequence flow.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n\n * @return {Array<Object>} a list of menu items\n */\n\n\n      // default flows\n\n\n      // conditional flows\n\n\n/**\n * Creates and returns a single menu entry item.\n *\n * @param  {Object} definition a single replace options definition object\n * @param  {djs.model.Base} element\n * @param  {Function} [action] an action callback function which gets called when\n *                             the menu entry is being triggered.\n *\n * @return {Object} menu entry item\n */\n\n\n/**\n * Get a list of menu items containing buttons for multi instance markers\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu items\n */\n\n\n/**\n * Get a list of menu items containing buttons for multi instance markers\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu items\n */\n\n\n/**\n * Get the menu items containing a button for the ad hoc marker\n *\n * @param  {djs.model.Base} element\n *\n * @return {Object} a menu item\n */\n\n\n"
    },
    "3": {
        "bug_file": "lib/features/popup-menu/util/TypeUtil.js",
        "compressed": "NO",
        "line_numbers": 44,
        "compressed_line_numbers": 44,
        "compressed_bug_file_content": "import {\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\nimport {\n  isExpanded\n} from '../../../util/DiUtil';\n\n\n/**\n * Returns true, if an element is from a different type\n * than a target definition. Takes into account the type,\n * event definition type and triggeredByEvent property.\n *\n * @param {djs.model.Base} element\n *\n * @return {boolean}\n */\nexport function isDifferentType(element) {\n\n  return function(entry) {\n    var target = entry.target;\n\n    var businessObject = getBusinessObject(element),\n        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];\n\n    var isTypeEqual = businessObject.$type === target.type;\n\n    var isEventDefinitionEqual = (\n      (eventDefinition && eventDefinition.$type) === target.eventDefinitionType\n    );\n\n    var isTriggeredByEventEqual = (\n      businessObject.triggeredByEvent === target.triggeredByEvent\n    );\n\n    var isExpandedEqual = (\n      target.isExpanded === undefined ||\n      target.isExpanded === isExpanded(businessObject)\n    );\n\n    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;\n  };\n}"
    }
}