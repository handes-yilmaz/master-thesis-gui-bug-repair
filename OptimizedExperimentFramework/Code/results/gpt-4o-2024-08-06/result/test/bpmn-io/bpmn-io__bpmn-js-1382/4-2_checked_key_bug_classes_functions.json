{
    "bug_classes": {
        "1": {
            "class_name": "START_EVENT (not found) 1-501",
            "file_path": "lib/features/replace/ReplaceOptions.js",
            "class_details": [
                {
                    "name": "START_EVENT",
                    "start_line": 1,
                    "end_line": 501
                }
            ],
            "class_code": [
                "export var START_EVENT = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throwing',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message Start Event',",
                "    actionName: 'replace-with-message-start',",
                "    className: 'bpmn-icon-start-event-message',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Timer Start Event',",
                "    actionName: 'replace-with-timer-start',",
                "    className: 'bpmn-icon-start-event-timer',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:TimerEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Conditional Start Event',",
                "    actionName: 'replace-with-conditional-start',",
                "    className: 'bpmn-icon-start-event-condition',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:ConditionalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal Start Event',",
                "    actionName: 'replace-with-signal-start',",
                "    className: 'bpmn-icon-start-event-signal',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  }",
                "];",
                "",
                "export var START_EVENT_SUB_PROCESS = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throwing',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  }",
                "];",
                "",
                "export var INTERMEDIATE_EVENT = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message Intermediate Catch Event',",
                "    actionName: 'replace-with-message-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-message',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message Intermediate Throw Event',",
                "    actionName: 'replace-with-message-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-message',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Timer Intermediate Catch Event',",
                "    actionName: 'replace-with-timer-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-timer',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:TimerEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Escalation Intermediate Throw Event',",
                "    actionName: 'replace-with-escalation-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-escalation',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:EscalationEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Conditional Intermediate Catch Event',",
                "    actionName: 'replace-with-conditional-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-condition',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:ConditionalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Link Intermediate Catch Event',",
                "    actionName: 'replace-with-link-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-link',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:LinkEventDefinition',",
                "      eventDefinitionAttrs: {",
                "        name: ''",
                "      }",
                "    }",
                "  },",
                "  {",
                "    label: 'Link Intermediate Throw Event',",
                "    actionName: 'replace-with-link-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-link',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:LinkEventDefinition',",
                "      eventDefinitionAttrs: {",
                "        name: ''",
                "      }",
                "    }",
                "  },",
                "  {",
                "    label: 'Compensation Intermediate Throw Event',",
                "    actionName: 'replace-with-compensation-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-compensation',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:CompensateEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal Intermediate Catch Event',",
                "    actionName: 'replace-with-signal-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-signal',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal Intermediate Throw Event',",
                "    actionName: 'replace-with-signal-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-signal',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  }",
                "];",
                "",
                "export var END_EVENT = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message End Event',",
                "    actionName: 'replace-with-message-end',",
                "    className: 'bpmn-icon-end-event-message',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Escalation End Event',",
                "    actionName: 'replace-with-escalation-end',",
                "    className: 'bpmn-icon-end-event-escalation',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:EscalationEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Error End Event',",
                "    actionName: 'replace-with-error-end',",
                "    className: 'bpmn-icon-end-event-error',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:ErrorEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Cancel End Event',",
                "    actionName: 'replace-with-cancel-end',",
                "    className: 'bpmn-icon-end-event-cancel',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:CancelEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Compensation End Event',",
                "    actionName: 'replace-with-compensation-end',",
                "    className: 'bpmn-icon-end-event-compensation',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:CompensateEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal End Event',",
                "    actionName: 'replace-with-signal-end',",
                "    className: 'bpmn-icon-end-event-signal',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Terminate End Event',",
                "    actionName: 'replace-with-terminate-end',",
                "    className: 'bpmn-icon-end-event-terminate',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:TerminateEventDefinition'",
                "    }",
                "  }",
                "];",
                "",
                "export var GATEWAY = [",
                "  {",
                "    label: 'Exclusive Gateway',",
                "    actionName: 'replace-with-exclusive-gateway',",
                "    className: 'bpmn-icon-gateway-xor',",
                "    target: {",
                "      type: 'bpmn:ExclusiveGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Parallel Gateway',",
                "    actionName: 'replace-with-parallel-gateway',",
                "    className: 'bpmn-icon-gateway-parallel',",
                "    target: {",
                "      type: 'bpmn:ParallelGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Inclusive Gateway',",
                "    actionName: 'replace-with-inclusive-gateway',",
                "    className: 'bpmn-icon-gateway-or',",
                "    target: {",
                "      type: 'bpmn:InclusiveGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Complex Gateway',",
                "    actionName: 'replace-with-complex-gateway',",
                "    className: 'bpmn-icon-gateway-complex',",
                "    target: {",
                "      type: 'bpmn:ComplexGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Event based Gateway',",
                "    actionName: 'replace-with-event-based-gateway',",
                "    className: 'bpmn-icon-gateway-eventbased',",
                "    target: {",
                "      type: 'bpmn:EventBasedGateway',",
                "      instantiate: false,",
                "      eventGatewayType: 'Exclusive'",
                "    }",
                "  }",
                "",
                "  // Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194",
                "  // {",
                "  //   label: 'Event based instantiating Gateway',",
                "  //   actionName: 'replace-with-exclusive-event-based-gateway',",
                "  //   className: 'bpmn-icon-exclusive-event-based',",
                "  //   target: {",
                "  //     type: 'bpmn:EventBasedGateway'",
                "  //   },",
                "  //   options: {",
                "  //     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }",
                "  //   }",
                "  // },",
                "  // {",
                "  //   label: 'Parallel Event based instantiating Gateway',",
                "  //   actionName: 'replace-with-parallel-event-based-instantiate-gateway',",
                "  //   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',",
                "  //   target: {",
                "  //     type: 'bpmn:EventBasedGateway'",
                "  //   },",
                "  //   options: {",
                "  //     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }",
                "  //   }",
                "  // }",
                "];",
                "",
                "export var SUBPROCESS_EXPANDED = [",
                "  {",
                "    label: 'Transaction',",
                "    actionName: 'replace-with-transaction',",
                "    className: 'bpmn-icon-transaction',",
                "    target: {",
                "      type: 'bpmn:Transaction',",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Event Sub Process',",
                "    actionName: 'replace-with-event-subprocess',",
                "    className: 'bpmn-icon-event-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      triggeredByEvent: true,",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Sub Process (collapsed)',",
                "    actionName: 'replace-with-collapsed-subprocess',",
                "    className: 'bpmn-icon-subprocess-collapsed',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      isExpanded: false",
                "    }",
                "  }",
                "];",
                "",
                "export var TRANSACTION = [",
                "  {",
                "    label: 'Sub Process',",
                "    actionName: 'replace-with-subprocess',",
                "    className: 'bpmn-icon-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Event Sub Process',",
                "    actionName: 'replace-with-event-subprocess',",
                "    className: 'bpmn-icon-event-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      triggeredByEvent: true,",
                "      isExpanded: true",
                "    }",
                "  }",
                "];",
                "",
                "export var EVENT_SUB_PROCESS = [",
                "  {",
                "    label: 'Sub Process',",
                "    actionName: 'replace-with-subprocess',",
                "    className: 'bpmn-icon-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Transaction',",
                "    actionName: 'replace-with-transaction',",
                "    className: 'bpmn-icon-transaction',",
                "    target: {",
                "      type: 'bpmn:Transaction',",
                "      isExpanded: true",
                "    }",
                "  }",
                "];",
                "",
                "export var TASK = [",
                "  {",
                "    label: 'Task',",
                "    actionName: 'replace-with-task',",
                "    className: 'bpmn-icon-task',",
                "    target: {",
                "      type: 'bpmn:Task'",
                "    }",
                "  },",
                "  {",
                "    label: 'Send Task',",
                "    actionName: 'replace-with-send-task',",
                "    className: 'bpmn-icon-send',",
                "    target: {",
                "      type: 'bpmn:SendTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Receive Task',",
                "    actionName: 'replace-with-receive-task',",
                "    className: 'bpmn-icon-receive',",
                "    target: {",
                "      type: 'bpmn:ReceiveTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'User Task',",
                "    actionName: 'replace-with-user-task',",
                "    className: 'bpmn-icon-user',",
                "    target: {",
                "      type: 'bpmn:UserTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Manual Task',",
                "    actionName: 'replace-with-manual-task',",
                "    className: 'bpmn-icon-manual',",
                "    target: {",
                "      type: 'bpmn:ManualTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Business Rule Task',",
                "    actionName: 'replace-with-rule-task',",
                "    className: 'bpmn-icon-business-rule',",
                "    target: {",
                "      type: 'bpmn:BusinessRuleTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Service Task',",
                "    actionName: 'replace-with-service-task',",
                "    className: 'bpmn-icon-service',",
                "    target: {",
                "      type: 'bpmn:ServiceTask'"
            ]
        },
        "2": {
            "class_name": "ReplaceMenuProvider (not found) 26-526",
            "file_path": "lib/features/popup-menu/ReplaceMenuProvider.js",
            "class_details": [
                {
                    "name": "ReplaceMenuProvider",
                    "start_line": 26,
                    "end_line": 526
                }
            ],
            "class_code": [
                "export default function ReplaceMenuProvider(",
                "    popupMenu, modeling, moddle,",
                "    bpmnReplace, rules, translate) {",
                "",
                "  this._popupMenu = popupMenu;",
                "  this._modeling = modeling;",
                "  this._moddle = moddle;",
                "  this._bpmnReplace = bpmnReplace;",
                "  this._rules = rules;",
                "  this._translate = translate;",
                "",
                "  this.register();",
                "}",
                "",
                "ReplaceMenuProvider.$inject = [",
                "  'popupMenu',",
                "  'modeling',",
                "  'moddle',",
                "  'bpmnReplace',",
                "  'rules',",
                "  'translate'",
                "];",
                "",
                "",
                "/**",
                " * Register replace menu provider in the popup menu",
                " */",
                "ReplaceMenuProvider.prototype.register = function() {",
                "  this._popupMenu.registerProvider('bpmn-replace', this);",
                "};",
                "",
                "",
                "/**",
                " * Get all entries from replaceOptions for the given element and apply filters",
                " * on them. Get for example only elements, which are different from the current one.",
                " *",
                " * @param {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu entry items",
                " */",
                "ReplaceMenuProvider.prototype.getEntries = function(element) {",
                "",
                "  var businessObject = element.businessObject;",
                "",
                "  var rules = this._rules;",
                "",
                "  var entries;",
                "",
                "  if (!rules.allowed('shape.replace', { element: element })) {",
                "    return [];",
                "  }",
                "",
                "  var differentType = isDifferentType(element);",
                "",
                "  // start events outside sub processes",
                "  if (is(businessObject, 'bpmn:StartEvent') && !is(businessObject.$parent, 'bpmn:SubProcess')) {",
                "",
                "    entries = filter(replaceOptions.START_EVENT, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // expanded/collapsed pools",
                "  if (is(businessObject, 'bpmn:Participant')) {",
                "",
                "    entries = filter(replaceOptions.PARTICIPANT, function(entry) {",
                "      return isExpanded(businessObject) !== entry.target.isExpanded;",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // start events inside event sub processes",
                "  if (is(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {",
                "    entries = filter(replaceOptions.EVENT_SUB_PROCESS_START_EVENT, function(entry) {",
                "",
                "      var target = entry.target;",
                "",
                "      var isInterrupting = target.isInterrupting !== false;",
                "",
                "      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting;",
                "",
                "      // filters elements which types and event definition are equal but have have different interrupting types",
                "      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;",
                "",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // start events inside sub processes",
                "  if (is(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)",
                "      && is(businessObject.$parent, 'bpmn:SubProcess')) {",
                "    entries = filter(replaceOptions.START_EVENT_SUB_PROCESS, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // end events",
                "  if (is(businessObject, 'bpmn:EndEvent')) {",
                "",
                "    entries = filter(replaceOptions.END_EVENT, function(entry) {",
                "      var target = entry.target;",
                "",
                "      // hide cancel end events outside transactions",
                "      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is(businessObject.$parent, 'bpmn:Transaction')) {",
                "        return false;",
                "      }",
                "",
                "      return differentType(entry);",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // boundary events",
                "  if (is(businessObject, 'bpmn:BoundaryEvent')) {",
                "",
                "    entries = filter(replaceOptions.BOUNDARY_EVENT, function(entry) {",
                "",
                "      var target = entry.target;",
                "",
                "      if (target.eventDefinition == 'bpmn:CancelEventDefinition' &&",
                "         !is(businessObject.attachedToRef, 'bpmn:Transaction')) {",
                "        return false;",
                "      }",
                "      var cancelActivity = target.cancelActivity !== false;",
                "",
                "      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;",
                "",
                "      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // intermediate events",
                "  if (is(businessObject, 'bpmn:IntermediateCatchEvent') ||",
                "      is(businessObject, 'bpmn:IntermediateThrowEvent')) {",
                "",
                "    entries = filter(replaceOptions.INTERMEDIATE_EVENT, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // gateways",
                "  if (is(businessObject, 'bpmn:Gateway')) {",
                "",
                "    entries = filter(replaceOptions.GATEWAY, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // transactions",
                "  if (is(businessObject, 'bpmn:Transaction')) {",
                "",
                "    entries = filter(replaceOptions.TRANSACTION, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // expanded event sub processes",
                "  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {",
                "",
                "    entries = filter(replaceOptions.EVENT_SUB_PROCESS, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // expanded sub processes",
                "  if (is(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {",
                "",
                "    entries = filter(replaceOptions.SUBPROCESS_EXPANDED, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // collapsed ad hoc sub processes",
                "  if (is(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {",
                "",
                "    entries = filter(replaceOptions.TASK, function(entry) {",
                "",
                "      var target = entry.target;",
                "",
                "      var isTargetSubProcess = target.type === 'bpmn:SubProcess';",
                "",
                "      var isTargetExpanded = target.isExpanded === true;",
                "",
                "      return isDifferentType(element, target) && (!isTargetSubProcess || isTargetExpanded);",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // sequence flows",
                "  if (is(businessObject, 'bpmn:SequenceFlow')) {",
                "    return this._createSequenceFlowEntries(element, replaceOptions.SEQUENCE_FLOW);",
                "  }",
                "",
                "  // flow nodes",
                "  if (is(businessObject, 'bpmn:FlowNode')) {",
                "    entries = filter(replaceOptions.TASK, differentType);",
                "",
                "    // collapsed SubProcess can not be replaced with itself",
                "    if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {",
                "      entries = filter(entries, function(entry) {",
                "        return entry.label !== 'Sub Process (collapsed)';",
                "      });",
                "    }",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  return [];",
                "};",
                "",
                "",
                "/**",
                " * Get a list of header items for the given element. This includes buttons",
                " * for multi instance markers and for the ad hoc marker.",
                " *",
                " * @param {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu entry items",
                " */",
                "ReplaceMenuProvider.prototype.getHeaderEntries = function(element) {",
                "",
                "  var headerEntries = [];",
                "",
                "  if (is(element, 'bpmn:Activity') && !isEventSubProcess(element)) {",
                "    headerEntries = headerEntries.concat(this._getLoopEntries(element));",
                "  }",
                "",
                "  if (is(element, 'bpmn:DataObjectReference')) {",
                "    headerEntries = headerEntries.concat(this._getDataObjectIsCollection(element));",
                "  }",
                "",
                "  if (is(element, 'bpmn:SubProcess') &&",
                "      !is(element, 'bpmn:Transaction') &&",
                "      !isEventSubProcess(element)) {",
                "    headerEntries.push(this._getAdHocEntry(element));",
                "  }",
                "",
                "  return headerEntries;",
                "};",
                "",
                "",
                "/**",
                " * Creates an array of menu entry objects for a given element and filters the replaceOptions",
                " * according to a filter function.",
                " *",
                " * @param  {djs.model.Base} element",
                " * @param  {Object} replaceOptions",
                " *",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._createEntries = function(element, replaceOptions) {",
                "  var menuEntries = [];",
                "",
                "  var self = this;",
                "",
                "  forEach(replaceOptions, function(definition) {",
                "    var entry = self._createMenuEntry(definition, element);",
                "",
                "    menuEntries.push(entry);",
                "  });",
                "",
                "  return menuEntries;",
                "};",
                "",
                "/**",
                " * Creates an array of menu entry objects for a given sequence flow.",
                " *",
                " * @param  {djs.model.Base} element",
                " * @param  {Object} replaceOptions",
                "",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._createSequenceFlowEntries = function(element, replaceOptions) {",
                "",
                "  var businessObject = getBusinessObject(element);",
                "",
                "  var menuEntries = [];",
                "",
                "  var modeling = this._modeling,",
                "      moddle = this._moddle;",
                "",
                "  var self = this;",
                "",
                "  forEach(replaceOptions, function(entry) {",
                "",
                "    switch (entry.actionName) {",
                "    case 'replace-with-default-flow':",
                "      if (businessObject.sourceRef.default !== businessObject &&",
                "            (is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||",
                "             is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||",
                "             is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||",
                "             is(businessObject.sourceRef, 'bpmn:Activity'))) {",
                "",
                "        menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          modeling.updateProperties(element.source, { default: businessObject });",
                "        }));",
                "      }",
                "      break;",
                "    case 'replace-with-conditional-flow':",
                "      if (!businessObject.conditionExpression && is(businessObject.sourceRef, 'bpmn:Activity')) {",
                "",
                "        menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          var conditionExpression = moddle.create('bpmn:FormalExpression', { body: '' });",
                "",
                "          modeling.updateProperties(element, { conditionExpression: conditionExpression });",
                "        }));",
                "      }",
                "      break;",
                "    default:",
                "",
                "      // default flows",
                "      if (is(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {",
                "        return menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          modeling.updateProperties(element, { conditionExpression: undefined });",
                "        }));",
                "      }",
                "",
                "      // conditional flows",
                "      if ((is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||",
                "           is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||",
                "           is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||",
                "           is(businessObject.sourceRef, 'bpmn:Activity')) &&",
                "           businessObject.sourceRef.default === businessObject) {",
                "",
                "        return menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          modeling.updateProperties(element.source, { default: undefined });",
                "        }));",
                "      }",
                "    }",
                "  });",
                "",
                "  return menuEntries;",
                "};",
                "",
                "",
                "/**",
                " * Creates and returns a single menu entry item.",
                " *",
                " * @param  {Object} definition a single replace options definition object",
                " * @param  {djs.model.Base} element",
                " * @param  {Function} [action] an action callback function which gets called when",
                " *                             the menu entry is being triggered.",
                " *",
                " * @return {Object} menu entry item",
                " */",
                "ReplaceMenuProvider.prototype._createMenuEntry = function(definition, element, action) {",
                "  var translate = this._translate;",
                "  var replaceElement = this._bpmnReplace.replaceElement;",
                "",
                "  var replaceAction = function() {",
                "    return replaceElement(element, definition.target);",
                "  };",
                "",
                "  action = action || replaceAction;",
                "",
                "  var menuEntry = {",
                "    label: translate(definition.label),",
                "    className: definition.className,",
                "    id: definition.actionName,",
                "    action: action",
                "  };",
                "",
                "  return menuEntry;",
                "};",
                "",
                "/**",
                " * Get a list of menu items containing buttons for multi instance markers",
                " *",
                " * @param  {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._getLoopEntries = function(element) {",
                "",
                "  var self = this;",
                "  var translate = this._translate;",
                "",
                "  function toggleLoopEntry(event, entry) {",
                "    var loopCharacteristics;",
                "",
                "    if (entry.active) {",
                "      loopCharacteristics = undefined;",
                "    } else {",
                "      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);",
                "",
                "      if (entry.options.isSequential) {",
                "        loopCharacteristics.isSequential = entry.options.isSequential;",
                "      }",
                "    }",
                "    self._modeling.updateProperties(element, { loopCharacteristics: loopCharacteristics });",
                "  }",
                "",
                "  var businessObject = getBusinessObject(element),",
                "      loopCharacteristics = businessObject.loopCharacteristics;",
                "",
                "  var isSequential,",
                "      isLoop,",
                "      isParallel;",
                "",
                "  if (loopCharacteristics) {",
                "    isSequential = loopCharacteristics.isSequential;",
                "    isLoop = loopCharacteristics.isSequential === undefined;",
                "    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;",
                "  }",
                "",
                "",
                "  var loopEntries = [",
                "    {",
                "      id: 'toggle-parallel-mi',",
                "      className: 'bpmn-icon-parallel-mi-marker',",
                "      title: translate('Parallel Multi Instance'),",
                "      active: isParallel,",
                "      action: toggleLoopEntry,",
                "      options: {",
                "        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',",
                "        isSequential: false",
                "      }",
                "    },",
                "    {",
                "      id: 'toggle-sequential-mi',",
                "      className: 'bpmn-icon-sequential-mi-marker',",
                "      title: translate('Sequential Multi Instance'),",
                "      active: isSequential,",
                "      action: toggleLoopEntry,",
                "      options: {",
                "        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',",
                "        isSequential: true",
                "      }",
                "    },",
                "    {",
                "      id: 'toggle-loop',",
                "      className: 'bpmn-icon-loop-marker',",
                "      title: translate('Loop'),",
                "      active: isLoop,",
                "      action: toggleLoopEntry,",
                "      options: {",
                "        loopCharacteristics: 'bpmn:StandardLoopCharacteristics'",
                "      }",
                "    }",
                "  ];",
                "  return loopEntries;",
                "};",
                "",
                "/**",
                " * Get a list of menu items containing buttons for multi instance markers",
                " *",
                " * @param  {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._getDataObjectIsCollection = function(element) {",
                "",
                "  var self = this;",
                "  var translate = this._translate;",
                "",
                "  function toggleIsCollection(event, entry) {",
                "    self._modeling.updateModdleProperties(",
                "      element,",
                "      dataObject,",
                "      { isCollection: !entry.active });",
                "  }",
                "",
                "  var dataObject = element.businessObject.dataObjectRef,",
                "      isCollection = dataObject.isCollection;",
                "",
                "  var dataObjectEntries = [",
                "    {",
                "      id: 'toggle-is-collection',",
                "      className: 'bpmn-icon-parallel-mi-marker',",
                "      title: translate('Collection'),",
                "      active: isCollection,",
                "      action: toggleIsCollection,",
                "    }",
                "  ];",
                "  return dataObjectEntries;",
                "};",
                "",
                "",
                "/**",
                " * Get the menu items containing a button for the ad hoc marker",
                " *",
                " * @param  {djs.model.Base} element",
                " *",
                " * @return {Object} a menu item",
                " */",
                "ReplaceMenuProvider.prototype._getAdHocEntry = function(element) {",
                "  var translate = this._translate;",
                "  var businessObject = getBusinessObject(element);",
                "",
                "  var isAdHoc = is(businessObject, 'bpmn:AdHocSubProcess');",
                "",
                "  var replaceElement = this._bpmnReplace.replaceElement;",
                "",
                "  var adHocEntry = {",
                "    id: 'toggle-adhoc',"
            ]
        },
        "3": {
            "class_name": "  (not found) 1-501",
            "file_path": "lib/features/replace/ReplaceOptions.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 501
                }
            ],
            "class_code": [
                "export var START_EVENT = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throwing',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message Start Event',",
                "    actionName: 'replace-with-message-start',",
                "    className: 'bpmn-icon-start-event-message',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Timer Start Event',",
                "    actionName: 'replace-with-timer-start',",
                "    className: 'bpmn-icon-start-event-timer',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:TimerEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Conditional Start Event',",
                "    actionName: 'replace-with-conditional-start',",
                "    className: 'bpmn-icon-start-event-condition',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:ConditionalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal Start Event',",
                "    actionName: 'replace-with-signal-start',",
                "    className: 'bpmn-icon-start-event-signal',",
                "    target: {",
                "      type: 'bpmn:StartEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  }",
                "];",
                "",
                "export var START_EVENT_SUB_PROCESS = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throwing',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  }",
                "];",
                "",
                "export var INTERMEDIATE_EVENT = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message Intermediate Catch Event',",
                "    actionName: 'replace-with-message-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-message',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message Intermediate Throw Event',",
                "    actionName: 'replace-with-message-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-message',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Timer Intermediate Catch Event',",
                "    actionName: 'replace-with-timer-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-timer',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:TimerEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Escalation Intermediate Throw Event',",
                "    actionName: 'replace-with-escalation-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-escalation',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:EscalationEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Conditional Intermediate Catch Event',",
                "    actionName: 'replace-with-conditional-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-condition',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:ConditionalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Link Intermediate Catch Event',",
                "    actionName: 'replace-with-link-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-link',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:LinkEventDefinition',",
                "      eventDefinitionAttrs: {",
                "        name: ''",
                "      }",
                "    }",
                "  },",
                "  {",
                "    label: 'Link Intermediate Throw Event',",
                "    actionName: 'replace-with-link-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-link',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:LinkEventDefinition',",
                "      eventDefinitionAttrs: {",
                "        name: ''",
                "      }",
                "    }",
                "  },",
                "  {",
                "    label: 'Compensation Intermediate Throw Event',",
                "    actionName: 'replace-with-compensation-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-compensation',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:CompensateEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal Intermediate Catch Event',",
                "    actionName: 'replace-with-signal-intermediate-catch',",
                "    className: 'bpmn-icon-intermediate-event-catch-signal',",
                "    target: {",
                "      type: 'bpmn:IntermediateCatchEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal Intermediate Throw Event',",
                "    actionName: 'replace-with-signal-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-throw-signal',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  }",
                "];",
                "",
                "export var END_EVENT = [",
                "  {",
                "    label: 'Start Event',",
                "    actionName: 'replace-with-none-start',",
                "    className: 'bpmn-icon-start-event-none',",
                "    target: {",
                "      type: 'bpmn:StartEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Intermediate Throw Event',",
                "    actionName: 'replace-with-none-intermediate-throw',",
                "    className: 'bpmn-icon-intermediate-event-none',",
                "    target: {",
                "      type: 'bpmn:IntermediateThrowEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'End Event',",
                "    actionName: 'replace-with-none-end',",
                "    className: 'bpmn-icon-end-event-none',",
                "    target: {",
                "      type: 'bpmn:EndEvent'",
                "    }",
                "  },",
                "  {",
                "    label: 'Message End Event',",
                "    actionName: 'replace-with-message-end',",
                "    className: 'bpmn-icon-end-event-message',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:MessageEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Escalation End Event',",
                "    actionName: 'replace-with-escalation-end',",
                "    className: 'bpmn-icon-end-event-escalation',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:EscalationEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Error End Event',",
                "    actionName: 'replace-with-error-end',",
                "    className: 'bpmn-icon-end-event-error',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:ErrorEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Cancel End Event',",
                "    actionName: 'replace-with-cancel-end',",
                "    className: 'bpmn-icon-end-event-cancel',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:CancelEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Compensation End Event',",
                "    actionName: 'replace-with-compensation-end',",
                "    className: 'bpmn-icon-end-event-compensation',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:CompensateEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Signal End Event',",
                "    actionName: 'replace-with-signal-end',",
                "    className: 'bpmn-icon-end-event-signal',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:SignalEventDefinition'",
                "    }",
                "  },",
                "  {",
                "    label: 'Terminate End Event',",
                "    actionName: 'replace-with-terminate-end',",
                "    className: 'bpmn-icon-end-event-terminate',",
                "    target: {",
                "      type: 'bpmn:EndEvent',",
                "      eventDefinitionType: 'bpmn:TerminateEventDefinition'",
                "    }",
                "  }",
                "];",
                "",
                "export var GATEWAY = [",
                "  {",
                "    label: 'Exclusive Gateway',",
                "    actionName: 'replace-with-exclusive-gateway',",
                "    className: 'bpmn-icon-gateway-xor',",
                "    target: {",
                "      type: 'bpmn:ExclusiveGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Parallel Gateway',",
                "    actionName: 'replace-with-parallel-gateway',",
                "    className: 'bpmn-icon-gateway-parallel',",
                "    target: {",
                "      type: 'bpmn:ParallelGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Inclusive Gateway',",
                "    actionName: 'replace-with-inclusive-gateway',",
                "    className: 'bpmn-icon-gateway-or',",
                "    target: {",
                "      type: 'bpmn:InclusiveGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Complex Gateway',",
                "    actionName: 'replace-with-complex-gateway',",
                "    className: 'bpmn-icon-gateway-complex',",
                "    target: {",
                "      type: 'bpmn:ComplexGateway'",
                "    }",
                "  },",
                "  {",
                "    label: 'Event based Gateway',",
                "    actionName: 'replace-with-event-based-gateway',",
                "    className: 'bpmn-icon-gateway-eventbased',",
                "    target: {",
                "      type: 'bpmn:EventBasedGateway',",
                "      instantiate: false,",
                "      eventGatewayType: 'Exclusive'",
                "    }",
                "  }",
                "",
                "  // Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194",
                "  // {",
                "  //   label: 'Event based instantiating Gateway',",
                "  //   actionName: 'replace-with-exclusive-event-based-gateway',",
                "  //   className: 'bpmn-icon-exclusive-event-based',",
                "  //   target: {",
                "  //     type: 'bpmn:EventBasedGateway'",
                "  //   },",
                "  //   options: {",
                "  //     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }",
                "  //   }",
                "  // },",
                "  // {",
                "  //   label: 'Parallel Event based instantiating Gateway',",
                "  //   actionName: 'replace-with-parallel-event-based-instantiate-gateway',",
                "  //   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',",
                "  //   target: {",
                "  //     type: 'bpmn:EventBasedGateway'",
                "  //   },",
                "  //   options: {",
                "  //     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }",
                "  //   }",
                "  // }",
                "];",
                "",
                "export var SUBPROCESS_EXPANDED = [",
                "  {",
                "    label: 'Transaction',",
                "    actionName: 'replace-with-transaction',",
                "    className: 'bpmn-icon-transaction',",
                "    target: {",
                "      type: 'bpmn:Transaction',",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Event Sub Process',",
                "    actionName: 'replace-with-event-subprocess',",
                "    className: 'bpmn-icon-event-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      triggeredByEvent: true,",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Sub Process (collapsed)',",
                "    actionName: 'replace-with-collapsed-subprocess',",
                "    className: 'bpmn-icon-subprocess-collapsed',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      isExpanded: false",
                "    }",
                "  }",
                "];",
                "",
                "export var TRANSACTION = [",
                "  {",
                "    label: 'Sub Process',",
                "    actionName: 'replace-with-subprocess',",
                "    className: 'bpmn-icon-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Event Sub Process',",
                "    actionName: 'replace-with-event-subprocess',",
                "    className: 'bpmn-icon-event-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      triggeredByEvent: true,",
                "      isExpanded: true",
                "    }",
                "  }",
                "];",
                "",
                "export var EVENT_SUB_PROCESS = [",
                "  {",
                "    label: 'Sub Process',",
                "    actionName: 'replace-with-subprocess',",
                "    className: 'bpmn-icon-subprocess-expanded',",
                "    target: {",
                "      type: 'bpmn:SubProcess',",
                "      isExpanded: true",
                "    }",
                "  },",
                "  {",
                "    label: 'Transaction',",
                "    actionName: 'replace-with-transaction',",
                "    className: 'bpmn-icon-transaction',",
                "    target: {",
                "      type: 'bpmn:Transaction',",
                "      isExpanded: true",
                "    }",
                "  }",
                "];",
                "",
                "export var TASK = [",
                "  {",
                "    label: 'Task',",
                "    actionName: 'replace-with-task',",
                "    className: 'bpmn-icon-task',",
                "    target: {",
                "      type: 'bpmn:Task'",
                "    }",
                "  },",
                "  {",
                "    label: 'Send Task',",
                "    actionName: 'replace-with-send-task',",
                "    className: 'bpmn-icon-send',",
                "    target: {",
                "      type: 'bpmn:SendTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Receive Task',",
                "    actionName: 'replace-with-receive-task',",
                "    className: 'bpmn-icon-receive',",
                "    target: {",
                "      type: 'bpmn:ReceiveTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'User Task',",
                "    actionName: 'replace-with-user-task',",
                "    className: 'bpmn-icon-user',",
                "    target: {",
                "      type: 'bpmn:UserTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Manual Task',",
                "    actionName: 'replace-with-manual-task',",
                "    className: 'bpmn-icon-manual',",
                "    target: {",
                "      type: 'bpmn:ManualTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Business Rule Task',",
                "    actionName: 'replace-with-rule-task',",
                "    className: 'bpmn-icon-business-rule',",
                "    target: {",
                "      type: 'bpmn:BusinessRuleTask'",
                "    }",
                "  },",
                "  {",
                "    label: 'Service Task',",
                "    actionName: 'replace-with-service-task',",
                "    className: 'bpmn-icon-service',",
                "    target: {",
                "      type: 'bpmn:ServiceTask'"
            ]
        },
        "4": {
            "class_name": "  (not found) 1-501",
            "file_path": "lib/features/popup-menu/ReplaceMenuProvider.js",
            "class_details": [
                {
                    "name": " ",
                    "start_line": 1,
                    "end_line": 501
                }
            ],
            "class_code": [
                "import {",
                "  getBusinessObject,",
                "  is",
                "} from '../../util/ModelUtil';",
                "",
                "import {",
                "  isEventSubProcess,",
                "  isExpanded",
                "} from '../../util/DiUtil';",
                "",
                "import {",
                "  isDifferentType",
                "} from './util/TypeUtil';",
                "",
                "import {",
                "  forEach,",
                "  filter",
                "} from 'min-dash';",
                "",
                "import * as replaceOptions from '../replace/ReplaceOptions';",
                "",
                "",
                "/**",
                " * This module is an element agnostic replace menu provider for the popup menu.",
                " */",
                "export default function ReplaceMenuProvider(",
                "    popupMenu, modeling, moddle,",
                "    bpmnReplace, rules, translate) {",
                "",
                "  this._popupMenu = popupMenu;",
                "  this._modeling = modeling;",
                "  this._moddle = moddle;",
                "  this._bpmnReplace = bpmnReplace;",
                "  this._rules = rules;",
                "  this._translate = translate;",
                "",
                "  this.register();",
                "}",
                "",
                "ReplaceMenuProvider.$inject = [",
                "  'popupMenu',",
                "  'modeling',",
                "  'moddle',",
                "  'bpmnReplace',",
                "  'rules',",
                "  'translate'",
                "];",
                "",
                "",
                "/**",
                " * Register replace menu provider in the popup menu",
                " */",
                "ReplaceMenuProvider.prototype.register = function() {",
                "  this._popupMenu.registerProvider('bpmn-replace', this);",
                "};",
                "",
                "",
                "/**",
                " * Get all entries from replaceOptions for the given element and apply filters",
                " * on them. Get for example only elements, which are different from the current one.",
                " *",
                " * @param {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu entry items",
                " */",
                "ReplaceMenuProvider.prototype.getEntries = function(element) {",
                "",
                "  var businessObject = element.businessObject;",
                "",
                "  var rules = this._rules;",
                "",
                "  var entries;",
                "",
                "  if (!rules.allowed('shape.replace', { element: element })) {",
                "    return [];",
                "  }",
                "",
                "  var differentType = isDifferentType(element);",
                "",
                "  // start events outside sub processes",
                "  if (is(businessObject, 'bpmn:StartEvent') && !is(businessObject.$parent, 'bpmn:SubProcess')) {",
                "",
                "    entries = filter(replaceOptions.START_EVENT, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // expanded/collapsed pools",
                "  if (is(businessObject, 'bpmn:Participant')) {",
                "",
                "    entries = filter(replaceOptions.PARTICIPANT, function(entry) {",
                "      return isExpanded(businessObject) !== entry.target.isExpanded;",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // start events inside event sub processes",
                "  if (is(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {",
                "    entries = filter(replaceOptions.EVENT_SUB_PROCESS_START_EVENT, function(entry) {",
                "",
                "      var target = entry.target;",
                "",
                "      var isInterrupting = target.isInterrupting !== false;",
                "",
                "      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting;",
                "",
                "      // filters elements which types and event definition are equal but have have different interrupting types",
                "      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;",
                "",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // start events inside sub processes",
                "  if (is(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)",
                "      && is(businessObject.$parent, 'bpmn:SubProcess')) {",
                "    entries = filter(replaceOptions.START_EVENT_SUB_PROCESS, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // end events",
                "  if (is(businessObject, 'bpmn:EndEvent')) {",
                "",
                "    entries = filter(replaceOptions.END_EVENT, function(entry) {",
                "      var target = entry.target;",
                "",
                "      // hide cancel end events outside transactions",
                "      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is(businessObject.$parent, 'bpmn:Transaction')) {",
                "        return false;",
                "      }",
                "",
                "      return differentType(entry);",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // boundary events",
                "  if (is(businessObject, 'bpmn:BoundaryEvent')) {",
                "",
                "    entries = filter(replaceOptions.BOUNDARY_EVENT, function(entry) {",
                "",
                "      var target = entry.target;",
                "",
                "      if (target.eventDefinition == 'bpmn:CancelEventDefinition' &&",
                "         !is(businessObject.attachedToRef, 'bpmn:Transaction')) {",
                "        return false;",
                "      }",
                "      var cancelActivity = target.cancelActivity !== false;",
                "",
                "      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;",
                "",
                "      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // intermediate events",
                "  if (is(businessObject, 'bpmn:IntermediateCatchEvent') ||",
                "      is(businessObject, 'bpmn:IntermediateThrowEvent')) {",
                "",
                "    entries = filter(replaceOptions.INTERMEDIATE_EVENT, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // gateways",
                "  if (is(businessObject, 'bpmn:Gateway')) {",
                "",
                "    entries = filter(replaceOptions.GATEWAY, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // transactions",
                "  if (is(businessObject, 'bpmn:Transaction')) {",
                "",
                "    entries = filter(replaceOptions.TRANSACTION, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // expanded event sub processes",
                "  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {",
                "",
                "    entries = filter(replaceOptions.EVENT_SUB_PROCESS, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // expanded sub processes",
                "  if (is(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {",
                "",
                "    entries = filter(replaceOptions.SUBPROCESS_EXPANDED, differentType);",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // collapsed ad hoc sub processes",
                "  if (is(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {",
                "",
                "    entries = filter(replaceOptions.TASK, function(entry) {",
                "",
                "      var target = entry.target;",
                "",
                "      var isTargetSubProcess = target.type === 'bpmn:SubProcess';",
                "",
                "      var isTargetExpanded = target.isExpanded === true;",
                "",
                "      return isDifferentType(element, target) && (!isTargetSubProcess || isTargetExpanded);",
                "    });",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  // sequence flows",
                "  if (is(businessObject, 'bpmn:SequenceFlow')) {",
                "    return this._createSequenceFlowEntries(element, replaceOptions.SEQUENCE_FLOW);",
                "  }",
                "",
                "  // flow nodes",
                "  if (is(businessObject, 'bpmn:FlowNode')) {",
                "    entries = filter(replaceOptions.TASK, differentType);",
                "",
                "    // collapsed SubProcess can not be replaced with itself",
                "    if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {",
                "      entries = filter(entries, function(entry) {",
                "        return entry.label !== 'Sub Process (collapsed)';",
                "      });",
                "    }",
                "",
                "    return this._createEntries(element, entries);",
                "  }",
                "",
                "  return [];",
                "};",
                "",
                "",
                "/**",
                " * Get a list of header items for the given element. This includes buttons",
                " * for multi instance markers and for the ad hoc marker.",
                " *",
                " * @param {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu entry items",
                " */",
                "ReplaceMenuProvider.prototype.getHeaderEntries = function(element) {",
                "",
                "  var headerEntries = [];",
                "",
                "  if (is(element, 'bpmn:Activity') && !isEventSubProcess(element)) {",
                "    headerEntries = headerEntries.concat(this._getLoopEntries(element));",
                "  }",
                "",
                "  if (is(element, 'bpmn:DataObjectReference')) {",
                "    headerEntries = headerEntries.concat(this._getDataObjectIsCollection(element));",
                "  }",
                "",
                "  if (is(element, 'bpmn:SubProcess') &&",
                "      !is(element, 'bpmn:Transaction') &&",
                "      !isEventSubProcess(element)) {",
                "    headerEntries.push(this._getAdHocEntry(element));",
                "  }",
                "",
                "  return headerEntries;",
                "};",
                "",
                "",
                "/**",
                " * Creates an array of menu entry objects for a given element and filters the replaceOptions",
                " * according to a filter function.",
                " *",
                " * @param  {djs.model.Base} element",
                " * @param  {Object} replaceOptions",
                " *",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._createEntries = function(element, replaceOptions) {",
                "  var menuEntries = [];",
                "",
                "  var self = this;",
                "",
                "  forEach(replaceOptions, function(definition) {",
                "    var entry = self._createMenuEntry(definition, element);",
                "",
                "    menuEntries.push(entry);",
                "  });",
                "",
                "  return menuEntries;",
                "};",
                "",
                "/**",
                " * Creates an array of menu entry objects for a given sequence flow.",
                " *",
                " * @param  {djs.model.Base} element",
                " * @param  {Object} replaceOptions",
                "",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._createSequenceFlowEntries = function(element, replaceOptions) {",
                "",
                "  var businessObject = getBusinessObject(element);",
                "",
                "  var menuEntries = [];",
                "",
                "  var modeling = this._modeling,",
                "      moddle = this._moddle;",
                "",
                "  var self = this;",
                "",
                "  forEach(replaceOptions, function(entry) {",
                "",
                "    switch (entry.actionName) {",
                "    case 'replace-with-default-flow':",
                "      if (businessObject.sourceRef.default !== businessObject &&",
                "            (is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||",
                "             is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||",
                "             is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||",
                "             is(businessObject.sourceRef, 'bpmn:Activity'))) {",
                "",
                "        menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          modeling.updateProperties(element.source, { default: businessObject });",
                "        }));",
                "      }",
                "      break;",
                "    case 'replace-with-conditional-flow':",
                "      if (!businessObject.conditionExpression && is(businessObject.sourceRef, 'bpmn:Activity')) {",
                "",
                "        menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          var conditionExpression = moddle.create('bpmn:FormalExpression', { body: '' });",
                "",
                "          modeling.updateProperties(element, { conditionExpression: conditionExpression });",
                "        }));",
                "      }",
                "      break;",
                "    default:",
                "",
                "      // default flows",
                "      if (is(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {",
                "        return menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          modeling.updateProperties(element, { conditionExpression: undefined });",
                "        }));",
                "      }",
                "",
                "      // conditional flows",
                "      if ((is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||",
                "           is(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||",
                "           is(businessObject.sourceRef, 'bpmn:ComplexGateway') ||",
                "           is(businessObject.sourceRef, 'bpmn:Activity')) &&",
                "           businessObject.sourceRef.default === businessObject) {",
                "",
                "        return menuEntries.push(self._createMenuEntry(entry, element, function() {",
                "          modeling.updateProperties(element.source, { default: undefined });",
                "        }));",
                "      }",
                "    }",
                "  });",
                "",
                "  return menuEntries;",
                "};",
                "",
                "",
                "/**",
                " * Creates and returns a single menu entry item.",
                " *",
                " * @param  {Object} definition a single replace options definition object",
                " * @param  {djs.model.Base} element",
                " * @param  {Function} [action] an action callback function which gets called when",
                " *                             the menu entry is being triggered.",
                " *",
                " * @return {Object} menu entry item",
                " */",
                "ReplaceMenuProvider.prototype._createMenuEntry = function(definition, element, action) {",
                "  var translate = this._translate;",
                "  var replaceElement = this._bpmnReplace.replaceElement;",
                "",
                "  var replaceAction = function() {",
                "    return replaceElement(element, definition.target);",
                "  };",
                "",
                "  action = action || replaceAction;",
                "",
                "  var menuEntry = {",
                "    label: translate(definition.label),",
                "    className: definition.className,",
                "    id: definition.actionName,",
                "    action: action",
                "  };",
                "",
                "  return menuEntry;",
                "};",
                "",
                "/**",
                " * Get a list of menu items containing buttons for multi instance markers",
                " *",
                " * @param  {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._getLoopEntries = function(element) {",
                "",
                "  var self = this;",
                "  var translate = this._translate;",
                "",
                "  function toggleLoopEntry(event, entry) {",
                "    var loopCharacteristics;",
                "",
                "    if (entry.active) {",
                "      loopCharacteristics = undefined;",
                "    } else {",
                "      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);",
                "",
                "      if (entry.options.isSequential) {",
                "        loopCharacteristics.isSequential = entry.options.isSequential;",
                "      }",
                "    }",
                "    self._modeling.updateProperties(element, { loopCharacteristics: loopCharacteristics });",
                "  }",
                "",
                "  var businessObject = getBusinessObject(element),",
                "      loopCharacteristics = businessObject.loopCharacteristics;",
                "",
                "  var isSequential,",
                "      isLoop,",
                "      isParallel;",
                "",
                "  if (loopCharacteristics) {",
                "    isSequential = loopCharacteristics.isSequential;",
                "    isLoop = loopCharacteristics.isSequential === undefined;",
                "    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;",
                "  }",
                "",
                "",
                "  var loopEntries = [",
                "    {",
                "      id: 'toggle-parallel-mi',",
                "      className: 'bpmn-icon-parallel-mi-marker',",
                "      title: translate('Parallel Multi Instance'),",
                "      active: isParallel,",
                "      action: toggleLoopEntry,",
                "      options: {",
                "        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',",
                "        isSequential: false",
                "      }",
                "    },",
                "    {",
                "      id: 'toggle-sequential-mi',",
                "      className: 'bpmn-icon-sequential-mi-marker',",
                "      title: translate('Sequential Multi Instance'),",
                "      active: isSequential,",
                "      action: toggleLoopEntry,",
                "      options: {",
                "        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',",
                "        isSequential: true",
                "      }",
                "    },",
                "    {",
                "      id: 'toggle-loop',",
                "      className: 'bpmn-icon-loop-marker',",
                "      title: translate('Loop'),",
                "      active: isLoop,",
                "      action: toggleLoopEntry,",
                "      options: {",
                "        loopCharacteristics: 'bpmn:StandardLoopCharacteristics'",
                "      }",
                "    }",
                "  ];",
                "  return loopEntries;",
                "};",
                "",
                "/**",
                " * Get a list of menu items containing buttons for multi instance markers",
                " *",
                " * @param  {djs.model.Base} element",
                " *",
                " * @return {Array<Object>} a list of menu items",
                " */",
                "ReplaceMenuProvider.prototype._getDataObjectIsCollection = function(element) {",
                "",
                "  var self = this;",
                "  var translate = this._translate;",
                "",
                "  function toggleIsCollection(event, entry) {",
                "    self._modeling.updateModdleProperties(",
                "      element,",
                "      dataObject,",
                "      { isCollection: !entry.active });",
                "  }",
                "",
                "  var dataObject = element.businessObject.dataObjectRef,",
                "      isCollection = dataObject.isCollection;",
                "",
                "  var dataObjectEntries = [",
                "    {",
                "      id: 'toggle-is-collection',",
                "      className: 'bpmn-icon-parallel-mi-marker',",
                "      title: translate('Collection'),"
            ]
        }
    },
    "bug_functions": {
        "5": {
            "function_name": "isDifferentType (not found) ",
            "file_path": "lib/features/popup-menu/util/TypeUtil.js",
            "function_details": [
                {
                    "name": "isDifferentType",
                    "start_line": 1,
                    "end_line": 44
                }
            ],
            "function_code": [
                "import {",
                "  getBusinessObject",
                "} from '../../../util/ModelUtil';",
                "",
                "import {",
                "  isExpanded",
                "} from '../../../util/DiUtil';",
                "",
                "",
                "/**",
                " * Returns true, if an element is from a different type",
                " * than a target definition. Takes into account the type,",
                " * event definition type and triggeredByEvent property.",
                " *",
                " * @param {djs.model.Base} element",
                " *",
                " * @return {boolean}",
                " */",
                "export function isDifferentType(element) {",
                "",
                "  return function(entry) {",
                "    var target = entry.target;",
                "",
                "    var businessObject = getBusinessObject(element),",
                "        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];",
                "",
                "    var isTypeEqual = businessObject.$type === target.type;",
                "",
                "    var isEventDefinitionEqual = (",
                "      (eventDefinition && eventDefinition.$type) === target.eventDefinitionType",
                "    );",
                "",
                "    var isTriggeredByEventEqual = (",
                "      businessObject.triggeredByEvent === target.triggeredByEvent",
                "    );",
                "",
                "    var isExpandedEqual = (",
                "      target.isExpanded === undefined ||",
                "      target.isExpanded === isExpanded(businessObject)",
                "    );",
                "",
                "    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;",
                "  };",
                "}"
            ]
        }
    }
}