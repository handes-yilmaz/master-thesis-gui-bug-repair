{
    "1/1": "### Bug Scenario and Root Cause\n\nThe bug report describes an issue with the Camunda Modeler where the deep linking overlay for subprocesses is lost when using a multi-diagram plugin. The image shows a BPMN diagram with subprocesses, and the overlay for deep linking is not visible after certain actions. The root cause seems to be related to the handling of overlays when subprocesses are toggled or moved, which may not be correctly updating or maintaining the overlay state.\n\n### Bug Location and Fix\n\nThe issue likely resides in the `DrilldownOverlayBehavior.js` file, where overlays are added or removed based on the subprocess state. The logic for maintaining overlays when subprocesses are toggled or moved needs to be adjusted to ensure overlays are consistently displayed.\n\n### Patches\n\n```javascript\n### lib/features/drilldown/DrilldownOverlayBehavior.js\n<<<<<<< SEARCH\n  this.executed('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    // Add overlay to the collapsed shape\n    if (self.canDrillDown(shape)) {\n      self.addOverlay(shape);\n    } else {\n      self.removeOverlay(shape);\n    }\n  }, true);\n=======\n  this.executed('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    // Always update overlay visibility\n    self.updateDrilldownOverlay(shape);\n\n    // Add overlay to the collapsed shape\n    if (self.canDrillDown(shape)) {\n      self.addOverlay(shape);\n    } else {\n      self.removeOverlay(shape);\n    }\n  }, true);\n>>>>>>> REPLACE\n```\n\n```javascript\n### lib/features/drilldown/DrilldownOverlayBehavior.js\n<<<<<<< SEARCH\n  this.executed(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,\n    function(context) {\n      var oldParent = context.oldParent,\n          newParent = context.newParent || context.parent,\n          shape = context.shape;\n\n      // Add overlay to the collapsed shape\n      if (self.canDrillDown(shape)) {\n        self.addOverlay(shape);\n      }\n\n      self.updateDrilldownOverlay(oldParent);\n      self.updateDrilldownOverlay(newParent);\n      self.updateDrilldownOverlay(shape);\n    }, true);\n=======\n  this.executed(['shape.create', 'shape.move', 'shape.delete'], LOW_PRIORITY,\n    function(context) {\n      var oldParent = context.oldParent,\n          newParent = context.newParent || context.parent,\n          shape = context.shape;\n\n      // Always update overlay visibility\n      self.updateDrilldownOverlay(shape);\n\n      // Add overlay to the collapsed shape\n      if (self.canDrillDown(shape)) {\n        self.addOverlay(shape);\n      }\n\n      self.updateDrilldownOverlay(oldParent);\n      self.updateDrilldownOverlay(newParent);\n      self.updateDrilldownOverlay(shape);\n    }, true);\n>>>>>>> REPLACE\n```\n\nThese patches ensure that the overlay visibility is updated consistently, which should help maintain the deep linking overlay for subprocesses."
}